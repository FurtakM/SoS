// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8103 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 34466 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 34466 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 34466 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 34466 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 34466 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34466 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 34466 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 34466 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 34466 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 34466 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 34466 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 34466 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 34466 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 34466 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 34466 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 34466 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 34466 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 34466 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 34466 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 34466 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 34466 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 34466 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 70832 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 70832 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 70832 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 70832 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 70832 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 70832 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 70832 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 70832 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ; end_of_file
7765: PPOPN 1
7767: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL 14528 0 1
// if un = Heike then
7777: LD_VAR 0 1
7781: PUSH
7782: LD_EXP 21
7786: EQUAL
7787: IFFALSE 7796
// YouLost ( Heike ) ;
7789: LD_STRING Heike
7791: PPUSH
7792: CALL_OW 104
// if un in apeSoldGroup then
7796: LD_VAR 0 1
7800: PUSH
7801: LD_EXP 42
7805: IN
7806: IFFALSE 7824
// apeSoldGroup := apeSoldGroup diff un ;
7808: LD_ADDR_EXP 42
7812: PUSH
7813: LD_EXP 42
7817: PUSH
7818: LD_VAR 0 1
7822: DIFF
7823: ST_TO_ADDR
// if un in apeEngGroup then
7824: LD_VAR 0 1
7828: PUSH
7829: LD_EXP 43
7833: IN
7834: IFFALSE 7852
// apeEngGroup := apeEngGroup diff un ;
7836: LD_ADDR_EXP 43
7840: PUSH
7841: LD_EXP 43
7845: PUSH
7846: LD_VAR 0 1
7850: DIFF
7851: ST_TO_ADDR
// if un in oilBaseGuard then
7852: LD_VAR 0 1
7856: PUSH
7857: LD_EXP 38
7861: IN
7862: IFFALSE 7880
// oilBaseGuard := oilBaseGuard diff un ;
7864: LD_ADDR_EXP 38
7868: PUSH
7869: LD_EXP 38
7873: PUSH
7874: LD_VAR 0 1
7878: DIFF
7879: ST_TO_ADDR
// if un in ruNorthGroup then
7880: LD_VAR 0 1
7884: PUSH
7885: LD_EXP 39
7889: IN
7890: IFFALSE 7908
// ruNorthGroup := ruNorthGroup diff un ;
7892: LD_ADDR_EXP 39
7896: PUSH
7897: LD_EXP 39
7901: PUSH
7902: LD_VAR 0 1
7906: DIFF
7907: ST_TO_ADDR
// if un in ruSouthGroup then
7908: LD_VAR 0 1
7912: PUSH
7913: LD_EXP 40
7917: IN
7918: IFFALSE 7936
// ruSouthGroup := ruSouthGroup diff un ;
7920: LD_ADDR_EXP 40
7924: PUSH
7925: LD_EXP 40
7929: PUSH
7930: LD_VAR 0 1
7934: DIFF
7935: ST_TO_ADDR
// if un in ruConvoySquad then
7936: LD_VAR 0 1
7940: PUSH
7941: LD_EXP 41
7945: IN
7946: IFFALSE 7964
// ruConvoySquad := ruConvoySquad diff un ;
7948: LD_ADDR_EXP 41
7952: PUSH
7953: LD_EXP 41
7957: PUSH
7958: LD_VAR 0 1
7962: DIFF
7963: ST_TO_ADDR
// end ;
7964: PPOPN 1
7966: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7967: LD_VAR 0 1
7971: PPUSH
7972: LD_VAR 0 2
7976: PPUSH
7977: CALL 14648 0 2
// if GetWeapon ( veh ) = ar_radar then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 264
7990: PUSH
7991: LD_INT 30
7993: EQUAL
7994: IFFALSE 8004
// radarConstructed := true ;
7996: LD_ADDR_EXP 13
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 264
8013: PUSH
8014: LD_INT 26
8016: EQUAL
8017: IFFALSE 8027
// flamethrowerBuilt := true ;
8019: LD_ADDR_EXP 20
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// end ;
8027: PPOPN 2
8029: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8030: LD_ADDR_EXP 18
8034: PUSH
8035: LD_EXP 18
8039: PUSH
8040: LD_INT 1
8042: PLUS
8043: ST_TO_ADDR
// if oldId in ruConvoySquad then
8044: LD_VAR 0 2
8048: PUSH
8049: LD_EXP 41
8053: IN
8054: IFFALSE 8072
// ruConvoySquad := ruConvoySquad diff oldId ;
8056: LD_ADDR_EXP 41
8060: PUSH
8061: LD_EXP 41
8065: PUSH
8066: LD_VAR 0 2
8070: DIFF
8071: ST_TO_ADDR
// if newId in ruConvoySquad then
8072: LD_VAR 0 1
8076: PUSH
8077: LD_EXP 41
8081: IN
8082: IFFALSE 8100
// ruConvoySquad := ruConvoySquad diff newId ;
8084: LD_ADDR_EXP 41
8088: PUSH
8089: LD_EXP 41
8093: PUSH
8094: LD_VAR 0 1
8098: DIFF
8099: ST_TO_ADDR
// end ; end_of_file
8100: PPOPN 4
8102: END
// export function Action ; var i , p , un , veh , tmp ; begin
8103: LD_INT 0
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
// InGameOn ;
8111: CALL_OW 8
// music_nat := 2 ;
8115: LD_ADDR_OWVAR 71
8119: PUSH
8120: LD_INT 2
8122: ST_TO_ADDR
// music_class := music_recon ;
8123: LD_ADDR_OWVAR 72
8127: PUSH
8128: LD_INT 3
8130: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8131: LD_INT 7
8133: PPUSH
8134: LD_INT 6
8136: PPUSH
8137: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8141: LD_INT 7
8143: PPUSH
8144: LD_INT 6
8146: PPUSH
8147: LD_INT 2
8149: PPUSH
8150: LD_INT 30
8152: NEG
8153: PPUSH
8154: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8158: LD_ADDR_VAR 0 6
8162: PUSH
8163: LD_EXP 21
8167: PUSH
8168: LD_EXP 22
8172: PUSH
8173: LD_EXP 23
8177: PUSH
8178: LD_EXP 24
8182: PUSH
8183: LD_EXP 25
8187: PUSH
8188: LD_EXP 26
8192: PUSH
8193: LD_EXP 28
8197: PUSH
8198: LD_EXP 33
8202: PUSH
8203: LD_EXP 27
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: ST_TO_ADDR
// tmp := tmp diff 0 ;
8219: LD_ADDR_VAR 0 6
8223: PUSH
8224: LD_VAR 0 6
8228: PUSH
8229: LD_INT 0
8231: DIFF
8232: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8233: LD_ADDR_VAR 0 6
8237: PUSH
8238: LD_VAR 0 6
8242: PPUSH
8243: LD_INT 3
8245: PPUSH
8246: CALL 70424 0 2
8250: ST_TO_ADDR
// for i in heikeVehicles do
8251: LD_ADDR_VAR 0 2
8255: PUSH
8256: LD_EXP 35
8260: PUSH
8261: FOR_IN
8262: IFFALSE 8461
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8264: LD_INT 5
8266: PPUSH
8267: LD_VAR 0 2
8271: PUSH
8272: LD_INT 5
8274: ARRAY
8275: PPUSH
8276: LD_VAR 0 2
8280: PUSH
8281: LD_INT 1
8283: ARRAY
8284: PPUSH
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 2
8292: ARRAY
8293: PPUSH
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 3
8301: ARRAY
8302: PPUSH
8303: LD_VAR 0 2
8307: PUSH
8308: LD_INT 4
8310: ARRAY
8311: PPUSH
8312: LD_INT 34
8314: PPUSH
8315: CALL 439 0 7
// veh := CreateVehicle ;
8319: LD_ADDR_VAR 0 5
8323: PUSH
8324: CALL_OW 45
8328: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8329: LD_VAR 0 2
8333: PUSH
8334: LD_INT 4
8336: ARRAY
8337: PUSH
8338: LD_INT 51
8340: PUSH
8341: LD_INT 32
8343: PUSH
8344: LD_INT 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: IN
8352: IFFALSE 8432
// begin if i [ 7 ] [ 1 ] then
8354: LD_VAR 0 2
8358: PUSH
8359: LD_INT 7
8361: ARRAY
8362: PUSH
8363: LD_INT 1
8365: ARRAY
8366: IFFALSE 8393
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8368: LD_VAR 0 5
8372: PPUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_VAR 0 2
8380: PUSH
8381: LD_INT 7
8383: ARRAY
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PPUSH
8389: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 7
8400: ARRAY
8401: PUSH
8402: LD_INT 2
8404: ARRAY
8405: IFFALSE 8432
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8407: LD_VAR 0 5
8411: PPUSH
8412: LD_INT 2
8414: PPUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 7
8422: ARRAY
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PPUSH
8428: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8432: LD_VAR 0 5
8436: PPUSH
8437: LD_INT 2
8439: PPUSH
8440: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 4
8451: PPUSH
8452: LD_INT 0
8454: PPUSH
8455: CALL_OW 49
// end ;
8459: GO 8261
8461: POP
8462: POP
// if tmp then
8463: LD_VAR 0 6
8467: IFFALSE 8577
// begin p := 0 ;
8469: LD_ADDR_VAR 0 3
8473: PUSH
8474: LD_INT 0
8476: ST_TO_ADDR
// for i in tmp do
8477: LD_ADDR_VAR 0 2
8481: PUSH
8482: LD_VAR 0 6
8486: PUSH
8487: FOR_IN
8488: IFFALSE 8575
// begin p := p + 1 ;
8490: LD_ADDR_VAR 0 3
8494: PUSH
8495: LD_VAR 0 3
8499: PUSH
8500: LD_INT 1
8502: PLUS
8503: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8504: LD_VAR 0 2
8508: PPUSH
8509: LD_INT 5
8511: PPUSH
8512: LD_INT 0
8514: PPUSH
8515: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8519: LD_VAR 0 2
8523: PPUSH
8524: LD_INT 26
8526: PPUSH
8527: LD_INT 9
8529: PPUSH
8530: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_EXP 35
8543: GREATEREQUAL
8544: PUSH
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 257
8554: PUSH
8555: LD_INT 3
8557: EQUAL
8558: AND
8559: IFFALSE 8573
// SetClass ( i , 1 ) ;
8561: LD_VAR 0 2
8565: PPUSH
8566: LD_INT 1
8568: PPUSH
8569: CALL_OW 336
// end ;
8573: GO 8487
8575: POP
8576: POP
// end ; if heikeSecondSquad then
8577: LD_EXP 34
8581: IFFALSE 8695
// for i in heikeSecondSquad do
8583: LD_ADDR_VAR 0 2
8587: PUSH
8588: LD_EXP 34
8592: PUSH
8593: FOR_IN
8594: IFFALSE 8693
// begin p := p + 1 ;
8596: LD_ADDR_VAR 0 3
8600: PUSH
8601: LD_VAR 0 3
8605: PUSH
8606: LD_INT 1
8608: PLUS
8609: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8610: LD_VAR 0 2
8614: PPUSH
8615: LD_INT 6
8617: PPUSH
8618: LD_INT 0
8620: PPUSH
8621: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_INT 26
8632: PPUSH
8633: LD_INT 9
8635: PPUSH
8636: CALL_OW 118
// ForceSleep ( i , true ) ;
8640: LD_VAR 0 2
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8652: LD_VAR 0 3
8656: PUSH
8657: LD_EXP 35
8661: GREATEREQUAL
8662: PUSH
8663: LD_VAR 0 2
8667: PPUSH
8668: CALL_OW 257
8672: PUSH
8673: LD_INT 3
8675: EQUAL
8676: AND
8677: IFFALSE 8691
// SetClass ( i , 1 ) ;
8679: LD_VAR 0 2
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 336
// end ;
8691: GO 8593
8693: POP
8694: POP
// if heikeApes then
8695: LD_EXP 36
8699: IFFALSE 8742
// for i in heikeApes do
8701: LD_ADDR_VAR 0 2
8705: PUSH
8706: LD_EXP 36
8710: PUSH
8711: FOR_IN
8712: IFFALSE 8740
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8714: LD_VAR 0 2
8718: PPUSH
8719: LD_INT 7
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 49
// ComHold ( i ) ;
8729: LD_VAR 0 2
8733: PPUSH
8734: CALL_OW 140
// end ;
8738: GO 8711
8740: POP
8741: POP
// if Kurt then
8742: LD_EXP 32
8746: IFFALSE 8778
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8748: LD_EXP 32
8752: PPUSH
8753: LD_INT 8
8755: PPUSH
8756: LD_INT 0
8758: PPUSH
8759: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8763: LD_EXP 32
8767: PPUSH
8768: LD_INT 42
8770: PPUSH
8771: LD_INT 32
8773: PPUSH
8774: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8778: LD_INT 70
8780: PPUSH
8781: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8785: LD_EXP 21
8789: PPUSH
8790: LD_STRING DH-Start-1
8792: PPUSH
8793: CALL_OW 88
// if Givi then
8797: LD_EXP 22
8801: IFFALSE 9064
// begin Say ( Givi , DG-Start-2-5 ) ;
8803: LD_EXP 22
8807: PPUSH
8808: LD_STRING DG-Start-2-5
8810: PPUSH
8811: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8815: LD_EXP 21
8819: PPUSH
8820: LD_STRING DH-Start-3
8822: PPUSH
8823: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8827: LD_EXP 21
8831: PPUSH
8832: LD_STRING DH-Start-4
8834: PPUSH
8835: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8839: LD_EXP 22
8843: PPUSH
8844: LD_STRING DG-Start-5
8846: PPUSH
8847: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8851: LD_EXP 21
8855: PPUSH
8856: LD_STRING DH-Start-6
8858: PPUSH
8859: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8863: LD_EXP 22
8867: PPUSH
8868: LD_STRING DG-Start-7
8870: PPUSH
8871: CALL_OW 88
// if Mike then
8875: LD_EXP 23
8879: IFFALSE 9052
// begin Say ( Mike , DM-Start-8 ) ;
8881: LD_EXP 23
8885: PPUSH
8886: LD_STRING DM-Start-8
8888: PPUSH
8889: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8893: LD_EXP 23
8897: PPUSH
8898: LD_STRING DM-Start-9
8900: PPUSH
8901: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8905: LD_EXP 22
8909: PPUSH
8910: LD_STRING DG-Start-10
8912: PPUSH
8913: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8917: LD_EXP 22
8921: PPUSH
8922: LD_STRING DG-Start-11
8924: PPUSH
8925: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8929: LD_EXP 21
8933: PPUSH
8934: LD_STRING DH-Start-12
8936: PPUSH
8937: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8941: LD_EXP 22
8945: PPUSH
8946: LD_STRING DG-Start-13
8948: PPUSH
8949: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING DG-Start-14
8960: PPUSH
8961: CALL_OW 88
// if Kaia then
8965: LD_EXP 26
8969: IFFALSE 9052
// begin Say ( Kaia , DK-Start-15 ) ;
8971: LD_EXP 26
8975: PPUSH
8976: LD_STRING DK-Start-15
8978: PPUSH
8979: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_STRING DK-Start-16
8990: PPUSH
8991: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8995: LD_EXP 26
8999: PPUSH
9000: LD_STRING DK-Start-17
9002: PPUSH
9003: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9007: LD_INT 10
9009: PPUSH
9010: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9014: LD_EXP 22
9018: PPUSH
9019: LD_EXP 26
9023: PPUSH
9024: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9028: LD_EXP 22
9032: PPUSH
9033: LD_STRING DG-Start-18
9035: PPUSH
9036: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9040: LD_EXP 26
9044: PPUSH
9045: LD_STRING DK-Start-19
9047: PPUSH
9048: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9052: LD_EXP 21
9056: PPUSH
9057: LD_STRING DH-Start-20
9059: PPUSH
9060: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9064: LD_INT 70
9066: PPUSH
9067: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9071: LD_EXP 29
9075: PPUSH
9076: LD_STRING DShar-Start-21
9078: PPUSH
9079: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9083: LD_EXP 21
9087: PPUSH
9088: LD_STRING DH-Start-22
9090: PPUSH
9091: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9095: LD_EXP 29
9099: PPUSH
9100: LD_STRING DShar-Start-23
9102: PPUSH
9103: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9107: LD_EXP 29
9111: PPUSH
9112: LD_STRING DShar-Start-24
9114: PPUSH
9115: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9119: LD_EXP 29
9123: PPUSH
9124: LD_STRING DShar-Start-25
9126: PPUSH
9127: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9131: LD_EXP 29
9135: PPUSH
9136: LD_STRING DShar-Start-26
9138: PPUSH
9139: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9143: LD_EXP 21
9147: PPUSH
9148: LD_STRING DH-Start-27
9150: PPUSH
9151: CALL_OW 88
// if Kaia then
9155: LD_EXP 26
9159: IFFALSE 9201
// begin ComTurnUnit ( Heike , Kaia ) ;
9161: LD_EXP 21
9165: PPUSH
9166: LD_EXP 26
9170: PPUSH
9171: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9175: LD_EXP 26
9179: PPUSH
9180: LD_STRING DK-Start-28
9182: PPUSH
9183: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9187: LD_EXP 21
9191: PPUSH
9192: LD_STRING DH-Start-29
9194: PPUSH
9195: CALL_OW 88
// end else
9199: GO 9213
// Say ( Heike , DH-Start-a-28 ) ;
9201: LD_EXP 21
9205: PPUSH
9206: LD_STRING DH-Start-a-28
9208: PPUSH
9209: CALL_OW 88
// if Givi then
9213: LD_EXP 22
9217: IFFALSE 9452
// begin ComTurnUnit ( Heike , Givi ) ;
9219: LD_EXP 21
9223: PPUSH
9224: LD_EXP 22
9228: PPUSH
9229: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9233: LD_EXP 22
9237: PPUSH
9238: LD_EXP 21
9242: PPUSH
9243: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9247: LD_EXP 21
9251: PPUSH
9252: LD_STRING DH-Start-30
9254: PPUSH
9255: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9259: LD_EXP 21
9263: PPUSH
9264: LD_STRING DH-Start-31
9266: PPUSH
9267: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9271: LD_EXP 22
9275: PPUSH
9276: LD_STRING DG-Start-32
9278: PPUSH
9279: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9283: LD_EXP 21
9287: PPUSH
9288: LD_STRING DH-Start-33
9290: PPUSH
9291: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9295: LD_EXP 22
9299: PPUSH
9300: LD_STRING DG-Start-34
9302: PPUSH
9303: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9307: LD_EXP 22
9311: PPUSH
9312: LD_STRING DG-Start-35
9314: PPUSH
9315: CALL_OW 88
// if Kurt and not dialogue_skipped then
9319: LD_EXP 32
9323: PUSH
9324: LD_OWVAR 59
9328: NOT
9329: AND
9330: IFFALSE 9361
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9332: LD_EXP 32
9336: PPUSH
9337: LD_INT 28
9339: PPUSH
9340: LD_INT 13
9342: PPUSH
9343: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9347: LD_EXP 32
9351: PPUSH
9352: LD_EXP 21
9356: PPUSH
9357: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9361: LD_EXP 22
9365: PPUSH
9366: LD_STRING DG-Start-36
9368: PPUSH
9369: CALL_OW 88
// if Kurt then
9373: LD_EXP 32
9377: IFFALSE 9450
// begin if not Givi then
9379: LD_EXP 22
9383: NOT
9384: IFFALSE 9400
// Say ( Kurt , DKs-Start-37-a ) else
9386: LD_EXP 32
9390: PPUSH
9391: LD_STRING DKs-Start-37-a
9393: PPUSH
9394: CALL_OW 88
9398: GO 9412
// Say ( Kurt , DKs-Start-37 ) ;
9400: LD_EXP 32
9404: PPUSH
9405: LD_STRING DKs-Start-37
9407: PPUSH
9408: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9412: LD_EXP 32
9416: PPUSH
9417: LD_STRING DKs-Start-38
9419: PPUSH
9420: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9424: LD_EXP 21
9428: PPUSH
9429: LD_EXP 32
9433: PPUSH
9434: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9438: LD_EXP 21
9442: PPUSH
9443: LD_STRING DH-Start-39
9445: PPUSH
9446: CALL_OW 88
// end ; end else
9450: GO 9481
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9452: LD_EXP 34
9456: PPUSH
9457: LD_STRING DArm-Start-a-37
9459: PPUSH
9460: LD_STRING DArf-Start-a-37
9462: PPUSH
9463: CALL 1198 0 3
9467: IFFALSE 9481
// Say ( Heike , DH-Start-39 ) ;
9469: LD_EXP 21
9473: PPUSH
9474: LD_STRING DH-Start-39
9476: PPUSH
9477: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9481: LD_INT 44
9483: PPUSH
9484: LD_INT 25
9486: PPUSH
9487: CALL_OW 428
9491: IFFALSE 9508
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9493: LD_INT 44
9495: PPUSH
9496: LD_INT 25
9498: PPUSH
9499: CALL_OW 428
9503: PPUSH
9504: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9508: LD_EXP 30
9512: PPUSH
9513: LD_INT 5
9515: PPUSH
9516: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_INT 44
9527: PPUSH
9528: LD_INT 25
9530: PPUSH
9531: LD_INT 0
9533: PPUSH
9534: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9538: LD_EXP 30
9542: PPUSH
9543: LD_INT 29
9545: PPUSH
9546: LD_INT 12
9548: PPUSH
9549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9553: LD_INT 35
9555: PPUSH
9556: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9560: LD_OWVAR 59
9564: PUSH
9565: LD_EXP 21
9569: PPUSH
9570: LD_EXP 30
9574: PPUSH
9575: CALL_OW 296
9579: PUSH
9580: LD_INT 8
9582: LESS
9583: OR
9584: PUSH
9585: LD_EXP 30
9589: PPUSH
9590: LD_INT 26
9592: PPUSH
9593: LD_INT 9
9595: PPUSH
9596: CALL_OW 297
9600: PUSH
9601: LD_INT 6
9603: LESS
9604: OR
9605: IFFALSE 9553
// Say ( Olaf , DO-Scout-1 ) ;
9607: LD_EXP 30
9611: PPUSH
9612: LD_STRING DO-Scout-1
9614: PPUSH
9615: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9619: LD_EXP 30
9623: PPUSH
9624: LD_EXP 21
9628: PPUSH
9629: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_VAR 0 6
9642: PUSH
9643: LD_EXP 34
9647: UNION
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9668
// ComTurnUnit ( i , Olaf ) ;
9652: LD_VAR 0 2
9656: PPUSH
9657: LD_EXP 30
9661: PPUSH
9662: CALL_OW 119
9666: GO 9649
9668: POP
9669: POP
// wait ( 0 0$0.3 ) ;
9670: LD_INT 10
9672: PPUSH
9673: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9677: LD_EXP 21
9681: PPUSH
9682: LD_EXP 30
9686: PPUSH
9687: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9691: LD_EXP 21
9695: PPUSH
9696: LD_EXP 30
9700: PPUSH
9701: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9705: LD_EXP 21
9709: PPUSH
9710: LD_STRING DH-Scout-2
9712: PPUSH
9713: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9717: LD_EXP 30
9721: PPUSH
9722: LD_STRING DO-Scout-3
9724: PPUSH
9725: CALL_OW 88
// if Mike and Givi then
9729: LD_EXP 23
9733: PUSH
9734: LD_EXP 22
9738: AND
9739: IFFALSE 9755
// Say ( Olaf , DO-Scout-4 ) else
9741: LD_EXP 30
9745: PPUSH
9746: LD_STRING DO-Scout-4
9748: PPUSH
9749: CALL_OW 88
9753: GO 9855
// begin if Mike then
9755: LD_EXP 23
9759: IFFALSE 9787
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9761: LD_EXP 30
9765: PPUSH
9766: LD_STRING DO-Scout-a-4
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9773: LD_EXP 21
9777: PPUSH
9778: LD_STRING DH-Scout-a-5
9780: PPUSH
9781: CALL_OW 88
// end else
9785: GO 9855
// if Givi then
9787: LD_EXP 22
9791: IFFALSE 9819
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9793: LD_EXP 30
9797: PPUSH
9798: LD_STRING DO-Scout-b-4
9800: PPUSH
9801: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9805: LD_EXP 21
9809: PPUSH
9810: LD_STRING DH-Scout-b-5
9812: PPUSH
9813: CALL_OW 88
// end else
9817: GO 9855
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9819: LD_EXP 30
9823: PPUSH
9824: LD_STRING DO-Scout-f-4
9826: PPUSH
9827: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9831: LD_EXP 21
9835: PPUSH
9836: LD_STRING DH-Scout-f-5
9838: PPUSH
9839: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9843: LD_EXP 30
9847: PPUSH
9848: LD_STRING DO-Scout-f-6
9850: PPUSH
9851: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9855: LD_EXP 21
9859: PPUSH
9860: LD_STRING DH-Scout-5
9862: PPUSH
9863: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9867: LD_EXP 30
9871: PPUSH
9872: LD_STRING DO-Scout-6
9874: PPUSH
9875: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-7
9886: PPUSH
9887: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9891: LD_EXP 21
9895: PPUSH
9896: LD_STRING DH-Scout-8
9898: PPUSH
9899: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9903: LD_EXP 21
9907: PPUSH
9908: LD_STRING DH-Scout-9
9910: PPUSH
9911: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9915: LD_EXP 30
9919: PPUSH
9920: LD_STRING DO-Scout-10
9922: PPUSH
9923: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9927: LD_EXP 30
9931: PPUSH
9932: LD_STRING DO-Scout-12
9934: PPUSH
9935: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9939: LD_EXP 30
9943: PPUSH
9944: LD_STRING DO-Scout-13
9946: PPUSH
9947: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9951: LD_EXP 30
9955: PPUSH
9956: LD_STRING DO-Scout-14
9958: PPUSH
9959: CALL_OW 88
// if Givi then
9963: LD_EXP 22
9967: IFFALSE 9993
// begin Say ( Givi , DG-Scout-15 ) ;
9969: LD_EXP 22
9973: PPUSH
9974: LD_STRING DG-Scout-15
9976: PPUSH
9977: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9981: LD_EXP 26
9985: PPUSH
9986: LD_STRING DK-Scout-16
9988: PPUSH
9989: CALL_OW 88
// end ; if not dialogue_skipped then
9993: LD_OWVAR 59
9997: NOT
9998: IFFALSE 10119
// begin async ;
10000: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10001: LD_EXP 30
10005: PPUSH
10006: LD_STRING DO-Scout-17
10008: PPUSH
10009: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10013: LD_INT 55
10015: PPUSH
10016: LD_INT 77
10018: PPUSH
10019: LD_INT 2
10021: PPUSH
10022: LD_INT 6
10024: NEG
10025: PPUSH
10026: CALL 1147 0 4
// wait ( 10 ) ;
10030: LD_INT 10
10032: PPUSH
10033: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10037: LD_INT 55
10039: PPUSH
10040: LD_INT 77
10042: PPUSH
10043: CALL_OW 84
// wait ( 0 0$10 ) ;
10047: LD_INT 350
10049: PPUSH
10050: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10054: LD_EXP 30
10058: PPUSH
10059: LD_STRING DO-Scout-18
10061: PPUSH
10062: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10066: LD_INT 204
10068: PPUSH
10069: LD_INT 107
10071: PPUSH
10072: LD_INT 2
10074: PPUSH
10075: LD_INT 12
10077: NEG
10078: PPUSH
10079: CALL 1147 0 4
// wait ( 10 ) ;
10083: LD_INT 10
10085: PPUSH
10086: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10090: LD_INT 204
10092: PPUSH
10093: LD_INT 107
10095: PPUSH
10096: CALL_OW 84
// wait ( 0 0$10 ) ;
10100: LD_INT 350
10102: PPUSH
10103: CALL_OW 67
// sync ;
10107: SYNC
// CenterNowOnUnits ( Heike ) ;
10108: LD_EXP 21
10112: PPUSH
10113: CALL_OW 87
// end else
10117: GO 10153
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10119: LD_INT 55
10121: PPUSH
10122: LD_INT 77
10124: PPUSH
10125: LD_INT 2
10127: PPUSH
10128: LD_INT 6
10130: NEG
10131: PPUSH
10132: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10136: LD_INT 204
10138: PPUSH
10139: LD_INT 107
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: LD_INT 12
10147: NEG
10148: PPUSH
10149: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10153: LD_EXP 30
10157: PPUSH
10158: LD_STRING DO-Scout-19
10160: PPUSH
10161: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10165: LD_EXP 30
10169: PPUSH
10170: LD_STRING DO-Scout-20
10172: PPUSH
10173: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10177: LD_EXP 21
10181: PPUSH
10182: LD_STRING DH-Scout-21
10184: PPUSH
10185: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10189: LD_EXP 21
10193: PPUSH
10194: LD_STRING DH-Scout-22
10196: PPUSH
10197: CALL_OW 88
// InGameOff ;
10201: CALL_OW 9
// if heikeSecondSquad then
10205: LD_EXP 34
10209: IFFALSE 10223
// ForceSleep ( heikeSecondSquad , false ) ;
10211: LD_EXP 34
10215: PPUSH
10216: LD_INT 0
10218: PPUSH
10219: CALL_OW 585
// if Givi then
10223: LD_EXP 22
10227: IFFALSE 10242
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10229: LD_INT 13
10231: PPUSH
10232: LD_INT 2
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10242: LD_STRING Road
10244: PPUSH
10245: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 21
10266: PUSH
10267: LD_INT 2
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: PUSH
10283: FOR_IN
10284: IFFALSE 10300
// SetSide ( i , 2 ) ;
10286: LD_VAR 0 2
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: CALL_OW 235
10298: GO 10283
10300: POP
10301: POP
// SaveForQuickRestart ;
10302: CALL_OW 22
// music_class := music_auto ;
10306: LD_ADDR_OWVAR 72
10310: PUSH
10311: LD_INT 0
10313: ST_TO_ADDR
// end ;
10314: LD_VAR 0 1
10318: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10319: LD_INT 2
10321: PPUSH
10322: LD_INT 9
10324: PPUSH
10325: CALL_OW 294
10329: IFFALSE 10694
10331: GO 10333
10333: DISABLE
// begin DialogueOn ;
10334: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10338: LD_INT 111
10340: PPUSH
10341: LD_INT 72
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 20
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10355: LD_INT 111
10357: PPUSH
10358: LD_INT 72
10360: PPUSH
10361: LD_INT 2
10363: PPUSH
10364: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10368: LD_INT 111
10370: PPUSH
10371: LD_INT 72
10373: PPUSH
10374: CALL_OW 86
// if IsOk ( Kamil ) then
10378: LD_EXP 25
10382: PPUSH
10383: CALL_OW 302
10387: IFFALSE 10504
// begin Say ( Kamil , DKam-Cross-1 ) ;
10389: LD_EXP 25
10393: PPUSH
10394: LD_STRING DKam-Cross-1
10396: PPUSH
10397: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DKam-Cross-2
10408: PPUSH
10409: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING DKam-Cross-3
10420: PPUSH
10421: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DKam-Cross-4
10432: PPUSH
10433: CALL_OW 88
// if IsOk ( Ibrahim ) then
10437: LD_EXP 24
10441: PPUSH
10442: CALL_OW 302
10446: IFFALSE 10502
// begin if ibrahimJoinedIn04 then
10448: LD_EXP 4
10452: IFFALSE 10466
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10454: LD_EXP 24
10458: PPUSH
10459: LD_STRING DI-Cross-b-5
10461: PPUSH
10462: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10466: LD_EXP 24
10470: PPUSH
10471: LD_STRING DI-Cross-b-6
10473: PPUSH
10474: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10478: LD_EXP 24
10482: PPUSH
10483: LD_STRING DI-Cross-b-7
10485: PPUSH
10486: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10490: LD_EXP 25
10494: PPUSH
10495: LD_STRING DKam-Cross-8
10497: PPUSH
10498: CALL_OW 88
// end ; end else
10502: GO 10662
// if IsOk ( Sophia ) then
10504: LD_EXP 27
10508: PPUSH
10509: CALL_OW 302
10513: IFFALSE 10630
// begin Say ( Sophia , DS-Cross-1 ) ;
10515: LD_EXP 27
10519: PPUSH
10520: LD_STRING DS-Cross-1
10522: PPUSH
10523: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10527: LD_EXP 27
10531: PPUSH
10532: LD_STRING DS-Cross-2
10534: PPUSH
10535: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_STRING DS-Cross-3
10546: PPUSH
10547: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10551: LD_EXP 27
10555: PPUSH
10556: LD_STRING DS-Cross-4
10558: PPUSH
10559: CALL_OW 88
// if IsOk ( Ibrahim ) then
10563: LD_EXP 24
10567: PPUSH
10568: CALL_OW 302
10572: IFFALSE 10628
// begin if ibrahimJoinedIn04 then
10574: LD_EXP 4
10578: IFFALSE 10592
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10580: LD_EXP 24
10584: PPUSH
10585: LD_STRING DI-Cross-b-5
10587: PPUSH
10588: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10592: LD_EXP 24
10596: PPUSH
10597: LD_STRING DI-Cross-b-6
10599: PPUSH
10600: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10604: LD_EXP 24
10608: PPUSH
10609: LD_STRING DI-Cross-b-7
10611: PPUSH
10612: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10616: LD_EXP 27
10620: PPUSH
10621: LD_STRING DS-Cross-8
10623: PPUSH
10624: CALL_OW 88
// end ; end else
10628: GO 10662
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10630: LD_EXP 34
10634: PPUSH
10635: LD_INT 50
10637: PUSH
10638: EMPTY
10639: LIST
10640: PPUSH
10641: CALL_OW 72
10645: IFFALSE 10662
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10647: LD_EXP 34
10651: PPUSH
10652: LD_STRING DArm-Cross-c-1
10654: PPUSH
10655: LD_STRING DArf-Cross-c-1
10657: PPUSH
10658: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10662: LD_INT 85
10664: PPUSH
10665: LD_INT 2
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 322
// DialogueOff ;
10675: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10679: LD_STRING Crane
10681: PPUSH
10682: CALL_OW 337
// spottedCrossRoad := true ;
10686: LD_ADDR_EXP 8
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// end ;
10694: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10695: LD_INT 22
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: LD_INT 30
10710: PUSH
10711: LD_INT 0
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 30
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: CALL_OW 69
10741: PUSH
10742: LD_EXP 26
10746: PPUSH
10747: CALL_OW 302
10751: PUSH
10752: LD_EXP 34
10756: OR
10757: AND
10758: IFFALSE 10970
10760: GO 10762
10762: DISABLE
// begin DialogueOn ;
10763: CALL_OW 6
// if Kaia then
10767: LD_EXP 26
10771: IFFALSE 10784
// CenterNowOnUnits ( Kaia ) else
10773: LD_EXP 26
10777: PPUSH
10778: CALL_OW 87
10782: GO 10793
// CenterNowOnUnits ( Heike ) ;
10784: LD_EXP 21
10788: PPUSH
10789: CALL_OW 87
// if IsOk ( Kaia ) then
10793: LD_EXP 26
10797: PPUSH
10798: CALL_OW 302
10802: IFFALSE 10818
// Say ( Kaia , DK-Cam-1 ) else
10804: LD_EXP 26
10808: PPUSH
10809: LD_STRING DK-Cam-1
10811: PPUSH
10812: CALL_OW 88
10816: GO 10833
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10818: LD_EXP 34
10822: PPUSH
10823: LD_STRING DArm-Cam-1
10825: PPUSH
10826: LD_STRING DArf-Cam-1
10828: PPUSH
10829: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
10833: LD_EXP 21
10837: PPUSH
10838: LD_STRING DH-Cam-2
10840: PPUSH
10841: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10845: LD_EXP 21
10849: PPUSH
10850: LD_STRING DH-Cam-3
10852: PPUSH
10853: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10857: LD_EXP 21
10861: PPUSH
10862: LD_STRING DH-Cam-4
10864: PPUSH
10865: CALL_OW 88
// if IsOk ( Kaia ) then
10869: LD_EXP 26
10873: PPUSH
10874: CALL_OW 302
10878: IFFALSE 10894
// Say ( Kaia , DK-Cam-5 ) else
10880: LD_EXP 26
10884: PPUSH
10885: LD_STRING DK-Cam-5
10887: PPUSH
10888: CALL_OW 88
10892: GO 10909
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10894: LD_EXP 34
10898: PPUSH
10899: LD_STRING DArm-Cam-5
10901: PPUSH
10902: LD_STRING DArf-Cam-5
10904: PPUSH
10905: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10909: LD_EXP 30
10913: PPUSH
10914: LD_STRING DO-Cam-6
10916: PPUSH
10917: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10921: LD_EXP 30
10925: PPUSH
10926: LD_STRING DO-Cam-7
10928: PPUSH
10929: CALL_OW 88
// DialogueOff ;
10933: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10937: LD_STRING Radar
10939: PPUSH
10940: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10944: LD_INT 6
10946: PPUSH
10947: LD_INT 2
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10957: LD_INT 20
10959: PPUSH
10960: LD_INT 2
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 324
// end ;
10970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10971: LD_INT 22
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 2
10983: PUSH
10984: LD_INT 34
10986: PUSH
10987: LD_INT 30
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 35
10996: PUSH
10997: LD_INT 30
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 69
11017: IFFALSE 11029
11019: GO 11021
11021: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11022: LD_STRING RadarDone
11024: PPUSH
11025: CALL_OW 337
11029: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11030: LD_INT 22
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 34
11042: PUSH
11043: LD_INT 88
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: IFFALSE 11070
11060: GO 11062
11062: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11063: LD_STRING CraneDone
11065: PPUSH
11066: CALL_OW 337
11070: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11071: LD_EXP 30
11075: PPUSH
11076: CALL_OW 302
11080: PUSH
11081: LD_EXP 33
11085: PPUSH
11086: CALL_OW 302
11090: AND
11091: PUSH
11092: LD_INT 6
11094: PPUSH
11095: LD_INT 2
11097: PPUSH
11098: CALL_OW 321
11102: PUSH
11103: LD_INT 2
11105: EQUAL
11106: AND
11107: PUSH
11108: LD_EXP 33
11112: PPUSH
11113: LD_EXP 21
11117: PPUSH
11118: CALL_OW 296
11122: PUSH
11123: LD_INT 10
11125: LESS
11126: PUSH
11127: LD_EXP 33
11131: PPUSH
11132: CALL_OW 310
11136: OR
11137: AND
11138: IFFALSE 11352
11140: GO 11142
11142: DISABLE
// begin DialogueOn ;
11143: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11147: LD_EXP 33
11151: PPUSH
11152: LD_STRING DA-RC-1
11154: PPUSH
11155: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11159: LD_EXP 33
11163: PPUSH
11164: LD_STRING DA-RC-2
11166: PPUSH
11167: CALL_OW 88
// if IsOk ( Kaia ) then
11171: LD_EXP 26
11175: PPUSH
11176: CALL_OW 302
11180: IFFALSE 11254
// begin Say ( Kaia , DK-RC-3 ) ;
11182: LD_EXP 26
11186: PPUSH
11187: LD_STRING DK-RC-3
11189: PPUSH
11190: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11194: LD_EXP 33
11198: PPUSH
11199: LD_STRING DA-RC-4
11201: PPUSH
11202: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11206: LD_EXP 26
11210: PPUSH
11211: LD_STRING DK-RC-5
11213: PPUSH
11214: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11218: LD_EXP 33
11222: PPUSH
11223: LD_STRING DA-RC-6
11225: PPUSH
11226: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11230: LD_EXP 26
11234: PPUSH
11235: LD_STRING DK-RC-7
11237: PPUSH
11238: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11242: LD_EXP 33
11246: PPUSH
11247: LD_STRING DA-RC-8
11249: PPUSH
11250: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11254: LD_EXP 21
11258: PPUSH
11259: LD_STRING DH-RC-9
11261: PPUSH
11262: CALL_OW 88
// if IsOk ( Markov ) then
11266: LD_EXP 28
11270: PPUSH
11271: CALL_OW 302
11275: IFFALSE 11303
// begin Say ( Markov , DMar-RC-10 ) ;
11277: LD_EXP 28
11281: PPUSH
11282: LD_STRING DMar-RC-10
11284: PPUSH
11285: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11289: LD_EXP 28
11293: PPUSH
11294: LD_STRING DMar-RC-11
11296: PPUSH
11297: CALL_OW 88
// end else
11301: GO 11315
// begin Say ( Olaf , DO-RC-a-10 ) ;
11303: LD_EXP 30
11307: PPUSH
11308: LD_STRING DO-RC-a-10
11310: PPUSH
11311: CALL_OW 88
// end ; DialogueOff ;
11315: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11319: LD_STRING RemoteControl
11321: PPUSH
11322: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11326: LD_INT 15
11328: PPUSH
11329: LD_INT 2
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11339: LD_INT 22
11341: PPUSH
11342: LD_INT 2
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 324
// end ;
11352: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11353: LD_INT 12
11355: PPUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 70
11370: IFFALSE 11737
11372: GO 11374
11374: DISABLE
11375: LD_INT 0
11377: PPUSH
// begin PrepareWestBase ;
11378: CALL 3916 0 0
// westBaseSpotted := true ;
11382: LD_ADDR_EXP 5
11386: PUSH
11387: LD_INT 1
11389: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11390: LD_INT 70
11392: PPUSH
11393: CALL_OW 67
// InGameOn ;
11397: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11401: LD_INT 56
11403: PPUSH
11404: LD_INT 77
11406: PPUSH
11407: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11411: LD_INT 56
11413: PPUSH
11414: LD_INT 77
11416: PPUSH
11417: LD_INT 2
11419: PPUSH
11420: LD_INT 12
11422: NEG
11423: PPUSH
11424: CALL_OW 330
// wait ( 0 0$2 ) ;
11428: LD_INT 70
11430: PPUSH
11431: CALL_OW 67
// DialogueOn ;
11435: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11439: LD_EXP 21
11443: PPUSH
11444: LD_STRING DH-Rbase-1
11446: PPUSH
11447: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11451: LD_EXP 26
11455: PPUSH
11456: LD_STRING DK-Rbase-2
11458: PPUSH
11459: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING DK-Rbase-3
11470: PPUSH
11471: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11475: LD_EXP 26
11479: PPUSH
11480: LD_STRING DK-Rbase-4
11482: PPUSH
11483: CALL_OW 88
// DialogueOff ;
11487: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11491: LD_INT 56
11493: PPUSH
11494: LD_INT 77
11496: PPUSH
11497: LD_INT 2
11499: PPUSH
11500: CALL_OW 331
// InGameOff ;
11504: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11508: LD_INT 35
11510: PPUSH
11511: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11515: LD_EXP 42
11519: NOT
11520: PUSH
11521: LD_EXP 43
11525: NOT
11526: AND
11527: IFFALSE 11508
// wait ( 0 0$2 ) ;
11529: LD_INT 70
11531: PPUSH
11532: CALL_OW 67
// if IsOk ( Kaia ) then
11536: LD_EXP 26
11540: PPUSH
11541: CALL_OW 302
11545: IFFALSE 11660
// begin DialogueOn ;
11547: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11551: LD_INT 56
11553: PPUSH
11554: LD_INT 81
11556: PPUSH
11557: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11561: LD_EXP 26
11565: PPUSH
11566: LD_STRING DK-Rbase-5
11568: PPUSH
11569: CALL_OW 88
// if IsOk ( Givi ) then
11573: LD_EXP 22
11577: PPUSH
11578: CALL_OW 302
11582: IFFALSE 11656
// begin Say ( Givi , DG-Rbase-6 ) ;
11584: LD_EXP 22
11588: PPUSH
11589: LD_STRING DG-Rbase-6
11591: PPUSH
11592: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11596: LD_EXP 22
11600: PPUSH
11601: LD_STRING DG-Rbase-7
11603: PPUSH
11604: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11608: LD_EXP 26
11612: PPUSH
11613: LD_STRING DK-Rbase-8
11615: PPUSH
11616: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11620: LD_EXP 22
11624: PPUSH
11625: LD_STRING DG-Rbase-9
11627: PPUSH
11628: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11632: LD_EXP 22
11636: PPUSH
11637: LD_STRING DG-Rbase-10
11639: PPUSH
11640: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11644: LD_EXP 26
11648: PPUSH
11649: LD_STRING DK-Rbase-11
11651: PPUSH
11652: CALL_OW 88
// end ; DialogueOff ;
11656: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11660: LD_ADDR_VAR 0 1
11664: PUSH
11665: LD_INT 12
11667: PPUSH
11668: LD_INT 22
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 21
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: CALL_OW 70
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11714
// SetSide ( i , 2 ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_INT 2
11707: PPUSH
11708: CALL_OW 235
11712: GO 11697
11714: POP
11715: POP
// westBaseCaptured := true ;
11716: LD_ADDR_EXP 9
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11724: LD_INT 0
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 324
// end ;
11737: PPOPN 1
11739: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11740: LD_EXP 38
11744: NOT
11745: PUSH
11746: LD_INT 10
11748: PPUSH
11749: CALL_OW 255
11753: PUSH
11754: LD_INT 2
11756: EQUAL
11757: OR
11758: IFFALSE 11895
11760: GO 11762
11762: DISABLE
// begin DialogueOn ;
11763: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11767: LD_EXP 21
11771: PPUSH
11772: LD_STRING DH-Goal-1
11774: PPUSH
11775: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11779: LD_EXP 29
11783: PPUSH
11784: LD_STRING DShar-Goal-2
11786: PPUSH
11787: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11791: LD_EXP 21
11795: PPUSH
11796: LD_STRING DH-Goal-3
11798: PPUSH
11799: CALL_OW 88
// if reinforcementsAllowed then
11803: LD_EXP 14
11807: IFFALSE 11833
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11809: LD_EXP 29
11813: PPUSH
11814: LD_STRING DShar-Goal-4
11816: PPUSH
11817: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11821: LD_EXP 21
11825: PPUSH
11826: LD_STRING DH-Goal-5
11828: PPUSH
11829: CALL_OW 88
// end ; DialogueOff ;
11833: CALL_OW 7
// eastBaseCaptured := true ;
11837: LD_ADDR_EXP 10
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11845: LD_STRING BaseCaptured
11847: PPUSH
11848: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11852: LD_INT 10
11854: PPUSH
11855: LD_INT 2
11857: PPUSH
11858: CALL_OW 235
// if not reinforcementsAllowed then
11862: LD_EXP 14
11866: NOT
11867: IFFALSE 11871
// exit ;
11869: GO 11895
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11871: LD_INT 21000
11873: PUSH
11874: LD_INT 1050
11876: NEG
11877: PPUSH
11878: LD_INT 1050
11880: PPUSH
11881: CALL_OW 12
11885: PLUS
11886: PPUSH
11887: CALL_OW 67
// PrepareReinforcements ;
11891: CALL 2174 0 0
// end ;
11895: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11896: LD_INT 22
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 13
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: IFFALSE 11941
11926: GO 11928
11928: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11929: LD_EXP 22
11933: PPUSH
11934: LD_STRING DG-Lab-1
11936: PPUSH
11937: CALL_OW 88
// end ;
11941: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11942: LD_INT 5
11944: PPUSH
11945: LD_INT 2
11947: PPUSH
11948: CALL_OW 321
11952: PUSH
11953: LD_INT 2
11955: EQUAL
11956: PUSH
11957: LD_EXP 22
11961: PPUSH
11962: CALL_OW 302
11966: AND
11967: IFFALSE 12028
11969: GO 11971
11971: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11972: LD_EXP 22
11976: PPUSH
11977: LD_STRING DG-Stim-1
11979: PPUSH
11980: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11984: LD_EXP 21
11988: PPUSH
11989: LD_STRING DH-Stim-2
11991: PPUSH
11992: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11996: LD_EXP 22
12000: PPUSH
12001: LD_STRING DG-Stim-3
12003: PPUSH
12004: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12008: LD_EXP 21
12012: PPUSH
12013: LD_STRING DH-Stim-4
12015: PPUSH
12016: CALL_OW 88
// drugsResearched := true ;
12020: LD_ADDR_EXP 11
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// end ;
12028: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12029: LD_EXP 11
12033: IFFALSE 12345
12035: GO 12037
12037: DISABLE
12038: LD_INT 0
12040: PPUSH
12041: PPUSH
12042: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12043: LD_ADDR_VAR 0 2
12047: PUSH
12048: LD_EXP 21
12052: PUSH
12053: LD_EXP 22
12057: PUSH
12058: LD_EXP 30
12062: PUSH
12063: LD_EXP 28
12067: PUSH
12068: LD_EXP 26
12072: PUSH
12073: LD_EXP 27
12077: PUSH
12078: LD_EXP 32
12082: PUSH
12083: LD_EXP 25
12087: PUSH
12088: LD_EXP 23
12092: PUSH
12093: LD_EXP 24
12097: PUSH
12098: LD_EXP 33
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12116: LD_ADDR_VAR 0 3
12120: PUSH
12121: LD_STRING H
12123: PUSH
12124: LD_STRING G
12126: PUSH
12127: LD_STRING O
12129: PUSH
12130: LD_STRING Mar
12132: PUSH
12133: LD_STRING K
12135: PUSH
12136: LD_STRING S
12138: PUSH
12139: LD_STRING Ks
12141: PUSH
12142: LD_STRING Kam
12144: PUSH
12145: LD_STRING M
12147: PUSH
12148: LD_STRING I
12150: PUSH
12151: LD_STRING A
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12167: LD_INT 35
12169: PPUSH
12170: CALL_OW 67
// for i := tmp downto 1 do
12174: LD_ADDR_VAR 0 1
12178: PUSH
12179: DOUBLE
12180: LD_VAR 0 2
12184: INC
12185: ST_TO_ADDR
12186: LD_INT 1
12188: PUSH
12189: FOR_DOWNTO
12190: IFFALSE 12336
// if GetLives ( tmp [ i ] ) < 250 then
12192: LD_VAR 0 2
12196: PUSH
12197: LD_VAR 0 1
12201: ARRAY
12202: PPUSH
12203: CALL_OW 256
12207: PUSH
12208: LD_INT 250
12210: LESS
12211: IFFALSE 12334
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12213: LD_ADDR_EXP 19
12217: PUSH
12218: LD_EXP 19
12222: PUSH
12223: LD_INT 1
12225: PLUS
12226: ST_TO_ADDR
// DialogueOn ;
12227: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12231: LD_VAR 0 2
12235: PUSH
12236: LD_VAR 0 1
12240: ARRAY
12241: PPUSH
12242: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12246: LD_VAR 0 2
12250: PUSH
12251: LD_VAR 0 1
12255: ARRAY
12256: PPUSH
12257: LD_STRING D
12259: PUSH
12260: LD_VAR 0 3
12264: PUSH
12265: LD_VAR 0 1
12269: ARRAY
12270: STR
12271: PUSH
12272: LD_STRING -Stim-a-1
12274: STR
12275: PPUSH
12276: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_VAR 0 2
12289: PPUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 3
12299: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12300: LD_ADDR_VAR 0 3
12304: PUSH
12305: LD_VAR 0 3
12309: PPUSH
12310: LD_VAR 0 1
12314: PPUSH
12315: CALL_OW 3
12319: ST_TO_ADDR
// drugsTested := true ;
12320: LD_ADDR_EXP 6
12324: PUSH
12325: LD_INT 1
12327: ST_TO_ADDR
// DialogueOff ;
12328: CALL_OW 7
// break ;
12332: GO 12336
// end ;
12334: GO 12189
12336: POP
12337: POP
// until not tmp ;
12338: LD_VAR 0 2
12342: NOT
12343: IFFALSE 12167
// end ;
12345: PPOPN 3
12347: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12348: LD_INT 22
12350: PUSH
12351: LD_INT 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 34
12360: PUSH
12361: LD_INT 31
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 33
12389: PUSH
12390: LD_INT 2
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: AND
12406: IFFALSE 12419
12408: GO 12410
12410: DISABLE
// remoteControlConstructed := true ;
12411: LD_ADDR_EXP 12
12415: PUSH
12416: LD_INT 1
12418: ST_TO_ADDR
12419: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12420: LD_EXP 12
12424: IFFALSE 12724
12426: GO 12428
12428: DISABLE
12429: LD_INT 0
12431: PPUSH
12432: PPUSH
12433: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_EXP 21
12443: PUSH
12444: LD_EXP 22
12448: PUSH
12449: LD_EXP 30
12453: PUSH
12454: LD_EXP 28
12458: PUSH
12459: LD_EXP 26
12463: PUSH
12464: LD_EXP 27
12468: PUSH
12469: LD_EXP 32
12473: PUSH
12474: LD_EXP 25
12478: PUSH
12479: LD_EXP 23
12483: PUSH
12484: LD_EXP 24
12488: PUSH
12489: LD_EXP 33
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12507: LD_ADDR_VAR 0 3
12511: PUSH
12512: LD_STRING H
12514: PUSH
12515: LD_STRING G
12517: PUSH
12518: LD_STRING O
12520: PUSH
12521: LD_STRING Mar
12523: PUSH
12524: LD_STRING K
12526: PUSH
12527: LD_STRING S
12529: PUSH
12530: LD_STRING Ks
12532: PUSH
12533: LD_STRING Kam
12535: PUSH
12536: LD_STRING M
12538: PUSH
12539: LD_STRING I
12541: PUSH
12542: LD_STRING A
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12558: LD_INT 35
12560: PPUSH
12561: CALL_OW 67
// for i := tmp downto 1 do
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: DOUBLE
12571: LD_VAR 0 2
12575: INC
12576: ST_TO_ADDR
12577: LD_INT 1
12579: PUSH
12580: FOR_DOWNTO
12581: IFFALSE 12715
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12583: LD_VAR 0 2
12587: PUSH
12588: LD_VAR 0 1
12592: ARRAY
12593: PPUSH
12594: CALL_OW 257
12598: PUSH
12599: LD_INT 3
12601: EQUAL
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: LD_VAR 0 1
12612: ARRAY
12613: PPUSH
12614: CALL_OW 432
12618: AND
12619: IFFALSE 12713
// begin DialogueOn ;
12621: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12625: LD_VAR 0 2
12629: PUSH
12630: LD_VAR 0 1
12634: ARRAY
12635: PPUSH
12636: LD_STRING D
12638: PUSH
12639: LD_VAR 0 3
12643: PUSH
12644: LD_VAR 0 1
12648: ARRAY
12649: STR
12650: PUSH
12651: LD_STRING -RC-a-1
12653: STR
12654: PPUSH
12655: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12659: LD_ADDR_VAR 0 2
12663: PUSH
12664: LD_VAR 0 2
12668: PPUSH
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL_OW 3
12678: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12679: LD_ADDR_VAR 0 3
12683: PUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 3
12698: ST_TO_ADDR
// DialogueOff ;
12699: CALL_OW 7
// remoteControlTested := true ;
12703: LD_ADDR_EXP 7
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// break ;
12711: GO 12715
// end ;
12713: GO 12580
12715: POP
12716: POP
// until not tmp ;
12717: LD_VAR 0 2
12721: NOT
12722: IFFALSE 12558
// end ;
12724: PPOPN 3
12726: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12727: LD_EXP 7
12731: PUSH
12732: LD_EXP 28
12736: PPUSH
12737: CALL_OW 302
12741: AND
12742: IFFALSE 12771
12744: GO 12746
12746: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12747: LD_EXP 28
12751: PPUSH
12752: LD_STRING DMar-RC-a-2
12754: PPUSH
12755: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12759: LD_EXP 28
12763: PPUSH
12764: LD_STRING DMar-RC-a-3
12766: PPUSH
12767: CALL_OW 88
// end ;
12771: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12772: LD_EXP 14
12776: PUSH
12777: LD_EXP 21
12781: PPUSH
12782: LD_EXP 33
12786: PPUSH
12787: CALL_OW 296
12791: PUSH
12792: LD_INT 8
12794: LESS
12795: AND
12796: PUSH
12797: LD_INT 2
12799: PPUSH
12800: CALL_OW 463
12804: NOT
12805: AND
12806: PUSH
12807: LD_EXP 33
12811: PPUSH
12812: CALL_OW 302
12816: AND
12817: PUSH
12818: LD_EXP 21
12822: PPUSH
12823: CALL_OW 302
12827: AND
12828: IFFALSE 13006
12830: GO 12832
12832: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12833: LD_EXP 33
12837: PPUSH
12838: CALL_OW 310
12842: NOT
12843: IFFALSE 12859
// ComTurnUnit ( Aviradze , Heike ) ;
12845: LD_EXP 33
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: CALL_OW 119
// if not IsInUnit ( Heike ) then
12859: LD_EXP 21
12863: PPUSH
12864: CALL_OW 310
12868: NOT
12869: IFFALSE 12885
// ComTurnUnit ( Heike , Aviradze ) ;
12871: LD_EXP 21
12875: PPUSH
12876: LD_EXP 33
12880: PPUSH
12881: CALL_OW 119
// wait ( 0 0$1 ) ;
12885: LD_INT 35
12887: PPUSH
12888: CALL_OW 67
// DialogueOn ;
12892: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12896: LD_EXP 33
12900: PPUSH
12901: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12905: LD_EXP 21
12909: PPUSH
12910: LD_STRING DH-Beria-1
12912: PPUSH
12913: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12917: LD_EXP 33
12921: PPUSH
12922: LD_STRING DA-Beria-2
12924: PPUSH
12925: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12929: LD_EXP 21
12933: PPUSH
12934: LD_STRING DH-Beria-3
12936: PPUSH
12937: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12941: LD_EXP 33
12945: PPUSH
12946: LD_STRING DA-Beria-4
12948: PPUSH
12949: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12953: LD_EXP 33
12957: PPUSH
12958: LD_STRING DA-Beria-5
12960: PPUSH
12961: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12965: LD_EXP 33
12969: PPUSH
12970: LD_STRING DA-Beria-6
12972: PPUSH
12973: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12977: LD_EXP 21
12981: PPUSH
12982: LD_STRING DA-Beria-7
12984: PPUSH
12985: CALL_OW 88
// DialogueOff ;
12989: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12993: LD_INT 52
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: CALL_OW 322
// end ;
13006: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13007: LD_EXP 26
13011: PPUSH
13012: CALL_OW 300
13016: PUSH
13017: LD_EXP 26
13021: PPUSH
13022: CALL_OW 256
13026: PUSH
13027: LD_INT 10
13029: LESS
13030: AND
13031: IFFALSE 13068
13033: GO 13035
13035: DISABLE
// begin DialogueOn ;
13036: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13040: LD_EXP 26
13044: PPUSH
13045: LD_STRING DK-Kdeath-1
13047: PPUSH
13048: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13052: LD_EXP 21
13056: PPUSH
13057: LD_STRING DH-Kdeath-2
13059: PPUSH
13060: CALL_OW 88
// DialogueOff ;
13064: CALL_OW 7
// end ;
13068: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13069: LD_INT 2
13071: PPUSH
13072: LD_EXP 39
13076: PPUSH
13077: CALL 1298 0 2
13081: IFFALSE 13098
13083: GO 13085
13085: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13086: LD_EXP 21
13090: PPUSH
13091: LD_STRING DH-Obj-1
13093: PPUSH
13094: CALL_OW 88
13098: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13099: LD_INT 2
13101: PPUSH
13102: LD_EXP 40
13106: PPUSH
13107: CALL 1298 0 2
13111: IFFALSE 13128
13113: GO 13115
13115: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13116: LD_EXP 21
13120: PPUSH
13121: LD_STRING DH-Obj-a-1
13123: PPUSH
13124: CALL_OW 88
13128: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13129: LD_EXP 10
13133: PUSH
13134: LD_OWVAR 1
13138: PUSH
13139: LD_INT 23100
13141: PUSH
13142: LD_INT 22050
13144: PUSH
13145: LD_INT 21000
13147: PUSH
13148: LD_INT 19950
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_OWVAR 67
13161: ARRAY
13162: GREATEREQUAL
13163: OR
13164: IFFALSE 13190
13166: GO 13168
13168: DISABLE
// begin if eastBaseCaptured then
13169: LD_EXP 10
13173: IFFALSE 13182
// wait ( 2 2$00 ) ;
13175: LD_INT 4200
13177: PPUSH
13178: CALL_OW 67
// convoyStarted := true ;
13182: LD_ADDR_EXP 17
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// end ;
13190: END
// every 0 0$1 trigger convoyStarted do
13191: LD_EXP 17
13195: IFFALSE 13286
13197: GO 13199
13199: DISABLE
// begin DialogueOn ;
13200: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13204: LD_EXP 29
13208: PPUSH
13209: LD_STRING DShar-Convoy-1
13211: PPUSH
13212: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13216: LD_EXP 21
13220: PPUSH
13221: LD_STRING DH-Convoy-2
13223: PPUSH
13224: CALL_OW 88
// DialogueOff ;
13228: CALL_OW 7
// wait ( 0 0$10 ) ;
13232: LD_INT 350
13234: PPUSH
13235: CALL_OW 67
// PrepareConvoy ;
13239: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13243: LD_INT 5250
13245: PPUSH
13246: LD_INT 11550
13248: PPUSH
13249: CALL_OW 12
13253: PPUSH
13254: CALL_OW 67
// PrepareConvoy ;
13258: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13262: LD_ADDR_EXP 16
13266: PUSH
13267: LD_EXP 16
13271: PUSH
13272: LD_INT 1
13274: MINUS
13275: ST_TO_ADDR
// until convoyCounter <= 0 ;
13276: LD_EXP 16
13280: PUSH
13281: LD_INT 0
13283: LESSEQUAL
13284: IFFALSE 13243
// end ;
13286: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13287: LD_EXP 15
13291: PUSH
13292: LD_INT 10
13294: GREATEREQUAL
13295: IFFALSE 13312
13297: GO 13299
13299: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13300: LD_EXP 31
13304: PPUSH
13305: LD_STRING DOm-Fail-1
13307: PPUSH
13308: CALL_OW 94
13312: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13313: LD_EXP 39
13317: NOT
13318: PUSH
13319: LD_EXP 40
13323: NOT
13324: AND
13325: IFFALSE 13337
13327: GO 13329
13329: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13330: LD_STRING RaiderDone
13332: PPUSH
13333: CALL_OW 337
13337: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13338: LD_INT 22
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 33
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PPUSH
13362: CALL_OW 69
13366: PUSH
13367: LD_INT 3
13369: GREATEREQUAL
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 34
13383: PUSH
13384: LD_INT 31
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PPUSH
13395: CALL_OW 69
13399: PUSH
13400: LD_INT 2
13402: GREATEREQUAL
13403: AND
13404: IFFALSE 13416
13406: GO 13408
13408: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13409: LD_STRING RemoteControlDone
13411: PPUSH
13412: CALL_OW 337
13416: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 ;
13417: LD_EXP 16
13421: PUSH
13422: LD_INT 1
13424: LESS
13425: PUSH
13426: LD_EXP 41
13430: PPUSH
13431: LD_INT 52
13433: PUSH
13434: EMPTY
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 1
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 72
13455: NOT
13456: AND
13457: PUSH
13458: LD_OWVAR 1
13462: PUSH
13463: LD_INT 126000
13465: GREATEREQUAL
13466: OR
13467: IFFALSE 14477
13469: GO 13471
13471: DISABLE
13472: LD_INT 0
13474: PPUSH
13475: PPUSH
13476: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13477: LD_STRING ReinforcementsDone
13479: PPUSH
13480: CALL_OW 337
// music_class := music_victory ;
13484: LD_ADDR_OWVAR 72
13488: PUSH
13489: LD_INT 4
13491: ST_TO_ADDR
// InGameOn ;
13492: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13496: LD_EXP 21
13500: PPUSH
13501: LD_STRING DH-end-1
13503: PPUSH
13504: CALL_OW 88
// wait ( 0 0$2 ) ;
13508: LD_INT 70
13510: PPUSH
13511: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13515: LD_EXP 29
13519: PPUSH
13520: LD_STRING DShar-end-2
13522: PPUSH
13523: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13527: LD_EXP 39
13531: NOT
13532: PUSH
13533: LD_EXP 40
13537: NOT
13538: AND
13539: IFFALSE 13555
// begin Say ( Heike , DH-end-3 ) ;
13541: LD_EXP 21
13545: PPUSH
13546: LD_STRING DH-end-3
13548: PPUSH
13549: CALL_OW 88
// end else
13553: GO 13652
// begin Say ( Heike , DH-end-a-3 ) ;
13555: LD_EXP 21
13559: PPUSH
13560: LD_STRING DH-end-a-3
13562: PPUSH
13563: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13567: LD_EXP 29
13571: PPUSH
13572: LD_STRING DShar-end-a-4
13574: PPUSH
13575: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13579: LD_EXP 21
13583: PPUSH
13584: LD_STRING DH-end-a-5
13586: PPUSH
13587: CALL_OW 88
// InGameOff ;
13591: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13595: LD_INT 35
13597: PPUSH
13598: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13602: LD_INT 22
13604: PUSH
13605: LD_INT 3
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 21
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 69
13630: PUSH
13631: LD_INT 0
13633: EQUAL
13634: IFFALSE 13595
// InGameOn ;
13636: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13640: LD_EXP 21
13644: PPUSH
13645: LD_STRING DH-end-a-6
13647: PPUSH
13648: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13652: LD_EXP 29
13656: PPUSH
13657: LD_STRING DShar-end-3
13659: PPUSH
13660: CALL_OW 94
// if not flamethrowerBuilt then
13664: LD_EXP 20
13668: NOT
13669: IFFALSE 13678
// SetAchievement ( ACH_FIRE ) ;
13671: LD_STRING ACH_FIRE
13673: PPUSH
13674: CALL_OW 543
// if drugsTested then
13678: LD_EXP 6
13682: IFFALSE 13696
// AddMedal ( med1 , 1 ) else
13684: LD_STRING med1
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 101
13694: GO 13736
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13696: LD_INT 5
13698: PPUSH
13699: LD_INT 2
13701: PPUSH
13702: CALL_OW 321
13706: PUSH
13707: LD_INT 2
13709: EQUAL
13710: IFFALSE 13725
// AddMedal ( med1 , - 1 ) else
13712: LD_STRING med1
13714: PPUSH
13715: LD_INT 1
13717: NEG
13718: PPUSH
13719: CALL_OW 101
13723: GO 13736
// AddMedal ( med1 , - 2 ) ;
13725: LD_STRING med1
13727: PPUSH
13728: LD_INT 2
13730: NEG
13731: PPUSH
13732: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13736: LD_INT 22
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 33
13748: PUSH
13749: LD_INT 2
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: PUSH
13765: LD_INT 3
13767: GREATEREQUAL
13768: PUSH
13769: LD_INT 22
13771: PUSH
13772: LD_INT 2
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 34
13781: PUSH
13782: LD_INT 31
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PPUSH
13793: CALL_OW 69
13797: PUSH
13798: LD_INT 1
13800: GREATEREQUAL
13801: AND
13802: IFFALSE 13816
// AddMedal ( med2 , 1 ) else
13804: LD_STRING med2
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 101
13814: GO 13827
// AddMedal ( med2 , - 1 ) ;
13816: LD_STRING med2
13818: PPUSH
13819: LD_INT 1
13821: NEG
13822: PPUSH
13823: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13827: LD_EXP 15
13831: PUSH
13832: LD_INT 10
13834: PUSH
13835: LD_INT 8
13837: PUSH
13838: LD_INT 6
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: LD_OWVAR 67
13854: ARRAY
13855: LESS
13856: IFFALSE 13870
// AddMedal ( med3 , 1 ) else
13858: LD_STRING med3
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: CALL_OW 101
13868: GO 13881
// AddMedal ( med3 , - 1 ) ;
13870: LD_STRING med3
13872: PPUSH
13873: LD_INT 1
13875: NEG
13876: PPUSH
13877: CALL_OW 101
// GiveMedals ( MAIN ) ;
13881: LD_STRING MAIN
13883: PPUSH
13884: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13888: LD_INT 22
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 23
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 21
13910: PUSH
13911: LD_INT 1
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: PPUSH
13923: CALL_OW 69
13927: PPUSH
13928: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13932: LD_EXP 15
13936: PPUSH
13937: LD_STRING 05_ConvoySavedCounter
13939: PPUSH
13940: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13944: LD_EXP 13
13948: PPUSH
13949: LD_STRING 05_Radar
13951: PPUSH
13952: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13956: LD_EXP 6
13960: PPUSH
13961: LD_STRING 05_DrugsTested
13963: PPUSH
13964: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13968: LD_INT 22
13970: PUSH
13971: LD_INT 2
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 33
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 69
13996: PUSH
13997: LD_INT 3
13999: GREATEREQUAL
14000: PUSH
14001: LD_INT 22
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 34
14013: PUSH
14014: LD_INT 31
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: PUSH
14030: LD_INT 2
14032: GREATEREQUAL
14033: AND
14034: PPUSH
14035: LD_STRING 05_RemoteControl
14037: PPUSH
14038: CALL_OW 39
// tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14042: LD_ADDR_VAR 0 2
14046: PUSH
14047: LD_INT 25
14049: PPUSH
14050: LD_INT 21
14052: PUSH
14053: LD_INT 3
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// tmp2 := [ ] ;
14065: LD_ADDR_VAR 0 3
14069: PUSH
14070: EMPTY
14071: ST_TO_ADDR
// if tmp then
14072: LD_VAR 0 2
14076: IFFALSE 14229
// begin for i in tmp do
14078: LD_ADDR_VAR 0 1
14082: PUSH
14083: LD_VAR 0 2
14087: PUSH
14088: FOR_IN
14089: IFFALSE 14215
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 266
14110: PUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 250
14120: PUSH
14121: LD_VAR 0 1
14125: PPUSH
14126: CALL_OW 251
14130: PUSH
14131: LD_VAR 0 1
14135: PPUSH
14136: CALL_OW 254
14140: PUSH
14141: LD_VAR 0 1
14145: PPUSH
14146: CALL_OW 248
14150: PUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 267
14160: PUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 268
14173: PUSH
14174: LD_VAR 0 1
14178: PPUSH
14179: LD_INT 2
14181: PPUSH
14182: CALL_OW 268
14186: PUSH
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 269
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PPUSH
14208: CALL 71915 0 2
14212: ST_TO_ADDR
14213: GO 14088
14215: POP
14216: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14217: LD_VAR 0 3
14221: PPUSH
14222: LD_STRING 05_Buildings
14224: PPUSH
14225: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14229: LD_EXP 21
14233: PPUSH
14234: LD_STRING 05_Heike
14236: PPUSH
14237: CALL_OW 38
// if Aviradze then
14241: LD_EXP 33
14245: IFFALSE 14259
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14247: LD_EXP 33
14251: PPUSH
14252: LD_STRING 05_Aviradze
14254: PPUSH
14255: CALL_OW 38
// if Ibrahim then
14259: LD_EXP 24
14263: IFFALSE 14277
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14265: LD_EXP 24
14269: PPUSH
14270: LD_STRING 05_Ibrahim
14272: PPUSH
14273: CALL_OW 38
// if Kamil then
14277: LD_EXP 25
14281: IFFALSE 14295
// SaveCharacters ( Kamil , 05_Kamil ) ;
14283: LD_EXP 25
14287: PPUSH
14288: LD_STRING 05_Kamil
14290: PPUSH
14291: CALL_OW 38
// if Sophia then
14295: LD_EXP 27
14299: IFFALSE 14313
// SaveCharacters ( Sophia , 05_Sophia ) ;
14301: LD_EXP 27
14305: PPUSH
14306: LD_STRING 05_Sophia
14308: PPUSH
14309: CALL_OW 38
// if Kaia then
14313: LD_EXP 26
14317: IFFALSE 14331
// SaveCharacters ( Kaia , 05_Kaia ) ;
14319: LD_EXP 26
14323: PPUSH
14324: LD_STRING 05_Kaia
14326: PPUSH
14327: CALL_OW 38
// if Givi then
14331: LD_EXP 22
14335: IFFALSE 14349
// SaveCharacters ( Givi , 05_Givi ) ;
14337: LD_EXP 22
14341: PPUSH
14342: LD_STRING 05_Givi
14344: PPUSH
14345: CALL_OW 38
// if Mike then
14349: LD_EXP 23
14353: IFFALSE 14367
// SaveCharacters ( Mike , 05_Mike ) ;
14355: LD_EXP 23
14359: PPUSH
14360: LD_STRING 05_Mike
14362: PPUSH
14363: CALL_OW 38
// if Markov then
14367: LD_EXP 28
14371: IFFALSE 14385
// SaveCharacters ( Markov , 05_Markov ) ;
14373: LD_EXP 28
14377: PPUSH
14378: LD_STRING 05_Markov
14380: PPUSH
14381: CALL_OW 38
// if Kurt then
14385: LD_EXP 32
14389: IFFALSE 14403
// SaveCharacters ( Kurt , 05_Kurt ) ;
14391: LD_EXP 32
14395: PPUSH
14396: LD_STRING 05_Kurt
14398: PPUSH
14399: CALL_OW 38
// if heikeSecondSquad then
14403: LD_EXP 34
14407: IFFALSE 14421
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14409: LD_EXP 34
14413: PPUSH
14414: LD_STRING 05_others
14416: PPUSH
14417: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_INT 22
14428: PUSH
14429: LD_INT 2
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 23
14438: PUSH
14439: LD_INT 0
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: ST_TO_ADDR
// if tmp then
14455: LD_VAR 0 2
14459: IFFALSE 14473
// SaveCharacters ( tmp , 05_apes ) ;
14461: LD_VAR 0 2
14465: PPUSH
14466: LD_STRING 05_apes
14468: PPUSH
14469: CALL_OW 38
// YouWin ;
14473: CALL_OW 103
// end ; end_of_file
14477: PPOPN 3
14479: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14480: LD_EXP 9
14484: PUSH
14485: LD_INT 13
14487: PPUSH
14488: LD_INT 1
14490: PPUSH
14491: CALL_OW 287
14495: PUSH
14496: LD_INT 25
14498: LESS
14499: AND
14500: IFFALSE 14527
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14506: LD_INT 1
14508: PPUSH
14509: LD_INT 5
14511: PPUSH
14512: CALL_OW 12
14516: PPUSH
14517: LD_INT 13
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 55
// end ; end_of_file
14527: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14528: LD_INT 0
14530: PPUSH
14531: PPUSH
14532: PPUSH
14533: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 264
14543: PUSH
14544: LD_INT 91
14546: EQUAL
14547: IFFALSE 14619
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14549: LD_INT 68
14551: PPUSH
14552: LD_VAR 0 1
14556: PPUSH
14557: CALL_OW 255
14561: PPUSH
14562: CALL_OW 321
14566: PUSH
14567: LD_INT 2
14569: EQUAL
14570: IFFALSE 14582
// eff := 70 else
14572: LD_ADDR_VAR 0 4
14576: PUSH
14577: LD_INT 70
14579: ST_TO_ADDR
14580: GO 14590
// eff := 30 ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 30
14589: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 250
14599: PPUSH
14600: LD_VAR 0 1
14604: PPUSH
14605: CALL_OW 251
14609: PPUSH
14610: LD_VAR 0 4
14614: PPUSH
14615: CALL_OW 495
// end ; end ;
14619: LD_VAR 0 2
14623: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14624: LD_INT 0
14626: PPUSH
// end ;
14627: LD_VAR 0 4
14631: RET
// export function SOS_Command ( cmd ) ; begin
14632: LD_INT 0
14634: PPUSH
// end ;
14635: LD_VAR 0 2
14639: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14640: LD_INT 0
14642: PPUSH
// end ;
14643: LD_VAR 0 6
14647: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14648: LD_INT 0
14650: PPUSH
14651: PPUSH
// if not vehicle or not factory then
14652: LD_VAR 0 1
14656: NOT
14657: PUSH
14658: LD_VAR 0 2
14662: NOT
14663: OR
14664: IFFALSE 14668
// exit ;
14666: GO 14899
// if factoryWaypoints >= factory then
14668: LD_EXP 112
14672: PUSH
14673: LD_VAR 0 2
14677: GREATEREQUAL
14678: IFFALSE 14899
// if factoryWaypoints [ factory ] then
14680: LD_EXP 112
14684: PUSH
14685: LD_VAR 0 2
14689: ARRAY
14690: IFFALSE 14899
// begin if GetControl ( vehicle ) = control_manual then
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 263
14701: PUSH
14702: LD_INT 1
14704: EQUAL
14705: IFFALSE 14786
// begin driver := IsDrivenBy ( vehicle ) ;
14707: LD_ADDR_VAR 0 4
14711: PUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 311
14721: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14722: LD_VAR 0 4
14726: PPUSH
14727: LD_EXP 112
14731: PUSH
14732: LD_VAR 0 2
14736: ARRAY
14737: PUSH
14738: LD_INT 3
14740: ARRAY
14741: PPUSH
14742: LD_EXP 112
14746: PUSH
14747: LD_VAR 0 2
14751: ARRAY
14752: PUSH
14753: LD_INT 4
14755: ARRAY
14756: PPUSH
14757: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14770: LD_VAR 0 4
14774: PPUSH
14775: LD_VAR 0 2
14779: PPUSH
14780: CALL_OW 180
// end else
14784: GO 14899
// if GetControl ( vehicle ) = control_remote then
14786: LD_VAR 0 1
14790: PPUSH
14791: CALL_OW 263
14795: PUSH
14796: LD_INT 2
14798: EQUAL
14799: IFFALSE 14860
// begin wait ( 0 0$2 ) ;
14801: LD_INT 70
14803: PPUSH
14804: CALL_OW 67
// if Connect ( vehicle ) then
14808: LD_VAR 0 1
14812: PPUSH
14813: CALL 42572 0 1
14817: IFFALSE 14858
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_EXP 112
14828: PUSH
14829: LD_VAR 0 2
14833: ARRAY
14834: PUSH
14835: LD_INT 3
14837: ARRAY
14838: PPUSH
14839: LD_EXP 112
14843: PUSH
14844: LD_VAR 0 2
14848: ARRAY
14849: PUSH
14850: LD_INT 4
14852: ARRAY
14853: PPUSH
14854: CALL_OW 171
// end else
14858: GO 14899
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14860: LD_VAR 0 1
14864: PPUSH
14865: LD_EXP 112
14869: PUSH
14870: LD_VAR 0 2
14874: ARRAY
14875: PUSH
14876: LD_INT 3
14878: ARRAY
14879: PPUSH
14880: LD_EXP 112
14884: PUSH
14885: LD_VAR 0 2
14889: ARRAY
14890: PUSH
14891: LD_INT 4
14893: ARRAY
14894: PPUSH
14895: CALL_OW 171
// end ; end ;
14899: LD_VAR 0 3
14903: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14904: LD_INT 0
14906: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14907: LD_VAR 0 1
14911: PUSH
14912: LD_INT 250
14914: EQUAL
14915: PUSH
14916: LD_VAR 0 2
14920: PPUSH
14921: CALL_OW 264
14925: PUSH
14926: LD_INT 81
14928: EQUAL
14929: AND
14930: IFFALSE 14951
// MinerPlaceMine ( unit , x , y ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_VAR 0 4
14941: PPUSH
14942: LD_VAR 0 5
14946: PPUSH
14947: CALL 17336 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14951: LD_VAR 0 1
14955: PUSH
14956: LD_INT 251
14958: EQUAL
14959: PUSH
14960: LD_VAR 0 2
14964: PPUSH
14965: CALL_OW 264
14969: PUSH
14970: LD_INT 81
14972: EQUAL
14973: AND
14974: IFFALSE 14995
// MinerDetonateMine ( unit , x , y ) ;
14976: LD_VAR 0 2
14980: PPUSH
14981: LD_VAR 0 4
14985: PPUSH
14986: LD_VAR 0 5
14990: PPUSH
14991: CALL 17611 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14995: LD_VAR 0 1
14999: PUSH
15000: LD_INT 252
15002: EQUAL
15003: PUSH
15004: LD_VAR 0 2
15008: PPUSH
15009: CALL_OW 264
15013: PUSH
15014: LD_INT 81
15016: EQUAL
15017: AND
15018: IFFALSE 15039
// MinerCreateMinefield ( unit , x , y ) ;
15020: LD_VAR 0 2
15024: PPUSH
15025: LD_VAR 0 4
15029: PPUSH
15030: LD_VAR 0 5
15034: PPUSH
15035: CALL 18028 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15039: LD_VAR 0 1
15043: PUSH
15044: LD_INT 253
15046: EQUAL
15047: PUSH
15048: LD_VAR 0 2
15052: PPUSH
15053: CALL_OW 257
15057: PUSH
15058: LD_INT 5
15060: EQUAL
15061: AND
15062: IFFALSE 15083
// ComBinocular ( unit , x , y ) ;
15064: LD_VAR 0 2
15068: PPUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_VAR 0 5
15078: PPUSH
15079: CALL 18397 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15083: LD_VAR 0 1
15087: PUSH
15088: LD_INT 254
15090: EQUAL
15091: PUSH
15092: LD_VAR 0 2
15096: PPUSH
15097: CALL_OW 264
15101: PUSH
15102: LD_INT 99
15104: EQUAL
15105: AND
15106: PUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: CALL_OW 263
15116: PUSH
15117: LD_INT 3
15119: EQUAL
15120: AND
15121: IFFALSE 15137
// HackDestroyVehicle ( unit , selectedUnit ) ;
15123: LD_VAR 0 2
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: CALL 16700 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15137: LD_VAR 0 1
15141: PUSH
15142: LD_INT 255
15144: EQUAL
15145: PUSH
15146: LD_VAR 0 2
15150: PPUSH
15151: CALL_OW 264
15155: PUSH
15156: LD_INT 14
15158: PUSH
15159: LD_INT 53
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: IN
15166: AND
15167: PUSH
15168: LD_VAR 0 4
15172: PPUSH
15173: LD_VAR 0 5
15177: PPUSH
15178: CALL_OW 488
15182: AND
15183: IFFALSE 15207
// CutTreeXYR ( unit , x , y , 12 ) ;
15185: LD_VAR 0 2
15189: PPUSH
15190: LD_VAR 0 4
15194: PPUSH
15195: LD_VAR 0 5
15199: PPUSH
15200: LD_INT 12
15202: PPUSH
15203: CALL 15270 0 4
// if cmd = 256 then
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 256
15214: EQUAL
15215: IFFALSE 15236
// SetFactoryWaypoint ( unit , x , y ) ;
15217: LD_VAR 0 2
15221: PPUSH
15222: LD_VAR 0 4
15226: PPUSH
15227: LD_VAR 0 5
15231: PPUSH
15232: CALL 33155 0 3
// if cmd = 257 then
15236: LD_VAR 0 1
15240: PUSH
15241: LD_INT 257
15243: EQUAL
15244: IFFALSE 15265
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15246: LD_VAR 0 2
15250: PPUSH
15251: LD_VAR 0 4
15255: PPUSH
15256: LD_VAR 0 5
15260: PPUSH
15261: CALL 33517 0 3
// end ;
15265: LD_VAR 0 6
15269: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15270: LD_INT 0
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15281: LD_VAR 0 1
15285: NOT
15286: PUSH
15287: LD_VAR 0 2
15291: PPUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: CALL_OW 488
15301: NOT
15302: OR
15303: PUSH
15304: LD_VAR 0 4
15308: NOT
15309: OR
15310: IFFALSE 15314
// exit ;
15312: GO 15654
// list := [ ] ;
15314: LD_ADDR_VAR 0 13
15318: PUSH
15319: EMPTY
15320: ST_TO_ADDR
// if x - r < 0 then
15321: LD_VAR 0 2
15325: PUSH
15326: LD_VAR 0 4
15330: MINUS
15331: PUSH
15332: LD_INT 0
15334: LESS
15335: IFFALSE 15347
// min_x := 0 else
15337: LD_ADDR_VAR 0 7
15341: PUSH
15342: LD_INT 0
15344: ST_TO_ADDR
15345: GO 15363
// min_x := x - r ;
15347: LD_ADDR_VAR 0 7
15351: PUSH
15352: LD_VAR 0 2
15356: PUSH
15357: LD_VAR 0 4
15361: MINUS
15362: ST_TO_ADDR
// if y - r < 0 then
15363: LD_VAR 0 3
15367: PUSH
15368: LD_VAR 0 4
15372: MINUS
15373: PUSH
15374: LD_INT 0
15376: LESS
15377: IFFALSE 15389
// min_y := 0 else
15379: LD_ADDR_VAR 0 8
15383: PUSH
15384: LD_INT 0
15386: ST_TO_ADDR
15387: GO 15405
// min_y := y - r ;
15389: LD_ADDR_VAR 0 8
15393: PUSH
15394: LD_VAR 0 3
15398: PUSH
15399: LD_VAR 0 4
15403: MINUS
15404: ST_TO_ADDR
// max_x := x + r ;
15405: LD_ADDR_VAR 0 9
15409: PUSH
15410: LD_VAR 0 2
15414: PUSH
15415: LD_VAR 0 4
15419: PLUS
15420: ST_TO_ADDR
// max_y := y + r ;
15421: LD_ADDR_VAR 0 10
15425: PUSH
15426: LD_VAR 0 3
15430: PUSH
15431: LD_VAR 0 4
15435: PLUS
15436: ST_TO_ADDR
// for _x = min_x to max_x do
15437: LD_ADDR_VAR 0 11
15441: PUSH
15442: DOUBLE
15443: LD_VAR 0 7
15447: DEC
15448: ST_TO_ADDR
15449: LD_VAR 0 9
15453: PUSH
15454: FOR_TO
15455: IFFALSE 15572
// for _y = min_y to max_y do
15457: LD_ADDR_VAR 0 12
15461: PUSH
15462: DOUBLE
15463: LD_VAR 0 8
15467: DEC
15468: ST_TO_ADDR
15469: LD_VAR 0 10
15473: PUSH
15474: FOR_TO
15475: IFFALSE 15568
// begin if not ValidHex ( _x , _y ) then
15477: LD_VAR 0 11
15481: PPUSH
15482: LD_VAR 0 12
15486: PPUSH
15487: CALL_OW 488
15491: NOT
15492: IFFALSE 15496
// continue ;
15494: GO 15474
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15496: LD_VAR 0 11
15500: PPUSH
15501: LD_VAR 0 12
15505: PPUSH
15506: CALL_OW 351
15510: PUSH
15511: LD_VAR 0 11
15515: PPUSH
15516: LD_VAR 0 12
15520: PPUSH
15521: CALL_OW 554
15525: AND
15526: IFFALSE 15566
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15528: LD_ADDR_VAR 0 13
15532: PUSH
15533: LD_VAR 0 13
15537: PPUSH
15538: LD_VAR 0 13
15542: PUSH
15543: LD_INT 1
15545: PLUS
15546: PPUSH
15547: LD_VAR 0 11
15551: PUSH
15552: LD_VAR 0 12
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 2
15565: ST_TO_ADDR
// end ;
15566: GO 15474
15568: POP
15569: POP
15570: GO 15454
15572: POP
15573: POP
// if not list then
15574: LD_VAR 0 13
15578: NOT
15579: IFFALSE 15583
// exit ;
15581: GO 15654
// for i in list do
15583: LD_ADDR_VAR 0 6
15587: PUSH
15588: LD_VAR 0 13
15592: PUSH
15593: FOR_IN
15594: IFFALSE 15652
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15596: LD_VAR 0 1
15600: PPUSH
15601: LD_STRING M
15603: PUSH
15604: LD_VAR 0 6
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_VAR 0 6
15617: PUSH
15618: LD_INT 2
15620: ARRAY
15621: PUSH
15622: LD_INT 0
15624: PUSH
15625: LD_INT 0
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: LD_INT 0
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: PPUSH
15646: CALL_OW 447
15650: GO 15593
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 5
15658: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15659: LD_EXP 44
15663: NOT
15664: IFFALSE 15714
15666: GO 15668
15668: DISABLE
// begin initHack := true ;
15669: LD_ADDR_EXP 44
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// hackTanks := [ ] ;
15677: LD_ADDR_EXP 45
15681: PUSH
15682: EMPTY
15683: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15684: LD_ADDR_EXP 46
15688: PUSH
15689: EMPTY
15690: ST_TO_ADDR
// hackLimit := 3 ;
15691: LD_ADDR_EXP 47
15695: PUSH
15696: LD_INT 3
15698: ST_TO_ADDR
// hackDist := 12 ;
15699: LD_ADDR_EXP 48
15703: PUSH
15704: LD_INT 12
15706: ST_TO_ADDR
// hackCounter := [ ] ;
15707: LD_ADDR_EXP 49
15711: PUSH
15712: EMPTY
15713: ST_TO_ADDR
// end ;
15714: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15715: LD_EXP 44
15719: PUSH
15720: LD_INT 34
15722: PUSH
15723: LD_INT 99
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: AND
15735: IFFALSE 15988
15737: GO 15739
15739: DISABLE
15740: LD_INT 0
15742: PPUSH
15743: PPUSH
// begin enable ;
15744: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15745: LD_ADDR_VAR 0 1
15749: PUSH
15750: LD_INT 34
15752: PUSH
15753: LD_INT 99
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 69
15764: PUSH
15765: FOR_IN
15766: IFFALSE 15986
// begin if not i in hackTanks then
15768: LD_VAR 0 1
15772: PUSH
15773: LD_EXP 45
15777: IN
15778: NOT
15779: IFFALSE 15862
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15781: LD_ADDR_EXP 45
15785: PUSH
15786: LD_EXP 45
15790: PPUSH
15791: LD_EXP 45
15795: PUSH
15796: LD_INT 1
15798: PLUS
15799: PPUSH
15800: LD_VAR 0 1
15804: PPUSH
15805: CALL_OW 1
15809: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15810: LD_ADDR_EXP 46
15814: PUSH
15815: LD_EXP 46
15819: PPUSH
15820: LD_EXP 46
15824: PUSH
15825: LD_INT 1
15827: PLUS
15828: PPUSH
15829: EMPTY
15830: PPUSH
15831: CALL_OW 1
15835: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15836: LD_ADDR_EXP 49
15840: PUSH
15841: LD_EXP 49
15845: PPUSH
15846: LD_EXP 49
15850: PUSH
15851: LD_INT 1
15853: PLUS
15854: PPUSH
15855: EMPTY
15856: PPUSH
15857: CALL_OW 1
15861: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 302
15871: NOT
15872: IFFALSE 15885
// begin HackUnlinkAll ( i ) ;
15874: LD_VAR 0 1
15878: PPUSH
15879: CALL 15991 0 1
// continue ;
15883: GO 15765
// end ; HackCheckCapturedStatus ( i ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL 16434 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15894: LD_ADDR_VAR 0 2
15898: PUSH
15899: LD_INT 81
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 255
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 33
15918: PUSH
15919: LD_INT 3
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 91
15928: PUSH
15929: LD_VAR 0 1
15933: PUSH
15934: LD_EXP 48
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 50
15946: PUSH
15947: EMPTY
15948: LIST
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: ST_TO_ADDR
// if not tmp then
15961: LD_VAR 0 2
15965: NOT
15966: IFFALSE 15970
// continue ;
15968: GO 15765
// HackLink ( i , tmp ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL 16127 0 2
// end ;
15984: GO 15765
15986: POP
15987: POP
// end ;
15988: PPOPN 2
15990: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15991: LD_INT 0
15993: PPUSH
15994: PPUSH
15995: PPUSH
// if not hack in hackTanks then
15996: LD_VAR 0 1
16000: PUSH
16001: LD_EXP 45
16005: IN
16006: NOT
16007: IFFALSE 16011
// exit ;
16009: GO 16122
// index := GetElementIndex ( hackTanks , hack ) ;
16011: LD_ADDR_VAR 0 4
16015: PUSH
16016: LD_EXP 45
16020: PPUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL 39388 0 2
16030: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16031: LD_EXP 46
16035: PUSH
16036: LD_VAR 0 4
16040: ARRAY
16041: IFFALSE 16122
// begin for i in hackTanksCaptured [ index ] do
16043: LD_ADDR_VAR 0 3
16047: PUSH
16048: LD_EXP 46
16052: PUSH
16053: LD_VAR 0 4
16057: ARRAY
16058: PUSH
16059: FOR_IN
16060: IFFALSE 16086
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16062: LD_VAR 0 3
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: LD_VAR 0 3
16075: PUSH
16076: LD_INT 2
16078: ARRAY
16079: PPUSH
16080: CALL_OW 235
16084: GO 16059
16086: POP
16087: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16088: LD_ADDR_EXP 46
16092: PUSH
16093: LD_EXP 46
16097: PPUSH
16098: LD_VAR 0 4
16102: PPUSH
16103: EMPTY
16104: PPUSH
16105: CALL_OW 1
16109: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_INT 0
16117: PPUSH
16118: CALL_OW 505
// end ; end ;
16122: LD_VAR 0 2
16126: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16127: LD_INT 0
16129: PPUSH
16130: PPUSH
16131: PPUSH
// if not hack in hackTanks or not vehicles then
16132: LD_VAR 0 1
16136: PUSH
16137: LD_EXP 45
16141: IN
16142: NOT
16143: PUSH
16144: LD_VAR 0 2
16148: NOT
16149: OR
16150: IFFALSE 16154
// exit ;
16152: GO 16429
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16154: LD_ADDR_VAR 0 2
16158: PUSH
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_VAR 0 2
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: LD_INT 1
16174: PPUSH
16175: CALL 40038 0 4
16179: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16180: LD_ADDR_VAR 0 5
16184: PUSH
16185: LD_EXP 45
16189: PPUSH
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL 39388 0 2
16199: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16200: LD_EXP 46
16204: PUSH
16205: LD_VAR 0 5
16209: ARRAY
16210: PUSH
16211: LD_EXP 47
16215: LESS
16216: IFFALSE 16405
// begin for i := 1 to vehicles do
16218: LD_ADDR_VAR 0 4
16222: PUSH
16223: DOUBLE
16224: LD_INT 1
16226: DEC
16227: ST_TO_ADDR
16228: LD_VAR 0 2
16232: PUSH
16233: FOR_TO
16234: IFFALSE 16403
// begin if hackTanksCaptured [ index ] = hackLimit then
16236: LD_EXP 46
16240: PUSH
16241: LD_VAR 0 5
16245: ARRAY
16246: PUSH
16247: LD_EXP 47
16251: EQUAL
16252: IFFALSE 16256
// break ;
16254: GO 16403
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16256: LD_ADDR_EXP 49
16260: PUSH
16261: LD_EXP 49
16265: PPUSH
16266: LD_VAR 0 5
16270: PPUSH
16271: LD_EXP 49
16275: PUSH
16276: LD_VAR 0 5
16280: ARRAY
16281: PUSH
16282: LD_INT 1
16284: PLUS
16285: PPUSH
16286: CALL_OW 1
16290: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16291: LD_ADDR_EXP 46
16295: PUSH
16296: LD_EXP 46
16300: PPUSH
16301: LD_VAR 0 5
16305: PUSH
16306: LD_EXP 46
16310: PUSH
16311: LD_VAR 0 5
16315: ARRAY
16316: PUSH
16317: LD_INT 1
16319: PLUS
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PPUSH
16325: LD_VAR 0 2
16329: PUSH
16330: LD_VAR 0 4
16334: ARRAY
16335: PUSH
16336: LD_VAR 0 2
16340: PUSH
16341: LD_VAR 0 4
16345: ARRAY
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PPUSH
16356: CALL 39603 0 3
16360: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16361: LD_VAR 0 2
16365: PUSH
16366: LD_VAR 0 4
16370: ARRAY
16371: PPUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 255
16381: PPUSH
16382: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16386: LD_VAR 0 2
16390: PUSH
16391: LD_VAR 0 4
16395: ARRAY
16396: PPUSH
16397: CALL_OW 141
// end ;
16401: GO 16233
16403: POP
16404: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16405: LD_VAR 0 1
16409: PPUSH
16410: LD_EXP 46
16414: PUSH
16415: LD_VAR 0 5
16419: ARRAY
16420: PUSH
16421: LD_INT 0
16423: PLUS
16424: PPUSH
16425: CALL_OW 505
// end ;
16429: LD_VAR 0 3
16433: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16434: LD_INT 0
16436: PPUSH
16437: PPUSH
16438: PPUSH
16439: PPUSH
// if not hack in hackTanks then
16440: LD_VAR 0 1
16444: PUSH
16445: LD_EXP 45
16449: IN
16450: NOT
16451: IFFALSE 16455
// exit ;
16453: GO 16695
// index := GetElementIndex ( hackTanks , hack ) ;
16455: LD_ADDR_VAR 0 4
16459: PUSH
16460: LD_EXP 45
16464: PPUSH
16465: LD_VAR 0 1
16469: PPUSH
16470: CALL 39388 0 2
16474: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16475: LD_ADDR_VAR 0 3
16479: PUSH
16480: DOUBLE
16481: LD_EXP 46
16485: PUSH
16486: LD_VAR 0 4
16490: ARRAY
16491: INC
16492: ST_TO_ADDR
16493: LD_INT 1
16495: PUSH
16496: FOR_DOWNTO
16497: IFFALSE 16669
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16499: LD_ADDR_VAR 0 5
16503: PUSH
16504: LD_EXP 46
16508: PUSH
16509: LD_VAR 0 4
16513: ARRAY
16514: PUSH
16515: LD_VAR 0 3
16519: ARRAY
16520: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16521: LD_VAR 0 5
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PPUSH
16530: CALL_OW 302
16534: NOT
16535: PUSH
16536: LD_VAR 0 5
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: PPUSH
16545: CALL_OW 255
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 255
16559: NONEQUAL
16560: OR
16561: IFFALSE 16667
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16563: LD_VAR 0 5
16567: PUSH
16568: LD_INT 1
16570: ARRAY
16571: PPUSH
16572: CALL_OW 305
16576: PUSH
16577: LD_VAR 0 5
16581: PUSH
16582: LD_INT 1
16584: ARRAY
16585: PPUSH
16586: CALL_OW 255
16590: PUSH
16591: LD_VAR 0 1
16595: PPUSH
16596: CALL_OW 255
16600: EQUAL
16601: AND
16602: IFFALSE 16626
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16604: LD_VAR 0 5
16608: PUSH
16609: LD_INT 1
16611: ARRAY
16612: PPUSH
16613: LD_VAR 0 5
16617: PUSH
16618: LD_INT 2
16620: ARRAY
16621: PPUSH
16622: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16626: LD_ADDR_EXP 46
16630: PUSH
16631: LD_EXP 46
16635: PPUSH
16636: LD_VAR 0 4
16640: PPUSH
16641: LD_EXP 46
16645: PUSH
16646: LD_VAR 0 4
16650: ARRAY
16651: PPUSH
16652: LD_VAR 0 3
16656: PPUSH
16657: CALL_OW 3
16661: PPUSH
16662: CALL_OW 1
16666: ST_TO_ADDR
// end ; end ;
16667: GO 16496
16669: POP
16670: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_EXP 46
16680: PUSH
16681: LD_VAR 0 4
16685: ARRAY
16686: PUSH
16687: LD_INT 0
16689: PLUS
16690: PPUSH
16691: CALL_OW 505
// end ;
16695: LD_VAR 0 2
16699: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16700: LD_INT 0
16702: PPUSH
16703: PPUSH
16704: PPUSH
16705: PPUSH
// if not hack in hackTanks then
16706: LD_VAR 0 1
16710: PUSH
16711: LD_EXP 45
16715: IN
16716: NOT
16717: IFFALSE 16721
// exit ;
16719: GO 16806
// index := GetElementIndex ( hackTanks , hack ) ;
16721: LD_ADDR_VAR 0 5
16725: PUSH
16726: LD_EXP 45
16730: PPUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL 39388 0 2
16740: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16741: LD_ADDR_VAR 0 4
16745: PUSH
16746: DOUBLE
16747: LD_INT 1
16749: DEC
16750: ST_TO_ADDR
16751: LD_EXP 46
16755: PUSH
16756: LD_VAR 0 5
16760: ARRAY
16761: PUSH
16762: FOR_TO
16763: IFFALSE 16804
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16765: LD_EXP 46
16769: PUSH
16770: LD_VAR 0 5
16774: ARRAY
16775: PUSH
16776: LD_VAR 0 4
16780: ARRAY
16781: PUSH
16782: LD_INT 1
16784: ARRAY
16785: PUSH
16786: LD_VAR 0 2
16790: EQUAL
16791: IFFALSE 16802
// KillUnit ( vehicle ) ;
16793: LD_VAR 0 2
16797: PPUSH
16798: CALL_OW 66
16802: GO 16762
16804: POP
16805: POP
// end ;
16806: LD_VAR 0 3
16810: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16811: LD_EXP 50
16815: NOT
16816: IFFALSE 16851
16818: GO 16820
16820: DISABLE
// begin initMiner := true ;
16821: LD_ADDR_EXP 50
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// minersList := [ ] ;
16829: LD_ADDR_EXP 51
16833: PUSH
16834: EMPTY
16835: ST_TO_ADDR
// minerMinesList := [ ] ;
16836: LD_ADDR_EXP 52
16840: PUSH
16841: EMPTY
16842: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16843: LD_ADDR_EXP 53
16847: PUSH
16848: LD_INT 5
16850: ST_TO_ADDR
// end ;
16851: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16852: LD_EXP 50
16856: PUSH
16857: LD_INT 34
16859: PUSH
16860: LD_INT 81
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL_OW 69
16871: AND
16872: IFFALSE 17333
16874: GO 16876
16876: DISABLE
16877: LD_INT 0
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
// begin enable ;
16883: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16884: LD_ADDR_VAR 0 1
16888: PUSH
16889: LD_INT 34
16891: PUSH
16892: LD_INT 81
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PPUSH
16899: CALL_OW 69
16903: PUSH
16904: FOR_IN
16905: IFFALSE 16977
// begin if not i in minersList then
16907: LD_VAR 0 1
16911: PUSH
16912: LD_EXP 51
16916: IN
16917: NOT
16918: IFFALSE 16975
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16920: LD_ADDR_EXP 51
16924: PUSH
16925: LD_EXP 51
16929: PPUSH
16930: LD_EXP 51
16934: PUSH
16935: LD_INT 1
16937: PLUS
16938: PPUSH
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 1
16948: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16949: LD_ADDR_EXP 52
16953: PUSH
16954: LD_EXP 52
16958: PPUSH
16959: LD_EXP 52
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: PPUSH
16968: EMPTY
16969: PPUSH
16970: CALL_OW 1
16974: ST_TO_ADDR
// end end ;
16975: GO 16904
16977: POP
16978: POP
// for i := minerMinesList downto 1 do
16979: LD_ADDR_VAR 0 1
16983: PUSH
16984: DOUBLE
16985: LD_EXP 52
16989: INC
16990: ST_TO_ADDR
16991: LD_INT 1
16993: PUSH
16994: FOR_DOWNTO
16995: IFFALSE 17331
// begin if IsLive ( minersList [ i ] ) then
16997: LD_EXP 51
17001: PUSH
17002: LD_VAR 0 1
17006: ARRAY
17007: PPUSH
17008: CALL_OW 300
17012: IFFALSE 17040
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17014: LD_EXP 51
17018: PUSH
17019: LD_VAR 0 1
17023: ARRAY
17024: PPUSH
17025: LD_EXP 52
17029: PUSH
17030: LD_VAR 0 1
17034: ARRAY
17035: PPUSH
17036: CALL_OW 505
// if not minerMinesList [ i ] then
17040: LD_EXP 52
17044: PUSH
17045: LD_VAR 0 1
17049: ARRAY
17050: NOT
17051: IFFALSE 17055
// continue ;
17053: GO 16994
// for j := minerMinesList [ i ] downto 1 do
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: DOUBLE
17061: LD_EXP 52
17065: PUSH
17066: LD_VAR 0 1
17070: ARRAY
17071: INC
17072: ST_TO_ADDR
17073: LD_INT 1
17075: PUSH
17076: FOR_DOWNTO
17077: IFFALSE 17327
// begin side := GetSide ( minersList [ i ] ) ;
17079: LD_ADDR_VAR 0 3
17083: PUSH
17084: LD_EXP 51
17088: PUSH
17089: LD_VAR 0 1
17093: ARRAY
17094: PPUSH
17095: CALL_OW 255
17099: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17100: LD_ADDR_VAR 0 4
17104: PUSH
17105: LD_EXP 52
17109: PUSH
17110: LD_VAR 0 1
17114: ARRAY
17115: PUSH
17116: LD_VAR 0 2
17120: ARRAY
17121: PUSH
17122: LD_INT 1
17124: ARRAY
17125: PPUSH
17126: LD_EXP 52
17130: PUSH
17131: LD_VAR 0 1
17135: ARRAY
17136: PUSH
17137: LD_VAR 0 2
17141: ARRAY
17142: PUSH
17143: LD_INT 2
17145: ARRAY
17146: PPUSH
17147: CALL_OW 428
17151: ST_TO_ADDR
// if not tmp then
17152: LD_VAR 0 4
17156: NOT
17157: IFFALSE 17161
// continue ;
17159: GO 17076
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17161: LD_VAR 0 4
17165: PUSH
17166: LD_INT 81
17168: PUSH
17169: LD_VAR 0 3
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: IN
17183: PUSH
17184: LD_EXP 52
17188: PUSH
17189: LD_VAR 0 1
17193: ARRAY
17194: PUSH
17195: LD_VAR 0 2
17199: ARRAY
17200: PUSH
17201: LD_INT 1
17203: ARRAY
17204: PPUSH
17205: LD_EXP 52
17209: PUSH
17210: LD_VAR 0 1
17214: ARRAY
17215: PUSH
17216: LD_VAR 0 2
17220: ARRAY
17221: PUSH
17222: LD_INT 2
17224: ARRAY
17225: PPUSH
17226: CALL_OW 458
17230: AND
17231: IFFALSE 17325
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17233: LD_EXP 52
17237: PUSH
17238: LD_VAR 0 1
17242: ARRAY
17243: PUSH
17244: LD_VAR 0 2
17248: ARRAY
17249: PUSH
17250: LD_INT 1
17252: ARRAY
17253: PPUSH
17254: LD_EXP 52
17258: PUSH
17259: LD_VAR 0 1
17263: ARRAY
17264: PUSH
17265: LD_VAR 0 2
17269: ARRAY
17270: PUSH
17271: LD_INT 2
17273: ARRAY
17274: PPUSH
17275: LD_VAR 0 3
17279: PPUSH
17280: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17284: LD_ADDR_EXP 52
17288: PUSH
17289: LD_EXP 52
17293: PPUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_EXP 52
17303: PUSH
17304: LD_VAR 0 1
17308: ARRAY
17309: PPUSH
17310: LD_VAR 0 2
17314: PPUSH
17315: CALL_OW 3
17319: PPUSH
17320: CALL_OW 1
17324: ST_TO_ADDR
// end ; end ;
17325: GO 17076
17327: POP
17328: POP
// end ;
17329: GO 16994
17331: POP
17332: POP
// end ;
17333: PPOPN 4
17335: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17336: LD_INT 0
17338: PPUSH
17339: PPUSH
// result := false ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: LD_INT 0
17347: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 264
17357: PUSH
17358: LD_INT 81
17360: EQUAL
17361: NOT
17362: IFFALSE 17366
// exit ;
17364: GO 17606
// index := GetElementIndex ( minersList , unit ) ;
17366: LD_ADDR_VAR 0 5
17370: PUSH
17371: LD_EXP 51
17375: PPUSH
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL 39388 0 2
17385: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17386: LD_EXP 52
17390: PUSH
17391: LD_VAR 0 5
17395: ARRAY
17396: PUSH
17397: LD_EXP 53
17401: GREATEREQUAL
17402: IFFALSE 17406
// exit ;
17404: GO 17606
// ComMoveXY ( unit , x , y ) ;
17406: LD_VAR 0 1
17410: PPUSH
17411: LD_VAR 0 2
17415: PPUSH
17416: LD_VAR 0 3
17420: PPUSH
17421: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17425: LD_INT 35
17427: PPUSH
17428: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_VAR 0 2
17441: PPUSH
17442: LD_VAR 0 3
17446: PPUSH
17447: CALL 70724 0 3
17451: NOT
17452: PUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 314
17462: AND
17463: IFFALSE 17467
// exit ;
17465: GO 17606
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17467: LD_VAR 0 2
17471: PPUSH
17472: LD_VAR 0 3
17476: PPUSH
17477: CALL_OW 428
17481: PUSH
17482: LD_VAR 0 1
17486: EQUAL
17487: PUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 314
17497: NOT
17498: AND
17499: IFFALSE 17425
// PlaySoundXY ( x , y , PlantMine ) ;
17501: LD_VAR 0 2
17505: PPUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_STRING PlantMine
17513: PPUSH
17514: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17518: LD_VAR 0 2
17522: PPUSH
17523: LD_VAR 0 3
17527: PPUSH
17528: LD_VAR 0 1
17532: PPUSH
17533: CALL_OW 255
17537: PPUSH
17538: LD_INT 0
17540: PPUSH
17541: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17545: LD_ADDR_EXP 52
17549: PUSH
17550: LD_EXP 52
17554: PPUSH
17555: LD_VAR 0 5
17559: PUSH
17560: LD_EXP 52
17564: PUSH
17565: LD_VAR 0 5
17569: ARRAY
17570: PUSH
17571: LD_INT 1
17573: PLUS
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PPUSH
17579: LD_VAR 0 2
17583: PUSH
17584: LD_VAR 0 3
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PPUSH
17593: CALL 39603 0 3
17597: ST_TO_ADDR
// result := true ;
17598: LD_ADDR_VAR 0 4
17602: PUSH
17603: LD_INT 1
17605: ST_TO_ADDR
// end ;
17606: LD_VAR 0 4
17610: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17611: LD_INT 0
17613: PPUSH
17614: PPUSH
17615: PPUSH
// if not unit in minersList then
17616: LD_VAR 0 1
17620: PUSH
17621: LD_EXP 51
17625: IN
17626: NOT
17627: IFFALSE 17631
// exit ;
17629: GO 18023
// index := GetElementIndex ( minersList , unit ) ;
17631: LD_ADDR_VAR 0 6
17635: PUSH
17636: LD_EXP 51
17640: PPUSH
17641: LD_VAR 0 1
17645: PPUSH
17646: CALL 39388 0 2
17650: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17651: LD_ADDR_VAR 0 5
17655: PUSH
17656: DOUBLE
17657: LD_EXP 52
17661: PUSH
17662: LD_VAR 0 6
17666: ARRAY
17667: INC
17668: ST_TO_ADDR
17669: LD_INT 1
17671: PUSH
17672: FOR_DOWNTO
17673: IFFALSE 17834
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17675: LD_EXP 52
17679: PUSH
17680: LD_VAR 0 6
17684: ARRAY
17685: PUSH
17686: LD_VAR 0 5
17690: ARRAY
17691: PUSH
17692: LD_INT 1
17694: ARRAY
17695: PUSH
17696: LD_VAR 0 2
17700: EQUAL
17701: PUSH
17702: LD_EXP 52
17706: PUSH
17707: LD_VAR 0 6
17711: ARRAY
17712: PUSH
17713: LD_VAR 0 5
17717: ARRAY
17718: PUSH
17719: LD_INT 2
17721: ARRAY
17722: PUSH
17723: LD_VAR 0 3
17727: EQUAL
17728: AND
17729: IFFALSE 17832
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17731: LD_EXP 52
17735: PUSH
17736: LD_VAR 0 6
17740: ARRAY
17741: PUSH
17742: LD_VAR 0 5
17746: ARRAY
17747: PUSH
17748: LD_INT 1
17750: ARRAY
17751: PPUSH
17752: LD_EXP 52
17756: PUSH
17757: LD_VAR 0 6
17761: ARRAY
17762: PUSH
17763: LD_VAR 0 5
17767: ARRAY
17768: PUSH
17769: LD_INT 2
17771: ARRAY
17772: PPUSH
17773: LD_VAR 0 1
17777: PPUSH
17778: CALL_OW 255
17782: PPUSH
17783: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17787: LD_ADDR_EXP 52
17791: PUSH
17792: LD_EXP 52
17796: PPUSH
17797: LD_VAR 0 6
17801: PPUSH
17802: LD_EXP 52
17806: PUSH
17807: LD_VAR 0 6
17811: ARRAY
17812: PPUSH
17813: LD_VAR 0 5
17817: PPUSH
17818: CALL_OW 3
17822: PPUSH
17823: CALL_OW 1
17827: ST_TO_ADDR
// exit ;
17828: POP
17829: POP
17830: GO 18023
// end ; end ;
17832: GO 17672
17834: POP
17835: POP
// for i := minerMinesList [ index ] downto 1 do
17836: LD_ADDR_VAR 0 5
17840: PUSH
17841: DOUBLE
17842: LD_EXP 52
17846: PUSH
17847: LD_VAR 0 6
17851: ARRAY
17852: INC
17853: ST_TO_ADDR
17854: LD_INT 1
17856: PUSH
17857: FOR_DOWNTO
17858: IFFALSE 18021
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17860: LD_EXP 52
17864: PUSH
17865: LD_VAR 0 6
17869: ARRAY
17870: PUSH
17871: LD_VAR 0 5
17875: ARRAY
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: LD_EXP 52
17885: PUSH
17886: LD_VAR 0 6
17890: ARRAY
17891: PUSH
17892: LD_VAR 0 5
17896: ARRAY
17897: PUSH
17898: LD_INT 2
17900: ARRAY
17901: PPUSH
17902: LD_VAR 0 2
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: CALL_OW 298
17916: PUSH
17917: LD_INT 6
17919: LESS
17920: IFFALSE 18019
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17922: LD_EXP 52
17926: PUSH
17927: LD_VAR 0 6
17931: ARRAY
17932: PUSH
17933: LD_VAR 0 5
17937: ARRAY
17938: PUSH
17939: LD_INT 1
17941: ARRAY
17942: PPUSH
17943: LD_EXP 52
17947: PUSH
17948: LD_VAR 0 6
17952: ARRAY
17953: PUSH
17954: LD_VAR 0 5
17958: ARRAY
17959: PUSH
17960: LD_INT 2
17962: ARRAY
17963: PPUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 255
17973: PPUSH
17974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17978: LD_ADDR_EXP 52
17982: PUSH
17983: LD_EXP 52
17987: PPUSH
17988: LD_VAR 0 6
17992: PPUSH
17993: LD_EXP 52
17997: PUSH
17998: LD_VAR 0 6
18002: ARRAY
18003: PPUSH
18004: LD_VAR 0 5
18008: PPUSH
18009: CALL_OW 3
18013: PPUSH
18014: CALL_OW 1
18018: ST_TO_ADDR
// end ; end ;
18019: GO 17857
18021: POP
18022: POP
// end ;
18023: LD_VAR 0 4
18027: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18028: LD_INT 0
18030: PPUSH
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 264
18048: PUSH
18049: LD_INT 81
18051: EQUAL
18052: NOT
18053: PUSH
18054: LD_VAR 0 1
18058: PUSH
18059: LD_EXP 51
18063: IN
18064: NOT
18065: OR
18066: IFFALSE 18070
// exit ;
18068: GO 18392
// index := GetElementIndex ( minersList , unit ) ;
18070: LD_ADDR_VAR 0 6
18074: PUSH
18075: LD_EXP 51
18079: PPUSH
18080: LD_VAR 0 1
18084: PPUSH
18085: CALL 39388 0 2
18089: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18090: LD_ADDR_VAR 0 8
18094: PUSH
18095: LD_EXP 53
18099: PUSH
18100: LD_EXP 52
18104: PUSH
18105: LD_VAR 0 6
18109: ARRAY
18110: MINUS
18111: ST_TO_ADDR
// if not minesFreeAmount then
18112: LD_VAR 0 8
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18392
// tmp := [ ] ;
18121: LD_ADDR_VAR 0 7
18125: PUSH
18126: EMPTY
18127: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18128: LD_ADDR_VAR 0 5
18132: PUSH
18133: DOUBLE
18134: LD_INT 1
18136: DEC
18137: ST_TO_ADDR
18138: LD_VAR 0 8
18142: PUSH
18143: FOR_TO
18144: IFFALSE 18339
// begin _d := rand ( 0 , 5 ) ;
18146: LD_ADDR_VAR 0 11
18150: PUSH
18151: LD_INT 0
18153: PPUSH
18154: LD_INT 5
18156: PPUSH
18157: CALL_OW 12
18161: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18162: LD_ADDR_VAR 0 12
18166: PUSH
18167: LD_INT 2
18169: PPUSH
18170: LD_INT 6
18172: PPUSH
18173: CALL_OW 12
18177: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18178: LD_ADDR_VAR 0 9
18182: PUSH
18183: LD_VAR 0 2
18187: PPUSH
18188: LD_VAR 0 11
18192: PPUSH
18193: LD_VAR 0 12
18197: PPUSH
18198: CALL_OW 272
18202: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18203: LD_ADDR_VAR 0 10
18207: PUSH
18208: LD_VAR 0 3
18212: PPUSH
18213: LD_VAR 0 11
18217: PPUSH
18218: LD_VAR 0 12
18222: PPUSH
18223: CALL_OW 273
18227: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18228: LD_VAR 0 9
18232: PPUSH
18233: LD_VAR 0 10
18237: PPUSH
18238: CALL_OW 488
18242: PUSH
18243: LD_VAR 0 9
18247: PUSH
18248: LD_VAR 0 10
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_VAR 0 7
18261: IN
18262: NOT
18263: AND
18264: PUSH
18265: LD_VAR 0 9
18269: PPUSH
18270: LD_VAR 0 10
18274: PPUSH
18275: CALL_OW 458
18279: NOT
18280: AND
18281: IFFALSE 18323
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18283: LD_ADDR_VAR 0 7
18287: PUSH
18288: LD_VAR 0 7
18292: PPUSH
18293: LD_VAR 0 7
18297: PUSH
18298: LD_INT 1
18300: PLUS
18301: PPUSH
18302: LD_VAR 0 9
18306: PUSH
18307: LD_VAR 0 10
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PPUSH
18316: CALL_OW 1
18320: ST_TO_ADDR
18321: GO 18337
// i := i - 1 ;
18323: LD_ADDR_VAR 0 5
18327: PUSH
18328: LD_VAR 0 5
18332: PUSH
18333: LD_INT 1
18335: MINUS
18336: ST_TO_ADDR
// end ;
18337: GO 18143
18339: POP
18340: POP
// for i in tmp do
18341: LD_ADDR_VAR 0 5
18345: PUSH
18346: LD_VAR 0 7
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18390
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18354: LD_VAR 0 1
18358: PPUSH
18359: LD_VAR 0 5
18363: PUSH
18364: LD_INT 1
18366: ARRAY
18367: PPUSH
18368: LD_VAR 0 5
18372: PUSH
18373: LD_INT 2
18375: ARRAY
18376: PPUSH
18377: CALL 17336 0 3
18381: NOT
18382: IFFALSE 18388
// exit ;
18384: POP
18385: POP
18386: GO 18392
18388: GO 18351
18390: POP
18391: POP
// end ;
18392: LD_VAR 0 4
18396: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18397: LD_INT 0
18399: PPUSH
18400: PPUSH
18401: PPUSH
18402: PPUSH
18403: PPUSH
18404: PPUSH
18405: PPUSH
// if not GetClass ( unit ) = class_sniper then
18406: LD_VAR 0 1
18410: PPUSH
18411: CALL_OW 257
18415: PUSH
18416: LD_INT 5
18418: EQUAL
18419: NOT
18420: IFFALSE 18424
// exit ;
18422: GO 18812
// dist := 8 ;
18424: LD_ADDR_VAR 0 5
18428: PUSH
18429: LD_INT 8
18431: ST_TO_ADDR
// viewRange := 12 ;
18432: LD_ADDR_VAR 0 7
18436: PUSH
18437: LD_INT 12
18439: ST_TO_ADDR
// side := GetSide ( unit ) ;
18440: LD_ADDR_VAR 0 6
18444: PUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 255
18454: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18455: LD_INT 61
18457: PPUSH
18458: LD_VAR 0 6
18462: PPUSH
18463: CALL_OW 321
18467: PUSH
18468: LD_INT 2
18470: EQUAL
18471: IFFALSE 18481
// viewRange := 16 ;
18473: LD_ADDR_VAR 0 7
18477: PUSH
18478: LD_INT 16
18480: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18481: LD_VAR 0 1
18485: PPUSH
18486: LD_VAR 0 2
18490: PPUSH
18491: LD_VAR 0 3
18495: PPUSH
18496: CALL_OW 297
18500: PUSH
18501: LD_VAR 0 5
18505: GREATER
18506: IFFALSE 18585
// begin ComMoveXY ( unit , x , y ) ;
18508: LD_VAR 0 1
18512: PPUSH
18513: LD_VAR 0 2
18517: PPUSH
18518: LD_VAR 0 3
18522: PPUSH
18523: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18527: LD_INT 35
18529: PPUSH
18530: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18534: LD_VAR 0 1
18538: PPUSH
18539: LD_VAR 0 2
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: CALL 70724 0 3
18553: NOT
18554: IFFALSE 18558
// exit ;
18556: GO 18812
// until GetDistUnitXY ( unit , x , y ) < dist ;
18558: LD_VAR 0 1
18562: PPUSH
18563: LD_VAR 0 2
18567: PPUSH
18568: LD_VAR 0 3
18572: PPUSH
18573: CALL_OW 297
18577: PUSH
18578: LD_VAR 0 5
18582: LESS
18583: IFFALSE 18527
// end ; ComTurnXY ( unit , x , y ) ;
18585: LD_VAR 0 1
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: LD_VAR 0 3
18599: PPUSH
18600: CALL_OW 118
// wait ( 5 ) ;
18604: LD_INT 5
18606: PPUSH
18607: CALL_OW 67
// _d := GetDir ( unit ) ;
18611: LD_ADDR_VAR 0 10
18615: PUSH
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 254
18625: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18626: LD_ADDR_VAR 0 8
18630: PUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 250
18640: PPUSH
18641: LD_VAR 0 10
18645: PPUSH
18646: LD_VAR 0 5
18650: PPUSH
18651: CALL_OW 272
18655: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18656: LD_ADDR_VAR 0 9
18660: PUSH
18661: LD_VAR 0 1
18665: PPUSH
18666: CALL_OW 251
18670: PPUSH
18671: LD_VAR 0 10
18675: PPUSH
18676: LD_VAR 0 5
18680: PPUSH
18681: CALL_OW 273
18685: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18686: LD_VAR 0 8
18690: PPUSH
18691: LD_VAR 0 9
18695: PPUSH
18696: CALL_OW 488
18700: NOT
18701: IFFALSE 18705
// exit ;
18703: GO 18812
// ComAnimCustom ( unit , 1 ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18717: LD_VAR 0 8
18721: PPUSH
18722: LD_VAR 0 9
18726: PPUSH
18727: LD_VAR 0 6
18731: PPUSH
18732: LD_VAR 0 7
18736: PPUSH
18737: CALL_OW 330
// repeat wait ( 1 ) ;
18741: LD_INT 1
18743: PPUSH
18744: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18748: LD_VAR 0 1
18752: PPUSH
18753: CALL_OW 316
18757: PUSH
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 314
18767: OR
18768: PUSH
18769: LD_VAR 0 1
18773: PPUSH
18774: CALL_OW 302
18778: NOT
18779: OR
18780: PUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 301
18790: OR
18791: IFFALSE 18741
// RemoveSeeing ( _x , _y , side ) ;
18793: LD_VAR 0 8
18797: PPUSH
18798: LD_VAR 0 9
18802: PPUSH
18803: LD_VAR 0 6
18807: PPUSH
18808: CALL_OW 331
// end ; end_of_file
18812: LD_VAR 0 4
18816: RET
// every 0 0$1 do
18817: GO 18819
18819: DISABLE
// begin enable ;
18820: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18821: LD_STRING updateTimer(
18823: PUSH
18824: LD_OWVAR 1
18828: STR
18829: PUSH
18830: LD_STRING );
18832: STR
18833: PPUSH
18834: CALL_OW 559
// end ;
18838: END
// export function SOS_MapStart ( ) ; begin
18839: LD_INT 0
18841: PPUSH
// if streamModeActive then
18842: LD_EXP 54
18846: IFFALSE 18855
// DefineStreamItems ( true ) ;
18848: LD_INT 1
18850: PPUSH
18851: CALL 20509 0 1
// UpdateFactoryWaypoints ( ) ;
18855: CALL 33370 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18859: CALL 33627 0 0
// end ;
18863: LD_VAR 0 1
18867: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18868: LD_INT 0
18870: PPUSH
// if p2 = hack_mode then
18871: LD_VAR 0 2
18875: PUSH
18876: LD_INT 100
18878: EQUAL
18879: IFFALSE 19882
// begin if not StreamModeActive then
18881: LD_EXP 54
18885: NOT
18886: IFFALSE 18896
// StreamModeActive := true ;
18888: LD_ADDR_EXP 54
18892: PUSH
18893: LD_INT 1
18895: ST_TO_ADDR
// if p3 = 0 then
18896: LD_VAR 0 3
18900: PUSH
18901: LD_INT 0
18903: EQUAL
18904: IFFALSE 18910
// InitStreamMode ;
18906: CALL 20045 0 0
// if p3 = 1 then
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 1
18917: EQUAL
18918: IFFALSE 18928
// sRocket := true ;
18920: LD_ADDR_EXP 59
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 2 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 2
18935: EQUAL
18936: IFFALSE 18946
// sSpeed := true ;
18938: LD_ADDR_EXP 58
18942: PUSH
18943: LD_INT 1
18945: ST_TO_ADDR
// if p3 = 3 then
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 3
18953: EQUAL
18954: IFFALSE 18964
// sEngine := true ;
18956: LD_ADDR_EXP 60
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// if p3 = 4 then
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 4
18971: EQUAL
18972: IFFALSE 18982
// sSpec := true ;
18974: LD_ADDR_EXP 57
18978: PUSH
18979: LD_INT 1
18981: ST_TO_ADDR
// if p3 = 5 then
18982: LD_VAR 0 3
18986: PUSH
18987: LD_INT 5
18989: EQUAL
18990: IFFALSE 19000
// sLevel := true ;
18992: LD_ADDR_EXP 61
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// if p3 = 6 then
19000: LD_VAR 0 3
19004: PUSH
19005: LD_INT 6
19007: EQUAL
19008: IFFALSE 19018
// sArmoury := true ;
19010: LD_ADDR_EXP 62
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// if p3 = 7 then
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 7
19025: EQUAL
19026: IFFALSE 19036
// sRadar := true ;
19028: LD_ADDR_EXP 63
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
// if p3 = 8 then
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 8
19043: EQUAL
19044: IFFALSE 19054
// sBunker := true ;
19046: LD_ADDR_EXP 64
19050: PUSH
19051: LD_INT 1
19053: ST_TO_ADDR
// if p3 = 9 then
19054: LD_VAR 0 3
19058: PUSH
19059: LD_INT 9
19061: EQUAL
19062: IFFALSE 19072
// sHack := true ;
19064: LD_ADDR_EXP 65
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// if p3 = 10 then
19072: LD_VAR 0 3
19076: PUSH
19077: LD_INT 10
19079: EQUAL
19080: IFFALSE 19090
// sFire := true ;
19082: LD_ADDR_EXP 66
19086: PUSH
19087: LD_INT 1
19089: ST_TO_ADDR
// if p3 = 11 then
19090: LD_VAR 0 3
19094: PUSH
19095: LD_INT 11
19097: EQUAL
19098: IFFALSE 19108
// sRefresh := true ;
19100: LD_ADDR_EXP 67
19104: PUSH
19105: LD_INT 1
19107: ST_TO_ADDR
// if p3 = 12 then
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 12
19115: EQUAL
19116: IFFALSE 19126
// sExp := true ;
19118: LD_ADDR_EXP 68
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
// if p3 = 13 then
19126: LD_VAR 0 3
19130: PUSH
19131: LD_INT 13
19133: EQUAL
19134: IFFALSE 19144
// sDepot := true ;
19136: LD_ADDR_EXP 69
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if p3 = 14 then
19144: LD_VAR 0 3
19148: PUSH
19149: LD_INT 14
19151: EQUAL
19152: IFFALSE 19162
// sFlag := true ;
19154: LD_ADDR_EXP 70
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// if p3 = 15 then
19162: LD_VAR 0 3
19166: PUSH
19167: LD_INT 15
19169: EQUAL
19170: IFFALSE 19180
// sKamikadze := true ;
19172: LD_ADDR_EXP 78
19176: PUSH
19177: LD_INT 1
19179: ST_TO_ADDR
// if p3 = 16 then
19180: LD_VAR 0 3
19184: PUSH
19185: LD_INT 16
19187: EQUAL
19188: IFFALSE 19198
// sTroll := true ;
19190: LD_ADDR_EXP 79
19194: PUSH
19195: LD_INT 1
19197: ST_TO_ADDR
// if p3 = 17 then
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 17
19205: EQUAL
19206: IFFALSE 19216
// sSlow := true ;
19208: LD_ADDR_EXP 80
19212: PUSH
19213: LD_INT 1
19215: ST_TO_ADDR
// if p3 = 18 then
19216: LD_VAR 0 3
19220: PUSH
19221: LD_INT 18
19223: EQUAL
19224: IFFALSE 19234
// sLack := true ;
19226: LD_ADDR_EXP 81
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// if p3 = 19 then
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 19
19241: EQUAL
19242: IFFALSE 19252
// sTank := true ;
19244: LD_ADDR_EXP 83
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// if p3 = 20 then
19252: LD_VAR 0 3
19256: PUSH
19257: LD_INT 20
19259: EQUAL
19260: IFFALSE 19270
// sRemote := true ;
19262: LD_ADDR_EXP 84
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// if p3 = 21 then
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 21
19277: EQUAL
19278: IFFALSE 19288
// sPowell := true ;
19280: LD_ADDR_EXP 85
19284: PUSH
19285: LD_INT 1
19287: ST_TO_ADDR
// if p3 = 22 then
19288: LD_VAR 0 3
19292: PUSH
19293: LD_INT 22
19295: EQUAL
19296: IFFALSE 19306
// sTeleport := true ;
19298: LD_ADDR_EXP 88
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// if p3 = 23 then
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 23
19313: EQUAL
19314: IFFALSE 19324
// sOilTower := true ;
19316: LD_ADDR_EXP 90
19320: PUSH
19321: LD_INT 1
19323: ST_TO_ADDR
// if p3 = 24 then
19324: LD_VAR 0 3
19328: PUSH
19329: LD_INT 24
19331: EQUAL
19332: IFFALSE 19342
// sShovel := true ;
19334: LD_ADDR_EXP 91
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// if p3 = 25 then
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 25
19349: EQUAL
19350: IFFALSE 19360
// sSheik := true ;
19352: LD_ADDR_EXP 92
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// if p3 = 26 then
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 26
19367: EQUAL
19368: IFFALSE 19378
// sEarthquake := true ;
19370: LD_ADDR_EXP 94
19374: PUSH
19375: LD_INT 1
19377: ST_TO_ADDR
// if p3 = 27 then
19378: LD_VAR 0 3
19382: PUSH
19383: LD_INT 27
19385: EQUAL
19386: IFFALSE 19396
// sAI := true ;
19388: LD_ADDR_EXP 95
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
// if p3 = 28 then
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 28
19403: EQUAL
19404: IFFALSE 19414
// sCargo := true ;
19406: LD_ADDR_EXP 98
19410: PUSH
19411: LD_INT 1
19413: ST_TO_ADDR
// if p3 = 29 then
19414: LD_VAR 0 3
19418: PUSH
19419: LD_INT 29
19421: EQUAL
19422: IFFALSE 19432
// sDLaser := true ;
19424: LD_ADDR_EXP 99
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// if p3 = 30 then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 30
19439: EQUAL
19440: IFFALSE 19450
// sExchange := true ;
19442: LD_ADDR_EXP 100
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 31 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 31
19457: EQUAL
19458: IFFALSE 19468
// sFac := true ;
19460: LD_ADDR_EXP 101
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// if p3 = 32 then
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 32
19475: EQUAL
19476: IFFALSE 19486
// sPower := true ;
19478: LD_ADDR_EXP 102
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// if p3 = 33 then
19486: LD_VAR 0 3
19490: PUSH
19491: LD_INT 33
19493: EQUAL
19494: IFFALSE 19504
// sRandom := true ;
19496: LD_ADDR_EXP 103
19500: PUSH
19501: LD_INT 1
19503: ST_TO_ADDR
// if p3 = 34 then
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 34
19511: EQUAL
19512: IFFALSE 19522
// sShield := true ;
19514: LD_ADDR_EXP 104
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if p3 = 35 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 35
19529: EQUAL
19530: IFFALSE 19540
// sTime := true ;
19532: LD_ADDR_EXP 105
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 36 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 36
19547: EQUAL
19548: IFFALSE 19558
// sTools := true ;
19550: LD_ADDR_EXP 106
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 101 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 101
19565: EQUAL
19566: IFFALSE 19576
// sSold := true ;
19568: LD_ADDR_EXP 71
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 102 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 102
19583: EQUAL
19584: IFFALSE 19594
// sDiff := true ;
19586: LD_ADDR_EXP 72
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 103 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 103
19601: EQUAL
19602: IFFALSE 19612
// sFog := true ;
19604: LD_ADDR_EXP 75
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 104 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 104
19619: EQUAL
19620: IFFALSE 19630
// sReset := true ;
19622: LD_ADDR_EXP 76
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 105 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 105
19637: EQUAL
19638: IFFALSE 19648
// sSun := true ;
19640: LD_ADDR_EXP 77
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 106 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 106
19655: EQUAL
19656: IFFALSE 19666
// sTiger := true ;
19658: LD_ADDR_EXP 73
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 107 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 107
19673: EQUAL
19674: IFFALSE 19684
// sBomb := true ;
19676: LD_ADDR_EXP 74
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 108 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 108
19691: EQUAL
19692: IFFALSE 19702
// sWound := true ;
19694: LD_ADDR_EXP 82
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 109 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 109
19709: EQUAL
19710: IFFALSE 19720
// sBetray := true ;
19712: LD_ADDR_EXP 86
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 110 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 110
19727: EQUAL
19728: IFFALSE 19738
// sContamin := true ;
19730: LD_ADDR_EXP 87
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 111 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 111
19745: EQUAL
19746: IFFALSE 19756
// sOil := true ;
19748: LD_ADDR_EXP 89
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 112 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 112
19763: EQUAL
19764: IFFALSE 19774
// sStu := true ;
19766: LD_ADDR_EXP 93
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 113 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 113
19781: EQUAL
19782: IFFALSE 19792
// sBazooka := true ;
19784: LD_ADDR_EXP 96
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 114 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 114
19799: EQUAL
19800: IFFALSE 19810
// sMortar := true ;
19802: LD_ADDR_EXP 97
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// if p3 = 115 then
19810: LD_VAR 0 3
19814: PUSH
19815: LD_INT 115
19817: EQUAL
19818: IFFALSE 19828
// sRanger := true ;
19820: LD_ADDR_EXP 107
19824: PUSH
19825: LD_INT 1
19827: ST_TO_ADDR
// if p3 = 116 then
19828: LD_VAR 0 3
19832: PUSH
19833: LD_INT 116
19835: EQUAL
19836: IFFALSE 19846
// sComputer := true ;
19838: LD_ADDR_EXP 108
19842: PUSH
19843: LD_INT 1
19845: ST_TO_ADDR
// if p3 = 117 then
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 117
19853: EQUAL
19854: IFFALSE 19864
// s30 := true ;
19856: LD_ADDR_EXP 109
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
// if p3 = 118 then
19864: LD_VAR 0 3
19868: PUSH
19869: LD_INT 118
19871: EQUAL
19872: IFFALSE 19882
// s60 := true ;
19874: LD_ADDR_EXP 110
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// end ; if p2 = stream_mode then
19882: LD_VAR 0 2
19886: PUSH
19887: LD_INT 101
19889: EQUAL
19890: IFFALSE 20018
// begin case p3 of 1 :
19892: LD_VAR 0 3
19896: PUSH
19897: LD_INT 1
19899: DOUBLE
19900: EQUAL
19901: IFTRUE 19905
19903: GO 19912
19905: POP
// hHackUnlimitedResources ; 2 :
19906: CALL 32116 0 0
19910: GO 20018
19912: LD_INT 2
19914: DOUBLE
19915: EQUAL
19916: IFTRUE 19920
19918: GO 19927
19920: POP
// hHackSetLevel10 ; 3 :
19921: CALL 32249 0 0
19925: GO 20018
19927: LD_INT 3
19929: DOUBLE
19930: EQUAL
19931: IFTRUE 19935
19933: GO 19942
19935: POP
// hHackSetLevel10YourUnits ; 4 :
19936: CALL 32334 0 0
19940: GO 20018
19942: LD_INT 4
19944: DOUBLE
19945: EQUAL
19946: IFTRUE 19950
19948: GO 19957
19950: POP
// hHackInvincible ; 5 :
19951: CALL 32782 0 0
19955: GO 20018
19957: LD_INT 5
19959: DOUBLE
19960: EQUAL
19961: IFTRUE 19965
19963: GO 19972
19965: POP
// hHackInvisible ; 6 :
19966: CALL 32893 0 0
19970: GO 20018
19972: LD_INT 6
19974: DOUBLE
19975: EQUAL
19976: IFTRUE 19980
19978: GO 19987
19980: POP
// hHackChangeYourSide ; 7 :
19981: CALL 32950 0 0
19985: GO 20018
19987: LD_INT 7
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20002
19995: POP
// hHackChangeUnitSide ; 8 :
19996: CALL 32992 0 0
20000: GO 20018
20002: LD_INT 8
20004: DOUBLE
20005: EQUAL
20006: IFTRUE 20010
20008: GO 20017
20010: POP
// hHackFog ; end ;
20011: CALL 33093 0 0
20015: GO 20018
20017: POP
// end ; end ;
20018: LD_VAR 0 7
20022: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20023: GO 20025
20025: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20026: LD_STRING initStreamRollete();
20028: PPUSH
20029: CALL_OW 559
// InitStreamMode ;
20033: CALL 20045 0 0
// DefineStreamItems ( false ) ;
20037: LD_INT 0
20039: PPUSH
20040: CALL 20509 0 1
// end ;
20044: END
// function InitStreamMode ; begin
20045: LD_INT 0
20047: PPUSH
// streamModeActive := false ;
20048: LD_ADDR_EXP 54
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// normalCounter := 36 ;
20056: LD_ADDR_EXP 55
20060: PUSH
20061: LD_INT 36
20063: ST_TO_ADDR
// hardcoreCounter := 18 ;
20064: LD_ADDR_EXP 56
20068: PUSH
20069: LD_INT 18
20071: ST_TO_ADDR
// sRocket := false ;
20072: LD_ADDR_EXP 59
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// sSpeed := false ;
20080: LD_ADDR_EXP 58
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// sEngine := false ;
20088: LD_ADDR_EXP 60
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
// sSpec := false ;
20096: LD_ADDR_EXP 57
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// sLevel := false ;
20104: LD_ADDR_EXP 61
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// sArmoury := false ;
20112: LD_ADDR_EXP 62
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// sRadar := false ;
20120: LD_ADDR_EXP 63
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// sBunker := false ;
20128: LD_ADDR_EXP 64
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// sHack := false ;
20136: LD_ADDR_EXP 65
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// sFire := false ;
20144: LD_ADDR_EXP 66
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// sRefresh := false ;
20152: LD_ADDR_EXP 67
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// sExp := false ;
20160: LD_ADDR_EXP 68
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sDepot := false ;
20168: LD_ADDR_EXP 69
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sFlag := false ;
20176: LD_ADDR_EXP 70
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sKamikadze := false ;
20184: LD_ADDR_EXP 78
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sTroll := false ;
20192: LD_ADDR_EXP 79
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sSlow := false ;
20200: LD_ADDR_EXP 80
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sLack := false ;
20208: LD_ADDR_EXP 81
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sTank := false ;
20216: LD_ADDR_EXP 83
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sRemote := false ;
20224: LD_ADDR_EXP 84
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sPowell := false ;
20232: LD_ADDR_EXP 85
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sTeleport := false ;
20240: LD_ADDR_EXP 88
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sOilTower := false ;
20248: LD_ADDR_EXP 90
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sShovel := false ;
20256: LD_ADDR_EXP 91
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sSheik := false ;
20264: LD_ADDR_EXP 92
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sEarthquake := false ;
20272: LD_ADDR_EXP 94
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sAI := false ;
20280: LD_ADDR_EXP 95
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// sCargo := false ;
20288: LD_ADDR_EXP 98
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// sDLaser := false ;
20296: LD_ADDR_EXP 99
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// sExchange := false ;
20304: LD_ADDR_EXP 100
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// sFac := false ;
20312: LD_ADDR_EXP 101
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sPower := false ;
20320: LD_ADDR_EXP 102
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// sRandom := false ;
20328: LD_ADDR_EXP 103
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// sShield := false ;
20336: LD_ADDR_EXP 104
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// sTime := false ;
20344: LD_ADDR_EXP 105
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sTools := false ;
20352: LD_ADDR_EXP 106
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sSold := false ;
20360: LD_ADDR_EXP 71
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sDiff := false ;
20368: LD_ADDR_EXP 72
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sFog := false ;
20376: LD_ADDR_EXP 75
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sReset := false ;
20384: LD_ADDR_EXP 76
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sSun := false ;
20392: LD_ADDR_EXP 77
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sTiger := false ;
20400: LD_ADDR_EXP 73
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sBomb := false ;
20408: LD_ADDR_EXP 74
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// sWound := false ;
20416: LD_ADDR_EXP 82
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// sBetray := false ;
20424: LD_ADDR_EXP 86
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// sContamin := false ;
20432: LD_ADDR_EXP 87
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// sOil := false ;
20440: LD_ADDR_EXP 89
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
// sStu := false ;
20448: LD_ADDR_EXP 93
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// sBazooka := false ;
20456: LD_ADDR_EXP 96
20460: PUSH
20461: LD_INT 0
20463: ST_TO_ADDR
// sMortar := false ;
20464: LD_ADDR_EXP 97
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// sRanger := false ;
20472: LD_ADDR_EXP 107
20476: PUSH
20477: LD_INT 0
20479: ST_TO_ADDR
// sComputer := false ;
20480: LD_ADDR_EXP 108
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// s30 := false ;
20488: LD_ADDR_EXP 109
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// s60 := false ;
20496: LD_ADDR_EXP 110
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// end ;
20504: LD_VAR 0 1
20508: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20509: LD_INT 0
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
// result := [ ] ;
20518: LD_ADDR_VAR 0 2
20522: PUSH
20523: EMPTY
20524: ST_TO_ADDR
// if campaign_id = 1 then
20525: LD_OWVAR 69
20529: PUSH
20530: LD_INT 1
20532: EQUAL
20533: IFFALSE 23699
// begin case mission_number of 1 :
20535: LD_OWVAR 70
20539: PUSH
20540: LD_INT 1
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20624
20548: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20549: LD_ADDR_VAR 0 2
20553: PUSH
20554: LD_INT 2
20556: PUSH
20557: LD_INT 4
20559: PUSH
20560: LD_INT 11
20562: PUSH
20563: LD_INT 12
20565: PUSH
20566: LD_INT 15
20568: PUSH
20569: LD_INT 16
20571: PUSH
20572: LD_INT 22
20574: PUSH
20575: LD_INT 23
20577: PUSH
20578: LD_INT 26
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 101
20594: PUSH
20595: LD_INT 102
20597: PUSH
20598: LD_INT 106
20600: PUSH
20601: LD_INT 116
20603: PUSH
20604: LD_INT 117
20606: PUSH
20607: LD_INT 118
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: ST_TO_ADDR
20622: GO 23697
20624: LD_INT 2
20626: DOUBLE
20627: EQUAL
20628: IFTRUE 20632
20630: GO 20716
20632: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 4
20643: PUSH
20644: LD_INT 11
20646: PUSH
20647: LD_INT 12
20649: PUSH
20650: LD_INT 15
20652: PUSH
20653: LD_INT 16
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 23
20661: PUSH
20662: LD_INT 26
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 101
20678: PUSH
20679: LD_INT 102
20681: PUSH
20682: LD_INT 105
20684: PUSH
20685: LD_INT 106
20687: PUSH
20688: LD_INT 108
20690: PUSH
20691: LD_INT 116
20693: PUSH
20694: LD_INT 117
20696: PUSH
20697: LD_INT 118
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 23697
20716: LD_INT 3
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20812
20724: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 4
20735: PUSH
20736: LD_INT 5
20738: PUSH
20739: LD_INT 11
20741: PUSH
20742: LD_INT 12
20744: PUSH
20745: LD_INT 15
20747: PUSH
20748: LD_INT 16
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: LD_INT 26
20756: PUSH
20757: LD_INT 36
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 101
20774: PUSH
20775: LD_INT 102
20777: PUSH
20778: LD_INT 105
20780: PUSH
20781: LD_INT 106
20783: PUSH
20784: LD_INT 108
20786: PUSH
20787: LD_INT 116
20789: PUSH
20790: LD_INT 117
20792: PUSH
20793: LD_INT 118
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: ST_TO_ADDR
20810: GO 23697
20812: LD_INT 4
20814: DOUBLE
20815: EQUAL
20816: IFTRUE 20820
20818: GO 20916
20820: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 4
20831: PUSH
20832: LD_INT 5
20834: PUSH
20835: LD_INT 8
20837: PUSH
20838: LD_INT 11
20840: PUSH
20841: LD_INT 12
20843: PUSH
20844: LD_INT 15
20846: PUSH
20847: LD_INT 16
20849: PUSH
20850: LD_INT 22
20852: PUSH
20853: LD_INT 23
20855: PUSH
20856: LD_INT 26
20858: PUSH
20859: LD_INT 36
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 101
20878: PUSH
20879: LD_INT 102
20881: PUSH
20882: LD_INT 105
20884: PUSH
20885: LD_INT 106
20887: PUSH
20888: LD_INT 108
20890: PUSH
20891: LD_INT 116
20893: PUSH
20894: LD_INT 117
20896: PUSH
20897: LD_INT 118
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: ST_TO_ADDR
20914: GO 23697
20916: LD_INT 5
20918: DOUBLE
20919: EQUAL
20920: IFTRUE 20924
20922: GO 21036
20924: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20925: LD_ADDR_VAR 0 2
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 4
20935: PUSH
20936: LD_INT 5
20938: PUSH
20939: LD_INT 6
20941: PUSH
20942: LD_INT 8
20944: PUSH
20945: LD_INT 11
20947: PUSH
20948: LD_INT 12
20950: PUSH
20951: LD_INT 15
20953: PUSH
20954: LD_INT 16
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_INT 23
20962: PUSH
20963: LD_INT 25
20965: PUSH
20966: LD_INT 26
20968: PUSH
20969: LD_INT 36
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 101
20990: PUSH
20991: LD_INT 102
20993: PUSH
20994: LD_INT 105
20996: PUSH
20997: LD_INT 106
20999: PUSH
21000: LD_INT 108
21002: PUSH
21003: LD_INT 109
21005: PUSH
21006: LD_INT 112
21008: PUSH
21009: LD_INT 116
21011: PUSH
21012: LD_INT 117
21014: PUSH
21015: LD_INT 118
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: ST_TO_ADDR
21034: GO 23697
21036: LD_INT 6
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21176
21044: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 5
21058: PUSH
21059: LD_INT 6
21061: PUSH
21062: LD_INT 8
21064: PUSH
21065: LD_INT 11
21067: PUSH
21068: LD_INT 12
21070: PUSH
21071: LD_INT 15
21073: PUSH
21074: LD_INT 16
21076: PUSH
21077: LD_INT 20
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_INT 23
21088: PUSH
21089: LD_INT 25
21091: PUSH
21092: LD_INT 26
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 31
21100: PUSH
21101: LD_INT 32
21103: PUSH
21104: LD_INT 36
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 105
21136: PUSH
21137: LD_INT 106
21139: PUSH
21140: LD_INT 108
21142: PUSH
21143: LD_INT 109
21145: PUSH
21146: LD_INT 112
21148: PUSH
21149: LD_INT 116
21151: PUSH
21152: LD_INT 117
21154: PUSH
21155: LD_INT 118
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: ST_TO_ADDR
21174: GO 23697
21176: LD_INT 7
21178: DOUBLE
21179: EQUAL
21180: IFTRUE 21184
21182: GO 21296
21184: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21185: LD_ADDR_VAR 0 2
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 4
21195: PUSH
21196: LD_INT 5
21198: PUSH
21199: LD_INT 7
21201: PUSH
21202: LD_INT 11
21204: PUSH
21205: LD_INT 12
21207: PUSH
21208: LD_INT 15
21210: PUSH
21211: LD_INT 16
21213: PUSH
21214: LD_INT 20
21216: PUSH
21217: LD_INT 21
21219: PUSH
21220: LD_INT 22
21222: PUSH
21223: LD_INT 23
21225: PUSH
21226: LD_INT 25
21228: PUSH
21229: LD_INT 26
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 101
21250: PUSH
21251: LD_INT 102
21253: PUSH
21254: LD_INT 103
21256: PUSH
21257: LD_INT 105
21259: PUSH
21260: LD_INT 106
21262: PUSH
21263: LD_INT 108
21265: PUSH
21266: LD_INT 112
21268: PUSH
21269: LD_INT 116
21271: PUSH
21272: LD_INT 117
21274: PUSH
21275: LD_INT 118
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: ST_TO_ADDR
21294: GO 23697
21296: LD_INT 8
21298: DOUBLE
21299: EQUAL
21300: IFTRUE 21304
21302: GO 21444
21304: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21305: LD_ADDR_VAR 0 2
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: LD_INT 5
21318: PUSH
21319: LD_INT 6
21321: PUSH
21322: LD_INT 7
21324: PUSH
21325: LD_INT 8
21327: PUSH
21328: LD_INT 11
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: LD_INT 15
21336: PUSH
21337: LD_INT 16
21339: PUSH
21340: LD_INT 20
21342: PUSH
21343: LD_INT 21
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 23
21351: PUSH
21352: LD_INT 25
21354: PUSH
21355: LD_INT 26
21357: PUSH
21358: LD_INT 30
21360: PUSH
21361: LD_INT 31
21363: PUSH
21364: LD_INT 32
21366: PUSH
21367: LD_INT 36
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 101
21394: PUSH
21395: LD_INT 102
21397: PUSH
21398: LD_INT 103
21400: PUSH
21401: LD_INT 105
21403: PUSH
21404: LD_INT 106
21406: PUSH
21407: LD_INT 108
21409: PUSH
21410: LD_INT 109
21412: PUSH
21413: LD_INT 112
21415: PUSH
21416: LD_INT 116
21418: PUSH
21419: LD_INT 117
21421: PUSH
21422: LD_INT 118
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: ST_TO_ADDR
21442: GO 23697
21444: LD_INT 9
21446: DOUBLE
21447: EQUAL
21448: IFTRUE 21452
21450: GO 21600
21452: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21453: LD_ADDR_VAR 0 2
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: LD_INT 4
21463: PUSH
21464: LD_INT 5
21466: PUSH
21467: LD_INT 6
21469: PUSH
21470: LD_INT 7
21472: PUSH
21473: LD_INT 8
21475: PUSH
21476: LD_INT 11
21478: PUSH
21479: LD_INT 12
21481: PUSH
21482: LD_INT 15
21484: PUSH
21485: LD_INT 16
21487: PUSH
21488: LD_INT 20
21490: PUSH
21491: LD_INT 21
21493: PUSH
21494: LD_INT 22
21496: PUSH
21497: LD_INT 23
21499: PUSH
21500: LD_INT 25
21502: PUSH
21503: LD_INT 26
21505: PUSH
21506: LD_INT 28
21508: PUSH
21509: LD_INT 30
21511: PUSH
21512: LD_INT 31
21514: PUSH
21515: LD_INT 32
21517: PUSH
21518: LD_INT 36
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 101
21546: PUSH
21547: LD_INT 102
21549: PUSH
21550: LD_INT 103
21552: PUSH
21553: LD_INT 105
21555: PUSH
21556: LD_INT 106
21558: PUSH
21559: LD_INT 108
21561: PUSH
21562: LD_INT 109
21564: PUSH
21565: LD_INT 112
21567: PUSH
21568: LD_INT 114
21570: PUSH
21571: LD_INT 116
21573: PUSH
21574: LD_INT 117
21576: PUSH
21577: LD_INT 118
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: ST_TO_ADDR
21598: GO 23697
21600: LD_INT 10
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21804
21608: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21609: LD_ADDR_VAR 0 2
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: LD_INT 4
21619: PUSH
21620: LD_INT 5
21622: PUSH
21623: LD_INT 6
21625: PUSH
21626: LD_INT 7
21628: PUSH
21629: LD_INT 8
21631: PUSH
21632: LD_INT 9
21634: PUSH
21635: LD_INT 10
21637: PUSH
21638: LD_INT 11
21640: PUSH
21641: LD_INT 12
21643: PUSH
21644: LD_INT 13
21646: PUSH
21647: LD_INT 14
21649: PUSH
21650: LD_INT 15
21652: PUSH
21653: LD_INT 16
21655: PUSH
21656: LD_INT 17
21658: PUSH
21659: LD_INT 18
21661: PUSH
21662: LD_INT 19
21664: PUSH
21665: LD_INT 20
21667: PUSH
21668: LD_INT 21
21670: PUSH
21671: LD_INT 22
21673: PUSH
21674: LD_INT 23
21676: PUSH
21677: LD_INT 24
21679: PUSH
21680: LD_INT 25
21682: PUSH
21683: LD_INT 26
21685: PUSH
21686: LD_INT 28
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 31
21694: PUSH
21695: LD_INT 32
21697: PUSH
21698: LD_INT 36
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 101
21734: PUSH
21735: LD_INT 102
21737: PUSH
21738: LD_INT 103
21740: PUSH
21741: LD_INT 104
21743: PUSH
21744: LD_INT 105
21746: PUSH
21747: LD_INT 106
21749: PUSH
21750: LD_INT 107
21752: PUSH
21753: LD_INT 108
21755: PUSH
21756: LD_INT 109
21758: PUSH
21759: LD_INT 110
21761: PUSH
21762: LD_INT 111
21764: PUSH
21765: LD_INT 112
21767: PUSH
21768: LD_INT 114
21770: PUSH
21771: LD_INT 116
21773: PUSH
21774: LD_INT 117
21776: PUSH
21777: LD_INT 118
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: ST_TO_ADDR
21802: GO 23697
21804: LD_INT 11
21806: DOUBLE
21807: EQUAL
21808: IFTRUE 21812
21810: GO 22016
21812: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21813: LD_ADDR_VAR 0 2
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 3
21823: PUSH
21824: LD_INT 4
21826: PUSH
21827: LD_INT 5
21829: PUSH
21830: LD_INT 6
21832: PUSH
21833: LD_INT 7
21835: PUSH
21836: LD_INT 8
21838: PUSH
21839: LD_INT 9
21841: PUSH
21842: LD_INT 10
21844: PUSH
21845: LD_INT 11
21847: PUSH
21848: LD_INT 12
21850: PUSH
21851: LD_INT 13
21853: PUSH
21854: LD_INT 14
21856: PUSH
21857: LD_INT 15
21859: PUSH
21860: LD_INT 16
21862: PUSH
21863: LD_INT 17
21865: PUSH
21866: LD_INT 18
21868: PUSH
21869: LD_INT 19
21871: PUSH
21872: LD_INT 20
21874: PUSH
21875: LD_INT 21
21877: PUSH
21878: LD_INT 22
21880: PUSH
21881: LD_INT 23
21883: PUSH
21884: LD_INT 24
21886: PUSH
21887: LD_INT 25
21889: PUSH
21890: LD_INT 26
21892: PUSH
21893: LD_INT 28
21895: PUSH
21896: LD_INT 30
21898: PUSH
21899: LD_INT 31
21901: PUSH
21902: LD_INT 32
21904: PUSH
21905: LD_INT 34
21907: PUSH
21908: LD_INT 36
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 101
21946: PUSH
21947: LD_INT 102
21949: PUSH
21950: LD_INT 103
21952: PUSH
21953: LD_INT 104
21955: PUSH
21956: LD_INT 105
21958: PUSH
21959: LD_INT 106
21961: PUSH
21962: LD_INT 107
21964: PUSH
21965: LD_INT 108
21967: PUSH
21968: LD_INT 109
21970: PUSH
21971: LD_INT 110
21973: PUSH
21974: LD_INT 111
21976: PUSH
21977: LD_INT 112
21979: PUSH
21980: LD_INT 114
21982: PUSH
21983: LD_INT 116
21985: PUSH
21986: LD_INT 117
21988: PUSH
21989: LD_INT 118
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: ST_TO_ADDR
22014: GO 23697
22016: LD_INT 12
22018: DOUBLE
22019: EQUAL
22020: IFTRUE 22024
22022: GO 22244
22024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22025: LD_ADDR_VAR 0 2
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: LD_INT 3
22038: PUSH
22039: LD_INT 4
22041: PUSH
22042: LD_INT 5
22044: PUSH
22045: LD_INT 6
22047: PUSH
22048: LD_INT 7
22050: PUSH
22051: LD_INT 8
22053: PUSH
22054: LD_INT 9
22056: PUSH
22057: LD_INT 10
22059: PUSH
22060: LD_INT 11
22062: PUSH
22063: LD_INT 12
22065: PUSH
22066: LD_INT 13
22068: PUSH
22069: LD_INT 14
22071: PUSH
22072: LD_INT 15
22074: PUSH
22075: LD_INT 16
22077: PUSH
22078: LD_INT 17
22080: PUSH
22081: LD_INT 18
22083: PUSH
22084: LD_INT 19
22086: PUSH
22087: LD_INT 20
22089: PUSH
22090: LD_INT 21
22092: PUSH
22093: LD_INT 22
22095: PUSH
22096: LD_INT 23
22098: PUSH
22099: LD_INT 24
22101: PUSH
22102: LD_INT 25
22104: PUSH
22105: LD_INT 26
22107: PUSH
22108: LD_INT 27
22110: PUSH
22111: LD_INT 28
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 31
22119: PUSH
22120: LD_INT 32
22122: PUSH
22123: LD_INT 33
22125: PUSH
22126: LD_INT 34
22128: PUSH
22129: LD_INT 36
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 101
22170: PUSH
22171: LD_INT 102
22173: PUSH
22174: LD_INT 103
22176: PUSH
22177: LD_INT 104
22179: PUSH
22180: LD_INT 105
22182: PUSH
22183: LD_INT 106
22185: PUSH
22186: LD_INT 107
22188: PUSH
22189: LD_INT 108
22191: PUSH
22192: LD_INT 109
22194: PUSH
22195: LD_INT 110
22197: PUSH
22198: LD_INT 111
22200: PUSH
22201: LD_INT 112
22203: PUSH
22204: LD_INT 113
22206: PUSH
22207: LD_INT 114
22209: PUSH
22210: LD_INT 116
22212: PUSH
22213: LD_INT 117
22215: PUSH
22216: LD_INT 118
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: ST_TO_ADDR
22242: GO 23697
22244: LD_INT 13
22246: DOUBLE
22247: EQUAL
22248: IFTRUE 22252
22250: GO 22460
22252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22253: LD_ADDR_VAR 0 2
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: LD_INT 3
22266: PUSH
22267: LD_INT 4
22269: PUSH
22270: LD_INT 5
22272: PUSH
22273: LD_INT 8
22275: PUSH
22276: LD_INT 9
22278: PUSH
22279: LD_INT 10
22281: PUSH
22282: LD_INT 11
22284: PUSH
22285: LD_INT 12
22287: PUSH
22288: LD_INT 14
22290: PUSH
22291: LD_INT 15
22293: PUSH
22294: LD_INT 16
22296: PUSH
22297: LD_INT 17
22299: PUSH
22300: LD_INT 18
22302: PUSH
22303: LD_INT 19
22305: PUSH
22306: LD_INT 20
22308: PUSH
22309: LD_INT 21
22311: PUSH
22312: LD_INT 22
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 24
22320: PUSH
22321: LD_INT 25
22323: PUSH
22324: LD_INT 26
22326: PUSH
22327: LD_INT 27
22329: PUSH
22330: LD_INT 28
22332: PUSH
22333: LD_INT 30
22335: PUSH
22336: LD_INT 31
22338: PUSH
22339: LD_INT 32
22341: PUSH
22342: LD_INT 33
22344: PUSH
22345: LD_INT 34
22347: PUSH
22348: LD_INT 36
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 101
22386: PUSH
22387: LD_INT 102
22389: PUSH
22390: LD_INT 103
22392: PUSH
22393: LD_INT 104
22395: PUSH
22396: LD_INT 105
22398: PUSH
22399: LD_INT 106
22401: PUSH
22402: LD_INT 107
22404: PUSH
22405: LD_INT 108
22407: PUSH
22408: LD_INT 109
22410: PUSH
22411: LD_INT 110
22413: PUSH
22414: LD_INT 111
22416: PUSH
22417: LD_INT 112
22419: PUSH
22420: LD_INT 113
22422: PUSH
22423: LD_INT 114
22425: PUSH
22426: LD_INT 116
22428: PUSH
22429: LD_INT 117
22431: PUSH
22432: LD_INT 118
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: ST_TO_ADDR
22458: GO 23697
22460: LD_INT 14
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22692
22468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 3
22482: PUSH
22483: LD_INT 4
22485: PUSH
22486: LD_INT 5
22488: PUSH
22489: LD_INT 6
22491: PUSH
22492: LD_INT 7
22494: PUSH
22495: LD_INT 8
22497: PUSH
22498: LD_INT 9
22500: PUSH
22501: LD_INT 10
22503: PUSH
22504: LD_INT 11
22506: PUSH
22507: LD_INT 12
22509: PUSH
22510: LD_INT 13
22512: PUSH
22513: LD_INT 14
22515: PUSH
22516: LD_INT 15
22518: PUSH
22519: LD_INT 16
22521: PUSH
22522: LD_INT 17
22524: PUSH
22525: LD_INT 18
22527: PUSH
22528: LD_INT 19
22530: PUSH
22531: LD_INT 20
22533: PUSH
22534: LD_INT 21
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_INT 23
22542: PUSH
22543: LD_INT 24
22545: PUSH
22546: LD_INT 25
22548: PUSH
22549: LD_INT 26
22551: PUSH
22552: LD_INT 27
22554: PUSH
22555: LD_INT 28
22557: PUSH
22558: LD_INT 29
22560: PUSH
22561: LD_INT 30
22563: PUSH
22564: LD_INT 31
22566: PUSH
22567: LD_INT 32
22569: PUSH
22570: LD_INT 33
22572: PUSH
22573: LD_INT 34
22575: PUSH
22576: LD_INT 36
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 101
22618: PUSH
22619: LD_INT 102
22621: PUSH
22622: LD_INT 103
22624: PUSH
22625: LD_INT 104
22627: PUSH
22628: LD_INT 105
22630: PUSH
22631: LD_INT 106
22633: PUSH
22634: LD_INT 107
22636: PUSH
22637: LD_INT 108
22639: PUSH
22640: LD_INT 109
22642: PUSH
22643: LD_INT 110
22645: PUSH
22646: LD_INT 111
22648: PUSH
22649: LD_INT 112
22651: PUSH
22652: LD_INT 113
22654: PUSH
22655: LD_INT 114
22657: PUSH
22658: LD_INT 116
22660: PUSH
22661: LD_INT 117
22663: PUSH
22664: LD_INT 118
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 23697
22692: LD_INT 15
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22924
22700: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 3
22714: PUSH
22715: LD_INT 4
22717: PUSH
22718: LD_INT 5
22720: PUSH
22721: LD_INT 6
22723: PUSH
22724: LD_INT 7
22726: PUSH
22727: LD_INT 8
22729: PUSH
22730: LD_INT 9
22732: PUSH
22733: LD_INT 10
22735: PUSH
22736: LD_INT 11
22738: PUSH
22739: LD_INT 12
22741: PUSH
22742: LD_INT 13
22744: PUSH
22745: LD_INT 14
22747: PUSH
22748: LD_INT 15
22750: PUSH
22751: LD_INT 16
22753: PUSH
22754: LD_INT 17
22756: PUSH
22757: LD_INT 18
22759: PUSH
22760: LD_INT 19
22762: PUSH
22763: LD_INT 20
22765: PUSH
22766: LD_INT 21
22768: PUSH
22769: LD_INT 22
22771: PUSH
22772: LD_INT 23
22774: PUSH
22775: LD_INT 24
22777: PUSH
22778: LD_INT 25
22780: PUSH
22781: LD_INT 26
22783: PUSH
22784: LD_INT 27
22786: PUSH
22787: LD_INT 28
22789: PUSH
22790: LD_INT 29
22792: PUSH
22793: LD_INT 30
22795: PUSH
22796: LD_INT 31
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: LD_INT 33
22804: PUSH
22805: LD_INT 34
22807: PUSH
22808: LD_INT 36
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 101
22850: PUSH
22851: LD_INT 102
22853: PUSH
22854: LD_INT 103
22856: PUSH
22857: LD_INT 104
22859: PUSH
22860: LD_INT 105
22862: PUSH
22863: LD_INT 106
22865: PUSH
22866: LD_INT 107
22868: PUSH
22869: LD_INT 108
22871: PUSH
22872: LD_INT 109
22874: PUSH
22875: LD_INT 110
22877: PUSH
22878: LD_INT 111
22880: PUSH
22881: LD_INT 112
22883: PUSH
22884: LD_INT 113
22886: PUSH
22887: LD_INT 114
22889: PUSH
22890: LD_INT 116
22892: PUSH
22893: LD_INT 117
22895: PUSH
22896: LD_INT 118
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: ST_TO_ADDR
22922: GO 23697
22924: LD_INT 16
22926: DOUBLE
22927: EQUAL
22928: IFTRUE 22932
22930: GO 23068
22932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22933: LD_ADDR_VAR 0 2
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: LD_INT 4
22943: PUSH
22944: LD_INT 5
22946: PUSH
22947: LD_INT 7
22949: PUSH
22950: LD_INT 11
22952: PUSH
22953: LD_INT 12
22955: PUSH
22956: LD_INT 15
22958: PUSH
22959: LD_INT 16
22961: PUSH
22962: LD_INT 20
22964: PUSH
22965: LD_INT 21
22967: PUSH
22968: LD_INT 22
22970: PUSH
22971: LD_INT 23
22973: PUSH
22974: LD_INT 25
22976: PUSH
22977: LD_INT 26
22979: PUSH
22980: LD_INT 30
22982: PUSH
22983: LD_INT 31
22985: PUSH
22986: LD_INT 32
22988: PUSH
22989: LD_INT 33
22991: PUSH
22992: LD_INT 34
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 101
23018: PUSH
23019: LD_INT 102
23021: PUSH
23022: LD_INT 103
23024: PUSH
23025: LD_INT 106
23027: PUSH
23028: LD_INT 108
23030: PUSH
23031: LD_INT 112
23033: PUSH
23034: LD_INT 113
23036: PUSH
23037: LD_INT 114
23039: PUSH
23040: LD_INT 116
23042: PUSH
23043: LD_INT 117
23045: PUSH
23046: LD_INT 118
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: ST_TO_ADDR
23066: GO 23697
23068: LD_INT 17
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23300
23076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23077: LD_ADDR_VAR 0 2
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: LD_INT 3
23090: PUSH
23091: LD_INT 4
23093: PUSH
23094: LD_INT 5
23096: PUSH
23097: LD_INT 6
23099: PUSH
23100: LD_INT 7
23102: PUSH
23103: LD_INT 8
23105: PUSH
23106: LD_INT 9
23108: PUSH
23109: LD_INT 10
23111: PUSH
23112: LD_INT 11
23114: PUSH
23115: LD_INT 12
23117: PUSH
23118: LD_INT 13
23120: PUSH
23121: LD_INT 14
23123: PUSH
23124: LD_INT 15
23126: PUSH
23127: LD_INT 16
23129: PUSH
23130: LD_INT 17
23132: PUSH
23133: LD_INT 18
23135: PUSH
23136: LD_INT 19
23138: PUSH
23139: LD_INT 20
23141: PUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 22
23147: PUSH
23148: LD_INT 23
23150: PUSH
23151: LD_INT 24
23153: PUSH
23154: LD_INT 25
23156: PUSH
23157: LD_INT 26
23159: PUSH
23160: LD_INT 27
23162: PUSH
23163: LD_INT 28
23165: PUSH
23166: LD_INT 29
23168: PUSH
23169: LD_INT 30
23171: PUSH
23172: LD_INT 31
23174: PUSH
23175: LD_INT 32
23177: PUSH
23178: LD_INT 33
23180: PUSH
23181: LD_INT 34
23183: PUSH
23184: LD_INT 36
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 101
23226: PUSH
23227: LD_INT 102
23229: PUSH
23230: LD_INT 103
23232: PUSH
23233: LD_INT 104
23235: PUSH
23236: LD_INT 105
23238: PUSH
23239: LD_INT 106
23241: PUSH
23242: LD_INT 107
23244: PUSH
23245: LD_INT 108
23247: PUSH
23248: LD_INT 109
23250: PUSH
23251: LD_INT 110
23253: PUSH
23254: LD_INT 111
23256: PUSH
23257: LD_INT 112
23259: PUSH
23260: LD_INT 113
23262: PUSH
23263: LD_INT 114
23265: PUSH
23266: LD_INT 116
23268: PUSH
23269: LD_INT 117
23271: PUSH
23272: LD_INT 118
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: ST_TO_ADDR
23298: GO 23697
23300: LD_INT 18
23302: DOUBLE
23303: EQUAL
23304: IFTRUE 23308
23306: GO 23456
23308: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23309: LD_ADDR_VAR 0 2
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: LD_INT 4
23319: PUSH
23320: LD_INT 5
23322: PUSH
23323: LD_INT 7
23325: PUSH
23326: LD_INT 11
23328: PUSH
23329: LD_INT 12
23331: PUSH
23332: LD_INT 15
23334: PUSH
23335: LD_INT 16
23337: PUSH
23338: LD_INT 20
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 23
23349: PUSH
23350: LD_INT 25
23352: PUSH
23353: LD_INT 26
23355: PUSH
23356: LD_INT 30
23358: PUSH
23359: LD_INT 31
23361: PUSH
23362: LD_INT 32
23364: PUSH
23365: LD_INT 33
23367: PUSH
23368: LD_INT 34
23370: PUSH
23371: LD_INT 35
23373: PUSH
23374: LD_INT 36
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 101
23402: PUSH
23403: LD_INT 102
23405: PUSH
23406: LD_INT 103
23408: PUSH
23409: LD_INT 106
23411: PUSH
23412: LD_INT 108
23414: PUSH
23415: LD_INT 112
23417: PUSH
23418: LD_INT 113
23420: PUSH
23421: LD_INT 114
23423: PUSH
23424: LD_INT 115
23426: PUSH
23427: LD_INT 116
23429: PUSH
23430: LD_INT 117
23432: PUSH
23433: LD_INT 118
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: ST_TO_ADDR
23454: GO 23697
23456: LD_INT 19
23458: DOUBLE
23459: EQUAL
23460: IFTRUE 23464
23462: GO 23696
23464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 4
23481: PUSH
23482: LD_INT 5
23484: PUSH
23485: LD_INT 6
23487: PUSH
23488: LD_INT 7
23490: PUSH
23491: LD_INT 8
23493: PUSH
23494: LD_INT 9
23496: PUSH
23497: LD_INT 10
23499: PUSH
23500: LD_INT 11
23502: PUSH
23503: LD_INT 12
23505: PUSH
23506: LD_INT 13
23508: PUSH
23509: LD_INT 14
23511: PUSH
23512: LD_INT 15
23514: PUSH
23515: LD_INT 16
23517: PUSH
23518: LD_INT 17
23520: PUSH
23521: LD_INT 18
23523: PUSH
23524: LD_INT 19
23526: PUSH
23527: LD_INT 20
23529: PUSH
23530: LD_INT 21
23532: PUSH
23533: LD_INT 22
23535: PUSH
23536: LD_INT 23
23538: PUSH
23539: LD_INT 24
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 26
23547: PUSH
23548: LD_INT 27
23550: PUSH
23551: LD_INT 28
23553: PUSH
23554: LD_INT 29
23556: PUSH
23557: LD_INT 30
23559: PUSH
23560: LD_INT 31
23562: PUSH
23563: LD_INT 32
23565: PUSH
23566: LD_INT 33
23568: PUSH
23569: LD_INT 34
23571: PUSH
23572: LD_INT 35
23574: PUSH
23575: LD_INT 36
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 101
23618: PUSH
23619: LD_INT 102
23621: PUSH
23622: LD_INT 103
23624: PUSH
23625: LD_INT 104
23627: PUSH
23628: LD_INT 105
23630: PUSH
23631: LD_INT 106
23633: PUSH
23634: LD_INT 107
23636: PUSH
23637: LD_INT 108
23639: PUSH
23640: LD_INT 109
23642: PUSH
23643: LD_INT 110
23645: PUSH
23646: LD_INT 111
23648: PUSH
23649: LD_INT 112
23651: PUSH
23652: LD_INT 113
23654: PUSH
23655: LD_INT 114
23657: PUSH
23658: LD_INT 115
23660: PUSH
23661: LD_INT 116
23663: PUSH
23664: LD_INT 117
23666: PUSH
23667: LD_INT 118
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: ST_TO_ADDR
23694: GO 23697
23696: POP
// end else
23697: GO 23928
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23699: LD_ADDR_VAR 0 2
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 3
23712: PUSH
23713: LD_INT 4
23715: PUSH
23716: LD_INT 5
23718: PUSH
23719: LD_INT 6
23721: PUSH
23722: LD_INT 7
23724: PUSH
23725: LD_INT 8
23727: PUSH
23728: LD_INT 9
23730: PUSH
23731: LD_INT 10
23733: PUSH
23734: LD_INT 11
23736: PUSH
23737: LD_INT 12
23739: PUSH
23740: LD_INT 13
23742: PUSH
23743: LD_INT 14
23745: PUSH
23746: LD_INT 15
23748: PUSH
23749: LD_INT 16
23751: PUSH
23752: LD_INT 17
23754: PUSH
23755: LD_INT 18
23757: PUSH
23758: LD_INT 19
23760: PUSH
23761: LD_INT 20
23763: PUSH
23764: LD_INT 21
23766: PUSH
23767: LD_INT 22
23769: PUSH
23770: LD_INT 23
23772: PUSH
23773: LD_INT 24
23775: PUSH
23776: LD_INT 25
23778: PUSH
23779: LD_INT 26
23781: PUSH
23782: LD_INT 27
23784: PUSH
23785: LD_INT 28
23787: PUSH
23788: LD_INT 29
23790: PUSH
23791: LD_INT 30
23793: PUSH
23794: LD_INT 31
23796: PUSH
23797: LD_INT 32
23799: PUSH
23800: LD_INT 33
23802: PUSH
23803: LD_INT 34
23805: PUSH
23806: LD_INT 35
23808: PUSH
23809: LD_INT 36
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 101
23852: PUSH
23853: LD_INT 102
23855: PUSH
23856: LD_INT 103
23858: PUSH
23859: LD_INT 104
23861: PUSH
23862: LD_INT 105
23864: PUSH
23865: LD_INT 106
23867: PUSH
23868: LD_INT 107
23870: PUSH
23871: LD_INT 108
23873: PUSH
23874: LD_INT 109
23876: PUSH
23877: LD_INT 110
23879: PUSH
23880: LD_INT 111
23882: PUSH
23883: LD_INT 112
23885: PUSH
23886: LD_INT 113
23888: PUSH
23889: LD_INT 114
23891: PUSH
23892: LD_INT 115
23894: PUSH
23895: LD_INT 116
23897: PUSH
23898: LD_INT 117
23900: PUSH
23901: LD_INT 118
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: ST_TO_ADDR
// if result then
23928: LD_VAR 0 2
23932: IFFALSE 24718
// begin normal :=  ;
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_STRING 
23941: ST_TO_ADDR
// hardcore :=  ;
23942: LD_ADDR_VAR 0 6
23946: PUSH
23947: LD_STRING 
23949: ST_TO_ADDR
// active :=  ;
23950: LD_ADDR_VAR 0 7
23954: PUSH
23955: LD_STRING 
23957: ST_TO_ADDR
// for i = 1 to normalCounter do
23958: LD_ADDR_VAR 0 8
23962: PUSH
23963: DOUBLE
23964: LD_INT 1
23966: DEC
23967: ST_TO_ADDR
23968: LD_EXP 55
23972: PUSH
23973: FOR_TO
23974: IFFALSE 24075
// begin tmp := 0 ;
23976: LD_ADDR_VAR 0 3
23980: PUSH
23981: LD_STRING 0
23983: ST_TO_ADDR
// if result [ 1 ] then
23984: LD_VAR 0 2
23988: PUSH
23989: LD_INT 1
23991: ARRAY
23992: IFFALSE 24057
// if result [ 1 ] [ 1 ] = i then
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: PUSH
24007: LD_VAR 0 8
24011: EQUAL
24012: IFFALSE 24057
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24014: LD_ADDR_VAR 0 2
24018: PUSH
24019: LD_VAR 0 2
24023: PPUSH
24024: LD_INT 1
24026: PPUSH
24027: LD_VAR 0 2
24031: PUSH
24032: LD_INT 1
24034: ARRAY
24035: PPUSH
24036: LD_INT 1
24038: PPUSH
24039: CALL_OW 3
24043: PPUSH
24044: CALL_OW 1
24048: ST_TO_ADDR
// tmp := 1 ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_STRING 1
24056: ST_TO_ADDR
// end ; normal := normal & tmp ;
24057: LD_ADDR_VAR 0 5
24061: PUSH
24062: LD_VAR 0 5
24066: PUSH
24067: LD_VAR 0 3
24071: STR
24072: ST_TO_ADDR
// end ;
24073: GO 23973
24075: POP
24076: POP
// for i = 1 to hardcoreCounter do
24077: LD_ADDR_VAR 0 8
24081: PUSH
24082: DOUBLE
24083: LD_INT 1
24085: DEC
24086: ST_TO_ADDR
24087: LD_EXP 56
24091: PUSH
24092: FOR_TO
24093: IFFALSE 24198
// begin tmp := 0 ;
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_STRING 0
24102: ST_TO_ADDR
// if result [ 2 ] then
24103: LD_VAR 0 2
24107: PUSH
24108: LD_INT 2
24110: ARRAY
24111: IFFALSE 24180
// if result [ 2 ] [ 1 ] = 100 + i then
24113: LD_VAR 0 2
24117: PUSH
24118: LD_INT 2
24120: ARRAY
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: PUSH
24126: LD_INT 100
24128: PUSH
24129: LD_VAR 0 8
24133: PLUS
24134: EQUAL
24135: IFFALSE 24180
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_VAR 0 2
24146: PPUSH
24147: LD_INT 2
24149: PPUSH
24150: LD_VAR 0 2
24154: PUSH
24155: LD_INT 2
24157: ARRAY
24158: PPUSH
24159: LD_INT 1
24161: PPUSH
24162: CALL_OW 3
24166: PPUSH
24167: CALL_OW 1
24171: ST_TO_ADDR
// tmp := 1 ;
24172: LD_ADDR_VAR 0 3
24176: PUSH
24177: LD_STRING 1
24179: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24180: LD_ADDR_VAR 0 6
24184: PUSH
24185: LD_VAR 0 6
24189: PUSH
24190: LD_VAR 0 3
24194: STR
24195: ST_TO_ADDR
// end ;
24196: GO 24092
24198: POP
24199: POP
// if isGameLoad then
24200: LD_VAR 0 1
24204: IFFALSE 24679
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24206: LD_ADDR_VAR 0 4
24210: PUSH
24211: LD_EXP 59
24215: PUSH
24216: LD_EXP 58
24220: PUSH
24221: LD_EXP 60
24225: PUSH
24226: LD_EXP 57
24230: PUSH
24231: LD_EXP 61
24235: PUSH
24236: LD_EXP 62
24240: PUSH
24241: LD_EXP 63
24245: PUSH
24246: LD_EXP 64
24250: PUSH
24251: LD_EXP 65
24255: PUSH
24256: LD_EXP 66
24260: PUSH
24261: LD_EXP 67
24265: PUSH
24266: LD_EXP 68
24270: PUSH
24271: LD_EXP 69
24275: PUSH
24276: LD_EXP 70
24280: PUSH
24281: LD_EXP 78
24285: PUSH
24286: LD_EXP 79
24290: PUSH
24291: LD_EXP 80
24295: PUSH
24296: LD_EXP 81
24300: PUSH
24301: LD_EXP 83
24305: PUSH
24306: LD_EXP 84
24310: PUSH
24311: LD_EXP 85
24315: PUSH
24316: LD_EXP 88
24320: PUSH
24321: LD_EXP 90
24325: PUSH
24326: LD_EXP 91
24330: PUSH
24331: LD_EXP 92
24335: PUSH
24336: LD_EXP 94
24340: PUSH
24341: LD_EXP 95
24345: PUSH
24346: LD_EXP 98
24350: PUSH
24351: LD_EXP 99
24355: PUSH
24356: LD_EXP 100
24360: PUSH
24361: LD_EXP 101
24365: PUSH
24366: LD_EXP 102
24370: PUSH
24371: LD_EXP 103
24375: PUSH
24376: LD_EXP 104
24380: PUSH
24381: LD_EXP 105
24385: PUSH
24386: LD_EXP 106
24390: PUSH
24391: LD_EXP 71
24395: PUSH
24396: LD_EXP 72
24400: PUSH
24401: LD_EXP 75
24405: PUSH
24406: LD_EXP 76
24410: PUSH
24411: LD_EXP 77
24415: PUSH
24416: LD_EXP 73
24420: PUSH
24421: LD_EXP 74
24425: PUSH
24426: LD_EXP 82
24430: PUSH
24431: LD_EXP 86
24435: PUSH
24436: LD_EXP 87
24440: PUSH
24441: LD_EXP 89
24445: PUSH
24446: LD_EXP 93
24450: PUSH
24451: LD_EXP 96
24455: PUSH
24456: LD_EXP 97
24460: PUSH
24461: LD_EXP 107
24465: PUSH
24466: LD_EXP 108
24470: PUSH
24471: LD_EXP 109
24475: PUSH
24476: LD_EXP 110
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
// tmp :=  ;
24537: LD_ADDR_VAR 0 3
24541: PUSH
24542: LD_STRING 
24544: ST_TO_ADDR
// for i = 1 to normalCounter do
24545: LD_ADDR_VAR 0 8
24549: PUSH
24550: DOUBLE
24551: LD_INT 1
24553: DEC
24554: ST_TO_ADDR
24555: LD_EXP 55
24559: PUSH
24560: FOR_TO
24561: IFFALSE 24597
// begin if flags [ i ] then
24563: LD_VAR 0 4
24567: PUSH
24568: LD_VAR 0 8
24572: ARRAY
24573: IFFALSE 24595
// tmp := tmp & i & ; ;
24575: LD_ADDR_VAR 0 3
24579: PUSH
24580: LD_VAR 0 3
24584: PUSH
24585: LD_VAR 0 8
24589: STR
24590: PUSH
24591: LD_STRING ;
24593: STR
24594: ST_TO_ADDR
// end ;
24595: GO 24560
24597: POP
24598: POP
// for i = 1 to hardcoreCounter do
24599: LD_ADDR_VAR 0 8
24603: PUSH
24604: DOUBLE
24605: LD_INT 1
24607: DEC
24608: ST_TO_ADDR
24609: LD_EXP 56
24613: PUSH
24614: FOR_TO
24615: IFFALSE 24661
// begin if flags [ normalCounter + i ] then
24617: LD_VAR 0 4
24621: PUSH
24622: LD_EXP 55
24626: PUSH
24627: LD_VAR 0 8
24631: PLUS
24632: ARRAY
24633: IFFALSE 24659
// tmp := tmp & ( 100 + i ) & ; ;
24635: LD_ADDR_VAR 0 3
24639: PUSH
24640: LD_VAR 0 3
24644: PUSH
24645: LD_INT 100
24647: PUSH
24648: LD_VAR 0 8
24652: PLUS
24653: STR
24654: PUSH
24655: LD_STRING ;
24657: STR
24658: ST_TO_ADDR
// end ;
24659: GO 24614
24661: POP
24662: POP
// if tmp then
24663: LD_VAR 0 3
24667: IFFALSE 24679
// active := tmp ;
24669: LD_ADDR_VAR 0 7
24673: PUSH
24674: LD_VAR 0 3
24678: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24679: LD_STRING getStreamItemsFromMission("
24681: PUSH
24682: LD_VAR 0 5
24686: STR
24687: PUSH
24688: LD_STRING ","
24690: STR
24691: PUSH
24692: LD_VAR 0 6
24696: STR
24697: PUSH
24698: LD_STRING ","
24700: STR
24701: PUSH
24702: LD_VAR 0 7
24706: STR
24707: PUSH
24708: LD_STRING ")
24710: STR
24711: PPUSH
24712: CALL_OW 559
// end else
24716: GO 24725
// ToLua ( getStreamItemsFromMission("","","") ) ;
24718: LD_STRING getStreamItemsFromMission("","","")
24720: PPUSH
24721: CALL_OW 559
// end ;
24725: LD_VAR 0 2
24729: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24730: LD_EXP 54
24734: PUSH
24735: LD_EXP 59
24739: AND
24740: IFFALSE 24864
24742: GO 24744
24744: DISABLE
24745: LD_INT 0
24747: PPUSH
24748: PPUSH
// begin enable ;
24749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24750: LD_ADDR_VAR 0 2
24754: PUSH
24755: LD_INT 22
24757: PUSH
24758: LD_OWVAR 2
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: PUSH
24770: LD_INT 34
24772: PUSH
24773: LD_INT 7
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 34
24782: PUSH
24783: LD_INT 45
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 34
24792: PUSH
24793: LD_INT 28
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 34
24802: PUSH
24803: LD_INT 47
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: ST_TO_ADDR
// if not tmp then
24826: LD_VAR 0 2
24830: NOT
24831: IFFALSE 24835
// exit ;
24833: GO 24864
// for i in tmp do
24835: LD_ADDR_VAR 0 1
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: FOR_IN
24846: IFFALSE 24862
// begin SetLives ( i , 0 ) ;
24848: LD_VAR 0 1
24852: PPUSH
24853: LD_INT 0
24855: PPUSH
24856: CALL_OW 234
// end ;
24860: GO 24845
24862: POP
24863: POP
// end ;
24864: PPOPN 2
24866: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24867: LD_EXP 54
24871: PUSH
24872: LD_EXP 60
24876: AND
24877: IFFALSE 24961
24879: GO 24881
24881: DISABLE
24882: LD_INT 0
24884: PPUSH
24885: PPUSH
// begin enable ;
24886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24887: LD_ADDR_VAR 0 2
24891: PUSH
24892: LD_INT 22
24894: PUSH
24895: LD_OWVAR 2
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 32
24906: PUSH
24907: LD_INT 3
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 69
24922: ST_TO_ADDR
// if not tmp then
24923: LD_VAR 0 2
24927: NOT
24928: IFFALSE 24932
// exit ;
24930: GO 24961
// for i in tmp do
24932: LD_ADDR_VAR 0 1
24936: PUSH
24937: LD_VAR 0 2
24941: PUSH
24942: FOR_IN
24943: IFFALSE 24959
// begin SetLives ( i , 0 ) ;
24945: LD_VAR 0 1
24949: PPUSH
24950: LD_INT 0
24952: PPUSH
24953: CALL_OW 234
// end ;
24957: GO 24942
24959: POP
24960: POP
// end ;
24961: PPOPN 2
24963: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24964: LD_EXP 54
24968: PUSH
24969: LD_EXP 57
24973: AND
24974: IFFALSE 25067
24976: GO 24978
24978: DISABLE
24979: LD_INT 0
24981: PPUSH
// begin enable ;
24982: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24983: LD_ADDR_VAR 0 1
24987: PUSH
24988: LD_INT 22
24990: PUSH
24991: LD_OWVAR 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 25
25005: PUSH
25006: LD_INT 5
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 25
25015: PUSH
25016: LD_INT 9
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 25
25025: PUSH
25026: LD_INT 8
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PPUSH
25043: CALL_OW 69
25047: PUSH
25048: FOR_IN
25049: IFFALSE 25065
// begin SetClass ( i , 1 ) ;
25051: LD_VAR 0 1
25055: PPUSH
25056: LD_INT 1
25058: PPUSH
25059: CALL_OW 336
// end ;
25063: GO 25048
25065: POP
25066: POP
// end ;
25067: PPOPN 1
25069: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25070: LD_EXP 54
25074: PUSH
25075: LD_EXP 58
25079: AND
25080: PUSH
25081: LD_OWVAR 65
25085: PUSH
25086: LD_INT 7
25088: LESS
25089: AND
25090: IFFALSE 25104
25092: GO 25094
25094: DISABLE
// begin enable ;
25095: ENABLE
// game_speed := 7 ;
25096: LD_ADDR_OWVAR 65
25100: PUSH
25101: LD_INT 7
25103: ST_TO_ADDR
// end ;
25104: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25105: LD_EXP 54
25109: PUSH
25110: LD_EXP 61
25114: AND
25115: IFFALSE 25317
25117: GO 25119
25119: DISABLE
25120: LD_INT 0
25122: PPUSH
25123: PPUSH
25124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: LD_INT 81
25132: PUSH
25133: LD_OWVAR 2
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 21
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: ST_TO_ADDR
// if not tmp then
25161: LD_VAR 0 3
25165: NOT
25166: IFFALSE 25170
// exit ;
25168: GO 25317
// if tmp > 5 then
25170: LD_VAR 0 3
25174: PUSH
25175: LD_INT 5
25177: GREATER
25178: IFFALSE 25190
// k := 5 else
25180: LD_ADDR_VAR 0 2
25184: PUSH
25185: LD_INT 5
25187: ST_TO_ADDR
25188: GO 25200
// k := tmp ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_VAR 0 3
25199: ST_TO_ADDR
// for i := 1 to k do
25200: LD_ADDR_VAR 0 1
25204: PUSH
25205: DOUBLE
25206: LD_INT 1
25208: DEC
25209: ST_TO_ADDR
25210: LD_VAR 0 2
25214: PUSH
25215: FOR_TO
25216: IFFALSE 25315
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25218: LD_VAR 0 3
25222: PUSH
25223: LD_VAR 0 1
25227: ARRAY
25228: PPUSH
25229: LD_VAR 0 1
25233: PUSH
25234: LD_INT 4
25236: MOD
25237: PUSH
25238: LD_INT 1
25240: PLUS
25241: PPUSH
25242: CALL_OW 259
25246: PUSH
25247: LD_INT 10
25249: LESS
25250: IFFALSE 25313
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25252: LD_VAR 0 3
25256: PUSH
25257: LD_VAR 0 1
25261: ARRAY
25262: PPUSH
25263: LD_VAR 0 1
25267: PUSH
25268: LD_INT 4
25270: MOD
25271: PUSH
25272: LD_INT 1
25274: PLUS
25275: PPUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 1
25285: ARRAY
25286: PPUSH
25287: LD_VAR 0 1
25291: PUSH
25292: LD_INT 4
25294: MOD
25295: PUSH
25296: LD_INT 1
25298: PLUS
25299: PPUSH
25300: CALL_OW 259
25304: PUSH
25305: LD_INT 1
25307: PLUS
25308: PPUSH
25309: CALL_OW 237
25313: GO 25215
25315: POP
25316: POP
// end ;
25317: PPOPN 3
25319: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25320: LD_EXP 54
25324: PUSH
25325: LD_EXP 62
25329: AND
25330: IFFALSE 25350
25332: GO 25334
25334: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25335: LD_INT 4
25337: PPUSH
25338: LD_OWVAR 2
25342: PPUSH
25343: LD_INT 0
25345: PPUSH
25346: CALL_OW 324
25350: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25351: LD_EXP 54
25355: PUSH
25356: LD_EXP 91
25360: AND
25361: IFFALSE 25381
25363: GO 25365
25365: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25366: LD_INT 19
25368: PPUSH
25369: LD_OWVAR 2
25373: PPUSH
25374: LD_INT 0
25376: PPUSH
25377: CALL_OW 324
25381: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25382: LD_EXP 54
25386: PUSH
25387: LD_EXP 63
25391: AND
25392: IFFALSE 25494
25394: GO 25396
25396: DISABLE
25397: LD_INT 0
25399: PPUSH
25400: PPUSH
// begin enable ;
25401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25402: LD_ADDR_VAR 0 2
25406: PUSH
25407: LD_INT 22
25409: PUSH
25410: LD_OWVAR 2
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: LD_INT 34
25424: PUSH
25425: LD_INT 11
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 34
25434: PUSH
25435: LD_INT 30
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: ST_TO_ADDR
// if not tmp then
25456: LD_VAR 0 2
25460: NOT
25461: IFFALSE 25465
// exit ;
25463: GO 25494
// for i in tmp do
25465: LD_ADDR_VAR 0 1
25469: PUSH
25470: LD_VAR 0 2
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25492
// begin SetLives ( i , 0 ) ;
25478: LD_VAR 0 1
25482: PPUSH
25483: LD_INT 0
25485: PPUSH
25486: CALL_OW 234
// end ;
25490: GO 25475
25492: POP
25493: POP
// end ;
25494: PPOPN 2
25496: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25497: LD_EXP 54
25501: PUSH
25502: LD_EXP 64
25506: AND
25507: IFFALSE 25527
25509: GO 25511
25511: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25512: LD_INT 32
25514: PPUSH
25515: LD_OWVAR 2
25519: PPUSH
25520: LD_INT 0
25522: PPUSH
25523: CALL_OW 324
25527: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25528: LD_EXP 54
25532: PUSH
25533: LD_EXP 65
25537: AND
25538: IFFALSE 25719
25540: GO 25542
25542: DISABLE
25543: LD_INT 0
25545: PPUSH
25546: PPUSH
25547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25548: LD_ADDR_VAR 0 2
25552: PUSH
25553: LD_INT 22
25555: PUSH
25556: LD_OWVAR 2
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 33
25567: PUSH
25568: LD_INT 3
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PPUSH
25579: CALL_OW 69
25583: ST_TO_ADDR
// if not tmp then
25584: LD_VAR 0 2
25588: NOT
25589: IFFALSE 25593
// exit ;
25591: GO 25719
// side := 0 ;
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_INT 0
25600: ST_TO_ADDR
// for i := 1 to 8 do
25601: LD_ADDR_VAR 0 1
25605: PUSH
25606: DOUBLE
25607: LD_INT 1
25609: DEC
25610: ST_TO_ADDR
25611: LD_INT 8
25613: PUSH
25614: FOR_TO
25615: IFFALSE 25663
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25617: LD_OWVAR 2
25621: PUSH
25622: LD_VAR 0 1
25626: NONEQUAL
25627: PUSH
25628: LD_OWVAR 2
25632: PPUSH
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 81
25642: PUSH
25643: LD_INT 2
25645: EQUAL
25646: AND
25647: IFFALSE 25661
// begin side := i ;
25649: LD_ADDR_VAR 0 3
25653: PUSH
25654: LD_VAR 0 1
25658: ST_TO_ADDR
// break ;
25659: GO 25663
// end ;
25661: GO 25614
25663: POP
25664: POP
// if not side then
25665: LD_VAR 0 3
25669: NOT
25670: IFFALSE 25674
// exit ;
25672: GO 25719
// for i := 1 to tmp do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: DOUBLE
25680: LD_INT 1
25682: DEC
25683: ST_TO_ADDR
25684: LD_VAR 0 2
25688: PUSH
25689: FOR_TO
25690: IFFALSE 25717
// if Prob ( 60 ) then
25692: LD_INT 60
25694: PPUSH
25695: CALL_OW 13
25699: IFFALSE 25715
// SetSide ( i , side ) ;
25701: LD_VAR 0 1
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: CALL_OW 235
25715: GO 25689
25717: POP
25718: POP
// end ;
25719: PPOPN 3
25721: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25722: LD_EXP 54
25726: PUSH
25727: LD_EXP 67
25731: AND
25732: IFFALSE 25851
25734: GO 25736
25736: DISABLE
25737: LD_INT 0
25739: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25740: LD_ADDR_VAR 0 1
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_OWVAR 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 21
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: LD_INT 23
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: LIST
25788: PPUSH
25789: CALL_OW 69
25793: PUSH
25794: FOR_IN
25795: IFFALSE 25849
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 257
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: LD_INT 4
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: IN
25825: IFFALSE 25847
// SetClass ( un , rand ( 1 , 4 ) ) ;
25827: LD_VAR 0 1
25831: PPUSH
25832: LD_INT 1
25834: PPUSH
25835: LD_INT 4
25837: PPUSH
25838: CALL_OW 12
25842: PPUSH
25843: CALL_OW 336
25847: GO 25794
25849: POP
25850: POP
// end ;
25851: PPOPN 1
25853: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25854: LD_EXP 54
25858: PUSH
25859: LD_EXP 66
25863: AND
25864: IFFALSE 25943
25866: GO 25868
25868: DISABLE
25869: LD_INT 0
25871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25872: LD_ADDR_VAR 0 1
25876: PUSH
25877: LD_INT 22
25879: PUSH
25880: LD_OWVAR 2
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 3
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PPUSH
25903: CALL_OW 69
25907: ST_TO_ADDR
// if not tmp then
25908: LD_VAR 0 1
25912: NOT
25913: IFFALSE 25917
// exit ;
25915: GO 25943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25917: LD_VAR 0 1
25921: PUSH
25922: LD_INT 1
25924: PPUSH
25925: LD_VAR 0 1
25929: PPUSH
25930: CALL_OW 12
25934: ARRAY
25935: PPUSH
25936: LD_INT 100
25938: PPUSH
25939: CALL_OW 234
// end ;
25943: PPOPN 1
25945: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25946: LD_EXP 54
25950: PUSH
25951: LD_EXP 68
25955: AND
25956: IFFALSE 26054
25958: GO 25960
25960: DISABLE
25961: LD_INT 0
25963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25964: LD_ADDR_VAR 0 1
25968: PUSH
25969: LD_INT 22
25971: PUSH
25972: LD_OWVAR 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 21
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PPUSH
25995: CALL_OW 69
25999: ST_TO_ADDR
// if not tmp then
26000: LD_VAR 0 1
26004: NOT
26005: IFFALSE 26009
// exit ;
26007: GO 26054
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26009: LD_VAR 0 1
26013: PUSH
26014: LD_INT 1
26016: PPUSH
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 12
26026: ARRAY
26027: PPUSH
26028: LD_INT 1
26030: PPUSH
26031: LD_INT 4
26033: PPUSH
26034: CALL_OW 12
26038: PPUSH
26039: LD_INT 3000
26041: PPUSH
26042: LD_INT 9000
26044: PPUSH
26045: CALL_OW 12
26049: PPUSH
26050: CALL_OW 492
// end ;
26054: PPOPN 1
26056: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26057: LD_EXP 54
26061: PUSH
26062: LD_EXP 69
26066: AND
26067: IFFALSE 26087
26069: GO 26071
26071: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26072: LD_INT 1
26074: PPUSH
26075: LD_OWVAR 2
26079: PPUSH
26080: LD_INT 0
26082: PPUSH
26083: CALL_OW 324
26087: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26088: LD_EXP 54
26092: PUSH
26093: LD_EXP 70
26097: AND
26098: IFFALSE 26181
26100: GO 26102
26102: DISABLE
26103: LD_INT 0
26105: PPUSH
26106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26107: LD_ADDR_VAR 0 2
26111: PUSH
26112: LD_INT 22
26114: PUSH
26115: LD_OWVAR 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 21
26126: PUSH
26127: LD_INT 3
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: ST_TO_ADDR
// if not tmp then
26143: LD_VAR 0 2
26147: NOT
26148: IFFALSE 26152
// exit ;
26150: GO 26181
// for i in tmp do
26152: LD_ADDR_VAR 0 1
26156: PUSH
26157: LD_VAR 0 2
26161: PUSH
26162: FOR_IN
26163: IFFALSE 26179
// SetBLevel ( i , 10 ) ;
26165: LD_VAR 0 1
26169: PPUSH
26170: LD_INT 10
26172: PPUSH
26173: CALL_OW 241
26177: GO 26162
26179: POP
26180: POP
// end ;
26181: PPOPN 2
26183: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26184: LD_EXP 54
26188: PUSH
26189: LD_EXP 71
26193: AND
26194: IFFALSE 26305
26196: GO 26198
26198: DISABLE
26199: LD_INT 0
26201: PPUSH
26202: PPUSH
26203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26204: LD_ADDR_VAR 0 3
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_OWVAR 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 25
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 69
26239: ST_TO_ADDR
// if not tmp then
26240: LD_VAR 0 3
26244: NOT
26245: IFFALSE 26249
// exit ;
26247: GO 26305
// un := tmp [ rand ( 1 , tmp ) ] ;
26249: LD_ADDR_VAR 0 2
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: LD_INT 1
26261: PPUSH
26262: LD_VAR 0 3
26266: PPUSH
26267: CALL_OW 12
26271: ARRAY
26272: ST_TO_ADDR
// if Crawls ( un ) then
26273: LD_VAR 0 2
26277: PPUSH
26278: CALL_OW 318
26282: IFFALSE 26293
// ComWalk ( un ) ;
26284: LD_VAR 0 2
26288: PPUSH
26289: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26293: LD_VAR 0 2
26297: PPUSH
26298: LD_INT 5
26300: PPUSH
26301: CALL_OW 336
// end ;
26305: PPOPN 3
26307: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26308: LD_EXP 54
26312: PUSH
26313: LD_EXP 72
26317: AND
26318: PUSH
26319: LD_OWVAR 67
26323: PUSH
26324: LD_INT 4
26326: LESS
26327: AND
26328: IFFALSE 26347
26330: GO 26332
26332: DISABLE
// begin Difficulty := Difficulty + 1 ;
26333: LD_ADDR_OWVAR 67
26337: PUSH
26338: LD_OWVAR 67
26342: PUSH
26343: LD_INT 1
26345: PLUS
26346: ST_TO_ADDR
// end ;
26347: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26348: LD_EXP 54
26352: PUSH
26353: LD_EXP 73
26357: AND
26358: IFFALSE 26461
26360: GO 26362
26362: DISABLE
26363: LD_INT 0
26365: PPUSH
// begin for i := 1 to 5 do
26366: LD_ADDR_VAR 0 1
26370: PUSH
26371: DOUBLE
26372: LD_INT 1
26374: DEC
26375: ST_TO_ADDR
26376: LD_INT 5
26378: PUSH
26379: FOR_TO
26380: IFFALSE 26459
// begin uc_nation := nation_nature ;
26382: LD_ADDR_OWVAR 21
26386: PUSH
26387: LD_INT 0
26389: ST_TO_ADDR
// uc_side := 0 ;
26390: LD_ADDR_OWVAR 20
26394: PUSH
26395: LD_INT 0
26397: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26398: LD_ADDR_OWVAR 29
26402: PUSH
26403: LD_INT 12
26405: PUSH
26406: LD_INT 12
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: ST_TO_ADDR
// hc_agressivity := 20 ;
26413: LD_ADDR_OWVAR 35
26417: PUSH
26418: LD_INT 20
26420: ST_TO_ADDR
// hc_class := class_tiger ;
26421: LD_ADDR_OWVAR 28
26425: PUSH
26426: LD_INT 14
26428: ST_TO_ADDR
// hc_gallery :=  ;
26429: LD_ADDR_OWVAR 33
26433: PUSH
26434: LD_STRING 
26436: ST_TO_ADDR
// hc_name :=  ;
26437: LD_ADDR_OWVAR 26
26441: PUSH
26442: LD_STRING 
26444: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26445: CALL_OW 44
26449: PPUSH
26450: LD_INT 0
26452: PPUSH
26453: CALL_OW 51
// end ;
26457: GO 26379
26459: POP
26460: POP
// end ;
26461: PPOPN 1
26463: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26464: LD_EXP 54
26468: PUSH
26469: LD_EXP 74
26473: AND
26474: IFFALSE 26483
26476: GO 26478
26478: DISABLE
// StreamSibBomb ;
26479: CALL 26484 0 0
26483: END
// export function StreamSibBomb ; var i , x , y ; begin
26484: LD_INT 0
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
// result := false ;
26490: LD_ADDR_VAR 0 1
26494: PUSH
26495: LD_INT 0
26497: ST_TO_ADDR
// for i := 1 to 16 do
26498: LD_ADDR_VAR 0 2
26502: PUSH
26503: DOUBLE
26504: LD_INT 1
26506: DEC
26507: ST_TO_ADDR
26508: LD_INT 16
26510: PUSH
26511: FOR_TO
26512: IFFALSE 26711
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26514: LD_ADDR_VAR 0 3
26518: PUSH
26519: LD_INT 10
26521: PUSH
26522: LD_INT 20
26524: PUSH
26525: LD_INT 30
26527: PUSH
26528: LD_INT 40
26530: PUSH
26531: LD_INT 50
26533: PUSH
26534: LD_INT 60
26536: PUSH
26537: LD_INT 70
26539: PUSH
26540: LD_INT 80
26542: PUSH
26543: LD_INT 90
26545: PUSH
26546: LD_INT 100
26548: PUSH
26549: LD_INT 110
26551: PUSH
26552: LD_INT 120
26554: PUSH
26555: LD_INT 130
26557: PUSH
26558: LD_INT 140
26560: PUSH
26561: LD_INT 150
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PPUSH
26584: LD_INT 15
26586: PPUSH
26587: CALL_OW 12
26591: ARRAY
26592: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26593: LD_ADDR_VAR 0 4
26597: PUSH
26598: LD_INT 10
26600: PUSH
26601: LD_INT 20
26603: PUSH
26604: LD_INT 30
26606: PUSH
26607: LD_INT 40
26609: PUSH
26610: LD_INT 50
26612: PUSH
26613: LD_INT 60
26615: PUSH
26616: LD_INT 70
26618: PUSH
26619: LD_INT 80
26621: PUSH
26622: LD_INT 90
26624: PUSH
26625: LD_INT 100
26627: PUSH
26628: LD_INT 110
26630: PUSH
26631: LD_INT 120
26633: PUSH
26634: LD_INT 130
26636: PUSH
26637: LD_INT 140
26639: PUSH
26640: LD_INT 150
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PPUSH
26663: LD_INT 15
26665: PPUSH
26666: CALL_OW 12
26670: ARRAY
26671: ST_TO_ADDR
// if ValidHex ( x , y ) then
26672: LD_VAR 0 3
26676: PPUSH
26677: LD_VAR 0 4
26681: PPUSH
26682: CALL_OW 488
26686: IFFALSE 26709
// begin result := [ x , y ] ;
26688: LD_ADDR_VAR 0 1
26692: PUSH
26693: LD_VAR 0 3
26697: PUSH
26698: LD_VAR 0 4
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: ST_TO_ADDR
// break ;
26707: GO 26711
// end ; end ;
26709: GO 26511
26711: POP
26712: POP
// if result then
26713: LD_VAR 0 1
26717: IFFALSE 26777
// begin ToLua ( playSibBomb() ) ;
26719: LD_STRING playSibBomb()
26721: PPUSH
26722: CALL_OW 559
// wait ( 0 0$14 ) ;
26726: LD_INT 490
26728: PPUSH
26729: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26733: LD_VAR 0 1
26737: PUSH
26738: LD_INT 1
26740: ARRAY
26741: PPUSH
26742: LD_VAR 0 1
26746: PUSH
26747: LD_INT 2
26749: ARRAY
26750: PPUSH
26751: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26755: LD_VAR 0 1
26759: PUSH
26760: LD_INT 1
26762: ARRAY
26763: PPUSH
26764: LD_VAR 0 1
26768: PUSH
26769: LD_INT 2
26771: ARRAY
26772: PPUSH
26773: CALL_OW 429
// end ; end ;
26777: LD_VAR 0 1
26781: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26782: LD_EXP 54
26786: PUSH
26787: LD_EXP 76
26791: AND
26792: IFFALSE 26804
26794: GO 26796
26796: DISABLE
// YouLost (  ) ;
26797: LD_STRING 
26799: PPUSH
26800: CALL_OW 104
26804: END
// every 0 0$1 trigger StreamModeActive and sFog do
26805: LD_EXP 54
26809: PUSH
26810: LD_EXP 75
26814: AND
26815: IFFALSE 26829
26817: GO 26819
26819: DISABLE
// FogOff ( your_side ) ;
26820: LD_OWVAR 2
26824: PPUSH
26825: CALL_OW 344
26829: END
// every 0 0$1 trigger StreamModeActive and sSun do
26830: LD_EXP 54
26834: PUSH
26835: LD_EXP 77
26839: AND
26840: IFFALSE 26868
26842: GO 26844
26844: DISABLE
// begin solar_recharge_percent := 0 ;
26845: LD_ADDR_OWVAR 79
26849: PUSH
26850: LD_INT 0
26852: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26853: LD_INT 10500
26855: PPUSH
26856: CALL_OW 67
// solar_recharge_percent := 100 ;
26860: LD_ADDR_OWVAR 79
26864: PUSH
26865: LD_INT 100
26867: ST_TO_ADDR
// end ;
26868: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26869: LD_EXP 54
26873: PUSH
26874: LD_EXP 78
26878: AND
26879: IFFALSE 27118
26881: GO 26883
26883: DISABLE
26884: LD_INT 0
26886: PPUSH
26887: PPUSH
26888: PPUSH
// begin tmp := [ ] ;
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// for i := 1 to 6 do
26896: LD_ADDR_VAR 0 1
26900: PUSH
26901: DOUBLE
26902: LD_INT 1
26904: DEC
26905: ST_TO_ADDR
26906: LD_INT 6
26908: PUSH
26909: FOR_TO
26910: IFFALSE 27015
// begin uc_nation := nation_nature ;
26912: LD_ADDR_OWVAR 21
26916: PUSH
26917: LD_INT 0
26919: ST_TO_ADDR
// uc_side := 0 ;
26920: LD_ADDR_OWVAR 20
26924: PUSH
26925: LD_INT 0
26927: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26928: LD_ADDR_OWVAR 29
26932: PUSH
26933: LD_INT 12
26935: PUSH
26936: LD_INT 12
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: ST_TO_ADDR
// hc_agressivity := 20 ;
26943: LD_ADDR_OWVAR 35
26947: PUSH
26948: LD_INT 20
26950: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26951: LD_ADDR_OWVAR 28
26955: PUSH
26956: LD_INT 17
26958: ST_TO_ADDR
// hc_gallery :=  ;
26959: LD_ADDR_OWVAR 33
26963: PUSH
26964: LD_STRING 
26966: ST_TO_ADDR
// hc_name :=  ;
26967: LD_ADDR_OWVAR 26
26971: PUSH
26972: LD_STRING 
26974: ST_TO_ADDR
// un := CreateHuman ;
26975: LD_ADDR_VAR 0 2
26979: PUSH
26980: CALL_OW 44
26984: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26985: LD_VAR 0 2
26989: PPUSH
26990: LD_INT 1
26992: PPUSH
26993: CALL_OW 51
// tmp := tmp ^ un ;
26997: LD_ADDR_VAR 0 3
27001: PUSH
27002: LD_VAR 0 3
27006: PUSH
27007: LD_VAR 0 2
27011: ADD
27012: ST_TO_ADDR
// end ;
27013: GO 26909
27015: POP
27016: POP
// repeat wait ( 0 0$1 ) ;
27017: LD_INT 35
27019: PPUSH
27020: CALL_OW 67
// for un in tmp do
27024: LD_ADDR_VAR 0 2
27028: PUSH
27029: LD_VAR 0 3
27033: PUSH
27034: FOR_IN
27035: IFFALSE 27109
// begin if IsDead ( un ) then
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 301
27046: IFFALSE 27066
// begin tmp := tmp diff un ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: LD_VAR 0 3
27057: PUSH
27058: LD_VAR 0 2
27062: DIFF
27063: ST_TO_ADDR
// continue ;
27064: GO 27034
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27066: LD_VAR 0 2
27070: PPUSH
27071: LD_INT 3
27073: PUSH
27074: LD_INT 22
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PPUSH
27088: CALL_OW 69
27092: PPUSH
27093: LD_VAR 0 2
27097: PPUSH
27098: CALL_OW 74
27102: PPUSH
27103: CALL_OW 115
// end ;
27107: GO 27034
27109: POP
27110: POP
// until not tmp ;
27111: LD_VAR 0 3
27115: NOT
27116: IFFALSE 27017
// end ;
27118: PPOPN 3
27120: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27121: LD_EXP 54
27125: PUSH
27126: LD_EXP 79
27130: AND
27131: IFFALSE 27185
27133: GO 27135
27135: DISABLE
// begin ToLua ( displayTroll(); ) ;
27136: LD_STRING displayTroll();
27138: PPUSH
27139: CALL_OW 559
// wait ( 3 3$00 ) ;
27143: LD_INT 6300
27145: PPUSH
27146: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27150: LD_STRING hideTroll();
27152: PPUSH
27153: CALL_OW 559
// wait ( 1 1$00 ) ;
27157: LD_INT 2100
27159: PPUSH
27160: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27164: LD_STRING displayTroll();
27166: PPUSH
27167: CALL_OW 559
// wait ( 1 1$00 ) ;
27171: LD_INT 2100
27173: PPUSH
27174: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27178: LD_STRING hideTroll();
27180: PPUSH
27181: CALL_OW 559
// end ;
27185: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27186: LD_EXP 54
27190: PUSH
27191: LD_EXP 80
27195: AND
27196: IFFALSE 27259
27198: GO 27200
27200: DISABLE
27201: LD_INT 0
27203: PPUSH
// begin p := 0 ;
27204: LD_ADDR_VAR 0 1
27208: PUSH
27209: LD_INT 0
27211: ST_TO_ADDR
// repeat game_speed := 1 ;
27212: LD_ADDR_OWVAR 65
27216: PUSH
27217: LD_INT 1
27219: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27220: LD_INT 35
27222: PPUSH
27223: CALL_OW 67
// p := p + 1 ;
27227: LD_ADDR_VAR 0 1
27231: PUSH
27232: LD_VAR 0 1
27236: PUSH
27237: LD_INT 1
27239: PLUS
27240: ST_TO_ADDR
// until p >= 60 ;
27241: LD_VAR 0 1
27245: PUSH
27246: LD_INT 60
27248: GREATEREQUAL
27249: IFFALSE 27212
// game_speed := 4 ;
27251: LD_ADDR_OWVAR 65
27255: PUSH
27256: LD_INT 4
27258: ST_TO_ADDR
// end ;
27259: PPOPN 1
27261: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27262: LD_EXP 54
27266: PUSH
27267: LD_EXP 81
27271: AND
27272: IFFALSE 27418
27274: GO 27276
27276: DISABLE
27277: LD_INT 0
27279: PPUSH
27280: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27281: LD_ADDR_VAR 0 1
27285: PUSH
27286: LD_INT 22
27288: PUSH
27289: LD_OWVAR 2
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 30
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 30
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 69
27334: ST_TO_ADDR
// if not depot then
27335: LD_VAR 0 1
27339: NOT
27340: IFFALSE 27344
// exit ;
27342: GO 27418
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27344: LD_ADDR_VAR 0 2
27348: PUSH
27349: LD_VAR 0 1
27353: PUSH
27354: LD_INT 1
27356: PPUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 12
27366: ARRAY
27367: PPUSH
27368: CALL_OW 274
27372: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_INT 1
27380: PPUSH
27381: LD_INT 0
27383: PPUSH
27384: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27388: LD_VAR 0 2
27392: PPUSH
27393: LD_INT 2
27395: PPUSH
27396: LD_INT 0
27398: PPUSH
27399: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_INT 3
27410: PPUSH
27411: LD_INT 0
27413: PPUSH
27414: CALL_OW 277
// end ;
27418: PPOPN 2
27420: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27421: LD_EXP 54
27425: PUSH
27426: LD_EXP 82
27430: AND
27431: IFFALSE 27528
27433: GO 27435
27435: DISABLE
27436: LD_INT 0
27438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27439: LD_ADDR_VAR 0 1
27443: PUSH
27444: LD_INT 22
27446: PUSH
27447: LD_OWVAR 2
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 21
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 3
27468: PUSH
27469: LD_INT 23
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL_OW 69
27492: ST_TO_ADDR
// if not tmp then
27493: LD_VAR 0 1
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27528
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27502: LD_VAR 0 1
27506: PUSH
27507: LD_INT 1
27509: PPUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 12
27519: ARRAY
27520: PPUSH
27521: LD_INT 200
27523: PPUSH
27524: CALL_OW 234
// end ;
27528: PPOPN 1
27530: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27531: LD_EXP 54
27535: PUSH
27536: LD_EXP 83
27540: AND
27541: IFFALSE 27620
27543: GO 27545
27545: DISABLE
27546: LD_INT 0
27548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27549: LD_ADDR_VAR 0 1
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_OWVAR 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 21
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PPUSH
27580: CALL_OW 69
27584: ST_TO_ADDR
// if not tmp then
27585: LD_VAR 0 1
27589: NOT
27590: IFFALSE 27594
// exit ;
27592: GO 27620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27594: LD_VAR 0 1
27598: PUSH
27599: LD_INT 1
27601: PPUSH
27602: LD_VAR 0 1
27606: PPUSH
27607: CALL_OW 12
27611: ARRAY
27612: PPUSH
27613: LD_INT 60
27615: PPUSH
27616: CALL_OW 234
// end ;
27620: PPOPN 1
27622: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27623: LD_EXP 54
27627: PUSH
27628: LD_EXP 84
27632: AND
27633: IFFALSE 27732
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
// begin enable ;
27642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27643: LD_ADDR_VAR 0 1
27647: PUSH
27648: LD_INT 22
27650: PUSH
27651: LD_OWVAR 2
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 61
27662: PUSH
27663: EMPTY
27664: LIST
27665: PUSH
27666: LD_INT 33
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: PPUSH
27681: CALL_OW 69
27685: ST_TO_ADDR
// if not tmp then
27686: LD_VAR 0 1
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 27732
// for i in tmp do
27695: LD_ADDR_VAR 0 2
27699: PUSH
27700: LD_VAR 0 1
27704: PUSH
27705: FOR_IN
27706: IFFALSE 27730
// if IsControledBy ( i ) then
27708: LD_VAR 0 2
27712: PPUSH
27713: CALL_OW 312
27717: IFFALSE 27728
// ComUnlink ( i ) ;
27719: LD_VAR 0 2
27723: PPUSH
27724: CALL_OW 136
27728: GO 27705
27730: POP
27731: POP
// end ;
27732: PPOPN 2
27734: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27735: LD_EXP 54
27739: PUSH
27740: LD_EXP 85
27744: AND
27745: IFFALSE 27885
27747: GO 27749
27749: DISABLE
27750: LD_INT 0
27752: PPUSH
27753: PPUSH
// begin ToLua ( displayPowell(); ) ;
27754: LD_STRING displayPowell();
27756: PPUSH
27757: CALL_OW 559
// uc_side := 0 ;
27761: LD_ADDR_OWVAR 20
27765: PUSH
27766: LD_INT 0
27768: ST_TO_ADDR
// uc_nation := 2 ;
27769: LD_ADDR_OWVAR 21
27773: PUSH
27774: LD_INT 2
27776: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27777: LD_ADDR_OWVAR 37
27781: PUSH
27782: LD_INT 14
27784: ST_TO_ADDR
// vc_engine := engine_siberite ;
27785: LD_ADDR_OWVAR 39
27789: PUSH
27790: LD_INT 3
27792: ST_TO_ADDR
// vc_control := control_apeman ;
27793: LD_ADDR_OWVAR 38
27797: PUSH
27798: LD_INT 5
27800: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27801: LD_ADDR_OWVAR 40
27805: PUSH
27806: LD_INT 29
27808: ST_TO_ADDR
// un := CreateVehicle ;
27809: LD_ADDR_VAR 0 2
27813: PUSH
27814: CALL_OW 45
27818: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27819: LD_VAR 0 2
27823: PPUSH
27824: LD_INT 1
27826: PPUSH
27827: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27831: LD_INT 35
27833: PPUSH
27834: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27838: LD_VAR 0 2
27842: PPUSH
27843: LD_INT 22
27845: PUSH
27846: LD_OWVAR 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PPUSH
27855: CALL_OW 69
27859: PPUSH
27860: LD_VAR 0 2
27864: PPUSH
27865: CALL_OW 74
27869: PPUSH
27870: CALL_OW 115
// until IsDead ( un ) ;
27874: LD_VAR 0 2
27878: PPUSH
27879: CALL_OW 301
27883: IFFALSE 27831
// end ;
27885: PPOPN 2
27887: END
// every 0 0$1 trigger StreamModeActive and sStu do
27888: LD_EXP 54
27892: PUSH
27893: LD_EXP 93
27897: AND
27898: IFFALSE 27914
27900: GO 27902
27902: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27903: LD_STRING displayStucuk();
27905: PPUSH
27906: CALL_OW 559
// ResetFog ;
27910: CALL_OW 335
// end ;
27914: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27915: LD_EXP 54
27919: PUSH
27920: LD_EXP 86
27924: AND
27925: IFFALSE 28066
27927: GO 27929
27929: DISABLE
27930: LD_INT 0
27932: PPUSH
27933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27934: LD_ADDR_VAR 0 2
27938: PUSH
27939: LD_INT 22
27941: PUSH
27942: LD_OWVAR 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 21
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PPUSH
27965: CALL_OW 69
27969: ST_TO_ADDR
// if not tmp then
27970: LD_VAR 0 2
27974: NOT
27975: IFFALSE 27979
// exit ;
27977: GO 28066
// un := tmp [ rand ( 1 , tmp ) ] ;
27979: LD_ADDR_VAR 0 1
27983: PUSH
27984: LD_VAR 0 2
27988: PUSH
27989: LD_INT 1
27991: PPUSH
27992: LD_VAR 0 2
27996: PPUSH
27997: CALL_OW 12
28001: ARRAY
28002: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28003: LD_VAR 0 1
28007: PPUSH
28008: LD_INT 0
28010: PPUSH
28011: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28015: LD_VAR 0 1
28019: PPUSH
28020: LD_OWVAR 3
28024: PUSH
28025: LD_VAR 0 1
28029: DIFF
28030: PPUSH
28031: LD_VAR 0 1
28035: PPUSH
28036: CALL_OW 74
28040: PPUSH
28041: CALL_OW 115
// wait ( 0 0$20 ) ;
28045: LD_INT 700
28047: PPUSH
28048: CALL_OW 67
// SetSide ( un , your_side ) ;
28052: LD_VAR 0 1
28056: PPUSH
28057: LD_OWVAR 2
28061: PPUSH
28062: CALL_OW 235
// end ;
28066: PPOPN 2
28068: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28069: LD_EXP 54
28073: PUSH
28074: LD_EXP 87
28078: AND
28079: IFFALSE 28185
28081: GO 28083
28083: DISABLE
28084: LD_INT 0
28086: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28087: LD_ADDR_VAR 0 1
28091: PUSH
28092: LD_INT 22
28094: PUSH
28095: LD_OWVAR 2
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: LD_INT 30
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 30
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PPUSH
28136: CALL_OW 69
28140: ST_TO_ADDR
// if not depot then
28141: LD_VAR 0 1
28145: NOT
28146: IFFALSE 28150
// exit ;
28148: GO 28185
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28150: LD_VAR 0 1
28154: PUSH
28155: LD_INT 1
28157: ARRAY
28158: PPUSH
28159: CALL_OW 250
28163: PPUSH
28164: LD_VAR 0 1
28168: PUSH
28169: LD_INT 1
28171: ARRAY
28172: PPUSH
28173: CALL_OW 251
28177: PPUSH
28178: LD_INT 70
28180: PPUSH
28181: CALL_OW 495
// end ;
28185: PPOPN 1
28187: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28188: LD_EXP 54
28192: PUSH
28193: LD_EXP 88
28197: AND
28198: IFFALSE 28409
28200: GO 28202
28202: DISABLE
28203: LD_INT 0
28205: PPUSH
28206: PPUSH
28207: PPUSH
28208: PPUSH
28209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28210: LD_ADDR_VAR 0 5
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 21
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PPUSH
28241: CALL_OW 69
28245: ST_TO_ADDR
// if not tmp then
28246: LD_VAR 0 5
28250: NOT
28251: IFFALSE 28255
// exit ;
28253: GO 28409
// for i in tmp do
28255: LD_ADDR_VAR 0 1
28259: PUSH
28260: LD_VAR 0 5
28264: PUSH
28265: FOR_IN
28266: IFFALSE 28407
// begin d := rand ( 0 , 5 ) ;
28268: LD_ADDR_VAR 0 4
28272: PUSH
28273: LD_INT 0
28275: PPUSH
28276: LD_INT 5
28278: PPUSH
28279: CALL_OW 12
28283: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 250
28298: PPUSH
28299: LD_VAR 0 4
28303: PPUSH
28304: LD_INT 3
28306: PPUSH
28307: LD_INT 12
28309: PPUSH
28310: CALL_OW 12
28314: PPUSH
28315: CALL_OW 272
28319: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28320: LD_ADDR_VAR 0 3
28324: PUSH
28325: LD_VAR 0 1
28329: PPUSH
28330: CALL_OW 251
28334: PPUSH
28335: LD_VAR 0 4
28339: PPUSH
28340: LD_INT 3
28342: PPUSH
28343: LD_INT 12
28345: PPUSH
28346: CALL_OW 12
28350: PPUSH
28351: CALL_OW 273
28355: ST_TO_ADDR
// if ValidHex ( x , y ) then
28356: LD_VAR 0 2
28360: PPUSH
28361: LD_VAR 0 3
28365: PPUSH
28366: CALL_OW 488
28370: IFFALSE 28405
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28372: LD_VAR 0 1
28376: PPUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_VAR 0 3
28386: PPUSH
28387: LD_INT 3
28389: PPUSH
28390: LD_INT 6
28392: PPUSH
28393: CALL_OW 12
28397: PPUSH
28398: LD_INT 1
28400: PPUSH
28401: CALL_OW 483
// end ;
28405: GO 28265
28407: POP
28408: POP
// end ;
28409: PPOPN 5
28411: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28412: LD_EXP 54
28416: PUSH
28417: LD_EXP 89
28421: AND
28422: IFFALSE 28516
28424: GO 28426
28426: DISABLE
28427: LD_INT 0
28429: PPUSH
28430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28431: LD_ADDR_VAR 0 2
28435: PUSH
28436: LD_INT 22
28438: PUSH
28439: LD_OWVAR 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 32
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 21
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: PPUSH
28473: CALL_OW 69
28477: ST_TO_ADDR
// if not tmp then
28478: LD_VAR 0 2
28482: NOT
28483: IFFALSE 28487
// exit ;
28485: GO 28516
// for i in tmp do
28487: LD_ADDR_VAR 0 1
28491: PUSH
28492: LD_VAR 0 2
28496: PUSH
28497: FOR_IN
28498: IFFALSE 28514
// SetFuel ( i , 0 ) ;
28500: LD_VAR 0 1
28504: PPUSH
28505: LD_INT 0
28507: PPUSH
28508: CALL_OW 240
28512: GO 28497
28514: POP
28515: POP
// end ;
28516: PPOPN 2
28518: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28519: LD_EXP 54
28523: PUSH
28524: LD_EXP 90
28528: AND
28529: IFFALSE 28595
28531: GO 28533
28533: DISABLE
28534: LD_INT 0
28536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28537: LD_ADDR_VAR 0 1
28541: PUSH
28542: LD_INT 22
28544: PUSH
28545: LD_OWVAR 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 30
28556: PUSH
28557: LD_INT 29
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PPUSH
28568: CALL_OW 69
28572: ST_TO_ADDR
// if not tmp then
28573: LD_VAR 0 1
28577: NOT
28578: IFFALSE 28582
// exit ;
28580: GO 28595
// DestroyUnit ( tmp [ 1 ] ) ;
28582: LD_VAR 0 1
28586: PUSH
28587: LD_INT 1
28589: ARRAY
28590: PPUSH
28591: CALL_OW 65
// end ;
28595: PPOPN 1
28597: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28598: LD_EXP 54
28602: PUSH
28603: LD_EXP 92
28607: AND
28608: IFFALSE 28737
28610: GO 28612
28612: DISABLE
28613: LD_INT 0
28615: PPUSH
// begin uc_side := 0 ;
28616: LD_ADDR_OWVAR 20
28620: PUSH
28621: LD_INT 0
28623: ST_TO_ADDR
// uc_nation := nation_arabian ;
28624: LD_ADDR_OWVAR 21
28628: PUSH
28629: LD_INT 2
28631: ST_TO_ADDR
// hc_gallery :=  ;
28632: LD_ADDR_OWVAR 33
28636: PUSH
28637: LD_STRING 
28639: ST_TO_ADDR
// hc_name :=  ;
28640: LD_ADDR_OWVAR 26
28644: PUSH
28645: LD_STRING 
28647: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28648: LD_INT 1
28650: PPUSH
28651: LD_INT 11
28653: PPUSH
28654: LD_INT 10
28656: PPUSH
28657: CALL_OW 380
// un := CreateHuman ;
28661: LD_ADDR_VAR 0 1
28665: PUSH
28666: CALL_OW 44
28670: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28671: LD_VAR 0 1
28675: PPUSH
28676: LD_INT 1
28678: PPUSH
28679: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28683: LD_INT 35
28685: PPUSH
28686: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_INT 22
28697: PUSH
28698: LD_OWVAR 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 69
28711: PPUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 74
28721: PPUSH
28722: CALL_OW 115
// until IsDead ( un ) ;
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 301
28735: IFFALSE 28683
// end ;
28737: PPOPN 1
28739: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28740: LD_EXP 54
28744: PUSH
28745: LD_EXP 94
28749: AND
28750: IFFALSE 28762
28752: GO 28754
28754: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28755: LD_STRING earthquake(getX(game), 0, 32)
28757: PPUSH
28758: CALL_OW 559
28762: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28763: LD_EXP 54
28767: PUSH
28768: LD_EXP 95
28772: AND
28773: IFFALSE 28864
28775: GO 28777
28777: DISABLE
28778: LD_INT 0
28780: PPUSH
// begin enable ;
28781: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28782: LD_ADDR_VAR 0 1
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_OWVAR 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 21
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 33
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: LIST
28823: PPUSH
28824: CALL_OW 69
28828: ST_TO_ADDR
// if not tmp then
28829: LD_VAR 0 1
28833: NOT
28834: IFFALSE 28838
// exit ;
28836: GO 28864
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28838: LD_VAR 0 1
28842: PUSH
28843: LD_INT 1
28845: PPUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL_OW 12
28855: ARRAY
28856: PPUSH
28857: LD_INT 1
28859: PPUSH
28860: CALL_OW 234
// end ;
28864: PPOPN 1
28866: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28867: LD_EXP 54
28871: PUSH
28872: LD_EXP 96
28876: AND
28877: IFFALSE 29018
28879: GO 28881
28881: DISABLE
28882: LD_INT 0
28884: PPUSH
28885: PPUSH
28886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28887: LD_ADDR_VAR 0 3
28891: PUSH
28892: LD_INT 22
28894: PUSH
28895: LD_OWVAR 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 25
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PPUSH
28918: CALL_OW 69
28922: ST_TO_ADDR
// if not tmp then
28923: LD_VAR 0 3
28927: NOT
28928: IFFALSE 28932
// exit ;
28930: GO 29018
// un := tmp [ rand ( 1 , tmp ) ] ;
28932: LD_ADDR_VAR 0 2
28936: PUSH
28937: LD_VAR 0 3
28941: PUSH
28942: LD_INT 1
28944: PPUSH
28945: LD_VAR 0 3
28949: PPUSH
28950: CALL_OW 12
28954: ARRAY
28955: ST_TO_ADDR
// if Crawls ( un ) then
28956: LD_VAR 0 2
28960: PPUSH
28961: CALL_OW 318
28965: IFFALSE 28976
// ComWalk ( un ) ;
28967: LD_VAR 0 2
28971: PPUSH
28972: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28976: LD_VAR 0 2
28980: PPUSH
28981: LD_INT 9
28983: PPUSH
28984: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28988: LD_INT 28
28990: PPUSH
28991: LD_OWVAR 2
28995: PPUSH
28996: LD_INT 2
28998: PPUSH
28999: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29003: LD_INT 29
29005: PPUSH
29006: LD_OWVAR 2
29010: PPUSH
29011: LD_INT 2
29013: PPUSH
29014: CALL_OW 322
// end ;
29018: PPOPN 3
29020: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29021: LD_EXP 54
29025: PUSH
29026: LD_EXP 97
29030: AND
29031: IFFALSE 29142
29033: GO 29035
29035: DISABLE
29036: LD_INT 0
29038: PPUSH
29039: PPUSH
29040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 25
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// if not tmp then
29077: LD_VAR 0 3
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29142
// un := tmp [ rand ( 1 , tmp ) ] ;
29086: LD_ADDR_VAR 0 2
29090: PUSH
29091: LD_VAR 0 3
29095: PUSH
29096: LD_INT 1
29098: PPUSH
29099: LD_VAR 0 3
29103: PPUSH
29104: CALL_OW 12
29108: ARRAY
29109: ST_TO_ADDR
// if Crawls ( un ) then
29110: LD_VAR 0 2
29114: PPUSH
29115: CALL_OW 318
29119: IFFALSE 29130
// ComWalk ( un ) ;
29121: LD_VAR 0 2
29125: PPUSH
29126: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29130: LD_VAR 0 2
29134: PPUSH
29135: LD_INT 8
29137: PPUSH
29138: CALL_OW 336
// end ;
29142: PPOPN 3
29144: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29145: LD_EXP 54
29149: PUSH
29150: LD_EXP 98
29154: AND
29155: IFFALSE 29299
29157: GO 29159
29159: DISABLE
29160: LD_INT 0
29162: PPUSH
29163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29164: LD_ADDR_VAR 0 2
29168: PUSH
29169: LD_INT 22
29171: PUSH
29172: LD_OWVAR 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 21
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 2
29193: PUSH
29194: LD_INT 34
29196: PUSH
29197: LD_INT 12
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 34
29206: PUSH
29207: LD_INT 51
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 34
29216: PUSH
29217: LD_INT 32
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: PPUSH
29235: CALL_OW 69
29239: ST_TO_ADDR
// if not tmp then
29240: LD_VAR 0 2
29244: NOT
29245: IFFALSE 29249
// exit ;
29247: GO 29299
// for i in tmp do
29249: LD_ADDR_VAR 0 1
29253: PUSH
29254: LD_VAR 0 2
29258: PUSH
29259: FOR_IN
29260: IFFALSE 29297
// if GetCargo ( i , mat_artifact ) = 0 then
29262: LD_VAR 0 1
29266: PPUSH
29267: LD_INT 4
29269: PPUSH
29270: CALL_OW 289
29274: PUSH
29275: LD_INT 0
29277: EQUAL
29278: IFFALSE 29295
// SetCargo ( i , mat_siberit , 100 ) ;
29280: LD_VAR 0 1
29284: PPUSH
29285: LD_INT 3
29287: PPUSH
29288: LD_INT 100
29290: PPUSH
29291: CALL_OW 290
29295: GO 29259
29297: POP
29298: POP
// end ;
29299: PPOPN 2
29301: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29302: LD_EXP 54
29306: PUSH
29307: LD_EXP 99
29311: AND
29312: IFFALSE 29495
29314: GO 29316
29316: DISABLE
29317: LD_INT 0
29319: PPUSH
29320: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: LD_INT 22
29328: PUSH
29329: LD_OWVAR 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: ST_TO_ADDR
// if not tmp then
29343: LD_VAR 0 2
29347: NOT
29348: IFFALSE 29352
// exit ;
29350: GO 29495
// for i := 1 to 2 do
29352: LD_ADDR_VAR 0 1
29356: PUSH
29357: DOUBLE
29358: LD_INT 1
29360: DEC
29361: ST_TO_ADDR
29362: LD_INT 2
29364: PUSH
29365: FOR_TO
29366: IFFALSE 29493
// begin uc_side := your_side ;
29368: LD_ADDR_OWVAR 20
29372: PUSH
29373: LD_OWVAR 2
29377: ST_TO_ADDR
// uc_nation := nation_american ;
29378: LD_ADDR_OWVAR 21
29382: PUSH
29383: LD_INT 1
29385: ST_TO_ADDR
// vc_chassis := us_morphling ;
29386: LD_ADDR_OWVAR 37
29390: PUSH
29391: LD_INT 5
29393: ST_TO_ADDR
// vc_engine := engine_siberite ;
29394: LD_ADDR_OWVAR 39
29398: PUSH
29399: LD_INT 3
29401: ST_TO_ADDR
// vc_control := control_computer ;
29402: LD_ADDR_OWVAR 38
29406: PUSH
29407: LD_INT 3
29409: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29410: LD_ADDR_OWVAR 40
29414: PUSH
29415: LD_INT 10
29417: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29418: LD_VAR 0 2
29422: PUSH
29423: LD_INT 1
29425: ARRAY
29426: PPUSH
29427: CALL_OW 310
29431: NOT
29432: IFFALSE 29479
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29434: CALL_OW 45
29438: PPUSH
29439: LD_VAR 0 2
29443: PUSH
29444: LD_INT 1
29446: ARRAY
29447: PPUSH
29448: CALL_OW 250
29452: PPUSH
29453: LD_VAR 0 2
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: PPUSH
29462: CALL_OW 251
29466: PPUSH
29467: LD_INT 12
29469: PPUSH
29470: LD_INT 1
29472: PPUSH
29473: CALL_OW 50
29477: GO 29491
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29479: CALL_OW 45
29483: PPUSH
29484: LD_INT 1
29486: PPUSH
29487: CALL_OW 51
// end ;
29491: GO 29365
29493: POP
29494: POP
// end ;
29495: PPOPN 2
29497: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29498: LD_EXP 54
29502: PUSH
29503: LD_EXP 100
29507: AND
29508: IFFALSE 29730
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
29516: PPUSH
29517: PPUSH
29518: PPUSH
29519: PPUSH
29520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29521: LD_ADDR_VAR 0 6
29525: PUSH
29526: LD_INT 22
29528: PUSH
29529: LD_OWVAR 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 21
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: LD_INT 23
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: PPUSH
29570: CALL_OW 69
29574: ST_TO_ADDR
// if not tmp then
29575: LD_VAR 0 6
29579: NOT
29580: IFFALSE 29584
// exit ;
29582: GO 29730
// s1 := rand ( 1 , 4 ) ;
29584: LD_ADDR_VAR 0 2
29588: PUSH
29589: LD_INT 1
29591: PPUSH
29592: LD_INT 4
29594: PPUSH
29595: CALL_OW 12
29599: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29600: LD_ADDR_VAR 0 4
29604: PUSH
29605: LD_VAR 0 6
29609: PUSH
29610: LD_INT 1
29612: ARRAY
29613: PPUSH
29614: LD_VAR 0 2
29618: PPUSH
29619: CALL_OW 259
29623: ST_TO_ADDR
// if s1 = 1 then
29624: LD_VAR 0 2
29628: PUSH
29629: LD_INT 1
29631: EQUAL
29632: IFFALSE 29652
// s2 := rand ( 2 , 4 ) else
29634: LD_ADDR_VAR 0 3
29638: PUSH
29639: LD_INT 2
29641: PPUSH
29642: LD_INT 4
29644: PPUSH
29645: CALL_OW 12
29649: ST_TO_ADDR
29650: GO 29660
// s2 := 1 ;
29652: LD_ADDR_VAR 0 3
29656: PUSH
29657: LD_INT 1
29659: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29660: LD_ADDR_VAR 0 5
29664: PUSH
29665: LD_VAR 0 6
29669: PUSH
29670: LD_INT 1
29672: ARRAY
29673: PPUSH
29674: LD_VAR 0 3
29678: PPUSH
29679: CALL_OW 259
29683: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29684: LD_VAR 0 6
29688: PUSH
29689: LD_INT 1
29691: ARRAY
29692: PPUSH
29693: LD_VAR 0 2
29697: PPUSH
29698: LD_VAR 0 5
29702: PPUSH
29703: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29707: LD_VAR 0 6
29711: PUSH
29712: LD_INT 1
29714: ARRAY
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: LD_VAR 0 4
29725: PPUSH
29726: CALL_OW 237
// end ;
29730: PPOPN 6
29732: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29733: LD_EXP 54
29737: PUSH
29738: LD_EXP 101
29742: AND
29743: IFFALSE 29822
29745: GO 29747
29747: DISABLE
29748: LD_INT 0
29750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29751: LD_ADDR_VAR 0 1
29755: PUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 30
29770: PUSH
29771: LD_INT 3
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PPUSH
29782: CALL_OW 69
29786: ST_TO_ADDR
// if not tmp then
29787: LD_VAR 0 1
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 29822
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29796: LD_VAR 0 1
29800: PUSH
29801: LD_INT 1
29803: PPUSH
29804: LD_VAR 0 1
29808: PPUSH
29809: CALL_OW 12
29813: ARRAY
29814: PPUSH
29815: LD_INT 1
29817: PPUSH
29818: CALL_OW 234
// end ;
29822: PPOPN 1
29824: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29825: LD_EXP 54
29829: PUSH
29830: LD_EXP 102
29834: AND
29835: IFFALSE 29947
29837: GO 29839
29839: DISABLE
29840: LD_INT 0
29842: PPUSH
29843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29844: LD_ADDR_VAR 0 2
29848: PUSH
29849: LD_INT 22
29851: PUSH
29852: LD_OWVAR 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 30
29866: PUSH
29867: LD_INT 27
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: LD_INT 26
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 30
29886: PUSH
29887: LD_INT 28
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PPUSH
29904: CALL_OW 69
29908: ST_TO_ADDR
// if not tmp then
29909: LD_VAR 0 2
29913: NOT
29914: IFFALSE 29918
// exit ;
29916: GO 29947
// for i in tmp do
29918: LD_ADDR_VAR 0 1
29922: PUSH
29923: LD_VAR 0 2
29927: PUSH
29928: FOR_IN
29929: IFFALSE 29945
// SetLives ( i , 1 ) ;
29931: LD_VAR 0 1
29935: PPUSH
29936: LD_INT 1
29938: PPUSH
29939: CALL_OW 234
29943: GO 29928
29945: POP
29946: POP
// end ;
29947: PPOPN 2
29949: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29950: LD_EXP 54
29954: PUSH
29955: LD_EXP 103
29959: AND
29960: IFFALSE 30247
29962: GO 29964
29964: DISABLE
29965: LD_INT 0
29967: PPUSH
29968: PPUSH
29969: PPUSH
// begin i := rand ( 1 , 7 ) ;
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: LD_INT 1
29977: PPUSH
29978: LD_INT 7
29980: PPUSH
29981: CALL_OW 12
29985: ST_TO_ADDR
// case i of 1 :
29986: LD_VAR 0 1
29990: PUSH
29991: LD_INT 1
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30009
29999: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30000: LD_STRING earthquake(getX(game), 0, 32)
30002: PPUSH
30003: CALL_OW 559
30007: GO 30247
30009: LD_INT 2
30011: DOUBLE
30012: EQUAL
30013: IFTRUE 30017
30015: GO 30031
30017: POP
// begin ToLua ( displayStucuk(); ) ;
30018: LD_STRING displayStucuk();
30020: PPUSH
30021: CALL_OW 559
// ResetFog ;
30025: CALL_OW 335
// end ; 3 :
30029: GO 30247
30031: LD_INT 3
30033: DOUBLE
30034: EQUAL
30035: IFTRUE 30039
30037: GO 30143
30039: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30040: LD_ADDR_VAR 0 2
30044: PUSH
30045: LD_INT 22
30047: PUSH
30048: LD_OWVAR 2
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 25
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PPUSH
30071: CALL_OW 69
30075: ST_TO_ADDR
// if not tmp then
30076: LD_VAR 0 2
30080: NOT
30081: IFFALSE 30085
// exit ;
30083: GO 30247
// un := tmp [ rand ( 1 , tmp ) ] ;
30085: LD_ADDR_VAR 0 3
30089: PUSH
30090: LD_VAR 0 2
30094: PUSH
30095: LD_INT 1
30097: PPUSH
30098: LD_VAR 0 2
30102: PPUSH
30103: CALL_OW 12
30107: ARRAY
30108: ST_TO_ADDR
// if Crawls ( un ) then
30109: LD_VAR 0 3
30113: PPUSH
30114: CALL_OW 318
30118: IFFALSE 30129
// ComWalk ( un ) ;
30120: LD_VAR 0 3
30124: PPUSH
30125: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30129: LD_VAR 0 3
30133: PPUSH
30134: LD_INT 8
30136: PPUSH
30137: CALL_OW 336
// end ; 4 :
30141: GO 30247
30143: LD_INT 4
30145: DOUBLE
30146: EQUAL
30147: IFTRUE 30151
30149: GO 30225
30151: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30152: LD_ADDR_VAR 0 2
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 29
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 69
30187: ST_TO_ADDR
// if not tmp then
30188: LD_VAR 0 2
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30247
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30197: LD_VAR 0 2
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30210: LD_VAR 0 2
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: PPUSH
30219: CALL_OW 65
// end ; 5 .. 7 :
30223: GO 30247
30225: LD_INT 5
30227: DOUBLE
30228: GREATEREQUAL
30229: IFFALSE 30237
30231: LD_INT 7
30233: DOUBLE
30234: LESSEQUAL
30235: IFTRUE 30239
30237: GO 30246
30239: POP
// StreamSibBomb ; end ;
30240: CALL 26484 0 0
30244: GO 30247
30246: POP
// end ;
30247: PPOPN 3
30249: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30250: LD_EXP 54
30254: PUSH
30255: LD_EXP 104
30259: AND
30260: IFFALSE 30416
30262: GO 30264
30264: DISABLE
30265: LD_INT 0
30267: PPUSH
30268: PPUSH
30269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30270: LD_ADDR_VAR 0 2
30274: PUSH
30275: LD_INT 81
30277: PUSH
30278: LD_OWVAR 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: PUSH
30290: LD_INT 21
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 21
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: CALL_OW 69
30323: ST_TO_ADDR
// if not tmp then
30324: LD_VAR 0 2
30328: NOT
30329: IFFALSE 30333
// exit ;
30331: GO 30416
// p := 0 ;
30333: LD_ADDR_VAR 0 3
30337: PUSH
30338: LD_INT 0
30340: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30341: LD_INT 35
30343: PPUSH
30344: CALL_OW 67
// p := p + 1 ;
30348: LD_ADDR_VAR 0 3
30352: PUSH
30353: LD_VAR 0 3
30357: PUSH
30358: LD_INT 1
30360: PLUS
30361: ST_TO_ADDR
// for i in tmp do
30362: LD_ADDR_VAR 0 1
30366: PUSH
30367: LD_VAR 0 2
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30404
// if GetLives ( i ) < 1000 then
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 256
30384: PUSH
30385: LD_INT 1000
30387: LESS
30388: IFFALSE 30402
// SetLives ( i , 1000 ) ;
30390: LD_VAR 0 1
30394: PPUSH
30395: LD_INT 1000
30397: PPUSH
30398: CALL_OW 234
30402: GO 30372
30404: POP
30405: POP
// until p > 20 ;
30406: LD_VAR 0 3
30410: PUSH
30411: LD_INT 20
30413: GREATER
30414: IFFALSE 30341
// end ;
30416: PPOPN 3
30418: END
// every 0 0$1 trigger StreamModeActive and sTime do
30419: LD_EXP 54
30423: PUSH
30424: LD_EXP 105
30428: AND
30429: IFFALSE 30464
30431: GO 30433
30433: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30434: LD_INT 28
30436: PPUSH
30437: LD_OWVAR 2
30441: PPUSH
30442: LD_INT 2
30444: PPUSH
30445: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30449: LD_INT 30
30451: PPUSH
30452: LD_OWVAR 2
30456: PPUSH
30457: LD_INT 2
30459: PPUSH
30460: CALL_OW 322
// end ;
30464: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30465: LD_EXP 54
30469: PUSH
30470: LD_EXP 106
30474: AND
30475: IFFALSE 30596
30477: GO 30479
30479: DISABLE
30480: LD_INT 0
30482: PPUSH
30483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30484: LD_ADDR_VAR 0 2
30488: PUSH
30489: LD_INT 22
30491: PUSH
30492: LD_OWVAR 2
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 21
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: LD_INT 23
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: LIST
30532: PPUSH
30533: CALL_OW 69
30537: ST_TO_ADDR
// if not tmp then
30538: LD_VAR 0 2
30542: NOT
30543: IFFALSE 30547
// exit ;
30545: GO 30596
// for i in tmp do
30547: LD_ADDR_VAR 0 1
30551: PUSH
30552: LD_VAR 0 2
30556: PUSH
30557: FOR_IN
30558: IFFALSE 30594
// begin if Crawls ( i ) then
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL_OW 318
30569: IFFALSE 30580
// ComWalk ( i ) ;
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 138
// SetClass ( i , 2 ) ;
30580: LD_VAR 0 1
30584: PPUSH
30585: LD_INT 2
30587: PPUSH
30588: CALL_OW 336
// end ;
30592: GO 30557
30594: POP
30595: POP
// end ;
30596: PPOPN 2
30598: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30599: LD_EXP 54
30603: PUSH
30604: LD_EXP 107
30608: AND
30609: IFFALSE 30897
30611: GO 30613
30613: DISABLE
30614: LD_INT 0
30616: PPUSH
30617: PPUSH
30618: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30619: LD_OWVAR 2
30623: PPUSH
30624: LD_INT 9
30626: PPUSH
30627: LD_INT 1
30629: PPUSH
30630: LD_INT 1
30632: PPUSH
30633: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30637: LD_INT 9
30639: PPUSH
30640: LD_OWVAR 2
30644: PPUSH
30645: CALL_OW 343
// uc_side := 9 ;
30649: LD_ADDR_OWVAR 20
30653: PUSH
30654: LD_INT 9
30656: ST_TO_ADDR
// uc_nation := 2 ;
30657: LD_ADDR_OWVAR 21
30661: PUSH
30662: LD_INT 2
30664: ST_TO_ADDR
// hc_name := Dark Warrior ;
30665: LD_ADDR_OWVAR 26
30669: PUSH
30670: LD_STRING Dark Warrior
30672: ST_TO_ADDR
// hc_gallery :=  ;
30673: LD_ADDR_OWVAR 33
30677: PUSH
30678: LD_STRING 
30680: ST_TO_ADDR
// hc_noskilllimit := true ;
30681: LD_ADDR_OWVAR 76
30685: PUSH
30686: LD_INT 1
30688: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30689: LD_ADDR_OWVAR 31
30693: PUSH
30694: LD_INT 30
30696: PUSH
30697: LD_INT 30
30699: PUSH
30700: LD_INT 30
30702: PUSH
30703: LD_INT 30
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: ST_TO_ADDR
// un := CreateHuman ;
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: CALL_OW 44
30721: ST_TO_ADDR
// hc_noskilllimit := false ;
30722: LD_ADDR_OWVAR 76
30726: PUSH
30727: LD_INT 0
30729: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30730: LD_VAR 0 3
30734: PPUSH
30735: LD_INT 1
30737: PPUSH
30738: CALL_OW 51
// ToLua ( playRanger() ) ;
30742: LD_STRING playRanger()
30744: PPUSH
30745: CALL_OW 559
// p := 0 ;
30749: LD_ADDR_VAR 0 2
30753: PUSH
30754: LD_INT 0
30756: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30757: LD_INT 35
30759: PPUSH
30760: CALL_OW 67
// p := p + 1 ;
30764: LD_ADDR_VAR 0 2
30768: PUSH
30769: LD_VAR 0 2
30773: PUSH
30774: LD_INT 1
30776: PLUS
30777: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30778: LD_VAR 0 3
30782: PPUSH
30783: CALL_OW 256
30787: PUSH
30788: LD_INT 1000
30790: LESS
30791: IFFALSE 30805
// SetLives ( un , 1000 ) ;
30793: LD_VAR 0 3
30797: PPUSH
30798: LD_INT 1000
30800: PPUSH
30801: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30805: LD_VAR 0 3
30809: PPUSH
30810: LD_INT 81
30812: PUSH
30813: LD_OWVAR 2
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 91
30824: PUSH
30825: LD_VAR 0 3
30829: PUSH
30830: LD_INT 30
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: PPUSH
30847: LD_VAR 0 3
30851: PPUSH
30852: CALL_OW 74
30856: PPUSH
30857: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 80
30868: GREATER
30869: PUSH
30870: LD_VAR 0 3
30874: PPUSH
30875: CALL_OW 301
30879: OR
30880: IFFALSE 30757
// if un then
30882: LD_VAR 0 3
30886: IFFALSE 30897
// RemoveUnit ( un ) ;
30888: LD_VAR 0 3
30892: PPUSH
30893: CALL_OW 64
// end ;
30897: PPOPN 3
30899: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30900: LD_EXP 108
30904: IFFALSE 31020
30906: GO 30908
30908: DISABLE
30909: LD_INT 0
30911: PPUSH
30912: PPUSH
30913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30914: LD_ADDR_VAR 0 2
30918: PUSH
30919: LD_INT 81
30921: PUSH
30922: LD_OWVAR 2
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PPUSH
30945: CALL_OW 69
30949: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30950: LD_STRING playComputer()
30952: PPUSH
30953: CALL_OW 559
// if not tmp then
30957: LD_VAR 0 2
30961: NOT
30962: IFFALSE 30966
// exit ;
30964: GO 31020
// for i in tmp do
30966: LD_ADDR_VAR 0 1
30970: PUSH
30971: LD_VAR 0 2
30975: PUSH
30976: FOR_IN
30977: IFFALSE 31018
// for j := 1 to 4 do
30979: LD_ADDR_VAR 0 3
30983: PUSH
30984: DOUBLE
30985: LD_INT 1
30987: DEC
30988: ST_TO_ADDR
30989: LD_INT 4
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31014
// SetSkill ( i , j , 10 ) ;
30995: LD_VAR 0 1
30999: PPUSH
31000: LD_VAR 0 3
31004: PPUSH
31005: LD_INT 10
31007: PPUSH
31008: CALL_OW 237
31012: GO 30992
31014: POP
31015: POP
31016: GO 30976
31018: POP
31019: POP
// end ;
31020: PPOPN 3
31022: END
// every 0 0$1 trigger s30 do var i , tmp ;
31023: LD_EXP 109
31027: IFFALSE 31096
31029: GO 31031
31031: DISABLE
31032: LD_INT 0
31034: PPUSH
31035: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31036: LD_ADDR_VAR 0 2
31040: PUSH
31041: LD_INT 22
31043: PUSH
31044: LD_OWVAR 2
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PPUSH
31053: CALL_OW 69
31057: ST_TO_ADDR
// if not tmp then
31058: LD_VAR 0 2
31062: NOT
31063: IFFALSE 31067
// exit ;
31065: GO 31096
// for i in tmp do
31067: LD_ADDR_VAR 0 1
31071: PUSH
31072: LD_VAR 0 2
31076: PUSH
31077: FOR_IN
31078: IFFALSE 31094
// SetLives ( i , 300 ) ;
31080: LD_VAR 0 1
31084: PPUSH
31085: LD_INT 300
31087: PPUSH
31088: CALL_OW 234
31092: GO 31077
31094: POP
31095: POP
// end ;
31096: PPOPN 2
31098: END
// every 0 0$1 trigger s60 do var i , tmp ;
31099: LD_EXP 110
31103: IFFALSE 31172
31105: GO 31107
31107: DISABLE
31108: LD_INT 0
31110: PPUSH
31111: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31112: LD_ADDR_VAR 0 2
31116: PUSH
31117: LD_INT 22
31119: PUSH
31120: LD_OWVAR 2
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PPUSH
31129: CALL_OW 69
31133: ST_TO_ADDR
// if not tmp then
31134: LD_VAR 0 2
31138: NOT
31139: IFFALSE 31143
// exit ;
31141: GO 31172
// for i in tmp do
31143: LD_ADDR_VAR 0 1
31147: PUSH
31148: LD_VAR 0 2
31152: PUSH
31153: FOR_IN
31154: IFFALSE 31170
// SetLives ( i , 600 ) ;
31156: LD_VAR 0 1
31160: PPUSH
31161: LD_INT 600
31163: PPUSH
31164: CALL_OW 234
31168: GO 31153
31170: POP
31171: POP
// end ;
31172: PPOPN 2
31174: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31175: LD_INT 0
31177: PPUSH
// case cmd of 301 :
31178: LD_VAR 0 1
31182: PUSH
31183: LD_INT 301
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31223
31191: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31192: LD_VAR 0 6
31196: PPUSH
31197: LD_VAR 0 7
31201: PPUSH
31202: LD_VAR 0 8
31206: PPUSH
31207: LD_VAR 0 4
31211: PPUSH
31212: LD_VAR 0 5
31216: PPUSH
31217: CALL 32424 0 5
31221: GO 31344
31223: LD_INT 302
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31268
31231: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31232: LD_VAR 0 6
31236: PPUSH
31237: LD_VAR 0 7
31241: PPUSH
31242: LD_VAR 0 8
31246: PPUSH
31247: LD_VAR 0 9
31251: PPUSH
31252: LD_VAR 0 4
31256: PPUSH
31257: LD_VAR 0 5
31261: PPUSH
31262: CALL 32515 0 6
31266: GO 31344
31268: LD_INT 303
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31313
31276: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31277: LD_VAR 0 6
31281: PPUSH
31282: LD_VAR 0 7
31286: PPUSH
31287: LD_VAR 0 8
31291: PPUSH
31292: LD_VAR 0 9
31296: PPUSH
31297: LD_VAR 0 4
31301: PPUSH
31302: LD_VAR 0 5
31306: PPUSH
31307: CALL 31349 0 6
31311: GO 31344
31313: LD_INT 304
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31343
31321: POP
// hHackTeleport ( unit , x , y ) ; end ;
31322: LD_VAR 0 2
31326: PPUSH
31327: LD_VAR 0 4
31331: PPUSH
31332: LD_VAR 0 5
31336: PPUSH
31337: CALL 33108 0 3
31341: GO 31344
31343: POP
// end ;
31344: LD_VAR 0 12
31348: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31349: LD_INT 0
31351: PPUSH
31352: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31353: LD_VAR 0 1
31357: PUSH
31358: LD_INT 1
31360: LESS
31361: PUSH
31362: LD_VAR 0 1
31366: PUSH
31367: LD_INT 3
31369: GREATER
31370: OR
31371: PUSH
31372: LD_VAR 0 5
31376: PPUSH
31377: LD_VAR 0 6
31381: PPUSH
31382: CALL_OW 428
31386: OR
31387: IFFALSE 31391
// exit ;
31389: GO 32111
// uc_side := your_side ;
31391: LD_ADDR_OWVAR 20
31395: PUSH
31396: LD_OWVAR 2
31400: ST_TO_ADDR
// uc_nation := nation ;
31401: LD_ADDR_OWVAR 21
31405: PUSH
31406: LD_VAR 0 1
31410: ST_TO_ADDR
// bc_level = 1 ;
31411: LD_ADDR_OWVAR 43
31415: PUSH
31416: LD_INT 1
31418: ST_TO_ADDR
// case btype of 1 :
31419: LD_VAR 0 2
31423: PUSH
31424: LD_INT 1
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31443
31432: POP
// bc_type := b_depot ; 2 :
31433: LD_ADDR_OWVAR 42
31437: PUSH
31438: LD_INT 0
31440: ST_TO_ADDR
31441: GO 32055
31443: LD_INT 2
31445: DOUBLE
31446: EQUAL
31447: IFTRUE 31451
31449: GO 31462
31451: POP
// bc_type := b_warehouse ; 3 :
31452: LD_ADDR_OWVAR 42
31456: PUSH
31457: LD_INT 1
31459: ST_TO_ADDR
31460: GO 32055
31462: LD_INT 3
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31481
31470: POP
// bc_type := b_lab ; 4 .. 9 :
31471: LD_ADDR_OWVAR 42
31475: PUSH
31476: LD_INT 6
31478: ST_TO_ADDR
31479: GO 32055
31481: LD_INT 4
31483: DOUBLE
31484: GREATEREQUAL
31485: IFFALSE 31493
31487: LD_INT 9
31489: DOUBLE
31490: LESSEQUAL
31491: IFTRUE 31495
31493: GO 31547
31495: POP
// begin bc_type := b_lab_half ;
31496: LD_ADDR_OWVAR 42
31500: PUSH
31501: LD_INT 7
31503: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31504: LD_ADDR_OWVAR 44
31508: PUSH
31509: LD_INT 10
31511: PUSH
31512: LD_INT 11
31514: PUSH
31515: LD_INT 12
31517: PUSH
31518: LD_INT 15
31520: PUSH
31521: LD_INT 14
31523: PUSH
31524: LD_INT 13
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: PUSH
31535: LD_VAR 0 2
31539: PUSH
31540: LD_INT 3
31542: MINUS
31543: ARRAY
31544: ST_TO_ADDR
// end ; 10 .. 13 :
31545: GO 32055
31547: LD_INT 10
31549: DOUBLE
31550: GREATEREQUAL
31551: IFFALSE 31559
31553: LD_INT 13
31555: DOUBLE
31556: LESSEQUAL
31557: IFTRUE 31561
31559: GO 31638
31561: POP
// begin bc_type := b_lab_full ;
31562: LD_ADDR_OWVAR 42
31566: PUSH
31567: LD_INT 8
31569: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31570: LD_ADDR_OWVAR 44
31574: PUSH
31575: LD_INT 10
31577: PUSH
31578: LD_INT 12
31580: PUSH
31581: LD_INT 14
31583: PUSH
31584: LD_INT 13
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: PUSH
31593: LD_VAR 0 2
31597: PUSH
31598: LD_INT 9
31600: MINUS
31601: ARRAY
31602: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31603: LD_ADDR_OWVAR 45
31607: PUSH
31608: LD_INT 11
31610: PUSH
31611: LD_INT 15
31613: PUSH
31614: LD_INT 12
31616: PUSH
31617: LD_INT 15
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: PUSH
31626: LD_VAR 0 2
31630: PUSH
31631: LD_INT 9
31633: MINUS
31634: ARRAY
31635: ST_TO_ADDR
// end ; 14 :
31636: GO 32055
31638: LD_INT 14
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31657
31646: POP
// bc_type := b_workshop ; 15 :
31647: LD_ADDR_OWVAR 42
31651: PUSH
31652: LD_INT 2
31654: ST_TO_ADDR
31655: GO 32055
31657: LD_INT 15
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 31676
31665: POP
// bc_type := b_factory ; 16 :
31666: LD_ADDR_OWVAR 42
31670: PUSH
31671: LD_INT 3
31673: ST_TO_ADDR
31674: GO 32055
31676: LD_INT 16
31678: DOUBLE
31679: EQUAL
31680: IFTRUE 31684
31682: GO 31695
31684: POP
// bc_type := b_ext_gun ; 17 :
31685: LD_ADDR_OWVAR 42
31689: PUSH
31690: LD_INT 17
31692: ST_TO_ADDR
31693: GO 32055
31695: LD_INT 17
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 31731
31703: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31704: LD_ADDR_OWVAR 42
31708: PUSH
31709: LD_INT 19
31711: PUSH
31712: LD_INT 23
31714: PUSH
31715: LD_INT 19
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: PUSH
31723: LD_VAR 0 1
31727: ARRAY
31728: ST_TO_ADDR
31729: GO 32055
31731: LD_INT 18
31733: DOUBLE
31734: EQUAL
31735: IFTRUE 31739
31737: GO 31750
31739: POP
// bc_type := b_ext_radar ; 19 :
31740: LD_ADDR_OWVAR 42
31744: PUSH
31745: LD_INT 20
31747: ST_TO_ADDR
31748: GO 32055
31750: LD_INT 19
31752: DOUBLE
31753: EQUAL
31754: IFTRUE 31758
31756: GO 31769
31758: POP
// bc_type := b_ext_radio ; 20 :
31759: LD_ADDR_OWVAR 42
31763: PUSH
31764: LD_INT 22
31766: ST_TO_ADDR
31767: GO 32055
31769: LD_INT 20
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31788
31777: POP
// bc_type := b_ext_siberium ; 21 :
31778: LD_ADDR_OWVAR 42
31782: PUSH
31783: LD_INT 21
31785: ST_TO_ADDR
31786: GO 32055
31788: LD_INT 21
31790: DOUBLE
31791: EQUAL
31792: IFTRUE 31796
31794: GO 31807
31796: POP
// bc_type := b_ext_computer ; 22 :
31797: LD_ADDR_OWVAR 42
31801: PUSH
31802: LD_INT 24
31804: ST_TO_ADDR
31805: GO 32055
31807: LD_INT 22
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31826
31815: POP
// bc_type := b_ext_track ; 23 :
31816: LD_ADDR_OWVAR 42
31820: PUSH
31821: LD_INT 16
31823: ST_TO_ADDR
31824: GO 32055
31826: LD_INT 23
31828: DOUBLE
31829: EQUAL
31830: IFTRUE 31834
31832: GO 31845
31834: POP
// bc_type := b_ext_laser ; 24 :
31835: LD_ADDR_OWVAR 42
31839: PUSH
31840: LD_INT 25
31842: ST_TO_ADDR
31843: GO 32055
31845: LD_INT 24
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 31864
31853: POP
// bc_type := b_control_tower ; 25 :
31854: LD_ADDR_OWVAR 42
31858: PUSH
31859: LD_INT 36
31861: ST_TO_ADDR
31862: GO 32055
31864: LD_INT 25
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 31883
31872: POP
// bc_type := b_breastwork ; 26 :
31873: LD_ADDR_OWVAR 42
31877: PUSH
31878: LD_INT 31
31880: ST_TO_ADDR
31881: GO 32055
31883: LD_INT 26
31885: DOUBLE
31886: EQUAL
31887: IFTRUE 31891
31889: GO 31902
31891: POP
// bc_type := b_bunker ; 27 :
31892: LD_ADDR_OWVAR 42
31896: PUSH
31897: LD_INT 32
31899: ST_TO_ADDR
31900: GO 32055
31902: LD_INT 27
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// bc_type := b_turret ; 28 :
31911: LD_ADDR_OWVAR 42
31915: PUSH
31916: LD_INT 33
31918: ST_TO_ADDR
31919: GO 32055
31921: LD_INT 28
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31940
31929: POP
// bc_type := b_armoury ; 29 :
31930: LD_ADDR_OWVAR 42
31934: PUSH
31935: LD_INT 4
31937: ST_TO_ADDR
31938: GO 32055
31940: LD_INT 29
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31959
31948: POP
// bc_type := b_barracks ; 30 :
31949: LD_ADDR_OWVAR 42
31953: PUSH
31954: LD_INT 5
31956: ST_TO_ADDR
31957: GO 32055
31959: LD_INT 30
31961: DOUBLE
31962: EQUAL
31963: IFTRUE 31967
31965: GO 31978
31967: POP
// bc_type := b_solar_power ; 31 :
31968: LD_ADDR_OWVAR 42
31972: PUSH
31973: LD_INT 27
31975: ST_TO_ADDR
31976: GO 32055
31978: LD_INT 31
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 31997
31986: POP
// bc_type := b_oil_power ; 32 :
31987: LD_ADDR_OWVAR 42
31991: PUSH
31992: LD_INT 26
31994: ST_TO_ADDR
31995: GO 32055
31997: LD_INT 32
31999: DOUBLE
32000: EQUAL
32001: IFTRUE 32005
32003: GO 32016
32005: POP
// bc_type := b_siberite_power ; 33 :
32006: LD_ADDR_OWVAR 42
32010: PUSH
32011: LD_INT 28
32013: ST_TO_ADDR
32014: GO 32055
32016: LD_INT 33
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 32035
32024: POP
// bc_type := b_oil_mine ; 34 :
32025: LD_ADDR_OWVAR 42
32029: PUSH
32030: LD_INT 29
32032: ST_TO_ADDR
32033: GO 32055
32035: LD_INT 34
32037: DOUBLE
32038: EQUAL
32039: IFTRUE 32043
32041: GO 32054
32043: POP
// bc_type := b_siberite_mine ; end ;
32044: LD_ADDR_OWVAR 42
32048: PUSH
32049: LD_INT 30
32051: ST_TO_ADDR
32052: GO 32055
32054: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32055: LD_ADDR_VAR 0 8
32059: PUSH
32060: LD_VAR 0 5
32064: PPUSH
32065: LD_VAR 0 6
32069: PPUSH
32070: LD_VAR 0 3
32074: PPUSH
32075: CALL_OW 47
32079: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32080: LD_OWVAR 42
32084: PUSH
32085: LD_INT 32
32087: PUSH
32088: LD_INT 33
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: IN
32095: IFFALSE 32111
// PlaceWeaponTurret ( b , weapon ) ;
32097: LD_VAR 0 8
32101: PPUSH
32102: LD_VAR 0 4
32106: PPUSH
32107: CALL_OW 431
// end ;
32111: LD_VAR 0 7
32115: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32116: LD_INT 0
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32122: LD_ADDR_VAR 0 4
32126: PUSH
32127: LD_INT 22
32129: PUSH
32130: LD_OWVAR 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: LD_INT 30
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 30
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 69
32175: ST_TO_ADDR
// if not tmp then
32176: LD_VAR 0 4
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32244
// for i in tmp do
32185: LD_ADDR_VAR 0 2
32189: PUSH
32190: LD_VAR 0 4
32194: PUSH
32195: FOR_IN
32196: IFFALSE 32242
// for j = 1 to 3 do
32198: LD_ADDR_VAR 0 3
32202: PUSH
32203: DOUBLE
32204: LD_INT 1
32206: DEC
32207: ST_TO_ADDR
32208: LD_INT 3
32210: PUSH
32211: FOR_TO
32212: IFFALSE 32238
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32214: LD_VAR 0 2
32218: PPUSH
32219: CALL_OW 274
32223: PPUSH
32224: LD_VAR 0 3
32228: PPUSH
32229: LD_INT 99999
32231: PPUSH
32232: CALL_OW 277
32236: GO 32211
32238: POP
32239: POP
32240: GO 32195
32242: POP
32243: POP
// end ;
32244: LD_VAR 0 1
32248: RET
// export function hHackSetLevel10 ; var i , j ; begin
32249: LD_INT 0
32251: PPUSH
32252: PPUSH
32253: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32254: LD_ADDR_VAR 0 2
32258: PUSH
32259: LD_INT 21
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PPUSH
32269: CALL_OW 69
32273: PUSH
32274: FOR_IN
32275: IFFALSE 32327
// if IsSelected ( i ) then
32277: LD_VAR 0 2
32281: PPUSH
32282: CALL_OW 306
32286: IFFALSE 32325
// begin for j := 1 to 4 do
32288: LD_ADDR_VAR 0 3
32292: PUSH
32293: DOUBLE
32294: LD_INT 1
32296: DEC
32297: ST_TO_ADDR
32298: LD_INT 4
32300: PUSH
32301: FOR_TO
32302: IFFALSE 32323
// SetSkill ( i , j , 10 ) ;
32304: LD_VAR 0 2
32308: PPUSH
32309: LD_VAR 0 3
32313: PPUSH
32314: LD_INT 10
32316: PPUSH
32317: CALL_OW 237
32321: GO 32301
32323: POP
32324: POP
// end ;
32325: GO 32274
32327: POP
32328: POP
// end ;
32329: LD_VAR 0 1
32333: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32334: LD_INT 0
32336: PPUSH
32337: PPUSH
32338: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32339: LD_ADDR_VAR 0 2
32343: PUSH
32344: LD_INT 22
32346: PUSH
32347: LD_OWVAR 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 21
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PPUSH
32370: CALL_OW 69
32374: PUSH
32375: FOR_IN
32376: IFFALSE 32417
// begin for j := 1 to 4 do
32378: LD_ADDR_VAR 0 3
32382: PUSH
32383: DOUBLE
32384: LD_INT 1
32386: DEC
32387: ST_TO_ADDR
32388: LD_INT 4
32390: PUSH
32391: FOR_TO
32392: IFFALSE 32413
// SetSkill ( i , j , 10 ) ;
32394: LD_VAR 0 2
32398: PPUSH
32399: LD_VAR 0 3
32403: PPUSH
32404: LD_INT 10
32406: PPUSH
32407: CALL_OW 237
32411: GO 32391
32413: POP
32414: POP
// end ;
32415: GO 32375
32417: POP
32418: POP
// end ;
32419: LD_VAR 0 1
32423: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32424: LD_INT 0
32426: PPUSH
// uc_side := your_side ;
32427: LD_ADDR_OWVAR 20
32431: PUSH
32432: LD_OWVAR 2
32436: ST_TO_ADDR
// uc_nation := nation ;
32437: LD_ADDR_OWVAR 21
32441: PUSH
32442: LD_VAR 0 1
32446: ST_TO_ADDR
// InitHc ;
32447: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32451: LD_INT 0
32453: PPUSH
32454: LD_VAR 0 2
32458: PPUSH
32459: LD_VAR 0 3
32463: PPUSH
32464: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32468: LD_VAR 0 4
32472: PPUSH
32473: LD_VAR 0 5
32477: PPUSH
32478: CALL_OW 428
32482: PUSH
32483: LD_INT 0
32485: EQUAL
32486: IFFALSE 32510
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32488: CALL_OW 44
32492: PPUSH
32493: LD_VAR 0 4
32497: PPUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: LD_INT 1
32505: PPUSH
32506: CALL_OW 48
// end ;
32510: LD_VAR 0 6
32514: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
// uc_side := your_side ;
32519: LD_ADDR_OWVAR 20
32523: PUSH
32524: LD_OWVAR 2
32528: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32529: LD_VAR 0 1
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: IN
32556: IFFALSE 32568
// uc_nation := nation_american else
32558: LD_ADDR_OWVAR 21
32562: PUSH
32563: LD_INT 1
32565: ST_TO_ADDR
32566: GO 32611
// if chassis in [ 11 , 12 , 13 , 14 ] then
32568: LD_VAR 0 1
32572: PUSH
32573: LD_INT 11
32575: PUSH
32576: LD_INT 12
32578: PUSH
32579: LD_INT 13
32581: PUSH
32582: LD_INT 14
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: IN
32591: IFFALSE 32603
// uc_nation := nation_arabian else
32593: LD_ADDR_OWVAR 21
32597: PUSH
32598: LD_INT 2
32600: ST_TO_ADDR
32601: GO 32611
// uc_nation := nation_russian ;
32603: LD_ADDR_OWVAR 21
32607: PUSH
32608: LD_INT 3
32610: ST_TO_ADDR
// vc_chassis := chassis ;
32611: LD_ADDR_OWVAR 37
32615: PUSH
32616: LD_VAR 0 1
32620: ST_TO_ADDR
// vc_engine := engine ;
32621: LD_ADDR_OWVAR 39
32625: PUSH
32626: LD_VAR 0 2
32630: ST_TO_ADDR
// vc_control := control ;
32631: LD_ADDR_OWVAR 38
32635: PUSH
32636: LD_VAR 0 3
32640: ST_TO_ADDR
// vc_weapon := weapon ;
32641: LD_ADDR_OWVAR 40
32645: PUSH
32646: LD_VAR 0 4
32650: ST_TO_ADDR
// un := CreateVehicle ;
32651: LD_ADDR_VAR 0 8
32655: PUSH
32656: CALL_OW 45
32660: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32661: LD_VAR 0 8
32665: PPUSH
32666: LD_INT 0
32668: PPUSH
32669: LD_INT 5
32671: PPUSH
32672: CALL_OW 12
32676: PPUSH
32677: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32681: LD_VAR 0 8
32685: PPUSH
32686: LD_VAR 0 5
32690: PPUSH
32691: LD_VAR 0 6
32695: PPUSH
32696: LD_INT 1
32698: PPUSH
32699: CALL_OW 48
// end ;
32703: LD_VAR 0 7
32707: RET
// export hInvincible ; every 1 do
32708: GO 32710
32710: DISABLE
// hInvincible := [ ] ;
32711: LD_ADDR_EXP 111
32715: PUSH
32716: EMPTY
32717: ST_TO_ADDR
32718: END
// every 10 do var i ;
32719: GO 32721
32721: DISABLE
32722: LD_INT 0
32724: PPUSH
// begin enable ;
32725: ENABLE
// if not hInvincible then
32726: LD_EXP 111
32730: NOT
32731: IFFALSE 32735
// exit ;
32733: GO 32779
// for i in hInvincible do
32735: LD_ADDR_VAR 0 1
32739: PUSH
32740: LD_EXP 111
32744: PUSH
32745: FOR_IN
32746: IFFALSE 32777
// if GetLives ( i ) < 1000 then
32748: LD_VAR 0 1
32752: PPUSH
32753: CALL_OW 256
32757: PUSH
32758: LD_INT 1000
32760: LESS
32761: IFFALSE 32775
// SetLives ( i , 1000 ) ;
32763: LD_VAR 0 1
32767: PPUSH
32768: LD_INT 1000
32770: PPUSH
32771: CALL_OW 234
32775: GO 32745
32777: POP
32778: POP
// end ;
32779: PPOPN 1
32781: END
// export function hHackInvincible ; var i ; begin
32782: LD_INT 0
32784: PPUSH
32785: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32786: LD_ADDR_VAR 0 2
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: LD_INT 21
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 21
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: PPUSH
32819: CALL_OW 69
32823: PUSH
32824: FOR_IN
32825: IFFALSE 32886
// if IsSelected ( i ) then
32827: LD_VAR 0 2
32831: PPUSH
32832: CALL_OW 306
32836: IFFALSE 32884
// begin if i in hInvincible then
32838: LD_VAR 0 2
32842: PUSH
32843: LD_EXP 111
32847: IN
32848: IFFALSE 32868
// hInvincible := hInvincible diff i else
32850: LD_ADDR_EXP 111
32854: PUSH
32855: LD_EXP 111
32859: PUSH
32860: LD_VAR 0 2
32864: DIFF
32865: ST_TO_ADDR
32866: GO 32884
// hInvincible := hInvincible union i ;
32868: LD_ADDR_EXP 111
32872: PUSH
32873: LD_EXP 111
32877: PUSH
32878: LD_VAR 0 2
32882: UNION
32883: ST_TO_ADDR
// end ;
32884: GO 32824
32886: POP
32887: POP
// end ;
32888: LD_VAR 0 1
32892: RET
// export function hHackInvisible ; var i , j ; begin
32893: LD_INT 0
32895: PPUSH
32896: PPUSH
32897: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32898: LD_ADDR_VAR 0 2
32902: PUSH
32903: LD_INT 21
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32943
// if IsSelected ( i ) then
32921: LD_VAR 0 2
32925: PPUSH
32926: CALL_OW 306
32930: IFFALSE 32941
// ComForceInvisible ( i ) ;
32932: LD_VAR 0 2
32936: PPUSH
32937: CALL_OW 496
32941: GO 32918
32943: POP
32944: POP
// end ;
32945: LD_VAR 0 1
32949: RET
// export function hHackChangeYourSide ; begin
32950: LD_INT 0
32952: PPUSH
// if your_side = 8 then
32953: LD_OWVAR 2
32957: PUSH
32958: LD_INT 8
32960: EQUAL
32961: IFFALSE 32973
// your_side := 0 else
32963: LD_ADDR_OWVAR 2
32967: PUSH
32968: LD_INT 0
32970: ST_TO_ADDR
32971: GO 32987
// your_side := your_side + 1 ;
32973: LD_ADDR_OWVAR 2
32977: PUSH
32978: LD_OWVAR 2
32982: PUSH
32983: LD_INT 1
32985: PLUS
32986: ST_TO_ADDR
// end ;
32987: LD_VAR 0 1
32991: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32992: LD_INT 0
32994: PPUSH
32995: PPUSH
32996: PPUSH
// for i in all_units do
32997: LD_ADDR_VAR 0 2
33001: PUSH
33002: LD_OWVAR 3
33006: PUSH
33007: FOR_IN
33008: IFFALSE 33086
// if IsSelected ( i ) then
33010: LD_VAR 0 2
33014: PPUSH
33015: CALL_OW 306
33019: IFFALSE 33084
// begin j := GetSide ( i ) ;
33021: LD_ADDR_VAR 0 3
33025: PUSH
33026: LD_VAR 0 2
33030: PPUSH
33031: CALL_OW 255
33035: ST_TO_ADDR
// if j = 8 then
33036: LD_VAR 0 3
33040: PUSH
33041: LD_INT 8
33043: EQUAL
33044: IFFALSE 33056
// j := 0 else
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: LD_INT 0
33053: ST_TO_ADDR
33054: GO 33070
// j := j + 1 ;
33056: LD_ADDR_VAR 0 3
33060: PUSH
33061: LD_VAR 0 3
33065: PUSH
33066: LD_INT 1
33068: PLUS
33069: ST_TO_ADDR
// SetSide ( i , j ) ;
33070: LD_VAR 0 2
33074: PPUSH
33075: LD_VAR 0 3
33079: PPUSH
33080: CALL_OW 235
// end ;
33084: GO 33007
33086: POP
33087: POP
// end ;
33088: LD_VAR 0 1
33092: RET
// export function hHackFog ; begin
33093: LD_INT 0
33095: PPUSH
// FogOff ( true ) ;
33096: LD_INT 1
33098: PPUSH
33099: CALL_OW 344
// end ;
33103: LD_VAR 0 1
33107: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33108: LD_INT 0
33110: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33111: LD_VAR 0 1
33115: PPUSH
33116: LD_VAR 0 2
33120: PPUSH
33121: LD_VAR 0 3
33125: PPUSH
33126: LD_INT 1
33128: PPUSH
33129: LD_INT 1
33131: PPUSH
33132: CALL_OW 483
// CenterOnXY ( x , y ) ;
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_VAR 0 3
33145: PPUSH
33146: CALL_OW 84
// end ;
33150: LD_VAR 0 4
33154: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33155: LD_INT 0
33157: PPUSH
33158: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33159: LD_VAR 0 1
33163: NOT
33164: PUSH
33165: LD_VAR 0 2
33169: PPUSH
33170: LD_VAR 0 3
33174: PPUSH
33175: CALL_OW 488
33179: NOT
33180: OR
33181: PUSH
33182: LD_VAR 0 1
33186: PPUSH
33187: CALL_OW 266
33191: PUSH
33192: LD_INT 3
33194: NONEQUAL
33195: PUSH
33196: LD_VAR 0 1
33200: PPUSH
33201: CALL_OW 247
33205: PUSH
33206: LD_INT 1
33208: EQUAL
33209: NOT
33210: AND
33211: OR
33212: IFFALSE 33216
// exit ;
33214: GO 33365
// if GetType ( factory ) = unit_human then
33216: LD_VAR 0 1
33220: PPUSH
33221: CALL_OW 247
33225: PUSH
33226: LD_INT 1
33228: EQUAL
33229: IFFALSE 33246
// factory := IsInUnit ( factory ) ;
33231: LD_ADDR_VAR 0 1
33235: PUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 310
33245: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33246: LD_VAR 0 1
33250: PPUSH
33251: CALL_OW 266
33255: PUSH
33256: LD_INT 3
33258: NONEQUAL
33259: IFFALSE 33263
// exit ;
33261: GO 33365
// if HexInfo ( x , y ) = factory then
33263: LD_VAR 0 2
33267: PPUSH
33268: LD_VAR 0 3
33272: PPUSH
33273: CALL_OW 428
33277: PUSH
33278: LD_VAR 0 1
33282: EQUAL
33283: IFFALSE 33310
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33285: LD_ADDR_EXP 112
33289: PUSH
33290: LD_EXP 112
33294: PPUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: LD_INT 0
33302: PPUSH
33303: CALL_OW 1
33307: ST_TO_ADDR
33308: GO 33361
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33310: LD_ADDR_EXP 112
33314: PUSH
33315: LD_EXP 112
33319: PPUSH
33320: LD_VAR 0 1
33324: PPUSH
33325: LD_VAR 0 1
33329: PPUSH
33330: CALL_OW 255
33334: PUSH
33335: LD_VAR 0 1
33339: PUSH
33340: LD_VAR 0 2
33344: PUSH
33345: LD_VAR 0 3
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: PPUSH
33356: CALL_OW 1
33360: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33361: CALL 33370 0 0
// end ;
33365: LD_VAR 0 4
33369: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33370: LD_INT 0
33372: PPUSH
33373: PPUSH
33374: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33375: LD_STRING resetFactoryWaypoint();
33377: PPUSH
33378: CALL_OW 559
// if factoryWaypoints then
33382: LD_EXP 112
33386: IFFALSE 33512
// begin list := PrepareArray ( factoryWaypoints ) ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_EXP 112
33397: PPUSH
33398: CALL 75673 0 1
33402: ST_TO_ADDR
// for i := 1 to list do
33403: LD_ADDR_VAR 0 2
33407: PUSH
33408: DOUBLE
33409: LD_INT 1
33411: DEC
33412: ST_TO_ADDR
33413: LD_VAR 0 3
33417: PUSH
33418: FOR_TO
33419: IFFALSE 33510
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33421: LD_STRING setFactoryWaypointXY(
33423: PUSH
33424: LD_VAR 0 3
33428: PUSH
33429: LD_VAR 0 2
33433: ARRAY
33434: PUSH
33435: LD_INT 1
33437: ARRAY
33438: STR
33439: PUSH
33440: LD_STRING ,
33442: STR
33443: PUSH
33444: LD_VAR 0 3
33448: PUSH
33449: LD_VAR 0 2
33453: ARRAY
33454: PUSH
33455: LD_INT 2
33457: ARRAY
33458: STR
33459: PUSH
33460: LD_STRING ,
33462: STR
33463: PUSH
33464: LD_VAR 0 3
33468: PUSH
33469: LD_VAR 0 2
33473: ARRAY
33474: PUSH
33475: LD_INT 3
33477: ARRAY
33478: STR
33479: PUSH
33480: LD_STRING ,
33482: STR
33483: PUSH
33484: LD_VAR 0 3
33488: PUSH
33489: LD_VAR 0 2
33493: ARRAY
33494: PUSH
33495: LD_INT 4
33497: ARRAY
33498: STR
33499: PUSH
33500: LD_STRING )
33502: STR
33503: PPUSH
33504: CALL_OW 559
33508: GO 33418
33510: POP
33511: POP
// end ; end ;
33512: LD_VAR 0 1
33516: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33517: LD_INT 0
33519: PPUSH
// if HexInfo ( x , y ) = warehouse then
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_VAR 0 3
33529: PPUSH
33530: CALL_OW 428
33534: PUSH
33535: LD_VAR 0 1
33539: EQUAL
33540: IFFALSE 33567
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33542: LD_ADDR_EXP 113
33546: PUSH
33547: LD_EXP 113
33551: PPUSH
33552: LD_VAR 0 1
33556: PPUSH
33557: LD_INT 0
33559: PPUSH
33560: CALL_OW 1
33564: ST_TO_ADDR
33565: GO 33618
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33567: LD_ADDR_EXP 113
33571: PUSH
33572: LD_EXP 113
33576: PPUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 255
33591: PUSH
33592: LD_VAR 0 1
33596: PUSH
33597: LD_VAR 0 2
33601: PUSH
33602: LD_VAR 0 3
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: PPUSH
33613: CALL_OW 1
33617: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33618: CALL 33627 0 0
// end ;
33622: LD_VAR 0 4
33626: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33632: LD_STRING resetWarehouseGatheringPoints();
33634: PPUSH
33635: CALL_OW 559
// if warehouseGatheringPoints then
33639: LD_EXP 113
33643: IFFALSE 33769
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_EXP 113
33654: PPUSH
33655: CALL 75673 0 1
33659: ST_TO_ADDR
// for i := 1 to list do
33660: LD_ADDR_VAR 0 2
33664: PUSH
33665: DOUBLE
33666: LD_INT 1
33668: DEC
33669: ST_TO_ADDR
33670: LD_VAR 0 3
33674: PUSH
33675: FOR_TO
33676: IFFALSE 33767
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33678: LD_STRING setWarehouseGatheringPointXY(
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_VAR 0 2
33690: ARRAY
33691: PUSH
33692: LD_INT 1
33694: ARRAY
33695: STR
33696: PUSH
33697: LD_STRING ,
33699: STR
33700: PUSH
33701: LD_VAR 0 3
33705: PUSH
33706: LD_VAR 0 2
33710: ARRAY
33711: PUSH
33712: LD_INT 2
33714: ARRAY
33715: STR
33716: PUSH
33717: LD_STRING ,
33719: STR
33720: PUSH
33721: LD_VAR 0 3
33725: PUSH
33726: LD_VAR 0 2
33730: ARRAY
33731: PUSH
33732: LD_INT 3
33734: ARRAY
33735: STR
33736: PUSH
33737: LD_STRING ,
33739: STR
33740: PUSH
33741: LD_VAR 0 3
33745: PUSH
33746: LD_VAR 0 2
33750: ARRAY
33751: PUSH
33752: LD_INT 4
33754: ARRAY
33755: STR
33756: PUSH
33757: LD_STRING )
33759: STR
33760: PPUSH
33761: CALL_OW 559
33765: GO 33675
33767: POP
33768: POP
// end ; end ;
33769: LD_VAR 0 1
33773: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33774: LD_EXP 113
33778: IFFALSE 34463
33780: GO 33782
33782: DISABLE
33783: LD_INT 0
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
// begin enable ;
33794: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33795: LD_ADDR_VAR 0 3
33799: PUSH
33800: LD_EXP 113
33804: PPUSH
33805: CALL 75673 0 1
33809: ST_TO_ADDR
// if not list then
33810: LD_VAR 0 3
33814: NOT
33815: IFFALSE 33819
// exit ;
33817: GO 34463
// for i := 1 to list do
33819: LD_ADDR_VAR 0 1
33823: PUSH
33824: DOUBLE
33825: LD_INT 1
33827: DEC
33828: ST_TO_ADDR
33829: LD_VAR 0 3
33833: PUSH
33834: FOR_TO
33835: IFFALSE 34461
// begin depot := list [ i ] [ 2 ] ;
33837: LD_ADDR_VAR 0 8
33841: PUSH
33842: LD_VAR 0 3
33846: PUSH
33847: LD_VAR 0 1
33851: ARRAY
33852: PUSH
33853: LD_INT 2
33855: ARRAY
33856: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33857: LD_ADDR_VAR 0 5
33861: PUSH
33862: LD_VAR 0 3
33866: PUSH
33867: LD_VAR 0 1
33871: ARRAY
33872: PUSH
33873: LD_INT 1
33875: ARRAY
33876: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33877: LD_VAR 0 8
33881: PPUSH
33882: CALL_OW 301
33886: PUSH
33887: LD_VAR 0 5
33891: PUSH
33892: LD_VAR 0 8
33896: PPUSH
33897: CALL_OW 255
33901: NONEQUAL
33902: OR
33903: IFFALSE 33932
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33905: LD_ADDR_EXP 113
33909: PUSH
33910: LD_EXP 113
33914: PPUSH
33915: LD_VAR 0 8
33919: PPUSH
33920: LD_INT 0
33922: PPUSH
33923: CALL_OW 1
33927: ST_TO_ADDR
// exit ;
33928: POP
33929: POP
33930: GO 34463
// end ; x := list [ i ] [ 3 ] ;
33932: LD_ADDR_VAR 0 6
33936: PUSH
33937: LD_VAR 0 3
33941: PUSH
33942: LD_VAR 0 1
33946: ARRAY
33947: PUSH
33948: LD_INT 3
33950: ARRAY
33951: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33952: LD_ADDR_VAR 0 7
33956: PUSH
33957: LD_VAR 0 3
33961: PUSH
33962: LD_VAR 0 1
33966: ARRAY
33967: PUSH
33968: LD_INT 4
33970: ARRAY
33971: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33972: LD_ADDR_VAR 0 9
33976: PUSH
33977: LD_VAR 0 6
33981: PPUSH
33982: LD_VAR 0 7
33986: PPUSH
33987: LD_INT 16
33989: PPUSH
33990: CALL 74261 0 3
33994: ST_TO_ADDR
// if not cratesNearbyPoint then
33995: LD_VAR 0 9
33999: NOT
34000: IFFALSE 34006
// exit ;
34002: POP
34003: POP
34004: GO 34463
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34006: LD_ADDR_VAR 0 4
34010: PUSH
34011: LD_INT 22
34013: PUSH
34014: LD_VAR 0 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: LD_INT 60
34028: PUSH
34029: EMPTY
34030: LIST
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 91
34038: PUSH
34039: LD_VAR 0 8
34043: PUSH
34044: LD_INT 6
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 25
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 25
34067: PUSH
34068: LD_INT 16
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: PPUSH
34086: CALL_OW 69
34090: PUSH
34091: LD_VAR 0 8
34095: PPUSH
34096: CALL_OW 313
34100: PPUSH
34101: LD_INT 3
34103: PUSH
34104: LD_INT 60
34106: PUSH
34107: EMPTY
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: LD_INT 25
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 25
34129: PUSH
34130: LD_INT 16
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: LIST
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PPUSH
34146: CALL_OW 72
34150: UNION
34151: ST_TO_ADDR
// if tmp then
34152: LD_VAR 0 4
34156: IFFALSE 34236
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34158: LD_ADDR_VAR 0 4
34162: PUSH
34163: LD_VAR 0 4
34167: PPUSH
34168: LD_INT 3
34170: PPUSH
34171: CALL 72230 0 2
34175: ST_TO_ADDR
// for j in tmp do
34176: LD_ADDR_VAR 0 2
34180: PUSH
34181: LD_VAR 0 4
34185: PUSH
34186: FOR_IN
34187: IFFALSE 34230
// begin if IsInUnit ( j ) then
34189: LD_VAR 0 2
34193: PPUSH
34194: CALL_OW 310
34198: IFFALSE 34209
// ComExit ( j ) ;
34200: LD_VAR 0 2
34204: PPUSH
34205: CALL 72313 0 1
// AddComCollect ( j , x , y ) ;
34209: LD_VAR 0 2
34213: PPUSH
34214: LD_VAR 0 6
34218: PPUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: CALL_OW 177
// end ;
34228: GO 34186
34230: POP
34231: POP
// exit ;
34232: POP
34233: POP
34234: GO 34463
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34236: LD_ADDR_VAR 0 4
34240: PUSH
34241: LD_INT 22
34243: PUSH
34244: LD_VAR 0 5
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 91
34255: PUSH
34256: LD_VAR 0 8
34260: PUSH
34261: LD_INT 8
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 2
34271: PUSH
34272: LD_INT 34
34274: PUSH
34275: LD_INT 12
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 34
34284: PUSH
34285: LD_INT 51
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 34
34294: PUSH
34295: LD_INT 32
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 34
34304: PUSH
34305: LD_INT 89
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: PPUSH
34324: CALL_OW 69
34328: ST_TO_ADDR
// if tmp then
34329: LD_VAR 0 4
34333: IFFALSE 34459
// begin for j in tmp do
34335: LD_ADDR_VAR 0 2
34339: PUSH
34340: LD_VAR 0 4
34344: PUSH
34345: FOR_IN
34346: IFFALSE 34457
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34348: LD_VAR 0 2
34352: PPUSH
34353: CALL_OW 262
34357: PUSH
34358: LD_INT 3
34360: EQUAL
34361: PUSH
34362: LD_VAR 0 2
34366: PPUSH
34367: CALL_OW 261
34371: PUSH
34372: LD_INT 20
34374: GREATER
34375: OR
34376: PUSH
34377: LD_VAR 0 2
34381: PPUSH
34382: CALL_OW 314
34386: NOT
34387: AND
34388: PUSH
34389: LD_VAR 0 2
34393: PPUSH
34394: CALL_OW 263
34398: PUSH
34399: LD_INT 1
34401: NONEQUAL
34402: PUSH
34403: LD_VAR 0 2
34407: PPUSH
34408: CALL_OW 311
34412: OR
34413: AND
34414: IFFALSE 34455
// begin ComCollect ( j , x , y ) ;
34416: LD_VAR 0 2
34420: PPUSH
34421: LD_VAR 0 6
34425: PPUSH
34426: LD_VAR 0 7
34430: PPUSH
34431: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34435: LD_VAR 0 2
34439: PPUSH
34440: LD_VAR 0 8
34444: PPUSH
34445: CALL_OW 172
// exit ;
34449: POP
34450: POP
34451: POP
34452: POP
34453: GO 34463
// end ;
34455: GO 34345
34457: POP
34458: POP
// end ; end ;
34459: GO 33834
34461: POP
34462: POP
// end ; end_of_file end_of_file
34463: PPOPN 9
34465: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34466: LD_INT 0
34468: PPUSH
34469: PPUSH
// if exist_mode then
34470: LD_VAR 0 2
34474: IFFALSE 34499
// unit := CreateCharacter ( prefix & ident ) else
34476: LD_ADDR_VAR 0 5
34480: PUSH
34481: LD_VAR 0 3
34485: PUSH
34486: LD_VAR 0 1
34490: STR
34491: PPUSH
34492: CALL_OW 34
34496: ST_TO_ADDR
34497: GO 34514
// unit := NewCharacter ( ident ) ;
34499: LD_ADDR_VAR 0 5
34503: PUSH
34504: LD_VAR 0 1
34508: PPUSH
34509: CALL_OW 25
34513: ST_TO_ADDR
// result := unit ;
34514: LD_ADDR_VAR 0 4
34518: PUSH
34519: LD_VAR 0 5
34523: ST_TO_ADDR
// end ;
34524: LD_VAR 0 4
34528: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
// if not side or not nation then
34533: LD_VAR 0 1
34537: NOT
34538: PUSH
34539: LD_VAR 0 2
34543: NOT
34544: OR
34545: IFFALSE 34549
// exit ;
34547: GO 35317
// case nation of nation_american :
34549: LD_VAR 0 2
34553: PUSH
34554: LD_INT 1
34556: DOUBLE
34557: EQUAL
34558: IFTRUE 34562
34560: GO 34776
34562: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34563: LD_ADDR_VAR 0 4
34567: PUSH
34568: LD_INT 35
34570: PUSH
34571: LD_INT 45
34573: PUSH
34574: LD_INT 46
34576: PUSH
34577: LD_INT 47
34579: PUSH
34580: LD_INT 82
34582: PUSH
34583: LD_INT 83
34585: PUSH
34586: LD_INT 84
34588: PUSH
34589: LD_INT 85
34591: PUSH
34592: LD_INT 86
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 6
34603: PUSH
34604: LD_INT 15
34606: PUSH
34607: LD_INT 16
34609: PUSH
34610: LD_INT 7
34612: PUSH
34613: LD_INT 12
34615: PUSH
34616: LD_INT 13
34618: PUSH
34619: LD_INT 10
34621: PUSH
34622: LD_INT 14
34624: PUSH
34625: LD_INT 20
34627: PUSH
34628: LD_INT 21
34630: PUSH
34631: LD_INT 22
34633: PUSH
34634: LD_INT 25
34636: PUSH
34637: LD_INT 32
34639: PUSH
34640: LD_INT 27
34642: PUSH
34643: LD_INT 36
34645: PUSH
34646: LD_INT 69
34648: PUSH
34649: LD_INT 39
34651: PUSH
34652: LD_INT 34
34654: PUSH
34655: LD_INT 40
34657: PUSH
34658: LD_INT 48
34660: PUSH
34661: LD_INT 49
34663: PUSH
34664: LD_INT 50
34666: PUSH
34667: LD_INT 51
34669: PUSH
34670: LD_INT 52
34672: PUSH
34673: LD_INT 53
34675: PUSH
34676: LD_INT 54
34678: PUSH
34679: LD_INT 55
34681: PUSH
34682: LD_INT 56
34684: PUSH
34685: LD_INT 57
34687: PUSH
34688: LD_INT 58
34690: PUSH
34691: LD_INT 59
34693: PUSH
34694: LD_INT 60
34696: PUSH
34697: LD_INT 61
34699: PUSH
34700: LD_INT 62
34702: PUSH
34703: LD_INT 80
34705: PUSH
34706: LD_INT 82
34708: PUSH
34709: LD_INT 83
34711: PUSH
34712: LD_INT 84
34714: PUSH
34715: LD_INT 85
34717: PUSH
34718: LD_INT 86
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: ST_TO_ADDR
34774: GO 35241
34776: LD_INT 2
34778: DOUBLE
34779: EQUAL
34780: IFTRUE 34784
34782: GO 35010
34784: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34785: LD_ADDR_VAR 0 4
34789: PUSH
34790: LD_INT 35
34792: PUSH
34793: LD_INT 45
34795: PUSH
34796: LD_INT 46
34798: PUSH
34799: LD_INT 47
34801: PUSH
34802: LD_INT 82
34804: PUSH
34805: LD_INT 83
34807: PUSH
34808: LD_INT 84
34810: PUSH
34811: LD_INT 85
34813: PUSH
34814: LD_INT 87
34816: PUSH
34817: LD_INT 70
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 11
34825: PUSH
34826: LD_INT 3
34828: PUSH
34829: LD_INT 4
34831: PUSH
34832: LD_INT 5
34834: PUSH
34835: LD_INT 6
34837: PUSH
34838: LD_INT 15
34840: PUSH
34841: LD_INT 18
34843: PUSH
34844: LD_INT 7
34846: PUSH
34847: LD_INT 17
34849: PUSH
34850: LD_INT 8
34852: PUSH
34853: LD_INT 20
34855: PUSH
34856: LD_INT 21
34858: PUSH
34859: LD_INT 22
34861: PUSH
34862: LD_INT 72
34864: PUSH
34865: LD_INT 26
34867: PUSH
34868: LD_INT 69
34870: PUSH
34871: LD_INT 39
34873: PUSH
34874: LD_INT 40
34876: PUSH
34877: LD_INT 41
34879: PUSH
34880: LD_INT 42
34882: PUSH
34883: LD_INT 43
34885: PUSH
34886: LD_INT 48
34888: PUSH
34889: LD_INT 49
34891: PUSH
34892: LD_INT 50
34894: PUSH
34895: LD_INT 51
34897: PUSH
34898: LD_INT 52
34900: PUSH
34901: LD_INT 53
34903: PUSH
34904: LD_INT 54
34906: PUSH
34907: LD_INT 55
34909: PUSH
34910: LD_INT 56
34912: PUSH
34913: LD_INT 60
34915: PUSH
34916: LD_INT 61
34918: PUSH
34919: LD_INT 62
34921: PUSH
34922: LD_INT 66
34924: PUSH
34925: LD_INT 67
34927: PUSH
34928: LD_INT 68
34930: PUSH
34931: LD_INT 81
34933: PUSH
34934: LD_INT 82
34936: PUSH
34937: LD_INT 83
34939: PUSH
34940: LD_INT 84
34942: PUSH
34943: LD_INT 85
34945: PUSH
34946: LD_INT 87
34948: PUSH
34949: LD_INT 88
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
35008: GO 35241
35010: LD_INT 3
35012: DOUBLE
35013: EQUAL
35014: IFTRUE 35018
35016: GO 35240
35018: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35019: LD_ADDR_VAR 0 4
35023: PUSH
35024: LD_INT 46
35026: PUSH
35027: LD_INT 47
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 82
35038: PUSH
35039: LD_INT 83
35041: PUSH
35042: LD_INT 84
35044: PUSH
35045: LD_INT 85
35047: PUSH
35048: LD_INT 86
35050: PUSH
35051: LD_INT 11
35053: PUSH
35054: LD_INT 9
35056: PUSH
35057: LD_INT 20
35059: PUSH
35060: LD_INT 19
35062: PUSH
35063: LD_INT 21
35065: PUSH
35066: LD_INT 24
35068: PUSH
35069: LD_INT 22
35071: PUSH
35072: LD_INT 25
35074: PUSH
35075: LD_INT 28
35077: PUSH
35078: LD_INT 29
35080: PUSH
35081: LD_INT 30
35083: PUSH
35084: LD_INT 31
35086: PUSH
35087: LD_INT 37
35089: PUSH
35090: LD_INT 38
35092: PUSH
35093: LD_INT 32
35095: PUSH
35096: LD_INT 27
35098: PUSH
35099: LD_INT 33
35101: PUSH
35102: LD_INT 69
35104: PUSH
35105: LD_INT 39
35107: PUSH
35108: LD_INT 34
35110: PUSH
35111: LD_INT 40
35113: PUSH
35114: LD_INT 71
35116: PUSH
35117: LD_INT 23
35119: PUSH
35120: LD_INT 44
35122: PUSH
35123: LD_INT 48
35125: PUSH
35126: LD_INT 49
35128: PUSH
35129: LD_INT 50
35131: PUSH
35132: LD_INT 51
35134: PUSH
35135: LD_INT 52
35137: PUSH
35138: LD_INT 53
35140: PUSH
35141: LD_INT 54
35143: PUSH
35144: LD_INT 55
35146: PUSH
35147: LD_INT 56
35149: PUSH
35150: LD_INT 57
35152: PUSH
35153: LD_INT 58
35155: PUSH
35156: LD_INT 59
35158: PUSH
35159: LD_INT 63
35161: PUSH
35162: LD_INT 64
35164: PUSH
35165: LD_INT 65
35167: PUSH
35168: LD_INT 82
35170: PUSH
35171: LD_INT 83
35173: PUSH
35174: LD_INT 84
35176: PUSH
35177: LD_INT 85
35179: PUSH
35180: LD_INT 86
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: ST_TO_ADDR
35238: GO 35241
35240: POP
// if state > - 1 and state < 3 then
35241: LD_VAR 0 3
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: GREATER
35250: PUSH
35251: LD_VAR 0 3
35255: PUSH
35256: LD_INT 3
35258: LESS
35259: AND
35260: IFFALSE 35317
// for i in result do
35262: LD_ADDR_VAR 0 5
35266: PUSH
35267: LD_VAR 0 4
35271: PUSH
35272: FOR_IN
35273: IFFALSE 35315
// if GetTech ( i , side ) <> state then
35275: LD_VAR 0 5
35279: PPUSH
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 321
35289: PUSH
35290: LD_VAR 0 3
35294: NONEQUAL
35295: IFFALSE 35313
// result := result diff i ;
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: LD_VAR 0 4
35306: PUSH
35307: LD_VAR 0 5
35311: DIFF
35312: ST_TO_ADDR
35313: GO 35272
35315: POP
35316: POP
// end ;
35317: LD_VAR 0 4
35321: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35322: LD_INT 0
35324: PPUSH
35325: PPUSH
35326: PPUSH
// result := true ;
35327: LD_ADDR_VAR 0 3
35331: PUSH
35332: LD_INT 1
35334: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35335: LD_ADDR_VAR 0 5
35339: PUSH
35340: LD_VAR 0 2
35344: PPUSH
35345: CALL_OW 480
35349: ST_TO_ADDR
// if not tmp then
35350: LD_VAR 0 5
35354: NOT
35355: IFFALSE 35359
// exit ;
35357: GO 35408
// for i in tmp do
35359: LD_ADDR_VAR 0 4
35363: PUSH
35364: LD_VAR 0 5
35368: PUSH
35369: FOR_IN
35370: IFFALSE 35406
// if GetTech ( i , side ) <> state_researched then
35372: LD_VAR 0 4
35376: PPUSH
35377: LD_VAR 0 1
35381: PPUSH
35382: CALL_OW 321
35386: PUSH
35387: LD_INT 2
35389: NONEQUAL
35390: IFFALSE 35404
// begin result := false ;
35392: LD_ADDR_VAR 0 3
35396: PUSH
35397: LD_INT 0
35399: ST_TO_ADDR
// exit ;
35400: POP
35401: POP
35402: GO 35408
// end ;
35404: GO 35369
35406: POP
35407: POP
// end ;
35408: LD_VAR 0 3
35412: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35413: LD_INT 0
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
35420: PPUSH
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35428: LD_VAR 0 1
35432: NOT
35433: PUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 257
35443: PUSH
35444: LD_INT 9
35446: NONEQUAL
35447: OR
35448: IFFALSE 35452
// exit ;
35450: GO 36025
// side := GetSide ( unit ) ;
35452: LD_ADDR_VAR 0 9
35456: PUSH
35457: LD_VAR 0 1
35461: PPUSH
35462: CALL_OW 255
35466: ST_TO_ADDR
// tech_space := tech_spacanom ;
35467: LD_ADDR_VAR 0 12
35471: PUSH
35472: LD_INT 29
35474: ST_TO_ADDR
// tech_time := tech_taurad ;
35475: LD_ADDR_VAR 0 13
35479: PUSH
35480: LD_INT 28
35482: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35483: LD_ADDR_VAR 0 11
35487: PUSH
35488: LD_VAR 0 1
35492: PPUSH
35493: CALL_OW 310
35497: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35498: LD_VAR 0 11
35502: PPUSH
35503: CALL_OW 247
35507: PUSH
35508: LD_INT 2
35510: EQUAL
35511: IFFALSE 35515
// exit ;
35513: GO 36025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35515: LD_ADDR_VAR 0 8
35519: PUSH
35520: LD_INT 81
35522: PUSH
35523: LD_VAR 0 9
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 3
35534: PUSH
35535: LD_INT 21
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PPUSH
35553: CALL_OW 69
35557: ST_TO_ADDR
// if not tmp then
35558: LD_VAR 0 8
35562: NOT
35563: IFFALSE 35567
// exit ;
35565: GO 36025
// if in_unit then
35567: LD_VAR 0 11
35571: IFFALSE 35595
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35573: LD_ADDR_VAR 0 10
35577: PUSH
35578: LD_VAR 0 8
35582: PPUSH
35583: LD_VAR 0 11
35587: PPUSH
35588: CALL_OW 74
35592: ST_TO_ADDR
35593: GO 35615
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35595: LD_ADDR_VAR 0 10
35599: PUSH
35600: LD_VAR 0 8
35604: PPUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 74
35614: ST_TO_ADDR
// if not enemy then
35615: LD_VAR 0 10
35619: NOT
35620: IFFALSE 35624
// exit ;
35622: GO 36025
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35624: LD_VAR 0 11
35628: PUSH
35629: LD_VAR 0 11
35633: PPUSH
35634: LD_VAR 0 10
35638: PPUSH
35639: CALL_OW 296
35643: PUSH
35644: LD_INT 13
35646: GREATER
35647: AND
35648: PUSH
35649: LD_VAR 0 1
35653: PPUSH
35654: LD_VAR 0 10
35658: PPUSH
35659: CALL_OW 296
35663: PUSH
35664: LD_INT 12
35666: GREATER
35667: OR
35668: IFFALSE 35672
// exit ;
35670: GO 36025
// missile := [ 1 ] ;
35672: LD_ADDR_VAR 0 14
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35683: LD_VAR 0 9
35687: PPUSH
35688: LD_VAR 0 12
35692: PPUSH
35693: CALL_OW 325
35697: IFFALSE 35726
// missile := Replace ( missile , missile + 1 , 2 ) ;
35699: LD_ADDR_VAR 0 14
35703: PUSH
35704: LD_VAR 0 14
35708: PPUSH
35709: LD_VAR 0 14
35713: PUSH
35714: LD_INT 1
35716: PLUS
35717: PPUSH
35718: LD_INT 2
35720: PPUSH
35721: CALL_OW 1
35725: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35726: LD_VAR 0 9
35730: PPUSH
35731: LD_VAR 0 13
35735: PPUSH
35736: CALL_OW 325
35740: PUSH
35741: LD_VAR 0 10
35745: PPUSH
35746: CALL_OW 255
35750: PPUSH
35751: LD_VAR 0 13
35755: PPUSH
35756: CALL_OW 325
35760: NOT
35761: AND
35762: IFFALSE 35791
// missile := Replace ( missile , missile + 1 , 3 ) ;
35764: LD_ADDR_VAR 0 14
35768: PUSH
35769: LD_VAR 0 14
35773: PPUSH
35774: LD_VAR 0 14
35778: PUSH
35779: LD_INT 1
35781: PLUS
35782: PPUSH
35783: LD_INT 3
35785: PPUSH
35786: CALL_OW 1
35790: ST_TO_ADDR
// if missile < 2 then
35791: LD_VAR 0 14
35795: PUSH
35796: LD_INT 2
35798: LESS
35799: IFFALSE 35803
// exit ;
35801: GO 36025
// x := GetX ( enemy ) ;
35803: LD_ADDR_VAR 0 4
35807: PUSH
35808: LD_VAR 0 10
35812: PPUSH
35813: CALL_OW 250
35817: ST_TO_ADDR
// y := GetY ( enemy ) ;
35818: LD_ADDR_VAR 0 5
35822: PUSH
35823: LD_VAR 0 10
35827: PPUSH
35828: CALL_OW 251
35832: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35833: LD_ADDR_VAR 0 6
35837: PUSH
35838: LD_VAR 0 4
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PPUSH
35847: LD_INT 1
35849: PPUSH
35850: CALL_OW 12
35854: PLUS
35855: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35856: LD_ADDR_VAR 0 7
35860: PUSH
35861: LD_VAR 0 5
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PPUSH
35870: LD_INT 1
35872: PPUSH
35873: CALL_OW 12
35877: PLUS
35878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35879: LD_VAR 0 6
35883: PPUSH
35884: LD_VAR 0 7
35888: PPUSH
35889: CALL_OW 488
35893: NOT
35894: IFFALSE 35916
// begin _x := x ;
35896: LD_ADDR_VAR 0 6
35900: PUSH
35901: LD_VAR 0 4
35905: ST_TO_ADDR
// _y := y ;
35906: LD_ADDR_VAR 0 7
35910: PUSH
35911: LD_VAR 0 5
35915: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_INT 1
35923: PPUSH
35924: LD_VAR 0 14
35928: PPUSH
35929: CALL_OW 12
35933: ST_TO_ADDR
// case i of 1 :
35934: LD_VAR 0 3
35938: PUSH
35939: LD_INT 1
35941: DOUBLE
35942: EQUAL
35943: IFTRUE 35947
35945: GO 35964
35947: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35948: LD_VAR 0 1
35952: PPUSH
35953: LD_VAR 0 10
35957: PPUSH
35958: CALL_OW 115
35962: GO 36025
35964: LD_INT 2
35966: DOUBLE
35967: EQUAL
35968: IFTRUE 35972
35970: GO 35994
35972: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35973: LD_VAR 0 1
35977: PPUSH
35978: LD_VAR 0 6
35982: PPUSH
35983: LD_VAR 0 7
35987: PPUSH
35988: CALL_OW 153
35992: GO 36025
35994: LD_INT 3
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36002
36000: GO 36024
36002: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36003: LD_VAR 0 1
36007: PPUSH
36008: LD_VAR 0 6
36012: PPUSH
36013: LD_VAR 0 7
36017: PPUSH
36018: CALL_OW 154
36022: GO 36025
36024: POP
// end ;
36025: LD_VAR 0 2
36029: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
// if not unit or not building then
36038: LD_VAR 0 1
36042: NOT
36043: PUSH
36044: LD_VAR 0 2
36048: NOT
36049: OR
36050: IFFALSE 36054
// exit ;
36052: GO 36212
// x := GetX ( building ) ;
36054: LD_ADDR_VAR 0 5
36058: PUSH
36059: LD_VAR 0 2
36063: PPUSH
36064: CALL_OW 250
36068: ST_TO_ADDR
// y := GetY ( building ) ;
36069: LD_ADDR_VAR 0 6
36073: PUSH
36074: LD_VAR 0 2
36078: PPUSH
36079: CALL_OW 251
36083: ST_TO_ADDR
// for i = 0 to 5 do
36084: LD_ADDR_VAR 0 4
36088: PUSH
36089: DOUBLE
36090: LD_INT 0
36092: DEC
36093: ST_TO_ADDR
36094: LD_INT 5
36096: PUSH
36097: FOR_TO
36098: IFFALSE 36210
// begin _x := ShiftX ( x , i , 3 ) ;
36100: LD_ADDR_VAR 0 7
36104: PUSH
36105: LD_VAR 0 5
36109: PPUSH
36110: LD_VAR 0 4
36114: PPUSH
36115: LD_INT 3
36117: PPUSH
36118: CALL_OW 272
36122: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36123: LD_ADDR_VAR 0 8
36127: PUSH
36128: LD_VAR 0 6
36132: PPUSH
36133: LD_VAR 0 4
36137: PPUSH
36138: LD_INT 3
36140: PPUSH
36141: CALL_OW 273
36145: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36146: LD_VAR 0 7
36150: PPUSH
36151: LD_VAR 0 8
36155: PPUSH
36156: CALL_OW 488
36160: NOT
36161: IFFALSE 36165
// continue ;
36163: GO 36097
// if HexInfo ( _x , _y ) = 0 then
36165: LD_VAR 0 7
36169: PPUSH
36170: LD_VAR 0 8
36174: PPUSH
36175: CALL_OW 428
36179: PUSH
36180: LD_INT 0
36182: EQUAL
36183: IFFALSE 36208
// begin ComMoveXY ( unit , _x , _y ) ;
36185: LD_VAR 0 1
36189: PPUSH
36190: LD_VAR 0 7
36194: PPUSH
36195: LD_VAR 0 8
36199: PPUSH
36200: CALL_OW 111
// exit ;
36204: POP
36205: POP
36206: GO 36212
// end ; end ;
36208: GO 36097
36210: POP
36211: POP
// end ;
36212: LD_VAR 0 3
36216: RET
// export function ScanBase ( side , base_area ) ; begin
36217: LD_INT 0
36219: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36220: LD_ADDR_VAR 0 3
36224: PUSH
36225: LD_VAR 0 2
36229: PPUSH
36230: LD_INT 81
36232: PUSH
36233: LD_VAR 0 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PPUSH
36242: CALL_OW 70
36246: ST_TO_ADDR
// end ;
36247: LD_VAR 0 3
36251: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36252: LD_INT 0
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
// result := false ;
36258: LD_ADDR_VAR 0 2
36262: PUSH
36263: LD_INT 0
36265: ST_TO_ADDR
// side := GetSide ( unit ) ;
36266: LD_ADDR_VAR 0 3
36270: PUSH
36271: LD_VAR 0 1
36275: PPUSH
36276: CALL_OW 255
36280: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36281: LD_ADDR_VAR 0 4
36285: PUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: CALL_OW 248
36295: ST_TO_ADDR
// case nat of 1 :
36296: LD_VAR 0 4
36300: PUSH
36301: LD_INT 1
36303: DOUBLE
36304: EQUAL
36305: IFTRUE 36309
36307: GO 36320
36309: POP
// tech := tech_lassight ; 2 :
36310: LD_ADDR_VAR 0 5
36314: PUSH
36315: LD_INT 12
36317: ST_TO_ADDR
36318: GO 36359
36320: LD_INT 2
36322: DOUBLE
36323: EQUAL
36324: IFTRUE 36328
36326: GO 36339
36328: POP
// tech := tech_mortar ; 3 :
36329: LD_ADDR_VAR 0 5
36333: PUSH
36334: LD_INT 41
36336: ST_TO_ADDR
36337: GO 36359
36339: LD_INT 3
36341: DOUBLE
36342: EQUAL
36343: IFTRUE 36347
36345: GO 36358
36347: POP
// tech := tech_bazooka ; end ;
36348: LD_ADDR_VAR 0 5
36352: PUSH
36353: LD_INT 44
36355: ST_TO_ADDR
36356: GO 36359
36358: POP
// if Researched ( side , tech ) then
36359: LD_VAR 0 3
36363: PPUSH
36364: LD_VAR 0 5
36368: PPUSH
36369: CALL_OW 325
36373: IFFALSE 36400
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36375: LD_ADDR_VAR 0 2
36379: PUSH
36380: LD_INT 5
36382: PUSH
36383: LD_INT 8
36385: PUSH
36386: LD_INT 9
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: PUSH
36394: LD_VAR 0 4
36398: ARRAY
36399: ST_TO_ADDR
// end ;
36400: LD_VAR 0 2
36404: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36405: LD_INT 0
36407: PPUSH
36408: PPUSH
36409: PPUSH
// if not mines then
36410: LD_VAR 0 2
36414: NOT
36415: IFFALSE 36419
// exit ;
36417: GO 36563
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: LD_INT 81
36426: PUSH
36427: LD_VAR 0 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: LD_INT 21
36441: PUSH
36442: LD_INT 3
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PPUSH
36457: CALL_OW 69
36461: ST_TO_ADDR
// for i in mines do
36462: LD_ADDR_VAR 0 4
36466: PUSH
36467: LD_VAR 0 2
36471: PUSH
36472: FOR_IN
36473: IFFALSE 36561
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36475: LD_VAR 0 4
36479: PUSH
36480: LD_INT 1
36482: ARRAY
36483: PPUSH
36484: LD_VAR 0 4
36488: PUSH
36489: LD_INT 2
36491: ARRAY
36492: PPUSH
36493: CALL_OW 458
36497: NOT
36498: IFFALSE 36502
// continue ;
36500: GO 36472
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36502: LD_VAR 0 4
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: LD_VAR 0 4
36515: PUSH
36516: LD_INT 2
36518: ARRAY
36519: PPUSH
36520: CALL_OW 428
36524: PUSH
36525: LD_VAR 0 5
36529: IN
36530: IFFALSE 36559
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36532: LD_VAR 0 4
36536: PUSH
36537: LD_INT 1
36539: ARRAY
36540: PPUSH
36541: LD_VAR 0 4
36545: PUSH
36546: LD_INT 2
36548: ARRAY
36549: PPUSH
36550: LD_VAR 0 1
36554: PPUSH
36555: CALL_OW 456
// end ;
36559: GO 36472
36561: POP
36562: POP
// end ;
36563: LD_VAR 0 3
36567: RET
// export function Count ( array ) ; var i ; begin
36568: LD_INT 0
36570: PPUSH
36571: PPUSH
// result := 0 ;
36572: LD_ADDR_VAR 0 2
36576: PUSH
36577: LD_INT 0
36579: ST_TO_ADDR
// for i in array do
36580: LD_ADDR_VAR 0 3
36584: PUSH
36585: LD_VAR 0 1
36589: PUSH
36590: FOR_IN
36591: IFFALSE 36615
// if i then
36593: LD_VAR 0 3
36597: IFFALSE 36613
// result := result + 1 ;
36599: LD_ADDR_VAR 0 2
36603: PUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_INT 1
36611: PLUS
36612: ST_TO_ADDR
36613: GO 36590
36615: POP
36616: POP
// end ;
36617: LD_VAR 0 2
36621: RET
// export function IsEmpty ( building ) ; begin
36622: LD_INT 0
36624: PPUSH
// if not building then
36625: LD_VAR 0 1
36629: NOT
36630: IFFALSE 36634
// exit ;
36632: GO 36677
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36634: LD_ADDR_VAR 0 2
36638: PUSH
36639: LD_VAR 0 1
36643: PUSH
36644: LD_INT 22
36646: PUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: CALL_OW 255
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 58
36663: PUSH
36664: EMPTY
36665: LIST
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PPUSH
36671: CALL_OW 69
36675: IN
36676: ST_TO_ADDR
// end ;
36677: LD_VAR 0 2
36681: RET
// export function IsNotFull ( building ) ; var places ; begin
36682: LD_INT 0
36684: PPUSH
36685: PPUSH
// if not building then
36686: LD_VAR 0 1
36690: NOT
36691: IFFALSE 36695
// exit ;
36693: GO 36866
// result := false ;
36695: LD_ADDR_VAR 0 2
36699: PUSH
36700: LD_INT 0
36702: ST_TO_ADDR
// places := 0 ;
36703: LD_ADDR_VAR 0 3
36707: PUSH
36708: LD_INT 0
36710: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 266
36720: PUSH
36721: LD_INT 0
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36783
36727: LD_INT 1
36729: DOUBLE
36730: EQUAL
36731: IFTRUE 36783
36733: LD_INT 6
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36783
36739: LD_INT 7
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36783
36745: LD_INT 8
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36783
36751: LD_INT 4
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36783
36757: LD_INT 5
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36783
36763: LD_INT 2
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36783
36769: LD_INT 3
36771: DOUBLE
36772: EQUAL
36773: IFTRUE 36783
36775: LD_INT 35
36777: DOUBLE
36778: EQUAL
36779: IFTRUE 36783
36781: GO 36794
36783: POP
// places := 6 ; b_bunker , b_breastwork :
36784: LD_ADDR_VAR 0 3
36788: PUSH
36789: LD_INT 6
36791: ST_TO_ADDR
36792: GO 36839
36794: LD_INT 32
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36808
36800: LD_INT 31
36802: DOUBLE
36803: EQUAL
36804: IFTRUE 36808
36806: GO 36819
36808: POP
// places := 1 ; b_control_tower :
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_INT 1
36816: ST_TO_ADDR
36817: GO 36839
36819: LD_INT 36
36821: DOUBLE
36822: EQUAL
36823: IFTRUE 36827
36825: GO 36838
36827: POP
// places := 3 ; end ;
36828: LD_ADDR_VAR 0 3
36832: PUSH
36833: LD_INT 3
36835: ST_TO_ADDR
36836: GO 36839
36838: POP
// if places then
36839: LD_VAR 0 3
36843: IFFALSE 36866
// result := UnitsInside ( building ) < places ;
36845: LD_ADDR_VAR 0 2
36849: PUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: CALL_OW 313
36859: PUSH
36860: LD_VAR 0 3
36864: LESS
36865: ST_TO_ADDR
// end ;
36866: LD_VAR 0 2
36870: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36871: LD_INT 0
36873: PPUSH
36874: PPUSH
36875: PPUSH
36876: PPUSH
// tmp := [ ] ;
36877: LD_ADDR_VAR 0 3
36881: PUSH
36882: EMPTY
36883: ST_TO_ADDR
// list := [ ] ;
36884: LD_ADDR_VAR 0 5
36888: PUSH
36889: EMPTY
36890: ST_TO_ADDR
// for i = 16 to 25 do
36891: LD_ADDR_VAR 0 4
36895: PUSH
36896: DOUBLE
36897: LD_INT 16
36899: DEC
36900: ST_TO_ADDR
36901: LD_INT 25
36903: PUSH
36904: FOR_TO
36905: IFFALSE 36978
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36907: LD_ADDR_VAR 0 3
36911: PUSH
36912: LD_VAR 0 3
36916: PUSH
36917: LD_INT 22
36919: PUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 255
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 91
36936: PUSH
36937: LD_VAR 0 1
36941: PUSH
36942: LD_INT 6
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 30
36952: PUSH
36953: LD_VAR 0 4
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: PPUSH
36970: CALL_OW 69
36974: ADD
36975: ST_TO_ADDR
36976: GO 36904
36978: POP
36979: POP
// for i = 1 to tmp do
36980: LD_ADDR_VAR 0 4
36984: PUSH
36985: DOUBLE
36986: LD_INT 1
36988: DEC
36989: ST_TO_ADDR
36990: LD_VAR 0 3
36994: PUSH
36995: FOR_TO
36996: IFFALSE 37084
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36998: LD_ADDR_VAR 0 5
37002: PUSH
37003: LD_VAR 0 5
37007: PUSH
37008: LD_VAR 0 3
37012: PUSH
37013: LD_VAR 0 4
37017: ARRAY
37018: PPUSH
37019: CALL_OW 266
37023: PUSH
37024: LD_VAR 0 3
37028: PUSH
37029: LD_VAR 0 4
37033: ARRAY
37034: PPUSH
37035: CALL_OW 250
37039: PUSH
37040: LD_VAR 0 3
37044: PUSH
37045: LD_VAR 0 4
37049: ARRAY
37050: PPUSH
37051: CALL_OW 251
37055: PUSH
37056: LD_VAR 0 3
37060: PUSH
37061: LD_VAR 0 4
37065: ARRAY
37066: PPUSH
37067: CALL_OW 254
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: PUSH
37078: EMPTY
37079: LIST
37080: ADD
37081: ST_TO_ADDR
37082: GO 36995
37084: POP
37085: POP
// result := list ;
37086: LD_ADDR_VAR 0 2
37090: PUSH
37091: LD_VAR 0 5
37095: ST_TO_ADDR
// end ;
37096: LD_VAR 0 2
37100: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37101: LD_INT 0
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
// if not factory then
37110: LD_VAR 0 1
37114: NOT
37115: IFFALSE 37119
// exit ;
37117: GO 37712
// if control = control_apeman then
37119: LD_VAR 0 4
37123: PUSH
37124: LD_INT 5
37126: EQUAL
37127: IFFALSE 37236
// begin tmp := UnitsInside ( factory ) ;
37129: LD_ADDR_VAR 0 8
37133: PUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 313
37143: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37144: LD_VAR 0 8
37148: PPUSH
37149: LD_INT 25
37151: PUSH
37152: LD_INT 12
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PPUSH
37159: CALL_OW 72
37163: NOT
37164: IFFALSE 37174
// control := control_manual ;
37166: LD_ADDR_VAR 0 4
37170: PUSH
37171: LD_INT 1
37173: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37174: LD_ADDR_VAR 0 8
37178: PUSH
37179: LD_VAR 0 1
37183: PPUSH
37184: CALL 36871 0 1
37188: ST_TO_ADDR
// if tmp then
37189: LD_VAR 0 8
37193: IFFALSE 37236
// begin for i in tmp do
37195: LD_ADDR_VAR 0 7
37199: PUSH
37200: LD_VAR 0 8
37204: PUSH
37205: FOR_IN
37206: IFFALSE 37234
// if i [ 1 ] = b_ext_radio then
37208: LD_VAR 0 7
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: PUSH
37217: LD_INT 22
37219: EQUAL
37220: IFFALSE 37232
// begin control := control_remote ;
37222: LD_ADDR_VAR 0 4
37226: PUSH
37227: LD_INT 2
37229: ST_TO_ADDR
// break ;
37230: GO 37234
// end ;
37232: GO 37205
37234: POP
37235: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37236: LD_VAR 0 1
37240: PPUSH
37241: LD_VAR 0 2
37245: PPUSH
37246: LD_VAR 0 3
37250: PPUSH
37251: LD_VAR 0 4
37255: PPUSH
37256: LD_VAR 0 5
37260: PPUSH
37261: CALL_OW 448
37265: IFFALSE 37300
// begin result := [ chassis , engine , control , weapon ] ;
37267: LD_ADDR_VAR 0 6
37271: PUSH
37272: LD_VAR 0 2
37276: PUSH
37277: LD_VAR 0 3
37281: PUSH
37282: LD_VAR 0 4
37286: PUSH
37287: LD_VAR 0 5
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// exit ;
37298: GO 37712
// end ; _chassis := AvailableChassisList ( factory ) ;
37300: LD_ADDR_VAR 0 9
37304: PUSH
37305: LD_VAR 0 1
37309: PPUSH
37310: CALL_OW 475
37314: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37315: LD_ADDR_VAR 0 11
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 476
37329: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37330: LD_ADDR_VAR 0 12
37334: PUSH
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 477
37344: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37345: LD_ADDR_VAR 0 10
37349: PUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 478
37359: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37360: LD_VAR 0 9
37364: NOT
37365: PUSH
37366: LD_VAR 0 11
37370: NOT
37371: OR
37372: PUSH
37373: LD_VAR 0 12
37377: NOT
37378: OR
37379: PUSH
37380: LD_VAR 0 10
37384: NOT
37385: OR
37386: IFFALSE 37421
// begin result := [ chassis , engine , control , weapon ] ;
37388: LD_ADDR_VAR 0 6
37392: PUSH
37393: LD_VAR 0 2
37397: PUSH
37398: LD_VAR 0 3
37402: PUSH
37403: LD_VAR 0 4
37407: PUSH
37408: LD_VAR 0 5
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: ST_TO_ADDR
// exit ;
37419: GO 37712
// end ; if not chassis in _chassis then
37421: LD_VAR 0 2
37425: PUSH
37426: LD_VAR 0 9
37430: IN
37431: NOT
37432: IFFALSE 37458
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37434: LD_ADDR_VAR 0 2
37438: PUSH
37439: LD_VAR 0 9
37443: PUSH
37444: LD_INT 1
37446: PPUSH
37447: LD_VAR 0 9
37451: PPUSH
37452: CALL_OW 12
37456: ARRAY
37457: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37458: LD_VAR 0 2
37462: PPUSH
37463: LD_VAR 0 3
37467: PPUSH
37468: CALL 37717 0 2
37472: NOT
37473: IFFALSE 37532
// repeat engine := _engine [ 1 ] ;
37475: LD_ADDR_VAR 0 3
37479: PUSH
37480: LD_VAR 0 11
37484: PUSH
37485: LD_INT 1
37487: ARRAY
37488: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37489: LD_ADDR_VAR 0 11
37493: PUSH
37494: LD_VAR 0 11
37498: PPUSH
37499: LD_INT 1
37501: PPUSH
37502: CALL_OW 3
37506: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37507: LD_VAR 0 2
37511: PPUSH
37512: LD_VAR 0 3
37516: PPUSH
37517: CALL 37717 0 2
37521: PUSH
37522: LD_VAR 0 11
37526: PUSH
37527: EMPTY
37528: EQUAL
37529: OR
37530: IFFALSE 37475
// if not control in _control then
37532: LD_VAR 0 4
37536: PUSH
37537: LD_VAR 0 12
37541: IN
37542: NOT
37543: IFFALSE 37569
// control := _control [ rand ( 1 , _control ) ] ;
37545: LD_ADDR_VAR 0 4
37549: PUSH
37550: LD_VAR 0 12
37554: PUSH
37555: LD_INT 1
37557: PPUSH
37558: LD_VAR 0 12
37562: PPUSH
37563: CALL_OW 12
37567: ARRAY
37568: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37569: LD_VAR 0 2
37573: PPUSH
37574: LD_VAR 0 5
37578: PPUSH
37579: CALL 37937 0 2
37583: NOT
37584: IFFALSE 37643
// repeat weapon := _weapon [ 1 ] ;
37586: LD_ADDR_VAR 0 5
37590: PUSH
37591: LD_VAR 0 10
37595: PUSH
37596: LD_INT 1
37598: ARRAY
37599: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37600: LD_ADDR_VAR 0 10
37604: PUSH
37605: LD_VAR 0 10
37609: PPUSH
37610: LD_INT 1
37612: PPUSH
37613: CALL_OW 3
37617: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37618: LD_VAR 0 2
37622: PPUSH
37623: LD_VAR 0 5
37627: PPUSH
37628: CALL 37937 0 2
37632: PUSH
37633: LD_VAR 0 10
37637: PUSH
37638: EMPTY
37639: EQUAL
37640: OR
37641: IFFALSE 37586
// result := [ ] ;
37643: LD_ADDR_VAR 0 6
37647: PUSH
37648: EMPTY
37649: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37650: LD_VAR 0 1
37654: PPUSH
37655: LD_VAR 0 2
37659: PPUSH
37660: LD_VAR 0 3
37664: PPUSH
37665: LD_VAR 0 4
37669: PPUSH
37670: LD_VAR 0 5
37674: PPUSH
37675: CALL_OW 448
37679: IFFALSE 37712
// result := [ chassis , engine , control , weapon ] ;
37681: LD_ADDR_VAR 0 6
37685: PUSH
37686: LD_VAR 0 2
37690: PUSH
37691: LD_VAR 0 3
37695: PUSH
37696: LD_VAR 0 4
37700: PUSH
37701: LD_VAR 0 5
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
// end ;
37712: LD_VAR 0 6
37716: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37717: LD_INT 0
37719: PPUSH
// if not chassis or not engine then
37720: LD_VAR 0 1
37724: NOT
37725: PUSH
37726: LD_VAR 0 2
37730: NOT
37731: OR
37732: IFFALSE 37736
// exit ;
37734: GO 37932
// case engine of engine_solar :
37736: LD_VAR 0 2
37740: PUSH
37741: LD_INT 2
37743: DOUBLE
37744: EQUAL
37745: IFTRUE 37749
37747: GO 37787
37749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37750: LD_ADDR_VAR 0 3
37754: PUSH
37755: LD_INT 11
37757: PUSH
37758: LD_INT 12
37760: PUSH
37761: LD_INT 13
37763: PUSH
37764: LD_INT 14
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 3
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: ST_TO_ADDR
37785: GO 37916
37787: LD_INT 1
37789: DOUBLE
37790: EQUAL
37791: IFTRUE 37795
37793: GO 37857
37795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37796: LD_ADDR_VAR 0 3
37800: PUSH
37801: LD_INT 11
37803: PUSH
37804: LD_INT 12
37806: PUSH
37807: LD_INT 13
37809: PUSH
37810: LD_INT 14
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 4
37824: PUSH
37825: LD_INT 5
37827: PUSH
37828: LD_INT 21
37830: PUSH
37831: LD_INT 23
37833: PUSH
37834: LD_INT 22
37836: PUSH
37837: LD_INT 24
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
37855: GO 37916
37857: LD_INT 3
37859: DOUBLE
37860: EQUAL
37861: IFTRUE 37865
37863: GO 37915
37865: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37866: LD_ADDR_VAR 0 3
37870: PUSH
37871: LD_INT 13
37873: PUSH
37874: LD_INT 14
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 3
37882: PUSH
37883: LD_INT 4
37885: PUSH
37886: LD_INT 5
37888: PUSH
37889: LD_INT 21
37891: PUSH
37892: LD_INT 22
37894: PUSH
37895: LD_INT 23
37897: PUSH
37898: LD_INT 24
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
37913: GO 37916
37915: POP
// result := ( chassis in result ) ;
37916: LD_ADDR_VAR 0 3
37920: PUSH
37921: LD_VAR 0 1
37925: PUSH
37926: LD_VAR 0 3
37930: IN
37931: ST_TO_ADDR
// end ;
37932: LD_VAR 0 3
37936: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37937: LD_INT 0
37939: PPUSH
// if not chassis or not weapon then
37940: LD_VAR 0 1
37944: NOT
37945: PUSH
37946: LD_VAR 0 2
37950: NOT
37951: OR
37952: IFFALSE 37956
// exit ;
37954: GO 39016
// case weapon of us_machine_gun :
37956: LD_VAR 0 2
37960: PUSH
37961: LD_INT 2
37963: DOUBLE
37964: EQUAL
37965: IFTRUE 37969
37967: GO 37999
37969: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: LD_INT 3
37983: PUSH
37984: LD_INT 4
37986: PUSH
37987: LD_INT 5
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: ST_TO_ADDR
37997: GO 39000
37999: LD_INT 3
38001: DOUBLE
38002: EQUAL
38003: IFTRUE 38007
38005: GO 38037
38007: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38008: LD_ADDR_VAR 0 3
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: LD_INT 4
38024: PUSH
38025: LD_INT 5
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: ST_TO_ADDR
38035: GO 39000
38037: LD_INT 11
38039: DOUBLE
38040: EQUAL
38041: IFTRUE 38045
38043: GO 38075
38045: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 3
38059: PUSH
38060: LD_INT 4
38062: PUSH
38063: LD_INT 5
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
38073: GO 39000
38075: LD_INT 4
38077: DOUBLE
38078: EQUAL
38079: IFTRUE 38083
38081: GO 38109
38083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38084: LD_ADDR_VAR 0 3
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: LD_INT 3
38094: PUSH
38095: LD_INT 4
38097: PUSH
38098: LD_INT 5
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: ST_TO_ADDR
38107: GO 39000
38109: LD_INT 5
38111: DOUBLE
38112: EQUAL
38113: IFTRUE 38117
38115: GO 38143
38117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38118: LD_ADDR_VAR 0 3
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: LD_INT 3
38128: PUSH
38129: LD_INT 4
38131: PUSH
38132: LD_INT 5
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: ST_TO_ADDR
38141: GO 39000
38143: LD_INT 9
38145: DOUBLE
38146: EQUAL
38147: IFTRUE 38151
38149: GO 38177
38151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38152: LD_ADDR_VAR 0 3
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 3
38162: PUSH
38163: LD_INT 4
38165: PUSH
38166: LD_INT 5
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: ST_TO_ADDR
38175: GO 39000
38177: LD_INT 7
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38185
38183: GO 38211
38185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38186: LD_ADDR_VAR 0 3
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 3
38196: PUSH
38197: LD_INT 4
38199: PUSH
38200: LD_INT 5
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: ST_TO_ADDR
38209: GO 39000
38211: LD_INT 12
38213: DOUBLE
38214: EQUAL
38215: IFTRUE 38219
38217: GO 38245
38219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38220: LD_ADDR_VAR 0 3
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: LD_INT 4
38233: PUSH
38234: LD_INT 5
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: ST_TO_ADDR
38243: GO 39000
38245: LD_INT 13
38247: DOUBLE
38248: EQUAL
38249: IFTRUE 38253
38251: GO 38279
38253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38254: LD_ADDR_VAR 0 3
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: LD_INT 3
38264: PUSH
38265: LD_INT 4
38267: PUSH
38268: LD_INT 5
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: ST_TO_ADDR
38277: GO 39000
38279: LD_INT 14
38281: DOUBLE
38282: EQUAL
38283: IFTRUE 38287
38285: GO 38305
38287: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: LD_INT 4
38295: PUSH
38296: LD_INT 5
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: ST_TO_ADDR
38303: GO 39000
38305: LD_INT 6
38307: DOUBLE
38308: EQUAL
38309: IFTRUE 38313
38311: GO 38331
38313: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38314: LD_ADDR_VAR 0 3
38318: PUSH
38319: LD_INT 4
38321: PUSH
38322: LD_INT 5
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: ST_TO_ADDR
38329: GO 39000
38331: LD_INT 10
38333: DOUBLE
38334: EQUAL
38335: IFTRUE 38339
38337: GO 38357
38339: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38340: LD_ADDR_VAR 0 3
38344: PUSH
38345: LD_INT 4
38347: PUSH
38348: LD_INT 5
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: ST_TO_ADDR
38355: GO 39000
38357: LD_INT 22
38359: DOUBLE
38360: EQUAL
38361: IFTRUE 38365
38363: GO 38391
38365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38366: LD_ADDR_VAR 0 3
38370: PUSH
38371: LD_INT 11
38373: PUSH
38374: LD_INT 12
38376: PUSH
38377: LD_INT 13
38379: PUSH
38380: LD_INT 14
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: ST_TO_ADDR
38389: GO 39000
38391: LD_INT 23
38393: DOUBLE
38394: EQUAL
38395: IFTRUE 38399
38397: GO 38425
38399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38400: LD_ADDR_VAR 0 3
38404: PUSH
38405: LD_INT 11
38407: PUSH
38408: LD_INT 12
38410: PUSH
38411: LD_INT 13
38413: PUSH
38414: LD_INT 14
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
38423: GO 39000
38425: LD_INT 24
38427: DOUBLE
38428: EQUAL
38429: IFTRUE 38433
38431: GO 38459
38433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38434: LD_ADDR_VAR 0 3
38438: PUSH
38439: LD_INT 11
38441: PUSH
38442: LD_INT 12
38444: PUSH
38445: LD_INT 13
38447: PUSH
38448: LD_INT 14
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
38457: GO 39000
38459: LD_INT 30
38461: DOUBLE
38462: EQUAL
38463: IFTRUE 38467
38465: GO 38493
38467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_INT 11
38475: PUSH
38476: LD_INT 12
38478: PUSH
38479: LD_INT 13
38481: PUSH
38482: LD_INT 14
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
38491: GO 39000
38493: LD_INT 25
38495: DOUBLE
38496: EQUAL
38497: IFTRUE 38501
38499: GO 38519
38501: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38502: LD_ADDR_VAR 0 3
38506: PUSH
38507: LD_INT 13
38509: PUSH
38510: LD_INT 14
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: ST_TO_ADDR
38517: GO 39000
38519: LD_INT 27
38521: DOUBLE
38522: EQUAL
38523: IFTRUE 38527
38525: GO 38545
38527: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38528: LD_ADDR_VAR 0 3
38532: PUSH
38533: LD_INT 13
38535: PUSH
38536: LD_INT 14
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: ST_TO_ADDR
38543: GO 39000
38545: LD_INT 92
38547: DOUBLE
38548: EQUAL
38549: IFTRUE 38553
38551: GO 38579
38553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38554: LD_ADDR_VAR 0 3
38558: PUSH
38559: LD_INT 11
38561: PUSH
38562: LD_INT 12
38564: PUSH
38565: LD_INT 13
38567: PUSH
38568: LD_INT 14
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
38577: GO 39000
38579: LD_INT 28
38581: DOUBLE
38582: EQUAL
38583: IFTRUE 38587
38585: GO 38605
38587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_INT 13
38595: PUSH
38596: LD_INT 14
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: ST_TO_ADDR
38603: GO 39000
38605: LD_INT 29
38607: DOUBLE
38608: EQUAL
38609: IFTRUE 38613
38611: GO 38631
38613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38614: LD_ADDR_VAR 0 3
38618: PUSH
38619: LD_INT 13
38621: PUSH
38622: LD_INT 14
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: ST_TO_ADDR
38629: GO 39000
38631: LD_INT 31
38633: DOUBLE
38634: EQUAL
38635: IFTRUE 38639
38637: GO 38657
38639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38640: LD_ADDR_VAR 0 3
38644: PUSH
38645: LD_INT 13
38647: PUSH
38648: LD_INT 14
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: ST_TO_ADDR
38655: GO 39000
38657: LD_INT 26
38659: DOUBLE
38660: EQUAL
38661: IFTRUE 38665
38663: GO 38683
38665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: LD_INT 13
38673: PUSH
38674: LD_INT 14
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: ST_TO_ADDR
38681: GO 39000
38683: LD_INT 42
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38691
38689: GO 38717
38691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38692: LD_ADDR_VAR 0 3
38696: PUSH
38697: LD_INT 21
38699: PUSH
38700: LD_INT 22
38702: PUSH
38703: LD_INT 23
38705: PUSH
38706: LD_INT 24
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: ST_TO_ADDR
38715: GO 39000
38717: LD_INT 43
38719: DOUBLE
38720: EQUAL
38721: IFTRUE 38725
38723: GO 38751
38725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38726: LD_ADDR_VAR 0 3
38730: PUSH
38731: LD_INT 21
38733: PUSH
38734: LD_INT 22
38736: PUSH
38737: LD_INT 23
38739: PUSH
38740: LD_INT 24
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: ST_TO_ADDR
38749: GO 39000
38751: LD_INT 44
38753: DOUBLE
38754: EQUAL
38755: IFTRUE 38759
38757: GO 38785
38759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38760: LD_ADDR_VAR 0 3
38764: PUSH
38765: LD_INT 21
38767: PUSH
38768: LD_INT 22
38770: PUSH
38771: LD_INT 23
38773: PUSH
38774: LD_INT 24
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: ST_TO_ADDR
38783: GO 39000
38785: LD_INT 45
38787: DOUBLE
38788: EQUAL
38789: IFTRUE 38793
38791: GO 38819
38793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38794: LD_ADDR_VAR 0 3
38798: PUSH
38799: LD_INT 21
38801: PUSH
38802: LD_INT 22
38804: PUSH
38805: LD_INT 23
38807: PUSH
38808: LD_INT 24
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: ST_TO_ADDR
38817: GO 39000
38819: LD_INT 49
38821: DOUBLE
38822: EQUAL
38823: IFTRUE 38827
38825: GO 38853
38827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38828: LD_ADDR_VAR 0 3
38832: PUSH
38833: LD_INT 21
38835: PUSH
38836: LD_INT 22
38838: PUSH
38839: LD_INT 23
38841: PUSH
38842: LD_INT 24
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: ST_TO_ADDR
38851: GO 39000
38853: LD_INT 51
38855: DOUBLE
38856: EQUAL
38857: IFTRUE 38861
38859: GO 38887
38861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_INT 21
38869: PUSH
38870: LD_INT 22
38872: PUSH
38873: LD_INT 23
38875: PUSH
38876: LD_INT 24
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: ST_TO_ADDR
38885: GO 39000
38887: LD_INT 52
38889: DOUBLE
38890: EQUAL
38891: IFTRUE 38895
38893: GO 38921
38895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38896: LD_ADDR_VAR 0 3
38900: PUSH
38901: LD_INT 21
38903: PUSH
38904: LD_INT 22
38906: PUSH
38907: LD_INT 23
38909: PUSH
38910: LD_INT 24
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: ST_TO_ADDR
38919: GO 39000
38921: LD_INT 53
38923: DOUBLE
38924: EQUAL
38925: IFTRUE 38929
38927: GO 38947
38929: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38930: LD_ADDR_VAR 0 3
38934: PUSH
38935: LD_INT 23
38937: PUSH
38938: LD_INT 24
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: ST_TO_ADDR
38945: GO 39000
38947: LD_INT 46
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38973
38955: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_INT 23
38963: PUSH
38964: LD_INT 24
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: ST_TO_ADDR
38971: GO 39000
38973: LD_INT 47
38975: DOUBLE
38976: EQUAL
38977: IFTRUE 38981
38979: GO 38999
38981: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38982: LD_ADDR_VAR 0 3
38986: PUSH
38987: LD_INT 23
38989: PUSH
38990: LD_INT 24
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: ST_TO_ADDR
38997: GO 39000
38999: POP
// result := ( chassis in result ) ;
39000: LD_ADDR_VAR 0 3
39004: PUSH
39005: LD_VAR 0 1
39009: PUSH
39010: LD_VAR 0 3
39014: IN
39015: ST_TO_ADDR
// end ;
39016: LD_VAR 0 3
39020: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39021: LD_INT 0
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
// result := array ;
39030: LD_ADDR_VAR 0 5
39034: PUSH
39035: LD_VAR 0 1
39039: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39040: LD_VAR 0 1
39044: NOT
39045: PUSH
39046: LD_VAR 0 2
39050: NOT
39051: OR
39052: PUSH
39053: LD_VAR 0 3
39057: NOT
39058: OR
39059: PUSH
39060: LD_VAR 0 2
39064: PUSH
39065: LD_VAR 0 1
39069: GREATER
39070: OR
39071: PUSH
39072: LD_VAR 0 3
39076: PUSH
39077: LD_VAR 0 1
39081: GREATER
39082: OR
39083: IFFALSE 39087
// exit ;
39085: GO 39383
// if direction then
39087: LD_VAR 0 4
39091: IFFALSE 39155
// begin d := 1 ;
39093: LD_ADDR_VAR 0 9
39097: PUSH
39098: LD_INT 1
39100: ST_TO_ADDR
// if i_from > i_to then
39101: LD_VAR 0 2
39105: PUSH
39106: LD_VAR 0 3
39110: GREATER
39111: IFFALSE 39137
// length := ( array - i_from ) + i_to else
39113: LD_ADDR_VAR 0 11
39117: PUSH
39118: LD_VAR 0 1
39122: PUSH
39123: LD_VAR 0 2
39127: MINUS
39128: PUSH
39129: LD_VAR 0 3
39133: PLUS
39134: ST_TO_ADDR
39135: GO 39153
// length := i_to - i_from ;
39137: LD_ADDR_VAR 0 11
39141: PUSH
39142: LD_VAR 0 3
39146: PUSH
39147: LD_VAR 0 2
39151: MINUS
39152: ST_TO_ADDR
// end else
39153: GO 39216
// begin d := - 1 ;
39155: LD_ADDR_VAR 0 9
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: ST_TO_ADDR
// if i_from > i_to then
39164: LD_VAR 0 2
39168: PUSH
39169: LD_VAR 0 3
39173: GREATER
39174: IFFALSE 39194
// length := i_from - i_to else
39176: LD_ADDR_VAR 0 11
39180: PUSH
39181: LD_VAR 0 2
39185: PUSH
39186: LD_VAR 0 3
39190: MINUS
39191: ST_TO_ADDR
39192: GO 39216
// length := ( array - i_to ) + i_from ;
39194: LD_ADDR_VAR 0 11
39198: PUSH
39199: LD_VAR 0 1
39203: PUSH
39204: LD_VAR 0 3
39208: MINUS
39209: PUSH
39210: LD_VAR 0 2
39214: PLUS
39215: ST_TO_ADDR
// end ; if not length then
39216: LD_VAR 0 11
39220: NOT
39221: IFFALSE 39225
// exit ;
39223: GO 39383
// tmp := array ;
39225: LD_ADDR_VAR 0 10
39229: PUSH
39230: LD_VAR 0 1
39234: ST_TO_ADDR
// for i = 1 to length do
39235: LD_ADDR_VAR 0 6
39239: PUSH
39240: DOUBLE
39241: LD_INT 1
39243: DEC
39244: ST_TO_ADDR
39245: LD_VAR 0 11
39249: PUSH
39250: FOR_TO
39251: IFFALSE 39371
// begin for j = 1 to array do
39253: LD_ADDR_VAR 0 7
39257: PUSH
39258: DOUBLE
39259: LD_INT 1
39261: DEC
39262: ST_TO_ADDR
39263: LD_VAR 0 1
39267: PUSH
39268: FOR_TO
39269: IFFALSE 39357
// begin k := j + d ;
39271: LD_ADDR_VAR 0 8
39275: PUSH
39276: LD_VAR 0 7
39280: PUSH
39281: LD_VAR 0 9
39285: PLUS
39286: ST_TO_ADDR
// if k > array then
39287: LD_VAR 0 8
39291: PUSH
39292: LD_VAR 0 1
39296: GREATER
39297: IFFALSE 39307
// k := 1 ;
39299: LD_ADDR_VAR 0 8
39303: PUSH
39304: LD_INT 1
39306: ST_TO_ADDR
// if not k then
39307: LD_VAR 0 8
39311: NOT
39312: IFFALSE 39324
// k := array ;
39314: LD_ADDR_VAR 0 8
39318: PUSH
39319: LD_VAR 0 1
39323: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39324: LD_ADDR_VAR 0 10
39328: PUSH
39329: LD_VAR 0 10
39333: PPUSH
39334: LD_VAR 0 8
39338: PPUSH
39339: LD_VAR 0 1
39343: PUSH
39344: LD_VAR 0 7
39348: ARRAY
39349: PPUSH
39350: CALL_OW 1
39354: ST_TO_ADDR
// end ;
39355: GO 39268
39357: POP
39358: POP
// array := tmp ;
39359: LD_ADDR_VAR 0 1
39363: PUSH
39364: LD_VAR 0 10
39368: ST_TO_ADDR
// end ;
39369: GO 39250
39371: POP
39372: POP
// result := array ;
39373: LD_ADDR_VAR 0 5
39377: PUSH
39378: LD_VAR 0 1
39382: ST_TO_ADDR
// end ;
39383: LD_VAR 0 5
39387: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39388: LD_INT 0
39390: PPUSH
39391: PPUSH
// result := 0 ;
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_INT 0
39399: ST_TO_ADDR
// if not array or not value in array then
39400: LD_VAR 0 1
39404: NOT
39405: PUSH
39406: LD_VAR 0 2
39410: PUSH
39411: LD_VAR 0 1
39415: IN
39416: NOT
39417: OR
39418: IFFALSE 39422
// exit ;
39420: GO 39476
// for i = 1 to array do
39422: LD_ADDR_VAR 0 4
39426: PUSH
39427: DOUBLE
39428: LD_INT 1
39430: DEC
39431: ST_TO_ADDR
39432: LD_VAR 0 1
39436: PUSH
39437: FOR_TO
39438: IFFALSE 39474
// if value = array [ i ] then
39440: LD_VAR 0 2
39444: PUSH
39445: LD_VAR 0 1
39449: PUSH
39450: LD_VAR 0 4
39454: ARRAY
39455: EQUAL
39456: IFFALSE 39472
// begin result := i ;
39458: LD_ADDR_VAR 0 3
39462: PUSH
39463: LD_VAR 0 4
39467: ST_TO_ADDR
// exit ;
39468: POP
39469: POP
39470: GO 39476
// end ;
39472: GO 39437
39474: POP
39475: POP
// end ;
39476: LD_VAR 0 3
39480: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39481: LD_INT 0
39483: PPUSH
// vc_chassis := chassis ;
39484: LD_ADDR_OWVAR 37
39488: PUSH
39489: LD_VAR 0 1
39493: ST_TO_ADDR
// vc_engine := engine ;
39494: LD_ADDR_OWVAR 39
39498: PUSH
39499: LD_VAR 0 2
39503: ST_TO_ADDR
// vc_control := control ;
39504: LD_ADDR_OWVAR 38
39508: PUSH
39509: LD_VAR 0 3
39513: ST_TO_ADDR
// vc_weapon := weapon ;
39514: LD_ADDR_OWVAR 40
39518: PUSH
39519: LD_VAR 0 4
39523: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39524: LD_ADDR_OWVAR 41
39528: PUSH
39529: LD_VAR 0 5
39533: ST_TO_ADDR
// end ;
39534: LD_VAR 0 6
39538: RET
// export function WantPlant ( unit ) ; var task ; begin
39539: LD_INT 0
39541: PPUSH
39542: PPUSH
// result := false ;
39543: LD_ADDR_VAR 0 2
39547: PUSH
39548: LD_INT 0
39550: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_VAR 0 1
39560: PPUSH
39561: CALL_OW 437
39565: ST_TO_ADDR
// if task then
39566: LD_VAR 0 3
39570: IFFALSE 39598
// if task [ 1 ] [ 1 ] = p then
39572: LD_VAR 0 3
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PUSH
39581: LD_INT 1
39583: ARRAY
39584: PUSH
39585: LD_STRING p
39587: EQUAL
39588: IFFALSE 39598
// result := true ;
39590: LD_ADDR_VAR 0 2
39594: PUSH
39595: LD_INT 1
39597: ST_TO_ADDR
// end ;
39598: LD_VAR 0 2
39602: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39603: LD_INT 0
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
// if pos < 1 then
39609: LD_VAR 0 2
39613: PUSH
39614: LD_INT 1
39616: LESS
39617: IFFALSE 39621
// exit ;
39619: GO 39924
// if pos = 1 then
39621: LD_VAR 0 2
39625: PUSH
39626: LD_INT 1
39628: EQUAL
39629: IFFALSE 39662
// result := Replace ( arr , pos [ 1 ] , value ) else
39631: LD_ADDR_VAR 0 4
39635: PUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: LD_VAR 0 2
39645: PUSH
39646: LD_INT 1
39648: ARRAY
39649: PPUSH
39650: LD_VAR 0 3
39654: PPUSH
39655: CALL_OW 1
39659: ST_TO_ADDR
39660: GO 39924
// begin tmp := arr ;
39662: LD_ADDR_VAR 0 6
39666: PUSH
39667: LD_VAR 0 1
39671: ST_TO_ADDR
// s_arr := [ tmp ] ;
39672: LD_ADDR_VAR 0 7
39676: PUSH
39677: LD_VAR 0 6
39681: PUSH
39682: EMPTY
39683: LIST
39684: ST_TO_ADDR
// for i = 1 to pos - 1 do
39685: LD_ADDR_VAR 0 5
39689: PUSH
39690: DOUBLE
39691: LD_INT 1
39693: DEC
39694: ST_TO_ADDR
39695: LD_VAR 0 2
39699: PUSH
39700: LD_INT 1
39702: MINUS
39703: PUSH
39704: FOR_TO
39705: IFFALSE 39750
// begin tmp := tmp [ pos [ i ] ] ;
39707: LD_ADDR_VAR 0 6
39711: PUSH
39712: LD_VAR 0 6
39716: PUSH
39717: LD_VAR 0 2
39721: PUSH
39722: LD_VAR 0 5
39726: ARRAY
39727: ARRAY
39728: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39729: LD_ADDR_VAR 0 7
39733: PUSH
39734: LD_VAR 0 7
39738: PUSH
39739: LD_VAR 0 6
39743: PUSH
39744: EMPTY
39745: LIST
39746: ADD
39747: ST_TO_ADDR
// end ;
39748: GO 39704
39750: POP
39751: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39752: LD_ADDR_VAR 0 6
39756: PUSH
39757: LD_VAR 0 6
39761: PPUSH
39762: LD_VAR 0 2
39766: PUSH
39767: LD_VAR 0 2
39771: ARRAY
39772: PPUSH
39773: LD_VAR 0 3
39777: PPUSH
39778: CALL_OW 1
39782: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39783: LD_ADDR_VAR 0 7
39787: PUSH
39788: LD_VAR 0 7
39792: PPUSH
39793: LD_VAR 0 7
39797: PPUSH
39798: LD_VAR 0 6
39802: PPUSH
39803: CALL_OW 1
39807: ST_TO_ADDR
// for i = s_arr downto 2 do
39808: LD_ADDR_VAR 0 5
39812: PUSH
39813: DOUBLE
39814: LD_VAR 0 7
39818: INC
39819: ST_TO_ADDR
39820: LD_INT 2
39822: PUSH
39823: FOR_DOWNTO
39824: IFFALSE 39908
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39826: LD_ADDR_VAR 0 6
39830: PUSH
39831: LD_VAR 0 7
39835: PUSH
39836: LD_VAR 0 5
39840: PUSH
39841: LD_INT 1
39843: MINUS
39844: ARRAY
39845: PPUSH
39846: LD_VAR 0 2
39850: PUSH
39851: LD_VAR 0 5
39855: PUSH
39856: LD_INT 1
39858: MINUS
39859: ARRAY
39860: PPUSH
39861: LD_VAR 0 7
39865: PUSH
39866: LD_VAR 0 5
39870: ARRAY
39871: PPUSH
39872: CALL_OW 1
39876: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39877: LD_ADDR_VAR 0 7
39881: PUSH
39882: LD_VAR 0 7
39886: PPUSH
39887: LD_VAR 0 5
39891: PUSH
39892: LD_INT 1
39894: MINUS
39895: PPUSH
39896: LD_VAR 0 6
39900: PPUSH
39901: CALL_OW 1
39905: ST_TO_ADDR
// end ;
39906: GO 39823
39908: POP
39909: POP
// result := s_arr [ 1 ] ;
39910: LD_ADDR_VAR 0 4
39914: PUSH
39915: LD_VAR 0 7
39919: PUSH
39920: LD_INT 1
39922: ARRAY
39923: ST_TO_ADDR
// end ; end ;
39924: LD_VAR 0 4
39928: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39929: LD_INT 0
39931: PPUSH
39932: PPUSH
// if not list then
39933: LD_VAR 0 1
39937: NOT
39938: IFFALSE 39942
// exit ;
39940: GO 40033
// i := list [ pos1 ] ;
39942: LD_ADDR_VAR 0 5
39946: PUSH
39947: LD_VAR 0 1
39951: PUSH
39952: LD_VAR 0 2
39956: ARRAY
39957: ST_TO_ADDR
// if not i then
39958: LD_VAR 0 5
39962: NOT
39963: IFFALSE 39967
// exit ;
39965: GO 40033
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39967: LD_ADDR_VAR 0 1
39971: PUSH
39972: LD_VAR 0 1
39976: PPUSH
39977: LD_VAR 0 2
39981: PPUSH
39982: LD_VAR 0 1
39986: PUSH
39987: LD_VAR 0 3
39991: ARRAY
39992: PPUSH
39993: CALL_OW 1
39997: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39998: LD_ADDR_VAR 0 1
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: LD_VAR 0 3
40012: PPUSH
40013: LD_VAR 0 5
40017: PPUSH
40018: CALL_OW 1
40022: ST_TO_ADDR
// result := list ;
40023: LD_ADDR_VAR 0 4
40027: PUSH
40028: LD_VAR 0 1
40032: ST_TO_ADDR
// end ;
40033: LD_VAR 0 4
40037: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40038: LD_INT 0
40040: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40041: LD_ADDR_VAR 0 5
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 250
40055: PPUSH
40056: LD_VAR 0 1
40060: PPUSH
40061: CALL_OW 251
40065: PPUSH
40066: LD_VAR 0 2
40070: PPUSH
40071: LD_VAR 0 3
40075: PPUSH
40076: LD_VAR 0 4
40080: PPUSH
40081: CALL 40091 0 5
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 5
40090: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40091: LD_INT 0
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
// if not list then
40097: LD_VAR 0 3
40101: NOT
40102: IFFALSE 40106
// exit ;
40104: GO 40494
// result := [ ] ;
40106: LD_ADDR_VAR 0 6
40110: PUSH
40111: EMPTY
40112: ST_TO_ADDR
// for i in list do
40113: LD_ADDR_VAR 0 7
40117: PUSH
40118: LD_VAR 0 3
40122: PUSH
40123: FOR_IN
40124: IFFALSE 40326
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40126: LD_ADDR_VAR 0 9
40130: PUSH
40131: LD_VAR 0 7
40135: PPUSH
40136: LD_VAR 0 1
40140: PPUSH
40141: LD_VAR 0 2
40145: PPUSH
40146: CALL_OW 297
40150: ST_TO_ADDR
// if not result then
40151: LD_VAR 0 6
40155: NOT
40156: IFFALSE 40182
// result := [ [ i , tmp ] ] else
40158: LD_ADDR_VAR 0 6
40162: PUSH
40163: LD_VAR 0 7
40167: PUSH
40168: LD_VAR 0 9
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: ST_TO_ADDR
40180: GO 40324
// begin if result [ result ] [ 2 ] < tmp then
40182: LD_VAR 0 6
40186: PUSH
40187: LD_VAR 0 6
40191: ARRAY
40192: PUSH
40193: LD_INT 2
40195: ARRAY
40196: PUSH
40197: LD_VAR 0 9
40201: LESS
40202: IFFALSE 40244
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40204: LD_ADDR_VAR 0 6
40208: PUSH
40209: LD_VAR 0 6
40213: PPUSH
40214: LD_VAR 0 6
40218: PUSH
40219: LD_INT 1
40221: PLUS
40222: PPUSH
40223: LD_VAR 0 7
40227: PUSH
40228: LD_VAR 0 9
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PPUSH
40237: CALL_OW 2
40241: ST_TO_ADDR
40242: GO 40324
// for j = 1 to result do
40244: LD_ADDR_VAR 0 8
40248: PUSH
40249: DOUBLE
40250: LD_INT 1
40252: DEC
40253: ST_TO_ADDR
40254: LD_VAR 0 6
40258: PUSH
40259: FOR_TO
40260: IFFALSE 40322
// begin if tmp < result [ j ] [ 2 ] then
40262: LD_VAR 0 9
40266: PUSH
40267: LD_VAR 0 6
40271: PUSH
40272: LD_VAR 0 8
40276: ARRAY
40277: PUSH
40278: LD_INT 2
40280: ARRAY
40281: LESS
40282: IFFALSE 40320
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40284: LD_ADDR_VAR 0 6
40288: PUSH
40289: LD_VAR 0 6
40293: PPUSH
40294: LD_VAR 0 8
40298: PPUSH
40299: LD_VAR 0 7
40303: PUSH
40304: LD_VAR 0 9
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PPUSH
40313: CALL_OW 2
40317: ST_TO_ADDR
// break ;
40318: GO 40322
// end ; end ;
40320: GO 40259
40322: POP
40323: POP
// end ; end ;
40324: GO 40123
40326: POP
40327: POP
// if result and not asc then
40328: LD_VAR 0 6
40332: PUSH
40333: LD_VAR 0 4
40337: NOT
40338: AND
40339: IFFALSE 40414
// begin tmp := result ;
40341: LD_ADDR_VAR 0 9
40345: PUSH
40346: LD_VAR 0 6
40350: ST_TO_ADDR
// for i = tmp downto 1 do
40351: LD_ADDR_VAR 0 7
40355: PUSH
40356: DOUBLE
40357: LD_VAR 0 9
40361: INC
40362: ST_TO_ADDR
40363: LD_INT 1
40365: PUSH
40366: FOR_DOWNTO
40367: IFFALSE 40412
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40369: LD_ADDR_VAR 0 6
40373: PUSH
40374: LD_VAR 0 6
40378: PPUSH
40379: LD_VAR 0 9
40383: PUSH
40384: LD_VAR 0 7
40388: MINUS
40389: PUSH
40390: LD_INT 1
40392: PLUS
40393: PPUSH
40394: LD_VAR 0 9
40398: PUSH
40399: LD_VAR 0 7
40403: ARRAY
40404: PPUSH
40405: CALL_OW 1
40409: ST_TO_ADDR
40410: GO 40366
40412: POP
40413: POP
// end ; tmp := [ ] ;
40414: LD_ADDR_VAR 0 9
40418: PUSH
40419: EMPTY
40420: ST_TO_ADDR
// if mode then
40421: LD_VAR 0 5
40425: IFFALSE 40494
// begin for i = 1 to result do
40427: LD_ADDR_VAR 0 7
40431: PUSH
40432: DOUBLE
40433: LD_INT 1
40435: DEC
40436: ST_TO_ADDR
40437: LD_VAR 0 6
40441: PUSH
40442: FOR_TO
40443: IFFALSE 40482
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40445: LD_ADDR_VAR 0 9
40449: PUSH
40450: LD_VAR 0 9
40454: PPUSH
40455: LD_VAR 0 7
40459: PPUSH
40460: LD_VAR 0 6
40464: PUSH
40465: LD_VAR 0 7
40469: ARRAY
40470: PUSH
40471: LD_INT 1
40473: ARRAY
40474: PPUSH
40475: CALL_OW 1
40479: ST_TO_ADDR
40480: GO 40442
40482: POP
40483: POP
// result := tmp ;
40484: LD_ADDR_VAR 0 6
40488: PUSH
40489: LD_VAR 0 9
40493: ST_TO_ADDR
// end ; end ;
40494: LD_VAR 0 6
40498: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40499: LD_INT 0
40501: PPUSH
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40507: LD_ADDR_VAR 0 5
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: ST_TO_ADDR
// if not x or not y then
40529: LD_VAR 0 2
40533: NOT
40534: PUSH
40535: LD_VAR 0 3
40539: NOT
40540: OR
40541: IFFALSE 40545
// exit ;
40543: GO 42195
// if not range then
40545: LD_VAR 0 4
40549: NOT
40550: IFFALSE 40560
// range := 10 ;
40552: LD_ADDR_VAR 0 4
40556: PUSH
40557: LD_INT 10
40559: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40560: LD_ADDR_VAR 0 8
40564: PUSH
40565: LD_INT 81
40567: PUSH
40568: LD_VAR 0 1
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 92
40579: PUSH
40580: LD_VAR 0 2
40584: PUSH
40585: LD_VAR 0 3
40589: PUSH
40590: LD_VAR 0 4
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 3
40603: PUSH
40604: LD_INT 21
40606: PUSH
40607: LD_INT 3
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: PPUSH
40623: CALL_OW 69
40627: ST_TO_ADDR
// if not tmp then
40628: LD_VAR 0 8
40632: NOT
40633: IFFALSE 40637
// exit ;
40635: GO 42195
// for i in tmp do
40637: LD_ADDR_VAR 0 6
40641: PUSH
40642: LD_VAR 0 8
40646: PUSH
40647: FOR_IN
40648: IFFALSE 42170
// begin points := [ 0 , 0 , 0 ] ;
40650: LD_ADDR_VAR 0 9
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: ST_TO_ADDR
// bpoints := 1 ;
40669: LD_ADDR_VAR 0 10
40673: PUSH
40674: LD_INT 1
40676: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40677: LD_VAR 0 6
40681: PPUSH
40682: CALL_OW 247
40686: PUSH
40687: LD_INT 1
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 41273
40695: POP
// begin if GetClass ( i ) = 1 then
40696: LD_VAR 0 6
40700: PPUSH
40701: CALL_OW 257
40705: PUSH
40706: LD_INT 1
40708: EQUAL
40709: IFFALSE 40730
// points := [ 10 , 5 , 3 ] ;
40711: LD_ADDR_VAR 0 9
40715: PUSH
40716: LD_INT 10
40718: PUSH
40719: LD_INT 5
40721: PUSH
40722: LD_INT 3
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40730: LD_VAR 0 6
40734: PPUSH
40735: CALL_OW 257
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 3
40745: PUSH
40746: LD_INT 4
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: IN
40754: IFFALSE 40775
// points := [ 3 , 2 , 1 ] ;
40756: LD_ADDR_VAR 0 9
40760: PUSH
40761: LD_INT 3
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40775: LD_VAR 0 6
40779: PPUSH
40780: CALL_OW 257
40784: PUSH
40785: LD_INT 5
40787: EQUAL
40788: IFFALSE 40809
// points := [ 130 , 5 , 2 ] ;
40790: LD_ADDR_VAR 0 9
40794: PUSH
40795: LD_INT 130
40797: PUSH
40798: LD_INT 5
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40809: LD_VAR 0 6
40813: PPUSH
40814: CALL_OW 257
40818: PUSH
40819: LD_INT 8
40821: EQUAL
40822: IFFALSE 40843
// points := [ 35 , 35 , 30 ] ;
40824: LD_ADDR_VAR 0 9
40828: PUSH
40829: LD_INT 35
40831: PUSH
40832: LD_INT 35
40834: PUSH
40835: LD_INT 30
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40843: LD_VAR 0 6
40847: PPUSH
40848: CALL_OW 257
40852: PUSH
40853: LD_INT 9
40855: EQUAL
40856: IFFALSE 40877
// points := [ 20 , 55 , 40 ] ;
40858: LD_ADDR_VAR 0 9
40862: PUSH
40863: LD_INT 20
40865: PUSH
40866: LD_INT 55
40868: PUSH
40869: LD_INT 40
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40877: LD_VAR 0 6
40881: PPUSH
40882: CALL_OW 257
40886: PUSH
40887: LD_INT 12
40889: PUSH
40890: LD_INT 16
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: IN
40897: IFFALSE 40918
// points := [ 5 , 3 , 2 ] ;
40899: LD_ADDR_VAR 0 9
40903: PUSH
40904: LD_INT 5
40906: PUSH
40907: LD_INT 3
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40918: LD_VAR 0 6
40922: PPUSH
40923: CALL_OW 257
40927: PUSH
40928: LD_INT 17
40930: EQUAL
40931: IFFALSE 40952
// points := [ 100 , 50 , 75 ] ;
40933: LD_ADDR_VAR 0 9
40937: PUSH
40938: LD_INT 100
40940: PUSH
40941: LD_INT 50
40943: PUSH
40944: LD_INT 75
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40952: LD_VAR 0 6
40956: PPUSH
40957: CALL_OW 257
40961: PUSH
40962: LD_INT 15
40964: EQUAL
40965: IFFALSE 40986
// points := [ 10 , 5 , 3 ] ;
40967: LD_ADDR_VAR 0 9
40971: PUSH
40972: LD_INT 10
40974: PUSH
40975: LD_INT 5
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40986: LD_VAR 0 6
40990: PPUSH
40991: CALL_OW 257
40995: PUSH
40996: LD_INT 14
40998: EQUAL
40999: IFFALSE 41020
// points := [ 10 , 0 , 0 ] ;
41001: LD_ADDR_VAR 0 9
41005: PUSH
41006: LD_INT 10
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41020: LD_VAR 0 6
41024: PPUSH
41025: CALL_OW 257
41029: PUSH
41030: LD_INT 11
41032: EQUAL
41033: IFFALSE 41054
// points := [ 30 , 10 , 5 ] ;
41035: LD_ADDR_VAR 0 9
41039: PUSH
41040: LD_INT 30
41042: PUSH
41043: LD_INT 10
41045: PUSH
41046: LD_INT 5
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: LIST
41053: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41054: LD_VAR 0 1
41058: PPUSH
41059: LD_INT 5
41061: PPUSH
41062: CALL_OW 321
41066: PUSH
41067: LD_INT 2
41069: EQUAL
41070: IFFALSE 41087
// bpoints := bpoints * 1.8 ;
41072: LD_ADDR_VAR 0 10
41076: PUSH
41077: LD_VAR 0 10
41081: PUSH
41082: LD_REAL  1.80000000000000E+0000
41085: MUL
41086: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41087: LD_VAR 0 6
41091: PPUSH
41092: CALL_OW 257
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: LD_INT 4
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: IN
41115: PUSH
41116: LD_VAR 0 1
41120: PPUSH
41121: LD_INT 51
41123: PPUSH
41124: CALL_OW 321
41128: PUSH
41129: LD_INT 2
41131: EQUAL
41132: AND
41133: IFFALSE 41150
// bpoints := bpoints * 1.2 ;
41135: LD_ADDR_VAR 0 10
41139: PUSH
41140: LD_VAR 0 10
41144: PUSH
41145: LD_REAL  1.20000000000000E+0000
41148: MUL
41149: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41150: LD_VAR 0 6
41154: PPUSH
41155: CALL_OW 257
41159: PUSH
41160: LD_INT 5
41162: PUSH
41163: LD_INT 7
41165: PUSH
41166: LD_INT 9
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: IN
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: LD_INT 52
41182: PPUSH
41183: CALL_OW 321
41187: PUSH
41188: LD_INT 2
41190: EQUAL
41191: AND
41192: IFFALSE 41209
// bpoints := bpoints * 1.5 ;
41194: LD_ADDR_VAR 0 10
41198: PUSH
41199: LD_VAR 0 10
41203: PUSH
41204: LD_REAL  1.50000000000000E+0000
41207: MUL
41208: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41209: LD_VAR 0 1
41213: PPUSH
41214: LD_INT 66
41216: PPUSH
41217: CALL_OW 321
41221: PUSH
41222: LD_INT 2
41224: EQUAL
41225: IFFALSE 41242
// bpoints := bpoints * 1.1 ;
41227: LD_ADDR_VAR 0 10
41231: PUSH
41232: LD_VAR 0 10
41236: PUSH
41237: LD_REAL  1.10000000000000E+0000
41240: MUL
41241: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41242: LD_ADDR_VAR 0 10
41246: PUSH
41247: LD_VAR 0 10
41251: PUSH
41252: LD_VAR 0 6
41256: PPUSH
41257: LD_INT 1
41259: PPUSH
41260: CALL_OW 259
41264: PUSH
41265: LD_REAL  1.15000000000000E+0000
41268: MUL
41269: MUL
41270: ST_TO_ADDR
// end ; unit_vehicle :
41271: GO 42099
41273: LD_INT 2
41275: DOUBLE
41276: EQUAL
41277: IFTRUE 41281
41279: GO 42087
41281: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41282: LD_VAR 0 6
41286: PPUSH
41287: CALL_OW 264
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: LD_INT 42
41297: PUSH
41298: LD_INT 24
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: IN
41306: IFFALSE 41327
// points := [ 25 , 5 , 3 ] ;
41308: LD_ADDR_VAR 0 9
41312: PUSH
41313: LD_INT 25
41315: PUSH
41316: LD_INT 5
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41327: LD_VAR 0 6
41331: PPUSH
41332: CALL_OW 264
41336: PUSH
41337: LD_INT 4
41339: PUSH
41340: LD_INT 43
41342: PUSH
41343: LD_INT 25
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: IN
41351: IFFALSE 41372
// points := [ 40 , 15 , 5 ] ;
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_INT 40
41360: PUSH
41361: LD_INT 15
41363: PUSH
41364: LD_INT 5
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41372: LD_VAR 0 6
41376: PPUSH
41377: CALL_OW 264
41381: PUSH
41382: LD_INT 3
41384: PUSH
41385: LD_INT 23
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: IN
41392: IFFALSE 41413
// points := [ 7 , 25 , 8 ] ;
41394: LD_ADDR_VAR 0 9
41398: PUSH
41399: LD_INT 7
41401: PUSH
41402: LD_INT 25
41404: PUSH
41405: LD_INT 8
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41413: LD_VAR 0 6
41417: PPUSH
41418: CALL_OW 264
41422: PUSH
41423: LD_INT 5
41425: PUSH
41426: LD_INT 27
41428: PUSH
41429: LD_INT 44
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: IN
41437: IFFALSE 41458
// points := [ 14 , 50 , 16 ] ;
41439: LD_ADDR_VAR 0 9
41443: PUSH
41444: LD_INT 14
41446: PUSH
41447: LD_INT 50
41449: PUSH
41450: LD_INT 16
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41458: LD_VAR 0 6
41462: PPUSH
41463: CALL_OW 264
41467: PUSH
41468: LD_INT 6
41470: PUSH
41471: LD_INT 46
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: IN
41478: IFFALSE 41499
// points := [ 32 , 120 , 70 ] ;
41480: LD_ADDR_VAR 0 9
41484: PUSH
41485: LD_INT 32
41487: PUSH
41488: LD_INT 120
41490: PUSH
41491: LD_INT 70
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41499: LD_VAR 0 6
41503: PPUSH
41504: CALL_OW 264
41508: PUSH
41509: LD_INT 7
41511: PUSH
41512: LD_INT 28
41514: PUSH
41515: LD_INT 45
41517: PUSH
41518: LD_INT 92
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: IN
41527: IFFALSE 41548
// points := [ 35 , 20 , 45 ] ;
41529: LD_ADDR_VAR 0 9
41533: PUSH
41534: LD_INT 35
41536: PUSH
41537: LD_INT 20
41539: PUSH
41540: LD_INT 45
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41548: LD_VAR 0 6
41552: PPUSH
41553: CALL_OW 264
41557: PUSH
41558: LD_INT 47
41560: PUSH
41561: EMPTY
41562: LIST
41563: IN
41564: IFFALSE 41585
// points := [ 67 , 45 , 75 ] ;
41566: LD_ADDR_VAR 0 9
41570: PUSH
41571: LD_INT 67
41573: PUSH
41574: LD_INT 45
41576: PUSH
41577: LD_INT 75
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41585: LD_VAR 0 6
41589: PPUSH
41590: CALL_OW 264
41594: PUSH
41595: LD_INT 26
41597: PUSH
41598: EMPTY
41599: LIST
41600: IN
41601: IFFALSE 41622
// points := [ 120 , 30 , 80 ] ;
41603: LD_ADDR_VAR 0 9
41607: PUSH
41608: LD_INT 120
41610: PUSH
41611: LD_INT 30
41613: PUSH
41614: LD_INT 80
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41622: LD_VAR 0 6
41626: PPUSH
41627: CALL_OW 264
41631: PUSH
41632: LD_INT 22
41634: PUSH
41635: EMPTY
41636: LIST
41637: IN
41638: IFFALSE 41659
// points := [ 40 , 1 , 1 ] ;
41640: LD_ADDR_VAR 0 9
41644: PUSH
41645: LD_INT 40
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41659: LD_VAR 0 6
41663: PPUSH
41664: CALL_OW 264
41668: PUSH
41669: LD_INT 29
41671: PUSH
41672: EMPTY
41673: LIST
41674: IN
41675: IFFALSE 41696
// points := [ 70 , 200 , 400 ] ;
41677: LD_ADDR_VAR 0 9
41681: PUSH
41682: LD_INT 70
41684: PUSH
41685: LD_INT 200
41687: PUSH
41688: LD_INT 400
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41696: LD_VAR 0 6
41700: PPUSH
41701: CALL_OW 264
41705: PUSH
41706: LD_INT 14
41708: PUSH
41709: LD_INT 53
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: IN
41716: IFFALSE 41737
// points := [ 40 , 10 , 20 ] ;
41718: LD_ADDR_VAR 0 9
41722: PUSH
41723: LD_INT 40
41725: PUSH
41726: LD_INT 10
41728: PUSH
41729: LD_INT 20
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41737: LD_VAR 0 6
41741: PPUSH
41742: CALL_OW 264
41746: PUSH
41747: LD_INT 9
41749: PUSH
41750: EMPTY
41751: LIST
41752: IN
41753: IFFALSE 41774
// points := [ 5 , 70 , 20 ] ;
41755: LD_ADDR_VAR 0 9
41759: PUSH
41760: LD_INT 5
41762: PUSH
41763: LD_INT 70
41765: PUSH
41766: LD_INT 20
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41774: LD_VAR 0 6
41778: PPUSH
41779: CALL_OW 264
41783: PUSH
41784: LD_INT 10
41786: PUSH
41787: EMPTY
41788: LIST
41789: IN
41790: IFFALSE 41811
// points := [ 35 , 110 , 70 ] ;
41792: LD_ADDR_VAR 0 9
41796: PUSH
41797: LD_INT 35
41799: PUSH
41800: LD_INT 110
41802: PUSH
41803: LD_INT 70
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41811: LD_VAR 0 6
41815: PPUSH
41816: CALL_OW 265
41820: PUSH
41821: LD_INT 25
41823: EQUAL
41824: IFFALSE 41845
// points := [ 80 , 65 , 100 ] ;
41826: LD_ADDR_VAR 0 9
41830: PUSH
41831: LD_INT 80
41833: PUSH
41834: LD_INT 65
41836: PUSH
41837: LD_INT 100
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41845: LD_VAR 0 6
41849: PPUSH
41850: CALL_OW 263
41854: PUSH
41855: LD_INT 1
41857: EQUAL
41858: IFFALSE 41893
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41860: LD_ADDR_VAR 0 10
41864: PUSH
41865: LD_VAR 0 10
41869: PUSH
41870: LD_VAR 0 6
41874: PPUSH
41875: CALL_OW 311
41879: PPUSH
41880: LD_INT 3
41882: PPUSH
41883: CALL_OW 259
41887: PUSH
41888: LD_INT 4
41890: MUL
41891: MUL
41892: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41893: LD_VAR 0 6
41897: PPUSH
41898: CALL_OW 263
41902: PUSH
41903: LD_INT 2
41905: EQUAL
41906: IFFALSE 41957
// begin j := IsControledBy ( i ) ;
41908: LD_ADDR_VAR 0 7
41912: PUSH
41913: LD_VAR 0 6
41917: PPUSH
41918: CALL_OW 312
41922: ST_TO_ADDR
// if j then
41923: LD_VAR 0 7
41927: IFFALSE 41957
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41929: LD_ADDR_VAR 0 10
41933: PUSH
41934: LD_VAR 0 10
41938: PUSH
41939: LD_VAR 0 7
41943: PPUSH
41944: LD_INT 3
41946: PPUSH
41947: CALL_OW 259
41951: PUSH
41952: LD_INT 3
41954: MUL
41955: MUL
41956: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41957: LD_VAR 0 6
41961: PPUSH
41962: CALL_OW 264
41966: PUSH
41967: LD_INT 5
41969: PUSH
41970: LD_INT 6
41972: PUSH
41973: LD_INT 46
41975: PUSH
41976: LD_INT 44
41978: PUSH
41979: LD_INT 47
41981: PUSH
41982: LD_INT 45
41984: PUSH
41985: LD_INT 28
41987: PUSH
41988: LD_INT 7
41990: PUSH
41991: LD_INT 27
41993: PUSH
41994: LD_INT 29
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: IN
42009: PUSH
42010: LD_VAR 0 1
42014: PPUSH
42015: LD_INT 52
42017: PPUSH
42018: CALL_OW 321
42022: PUSH
42023: LD_INT 2
42025: EQUAL
42026: AND
42027: IFFALSE 42044
// bpoints := bpoints * 1.2 ;
42029: LD_ADDR_VAR 0 10
42033: PUSH
42034: LD_VAR 0 10
42038: PUSH
42039: LD_REAL  1.20000000000000E+0000
42042: MUL
42043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42044: LD_VAR 0 6
42048: PPUSH
42049: CALL_OW 264
42053: PUSH
42054: LD_INT 6
42056: PUSH
42057: LD_INT 46
42059: PUSH
42060: LD_INT 47
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: IN
42068: IFFALSE 42085
// bpoints := bpoints * 1.2 ;
42070: LD_ADDR_VAR 0 10
42074: PUSH
42075: LD_VAR 0 10
42079: PUSH
42080: LD_REAL  1.20000000000000E+0000
42083: MUL
42084: ST_TO_ADDR
// end ; unit_building :
42085: GO 42099
42087: LD_INT 3
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42095
42093: GO 42098
42095: POP
// ; end ;
42096: GO 42099
42098: POP
// for j = 1 to 3 do
42099: LD_ADDR_VAR 0 7
42103: PUSH
42104: DOUBLE
42105: LD_INT 1
42107: DEC
42108: ST_TO_ADDR
42109: LD_INT 3
42111: PUSH
42112: FOR_TO
42113: IFFALSE 42166
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42115: LD_ADDR_VAR 0 5
42119: PUSH
42120: LD_VAR 0 5
42124: PPUSH
42125: LD_VAR 0 7
42129: PPUSH
42130: LD_VAR 0 5
42134: PUSH
42135: LD_VAR 0 7
42139: ARRAY
42140: PUSH
42141: LD_VAR 0 9
42145: PUSH
42146: LD_VAR 0 7
42150: ARRAY
42151: PUSH
42152: LD_VAR 0 10
42156: MUL
42157: PLUS
42158: PPUSH
42159: CALL_OW 1
42163: ST_TO_ADDR
42164: GO 42112
42166: POP
42167: POP
// end ;
42168: GO 40647
42170: POP
42171: POP
// result := Replace ( result , 4 , tmp ) ;
42172: LD_ADDR_VAR 0 5
42176: PUSH
42177: LD_VAR 0 5
42181: PPUSH
42182: LD_INT 4
42184: PPUSH
42185: LD_VAR 0 8
42189: PPUSH
42190: CALL_OW 1
42194: ST_TO_ADDR
// end ;
42195: LD_VAR 0 5
42199: RET
// export function DangerAtRange ( unit , range ) ; begin
42200: LD_INT 0
42202: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42203: LD_ADDR_VAR 0 3
42207: PUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: CALL_OW 255
42217: PPUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: CALL_OW 250
42227: PPUSH
42228: LD_VAR 0 1
42232: PPUSH
42233: CALL_OW 251
42237: PPUSH
42238: LD_VAR 0 2
42242: PPUSH
42243: CALL 40499 0 4
42247: ST_TO_ADDR
// end ;
42248: LD_VAR 0 3
42252: RET
// export function DangerInArea ( side , area ) ; begin
42253: LD_INT 0
42255: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42256: LD_ADDR_VAR 0 3
42260: PUSH
42261: LD_VAR 0 2
42265: PPUSH
42266: LD_INT 81
42268: PUSH
42269: LD_VAR 0 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PPUSH
42278: CALL_OW 70
42282: ST_TO_ADDR
// end ;
42283: LD_VAR 0 3
42287: RET
// export function IsExtension ( b ) ; begin
42288: LD_INT 0
42290: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42291: LD_ADDR_VAR 0 2
42295: PUSH
42296: LD_VAR 0 1
42300: PUSH
42301: LD_INT 23
42303: PUSH
42304: LD_INT 20
42306: PUSH
42307: LD_INT 22
42309: PUSH
42310: LD_INT 17
42312: PUSH
42313: LD_INT 24
42315: PUSH
42316: LD_INT 21
42318: PUSH
42319: LD_INT 19
42321: PUSH
42322: LD_INT 16
42324: PUSH
42325: LD_INT 25
42327: PUSH
42328: LD_INT 18
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: IN
42343: ST_TO_ADDR
// end ;
42344: LD_VAR 0 2
42348: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42349: LD_INT 0
42351: PPUSH
42352: PPUSH
42353: PPUSH
// result := [ ] ;
42354: LD_ADDR_VAR 0 4
42358: PUSH
42359: EMPTY
42360: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42361: LD_ADDR_VAR 0 5
42365: PUSH
42366: LD_VAR 0 2
42370: PPUSH
42371: LD_INT 21
42373: PUSH
42374: LD_INT 3
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PPUSH
42381: CALL_OW 70
42385: ST_TO_ADDR
// if not tmp then
42386: LD_VAR 0 5
42390: NOT
42391: IFFALSE 42395
// exit ;
42393: GO 42459
// if checkLink then
42395: LD_VAR 0 3
42399: IFFALSE 42449
// begin for i in tmp do
42401: LD_ADDR_VAR 0 6
42405: PUSH
42406: LD_VAR 0 5
42410: PUSH
42411: FOR_IN
42412: IFFALSE 42447
// if GetBase ( i ) <> base then
42414: LD_VAR 0 6
42418: PPUSH
42419: CALL_OW 274
42423: PUSH
42424: LD_VAR 0 1
42428: NONEQUAL
42429: IFFALSE 42445
// ComLinkToBase ( base , i ) ;
42431: LD_VAR 0 1
42435: PPUSH
42436: LD_VAR 0 6
42440: PPUSH
42441: CALL_OW 169
42445: GO 42411
42447: POP
42448: POP
// end ; result := tmp ;
42449: LD_ADDR_VAR 0 4
42453: PUSH
42454: LD_VAR 0 5
42458: ST_TO_ADDR
// end ;
42459: LD_VAR 0 4
42463: RET
// export function ComComplete ( units , b ) ; var i ; begin
42464: LD_INT 0
42466: PPUSH
42467: PPUSH
// if not units then
42468: LD_VAR 0 1
42472: NOT
42473: IFFALSE 42477
// exit ;
42475: GO 42567
// for i in units do
42477: LD_ADDR_VAR 0 4
42481: PUSH
42482: LD_VAR 0 1
42486: PUSH
42487: FOR_IN
42488: IFFALSE 42565
// if BuildingStatus ( b ) = bs_build then
42490: LD_VAR 0 2
42494: PPUSH
42495: CALL_OW 461
42499: PUSH
42500: LD_INT 1
42502: EQUAL
42503: IFFALSE 42563
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42505: LD_VAR 0 4
42509: PPUSH
42510: LD_STRING h
42512: PUSH
42513: LD_VAR 0 2
42517: PPUSH
42518: CALL_OW 250
42522: PUSH
42523: LD_VAR 0 2
42527: PPUSH
42528: CALL_OW 251
42532: PUSH
42533: LD_VAR 0 2
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: PUSH
42556: EMPTY
42557: LIST
42558: PPUSH
42559: CALL_OW 446
42563: GO 42487
42565: POP
42566: POP
// end ;
42567: LD_VAR 0 3
42571: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42572: LD_INT 0
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42580: LD_VAR 0 1
42584: NOT
42585: PUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 263
42595: PUSH
42596: LD_INT 2
42598: NONEQUAL
42599: OR
42600: IFFALSE 42604
// exit ;
42602: GO 42920
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42604: LD_ADDR_VAR 0 6
42608: PUSH
42609: LD_INT 22
42611: PUSH
42612: LD_VAR 0 1
42616: PPUSH
42617: CALL_OW 255
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 30
42631: PUSH
42632: LD_INT 36
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 34
42641: PUSH
42642: LD_INT 31
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PPUSH
42658: CALL_OW 69
42662: ST_TO_ADDR
// if not tmp then
42663: LD_VAR 0 6
42667: NOT
42668: IFFALSE 42672
// exit ;
42670: GO 42920
// result := [ ] ;
42672: LD_ADDR_VAR 0 2
42676: PUSH
42677: EMPTY
42678: ST_TO_ADDR
// for i in tmp do
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_VAR 0 6
42688: PUSH
42689: FOR_IN
42690: IFFALSE 42761
// begin t := UnitsInside ( i ) ;
42692: LD_ADDR_VAR 0 4
42696: PUSH
42697: LD_VAR 0 3
42701: PPUSH
42702: CALL_OW 313
42706: ST_TO_ADDR
// if t then
42707: LD_VAR 0 4
42711: IFFALSE 42759
// for j in t do
42713: LD_ADDR_VAR 0 7
42717: PUSH
42718: LD_VAR 0 4
42722: PUSH
42723: FOR_IN
42724: IFFALSE 42757
// result := Replace ( result , result + 1 , j ) ;
42726: LD_ADDR_VAR 0 2
42730: PUSH
42731: LD_VAR 0 2
42735: PPUSH
42736: LD_VAR 0 2
42740: PUSH
42741: LD_INT 1
42743: PLUS
42744: PPUSH
42745: LD_VAR 0 7
42749: PPUSH
42750: CALL_OW 1
42754: ST_TO_ADDR
42755: GO 42723
42757: POP
42758: POP
// end ;
42759: GO 42689
42761: POP
42762: POP
// if not result then
42763: LD_VAR 0 2
42767: NOT
42768: IFFALSE 42772
// exit ;
42770: GO 42920
// mech := result [ 1 ] ;
42772: LD_ADDR_VAR 0 5
42776: PUSH
42777: LD_VAR 0 2
42781: PUSH
42782: LD_INT 1
42784: ARRAY
42785: ST_TO_ADDR
// if result > 1 then
42786: LD_VAR 0 2
42790: PUSH
42791: LD_INT 1
42793: GREATER
42794: IFFALSE 42906
// begin for i = 2 to result do
42796: LD_ADDR_VAR 0 3
42800: PUSH
42801: DOUBLE
42802: LD_INT 2
42804: DEC
42805: ST_TO_ADDR
42806: LD_VAR 0 2
42810: PUSH
42811: FOR_TO
42812: IFFALSE 42904
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42814: LD_ADDR_VAR 0 4
42818: PUSH
42819: LD_VAR 0 2
42823: PUSH
42824: LD_VAR 0 3
42828: ARRAY
42829: PPUSH
42830: LD_INT 3
42832: PPUSH
42833: CALL_OW 259
42837: PUSH
42838: LD_VAR 0 2
42842: PUSH
42843: LD_VAR 0 3
42847: ARRAY
42848: PPUSH
42849: CALL_OW 432
42853: MINUS
42854: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42855: LD_VAR 0 4
42859: PUSH
42860: LD_VAR 0 5
42864: PPUSH
42865: LD_INT 3
42867: PPUSH
42868: CALL_OW 259
42872: PUSH
42873: LD_VAR 0 5
42877: PPUSH
42878: CALL_OW 432
42882: MINUS
42883: GREATEREQUAL
42884: IFFALSE 42902
// mech := result [ i ] ;
42886: LD_ADDR_VAR 0 5
42890: PUSH
42891: LD_VAR 0 2
42895: PUSH
42896: LD_VAR 0 3
42900: ARRAY
42901: ST_TO_ADDR
// end ;
42902: GO 42811
42904: POP
42905: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 5
42915: PPUSH
42916: CALL_OW 135
// end ;
42920: LD_VAR 0 2
42924: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42925: LD_INT 0
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
// result := [ ] ;
42940: LD_ADDR_VAR 0 7
42944: PUSH
42945: EMPTY
42946: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 266
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: IN
42967: NOT
42968: IFFALSE 42972
// exit ;
42970: GO 44606
// if name then
42972: LD_VAR 0 3
42976: IFFALSE 42992
// SetBName ( base_dep , name ) ;
42978: LD_VAR 0 1
42982: PPUSH
42983: LD_VAR 0 3
42987: PPUSH
42988: CALL_OW 500
// base := GetBase ( base_dep ) ;
42992: LD_ADDR_VAR 0 15
42996: PUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 274
43006: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43007: LD_ADDR_VAR 0 16
43011: PUSH
43012: LD_VAR 0 1
43016: PPUSH
43017: CALL_OW 255
43021: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43022: LD_ADDR_VAR 0 17
43026: PUSH
43027: LD_VAR 0 1
43031: PPUSH
43032: CALL_OW 248
43036: ST_TO_ADDR
// if sources then
43037: LD_VAR 0 5
43041: IFFALSE 43088
// for i = 1 to 3 do
43043: LD_ADDR_VAR 0 8
43047: PUSH
43048: DOUBLE
43049: LD_INT 1
43051: DEC
43052: ST_TO_ADDR
43053: LD_INT 3
43055: PUSH
43056: FOR_TO
43057: IFFALSE 43086
// AddResourceType ( base , i , sources [ i ] ) ;
43059: LD_VAR 0 15
43063: PPUSH
43064: LD_VAR 0 8
43068: PPUSH
43069: LD_VAR 0 5
43073: PUSH
43074: LD_VAR 0 8
43078: ARRAY
43079: PPUSH
43080: CALL_OW 276
43084: GO 43056
43086: POP
43087: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43088: LD_ADDR_VAR 0 18
43092: PUSH
43093: LD_VAR 0 15
43097: PPUSH
43098: LD_VAR 0 2
43102: PPUSH
43103: LD_INT 1
43105: PPUSH
43106: CALL 42349 0 3
43110: ST_TO_ADDR
// InitHc ;
43111: CALL_OW 19
// InitUc ;
43115: CALL_OW 18
// uc_side := side ;
43119: LD_ADDR_OWVAR 20
43123: PUSH
43124: LD_VAR 0 16
43128: ST_TO_ADDR
// uc_nation := nation ;
43129: LD_ADDR_OWVAR 21
43133: PUSH
43134: LD_VAR 0 17
43138: ST_TO_ADDR
// if buildings then
43139: LD_VAR 0 18
43143: IFFALSE 44465
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43145: LD_ADDR_VAR 0 19
43149: PUSH
43150: LD_VAR 0 18
43154: PPUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 30
43160: PUSH
43161: LD_INT 29
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 30
43170: PUSH
43171: LD_INT 30
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: PPUSH
43183: CALL_OW 72
43187: ST_TO_ADDR
// if tmp then
43188: LD_VAR 0 19
43192: IFFALSE 43240
// for i in tmp do
43194: LD_ADDR_VAR 0 8
43198: PUSH
43199: LD_VAR 0 19
43203: PUSH
43204: FOR_IN
43205: IFFALSE 43238
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43207: LD_VAR 0 8
43211: PPUSH
43212: CALL_OW 250
43216: PPUSH
43217: LD_VAR 0 8
43221: PPUSH
43222: CALL_OW 251
43226: PPUSH
43227: LD_VAR 0 16
43231: PPUSH
43232: CALL_OW 441
43236: GO 43204
43238: POP
43239: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43240: LD_VAR 0 18
43244: PPUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 30
43250: PUSH
43251: LD_INT 32
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 30
43260: PUSH
43261: LD_INT 33
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: PPUSH
43273: CALL_OW 72
43277: IFFALSE 43365
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43279: LD_ADDR_VAR 0 8
43283: PUSH
43284: LD_VAR 0 18
43288: PPUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 30
43294: PUSH
43295: LD_INT 32
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 30
43304: PUSH
43305: LD_INT 33
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: PPUSH
43317: CALL_OW 72
43321: PUSH
43322: FOR_IN
43323: IFFALSE 43363
// begin if not GetBWeapon ( i ) then
43325: LD_VAR 0 8
43329: PPUSH
43330: CALL_OW 269
43334: NOT
43335: IFFALSE 43361
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43337: LD_VAR 0 8
43341: PPUSH
43342: LD_VAR 0 8
43346: PPUSH
43347: LD_VAR 0 2
43351: PPUSH
43352: CALL 44611 0 2
43356: PPUSH
43357: CALL_OW 431
// end ;
43361: GO 43322
43363: POP
43364: POP
// end ; for i = 1 to personel do
43365: LD_ADDR_VAR 0 8
43369: PUSH
43370: DOUBLE
43371: LD_INT 1
43373: DEC
43374: ST_TO_ADDR
43375: LD_VAR 0 6
43379: PUSH
43380: FOR_TO
43381: IFFALSE 44445
// begin if i > 4 then
43383: LD_VAR 0 8
43387: PUSH
43388: LD_INT 4
43390: GREATER
43391: IFFALSE 43395
// break ;
43393: GO 44445
// case i of 1 :
43395: LD_VAR 0 8
43399: PUSH
43400: LD_INT 1
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43488
43408: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43409: LD_ADDR_VAR 0 12
43413: PUSH
43414: LD_VAR 0 18
43418: PPUSH
43419: LD_INT 22
43421: PUSH
43422: LD_VAR 0 16
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 58
43433: PUSH
43434: EMPTY
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: LD_INT 30
43442: PUSH
43443: LD_INT 32
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 30
43452: PUSH
43453: LD_INT 4
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 30
43462: PUSH
43463: LD_INT 5
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: PPUSH
43481: CALL_OW 72
43485: ST_TO_ADDR
43486: GO 43710
43488: LD_INT 2
43490: DOUBLE
43491: EQUAL
43492: IFTRUE 43496
43494: GO 43558
43496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43497: LD_ADDR_VAR 0 12
43501: PUSH
43502: LD_VAR 0 18
43506: PPUSH
43507: LD_INT 22
43509: PUSH
43510: LD_VAR 0 16
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 30
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 30
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PPUSH
43551: CALL_OW 72
43555: ST_TO_ADDR
43556: GO 43710
43558: LD_INT 3
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43566
43564: GO 43628
43566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43567: LD_ADDR_VAR 0 12
43571: PUSH
43572: LD_VAR 0 18
43576: PPUSH
43577: LD_INT 22
43579: PUSH
43580: LD_VAR 0 16
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 30
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 30
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: LIST
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PPUSH
43621: CALL_OW 72
43625: ST_TO_ADDR
43626: GO 43710
43628: LD_INT 4
43630: DOUBLE
43631: EQUAL
43632: IFTRUE 43636
43634: GO 43709
43636: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43637: LD_ADDR_VAR 0 12
43641: PUSH
43642: LD_VAR 0 18
43646: PPUSH
43647: LD_INT 22
43649: PUSH
43650: LD_VAR 0 16
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 30
43664: PUSH
43665: LD_INT 6
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 30
43674: PUSH
43675: LD_INT 7
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 30
43684: PUSH
43685: LD_INT 8
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PPUSH
43702: CALL_OW 72
43706: ST_TO_ADDR
43707: GO 43710
43709: POP
// if i = 1 then
43710: LD_VAR 0 8
43714: PUSH
43715: LD_INT 1
43717: EQUAL
43718: IFFALSE 43829
// begin tmp := [ ] ;
43720: LD_ADDR_VAR 0 19
43724: PUSH
43725: EMPTY
43726: ST_TO_ADDR
// for j in f do
43727: LD_ADDR_VAR 0 9
43731: PUSH
43732: LD_VAR 0 12
43736: PUSH
43737: FOR_IN
43738: IFFALSE 43811
// if GetBType ( j ) = b_bunker then
43740: LD_VAR 0 9
43744: PPUSH
43745: CALL_OW 266
43749: PUSH
43750: LD_INT 32
43752: EQUAL
43753: IFFALSE 43780
// tmp := Insert ( tmp , 1 , j ) else
43755: LD_ADDR_VAR 0 19
43759: PUSH
43760: LD_VAR 0 19
43764: PPUSH
43765: LD_INT 1
43767: PPUSH
43768: LD_VAR 0 9
43772: PPUSH
43773: CALL_OW 2
43777: ST_TO_ADDR
43778: GO 43809
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43780: LD_ADDR_VAR 0 19
43784: PUSH
43785: LD_VAR 0 19
43789: PPUSH
43790: LD_VAR 0 19
43794: PUSH
43795: LD_INT 1
43797: PLUS
43798: PPUSH
43799: LD_VAR 0 9
43803: PPUSH
43804: CALL_OW 2
43808: ST_TO_ADDR
43809: GO 43737
43811: POP
43812: POP
// if tmp then
43813: LD_VAR 0 19
43817: IFFALSE 43829
// f := tmp ;
43819: LD_ADDR_VAR 0 12
43823: PUSH
43824: LD_VAR 0 19
43828: ST_TO_ADDR
// end ; x := personel [ i ] ;
43829: LD_ADDR_VAR 0 13
43833: PUSH
43834: LD_VAR 0 6
43838: PUSH
43839: LD_VAR 0 8
43843: ARRAY
43844: ST_TO_ADDR
// if x = - 1 then
43845: LD_VAR 0 13
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: EQUAL
43854: IFFALSE 44063
// begin for j in f do
43856: LD_ADDR_VAR 0 9
43860: PUSH
43861: LD_VAR 0 12
43865: PUSH
43866: FOR_IN
43867: IFFALSE 44059
// repeat InitHc ;
43869: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43873: LD_VAR 0 9
43877: PPUSH
43878: CALL_OW 266
43882: PUSH
43883: LD_INT 5
43885: EQUAL
43886: IFFALSE 43956
// begin if UnitsInside ( j ) < 3 then
43888: LD_VAR 0 9
43892: PPUSH
43893: CALL_OW 313
43897: PUSH
43898: LD_INT 3
43900: LESS
43901: IFFALSE 43937
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43903: LD_INT 0
43905: PPUSH
43906: LD_INT 5
43908: PUSH
43909: LD_INT 8
43911: PUSH
43912: LD_INT 9
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: PUSH
43920: LD_VAR 0 17
43924: ARRAY
43925: PPUSH
43926: LD_VAR 0 4
43930: PPUSH
43931: CALL_OW 380
43935: GO 43954
// PrepareHuman ( false , i , skill ) ;
43937: LD_INT 0
43939: PPUSH
43940: LD_VAR 0 8
43944: PPUSH
43945: LD_VAR 0 4
43949: PPUSH
43950: CALL_OW 380
// end else
43954: GO 43973
// PrepareHuman ( false , i , skill ) ;
43956: LD_INT 0
43958: PPUSH
43959: LD_VAR 0 8
43963: PPUSH
43964: LD_VAR 0 4
43968: PPUSH
43969: CALL_OW 380
// un := CreateHuman ;
43973: LD_ADDR_VAR 0 14
43977: PUSH
43978: CALL_OW 44
43982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43983: LD_ADDR_VAR 0 7
43987: PUSH
43988: LD_VAR 0 7
43992: PPUSH
43993: LD_INT 1
43995: PPUSH
43996: LD_VAR 0 14
44000: PPUSH
44001: CALL_OW 2
44005: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44006: LD_VAR 0 14
44010: PPUSH
44011: LD_VAR 0 9
44015: PPUSH
44016: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44020: LD_VAR 0 9
44024: PPUSH
44025: CALL_OW 313
44029: PUSH
44030: LD_INT 6
44032: EQUAL
44033: PUSH
44034: LD_VAR 0 9
44038: PPUSH
44039: CALL_OW 266
44043: PUSH
44044: LD_INT 32
44046: PUSH
44047: LD_INT 31
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: IN
44054: OR
44055: IFFALSE 43869
44057: GO 43866
44059: POP
44060: POP
// end else
44061: GO 44443
// for j = 1 to x do
44063: LD_ADDR_VAR 0 9
44067: PUSH
44068: DOUBLE
44069: LD_INT 1
44071: DEC
44072: ST_TO_ADDR
44073: LD_VAR 0 13
44077: PUSH
44078: FOR_TO
44079: IFFALSE 44441
// begin InitHc ;
44081: CALL_OW 19
// if not f then
44085: LD_VAR 0 12
44089: NOT
44090: IFFALSE 44179
// begin PrepareHuman ( false , i , skill ) ;
44092: LD_INT 0
44094: PPUSH
44095: LD_VAR 0 8
44099: PPUSH
44100: LD_VAR 0 4
44104: PPUSH
44105: CALL_OW 380
// un := CreateHuman ;
44109: LD_ADDR_VAR 0 14
44113: PUSH
44114: CALL_OW 44
44118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44119: LD_ADDR_VAR 0 7
44123: PUSH
44124: LD_VAR 0 7
44128: PPUSH
44129: LD_INT 1
44131: PPUSH
44132: LD_VAR 0 14
44136: PPUSH
44137: CALL_OW 2
44141: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44142: LD_VAR 0 14
44146: PPUSH
44147: LD_VAR 0 1
44151: PPUSH
44152: CALL_OW 250
44156: PPUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: CALL_OW 251
44166: PPUSH
44167: LD_INT 10
44169: PPUSH
44170: LD_INT 0
44172: PPUSH
44173: CALL_OW 50
// continue ;
44177: GO 44078
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44179: LD_VAR 0 12
44183: PUSH
44184: LD_INT 1
44186: ARRAY
44187: PPUSH
44188: CALL_OW 313
44192: PUSH
44193: LD_VAR 0 12
44197: PUSH
44198: LD_INT 1
44200: ARRAY
44201: PPUSH
44202: CALL_OW 266
44206: PUSH
44207: LD_INT 32
44209: PUSH
44210: LD_INT 31
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: IN
44217: AND
44218: PUSH
44219: LD_VAR 0 12
44223: PUSH
44224: LD_INT 1
44226: ARRAY
44227: PPUSH
44228: CALL_OW 313
44232: PUSH
44233: LD_INT 6
44235: EQUAL
44236: OR
44237: IFFALSE 44257
// f := Delete ( f , 1 ) ;
44239: LD_ADDR_VAR 0 12
44243: PUSH
44244: LD_VAR 0 12
44248: PPUSH
44249: LD_INT 1
44251: PPUSH
44252: CALL_OW 3
44256: ST_TO_ADDR
// if not f then
44257: LD_VAR 0 12
44261: NOT
44262: IFFALSE 44280
// begin x := x + 2 ;
44264: LD_ADDR_VAR 0 13
44268: PUSH
44269: LD_VAR 0 13
44273: PUSH
44274: LD_INT 2
44276: PLUS
44277: ST_TO_ADDR
// continue ;
44278: GO 44078
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44280: LD_VAR 0 12
44284: PUSH
44285: LD_INT 1
44287: ARRAY
44288: PPUSH
44289: CALL_OW 266
44293: PUSH
44294: LD_INT 5
44296: EQUAL
44297: IFFALSE 44371
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44299: LD_VAR 0 12
44303: PUSH
44304: LD_INT 1
44306: ARRAY
44307: PPUSH
44308: CALL_OW 313
44312: PUSH
44313: LD_INT 3
44315: LESS
44316: IFFALSE 44352
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44318: LD_INT 0
44320: PPUSH
44321: LD_INT 5
44323: PUSH
44324: LD_INT 8
44326: PUSH
44327: LD_INT 9
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: PUSH
44335: LD_VAR 0 17
44339: ARRAY
44340: PPUSH
44341: LD_VAR 0 4
44345: PPUSH
44346: CALL_OW 380
44350: GO 44369
// PrepareHuman ( false , i , skill ) ;
44352: LD_INT 0
44354: PPUSH
44355: LD_VAR 0 8
44359: PPUSH
44360: LD_VAR 0 4
44364: PPUSH
44365: CALL_OW 380
// end else
44369: GO 44388
// PrepareHuman ( false , i , skill ) ;
44371: LD_INT 0
44373: PPUSH
44374: LD_VAR 0 8
44378: PPUSH
44379: LD_VAR 0 4
44383: PPUSH
44384: CALL_OW 380
// un := CreateHuman ;
44388: LD_ADDR_VAR 0 14
44392: PUSH
44393: CALL_OW 44
44397: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44398: LD_ADDR_VAR 0 7
44402: PUSH
44403: LD_VAR 0 7
44407: PPUSH
44408: LD_INT 1
44410: PPUSH
44411: LD_VAR 0 14
44415: PPUSH
44416: CALL_OW 2
44420: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44421: LD_VAR 0 14
44425: PPUSH
44426: LD_VAR 0 12
44430: PUSH
44431: LD_INT 1
44433: ARRAY
44434: PPUSH
44435: CALL_OW 52
// end ;
44439: GO 44078
44441: POP
44442: POP
// end ;
44443: GO 43380
44445: POP
44446: POP
// result := result ^ buildings ;
44447: LD_ADDR_VAR 0 7
44451: PUSH
44452: LD_VAR 0 7
44456: PUSH
44457: LD_VAR 0 18
44461: ADD
44462: ST_TO_ADDR
// end else
44463: GO 44606
// begin for i = 1 to personel do
44465: LD_ADDR_VAR 0 8
44469: PUSH
44470: DOUBLE
44471: LD_INT 1
44473: DEC
44474: ST_TO_ADDR
44475: LD_VAR 0 6
44479: PUSH
44480: FOR_TO
44481: IFFALSE 44604
// begin if i > 4 then
44483: LD_VAR 0 8
44487: PUSH
44488: LD_INT 4
44490: GREATER
44491: IFFALSE 44495
// break ;
44493: GO 44604
// x := personel [ i ] ;
44495: LD_ADDR_VAR 0 13
44499: PUSH
44500: LD_VAR 0 6
44504: PUSH
44505: LD_VAR 0 8
44509: ARRAY
44510: ST_TO_ADDR
// if x = - 1 then
44511: LD_VAR 0 13
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: EQUAL
44520: IFFALSE 44524
// continue ;
44522: GO 44480
// PrepareHuman ( false , i , skill ) ;
44524: LD_INT 0
44526: PPUSH
44527: LD_VAR 0 8
44531: PPUSH
44532: LD_VAR 0 4
44536: PPUSH
44537: CALL_OW 380
// un := CreateHuman ;
44541: LD_ADDR_VAR 0 14
44545: PUSH
44546: CALL_OW 44
44550: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44551: LD_VAR 0 14
44555: PPUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 250
44565: PPUSH
44566: LD_VAR 0 1
44570: PPUSH
44571: CALL_OW 251
44575: PPUSH
44576: LD_INT 10
44578: PPUSH
44579: LD_INT 0
44581: PPUSH
44582: CALL_OW 50
// result := result ^ un ;
44586: LD_ADDR_VAR 0 7
44590: PUSH
44591: LD_VAR 0 7
44595: PUSH
44596: LD_VAR 0 14
44600: ADD
44601: ST_TO_ADDR
// end ;
44602: GO 44480
44604: POP
44605: POP
// end ; end ;
44606: LD_VAR 0 7
44610: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44611: LD_INT 0
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
// result := false ;
44629: LD_ADDR_VAR 0 3
44633: PUSH
44634: LD_INT 0
44636: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44637: LD_VAR 0 1
44641: NOT
44642: PUSH
44643: LD_VAR 0 1
44647: PPUSH
44648: CALL_OW 266
44652: PUSH
44653: LD_INT 32
44655: PUSH
44656: LD_INT 33
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: IN
44663: NOT
44664: OR
44665: IFFALSE 44669
// exit ;
44667: GO 45778
// nat := GetNation ( tower ) ;
44669: LD_ADDR_VAR 0 12
44673: PUSH
44674: LD_VAR 0 1
44678: PPUSH
44679: CALL_OW 248
44683: ST_TO_ADDR
// side := GetSide ( tower ) ;
44684: LD_ADDR_VAR 0 16
44688: PUSH
44689: LD_VAR 0 1
44693: PPUSH
44694: CALL_OW 255
44698: ST_TO_ADDR
// x := GetX ( tower ) ;
44699: LD_ADDR_VAR 0 10
44703: PUSH
44704: LD_VAR 0 1
44708: PPUSH
44709: CALL_OW 250
44713: ST_TO_ADDR
// y := GetY ( tower ) ;
44714: LD_ADDR_VAR 0 11
44718: PUSH
44719: LD_VAR 0 1
44723: PPUSH
44724: CALL_OW 251
44728: ST_TO_ADDR
// if not x or not y then
44729: LD_VAR 0 10
44733: NOT
44734: PUSH
44735: LD_VAR 0 11
44739: NOT
44740: OR
44741: IFFALSE 44745
// exit ;
44743: GO 45778
// weapon := 0 ;
44745: LD_ADDR_VAR 0 18
44749: PUSH
44750: LD_INT 0
44752: ST_TO_ADDR
// fac_list := [ ] ;
44753: LD_ADDR_VAR 0 17
44757: PUSH
44758: EMPTY
44759: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44760: LD_ADDR_VAR 0 6
44764: PUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: CALL_OW 274
44774: PPUSH
44775: LD_VAR 0 2
44779: PPUSH
44780: LD_INT 0
44782: PPUSH
44783: CALL 42349 0 3
44787: PPUSH
44788: LD_INT 30
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PPUSH
44798: CALL_OW 72
44802: ST_TO_ADDR
// if not factories then
44803: LD_VAR 0 6
44807: NOT
44808: IFFALSE 44812
// exit ;
44810: GO 45778
// for i in factories do
44812: LD_ADDR_VAR 0 8
44816: PUSH
44817: LD_VAR 0 6
44821: PUSH
44822: FOR_IN
44823: IFFALSE 44848
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44825: LD_ADDR_VAR 0 17
44829: PUSH
44830: LD_VAR 0 17
44834: PUSH
44835: LD_VAR 0 8
44839: PPUSH
44840: CALL_OW 478
44844: UNION
44845: ST_TO_ADDR
44846: GO 44822
44848: POP
44849: POP
// if not fac_list then
44850: LD_VAR 0 17
44854: NOT
44855: IFFALSE 44859
// exit ;
44857: GO 45778
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44859: LD_ADDR_VAR 0 5
44863: PUSH
44864: LD_INT 4
44866: PUSH
44867: LD_INT 5
44869: PUSH
44870: LD_INT 9
44872: PUSH
44873: LD_INT 10
44875: PUSH
44876: LD_INT 6
44878: PUSH
44879: LD_INT 7
44881: PUSH
44882: LD_INT 11
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 27
44896: PUSH
44897: LD_INT 28
44899: PUSH
44900: LD_INT 26
44902: PUSH
44903: LD_INT 30
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 43
44914: PUSH
44915: LD_INT 44
44917: PUSH
44918: LD_INT 46
44920: PUSH
44921: LD_INT 45
44923: PUSH
44924: LD_INT 47
44926: PUSH
44927: LD_INT 49
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: PUSH
44943: LD_VAR 0 12
44947: ARRAY
44948: ST_TO_ADDR
// list := list isect fac_list ;
44949: LD_ADDR_VAR 0 5
44953: PUSH
44954: LD_VAR 0 5
44958: PUSH
44959: LD_VAR 0 17
44963: ISECT
44964: ST_TO_ADDR
// if not list then
44965: LD_VAR 0 5
44969: NOT
44970: IFFALSE 44974
// exit ;
44972: GO 45778
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44974: LD_VAR 0 12
44978: PUSH
44979: LD_INT 3
44981: EQUAL
44982: PUSH
44983: LD_INT 49
44985: PUSH
44986: LD_VAR 0 5
44990: IN
44991: AND
44992: PUSH
44993: LD_INT 31
44995: PPUSH
44996: LD_VAR 0 16
45000: PPUSH
45001: CALL_OW 321
45005: PUSH
45006: LD_INT 2
45008: EQUAL
45009: AND
45010: IFFALSE 45070
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45012: LD_INT 22
45014: PUSH
45015: LD_VAR 0 16
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 35
45026: PUSH
45027: LD_INT 49
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 91
45036: PUSH
45037: LD_VAR 0 1
45041: PUSH
45042: LD_INT 10
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: PPUSH
45055: CALL_OW 69
45059: NOT
45060: IFFALSE 45070
// weapon := ru_time_lapser ;
45062: LD_ADDR_VAR 0 18
45066: PUSH
45067: LD_INT 49
45069: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45070: LD_VAR 0 12
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: IN
45085: PUSH
45086: LD_INT 11
45088: PUSH
45089: LD_VAR 0 5
45093: IN
45094: PUSH
45095: LD_INT 30
45097: PUSH
45098: LD_VAR 0 5
45102: IN
45103: OR
45104: AND
45105: PUSH
45106: LD_INT 6
45108: PPUSH
45109: LD_VAR 0 16
45113: PPUSH
45114: CALL_OW 321
45118: PUSH
45119: LD_INT 2
45121: EQUAL
45122: AND
45123: IFFALSE 45288
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45125: LD_INT 22
45127: PUSH
45128: LD_VAR 0 16
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 35
45142: PUSH
45143: LD_INT 11
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 35
45152: PUSH
45153: LD_INT 30
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 91
45167: PUSH
45168: LD_VAR 0 1
45172: PUSH
45173: LD_INT 18
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: PPUSH
45186: CALL_OW 69
45190: NOT
45191: PUSH
45192: LD_INT 22
45194: PUSH
45195: LD_VAR 0 16
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 30
45209: PUSH
45210: LD_INT 32
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 30
45219: PUSH
45220: LD_INT 33
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 91
45234: PUSH
45235: LD_VAR 0 1
45239: PUSH
45240: LD_INT 12
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: PUSH
45253: EMPTY
45254: LIST
45255: PPUSH
45256: CALL_OW 69
45260: PUSH
45261: LD_INT 2
45263: GREATER
45264: AND
45265: IFFALSE 45288
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45267: LD_ADDR_VAR 0 18
45271: PUSH
45272: LD_INT 11
45274: PUSH
45275: LD_INT 30
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_VAR 0 12
45286: ARRAY
45287: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45288: LD_VAR 0 18
45292: NOT
45293: PUSH
45294: LD_INT 40
45296: PPUSH
45297: LD_VAR 0 16
45301: PPUSH
45302: CALL_OW 321
45306: PUSH
45307: LD_INT 2
45309: EQUAL
45310: AND
45311: PUSH
45312: LD_INT 7
45314: PUSH
45315: LD_VAR 0 5
45319: IN
45320: PUSH
45321: LD_INT 28
45323: PUSH
45324: LD_VAR 0 5
45328: IN
45329: OR
45330: PUSH
45331: LD_INT 45
45333: PUSH
45334: LD_VAR 0 5
45338: IN
45339: OR
45340: AND
45341: IFFALSE 45595
// begin hex := GetHexInfo ( x , y ) ;
45343: LD_ADDR_VAR 0 4
45347: PUSH
45348: LD_VAR 0 10
45352: PPUSH
45353: LD_VAR 0 11
45357: PPUSH
45358: CALL_OW 546
45362: ST_TO_ADDR
// if hex [ 1 ] then
45363: LD_VAR 0 4
45367: PUSH
45368: LD_INT 1
45370: ARRAY
45371: IFFALSE 45375
// exit ;
45373: GO 45778
// height := hex [ 2 ] ;
45375: LD_ADDR_VAR 0 15
45379: PUSH
45380: LD_VAR 0 4
45384: PUSH
45385: LD_INT 2
45387: ARRAY
45388: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45389: LD_ADDR_VAR 0 14
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 3
45402: PUSH
45403: LD_INT 5
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: ST_TO_ADDR
// for i in tmp do
45412: LD_ADDR_VAR 0 8
45416: PUSH
45417: LD_VAR 0 14
45421: PUSH
45422: FOR_IN
45423: IFFALSE 45593
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45425: LD_ADDR_VAR 0 9
45429: PUSH
45430: LD_VAR 0 10
45434: PPUSH
45435: LD_VAR 0 8
45439: PPUSH
45440: LD_INT 5
45442: PPUSH
45443: CALL_OW 272
45447: PUSH
45448: LD_VAR 0 11
45452: PPUSH
45453: LD_VAR 0 8
45457: PPUSH
45458: LD_INT 5
45460: PPUSH
45461: CALL_OW 273
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45470: LD_VAR 0 9
45474: PUSH
45475: LD_INT 1
45477: ARRAY
45478: PPUSH
45479: LD_VAR 0 9
45483: PUSH
45484: LD_INT 2
45486: ARRAY
45487: PPUSH
45488: CALL_OW 488
45492: IFFALSE 45591
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45494: LD_ADDR_VAR 0 4
45498: PUSH
45499: LD_VAR 0 9
45503: PUSH
45504: LD_INT 1
45506: ARRAY
45507: PPUSH
45508: LD_VAR 0 9
45512: PUSH
45513: LD_INT 2
45515: ARRAY
45516: PPUSH
45517: CALL_OW 546
45521: ST_TO_ADDR
// if hex [ 1 ] then
45522: LD_VAR 0 4
45526: PUSH
45527: LD_INT 1
45529: ARRAY
45530: IFFALSE 45534
// continue ;
45532: GO 45422
// h := hex [ 2 ] ;
45534: LD_ADDR_VAR 0 13
45538: PUSH
45539: LD_VAR 0 4
45543: PUSH
45544: LD_INT 2
45546: ARRAY
45547: ST_TO_ADDR
// if h + 7 < height then
45548: LD_VAR 0 13
45552: PUSH
45553: LD_INT 7
45555: PLUS
45556: PUSH
45557: LD_VAR 0 15
45561: LESS
45562: IFFALSE 45591
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45564: LD_ADDR_VAR 0 18
45568: PUSH
45569: LD_INT 7
45571: PUSH
45572: LD_INT 28
45574: PUSH
45575: LD_INT 45
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: PUSH
45583: LD_VAR 0 12
45587: ARRAY
45588: ST_TO_ADDR
// break ;
45589: GO 45593
// end ; end ; end ;
45591: GO 45422
45593: POP
45594: POP
// end ; if not weapon then
45595: LD_VAR 0 18
45599: NOT
45600: IFFALSE 45660
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45602: LD_ADDR_VAR 0 5
45606: PUSH
45607: LD_VAR 0 5
45611: PUSH
45612: LD_INT 11
45614: PUSH
45615: LD_INT 30
45617: PUSH
45618: LD_INT 49
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: DIFF
45626: ST_TO_ADDR
// if not list then
45627: LD_VAR 0 5
45631: NOT
45632: IFFALSE 45636
// exit ;
45634: GO 45778
// weapon := list [ rand ( 1 , list ) ] ;
45636: LD_ADDR_VAR 0 18
45640: PUSH
45641: LD_VAR 0 5
45645: PUSH
45646: LD_INT 1
45648: PPUSH
45649: LD_VAR 0 5
45653: PPUSH
45654: CALL_OW 12
45658: ARRAY
45659: ST_TO_ADDR
// end ; if weapon then
45660: LD_VAR 0 18
45664: IFFALSE 45778
// begin tmp := CostOfWeapon ( weapon ) ;
45666: LD_ADDR_VAR 0 14
45670: PUSH
45671: LD_VAR 0 18
45675: PPUSH
45676: CALL_OW 451
45680: ST_TO_ADDR
// j := GetBase ( tower ) ;
45681: LD_ADDR_VAR 0 9
45685: PUSH
45686: LD_VAR 0 1
45690: PPUSH
45691: CALL_OW 274
45695: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45696: LD_VAR 0 9
45700: PPUSH
45701: LD_INT 1
45703: PPUSH
45704: CALL_OW 275
45708: PUSH
45709: LD_VAR 0 14
45713: PUSH
45714: LD_INT 1
45716: ARRAY
45717: GREATEREQUAL
45718: PUSH
45719: LD_VAR 0 9
45723: PPUSH
45724: LD_INT 2
45726: PPUSH
45727: CALL_OW 275
45731: PUSH
45732: LD_VAR 0 14
45736: PUSH
45737: LD_INT 2
45739: ARRAY
45740: GREATEREQUAL
45741: AND
45742: PUSH
45743: LD_VAR 0 9
45747: PPUSH
45748: LD_INT 3
45750: PPUSH
45751: CALL_OW 275
45755: PUSH
45756: LD_VAR 0 14
45760: PUSH
45761: LD_INT 3
45763: ARRAY
45764: GREATEREQUAL
45765: AND
45766: IFFALSE 45778
// result := weapon ;
45768: LD_ADDR_VAR 0 3
45772: PUSH
45773: LD_VAR 0 18
45777: ST_TO_ADDR
// end ; end ;
45778: LD_VAR 0 3
45782: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45783: LD_INT 0
45785: PPUSH
45786: PPUSH
// result := true ;
45787: LD_ADDR_VAR 0 3
45791: PUSH
45792: LD_INT 1
45794: ST_TO_ADDR
// if array1 = array2 then
45795: LD_VAR 0 1
45799: PUSH
45800: LD_VAR 0 2
45804: EQUAL
45805: IFFALSE 45865
// begin for i = 1 to array1 do
45807: LD_ADDR_VAR 0 4
45811: PUSH
45812: DOUBLE
45813: LD_INT 1
45815: DEC
45816: ST_TO_ADDR
45817: LD_VAR 0 1
45821: PUSH
45822: FOR_TO
45823: IFFALSE 45861
// if array1 [ i ] <> array2 [ i ] then
45825: LD_VAR 0 1
45829: PUSH
45830: LD_VAR 0 4
45834: ARRAY
45835: PUSH
45836: LD_VAR 0 2
45840: PUSH
45841: LD_VAR 0 4
45845: ARRAY
45846: NONEQUAL
45847: IFFALSE 45859
// begin result := false ;
45849: LD_ADDR_VAR 0 3
45853: PUSH
45854: LD_INT 0
45856: ST_TO_ADDR
// break ;
45857: GO 45861
// end ;
45859: GO 45822
45861: POP
45862: POP
// end else
45863: GO 45873
// result := false ;
45865: LD_ADDR_VAR 0 3
45869: PUSH
45870: LD_INT 0
45872: ST_TO_ADDR
// end ;
45873: LD_VAR 0 3
45877: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45878: LD_INT 0
45880: PPUSH
45881: PPUSH
// if not array1 or not array2 then
45882: LD_VAR 0 1
45886: NOT
45887: PUSH
45888: LD_VAR 0 2
45892: NOT
45893: OR
45894: IFFALSE 45898
// exit ;
45896: GO 45962
// result := true ;
45898: LD_ADDR_VAR 0 3
45902: PUSH
45903: LD_INT 1
45905: ST_TO_ADDR
// for i = 1 to array1 do
45906: LD_ADDR_VAR 0 4
45910: PUSH
45911: DOUBLE
45912: LD_INT 1
45914: DEC
45915: ST_TO_ADDR
45916: LD_VAR 0 1
45920: PUSH
45921: FOR_TO
45922: IFFALSE 45960
// if array1 [ i ] <> array2 [ i ] then
45924: LD_VAR 0 1
45928: PUSH
45929: LD_VAR 0 4
45933: ARRAY
45934: PUSH
45935: LD_VAR 0 2
45939: PUSH
45940: LD_VAR 0 4
45944: ARRAY
45945: NONEQUAL
45946: IFFALSE 45958
// begin result := false ;
45948: LD_ADDR_VAR 0 3
45952: PUSH
45953: LD_INT 0
45955: ST_TO_ADDR
// break ;
45956: GO 45960
// end ;
45958: GO 45921
45960: POP
45961: POP
// end ;
45962: LD_VAR 0 3
45966: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45967: LD_INT 0
45969: PPUSH
45970: PPUSH
45971: PPUSH
// pom := GetBase ( fac ) ;
45972: LD_ADDR_VAR 0 5
45976: PUSH
45977: LD_VAR 0 1
45981: PPUSH
45982: CALL_OW 274
45986: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45987: LD_ADDR_VAR 0 4
45991: PUSH
45992: LD_VAR 0 2
45996: PUSH
45997: LD_INT 1
45999: ARRAY
46000: PPUSH
46001: LD_VAR 0 2
46005: PUSH
46006: LD_INT 2
46008: ARRAY
46009: PPUSH
46010: LD_VAR 0 2
46014: PUSH
46015: LD_INT 3
46017: ARRAY
46018: PPUSH
46019: LD_VAR 0 2
46023: PUSH
46024: LD_INT 4
46026: ARRAY
46027: PPUSH
46028: CALL_OW 449
46032: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46033: LD_ADDR_VAR 0 3
46037: PUSH
46038: LD_VAR 0 5
46042: PPUSH
46043: LD_INT 1
46045: PPUSH
46046: CALL_OW 275
46050: PUSH
46051: LD_VAR 0 4
46055: PUSH
46056: LD_INT 1
46058: ARRAY
46059: GREATEREQUAL
46060: PUSH
46061: LD_VAR 0 5
46065: PPUSH
46066: LD_INT 2
46068: PPUSH
46069: CALL_OW 275
46073: PUSH
46074: LD_VAR 0 4
46078: PUSH
46079: LD_INT 2
46081: ARRAY
46082: GREATEREQUAL
46083: AND
46084: PUSH
46085: LD_VAR 0 5
46089: PPUSH
46090: LD_INT 3
46092: PPUSH
46093: CALL_OW 275
46097: PUSH
46098: LD_VAR 0 4
46102: PUSH
46103: LD_INT 3
46105: ARRAY
46106: GREATEREQUAL
46107: AND
46108: ST_TO_ADDR
// end ;
46109: LD_VAR 0 3
46113: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46114: LD_INT 0
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
// pom := GetBase ( building ) ;
46120: LD_ADDR_VAR 0 3
46124: PUSH
46125: LD_VAR 0 1
46129: PPUSH
46130: CALL_OW 274
46134: ST_TO_ADDR
// if not pom then
46135: LD_VAR 0 3
46139: NOT
46140: IFFALSE 46144
// exit ;
46142: GO 46314
// btype := GetBType ( building ) ;
46144: LD_ADDR_VAR 0 5
46148: PUSH
46149: LD_VAR 0 1
46153: PPUSH
46154: CALL_OW 266
46158: ST_TO_ADDR
// if btype = b_armoury then
46159: LD_VAR 0 5
46163: PUSH
46164: LD_INT 4
46166: EQUAL
46167: IFFALSE 46177
// btype := b_barracks ;
46169: LD_ADDR_VAR 0 5
46173: PUSH
46174: LD_INT 5
46176: ST_TO_ADDR
// if btype = b_depot then
46177: LD_VAR 0 5
46181: PUSH
46182: LD_INT 0
46184: EQUAL
46185: IFFALSE 46195
// btype := b_warehouse ;
46187: LD_ADDR_VAR 0 5
46191: PUSH
46192: LD_INT 1
46194: ST_TO_ADDR
// if btype = b_workshop then
46195: LD_VAR 0 5
46199: PUSH
46200: LD_INT 2
46202: EQUAL
46203: IFFALSE 46213
// btype := b_factory ;
46205: LD_ADDR_VAR 0 5
46209: PUSH
46210: LD_INT 3
46212: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46213: LD_ADDR_VAR 0 4
46217: PUSH
46218: LD_VAR 0 5
46222: PPUSH
46223: LD_VAR 0 1
46227: PPUSH
46228: CALL_OW 248
46232: PPUSH
46233: CALL_OW 450
46237: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46238: LD_ADDR_VAR 0 2
46242: PUSH
46243: LD_VAR 0 3
46247: PPUSH
46248: LD_INT 1
46250: PPUSH
46251: CALL_OW 275
46255: PUSH
46256: LD_VAR 0 4
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: GREATEREQUAL
46265: PUSH
46266: LD_VAR 0 3
46270: PPUSH
46271: LD_INT 2
46273: PPUSH
46274: CALL_OW 275
46278: PUSH
46279: LD_VAR 0 4
46283: PUSH
46284: LD_INT 2
46286: ARRAY
46287: GREATEREQUAL
46288: AND
46289: PUSH
46290: LD_VAR 0 3
46294: PPUSH
46295: LD_INT 3
46297: PPUSH
46298: CALL_OW 275
46302: PUSH
46303: LD_VAR 0 4
46307: PUSH
46308: LD_INT 3
46310: ARRAY
46311: GREATEREQUAL
46312: AND
46313: ST_TO_ADDR
// end ;
46314: LD_VAR 0 2
46318: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46319: LD_INT 0
46321: PPUSH
46322: PPUSH
46323: PPUSH
// pom := GetBase ( building ) ;
46324: LD_ADDR_VAR 0 4
46328: PUSH
46329: LD_VAR 0 1
46333: PPUSH
46334: CALL_OW 274
46338: ST_TO_ADDR
// if not pom then
46339: LD_VAR 0 4
46343: NOT
46344: IFFALSE 46348
// exit ;
46346: GO 46449
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46348: LD_ADDR_VAR 0 5
46352: PUSH
46353: LD_VAR 0 2
46357: PPUSH
46358: LD_VAR 0 1
46362: PPUSH
46363: CALL_OW 248
46367: PPUSH
46368: CALL_OW 450
46372: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46373: LD_ADDR_VAR 0 3
46377: PUSH
46378: LD_VAR 0 4
46382: PPUSH
46383: LD_INT 1
46385: PPUSH
46386: CALL_OW 275
46390: PUSH
46391: LD_VAR 0 5
46395: PUSH
46396: LD_INT 1
46398: ARRAY
46399: GREATEREQUAL
46400: PUSH
46401: LD_VAR 0 4
46405: PPUSH
46406: LD_INT 2
46408: PPUSH
46409: CALL_OW 275
46413: PUSH
46414: LD_VAR 0 5
46418: PUSH
46419: LD_INT 2
46421: ARRAY
46422: GREATEREQUAL
46423: AND
46424: PUSH
46425: LD_VAR 0 4
46429: PPUSH
46430: LD_INT 3
46432: PPUSH
46433: CALL_OW 275
46437: PUSH
46438: LD_VAR 0 5
46442: PUSH
46443: LD_INT 3
46445: ARRAY
46446: GREATEREQUAL
46447: AND
46448: ST_TO_ADDR
// end ;
46449: LD_VAR 0 3
46453: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46454: LD_INT 0
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
// result := false ;
46467: LD_ADDR_VAR 0 8
46471: PUSH
46472: LD_INT 0
46474: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46475: LD_VAR 0 5
46479: NOT
46480: PUSH
46481: LD_VAR 0 1
46485: NOT
46486: OR
46487: PUSH
46488: LD_VAR 0 2
46492: NOT
46493: OR
46494: PUSH
46495: LD_VAR 0 3
46499: NOT
46500: OR
46501: IFFALSE 46505
// exit ;
46503: GO 47319
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46505: LD_ADDR_VAR 0 14
46509: PUSH
46510: LD_VAR 0 1
46514: PPUSH
46515: LD_VAR 0 2
46519: PPUSH
46520: LD_VAR 0 3
46524: PPUSH
46525: LD_VAR 0 4
46529: PPUSH
46530: LD_VAR 0 5
46534: PUSH
46535: LD_INT 1
46537: ARRAY
46538: PPUSH
46539: CALL_OW 248
46543: PPUSH
46544: LD_INT 0
46546: PPUSH
46547: CALL 48552 0 6
46551: ST_TO_ADDR
// if not hexes then
46552: LD_VAR 0 14
46556: NOT
46557: IFFALSE 46561
// exit ;
46559: GO 47319
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46561: LD_ADDR_VAR 0 17
46565: PUSH
46566: LD_VAR 0 5
46570: PPUSH
46571: LD_INT 22
46573: PUSH
46574: LD_VAR 0 13
46578: PPUSH
46579: CALL_OW 255
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 30
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 30
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PPUSH
46620: CALL_OW 72
46624: ST_TO_ADDR
// for i = 1 to hexes do
46625: LD_ADDR_VAR 0 9
46629: PUSH
46630: DOUBLE
46631: LD_INT 1
46633: DEC
46634: ST_TO_ADDR
46635: LD_VAR 0 14
46639: PUSH
46640: FOR_TO
46641: IFFALSE 47317
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46643: LD_ADDR_VAR 0 13
46647: PUSH
46648: LD_VAR 0 14
46652: PUSH
46653: LD_VAR 0 9
46657: ARRAY
46658: PUSH
46659: LD_INT 1
46661: ARRAY
46662: PPUSH
46663: LD_VAR 0 14
46667: PUSH
46668: LD_VAR 0 9
46672: ARRAY
46673: PUSH
46674: LD_INT 2
46676: ARRAY
46677: PPUSH
46678: CALL_OW 428
46682: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46683: LD_VAR 0 14
46687: PUSH
46688: LD_VAR 0 9
46692: ARRAY
46693: PUSH
46694: LD_INT 1
46696: ARRAY
46697: PPUSH
46698: LD_VAR 0 14
46702: PUSH
46703: LD_VAR 0 9
46707: ARRAY
46708: PUSH
46709: LD_INT 2
46711: ARRAY
46712: PPUSH
46713: CALL_OW 351
46717: PUSH
46718: LD_VAR 0 14
46722: PUSH
46723: LD_VAR 0 9
46727: ARRAY
46728: PUSH
46729: LD_INT 1
46731: ARRAY
46732: PPUSH
46733: LD_VAR 0 14
46737: PUSH
46738: LD_VAR 0 9
46742: ARRAY
46743: PUSH
46744: LD_INT 2
46746: ARRAY
46747: PPUSH
46748: CALL_OW 488
46752: NOT
46753: OR
46754: PUSH
46755: LD_VAR 0 13
46759: PPUSH
46760: CALL_OW 247
46764: PUSH
46765: LD_INT 3
46767: EQUAL
46768: OR
46769: IFFALSE 46775
// exit ;
46771: POP
46772: POP
46773: GO 47319
// if not tmp then
46775: LD_VAR 0 13
46779: NOT
46780: IFFALSE 46784
// continue ;
46782: GO 46640
// result := true ;
46784: LD_ADDR_VAR 0 8
46788: PUSH
46789: LD_INT 1
46791: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46792: LD_VAR 0 6
46796: PUSH
46797: LD_VAR 0 13
46801: PPUSH
46802: CALL_OW 247
46806: PUSH
46807: LD_INT 2
46809: EQUAL
46810: AND
46811: PUSH
46812: LD_VAR 0 13
46816: PPUSH
46817: CALL_OW 263
46821: PUSH
46822: LD_INT 1
46824: EQUAL
46825: AND
46826: IFFALSE 46990
// begin if IsDrivenBy ( tmp ) then
46828: LD_VAR 0 13
46832: PPUSH
46833: CALL_OW 311
46837: IFFALSE 46841
// continue ;
46839: GO 46640
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46841: LD_VAR 0 6
46845: PPUSH
46846: LD_INT 3
46848: PUSH
46849: LD_INT 60
46851: PUSH
46852: EMPTY
46853: LIST
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: LD_INT 55
46864: PUSH
46865: EMPTY
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PPUSH
46876: CALL_OW 72
46880: IFFALSE 46988
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46882: LD_ADDR_VAR 0 18
46886: PUSH
46887: LD_VAR 0 6
46891: PPUSH
46892: LD_INT 3
46894: PUSH
46895: LD_INT 60
46897: PUSH
46898: EMPTY
46899: LIST
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 3
46907: PUSH
46908: LD_INT 55
46910: PUSH
46911: EMPTY
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PPUSH
46922: CALL_OW 72
46926: PUSH
46927: LD_INT 1
46929: ARRAY
46930: ST_TO_ADDR
// if IsInUnit ( driver ) then
46931: LD_VAR 0 18
46935: PPUSH
46936: CALL_OW 310
46940: IFFALSE 46951
// ComExit ( driver ) ;
46942: LD_VAR 0 18
46946: PPUSH
46947: CALL 72313 0 1
// AddComEnterUnit ( driver , tmp ) ;
46951: LD_VAR 0 18
46955: PPUSH
46956: LD_VAR 0 13
46960: PPUSH
46961: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46965: LD_VAR 0 18
46969: PPUSH
46970: LD_VAR 0 7
46974: PPUSH
46975: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46979: LD_VAR 0 18
46983: PPUSH
46984: CALL_OW 181
// end ; continue ;
46988: GO 46640
// end ; if not cleaners or not tmp in cleaners then
46990: LD_VAR 0 6
46994: NOT
46995: PUSH
46996: LD_VAR 0 13
47000: PUSH
47001: LD_VAR 0 6
47005: IN
47006: NOT
47007: OR
47008: IFFALSE 47315
// begin if dep then
47010: LD_VAR 0 17
47014: IFFALSE 47150
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47016: LD_ADDR_VAR 0 16
47020: PUSH
47021: LD_VAR 0 17
47025: PUSH
47026: LD_INT 1
47028: ARRAY
47029: PPUSH
47030: CALL_OW 250
47034: PPUSH
47035: LD_VAR 0 17
47039: PUSH
47040: LD_INT 1
47042: ARRAY
47043: PPUSH
47044: CALL_OW 254
47048: PPUSH
47049: LD_INT 5
47051: PPUSH
47052: CALL_OW 272
47056: PUSH
47057: LD_VAR 0 17
47061: PUSH
47062: LD_INT 1
47064: ARRAY
47065: PPUSH
47066: CALL_OW 251
47070: PPUSH
47071: LD_VAR 0 17
47075: PUSH
47076: LD_INT 1
47078: ARRAY
47079: PPUSH
47080: CALL_OW 254
47084: PPUSH
47085: LD_INT 5
47087: PPUSH
47088: CALL_OW 273
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47097: LD_VAR 0 16
47101: PUSH
47102: LD_INT 1
47104: ARRAY
47105: PPUSH
47106: LD_VAR 0 16
47110: PUSH
47111: LD_INT 2
47113: ARRAY
47114: PPUSH
47115: CALL_OW 488
47119: IFFALSE 47150
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47121: LD_VAR 0 13
47125: PPUSH
47126: LD_VAR 0 16
47130: PUSH
47131: LD_INT 1
47133: ARRAY
47134: PPUSH
47135: LD_VAR 0 16
47139: PUSH
47140: LD_INT 2
47142: ARRAY
47143: PPUSH
47144: CALL_OW 111
// continue ;
47148: GO 46640
// end ; end ; r := GetDir ( tmp ) ;
47150: LD_ADDR_VAR 0 15
47154: PUSH
47155: LD_VAR 0 13
47159: PPUSH
47160: CALL_OW 254
47164: ST_TO_ADDR
// if r = 5 then
47165: LD_VAR 0 15
47169: PUSH
47170: LD_INT 5
47172: EQUAL
47173: IFFALSE 47183
// r := 0 ;
47175: LD_ADDR_VAR 0 15
47179: PUSH
47180: LD_INT 0
47182: ST_TO_ADDR
// for j = r to 5 do
47183: LD_ADDR_VAR 0 10
47187: PUSH
47188: DOUBLE
47189: LD_VAR 0 15
47193: DEC
47194: ST_TO_ADDR
47195: LD_INT 5
47197: PUSH
47198: FOR_TO
47199: IFFALSE 47313
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47201: LD_ADDR_VAR 0 11
47205: PUSH
47206: LD_VAR 0 13
47210: PPUSH
47211: CALL_OW 250
47215: PPUSH
47216: LD_VAR 0 10
47220: PPUSH
47221: LD_INT 2
47223: PPUSH
47224: CALL_OW 272
47228: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47229: LD_ADDR_VAR 0 12
47233: PUSH
47234: LD_VAR 0 13
47238: PPUSH
47239: CALL_OW 251
47243: PPUSH
47244: LD_VAR 0 10
47248: PPUSH
47249: LD_INT 2
47251: PPUSH
47252: CALL_OW 273
47256: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47257: LD_VAR 0 11
47261: PPUSH
47262: LD_VAR 0 12
47266: PPUSH
47267: CALL_OW 488
47271: PUSH
47272: LD_VAR 0 11
47276: PPUSH
47277: LD_VAR 0 12
47281: PPUSH
47282: CALL_OW 428
47286: NOT
47287: AND
47288: IFFALSE 47311
// begin ComMoveXY ( tmp , _x , _y ) ;
47290: LD_VAR 0 13
47294: PPUSH
47295: LD_VAR 0 11
47299: PPUSH
47300: LD_VAR 0 12
47304: PPUSH
47305: CALL_OW 111
// break ;
47309: GO 47313
// end ; end ;
47311: GO 47198
47313: POP
47314: POP
// end ; end ;
47315: GO 46640
47317: POP
47318: POP
// end ;
47319: LD_VAR 0 8
47323: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47324: LD_INT 0
47326: PPUSH
// result := true ;
47327: LD_ADDR_VAR 0 3
47331: PUSH
47332: LD_INT 1
47334: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47335: LD_VAR 0 2
47339: PUSH
47340: LD_INT 24
47342: DOUBLE
47343: EQUAL
47344: IFTRUE 47354
47346: LD_INT 33
47348: DOUBLE
47349: EQUAL
47350: IFTRUE 47354
47352: GO 47379
47354: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47355: LD_ADDR_VAR 0 3
47359: PUSH
47360: LD_INT 32
47362: PPUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 321
47372: PUSH
47373: LD_INT 2
47375: EQUAL
47376: ST_TO_ADDR
47377: GO 47695
47379: LD_INT 20
47381: DOUBLE
47382: EQUAL
47383: IFTRUE 47387
47385: GO 47412
47387: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47388: LD_ADDR_VAR 0 3
47392: PUSH
47393: LD_INT 6
47395: PPUSH
47396: LD_VAR 0 1
47400: PPUSH
47401: CALL_OW 321
47405: PUSH
47406: LD_INT 2
47408: EQUAL
47409: ST_TO_ADDR
47410: GO 47695
47412: LD_INT 22
47414: DOUBLE
47415: EQUAL
47416: IFTRUE 47426
47418: LD_INT 36
47420: DOUBLE
47421: EQUAL
47422: IFTRUE 47426
47424: GO 47451
47426: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47427: LD_ADDR_VAR 0 3
47431: PUSH
47432: LD_INT 15
47434: PPUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: CALL_OW 321
47444: PUSH
47445: LD_INT 2
47447: EQUAL
47448: ST_TO_ADDR
47449: GO 47695
47451: LD_INT 30
47453: DOUBLE
47454: EQUAL
47455: IFTRUE 47459
47457: GO 47484
47459: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47460: LD_ADDR_VAR 0 3
47464: PUSH
47465: LD_INT 20
47467: PPUSH
47468: LD_VAR 0 1
47472: PPUSH
47473: CALL_OW 321
47477: PUSH
47478: LD_INT 2
47480: EQUAL
47481: ST_TO_ADDR
47482: GO 47695
47484: LD_INT 28
47486: DOUBLE
47487: EQUAL
47488: IFTRUE 47498
47490: LD_INT 21
47492: DOUBLE
47493: EQUAL
47494: IFTRUE 47498
47496: GO 47523
47498: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47499: LD_ADDR_VAR 0 3
47503: PUSH
47504: LD_INT 21
47506: PPUSH
47507: LD_VAR 0 1
47511: PPUSH
47512: CALL_OW 321
47516: PUSH
47517: LD_INT 2
47519: EQUAL
47520: ST_TO_ADDR
47521: GO 47695
47523: LD_INT 16
47525: DOUBLE
47526: EQUAL
47527: IFTRUE 47531
47529: GO 47556
47531: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47532: LD_ADDR_VAR 0 3
47536: PUSH
47537: LD_INT 84
47539: PPUSH
47540: LD_VAR 0 1
47544: PPUSH
47545: CALL_OW 321
47549: PUSH
47550: LD_INT 2
47552: EQUAL
47553: ST_TO_ADDR
47554: GO 47695
47556: LD_INT 19
47558: DOUBLE
47559: EQUAL
47560: IFTRUE 47570
47562: LD_INT 23
47564: DOUBLE
47565: EQUAL
47566: IFTRUE 47570
47568: GO 47595
47570: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47571: LD_ADDR_VAR 0 3
47575: PUSH
47576: LD_INT 83
47578: PPUSH
47579: LD_VAR 0 1
47583: PPUSH
47584: CALL_OW 321
47588: PUSH
47589: LD_INT 2
47591: EQUAL
47592: ST_TO_ADDR
47593: GO 47695
47595: LD_INT 17
47597: DOUBLE
47598: EQUAL
47599: IFTRUE 47603
47601: GO 47628
47603: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47604: LD_ADDR_VAR 0 3
47608: PUSH
47609: LD_INT 39
47611: PPUSH
47612: LD_VAR 0 1
47616: PPUSH
47617: CALL_OW 321
47621: PUSH
47622: LD_INT 2
47624: EQUAL
47625: ST_TO_ADDR
47626: GO 47695
47628: LD_INT 18
47630: DOUBLE
47631: EQUAL
47632: IFTRUE 47636
47634: GO 47661
47636: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47637: LD_ADDR_VAR 0 3
47641: PUSH
47642: LD_INT 40
47644: PPUSH
47645: LD_VAR 0 1
47649: PPUSH
47650: CALL_OW 321
47654: PUSH
47655: LD_INT 2
47657: EQUAL
47658: ST_TO_ADDR
47659: GO 47695
47661: LD_INT 27
47663: DOUBLE
47664: EQUAL
47665: IFTRUE 47669
47667: GO 47694
47669: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47670: LD_ADDR_VAR 0 3
47674: PUSH
47675: LD_INT 35
47677: PPUSH
47678: LD_VAR 0 1
47682: PPUSH
47683: CALL_OW 321
47687: PUSH
47688: LD_INT 2
47690: EQUAL
47691: ST_TO_ADDR
47692: GO 47695
47694: POP
// end ;
47695: LD_VAR 0 3
47699: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47700: LD_INT 0
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
// result := false ;
47713: LD_ADDR_VAR 0 6
47717: PUSH
47718: LD_INT 0
47720: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47721: LD_VAR 0 1
47725: NOT
47726: PUSH
47727: LD_VAR 0 1
47731: PPUSH
47732: CALL_OW 266
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: IN
47747: NOT
47748: OR
47749: PUSH
47750: LD_VAR 0 2
47754: NOT
47755: OR
47756: PUSH
47757: LD_VAR 0 5
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: LD_INT 4
47776: PUSH
47777: LD_INT 5
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: IN
47788: NOT
47789: OR
47790: PUSH
47791: LD_VAR 0 3
47795: PPUSH
47796: LD_VAR 0 4
47800: PPUSH
47801: CALL_OW 488
47805: NOT
47806: OR
47807: IFFALSE 47811
// exit ;
47809: GO 48547
// side := GetSide ( depot ) ;
47811: LD_ADDR_VAR 0 9
47815: PUSH
47816: LD_VAR 0 1
47820: PPUSH
47821: CALL_OW 255
47825: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47826: LD_VAR 0 9
47830: PPUSH
47831: LD_VAR 0 2
47835: PPUSH
47836: CALL 47324 0 2
47840: NOT
47841: IFFALSE 47845
// exit ;
47843: GO 48547
// pom := GetBase ( depot ) ;
47845: LD_ADDR_VAR 0 10
47849: PUSH
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 274
47859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47860: LD_ADDR_VAR 0 11
47864: PUSH
47865: LD_VAR 0 2
47869: PPUSH
47870: LD_VAR 0 1
47874: PPUSH
47875: CALL_OW 248
47879: PPUSH
47880: CALL_OW 450
47884: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47885: LD_VAR 0 10
47889: PPUSH
47890: LD_INT 1
47892: PPUSH
47893: CALL_OW 275
47897: PUSH
47898: LD_VAR 0 11
47902: PUSH
47903: LD_INT 1
47905: ARRAY
47906: GREATEREQUAL
47907: PUSH
47908: LD_VAR 0 10
47912: PPUSH
47913: LD_INT 2
47915: PPUSH
47916: CALL_OW 275
47920: PUSH
47921: LD_VAR 0 11
47925: PUSH
47926: LD_INT 2
47928: ARRAY
47929: GREATEREQUAL
47930: AND
47931: PUSH
47932: LD_VAR 0 10
47936: PPUSH
47937: LD_INT 3
47939: PPUSH
47940: CALL_OW 275
47944: PUSH
47945: LD_VAR 0 11
47949: PUSH
47950: LD_INT 3
47952: ARRAY
47953: GREATEREQUAL
47954: AND
47955: NOT
47956: IFFALSE 47960
// exit ;
47958: GO 48547
// if GetBType ( depot ) = b_depot then
47960: LD_VAR 0 1
47964: PPUSH
47965: CALL_OW 266
47969: PUSH
47970: LD_INT 0
47972: EQUAL
47973: IFFALSE 47985
// dist := 28 else
47975: LD_ADDR_VAR 0 14
47979: PUSH
47980: LD_INT 28
47982: ST_TO_ADDR
47983: GO 47993
// dist := 36 ;
47985: LD_ADDR_VAR 0 14
47989: PUSH
47990: LD_INT 36
47992: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47993: LD_VAR 0 1
47997: PPUSH
47998: LD_VAR 0 3
48002: PPUSH
48003: LD_VAR 0 4
48007: PPUSH
48008: CALL_OW 297
48012: PUSH
48013: LD_VAR 0 14
48017: GREATER
48018: IFFALSE 48022
// exit ;
48020: GO 48547
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48022: LD_ADDR_VAR 0 12
48026: PUSH
48027: LD_VAR 0 2
48031: PPUSH
48032: LD_VAR 0 3
48036: PPUSH
48037: LD_VAR 0 4
48041: PPUSH
48042: LD_VAR 0 5
48046: PPUSH
48047: LD_VAR 0 1
48051: PPUSH
48052: CALL_OW 248
48056: PPUSH
48057: LD_INT 0
48059: PPUSH
48060: CALL 48552 0 6
48064: ST_TO_ADDR
// if not hexes then
48065: LD_VAR 0 12
48069: NOT
48070: IFFALSE 48074
// exit ;
48072: GO 48547
// hex := GetHexInfo ( x , y ) ;
48074: LD_ADDR_VAR 0 15
48078: PUSH
48079: LD_VAR 0 3
48083: PPUSH
48084: LD_VAR 0 4
48088: PPUSH
48089: CALL_OW 546
48093: ST_TO_ADDR
// if hex [ 1 ] then
48094: LD_VAR 0 15
48098: PUSH
48099: LD_INT 1
48101: ARRAY
48102: IFFALSE 48106
// exit ;
48104: GO 48547
// height := hex [ 2 ] ;
48106: LD_ADDR_VAR 0 13
48110: PUSH
48111: LD_VAR 0 15
48115: PUSH
48116: LD_INT 2
48118: ARRAY
48119: ST_TO_ADDR
// for i = 1 to hexes do
48120: LD_ADDR_VAR 0 7
48124: PUSH
48125: DOUBLE
48126: LD_INT 1
48128: DEC
48129: ST_TO_ADDR
48130: LD_VAR 0 12
48134: PUSH
48135: FOR_TO
48136: IFFALSE 48466
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48138: LD_VAR 0 12
48142: PUSH
48143: LD_VAR 0 7
48147: ARRAY
48148: PUSH
48149: LD_INT 1
48151: ARRAY
48152: PPUSH
48153: LD_VAR 0 12
48157: PUSH
48158: LD_VAR 0 7
48162: ARRAY
48163: PUSH
48164: LD_INT 2
48166: ARRAY
48167: PPUSH
48168: CALL_OW 488
48172: NOT
48173: PUSH
48174: LD_VAR 0 12
48178: PUSH
48179: LD_VAR 0 7
48183: ARRAY
48184: PUSH
48185: LD_INT 1
48187: ARRAY
48188: PPUSH
48189: LD_VAR 0 12
48193: PUSH
48194: LD_VAR 0 7
48198: ARRAY
48199: PUSH
48200: LD_INT 2
48202: ARRAY
48203: PPUSH
48204: CALL_OW 428
48208: PUSH
48209: LD_INT 0
48211: GREATER
48212: OR
48213: PUSH
48214: LD_VAR 0 12
48218: PUSH
48219: LD_VAR 0 7
48223: ARRAY
48224: PUSH
48225: LD_INT 1
48227: ARRAY
48228: PPUSH
48229: LD_VAR 0 12
48233: PUSH
48234: LD_VAR 0 7
48238: ARRAY
48239: PUSH
48240: LD_INT 2
48242: ARRAY
48243: PPUSH
48244: CALL_OW 351
48248: OR
48249: IFFALSE 48255
// exit ;
48251: POP
48252: POP
48253: GO 48547
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48255: LD_ADDR_VAR 0 8
48259: PUSH
48260: LD_VAR 0 12
48264: PUSH
48265: LD_VAR 0 7
48269: ARRAY
48270: PUSH
48271: LD_INT 1
48273: ARRAY
48274: PPUSH
48275: LD_VAR 0 12
48279: PUSH
48280: LD_VAR 0 7
48284: ARRAY
48285: PUSH
48286: LD_INT 2
48288: ARRAY
48289: PPUSH
48290: CALL_OW 546
48294: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48295: LD_VAR 0 8
48299: PUSH
48300: LD_INT 1
48302: ARRAY
48303: PUSH
48304: LD_VAR 0 8
48308: PUSH
48309: LD_INT 2
48311: ARRAY
48312: PUSH
48313: LD_VAR 0 13
48317: PUSH
48318: LD_INT 2
48320: PLUS
48321: GREATER
48322: OR
48323: PUSH
48324: LD_VAR 0 8
48328: PUSH
48329: LD_INT 2
48331: ARRAY
48332: PUSH
48333: LD_VAR 0 13
48337: PUSH
48338: LD_INT 2
48340: MINUS
48341: LESS
48342: OR
48343: PUSH
48344: LD_VAR 0 8
48348: PUSH
48349: LD_INT 3
48351: ARRAY
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 8
48358: PUSH
48359: LD_INT 9
48361: PUSH
48362: LD_INT 10
48364: PUSH
48365: LD_INT 11
48367: PUSH
48368: LD_INT 12
48370: PUSH
48371: LD_INT 13
48373: PUSH
48374: LD_INT 16
48376: PUSH
48377: LD_INT 17
48379: PUSH
48380: LD_INT 18
48382: PUSH
48383: LD_INT 19
48385: PUSH
48386: LD_INT 20
48388: PUSH
48389: LD_INT 21
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: IN
48407: NOT
48408: OR
48409: PUSH
48410: LD_VAR 0 8
48414: PUSH
48415: LD_INT 5
48417: ARRAY
48418: NOT
48419: OR
48420: PUSH
48421: LD_VAR 0 8
48425: PUSH
48426: LD_INT 6
48428: ARRAY
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 7
48438: PUSH
48439: LD_INT 9
48441: PUSH
48442: LD_INT 10
48444: PUSH
48445: LD_INT 11
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: IN
48456: NOT
48457: OR
48458: IFFALSE 48464
// exit ;
48460: POP
48461: POP
48462: GO 48547
// end ;
48464: GO 48135
48466: POP
48467: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48468: LD_VAR 0 9
48472: PPUSH
48473: LD_VAR 0 3
48477: PPUSH
48478: LD_VAR 0 4
48482: PPUSH
48483: LD_INT 20
48485: PPUSH
48486: CALL 40499 0 4
48490: PUSH
48491: LD_INT 4
48493: ARRAY
48494: IFFALSE 48498
// exit ;
48496: GO 48547
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48498: LD_VAR 0 2
48502: PUSH
48503: LD_INT 29
48505: PUSH
48506: LD_INT 30
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: IN
48513: PUSH
48514: LD_VAR 0 3
48518: PPUSH
48519: LD_VAR 0 4
48523: PPUSH
48524: LD_VAR 0 9
48528: PPUSH
48529: CALL_OW 440
48533: NOT
48534: AND
48535: IFFALSE 48539
// exit ;
48537: GO 48547
// result := true ;
48539: LD_ADDR_VAR 0 6
48543: PUSH
48544: LD_INT 1
48546: ST_TO_ADDR
// end ;
48547: LD_VAR 0 6
48551: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48552: LD_INT 0
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
48568: PPUSH
48569: PPUSH
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
48601: PPUSH
48602: PPUSH
48603: PPUSH
48604: PPUSH
48605: PPUSH
48606: PPUSH
48607: PPUSH
48608: PPUSH
48609: PPUSH
48610: PPUSH
48611: PPUSH
// result = [ ] ;
48612: LD_ADDR_VAR 0 7
48616: PUSH
48617: EMPTY
48618: ST_TO_ADDR
// temp_list = [ ] ;
48619: LD_ADDR_VAR 0 9
48623: PUSH
48624: EMPTY
48625: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48626: LD_VAR 0 4
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 4
48645: PUSH
48646: LD_INT 5
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: IN
48657: NOT
48658: PUSH
48659: LD_VAR 0 1
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: IN
48674: PUSH
48675: LD_VAR 0 5
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 3
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: IN
48694: NOT
48695: AND
48696: OR
48697: IFFALSE 48701
// exit ;
48699: GO 67092
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48701: LD_VAR 0 1
48705: PUSH
48706: LD_INT 6
48708: PUSH
48709: LD_INT 7
48711: PUSH
48712: LD_INT 8
48714: PUSH
48715: LD_INT 13
48717: PUSH
48718: LD_INT 12
48720: PUSH
48721: LD_INT 15
48723: PUSH
48724: LD_INT 11
48726: PUSH
48727: LD_INT 14
48729: PUSH
48730: LD_INT 10
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: IN
48744: IFFALSE 48754
// btype = b_lab ;
48746: LD_ADDR_VAR 0 1
48750: PUSH
48751: LD_INT 6
48753: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48754: LD_VAR 0 6
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: LIST
48772: IN
48773: NOT
48774: PUSH
48775: LD_VAR 0 1
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: LD_INT 6
48794: PUSH
48795: LD_INT 36
48797: PUSH
48798: LD_INT 4
48800: PUSH
48801: LD_INT 5
48803: PUSH
48804: LD_INT 31
48806: PUSH
48807: LD_INT 32
48809: PUSH
48810: LD_INT 33
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: IN
48826: NOT
48827: PUSH
48828: LD_VAR 0 6
48832: PUSH
48833: LD_INT 1
48835: EQUAL
48836: AND
48837: OR
48838: PUSH
48839: LD_VAR 0 1
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: IN
48854: NOT
48855: PUSH
48856: LD_VAR 0 6
48860: PUSH
48861: LD_INT 2
48863: EQUAL
48864: AND
48865: OR
48866: IFFALSE 48876
// mode = 0 ;
48868: LD_ADDR_VAR 0 6
48872: PUSH
48873: LD_INT 0
48875: ST_TO_ADDR
// case mode of 0 :
48876: LD_VAR 0 6
48880: PUSH
48881: LD_INT 0
48883: DOUBLE
48884: EQUAL
48885: IFTRUE 48889
48887: GO 60342
48889: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48890: LD_ADDR_VAR 0 11
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 3
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49083: LD_ADDR_VAR 0 12
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49279: LD_ADDR_VAR 0 13
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 3
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: NEG
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49478: LD_ADDR_VAR 0 14
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49674: LD_ADDR_VAR 0 15
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49867: LD_ADDR_VAR 0 16
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50060: LD_ADDR_VAR 0 17
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50290: LD_ADDR_VAR 0 18
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50520: LD_ADDR_VAR 0 19
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50750: LD_ADDR_VAR 0 20
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50980: LD_ADDR_VAR 0 21
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51210: LD_ADDR_VAR 0 22
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51440: LD_ADDR_VAR 0 23
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51720: LD_ADDR_VAR 0 24
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 2
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51996: LD_ADDR_VAR 0 25
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52270: LD_ADDR_VAR 0 26
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52546: LD_ADDR_VAR 0 27
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52826: LD_ADDR_VAR 0 28
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53108: LD_ADDR_VAR 0 29
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53387: LD_ADDR_VAR 0 30
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53665: LD_ADDR_VAR 0 31
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 3
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53943: LD_ADDR_VAR 0 32
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54221: LD_ADDR_VAR 0 33
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54500: LD_ADDR_VAR 0 34
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54780: LD_ADDR_VAR 0 35
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54892: LD_ADDR_VAR 0 36
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55004: LD_ADDR_VAR 0 37
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55116: LD_ADDR_VAR 0 38
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55228: LD_ADDR_VAR 0 39
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55340: LD_ADDR_VAR 0 40
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55452: LD_ADDR_VAR 0 41
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: LD_INT 3
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 3
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55802: LD_ADDR_VAR 0 42
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 3
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 3
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: LD_INT 3
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56152: LD_ADDR_VAR 0 43
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 3
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: NEG
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56500: LD_ADDR_VAR 0 44
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 3
56809: NEG
56810: PUSH
56811: LD_INT 3
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56850: LD_ADDR_VAR 0 45
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: LD_INT 3
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57200: LD_ADDR_VAR 0 46
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57548: LD_ADDR_VAR 0 47
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57699: LD_ADDR_VAR 0 48
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57846: LD_ADDR_VAR 0 49
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57990: LD_ADDR_VAR 0 50
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58134: LD_ADDR_VAR 0 51
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58281: LD_ADDR_VAR 0 52
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58432: LD_ADDR_VAR 0 53
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58662: LD_ADDR_VAR 0 54
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58892: LD_ADDR_VAR 0 55
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59122: LD_ADDR_VAR 0 56
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59352: LD_ADDR_VAR 0 57
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 2
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59582: LD_ADDR_VAR 0 58
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59812: LD_ADDR_VAR 0 59
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59900: LD_ADDR_VAR 0 60
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59988: LD_ADDR_VAR 0 61
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60076: LD_ADDR_VAR 0 62
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60164: LD_ADDR_VAR 0 63
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60252: LD_ADDR_VAR 0 64
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: ST_TO_ADDR
// end ; 1 :
60340: GO 66237
60342: LD_INT 1
60344: DOUBLE
60345: EQUAL
60346: IFTRUE 60350
60348: GO 62973
60350: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60351: LD_ADDR_VAR 0 11
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60395: LD_ADDR_VAR 0 12
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60436: LD_ADDR_VAR 0 13
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 3
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60476: LD_ADDR_VAR 0 14
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: LD_INT 3
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60517: LD_ADDR_VAR 0 15
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 3
60546: NEG
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60561: LD_ADDR_VAR 0 16
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 3
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 3
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: LD_INT 3
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60607: LD_ADDR_VAR 0 17
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60651: LD_ADDR_VAR 0 18
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60692: LD_ADDR_VAR 0 19
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60732: LD_ADDR_VAR 0 20
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: LIST
60772: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60773: LD_ADDR_VAR 0 21
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: NEG
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60817: LD_ADDR_VAR 0 22
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: LD_INT 3
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: LD_INT 3
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60863: LD_ADDR_VAR 0 23
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 4
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60907: LD_ADDR_VAR 0 24
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 4
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60948: LD_ADDR_VAR 0 25
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 4
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60988: LD_ADDR_VAR 0 26
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: LD_INT 4
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: LIST
61028: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61029: LD_ADDR_VAR 0 27
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 3
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 4
61058: NEG
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61073: LD_ADDR_VAR 0 28
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 3
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: LD_INT 4
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 4
61104: NEG
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61119: LD_ADDR_VAR 0 29
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 4
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 4
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: LD_INT 5
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 5
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: LD_INT 6
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 6
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 5
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61274: LD_ADDR_VAR 0 30
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 4
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 4
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 4
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 5
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 5
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 5
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 6
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 6
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61417: LD_ADDR_VAR 0 31
61421: PUSH
61422: LD_INT 3
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 4
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 4
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 5
61484: PUSH
61485: LD_INT 4
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 5
61494: PUSH
61495: LD_INT 5
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 4
61504: PUSH
61505: LD_INT 5
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 6
61514: PUSH
61515: LD_INT 5
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 6
61524: PUSH
61525: LD_INT 6
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 5
61534: PUSH
61535: LD_INT 6
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61556: LD_ADDR_VAR 0 32
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 4
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 5
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: LD_INT 5
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 6
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: LD_INT 6
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: LD_INT 5
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61699: LD_ADDR_VAR 0 33
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 3
61728: NEG
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 4
61751: NEG
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 4
61762: NEG
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 5
61785: NEG
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 5
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 5
61808: NEG
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 6
61819: NEG
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 6
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61854: LD_ADDR_VAR 0 34
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: LD_INT 3
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: LD_INT 2
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: NEG
61886: PUSH
61887: LD_INT 3
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: LD_INT 4
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 4
61909: NEG
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 4
61921: NEG
61922: PUSH
61923: LD_INT 4
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 4
61933: NEG
61934: PUSH
61935: LD_INT 5
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 5
61945: NEG
61946: PUSH
61947: LD_INT 4
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 5
61957: NEG
61958: PUSH
61959: LD_INT 5
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 5
61969: NEG
61970: PUSH
61971: LD_INT 6
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 6
61981: NEG
61982: PUSH
61983: LD_INT 5
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 6
61993: NEG
61994: PUSH
61995: LD_INT 6
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62017: LD_ADDR_VAR 0 41
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: LD_INT 3
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62061: LD_ADDR_VAR 0 42
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62102: LD_ADDR_VAR 0 43
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62142: LD_ADDR_VAR 0 44
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 3
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: LIST
62182: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62183: LD_ADDR_VAR 0 45
62187: PUSH
62188: LD_INT 2
62190: NEG
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62227: LD_ADDR_VAR 0 46
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: LD_INT 2
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: LD_INT 3
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 3
62258: NEG
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62273: LD_ADDR_VAR 0 47
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 3
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 3
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62306: LD_ADDR_VAR 0 48
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62337: LD_ADDR_VAR 0 49
62341: PUSH
62342: LD_INT 3
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62366: LD_ADDR_VAR 0 50
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: LD_INT 3
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62395: LD_ADDR_VAR 0 51
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62426: LD_ADDR_VAR 0 52
62430: PUSH
62431: LD_INT 3
62433: NEG
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62459: LD_ADDR_VAR 0 53
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 3
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62503: LD_ADDR_VAR 0 54
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62544: LD_ADDR_VAR 0 55
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 3
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62584: LD_ADDR_VAR 0 56
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62625: LD_ADDR_VAR 0 57
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: NEG
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62669: LD_ADDR_VAR 0 58
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: NEG
62689: PUSH
62690: LD_INT 2
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 3
62700: NEG
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62715: LD_ADDR_VAR 0 59
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: LIST
62758: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62759: LD_ADDR_VAR 0 60
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62800: LD_ADDR_VAR 0 61
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 2
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: LD_INT 2
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62840: LD_ADDR_VAR 0 62
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62881: LD_ADDR_VAR 0 63
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62925: LD_ADDR_VAR 0 64
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: LD_INT 2
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: LIST
62970: ST_TO_ADDR
// end ; 2 :
62971: GO 66237
62973: LD_INT 2
62975: DOUBLE
62976: EQUAL
62977: IFTRUE 62981
62979: GO 66236
62981: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62982: LD_ADDR_VAR 0 29
62986: PUSH
62987: LD_INT 4
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 4
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 5
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 5
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 4
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 3
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 3
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: LD_INT 2
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 5
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 4
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 4
63112: PUSH
63113: LD_INT 4
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 2
63132: PUSH
63133: LD_INT 3
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 4
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 4
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 4
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 5
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 5
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 4
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 5
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 2
63254: NEG
63255: PUSH
63256: LD_INT 3
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 3
63276: NEG
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 3
63310: NEG
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 4
63321: NEG
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 4
63332: NEG
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 4
63344: NEG
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: NEG
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 4
63367: NEG
63368: PUSH
63369: LD_INT 4
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 4
63379: NEG
63380: PUSH
63381: LD_INT 5
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: LD_INT 4
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: LD_INT 3
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: LD_INT 3
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 5
63427: NEG
63428: PUSH
63429: LD_INT 4
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 5
63439: NEG
63440: PUSH
63441: LD_INT 5
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 3
63451: NEG
63452: PUSH
63453: LD_INT 5
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 5
63463: NEG
63464: PUSH
63465: LD_INT 3
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63520: LD_ADDR_VAR 0 30
63524: PUSH
63525: LD_INT 4
63527: PUSH
63528: LD_INT 4
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 4
63537: PUSH
63538: LD_INT 3
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 5
63547: PUSH
63548: LD_INT 4
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 5
63557: PUSH
63558: LD_INT 5
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 4
63567: PUSH
63568: LD_INT 5
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 3
63577: PUSH
63578: LD_INT 4
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 5
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: LD_INT 5
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 3
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 4
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: PUSH
63690: LD_INT 4
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 4
63710: NEG
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 4
63721: NEG
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 3
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 3
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 4
63755: NEG
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 5
63766: NEG
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 5
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 5
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 3
63801: NEG
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: LD_INT 3
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: LD_INT 4
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 2
63836: NEG
63837: PUSH
63838: LD_INT 3
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 3
63860: NEG
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 4
63872: NEG
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 4
63884: NEG
63885: PUSH
63886: LD_INT 4
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 4
63908: NEG
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 4
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 5
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 4
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: LD_INT 3
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: LD_INT 4
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: LD_INT 5
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 3
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 5
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64067: LD_ADDR_VAR 0 31
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 4
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 4
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 5
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 5
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 4
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: LD_INT 3
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: LD_INT 5
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 2
64156: NEG
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: NEG
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 3
64178: NEG
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: NEG
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 4
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 4
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 4
64246: NEG
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: NEG
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 4
64269: NEG
64270: PUSH
64271: LD_INT 4
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 4
64281: NEG
64282: PUSH
64283: LD_INT 5
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: LD_INT 4
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: LD_INT 3
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 4
64317: NEG
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 5
64329: NEG
64330: PUSH
64331: LD_INT 4
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 5
64341: NEG
64342: PUSH
64343: LD_INT 5
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: LD_INT 5
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 5
64365: NEG
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 3
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 4
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: LD_INT 3
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: LD_INT 4
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: LD_INT 2
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 2
64467: NEG
64468: PUSH
64469: LD_INT 4
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 4
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 4
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 5
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 5
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 4
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 3
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 3
64551: PUSH
64552: LD_INT 2
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 5
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64617: LD_ADDR_VAR 0 32
64621: PUSH
64622: LD_INT 4
64624: NEG
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 4
64635: NEG
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: NEG
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 3
64658: NEG
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 4
64669: NEG
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 5
64680: NEG
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 5
64691: NEG
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 5
64703: NEG
64704: PUSH
64705: LD_INT 2
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 3
64715: NEG
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: LD_INT 3
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: LD_INT 4
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: LD_INT 3
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 2
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 3
64774: NEG
64775: PUSH
64776: LD_INT 2
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 4
64786: NEG
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 4
64798: NEG
64799: PUSH
64800: LD_INT 4
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: LD_INT 4
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 4
64822: NEG
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: LD_INT 4
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: LD_INT 5
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: LD_INT 4
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 3
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 3
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: LD_INT 4
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: LD_INT 5
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 2
64913: PUSH
64914: LD_INT 3
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 2
64924: NEG
64925: PUSH
64926: LD_INT 5
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 4
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 4
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 3
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: LD_INT 2
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 4
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 4
65029: PUSH
65030: LD_INT 4
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 5
65049: PUSH
65050: LD_INT 4
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 5
65059: PUSH
65060: LD_INT 5
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 4
65069: PUSH
65070: LD_INT 5
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: LD_INT 4
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 5
65099: PUSH
65100: LD_INT 3
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: LD_INT 5
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65164: LD_ADDR_VAR 0 33
65168: PUSH
65169: LD_INT 4
65171: NEG
65172: PUSH
65173: LD_INT 4
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 4
65183: NEG
65184: PUSH
65185: LD_INT 5
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: LD_INT 4
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 4
65219: NEG
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 5
65231: NEG
65232: PUSH
65233: LD_INT 4
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 5
65243: NEG
65244: PUSH
65245: LD_INT 5
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: NEG
65256: PUSH
65257: LD_INT 5
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 5
65267: NEG
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 4
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 3
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: LD_INT 2
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: LD_INT 4
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 2
65358: PUSH
65359: LD_INT 2
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: NEG
65370: PUSH
65371: LD_INT 4
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 4
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 5
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 4
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 5
65464: PUSH
65465: LD_INT 2
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 3
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 4
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 4
65504: PUSH
65505: LD_INT 4
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: LD_INT 4
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 4
65544: PUSH
65545: LD_INT 2
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 4
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 4
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 3
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 4
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: LD_INT 5
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 5
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: PUSH
65616: LD_INT 4
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: LD_INT 5
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65702: LD_ADDR_VAR 0 34
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: LD_INT 4
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 5
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 4
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: LD_INT 3
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: LD_INT 4
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 5
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: LD_INT 5
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 3
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 4
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 4
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 3
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: LD_INT 2
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 4
65904: PUSH
65905: LD_INT 4
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 4
65914: PUSH
65915: LD_INT 3
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 5
65924: PUSH
65925: LD_INT 4
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 5
65934: PUSH
65935: LD_INT 5
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: LD_INT 5
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: LD_INT 4
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 5
65974: PUSH
65975: LD_INT 3
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: LD_INT 5
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: LD_INT 3
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: LD_INT 4
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 3
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: LD_INT 4
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 4
66098: NEG
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 4
66132: NEG
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 5
66143: NEG
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 5
66154: NEG
66155: PUSH
66156: LD_INT 1
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 5
66166: NEG
66167: PUSH
66168: LD_INT 2
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 3
66178: NEG
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: ST_TO_ADDR
// end ; end ;
66234: GO 66237
66236: POP
// case btype of b_depot , b_warehouse :
66237: LD_VAR 0 1
66241: PUSH
66242: LD_INT 0
66244: DOUBLE
66245: EQUAL
66246: IFTRUE 66256
66248: LD_INT 1
66250: DOUBLE
66251: EQUAL
66252: IFTRUE 66256
66254: GO 66457
66256: POP
// case nation of nation_american :
66257: LD_VAR 0 5
66261: PUSH
66262: LD_INT 1
66264: DOUBLE
66265: EQUAL
66266: IFTRUE 66270
66268: GO 66326
66270: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66271: LD_ADDR_VAR 0 9
66275: PUSH
66276: LD_VAR 0 11
66280: PUSH
66281: LD_VAR 0 12
66285: PUSH
66286: LD_VAR 0 13
66290: PUSH
66291: LD_VAR 0 14
66295: PUSH
66296: LD_VAR 0 15
66300: PUSH
66301: LD_VAR 0 16
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: PUSH
66314: LD_VAR 0 4
66318: PUSH
66319: LD_INT 1
66321: PLUS
66322: ARRAY
66323: ST_TO_ADDR
66324: GO 66455
66326: LD_INT 2
66328: DOUBLE
66329: EQUAL
66330: IFTRUE 66334
66332: GO 66390
66334: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66335: LD_ADDR_VAR 0 9
66339: PUSH
66340: LD_VAR 0 17
66344: PUSH
66345: LD_VAR 0 18
66349: PUSH
66350: LD_VAR 0 19
66354: PUSH
66355: LD_VAR 0 20
66359: PUSH
66360: LD_VAR 0 21
66364: PUSH
66365: LD_VAR 0 22
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: PUSH
66378: LD_VAR 0 4
66382: PUSH
66383: LD_INT 1
66385: PLUS
66386: ARRAY
66387: ST_TO_ADDR
66388: GO 66455
66390: LD_INT 3
66392: DOUBLE
66393: EQUAL
66394: IFTRUE 66398
66396: GO 66454
66398: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66399: LD_ADDR_VAR 0 9
66403: PUSH
66404: LD_VAR 0 23
66408: PUSH
66409: LD_VAR 0 24
66413: PUSH
66414: LD_VAR 0 25
66418: PUSH
66419: LD_VAR 0 26
66423: PUSH
66424: LD_VAR 0 27
66428: PUSH
66429: LD_VAR 0 28
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: PUSH
66442: LD_VAR 0 4
66446: PUSH
66447: LD_INT 1
66449: PLUS
66450: ARRAY
66451: ST_TO_ADDR
66452: GO 66455
66454: POP
66455: GO 67010
66457: LD_INT 2
66459: DOUBLE
66460: EQUAL
66461: IFTRUE 66471
66463: LD_INT 3
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66471
66469: GO 66527
66471: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66472: LD_ADDR_VAR 0 9
66476: PUSH
66477: LD_VAR 0 29
66481: PUSH
66482: LD_VAR 0 30
66486: PUSH
66487: LD_VAR 0 31
66491: PUSH
66492: LD_VAR 0 32
66496: PUSH
66497: LD_VAR 0 33
66501: PUSH
66502: LD_VAR 0 34
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: PUSH
66515: LD_VAR 0 4
66519: PUSH
66520: LD_INT 1
66522: PLUS
66523: ARRAY
66524: ST_TO_ADDR
66525: GO 67010
66527: LD_INT 16
66529: DOUBLE
66530: EQUAL
66531: IFTRUE 66589
66533: LD_INT 17
66535: DOUBLE
66536: EQUAL
66537: IFTRUE 66589
66539: LD_INT 18
66541: DOUBLE
66542: EQUAL
66543: IFTRUE 66589
66545: LD_INT 19
66547: DOUBLE
66548: EQUAL
66549: IFTRUE 66589
66551: LD_INT 22
66553: DOUBLE
66554: EQUAL
66555: IFTRUE 66589
66557: LD_INT 20
66559: DOUBLE
66560: EQUAL
66561: IFTRUE 66589
66563: LD_INT 21
66565: DOUBLE
66566: EQUAL
66567: IFTRUE 66589
66569: LD_INT 23
66571: DOUBLE
66572: EQUAL
66573: IFTRUE 66589
66575: LD_INT 24
66577: DOUBLE
66578: EQUAL
66579: IFTRUE 66589
66581: LD_INT 25
66583: DOUBLE
66584: EQUAL
66585: IFTRUE 66589
66587: GO 66645
66589: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66590: LD_ADDR_VAR 0 9
66594: PUSH
66595: LD_VAR 0 35
66599: PUSH
66600: LD_VAR 0 36
66604: PUSH
66605: LD_VAR 0 37
66609: PUSH
66610: LD_VAR 0 38
66614: PUSH
66615: LD_VAR 0 39
66619: PUSH
66620: LD_VAR 0 40
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: PUSH
66633: LD_VAR 0 4
66637: PUSH
66638: LD_INT 1
66640: PLUS
66641: ARRAY
66642: ST_TO_ADDR
66643: GO 67010
66645: LD_INT 6
66647: DOUBLE
66648: EQUAL
66649: IFTRUE 66701
66651: LD_INT 7
66653: DOUBLE
66654: EQUAL
66655: IFTRUE 66701
66657: LD_INT 8
66659: DOUBLE
66660: EQUAL
66661: IFTRUE 66701
66663: LD_INT 13
66665: DOUBLE
66666: EQUAL
66667: IFTRUE 66701
66669: LD_INT 12
66671: DOUBLE
66672: EQUAL
66673: IFTRUE 66701
66675: LD_INT 15
66677: DOUBLE
66678: EQUAL
66679: IFTRUE 66701
66681: LD_INT 11
66683: DOUBLE
66684: EQUAL
66685: IFTRUE 66701
66687: LD_INT 14
66689: DOUBLE
66690: EQUAL
66691: IFTRUE 66701
66693: LD_INT 10
66695: DOUBLE
66696: EQUAL
66697: IFTRUE 66701
66699: GO 66757
66701: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66702: LD_ADDR_VAR 0 9
66706: PUSH
66707: LD_VAR 0 41
66711: PUSH
66712: LD_VAR 0 42
66716: PUSH
66717: LD_VAR 0 43
66721: PUSH
66722: LD_VAR 0 44
66726: PUSH
66727: LD_VAR 0 45
66731: PUSH
66732: LD_VAR 0 46
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: PUSH
66745: LD_VAR 0 4
66749: PUSH
66750: LD_INT 1
66752: PLUS
66753: ARRAY
66754: ST_TO_ADDR
66755: GO 67010
66757: LD_INT 36
66759: DOUBLE
66760: EQUAL
66761: IFTRUE 66765
66763: GO 66821
66765: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66766: LD_ADDR_VAR 0 9
66770: PUSH
66771: LD_VAR 0 47
66775: PUSH
66776: LD_VAR 0 48
66780: PUSH
66781: LD_VAR 0 49
66785: PUSH
66786: LD_VAR 0 50
66790: PUSH
66791: LD_VAR 0 51
66795: PUSH
66796: LD_VAR 0 52
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: PUSH
66809: LD_VAR 0 4
66813: PUSH
66814: LD_INT 1
66816: PLUS
66817: ARRAY
66818: ST_TO_ADDR
66819: GO 67010
66821: LD_INT 4
66823: DOUBLE
66824: EQUAL
66825: IFTRUE 66847
66827: LD_INT 5
66829: DOUBLE
66830: EQUAL
66831: IFTRUE 66847
66833: LD_INT 34
66835: DOUBLE
66836: EQUAL
66837: IFTRUE 66847
66839: LD_INT 37
66841: DOUBLE
66842: EQUAL
66843: IFTRUE 66847
66845: GO 66903
66847: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66848: LD_ADDR_VAR 0 9
66852: PUSH
66853: LD_VAR 0 53
66857: PUSH
66858: LD_VAR 0 54
66862: PUSH
66863: LD_VAR 0 55
66867: PUSH
66868: LD_VAR 0 56
66872: PUSH
66873: LD_VAR 0 57
66877: PUSH
66878: LD_VAR 0 58
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: PUSH
66891: LD_VAR 0 4
66895: PUSH
66896: LD_INT 1
66898: PLUS
66899: ARRAY
66900: ST_TO_ADDR
66901: GO 67010
66903: LD_INT 31
66905: DOUBLE
66906: EQUAL
66907: IFTRUE 66953
66909: LD_INT 32
66911: DOUBLE
66912: EQUAL
66913: IFTRUE 66953
66915: LD_INT 33
66917: DOUBLE
66918: EQUAL
66919: IFTRUE 66953
66921: LD_INT 27
66923: DOUBLE
66924: EQUAL
66925: IFTRUE 66953
66927: LD_INT 26
66929: DOUBLE
66930: EQUAL
66931: IFTRUE 66953
66933: LD_INT 28
66935: DOUBLE
66936: EQUAL
66937: IFTRUE 66953
66939: LD_INT 29
66941: DOUBLE
66942: EQUAL
66943: IFTRUE 66953
66945: LD_INT 30
66947: DOUBLE
66948: EQUAL
66949: IFTRUE 66953
66951: GO 67009
66953: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66954: LD_ADDR_VAR 0 9
66958: PUSH
66959: LD_VAR 0 59
66963: PUSH
66964: LD_VAR 0 60
66968: PUSH
66969: LD_VAR 0 61
66973: PUSH
66974: LD_VAR 0 62
66978: PUSH
66979: LD_VAR 0 63
66983: PUSH
66984: LD_VAR 0 64
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: PUSH
66997: LD_VAR 0 4
67001: PUSH
67002: LD_INT 1
67004: PLUS
67005: ARRAY
67006: ST_TO_ADDR
67007: GO 67010
67009: POP
// temp_list2 = [ ] ;
67010: LD_ADDR_VAR 0 10
67014: PUSH
67015: EMPTY
67016: ST_TO_ADDR
// for i in temp_list do
67017: LD_ADDR_VAR 0 8
67021: PUSH
67022: LD_VAR 0 9
67026: PUSH
67027: FOR_IN
67028: IFFALSE 67080
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67030: LD_ADDR_VAR 0 10
67034: PUSH
67035: LD_VAR 0 10
67039: PUSH
67040: LD_VAR 0 8
67044: PUSH
67045: LD_INT 1
67047: ARRAY
67048: PUSH
67049: LD_VAR 0 2
67053: PLUS
67054: PUSH
67055: LD_VAR 0 8
67059: PUSH
67060: LD_INT 2
67062: ARRAY
67063: PUSH
67064: LD_VAR 0 3
67068: PLUS
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: EMPTY
67075: LIST
67076: ADD
67077: ST_TO_ADDR
67078: GO 67027
67080: POP
67081: POP
// result = temp_list2 ;
67082: LD_ADDR_VAR 0 7
67086: PUSH
67087: LD_VAR 0 10
67091: ST_TO_ADDR
// end ;
67092: LD_VAR 0 7
67096: RET
// export function EnemyInRange ( unit , dist ) ; begin
67097: LD_INT 0
67099: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67100: LD_ADDR_VAR 0 3
67104: PUSH
67105: LD_VAR 0 1
67109: PPUSH
67110: CALL_OW 255
67114: PPUSH
67115: LD_VAR 0 1
67119: PPUSH
67120: CALL_OW 250
67124: PPUSH
67125: LD_VAR 0 1
67129: PPUSH
67130: CALL_OW 251
67134: PPUSH
67135: LD_VAR 0 2
67139: PPUSH
67140: CALL 40499 0 4
67144: PUSH
67145: LD_INT 4
67147: ARRAY
67148: ST_TO_ADDR
// end ;
67149: LD_VAR 0 3
67153: RET
// export function PlayerSeeMe ( unit ) ; begin
67154: LD_INT 0
67156: PPUSH
// result := See ( your_side , unit ) ;
67157: LD_ADDR_VAR 0 2
67161: PUSH
67162: LD_OWVAR 2
67166: PPUSH
67167: LD_VAR 0 1
67171: PPUSH
67172: CALL_OW 292
67176: ST_TO_ADDR
// end ;
67177: LD_VAR 0 2
67181: RET
// export function ReverseDir ( unit ) ; begin
67182: LD_INT 0
67184: PPUSH
// if not unit then
67185: LD_VAR 0 1
67189: NOT
67190: IFFALSE 67194
// exit ;
67192: GO 67217
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67194: LD_ADDR_VAR 0 2
67198: PUSH
67199: LD_VAR 0 1
67203: PPUSH
67204: CALL_OW 254
67208: PUSH
67209: LD_INT 3
67211: PLUS
67212: PUSH
67213: LD_INT 6
67215: MOD
67216: ST_TO_ADDR
// end ;
67217: LD_VAR 0 2
67221: RET
// export function ReverseArray ( array ) ; var i ; begin
67222: LD_INT 0
67224: PPUSH
67225: PPUSH
// if not array then
67226: LD_VAR 0 1
67230: NOT
67231: IFFALSE 67235
// exit ;
67233: GO 67290
// result := [ ] ;
67235: LD_ADDR_VAR 0 2
67239: PUSH
67240: EMPTY
67241: ST_TO_ADDR
// for i := array downto 1 do
67242: LD_ADDR_VAR 0 3
67246: PUSH
67247: DOUBLE
67248: LD_VAR 0 1
67252: INC
67253: ST_TO_ADDR
67254: LD_INT 1
67256: PUSH
67257: FOR_DOWNTO
67258: IFFALSE 67288
// result := Join ( result , array [ i ] ) ;
67260: LD_ADDR_VAR 0 2
67264: PUSH
67265: LD_VAR 0 2
67269: PPUSH
67270: LD_VAR 0 1
67274: PUSH
67275: LD_VAR 0 3
67279: ARRAY
67280: PPUSH
67281: CALL 71915 0 2
67285: ST_TO_ADDR
67286: GO 67257
67288: POP
67289: POP
// end ;
67290: LD_VAR 0 2
67294: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67295: LD_INT 0
67297: PPUSH
67298: PPUSH
67299: PPUSH
67300: PPUSH
67301: PPUSH
67302: PPUSH
// if not unit or not hexes then
67303: LD_VAR 0 1
67307: NOT
67308: PUSH
67309: LD_VAR 0 2
67313: NOT
67314: OR
67315: IFFALSE 67319
// exit ;
67317: GO 67442
// dist := 9999 ;
67319: LD_ADDR_VAR 0 5
67323: PUSH
67324: LD_INT 9999
67326: ST_TO_ADDR
// for i = 1 to hexes do
67327: LD_ADDR_VAR 0 4
67331: PUSH
67332: DOUBLE
67333: LD_INT 1
67335: DEC
67336: ST_TO_ADDR
67337: LD_VAR 0 2
67341: PUSH
67342: FOR_TO
67343: IFFALSE 67430
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67345: LD_ADDR_VAR 0 6
67349: PUSH
67350: LD_VAR 0 1
67354: PPUSH
67355: LD_VAR 0 2
67359: PUSH
67360: LD_VAR 0 4
67364: ARRAY
67365: PUSH
67366: LD_INT 1
67368: ARRAY
67369: PPUSH
67370: LD_VAR 0 2
67374: PUSH
67375: LD_VAR 0 4
67379: ARRAY
67380: PUSH
67381: LD_INT 2
67383: ARRAY
67384: PPUSH
67385: CALL_OW 297
67389: ST_TO_ADDR
// if tdist < dist then
67390: LD_VAR 0 6
67394: PUSH
67395: LD_VAR 0 5
67399: LESS
67400: IFFALSE 67428
// begin hex := hexes [ i ] ;
67402: LD_ADDR_VAR 0 8
67406: PUSH
67407: LD_VAR 0 2
67411: PUSH
67412: LD_VAR 0 4
67416: ARRAY
67417: ST_TO_ADDR
// dist := tdist ;
67418: LD_ADDR_VAR 0 5
67422: PUSH
67423: LD_VAR 0 6
67427: ST_TO_ADDR
// end ; end ;
67428: GO 67342
67430: POP
67431: POP
// result := hex ;
67432: LD_ADDR_VAR 0 3
67436: PUSH
67437: LD_VAR 0 8
67441: ST_TO_ADDR
// end ;
67442: LD_VAR 0 3
67446: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67451: LD_VAR 0 1
67455: NOT
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_INT 21
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 23
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PPUSH
67486: CALL_OW 69
67490: IN
67491: NOT
67492: OR
67493: IFFALSE 67497
// exit ;
67495: GO 67544
// for i = 1 to 3 do
67497: LD_ADDR_VAR 0 3
67501: PUSH
67502: DOUBLE
67503: LD_INT 1
67505: DEC
67506: ST_TO_ADDR
67507: LD_INT 3
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67542
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67513: LD_VAR 0 1
67517: PPUSH
67518: CALL_OW 250
67522: PPUSH
67523: LD_VAR 0 1
67527: PPUSH
67528: CALL_OW 251
67532: PPUSH
67533: LD_INT 1
67535: PPUSH
67536: CALL_OW 453
67540: GO 67510
67542: POP
67543: POP
// end ;
67544: LD_VAR 0 2
67548: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67549: LD_INT 0
67551: PPUSH
67552: PPUSH
67553: PPUSH
67554: PPUSH
67555: PPUSH
67556: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67557: LD_VAR 0 1
67561: NOT
67562: PUSH
67563: LD_VAR 0 2
67567: NOT
67568: OR
67569: PUSH
67570: LD_VAR 0 1
67574: PPUSH
67575: CALL_OW 314
67579: OR
67580: IFFALSE 67584
// exit ;
67582: GO 68025
// x := GetX ( enemy_unit ) ;
67584: LD_ADDR_VAR 0 7
67588: PUSH
67589: LD_VAR 0 2
67593: PPUSH
67594: CALL_OW 250
67598: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67599: LD_ADDR_VAR 0 8
67603: PUSH
67604: LD_VAR 0 2
67608: PPUSH
67609: CALL_OW 251
67613: ST_TO_ADDR
// if not x or not y then
67614: LD_VAR 0 7
67618: NOT
67619: PUSH
67620: LD_VAR 0 8
67624: NOT
67625: OR
67626: IFFALSE 67630
// exit ;
67628: GO 68025
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67630: LD_ADDR_VAR 0 6
67634: PUSH
67635: LD_VAR 0 7
67639: PPUSH
67640: LD_INT 0
67642: PPUSH
67643: LD_INT 4
67645: PPUSH
67646: CALL_OW 272
67650: PUSH
67651: LD_VAR 0 8
67655: PPUSH
67656: LD_INT 0
67658: PPUSH
67659: LD_INT 4
67661: PPUSH
67662: CALL_OW 273
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_VAR 0 7
67675: PPUSH
67676: LD_INT 1
67678: PPUSH
67679: LD_INT 4
67681: PPUSH
67682: CALL_OW 272
67686: PUSH
67687: LD_VAR 0 8
67691: PPUSH
67692: LD_INT 1
67694: PPUSH
67695: LD_INT 4
67697: PPUSH
67698: CALL_OW 273
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_VAR 0 7
67711: PPUSH
67712: LD_INT 2
67714: PPUSH
67715: LD_INT 4
67717: PPUSH
67718: CALL_OW 272
67722: PUSH
67723: LD_VAR 0 8
67727: PPUSH
67728: LD_INT 2
67730: PPUSH
67731: LD_INT 4
67733: PPUSH
67734: CALL_OW 273
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_VAR 0 7
67747: PPUSH
67748: LD_INT 3
67750: PPUSH
67751: LD_INT 4
67753: PPUSH
67754: CALL_OW 272
67758: PUSH
67759: LD_VAR 0 8
67763: PPUSH
67764: LD_INT 3
67766: PPUSH
67767: LD_INT 4
67769: PPUSH
67770: CALL_OW 273
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_VAR 0 7
67783: PPUSH
67784: LD_INT 4
67786: PPUSH
67787: LD_INT 4
67789: PPUSH
67790: CALL_OW 272
67794: PUSH
67795: LD_VAR 0 8
67799: PPUSH
67800: LD_INT 4
67802: PPUSH
67803: LD_INT 4
67805: PPUSH
67806: CALL_OW 273
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_VAR 0 7
67819: PPUSH
67820: LD_INT 5
67822: PPUSH
67823: LD_INT 4
67825: PPUSH
67826: CALL_OW 272
67830: PUSH
67831: LD_VAR 0 8
67835: PPUSH
67836: LD_INT 5
67838: PPUSH
67839: LD_INT 4
67841: PPUSH
67842: CALL_OW 273
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: ST_TO_ADDR
// for i = tmp downto 1 do
67859: LD_ADDR_VAR 0 4
67863: PUSH
67864: DOUBLE
67865: LD_VAR 0 6
67869: INC
67870: ST_TO_ADDR
67871: LD_INT 1
67873: PUSH
67874: FOR_DOWNTO
67875: IFFALSE 67976
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67877: LD_VAR 0 6
67881: PUSH
67882: LD_VAR 0 4
67886: ARRAY
67887: PUSH
67888: LD_INT 1
67890: ARRAY
67891: PPUSH
67892: LD_VAR 0 6
67896: PUSH
67897: LD_VAR 0 4
67901: ARRAY
67902: PUSH
67903: LD_INT 2
67905: ARRAY
67906: PPUSH
67907: CALL_OW 488
67911: NOT
67912: PUSH
67913: LD_VAR 0 6
67917: PUSH
67918: LD_VAR 0 4
67922: ARRAY
67923: PUSH
67924: LD_INT 1
67926: ARRAY
67927: PPUSH
67928: LD_VAR 0 6
67932: PUSH
67933: LD_VAR 0 4
67937: ARRAY
67938: PUSH
67939: LD_INT 2
67941: ARRAY
67942: PPUSH
67943: CALL_OW 428
67947: PUSH
67948: LD_INT 0
67950: NONEQUAL
67951: OR
67952: IFFALSE 67974
// tmp := Delete ( tmp , i ) ;
67954: LD_ADDR_VAR 0 6
67958: PUSH
67959: LD_VAR 0 6
67963: PPUSH
67964: LD_VAR 0 4
67968: PPUSH
67969: CALL_OW 3
67973: ST_TO_ADDR
67974: GO 67874
67976: POP
67977: POP
// j := GetClosestHex ( unit , tmp ) ;
67978: LD_ADDR_VAR 0 5
67982: PUSH
67983: LD_VAR 0 1
67987: PPUSH
67988: LD_VAR 0 6
67992: PPUSH
67993: CALL 67295 0 2
67997: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67998: LD_VAR 0 1
68002: PPUSH
68003: LD_VAR 0 5
68007: PUSH
68008: LD_INT 1
68010: ARRAY
68011: PPUSH
68012: LD_VAR 0 5
68016: PUSH
68017: LD_INT 2
68019: ARRAY
68020: PPUSH
68021: CALL_OW 111
// end ;
68025: LD_VAR 0 3
68029: RET
// export function PrepareApemanSoldier ( ) ; begin
68030: LD_INT 0
68032: PPUSH
// uc_nation := 0 ;
68033: LD_ADDR_OWVAR 21
68037: PUSH
68038: LD_INT 0
68040: ST_TO_ADDR
// hc_sex := sex_male ;
68041: LD_ADDR_OWVAR 27
68045: PUSH
68046: LD_INT 1
68048: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68049: LD_ADDR_OWVAR 28
68053: PUSH
68054: LD_INT 15
68056: ST_TO_ADDR
// hc_gallery :=  ;
68057: LD_ADDR_OWVAR 33
68061: PUSH
68062: LD_STRING 
68064: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68065: LD_ADDR_OWVAR 31
68069: PUSH
68070: LD_INT 0
68072: PPUSH
68073: LD_INT 3
68075: PPUSH
68076: CALL_OW 12
68080: PUSH
68081: LD_INT 0
68083: PPUSH
68084: LD_INT 3
68086: PPUSH
68087: CALL_OW 12
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: ST_TO_ADDR
// end ;
68104: LD_VAR 0 1
68108: RET
// export function PrepareApemanEngineer ( ) ; begin
68109: LD_INT 0
68111: PPUSH
// uc_nation := 0 ;
68112: LD_ADDR_OWVAR 21
68116: PUSH
68117: LD_INT 0
68119: ST_TO_ADDR
// hc_sex := sex_male ;
68120: LD_ADDR_OWVAR 27
68124: PUSH
68125: LD_INT 1
68127: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68128: LD_ADDR_OWVAR 28
68132: PUSH
68133: LD_INT 16
68135: ST_TO_ADDR
// hc_gallery :=  ;
68136: LD_ADDR_OWVAR 33
68140: PUSH
68141: LD_STRING 
68143: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68144: LD_ADDR_OWVAR 31
68148: PUSH
68149: LD_INT 0
68151: PPUSH
68152: LD_INT 3
68154: PPUSH
68155: CALL_OW 12
68159: PUSH
68160: LD_INT 0
68162: PPUSH
68163: LD_INT 3
68165: PPUSH
68166: CALL_OW 12
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: ST_TO_ADDR
// end ;
68183: LD_VAR 0 1
68187: RET
// export function PrepareApeman ( agressivity ) ; begin
68188: LD_INT 0
68190: PPUSH
// uc_side := 0 ;
68191: LD_ADDR_OWVAR 20
68195: PUSH
68196: LD_INT 0
68198: ST_TO_ADDR
// uc_nation := 0 ;
68199: LD_ADDR_OWVAR 21
68203: PUSH
68204: LD_INT 0
68206: ST_TO_ADDR
// hc_sex := sex_male ;
68207: LD_ADDR_OWVAR 27
68211: PUSH
68212: LD_INT 1
68214: ST_TO_ADDR
// hc_class := class_apeman ;
68215: LD_ADDR_OWVAR 28
68219: PUSH
68220: LD_INT 12
68222: ST_TO_ADDR
// hc_gallery :=  ;
68223: LD_ADDR_OWVAR 33
68227: PUSH
68228: LD_STRING 
68230: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68231: LD_ADDR_OWVAR 35
68235: PUSH
68236: LD_VAR 0 1
68240: NEG
68241: PPUSH
68242: LD_VAR 0 1
68246: PPUSH
68247: CALL_OW 12
68251: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68252: LD_ADDR_OWVAR 31
68256: PUSH
68257: LD_INT 0
68259: PPUSH
68260: LD_INT 3
68262: PPUSH
68263: CALL_OW 12
68267: PUSH
68268: LD_INT 0
68270: PPUSH
68271: LD_INT 3
68273: PPUSH
68274: CALL_OW 12
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: LD_INT 0
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: ST_TO_ADDR
// end ;
68291: LD_VAR 0 2
68295: RET
// export function PrepareTiger ( agressivity ) ; begin
68296: LD_INT 0
68298: PPUSH
// uc_side := 0 ;
68299: LD_ADDR_OWVAR 20
68303: PUSH
68304: LD_INT 0
68306: ST_TO_ADDR
// uc_nation := 0 ;
68307: LD_ADDR_OWVAR 21
68311: PUSH
68312: LD_INT 0
68314: ST_TO_ADDR
// hc_class := class_tiger ;
68315: LD_ADDR_OWVAR 28
68319: PUSH
68320: LD_INT 14
68322: ST_TO_ADDR
// hc_gallery :=  ;
68323: LD_ADDR_OWVAR 33
68327: PUSH
68328: LD_STRING 
68330: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68331: LD_ADDR_OWVAR 35
68335: PUSH
68336: LD_VAR 0 1
68340: NEG
68341: PPUSH
68342: LD_VAR 0 1
68346: PPUSH
68347: CALL_OW 12
68351: ST_TO_ADDR
// end ;
68352: LD_VAR 0 2
68356: RET
// export function PrepareEnchidna ( ) ; begin
68357: LD_INT 0
68359: PPUSH
// uc_side := 0 ;
68360: LD_ADDR_OWVAR 20
68364: PUSH
68365: LD_INT 0
68367: ST_TO_ADDR
// uc_nation := 0 ;
68368: LD_ADDR_OWVAR 21
68372: PUSH
68373: LD_INT 0
68375: ST_TO_ADDR
// hc_class := class_baggie ;
68376: LD_ADDR_OWVAR 28
68380: PUSH
68381: LD_INT 13
68383: ST_TO_ADDR
// hc_gallery :=  ;
68384: LD_ADDR_OWVAR 33
68388: PUSH
68389: LD_STRING 
68391: ST_TO_ADDR
// end ;
68392: LD_VAR 0 1
68396: RET
// export function PrepareFrog ( ) ; begin
68397: LD_INT 0
68399: PPUSH
// uc_side := 0 ;
68400: LD_ADDR_OWVAR 20
68404: PUSH
68405: LD_INT 0
68407: ST_TO_ADDR
// uc_nation := 0 ;
68408: LD_ADDR_OWVAR 21
68412: PUSH
68413: LD_INT 0
68415: ST_TO_ADDR
// hc_class := class_frog ;
68416: LD_ADDR_OWVAR 28
68420: PUSH
68421: LD_INT 19
68423: ST_TO_ADDR
// hc_gallery :=  ;
68424: LD_ADDR_OWVAR 33
68428: PUSH
68429: LD_STRING 
68431: ST_TO_ADDR
// end ;
68432: LD_VAR 0 1
68436: RET
// export function PrepareFish ( ) ; begin
68437: LD_INT 0
68439: PPUSH
// uc_side := 0 ;
68440: LD_ADDR_OWVAR 20
68444: PUSH
68445: LD_INT 0
68447: ST_TO_ADDR
// uc_nation := 0 ;
68448: LD_ADDR_OWVAR 21
68452: PUSH
68453: LD_INT 0
68455: ST_TO_ADDR
// hc_class := class_fish ;
68456: LD_ADDR_OWVAR 28
68460: PUSH
68461: LD_INT 20
68463: ST_TO_ADDR
// hc_gallery :=  ;
68464: LD_ADDR_OWVAR 33
68468: PUSH
68469: LD_STRING 
68471: ST_TO_ADDR
// end ;
68472: LD_VAR 0 1
68476: RET
// export function PrepareBird ( ) ; begin
68477: LD_INT 0
68479: PPUSH
// uc_side := 0 ;
68480: LD_ADDR_OWVAR 20
68484: PUSH
68485: LD_INT 0
68487: ST_TO_ADDR
// uc_nation := 0 ;
68488: LD_ADDR_OWVAR 21
68492: PUSH
68493: LD_INT 0
68495: ST_TO_ADDR
// hc_class := class_phororhacos ;
68496: LD_ADDR_OWVAR 28
68500: PUSH
68501: LD_INT 18
68503: ST_TO_ADDR
// hc_gallery :=  ;
68504: LD_ADDR_OWVAR 33
68508: PUSH
68509: LD_STRING 
68511: ST_TO_ADDR
// end ;
68512: LD_VAR 0 1
68516: RET
// export function PrepareHorse ( ) ; begin
68517: LD_INT 0
68519: PPUSH
// uc_side := 0 ;
68520: LD_ADDR_OWVAR 20
68524: PUSH
68525: LD_INT 0
68527: ST_TO_ADDR
// uc_nation := 0 ;
68528: LD_ADDR_OWVAR 21
68532: PUSH
68533: LD_INT 0
68535: ST_TO_ADDR
// hc_class := class_horse ;
68536: LD_ADDR_OWVAR 28
68540: PUSH
68541: LD_INT 21
68543: ST_TO_ADDR
// hc_gallery :=  ;
68544: LD_ADDR_OWVAR 33
68548: PUSH
68549: LD_STRING 
68551: ST_TO_ADDR
// end ;
68552: LD_VAR 0 1
68556: RET
// export function PrepareMastodont ( ) ; begin
68557: LD_INT 0
68559: PPUSH
// uc_side := 0 ;
68560: LD_ADDR_OWVAR 20
68564: PUSH
68565: LD_INT 0
68567: ST_TO_ADDR
// uc_nation := 0 ;
68568: LD_ADDR_OWVAR 21
68572: PUSH
68573: LD_INT 0
68575: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68576: LD_ADDR_OWVAR 37
68580: PUSH
68581: LD_INT 31
68583: ST_TO_ADDR
// vc_control := control_rider ;
68584: LD_ADDR_OWVAR 38
68588: PUSH
68589: LD_INT 4
68591: ST_TO_ADDR
// end ;
68592: LD_VAR 0 1
68596: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68597: LD_INT 0
68599: PPUSH
68600: PPUSH
68601: PPUSH
// uc_side = 0 ;
68602: LD_ADDR_OWVAR 20
68606: PUSH
68607: LD_INT 0
68609: ST_TO_ADDR
// uc_nation = 0 ;
68610: LD_ADDR_OWVAR 21
68614: PUSH
68615: LD_INT 0
68617: ST_TO_ADDR
// InitHc_All ( ) ;
68618: CALL_OW 584
// InitVc ;
68622: CALL_OW 20
// if mastodonts then
68626: LD_VAR 0 6
68630: IFFALSE 68697
// for i = 1 to mastodonts do
68632: LD_ADDR_VAR 0 11
68636: PUSH
68637: DOUBLE
68638: LD_INT 1
68640: DEC
68641: ST_TO_ADDR
68642: LD_VAR 0 6
68646: PUSH
68647: FOR_TO
68648: IFFALSE 68695
// begin vc_chassis := 31 ;
68650: LD_ADDR_OWVAR 37
68654: PUSH
68655: LD_INT 31
68657: ST_TO_ADDR
// vc_control := control_rider ;
68658: LD_ADDR_OWVAR 38
68662: PUSH
68663: LD_INT 4
68665: ST_TO_ADDR
// animal := CreateVehicle ;
68666: LD_ADDR_VAR 0 12
68670: PUSH
68671: CALL_OW 45
68675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68676: LD_VAR 0 12
68680: PPUSH
68681: LD_VAR 0 8
68685: PPUSH
68686: LD_INT 0
68688: PPUSH
68689: CALL 70832 0 3
// end ;
68693: GO 68647
68695: POP
68696: POP
// if horses then
68697: LD_VAR 0 5
68701: IFFALSE 68768
// for i = 1 to horses do
68703: LD_ADDR_VAR 0 11
68707: PUSH
68708: DOUBLE
68709: LD_INT 1
68711: DEC
68712: ST_TO_ADDR
68713: LD_VAR 0 5
68717: PUSH
68718: FOR_TO
68719: IFFALSE 68766
// begin hc_class := 21 ;
68721: LD_ADDR_OWVAR 28
68725: PUSH
68726: LD_INT 21
68728: ST_TO_ADDR
// hc_gallery :=  ;
68729: LD_ADDR_OWVAR 33
68733: PUSH
68734: LD_STRING 
68736: ST_TO_ADDR
// animal := CreateHuman ;
68737: LD_ADDR_VAR 0 12
68741: PUSH
68742: CALL_OW 44
68746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68747: LD_VAR 0 12
68751: PPUSH
68752: LD_VAR 0 8
68756: PPUSH
68757: LD_INT 0
68759: PPUSH
68760: CALL 70832 0 3
// end ;
68764: GO 68718
68766: POP
68767: POP
// if birds then
68768: LD_VAR 0 1
68772: IFFALSE 68839
// for i = 1 to birds do
68774: LD_ADDR_VAR 0 11
68778: PUSH
68779: DOUBLE
68780: LD_INT 1
68782: DEC
68783: ST_TO_ADDR
68784: LD_VAR 0 1
68788: PUSH
68789: FOR_TO
68790: IFFALSE 68837
// begin hc_class = 18 ;
68792: LD_ADDR_OWVAR 28
68796: PUSH
68797: LD_INT 18
68799: ST_TO_ADDR
// hc_gallery =  ;
68800: LD_ADDR_OWVAR 33
68804: PUSH
68805: LD_STRING 
68807: ST_TO_ADDR
// animal := CreateHuman ;
68808: LD_ADDR_VAR 0 12
68812: PUSH
68813: CALL_OW 44
68817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68818: LD_VAR 0 12
68822: PPUSH
68823: LD_VAR 0 8
68827: PPUSH
68828: LD_INT 0
68830: PPUSH
68831: CALL 70832 0 3
// end ;
68835: GO 68789
68837: POP
68838: POP
// if tigers then
68839: LD_VAR 0 2
68843: IFFALSE 68927
// for i = 1 to tigers do
68845: LD_ADDR_VAR 0 11
68849: PUSH
68850: DOUBLE
68851: LD_INT 1
68853: DEC
68854: ST_TO_ADDR
68855: LD_VAR 0 2
68859: PUSH
68860: FOR_TO
68861: IFFALSE 68925
// begin hc_class = class_tiger ;
68863: LD_ADDR_OWVAR 28
68867: PUSH
68868: LD_INT 14
68870: ST_TO_ADDR
// hc_gallery =  ;
68871: LD_ADDR_OWVAR 33
68875: PUSH
68876: LD_STRING 
68878: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68879: LD_ADDR_OWVAR 35
68883: PUSH
68884: LD_INT 7
68886: NEG
68887: PPUSH
68888: LD_INT 7
68890: PPUSH
68891: CALL_OW 12
68895: ST_TO_ADDR
// animal := CreateHuman ;
68896: LD_ADDR_VAR 0 12
68900: PUSH
68901: CALL_OW 44
68905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68906: LD_VAR 0 12
68910: PPUSH
68911: LD_VAR 0 8
68915: PPUSH
68916: LD_INT 0
68918: PPUSH
68919: CALL 70832 0 3
// end ;
68923: GO 68860
68925: POP
68926: POP
// if apemans then
68927: LD_VAR 0 3
68931: IFFALSE 69054
// for i = 1 to apemans do
68933: LD_ADDR_VAR 0 11
68937: PUSH
68938: DOUBLE
68939: LD_INT 1
68941: DEC
68942: ST_TO_ADDR
68943: LD_VAR 0 3
68947: PUSH
68948: FOR_TO
68949: IFFALSE 69052
// begin hc_class = class_apeman ;
68951: LD_ADDR_OWVAR 28
68955: PUSH
68956: LD_INT 12
68958: ST_TO_ADDR
// hc_gallery =  ;
68959: LD_ADDR_OWVAR 33
68963: PUSH
68964: LD_STRING 
68966: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68967: LD_ADDR_OWVAR 35
68971: PUSH
68972: LD_INT 2
68974: NEG
68975: PPUSH
68976: LD_INT 2
68978: PPUSH
68979: CALL_OW 12
68983: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68984: LD_ADDR_OWVAR 31
68988: PUSH
68989: LD_INT 1
68991: PPUSH
68992: LD_INT 3
68994: PPUSH
68995: CALL_OW 12
68999: PUSH
69000: LD_INT 1
69002: PPUSH
69003: LD_INT 3
69005: PPUSH
69006: CALL_OW 12
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: LD_INT 0
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: ST_TO_ADDR
// animal := CreateHuman ;
69023: LD_ADDR_VAR 0 12
69027: PUSH
69028: CALL_OW 44
69032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69033: LD_VAR 0 12
69037: PPUSH
69038: LD_VAR 0 8
69042: PPUSH
69043: LD_INT 0
69045: PPUSH
69046: CALL 70832 0 3
// end ;
69050: GO 68948
69052: POP
69053: POP
// if enchidnas then
69054: LD_VAR 0 4
69058: IFFALSE 69125
// for i = 1 to enchidnas do
69060: LD_ADDR_VAR 0 11
69064: PUSH
69065: DOUBLE
69066: LD_INT 1
69068: DEC
69069: ST_TO_ADDR
69070: LD_VAR 0 4
69074: PUSH
69075: FOR_TO
69076: IFFALSE 69123
// begin hc_class = 13 ;
69078: LD_ADDR_OWVAR 28
69082: PUSH
69083: LD_INT 13
69085: ST_TO_ADDR
// hc_gallery =  ;
69086: LD_ADDR_OWVAR 33
69090: PUSH
69091: LD_STRING 
69093: ST_TO_ADDR
// animal := CreateHuman ;
69094: LD_ADDR_VAR 0 12
69098: PUSH
69099: CALL_OW 44
69103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69104: LD_VAR 0 12
69108: PPUSH
69109: LD_VAR 0 8
69113: PPUSH
69114: LD_INT 0
69116: PPUSH
69117: CALL 70832 0 3
// end ;
69121: GO 69075
69123: POP
69124: POP
// if fishes then
69125: LD_VAR 0 7
69129: IFFALSE 69196
// for i = 1 to fishes do
69131: LD_ADDR_VAR 0 11
69135: PUSH
69136: DOUBLE
69137: LD_INT 1
69139: DEC
69140: ST_TO_ADDR
69141: LD_VAR 0 7
69145: PUSH
69146: FOR_TO
69147: IFFALSE 69194
// begin hc_class = 20 ;
69149: LD_ADDR_OWVAR 28
69153: PUSH
69154: LD_INT 20
69156: ST_TO_ADDR
// hc_gallery =  ;
69157: LD_ADDR_OWVAR 33
69161: PUSH
69162: LD_STRING 
69164: ST_TO_ADDR
// animal := CreateHuman ;
69165: LD_ADDR_VAR 0 12
69169: PUSH
69170: CALL_OW 44
69174: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69175: LD_VAR 0 12
69179: PPUSH
69180: LD_VAR 0 9
69184: PPUSH
69185: LD_INT 0
69187: PPUSH
69188: CALL 70832 0 3
// end ;
69192: GO 69146
69194: POP
69195: POP
// end ;
69196: LD_VAR 0 10
69200: RET
// export function WantHeal ( sci , unit ) ; begin
69201: LD_INT 0
69203: PPUSH
// if GetTaskList ( sci ) > 0 then
69204: LD_VAR 0 1
69208: PPUSH
69209: CALL_OW 437
69213: PUSH
69214: LD_INT 0
69216: GREATER
69217: IFFALSE 69287
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69219: LD_VAR 0 1
69223: PPUSH
69224: CALL_OW 437
69228: PUSH
69229: LD_INT 1
69231: ARRAY
69232: PUSH
69233: LD_INT 1
69235: ARRAY
69236: PUSH
69237: LD_STRING l
69239: EQUAL
69240: PUSH
69241: LD_VAR 0 1
69245: PPUSH
69246: CALL_OW 437
69250: PUSH
69251: LD_INT 1
69253: ARRAY
69254: PUSH
69255: LD_INT 4
69257: ARRAY
69258: PUSH
69259: LD_VAR 0 2
69263: EQUAL
69264: AND
69265: IFFALSE 69277
// result := true else
69267: LD_ADDR_VAR 0 3
69271: PUSH
69272: LD_INT 1
69274: ST_TO_ADDR
69275: GO 69285
// result := false ;
69277: LD_ADDR_VAR 0 3
69281: PUSH
69282: LD_INT 0
69284: ST_TO_ADDR
// end else
69285: GO 69295
// result := false ;
69287: LD_ADDR_VAR 0 3
69291: PUSH
69292: LD_INT 0
69294: ST_TO_ADDR
// end ;
69295: LD_VAR 0 3
69299: RET
// export function HealTarget ( sci ) ; begin
69300: LD_INT 0
69302: PPUSH
// if not sci then
69303: LD_VAR 0 1
69307: NOT
69308: IFFALSE 69312
// exit ;
69310: GO 69377
// result := 0 ;
69312: LD_ADDR_VAR 0 2
69316: PUSH
69317: LD_INT 0
69319: ST_TO_ADDR
// if GetTaskList ( sci ) then
69320: LD_VAR 0 1
69324: PPUSH
69325: CALL_OW 437
69329: IFFALSE 69377
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69331: LD_VAR 0 1
69335: PPUSH
69336: CALL_OW 437
69340: PUSH
69341: LD_INT 1
69343: ARRAY
69344: PUSH
69345: LD_INT 1
69347: ARRAY
69348: PUSH
69349: LD_STRING l
69351: EQUAL
69352: IFFALSE 69377
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69354: LD_ADDR_VAR 0 2
69358: PUSH
69359: LD_VAR 0 1
69363: PPUSH
69364: CALL_OW 437
69368: PUSH
69369: LD_INT 1
69371: ARRAY
69372: PUSH
69373: LD_INT 4
69375: ARRAY
69376: ST_TO_ADDR
// end ;
69377: LD_VAR 0 2
69381: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69382: LD_INT 0
69384: PPUSH
69385: PPUSH
69386: PPUSH
69387: PPUSH
// if not base_units then
69388: LD_VAR 0 1
69392: NOT
69393: IFFALSE 69397
// exit ;
69395: GO 69484
// result := false ;
69397: LD_ADDR_VAR 0 2
69401: PUSH
69402: LD_INT 0
69404: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69405: LD_ADDR_VAR 0 5
69409: PUSH
69410: LD_VAR 0 1
69414: PPUSH
69415: LD_INT 21
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PPUSH
69425: CALL_OW 72
69429: ST_TO_ADDR
// if not tmp then
69430: LD_VAR 0 5
69434: NOT
69435: IFFALSE 69439
// exit ;
69437: GO 69484
// for i in tmp do
69439: LD_ADDR_VAR 0 3
69443: PUSH
69444: LD_VAR 0 5
69448: PUSH
69449: FOR_IN
69450: IFFALSE 69482
// begin result := EnemyInRange ( i , 22 ) ;
69452: LD_ADDR_VAR 0 2
69456: PUSH
69457: LD_VAR 0 3
69461: PPUSH
69462: LD_INT 22
69464: PPUSH
69465: CALL 67097 0 2
69469: ST_TO_ADDR
// if result then
69470: LD_VAR 0 2
69474: IFFALSE 69480
// exit ;
69476: POP
69477: POP
69478: GO 69484
// end ;
69480: GO 69449
69482: POP
69483: POP
// end ;
69484: LD_VAR 0 2
69488: RET
// export function FilterByTag ( units , tag ) ; begin
69489: LD_INT 0
69491: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69492: LD_ADDR_VAR 0 3
69496: PUSH
69497: LD_VAR 0 1
69501: PPUSH
69502: LD_INT 120
69504: PUSH
69505: LD_VAR 0 2
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PPUSH
69514: CALL_OW 72
69518: ST_TO_ADDR
// end ;
69519: LD_VAR 0 3
69523: RET
// export function IsDriver ( un ) ; begin
69524: LD_INT 0
69526: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69527: LD_ADDR_VAR 0 2
69531: PUSH
69532: LD_VAR 0 1
69536: PUSH
69537: LD_INT 55
69539: PUSH
69540: EMPTY
69541: LIST
69542: PPUSH
69543: CALL_OW 69
69547: IN
69548: ST_TO_ADDR
// end ;
69549: LD_VAR 0 2
69553: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69554: LD_INT 0
69556: PPUSH
69557: PPUSH
// list := [ ] ;
69558: LD_ADDR_VAR 0 5
69562: PUSH
69563: EMPTY
69564: ST_TO_ADDR
// case d of 0 :
69565: LD_VAR 0 3
69569: PUSH
69570: LD_INT 0
69572: DOUBLE
69573: EQUAL
69574: IFTRUE 69578
69576: GO 69711
69578: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69579: LD_ADDR_VAR 0 5
69583: PUSH
69584: LD_VAR 0 1
69588: PUSH
69589: LD_INT 4
69591: MINUS
69592: PUSH
69593: LD_VAR 0 2
69597: PUSH
69598: LD_INT 4
69600: MINUS
69601: PUSH
69602: LD_INT 2
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: LIST
69609: PUSH
69610: LD_VAR 0 1
69614: PUSH
69615: LD_INT 3
69617: MINUS
69618: PUSH
69619: LD_VAR 0 2
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: LIST
69631: PUSH
69632: LD_VAR 0 1
69636: PUSH
69637: LD_INT 4
69639: PLUS
69640: PUSH
69641: LD_VAR 0 2
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: PUSH
69654: LD_VAR 0 1
69658: PUSH
69659: LD_INT 3
69661: PLUS
69662: PUSH
69663: LD_VAR 0 2
69667: PUSH
69668: LD_INT 3
69670: PLUS
69671: PUSH
69672: LD_INT 5
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: PUSH
69680: LD_VAR 0 1
69684: PUSH
69685: LD_VAR 0 2
69689: PUSH
69690: LD_INT 4
69692: PLUS
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: ST_TO_ADDR
// end ; 1 :
69709: GO 70409
69711: LD_INT 1
69713: DOUBLE
69714: EQUAL
69715: IFTRUE 69719
69717: GO 69852
69719: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69720: LD_ADDR_VAR 0 5
69724: PUSH
69725: LD_VAR 0 1
69729: PUSH
69730: LD_VAR 0 2
69734: PUSH
69735: LD_INT 4
69737: MINUS
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: PUSH
69747: LD_VAR 0 1
69751: PUSH
69752: LD_INT 3
69754: MINUS
69755: PUSH
69756: LD_VAR 0 2
69760: PUSH
69761: LD_INT 3
69763: MINUS
69764: PUSH
69765: LD_INT 2
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: PUSH
69773: LD_VAR 0 1
69777: PUSH
69778: LD_INT 4
69780: MINUS
69781: PUSH
69782: LD_VAR 0 2
69786: PUSH
69787: LD_INT 1
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: LIST
69794: PUSH
69795: LD_VAR 0 1
69799: PUSH
69800: LD_VAR 0 2
69804: PUSH
69805: LD_INT 3
69807: PLUS
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: LIST
69816: PUSH
69817: LD_VAR 0 1
69821: PUSH
69822: LD_INT 4
69824: PLUS
69825: PUSH
69826: LD_VAR 0 2
69830: PUSH
69831: LD_INT 4
69833: PLUS
69834: PUSH
69835: LD_INT 5
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: LIST
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: ST_TO_ADDR
// end ; 2 :
69850: GO 70409
69852: LD_INT 2
69854: DOUBLE
69855: EQUAL
69856: IFTRUE 69860
69858: GO 69989
69860: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69861: LD_ADDR_VAR 0 5
69865: PUSH
69866: LD_VAR 0 1
69870: PUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_INT 3
69878: MINUS
69879: PUSH
69880: LD_INT 3
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: PUSH
69888: LD_VAR 0 1
69892: PUSH
69893: LD_INT 4
69895: PLUS
69896: PUSH
69897: LD_VAR 0 2
69901: PUSH
69902: LD_INT 4
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: PUSH
69910: LD_VAR 0 1
69914: PUSH
69915: LD_VAR 0 2
69919: PUSH
69920: LD_INT 4
69922: PLUS
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: PUSH
69932: LD_VAR 0 1
69936: PUSH
69937: LD_INT 3
69939: MINUS
69940: PUSH
69941: LD_VAR 0 2
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: PUSH
69954: LD_VAR 0 1
69958: PUSH
69959: LD_INT 4
69961: MINUS
69962: PUSH
69963: LD_VAR 0 2
69967: PUSH
69968: LD_INT 4
69970: MINUS
69971: PUSH
69972: LD_INT 2
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: LIST
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: ST_TO_ADDR
// end ; 3 :
69987: GO 70409
69989: LD_INT 3
69991: DOUBLE
69992: EQUAL
69993: IFTRUE 69997
69995: GO 70130
69997: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69998: LD_ADDR_VAR 0 5
70002: PUSH
70003: LD_VAR 0 1
70007: PUSH
70008: LD_INT 3
70010: PLUS
70011: PUSH
70012: LD_VAR 0 2
70016: PUSH
70017: LD_INT 4
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: LIST
70024: PUSH
70025: LD_VAR 0 1
70029: PUSH
70030: LD_INT 4
70032: PLUS
70033: PUSH
70034: LD_VAR 0 2
70038: PUSH
70039: LD_INT 4
70041: PLUS
70042: PUSH
70043: LD_INT 5
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: PUSH
70051: LD_VAR 0 1
70055: PUSH
70056: LD_INT 4
70058: MINUS
70059: PUSH
70060: LD_VAR 0 2
70064: PUSH
70065: LD_INT 1
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: PUSH
70073: LD_VAR 0 1
70077: PUSH
70078: LD_VAR 0 2
70082: PUSH
70083: LD_INT 4
70085: MINUS
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: LIST
70094: PUSH
70095: LD_VAR 0 1
70099: PUSH
70100: LD_INT 3
70102: MINUS
70103: PUSH
70104: LD_VAR 0 2
70108: PUSH
70109: LD_INT 3
70111: MINUS
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: ST_TO_ADDR
// end ; 4 :
70128: GO 70409
70130: LD_INT 4
70132: DOUBLE
70133: EQUAL
70134: IFTRUE 70138
70136: GO 70271
70138: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70139: LD_ADDR_VAR 0 5
70143: PUSH
70144: LD_VAR 0 1
70148: PUSH
70149: LD_VAR 0 2
70153: PUSH
70154: LD_INT 4
70156: PLUS
70157: PUSH
70158: LD_INT 0
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: PUSH
70166: LD_VAR 0 1
70170: PUSH
70171: LD_INT 3
70173: PLUS
70174: PUSH
70175: LD_VAR 0 2
70179: PUSH
70180: LD_INT 3
70182: PLUS
70183: PUSH
70184: LD_INT 5
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: LIST
70191: PUSH
70192: LD_VAR 0 1
70196: PUSH
70197: LD_INT 4
70199: PLUS
70200: PUSH
70201: LD_VAR 0 2
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: LIST
70213: PUSH
70214: LD_VAR 0 1
70218: PUSH
70219: LD_VAR 0 2
70223: PUSH
70224: LD_INT 3
70226: MINUS
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: LIST
70235: PUSH
70236: LD_VAR 0 1
70240: PUSH
70241: LD_INT 4
70243: MINUS
70244: PUSH
70245: LD_VAR 0 2
70249: PUSH
70250: LD_INT 4
70252: MINUS
70253: PUSH
70254: LD_INT 2
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: ST_TO_ADDR
// end ; 5 :
70269: GO 70409
70271: LD_INT 5
70273: DOUBLE
70274: EQUAL
70275: IFTRUE 70279
70277: GO 70408
70279: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70280: LD_ADDR_VAR 0 5
70284: PUSH
70285: LD_VAR 0 1
70289: PUSH
70290: LD_INT 4
70292: MINUS
70293: PUSH
70294: LD_VAR 0 2
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: PUSH
70307: LD_VAR 0 1
70311: PUSH
70312: LD_VAR 0 2
70316: PUSH
70317: LD_INT 4
70319: MINUS
70320: PUSH
70321: LD_INT 3
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: PUSH
70329: LD_VAR 0 1
70333: PUSH
70334: LD_INT 4
70336: PLUS
70337: PUSH
70338: LD_VAR 0 2
70342: PUSH
70343: LD_INT 4
70345: PLUS
70346: PUSH
70347: LD_INT 5
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: LIST
70354: PUSH
70355: LD_VAR 0 1
70359: PUSH
70360: LD_INT 3
70362: PLUS
70363: PUSH
70364: LD_VAR 0 2
70368: PUSH
70369: LD_INT 4
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: LIST
70376: PUSH
70377: LD_VAR 0 1
70381: PUSH
70382: LD_VAR 0 2
70386: PUSH
70387: LD_INT 3
70389: PLUS
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: ST_TO_ADDR
// end ; end ;
70406: GO 70409
70408: POP
// result := list ;
70409: LD_ADDR_VAR 0 4
70413: PUSH
70414: LD_VAR 0 5
70418: ST_TO_ADDR
// end ;
70419: LD_VAR 0 4
70423: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70424: LD_INT 0
70426: PPUSH
70427: PPUSH
70428: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70429: LD_VAR 0 1
70433: NOT
70434: PUSH
70435: LD_VAR 0 2
70439: PUSH
70440: LD_INT 1
70442: PUSH
70443: LD_INT 2
70445: PUSH
70446: LD_INT 3
70448: PUSH
70449: LD_INT 4
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: IN
70458: NOT
70459: OR
70460: IFFALSE 70464
// exit ;
70462: GO 70556
// tmp := [ ] ;
70464: LD_ADDR_VAR 0 5
70468: PUSH
70469: EMPTY
70470: ST_TO_ADDR
// for i in units do
70471: LD_ADDR_VAR 0 4
70475: PUSH
70476: LD_VAR 0 1
70480: PUSH
70481: FOR_IN
70482: IFFALSE 70525
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70484: LD_ADDR_VAR 0 5
70488: PUSH
70489: LD_VAR 0 5
70493: PPUSH
70494: LD_VAR 0 5
70498: PUSH
70499: LD_INT 1
70501: PLUS
70502: PPUSH
70503: LD_VAR 0 4
70507: PPUSH
70508: LD_VAR 0 2
70512: PPUSH
70513: CALL_OW 259
70517: PPUSH
70518: CALL_OW 2
70522: ST_TO_ADDR
70523: GO 70481
70525: POP
70526: POP
// if not tmp then
70527: LD_VAR 0 5
70531: NOT
70532: IFFALSE 70536
// exit ;
70534: GO 70556
// result := SortListByListDesc ( units , tmp ) ;
70536: LD_ADDR_VAR 0 3
70540: PUSH
70541: LD_VAR 0 1
70545: PPUSH
70546: LD_VAR 0 5
70550: PPUSH
70551: CALL_OW 77
70555: ST_TO_ADDR
// end ;
70556: LD_VAR 0 3
70560: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70561: LD_INT 0
70563: PPUSH
70564: PPUSH
70565: PPUSH
// result := false ;
70566: LD_ADDR_VAR 0 3
70570: PUSH
70571: LD_INT 0
70573: ST_TO_ADDR
// x := GetX ( building ) ;
70574: LD_ADDR_VAR 0 4
70578: PUSH
70579: LD_VAR 0 2
70583: PPUSH
70584: CALL_OW 250
70588: ST_TO_ADDR
// y := GetY ( building ) ;
70589: LD_ADDR_VAR 0 5
70593: PUSH
70594: LD_VAR 0 2
70598: PPUSH
70599: CALL_OW 251
70603: ST_TO_ADDR
// if not building or not x or not y then
70604: LD_VAR 0 2
70608: NOT
70609: PUSH
70610: LD_VAR 0 4
70614: NOT
70615: OR
70616: PUSH
70617: LD_VAR 0 5
70621: NOT
70622: OR
70623: IFFALSE 70627
// exit ;
70625: GO 70719
// if GetTaskList ( unit ) then
70627: LD_VAR 0 1
70631: PPUSH
70632: CALL_OW 437
70636: IFFALSE 70719
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70638: LD_STRING e
70640: PUSH
70641: LD_VAR 0 1
70645: PPUSH
70646: CALL_OW 437
70650: PUSH
70651: LD_INT 1
70653: ARRAY
70654: PUSH
70655: LD_INT 1
70657: ARRAY
70658: EQUAL
70659: PUSH
70660: LD_VAR 0 4
70664: PUSH
70665: LD_VAR 0 1
70669: PPUSH
70670: CALL_OW 437
70674: PUSH
70675: LD_INT 1
70677: ARRAY
70678: PUSH
70679: LD_INT 2
70681: ARRAY
70682: EQUAL
70683: AND
70684: PUSH
70685: LD_VAR 0 5
70689: PUSH
70690: LD_VAR 0 1
70694: PPUSH
70695: CALL_OW 437
70699: PUSH
70700: LD_INT 1
70702: ARRAY
70703: PUSH
70704: LD_INT 3
70706: ARRAY
70707: EQUAL
70708: AND
70709: IFFALSE 70719
// result := true end ;
70711: LD_ADDR_VAR 0 3
70715: PUSH
70716: LD_INT 1
70718: ST_TO_ADDR
// end ;
70719: LD_VAR 0 3
70723: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70724: LD_INT 0
70726: PPUSH
// result := false ;
70727: LD_ADDR_VAR 0 4
70731: PUSH
70732: LD_INT 0
70734: ST_TO_ADDR
// if GetTaskList ( unit ) then
70735: LD_VAR 0 1
70739: PPUSH
70740: CALL_OW 437
70744: IFFALSE 70827
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70746: LD_STRING M
70748: PUSH
70749: LD_VAR 0 1
70753: PPUSH
70754: CALL_OW 437
70758: PUSH
70759: LD_INT 1
70761: ARRAY
70762: PUSH
70763: LD_INT 1
70765: ARRAY
70766: EQUAL
70767: PUSH
70768: LD_VAR 0 2
70772: PUSH
70773: LD_VAR 0 1
70777: PPUSH
70778: CALL_OW 437
70782: PUSH
70783: LD_INT 1
70785: ARRAY
70786: PUSH
70787: LD_INT 2
70789: ARRAY
70790: EQUAL
70791: AND
70792: PUSH
70793: LD_VAR 0 3
70797: PUSH
70798: LD_VAR 0 1
70802: PPUSH
70803: CALL_OW 437
70807: PUSH
70808: LD_INT 1
70810: ARRAY
70811: PUSH
70812: LD_INT 3
70814: ARRAY
70815: EQUAL
70816: AND
70817: IFFALSE 70827
// result := true ;
70819: LD_ADDR_VAR 0 4
70823: PUSH
70824: LD_INT 1
70826: ST_TO_ADDR
// end ; end ;
70827: LD_VAR 0 4
70831: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70832: LD_INT 0
70834: PPUSH
70835: PPUSH
70836: PPUSH
70837: PPUSH
// if not unit or not area then
70838: LD_VAR 0 1
70842: NOT
70843: PUSH
70844: LD_VAR 0 2
70848: NOT
70849: OR
70850: IFFALSE 70854
// exit ;
70852: GO 71018
// tmp := AreaToList ( area , i ) ;
70854: LD_ADDR_VAR 0 6
70858: PUSH
70859: LD_VAR 0 2
70863: PPUSH
70864: LD_VAR 0 5
70868: PPUSH
70869: CALL_OW 517
70873: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70874: LD_ADDR_VAR 0 5
70878: PUSH
70879: DOUBLE
70880: LD_INT 1
70882: DEC
70883: ST_TO_ADDR
70884: LD_VAR 0 6
70888: PUSH
70889: LD_INT 1
70891: ARRAY
70892: PUSH
70893: FOR_TO
70894: IFFALSE 71016
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70896: LD_ADDR_VAR 0 7
70900: PUSH
70901: LD_VAR 0 6
70905: PUSH
70906: LD_INT 1
70908: ARRAY
70909: PUSH
70910: LD_VAR 0 5
70914: ARRAY
70915: PUSH
70916: LD_VAR 0 6
70920: PUSH
70921: LD_INT 2
70923: ARRAY
70924: PUSH
70925: LD_VAR 0 5
70929: ARRAY
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70935: LD_VAR 0 7
70939: PUSH
70940: LD_INT 1
70942: ARRAY
70943: PPUSH
70944: LD_VAR 0 7
70948: PUSH
70949: LD_INT 2
70951: ARRAY
70952: PPUSH
70953: CALL_OW 428
70957: PUSH
70958: LD_INT 0
70960: EQUAL
70961: IFFALSE 71014
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70963: LD_VAR 0 1
70967: PPUSH
70968: LD_VAR 0 7
70972: PUSH
70973: LD_INT 1
70975: ARRAY
70976: PPUSH
70977: LD_VAR 0 7
70981: PUSH
70982: LD_INT 2
70984: ARRAY
70985: PPUSH
70986: LD_VAR 0 3
70990: PPUSH
70991: CALL_OW 48
// result := IsPlaced ( unit ) ;
70995: LD_ADDR_VAR 0 4
70999: PUSH
71000: LD_VAR 0 1
71004: PPUSH
71005: CALL_OW 305
71009: ST_TO_ADDR
// exit ;
71010: POP
71011: POP
71012: GO 71018
// end ; end ;
71014: GO 70893
71016: POP
71017: POP
// end ;
71018: LD_VAR 0 4
71022: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71023: LD_INT 0
71025: PPUSH
71026: PPUSH
71027: PPUSH
// if not side or side > 8 then
71028: LD_VAR 0 1
71032: NOT
71033: PUSH
71034: LD_VAR 0 1
71038: PUSH
71039: LD_INT 8
71041: GREATER
71042: OR
71043: IFFALSE 71047
// exit ;
71045: GO 71234
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71047: LD_ADDR_VAR 0 4
71051: PUSH
71052: LD_INT 22
71054: PUSH
71055: LD_VAR 0 1
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 21
71066: PUSH
71067: LD_INT 3
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PPUSH
71078: CALL_OW 69
71082: ST_TO_ADDR
// if not tmp then
71083: LD_VAR 0 4
71087: NOT
71088: IFFALSE 71092
// exit ;
71090: GO 71234
// enable_addtolog := true ;
71092: LD_ADDR_OWVAR 81
71096: PUSH
71097: LD_INT 1
71099: ST_TO_ADDR
// AddToLog ( [ ) ;
71100: LD_STRING [
71102: PPUSH
71103: CALL_OW 561
// for i in tmp do
71107: LD_ADDR_VAR 0 3
71111: PUSH
71112: LD_VAR 0 4
71116: PUSH
71117: FOR_IN
71118: IFFALSE 71225
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71120: LD_STRING [
71122: PUSH
71123: LD_VAR 0 3
71127: PPUSH
71128: CALL_OW 266
71132: STR
71133: PUSH
71134: LD_STRING , 
71136: STR
71137: PUSH
71138: LD_VAR 0 3
71142: PPUSH
71143: CALL_OW 250
71147: STR
71148: PUSH
71149: LD_STRING , 
71151: STR
71152: PUSH
71153: LD_VAR 0 3
71157: PPUSH
71158: CALL_OW 251
71162: STR
71163: PUSH
71164: LD_STRING , 
71166: STR
71167: PUSH
71168: LD_VAR 0 3
71172: PPUSH
71173: CALL_OW 254
71177: STR
71178: PUSH
71179: LD_STRING , 
71181: STR
71182: PUSH
71183: LD_VAR 0 3
71187: PPUSH
71188: LD_INT 1
71190: PPUSH
71191: CALL_OW 268
71195: STR
71196: PUSH
71197: LD_STRING , 
71199: STR
71200: PUSH
71201: LD_VAR 0 3
71205: PPUSH
71206: LD_INT 2
71208: PPUSH
71209: CALL_OW 268
71213: STR
71214: PUSH
71215: LD_STRING ],
71217: STR
71218: PPUSH
71219: CALL_OW 561
// end ;
71223: GO 71117
71225: POP
71226: POP
// AddToLog ( ]; ) ;
71227: LD_STRING ];
71229: PPUSH
71230: CALL_OW 561
// end ;
71234: LD_VAR 0 2
71238: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71239: LD_INT 0
71241: PPUSH
71242: PPUSH
71243: PPUSH
71244: PPUSH
71245: PPUSH
// if not area or not rate or not max then
71246: LD_VAR 0 1
71250: NOT
71251: PUSH
71252: LD_VAR 0 2
71256: NOT
71257: OR
71258: PUSH
71259: LD_VAR 0 4
71263: NOT
71264: OR
71265: IFFALSE 71269
// exit ;
71267: GO 71458
// while 1 do
71269: LD_INT 1
71271: IFFALSE 71458
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71273: LD_ADDR_VAR 0 9
71277: PUSH
71278: LD_VAR 0 1
71282: PPUSH
71283: LD_INT 1
71285: PPUSH
71286: CALL_OW 287
71290: PUSH
71291: LD_INT 10
71293: MUL
71294: ST_TO_ADDR
// r := rate / 10 ;
71295: LD_ADDR_VAR 0 7
71299: PUSH
71300: LD_VAR 0 2
71304: PUSH
71305: LD_INT 10
71307: DIVREAL
71308: ST_TO_ADDR
// time := 1 1$00 ;
71309: LD_ADDR_VAR 0 8
71313: PUSH
71314: LD_INT 2100
71316: ST_TO_ADDR
// if amount < min then
71317: LD_VAR 0 9
71321: PUSH
71322: LD_VAR 0 3
71326: LESS
71327: IFFALSE 71345
// r := r * 2 else
71329: LD_ADDR_VAR 0 7
71333: PUSH
71334: LD_VAR 0 7
71338: PUSH
71339: LD_INT 2
71341: MUL
71342: ST_TO_ADDR
71343: GO 71371
// if amount > max then
71345: LD_VAR 0 9
71349: PUSH
71350: LD_VAR 0 4
71354: GREATER
71355: IFFALSE 71371
// r := r / 2 ;
71357: LD_ADDR_VAR 0 7
71361: PUSH
71362: LD_VAR 0 7
71366: PUSH
71367: LD_INT 2
71369: DIVREAL
71370: ST_TO_ADDR
// time := time / r ;
71371: LD_ADDR_VAR 0 8
71375: PUSH
71376: LD_VAR 0 8
71380: PUSH
71381: LD_VAR 0 7
71385: DIVREAL
71386: ST_TO_ADDR
// if time < 0 then
71387: LD_VAR 0 8
71391: PUSH
71392: LD_INT 0
71394: LESS
71395: IFFALSE 71412
// time := time * - 1 ;
71397: LD_ADDR_VAR 0 8
71401: PUSH
71402: LD_VAR 0 8
71406: PUSH
71407: LD_INT 1
71409: NEG
71410: MUL
71411: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71412: LD_VAR 0 8
71416: PUSH
71417: LD_INT 35
71419: PPUSH
71420: LD_INT 875
71422: PPUSH
71423: CALL_OW 12
71427: PLUS
71428: PPUSH
71429: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71433: LD_INT 1
71435: PPUSH
71436: LD_INT 5
71438: PPUSH
71439: CALL_OW 12
71443: PPUSH
71444: LD_VAR 0 1
71448: PPUSH
71449: LD_INT 1
71451: PPUSH
71452: CALL_OW 55
// end ;
71456: GO 71269
// end ;
71458: LD_VAR 0 5
71462: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71463: LD_INT 0
71465: PPUSH
71466: PPUSH
71467: PPUSH
71468: PPUSH
71469: PPUSH
71470: PPUSH
71471: PPUSH
71472: PPUSH
// if not turrets or not factories then
71473: LD_VAR 0 1
71477: NOT
71478: PUSH
71479: LD_VAR 0 2
71483: NOT
71484: OR
71485: IFFALSE 71489
// exit ;
71487: GO 71796
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71489: LD_ADDR_VAR 0 10
71493: PUSH
71494: LD_INT 5
71496: PUSH
71497: LD_INT 6
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 2
71506: PUSH
71507: LD_INT 4
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 3
71516: PUSH
71517: LD_INT 5
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 24
71531: PUSH
71532: LD_INT 25
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 23
71541: PUSH
71542: LD_INT 27
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 42
71555: PUSH
71556: LD_INT 43
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 44
71565: PUSH
71566: LD_INT 46
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 45
71575: PUSH
71576: LD_INT 47
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: LIST
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: LIST
71592: ST_TO_ADDR
// result := [ ] ;
71593: LD_ADDR_VAR 0 3
71597: PUSH
71598: EMPTY
71599: ST_TO_ADDR
// for i in turrets do
71600: LD_ADDR_VAR 0 4
71604: PUSH
71605: LD_VAR 0 1
71609: PUSH
71610: FOR_IN
71611: IFFALSE 71794
// begin nat := GetNation ( i ) ;
71613: LD_ADDR_VAR 0 7
71617: PUSH
71618: LD_VAR 0 4
71622: PPUSH
71623: CALL_OW 248
71627: ST_TO_ADDR
// weapon := 0 ;
71628: LD_ADDR_VAR 0 8
71632: PUSH
71633: LD_INT 0
71635: ST_TO_ADDR
// if not nat then
71636: LD_VAR 0 7
71640: NOT
71641: IFFALSE 71645
// continue ;
71643: GO 71610
// for j in list [ nat ] do
71645: LD_ADDR_VAR 0 5
71649: PUSH
71650: LD_VAR 0 10
71654: PUSH
71655: LD_VAR 0 7
71659: ARRAY
71660: PUSH
71661: FOR_IN
71662: IFFALSE 71703
// if GetBWeapon ( i ) = j [ 1 ] then
71664: LD_VAR 0 4
71668: PPUSH
71669: CALL_OW 269
71673: PUSH
71674: LD_VAR 0 5
71678: PUSH
71679: LD_INT 1
71681: ARRAY
71682: EQUAL
71683: IFFALSE 71701
// begin weapon := j [ 2 ] ;
71685: LD_ADDR_VAR 0 8
71689: PUSH
71690: LD_VAR 0 5
71694: PUSH
71695: LD_INT 2
71697: ARRAY
71698: ST_TO_ADDR
// break ;
71699: GO 71703
// end ;
71701: GO 71661
71703: POP
71704: POP
// if not weapon then
71705: LD_VAR 0 8
71709: NOT
71710: IFFALSE 71714
// continue ;
71712: GO 71610
// for k in factories do
71714: LD_ADDR_VAR 0 6
71718: PUSH
71719: LD_VAR 0 2
71723: PUSH
71724: FOR_IN
71725: IFFALSE 71790
// begin weapons := AvailableWeaponList ( k ) ;
71727: LD_ADDR_VAR 0 9
71731: PUSH
71732: LD_VAR 0 6
71736: PPUSH
71737: CALL_OW 478
71741: ST_TO_ADDR
// if not weapons then
71742: LD_VAR 0 9
71746: NOT
71747: IFFALSE 71751
// continue ;
71749: GO 71724
// if weapon in weapons then
71751: LD_VAR 0 8
71755: PUSH
71756: LD_VAR 0 9
71760: IN
71761: IFFALSE 71788
// begin result := [ i , weapon ] ;
71763: LD_ADDR_VAR 0 3
71767: PUSH
71768: LD_VAR 0 4
71772: PUSH
71773: LD_VAR 0 8
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: ST_TO_ADDR
// exit ;
71782: POP
71783: POP
71784: POP
71785: POP
71786: GO 71796
// end ; end ;
71788: GO 71724
71790: POP
71791: POP
// end ;
71792: GO 71610
71794: POP
71795: POP
// end ;
71796: LD_VAR 0 3
71800: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71801: LD_INT 0
71803: PPUSH
// if not side or side > 8 then
71804: LD_VAR 0 3
71808: NOT
71809: PUSH
71810: LD_VAR 0 3
71814: PUSH
71815: LD_INT 8
71817: GREATER
71818: OR
71819: IFFALSE 71823
// exit ;
71821: GO 71882
// if not range then
71823: LD_VAR 0 4
71827: NOT
71828: IFFALSE 71839
// range := - 12 ;
71830: LD_ADDR_VAR 0 4
71834: PUSH
71835: LD_INT 12
71837: NEG
71838: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71839: LD_VAR 0 1
71843: PPUSH
71844: LD_VAR 0 2
71848: PPUSH
71849: LD_VAR 0 3
71853: PPUSH
71854: LD_VAR 0 4
71858: PPUSH
71859: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71863: LD_VAR 0 1
71867: PPUSH
71868: LD_VAR 0 2
71872: PPUSH
71873: LD_VAR 0 3
71877: PPUSH
71878: CALL_OW 331
// end ;
71882: LD_VAR 0 5
71886: RET
// export function Video ( mode ) ; begin
71887: LD_INT 0
71889: PPUSH
// ingame_video = mode ;
71890: LD_ADDR_OWVAR 52
71894: PUSH
71895: LD_VAR 0 1
71899: ST_TO_ADDR
// interface_hidden = mode ;
71900: LD_ADDR_OWVAR 54
71904: PUSH
71905: LD_VAR 0 1
71909: ST_TO_ADDR
// end ;
71910: LD_VAR 0 2
71914: RET
// export function Join ( array , element ) ; begin
71915: LD_INT 0
71917: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71918: LD_ADDR_VAR 0 3
71922: PUSH
71923: LD_VAR 0 1
71927: PPUSH
71928: LD_VAR 0 1
71932: PUSH
71933: LD_INT 1
71935: PLUS
71936: PPUSH
71937: LD_VAR 0 2
71941: PPUSH
71942: CALL_OW 1
71946: ST_TO_ADDR
// end ;
71947: LD_VAR 0 3
71951: RET
// export function JoinUnion ( array , element ) ; begin
71952: LD_INT 0
71954: PPUSH
// result := array union element ;
71955: LD_ADDR_VAR 0 3
71959: PUSH
71960: LD_VAR 0 1
71964: PUSH
71965: LD_VAR 0 2
71969: UNION
71970: ST_TO_ADDR
// end ;
71971: LD_VAR 0 3
71975: RET
// export function GetBehemoths ( side ) ; begin
71976: LD_INT 0
71978: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71979: LD_ADDR_VAR 0 2
71983: PUSH
71984: LD_INT 22
71986: PUSH
71987: LD_VAR 0 1
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 31
71998: PUSH
71999: LD_INT 25
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PPUSH
72010: CALL_OW 69
72014: ST_TO_ADDR
// end ;
72015: LD_VAR 0 2
72019: RET
// export function Shuffle ( array ) ; var i , index ; begin
72020: LD_INT 0
72022: PPUSH
72023: PPUSH
72024: PPUSH
// result := [ ] ;
72025: LD_ADDR_VAR 0 2
72029: PUSH
72030: EMPTY
72031: ST_TO_ADDR
// if not array then
72032: LD_VAR 0 1
72036: NOT
72037: IFFALSE 72041
// exit ;
72039: GO 72140
// Randomize ;
72041: CALL_OW 10
// for i = array downto 1 do
72045: LD_ADDR_VAR 0 3
72049: PUSH
72050: DOUBLE
72051: LD_VAR 0 1
72055: INC
72056: ST_TO_ADDR
72057: LD_INT 1
72059: PUSH
72060: FOR_DOWNTO
72061: IFFALSE 72138
// begin index := rand ( 1 , array ) ;
72063: LD_ADDR_VAR 0 4
72067: PUSH
72068: LD_INT 1
72070: PPUSH
72071: LD_VAR 0 1
72075: PPUSH
72076: CALL_OW 12
72080: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72081: LD_ADDR_VAR 0 2
72085: PUSH
72086: LD_VAR 0 2
72090: PPUSH
72091: LD_VAR 0 2
72095: PUSH
72096: LD_INT 1
72098: PLUS
72099: PPUSH
72100: LD_VAR 0 1
72104: PUSH
72105: LD_VAR 0 4
72109: ARRAY
72110: PPUSH
72111: CALL_OW 2
72115: ST_TO_ADDR
// array := Delete ( array , index ) ;
72116: LD_ADDR_VAR 0 1
72120: PUSH
72121: LD_VAR 0 1
72125: PPUSH
72126: LD_VAR 0 4
72130: PPUSH
72131: CALL_OW 3
72135: ST_TO_ADDR
// end ;
72136: GO 72060
72138: POP
72139: POP
// end ;
72140: LD_VAR 0 2
72144: RET
// export function GetBaseMaterials ( base ) ; begin
72145: LD_INT 0
72147: PPUSH
// result := [ 0 , 0 , 0 ] ;
72148: LD_ADDR_VAR 0 2
72152: PUSH
72153: LD_INT 0
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: LIST
72166: ST_TO_ADDR
// if not base then
72167: LD_VAR 0 1
72171: NOT
72172: IFFALSE 72176
// exit ;
72174: GO 72225
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72176: LD_ADDR_VAR 0 2
72180: PUSH
72181: LD_VAR 0 1
72185: PPUSH
72186: LD_INT 1
72188: PPUSH
72189: CALL_OW 275
72193: PUSH
72194: LD_VAR 0 1
72198: PPUSH
72199: LD_INT 2
72201: PPUSH
72202: CALL_OW 275
72206: PUSH
72207: LD_VAR 0 1
72211: PPUSH
72212: LD_INT 3
72214: PPUSH
72215: CALL_OW 275
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: LIST
72224: ST_TO_ADDR
// end ;
72225: LD_VAR 0 2
72229: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72230: LD_INT 0
72232: PPUSH
72233: PPUSH
// result := array ;
72234: LD_ADDR_VAR 0 3
72238: PUSH
72239: LD_VAR 0 1
72243: ST_TO_ADDR
// if size >= result then
72244: LD_VAR 0 2
72248: PUSH
72249: LD_VAR 0 3
72253: GREATEREQUAL
72254: IFFALSE 72258
// exit ;
72256: GO 72308
// if size then
72258: LD_VAR 0 2
72262: IFFALSE 72308
// for i := array downto size do
72264: LD_ADDR_VAR 0 4
72268: PUSH
72269: DOUBLE
72270: LD_VAR 0 1
72274: INC
72275: ST_TO_ADDR
72276: LD_VAR 0 2
72280: PUSH
72281: FOR_DOWNTO
72282: IFFALSE 72306
// result := Delete ( result , result ) ;
72284: LD_ADDR_VAR 0 3
72288: PUSH
72289: LD_VAR 0 3
72293: PPUSH
72294: LD_VAR 0 3
72298: PPUSH
72299: CALL_OW 3
72303: ST_TO_ADDR
72304: GO 72281
72306: POP
72307: POP
// end ;
72308: LD_VAR 0 3
72312: RET
// export function ComExit ( unit ) ; var tmp ; begin
72313: LD_INT 0
72315: PPUSH
72316: PPUSH
// if not IsInUnit ( unit ) then
72317: LD_VAR 0 1
72321: PPUSH
72322: CALL_OW 310
72326: NOT
72327: IFFALSE 72331
// exit ;
72329: GO 72391
// tmp := IsInUnit ( unit ) ;
72331: LD_ADDR_VAR 0 3
72335: PUSH
72336: LD_VAR 0 1
72340: PPUSH
72341: CALL_OW 310
72345: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72346: LD_VAR 0 3
72350: PPUSH
72351: CALL_OW 247
72355: PUSH
72356: LD_INT 2
72358: EQUAL
72359: IFFALSE 72372
// ComExitVehicle ( unit ) else
72361: LD_VAR 0 1
72365: PPUSH
72366: CALL_OW 121
72370: GO 72381
// ComExitBuilding ( unit ) ;
72372: LD_VAR 0 1
72376: PPUSH
72377: CALL_OW 122
// result := tmp ;
72381: LD_ADDR_VAR 0 2
72385: PUSH
72386: LD_VAR 0 3
72390: ST_TO_ADDR
// end ;
72391: LD_VAR 0 2
72395: RET
// export function ComExitAll ( units ) ; var i ; begin
72396: LD_INT 0
72398: PPUSH
72399: PPUSH
// if not units then
72400: LD_VAR 0 1
72404: NOT
72405: IFFALSE 72409
// exit ;
72407: GO 72435
// for i in units do
72409: LD_ADDR_VAR 0 3
72413: PUSH
72414: LD_VAR 0 1
72418: PUSH
72419: FOR_IN
72420: IFFALSE 72433
// ComExit ( i ) ;
72422: LD_VAR 0 3
72426: PPUSH
72427: CALL 72313 0 1
72431: GO 72419
72433: POP
72434: POP
// end ;
72435: LD_VAR 0 2
72439: RET
// export function ResetHc ; begin
72440: LD_INT 0
72442: PPUSH
// InitHc ;
72443: CALL_OW 19
// hc_importance := 0 ;
72447: LD_ADDR_OWVAR 32
72451: PUSH
72452: LD_INT 0
72454: ST_TO_ADDR
// end ;
72455: LD_VAR 0 1
72459: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72460: LD_INT 0
72462: PPUSH
72463: PPUSH
72464: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72465: LD_ADDR_VAR 0 6
72469: PUSH
72470: LD_VAR 0 1
72474: PUSH
72475: LD_VAR 0 3
72479: PLUS
72480: PUSH
72481: LD_INT 2
72483: DIV
72484: ST_TO_ADDR
// if _x < 0 then
72485: LD_VAR 0 6
72489: PUSH
72490: LD_INT 0
72492: LESS
72493: IFFALSE 72510
// _x := _x * - 1 ;
72495: LD_ADDR_VAR 0 6
72499: PUSH
72500: LD_VAR 0 6
72504: PUSH
72505: LD_INT 1
72507: NEG
72508: MUL
72509: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72510: LD_ADDR_VAR 0 7
72514: PUSH
72515: LD_VAR 0 2
72519: PUSH
72520: LD_VAR 0 4
72524: PLUS
72525: PUSH
72526: LD_INT 2
72528: DIV
72529: ST_TO_ADDR
// if _y < 0 then
72530: LD_VAR 0 7
72534: PUSH
72535: LD_INT 0
72537: LESS
72538: IFFALSE 72555
// _y := _y * - 1 ;
72540: LD_ADDR_VAR 0 7
72544: PUSH
72545: LD_VAR 0 7
72549: PUSH
72550: LD_INT 1
72552: NEG
72553: MUL
72554: ST_TO_ADDR
// result := [ _x , _y ] ;
72555: LD_ADDR_VAR 0 5
72559: PUSH
72560: LD_VAR 0 6
72564: PUSH
72565: LD_VAR 0 7
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: ST_TO_ADDR
// end ;
72574: LD_VAR 0 5
72578: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72579: LD_INT 0
72581: PPUSH
72582: PPUSH
72583: PPUSH
72584: PPUSH
// task := GetTaskList ( unit ) ;
72585: LD_ADDR_VAR 0 7
72589: PUSH
72590: LD_VAR 0 1
72594: PPUSH
72595: CALL_OW 437
72599: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72600: LD_VAR 0 7
72604: NOT
72605: PUSH
72606: LD_VAR 0 1
72610: PPUSH
72611: LD_VAR 0 2
72615: PPUSH
72616: CALL_OW 308
72620: NOT
72621: AND
72622: IFFALSE 72626
// exit ;
72624: GO 72744
// if IsInArea ( unit , area ) then
72626: LD_VAR 0 1
72630: PPUSH
72631: LD_VAR 0 2
72635: PPUSH
72636: CALL_OW 308
72640: IFFALSE 72658
// begin ComMoveToArea ( unit , goAway ) ;
72642: LD_VAR 0 1
72646: PPUSH
72647: LD_VAR 0 3
72651: PPUSH
72652: CALL_OW 113
// exit ;
72656: GO 72744
// end ; if task [ 1 ] [ 1 ] <> M then
72658: LD_VAR 0 7
72662: PUSH
72663: LD_INT 1
72665: ARRAY
72666: PUSH
72667: LD_INT 1
72669: ARRAY
72670: PUSH
72671: LD_STRING M
72673: NONEQUAL
72674: IFFALSE 72678
// exit ;
72676: GO 72744
// x := task [ 1 ] [ 2 ] ;
72678: LD_ADDR_VAR 0 5
72682: PUSH
72683: LD_VAR 0 7
72687: PUSH
72688: LD_INT 1
72690: ARRAY
72691: PUSH
72692: LD_INT 2
72694: ARRAY
72695: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72696: LD_ADDR_VAR 0 6
72700: PUSH
72701: LD_VAR 0 7
72705: PUSH
72706: LD_INT 1
72708: ARRAY
72709: PUSH
72710: LD_INT 3
72712: ARRAY
72713: ST_TO_ADDR
// if InArea ( x , y , area ) then
72714: LD_VAR 0 5
72718: PPUSH
72719: LD_VAR 0 6
72723: PPUSH
72724: LD_VAR 0 2
72728: PPUSH
72729: CALL_OW 309
72733: IFFALSE 72744
// ComStop ( unit ) ;
72735: LD_VAR 0 1
72739: PPUSH
72740: CALL_OW 141
// end ;
72744: LD_VAR 0 4
72748: RET
// export function Abs ( value ) ; begin
72749: LD_INT 0
72751: PPUSH
// result := value ;
72752: LD_ADDR_VAR 0 2
72756: PUSH
72757: LD_VAR 0 1
72761: ST_TO_ADDR
// if value < 0 then
72762: LD_VAR 0 1
72766: PUSH
72767: LD_INT 0
72769: LESS
72770: IFFALSE 72787
// result := value * - 1 ;
72772: LD_ADDR_VAR 0 2
72776: PUSH
72777: LD_VAR 0 1
72781: PUSH
72782: LD_INT 1
72784: NEG
72785: MUL
72786: ST_TO_ADDR
// end ;
72787: LD_VAR 0 2
72791: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72792: LD_INT 0
72794: PPUSH
72795: PPUSH
72796: PPUSH
72797: PPUSH
72798: PPUSH
72799: PPUSH
72800: PPUSH
72801: PPUSH
// if not unit or not building then
72802: LD_VAR 0 1
72806: NOT
72807: PUSH
72808: LD_VAR 0 2
72812: NOT
72813: OR
72814: IFFALSE 72818
// exit ;
72816: GO 73044
// x := GetX ( building ) ;
72818: LD_ADDR_VAR 0 4
72822: PUSH
72823: LD_VAR 0 2
72827: PPUSH
72828: CALL_OW 250
72832: ST_TO_ADDR
// y := GetY ( building ) ;
72833: LD_ADDR_VAR 0 6
72837: PUSH
72838: LD_VAR 0 2
72842: PPUSH
72843: CALL_OW 251
72847: ST_TO_ADDR
// d := GetDir ( building ) ;
72848: LD_ADDR_VAR 0 8
72852: PUSH
72853: LD_VAR 0 2
72857: PPUSH
72858: CALL_OW 254
72862: ST_TO_ADDR
// r := 4 ;
72863: LD_ADDR_VAR 0 9
72867: PUSH
72868: LD_INT 4
72870: ST_TO_ADDR
// for i := 1 to 5 do
72871: LD_ADDR_VAR 0 10
72875: PUSH
72876: DOUBLE
72877: LD_INT 1
72879: DEC
72880: ST_TO_ADDR
72881: LD_INT 5
72883: PUSH
72884: FOR_TO
72885: IFFALSE 73042
// begin _x := ShiftX ( x , d , r + i ) ;
72887: LD_ADDR_VAR 0 5
72891: PUSH
72892: LD_VAR 0 4
72896: PPUSH
72897: LD_VAR 0 8
72901: PPUSH
72902: LD_VAR 0 9
72906: PUSH
72907: LD_VAR 0 10
72911: PLUS
72912: PPUSH
72913: CALL_OW 272
72917: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72918: LD_ADDR_VAR 0 7
72922: PUSH
72923: LD_VAR 0 6
72927: PPUSH
72928: LD_VAR 0 8
72932: PPUSH
72933: LD_VAR 0 9
72937: PUSH
72938: LD_VAR 0 10
72942: PLUS
72943: PPUSH
72944: CALL_OW 273
72948: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72949: LD_VAR 0 5
72953: PPUSH
72954: LD_VAR 0 7
72958: PPUSH
72959: CALL_OW 488
72963: PUSH
72964: LD_VAR 0 5
72968: PPUSH
72969: LD_VAR 0 7
72973: PPUSH
72974: CALL_OW 428
72978: PPUSH
72979: CALL_OW 247
72983: PUSH
72984: LD_INT 3
72986: PUSH
72987: LD_INT 2
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: IN
72994: NOT
72995: AND
72996: IFFALSE 73040
// begin ComMoveXY ( unit , _x , _y ) ;
72998: LD_VAR 0 1
73002: PPUSH
73003: LD_VAR 0 5
73007: PPUSH
73008: LD_VAR 0 7
73012: PPUSH
73013: CALL_OW 111
// result := [ _x , _y ] ;
73017: LD_ADDR_VAR 0 3
73021: PUSH
73022: LD_VAR 0 5
73026: PUSH
73027: LD_VAR 0 7
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: ST_TO_ADDR
// exit ;
73036: POP
73037: POP
73038: GO 73044
// end ; end ;
73040: GO 72884
73042: POP
73043: POP
// end ;
73044: LD_VAR 0 3
73048: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73049: LD_INT 0
73051: PPUSH
73052: PPUSH
73053: PPUSH
// result := 0 ;
73054: LD_ADDR_VAR 0 3
73058: PUSH
73059: LD_INT 0
73061: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73062: LD_VAR 0 1
73066: PUSH
73067: LD_INT 0
73069: LESS
73070: PUSH
73071: LD_VAR 0 1
73075: PUSH
73076: LD_INT 8
73078: GREATER
73079: OR
73080: PUSH
73081: LD_VAR 0 2
73085: PUSH
73086: LD_INT 0
73088: LESS
73089: OR
73090: PUSH
73091: LD_VAR 0 2
73095: PUSH
73096: LD_INT 8
73098: GREATER
73099: OR
73100: IFFALSE 73104
// exit ;
73102: GO 73179
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73104: LD_ADDR_VAR 0 4
73108: PUSH
73109: LD_INT 22
73111: PUSH
73112: LD_VAR 0 2
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PPUSH
73121: CALL_OW 69
73125: PUSH
73126: FOR_IN
73127: IFFALSE 73177
// begin un := UnitShoot ( i ) ;
73129: LD_ADDR_VAR 0 5
73133: PUSH
73134: LD_VAR 0 4
73138: PPUSH
73139: CALL_OW 504
73143: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73144: LD_VAR 0 5
73148: PPUSH
73149: CALL_OW 255
73153: PUSH
73154: LD_VAR 0 1
73158: EQUAL
73159: IFFALSE 73175
// begin result := un ;
73161: LD_ADDR_VAR 0 3
73165: PUSH
73166: LD_VAR 0 5
73170: ST_TO_ADDR
// exit ;
73171: POP
73172: POP
73173: GO 73179
// end ; end ;
73175: GO 73126
73177: POP
73178: POP
// end ;
73179: LD_VAR 0 3
73183: RET
// export function GetCargoBay ( units ) ; begin
73184: LD_INT 0
73186: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73187: LD_ADDR_VAR 0 2
73191: PUSH
73192: LD_VAR 0 1
73196: PPUSH
73197: LD_INT 2
73199: PUSH
73200: LD_INT 34
73202: PUSH
73203: LD_INT 12
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 34
73212: PUSH
73213: LD_INT 51
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PUSH
73220: LD_INT 34
73222: PUSH
73223: LD_INT 32
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PUSH
73230: LD_INT 34
73232: PUSH
73233: LD_INT 89
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: PPUSH
73247: CALL_OW 72
73251: ST_TO_ADDR
// end ;
73252: LD_VAR 0 2
73256: RET
// export function Negate ( value ) ; begin
73257: LD_INT 0
73259: PPUSH
// result := not value ;
73260: LD_ADDR_VAR 0 2
73264: PUSH
73265: LD_VAR 0 1
73269: NOT
73270: ST_TO_ADDR
// end ;
73271: LD_VAR 0 2
73275: RET
// export function Inc ( value ) ; begin
73276: LD_INT 0
73278: PPUSH
// result := value + 1 ;
73279: LD_ADDR_VAR 0 2
73283: PUSH
73284: LD_VAR 0 1
73288: PUSH
73289: LD_INT 1
73291: PLUS
73292: ST_TO_ADDR
// end ;
73293: LD_VAR 0 2
73297: RET
// export function Dec ( value ) ; begin
73298: LD_INT 0
73300: PPUSH
// result := value - 1 ;
73301: LD_ADDR_VAR 0 2
73305: PUSH
73306: LD_VAR 0 1
73310: PUSH
73311: LD_INT 1
73313: MINUS
73314: ST_TO_ADDR
// end ;
73315: LD_VAR 0 2
73319: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73320: LD_INT 0
73322: PPUSH
73323: PPUSH
73324: PPUSH
73325: PPUSH
73326: PPUSH
73327: PPUSH
73328: PPUSH
73329: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73330: LD_VAR 0 1
73334: PPUSH
73335: LD_VAR 0 2
73339: PPUSH
73340: CALL_OW 488
73344: NOT
73345: PUSH
73346: LD_VAR 0 3
73350: PPUSH
73351: LD_VAR 0 4
73355: PPUSH
73356: CALL_OW 488
73360: NOT
73361: OR
73362: IFFALSE 73375
// begin result := - 1 ;
73364: LD_ADDR_VAR 0 5
73368: PUSH
73369: LD_INT 1
73371: NEG
73372: ST_TO_ADDR
// exit ;
73373: GO 73610
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73375: LD_ADDR_VAR 0 12
73379: PUSH
73380: LD_VAR 0 1
73384: PPUSH
73385: LD_VAR 0 2
73389: PPUSH
73390: LD_VAR 0 3
73394: PPUSH
73395: LD_VAR 0 4
73399: PPUSH
73400: CALL 72460 0 4
73404: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73405: LD_ADDR_VAR 0 11
73409: PUSH
73410: LD_VAR 0 1
73414: PPUSH
73415: LD_VAR 0 2
73419: PPUSH
73420: LD_VAR 0 12
73424: PUSH
73425: LD_INT 1
73427: ARRAY
73428: PPUSH
73429: LD_VAR 0 12
73433: PUSH
73434: LD_INT 2
73436: ARRAY
73437: PPUSH
73438: CALL_OW 298
73442: ST_TO_ADDR
// distance := 9999 ;
73443: LD_ADDR_VAR 0 10
73447: PUSH
73448: LD_INT 9999
73450: ST_TO_ADDR
// for i := 0 to 5 do
73451: LD_ADDR_VAR 0 6
73455: PUSH
73456: DOUBLE
73457: LD_INT 0
73459: DEC
73460: ST_TO_ADDR
73461: LD_INT 5
73463: PUSH
73464: FOR_TO
73465: IFFALSE 73608
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73467: LD_ADDR_VAR 0 7
73471: PUSH
73472: LD_VAR 0 1
73476: PPUSH
73477: LD_VAR 0 6
73481: PPUSH
73482: LD_VAR 0 11
73486: PPUSH
73487: CALL_OW 272
73491: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73492: LD_ADDR_VAR 0 8
73496: PUSH
73497: LD_VAR 0 2
73501: PPUSH
73502: LD_VAR 0 6
73506: PPUSH
73507: LD_VAR 0 11
73511: PPUSH
73512: CALL_OW 273
73516: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73517: LD_VAR 0 7
73521: PPUSH
73522: LD_VAR 0 8
73526: PPUSH
73527: CALL_OW 488
73531: NOT
73532: IFFALSE 73536
// continue ;
73534: GO 73464
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73536: LD_ADDR_VAR 0 9
73540: PUSH
73541: LD_VAR 0 12
73545: PUSH
73546: LD_INT 1
73548: ARRAY
73549: PPUSH
73550: LD_VAR 0 12
73554: PUSH
73555: LD_INT 2
73557: ARRAY
73558: PPUSH
73559: LD_VAR 0 7
73563: PPUSH
73564: LD_VAR 0 8
73568: PPUSH
73569: CALL_OW 298
73573: ST_TO_ADDR
// if tmp < distance then
73574: LD_VAR 0 9
73578: PUSH
73579: LD_VAR 0 10
73583: LESS
73584: IFFALSE 73606
// begin result := i ;
73586: LD_ADDR_VAR 0 5
73590: PUSH
73591: LD_VAR 0 6
73595: ST_TO_ADDR
// distance := tmp ;
73596: LD_ADDR_VAR 0 10
73600: PUSH
73601: LD_VAR 0 9
73605: ST_TO_ADDR
// end ; end ;
73606: GO 73464
73608: POP
73609: POP
// end ;
73610: LD_VAR 0 5
73614: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73615: LD_INT 0
73617: PPUSH
73618: PPUSH
// if not driver or not IsInUnit ( driver ) then
73619: LD_VAR 0 1
73623: NOT
73624: PUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: CALL_OW 310
73634: NOT
73635: OR
73636: IFFALSE 73640
// exit ;
73638: GO 73730
// vehicle := IsInUnit ( driver ) ;
73640: LD_ADDR_VAR 0 3
73644: PUSH
73645: LD_VAR 0 1
73649: PPUSH
73650: CALL_OW 310
73654: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73655: LD_VAR 0 1
73659: PPUSH
73660: LD_STRING \
73662: PUSH
73663: LD_INT 0
73665: PUSH
73666: LD_INT 0
73668: PUSH
73669: LD_INT 0
73671: PUSH
73672: LD_INT 0
73674: PUSH
73675: LD_INT 0
73677: PUSH
73678: LD_INT 0
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: PUSH
73690: LD_STRING E
73692: PUSH
73693: LD_INT 0
73695: PUSH
73696: LD_INT 0
73698: PUSH
73699: LD_VAR 0 3
73703: PUSH
73704: LD_INT 0
73706: PUSH
73707: LD_INT 0
73709: PUSH
73710: LD_INT 0
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PPUSH
73726: CALL_OW 446
// end ;
73730: LD_VAR 0 2
73734: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73735: LD_INT 0
73737: PPUSH
73738: PPUSH
// if not driver or not IsInUnit ( driver ) then
73739: LD_VAR 0 1
73743: NOT
73744: PUSH
73745: LD_VAR 0 1
73749: PPUSH
73750: CALL_OW 310
73754: NOT
73755: OR
73756: IFFALSE 73760
// exit ;
73758: GO 73850
// vehicle := IsInUnit ( driver ) ;
73760: LD_ADDR_VAR 0 3
73764: PUSH
73765: LD_VAR 0 1
73769: PPUSH
73770: CALL_OW 310
73774: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73775: LD_VAR 0 1
73779: PPUSH
73780: LD_STRING \
73782: PUSH
73783: LD_INT 0
73785: PUSH
73786: LD_INT 0
73788: PUSH
73789: LD_INT 0
73791: PUSH
73792: LD_INT 0
73794: PUSH
73795: LD_INT 0
73797: PUSH
73798: LD_INT 0
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: PUSH
73810: LD_STRING E
73812: PUSH
73813: LD_INT 0
73815: PUSH
73816: LD_INT 0
73818: PUSH
73819: LD_VAR 0 3
73823: PUSH
73824: LD_INT 0
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: LD_INT 0
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PPUSH
73846: CALL_OW 447
// end ;
73850: LD_VAR 0 2
73854: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73855: LD_INT 0
73857: PPUSH
73858: PPUSH
73859: PPUSH
// tmp := [ ] ;
73860: LD_ADDR_VAR 0 5
73864: PUSH
73865: EMPTY
73866: ST_TO_ADDR
// for i in units do
73867: LD_ADDR_VAR 0 4
73871: PUSH
73872: LD_VAR 0 1
73876: PUSH
73877: FOR_IN
73878: IFFALSE 73916
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73880: LD_ADDR_VAR 0 5
73884: PUSH
73885: LD_VAR 0 5
73889: PPUSH
73890: LD_VAR 0 5
73894: PUSH
73895: LD_INT 1
73897: PLUS
73898: PPUSH
73899: LD_VAR 0 4
73903: PPUSH
73904: CALL_OW 256
73908: PPUSH
73909: CALL_OW 2
73913: ST_TO_ADDR
73914: GO 73877
73916: POP
73917: POP
// if not tmp then
73918: LD_VAR 0 5
73922: NOT
73923: IFFALSE 73927
// exit ;
73925: GO 73975
// if asc then
73927: LD_VAR 0 2
73931: IFFALSE 73955
// result := SortListByListAsc ( units , tmp ) else
73933: LD_ADDR_VAR 0 3
73937: PUSH
73938: LD_VAR 0 1
73942: PPUSH
73943: LD_VAR 0 5
73947: PPUSH
73948: CALL_OW 76
73952: ST_TO_ADDR
73953: GO 73975
// result := SortListByListDesc ( units , tmp ) ;
73955: LD_ADDR_VAR 0 3
73959: PUSH
73960: LD_VAR 0 1
73964: PPUSH
73965: LD_VAR 0 5
73969: PPUSH
73970: CALL_OW 77
73974: ST_TO_ADDR
// end ;
73975: LD_VAR 0 3
73979: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73980: LD_INT 0
73982: PPUSH
73983: PPUSH
// task := GetTaskList ( mech ) ;
73984: LD_ADDR_VAR 0 4
73988: PUSH
73989: LD_VAR 0 1
73993: PPUSH
73994: CALL_OW 437
73998: ST_TO_ADDR
// if not task then
73999: LD_VAR 0 4
74003: NOT
74004: IFFALSE 74008
// exit ;
74006: GO 74050
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74008: LD_ADDR_VAR 0 3
74012: PUSH
74013: LD_VAR 0 4
74017: PUSH
74018: LD_INT 1
74020: ARRAY
74021: PUSH
74022: LD_INT 1
74024: ARRAY
74025: PUSH
74026: LD_STRING r
74028: EQUAL
74029: PUSH
74030: LD_VAR 0 4
74034: PUSH
74035: LD_INT 1
74037: ARRAY
74038: PUSH
74039: LD_INT 4
74041: ARRAY
74042: PUSH
74043: LD_VAR 0 2
74047: EQUAL
74048: AND
74049: ST_TO_ADDR
// end ;
74050: LD_VAR 0 3
74054: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74055: LD_INT 0
74057: PPUSH
// SetDir ( unit , d ) ;
74058: LD_VAR 0 1
74062: PPUSH
74063: LD_VAR 0 4
74067: PPUSH
74068: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74072: LD_VAR 0 1
74076: PPUSH
74077: LD_VAR 0 2
74081: PPUSH
74082: LD_VAR 0 3
74086: PPUSH
74087: LD_VAR 0 5
74091: PPUSH
74092: CALL_OW 48
// end ;
74096: LD_VAR 0 6
74100: RET
// export function ToNaturalNumber ( number ) ; begin
74101: LD_INT 0
74103: PPUSH
// result := number div 1 ;
74104: LD_ADDR_VAR 0 2
74108: PUSH
74109: LD_VAR 0 1
74113: PUSH
74114: LD_INT 1
74116: DIV
74117: ST_TO_ADDR
// if number < 0 then
74118: LD_VAR 0 1
74122: PUSH
74123: LD_INT 0
74125: LESS
74126: IFFALSE 74136
// result := 0 ;
74128: LD_ADDR_VAR 0 2
74132: PUSH
74133: LD_INT 0
74135: ST_TO_ADDR
// end ;
74136: LD_VAR 0 2
74140: RET
// export function SortByClass ( units , class ) ; var un ; begin
74141: LD_INT 0
74143: PPUSH
74144: PPUSH
// if not units or not class then
74145: LD_VAR 0 1
74149: NOT
74150: PUSH
74151: LD_VAR 0 2
74155: NOT
74156: OR
74157: IFFALSE 74161
// exit ;
74159: GO 74256
// result := [ ] ;
74161: LD_ADDR_VAR 0 3
74165: PUSH
74166: EMPTY
74167: ST_TO_ADDR
// for un in units do
74168: LD_ADDR_VAR 0 4
74172: PUSH
74173: LD_VAR 0 1
74177: PUSH
74178: FOR_IN
74179: IFFALSE 74254
// if GetClass ( un ) = class then
74181: LD_VAR 0 4
74185: PPUSH
74186: CALL_OW 257
74190: PUSH
74191: LD_VAR 0 2
74195: EQUAL
74196: IFFALSE 74223
// result := Insert ( result , 1 , un ) else
74198: LD_ADDR_VAR 0 3
74202: PUSH
74203: LD_VAR 0 3
74207: PPUSH
74208: LD_INT 1
74210: PPUSH
74211: LD_VAR 0 4
74215: PPUSH
74216: CALL_OW 2
74220: ST_TO_ADDR
74221: GO 74252
// result := Replace ( result , result + 1 , un ) ;
74223: LD_ADDR_VAR 0 3
74227: PUSH
74228: LD_VAR 0 3
74232: PPUSH
74233: LD_VAR 0 3
74237: PUSH
74238: LD_INT 1
74240: PLUS
74241: PPUSH
74242: LD_VAR 0 4
74246: PPUSH
74247: CALL_OW 1
74251: ST_TO_ADDR
74252: GO 74178
74254: POP
74255: POP
// end ;
74256: LD_VAR 0 3
74260: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74261: LD_INT 0
74263: PPUSH
74264: PPUSH
74265: PPUSH
74266: PPUSH
74267: PPUSH
74268: PPUSH
74269: PPUSH
// result := [ ] ;
74270: LD_ADDR_VAR 0 4
74274: PUSH
74275: EMPTY
74276: ST_TO_ADDR
// if x - r < 0 then
74277: LD_VAR 0 1
74281: PUSH
74282: LD_VAR 0 3
74286: MINUS
74287: PUSH
74288: LD_INT 0
74290: LESS
74291: IFFALSE 74303
// min_x := 0 else
74293: LD_ADDR_VAR 0 8
74297: PUSH
74298: LD_INT 0
74300: ST_TO_ADDR
74301: GO 74319
// min_x := x - r ;
74303: LD_ADDR_VAR 0 8
74307: PUSH
74308: LD_VAR 0 1
74312: PUSH
74313: LD_VAR 0 3
74317: MINUS
74318: ST_TO_ADDR
// if y - r < 0 then
74319: LD_VAR 0 2
74323: PUSH
74324: LD_VAR 0 3
74328: MINUS
74329: PUSH
74330: LD_INT 0
74332: LESS
74333: IFFALSE 74345
// min_y := 0 else
74335: LD_ADDR_VAR 0 7
74339: PUSH
74340: LD_INT 0
74342: ST_TO_ADDR
74343: GO 74361
// min_y := y - r ;
74345: LD_ADDR_VAR 0 7
74349: PUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_VAR 0 3
74359: MINUS
74360: ST_TO_ADDR
// max_x := x + r ;
74361: LD_ADDR_VAR 0 9
74365: PUSH
74366: LD_VAR 0 1
74370: PUSH
74371: LD_VAR 0 3
74375: PLUS
74376: ST_TO_ADDR
// max_y := y + r ;
74377: LD_ADDR_VAR 0 10
74381: PUSH
74382: LD_VAR 0 2
74386: PUSH
74387: LD_VAR 0 3
74391: PLUS
74392: ST_TO_ADDR
// for _x = min_x to max_x do
74393: LD_ADDR_VAR 0 5
74397: PUSH
74398: DOUBLE
74399: LD_VAR 0 8
74403: DEC
74404: ST_TO_ADDR
74405: LD_VAR 0 9
74409: PUSH
74410: FOR_TO
74411: IFFALSE 74512
// for _y = min_y to max_y do
74413: LD_ADDR_VAR 0 6
74417: PUSH
74418: DOUBLE
74419: LD_VAR 0 7
74423: DEC
74424: ST_TO_ADDR
74425: LD_VAR 0 10
74429: PUSH
74430: FOR_TO
74431: IFFALSE 74508
// begin if not ValidHex ( _x , _y ) then
74433: LD_VAR 0 5
74437: PPUSH
74438: LD_VAR 0 6
74442: PPUSH
74443: CALL_OW 488
74447: NOT
74448: IFFALSE 74452
// continue ;
74450: GO 74430
// if GetResourceTypeXY ( _x , _y ) then
74452: LD_VAR 0 5
74456: PPUSH
74457: LD_VAR 0 6
74461: PPUSH
74462: CALL_OW 283
74466: IFFALSE 74506
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74468: LD_ADDR_VAR 0 4
74472: PUSH
74473: LD_VAR 0 4
74477: PPUSH
74478: LD_VAR 0 4
74482: PUSH
74483: LD_INT 1
74485: PLUS
74486: PPUSH
74487: LD_VAR 0 5
74491: PUSH
74492: LD_VAR 0 6
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PPUSH
74501: CALL_OW 1
74505: ST_TO_ADDR
// end ;
74506: GO 74430
74508: POP
74509: POP
74510: GO 74410
74512: POP
74513: POP
// end ;
74514: LD_VAR 0 4
74518: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
74523: PPUSH
74524: PPUSH
74525: PPUSH
74526: PPUSH
74527: PPUSH
74528: PPUSH
// if not units then
74529: LD_VAR 0 1
74533: NOT
74534: IFFALSE 74538
// exit ;
74536: GO 75062
// result := UnitFilter ( units , [ f_ok ] ) ;
74538: LD_ADDR_VAR 0 3
74542: PUSH
74543: LD_VAR 0 1
74547: PPUSH
74548: LD_INT 50
74550: PUSH
74551: EMPTY
74552: LIST
74553: PPUSH
74554: CALL_OW 72
74558: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74559: LD_ADDR_VAR 0 8
74563: PUSH
74564: LD_VAR 0 1
74568: PUSH
74569: LD_INT 1
74571: ARRAY
74572: PPUSH
74573: CALL_OW 255
74577: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74578: LD_ADDR_VAR 0 10
74582: PUSH
74583: LD_INT 29
74585: PUSH
74586: LD_INT 91
74588: PUSH
74589: LD_INT 49
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: LIST
74596: ST_TO_ADDR
// if not result then
74597: LD_VAR 0 3
74601: NOT
74602: IFFALSE 74606
// exit ;
74604: GO 75062
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74606: LD_ADDR_VAR 0 5
74610: PUSH
74611: LD_INT 81
74613: PUSH
74614: LD_VAR 0 8
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PPUSH
74623: CALL_OW 69
74627: ST_TO_ADDR
// for i in result do
74628: LD_ADDR_VAR 0 4
74632: PUSH
74633: LD_VAR 0 3
74637: PUSH
74638: FOR_IN
74639: IFFALSE 75060
// begin tag := GetTag ( i ) + 1 ;
74641: LD_ADDR_VAR 0 9
74645: PUSH
74646: LD_VAR 0 4
74650: PPUSH
74651: CALL_OW 110
74655: PUSH
74656: LD_INT 1
74658: PLUS
74659: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74660: LD_ADDR_VAR 0 7
74664: PUSH
74665: LD_VAR 0 4
74669: PPUSH
74670: CALL_OW 250
74674: PPUSH
74675: LD_VAR 0 4
74679: PPUSH
74680: CALL_OW 251
74684: PPUSH
74685: LD_INT 6
74687: PPUSH
74688: CALL 74261 0 3
74692: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74693: LD_VAR 0 4
74697: PPUSH
74698: CALL_OW 247
74702: PUSH
74703: LD_INT 2
74705: EQUAL
74706: PUSH
74707: LD_VAR 0 7
74711: AND
74712: PUSH
74713: LD_VAR 0 4
74717: PPUSH
74718: CALL_OW 264
74722: PUSH
74723: LD_VAR 0 10
74727: IN
74728: NOT
74729: AND
74730: IFFALSE 74769
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74732: LD_VAR 0 4
74736: PPUSH
74737: LD_VAR 0 7
74741: PUSH
74742: LD_INT 1
74744: ARRAY
74745: PUSH
74746: LD_INT 1
74748: ARRAY
74749: PPUSH
74750: LD_VAR 0 7
74754: PUSH
74755: LD_INT 1
74757: ARRAY
74758: PUSH
74759: LD_INT 2
74761: ARRAY
74762: PPUSH
74763: CALL_OW 116
74767: GO 75058
// if path > tag then
74769: LD_VAR 0 2
74773: PUSH
74774: LD_VAR 0 9
74778: GREATER
74779: IFFALSE 74987
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74781: LD_ADDR_VAR 0 6
74785: PUSH
74786: LD_VAR 0 5
74790: PPUSH
74791: LD_INT 91
74793: PUSH
74794: LD_VAR 0 4
74798: PUSH
74799: LD_INT 8
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: LIST
74806: PPUSH
74807: CALL_OW 72
74811: ST_TO_ADDR
// if nearEnemy then
74812: LD_VAR 0 6
74816: IFFALSE 74885
// begin if GetWeapon ( i ) = ru_time_lapser then
74818: LD_VAR 0 4
74822: PPUSH
74823: CALL_OW 264
74827: PUSH
74828: LD_INT 49
74830: EQUAL
74831: IFFALSE 74859
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74833: LD_VAR 0 4
74837: PPUSH
74838: LD_VAR 0 6
74842: PPUSH
74843: LD_VAR 0 4
74847: PPUSH
74848: CALL_OW 74
74852: PPUSH
74853: CALL_OW 112
74857: GO 74883
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74859: LD_VAR 0 4
74863: PPUSH
74864: LD_VAR 0 6
74868: PPUSH
74869: LD_VAR 0 4
74873: PPUSH
74874: CALL_OW 74
74878: PPUSH
74879: CALL_OW 115
// end else
74883: GO 74985
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74885: LD_VAR 0 4
74889: PPUSH
74890: LD_VAR 0 2
74894: PUSH
74895: LD_VAR 0 9
74899: ARRAY
74900: PUSH
74901: LD_INT 1
74903: ARRAY
74904: PPUSH
74905: LD_VAR 0 2
74909: PUSH
74910: LD_VAR 0 9
74914: ARRAY
74915: PUSH
74916: LD_INT 2
74918: ARRAY
74919: PPUSH
74920: CALL_OW 297
74924: PUSH
74925: LD_INT 6
74927: GREATER
74928: IFFALSE 74971
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74930: LD_VAR 0 4
74934: PPUSH
74935: LD_VAR 0 2
74939: PUSH
74940: LD_VAR 0 9
74944: ARRAY
74945: PUSH
74946: LD_INT 1
74948: ARRAY
74949: PPUSH
74950: LD_VAR 0 2
74954: PUSH
74955: LD_VAR 0 9
74959: ARRAY
74960: PUSH
74961: LD_INT 2
74963: ARRAY
74964: PPUSH
74965: CALL_OW 114
74969: GO 74985
// SetTag ( i , tag ) ;
74971: LD_VAR 0 4
74975: PPUSH
74976: LD_VAR 0 9
74980: PPUSH
74981: CALL_OW 109
// end else
74985: GO 75058
// if enemy then
74987: LD_VAR 0 5
74991: IFFALSE 75058
// begin if GetWeapon ( i ) = ru_time_lapser then
74993: LD_VAR 0 4
74997: PPUSH
74998: CALL_OW 264
75002: PUSH
75003: LD_INT 49
75005: EQUAL
75006: IFFALSE 75034
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75008: LD_VAR 0 4
75012: PPUSH
75013: LD_VAR 0 5
75017: PPUSH
75018: LD_VAR 0 4
75022: PPUSH
75023: CALL_OW 74
75027: PPUSH
75028: CALL_OW 112
75032: GO 75058
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75034: LD_VAR 0 4
75038: PPUSH
75039: LD_VAR 0 5
75043: PPUSH
75044: LD_VAR 0 4
75048: PPUSH
75049: CALL_OW 74
75053: PPUSH
75054: CALL_OW 115
// end ; end ;
75058: GO 74638
75060: POP
75061: POP
// end ;
75062: LD_VAR 0 3
75066: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75067: LD_INT 0
75069: PPUSH
75070: PPUSH
75071: PPUSH
// if not unit or IsInUnit ( unit ) then
75072: LD_VAR 0 1
75076: NOT
75077: PUSH
75078: LD_VAR 0 1
75082: PPUSH
75083: CALL_OW 310
75087: OR
75088: IFFALSE 75092
// exit ;
75090: GO 75183
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75092: LD_ADDR_VAR 0 4
75096: PUSH
75097: LD_VAR 0 1
75101: PPUSH
75102: CALL_OW 250
75106: PPUSH
75107: LD_VAR 0 2
75111: PPUSH
75112: LD_INT 1
75114: PPUSH
75115: CALL_OW 272
75119: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75120: LD_ADDR_VAR 0 5
75124: PUSH
75125: LD_VAR 0 1
75129: PPUSH
75130: CALL_OW 251
75134: PPUSH
75135: LD_VAR 0 2
75139: PPUSH
75140: LD_INT 1
75142: PPUSH
75143: CALL_OW 273
75147: ST_TO_ADDR
// if ValidHex ( x , y ) then
75148: LD_VAR 0 4
75152: PPUSH
75153: LD_VAR 0 5
75157: PPUSH
75158: CALL_OW 488
75162: IFFALSE 75183
// ComTurnXY ( unit , x , y ) ;
75164: LD_VAR 0 1
75168: PPUSH
75169: LD_VAR 0 4
75173: PPUSH
75174: LD_VAR 0 5
75178: PPUSH
75179: CALL_OW 118
// end ;
75183: LD_VAR 0 3
75187: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75188: LD_INT 0
75190: PPUSH
75191: PPUSH
// result := false ;
75192: LD_ADDR_VAR 0 3
75196: PUSH
75197: LD_INT 0
75199: ST_TO_ADDR
// if not units then
75200: LD_VAR 0 2
75204: NOT
75205: IFFALSE 75209
// exit ;
75207: GO 75254
// for i in units do
75209: LD_ADDR_VAR 0 4
75213: PUSH
75214: LD_VAR 0 2
75218: PUSH
75219: FOR_IN
75220: IFFALSE 75252
// if See ( side , i ) then
75222: LD_VAR 0 1
75226: PPUSH
75227: LD_VAR 0 4
75231: PPUSH
75232: CALL_OW 292
75236: IFFALSE 75250
// begin result := true ;
75238: LD_ADDR_VAR 0 3
75242: PUSH
75243: LD_INT 1
75245: ST_TO_ADDR
// exit ;
75246: POP
75247: POP
75248: GO 75254
// end ;
75250: GO 75219
75252: POP
75253: POP
// end ;
75254: LD_VAR 0 3
75258: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75259: LD_INT 0
75261: PPUSH
75262: PPUSH
75263: PPUSH
75264: PPUSH
// if not unit or not points then
75265: LD_VAR 0 1
75269: NOT
75270: PUSH
75271: LD_VAR 0 2
75275: NOT
75276: OR
75277: IFFALSE 75281
// exit ;
75279: GO 75371
// dist := 99999 ;
75281: LD_ADDR_VAR 0 5
75285: PUSH
75286: LD_INT 99999
75288: ST_TO_ADDR
// for i in points do
75289: LD_ADDR_VAR 0 4
75293: PUSH
75294: LD_VAR 0 2
75298: PUSH
75299: FOR_IN
75300: IFFALSE 75369
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75302: LD_ADDR_VAR 0 6
75306: PUSH
75307: LD_VAR 0 1
75311: PPUSH
75312: LD_VAR 0 4
75316: PUSH
75317: LD_INT 1
75319: ARRAY
75320: PPUSH
75321: LD_VAR 0 4
75325: PUSH
75326: LD_INT 2
75328: ARRAY
75329: PPUSH
75330: CALL_OW 297
75334: ST_TO_ADDR
// if tmpDist < dist then
75335: LD_VAR 0 6
75339: PUSH
75340: LD_VAR 0 5
75344: LESS
75345: IFFALSE 75367
// begin result := i ;
75347: LD_ADDR_VAR 0 3
75351: PUSH
75352: LD_VAR 0 4
75356: ST_TO_ADDR
// dist := tmpDist ;
75357: LD_ADDR_VAR 0 5
75361: PUSH
75362: LD_VAR 0 6
75366: ST_TO_ADDR
// end ; end ;
75367: GO 75299
75369: POP
75370: POP
// end ;
75371: LD_VAR 0 3
75375: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75376: LD_INT 0
75378: PPUSH
// uc_side := side ;
75379: LD_ADDR_OWVAR 20
75383: PUSH
75384: LD_VAR 0 1
75388: ST_TO_ADDR
// uc_nation := 3 ;
75389: LD_ADDR_OWVAR 21
75393: PUSH
75394: LD_INT 3
75396: ST_TO_ADDR
// vc_chassis := 25 ;
75397: LD_ADDR_OWVAR 37
75401: PUSH
75402: LD_INT 25
75404: ST_TO_ADDR
// vc_engine := engine_siberite ;
75405: LD_ADDR_OWVAR 39
75409: PUSH
75410: LD_INT 3
75412: ST_TO_ADDR
// vc_control := control_computer ;
75413: LD_ADDR_OWVAR 38
75417: PUSH
75418: LD_INT 3
75420: ST_TO_ADDR
// vc_weapon := 59 ;
75421: LD_ADDR_OWVAR 40
75425: PUSH
75426: LD_INT 59
75428: ST_TO_ADDR
// result := CreateVehicle ;
75429: LD_ADDR_VAR 0 5
75433: PUSH
75434: CALL_OW 45
75438: ST_TO_ADDR
// SetDir ( result , d ) ;
75439: LD_VAR 0 5
75443: PPUSH
75444: LD_VAR 0 4
75448: PPUSH
75449: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75453: LD_VAR 0 5
75457: PPUSH
75458: LD_VAR 0 2
75462: PPUSH
75463: LD_VAR 0 3
75467: PPUSH
75468: LD_INT 0
75470: PPUSH
75471: CALL_OW 48
// end ;
75475: LD_VAR 0 5
75479: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75480: LD_INT 0
75482: PPUSH
75483: PPUSH
75484: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75485: LD_ADDR_VAR 0 2
75489: PUSH
75490: LD_INT 0
75492: PUSH
75493: LD_INT 0
75495: PUSH
75496: LD_INT 0
75498: PUSH
75499: LD_INT 0
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75508: LD_VAR 0 1
75512: NOT
75513: PUSH
75514: LD_VAR 0 1
75518: PPUSH
75519: CALL_OW 264
75523: PUSH
75524: LD_INT 12
75526: PUSH
75527: LD_INT 51
75529: PUSH
75530: LD_INT 32
75532: PUSH
75533: LD_INT 89
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: IN
75542: NOT
75543: OR
75544: IFFALSE 75548
// exit ;
75546: GO 75646
// for i := 1 to 3 do
75548: LD_ADDR_VAR 0 3
75552: PUSH
75553: DOUBLE
75554: LD_INT 1
75556: DEC
75557: ST_TO_ADDR
75558: LD_INT 3
75560: PUSH
75561: FOR_TO
75562: IFFALSE 75644
// begin tmp := GetCargo ( cargo , i ) ;
75564: LD_ADDR_VAR 0 4
75568: PUSH
75569: LD_VAR 0 1
75573: PPUSH
75574: LD_VAR 0 3
75578: PPUSH
75579: CALL_OW 289
75583: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75584: LD_ADDR_VAR 0 2
75588: PUSH
75589: LD_VAR 0 2
75593: PPUSH
75594: LD_VAR 0 3
75598: PPUSH
75599: LD_VAR 0 4
75603: PPUSH
75604: CALL_OW 1
75608: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75609: LD_ADDR_VAR 0 2
75613: PUSH
75614: LD_VAR 0 2
75618: PPUSH
75619: LD_INT 4
75621: PPUSH
75622: LD_VAR 0 2
75626: PUSH
75627: LD_INT 4
75629: ARRAY
75630: PUSH
75631: LD_VAR 0 4
75635: PLUS
75636: PPUSH
75637: CALL_OW 1
75641: ST_TO_ADDR
// end ;
75642: GO 75561
75644: POP
75645: POP
// end ;
75646: LD_VAR 0 2
75650: RET
// export function Length ( array ) ; begin
75651: LD_INT 0
75653: PPUSH
// result := array + 0 ;
75654: LD_ADDR_VAR 0 2
75658: PUSH
75659: LD_VAR 0 1
75663: PUSH
75664: LD_INT 0
75666: PLUS
75667: ST_TO_ADDR
// end ;
75668: LD_VAR 0 2
75672: RET
// export function PrepareArray ( array ) ; begin
75673: LD_INT 0
75675: PPUSH
// result := array diff 0 ;
75676: LD_ADDR_VAR 0 2
75680: PUSH
75681: LD_VAR 0 1
75685: PUSH
75686: LD_INT 0
75688: DIFF
75689: ST_TO_ADDR
// if not result [ 1 ] then
75690: LD_VAR 0 2
75694: PUSH
75695: LD_INT 1
75697: ARRAY
75698: NOT
75699: IFFALSE 75719
// result := Delete ( result , 1 ) ;
75701: LD_ADDR_VAR 0 2
75705: PUSH
75706: LD_VAR 0 2
75710: PPUSH
75711: LD_INT 1
75713: PPUSH
75714: CALL_OW 3
75718: ST_TO_ADDR
// end ;
75719: LD_VAR 0 2
75723: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75724: LD_INT 0
75726: PPUSH
75727: PPUSH
75728: PPUSH
75729: PPUSH
// sibRocketRange := 25 ;
75730: LD_ADDR_VAR 0 6
75734: PUSH
75735: LD_INT 25
75737: ST_TO_ADDR
// result := false ;
75738: LD_ADDR_VAR 0 4
75742: PUSH
75743: LD_INT 0
75745: ST_TO_ADDR
// for i := 0 to 5 do
75746: LD_ADDR_VAR 0 5
75750: PUSH
75751: DOUBLE
75752: LD_INT 0
75754: DEC
75755: ST_TO_ADDR
75756: LD_INT 5
75758: PUSH
75759: FOR_TO
75760: IFFALSE 75827
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75762: LD_VAR 0 1
75766: PPUSH
75767: LD_VAR 0 5
75771: PPUSH
75772: LD_VAR 0 6
75776: PPUSH
75777: CALL_OW 272
75781: PPUSH
75782: LD_VAR 0 2
75786: PPUSH
75787: LD_VAR 0 5
75791: PPUSH
75792: LD_VAR 0 6
75796: PPUSH
75797: CALL_OW 273
75801: PPUSH
75802: LD_VAR 0 3
75806: PPUSH
75807: CALL_OW 309
75811: IFFALSE 75825
// begin result := true ;
75813: LD_ADDR_VAR 0 4
75817: PUSH
75818: LD_INT 1
75820: ST_TO_ADDR
// exit ;
75821: POP
75822: POP
75823: GO 75829
// end ;
75825: GO 75759
75827: POP
75828: POP
// end ;
75829: LD_VAR 0 4
75833: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75834: LD_INT 0
75836: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75837: LD_VAR 0 1
75841: PPUSH
75842: LD_VAR 0 2
75846: PPUSH
75847: LD_INT 0
75849: PPUSH
75850: LD_INT 0
75852: PPUSH
75853: LD_INT 1
75855: PPUSH
75856: LD_INT 0
75858: PPUSH
75859: CALL_OW 587
// end ; end_of_file
75863: LD_VAR 0 3
75867: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75868: LD_VAR 0 1
75872: PUSH
75873: LD_INT 200
75875: DOUBLE
75876: GREATEREQUAL
75877: IFFALSE 75885
75879: LD_INT 299
75881: DOUBLE
75882: LESSEQUAL
75883: IFTRUE 75887
75885: GO 75919
75887: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75888: LD_VAR 0 1
75892: PPUSH
75893: LD_VAR 0 2
75897: PPUSH
75898: LD_VAR 0 3
75902: PPUSH
75903: LD_VAR 0 4
75907: PPUSH
75908: LD_VAR 0 5
75912: PPUSH
75913: CALL 14904 0 5
75917: GO 75996
75919: LD_INT 300
75921: DOUBLE
75922: GREATEREQUAL
75923: IFFALSE 75931
75925: LD_INT 399
75927: DOUBLE
75928: LESSEQUAL
75929: IFTRUE 75933
75931: GO 75995
75933: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75934: LD_VAR 0 1
75938: PPUSH
75939: LD_VAR 0 2
75943: PPUSH
75944: LD_VAR 0 3
75948: PPUSH
75949: LD_VAR 0 4
75953: PPUSH
75954: LD_VAR 0 5
75958: PPUSH
75959: LD_VAR 0 6
75963: PPUSH
75964: LD_VAR 0 7
75968: PPUSH
75969: LD_VAR 0 8
75973: PPUSH
75974: LD_VAR 0 9
75978: PPUSH
75979: LD_VAR 0 10
75983: PPUSH
75984: LD_VAR 0 11
75988: PPUSH
75989: CALL 31175 0 11
75993: GO 75996
75995: POP
// end ;
75996: PPOPN 11
75998: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75999: LD_VAR 0 1
76003: PPUSH
76004: LD_VAR 0 2
76008: PPUSH
76009: LD_VAR 0 3
76013: PPUSH
76014: LD_VAR 0 4
76018: PPUSH
76019: LD_VAR 0 5
76023: PPUSH
76024: CALL 14640 0 5
// end ; end_of_file
76028: PPOPN 5
76030: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76031: LD_VAR 0 1
76035: PPUSH
76036: LD_VAR 0 2
76040: PPUSH
76041: LD_VAR 0 3
76045: PPUSH
76046: LD_VAR 0 4
76050: PPUSH
76051: LD_VAR 0 5
76055: PPUSH
76056: LD_VAR 0 6
76060: PPUSH
76061: CALL 18868 0 6
// end ;
76065: PPOPN 6
76067: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76068: LD_INT 0
76070: PPUSH
// begin if not units then
76071: LD_VAR 0 1
76075: NOT
76076: IFFALSE 76080
// exit ;
76078: GO 76080
// end ;
76080: PPOPN 7
76082: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76083: CALL 18839 0 0
// end ;
76087: PPOPN 1
76089: END
