// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8092 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 32307 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 32307 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 32307 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 32307 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 32307 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 32307 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 32307 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 32307 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 32307 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 32307 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 32307 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 32307 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 32307 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 32307 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 32307 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 32307 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 32307 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 32307 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 32307 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 32307 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 32307 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 32307 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 67958 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 67958 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 67958 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 67958 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 67958 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 67958 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 67958 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 67958 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7780: LD_VAR 0 1
7784: PUSH
7785: LD_EXP 21
7789: EQUAL
7790: IFFALSE 7799
// YouLost ( Heike ) ;
7792: LD_STRING Heike
7794: PPUSH
7795: CALL_OW 104
// if un in apeSoldGroup then
7799: LD_VAR 0 1
7803: PUSH
7804: LD_EXP 42
7808: IN
7809: IFFALSE 7827
// apeSoldGroup := apeSoldGroup diff un ;
7811: LD_ADDR_EXP 42
7815: PUSH
7816: LD_EXP 42
7820: PUSH
7821: LD_VAR 0 1
7825: DIFF
7826: ST_TO_ADDR
// if un in apeEngGroup then
7827: LD_VAR 0 1
7831: PUSH
7832: LD_EXP 43
7836: IN
7837: IFFALSE 7855
// apeEngGroup := apeEngGroup diff un ;
7839: LD_ADDR_EXP 43
7843: PUSH
7844: LD_EXP 43
7848: PUSH
7849: LD_VAR 0 1
7853: DIFF
7854: ST_TO_ADDR
// if un in oilBaseGuard then
7855: LD_VAR 0 1
7859: PUSH
7860: LD_EXP 38
7864: IN
7865: IFFALSE 7883
// oilBaseGuard := oilBaseGuard diff un ;
7867: LD_ADDR_EXP 38
7871: PUSH
7872: LD_EXP 38
7876: PUSH
7877: LD_VAR 0 1
7881: DIFF
7882: ST_TO_ADDR
// if un in ruNorthGroup then
7883: LD_VAR 0 1
7887: PUSH
7888: LD_EXP 39
7892: IN
7893: IFFALSE 7911
// ruNorthGroup := ruNorthGroup diff un ;
7895: LD_ADDR_EXP 39
7899: PUSH
7900: LD_EXP 39
7904: PUSH
7905: LD_VAR 0 1
7909: DIFF
7910: ST_TO_ADDR
// if un in ruSouthGroup then
7911: LD_VAR 0 1
7915: PUSH
7916: LD_EXP 40
7920: IN
7921: IFFALSE 7939
// ruSouthGroup := ruSouthGroup diff un ;
7923: LD_ADDR_EXP 40
7927: PUSH
7928: LD_EXP 40
7932: PUSH
7933: LD_VAR 0 1
7937: DIFF
7938: ST_TO_ADDR
// if un in ruConvoySquad then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_EXP 41
7948: IN
7949: IFFALSE 7967
// ruConvoySquad := ruConvoySquad diff un ;
7951: LD_ADDR_EXP 41
7955: PUSH
7956: LD_EXP 41
7960: PUSH
7961: LD_VAR 0 1
7965: DIFF
7966: ST_TO_ADDR
// end ;
7967: PPOPN 1
7969: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 264
7979: PUSH
7980: LD_INT 30
7982: EQUAL
7983: IFFALSE 7993
// radarConstructed := true ;
7985: LD_ADDR_EXP 13
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 26
8005: EQUAL
8006: IFFALSE 8016
// flamethrowerBuilt := true ;
8008: LD_ADDR_EXP 20
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ;
8016: PPOPN 2
8018: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8019: LD_ADDR_EXP 18
8023: PUSH
8024: LD_EXP 18
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ST_TO_ADDR
// if oldId in ruConvoySquad then
8033: LD_VAR 0 2
8037: PUSH
8038: LD_EXP 41
8042: IN
8043: IFFALSE 8061
// ruConvoySquad := ruConvoySquad diff oldId ;
8045: LD_ADDR_EXP 41
8049: PUSH
8050: LD_EXP 41
8054: PUSH
8055: LD_VAR 0 2
8059: DIFF
8060: ST_TO_ADDR
// if newId in ruConvoySquad then
8061: LD_VAR 0 1
8065: PUSH
8066: LD_EXP 41
8070: IN
8071: IFFALSE 8089
// ruConvoySquad := ruConvoySquad diff newId ;
8073: LD_ADDR_EXP 41
8077: PUSH
8078: LD_EXP 41
8082: PUSH
8083: LD_VAR 0 1
8087: DIFF
8088: ST_TO_ADDR
// end ; end_of_file
8089: PPOPN 4
8091: END
// export function Action ; var i , p , un , veh , tmp ; begin
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
8096: PPUSH
8097: PPUSH
8098: PPUSH
8099: PPUSH
// InGameOn ;
8100: CALL_OW 8
// music_nat := 2 ;
8104: LD_ADDR_OWVAR 71
8108: PUSH
8109: LD_INT 2
8111: ST_TO_ADDR
// music_class := music_recon ;
8112: LD_ADDR_OWVAR 72
8116: PUSH
8117: LD_INT 3
8119: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8120: LD_INT 7
8122: PPUSH
8123: LD_INT 6
8125: PPUSH
8126: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8130: LD_INT 7
8132: PPUSH
8133: LD_INT 6
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: LD_INT 30
8141: NEG
8142: PPUSH
8143: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8147: LD_ADDR_VAR 0 6
8151: PUSH
8152: LD_EXP 21
8156: PUSH
8157: LD_EXP 22
8161: PUSH
8162: LD_EXP 23
8166: PUSH
8167: LD_EXP 24
8171: PUSH
8172: LD_EXP 25
8176: PUSH
8177: LD_EXP 26
8181: PUSH
8182: LD_EXP 28
8186: PUSH
8187: LD_EXP 33
8191: PUSH
8192: LD_EXP 27
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: ST_TO_ADDR
// tmp := tmp diff 0 ;
8208: LD_ADDR_VAR 0 6
8212: PUSH
8213: LD_VAR 0 6
8217: PUSH
8218: LD_INT 0
8220: DIFF
8221: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8222: LD_ADDR_VAR 0 6
8226: PUSH
8227: LD_VAR 0 6
8231: PPUSH
8232: LD_INT 3
8234: PPUSH
8235: CALL 67550 0 2
8239: ST_TO_ADDR
// for i in heikeVehicles do
8240: LD_ADDR_VAR 0 2
8244: PUSH
8245: LD_EXP 35
8249: PUSH
8250: FOR_IN
8251: IFFALSE 8450
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8253: LD_INT 5
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 5
8263: ARRAY
8264: PPUSH
8265: LD_VAR 0 2
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_INT 2
8281: ARRAY
8282: PPUSH
8283: LD_VAR 0 2
8287: PUSH
8288: LD_INT 3
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_INT 4
8299: ARRAY
8300: PPUSH
8301: LD_INT 34
8303: PPUSH
8304: CALL 439 0 7
// veh := CreateVehicle ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: CALL_OW 45
8317: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 4
8325: ARRAY
8326: PUSH
8327: LD_INT 51
8329: PUSH
8330: LD_INT 32
8332: PUSH
8333: LD_INT 12
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: IN
8341: IFFALSE 8421
// begin if i [ 7 ] [ 1 ] then
8343: LD_VAR 0 2
8347: PUSH
8348: LD_INT 7
8350: ARRAY
8351: PUSH
8352: LD_INT 1
8354: ARRAY
8355: IFFALSE 8382
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: LD_VAR 0 2
8369: PUSH
8370: LD_INT 7
8372: ARRAY
8373: PUSH
8374: LD_INT 1
8376: ARRAY
8377: PPUSH
8378: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8382: LD_VAR 0 2
8386: PUSH
8387: LD_INT 7
8389: ARRAY
8390: PUSH
8391: LD_INT 2
8393: ARRAY
8394: IFFALSE 8421
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8396: LD_VAR 0 5
8400: PPUSH
8401: LD_INT 2
8403: PPUSH
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 7
8411: ARRAY
8412: PUSH
8413: LD_INT 2
8415: ARRAY
8416: PPUSH
8417: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8421: LD_VAR 0 5
8425: PPUSH
8426: LD_INT 2
8428: PPUSH
8429: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8433: LD_VAR 0 5
8437: PPUSH
8438: LD_INT 4
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 49
// end ;
8448: GO 8250
8450: POP
8451: POP
// if tmp then
8452: LD_VAR 0 6
8456: IFFALSE 8566
// begin p := 0 ;
8458: LD_ADDR_VAR 0 3
8462: PUSH
8463: LD_INT 0
8465: ST_TO_ADDR
// for i in tmp do
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_VAR 0 6
8475: PUSH
8476: FOR_IN
8477: IFFALSE 8564
// begin p := p + 1 ;
8479: LD_ADDR_VAR 0 3
8483: PUSH
8484: LD_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: PLUS
8492: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8493: LD_VAR 0 2
8497: PPUSH
8498: LD_INT 5
8500: PPUSH
8501: LD_INT 0
8503: PPUSH
8504: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8508: LD_VAR 0 2
8512: PPUSH
8513: LD_INT 26
8515: PPUSH
8516: LD_INT 9
8518: PPUSH
8519: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8523: LD_VAR 0 3
8527: PUSH
8528: LD_EXP 35
8532: GREATEREQUAL
8533: PUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: CALL_OW 257
8543: PUSH
8544: LD_INT 3
8546: EQUAL
8547: AND
8548: IFFALSE 8562
// SetClass ( i , 1 ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_INT 1
8557: PPUSH
8558: CALL_OW 336
// end ;
8562: GO 8476
8564: POP
8565: POP
// end ; if heikeSecondSquad then
8566: LD_EXP 34
8570: IFFALSE 8684
// for i in heikeSecondSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_EXP 34
8581: PUSH
8582: FOR_IN
8583: IFFALSE 8682
// begin p := p + 1 ;
8585: LD_ADDR_VAR 0 3
8589: PUSH
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 1
8597: PLUS
8598: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 6
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_INT 26
8621: PPUSH
8622: LD_INT 9
8624: PPUSH
8625: CALL_OW 118
// ForceSleep ( i , true ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8641: LD_VAR 0 3
8645: PUSH
8646: LD_EXP 35
8650: GREATEREQUAL
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 257
8661: PUSH
8662: LD_INT 3
8664: EQUAL
8665: AND
8666: IFFALSE 8680
// SetClass ( i , 1 ) ;
8668: LD_VAR 0 2
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 336
// end ;
8680: GO 8582
8682: POP
8683: POP
// if heikeApes then
8684: LD_EXP 36
8688: IFFALSE 8731
// for i in heikeApes do
8690: LD_ADDR_VAR 0 2
8694: PUSH
8695: LD_EXP 36
8699: PUSH
8700: FOR_IN
8701: IFFALSE 8729
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8703: LD_VAR 0 2
8707: PPUSH
8708: LD_INT 7
8710: PPUSH
8711: LD_INT 0
8713: PPUSH
8714: CALL_OW 49
// ComHold ( i ) ;
8718: LD_VAR 0 2
8722: PPUSH
8723: CALL_OW 140
// end ;
8727: GO 8700
8729: POP
8730: POP
// if Kurt then
8731: LD_EXP 32
8735: IFFALSE 8767
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8737: LD_EXP 32
8741: PPUSH
8742: LD_INT 8
8744: PPUSH
8745: LD_INT 0
8747: PPUSH
8748: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8752: LD_EXP 32
8756: PPUSH
8757: LD_INT 42
8759: PPUSH
8760: LD_INT 32
8762: PPUSH
8763: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8767: LD_INT 70
8769: PPUSH
8770: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8774: LD_EXP 21
8778: PPUSH
8779: LD_STRING DH-Start-1
8781: PPUSH
8782: CALL_OW 88
// if Givi then
8786: LD_EXP 22
8790: IFFALSE 9053
// begin Say ( Givi , DG-Start-2-5 ) ;
8792: LD_EXP 22
8796: PPUSH
8797: LD_STRING DG-Start-2-5
8799: PPUSH
8800: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8804: LD_EXP 21
8808: PPUSH
8809: LD_STRING DH-Start-3
8811: PPUSH
8812: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8816: LD_EXP 21
8820: PPUSH
8821: LD_STRING DH-Start-4
8823: PPUSH
8824: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8828: LD_EXP 22
8832: PPUSH
8833: LD_STRING DG-Start-5
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8840: LD_EXP 21
8844: PPUSH
8845: LD_STRING DH-Start-6
8847: PPUSH
8848: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8852: LD_EXP 22
8856: PPUSH
8857: LD_STRING DG-Start-7
8859: PPUSH
8860: CALL_OW 88
// if Mike then
8864: LD_EXP 23
8868: IFFALSE 9041
// begin Say ( Mike , DM-Start-8 ) ;
8870: LD_EXP 23
8874: PPUSH
8875: LD_STRING DM-Start-8
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8882: LD_EXP 23
8886: PPUSH
8887: LD_STRING DM-Start-9
8889: PPUSH
8890: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8894: LD_EXP 22
8898: PPUSH
8899: LD_STRING DG-Start-10
8901: PPUSH
8902: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8906: LD_EXP 22
8910: PPUSH
8911: LD_STRING DG-Start-11
8913: PPUSH
8914: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8918: LD_EXP 21
8922: PPUSH
8923: LD_STRING DH-Start-12
8925: PPUSH
8926: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8930: LD_EXP 22
8934: PPUSH
8935: LD_STRING DG-Start-13
8937: PPUSH
8938: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8942: LD_EXP 22
8946: PPUSH
8947: LD_STRING DG-Start-14
8949: PPUSH
8950: CALL_OW 88
// if Kaia then
8954: LD_EXP 26
8958: IFFALSE 9041
// begin Say ( Kaia , DK-Start-15 ) ;
8960: LD_EXP 26
8964: PPUSH
8965: LD_STRING DK-Start-15
8967: PPUSH
8968: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8972: LD_EXP 26
8976: PPUSH
8977: LD_STRING DK-Start-16
8979: PPUSH
8980: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8984: LD_EXP 26
8988: PPUSH
8989: LD_STRING DK-Start-17
8991: PPUSH
8992: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8996: LD_INT 10
8998: PPUSH
8999: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9003: LD_EXP 22
9007: PPUSH
9008: LD_EXP 26
9012: PPUSH
9013: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9017: LD_EXP 22
9021: PPUSH
9022: LD_STRING DG-Start-18
9024: PPUSH
9025: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9029: LD_EXP 26
9033: PPUSH
9034: LD_STRING DK-Start-19
9036: PPUSH
9037: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9041: LD_EXP 21
9045: PPUSH
9046: LD_STRING DH-Start-20
9048: PPUSH
9049: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9053: LD_INT 70
9055: PPUSH
9056: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9060: LD_EXP 29
9064: PPUSH
9065: LD_STRING DShar-Start-21
9067: PPUSH
9068: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9072: LD_EXP 21
9076: PPUSH
9077: LD_STRING DH-Start-22
9079: PPUSH
9080: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9084: LD_EXP 29
9088: PPUSH
9089: LD_STRING DShar-Start-23
9091: PPUSH
9092: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9096: LD_EXP 29
9100: PPUSH
9101: LD_STRING DShar-Start-24
9103: PPUSH
9104: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9108: LD_EXP 29
9112: PPUSH
9113: LD_STRING DShar-Start-25
9115: PPUSH
9116: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9120: LD_EXP 29
9124: PPUSH
9125: LD_STRING DShar-Start-26
9127: PPUSH
9128: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9132: LD_EXP 21
9136: PPUSH
9137: LD_STRING DH-Start-27
9139: PPUSH
9140: CALL_OW 88
// if Kaia then
9144: LD_EXP 26
9148: IFFALSE 9190
// begin ComTurnUnit ( Heike , Kaia ) ;
9150: LD_EXP 21
9154: PPUSH
9155: LD_EXP 26
9159: PPUSH
9160: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9164: LD_EXP 26
9168: PPUSH
9169: LD_STRING DK-Start-28
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-29
9183: PPUSH
9184: CALL_OW 88
// end else
9188: GO 9202
// Say ( Heike , DH-Start-a-28 ) ;
9190: LD_EXP 21
9194: PPUSH
9195: LD_STRING DH-Start-a-28
9197: PPUSH
9198: CALL_OW 88
// if Givi then
9202: LD_EXP 22
9206: IFFALSE 9441
// begin ComTurnUnit ( Heike , Givi ) ;
9208: LD_EXP 21
9212: PPUSH
9213: LD_EXP 22
9217: PPUSH
9218: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9222: LD_EXP 22
9226: PPUSH
9227: LD_EXP 21
9231: PPUSH
9232: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9236: LD_EXP 21
9240: PPUSH
9241: LD_STRING DH-Start-30
9243: PPUSH
9244: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9248: LD_EXP 21
9252: PPUSH
9253: LD_STRING DH-Start-31
9255: PPUSH
9256: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9260: LD_EXP 22
9264: PPUSH
9265: LD_STRING DG-Start-32
9267: PPUSH
9268: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9272: LD_EXP 21
9276: PPUSH
9277: LD_STRING DH-Start-33
9279: PPUSH
9280: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9284: LD_EXP 22
9288: PPUSH
9289: LD_STRING DG-Start-34
9291: PPUSH
9292: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9296: LD_EXP 22
9300: PPUSH
9301: LD_STRING DG-Start-35
9303: PPUSH
9304: CALL_OW 88
// if Kurt and not dialogue_skipped then
9308: LD_EXP 32
9312: PUSH
9313: LD_OWVAR 59
9317: NOT
9318: AND
9319: IFFALSE 9350
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9321: LD_EXP 32
9325: PPUSH
9326: LD_INT 28
9328: PPUSH
9329: LD_INT 13
9331: PPUSH
9332: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9336: LD_EXP 32
9340: PPUSH
9341: LD_EXP 21
9345: PPUSH
9346: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9350: LD_EXP 22
9354: PPUSH
9355: LD_STRING DG-Start-36
9357: PPUSH
9358: CALL_OW 88
// if Kurt then
9362: LD_EXP 32
9366: IFFALSE 9439
// begin if not Givi then
9368: LD_EXP 22
9372: NOT
9373: IFFALSE 9389
// Say ( Kurt , DKs-Start-37-a ) else
9375: LD_EXP 32
9379: PPUSH
9380: LD_STRING DKs-Start-37-a
9382: PPUSH
9383: CALL_OW 88
9387: GO 9401
// Say ( Kurt , DKs-Start-37 ) ;
9389: LD_EXP 32
9393: PPUSH
9394: LD_STRING DKs-Start-37
9396: PPUSH
9397: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9401: LD_EXP 32
9405: PPUSH
9406: LD_STRING DKs-Start-38
9408: PPUSH
9409: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9413: LD_EXP 21
9417: PPUSH
9418: LD_EXP 32
9422: PPUSH
9423: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9427: LD_EXP 21
9431: PPUSH
9432: LD_STRING DH-Start-39
9434: PPUSH
9435: CALL_OW 88
// end ; end else
9439: GO 9470
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9441: LD_EXP 34
9445: PPUSH
9446: LD_STRING DArm-Start-a-37
9448: PPUSH
9449: LD_STRING DArf-Start-a-37
9451: PPUSH
9452: CALL 1274 0 3
9456: IFFALSE 9470
// Say ( Heike , DH-Start-39 ) ;
9458: LD_EXP 21
9462: PPUSH
9463: LD_STRING DH-Start-39
9465: PPUSH
9466: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9470: LD_INT 44
9472: PPUSH
9473: LD_INT 25
9475: PPUSH
9476: CALL_OW 428
9480: IFFALSE 9497
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9482: LD_INT 44
9484: PPUSH
9485: LD_INT 25
9487: PPUSH
9488: CALL_OW 428
9492: PPUSH
9493: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9497: LD_EXP 30
9501: PPUSH
9502: LD_INT 5
9504: PPUSH
9505: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9509: LD_EXP 30
9513: PPUSH
9514: LD_INT 44
9516: PPUSH
9517: LD_INT 25
9519: PPUSH
9520: LD_INT 0
9522: PPUSH
9523: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9527: LD_EXP 30
9531: PPUSH
9532: LD_INT 29
9534: PPUSH
9535: LD_INT 12
9537: PPUSH
9538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9542: LD_INT 35
9544: PPUSH
9545: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9549: LD_OWVAR 59
9553: PUSH
9554: LD_EXP 21
9558: PPUSH
9559: LD_EXP 30
9563: PPUSH
9564: CALL_OW 296
9568: PUSH
9569: LD_INT 8
9571: LESS
9572: OR
9573: PUSH
9574: LD_EXP 30
9578: PPUSH
9579: LD_INT 26
9581: PPUSH
9582: LD_INT 9
9584: PPUSH
9585: CALL_OW 297
9589: PUSH
9590: LD_INT 6
9592: LESS
9593: OR
9594: IFFALSE 9542
// Say ( Olaf , DO-Scout-1 ) ;
9596: LD_EXP 30
9600: PPUSH
9601: LD_STRING DO-Scout-1
9603: PPUSH
9604: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 21
9617: PPUSH
9618: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_VAR 0 6
9631: PUSH
9632: LD_EXP 34
9636: UNION
9637: PUSH
9638: FOR_IN
9639: IFFALSE 9657
// ComTurnUnit ( i , Olaf ) ;
9641: LD_VAR 0 2
9645: PPUSH
9646: LD_EXP 30
9650: PPUSH
9651: CALL_OW 119
9655: GO 9638
9657: POP
9658: POP
// wait ( 0 0$0.3 ) ;
9659: LD_INT 10
9661: PPUSH
9662: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9666: LD_EXP 21
9670: PPUSH
9671: LD_EXP 30
9675: PPUSH
9676: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9680: LD_EXP 21
9684: PPUSH
9685: LD_EXP 30
9689: PPUSH
9690: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9694: LD_EXP 21
9698: PPUSH
9699: LD_STRING DH-Scout-2
9701: PPUSH
9702: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9706: LD_EXP 30
9710: PPUSH
9711: LD_STRING DO-Scout-3
9713: PPUSH
9714: CALL_OW 88
// if Mike and Givi then
9718: LD_EXP 23
9722: PUSH
9723: LD_EXP 22
9727: AND
9728: IFFALSE 9744
// Say ( Olaf , DO-Scout-4 ) else
9730: LD_EXP 30
9734: PPUSH
9735: LD_STRING DO-Scout-4
9737: PPUSH
9738: CALL_OW 88
9742: GO 9844
// begin if Mike then
9744: LD_EXP 23
9748: IFFALSE 9776
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9750: LD_EXP 30
9754: PPUSH
9755: LD_STRING DO-Scout-a-4
9757: PPUSH
9758: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9762: LD_EXP 21
9766: PPUSH
9767: LD_STRING DH-Scout-a-5
9769: PPUSH
9770: CALL_OW 88
// end else
9774: GO 9844
// if Givi then
9776: LD_EXP 22
9780: IFFALSE 9808
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9782: LD_EXP 30
9786: PPUSH
9787: LD_STRING DO-Scout-b-4
9789: PPUSH
9790: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Scout-b-5
9801: PPUSH
9802: CALL_OW 88
// end else
9806: GO 9844
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9808: LD_EXP 30
9812: PPUSH
9813: LD_STRING DO-Scout-f-4
9815: PPUSH
9816: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9820: LD_EXP 21
9824: PPUSH
9825: LD_STRING DH-Scout-f-5
9827: PPUSH
9828: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9832: LD_EXP 30
9836: PPUSH
9837: LD_STRING DO-Scout-f-6
9839: PPUSH
9840: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9844: LD_EXP 21
9848: PPUSH
9849: LD_STRING DH-Scout-5
9851: PPUSH
9852: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9856: LD_EXP 30
9860: PPUSH
9861: LD_STRING DO-Scout-6
9863: PPUSH
9864: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9868: LD_EXP 30
9872: PPUSH
9873: LD_STRING DO-Scout-7
9875: PPUSH
9876: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9880: LD_EXP 21
9884: PPUSH
9885: LD_STRING DH-Scout-8
9887: PPUSH
9888: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9892: LD_EXP 21
9896: PPUSH
9897: LD_STRING DH-Scout-9
9899: PPUSH
9900: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9904: LD_EXP 30
9908: PPUSH
9909: LD_STRING DO-Scout-10
9911: PPUSH
9912: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9916: LD_EXP 30
9920: PPUSH
9921: LD_STRING DO-Scout-12
9923: PPUSH
9924: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9928: LD_EXP 30
9932: PPUSH
9933: LD_STRING DO-Scout-13
9935: PPUSH
9936: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9940: LD_EXP 30
9944: PPUSH
9945: LD_STRING DO-Scout-14
9947: PPUSH
9948: CALL_OW 88
// if Givi then
9952: LD_EXP 22
9956: IFFALSE 9982
// begin Say ( Givi , DG-Scout-15 ) ;
9958: LD_EXP 22
9962: PPUSH
9963: LD_STRING DG-Scout-15
9965: PPUSH
9966: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9970: LD_EXP 26
9974: PPUSH
9975: LD_STRING DK-Scout-16
9977: PPUSH
9978: CALL_OW 88
// end ; if not dialogue_skipped then
9982: LD_OWVAR 59
9986: NOT
9987: IFFALSE 10108
// begin async ;
9989: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9990: LD_EXP 30
9994: PPUSH
9995: LD_STRING DO-Scout-17
9997: PPUSH
9998: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10002: LD_INT 55
10004: PPUSH
10005: LD_INT 77
10007: PPUSH
10008: LD_INT 2
10010: PPUSH
10011: LD_INT 6
10013: NEG
10014: PPUSH
10015: CALL 1223 0 4
// wait ( 10 ) ;
10019: LD_INT 10
10021: PPUSH
10022: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10026: LD_INT 55
10028: PPUSH
10029: LD_INT 77
10031: PPUSH
10032: CALL_OW 84
// wait ( 0 0$10 ) ;
10036: LD_INT 350
10038: PPUSH
10039: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10043: LD_EXP 30
10047: PPUSH
10048: LD_STRING DO-Scout-18
10050: PPUSH
10051: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10055: LD_INT 204
10057: PPUSH
10058: LD_INT 107
10060: PPUSH
10061: LD_INT 2
10063: PPUSH
10064: LD_INT 12
10066: NEG
10067: PPUSH
10068: CALL 1223 0 4
// wait ( 10 ) ;
10072: LD_INT 10
10074: PPUSH
10075: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10079: LD_INT 204
10081: PPUSH
10082: LD_INT 107
10084: PPUSH
10085: CALL_OW 84
// wait ( 0 0$10 ) ;
10089: LD_INT 350
10091: PPUSH
10092: CALL_OW 67
// sync ;
10096: SYNC
// CenterNowOnUnits ( Heike ) ;
10097: LD_EXP 21
10101: PPUSH
10102: CALL_OW 87
// end else
10106: GO 10142
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10108: LD_INT 55
10110: PPUSH
10111: LD_INT 77
10113: PPUSH
10114: LD_INT 2
10116: PPUSH
10117: LD_INT 6
10119: NEG
10120: PPUSH
10121: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10125: LD_INT 204
10127: PPUSH
10128: LD_INT 107
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 12
10136: NEG
10137: PPUSH
10138: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10142: LD_EXP 30
10146: PPUSH
10147: LD_STRING DO-Scout-19
10149: PPUSH
10150: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10154: LD_EXP 30
10158: PPUSH
10159: LD_STRING DO-Scout-20
10161: PPUSH
10162: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10166: LD_EXP 21
10170: PPUSH
10171: LD_STRING DH-Scout-21
10173: PPUSH
10174: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10178: LD_EXP 21
10182: PPUSH
10183: LD_STRING DH-Scout-22
10185: PPUSH
10186: CALL_OW 88
// InGameOff ;
10190: CALL_OW 9
// if heikeSecondSquad then
10194: LD_EXP 34
10198: IFFALSE 10212
// ForceSleep ( heikeSecondSquad , false ) ;
10200: LD_EXP 34
10204: PPUSH
10205: LD_INT 0
10207: PPUSH
10208: CALL_OW 585
// if Givi then
10212: LD_EXP 22
10216: IFFALSE 10231
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10218: LD_INT 13
10220: PPUSH
10221: LD_INT 2
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10231: LD_STRING Road
10233: PPUSH
10234: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10238: LD_ADDR_VAR 0 2
10242: PUSH
10243: LD_INT 22
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 69
10271: PUSH
10272: FOR_IN
10273: IFFALSE 10289
// SetSide ( i , 2 ) ;
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: CALL_OW 235
10287: GO 10272
10289: POP
10290: POP
// SaveForQuickRestart ;
10291: CALL_OW 22
// music_class := music_auto ;
10295: LD_ADDR_OWVAR 72
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// end ;
10303: LD_VAR 0 1
10307: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10308: LD_INT 2
10310: PPUSH
10311: LD_INT 9
10313: PPUSH
10314: CALL_OW 294
10318: IFFALSE 10685
10320: GO 10322
10322: DISABLE
// begin DialogueOn ;
10323: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10327: LD_INT 111
10329: PPUSH
10330: LD_INT 72
10332: PPUSH
10333: LD_INT 2
10335: PPUSH
10336: LD_INT 20
10338: NEG
10339: PPUSH
10340: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10344: LD_INT 111
10346: PPUSH
10347: LD_INT 72
10349: PPUSH
10350: LD_INT 2
10352: PPUSH
10353: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10357: LD_INT 111
10359: PPUSH
10360: LD_INT 72
10362: PPUSH
10363: CALL_OW 86
// if IsOk ( Kamil ) then
10367: LD_EXP 25
10371: PPUSH
10372: CALL_OW 302
10376: IFFALSE 10493
// begin Say ( Kamil , DKam-Cross-1 ) ;
10378: LD_EXP 25
10382: PPUSH
10383: LD_STRING DKam-Cross-1
10385: PPUSH
10386: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10390: LD_EXP 25
10394: PPUSH
10395: LD_STRING DKam-Cross-2
10397: PPUSH
10398: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10402: LD_EXP 25
10406: PPUSH
10407: LD_STRING DKam-Cross-3
10409: PPUSH
10410: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10414: LD_EXP 25
10418: PPUSH
10419: LD_STRING DKam-Cross-4
10421: PPUSH
10422: CALL_OW 88
// if IsOk ( Ibrahim ) then
10426: LD_EXP 24
10430: PPUSH
10431: CALL_OW 302
10435: IFFALSE 10491
// begin if ibrahimJoinedIn04 then
10437: LD_EXP 4
10441: IFFALSE 10455
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10443: LD_EXP 24
10447: PPUSH
10448: LD_STRING DI-Cross-b-5
10450: PPUSH
10451: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10455: LD_EXP 24
10459: PPUSH
10460: LD_STRING DI-Cross-b-6
10462: PPUSH
10463: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10467: LD_EXP 24
10471: PPUSH
10472: LD_STRING DI-Cross-b-7
10474: PPUSH
10475: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10479: LD_EXP 25
10483: PPUSH
10484: LD_STRING DKam-Cross-8
10486: PPUSH
10487: CALL_OW 88
// end ; end else
10491: GO 10651
// if IsOk ( Sophia ) then
10493: LD_EXP 27
10497: PPUSH
10498: CALL_OW 302
10502: IFFALSE 10619
// begin Say ( Sophia , DS-Cross-1 ) ;
10504: LD_EXP 27
10508: PPUSH
10509: LD_STRING DS-Cross-1
10511: PPUSH
10512: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10516: LD_EXP 27
10520: PPUSH
10521: LD_STRING DS-Cross-2
10523: PPUSH
10524: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10528: LD_EXP 27
10532: PPUSH
10533: LD_STRING DS-Cross-3
10535: PPUSH
10536: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10540: LD_EXP 27
10544: PPUSH
10545: LD_STRING DS-Cross-4
10547: PPUSH
10548: CALL_OW 88
// if IsOk ( Ibrahim ) then
10552: LD_EXP 24
10556: PPUSH
10557: CALL_OW 302
10561: IFFALSE 10617
// begin if ibrahimJoinedIn04 then
10563: LD_EXP 4
10567: IFFALSE 10581
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10569: LD_EXP 24
10573: PPUSH
10574: LD_STRING DI-Cross-b-5
10576: PPUSH
10577: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10581: LD_EXP 24
10585: PPUSH
10586: LD_STRING DI-Cross-b-6
10588: PPUSH
10589: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10593: LD_EXP 24
10597: PPUSH
10598: LD_STRING DI-Cross-b-7
10600: PPUSH
10601: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10605: LD_EXP 27
10609: PPUSH
10610: LD_STRING DS-Cross-8
10612: PPUSH
10613: CALL_OW 88
// end ; end else
10617: GO 10651
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10619: LD_EXP 34
10623: PPUSH
10624: LD_INT 50
10626: PUSH
10627: EMPTY
10628: LIST
10629: PPUSH
10630: CALL_OW 72
10634: IFFALSE 10651
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10636: LD_EXP 34
10640: PPUSH
10641: LD_STRING DArm-Cross-c-1
10643: PPUSH
10644: LD_STRING DArf-Cross-c-1
10646: PPUSH
10647: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10651: LD_EXP 57
10655: PPUSH
10656: LD_INT 2
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 322
// DialogueOff ;
10666: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10670: LD_STRING Crane
10672: PPUSH
10673: CALL_OW 337
// spottedCrossRoad := true ;
10677: LD_ADDR_EXP 8
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10686: LD_INT 22
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 30
10701: PUSH
10702: LD_INT 0
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 30
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PPUSH
10728: CALL_OW 69
10732: PUSH
10733: LD_EXP 26
10737: PPUSH
10738: CALL_OW 302
10742: PUSH
10743: LD_EXP 34
10747: OR
10748: AND
10749: IFFALSE 10961
10751: GO 10753
10753: DISABLE
// begin DialogueOn ;
10754: CALL_OW 6
// if Kaia then
10758: LD_EXP 26
10762: IFFALSE 10775
// CenterNowOnUnits ( Kaia ) else
10764: LD_EXP 26
10768: PPUSH
10769: CALL_OW 87
10773: GO 10784
// CenterNowOnUnits ( Heike ) ;
10775: LD_EXP 21
10779: PPUSH
10780: CALL_OW 87
// if IsOk ( Kaia ) then
10784: LD_EXP 26
10788: PPUSH
10789: CALL_OW 302
10793: IFFALSE 10809
// Say ( Kaia , DK-Cam-1 ) else
10795: LD_EXP 26
10799: PPUSH
10800: LD_STRING DK-Cam-1
10802: PPUSH
10803: CALL_OW 88
10807: GO 10824
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10809: LD_EXP 34
10813: PPUSH
10814: LD_STRING DArm-Cam-1
10816: PPUSH
10817: LD_STRING DArf-Cam-1
10819: PPUSH
10820: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10824: LD_EXP 21
10828: PPUSH
10829: LD_STRING DH-Cam-2
10831: PPUSH
10832: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10836: LD_EXP 21
10840: PPUSH
10841: LD_STRING DH-Cam-3
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10848: LD_EXP 21
10852: PPUSH
10853: LD_STRING DH-Cam-4
10855: PPUSH
10856: CALL_OW 88
// if IsOk ( Kaia ) then
10860: LD_EXP 26
10864: PPUSH
10865: CALL_OW 302
10869: IFFALSE 10885
// Say ( Kaia , DK-Cam-5 ) else
10871: LD_EXP 26
10875: PPUSH
10876: LD_STRING DK-Cam-5
10878: PPUSH
10879: CALL_OW 88
10883: GO 10900
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10885: LD_EXP 34
10889: PPUSH
10890: LD_STRING DArm-Cam-5
10892: PPUSH
10893: LD_STRING DArf-Cam-5
10895: PPUSH
10896: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10900: LD_EXP 30
10904: PPUSH
10905: LD_STRING DO-Cam-6
10907: PPUSH
10908: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10912: LD_EXP 30
10916: PPUSH
10917: LD_STRING DO-Cam-7
10919: PPUSH
10920: CALL_OW 88
// DialogueOff ;
10924: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10928: LD_STRING Radar
10930: PPUSH
10931: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10935: LD_INT 6
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10948: LD_INT 20
10950: PPUSH
10951: LD_INT 2
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 324
// end ;
10961: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10962: LD_INT 22
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 34
10977: PUSH
10978: LD_INT 30
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 35
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PPUSH
11004: CALL_OW 69
11008: IFFALSE 11020
11010: GO 11012
11012: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11013: LD_STRING RadarDone
11015: PPUSH
11016: CALL_OW 337
11020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 34
11033: PUSH
11034: LD_EXP 50
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 69
11051: IFFALSE 11063
11053: GO 11055
11055: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11056: LD_STRING CraneDone
11058: PPUSH
11059: CALL_OW 337
11063: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11064: LD_EXP 30
11068: PPUSH
11069: CALL_OW 302
11073: PUSH
11074: LD_EXP 33
11078: PPUSH
11079: CALL_OW 302
11083: AND
11084: PUSH
11085: LD_INT 6
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 321
11095: PUSH
11096: LD_INT 2
11098: EQUAL
11099: AND
11100: PUSH
11101: LD_EXP 33
11105: PPUSH
11106: LD_EXP 21
11110: PPUSH
11111: CALL_OW 296
11115: PUSH
11116: LD_INT 10
11118: LESS
11119: PUSH
11120: LD_EXP 33
11124: PPUSH
11125: CALL_OW 310
11129: OR
11130: AND
11131: IFFALSE 11345
11133: GO 11135
11135: DISABLE
// begin DialogueOn ;
11136: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11140: LD_EXP 33
11144: PPUSH
11145: LD_STRING DA-RC-1
11147: PPUSH
11148: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11152: LD_EXP 33
11156: PPUSH
11157: LD_STRING DA-RC-2
11159: PPUSH
11160: CALL_OW 88
// if IsOk ( Kaia ) then
11164: LD_EXP 26
11168: PPUSH
11169: CALL_OW 302
11173: IFFALSE 11247
// begin Say ( Kaia , DK-RC-3 ) ;
11175: LD_EXP 26
11179: PPUSH
11180: LD_STRING DK-RC-3
11182: PPUSH
11183: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11187: LD_EXP 33
11191: PPUSH
11192: LD_STRING DA-RC-4
11194: PPUSH
11195: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11199: LD_EXP 26
11203: PPUSH
11204: LD_STRING DK-RC-5
11206: PPUSH
11207: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11211: LD_EXP 33
11215: PPUSH
11216: LD_STRING DA-RC-6
11218: PPUSH
11219: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11223: LD_EXP 26
11227: PPUSH
11228: LD_STRING DK-RC-7
11230: PPUSH
11231: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11235: LD_EXP 33
11239: PPUSH
11240: LD_STRING DA-RC-8
11242: PPUSH
11243: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11247: LD_EXP 21
11251: PPUSH
11252: LD_STRING DH-RC-9
11254: PPUSH
11255: CALL_OW 88
// if IsOk ( Markov ) then
11259: LD_EXP 28
11263: PPUSH
11264: CALL_OW 302
11268: IFFALSE 11296
// begin Say ( Markov , DMar-RC-10 ) ;
11270: LD_EXP 28
11274: PPUSH
11275: LD_STRING DMar-RC-10
11277: PPUSH
11278: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11282: LD_EXP 28
11286: PPUSH
11287: LD_STRING DMar-RC-11
11289: PPUSH
11290: CALL_OW 88
// end else
11294: GO 11308
// begin Say ( Olaf , DO-RC-a-10 ) ;
11296: LD_EXP 30
11300: PPUSH
11301: LD_STRING DO-RC-a-10
11303: PPUSH
11304: CALL_OW 88
// end ; DialogueOff ;
11308: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11312: LD_STRING RemoteControl
11314: PPUSH
11315: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11319: LD_INT 15
11321: PPUSH
11322: LD_INT 2
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11332: LD_INT 22
11334: PPUSH
11335: LD_INT 2
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// end ;
11345: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11346: LD_INT 12
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: IFFALSE 11730
11365: GO 11367
11367: DISABLE
11368: LD_INT 0
11370: PPUSH
// begin PrepareWestBase ;
11371: CALL 3992 0 0
// westBaseSpotted := true ;
11375: LD_ADDR_EXP 5
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11383: LD_INT 70
11385: PPUSH
11386: CALL_OW 67
// InGameOn ;
11390: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11394: LD_INT 56
11396: PPUSH
11397: LD_INT 77
11399: PPUSH
11400: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11404: LD_INT 56
11406: PPUSH
11407: LD_INT 77
11409: PPUSH
11410: LD_INT 2
11412: PPUSH
11413: LD_INT 12
11415: NEG
11416: PPUSH
11417: CALL_OW 330
// wait ( 0 0$2 ) ;
11421: LD_INT 70
11423: PPUSH
11424: CALL_OW 67
// DialogueOn ;
11428: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11432: LD_EXP 21
11436: PPUSH
11437: LD_STRING DH-Rbase-1
11439: PPUSH
11440: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11444: LD_EXP 26
11448: PPUSH
11449: LD_STRING DK-Rbase-2
11451: PPUSH
11452: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11456: LD_EXP 26
11460: PPUSH
11461: LD_STRING DK-Rbase-3
11463: PPUSH
11464: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11468: LD_EXP 26
11472: PPUSH
11473: LD_STRING DK-Rbase-4
11475: PPUSH
11476: CALL_OW 88
// DialogueOff ;
11480: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11484: LD_INT 56
11486: PPUSH
11487: LD_INT 77
11489: PPUSH
11490: LD_INT 2
11492: PPUSH
11493: CALL_OW 331
// InGameOff ;
11497: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11501: LD_INT 35
11503: PPUSH
11504: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11508: LD_EXP 42
11512: NOT
11513: PUSH
11514: LD_EXP 43
11518: NOT
11519: AND
11520: IFFALSE 11501
// wait ( 0 0$2 ) ;
11522: LD_INT 70
11524: PPUSH
11525: CALL_OW 67
// if IsOk ( Kaia ) then
11529: LD_EXP 26
11533: PPUSH
11534: CALL_OW 302
11538: IFFALSE 11653
// begin DialogueOn ;
11540: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11544: LD_INT 56
11546: PPUSH
11547: LD_INT 81
11549: PPUSH
11550: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11554: LD_EXP 26
11558: PPUSH
11559: LD_STRING DK-Rbase-5
11561: PPUSH
11562: CALL_OW 88
// if IsOk ( Givi ) then
11566: LD_EXP 22
11570: PPUSH
11571: CALL_OW 302
11575: IFFALSE 11649
// begin Say ( Givi , DG-Rbase-6 ) ;
11577: LD_EXP 22
11581: PPUSH
11582: LD_STRING DG-Rbase-6
11584: PPUSH
11585: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11589: LD_EXP 22
11593: PPUSH
11594: LD_STRING DG-Rbase-7
11596: PPUSH
11597: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11601: LD_EXP 26
11605: PPUSH
11606: LD_STRING DK-Rbase-8
11608: PPUSH
11609: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11613: LD_EXP 22
11617: PPUSH
11618: LD_STRING DG-Rbase-9
11620: PPUSH
11621: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11625: LD_EXP 22
11629: PPUSH
11630: LD_STRING DG-Rbase-10
11632: PPUSH
11633: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11637: LD_EXP 26
11641: PPUSH
11642: LD_STRING DK-Rbase-11
11644: PPUSH
11645: CALL_OW 88
// end ; DialogueOff ;
11649: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11653: LD_ADDR_VAR 0 1
11657: PUSH
11658: LD_INT 12
11660: PPUSH
11661: LD_INT 22
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 21
11673: PUSH
11674: LD_INT 3
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 70
11689: PUSH
11690: FOR_IN
11691: IFFALSE 11707
// SetSide ( i , 2 ) ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_INT 2
11700: PPUSH
11701: CALL_OW 235
11705: GO 11690
11707: POP
11708: POP
// westBaseCaptured := true ;
11709: LD_ADDR_EXP 9
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11717: LD_INT 0
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
// end ;
11730: PPOPN 1
11732: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11733: LD_EXP 38
11737: NOT
11738: PUSH
11739: LD_INT 10
11741: PPUSH
11742: CALL_OW 255
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: OR
11751: IFFALSE 11888
11753: GO 11755
11755: DISABLE
// begin DialogueOn ;
11756: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11760: LD_EXP 21
11764: PPUSH
11765: LD_STRING DH-Goal-1
11767: PPUSH
11768: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11772: LD_EXP 29
11776: PPUSH
11777: LD_STRING DShar-Goal-2
11779: PPUSH
11780: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11784: LD_EXP 21
11788: PPUSH
11789: LD_STRING DH-Goal-3
11791: PPUSH
11792: CALL_OW 88
// if reinforcementsAllowed then
11796: LD_EXP 14
11800: IFFALSE 11826
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11802: LD_EXP 29
11806: PPUSH
11807: LD_STRING DShar-Goal-4
11809: PPUSH
11810: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11814: LD_EXP 21
11818: PPUSH
11819: LD_STRING DH-Goal-5
11821: PPUSH
11822: CALL_OW 88
// end ; DialogueOff ;
11826: CALL_OW 7
// eastBaseCaptured := true ;
11830: LD_ADDR_EXP 10
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11838: LD_STRING BaseCaptured
11840: PPUSH
11841: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11845: LD_INT 10
11847: PPUSH
11848: LD_INT 2
11850: PPUSH
11851: CALL_OW 235
// if not reinforcementsAllowed then
11855: LD_EXP 14
11859: NOT
11860: IFFALSE 11864
// exit ;
11862: GO 11888
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11864: LD_INT 21000
11866: PUSH
11867: LD_INT 1050
11869: NEG
11870: PPUSH
11871: LD_INT 1050
11873: PPUSH
11874: CALL_OW 12
11878: PLUS
11879: PPUSH
11880: CALL_OW 67
// PrepareReinforcements ;
11884: CALL 2250 0 0
// end ;
11888: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11889: LD_INT 22
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: LD_INT 13
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: IFFALSE 11934
11919: GO 11921
11921: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11922: LD_EXP 22
11926: PPUSH
11927: LD_STRING DG-Lab-1
11929: PPUSH
11930: CALL_OW 88
// end ;
11934: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11935: LD_INT 5
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 321
11945: PUSH
11946: LD_INT 2
11948: EQUAL
11949: PUSH
11950: LD_EXP 22
11954: PPUSH
11955: CALL_OW 302
11959: AND
11960: IFFALSE 12021
11962: GO 11964
11964: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11965: LD_EXP 22
11969: PPUSH
11970: LD_STRING DG-Stim-1
11972: PPUSH
11973: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11977: LD_EXP 21
11981: PPUSH
11982: LD_STRING DH-Stim-2
11984: PPUSH
11985: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11989: LD_EXP 22
11993: PPUSH
11994: LD_STRING DG-Stim-3
11996: PPUSH
11997: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12001: LD_EXP 21
12005: PPUSH
12006: LD_STRING DH-Stim-4
12008: PPUSH
12009: CALL_OW 88
// drugsResearched := true ;
12013: LD_ADDR_EXP 11
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// end ;
12021: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12022: LD_EXP 11
12026: IFFALSE 12338
12028: GO 12030
12030: DISABLE
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
12035: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12036: LD_ADDR_VAR 0 2
12040: PUSH
12041: LD_EXP 21
12045: PUSH
12046: LD_EXP 22
12050: PUSH
12051: LD_EXP 30
12055: PUSH
12056: LD_EXP 28
12060: PUSH
12061: LD_EXP 26
12065: PUSH
12066: LD_EXP 27
12070: PUSH
12071: LD_EXP 32
12075: PUSH
12076: LD_EXP 25
12080: PUSH
12081: LD_EXP 23
12085: PUSH
12086: LD_EXP 24
12090: PUSH
12091: LD_EXP 33
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_STRING H
12116: PUSH
12117: LD_STRING G
12119: PUSH
12120: LD_STRING O
12122: PUSH
12123: LD_STRING Mar
12125: PUSH
12126: LD_STRING K
12128: PUSH
12129: LD_STRING S
12131: PUSH
12132: LD_STRING Ks
12134: PUSH
12135: LD_STRING Kam
12137: PUSH
12138: LD_STRING M
12140: PUSH
12141: LD_STRING I
12143: PUSH
12144: LD_STRING A
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12160: LD_INT 35
12162: PPUSH
12163: CALL_OW 67
// for i := tmp downto 1 do
12167: LD_ADDR_VAR 0 1
12171: PUSH
12172: DOUBLE
12173: LD_VAR 0 2
12177: INC
12178: ST_TO_ADDR
12179: LD_INT 1
12181: PUSH
12182: FOR_DOWNTO
12183: IFFALSE 12329
// if GetLives ( tmp [ i ] ) < 250 then
12185: LD_VAR 0 2
12189: PUSH
12190: LD_VAR 0 1
12194: ARRAY
12195: PPUSH
12196: CALL_OW 256
12200: PUSH
12201: LD_INT 250
12203: LESS
12204: IFFALSE 12327
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12206: LD_ADDR_EXP 19
12210: PUSH
12211: LD_EXP 19
12215: PUSH
12216: LD_INT 1
12218: PLUS
12219: ST_TO_ADDR
// DialogueOn ;
12220: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12224: LD_VAR 0 2
12228: PUSH
12229: LD_VAR 0 1
12233: ARRAY
12234: PPUSH
12235: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12239: LD_VAR 0 2
12243: PUSH
12244: LD_VAR 0 1
12248: ARRAY
12249: PPUSH
12250: LD_STRING D
12252: PUSH
12253: LD_VAR 0 3
12257: PUSH
12258: LD_VAR 0 1
12262: ARRAY
12263: STR
12264: PUSH
12265: LD_STRING -Stim-a-1
12267: STR
12268: PPUSH
12269: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: CALL_OW 3
12292: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12293: LD_ADDR_VAR 0 3
12297: PUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 3
12312: ST_TO_ADDR
// drugsTested := true ;
12313: LD_ADDR_EXP 6
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// DialogueOff ;
12321: CALL_OW 7
// break ;
12325: GO 12329
// end ;
12327: GO 12182
12329: POP
12330: POP
// until not tmp ;
12331: LD_VAR 0 2
12335: NOT
12336: IFFALSE 12160
// end ;
12338: PPOPN 3
12340: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12341: LD_INT 22
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 34
12353: PUSH
12354: LD_INT 31
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 33
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 69
12398: AND
12399: IFFALSE 12412
12401: GO 12403
12403: DISABLE
// remoteControlConstructed := true ;
12404: LD_ADDR_EXP 12
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
12412: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12413: LD_EXP 12
12417: IFFALSE 12717
12419: GO 12421
12421: DISABLE
12422: LD_INT 0
12424: PPUSH
12425: PPUSH
12426: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_EXP 21
12436: PUSH
12437: LD_EXP 22
12441: PUSH
12442: LD_EXP 30
12446: PUSH
12447: LD_EXP 28
12451: PUSH
12452: LD_EXP 26
12456: PUSH
12457: LD_EXP 27
12461: PUSH
12462: LD_EXP 32
12466: PUSH
12467: LD_EXP 25
12471: PUSH
12472: LD_EXP 23
12476: PUSH
12477: LD_EXP 24
12481: PUSH
12482: LD_EXP 33
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12500: LD_ADDR_VAR 0 3
12504: PUSH
12505: LD_STRING H
12507: PUSH
12508: LD_STRING G
12510: PUSH
12511: LD_STRING O
12513: PUSH
12514: LD_STRING Mar
12516: PUSH
12517: LD_STRING K
12519: PUSH
12520: LD_STRING S
12522: PUSH
12523: LD_STRING Ks
12525: PUSH
12526: LD_STRING Kam
12528: PUSH
12529: LD_STRING M
12531: PUSH
12532: LD_STRING I
12534: PUSH
12535: LD_STRING A
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12551: LD_INT 35
12553: PPUSH
12554: CALL_OW 67
// for i := tmp downto 1 do
12558: LD_ADDR_VAR 0 1
12562: PUSH
12563: DOUBLE
12564: LD_VAR 0 2
12568: INC
12569: ST_TO_ADDR
12570: LD_INT 1
12572: PUSH
12573: FOR_DOWNTO
12574: IFFALSE 12708
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12576: LD_VAR 0 2
12580: PUSH
12581: LD_VAR 0 1
12585: ARRAY
12586: PPUSH
12587: CALL_OW 257
12591: PUSH
12592: LD_INT 3
12594: EQUAL
12595: PUSH
12596: LD_VAR 0 2
12600: PUSH
12601: LD_VAR 0 1
12605: ARRAY
12606: PPUSH
12607: CALL_OW 432
12611: AND
12612: IFFALSE 12706
// begin DialogueOn ;
12614: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12618: LD_VAR 0 2
12622: PUSH
12623: LD_VAR 0 1
12627: ARRAY
12628: PPUSH
12629: LD_STRING D
12631: PUSH
12632: LD_VAR 0 3
12636: PUSH
12637: LD_VAR 0 1
12641: ARRAY
12642: STR
12643: PUSH
12644: LD_STRING -RC-a-1
12646: STR
12647: PPUSH
12648: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12652: LD_ADDR_VAR 0 2
12656: PUSH
12657: LD_VAR 0 2
12661: PPUSH
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 3
12671: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 3
12691: ST_TO_ADDR
// DialogueOff ;
12692: CALL_OW 7
// remoteControlTested := true ;
12696: LD_ADDR_EXP 7
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// break ;
12704: GO 12708
// end ;
12706: GO 12573
12708: POP
12709: POP
// until not tmp ;
12710: LD_VAR 0 2
12714: NOT
12715: IFFALSE 12551
// end ;
12717: PPOPN 3
12719: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12720: LD_EXP 7
12724: PUSH
12725: LD_EXP 28
12729: PPUSH
12730: CALL_OW 302
12734: AND
12735: IFFALSE 12764
12737: GO 12739
12739: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12740: LD_EXP 28
12744: PPUSH
12745: LD_STRING DMar-RC-a-2
12747: PPUSH
12748: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12752: LD_EXP 28
12756: PPUSH
12757: LD_STRING DMar-RC-a-3
12759: PPUSH
12760: CALL_OW 88
// end ;
12764: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12765: LD_EXP 14
12769: PUSH
12770: LD_EXP 21
12774: PPUSH
12775: LD_EXP 33
12779: PPUSH
12780: CALL_OW 296
12784: PUSH
12785: LD_INT 8
12787: LESS
12788: AND
12789: PUSH
12790: LD_INT 2
12792: PPUSH
12793: CALL_OW 463
12797: NOT
12798: AND
12799: PUSH
12800: LD_EXP 33
12804: PPUSH
12805: CALL_OW 302
12809: AND
12810: PUSH
12811: LD_EXP 21
12815: PPUSH
12816: CALL_OW 302
12820: AND
12821: IFFALSE 12999
12823: GO 12825
12825: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12826: LD_EXP 33
12830: PPUSH
12831: CALL_OW 310
12835: NOT
12836: IFFALSE 12852
// ComTurnUnit ( Aviradze , Heike ) ;
12838: LD_EXP 33
12842: PPUSH
12843: LD_EXP 21
12847: PPUSH
12848: CALL_OW 119
// if not IsInUnit ( Heike ) then
12852: LD_EXP 21
12856: PPUSH
12857: CALL_OW 310
12861: NOT
12862: IFFALSE 12878
// ComTurnUnit ( Heike , Aviradze ) ;
12864: LD_EXP 21
12868: PPUSH
12869: LD_EXP 33
12873: PPUSH
12874: CALL_OW 119
// wait ( 0 0$1 ) ;
12878: LD_INT 35
12880: PPUSH
12881: CALL_OW 67
// DialogueOn ;
12885: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12889: LD_EXP 33
12893: PPUSH
12894: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12898: LD_EXP 21
12902: PPUSH
12903: LD_STRING DH-Beria-1
12905: PPUSH
12906: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12910: LD_EXP 33
12914: PPUSH
12915: LD_STRING DA-Beria-2
12917: PPUSH
12918: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12922: LD_EXP 21
12926: PPUSH
12927: LD_STRING DH-Beria-3
12929: PPUSH
12930: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12934: LD_EXP 33
12938: PPUSH
12939: LD_STRING DA-Beria-4
12941: PPUSH
12942: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12946: LD_EXP 33
12950: PPUSH
12951: LD_STRING DA-Beria-5
12953: PPUSH
12954: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12958: LD_EXP 33
12962: PPUSH
12963: LD_STRING DA-Beria-6
12965: PPUSH
12966: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12970: LD_EXP 21
12974: PPUSH
12975: LD_STRING DA-Beria-7
12977: PPUSH
12978: CALL_OW 88
// DialogueOff ;
12982: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12986: LD_INT 52
12988: PPUSH
12989: LD_INT 2
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// end ;
12999: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13000: LD_EXP 26
13004: PPUSH
13005: CALL_OW 300
13009: PUSH
13010: LD_EXP 26
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 10
13022: LESS
13023: AND
13024: IFFALSE 13061
13026: GO 13028
13028: DISABLE
// begin DialogueOn ;
13029: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13033: LD_EXP 26
13037: PPUSH
13038: LD_STRING DK-Kdeath-1
13040: PPUSH
13041: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13045: LD_EXP 21
13049: PPUSH
13050: LD_STRING DH-Kdeath-2
13052: PPUSH
13053: CALL_OW 88
// DialogueOff ;
13057: CALL_OW 7
// end ;
13061: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13062: LD_INT 2
13064: PPUSH
13065: LD_EXP 39
13069: PPUSH
13070: CALL 1374 0 2
13074: IFFALSE 13091
13076: GO 13078
13078: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13079: LD_EXP 21
13083: PPUSH
13084: LD_STRING DH-Obj-1
13086: PPUSH
13087: CALL_OW 88
13091: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13092: LD_INT 2
13094: PPUSH
13095: LD_EXP 40
13099: PPUSH
13100: CALL 1374 0 2
13104: IFFALSE 13121
13106: GO 13108
13108: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13109: LD_EXP 21
13113: PPUSH
13114: LD_STRING DH-Obj-a-1
13116: PPUSH
13117: CALL_OW 88
13121: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13122: LD_EXP 10
13126: PUSH
13127: LD_OWVAR 1
13131: PUSH
13132: LD_INT 14700
13134: PUSH
13135: LD_INT 13650
13137: PUSH
13138: LD_INT 12600
13140: PUSH
13141: LD_INT 11550
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_OWVAR 67
13154: ARRAY
13155: GREATEREQUAL
13156: OR
13157: IFFALSE 13185
13159: GO 13161
13161: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13162: LD_INT 4200
13164: PPUSH
13165: LD_INT 5250
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: CALL_OW 67
// convoyStarted := true ;
13177: LD_ADDR_EXP 17
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// end ;
13185: END
// every 0 0$1 trigger convoyStarted do
13186: LD_EXP 17
13190: IFFALSE 13274
13192: GO 13194
13194: DISABLE
// begin DialogueOn ;
13195: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13199: LD_EXP 29
13203: PPUSH
13204: LD_STRING DShar-Convoy-1
13206: PPUSH
13207: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13211: LD_EXP 21
13215: PPUSH
13216: LD_STRING DH-Convoy-2
13218: PPUSH
13219: CALL_OW 88
// DialogueOff ;
13223: CALL_OW 7
// PrepareConvoy ;
13227: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13231: LD_INT 5250
13233: PPUSH
13234: LD_INT 11550
13236: PPUSH
13237: CALL_OW 12
13241: PPUSH
13242: CALL_OW 67
// PrepareConvoy ;
13246: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13250: LD_ADDR_EXP 16
13254: PUSH
13255: LD_EXP 16
13259: PUSH
13260: LD_INT 1
13262: MINUS
13263: ST_TO_ADDR
// until convoyCounter <= 0 ;
13264: LD_EXP 16
13268: PUSH
13269: LD_INT 0
13271: LESSEQUAL
13272: IFFALSE 13231
// end ;
13274: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13275: LD_EXP 15
13279: PUSH
13280: LD_INT 10
13282: GREATEREQUAL
13283: IFFALSE 13300
13285: GO 13287
13287: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13288: LD_EXP 31
13292: PPUSH
13293: LD_STRING DOm-Fail-1
13295: PPUSH
13296: CALL_OW 94
13300: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13301: LD_EXP 39
13305: NOT
13306: PUSH
13307: LD_EXP 40
13311: NOT
13312: AND
13313: IFFALSE 13325
13315: GO 13317
13317: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13318: LD_STRING RaiderDone
13320: PPUSH
13321: CALL_OW 337
13325: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13326: LD_INT 22
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 33
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 69
13354: PUSH
13355: LD_INT 3
13357: GREATEREQUAL
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 34
13371: PUSH
13372: LD_INT 31
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: PUSH
13388: LD_INT 2
13390: GREATEREQUAL
13391: AND
13392: IFFALSE 13404
13394: GO 13396
13396: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13397: LD_STRING RemoteControlDone
13399: PPUSH
13400: CALL_OW 337
13404: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13405: LD_EXP 16
13409: PUSH
13410: LD_INT 1
13412: LESS
13413: PUSH
13414: LD_EXP 41
13418: PPUSH
13419: LD_INT 52
13421: PUSH
13422: EMPTY
13423: LIST
13424: PUSH
13425: LD_INT 21
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 72
13443: NOT
13444: AND
13445: PUSH
13446: LD_OWVAR 1
13450: PUSH
13451: LD_INT 126000
13453: GREATEREQUAL
13454: OR
13455: IFFALSE 14276
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13463: LD_STRING ReinforcementsDone
13465: PPUSH
13466: CALL_OW 337
// music_class := music_victory ;
13470: LD_ADDR_OWVAR 72
13474: PUSH
13475: LD_INT 4
13477: ST_TO_ADDR
// InGameOn ;
13478: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13482: LD_EXP 21
13486: PPUSH
13487: LD_STRING DH-end-1
13489: PPUSH
13490: CALL_OW 88
// wait ( 0 0$2 ) ;
13494: LD_INT 70
13496: PPUSH
13497: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13501: LD_EXP 29
13505: PPUSH
13506: LD_STRING DShar-end-2
13508: PPUSH
13509: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13513: LD_EXP 39
13517: NOT
13518: PUSH
13519: LD_EXP 40
13523: NOT
13524: AND
13525: IFFALSE 13541
// begin Say ( Heike , DH-end-3 ) ;
13527: LD_EXP 21
13531: PPUSH
13532: LD_STRING DH-end-3
13534: PPUSH
13535: CALL_OW 88
// end else
13539: GO 13638
// begin Say ( Heike , DH-end-a-3 ) ;
13541: LD_EXP 21
13545: PPUSH
13546: LD_STRING DH-end-a-3
13548: PPUSH
13549: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13553: LD_EXP 29
13557: PPUSH
13558: LD_STRING DShar-end-a-4
13560: PPUSH
13561: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13565: LD_EXP 21
13569: PPUSH
13570: LD_STRING DH-end-a-5
13572: PPUSH
13573: CALL_OW 88
// InGameOff ;
13577: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13581: LD_INT 35
13583: PPUSH
13584: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13588: LD_INT 22
13590: PUSH
13591: LD_INT 3
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: PUSH
13617: LD_INT 0
13619: EQUAL
13620: IFFALSE 13581
// InGameOn ;
13622: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13626: LD_EXP 21
13630: PPUSH
13631: LD_STRING DH-end-a-6
13633: PPUSH
13634: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13638: LD_EXP 29
13642: PPUSH
13643: LD_STRING DShar-end-3
13645: PPUSH
13646: CALL_OW 94
// if not flamethrowerBuilt then
13650: LD_EXP 20
13654: NOT
13655: IFFALSE 13664
// SetAchievement ( ACH_FIRE ) ;
13657: LD_STRING ACH_FIRE
13659: PPUSH
13660: CALL_OW 543
// if drugsTested then
13664: LD_EXP 6
13668: IFFALSE 13682
// AddMedal ( med1 , 1 ) else
13670: LD_STRING med1
13672: PPUSH
13673: LD_INT 1
13675: PPUSH
13676: CALL_OW 101
13680: GO 13722
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13682: LD_INT 5
13684: PPUSH
13685: LD_INT 2
13687: PPUSH
13688: CALL_OW 321
13692: PUSH
13693: LD_INT 2
13695: EQUAL
13696: IFFALSE 13711
// AddMedal ( med1 , - 1 ) else
13698: LD_STRING med1
13700: PPUSH
13701: LD_INT 1
13703: NEG
13704: PPUSH
13705: CALL_OW 101
13709: GO 13722
// AddMedal ( med1 , - 2 ) ;
13711: LD_STRING med1
13713: PPUSH
13714: LD_INT 2
13716: NEG
13717: PPUSH
13718: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13722: LD_INT 22
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 33
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PPUSH
13746: CALL_OW 69
13750: PUSH
13751: LD_INT 3
13753: GREATEREQUAL
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 34
13767: PUSH
13768: LD_INT 31
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: PUSH
13784: LD_INT 1
13786: GREATEREQUAL
13787: AND
13788: IFFALSE 13802
// AddMedal ( med2 , 1 ) else
13790: LD_STRING med2
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 101
13800: GO 13813
// AddMedal ( med2 , - 1 ) ;
13802: LD_STRING med2
13804: PPUSH
13805: LD_INT 1
13807: NEG
13808: PPUSH
13809: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13813: LD_EXP 15
13817: PUSH
13818: LD_INT 10
13820: PUSH
13821: LD_INT 8
13823: PUSH
13824: LD_INT 6
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: LD_OWVAR 67
13840: ARRAY
13841: LESS
13842: IFFALSE 13856
// AddMedal ( med3 , 1 ) else
13844: LD_STRING med3
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 101
13854: GO 13867
// AddMedal ( med3 , - 1 ) ;
13856: LD_STRING med3
13858: PPUSH
13859: LD_INT 1
13861: NEG
13862: PPUSH
13863: CALL_OW 101
// GiveMedals ( MAIN ) ;
13867: LD_STRING MAIN
13869: PPUSH
13870: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13874: LD_INT 22
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 23
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 21
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13918: LD_EXP 15
13922: PPUSH
13923: LD_STRING 05_ConvoySavedCounter
13925: PPUSH
13926: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13930: LD_EXP 13
13934: PPUSH
13935: LD_STRING 05_Radar
13937: PPUSH
13938: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13942: LD_EXP 6
13946: PPUSH
13947: LD_STRING 05_DrugsTested
13949: PPUSH
13950: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13954: LD_INT 22
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 33
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 3
13985: GREATEREQUAL
13986: PUSH
13987: LD_INT 22
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 34
13999: PUSH
14000: LD_INT 31
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: PUSH
14016: LD_INT 2
14018: GREATEREQUAL
14019: AND
14020: PPUSH
14021: LD_STRING 05_RemoteControl
14023: PPUSH
14024: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14028: LD_EXP 21
14032: PPUSH
14033: LD_STRING 05_Heike
14035: PPUSH
14036: CALL_OW 38
// if Aviradze then
14040: LD_EXP 33
14044: IFFALSE 14058
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14046: LD_EXP 33
14050: PPUSH
14051: LD_STRING 05_Aviradze
14053: PPUSH
14054: CALL_OW 38
// if Ibrahim then
14058: LD_EXP 24
14062: IFFALSE 14076
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14064: LD_EXP 24
14068: PPUSH
14069: LD_STRING 05_Ibrahim
14071: PPUSH
14072: CALL_OW 38
// if Kamil then
14076: LD_EXP 25
14080: IFFALSE 14094
// SaveCharacters ( Kamil , 05_Kamil ) ;
14082: LD_EXP 25
14086: PPUSH
14087: LD_STRING 05_Kamil
14089: PPUSH
14090: CALL_OW 38
// if Sophia then
14094: LD_EXP 27
14098: IFFALSE 14112
// SaveCharacters ( Sophia , 05_Sophia ) ;
14100: LD_EXP 27
14104: PPUSH
14105: LD_STRING 05_Sophia
14107: PPUSH
14108: CALL_OW 38
// if Kaia then
14112: LD_EXP 26
14116: IFFALSE 14130
// SaveCharacters ( Kaia , 05_Kaia ) ;
14118: LD_EXP 26
14122: PPUSH
14123: LD_STRING 05_Kaia
14125: PPUSH
14126: CALL_OW 38
// if Givi then
14130: LD_EXP 22
14134: IFFALSE 14148
// SaveCharacters ( Givi , 05_Givi ) ;
14136: LD_EXP 22
14140: PPUSH
14141: LD_STRING 05_Givi
14143: PPUSH
14144: CALL_OW 38
// if Mike then
14148: LD_EXP 23
14152: IFFALSE 14166
// SaveCharacters ( Mike , 05_Mike ) ;
14154: LD_EXP 23
14158: PPUSH
14159: LD_STRING 05_Mike
14161: PPUSH
14162: CALL_OW 38
// if Markov then
14166: LD_EXP 28
14170: IFFALSE 14184
// SaveCharacters ( Markov , 05_Markov ) ;
14172: LD_EXP 28
14176: PPUSH
14177: LD_STRING 05_Markov
14179: PPUSH
14180: CALL_OW 38
// if Kurt then
14184: LD_EXP 32
14188: IFFALSE 14202
// SaveCharacters ( Kurt , 05_Kurt ) ;
14190: LD_EXP 32
14194: PPUSH
14195: LD_STRING 05_Kurt
14197: PPUSH
14198: CALL_OW 38
// if heikeSecondSquad then
14202: LD_EXP 34
14206: IFFALSE 14220
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14208: LD_EXP 34
14212: PPUSH
14213: LD_STRING 05_others
14215: PPUSH
14216: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14220: LD_ADDR_VAR 0 1
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 0
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if tmp then
14254: LD_VAR 0 1
14258: IFFALSE 14272
// SaveCharacters ( tmp , 05_apes ) ;
14260: LD_VAR 0 1
14264: PPUSH
14265: LD_STRING 05_apes
14267: PPUSH
14268: CALL_OW 38
// YouWin ;
14272: CALL_OW 103
// end ; end_of_file
14276: PPOPN 1
14278: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14279: LD_EXP 9
14283: PUSH
14284: LD_INT 13
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 287
14294: PUSH
14295: LD_INT 25
14297: LESS
14298: AND
14299: IFFALSE 14326
14301: GO 14303
14303: DISABLE
// begin enable ;
14304: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14305: LD_INT 1
14307: PPUSH
14308: LD_INT 5
14310: PPUSH
14311: CALL_OW 12
14315: PPUSH
14316: LD_INT 13
14318: PPUSH
14319: LD_INT 1
14321: PPUSH
14322: CALL_OW 55
// end ; end_of_file
14326: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14327: LD_INT 0
14329: PPUSH
// ar_miner := 81 ;
14330: LD_ADDR_EXP 51
14334: PUSH
14335: LD_INT 81
14337: ST_TO_ADDR
// ar_crane := 88 ;
14338: LD_ADDR_EXP 50
14342: PUSH
14343: LD_INT 88
14345: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14346: LD_ADDR_EXP 45
14350: PUSH
14351: LD_INT 89
14353: ST_TO_ADDR
// us_hack := 99 ;
14354: LD_ADDR_EXP 46
14358: PUSH
14359: LD_INT 99
14361: ST_TO_ADDR
// us_artillery := 97 ;
14362: LD_ADDR_EXP 47
14366: PUSH
14367: LD_INT 97
14369: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14370: LD_ADDR_EXP 48
14374: PUSH
14375: LD_INT 91
14377: ST_TO_ADDR
// ar_mortar := 92 ;
14378: LD_ADDR_EXP 49
14382: PUSH
14383: LD_INT 92
14385: ST_TO_ADDR
// ru_radar := 98 ;
14386: LD_ADDR_EXP 44
14390: PUSH
14391: LD_INT 98
14393: ST_TO_ADDR
// tech_Artillery := 80 ;
14394: LD_ADDR_EXP 52
14398: PUSH
14399: LD_INT 80
14401: ST_TO_ADDR
// tech_RadMat := 81 ;
14402: LD_ADDR_EXP 53
14406: PUSH
14407: LD_INT 81
14409: ST_TO_ADDR
// tech_BasicTools := 82 ;
14410: LD_ADDR_EXP 54
14414: PUSH
14415: LD_INT 82
14417: ST_TO_ADDR
// tech_Cargo := 83 ;
14418: LD_ADDR_EXP 55
14422: PUSH
14423: LD_INT 83
14425: ST_TO_ADDR
// tech_Track := 84 ;
14426: LD_ADDR_EXP 56
14430: PUSH
14431: LD_INT 84
14433: ST_TO_ADDR
// tech_Crane := 85 ;
14434: LD_ADDR_EXP 57
14438: PUSH
14439: LD_INT 85
14441: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14442: LD_ADDR_EXP 58
14446: PUSH
14447: LD_INT 86
14449: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14450: LD_ADDR_EXP 59
14454: PUSH
14455: LD_INT 87
14457: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14458: LD_ADDR_EXP 60
14462: PUSH
14463: LD_INT 88
14465: ST_TO_ADDR
// class_mastodont := 31 ;
14466: LD_ADDR_EXP 61
14470: PUSH
14471: LD_INT 31
14473: ST_TO_ADDR
// class_horse := 21 ;
14474: LD_ADDR_EXP 62
14478: PUSH
14479: LD_INT 21
14481: ST_TO_ADDR
// end ;
14482: LD_VAR 0 1
14486: RET
// every 1 do
14487: GO 14489
14489: DISABLE
// InitGlobalVariables ; end_of_file
14490: CALL 14327 0 0
14494: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 264
14510: PUSH
14511: LD_EXP 48
14515: EQUAL
14516: IFFALSE 14588
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14518: LD_INT 68
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 255
14530: PPUSH
14531: CALL_OW 321
14535: PUSH
14536: LD_INT 2
14538: EQUAL
14539: IFFALSE 14551
// eff := 70 else
14541: LD_ADDR_VAR 0 4
14545: PUSH
14546: LD_INT 70
14548: ST_TO_ADDR
14549: GO 14559
// eff := 30 ;
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_INT 30
14558: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 250
14568: PPUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 251
14578: PPUSH
14579: LD_VAR 0 4
14583: PPUSH
14584: CALL_OW 495
// end ; end ;
14588: LD_VAR 0 2
14592: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14593: LD_INT 0
14595: PPUSH
// end ;
14596: LD_VAR 0 4
14600: RET
// export function SOS_Command ( cmd ) ; begin
14601: LD_INT 0
14603: PPUSH
// end ;
14604: LD_VAR 0 2
14608: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14609: LD_INT 0
14611: PPUSH
// end ;
14612: LD_VAR 0 6
14616: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14617: LD_INT 0
14619: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14620: LD_VAR 0 1
14624: PUSH
14625: LD_INT 250
14627: EQUAL
14628: PUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: CALL_OW 264
14638: PUSH
14639: LD_EXP 51
14643: EQUAL
14644: AND
14645: IFFALSE 14666
// MinerPlaceMine ( unit , x , y ) ;
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_VAR 0 4
14656: PPUSH
14657: LD_VAR 0 5
14661: PPUSH
14662: CALL 17015 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14666: LD_VAR 0 1
14670: PUSH
14671: LD_INT 251
14673: EQUAL
14674: PUSH
14675: LD_VAR 0 2
14679: PPUSH
14680: CALL_OW 264
14684: PUSH
14685: LD_EXP 51
14689: EQUAL
14690: AND
14691: IFFALSE 14712
// MinerDetonateMine ( unit , x , y ) ;
14693: LD_VAR 0 2
14697: PPUSH
14698: LD_VAR 0 4
14702: PPUSH
14703: LD_VAR 0 5
14707: PPUSH
14708: CALL 17292 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14712: LD_VAR 0 1
14716: PUSH
14717: LD_INT 252
14719: EQUAL
14720: PUSH
14721: LD_VAR 0 2
14725: PPUSH
14726: CALL_OW 264
14730: PUSH
14731: LD_EXP 51
14735: EQUAL
14736: AND
14737: IFFALSE 14758
// MinerCreateMinefield ( unit , x , y ) ;
14739: LD_VAR 0 2
14743: PPUSH
14744: LD_VAR 0 4
14748: PPUSH
14749: LD_VAR 0 5
14753: PPUSH
14754: CALL 17709 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14758: LD_VAR 0 1
14762: PUSH
14763: LD_INT 253
14765: EQUAL
14766: PUSH
14767: LD_VAR 0 2
14771: PPUSH
14772: CALL_OW 257
14776: PUSH
14777: LD_INT 5
14779: EQUAL
14780: AND
14781: IFFALSE 14802
// ComBinocular ( unit , x , y ) ;
14783: LD_VAR 0 2
14787: PPUSH
14788: LD_VAR 0 4
14792: PPUSH
14793: LD_VAR 0 5
14797: PPUSH
14798: CALL 18080 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14802: LD_VAR 0 1
14806: PUSH
14807: LD_INT 254
14809: EQUAL
14810: PUSH
14811: LD_VAR 0 2
14815: PPUSH
14816: CALL_OW 264
14820: PUSH
14821: LD_EXP 46
14825: EQUAL
14826: AND
14827: PUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: CALL_OW 263
14837: PUSH
14838: LD_INT 3
14840: EQUAL
14841: AND
14842: IFFALSE 14858
// HackDestroyVehicle ( unit , selectedUnit ) ;
14844: LD_VAR 0 2
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL 16375 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14858: LD_VAR 0 1
14862: PUSH
14863: LD_INT 255
14865: EQUAL
14866: PUSH
14867: LD_VAR 0 2
14871: PPUSH
14872: CALL_OW 264
14876: PUSH
14877: LD_INT 14
14879: PUSH
14880: LD_INT 53
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: IN
14887: AND
14888: PUSH
14889: LD_VAR 0 4
14893: PPUSH
14894: LD_VAR 0 5
14898: PPUSH
14899: CALL_OW 488
14903: AND
14904: IFFALSE 14928
// CutTreeXYR ( unit , x , y , 12 ) ;
14906: LD_VAR 0 2
14910: PPUSH
14911: LD_VAR 0 4
14915: PPUSH
14916: LD_VAR 0 5
14920: PPUSH
14921: LD_INT 12
14923: PPUSH
14924: CALL 14941 0 4
// end ;
14928: LD_VAR 0 6
14932: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
14933: LD_INT 0
14935: PPUSH
// end ;
14936: LD_VAR 0 4
14940: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14941: LD_INT 0
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
14951: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14952: LD_VAR 0 1
14956: NOT
14957: PUSH
14958: LD_VAR 0 2
14962: PPUSH
14963: LD_VAR 0 3
14967: PPUSH
14968: CALL_OW 488
14972: NOT
14973: OR
14974: PUSH
14975: LD_VAR 0 4
14979: NOT
14980: OR
14981: IFFALSE 14985
// exit ;
14983: GO 15325
// list := [ ] ;
14985: LD_ADDR_VAR 0 13
14989: PUSH
14990: EMPTY
14991: ST_TO_ADDR
// if x - r < 0 then
14992: LD_VAR 0 2
14996: PUSH
14997: LD_VAR 0 4
15001: MINUS
15002: PUSH
15003: LD_INT 0
15005: LESS
15006: IFFALSE 15018
// min_x := 0 else
15008: LD_ADDR_VAR 0 7
15012: PUSH
15013: LD_INT 0
15015: ST_TO_ADDR
15016: GO 15034
// min_x := x - r ;
15018: LD_ADDR_VAR 0 7
15022: PUSH
15023: LD_VAR 0 2
15027: PUSH
15028: LD_VAR 0 4
15032: MINUS
15033: ST_TO_ADDR
// if y - r < 0 then
15034: LD_VAR 0 3
15038: PUSH
15039: LD_VAR 0 4
15043: MINUS
15044: PUSH
15045: LD_INT 0
15047: LESS
15048: IFFALSE 15060
// min_y := 0 else
15050: LD_ADDR_VAR 0 8
15054: PUSH
15055: LD_INT 0
15057: ST_TO_ADDR
15058: GO 15076
// min_y := y - r ;
15060: LD_ADDR_VAR 0 8
15064: PUSH
15065: LD_VAR 0 3
15069: PUSH
15070: LD_VAR 0 4
15074: MINUS
15075: ST_TO_ADDR
// max_x := x + r ;
15076: LD_ADDR_VAR 0 9
15080: PUSH
15081: LD_VAR 0 2
15085: PUSH
15086: LD_VAR 0 4
15090: PLUS
15091: ST_TO_ADDR
// max_y := y + r ;
15092: LD_ADDR_VAR 0 10
15096: PUSH
15097: LD_VAR 0 3
15101: PUSH
15102: LD_VAR 0 4
15106: PLUS
15107: ST_TO_ADDR
// for _x = min_x to max_x do
15108: LD_ADDR_VAR 0 11
15112: PUSH
15113: DOUBLE
15114: LD_VAR 0 7
15118: DEC
15119: ST_TO_ADDR
15120: LD_VAR 0 9
15124: PUSH
15125: FOR_TO
15126: IFFALSE 15243
// for _y = min_y to max_y do
15128: LD_ADDR_VAR 0 12
15132: PUSH
15133: DOUBLE
15134: LD_VAR 0 8
15138: DEC
15139: ST_TO_ADDR
15140: LD_VAR 0 10
15144: PUSH
15145: FOR_TO
15146: IFFALSE 15239
// begin if not ValidHex ( _x , _y ) then
15148: LD_VAR 0 11
15152: PPUSH
15153: LD_VAR 0 12
15157: PPUSH
15158: CALL_OW 488
15162: NOT
15163: IFFALSE 15167
// continue ;
15165: GO 15145
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15167: LD_VAR 0 11
15171: PPUSH
15172: LD_VAR 0 12
15176: PPUSH
15177: CALL_OW 351
15181: PUSH
15182: LD_VAR 0 11
15186: PPUSH
15187: LD_VAR 0 12
15191: PPUSH
15192: CALL_OW 554
15196: AND
15197: IFFALSE 15237
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15199: LD_ADDR_VAR 0 13
15203: PUSH
15204: LD_VAR 0 13
15208: PPUSH
15209: LD_VAR 0 13
15213: PUSH
15214: LD_INT 1
15216: PLUS
15217: PPUSH
15218: LD_VAR 0 11
15222: PUSH
15223: LD_VAR 0 12
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PPUSH
15232: CALL_OW 2
15236: ST_TO_ADDR
// end ;
15237: GO 15145
15239: POP
15240: POP
15241: GO 15125
15243: POP
15244: POP
// if not list then
15245: LD_VAR 0 13
15249: NOT
15250: IFFALSE 15254
// exit ;
15252: GO 15325
// for i in list do
15254: LD_ADDR_VAR 0 6
15258: PUSH
15259: LD_VAR 0 13
15263: PUSH
15264: FOR_IN
15265: IFFALSE 15323
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_STRING M
15274: PUSH
15275: LD_VAR 0 6
15279: PUSH
15280: LD_INT 1
15282: ARRAY
15283: PUSH
15284: LD_VAR 0 6
15288: PUSH
15289: LD_INT 2
15291: ARRAY
15292: PUSH
15293: LD_INT 0
15295: PUSH
15296: LD_INT 0
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: PPUSH
15317: CALL_OW 447
15321: GO 15264
15323: POP
15324: POP
// end ;
15325: LD_VAR 0 5
15329: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15330: LD_EXP 65
15334: NOT
15335: IFFALSE 15385
15337: GO 15339
15339: DISABLE
// begin initHack := true ;
15340: LD_ADDR_EXP 65
15344: PUSH
15345: LD_INT 1
15347: ST_TO_ADDR
// hackTanks := [ ] ;
15348: LD_ADDR_EXP 66
15352: PUSH
15353: EMPTY
15354: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15355: LD_ADDR_EXP 67
15359: PUSH
15360: EMPTY
15361: ST_TO_ADDR
// hackLimit := 3 ;
15362: LD_ADDR_EXP 68
15366: PUSH
15367: LD_INT 3
15369: ST_TO_ADDR
// hackDist := 12 ;
15370: LD_ADDR_EXP 69
15374: PUSH
15375: LD_INT 12
15377: ST_TO_ADDR
// hackCounter := [ ] ;
15378: LD_ADDR_EXP 70
15382: PUSH
15383: EMPTY
15384: ST_TO_ADDR
// end ;
15385: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15386: LD_EXP 65
15390: PUSH
15391: LD_INT 34
15393: PUSH
15394: LD_EXP 46
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 69
15407: AND
15408: IFFALSE 15663
15410: GO 15412
15412: DISABLE
15413: LD_INT 0
15415: PPUSH
15416: PPUSH
// begin enable ;
15417: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15418: LD_ADDR_VAR 0 1
15422: PUSH
15423: LD_INT 34
15425: PUSH
15426: LD_EXP 46
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PPUSH
15435: CALL_OW 69
15439: PUSH
15440: FOR_IN
15441: IFFALSE 15661
// begin if not i in hackTanks then
15443: LD_VAR 0 1
15447: PUSH
15448: LD_EXP 66
15452: IN
15453: NOT
15454: IFFALSE 15537
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15456: LD_ADDR_EXP 66
15460: PUSH
15461: LD_EXP 66
15465: PPUSH
15466: LD_EXP 66
15470: PUSH
15471: LD_INT 1
15473: PLUS
15474: PPUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 1
15484: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15485: LD_ADDR_EXP 67
15489: PUSH
15490: LD_EXP 67
15494: PPUSH
15495: LD_EXP 67
15499: PUSH
15500: LD_INT 1
15502: PLUS
15503: PPUSH
15504: EMPTY
15505: PPUSH
15506: CALL_OW 1
15510: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15511: LD_ADDR_EXP 70
15515: PUSH
15516: LD_EXP 70
15520: PPUSH
15521: LD_EXP 70
15525: PUSH
15526: LD_INT 1
15528: PLUS
15529: PPUSH
15530: EMPTY
15531: PPUSH
15532: CALL_OW 1
15536: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15537: LD_VAR 0 1
15541: PPUSH
15542: CALL_OW 302
15546: NOT
15547: IFFALSE 15560
// begin HackUnlinkAll ( i ) ;
15549: LD_VAR 0 1
15553: PPUSH
15554: CALL 15666 0 1
// continue ;
15558: GO 15440
// end ; HackCheckCapturedStatus ( i ) ;
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL 16109 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15569: LD_ADDR_VAR 0 2
15573: PUSH
15574: LD_INT 81
15576: PUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 255
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 33
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 91
15603: PUSH
15604: LD_VAR 0 1
15608: PUSH
15609: LD_EXP 69
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 50
15621: PUSH
15622: EMPTY
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: ST_TO_ADDR
// if not tmp then
15636: LD_VAR 0 2
15640: NOT
15641: IFFALSE 15645
// continue ;
15643: GO 15440
// HackLink ( i , tmp ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_VAR 0 2
15654: PPUSH
15655: CALL 15802 0 2
// end ;
15659: GO 15440
15661: POP
15662: POP
// end ;
15663: PPOPN 2
15665: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15666: LD_INT 0
15668: PPUSH
15669: PPUSH
15670: PPUSH
// if not hack in hackTanks then
15671: LD_VAR 0 1
15675: PUSH
15676: LD_EXP 66
15680: IN
15681: NOT
15682: IFFALSE 15686
// exit ;
15684: GO 15797
// index := GetElementIndex ( hackTanks , hack ) ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_EXP 66
15695: PPUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL 37078 0 2
15705: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15706: LD_EXP 67
15710: PUSH
15711: LD_VAR 0 4
15715: ARRAY
15716: IFFALSE 15797
// begin for i in hackTanksCaptured [ index ] do
15718: LD_ADDR_VAR 0 3
15722: PUSH
15723: LD_EXP 67
15727: PUSH
15728: LD_VAR 0 4
15732: ARRAY
15733: PUSH
15734: FOR_IN
15735: IFFALSE 15761
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PPUSH
15755: CALL_OW 235
15759: GO 15734
15761: POP
15762: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15763: LD_ADDR_EXP 67
15767: PUSH
15768: LD_EXP 67
15772: PPUSH
15773: LD_VAR 0 4
15777: PPUSH
15778: EMPTY
15779: PPUSH
15780: CALL_OW 1
15784: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15785: LD_VAR 0 1
15789: PPUSH
15790: LD_INT 0
15792: PPUSH
15793: CALL_OW 505
// end ; end ;
15797: LD_VAR 0 2
15801: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
// if not hack in hackTanks or not vehicles then
15807: LD_VAR 0 1
15811: PUSH
15812: LD_EXP 66
15816: IN
15817: NOT
15818: PUSH
15819: LD_VAR 0 2
15823: NOT
15824: OR
15825: IFFALSE 15829
// exit ;
15827: GO 16104
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15829: LD_ADDR_VAR 0 2
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_INT 1
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL 37728 0 4
15854: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15855: LD_ADDR_VAR 0 5
15859: PUSH
15860: LD_EXP 66
15864: PPUSH
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL 37078 0 2
15874: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15875: LD_EXP 67
15879: PUSH
15880: LD_VAR 0 5
15884: ARRAY
15885: PUSH
15886: LD_EXP 68
15890: LESS
15891: IFFALSE 16080
// begin for i := 1 to vehicles do
15893: LD_ADDR_VAR 0 4
15897: PUSH
15898: DOUBLE
15899: LD_INT 1
15901: DEC
15902: ST_TO_ADDR
15903: LD_VAR 0 2
15907: PUSH
15908: FOR_TO
15909: IFFALSE 16078
// begin if hackTanksCaptured [ index ] = hackLimit then
15911: LD_EXP 67
15915: PUSH
15916: LD_VAR 0 5
15920: ARRAY
15921: PUSH
15922: LD_EXP 68
15926: EQUAL
15927: IFFALSE 15931
// break ;
15929: GO 16078
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15931: LD_ADDR_EXP 70
15935: PUSH
15936: LD_EXP 70
15940: PPUSH
15941: LD_VAR 0 5
15945: PPUSH
15946: LD_EXP 70
15950: PUSH
15951: LD_VAR 0 5
15955: ARRAY
15956: PUSH
15957: LD_INT 1
15959: PLUS
15960: PPUSH
15961: CALL_OW 1
15965: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15966: LD_ADDR_EXP 67
15970: PUSH
15971: LD_EXP 67
15975: PPUSH
15976: LD_VAR 0 5
15980: PUSH
15981: LD_EXP 67
15985: PUSH
15986: LD_VAR 0 5
15990: ARRAY
15991: PUSH
15992: LD_INT 1
15994: PLUS
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PPUSH
16000: LD_VAR 0 2
16004: PUSH
16005: LD_VAR 0 4
16009: ARRAY
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: LD_VAR 0 4
16020: ARRAY
16021: PPUSH
16022: CALL_OW 255
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL 37293 0 3
16035: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16036: LD_VAR 0 2
16040: PUSH
16041: LD_VAR 0 4
16045: ARRAY
16046: PPUSH
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PPUSH
16057: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16061: LD_VAR 0 2
16065: PUSH
16066: LD_VAR 0 4
16070: ARRAY
16071: PPUSH
16072: CALL_OW 141
// end ;
16076: GO 15908
16078: POP
16079: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16080: LD_VAR 0 1
16084: PPUSH
16085: LD_EXP 67
16089: PUSH
16090: LD_VAR 0 5
16094: ARRAY
16095: PUSH
16096: LD_INT 0
16098: PLUS
16099: PPUSH
16100: CALL_OW 505
// end ;
16104: LD_VAR 0 3
16108: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
// if not hack in hackTanks then
16115: LD_VAR 0 1
16119: PUSH
16120: LD_EXP 66
16124: IN
16125: NOT
16126: IFFALSE 16130
// exit ;
16128: GO 16370
// index := GetElementIndex ( hackTanks , hack ) ;
16130: LD_ADDR_VAR 0 4
16134: PUSH
16135: LD_EXP 66
16139: PPUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL 37078 0 2
16149: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: DOUBLE
16156: LD_EXP 67
16160: PUSH
16161: LD_VAR 0 4
16165: ARRAY
16166: INC
16167: ST_TO_ADDR
16168: LD_INT 1
16170: PUSH
16171: FOR_DOWNTO
16172: IFFALSE 16344
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16174: LD_ADDR_VAR 0 5
16178: PUSH
16179: LD_EXP 67
16183: PUSH
16184: LD_VAR 0 4
16188: ARRAY
16189: PUSH
16190: LD_VAR 0 3
16194: ARRAY
16195: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16196: LD_VAR 0 5
16200: PUSH
16201: LD_INT 1
16203: ARRAY
16204: PPUSH
16205: CALL_OW 302
16209: NOT
16210: PUSH
16211: LD_VAR 0 5
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 255
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 255
16234: NONEQUAL
16235: OR
16236: IFFALSE 16342
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16238: LD_VAR 0 5
16242: PUSH
16243: LD_INT 1
16245: ARRAY
16246: PPUSH
16247: CALL_OW 305
16251: PUSH
16252: LD_VAR 0 5
16256: PUSH
16257: LD_INT 1
16259: ARRAY
16260: PPUSH
16261: CALL_OW 255
16265: PUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 255
16275: EQUAL
16276: AND
16277: IFFALSE 16301
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16279: LD_VAR 0 5
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: PPUSH
16288: LD_VAR 0 5
16292: PUSH
16293: LD_INT 2
16295: ARRAY
16296: PPUSH
16297: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16301: LD_ADDR_EXP 67
16305: PUSH
16306: LD_EXP 67
16310: PPUSH
16311: LD_VAR 0 4
16315: PPUSH
16316: LD_EXP 67
16320: PUSH
16321: LD_VAR 0 4
16325: ARRAY
16326: PPUSH
16327: LD_VAR 0 3
16331: PPUSH
16332: CALL_OW 3
16336: PPUSH
16337: CALL_OW 1
16341: ST_TO_ADDR
// end ; end ;
16342: GO 16171
16344: POP
16345: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_EXP 67
16355: PUSH
16356: LD_VAR 0 4
16360: ARRAY
16361: PUSH
16362: LD_INT 0
16364: PLUS
16365: PPUSH
16366: CALL_OW 505
// end ;
16370: LD_VAR 0 2
16374: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16375: LD_INT 0
16377: PPUSH
16378: PPUSH
16379: PPUSH
16380: PPUSH
// if not hack in hackTanks then
16381: LD_VAR 0 1
16385: PUSH
16386: LD_EXP 66
16390: IN
16391: NOT
16392: IFFALSE 16396
// exit ;
16394: GO 16481
// index := GetElementIndex ( hackTanks , hack ) ;
16396: LD_ADDR_VAR 0 5
16400: PUSH
16401: LD_EXP 66
16405: PPUSH
16406: LD_VAR 0 1
16410: PPUSH
16411: CALL 37078 0 2
16415: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16416: LD_ADDR_VAR 0 4
16420: PUSH
16421: DOUBLE
16422: LD_INT 1
16424: DEC
16425: ST_TO_ADDR
16426: LD_EXP 67
16430: PUSH
16431: LD_VAR 0 5
16435: ARRAY
16436: PUSH
16437: FOR_TO
16438: IFFALSE 16479
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16440: LD_EXP 67
16444: PUSH
16445: LD_VAR 0 5
16449: ARRAY
16450: PUSH
16451: LD_VAR 0 4
16455: ARRAY
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: PUSH
16461: LD_VAR 0 2
16465: EQUAL
16466: IFFALSE 16477
// KillUnit ( vehicle ) ;
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL_OW 66
16477: GO 16437
16479: POP
16480: POP
// end ;
16481: LD_VAR 0 3
16485: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16486: LD_EXP 71
16490: NOT
16491: IFFALSE 16526
16493: GO 16495
16495: DISABLE
// begin initMiner := true ;
16496: LD_ADDR_EXP 71
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// minersList := [ ] ;
16504: LD_ADDR_EXP 72
16508: PUSH
16509: EMPTY
16510: ST_TO_ADDR
// minerMinesList := [ ] ;
16511: LD_ADDR_EXP 73
16515: PUSH
16516: EMPTY
16517: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16518: LD_ADDR_EXP 74
16522: PUSH
16523: LD_INT 5
16525: ST_TO_ADDR
// end ;
16526: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16527: LD_EXP 71
16531: PUSH
16532: LD_INT 34
16534: PUSH
16535: LD_EXP 51
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: AND
16549: IFFALSE 17012
16551: GO 16553
16553: DISABLE
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
// begin enable ;
16560: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16561: LD_ADDR_VAR 0 1
16565: PUSH
16566: LD_INT 34
16568: PUSH
16569: LD_EXP 51
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16656
// begin if not i in minersList then
16586: LD_VAR 0 1
16590: PUSH
16591: LD_EXP 72
16595: IN
16596: NOT
16597: IFFALSE 16654
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16599: LD_ADDR_EXP 72
16603: PUSH
16604: LD_EXP 72
16608: PPUSH
16609: LD_EXP 72
16613: PUSH
16614: LD_INT 1
16616: PLUS
16617: PPUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 1
16627: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16628: LD_ADDR_EXP 73
16632: PUSH
16633: LD_EXP 73
16637: PPUSH
16638: LD_EXP 73
16642: PUSH
16643: LD_INT 1
16645: PLUS
16646: PPUSH
16647: EMPTY
16648: PPUSH
16649: CALL_OW 1
16653: ST_TO_ADDR
// end end ;
16654: GO 16583
16656: POP
16657: POP
// for i := minerMinesList downto 1 do
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: DOUBLE
16664: LD_EXP 73
16668: INC
16669: ST_TO_ADDR
16670: LD_INT 1
16672: PUSH
16673: FOR_DOWNTO
16674: IFFALSE 17010
// begin if IsLive ( minersList [ i ] ) then
16676: LD_EXP 72
16680: PUSH
16681: LD_VAR 0 1
16685: ARRAY
16686: PPUSH
16687: CALL_OW 300
16691: IFFALSE 16719
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16693: LD_EXP 72
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: PPUSH
16704: LD_EXP 73
16708: PUSH
16709: LD_VAR 0 1
16713: ARRAY
16714: PPUSH
16715: CALL_OW 505
// if not minerMinesList [ i ] then
16719: LD_EXP 73
16723: PUSH
16724: LD_VAR 0 1
16728: ARRAY
16729: NOT
16730: IFFALSE 16734
// continue ;
16732: GO 16673
// for j := minerMinesList [ i ] downto 1 do
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: DOUBLE
16740: LD_EXP 73
16744: PUSH
16745: LD_VAR 0 1
16749: ARRAY
16750: INC
16751: ST_TO_ADDR
16752: LD_INT 1
16754: PUSH
16755: FOR_DOWNTO
16756: IFFALSE 17006
// begin side := GetSide ( minersList [ i ] ) ;
16758: LD_ADDR_VAR 0 3
16762: PUSH
16763: LD_EXP 72
16767: PUSH
16768: LD_VAR 0 1
16772: ARRAY
16773: PPUSH
16774: CALL_OW 255
16778: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16779: LD_ADDR_VAR 0 4
16783: PUSH
16784: LD_EXP 73
16788: PUSH
16789: LD_VAR 0 1
16793: ARRAY
16794: PUSH
16795: LD_VAR 0 2
16799: ARRAY
16800: PUSH
16801: LD_INT 1
16803: ARRAY
16804: PPUSH
16805: LD_EXP 73
16809: PUSH
16810: LD_VAR 0 1
16814: ARRAY
16815: PUSH
16816: LD_VAR 0 2
16820: ARRAY
16821: PUSH
16822: LD_INT 2
16824: ARRAY
16825: PPUSH
16826: CALL_OW 428
16830: ST_TO_ADDR
// if not tmp then
16831: LD_VAR 0 4
16835: NOT
16836: IFFALSE 16840
// continue ;
16838: GO 16755
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 81
16847: PUSH
16848: LD_VAR 0 3
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PPUSH
16857: CALL_OW 69
16861: IN
16862: PUSH
16863: LD_EXP 73
16867: PUSH
16868: LD_VAR 0 1
16872: ARRAY
16873: PUSH
16874: LD_VAR 0 2
16878: ARRAY
16879: PUSH
16880: LD_INT 1
16882: ARRAY
16883: PPUSH
16884: LD_EXP 73
16888: PUSH
16889: LD_VAR 0 1
16893: ARRAY
16894: PUSH
16895: LD_VAR 0 2
16899: ARRAY
16900: PUSH
16901: LD_INT 2
16903: ARRAY
16904: PPUSH
16905: CALL_OW 458
16909: AND
16910: IFFALSE 17004
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16912: LD_EXP 73
16916: PUSH
16917: LD_VAR 0 1
16921: ARRAY
16922: PUSH
16923: LD_VAR 0 2
16927: ARRAY
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: PPUSH
16933: LD_EXP 73
16937: PUSH
16938: LD_VAR 0 1
16942: ARRAY
16943: PUSH
16944: LD_VAR 0 2
16948: ARRAY
16949: PUSH
16950: LD_INT 2
16952: ARRAY
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16963: LD_ADDR_EXP 73
16967: PUSH
16968: LD_EXP 73
16972: PPUSH
16973: LD_VAR 0 1
16977: PPUSH
16978: LD_EXP 73
16982: PUSH
16983: LD_VAR 0 1
16987: ARRAY
16988: PPUSH
16989: LD_VAR 0 2
16993: PPUSH
16994: CALL_OW 3
16998: PPUSH
16999: CALL_OW 1
17003: ST_TO_ADDR
// end ; end ;
17004: GO 16755
17006: POP
17007: POP
// end ;
17008: GO 16673
17010: POP
17011: POP
// end ;
17012: PPOPN 4
17014: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
// result := false ;
17019: LD_ADDR_VAR 0 4
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17027: LD_VAR 0 1
17031: PPUSH
17032: CALL_OW 264
17036: PUSH
17037: LD_EXP 51
17041: EQUAL
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17287
// index := GetElementIndex ( minersList , unit ) ;
17047: LD_ADDR_VAR 0 5
17051: PUSH
17052: LD_EXP 72
17056: PPUSH
17057: LD_VAR 0 1
17061: PPUSH
17062: CALL 37078 0 2
17066: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17067: LD_EXP 73
17071: PUSH
17072: LD_VAR 0 5
17076: ARRAY
17077: PUSH
17078: LD_EXP 74
17082: GREATEREQUAL
17083: IFFALSE 17087
// exit ;
17085: GO 17287
// ComMoveXY ( unit , x , y ) ;
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_VAR 0 2
17096: PPUSH
17097: LD_VAR 0 3
17101: PPUSH
17102: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17106: LD_INT 35
17108: PPUSH
17109: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_VAR 0 2
17122: PPUSH
17123: LD_VAR 0 3
17127: PPUSH
17128: CALL 67850 0 3
17132: NOT
17133: PUSH
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 314
17143: AND
17144: IFFALSE 17148
// exit ;
17146: GO 17287
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17148: LD_VAR 0 2
17152: PPUSH
17153: LD_VAR 0 3
17157: PPUSH
17158: CALL_OW 428
17162: PUSH
17163: LD_VAR 0 1
17167: EQUAL
17168: PUSH
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 314
17178: NOT
17179: AND
17180: IFFALSE 17106
// PlaySoundXY ( x , y , PlantMine ) ;
17182: LD_VAR 0 2
17186: PPUSH
17187: LD_VAR 0 3
17191: PPUSH
17192: LD_STRING PlantMine
17194: PPUSH
17195: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17199: LD_VAR 0 2
17203: PPUSH
17204: LD_VAR 0 3
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 255
17218: PPUSH
17219: LD_INT 0
17221: PPUSH
17222: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17226: LD_ADDR_EXP 73
17230: PUSH
17231: LD_EXP 73
17235: PPUSH
17236: LD_VAR 0 5
17240: PUSH
17241: LD_EXP 73
17245: PUSH
17246: LD_VAR 0 5
17250: ARRAY
17251: PUSH
17252: LD_INT 1
17254: PLUS
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PPUSH
17260: LD_VAR 0 2
17264: PUSH
17265: LD_VAR 0 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL 37293 0 3
17278: ST_TO_ADDR
// result := true ;
17279: LD_ADDR_VAR 0 4
17283: PUSH
17284: LD_INT 1
17286: ST_TO_ADDR
// end ;
17287: LD_VAR 0 4
17291: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17292: LD_INT 0
17294: PPUSH
17295: PPUSH
17296: PPUSH
// if not unit in minersList then
17297: LD_VAR 0 1
17301: PUSH
17302: LD_EXP 72
17306: IN
17307: NOT
17308: IFFALSE 17312
// exit ;
17310: GO 17704
// index := GetElementIndex ( minersList , unit ) ;
17312: LD_ADDR_VAR 0 6
17316: PUSH
17317: LD_EXP 72
17321: PPUSH
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL 37078 0 2
17331: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17332: LD_ADDR_VAR 0 5
17336: PUSH
17337: DOUBLE
17338: LD_EXP 73
17342: PUSH
17343: LD_VAR 0 6
17347: ARRAY
17348: INC
17349: ST_TO_ADDR
17350: LD_INT 1
17352: PUSH
17353: FOR_DOWNTO
17354: IFFALSE 17515
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17356: LD_EXP 73
17360: PUSH
17361: LD_VAR 0 6
17365: ARRAY
17366: PUSH
17367: LD_VAR 0 5
17371: ARRAY
17372: PUSH
17373: LD_INT 1
17375: ARRAY
17376: PUSH
17377: LD_VAR 0 2
17381: EQUAL
17382: PUSH
17383: LD_EXP 73
17387: PUSH
17388: LD_VAR 0 6
17392: ARRAY
17393: PUSH
17394: LD_VAR 0 5
17398: ARRAY
17399: PUSH
17400: LD_INT 2
17402: ARRAY
17403: PUSH
17404: LD_VAR 0 3
17408: EQUAL
17409: AND
17410: IFFALSE 17513
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17412: LD_EXP 73
17416: PUSH
17417: LD_VAR 0 6
17421: ARRAY
17422: PUSH
17423: LD_VAR 0 5
17427: ARRAY
17428: PUSH
17429: LD_INT 1
17431: ARRAY
17432: PPUSH
17433: LD_EXP 73
17437: PUSH
17438: LD_VAR 0 6
17442: ARRAY
17443: PUSH
17444: LD_VAR 0 5
17448: ARRAY
17449: PUSH
17450: LD_INT 2
17452: ARRAY
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 255
17463: PPUSH
17464: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17468: LD_ADDR_EXP 73
17472: PUSH
17473: LD_EXP 73
17477: PPUSH
17478: LD_VAR 0 6
17482: PPUSH
17483: LD_EXP 73
17487: PUSH
17488: LD_VAR 0 6
17492: ARRAY
17493: PPUSH
17494: LD_VAR 0 5
17498: PPUSH
17499: CALL_OW 3
17503: PPUSH
17504: CALL_OW 1
17508: ST_TO_ADDR
// exit ;
17509: POP
17510: POP
17511: GO 17704
// end ; end ;
17513: GO 17353
17515: POP
17516: POP
// for i := minerMinesList [ index ] downto 1 do
17517: LD_ADDR_VAR 0 5
17521: PUSH
17522: DOUBLE
17523: LD_EXP 73
17527: PUSH
17528: LD_VAR 0 6
17532: ARRAY
17533: INC
17534: ST_TO_ADDR
17535: LD_INT 1
17537: PUSH
17538: FOR_DOWNTO
17539: IFFALSE 17702
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17541: LD_EXP 73
17545: PUSH
17546: LD_VAR 0 6
17550: ARRAY
17551: PUSH
17552: LD_VAR 0 5
17556: ARRAY
17557: PUSH
17558: LD_INT 1
17560: ARRAY
17561: PPUSH
17562: LD_EXP 73
17566: PUSH
17567: LD_VAR 0 6
17571: ARRAY
17572: PUSH
17573: LD_VAR 0 5
17577: ARRAY
17578: PUSH
17579: LD_INT 2
17581: ARRAY
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: CALL_OW 298
17597: PUSH
17598: LD_INT 6
17600: LESS
17601: IFFALSE 17700
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17603: LD_EXP 73
17607: PUSH
17608: LD_VAR 0 6
17612: ARRAY
17613: PUSH
17614: LD_VAR 0 5
17618: ARRAY
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: PPUSH
17624: LD_EXP 73
17628: PUSH
17629: LD_VAR 0 6
17633: ARRAY
17634: PUSH
17635: LD_VAR 0 5
17639: ARRAY
17640: PUSH
17641: LD_INT 2
17643: ARRAY
17644: PPUSH
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 255
17654: PPUSH
17655: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17659: LD_ADDR_EXP 73
17663: PUSH
17664: LD_EXP 73
17668: PPUSH
17669: LD_VAR 0 6
17673: PPUSH
17674: LD_EXP 73
17678: PUSH
17679: LD_VAR 0 6
17683: ARRAY
17684: PPUSH
17685: LD_VAR 0 5
17689: PPUSH
17690: CALL_OW 3
17694: PPUSH
17695: CALL_OW 1
17699: ST_TO_ADDR
// end ; end ;
17700: GO 17538
17702: POP
17703: POP
// end ;
17704: LD_VAR 0 4
17708: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17709: LD_INT 0
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 264
17729: PUSH
17730: LD_EXP 51
17734: EQUAL
17735: NOT
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_EXP 72
17746: IN
17747: NOT
17748: OR
17749: IFFALSE 17753
// exit ;
17751: GO 18075
// index := GetElementIndex ( minersList , unit ) ;
17753: LD_ADDR_VAR 0 6
17757: PUSH
17758: LD_EXP 72
17762: PPUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL 37078 0 2
17772: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17773: LD_ADDR_VAR 0 8
17777: PUSH
17778: LD_EXP 74
17782: PUSH
17783: LD_EXP 73
17787: PUSH
17788: LD_VAR 0 6
17792: ARRAY
17793: MINUS
17794: ST_TO_ADDR
// if not minesFreeAmount then
17795: LD_VAR 0 8
17799: NOT
17800: IFFALSE 17804
// exit ;
17802: GO 18075
// tmp := [ ] ;
17804: LD_ADDR_VAR 0 7
17808: PUSH
17809: EMPTY
17810: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17811: LD_ADDR_VAR 0 5
17815: PUSH
17816: DOUBLE
17817: LD_INT 1
17819: DEC
17820: ST_TO_ADDR
17821: LD_VAR 0 8
17825: PUSH
17826: FOR_TO
17827: IFFALSE 18022
// begin _d := rand ( 0 , 5 ) ;
17829: LD_ADDR_VAR 0 11
17833: PUSH
17834: LD_INT 0
17836: PPUSH
17837: LD_INT 5
17839: PPUSH
17840: CALL_OW 12
17844: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17845: LD_ADDR_VAR 0 12
17849: PUSH
17850: LD_INT 2
17852: PPUSH
17853: LD_INT 6
17855: PPUSH
17856: CALL_OW 12
17860: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17861: LD_ADDR_VAR 0 9
17865: PUSH
17866: LD_VAR 0 2
17870: PPUSH
17871: LD_VAR 0 11
17875: PPUSH
17876: LD_VAR 0 12
17880: PPUSH
17881: CALL_OW 272
17885: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17886: LD_ADDR_VAR 0 10
17890: PUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_VAR 0 11
17900: PPUSH
17901: LD_VAR 0 12
17905: PPUSH
17906: CALL_OW 273
17910: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17911: LD_VAR 0 9
17915: PPUSH
17916: LD_VAR 0 10
17920: PPUSH
17921: CALL_OW 488
17925: PUSH
17926: LD_VAR 0 9
17930: PUSH
17931: LD_VAR 0 10
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_VAR 0 7
17944: IN
17945: NOT
17946: AND
17947: PUSH
17948: LD_VAR 0 9
17952: PPUSH
17953: LD_VAR 0 10
17957: PPUSH
17958: CALL_OW 458
17962: NOT
17963: AND
17964: IFFALSE 18006
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17966: LD_ADDR_VAR 0 7
17970: PUSH
17971: LD_VAR 0 7
17975: PPUSH
17976: LD_VAR 0 7
17980: PUSH
17981: LD_INT 1
17983: PLUS
17984: PPUSH
17985: LD_VAR 0 9
17989: PUSH
17990: LD_VAR 0 10
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 1
18003: ST_TO_ADDR
18004: GO 18020
// i := i - 1 ;
18006: LD_ADDR_VAR 0 5
18010: PUSH
18011: LD_VAR 0 5
18015: PUSH
18016: LD_INT 1
18018: MINUS
18019: ST_TO_ADDR
// end ;
18020: GO 17826
18022: POP
18023: POP
// for i in tmp do
18024: LD_ADDR_VAR 0 5
18028: PUSH
18029: LD_VAR 0 7
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18073
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_VAR 0 5
18046: PUSH
18047: LD_INT 1
18049: ARRAY
18050: PPUSH
18051: LD_VAR 0 5
18055: PUSH
18056: LD_INT 2
18058: ARRAY
18059: PPUSH
18060: CALL 17015 0 3
18064: NOT
18065: IFFALSE 18071
// exit ;
18067: POP
18068: POP
18069: GO 18075
18071: GO 18034
18073: POP
18074: POP
// end ;
18075: LD_VAR 0 4
18079: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18080: LD_INT 0
18082: PPUSH
18083: PPUSH
18084: PPUSH
18085: PPUSH
18086: PPUSH
18087: PPUSH
18088: PPUSH
// if not GetClass ( unit ) = class_sniper then
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 257
18098: PUSH
18099: LD_INT 5
18101: EQUAL
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18495
// dist := 8 ;
18107: LD_ADDR_VAR 0 5
18111: PUSH
18112: LD_INT 8
18114: ST_TO_ADDR
// viewRange := 12 ;
18115: LD_ADDR_VAR 0 7
18119: PUSH
18120: LD_INT 12
18122: ST_TO_ADDR
// side := GetSide ( unit ) ;
18123: LD_ADDR_VAR 0 6
18127: PUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 255
18137: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18138: LD_INT 61
18140: PPUSH
18141: LD_VAR 0 6
18145: PPUSH
18146: CALL_OW 321
18150: PUSH
18151: LD_INT 2
18153: EQUAL
18154: IFFALSE 18164
// viewRange := 16 ;
18156: LD_ADDR_VAR 0 7
18160: PUSH
18161: LD_INT 16
18163: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18164: LD_VAR 0 1
18168: PPUSH
18169: LD_VAR 0 2
18173: PPUSH
18174: LD_VAR 0 3
18178: PPUSH
18179: CALL_OW 297
18183: PUSH
18184: LD_VAR 0 5
18188: GREATER
18189: IFFALSE 18268
// begin ComMoveXY ( unit , x , y ) ;
18191: LD_VAR 0 1
18195: PPUSH
18196: LD_VAR 0 2
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18210: LD_INT 35
18212: PPUSH
18213: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18217: LD_VAR 0 1
18221: PPUSH
18222: LD_VAR 0 2
18226: PPUSH
18227: LD_VAR 0 3
18231: PPUSH
18232: CALL 67850 0 3
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18495
// until GetDistUnitXY ( unit , x , y ) < dist ;
18241: LD_VAR 0 1
18245: PPUSH
18246: LD_VAR 0 2
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: CALL_OW 297
18260: PUSH
18261: LD_VAR 0 5
18265: LESS
18266: IFFALSE 18210
// end ; ComTurnXY ( unit , x , y ) ;
18268: LD_VAR 0 1
18272: PPUSH
18273: LD_VAR 0 2
18277: PPUSH
18278: LD_VAR 0 3
18282: PPUSH
18283: CALL_OW 118
// wait ( 5 ) ;
18287: LD_INT 5
18289: PPUSH
18290: CALL_OW 67
// _d := GetDir ( unit ) ;
18294: LD_ADDR_VAR 0 10
18298: PUSH
18299: LD_VAR 0 1
18303: PPUSH
18304: CALL_OW 254
18308: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18309: LD_ADDR_VAR 0 8
18313: PUSH
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 250
18323: PPUSH
18324: LD_VAR 0 10
18328: PPUSH
18329: LD_VAR 0 5
18333: PPUSH
18334: CALL_OW 272
18338: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18339: LD_ADDR_VAR 0 9
18343: PUSH
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 251
18353: PPUSH
18354: LD_VAR 0 10
18358: PPUSH
18359: LD_VAR 0 5
18363: PPUSH
18364: CALL_OW 273
18368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18369: LD_VAR 0 8
18373: PPUSH
18374: LD_VAR 0 9
18378: PPUSH
18379: CALL_OW 488
18383: NOT
18384: IFFALSE 18388
// exit ;
18386: GO 18495
// ComAnimCustom ( unit , 1 ) ;
18388: LD_VAR 0 1
18392: PPUSH
18393: LD_INT 1
18395: PPUSH
18396: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18400: LD_VAR 0 8
18404: PPUSH
18405: LD_VAR 0 9
18409: PPUSH
18410: LD_VAR 0 6
18414: PPUSH
18415: LD_VAR 0 7
18419: PPUSH
18420: CALL_OW 330
// repeat wait ( 1 ) ;
18424: LD_INT 1
18426: PPUSH
18427: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: CALL_OW 316
18440: PUSH
18441: LD_VAR 0 1
18445: PPUSH
18446: CALL_OW 314
18450: OR
18451: PUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 302
18461: NOT
18462: OR
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 301
18473: OR
18474: IFFALSE 18424
// RemoveSeeing ( _x , _y , side ) ;
18476: LD_VAR 0 8
18480: PPUSH
18481: LD_VAR 0 9
18485: PPUSH
18486: LD_VAR 0 6
18490: PPUSH
18491: CALL_OW 331
// end ; end_of_file
18495: LD_VAR 0 4
18499: RET
// every 0 0$1 do
18500: GO 18502
18502: DISABLE
// begin enable ;
18503: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18504: LD_STRING updateTimer(
18506: PUSH
18507: LD_OWVAR 1
18511: STR
18512: PUSH
18513: LD_STRING );
18515: STR
18516: PPUSH
18517: CALL_OW 559
// end ;
18521: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18522: LD_INT 0
18524: PPUSH
// if p2 = 100 then
18525: LD_VAR 0 2
18529: PUSH
18530: LD_INT 100
18532: EQUAL
18533: IFFALSE 19536
// begin if not StreamModeActive then
18535: LD_EXP 75
18539: NOT
18540: IFFALSE 18550
// StreamModeActive := true ;
18542: LD_ADDR_EXP 75
18546: PUSH
18547: LD_INT 1
18549: ST_TO_ADDR
// if p3 = 0 then
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 0
18557: EQUAL
18558: IFFALSE 18564
// InitStreamMode ;
18560: CALL 19696 0 0
// if p3 = 1 then
18564: LD_VAR 0 3
18568: PUSH
18569: LD_INT 1
18571: EQUAL
18572: IFFALSE 18582
// sRocket := true ;
18574: LD_ADDR_EXP 80
18578: PUSH
18579: LD_INT 1
18581: ST_TO_ADDR
// if p3 = 2 then
18582: LD_VAR 0 3
18586: PUSH
18587: LD_INT 2
18589: EQUAL
18590: IFFALSE 18600
// sSpeed := true ;
18592: LD_ADDR_EXP 79
18596: PUSH
18597: LD_INT 1
18599: ST_TO_ADDR
// if p3 = 3 then
18600: LD_VAR 0 3
18604: PUSH
18605: LD_INT 3
18607: EQUAL
18608: IFFALSE 18618
// sEngine := true ;
18610: LD_ADDR_EXP 81
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// if p3 = 4 then
18618: LD_VAR 0 3
18622: PUSH
18623: LD_INT 4
18625: EQUAL
18626: IFFALSE 18636
// sSpec := true ;
18628: LD_ADDR_EXP 78
18632: PUSH
18633: LD_INT 1
18635: ST_TO_ADDR
// if p3 = 5 then
18636: LD_VAR 0 3
18640: PUSH
18641: LD_INT 5
18643: EQUAL
18644: IFFALSE 18654
// sLevel := true ;
18646: LD_ADDR_EXP 82
18650: PUSH
18651: LD_INT 1
18653: ST_TO_ADDR
// if p3 = 6 then
18654: LD_VAR 0 3
18658: PUSH
18659: LD_INT 6
18661: EQUAL
18662: IFFALSE 18672
// sArmoury := true ;
18664: LD_ADDR_EXP 83
18668: PUSH
18669: LD_INT 1
18671: ST_TO_ADDR
// if p3 = 7 then
18672: LD_VAR 0 3
18676: PUSH
18677: LD_INT 7
18679: EQUAL
18680: IFFALSE 18690
// sRadar := true ;
18682: LD_ADDR_EXP 84
18686: PUSH
18687: LD_INT 1
18689: ST_TO_ADDR
// if p3 = 8 then
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 8
18697: EQUAL
18698: IFFALSE 18708
// sBunker := true ;
18700: LD_ADDR_EXP 85
18704: PUSH
18705: LD_INT 1
18707: ST_TO_ADDR
// if p3 = 9 then
18708: LD_VAR 0 3
18712: PUSH
18713: LD_INT 9
18715: EQUAL
18716: IFFALSE 18726
// sHack := true ;
18718: LD_ADDR_EXP 86
18722: PUSH
18723: LD_INT 1
18725: ST_TO_ADDR
// if p3 = 10 then
18726: LD_VAR 0 3
18730: PUSH
18731: LD_INT 10
18733: EQUAL
18734: IFFALSE 18744
// sFire := true ;
18736: LD_ADDR_EXP 87
18740: PUSH
18741: LD_INT 1
18743: ST_TO_ADDR
// if p3 = 11 then
18744: LD_VAR 0 3
18748: PUSH
18749: LD_INT 11
18751: EQUAL
18752: IFFALSE 18762
// sRefresh := true ;
18754: LD_ADDR_EXP 88
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// if p3 = 12 then
18762: LD_VAR 0 3
18766: PUSH
18767: LD_INT 12
18769: EQUAL
18770: IFFALSE 18780
// sExp := true ;
18772: LD_ADDR_EXP 89
18776: PUSH
18777: LD_INT 1
18779: ST_TO_ADDR
// if p3 = 13 then
18780: LD_VAR 0 3
18784: PUSH
18785: LD_INT 13
18787: EQUAL
18788: IFFALSE 18798
// sDepot := true ;
18790: LD_ADDR_EXP 90
18794: PUSH
18795: LD_INT 1
18797: ST_TO_ADDR
// if p3 = 14 then
18798: LD_VAR 0 3
18802: PUSH
18803: LD_INT 14
18805: EQUAL
18806: IFFALSE 18816
// sFlag := true ;
18808: LD_ADDR_EXP 91
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// if p3 = 15 then
18816: LD_VAR 0 3
18820: PUSH
18821: LD_INT 15
18823: EQUAL
18824: IFFALSE 18834
// sKamikadze := true ;
18826: LD_ADDR_EXP 99
18830: PUSH
18831: LD_INT 1
18833: ST_TO_ADDR
// if p3 = 16 then
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 16
18841: EQUAL
18842: IFFALSE 18852
// sTroll := true ;
18844: LD_ADDR_EXP 100
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// if p3 = 17 then
18852: LD_VAR 0 3
18856: PUSH
18857: LD_INT 17
18859: EQUAL
18860: IFFALSE 18870
// sSlow := true ;
18862: LD_ADDR_EXP 101
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// if p3 = 18 then
18870: LD_VAR 0 3
18874: PUSH
18875: LD_INT 18
18877: EQUAL
18878: IFFALSE 18888
// sLack := true ;
18880: LD_ADDR_EXP 102
18884: PUSH
18885: LD_INT 1
18887: ST_TO_ADDR
// if p3 = 19 then
18888: LD_VAR 0 3
18892: PUSH
18893: LD_INT 19
18895: EQUAL
18896: IFFALSE 18906
// sTank := true ;
18898: LD_ADDR_EXP 104
18902: PUSH
18903: LD_INT 1
18905: ST_TO_ADDR
// if p3 = 20 then
18906: LD_VAR 0 3
18910: PUSH
18911: LD_INT 20
18913: EQUAL
18914: IFFALSE 18924
// sRemote := true ;
18916: LD_ADDR_EXP 105
18920: PUSH
18921: LD_INT 1
18923: ST_TO_ADDR
// if p3 = 21 then
18924: LD_VAR 0 3
18928: PUSH
18929: LD_INT 21
18931: EQUAL
18932: IFFALSE 18942
// sPowell := true ;
18934: LD_ADDR_EXP 106
18938: PUSH
18939: LD_INT 1
18941: ST_TO_ADDR
// if p3 = 22 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 22
18949: EQUAL
18950: IFFALSE 18960
// sTeleport := true ;
18952: LD_ADDR_EXP 109
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 23 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 23
18967: EQUAL
18968: IFFALSE 18978
// sOilTower := true ;
18970: LD_ADDR_EXP 111
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 24 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 24
18985: EQUAL
18986: IFFALSE 18996
// sShovel := true ;
18988: LD_ADDR_EXP 112
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 25 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 25
19003: EQUAL
19004: IFFALSE 19014
// sSheik := true ;
19006: LD_ADDR_EXP 113
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 26 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 26
19021: EQUAL
19022: IFFALSE 19032
// sEarthquake := true ;
19024: LD_ADDR_EXP 115
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 27 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 27
19039: EQUAL
19040: IFFALSE 19050
// sAI := true ;
19042: LD_ADDR_EXP 116
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 28 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 28
19057: EQUAL
19058: IFFALSE 19068
// sCargo := true ;
19060: LD_ADDR_EXP 119
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 29 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 29
19075: EQUAL
19076: IFFALSE 19086
// sDLaser := true ;
19078: LD_ADDR_EXP 120
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 30 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 30
19093: EQUAL
19094: IFFALSE 19104
// sExchange := true ;
19096: LD_ADDR_EXP 121
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 31 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 31
19111: EQUAL
19112: IFFALSE 19122
// sFac := true ;
19114: LD_ADDR_EXP 122
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 32 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 32
19129: EQUAL
19130: IFFALSE 19140
// sPower := true ;
19132: LD_ADDR_EXP 123
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 33 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 33
19147: EQUAL
19148: IFFALSE 19158
// sRandom := true ;
19150: LD_ADDR_EXP 124
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 34 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 34
19165: EQUAL
19166: IFFALSE 19176
// sShield := true ;
19168: LD_ADDR_EXP 125
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 35 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 35
19183: EQUAL
19184: IFFALSE 19194
// sTime := true ;
19186: LD_ADDR_EXP 126
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 36 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 36
19201: EQUAL
19202: IFFALSE 19212
// sTools := true ;
19204: LD_ADDR_EXP 127
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 101 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 101
19219: EQUAL
19220: IFFALSE 19230
// sSold := true ;
19222: LD_ADDR_EXP 92
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 102 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 102
19237: EQUAL
19238: IFFALSE 19248
// sDiff := true ;
19240: LD_ADDR_EXP 93
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 103 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 103
19255: EQUAL
19256: IFFALSE 19266
// sFog := true ;
19258: LD_ADDR_EXP 96
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 104 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 104
19273: EQUAL
19274: IFFALSE 19284
// sReset := true ;
19276: LD_ADDR_EXP 97
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 105 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 105
19291: EQUAL
19292: IFFALSE 19302
// sSun := true ;
19294: LD_ADDR_EXP 98
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 106 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 106
19309: EQUAL
19310: IFFALSE 19320
// sTiger := true ;
19312: LD_ADDR_EXP 94
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 107 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 107
19327: EQUAL
19328: IFFALSE 19338
// sBomb := true ;
19330: LD_ADDR_EXP 95
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 108 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 108
19345: EQUAL
19346: IFFALSE 19356
// sWound := true ;
19348: LD_ADDR_EXP 103
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 109 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 109
19363: EQUAL
19364: IFFALSE 19374
// sBetray := true ;
19366: LD_ADDR_EXP 107
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 110 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 110
19381: EQUAL
19382: IFFALSE 19392
// sContamin := true ;
19384: LD_ADDR_EXP 108
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 111 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 111
19399: EQUAL
19400: IFFALSE 19410
// sOil := true ;
19402: LD_ADDR_EXP 110
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 112 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 112
19417: EQUAL
19418: IFFALSE 19428
// sStu := true ;
19420: LD_ADDR_EXP 114
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 113 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 113
19435: EQUAL
19436: IFFALSE 19446
// sBazooka := true ;
19438: LD_ADDR_EXP 117
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 114 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 114
19453: EQUAL
19454: IFFALSE 19464
// sMortar := true ;
19456: LD_ADDR_EXP 118
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 115 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 115
19471: EQUAL
19472: IFFALSE 19482
// sRanger := true ;
19474: LD_ADDR_EXP 128
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 116 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 116
19489: EQUAL
19490: IFFALSE 19500
// sComputer := true ;
19492: LD_ADDR_EXP 129
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 117 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 117
19507: EQUAL
19508: IFFALSE 19518
// s30 := true ;
19510: LD_ADDR_EXP 130
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 118 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 118
19525: EQUAL
19526: IFFALSE 19536
// s60 := true ;
19528: LD_ADDR_EXP 131
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// end ; if p2 = 101 then
19536: LD_VAR 0 2
19540: PUSH
19541: LD_INT 101
19543: EQUAL
19544: IFFALSE 19672
// begin case p3 of 1 :
19546: LD_VAR 0 3
19550: PUSH
19551: LD_INT 1
19553: DOUBLE
19554: EQUAL
19555: IFTRUE 19559
19557: GO 19566
19559: POP
// hHackUnlimitedResources ; 2 :
19560: CALL 31268 0 0
19564: GO 19672
19566: LD_INT 2
19568: DOUBLE
19569: EQUAL
19570: IFTRUE 19574
19572: GO 19581
19574: POP
// hHackSetLevel10 ; 3 :
19575: CALL 31401 0 0
19579: GO 19672
19581: LD_INT 3
19583: DOUBLE
19584: EQUAL
19585: IFTRUE 19589
19587: GO 19596
19589: POP
// hHackSetLevel10YourUnits ; 4 :
19590: CALL 31486 0 0
19594: GO 19672
19596: LD_INT 4
19598: DOUBLE
19599: EQUAL
19600: IFTRUE 19604
19602: GO 19611
19604: POP
// hHackInvincible ; 5 :
19605: CALL 31934 0 0
19609: GO 19672
19611: LD_INT 5
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19626
19619: POP
// hHackInvisible ; 6 :
19620: CALL 32045 0 0
19624: GO 19672
19626: LD_INT 6
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19641
19634: POP
// hHackChangeYourSide ; 7 :
19635: CALL 32102 0 0
19639: GO 19672
19641: LD_INT 7
19643: DOUBLE
19644: EQUAL
19645: IFTRUE 19649
19647: GO 19656
19649: POP
// hHackChangeUnitSide ; 8 :
19650: CALL 32144 0 0
19654: GO 19672
19656: LD_INT 8
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19671
19664: POP
// hHackFog ; end ;
19665: CALL 32245 0 0
19669: GO 19672
19671: POP
// end ; end ;
19672: LD_VAR 0 7
19676: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19677: GO 19679
19679: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19680: LD_STRING initStreamRollete();
19682: PPUSH
19683: CALL_OW 559
// InitStreamMode ;
19687: CALL 19696 0 0
// DefineStreamItems ( ) ;
19691: CALL 20160 0 0
// end ;
19695: END
// function InitStreamMode ; begin
19696: LD_INT 0
19698: PPUSH
// streamModeActive := false ;
19699: LD_ADDR_EXP 75
19703: PUSH
19704: LD_INT 0
19706: ST_TO_ADDR
// normalCounter := 36 ;
19707: LD_ADDR_EXP 76
19711: PUSH
19712: LD_INT 36
19714: ST_TO_ADDR
// hardcoreCounter := 16 ;
19715: LD_ADDR_EXP 77
19719: PUSH
19720: LD_INT 16
19722: ST_TO_ADDR
// sRocket := false ;
19723: LD_ADDR_EXP 80
19727: PUSH
19728: LD_INT 0
19730: ST_TO_ADDR
// sSpeed := false ;
19731: LD_ADDR_EXP 79
19735: PUSH
19736: LD_INT 0
19738: ST_TO_ADDR
// sEngine := false ;
19739: LD_ADDR_EXP 81
19743: PUSH
19744: LD_INT 0
19746: ST_TO_ADDR
// sSpec := false ;
19747: LD_ADDR_EXP 78
19751: PUSH
19752: LD_INT 0
19754: ST_TO_ADDR
// sLevel := false ;
19755: LD_ADDR_EXP 82
19759: PUSH
19760: LD_INT 0
19762: ST_TO_ADDR
// sArmoury := false ;
19763: LD_ADDR_EXP 83
19767: PUSH
19768: LD_INT 0
19770: ST_TO_ADDR
// sRadar := false ;
19771: LD_ADDR_EXP 84
19775: PUSH
19776: LD_INT 0
19778: ST_TO_ADDR
// sBunker := false ;
19779: LD_ADDR_EXP 85
19783: PUSH
19784: LD_INT 0
19786: ST_TO_ADDR
// sHack := false ;
19787: LD_ADDR_EXP 86
19791: PUSH
19792: LD_INT 0
19794: ST_TO_ADDR
// sFire := false ;
19795: LD_ADDR_EXP 87
19799: PUSH
19800: LD_INT 0
19802: ST_TO_ADDR
// sRefresh := false ;
19803: LD_ADDR_EXP 88
19807: PUSH
19808: LD_INT 0
19810: ST_TO_ADDR
// sExp := false ;
19811: LD_ADDR_EXP 89
19815: PUSH
19816: LD_INT 0
19818: ST_TO_ADDR
// sDepot := false ;
19819: LD_ADDR_EXP 90
19823: PUSH
19824: LD_INT 0
19826: ST_TO_ADDR
// sFlag := false ;
19827: LD_ADDR_EXP 91
19831: PUSH
19832: LD_INT 0
19834: ST_TO_ADDR
// sKamikadze := false ;
19835: LD_ADDR_EXP 99
19839: PUSH
19840: LD_INT 0
19842: ST_TO_ADDR
// sTroll := false ;
19843: LD_ADDR_EXP 100
19847: PUSH
19848: LD_INT 0
19850: ST_TO_ADDR
// sSlow := false ;
19851: LD_ADDR_EXP 101
19855: PUSH
19856: LD_INT 0
19858: ST_TO_ADDR
// sLack := false ;
19859: LD_ADDR_EXP 102
19863: PUSH
19864: LD_INT 0
19866: ST_TO_ADDR
// sTank := false ;
19867: LD_ADDR_EXP 104
19871: PUSH
19872: LD_INT 0
19874: ST_TO_ADDR
// sRemote := false ;
19875: LD_ADDR_EXP 105
19879: PUSH
19880: LD_INT 0
19882: ST_TO_ADDR
// sPowell := false ;
19883: LD_ADDR_EXP 106
19887: PUSH
19888: LD_INT 0
19890: ST_TO_ADDR
// sTeleport := false ;
19891: LD_ADDR_EXP 109
19895: PUSH
19896: LD_INT 0
19898: ST_TO_ADDR
// sOilTower := false ;
19899: LD_ADDR_EXP 111
19903: PUSH
19904: LD_INT 0
19906: ST_TO_ADDR
// sShovel := false ;
19907: LD_ADDR_EXP 112
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
// sSheik := false ;
19915: LD_ADDR_EXP 113
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// sEarthquake := false ;
19923: LD_ADDR_EXP 115
19927: PUSH
19928: LD_INT 0
19930: ST_TO_ADDR
// sAI := false ;
19931: LD_ADDR_EXP 116
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// sCargo := false ;
19939: LD_ADDR_EXP 119
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// sDLaser := false ;
19947: LD_ADDR_EXP 120
19951: PUSH
19952: LD_INT 0
19954: ST_TO_ADDR
// sExchange := false ;
19955: LD_ADDR_EXP 121
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// sFac := false ;
19963: LD_ADDR_EXP 122
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// sPower := false ;
19971: LD_ADDR_EXP 123
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sRandom := false ;
19979: LD_ADDR_EXP 124
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// sShield := false ;
19987: LD_ADDR_EXP 125
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// sTime := false ;
19995: LD_ADDR_EXP 126
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// sTools := false ;
20003: LD_ADDR_EXP 127
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sSold := false ;
20011: LD_ADDR_EXP 92
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sDiff := false ;
20019: LD_ADDR_EXP 93
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sFog := false ;
20027: LD_ADDR_EXP 96
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sReset := false ;
20035: LD_ADDR_EXP 97
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sSun := false ;
20043: LD_ADDR_EXP 98
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sTiger := false ;
20051: LD_ADDR_EXP 94
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sBomb := false ;
20059: LD_ADDR_EXP 95
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sWound := false ;
20067: LD_ADDR_EXP 103
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sBetray := false ;
20075: LD_ADDR_EXP 107
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sContamin := false ;
20083: LD_ADDR_EXP 108
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sOil := false ;
20091: LD_ADDR_EXP 110
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sStu := false ;
20099: LD_ADDR_EXP 114
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sBazooka := false ;
20107: LD_ADDR_EXP 117
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sMortar := false ;
20115: LD_ADDR_EXP 118
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sRanger := false ;
20123: LD_ADDR_EXP 128
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sComputer := false ;
20131: LD_ADDR_EXP 129
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// s30 := false ;
20139: LD_ADDR_EXP 130
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// s60 := false ;
20147: LD_ADDR_EXP 131
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// end ;
20155: LD_VAR 0 1
20159: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20160: LD_INT 0
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
// result := [ ] ;
20167: LD_ADDR_VAR 0 1
20171: PUSH
20172: EMPTY
20173: ST_TO_ADDR
// if campaign_id = 1 then
20174: LD_OWVAR 69
20178: PUSH
20179: LD_INT 1
20181: EQUAL
20182: IFFALSE 23348
// begin case mission_number of 1 :
20184: LD_OWVAR 70
20188: PUSH
20189: LD_INT 1
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20273
20197: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20198: LD_ADDR_VAR 0 1
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 4
20208: PUSH
20209: LD_INT 11
20211: PUSH
20212: LD_INT 12
20214: PUSH
20215: LD_INT 15
20217: PUSH
20218: LD_INT 16
20220: PUSH
20221: LD_INT 22
20223: PUSH
20224: LD_INT 23
20226: PUSH
20227: LD_INT 26
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 101
20243: PUSH
20244: LD_INT 102
20246: PUSH
20247: LD_INT 106
20249: PUSH
20250: LD_INT 116
20252: PUSH
20253: LD_INT 117
20255: PUSH
20256: LD_INT 118
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: ST_TO_ADDR
20271: GO 23346
20273: LD_INT 2
20275: DOUBLE
20276: EQUAL
20277: IFTRUE 20281
20279: GO 20365
20281: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20282: LD_ADDR_VAR 0 1
20286: PUSH
20287: LD_INT 2
20289: PUSH
20290: LD_INT 4
20292: PUSH
20293: LD_INT 11
20295: PUSH
20296: LD_INT 12
20298: PUSH
20299: LD_INT 15
20301: PUSH
20302: LD_INT 16
20304: PUSH
20305: LD_INT 22
20307: PUSH
20308: LD_INT 23
20310: PUSH
20311: LD_INT 26
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 101
20327: PUSH
20328: LD_INT 102
20330: PUSH
20331: LD_INT 105
20333: PUSH
20334: LD_INT 106
20336: PUSH
20337: LD_INT 108
20339: PUSH
20340: LD_INT 116
20342: PUSH
20343: LD_INT 117
20345: PUSH
20346: LD_INT 118
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: ST_TO_ADDR
20363: GO 23346
20365: LD_INT 3
20367: DOUBLE
20368: EQUAL
20369: IFTRUE 20373
20371: GO 20461
20373: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20374: LD_ADDR_VAR 0 1
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 4
20384: PUSH
20385: LD_INT 5
20387: PUSH
20388: LD_INT 11
20390: PUSH
20391: LD_INT 12
20393: PUSH
20394: LD_INT 15
20396: PUSH
20397: LD_INT 16
20399: PUSH
20400: LD_INT 22
20402: PUSH
20403: LD_INT 26
20405: PUSH
20406: LD_INT 36
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 101
20423: PUSH
20424: LD_INT 102
20426: PUSH
20427: LD_INT 105
20429: PUSH
20430: LD_INT 106
20432: PUSH
20433: LD_INT 108
20435: PUSH
20436: LD_INT 116
20438: PUSH
20439: LD_INT 117
20441: PUSH
20442: LD_INT 118
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: ST_TO_ADDR
20459: GO 23346
20461: LD_INT 4
20463: DOUBLE
20464: EQUAL
20465: IFTRUE 20469
20467: GO 20565
20469: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20470: LD_ADDR_VAR 0 1
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 4
20480: PUSH
20481: LD_INT 5
20483: PUSH
20484: LD_INT 8
20486: PUSH
20487: LD_INT 11
20489: PUSH
20490: LD_INT 12
20492: PUSH
20493: LD_INT 15
20495: PUSH
20496: LD_INT 16
20498: PUSH
20499: LD_INT 22
20501: PUSH
20502: LD_INT 23
20504: PUSH
20505: LD_INT 26
20507: PUSH
20508: LD_INT 36
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 101
20527: PUSH
20528: LD_INT 102
20530: PUSH
20531: LD_INT 105
20533: PUSH
20534: LD_INT 106
20536: PUSH
20537: LD_INT 108
20539: PUSH
20540: LD_INT 116
20542: PUSH
20543: LD_INT 117
20545: PUSH
20546: LD_INT 118
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: ST_TO_ADDR
20563: GO 23346
20565: LD_INT 5
20567: DOUBLE
20568: EQUAL
20569: IFTRUE 20573
20571: GO 20685
20573: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20574: LD_ADDR_VAR 0 1
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: LD_INT 4
20584: PUSH
20585: LD_INT 5
20587: PUSH
20588: LD_INT 6
20590: PUSH
20591: LD_INT 8
20593: PUSH
20594: LD_INT 11
20596: PUSH
20597: LD_INT 12
20599: PUSH
20600: LD_INT 15
20602: PUSH
20603: LD_INT 16
20605: PUSH
20606: LD_INT 22
20608: PUSH
20609: LD_INT 23
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 26
20617: PUSH
20618: LD_INT 36
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 101
20639: PUSH
20640: LD_INT 102
20642: PUSH
20643: LD_INT 105
20645: PUSH
20646: LD_INT 106
20648: PUSH
20649: LD_INT 108
20651: PUSH
20652: LD_INT 109
20654: PUSH
20655: LD_INT 112
20657: PUSH
20658: LD_INT 116
20660: PUSH
20661: LD_INT 117
20663: PUSH
20664: LD_INT 118
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: ST_TO_ADDR
20683: GO 23346
20685: LD_INT 6
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20825
20693: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20694: LD_ADDR_VAR 0 1
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: LD_INT 4
20704: PUSH
20705: LD_INT 5
20707: PUSH
20708: LD_INT 6
20710: PUSH
20711: LD_INT 8
20713: PUSH
20714: LD_INT 11
20716: PUSH
20717: LD_INT 12
20719: PUSH
20720: LD_INT 15
20722: PUSH
20723: LD_INT 16
20725: PUSH
20726: LD_INT 20
20728: PUSH
20729: LD_INT 21
20731: PUSH
20732: LD_INT 22
20734: PUSH
20735: LD_INT 23
20737: PUSH
20738: LD_INT 25
20740: PUSH
20741: LD_INT 26
20743: PUSH
20744: LD_INT 30
20746: PUSH
20747: LD_INT 31
20749: PUSH
20750: LD_INT 32
20752: PUSH
20753: LD_INT 36
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 101
20779: PUSH
20780: LD_INT 102
20782: PUSH
20783: LD_INT 105
20785: PUSH
20786: LD_INT 106
20788: PUSH
20789: LD_INT 108
20791: PUSH
20792: LD_INT 109
20794: PUSH
20795: LD_INT 112
20797: PUSH
20798: LD_INT 116
20800: PUSH
20801: LD_INT 117
20803: PUSH
20804: LD_INT 118
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: ST_TO_ADDR
20823: GO 23346
20825: LD_INT 7
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20945
20833: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20834: LD_ADDR_VAR 0 1
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 4
20844: PUSH
20845: LD_INT 5
20847: PUSH
20848: LD_INT 7
20850: PUSH
20851: LD_INT 11
20853: PUSH
20854: LD_INT 12
20856: PUSH
20857: LD_INT 15
20859: PUSH
20860: LD_INT 16
20862: PUSH
20863: LD_INT 20
20865: PUSH
20866: LD_INT 21
20868: PUSH
20869: LD_INT 22
20871: PUSH
20872: LD_INT 23
20874: PUSH
20875: LD_INT 25
20877: PUSH
20878: LD_INT 26
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 101
20899: PUSH
20900: LD_INT 102
20902: PUSH
20903: LD_INT 103
20905: PUSH
20906: LD_INT 105
20908: PUSH
20909: LD_INT 106
20911: PUSH
20912: LD_INT 108
20914: PUSH
20915: LD_INT 112
20917: PUSH
20918: LD_INT 116
20920: PUSH
20921: LD_INT 117
20923: PUSH
20924: LD_INT 118
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: ST_TO_ADDR
20943: GO 23346
20945: LD_INT 8
20947: DOUBLE
20948: EQUAL
20949: IFTRUE 20953
20951: GO 21093
20953: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20954: LD_ADDR_VAR 0 1
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 4
20964: PUSH
20965: LD_INT 5
20967: PUSH
20968: LD_INT 6
20970: PUSH
20971: LD_INT 7
20973: PUSH
20974: LD_INT 8
20976: PUSH
20977: LD_INT 11
20979: PUSH
20980: LD_INT 12
20982: PUSH
20983: LD_INT 15
20985: PUSH
20986: LD_INT 16
20988: PUSH
20989: LD_INT 20
20991: PUSH
20992: LD_INT 21
20994: PUSH
20995: LD_INT 22
20997: PUSH
20998: LD_INT 23
21000: PUSH
21001: LD_INT 25
21003: PUSH
21004: LD_INT 26
21006: PUSH
21007: LD_INT 30
21009: PUSH
21010: LD_INT 31
21012: PUSH
21013: LD_INT 32
21015: PUSH
21016: LD_INT 36
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 101
21043: PUSH
21044: LD_INT 102
21046: PUSH
21047: LD_INT 103
21049: PUSH
21050: LD_INT 105
21052: PUSH
21053: LD_INT 106
21055: PUSH
21056: LD_INT 108
21058: PUSH
21059: LD_INT 109
21061: PUSH
21062: LD_INT 112
21064: PUSH
21065: LD_INT 116
21067: PUSH
21068: LD_INT 117
21070: PUSH
21071: LD_INT 118
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: ST_TO_ADDR
21091: GO 23346
21093: LD_INT 9
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21249
21101: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21102: LD_ADDR_VAR 0 1
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: LD_INT 4
21112: PUSH
21113: LD_INT 5
21115: PUSH
21116: LD_INT 6
21118: PUSH
21119: LD_INT 7
21121: PUSH
21122: LD_INT 8
21124: PUSH
21125: LD_INT 11
21127: PUSH
21128: LD_INT 12
21130: PUSH
21131: LD_INT 15
21133: PUSH
21134: LD_INT 16
21136: PUSH
21137: LD_INT 20
21139: PUSH
21140: LD_INT 21
21142: PUSH
21143: LD_INT 22
21145: PUSH
21146: LD_INT 23
21148: PUSH
21149: LD_INT 25
21151: PUSH
21152: LD_INT 26
21154: PUSH
21155: LD_INT 28
21157: PUSH
21158: LD_INT 30
21160: PUSH
21161: LD_INT 31
21163: PUSH
21164: LD_INT 32
21166: PUSH
21167: LD_INT 36
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 101
21195: PUSH
21196: LD_INT 102
21198: PUSH
21199: LD_INT 103
21201: PUSH
21202: LD_INT 105
21204: PUSH
21205: LD_INT 106
21207: PUSH
21208: LD_INT 108
21210: PUSH
21211: LD_INT 109
21213: PUSH
21214: LD_INT 112
21216: PUSH
21217: LD_INT 114
21219: PUSH
21220: LD_INT 116
21222: PUSH
21223: LD_INT 117
21225: PUSH
21226: LD_INT 118
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: ST_TO_ADDR
21247: GO 23346
21249: LD_INT 10
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21453
21257: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21258: LD_ADDR_VAR 0 1
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: LD_INT 6
21274: PUSH
21275: LD_INT 7
21277: PUSH
21278: LD_INT 8
21280: PUSH
21281: LD_INT 9
21283: PUSH
21284: LD_INT 10
21286: PUSH
21287: LD_INT 11
21289: PUSH
21290: LD_INT 12
21292: PUSH
21293: LD_INT 13
21295: PUSH
21296: LD_INT 14
21298: PUSH
21299: LD_INT 15
21301: PUSH
21302: LD_INT 16
21304: PUSH
21305: LD_INT 17
21307: PUSH
21308: LD_INT 18
21310: PUSH
21311: LD_INT 19
21313: PUSH
21314: LD_INT 20
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_INT 23
21325: PUSH
21326: LD_INT 24
21328: PUSH
21329: LD_INT 25
21331: PUSH
21332: LD_INT 26
21334: PUSH
21335: LD_INT 28
21337: PUSH
21338: LD_INT 30
21340: PUSH
21341: LD_INT 31
21343: PUSH
21344: LD_INT 32
21346: PUSH
21347: LD_INT 36
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 101
21383: PUSH
21384: LD_INT 102
21386: PUSH
21387: LD_INT 103
21389: PUSH
21390: LD_INT 104
21392: PUSH
21393: LD_INT 105
21395: PUSH
21396: LD_INT 106
21398: PUSH
21399: LD_INT 107
21401: PUSH
21402: LD_INT 108
21404: PUSH
21405: LD_INT 109
21407: PUSH
21408: LD_INT 110
21410: PUSH
21411: LD_INT 111
21413: PUSH
21414: LD_INT 112
21416: PUSH
21417: LD_INT 114
21419: PUSH
21420: LD_INT 116
21422: PUSH
21423: LD_INT 117
21425: PUSH
21426: LD_INT 118
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: ST_TO_ADDR
21451: GO 23346
21453: LD_INT 11
21455: DOUBLE
21456: EQUAL
21457: IFTRUE 21461
21459: GO 21665
21461: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21462: LD_ADDR_VAR 0 1
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 3
21472: PUSH
21473: LD_INT 4
21475: PUSH
21476: LD_INT 5
21478: PUSH
21479: LD_INT 6
21481: PUSH
21482: LD_INT 7
21484: PUSH
21485: LD_INT 8
21487: PUSH
21488: LD_INT 9
21490: PUSH
21491: LD_INT 10
21493: PUSH
21494: LD_INT 11
21496: PUSH
21497: LD_INT 12
21499: PUSH
21500: LD_INT 13
21502: PUSH
21503: LD_INT 14
21505: PUSH
21506: LD_INT 15
21508: PUSH
21509: LD_INT 16
21511: PUSH
21512: LD_INT 17
21514: PUSH
21515: LD_INT 18
21517: PUSH
21518: LD_INT 19
21520: PUSH
21521: LD_INT 20
21523: PUSH
21524: LD_INT 21
21526: PUSH
21527: LD_INT 22
21529: PUSH
21530: LD_INT 23
21532: PUSH
21533: LD_INT 24
21535: PUSH
21536: LD_INT 25
21538: PUSH
21539: LD_INT 26
21541: PUSH
21542: LD_INT 28
21544: PUSH
21545: LD_INT 30
21547: PUSH
21548: LD_INT 31
21550: PUSH
21551: LD_INT 32
21553: PUSH
21554: LD_INT 34
21556: PUSH
21557: LD_INT 36
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 101
21595: PUSH
21596: LD_INT 102
21598: PUSH
21599: LD_INT 103
21601: PUSH
21602: LD_INT 104
21604: PUSH
21605: LD_INT 105
21607: PUSH
21608: LD_INT 106
21610: PUSH
21611: LD_INT 107
21613: PUSH
21614: LD_INT 108
21616: PUSH
21617: LD_INT 109
21619: PUSH
21620: LD_INT 110
21622: PUSH
21623: LD_INT 111
21625: PUSH
21626: LD_INT 112
21628: PUSH
21629: LD_INT 114
21631: PUSH
21632: LD_INT 116
21634: PUSH
21635: LD_INT 117
21637: PUSH
21638: LD_INT 118
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: ST_TO_ADDR
21663: GO 23346
21665: LD_INT 12
21667: DOUBLE
21668: EQUAL
21669: IFTRUE 21673
21671: GO 21893
21673: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21674: LD_ADDR_VAR 0 1
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: LD_INT 2
21684: PUSH
21685: LD_INT 3
21687: PUSH
21688: LD_INT 4
21690: PUSH
21691: LD_INT 5
21693: PUSH
21694: LD_INT 6
21696: PUSH
21697: LD_INT 7
21699: PUSH
21700: LD_INT 8
21702: PUSH
21703: LD_INT 9
21705: PUSH
21706: LD_INT 10
21708: PUSH
21709: LD_INT 11
21711: PUSH
21712: LD_INT 12
21714: PUSH
21715: LD_INT 13
21717: PUSH
21718: LD_INT 14
21720: PUSH
21721: LD_INT 15
21723: PUSH
21724: LD_INT 16
21726: PUSH
21727: LD_INT 17
21729: PUSH
21730: LD_INT 18
21732: PUSH
21733: LD_INT 19
21735: PUSH
21736: LD_INT 20
21738: PUSH
21739: LD_INT 21
21741: PUSH
21742: LD_INT 22
21744: PUSH
21745: LD_INT 23
21747: PUSH
21748: LD_INT 24
21750: PUSH
21751: LD_INT 25
21753: PUSH
21754: LD_INT 26
21756: PUSH
21757: LD_INT 27
21759: PUSH
21760: LD_INT 28
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: LD_INT 31
21768: PUSH
21769: LD_INT 32
21771: PUSH
21772: LD_INT 33
21774: PUSH
21775: LD_INT 34
21777: PUSH
21778: LD_INT 36
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 101
21819: PUSH
21820: LD_INT 102
21822: PUSH
21823: LD_INT 103
21825: PUSH
21826: LD_INT 104
21828: PUSH
21829: LD_INT 105
21831: PUSH
21832: LD_INT 106
21834: PUSH
21835: LD_INT 107
21837: PUSH
21838: LD_INT 108
21840: PUSH
21841: LD_INT 109
21843: PUSH
21844: LD_INT 110
21846: PUSH
21847: LD_INT 111
21849: PUSH
21850: LD_INT 112
21852: PUSH
21853: LD_INT 113
21855: PUSH
21856: LD_INT 114
21858: PUSH
21859: LD_INT 116
21861: PUSH
21862: LD_INT 117
21864: PUSH
21865: LD_INT 118
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: ST_TO_ADDR
21891: GO 23346
21893: LD_INT 13
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 22109
21901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21902: LD_ADDR_VAR 0 1
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: LD_INT 3
21915: PUSH
21916: LD_INT 4
21918: PUSH
21919: LD_INT 5
21921: PUSH
21922: LD_INT 8
21924: PUSH
21925: LD_INT 9
21927: PUSH
21928: LD_INT 10
21930: PUSH
21931: LD_INT 11
21933: PUSH
21934: LD_INT 12
21936: PUSH
21937: LD_INT 14
21939: PUSH
21940: LD_INT 15
21942: PUSH
21943: LD_INT 16
21945: PUSH
21946: LD_INT 17
21948: PUSH
21949: LD_INT 18
21951: PUSH
21952: LD_INT 19
21954: PUSH
21955: LD_INT 20
21957: PUSH
21958: LD_INT 21
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_INT 23
21966: PUSH
21967: LD_INT 24
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 27
21978: PUSH
21979: LD_INT 28
21981: PUSH
21982: LD_INT 30
21984: PUSH
21985: LD_INT 31
21987: PUSH
21988: LD_INT 32
21990: PUSH
21991: LD_INT 33
21993: PUSH
21994: LD_INT 34
21996: PUSH
21997: LD_INT 36
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 101
22035: PUSH
22036: LD_INT 102
22038: PUSH
22039: LD_INT 103
22041: PUSH
22042: LD_INT 104
22044: PUSH
22045: LD_INT 105
22047: PUSH
22048: LD_INT 106
22050: PUSH
22051: LD_INT 107
22053: PUSH
22054: LD_INT 108
22056: PUSH
22057: LD_INT 109
22059: PUSH
22060: LD_INT 110
22062: PUSH
22063: LD_INT 111
22065: PUSH
22066: LD_INT 112
22068: PUSH
22069: LD_INT 113
22071: PUSH
22072: LD_INT 114
22074: PUSH
22075: LD_INT 116
22077: PUSH
22078: LD_INT 117
22080: PUSH
22081: LD_INT 118
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: ST_TO_ADDR
22107: GO 23346
22109: LD_INT 14
22111: DOUBLE
22112: EQUAL
22113: IFTRUE 22117
22115: GO 22341
22117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22118: LD_ADDR_VAR 0 1
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: LD_INT 3
22131: PUSH
22132: LD_INT 4
22134: PUSH
22135: LD_INT 5
22137: PUSH
22138: LD_INT 6
22140: PUSH
22141: LD_INT 7
22143: PUSH
22144: LD_INT 8
22146: PUSH
22147: LD_INT 9
22149: PUSH
22150: LD_INT 10
22152: PUSH
22153: LD_INT 11
22155: PUSH
22156: LD_INT 12
22158: PUSH
22159: LD_INT 13
22161: PUSH
22162: LD_INT 14
22164: PUSH
22165: LD_INT 15
22167: PUSH
22168: LD_INT 16
22170: PUSH
22171: LD_INT 17
22173: PUSH
22174: LD_INT 18
22176: PUSH
22177: LD_INT 19
22179: PUSH
22180: LD_INT 20
22182: PUSH
22183: LD_INT 21
22185: PUSH
22186: LD_INT 22
22188: PUSH
22189: LD_INT 23
22191: PUSH
22192: LD_INT 24
22194: PUSH
22195: LD_INT 25
22197: PUSH
22198: LD_INT 26
22200: PUSH
22201: LD_INT 27
22203: PUSH
22204: LD_INT 28
22206: PUSH
22207: LD_INT 29
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 31
22215: PUSH
22216: LD_INT 32
22218: PUSH
22219: LD_INT 33
22221: PUSH
22222: LD_INT 34
22224: PUSH
22225: LD_INT 36
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 101
22267: PUSH
22268: LD_INT 102
22270: PUSH
22271: LD_INT 103
22273: PUSH
22274: LD_INT 104
22276: PUSH
22277: LD_INT 105
22279: PUSH
22280: LD_INT 106
22282: PUSH
22283: LD_INT 107
22285: PUSH
22286: LD_INT 108
22288: PUSH
22289: LD_INT 109
22291: PUSH
22292: LD_INT 110
22294: PUSH
22295: LD_INT 111
22297: PUSH
22298: LD_INT 112
22300: PUSH
22301: LD_INT 113
22303: PUSH
22304: LD_INT 114
22306: PUSH
22307: LD_INT 116
22309: PUSH
22310: LD_INT 117
22312: PUSH
22313: LD_INT 118
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: ST_TO_ADDR
22339: GO 23346
22341: LD_INT 15
22343: DOUBLE
22344: EQUAL
22345: IFTRUE 22349
22347: GO 22573
22349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22350: LD_ADDR_VAR 0 1
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 3
22363: PUSH
22364: LD_INT 4
22366: PUSH
22367: LD_INT 5
22369: PUSH
22370: LD_INT 6
22372: PUSH
22373: LD_INT 7
22375: PUSH
22376: LD_INT 8
22378: PUSH
22379: LD_INT 9
22381: PUSH
22382: LD_INT 10
22384: PUSH
22385: LD_INT 11
22387: PUSH
22388: LD_INT 12
22390: PUSH
22391: LD_INT 13
22393: PUSH
22394: LD_INT 14
22396: PUSH
22397: LD_INT 15
22399: PUSH
22400: LD_INT 16
22402: PUSH
22403: LD_INT 17
22405: PUSH
22406: LD_INT 18
22408: PUSH
22409: LD_INT 19
22411: PUSH
22412: LD_INT 20
22414: PUSH
22415: LD_INT 21
22417: PUSH
22418: LD_INT 22
22420: PUSH
22421: LD_INT 23
22423: PUSH
22424: LD_INT 24
22426: PUSH
22427: LD_INT 25
22429: PUSH
22430: LD_INT 26
22432: PUSH
22433: LD_INT 27
22435: PUSH
22436: LD_INT 28
22438: PUSH
22439: LD_INT 29
22441: PUSH
22442: LD_INT 30
22444: PUSH
22445: LD_INT 31
22447: PUSH
22448: LD_INT 32
22450: PUSH
22451: LD_INT 33
22453: PUSH
22454: LD_INT 34
22456: PUSH
22457: LD_INT 36
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 101
22499: PUSH
22500: LD_INT 102
22502: PUSH
22503: LD_INT 103
22505: PUSH
22506: LD_INT 104
22508: PUSH
22509: LD_INT 105
22511: PUSH
22512: LD_INT 106
22514: PUSH
22515: LD_INT 107
22517: PUSH
22518: LD_INT 108
22520: PUSH
22521: LD_INT 109
22523: PUSH
22524: LD_INT 110
22526: PUSH
22527: LD_INT 111
22529: PUSH
22530: LD_INT 112
22532: PUSH
22533: LD_INT 113
22535: PUSH
22536: LD_INT 114
22538: PUSH
22539: LD_INT 116
22541: PUSH
22542: LD_INT 117
22544: PUSH
22545: LD_INT 118
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: ST_TO_ADDR
22571: GO 23346
22573: LD_INT 16
22575: DOUBLE
22576: EQUAL
22577: IFTRUE 22581
22579: GO 22717
22581: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22582: LD_ADDR_VAR 0 1
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 4
22592: PUSH
22593: LD_INT 5
22595: PUSH
22596: LD_INT 7
22598: PUSH
22599: LD_INT 11
22601: PUSH
22602: LD_INT 12
22604: PUSH
22605: LD_INT 15
22607: PUSH
22608: LD_INT 16
22610: PUSH
22611: LD_INT 20
22613: PUSH
22614: LD_INT 21
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_INT 23
22622: PUSH
22623: LD_INT 25
22625: PUSH
22626: LD_INT 26
22628: PUSH
22629: LD_INT 30
22631: PUSH
22632: LD_INT 31
22634: PUSH
22635: LD_INT 32
22637: PUSH
22638: LD_INT 33
22640: PUSH
22641: LD_INT 34
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 101
22667: PUSH
22668: LD_INT 102
22670: PUSH
22671: LD_INT 103
22673: PUSH
22674: LD_INT 106
22676: PUSH
22677: LD_INT 108
22679: PUSH
22680: LD_INT 112
22682: PUSH
22683: LD_INT 113
22685: PUSH
22686: LD_INT 114
22688: PUSH
22689: LD_INT 116
22691: PUSH
22692: LD_INT 117
22694: PUSH
22695: LD_INT 118
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: ST_TO_ADDR
22715: GO 23346
22717: LD_INT 17
22719: DOUBLE
22720: EQUAL
22721: IFTRUE 22725
22723: GO 22949
22725: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22726: LD_ADDR_VAR 0 1
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: LD_INT 3
22739: PUSH
22740: LD_INT 4
22742: PUSH
22743: LD_INT 5
22745: PUSH
22746: LD_INT 6
22748: PUSH
22749: LD_INT 7
22751: PUSH
22752: LD_INT 8
22754: PUSH
22755: LD_INT 9
22757: PUSH
22758: LD_INT 10
22760: PUSH
22761: LD_INT 11
22763: PUSH
22764: LD_INT 12
22766: PUSH
22767: LD_INT 13
22769: PUSH
22770: LD_INT 14
22772: PUSH
22773: LD_INT 15
22775: PUSH
22776: LD_INT 16
22778: PUSH
22779: LD_INT 17
22781: PUSH
22782: LD_INT 18
22784: PUSH
22785: LD_INT 19
22787: PUSH
22788: LD_INT 20
22790: PUSH
22791: LD_INT 21
22793: PUSH
22794: LD_INT 22
22796: PUSH
22797: LD_INT 23
22799: PUSH
22800: LD_INT 24
22802: PUSH
22803: LD_INT 25
22805: PUSH
22806: LD_INT 26
22808: PUSH
22809: LD_INT 27
22811: PUSH
22812: LD_INT 28
22814: PUSH
22815: LD_INT 29
22817: PUSH
22818: LD_INT 30
22820: PUSH
22821: LD_INT 31
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: LD_INT 33
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 36
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 101
22875: PUSH
22876: LD_INT 102
22878: PUSH
22879: LD_INT 103
22881: PUSH
22882: LD_INT 104
22884: PUSH
22885: LD_INT 105
22887: PUSH
22888: LD_INT 106
22890: PUSH
22891: LD_INT 107
22893: PUSH
22894: LD_INT 108
22896: PUSH
22897: LD_INT 109
22899: PUSH
22900: LD_INT 110
22902: PUSH
22903: LD_INT 111
22905: PUSH
22906: LD_INT 112
22908: PUSH
22909: LD_INT 113
22911: PUSH
22912: LD_INT 114
22914: PUSH
22915: LD_INT 116
22917: PUSH
22918: LD_INT 117
22920: PUSH
22921: LD_INT 118
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: ST_TO_ADDR
22947: GO 23346
22949: LD_INT 18
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 23105
22957: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22958: LD_ADDR_VAR 0 1
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: LD_INT 4
22968: PUSH
22969: LD_INT 5
22971: PUSH
22972: LD_INT 7
22974: PUSH
22975: LD_INT 11
22977: PUSH
22978: LD_INT 12
22980: PUSH
22981: LD_INT 15
22983: PUSH
22984: LD_INT 16
22986: PUSH
22987: LD_INT 20
22989: PUSH
22990: LD_INT 21
22992: PUSH
22993: LD_INT 22
22995: PUSH
22996: LD_INT 23
22998: PUSH
22999: LD_INT 25
23001: PUSH
23002: LD_INT 26
23004: PUSH
23005: LD_INT 30
23007: PUSH
23008: LD_INT 31
23010: PUSH
23011: LD_INT 32
23013: PUSH
23014: LD_INT 33
23016: PUSH
23017: LD_INT 34
23019: PUSH
23020: LD_INT 35
23022: PUSH
23023: LD_INT 36
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 101
23051: PUSH
23052: LD_INT 102
23054: PUSH
23055: LD_INT 103
23057: PUSH
23058: LD_INT 106
23060: PUSH
23061: LD_INT 108
23063: PUSH
23064: LD_INT 112
23066: PUSH
23067: LD_INT 113
23069: PUSH
23070: LD_INT 114
23072: PUSH
23073: LD_INT 115
23075: PUSH
23076: LD_INT 116
23078: PUSH
23079: LD_INT 117
23081: PUSH
23082: LD_INT 118
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: ST_TO_ADDR
23103: GO 23346
23105: LD_INT 19
23107: DOUBLE
23108: EQUAL
23109: IFTRUE 23113
23111: GO 23345
23113: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23114: LD_ADDR_VAR 0 1
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: LD_INT 3
23127: PUSH
23128: LD_INT 4
23130: PUSH
23131: LD_INT 5
23133: PUSH
23134: LD_INT 6
23136: PUSH
23137: LD_INT 7
23139: PUSH
23140: LD_INT 8
23142: PUSH
23143: LD_INT 9
23145: PUSH
23146: LD_INT 10
23148: PUSH
23149: LD_INT 11
23151: PUSH
23152: LD_INT 12
23154: PUSH
23155: LD_INT 13
23157: PUSH
23158: LD_INT 14
23160: PUSH
23161: LD_INT 15
23163: PUSH
23164: LD_INT 16
23166: PUSH
23167: LD_INT 17
23169: PUSH
23170: LD_INT 18
23172: PUSH
23173: LD_INT 19
23175: PUSH
23176: LD_INT 20
23178: PUSH
23179: LD_INT 21
23181: PUSH
23182: LD_INT 22
23184: PUSH
23185: LD_INT 23
23187: PUSH
23188: LD_INT 24
23190: PUSH
23191: LD_INT 25
23193: PUSH
23194: LD_INT 26
23196: PUSH
23197: LD_INT 27
23199: PUSH
23200: LD_INT 28
23202: PUSH
23203: LD_INT 29
23205: PUSH
23206: LD_INT 30
23208: PUSH
23209: LD_INT 31
23211: PUSH
23212: LD_INT 32
23214: PUSH
23215: LD_INT 33
23217: PUSH
23218: LD_INT 34
23220: PUSH
23221: LD_INT 35
23223: PUSH
23224: LD_INT 36
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 101
23267: PUSH
23268: LD_INT 102
23270: PUSH
23271: LD_INT 103
23273: PUSH
23274: LD_INT 104
23276: PUSH
23277: LD_INT 105
23279: PUSH
23280: LD_INT 106
23282: PUSH
23283: LD_INT 107
23285: PUSH
23286: LD_INT 108
23288: PUSH
23289: LD_INT 109
23291: PUSH
23292: LD_INT 110
23294: PUSH
23295: LD_INT 111
23297: PUSH
23298: LD_INT 112
23300: PUSH
23301: LD_INT 113
23303: PUSH
23304: LD_INT 114
23306: PUSH
23307: LD_INT 115
23309: PUSH
23310: LD_INT 116
23312: PUSH
23313: LD_INT 117
23315: PUSH
23316: LD_INT 118
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
23343: GO 23346
23345: POP
// end else
23346: GO 23577
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23348: LD_ADDR_VAR 0 1
23352: PUSH
23353: LD_INT 1
23355: PUSH
23356: LD_INT 2
23358: PUSH
23359: LD_INT 3
23361: PUSH
23362: LD_INT 4
23364: PUSH
23365: LD_INT 5
23367: PUSH
23368: LD_INT 6
23370: PUSH
23371: LD_INT 7
23373: PUSH
23374: LD_INT 8
23376: PUSH
23377: LD_INT 9
23379: PUSH
23380: LD_INT 10
23382: PUSH
23383: LD_INT 11
23385: PUSH
23386: LD_INT 12
23388: PUSH
23389: LD_INT 13
23391: PUSH
23392: LD_INT 14
23394: PUSH
23395: LD_INT 15
23397: PUSH
23398: LD_INT 16
23400: PUSH
23401: LD_INT 17
23403: PUSH
23404: LD_INT 18
23406: PUSH
23407: LD_INT 19
23409: PUSH
23410: LD_INT 20
23412: PUSH
23413: LD_INT 21
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_INT 23
23421: PUSH
23422: LD_INT 24
23424: PUSH
23425: LD_INT 25
23427: PUSH
23428: LD_INT 26
23430: PUSH
23431: LD_INT 27
23433: PUSH
23434: LD_INT 28
23436: PUSH
23437: LD_INT 29
23439: PUSH
23440: LD_INT 30
23442: PUSH
23443: LD_INT 31
23445: PUSH
23446: LD_INT 32
23448: PUSH
23449: LD_INT 33
23451: PUSH
23452: LD_INT 34
23454: PUSH
23455: LD_INT 35
23457: PUSH
23458: LD_INT 36
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 101
23501: PUSH
23502: LD_INT 102
23504: PUSH
23505: LD_INT 103
23507: PUSH
23508: LD_INT 104
23510: PUSH
23511: LD_INT 105
23513: PUSH
23514: LD_INT 106
23516: PUSH
23517: LD_INT 107
23519: PUSH
23520: LD_INT 108
23522: PUSH
23523: LD_INT 109
23525: PUSH
23526: LD_INT 110
23528: PUSH
23529: LD_INT 111
23531: PUSH
23532: LD_INT 112
23534: PUSH
23535: LD_INT 113
23537: PUSH
23538: LD_INT 114
23540: PUSH
23541: LD_INT 115
23543: PUSH
23544: LD_INT 116
23546: PUSH
23547: LD_INT 117
23549: PUSH
23550: LD_INT 118
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// if result then
23577: LD_VAR 0 1
23581: IFFALSE 23870
// begin normal :=  ;
23583: LD_ADDR_VAR 0 3
23587: PUSH
23588: LD_STRING 
23590: ST_TO_ADDR
// hardcore :=  ;
23591: LD_ADDR_VAR 0 4
23595: PUSH
23596: LD_STRING 
23598: ST_TO_ADDR
// for i = 1 to normalCounter do
23599: LD_ADDR_VAR 0 5
23603: PUSH
23604: DOUBLE
23605: LD_INT 1
23607: DEC
23608: ST_TO_ADDR
23609: LD_EXP 76
23613: PUSH
23614: FOR_TO
23615: IFFALSE 23716
// begin tmp := 0 ;
23617: LD_ADDR_VAR 0 2
23621: PUSH
23622: LD_STRING 0
23624: ST_TO_ADDR
// if result [ 1 ] then
23625: LD_VAR 0 1
23629: PUSH
23630: LD_INT 1
23632: ARRAY
23633: IFFALSE 23698
// if result [ 1 ] [ 1 ] = i then
23635: LD_VAR 0 1
23639: PUSH
23640: LD_INT 1
23642: ARRAY
23643: PUSH
23644: LD_INT 1
23646: ARRAY
23647: PUSH
23648: LD_VAR 0 5
23652: EQUAL
23653: IFFALSE 23698
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23655: LD_ADDR_VAR 0 1
23659: PUSH
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_INT 1
23667: PPUSH
23668: LD_VAR 0 1
23672: PUSH
23673: LD_INT 1
23675: ARRAY
23676: PPUSH
23677: LD_INT 1
23679: PPUSH
23680: CALL_OW 3
23684: PPUSH
23685: CALL_OW 1
23689: ST_TO_ADDR
// tmp := 1 ;
23690: LD_ADDR_VAR 0 2
23694: PUSH
23695: LD_STRING 1
23697: ST_TO_ADDR
// end ; normal := normal & tmp ;
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: LD_VAR 0 3
23707: PUSH
23708: LD_VAR 0 2
23712: STR
23713: ST_TO_ADDR
// end ;
23714: GO 23614
23716: POP
23717: POP
// for i = 1 to hardcoreCounter do
23718: LD_ADDR_VAR 0 5
23722: PUSH
23723: DOUBLE
23724: LD_INT 1
23726: DEC
23727: ST_TO_ADDR
23728: LD_EXP 77
23732: PUSH
23733: FOR_TO
23734: IFFALSE 23839
// begin tmp := 0 ;
23736: LD_ADDR_VAR 0 2
23740: PUSH
23741: LD_STRING 0
23743: ST_TO_ADDR
// if result [ 2 ] then
23744: LD_VAR 0 1
23748: PUSH
23749: LD_INT 2
23751: ARRAY
23752: IFFALSE 23821
// if result [ 2 ] [ 1 ] = 100 + i then
23754: LD_VAR 0 1
23758: PUSH
23759: LD_INT 2
23761: ARRAY
23762: PUSH
23763: LD_INT 1
23765: ARRAY
23766: PUSH
23767: LD_INT 100
23769: PUSH
23770: LD_VAR 0 5
23774: PLUS
23775: EQUAL
23776: IFFALSE 23821
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23778: LD_ADDR_VAR 0 1
23782: PUSH
23783: LD_VAR 0 1
23787: PPUSH
23788: LD_INT 2
23790: PPUSH
23791: LD_VAR 0 1
23795: PUSH
23796: LD_INT 2
23798: ARRAY
23799: PPUSH
23800: LD_INT 1
23802: PPUSH
23803: CALL_OW 3
23807: PPUSH
23808: CALL_OW 1
23812: ST_TO_ADDR
// tmp := 1 ;
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_STRING 1
23820: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23821: LD_ADDR_VAR 0 4
23825: PUSH
23826: LD_VAR 0 4
23830: PUSH
23831: LD_VAR 0 2
23835: STR
23836: ST_TO_ADDR
// end ;
23837: GO 23733
23839: POP
23840: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23841: LD_STRING getStreamItemsFromMission("
23843: PUSH
23844: LD_VAR 0 3
23848: STR
23849: PUSH
23850: LD_STRING ","
23852: STR
23853: PUSH
23854: LD_VAR 0 4
23858: STR
23859: PUSH
23860: LD_STRING ")
23862: STR
23863: PPUSH
23864: CALL_OW 559
// end else
23868: GO 23877
// ToLua ( getStreamItemsFromMission("","") ) ;
23870: LD_STRING getStreamItemsFromMission("","")
23872: PPUSH
23873: CALL_OW 559
// end ;
23877: LD_VAR 0 1
23881: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23882: LD_EXP 75
23886: PUSH
23887: LD_EXP 80
23891: AND
23892: IFFALSE 24016
23894: GO 23896
23896: DISABLE
23897: LD_INT 0
23899: PPUSH
23900: PPUSH
// begin enable ;
23901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23902: LD_ADDR_VAR 0 2
23906: PUSH
23907: LD_INT 22
23909: PUSH
23910: LD_OWVAR 2
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: LD_INT 34
23924: PUSH
23925: LD_INT 7
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 34
23934: PUSH
23935: LD_INT 45
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 34
23944: PUSH
23945: LD_INT 28
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 34
23954: PUSH
23955: LD_INT 47
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PPUSH
23973: CALL_OW 69
23977: ST_TO_ADDR
// if not tmp then
23978: LD_VAR 0 2
23982: NOT
23983: IFFALSE 23987
// exit ;
23985: GO 24016
// for i in tmp do
23987: LD_ADDR_VAR 0 1
23991: PUSH
23992: LD_VAR 0 2
23996: PUSH
23997: FOR_IN
23998: IFFALSE 24014
// begin SetLives ( i , 0 ) ;
24000: LD_VAR 0 1
24004: PPUSH
24005: LD_INT 0
24007: PPUSH
24008: CALL_OW 234
// end ;
24012: GO 23997
24014: POP
24015: POP
// end ;
24016: PPOPN 2
24018: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24019: LD_EXP 75
24023: PUSH
24024: LD_EXP 81
24028: AND
24029: IFFALSE 24113
24031: GO 24033
24033: DISABLE
24034: LD_INT 0
24036: PPUSH
24037: PPUSH
// begin enable ;
24038: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24039: LD_ADDR_VAR 0 2
24043: PUSH
24044: LD_INT 22
24046: PUSH
24047: LD_OWVAR 2
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 32
24058: PUSH
24059: LD_INT 3
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PPUSH
24070: CALL_OW 69
24074: ST_TO_ADDR
// if not tmp then
24075: LD_VAR 0 2
24079: NOT
24080: IFFALSE 24084
// exit ;
24082: GO 24113
// for i in tmp do
24084: LD_ADDR_VAR 0 1
24088: PUSH
24089: LD_VAR 0 2
24093: PUSH
24094: FOR_IN
24095: IFFALSE 24111
// begin SetLives ( i , 0 ) ;
24097: LD_VAR 0 1
24101: PPUSH
24102: LD_INT 0
24104: PPUSH
24105: CALL_OW 234
// end ;
24109: GO 24094
24111: POP
24112: POP
// end ;
24113: PPOPN 2
24115: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24116: LD_EXP 75
24120: PUSH
24121: LD_EXP 78
24125: AND
24126: IFFALSE 24219
24128: GO 24130
24130: DISABLE
24131: LD_INT 0
24133: PPUSH
// begin enable ;
24134: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24135: LD_ADDR_VAR 0 1
24139: PUSH
24140: LD_INT 22
24142: PUSH
24143: LD_OWVAR 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: LD_INT 25
24157: PUSH
24158: LD_INT 5
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 25
24167: PUSH
24168: LD_INT 9
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 25
24177: PUSH
24178: LD_INT 8
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PPUSH
24195: CALL_OW 69
24199: PUSH
24200: FOR_IN
24201: IFFALSE 24217
// begin SetClass ( i , 1 ) ;
24203: LD_VAR 0 1
24207: PPUSH
24208: LD_INT 1
24210: PPUSH
24211: CALL_OW 336
// end ;
24215: GO 24200
24217: POP
24218: POP
// end ;
24219: PPOPN 1
24221: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24222: LD_EXP 75
24226: PUSH
24227: LD_EXP 79
24231: AND
24232: PUSH
24233: LD_OWVAR 65
24237: PUSH
24238: LD_INT 7
24240: LESS
24241: AND
24242: IFFALSE 24256
24244: GO 24246
24246: DISABLE
// begin enable ;
24247: ENABLE
// game_speed := 7 ;
24248: LD_ADDR_OWVAR 65
24252: PUSH
24253: LD_INT 7
24255: ST_TO_ADDR
// end ;
24256: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24257: LD_EXP 75
24261: PUSH
24262: LD_EXP 82
24266: AND
24267: IFFALSE 24469
24269: GO 24271
24271: DISABLE
24272: LD_INT 0
24274: PPUSH
24275: PPUSH
24276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24277: LD_ADDR_VAR 0 3
24281: PUSH
24282: LD_INT 81
24284: PUSH
24285: LD_OWVAR 2
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 21
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PPUSH
24308: CALL_OW 69
24312: ST_TO_ADDR
// if not tmp then
24313: LD_VAR 0 3
24317: NOT
24318: IFFALSE 24322
// exit ;
24320: GO 24469
// if tmp > 5 then
24322: LD_VAR 0 3
24326: PUSH
24327: LD_INT 5
24329: GREATER
24330: IFFALSE 24342
// k := 5 else
24332: LD_ADDR_VAR 0 2
24336: PUSH
24337: LD_INT 5
24339: ST_TO_ADDR
24340: GO 24352
// k := tmp ;
24342: LD_ADDR_VAR 0 2
24346: PUSH
24347: LD_VAR 0 3
24351: ST_TO_ADDR
// for i := 1 to k do
24352: LD_ADDR_VAR 0 1
24356: PUSH
24357: DOUBLE
24358: LD_INT 1
24360: DEC
24361: ST_TO_ADDR
24362: LD_VAR 0 2
24366: PUSH
24367: FOR_TO
24368: IFFALSE 24467
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24370: LD_VAR 0 3
24374: PUSH
24375: LD_VAR 0 1
24379: ARRAY
24380: PPUSH
24381: LD_VAR 0 1
24385: PUSH
24386: LD_INT 4
24388: MOD
24389: PUSH
24390: LD_INT 1
24392: PLUS
24393: PPUSH
24394: CALL_OW 259
24398: PUSH
24399: LD_INT 10
24401: LESS
24402: IFFALSE 24465
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24404: LD_VAR 0 3
24408: PUSH
24409: LD_VAR 0 1
24413: ARRAY
24414: PPUSH
24415: LD_VAR 0 1
24419: PUSH
24420: LD_INT 4
24422: MOD
24423: PUSH
24424: LD_INT 1
24426: PLUS
24427: PPUSH
24428: LD_VAR 0 3
24432: PUSH
24433: LD_VAR 0 1
24437: ARRAY
24438: PPUSH
24439: LD_VAR 0 1
24443: PUSH
24444: LD_INT 4
24446: MOD
24447: PUSH
24448: LD_INT 1
24450: PLUS
24451: PPUSH
24452: CALL_OW 259
24456: PUSH
24457: LD_INT 1
24459: PLUS
24460: PPUSH
24461: CALL_OW 237
24465: GO 24367
24467: POP
24468: POP
// end ;
24469: PPOPN 3
24471: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24472: LD_EXP 75
24476: PUSH
24477: LD_EXP 83
24481: AND
24482: IFFALSE 24502
24484: GO 24486
24486: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24487: LD_INT 4
24489: PPUSH
24490: LD_OWVAR 2
24494: PPUSH
24495: LD_INT 0
24497: PPUSH
24498: CALL_OW 324
24502: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24503: LD_EXP 75
24507: PUSH
24508: LD_EXP 112
24512: AND
24513: IFFALSE 24533
24515: GO 24517
24517: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24518: LD_INT 19
24520: PPUSH
24521: LD_OWVAR 2
24525: PPUSH
24526: LD_INT 0
24528: PPUSH
24529: CALL_OW 324
24533: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24534: LD_EXP 75
24538: PUSH
24539: LD_EXP 84
24543: AND
24544: IFFALSE 24646
24546: GO 24548
24548: DISABLE
24549: LD_INT 0
24551: PPUSH
24552: PPUSH
// begin enable ;
24553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24554: LD_ADDR_VAR 0 2
24558: PUSH
24559: LD_INT 22
24561: PUSH
24562: LD_OWVAR 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 34
24576: PUSH
24577: LD_INT 11
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 34
24586: PUSH
24587: LD_INT 30
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PPUSH
24603: CALL_OW 69
24607: ST_TO_ADDR
// if not tmp then
24608: LD_VAR 0 2
24612: NOT
24613: IFFALSE 24617
// exit ;
24615: GO 24646
// for i in tmp do
24617: LD_ADDR_VAR 0 1
24621: PUSH
24622: LD_VAR 0 2
24626: PUSH
24627: FOR_IN
24628: IFFALSE 24644
// begin SetLives ( i , 0 ) ;
24630: LD_VAR 0 1
24634: PPUSH
24635: LD_INT 0
24637: PPUSH
24638: CALL_OW 234
// end ;
24642: GO 24627
24644: POP
24645: POP
// end ;
24646: PPOPN 2
24648: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24649: LD_EXP 75
24653: PUSH
24654: LD_EXP 85
24658: AND
24659: IFFALSE 24679
24661: GO 24663
24663: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24664: LD_INT 32
24666: PPUSH
24667: LD_OWVAR 2
24671: PPUSH
24672: LD_INT 0
24674: PPUSH
24675: CALL_OW 324
24679: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24680: LD_EXP 75
24684: PUSH
24685: LD_EXP 86
24689: AND
24690: IFFALSE 24871
24692: GO 24694
24694: DISABLE
24695: LD_INT 0
24697: PPUSH
24698: PPUSH
24699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24700: LD_ADDR_VAR 0 2
24704: PUSH
24705: LD_INT 22
24707: PUSH
24708: LD_OWVAR 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 33
24719: PUSH
24720: LD_INT 3
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PPUSH
24731: CALL_OW 69
24735: ST_TO_ADDR
// if not tmp then
24736: LD_VAR 0 2
24740: NOT
24741: IFFALSE 24745
// exit ;
24743: GO 24871
// side := 0 ;
24745: LD_ADDR_VAR 0 3
24749: PUSH
24750: LD_INT 0
24752: ST_TO_ADDR
// for i := 1 to 8 do
24753: LD_ADDR_VAR 0 1
24757: PUSH
24758: DOUBLE
24759: LD_INT 1
24761: DEC
24762: ST_TO_ADDR
24763: LD_INT 8
24765: PUSH
24766: FOR_TO
24767: IFFALSE 24815
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24769: LD_OWVAR 2
24773: PUSH
24774: LD_VAR 0 1
24778: NONEQUAL
24779: PUSH
24780: LD_OWVAR 2
24784: PPUSH
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL_OW 81
24794: PUSH
24795: LD_INT 2
24797: EQUAL
24798: AND
24799: IFFALSE 24813
// begin side := i ;
24801: LD_ADDR_VAR 0 3
24805: PUSH
24806: LD_VAR 0 1
24810: ST_TO_ADDR
// break ;
24811: GO 24815
// end ;
24813: GO 24766
24815: POP
24816: POP
// if not side then
24817: LD_VAR 0 3
24821: NOT
24822: IFFALSE 24826
// exit ;
24824: GO 24871
// for i := 1 to tmp do
24826: LD_ADDR_VAR 0 1
24830: PUSH
24831: DOUBLE
24832: LD_INT 1
24834: DEC
24835: ST_TO_ADDR
24836: LD_VAR 0 2
24840: PUSH
24841: FOR_TO
24842: IFFALSE 24869
// if Prob ( 60 ) then
24844: LD_INT 60
24846: PPUSH
24847: CALL_OW 13
24851: IFFALSE 24867
// SetSide ( i , side ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: CALL_OW 235
24867: GO 24841
24869: POP
24870: POP
// end ;
24871: PPOPN 3
24873: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24874: LD_EXP 75
24878: PUSH
24879: LD_EXP 88
24883: AND
24884: IFFALSE 25003
24886: GO 24888
24888: DISABLE
24889: LD_INT 0
24891: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24892: LD_ADDR_VAR 0 1
24896: PUSH
24897: LD_INT 22
24899: PUSH
24900: LD_OWVAR 2
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 21
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 3
24921: PUSH
24922: LD_INT 23
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: LIST
24940: PPUSH
24941: CALL_OW 69
24945: PUSH
24946: FOR_IN
24947: IFFALSE 25001
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24949: LD_VAR 0 1
24953: PPUSH
24954: CALL_OW 257
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: LD_INT 3
24967: PUSH
24968: LD_INT 4
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: IN
24977: IFFALSE 24999
// SetClass ( un , rand ( 1 , 4 ) ) ;
24979: LD_VAR 0 1
24983: PPUSH
24984: LD_INT 1
24986: PPUSH
24987: LD_INT 4
24989: PPUSH
24990: CALL_OW 12
24994: PPUSH
24995: CALL_OW 336
24999: GO 24946
25001: POP
25002: POP
// end ;
25003: PPOPN 1
25005: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25006: LD_EXP 75
25010: PUSH
25011: LD_EXP 87
25015: AND
25016: IFFALSE 25095
25018: GO 25020
25020: DISABLE
25021: LD_INT 0
25023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25024: LD_ADDR_VAR 0 1
25028: PUSH
25029: LD_INT 22
25031: PUSH
25032: LD_OWVAR 2
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 21
25043: PUSH
25044: LD_INT 3
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PPUSH
25055: CALL_OW 69
25059: ST_TO_ADDR
// if not tmp then
25060: LD_VAR 0 1
25064: NOT
25065: IFFALSE 25069
// exit ;
25067: GO 25095
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25069: LD_VAR 0 1
25073: PUSH
25074: LD_INT 1
25076: PPUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 12
25086: ARRAY
25087: PPUSH
25088: LD_INT 100
25090: PPUSH
25091: CALL_OW 234
// end ;
25095: PPOPN 1
25097: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25098: LD_EXP 75
25102: PUSH
25103: LD_EXP 89
25107: AND
25108: IFFALSE 25206
25110: GO 25112
25112: DISABLE
25113: LD_INT 0
25115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25116: LD_ADDR_VAR 0 1
25120: PUSH
25121: LD_INT 22
25123: PUSH
25124: LD_OWVAR 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 21
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 69
25151: ST_TO_ADDR
// if not tmp then
25152: LD_VAR 0 1
25156: NOT
25157: IFFALSE 25161
// exit ;
25159: GO 25206
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25161: LD_VAR 0 1
25165: PUSH
25166: LD_INT 1
25168: PPUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 12
25178: ARRAY
25179: PPUSH
25180: LD_INT 1
25182: PPUSH
25183: LD_INT 4
25185: PPUSH
25186: CALL_OW 12
25190: PPUSH
25191: LD_INT 3000
25193: PPUSH
25194: LD_INT 9000
25196: PPUSH
25197: CALL_OW 12
25201: PPUSH
25202: CALL_OW 492
// end ;
25206: PPOPN 1
25208: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25209: LD_EXP 75
25213: PUSH
25214: LD_EXP 90
25218: AND
25219: IFFALSE 25239
25221: GO 25223
25223: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25224: LD_INT 1
25226: PPUSH
25227: LD_OWVAR 2
25231: PPUSH
25232: LD_INT 0
25234: PPUSH
25235: CALL_OW 324
25239: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25240: LD_EXP 75
25244: PUSH
25245: LD_EXP 91
25249: AND
25250: IFFALSE 25333
25252: GO 25254
25254: DISABLE
25255: LD_INT 0
25257: PPUSH
25258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25259: LD_ADDR_VAR 0 2
25263: PUSH
25264: LD_INT 22
25266: PUSH
25267: LD_OWVAR 2
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 21
25278: PUSH
25279: LD_INT 3
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PPUSH
25290: CALL_OW 69
25294: ST_TO_ADDR
// if not tmp then
25295: LD_VAR 0 2
25299: NOT
25300: IFFALSE 25304
// exit ;
25302: GO 25333
// for i in tmp do
25304: LD_ADDR_VAR 0 1
25308: PUSH
25309: LD_VAR 0 2
25313: PUSH
25314: FOR_IN
25315: IFFALSE 25331
// SetBLevel ( i , 10 ) ;
25317: LD_VAR 0 1
25321: PPUSH
25322: LD_INT 10
25324: PPUSH
25325: CALL_OW 241
25329: GO 25314
25331: POP
25332: POP
// end ;
25333: PPOPN 2
25335: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25336: LD_EXP 75
25340: PUSH
25341: LD_EXP 92
25345: AND
25346: IFFALSE 25457
25348: GO 25350
25350: DISABLE
25351: LD_INT 0
25353: PPUSH
25354: PPUSH
25355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25356: LD_ADDR_VAR 0 3
25360: PUSH
25361: LD_INT 22
25363: PUSH
25364: LD_OWVAR 2
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 25
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PPUSH
25387: CALL_OW 69
25391: ST_TO_ADDR
// if not tmp then
25392: LD_VAR 0 3
25396: NOT
25397: IFFALSE 25401
// exit ;
25399: GO 25457
// un := tmp [ rand ( 1 , tmp ) ] ;
25401: LD_ADDR_VAR 0 2
25405: PUSH
25406: LD_VAR 0 3
25410: PUSH
25411: LD_INT 1
25413: PPUSH
25414: LD_VAR 0 3
25418: PPUSH
25419: CALL_OW 12
25423: ARRAY
25424: ST_TO_ADDR
// if Crawls ( un ) then
25425: LD_VAR 0 2
25429: PPUSH
25430: CALL_OW 318
25434: IFFALSE 25445
// ComWalk ( un ) ;
25436: LD_VAR 0 2
25440: PPUSH
25441: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25445: LD_VAR 0 2
25449: PPUSH
25450: LD_INT 5
25452: PPUSH
25453: CALL_OW 336
// end ;
25457: PPOPN 3
25459: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25460: LD_EXP 75
25464: PUSH
25465: LD_EXP 93
25469: AND
25470: PUSH
25471: LD_OWVAR 67
25475: PUSH
25476: LD_INT 4
25478: LESS
25479: AND
25480: IFFALSE 25499
25482: GO 25484
25484: DISABLE
// begin Difficulty := Difficulty + 1 ;
25485: LD_ADDR_OWVAR 67
25489: PUSH
25490: LD_OWVAR 67
25494: PUSH
25495: LD_INT 1
25497: PLUS
25498: ST_TO_ADDR
// end ;
25499: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25500: LD_EXP 75
25504: PUSH
25505: LD_EXP 94
25509: AND
25510: IFFALSE 25613
25512: GO 25514
25514: DISABLE
25515: LD_INT 0
25517: PPUSH
// begin for i := 1 to 5 do
25518: LD_ADDR_VAR 0 1
25522: PUSH
25523: DOUBLE
25524: LD_INT 1
25526: DEC
25527: ST_TO_ADDR
25528: LD_INT 5
25530: PUSH
25531: FOR_TO
25532: IFFALSE 25611
// begin uc_nation := nation_nature ;
25534: LD_ADDR_OWVAR 21
25538: PUSH
25539: LD_INT 0
25541: ST_TO_ADDR
// uc_side := 0 ;
25542: LD_ADDR_OWVAR 20
25546: PUSH
25547: LD_INT 0
25549: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25550: LD_ADDR_OWVAR 29
25554: PUSH
25555: LD_INT 12
25557: PUSH
25558: LD_INT 12
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: ST_TO_ADDR
// hc_agressivity := 20 ;
25565: LD_ADDR_OWVAR 35
25569: PUSH
25570: LD_INT 20
25572: ST_TO_ADDR
// hc_class := class_tiger ;
25573: LD_ADDR_OWVAR 28
25577: PUSH
25578: LD_INT 14
25580: ST_TO_ADDR
// hc_gallery :=  ;
25581: LD_ADDR_OWVAR 33
25585: PUSH
25586: LD_STRING 
25588: ST_TO_ADDR
// hc_name :=  ;
25589: LD_ADDR_OWVAR 26
25593: PUSH
25594: LD_STRING 
25596: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25597: CALL_OW 44
25601: PPUSH
25602: LD_INT 0
25604: PPUSH
25605: CALL_OW 51
// end ;
25609: GO 25531
25611: POP
25612: POP
// end ;
25613: PPOPN 1
25615: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25616: LD_EXP 75
25620: PUSH
25621: LD_EXP 95
25625: AND
25626: IFFALSE 25635
25628: GO 25630
25630: DISABLE
// StreamSibBomb ;
25631: CALL 25636 0 0
25635: END
// export function StreamSibBomb ; var i , x , y ; begin
25636: LD_INT 0
25638: PPUSH
25639: PPUSH
25640: PPUSH
25641: PPUSH
// result := false ;
25642: LD_ADDR_VAR 0 1
25646: PUSH
25647: LD_INT 0
25649: ST_TO_ADDR
// for i := 1 to 16 do
25650: LD_ADDR_VAR 0 2
25654: PUSH
25655: DOUBLE
25656: LD_INT 1
25658: DEC
25659: ST_TO_ADDR
25660: LD_INT 16
25662: PUSH
25663: FOR_TO
25664: IFFALSE 25863
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_INT 10
25673: PUSH
25674: LD_INT 20
25676: PUSH
25677: LD_INT 30
25679: PUSH
25680: LD_INT 40
25682: PUSH
25683: LD_INT 50
25685: PUSH
25686: LD_INT 60
25688: PUSH
25689: LD_INT 70
25691: PUSH
25692: LD_INT 80
25694: PUSH
25695: LD_INT 90
25697: PUSH
25698: LD_INT 100
25700: PUSH
25701: LD_INT 110
25703: PUSH
25704: LD_INT 120
25706: PUSH
25707: LD_INT 130
25709: PUSH
25710: LD_INT 140
25712: PUSH
25713: LD_INT 150
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: PPUSH
25736: LD_INT 15
25738: PPUSH
25739: CALL_OW 12
25743: ARRAY
25744: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25745: LD_ADDR_VAR 0 4
25749: PUSH
25750: LD_INT 10
25752: PUSH
25753: LD_INT 20
25755: PUSH
25756: LD_INT 30
25758: PUSH
25759: LD_INT 40
25761: PUSH
25762: LD_INT 50
25764: PUSH
25765: LD_INT 60
25767: PUSH
25768: LD_INT 70
25770: PUSH
25771: LD_INT 80
25773: PUSH
25774: LD_INT 90
25776: PUSH
25777: LD_INT 100
25779: PUSH
25780: LD_INT 110
25782: PUSH
25783: LD_INT 120
25785: PUSH
25786: LD_INT 130
25788: PUSH
25789: LD_INT 140
25791: PUSH
25792: LD_INT 150
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PPUSH
25815: LD_INT 15
25817: PPUSH
25818: CALL_OW 12
25822: ARRAY
25823: ST_TO_ADDR
// if ValidHex ( x , y ) then
25824: LD_VAR 0 3
25828: PPUSH
25829: LD_VAR 0 4
25833: PPUSH
25834: CALL_OW 488
25838: IFFALSE 25861
// begin result := [ x , y ] ;
25840: LD_ADDR_VAR 0 1
25844: PUSH
25845: LD_VAR 0 3
25849: PUSH
25850: LD_VAR 0 4
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: ST_TO_ADDR
// break ;
25859: GO 25863
// end ; end ;
25861: GO 25663
25863: POP
25864: POP
// if result then
25865: LD_VAR 0 1
25869: IFFALSE 25929
// begin ToLua ( playSibBomb() ) ;
25871: LD_STRING playSibBomb()
25873: PPUSH
25874: CALL_OW 559
// wait ( 0 0$14 ) ;
25878: LD_INT 490
25880: PPUSH
25881: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25885: LD_VAR 0 1
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: PPUSH
25894: LD_VAR 0 1
25898: PUSH
25899: LD_INT 2
25901: ARRAY
25902: PPUSH
25903: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25907: LD_VAR 0 1
25911: PUSH
25912: LD_INT 1
25914: ARRAY
25915: PPUSH
25916: LD_VAR 0 1
25920: PUSH
25921: LD_INT 2
25923: ARRAY
25924: PPUSH
25925: CALL_OW 429
// end ; end ;
25929: LD_VAR 0 1
25933: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25934: LD_EXP 75
25938: PUSH
25939: LD_EXP 97
25943: AND
25944: IFFALSE 25956
25946: GO 25948
25948: DISABLE
// YouLost (  ) ;
25949: LD_STRING 
25951: PPUSH
25952: CALL_OW 104
25956: END
// every 0 0$1 trigger StreamModeActive and sFog do
25957: LD_EXP 75
25961: PUSH
25962: LD_EXP 96
25966: AND
25967: IFFALSE 25981
25969: GO 25971
25971: DISABLE
// FogOff ( your_side ) ;
25972: LD_OWVAR 2
25976: PPUSH
25977: CALL_OW 344
25981: END
// every 0 0$1 trigger StreamModeActive and sSun do
25982: LD_EXP 75
25986: PUSH
25987: LD_EXP 98
25991: AND
25992: IFFALSE 26020
25994: GO 25996
25996: DISABLE
// begin solar_recharge_percent := 0 ;
25997: LD_ADDR_OWVAR 79
26001: PUSH
26002: LD_INT 0
26004: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26005: LD_INT 10500
26007: PPUSH
26008: CALL_OW 67
// solar_recharge_percent := 100 ;
26012: LD_ADDR_OWVAR 79
26016: PUSH
26017: LD_INT 100
26019: ST_TO_ADDR
// end ;
26020: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26021: LD_EXP 75
26025: PUSH
26026: LD_EXP 99
26030: AND
26031: IFFALSE 26270
26033: GO 26035
26035: DISABLE
26036: LD_INT 0
26038: PPUSH
26039: PPUSH
26040: PPUSH
// begin tmp := [ ] ;
26041: LD_ADDR_VAR 0 3
26045: PUSH
26046: EMPTY
26047: ST_TO_ADDR
// for i := 1 to 6 do
26048: LD_ADDR_VAR 0 1
26052: PUSH
26053: DOUBLE
26054: LD_INT 1
26056: DEC
26057: ST_TO_ADDR
26058: LD_INT 6
26060: PUSH
26061: FOR_TO
26062: IFFALSE 26167
// begin uc_nation := nation_nature ;
26064: LD_ADDR_OWVAR 21
26068: PUSH
26069: LD_INT 0
26071: ST_TO_ADDR
// uc_side := 0 ;
26072: LD_ADDR_OWVAR 20
26076: PUSH
26077: LD_INT 0
26079: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26080: LD_ADDR_OWVAR 29
26084: PUSH
26085: LD_INT 12
26087: PUSH
26088: LD_INT 12
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: ST_TO_ADDR
// hc_agressivity := 20 ;
26095: LD_ADDR_OWVAR 35
26099: PUSH
26100: LD_INT 20
26102: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26103: LD_ADDR_OWVAR 28
26107: PUSH
26108: LD_INT 17
26110: ST_TO_ADDR
// hc_gallery :=  ;
26111: LD_ADDR_OWVAR 33
26115: PUSH
26116: LD_STRING 
26118: ST_TO_ADDR
// hc_name :=  ;
26119: LD_ADDR_OWVAR 26
26123: PUSH
26124: LD_STRING 
26126: ST_TO_ADDR
// un := CreateHuman ;
26127: LD_ADDR_VAR 0 2
26131: PUSH
26132: CALL_OW 44
26136: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26137: LD_VAR 0 2
26141: PPUSH
26142: LD_INT 1
26144: PPUSH
26145: CALL_OW 51
// tmp := tmp ^ un ;
26149: LD_ADDR_VAR 0 3
26153: PUSH
26154: LD_VAR 0 3
26158: PUSH
26159: LD_VAR 0 2
26163: ADD
26164: ST_TO_ADDR
// end ;
26165: GO 26061
26167: POP
26168: POP
// repeat wait ( 0 0$1 ) ;
26169: LD_INT 35
26171: PPUSH
26172: CALL_OW 67
// for un in tmp do
26176: LD_ADDR_VAR 0 2
26180: PUSH
26181: LD_VAR 0 3
26185: PUSH
26186: FOR_IN
26187: IFFALSE 26261
// begin if IsDead ( un ) then
26189: LD_VAR 0 2
26193: PPUSH
26194: CALL_OW 301
26198: IFFALSE 26218
// begin tmp := tmp diff un ;
26200: LD_ADDR_VAR 0 3
26204: PUSH
26205: LD_VAR 0 3
26209: PUSH
26210: LD_VAR 0 2
26214: DIFF
26215: ST_TO_ADDR
// continue ;
26216: GO 26186
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26218: LD_VAR 0 2
26222: PPUSH
26223: LD_INT 3
26225: PUSH
26226: LD_INT 22
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PPUSH
26240: CALL_OW 69
26244: PPUSH
26245: LD_VAR 0 2
26249: PPUSH
26250: CALL_OW 74
26254: PPUSH
26255: CALL_OW 115
// end ;
26259: GO 26186
26261: POP
26262: POP
// until not tmp ;
26263: LD_VAR 0 3
26267: NOT
26268: IFFALSE 26169
// end ;
26270: PPOPN 3
26272: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26273: LD_EXP 75
26277: PUSH
26278: LD_EXP 100
26282: AND
26283: IFFALSE 26337
26285: GO 26287
26287: DISABLE
// begin ToLua ( displayTroll(); ) ;
26288: LD_STRING displayTroll();
26290: PPUSH
26291: CALL_OW 559
// wait ( 3 3$00 ) ;
26295: LD_INT 6300
26297: PPUSH
26298: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26302: LD_STRING hideTroll();
26304: PPUSH
26305: CALL_OW 559
// wait ( 1 1$00 ) ;
26309: LD_INT 2100
26311: PPUSH
26312: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26316: LD_STRING displayTroll();
26318: PPUSH
26319: CALL_OW 559
// wait ( 1 1$00 ) ;
26323: LD_INT 2100
26325: PPUSH
26326: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26330: LD_STRING hideTroll();
26332: PPUSH
26333: CALL_OW 559
// end ;
26337: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26338: LD_EXP 75
26342: PUSH
26343: LD_EXP 101
26347: AND
26348: IFFALSE 26411
26350: GO 26352
26352: DISABLE
26353: LD_INT 0
26355: PPUSH
// begin p := 0 ;
26356: LD_ADDR_VAR 0 1
26360: PUSH
26361: LD_INT 0
26363: ST_TO_ADDR
// repeat game_speed := 1 ;
26364: LD_ADDR_OWVAR 65
26368: PUSH
26369: LD_INT 1
26371: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26372: LD_INT 35
26374: PPUSH
26375: CALL_OW 67
// p := p + 1 ;
26379: LD_ADDR_VAR 0 1
26383: PUSH
26384: LD_VAR 0 1
26388: PUSH
26389: LD_INT 1
26391: PLUS
26392: ST_TO_ADDR
// until p >= 60 ;
26393: LD_VAR 0 1
26397: PUSH
26398: LD_INT 60
26400: GREATEREQUAL
26401: IFFALSE 26364
// game_speed := 4 ;
26403: LD_ADDR_OWVAR 65
26407: PUSH
26408: LD_INT 4
26410: ST_TO_ADDR
// end ;
26411: PPOPN 1
26413: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26414: LD_EXP 75
26418: PUSH
26419: LD_EXP 102
26423: AND
26424: IFFALSE 26570
26426: GO 26428
26428: DISABLE
26429: LD_INT 0
26431: PPUSH
26432: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26433: LD_ADDR_VAR 0 1
26437: PUSH
26438: LD_INT 22
26440: PUSH
26441: LD_OWVAR 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 30
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 30
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PPUSH
26482: CALL_OW 69
26486: ST_TO_ADDR
// if not depot then
26487: LD_VAR 0 1
26491: NOT
26492: IFFALSE 26496
// exit ;
26494: GO 26570
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: LD_VAR 0 1
26505: PUSH
26506: LD_INT 1
26508: PPUSH
26509: LD_VAR 0 1
26513: PPUSH
26514: CALL_OW 12
26518: ARRAY
26519: PPUSH
26520: CALL_OW 274
26524: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26525: LD_VAR 0 2
26529: PPUSH
26530: LD_INT 1
26532: PPUSH
26533: LD_INT 0
26535: PPUSH
26536: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26540: LD_VAR 0 2
26544: PPUSH
26545: LD_INT 2
26547: PPUSH
26548: LD_INT 0
26550: PPUSH
26551: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26555: LD_VAR 0 2
26559: PPUSH
26560: LD_INT 3
26562: PPUSH
26563: LD_INT 0
26565: PPUSH
26566: CALL_OW 277
// end ;
26570: PPOPN 2
26572: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26573: LD_EXP 75
26577: PUSH
26578: LD_EXP 103
26582: AND
26583: IFFALSE 26680
26585: GO 26587
26587: DISABLE
26588: LD_INT 0
26590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: LD_INT 22
26598: PUSH
26599: LD_OWVAR 2
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 21
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 3
26620: PUSH
26621: LD_INT 23
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: PPUSH
26640: CALL_OW 69
26644: ST_TO_ADDR
// if not tmp then
26645: LD_VAR 0 1
26649: NOT
26650: IFFALSE 26654
// exit ;
26652: GO 26680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26654: LD_VAR 0 1
26658: PUSH
26659: LD_INT 1
26661: PPUSH
26662: LD_VAR 0 1
26666: PPUSH
26667: CALL_OW 12
26671: ARRAY
26672: PPUSH
26673: LD_INT 200
26675: PPUSH
26676: CALL_OW 234
// end ;
26680: PPOPN 1
26682: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26683: LD_EXP 75
26687: PUSH
26688: LD_EXP 104
26692: AND
26693: IFFALSE 26772
26695: GO 26697
26697: DISABLE
26698: LD_INT 0
26700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26701: LD_ADDR_VAR 0 1
26705: PUSH
26706: LD_INT 22
26708: PUSH
26709: LD_OWVAR 2
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 21
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PPUSH
26732: CALL_OW 69
26736: ST_TO_ADDR
// if not tmp then
26737: LD_VAR 0 1
26741: NOT
26742: IFFALSE 26746
// exit ;
26744: GO 26772
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26746: LD_VAR 0 1
26750: PUSH
26751: LD_INT 1
26753: PPUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 12
26763: ARRAY
26764: PPUSH
26765: LD_INT 60
26767: PPUSH
26768: CALL_OW 234
// end ;
26772: PPOPN 1
26774: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26775: LD_EXP 75
26779: PUSH
26780: LD_EXP 105
26784: AND
26785: IFFALSE 26884
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
// begin enable ;
26794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26795: LD_ADDR_VAR 0 1
26799: PUSH
26800: LD_INT 22
26802: PUSH
26803: LD_OWVAR 2
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 61
26814: PUSH
26815: EMPTY
26816: LIST
26817: PUSH
26818: LD_INT 33
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: PPUSH
26833: CALL_OW 69
26837: ST_TO_ADDR
// if not tmp then
26838: LD_VAR 0 1
26842: NOT
26843: IFFALSE 26847
// exit ;
26845: GO 26884
// for i in tmp do
26847: LD_ADDR_VAR 0 2
26851: PUSH
26852: LD_VAR 0 1
26856: PUSH
26857: FOR_IN
26858: IFFALSE 26882
// if IsControledBy ( i ) then
26860: LD_VAR 0 2
26864: PPUSH
26865: CALL_OW 312
26869: IFFALSE 26880
// ComUnlink ( i ) ;
26871: LD_VAR 0 2
26875: PPUSH
26876: CALL_OW 136
26880: GO 26857
26882: POP
26883: POP
// end ;
26884: PPOPN 2
26886: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26887: LD_EXP 75
26891: PUSH
26892: LD_EXP 106
26896: AND
26897: IFFALSE 27037
26899: GO 26901
26901: DISABLE
26902: LD_INT 0
26904: PPUSH
26905: PPUSH
// begin ToLua ( displayPowell(); ) ;
26906: LD_STRING displayPowell();
26908: PPUSH
26909: CALL_OW 559
// uc_side := 0 ;
26913: LD_ADDR_OWVAR 20
26917: PUSH
26918: LD_INT 0
26920: ST_TO_ADDR
// uc_nation := 2 ;
26921: LD_ADDR_OWVAR 21
26925: PUSH
26926: LD_INT 2
26928: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26929: LD_ADDR_OWVAR 37
26933: PUSH
26934: LD_INT 14
26936: ST_TO_ADDR
// vc_engine := engine_siberite ;
26937: LD_ADDR_OWVAR 39
26941: PUSH
26942: LD_INT 3
26944: ST_TO_ADDR
// vc_control := control_apeman ;
26945: LD_ADDR_OWVAR 38
26949: PUSH
26950: LD_INT 5
26952: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26953: LD_ADDR_OWVAR 40
26957: PUSH
26958: LD_INT 29
26960: ST_TO_ADDR
// un := CreateVehicle ;
26961: LD_ADDR_VAR 0 2
26965: PUSH
26966: CALL_OW 45
26970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26971: LD_VAR 0 2
26975: PPUSH
26976: LD_INT 1
26978: PPUSH
26979: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26983: LD_INT 35
26985: PPUSH
26986: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26990: LD_VAR 0 2
26994: PPUSH
26995: LD_INT 22
26997: PUSH
26998: LD_OWVAR 2
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PPUSH
27007: CALL_OW 69
27011: PPUSH
27012: LD_VAR 0 2
27016: PPUSH
27017: CALL_OW 74
27021: PPUSH
27022: CALL_OW 115
// until IsDead ( un ) ;
27026: LD_VAR 0 2
27030: PPUSH
27031: CALL_OW 301
27035: IFFALSE 26983
// end ;
27037: PPOPN 2
27039: END
// every 0 0$1 trigger StreamModeActive and sStu do
27040: LD_EXP 75
27044: PUSH
27045: LD_EXP 114
27049: AND
27050: IFFALSE 27066
27052: GO 27054
27054: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27055: LD_STRING displayStucuk();
27057: PPUSH
27058: CALL_OW 559
// ResetFog ;
27062: CALL_OW 335
// end ;
27066: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27067: LD_EXP 75
27071: PUSH
27072: LD_EXP 107
27076: AND
27077: IFFALSE 27218
27079: GO 27081
27081: DISABLE
27082: LD_INT 0
27084: PPUSH
27085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27086: LD_ADDR_VAR 0 2
27090: PUSH
27091: LD_INT 22
27093: PUSH
27094: LD_OWVAR 2
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 21
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PPUSH
27117: CALL_OW 69
27121: ST_TO_ADDR
// if not tmp then
27122: LD_VAR 0 2
27126: NOT
27127: IFFALSE 27131
// exit ;
27129: GO 27218
// un := tmp [ rand ( 1 , tmp ) ] ;
27131: LD_ADDR_VAR 0 1
27135: PUSH
27136: LD_VAR 0 2
27140: PUSH
27141: LD_INT 1
27143: PPUSH
27144: LD_VAR 0 2
27148: PPUSH
27149: CALL_OW 12
27153: ARRAY
27154: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27155: LD_VAR 0 1
27159: PPUSH
27160: LD_INT 0
27162: PPUSH
27163: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27167: LD_VAR 0 1
27171: PPUSH
27172: LD_OWVAR 3
27176: PUSH
27177: LD_VAR 0 1
27181: DIFF
27182: PPUSH
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 74
27192: PPUSH
27193: CALL_OW 115
// wait ( 0 0$20 ) ;
27197: LD_INT 700
27199: PPUSH
27200: CALL_OW 67
// SetSide ( un , your_side ) ;
27204: LD_VAR 0 1
27208: PPUSH
27209: LD_OWVAR 2
27213: PPUSH
27214: CALL_OW 235
// end ;
27218: PPOPN 2
27220: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27221: LD_EXP 75
27225: PUSH
27226: LD_EXP 108
27230: AND
27231: IFFALSE 27337
27233: GO 27235
27235: DISABLE
27236: LD_INT 0
27238: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27239: LD_ADDR_VAR 0 1
27243: PUSH
27244: LD_INT 22
27246: PUSH
27247: LD_OWVAR 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: LD_INT 30
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 30
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: ST_TO_ADDR
// if not depot then
27293: LD_VAR 0 1
27297: NOT
27298: IFFALSE 27302
// exit ;
27300: GO 27337
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27302: LD_VAR 0 1
27306: PUSH
27307: LD_INT 1
27309: ARRAY
27310: PPUSH
27311: CALL_OW 250
27315: PPUSH
27316: LD_VAR 0 1
27320: PUSH
27321: LD_INT 1
27323: ARRAY
27324: PPUSH
27325: CALL_OW 251
27329: PPUSH
27330: LD_INT 70
27332: PPUSH
27333: CALL_OW 495
// end ;
27337: PPOPN 1
27339: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27340: LD_EXP 75
27344: PUSH
27345: LD_EXP 109
27349: AND
27350: IFFALSE 27561
27352: GO 27354
27354: DISABLE
27355: LD_INT 0
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27362: LD_ADDR_VAR 0 5
27366: PUSH
27367: LD_INT 22
27369: PUSH
27370: LD_OWVAR 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 21
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PPUSH
27393: CALL_OW 69
27397: ST_TO_ADDR
// if not tmp then
27398: LD_VAR 0 5
27402: NOT
27403: IFFALSE 27407
// exit ;
27405: GO 27561
// for i in tmp do
27407: LD_ADDR_VAR 0 1
27411: PUSH
27412: LD_VAR 0 5
27416: PUSH
27417: FOR_IN
27418: IFFALSE 27559
// begin d := rand ( 0 , 5 ) ;
27420: LD_ADDR_VAR 0 4
27424: PUSH
27425: LD_INT 0
27427: PPUSH
27428: LD_INT 5
27430: PPUSH
27431: CALL_OW 12
27435: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27436: LD_ADDR_VAR 0 2
27440: PUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 250
27450: PPUSH
27451: LD_VAR 0 4
27455: PPUSH
27456: LD_INT 3
27458: PPUSH
27459: LD_INT 12
27461: PPUSH
27462: CALL_OW 12
27466: PPUSH
27467: CALL_OW 272
27471: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27472: LD_ADDR_VAR 0 3
27476: PUSH
27477: LD_VAR 0 1
27481: PPUSH
27482: CALL_OW 251
27486: PPUSH
27487: LD_VAR 0 4
27491: PPUSH
27492: LD_INT 3
27494: PPUSH
27495: LD_INT 12
27497: PPUSH
27498: CALL_OW 12
27502: PPUSH
27503: CALL_OW 273
27507: ST_TO_ADDR
// if ValidHex ( x , y ) then
27508: LD_VAR 0 2
27512: PPUSH
27513: LD_VAR 0 3
27517: PPUSH
27518: CALL_OW 488
27522: IFFALSE 27557
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27524: LD_VAR 0 1
27528: PPUSH
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_VAR 0 3
27538: PPUSH
27539: LD_INT 3
27541: PPUSH
27542: LD_INT 6
27544: PPUSH
27545: CALL_OW 12
27549: PPUSH
27550: LD_INT 1
27552: PPUSH
27553: CALL_OW 483
// end ;
27557: GO 27417
27559: POP
27560: POP
// end ;
27561: PPOPN 5
27563: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27564: LD_EXP 75
27568: PUSH
27569: LD_EXP 110
27573: AND
27574: IFFALSE 27668
27576: GO 27578
27578: DISABLE
27579: LD_INT 0
27581: PPUSH
27582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27583: LD_ADDR_VAR 0 2
27587: PUSH
27588: LD_INT 22
27590: PUSH
27591: LD_OWVAR 2
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 32
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 21
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: PPUSH
27625: CALL_OW 69
27629: ST_TO_ADDR
// if not tmp then
27630: LD_VAR 0 2
27634: NOT
27635: IFFALSE 27639
// exit ;
27637: GO 27668
// for i in tmp do
27639: LD_ADDR_VAR 0 1
27643: PUSH
27644: LD_VAR 0 2
27648: PUSH
27649: FOR_IN
27650: IFFALSE 27666
// SetFuel ( i , 0 ) ;
27652: LD_VAR 0 1
27656: PPUSH
27657: LD_INT 0
27659: PPUSH
27660: CALL_OW 240
27664: GO 27649
27666: POP
27667: POP
// end ;
27668: PPOPN 2
27670: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27671: LD_EXP 75
27675: PUSH
27676: LD_EXP 111
27680: AND
27681: IFFALSE 27747
27683: GO 27685
27685: DISABLE
27686: LD_INT 0
27688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27689: LD_ADDR_VAR 0 1
27693: PUSH
27694: LD_INT 22
27696: PUSH
27697: LD_OWVAR 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 30
27708: PUSH
27709: LD_INT 29
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PPUSH
27720: CALL_OW 69
27724: ST_TO_ADDR
// if not tmp then
27725: LD_VAR 0 1
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 27747
// DestroyUnit ( tmp [ 1 ] ) ;
27734: LD_VAR 0 1
27738: PUSH
27739: LD_INT 1
27741: ARRAY
27742: PPUSH
27743: CALL_OW 65
// end ;
27747: PPOPN 1
27749: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27750: LD_EXP 75
27754: PUSH
27755: LD_EXP 113
27759: AND
27760: IFFALSE 27889
27762: GO 27764
27764: DISABLE
27765: LD_INT 0
27767: PPUSH
// begin uc_side := 0 ;
27768: LD_ADDR_OWVAR 20
27772: PUSH
27773: LD_INT 0
27775: ST_TO_ADDR
// uc_nation := nation_arabian ;
27776: LD_ADDR_OWVAR 21
27780: PUSH
27781: LD_INT 2
27783: ST_TO_ADDR
// hc_gallery :=  ;
27784: LD_ADDR_OWVAR 33
27788: PUSH
27789: LD_STRING 
27791: ST_TO_ADDR
// hc_name :=  ;
27792: LD_ADDR_OWVAR 26
27796: PUSH
27797: LD_STRING 
27799: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27800: LD_INT 1
27802: PPUSH
27803: LD_INT 11
27805: PPUSH
27806: LD_INT 10
27808: PPUSH
27809: CALL_OW 380
// un := CreateHuman ;
27813: LD_ADDR_VAR 0 1
27817: PUSH
27818: CALL_OW 44
27822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27823: LD_VAR 0 1
27827: PPUSH
27828: LD_INT 1
27830: PPUSH
27831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27835: LD_INT 35
27837: PPUSH
27838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27842: LD_VAR 0 1
27846: PPUSH
27847: LD_INT 22
27849: PUSH
27850: LD_OWVAR 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PPUSH
27859: CALL_OW 69
27863: PPUSH
27864: LD_VAR 0 1
27868: PPUSH
27869: CALL_OW 74
27873: PPUSH
27874: CALL_OW 115
// until IsDead ( un ) ;
27878: LD_VAR 0 1
27882: PPUSH
27883: CALL_OW 301
27887: IFFALSE 27835
// end ;
27889: PPOPN 1
27891: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27892: LD_EXP 75
27896: PUSH
27897: LD_EXP 115
27901: AND
27902: IFFALSE 27914
27904: GO 27906
27906: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27907: LD_STRING earthquake(getX(game), 0, 32)
27909: PPUSH
27910: CALL_OW 559
27914: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27915: LD_EXP 75
27919: PUSH
27920: LD_EXP 116
27924: AND
27925: IFFALSE 28016
27927: GO 27929
27929: DISABLE
27930: LD_INT 0
27932: PPUSH
// begin enable ;
27933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27934: LD_ADDR_VAR 0 1
27938: PUSH
27939: LD_INT 22
27941: PUSH
27942: LD_OWVAR 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 21
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 33
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: PPUSH
27976: CALL_OW 69
27980: ST_TO_ADDR
// if not tmp then
27981: LD_VAR 0 1
27985: NOT
27986: IFFALSE 27990
// exit ;
27988: GO 28016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27990: LD_VAR 0 1
27994: PUSH
27995: LD_INT 1
27997: PPUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: CALL_OW 12
28007: ARRAY
28008: PPUSH
28009: LD_INT 1
28011: PPUSH
28012: CALL_OW 234
// end ;
28016: PPOPN 1
28018: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28019: LD_EXP 75
28023: PUSH
28024: LD_EXP 117
28028: AND
28029: IFFALSE 28170
28031: GO 28033
28033: DISABLE
28034: LD_INT 0
28036: PPUSH
28037: PPUSH
28038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_INT 22
28046: PUSH
28047: LD_OWVAR 2
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 25
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PPUSH
28070: CALL_OW 69
28074: ST_TO_ADDR
// if not tmp then
28075: LD_VAR 0 3
28079: NOT
28080: IFFALSE 28084
// exit ;
28082: GO 28170
// un := tmp [ rand ( 1 , tmp ) ] ;
28084: LD_ADDR_VAR 0 2
28088: PUSH
28089: LD_VAR 0 3
28093: PUSH
28094: LD_INT 1
28096: PPUSH
28097: LD_VAR 0 3
28101: PPUSH
28102: CALL_OW 12
28106: ARRAY
28107: ST_TO_ADDR
// if Crawls ( un ) then
28108: LD_VAR 0 2
28112: PPUSH
28113: CALL_OW 318
28117: IFFALSE 28128
// ComWalk ( un ) ;
28119: LD_VAR 0 2
28123: PPUSH
28124: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28128: LD_VAR 0 2
28132: PPUSH
28133: LD_INT 9
28135: PPUSH
28136: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28140: LD_INT 28
28142: PPUSH
28143: LD_OWVAR 2
28147: PPUSH
28148: LD_INT 2
28150: PPUSH
28151: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28155: LD_INT 29
28157: PPUSH
28158: LD_OWVAR 2
28162: PPUSH
28163: LD_INT 2
28165: PPUSH
28166: CALL_OW 322
// end ;
28170: PPOPN 3
28172: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28173: LD_EXP 75
28177: PUSH
28178: LD_EXP 118
28182: AND
28183: IFFALSE 28294
28185: GO 28187
28187: DISABLE
28188: LD_INT 0
28190: PPUSH
28191: PPUSH
28192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_INT 22
28200: PUSH
28201: LD_OWVAR 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 25
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PPUSH
28224: CALL_OW 69
28228: ST_TO_ADDR
// if not tmp then
28229: LD_VAR 0 3
28233: NOT
28234: IFFALSE 28238
// exit ;
28236: GO 28294
// un := tmp [ rand ( 1 , tmp ) ] ;
28238: LD_ADDR_VAR 0 2
28242: PUSH
28243: LD_VAR 0 3
28247: PUSH
28248: LD_INT 1
28250: PPUSH
28251: LD_VAR 0 3
28255: PPUSH
28256: CALL_OW 12
28260: ARRAY
28261: ST_TO_ADDR
// if Crawls ( un ) then
28262: LD_VAR 0 2
28266: PPUSH
28267: CALL_OW 318
28271: IFFALSE 28282
// ComWalk ( un ) ;
28273: LD_VAR 0 2
28277: PPUSH
28278: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28282: LD_VAR 0 2
28286: PPUSH
28287: LD_INT 8
28289: PPUSH
28290: CALL_OW 336
// end ;
28294: PPOPN 3
28296: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28297: LD_EXP 75
28301: PUSH
28302: LD_EXP 119
28306: AND
28307: IFFALSE 28451
28309: GO 28311
28311: DISABLE
28312: LD_INT 0
28314: PPUSH
28315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28316: LD_ADDR_VAR 0 2
28320: PUSH
28321: LD_INT 22
28323: PUSH
28324: LD_OWVAR 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 21
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 34
28348: PUSH
28349: LD_INT 12
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 34
28358: PUSH
28359: LD_INT 51
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 34
28368: PUSH
28369: LD_INT 32
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: PPUSH
28387: CALL_OW 69
28391: ST_TO_ADDR
// if not tmp then
28392: LD_VAR 0 2
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28451
// for i in tmp do
28401: LD_ADDR_VAR 0 1
28405: PUSH
28406: LD_VAR 0 2
28410: PUSH
28411: FOR_IN
28412: IFFALSE 28449
// if GetCargo ( i , mat_artifact ) = 0 then
28414: LD_VAR 0 1
28418: PPUSH
28419: LD_INT 4
28421: PPUSH
28422: CALL_OW 289
28426: PUSH
28427: LD_INT 0
28429: EQUAL
28430: IFFALSE 28447
// SetCargo ( i , mat_siberit , 100 ) ;
28432: LD_VAR 0 1
28436: PPUSH
28437: LD_INT 3
28439: PPUSH
28440: LD_INT 100
28442: PPUSH
28443: CALL_OW 290
28447: GO 28411
28449: POP
28450: POP
// end ;
28451: PPOPN 2
28453: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28454: LD_EXP 75
28458: PUSH
28459: LD_EXP 120
28463: AND
28464: IFFALSE 28647
28466: GO 28468
28468: DISABLE
28469: LD_INT 0
28471: PPUSH
28472: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28473: LD_ADDR_VAR 0 2
28477: PUSH
28478: LD_INT 22
28480: PUSH
28481: LD_OWVAR 2
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: ST_TO_ADDR
// if not tmp then
28495: LD_VAR 0 2
28499: NOT
28500: IFFALSE 28504
// exit ;
28502: GO 28647
// for i := 1 to 2 do
28504: LD_ADDR_VAR 0 1
28508: PUSH
28509: DOUBLE
28510: LD_INT 1
28512: DEC
28513: ST_TO_ADDR
28514: LD_INT 2
28516: PUSH
28517: FOR_TO
28518: IFFALSE 28645
// begin uc_side := your_side ;
28520: LD_ADDR_OWVAR 20
28524: PUSH
28525: LD_OWVAR 2
28529: ST_TO_ADDR
// uc_nation := nation_american ;
28530: LD_ADDR_OWVAR 21
28534: PUSH
28535: LD_INT 1
28537: ST_TO_ADDR
// vc_chassis := us_morphling ;
28538: LD_ADDR_OWVAR 37
28542: PUSH
28543: LD_INT 5
28545: ST_TO_ADDR
// vc_engine := engine_siberite ;
28546: LD_ADDR_OWVAR 39
28550: PUSH
28551: LD_INT 3
28553: ST_TO_ADDR
// vc_control := control_computer ;
28554: LD_ADDR_OWVAR 38
28558: PUSH
28559: LD_INT 3
28561: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28562: LD_ADDR_OWVAR 40
28566: PUSH
28567: LD_INT 10
28569: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28570: LD_VAR 0 2
28574: PUSH
28575: LD_INT 1
28577: ARRAY
28578: PPUSH
28579: CALL_OW 310
28583: NOT
28584: IFFALSE 28631
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28586: CALL_OW 45
28590: PPUSH
28591: LD_VAR 0 2
28595: PUSH
28596: LD_INT 1
28598: ARRAY
28599: PPUSH
28600: CALL_OW 250
28604: PPUSH
28605: LD_VAR 0 2
28609: PUSH
28610: LD_INT 1
28612: ARRAY
28613: PPUSH
28614: CALL_OW 251
28618: PPUSH
28619: LD_INT 12
28621: PPUSH
28622: LD_INT 1
28624: PPUSH
28625: CALL_OW 50
28629: GO 28643
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28631: CALL_OW 45
28635: PPUSH
28636: LD_INT 1
28638: PPUSH
28639: CALL_OW 51
// end ;
28643: GO 28517
28645: POP
28646: POP
// end ;
28647: PPOPN 2
28649: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28650: LD_EXP 75
28654: PUSH
28655: LD_EXP 121
28659: AND
28660: IFFALSE 28882
28662: GO 28664
28664: DISABLE
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
28669: PPUSH
28670: PPUSH
28671: PPUSH
28672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28673: LD_ADDR_VAR 0 6
28677: PUSH
28678: LD_INT 22
28680: PUSH
28681: LD_OWVAR 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 21
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: LD_INT 23
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 6
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 28882
// s1 := rand ( 1 , 4 ) ;
28736: LD_ADDR_VAR 0 2
28740: PUSH
28741: LD_INT 1
28743: PPUSH
28744: LD_INT 4
28746: PPUSH
28747: CALL_OW 12
28751: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: LD_VAR 0 6
28761: PUSH
28762: LD_INT 1
28764: ARRAY
28765: PPUSH
28766: LD_VAR 0 2
28770: PPUSH
28771: CALL_OW 259
28775: ST_TO_ADDR
// if s1 = 1 then
28776: LD_VAR 0 2
28780: PUSH
28781: LD_INT 1
28783: EQUAL
28784: IFFALSE 28804
// s2 := rand ( 2 , 4 ) else
28786: LD_ADDR_VAR 0 3
28790: PUSH
28791: LD_INT 2
28793: PPUSH
28794: LD_INT 4
28796: PPUSH
28797: CALL_OW 12
28801: ST_TO_ADDR
28802: GO 28812
// s2 := 1 ;
28804: LD_ADDR_VAR 0 3
28808: PUSH
28809: LD_INT 1
28811: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28812: LD_ADDR_VAR 0 5
28816: PUSH
28817: LD_VAR 0 6
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: PPUSH
28826: LD_VAR 0 3
28830: PPUSH
28831: CALL_OW 259
28835: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28836: LD_VAR 0 6
28840: PUSH
28841: LD_INT 1
28843: ARRAY
28844: PPUSH
28845: LD_VAR 0 2
28849: PPUSH
28850: LD_VAR 0 5
28854: PPUSH
28855: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28859: LD_VAR 0 6
28863: PUSH
28864: LD_INT 1
28866: ARRAY
28867: PPUSH
28868: LD_VAR 0 3
28872: PPUSH
28873: LD_VAR 0 4
28877: PPUSH
28878: CALL_OW 237
// end ;
28882: PPOPN 6
28884: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28885: LD_EXP 75
28889: PUSH
28890: LD_EXP 122
28894: AND
28895: IFFALSE 28974
28897: GO 28899
28899: DISABLE
28900: LD_INT 0
28902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: LD_INT 22
28910: PUSH
28911: LD_OWVAR 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 30
28922: PUSH
28923: LD_INT 3
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PPUSH
28934: CALL_OW 69
28938: ST_TO_ADDR
// if not tmp then
28939: LD_VAR 0 1
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 28974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28948: LD_VAR 0 1
28952: PUSH
28953: LD_INT 1
28955: PPUSH
28956: LD_VAR 0 1
28960: PPUSH
28961: CALL_OW 12
28965: ARRAY
28966: PPUSH
28967: LD_INT 1
28969: PPUSH
28970: CALL_OW 234
// end ;
28974: PPOPN 1
28976: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28977: LD_EXP 75
28981: PUSH
28982: LD_EXP 123
28986: AND
28987: IFFALSE 29099
28989: GO 28991
28991: DISABLE
28992: LD_INT 0
28994: PPUSH
28995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28996: LD_ADDR_VAR 0 2
29000: PUSH
29001: LD_INT 22
29003: PUSH
29004: LD_OWVAR 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: LD_INT 30
29018: PUSH
29019: LD_INT 27
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 30
29028: PUSH
29029: LD_INT 26
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 30
29038: PUSH
29039: LD_INT 28
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PPUSH
29056: CALL_OW 69
29060: ST_TO_ADDR
// if not tmp then
29061: LD_VAR 0 2
29065: NOT
29066: IFFALSE 29070
// exit ;
29068: GO 29099
// for i in tmp do
29070: LD_ADDR_VAR 0 1
29074: PUSH
29075: LD_VAR 0 2
29079: PUSH
29080: FOR_IN
29081: IFFALSE 29097
// SetLives ( i , 1 ) ;
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_INT 1
29090: PPUSH
29091: CALL_OW 234
29095: GO 29080
29097: POP
29098: POP
// end ;
29099: PPOPN 2
29101: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29102: LD_EXP 75
29106: PUSH
29107: LD_EXP 124
29111: AND
29112: IFFALSE 29399
29114: GO 29116
29116: DISABLE
29117: LD_INT 0
29119: PPUSH
29120: PPUSH
29121: PPUSH
// begin i := rand ( 1 , 7 ) ;
29122: LD_ADDR_VAR 0 1
29126: PUSH
29127: LD_INT 1
29129: PPUSH
29130: LD_INT 7
29132: PPUSH
29133: CALL_OW 12
29137: ST_TO_ADDR
// case i of 1 :
29138: LD_VAR 0 1
29142: PUSH
29143: LD_INT 1
29145: DOUBLE
29146: EQUAL
29147: IFTRUE 29151
29149: GO 29161
29151: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29152: LD_STRING earthquake(getX(game), 0, 32)
29154: PPUSH
29155: CALL_OW 559
29159: GO 29399
29161: LD_INT 2
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29169
29167: GO 29183
29169: POP
// begin ToLua ( displayStucuk(); ) ;
29170: LD_STRING displayStucuk();
29172: PPUSH
29173: CALL_OW 559
// ResetFog ;
29177: CALL_OW 335
// end ; 3 :
29181: GO 29399
29183: LD_INT 3
29185: DOUBLE
29186: EQUAL
29187: IFTRUE 29191
29189: GO 29295
29191: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29192: LD_ADDR_VAR 0 2
29196: PUSH
29197: LD_INT 22
29199: PUSH
29200: LD_OWVAR 2
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 25
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PPUSH
29223: CALL_OW 69
29227: ST_TO_ADDR
// if not tmp then
29228: LD_VAR 0 2
29232: NOT
29233: IFFALSE 29237
// exit ;
29235: GO 29399
// un := tmp [ rand ( 1 , tmp ) ] ;
29237: LD_ADDR_VAR 0 3
29241: PUSH
29242: LD_VAR 0 2
29246: PUSH
29247: LD_INT 1
29249: PPUSH
29250: LD_VAR 0 2
29254: PPUSH
29255: CALL_OW 12
29259: ARRAY
29260: ST_TO_ADDR
// if Crawls ( un ) then
29261: LD_VAR 0 3
29265: PPUSH
29266: CALL_OW 318
29270: IFFALSE 29281
// ComWalk ( un ) ;
29272: LD_VAR 0 3
29276: PPUSH
29277: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29281: LD_VAR 0 3
29285: PPUSH
29286: LD_INT 8
29288: PPUSH
29289: CALL_OW 336
// end ; 4 :
29293: GO 29399
29295: LD_INT 4
29297: DOUBLE
29298: EQUAL
29299: IFTRUE 29303
29301: GO 29377
29303: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29304: LD_ADDR_VAR 0 2
29308: PUSH
29309: LD_INT 22
29311: PUSH
29312: LD_OWVAR 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 30
29323: PUSH
29324: LD_INT 29
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PPUSH
29335: CALL_OW 69
29339: ST_TO_ADDR
// if not tmp then
29340: LD_VAR 0 2
29344: NOT
29345: IFFALSE 29349
// exit ;
29347: GO 29399
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29349: LD_VAR 0 2
29353: PUSH
29354: LD_INT 1
29356: ARRAY
29357: PPUSH
29358: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29362: LD_VAR 0 2
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: CALL_OW 65
// end ; 5 .. 7 :
29375: GO 29399
29377: LD_INT 5
29379: DOUBLE
29380: GREATEREQUAL
29381: IFFALSE 29389
29383: LD_INT 7
29385: DOUBLE
29386: LESSEQUAL
29387: IFTRUE 29391
29389: GO 29398
29391: POP
// StreamSibBomb ; end ;
29392: CALL 25636 0 0
29396: GO 29399
29398: POP
// end ;
29399: PPOPN 3
29401: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29402: LD_EXP 75
29406: PUSH
29407: LD_EXP 125
29411: AND
29412: IFFALSE 29568
29414: GO 29416
29416: DISABLE
29417: LD_INT 0
29419: PPUSH
29420: PPUSH
29421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29422: LD_ADDR_VAR 0 2
29426: PUSH
29427: LD_INT 81
29429: PUSH
29430: LD_OWVAR 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 21
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 21
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 69
29475: ST_TO_ADDR
// if not tmp then
29476: LD_VAR 0 2
29480: NOT
29481: IFFALSE 29485
// exit ;
29483: GO 29568
// p := 0 ;
29485: LD_ADDR_VAR 0 3
29489: PUSH
29490: LD_INT 0
29492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29493: LD_INT 35
29495: PPUSH
29496: CALL_OW 67
// p := p + 1 ;
29500: LD_ADDR_VAR 0 3
29504: PUSH
29505: LD_VAR 0 3
29509: PUSH
29510: LD_INT 1
29512: PLUS
29513: ST_TO_ADDR
// for i in tmp do
29514: LD_ADDR_VAR 0 1
29518: PUSH
29519: LD_VAR 0 2
29523: PUSH
29524: FOR_IN
29525: IFFALSE 29556
// if GetLives ( i ) < 1000 then
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 256
29536: PUSH
29537: LD_INT 1000
29539: LESS
29540: IFFALSE 29554
// SetLives ( i , 1000 ) ;
29542: LD_VAR 0 1
29546: PPUSH
29547: LD_INT 1000
29549: PPUSH
29550: CALL_OW 234
29554: GO 29524
29556: POP
29557: POP
// until p > 20 ;
29558: LD_VAR 0 3
29562: PUSH
29563: LD_INT 20
29565: GREATER
29566: IFFALSE 29493
// end ;
29568: PPOPN 3
29570: END
// every 0 0$1 trigger StreamModeActive and sTime do
29571: LD_EXP 75
29575: PUSH
29576: LD_EXP 126
29580: AND
29581: IFFALSE 29616
29583: GO 29585
29585: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29586: LD_INT 28
29588: PPUSH
29589: LD_OWVAR 2
29593: PPUSH
29594: LD_INT 2
29596: PPUSH
29597: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29601: LD_INT 30
29603: PPUSH
29604: LD_OWVAR 2
29608: PPUSH
29609: LD_INT 2
29611: PPUSH
29612: CALL_OW 322
// end ;
29616: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29617: LD_EXP 75
29621: PUSH
29622: LD_EXP 127
29626: AND
29627: IFFALSE 29748
29629: GO 29631
29631: DISABLE
29632: LD_INT 0
29634: PPUSH
29635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29636: LD_ADDR_VAR 0 2
29640: PUSH
29641: LD_INT 22
29643: PUSH
29644: LD_OWVAR 2
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 21
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 3
29665: PUSH
29666: LD_INT 23
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: PPUSH
29685: CALL_OW 69
29689: ST_TO_ADDR
// if not tmp then
29690: LD_VAR 0 2
29694: NOT
29695: IFFALSE 29699
// exit ;
29697: GO 29748
// for i in tmp do
29699: LD_ADDR_VAR 0 1
29703: PUSH
29704: LD_VAR 0 2
29708: PUSH
29709: FOR_IN
29710: IFFALSE 29746
// begin if Crawls ( i ) then
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL_OW 318
29721: IFFALSE 29732
// ComWalk ( i ) ;
29723: LD_VAR 0 1
29727: PPUSH
29728: CALL_OW 138
// SetClass ( i , 2 ) ;
29732: LD_VAR 0 1
29736: PPUSH
29737: LD_INT 2
29739: PPUSH
29740: CALL_OW 336
// end ;
29744: GO 29709
29746: POP
29747: POP
// end ;
29748: PPOPN 2
29750: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29751: LD_EXP 75
29755: PUSH
29756: LD_EXP 128
29760: AND
29761: IFFALSE 30049
29763: GO 29765
29765: DISABLE
29766: LD_INT 0
29768: PPUSH
29769: PPUSH
29770: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29771: LD_OWVAR 2
29775: PPUSH
29776: LD_INT 9
29778: PPUSH
29779: LD_INT 1
29781: PPUSH
29782: LD_INT 1
29784: PPUSH
29785: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29789: LD_INT 9
29791: PPUSH
29792: LD_OWVAR 2
29796: PPUSH
29797: CALL_OW 343
// uc_side := 9 ;
29801: LD_ADDR_OWVAR 20
29805: PUSH
29806: LD_INT 9
29808: ST_TO_ADDR
// uc_nation := 2 ;
29809: LD_ADDR_OWVAR 21
29813: PUSH
29814: LD_INT 2
29816: ST_TO_ADDR
// hc_name := Dark Warrior ;
29817: LD_ADDR_OWVAR 26
29821: PUSH
29822: LD_STRING Dark Warrior
29824: ST_TO_ADDR
// hc_gallery :=  ;
29825: LD_ADDR_OWVAR 33
29829: PUSH
29830: LD_STRING 
29832: ST_TO_ADDR
// hc_noskilllimit := true ;
29833: LD_ADDR_OWVAR 76
29837: PUSH
29838: LD_INT 1
29840: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29841: LD_ADDR_OWVAR 31
29845: PUSH
29846: LD_INT 30
29848: PUSH
29849: LD_INT 30
29851: PUSH
29852: LD_INT 30
29854: PUSH
29855: LD_INT 30
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// un := CreateHuman ;
29864: LD_ADDR_VAR 0 3
29868: PUSH
29869: CALL_OW 44
29873: ST_TO_ADDR
// hc_noskilllimit := false ;
29874: LD_ADDR_OWVAR 76
29878: PUSH
29879: LD_INT 0
29881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29882: LD_VAR 0 3
29886: PPUSH
29887: LD_INT 1
29889: PPUSH
29890: CALL_OW 51
// ToLua ( playRanger() ) ;
29894: LD_STRING playRanger()
29896: PPUSH
29897: CALL_OW 559
// p := 0 ;
29901: LD_ADDR_VAR 0 2
29905: PUSH
29906: LD_INT 0
29908: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29909: LD_INT 35
29911: PPUSH
29912: CALL_OW 67
// p := p + 1 ;
29916: LD_ADDR_VAR 0 2
29920: PUSH
29921: LD_VAR 0 2
29925: PUSH
29926: LD_INT 1
29928: PLUS
29929: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29930: LD_VAR 0 3
29934: PPUSH
29935: CALL_OW 256
29939: PUSH
29940: LD_INT 1000
29942: LESS
29943: IFFALSE 29957
// SetLives ( un , 1000 ) ;
29945: LD_VAR 0 3
29949: PPUSH
29950: LD_INT 1000
29952: PPUSH
29953: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29957: LD_VAR 0 3
29961: PPUSH
29962: LD_INT 81
29964: PUSH
29965: LD_OWVAR 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 91
29976: PUSH
29977: LD_VAR 0 3
29981: PUSH
29982: LD_INT 30
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 69
29998: PPUSH
29999: LD_VAR 0 3
30003: PPUSH
30004: CALL_OW 74
30008: PPUSH
30009: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 80
30020: GREATER
30021: PUSH
30022: LD_VAR 0 3
30026: PPUSH
30027: CALL_OW 301
30031: OR
30032: IFFALSE 29909
// if un then
30034: LD_VAR 0 3
30038: IFFALSE 30049
// RemoveUnit ( un ) ;
30040: LD_VAR 0 3
30044: PPUSH
30045: CALL_OW 64
// end ;
30049: PPOPN 3
30051: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30052: LD_EXP 129
30056: IFFALSE 30172
30058: GO 30060
30060: DISABLE
30061: LD_INT 0
30063: PPUSH
30064: PPUSH
30065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30066: LD_ADDR_VAR 0 2
30070: PUSH
30071: LD_INT 81
30073: PUSH
30074: LD_OWVAR 2
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 21
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PPUSH
30097: CALL_OW 69
30101: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30102: LD_STRING playComputer()
30104: PPUSH
30105: CALL_OW 559
// if not tmp then
30109: LD_VAR 0 2
30113: NOT
30114: IFFALSE 30118
// exit ;
30116: GO 30172
// for i in tmp do
30118: LD_ADDR_VAR 0 1
30122: PUSH
30123: LD_VAR 0 2
30127: PUSH
30128: FOR_IN
30129: IFFALSE 30170
// for j := 1 to 4 do
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: DOUBLE
30137: LD_INT 1
30139: DEC
30140: ST_TO_ADDR
30141: LD_INT 4
30143: PUSH
30144: FOR_TO
30145: IFFALSE 30166
// SetSkill ( i , j , 10 ) ;
30147: LD_VAR 0 1
30151: PPUSH
30152: LD_VAR 0 3
30156: PPUSH
30157: LD_INT 10
30159: PPUSH
30160: CALL_OW 237
30164: GO 30144
30166: POP
30167: POP
30168: GO 30128
30170: POP
30171: POP
// end ;
30172: PPOPN 3
30174: END
// every 0 0$1 trigger s30 do var i , tmp ;
30175: LD_EXP 130
30179: IFFALSE 30248
30181: GO 30183
30183: DISABLE
30184: LD_INT 0
30186: PPUSH
30187: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30188: LD_ADDR_VAR 0 2
30192: PUSH
30193: LD_INT 22
30195: PUSH
30196: LD_OWVAR 2
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PPUSH
30205: CALL_OW 69
30209: ST_TO_ADDR
// if not tmp then
30210: LD_VAR 0 2
30214: NOT
30215: IFFALSE 30219
// exit ;
30217: GO 30248
// for i in tmp do
30219: LD_ADDR_VAR 0 1
30223: PUSH
30224: LD_VAR 0 2
30228: PUSH
30229: FOR_IN
30230: IFFALSE 30246
// SetLives ( i , 300 ) ;
30232: LD_VAR 0 1
30236: PPUSH
30237: LD_INT 300
30239: PPUSH
30240: CALL_OW 234
30244: GO 30229
30246: POP
30247: POP
// end ;
30248: PPOPN 2
30250: END
// every 0 0$1 trigger s60 do var i , tmp ;
30251: LD_EXP 131
30255: IFFALSE 30324
30257: GO 30259
30259: DISABLE
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30264: LD_ADDR_VAR 0 2
30268: PUSH
30269: LD_INT 22
30271: PUSH
30272: LD_OWVAR 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PPUSH
30281: CALL_OW 69
30285: ST_TO_ADDR
// if not tmp then
30286: LD_VAR 0 2
30290: NOT
30291: IFFALSE 30295
// exit ;
30293: GO 30324
// for i in tmp do
30295: LD_ADDR_VAR 0 1
30299: PUSH
30300: LD_VAR 0 2
30304: PUSH
30305: FOR_IN
30306: IFFALSE 30322
// SetLives ( i , 600 ) ;
30308: LD_VAR 0 1
30312: PPUSH
30313: LD_INT 600
30315: PPUSH
30316: CALL_OW 234
30320: GO 30305
30322: POP
30323: POP
// end ;
30324: PPOPN 2
30326: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30327: LD_INT 0
30329: PPUSH
// case cmd of 301 :
30330: LD_VAR 0 1
30334: PUSH
30335: LD_INT 301
30337: DOUBLE
30338: EQUAL
30339: IFTRUE 30343
30341: GO 30375
30343: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30344: LD_VAR 0 6
30348: PPUSH
30349: LD_VAR 0 7
30353: PPUSH
30354: LD_VAR 0 8
30358: PPUSH
30359: LD_VAR 0 4
30363: PPUSH
30364: LD_VAR 0 5
30368: PPUSH
30369: CALL 31576 0 5
30373: GO 30496
30375: LD_INT 302
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30420
30383: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30384: LD_VAR 0 6
30388: PPUSH
30389: LD_VAR 0 7
30393: PPUSH
30394: LD_VAR 0 8
30398: PPUSH
30399: LD_VAR 0 9
30403: PPUSH
30404: LD_VAR 0 4
30408: PPUSH
30409: LD_VAR 0 5
30413: PPUSH
30414: CALL 31667 0 6
30418: GO 30496
30420: LD_INT 303
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30465
30428: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30429: LD_VAR 0 6
30433: PPUSH
30434: LD_VAR 0 7
30438: PPUSH
30439: LD_VAR 0 8
30443: PPUSH
30444: LD_VAR 0 9
30448: PPUSH
30449: LD_VAR 0 4
30453: PPUSH
30454: LD_VAR 0 5
30458: PPUSH
30459: CALL 30501 0 6
30463: GO 30496
30465: LD_INT 304
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 30495
30473: POP
// hHackTeleport ( unit , x , y ) ; end ;
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_VAR 0 4
30483: PPUSH
30484: LD_VAR 0 5
30488: PPUSH
30489: CALL 32260 0 3
30493: GO 30496
30495: POP
// end ;
30496: LD_VAR 0 12
30500: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30501: LD_INT 0
30503: PPUSH
30504: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30505: LD_VAR 0 1
30509: PUSH
30510: LD_INT 1
30512: LESS
30513: PUSH
30514: LD_VAR 0 1
30518: PUSH
30519: LD_INT 3
30521: GREATER
30522: OR
30523: PUSH
30524: LD_VAR 0 5
30528: PPUSH
30529: LD_VAR 0 6
30533: PPUSH
30534: CALL_OW 428
30538: OR
30539: IFFALSE 30543
// exit ;
30541: GO 31263
// uc_side := your_side ;
30543: LD_ADDR_OWVAR 20
30547: PUSH
30548: LD_OWVAR 2
30552: ST_TO_ADDR
// uc_nation := nation ;
30553: LD_ADDR_OWVAR 21
30557: PUSH
30558: LD_VAR 0 1
30562: ST_TO_ADDR
// bc_level = 1 ;
30563: LD_ADDR_OWVAR 43
30567: PUSH
30568: LD_INT 1
30570: ST_TO_ADDR
// case btype of 1 :
30571: LD_VAR 0 2
30575: PUSH
30576: LD_INT 1
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30595
30584: POP
// bc_type := b_depot ; 2 :
30585: LD_ADDR_OWVAR 42
30589: PUSH
30590: LD_INT 0
30592: ST_TO_ADDR
30593: GO 31207
30595: LD_INT 2
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30614
30603: POP
// bc_type := b_warehouse ; 3 :
30604: LD_ADDR_OWVAR 42
30608: PUSH
30609: LD_INT 1
30611: ST_TO_ADDR
30612: GO 31207
30614: LD_INT 3
30616: DOUBLE
30617: EQUAL
30618: IFTRUE 30622
30620: GO 30633
30622: POP
// bc_type := b_lab ; 4 .. 9 :
30623: LD_ADDR_OWVAR 42
30627: PUSH
30628: LD_INT 6
30630: ST_TO_ADDR
30631: GO 31207
30633: LD_INT 4
30635: DOUBLE
30636: GREATEREQUAL
30637: IFFALSE 30645
30639: LD_INT 9
30641: DOUBLE
30642: LESSEQUAL
30643: IFTRUE 30647
30645: GO 30699
30647: POP
// begin bc_type := b_lab_half ;
30648: LD_ADDR_OWVAR 42
30652: PUSH
30653: LD_INT 7
30655: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30656: LD_ADDR_OWVAR 44
30660: PUSH
30661: LD_INT 10
30663: PUSH
30664: LD_INT 11
30666: PUSH
30667: LD_INT 12
30669: PUSH
30670: LD_INT 15
30672: PUSH
30673: LD_INT 14
30675: PUSH
30676: LD_INT 13
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: PUSH
30687: LD_VAR 0 2
30691: PUSH
30692: LD_INT 3
30694: MINUS
30695: ARRAY
30696: ST_TO_ADDR
// end ; 10 .. 13 :
30697: GO 31207
30699: LD_INT 10
30701: DOUBLE
30702: GREATEREQUAL
30703: IFFALSE 30711
30705: LD_INT 13
30707: DOUBLE
30708: LESSEQUAL
30709: IFTRUE 30713
30711: GO 30790
30713: POP
// begin bc_type := b_lab_full ;
30714: LD_ADDR_OWVAR 42
30718: PUSH
30719: LD_INT 8
30721: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30722: LD_ADDR_OWVAR 44
30726: PUSH
30727: LD_INT 10
30729: PUSH
30730: LD_INT 12
30732: PUSH
30733: LD_INT 14
30735: PUSH
30736: LD_INT 13
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: PUSH
30745: LD_VAR 0 2
30749: PUSH
30750: LD_INT 9
30752: MINUS
30753: ARRAY
30754: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30755: LD_ADDR_OWVAR 45
30759: PUSH
30760: LD_INT 11
30762: PUSH
30763: LD_INT 15
30765: PUSH
30766: LD_INT 12
30768: PUSH
30769: LD_INT 15
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: PUSH
30778: LD_VAR 0 2
30782: PUSH
30783: LD_INT 9
30785: MINUS
30786: ARRAY
30787: ST_TO_ADDR
// end ; 14 :
30788: GO 31207
30790: LD_INT 14
30792: DOUBLE
30793: EQUAL
30794: IFTRUE 30798
30796: GO 30809
30798: POP
// bc_type := b_workshop ; 15 :
30799: LD_ADDR_OWVAR 42
30803: PUSH
30804: LD_INT 2
30806: ST_TO_ADDR
30807: GO 31207
30809: LD_INT 15
30811: DOUBLE
30812: EQUAL
30813: IFTRUE 30817
30815: GO 30828
30817: POP
// bc_type := b_factory ; 16 :
30818: LD_ADDR_OWVAR 42
30822: PUSH
30823: LD_INT 3
30825: ST_TO_ADDR
30826: GO 31207
30828: LD_INT 16
30830: DOUBLE
30831: EQUAL
30832: IFTRUE 30836
30834: GO 30847
30836: POP
// bc_type := b_ext_gun ; 17 :
30837: LD_ADDR_OWVAR 42
30841: PUSH
30842: LD_INT 17
30844: ST_TO_ADDR
30845: GO 31207
30847: LD_INT 17
30849: DOUBLE
30850: EQUAL
30851: IFTRUE 30855
30853: GO 30883
30855: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30856: LD_ADDR_OWVAR 42
30860: PUSH
30861: LD_INT 19
30863: PUSH
30864: LD_INT 23
30866: PUSH
30867: LD_INT 19
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: PUSH
30875: LD_VAR 0 1
30879: ARRAY
30880: ST_TO_ADDR
30881: GO 31207
30883: LD_INT 18
30885: DOUBLE
30886: EQUAL
30887: IFTRUE 30891
30889: GO 30902
30891: POP
// bc_type := b_ext_radar ; 19 :
30892: LD_ADDR_OWVAR 42
30896: PUSH
30897: LD_INT 20
30899: ST_TO_ADDR
30900: GO 31207
30902: LD_INT 19
30904: DOUBLE
30905: EQUAL
30906: IFTRUE 30910
30908: GO 30921
30910: POP
// bc_type := b_ext_radio ; 20 :
30911: LD_ADDR_OWVAR 42
30915: PUSH
30916: LD_INT 22
30918: ST_TO_ADDR
30919: GO 31207
30921: LD_INT 20
30923: DOUBLE
30924: EQUAL
30925: IFTRUE 30929
30927: GO 30940
30929: POP
// bc_type := b_ext_siberium ; 21 :
30930: LD_ADDR_OWVAR 42
30934: PUSH
30935: LD_INT 21
30937: ST_TO_ADDR
30938: GO 31207
30940: LD_INT 21
30942: DOUBLE
30943: EQUAL
30944: IFTRUE 30948
30946: GO 30959
30948: POP
// bc_type := b_ext_computer ; 22 :
30949: LD_ADDR_OWVAR 42
30953: PUSH
30954: LD_INT 24
30956: ST_TO_ADDR
30957: GO 31207
30959: LD_INT 22
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 30967
30965: GO 30978
30967: POP
// bc_type := b_ext_track ; 23 :
30968: LD_ADDR_OWVAR 42
30972: PUSH
30973: LD_INT 16
30975: ST_TO_ADDR
30976: GO 31207
30978: LD_INT 23
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 30997
30986: POP
// bc_type := b_ext_laser ; 24 :
30987: LD_ADDR_OWVAR 42
30991: PUSH
30992: LD_INT 25
30994: ST_TO_ADDR
30995: GO 31207
30997: LD_INT 24
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31005
31003: GO 31016
31005: POP
// bc_type := b_control_tower ; 25 :
31006: LD_ADDR_OWVAR 42
31010: PUSH
31011: LD_INT 36
31013: ST_TO_ADDR
31014: GO 31207
31016: LD_INT 25
31018: DOUBLE
31019: EQUAL
31020: IFTRUE 31024
31022: GO 31035
31024: POP
// bc_type := b_breastwork ; 26 :
31025: LD_ADDR_OWVAR 42
31029: PUSH
31030: LD_INT 31
31032: ST_TO_ADDR
31033: GO 31207
31035: LD_INT 26
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31054
31043: POP
// bc_type := b_bunker ; 27 :
31044: LD_ADDR_OWVAR 42
31048: PUSH
31049: LD_INT 32
31051: ST_TO_ADDR
31052: GO 31207
31054: LD_INT 27
31056: DOUBLE
31057: EQUAL
31058: IFTRUE 31062
31060: GO 31073
31062: POP
// bc_type := b_turret ; 28 :
31063: LD_ADDR_OWVAR 42
31067: PUSH
31068: LD_INT 33
31070: ST_TO_ADDR
31071: GO 31207
31073: LD_INT 28
31075: DOUBLE
31076: EQUAL
31077: IFTRUE 31081
31079: GO 31092
31081: POP
// bc_type := b_armoury ; 29 :
31082: LD_ADDR_OWVAR 42
31086: PUSH
31087: LD_INT 4
31089: ST_TO_ADDR
31090: GO 31207
31092: LD_INT 29
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31111
31100: POP
// bc_type := b_barracks ; 30 :
31101: LD_ADDR_OWVAR 42
31105: PUSH
31106: LD_INT 5
31108: ST_TO_ADDR
31109: GO 31207
31111: LD_INT 30
31113: DOUBLE
31114: EQUAL
31115: IFTRUE 31119
31117: GO 31130
31119: POP
// bc_type := b_solar_power ; 31 :
31120: LD_ADDR_OWVAR 42
31124: PUSH
31125: LD_INT 27
31127: ST_TO_ADDR
31128: GO 31207
31130: LD_INT 31
31132: DOUBLE
31133: EQUAL
31134: IFTRUE 31138
31136: GO 31149
31138: POP
// bc_type := b_oil_power ; 32 :
31139: LD_ADDR_OWVAR 42
31143: PUSH
31144: LD_INT 26
31146: ST_TO_ADDR
31147: GO 31207
31149: LD_INT 32
31151: DOUBLE
31152: EQUAL
31153: IFTRUE 31157
31155: GO 31168
31157: POP
// bc_type := b_siberite_power ; 33 :
31158: LD_ADDR_OWVAR 42
31162: PUSH
31163: LD_INT 28
31165: ST_TO_ADDR
31166: GO 31207
31168: LD_INT 33
31170: DOUBLE
31171: EQUAL
31172: IFTRUE 31176
31174: GO 31187
31176: POP
// bc_type := b_oil_mine ; 34 :
31177: LD_ADDR_OWVAR 42
31181: PUSH
31182: LD_INT 29
31184: ST_TO_ADDR
31185: GO 31207
31187: LD_INT 34
31189: DOUBLE
31190: EQUAL
31191: IFTRUE 31195
31193: GO 31206
31195: POP
// bc_type := b_siberite_mine ; end ;
31196: LD_ADDR_OWVAR 42
31200: PUSH
31201: LD_INT 30
31203: ST_TO_ADDR
31204: GO 31207
31206: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31207: LD_ADDR_VAR 0 8
31211: PUSH
31212: LD_VAR 0 5
31216: PPUSH
31217: LD_VAR 0 6
31221: PPUSH
31222: LD_VAR 0 3
31226: PPUSH
31227: CALL_OW 47
31231: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31232: LD_OWVAR 42
31236: PUSH
31237: LD_INT 32
31239: PUSH
31240: LD_INT 33
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: IN
31247: IFFALSE 31263
// PlaceWeaponTurret ( b , weapon ) ;
31249: LD_VAR 0 8
31253: PPUSH
31254: LD_VAR 0 4
31258: PPUSH
31259: CALL_OW 431
// end ;
31263: LD_VAR 0 7
31267: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31274: LD_ADDR_VAR 0 4
31278: PUSH
31279: LD_INT 22
31281: PUSH
31282: LD_OWVAR 2
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: LD_INT 30
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 30
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PPUSH
31323: CALL_OW 69
31327: ST_TO_ADDR
// if not tmp then
31328: LD_VAR 0 4
31332: NOT
31333: IFFALSE 31337
// exit ;
31335: GO 31396
// for i in tmp do
31337: LD_ADDR_VAR 0 2
31341: PUSH
31342: LD_VAR 0 4
31346: PUSH
31347: FOR_IN
31348: IFFALSE 31394
// for j = 1 to 3 do
31350: LD_ADDR_VAR 0 3
31354: PUSH
31355: DOUBLE
31356: LD_INT 1
31358: DEC
31359: ST_TO_ADDR
31360: LD_INT 3
31362: PUSH
31363: FOR_TO
31364: IFFALSE 31390
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31366: LD_VAR 0 2
31370: PPUSH
31371: CALL_OW 274
31375: PPUSH
31376: LD_VAR 0 3
31380: PPUSH
31381: LD_INT 99999
31383: PPUSH
31384: CALL_OW 277
31388: GO 31363
31390: POP
31391: POP
31392: GO 31347
31394: POP
31395: POP
// end ;
31396: LD_VAR 0 1
31400: RET
// export function hHackSetLevel10 ; var i , j ; begin
31401: LD_INT 0
31403: PPUSH
31404: PPUSH
31405: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31406: LD_ADDR_VAR 0 2
31410: PUSH
31411: LD_INT 21
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PPUSH
31421: CALL_OW 69
31425: PUSH
31426: FOR_IN
31427: IFFALSE 31479
// if IsSelected ( i ) then
31429: LD_VAR 0 2
31433: PPUSH
31434: CALL_OW 306
31438: IFFALSE 31477
// begin for j := 1 to 4 do
31440: LD_ADDR_VAR 0 3
31444: PUSH
31445: DOUBLE
31446: LD_INT 1
31448: DEC
31449: ST_TO_ADDR
31450: LD_INT 4
31452: PUSH
31453: FOR_TO
31454: IFFALSE 31475
// SetSkill ( i , j , 10 ) ;
31456: LD_VAR 0 2
31460: PPUSH
31461: LD_VAR 0 3
31465: PPUSH
31466: LD_INT 10
31468: PPUSH
31469: CALL_OW 237
31473: GO 31453
31475: POP
31476: POP
// end ;
31477: GO 31426
31479: POP
31480: POP
// end ;
31481: LD_VAR 0 1
31485: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31486: LD_INT 0
31488: PPUSH
31489: PPUSH
31490: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: LD_INT 22
31498: PUSH
31499: LD_OWVAR 2
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 21
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PPUSH
31522: CALL_OW 69
31526: PUSH
31527: FOR_IN
31528: IFFALSE 31569
// begin for j := 1 to 4 do
31530: LD_ADDR_VAR 0 3
31534: PUSH
31535: DOUBLE
31536: LD_INT 1
31538: DEC
31539: ST_TO_ADDR
31540: LD_INT 4
31542: PUSH
31543: FOR_TO
31544: IFFALSE 31565
// SetSkill ( i , j , 10 ) ;
31546: LD_VAR 0 2
31550: PPUSH
31551: LD_VAR 0 3
31555: PPUSH
31556: LD_INT 10
31558: PPUSH
31559: CALL_OW 237
31563: GO 31543
31565: POP
31566: POP
// end ;
31567: GO 31527
31569: POP
31570: POP
// end ;
31571: LD_VAR 0 1
31575: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31576: LD_INT 0
31578: PPUSH
// uc_side := your_side ;
31579: LD_ADDR_OWVAR 20
31583: PUSH
31584: LD_OWVAR 2
31588: ST_TO_ADDR
// uc_nation := nation ;
31589: LD_ADDR_OWVAR 21
31593: PUSH
31594: LD_VAR 0 1
31598: ST_TO_ADDR
// InitHc ;
31599: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31603: LD_INT 0
31605: PPUSH
31606: LD_VAR 0 2
31610: PPUSH
31611: LD_VAR 0 3
31615: PPUSH
31616: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31620: LD_VAR 0 4
31624: PPUSH
31625: LD_VAR 0 5
31629: PPUSH
31630: CALL_OW 428
31634: PUSH
31635: LD_INT 0
31637: EQUAL
31638: IFFALSE 31662
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31640: CALL_OW 44
31644: PPUSH
31645: LD_VAR 0 4
31649: PPUSH
31650: LD_VAR 0 5
31654: PPUSH
31655: LD_INT 1
31657: PPUSH
31658: CALL_OW 48
// end ;
31662: LD_VAR 0 6
31666: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31667: LD_INT 0
31669: PPUSH
31670: PPUSH
// uc_side := your_side ;
31671: LD_ADDR_OWVAR 20
31675: PUSH
31676: LD_OWVAR 2
31680: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31681: LD_VAR 0 1
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 5
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: IN
31708: IFFALSE 31720
// uc_nation := nation_american else
31710: LD_ADDR_OWVAR 21
31714: PUSH
31715: LD_INT 1
31717: ST_TO_ADDR
31718: GO 31763
// if chassis in [ 11 , 12 , 13 , 14 ] then
31720: LD_VAR 0 1
31724: PUSH
31725: LD_INT 11
31727: PUSH
31728: LD_INT 12
31730: PUSH
31731: LD_INT 13
31733: PUSH
31734: LD_INT 14
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: IN
31743: IFFALSE 31755
// uc_nation := nation_arabian else
31745: LD_ADDR_OWVAR 21
31749: PUSH
31750: LD_INT 2
31752: ST_TO_ADDR
31753: GO 31763
// uc_nation := nation_russian ;
31755: LD_ADDR_OWVAR 21
31759: PUSH
31760: LD_INT 3
31762: ST_TO_ADDR
// vc_chassis := chassis ;
31763: LD_ADDR_OWVAR 37
31767: PUSH
31768: LD_VAR 0 1
31772: ST_TO_ADDR
// vc_engine := engine ;
31773: LD_ADDR_OWVAR 39
31777: PUSH
31778: LD_VAR 0 2
31782: ST_TO_ADDR
// vc_control := control ;
31783: LD_ADDR_OWVAR 38
31787: PUSH
31788: LD_VAR 0 3
31792: ST_TO_ADDR
// vc_weapon := weapon ;
31793: LD_ADDR_OWVAR 40
31797: PUSH
31798: LD_VAR 0 4
31802: ST_TO_ADDR
// un := CreateVehicle ;
31803: LD_ADDR_VAR 0 8
31807: PUSH
31808: CALL_OW 45
31812: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31813: LD_VAR 0 8
31817: PPUSH
31818: LD_INT 0
31820: PPUSH
31821: LD_INT 5
31823: PPUSH
31824: CALL_OW 12
31828: PPUSH
31829: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31833: LD_VAR 0 8
31837: PPUSH
31838: LD_VAR 0 5
31842: PPUSH
31843: LD_VAR 0 6
31847: PPUSH
31848: LD_INT 1
31850: PPUSH
31851: CALL_OW 48
// end ;
31855: LD_VAR 0 7
31859: RET
// export hInvincible ; every 1 do
31860: GO 31862
31862: DISABLE
// hInvincible := [ ] ;
31863: LD_ADDR_EXP 132
31867: PUSH
31868: EMPTY
31869: ST_TO_ADDR
31870: END
// every 10 do var i ;
31871: GO 31873
31873: DISABLE
31874: LD_INT 0
31876: PPUSH
// begin enable ;
31877: ENABLE
// if not hInvincible then
31878: LD_EXP 132
31882: NOT
31883: IFFALSE 31887
// exit ;
31885: GO 31931
// for i in hInvincible do
31887: LD_ADDR_VAR 0 1
31891: PUSH
31892: LD_EXP 132
31896: PUSH
31897: FOR_IN
31898: IFFALSE 31929
// if GetLives ( i ) < 1000 then
31900: LD_VAR 0 1
31904: PPUSH
31905: CALL_OW 256
31909: PUSH
31910: LD_INT 1000
31912: LESS
31913: IFFALSE 31927
// SetLives ( i , 1000 ) ;
31915: LD_VAR 0 1
31919: PPUSH
31920: LD_INT 1000
31922: PPUSH
31923: CALL_OW 234
31927: GO 31897
31929: POP
31930: POP
// end ;
31931: PPOPN 1
31933: END
// export function hHackInvincible ; var i ; begin
31934: LD_INT 0
31936: PPUSH
31937: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31938: LD_ADDR_VAR 0 2
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 21
31958: PUSH
31959: LD_INT 2
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: PPUSH
31971: CALL_OW 69
31975: PUSH
31976: FOR_IN
31977: IFFALSE 32038
// if IsSelected ( i ) then
31979: LD_VAR 0 2
31983: PPUSH
31984: CALL_OW 306
31988: IFFALSE 32036
// begin if i in hInvincible then
31990: LD_VAR 0 2
31994: PUSH
31995: LD_EXP 132
31999: IN
32000: IFFALSE 32020
// hInvincible := hInvincible diff i else
32002: LD_ADDR_EXP 132
32006: PUSH
32007: LD_EXP 132
32011: PUSH
32012: LD_VAR 0 2
32016: DIFF
32017: ST_TO_ADDR
32018: GO 32036
// hInvincible := hInvincible union i ;
32020: LD_ADDR_EXP 132
32024: PUSH
32025: LD_EXP 132
32029: PUSH
32030: LD_VAR 0 2
32034: UNION
32035: ST_TO_ADDR
// end ;
32036: GO 31976
32038: POP
32039: POP
// end ;
32040: LD_VAR 0 1
32044: RET
// export function hHackInvisible ; var i , j ; begin
32045: LD_INT 0
32047: PPUSH
32048: PPUSH
32049: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32050: LD_ADDR_VAR 0 2
32054: PUSH
32055: LD_INT 21
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PPUSH
32065: CALL_OW 69
32069: PUSH
32070: FOR_IN
32071: IFFALSE 32095
// if IsSelected ( i ) then
32073: LD_VAR 0 2
32077: PPUSH
32078: CALL_OW 306
32082: IFFALSE 32093
// ComForceInvisible ( i ) ;
32084: LD_VAR 0 2
32088: PPUSH
32089: CALL_OW 496
32093: GO 32070
32095: POP
32096: POP
// end ;
32097: LD_VAR 0 1
32101: RET
// export function hHackChangeYourSide ; begin
32102: LD_INT 0
32104: PPUSH
// if your_side = 8 then
32105: LD_OWVAR 2
32109: PUSH
32110: LD_INT 8
32112: EQUAL
32113: IFFALSE 32125
// your_side := 0 else
32115: LD_ADDR_OWVAR 2
32119: PUSH
32120: LD_INT 0
32122: ST_TO_ADDR
32123: GO 32139
// your_side := your_side + 1 ;
32125: LD_ADDR_OWVAR 2
32129: PUSH
32130: LD_OWVAR 2
32134: PUSH
32135: LD_INT 1
32137: PLUS
32138: ST_TO_ADDR
// end ;
32139: LD_VAR 0 1
32143: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32144: LD_INT 0
32146: PPUSH
32147: PPUSH
32148: PPUSH
// for i in all_units do
32149: LD_ADDR_VAR 0 2
32153: PUSH
32154: LD_OWVAR 3
32158: PUSH
32159: FOR_IN
32160: IFFALSE 32238
// if IsSelected ( i ) then
32162: LD_VAR 0 2
32166: PPUSH
32167: CALL_OW 306
32171: IFFALSE 32236
// begin j := GetSide ( i ) ;
32173: LD_ADDR_VAR 0 3
32177: PUSH
32178: LD_VAR 0 2
32182: PPUSH
32183: CALL_OW 255
32187: ST_TO_ADDR
// if j = 8 then
32188: LD_VAR 0 3
32192: PUSH
32193: LD_INT 8
32195: EQUAL
32196: IFFALSE 32208
// j := 0 else
32198: LD_ADDR_VAR 0 3
32202: PUSH
32203: LD_INT 0
32205: ST_TO_ADDR
32206: GO 32222
// j := j + 1 ;
32208: LD_ADDR_VAR 0 3
32212: PUSH
32213: LD_VAR 0 3
32217: PUSH
32218: LD_INT 1
32220: PLUS
32221: ST_TO_ADDR
// SetSide ( i , j ) ;
32222: LD_VAR 0 2
32226: PPUSH
32227: LD_VAR 0 3
32231: PPUSH
32232: CALL_OW 235
// end ;
32236: GO 32159
32238: POP
32239: POP
// end ;
32240: LD_VAR 0 1
32244: RET
// export function hHackFog ; begin
32245: LD_INT 0
32247: PPUSH
// FogOff ( true ) ;
32248: LD_INT 1
32250: PPUSH
32251: CALL_OW 344
// end ;
32255: LD_VAR 0 1
32259: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32260: LD_INT 0
32262: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32263: LD_VAR 0 1
32267: PPUSH
32268: LD_VAR 0 2
32272: PPUSH
32273: LD_VAR 0 3
32277: PPUSH
32278: LD_INT 1
32280: PPUSH
32281: LD_INT 1
32283: PPUSH
32284: CALL_OW 483
// CenterOnXY ( x , y ) ;
32288: LD_VAR 0 2
32292: PPUSH
32293: LD_VAR 0 3
32297: PPUSH
32298: CALL_OW 84
// end ; end_of_file end_of_file
32302: LD_VAR 0 4
32306: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32307: LD_INT 0
32309: PPUSH
32310: PPUSH
// if exist_mode then
32311: LD_VAR 0 2
32315: IFFALSE 32340
// unit := CreateCharacter ( prefix & ident ) else
32317: LD_ADDR_VAR 0 5
32321: PUSH
32322: LD_VAR 0 3
32326: PUSH
32327: LD_VAR 0 1
32331: STR
32332: PPUSH
32333: CALL_OW 34
32337: ST_TO_ADDR
32338: GO 32355
// unit := NewCharacter ( ident ) ;
32340: LD_ADDR_VAR 0 5
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 25
32354: ST_TO_ADDR
// result := unit ;
32355: LD_ADDR_VAR 0 4
32359: PUSH
32360: LD_VAR 0 5
32364: ST_TO_ADDR
// end ;
32365: LD_VAR 0 4
32369: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32370: LD_INT 0
32372: PPUSH
32373: PPUSH
// if not side or not nation then
32374: LD_VAR 0 1
32378: NOT
32379: PUSH
32380: LD_VAR 0 2
32384: NOT
32385: OR
32386: IFFALSE 32390
// exit ;
32388: GO 33158
// case nation of nation_american :
32390: LD_VAR 0 2
32394: PUSH
32395: LD_INT 1
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32617
32403: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32404: LD_ADDR_VAR 0 4
32408: PUSH
32409: LD_INT 35
32411: PUSH
32412: LD_INT 45
32414: PUSH
32415: LD_INT 46
32417: PUSH
32418: LD_INT 47
32420: PUSH
32421: LD_INT 82
32423: PUSH
32424: LD_INT 83
32426: PUSH
32427: LD_INT 84
32429: PUSH
32430: LD_INT 85
32432: PUSH
32433: LD_INT 86
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: LD_INT 6
32444: PUSH
32445: LD_INT 15
32447: PUSH
32448: LD_INT 16
32450: PUSH
32451: LD_INT 7
32453: PUSH
32454: LD_INT 12
32456: PUSH
32457: LD_INT 13
32459: PUSH
32460: LD_INT 10
32462: PUSH
32463: LD_INT 14
32465: PUSH
32466: LD_INT 20
32468: PUSH
32469: LD_INT 21
32471: PUSH
32472: LD_INT 22
32474: PUSH
32475: LD_INT 25
32477: PUSH
32478: LD_INT 32
32480: PUSH
32481: LD_INT 27
32483: PUSH
32484: LD_INT 36
32486: PUSH
32487: LD_INT 69
32489: PUSH
32490: LD_INT 39
32492: PUSH
32493: LD_INT 34
32495: PUSH
32496: LD_INT 40
32498: PUSH
32499: LD_INT 48
32501: PUSH
32502: LD_INT 49
32504: PUSH
32505: LD_INT 50
32507: PUSH
32508: LD_INT 51
32510: PUSH
32511: LD_INT 52
32513: PUSH
32514: LD_INT 53
32516: PUSH
32517: LD_INT 54
32519: PUSH
32520: LD_INT 55
32522: PUSH
32523: LD_INT 56
32525: PUSH
32526: LD_INT 57
32528: PUSH
32529: LD_INT 58
32531: PUSH
32532: LD_INT 59
32534: PUSH
32535: LD_INT 60
32537: PUSH
32538: LD_INT 61
32540: PUSH
32541: LD_INT 62
32543: PUSH
32544: LD_INT 80
32546: PUSH
32547: LD_INT 82
32549: PUSH
32550: LD_INT 83
32552: PUSH
32553: LD_INT 84
32555: PUSH
32556: LD_INT 85
32558: PUSH
32559: LD_INT 86
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
32615: GO 33082
32617: LD_INT 2
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32851
32625: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32626: LD_ADDR_VAR 0 4
32630: PUSH
32631: LD_INT 35
32633: PUSH
32634: LD_INT 45
32636: PUSH
32637: LD_INT 46
32639: PUSH
32640: LD_INT 47
32642: PUSH
32643: LD_INT 82
32645: PUSH
32646: LD_INT 83
32648: PUSH
32649: LD_INT 84
32651: PUSH
32652: LD_INT 85
32654: PUSH
32655: LD_INT 87
32657: PUSH
32658: LD_INT 70
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 11
32666: PUSH
32667: LD_INT 3
32669: PUSH
32670: LD_INT 4
32672: PUSH
32673: LD_INT 5
32675: PUSH
32676: LD_INT 6
32678: PUSH
32679: LD_INT 15
32681: PUSH
32682: LD_INT 18
32684: PUSH
32685: LD_INT 7
32687: PUSH
32688: LD_INT 17
32690: PUSH
32691: LD_INT 8
32693: PUSH
32694: LD_INT 20
32696: PUSH
32697: LD_INT 21
32699: PUSH
32700: LD_INT 22
32702: PUSH
32703: LD_INT 72
32705: PUSH
32706: LD_INT 26
32708: PUSH
32709: LD_INT 69
32711: PUSH
32712: LD_INT 39
32714: PUSH
32715: LD_INT 40
32717: PUSH
32718: LD_INT 41
32720: PUSH
32721: LD_INT 42
32723: PUSH
32724: LD_INT 43
32726: PUSH
32727: LD_INT 48
32729: PUSH
32730: LD_INT 49
32732: PUSH
32733: LD_INT 50
32735: PUSH
32736: LD_INT 51
32738: PUSH
32739: LD_INT 52
32741: PUSH
32742: LD_INT 53
32744: PUSH
32745: LD_INT 54
32747: PUSH
32748: LD_INT 55
32750: PUSH
32751: LD_INT 56
32753: PUSH
32754: LD_INT 60
32756: PUSH
32757: LD_INT 61
32759: PUSH
32760: LD_INT 62
32762: PUSH
32763: LD_INT 66
32765: PUSH
32766: LD_INT 67
32768: PUSH
32769: LD_INT 68
32771: PUSH
32772: LD_INT 81
32774: PUSH
32775: LD_INT 82
32777: PUSH
32778: LD_INT 83
32780: PUSH
32781: LD_INT 84
32783: PUSH
32784: LD_INT 85
32786: PUSH
32787: LD_INT 87
32789: PUSH
32790: LD_INT 88
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
32849: GO 33082
32851: LD_INT 3
32853: DOUBLE
32854: EQUAL
32855: IFTRUE 32859
32857: GO 33081
32859: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32860: LD_ADDR_VAR 0 4
32864: PUSH
32865: LD_INT 46
32867: PUSH
32868: LD_INT 47
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 82
32879: PUSH
32880: LD_INT 83
32882: PUSH
32883: LD_INT 84
32885: PUSH
32886: LD_INT 85
32888: PUSH
32889: LD_INT 86
32891: PUSH
32892: LD_INT 11
32894: PUSH
32895: LD_INT 9
32897: PUSH
32898: LD_INT 20
32900: PUSH
32901: LD_INT 19
32903: PUSH
32904: LD_INT 21
32906: PUSH
32907: LD_INT 24
32909: PUSH
32910: LD_INT 22
32912: PUSH
32913: LD_INT 25
32915: PUSH
32916: LD_INT 28
32918: PUSH
32919: LD_INT 29
32921: PUSH
32922: LD_INT 30
32924: PUSH
32925: LD_INT 31
32927: PUSH
32928: LD_INT 37
32930: PUSH
32931: LD_INT 38
32933: PUSH
32934: LD_INT 32
32936: PUSH
32937: LD_INT 27
32939: PUSH
32940: LD_INT 33
32942: PUSH
32943: LD_INT 69
32945: PUSH
32946: LD_INT 39
32948: PUSH
32949: LD_INT 34
32951: PUSH
32952: LD_INT 40
32954: PUSH
32955: LD_INT 71
32957: PUSH
32958: LD_INT 23
32960: PUSH
32961: LD_INT 44
32963: PUSH
32964: LD_INT 48
32966: PUSH
32967: LD_INT 49
32969: PUSH
32970: LD_INT 50
32972: PUSH
32973: LD_INT 51
32975: PUSH
32976: LD_INT 52
32978: PUSH
32979: LD_INT 53
32981: PUSH
32982: LD_INT 54
32984: PUSH
32985: LD_INT 55
32987: PUSH
32988: LD_INT 56
32990: PUSH
32991: LD_INT 57
32993: PUSH
32994: LD_INT 58
32996: PUSH
32997: LD_INT 59
32999: PUSH
33000: LD_INT 63
33002: PUSH
33003: LD_INT 64
33005: PUSH
33006: LD_INT 65
33008: PUSH
33009: LD_INT 82
33011: PUSH
33012: LD_INT 83
33014: PUSH
33015: LD_INT 84
33017: PUSH
33018: LD_INT 85
33020: PUSH
33021: LD_INT 86
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
33079: GO 33082
33081: POP
// if state > - 1 and state < 3 then
33082: LD_VAR 0 3
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: GREATER
33091: PUSH
33092: LD_VAR 0 3
33096: PUSH
33097: LD_INT 3
33099: LESS
33100: AND
33101: IFFALSE 33158
// for i in result do
33103: LD_ADDR_VAR 0 5
33107: PUSH
33108: LD_VAR 0 4
33112: PUSH
33113: FOR_IN
33114: IFFALSE 33156
// if GetTech ( i , side ) <> state then
33116: LD_VAR 0 5
33120: PPUSH
33121: LD_VAR 0 1
33125: PPUSH
33126: CALL_OW 321
33130: PUSH
33131: LD_VAR 0 3
33135: NONEQUAL
33136: IFFALSE 33154
// result := result diff i ;
33138: LD_ADDR_VAR 0 4
33142: PUSH
33143: LD_VAR 0 4
33147: PUSH
33148: LD_VAR 0 5
33152: DIFF
33153: ST_TO_ADDR
33154: GO 33113
33156: POP
33157: POP
// end ;
33158: LD_VAR 0 4
33162: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33163: LD_INT 0
33165: PPUSH
33166: PPUSH
33167: PPUSH
// result := true ;
33168: LD_ADDR_VAR 0 3
33172: PUSH
33173: LD_INT 1
33175: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33176: LD_ADDR_VAR 0 5
33180: PUSH
33181: LD_VAR 0 2
33185: PPUSH
33186: CALL_OW 480
33190: ST_TO_ADDR
// if not tmp then
33191: LD_VAR 0 5
33195: NOT
33196: IFFALSE 33200
// exit ;
33198: GO 33249
// for i in tmp do
33200: LD_ADDR_VAR 0 4
33204: PUSH
33205: LD_VAR 0 5
33209: PUSH
33210: FOR_IN
33211: IFFALSE 33247
// if GetTech ( i , side ) <> state_researched then
33213: LD_VAR 0 4
33217: PPUSH
33218: LD_VAR 0 1
33222: PPUSH
33223: CALL_OW 321
33227: PUSH
33228: LD_INT 2
33230: NONEQUAL
33231: IFFALSE 33245
// begin result := false ;
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_INT 0
33240: ST_TO_ADDR
// exit ;
33241: POP
33242: POP
33243: GO 33249
// end ;
33245: GO 33210
33247: POP
33248: POP
// end ;
33249: LD_VAR 0 3
33253: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33254: LD_INT 0
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33269: LD_VAR 0 1
33273: NOT
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: CALL_OW 257
33284: PUSH
33285: LD_INT 9
33287: NONEQUAL
33288: OR
33289: IFFALSE 33293
// exit ;
33291: GO 33866
// side := GetSide ( unit ) ;
33293: LD_ADDR_VAR 0 9
33297: PUSH
33298: LD_VAR 0 1
33302: PPUSH
33303: CALL_OW 255
33307: ST_TO_ADDR
// tech_space := tech_spacanom ;
33308: LD_ADDR_VAR 0 12
33312: PUSH
33313: LD_INT 29
33315: ST_TO_ADDR
// tech_time := tech_taurad ;
33316: LD_ADDR_VAR 0 13
33320: PUSH
33321: LD_INT 28
33323: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33324: LD_ADDR_VAR 0 11
33328: PUSH
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 310
33338: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33339: LD_VAR 0 11
33343: PPUSH
33344: CALL_OW 247
33348: PUSH
33349: LD_INT 2
33351: EQUAL
33352: IFFALSE 33356
// exit ;
33354: GO 33866
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33356: LD_ADDR_VAR 0 8
33360: PUSH
33361: LD_INT 81
33363: PUSH
33364: LD_VAR 0 9
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: LD_INT 21
33378: PUSH
33379: LD_INT 3
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PPUSH
33394: CALL_OW 69
33398: ST_TO_ADDR
// if not tmp then
33399: LD_VAR 0 8
33403: NOT
33404: IFFALSE 33408
// exit ;
33406: GO 33866
// if in_unit then
33408: LD_VAR 0 11
33412: IFFALSE 33436
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33414: LD_ADDR_VAR 0 10
33418: PUSH
33419: LD_VAR 0 8
33423: PPUSH
33424: LD_VAR 0 11
33428: PPUSH
33429: CALL_OW 74
33433: ST_TO_ADDR
33434: GO 33456
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33436: LD_ADDR_VAR 0 10
33440: PUSH
33441: LD_VAR 0 8
33445: PPUSH
33446: LD_VAR 0 1
33450: PPUSH
33451: CALL_OW 74
33455: ST_TO_ADDR
// if not enemy then
33456: LD_VAR 0 10
33460: NOT
33461: IFFALSE 33465
// exit ;
33463: GO 33866
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33465: LD_VAR 0 11
33469: PUSH
33470: LD_VAR 0 11
33474: PPUSH
33475: LD_VAR 0 10
33479: PPUSH
33480: CALL_OW 296
33484: PUSH
33485: LD_INT 13
33487: GREATER
33488: AND
33489: PUSH
33490: LD_VAR 0 1
33494: PPUSH
33495: LD_VAR 0 10
33499: PPUSH
33500: CALL_OW 296
33504: PUSH
33505: LD_INT 12
33507: GREATER
33508: OR
33509: IFFALSE 33513
// exit ;
33511: GO 33866
// missile := [ 1 ] ;
33513: LD_ADDR_VAR 0 14
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33524: LD_VAR 0 9
33528: PPUSH
33529: LD_VAR 0 12
33533: PPUSH
33534: CALL_OW 325
33538: IFFALSE 33567
// missile := Insert ( missile , missile + 1 , 2 ) ;
33540: LD_ADDR_VAR 0 14
33544: PUSH
33545: LD_VAR 0 14
33549: PPUSH
33550: LD_VAR 0 14
33554: PUSH
33555: LD_INT 1
33557: PLUS
33558: PPUSH
33559: LD_INT 2
33561: PPUSH
33562: CALL_OW 2
33566: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33567: LD_VAR 0 9
33571: PPUSH
33572: LD_VAR 0 13
33576: PPUSH
33577: CALL_OW 325
33581: PUSH
33582: LD_VAR 0 10
33586: PPUSH
33587: CALL_OW 255
33591: PPUSH
33592: LD_VAR 0 13
33596: PPUSH
33597: CALL_OW 325
33601: NOT
33602: AND
33603: IFFALSE 33632
// missile := Insert ( missile , missile + 1 , 3 ) ;
33605: LD_ADDR_VAR 0 14
33609: PUSH
33610: LD_VAR 0 14
33614: PPUSH
33615: LD_VAR 0 14
33619: PUSH
33620: LD_INT 1
33622: PLUS
33623: PPUSH
33624: LD_INT 3
33626: PPUSH
33627: CALL_OW 2
33631: ST_TO_ADDR
// if missile < 2 then
33632: LD_VAR 0 14
33636: PUSH
33637: LD_INT 2
33639: LESS
33640: IFFALSE 33644
// exit ;
33642: GO 33866
// x := GetX ( enemy ) ;
33644: LD_ADDR_VAR 0 4
33648: PUSH
33649: LD_VAR 0 10
33653: PPUSH
33654: CALL_OW 250
33658: ST_TO_ADDR
// y := GetY ( enemy ) ;
33659: LD_ADDR_VAR 0 5
33663: PUSH
33664: LD_VAR 0 10
33668: PPUSH
33669: CALL_OW 251
33673: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33674: LD_ADDR_VAR 0 6
33678: PUSH
33679: LD_VAR 0 4
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PPUSH
33688: LD_INT 1
33690: PPUSH
33691: CALL_OW 12
33695: PLUS
33696: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33697: LD_ADDR_VAR 0 7
33701: PUSH
33702: LD_VAR 0 5
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PPUSH
33711: LD_INT 1
33713: PPUSH
33714: CALL_OW 12
33718: PLUS
33719: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33720: LD_VAR 0 6
33724: PPUSH
33725: LD_VAR 0 7
33729: PPUSH
33730: CALL_OW 488
33734: NOT
33735: IFFALSE 33757
// begin _x := x ;
33737: LD_ADDR_VAR 0 6
33741: PUSH
33742: LD_VAR 0 4
33746: ST_TO_ADDR
// _y := y ;
33747: LD_ADDR_VAR 0 7
33751: PUSH
33752: LD_VAR 0 5
33756: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_INT 1
33764: PPUSH
33765: LD_VAR 0 14
33769: PPUSH
33770: CALL_OW 12
33774: ST_TO_ADDR
// case i of 1 :
33775: LD_VAR 0 3
33779: PUSH
33780: LD_INT 1
33782: DOUBLE
33783: EQUAL
33784: IFTRUE 33788
33786: GO 33805
33788: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33789: LD_VAR 0 1
33793: PPUSH
33794: LD_VAR 0 10
33798: PPUSH
33799: CALL_OW 115
33803: GO 33866
33805: LD_INT 2
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33813
33811: GO 33835
33813: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33814: LD_VAR 0 1
33818: PPUSH
33819: LD_VAR 0 6
33823: PPUSH
33824: LD_VAR 0 7
33828: PPUSH
33829: CALL_OW 153
33833: GO 33866
33835: LD_INT 3
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33843
33841: GO 33865
33843: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33844: LD_VAR 0 1
33848: PPUSH
33849: LD_VAR 0 6
33853: PPUSH
33854: LD_VAR 0 7
33858: PPUSH
33859: CALL_OW 154
33863: GO 33866
33865: POP
// end ;
33866: LD_VAR 0 2
33870: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33871: LD_INT 0
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
// if not unit or not building then
33879: LD_VAR 0 1
33883: NOT
33884: PUSH
33885: LD_VAR 0 2
33889: NOT
33890: OR
33891: IFFALSE 33895
// exit ;
33893: GO 34053
// x := GetX ( building ) ;
33895: LD_ADDR_VAR 0 5
33899: PUSH
33900: LD_VAR 0 2
33904: PPUSH
33905: CALL_OW 250
33909: ST_TO_ADDR
// y := GetY ( building ) ;
33910: LD_ADDR_VAR 0 6
33914: PUSH
33915: LD_VAR 0 2
33919: PPUSH
33920: CALL_OW 251
33924: ST_TO_ADDR
// for i = 0 to 5 do
33925: LD_ADDR_VAR 0 4
33929: PUSH
33930: DOUBLE
33931: LD_INT 0
33933: DEC
33934: ST_TO_ADDR
33935: LD_INT 5
33937: PUSH
33938: FOR_TO
33939: IFFALSE 34051
// begin _x := ShiftX ( x , i , 3 ) ;
33941: LD_ADDR_VAR 0 7
33945: PUSH
33946: LD_VAR 0 5
33950: PPUSH
33951: LD_VAR 0 4
33955: PPUSH
33956: LD_INT 3
33958: PPUSH
33959: CALL_OW 272
33963: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33964: LD_ADDR_VAR 0 8
33968: PUSH
33969: LD_VAR 0 6
33973: PPUSH
33974: LD_VAR 0 4
33978: PPUSH
33979: LD_INT 3
33981: PPUSH
33982: CALL_OW 273
33986: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33987: LD_VAR 0 7
33991: PPUSH
33992: LD_VAR 0 8
33996: PPUSH
33997: CALL_OW 488
34001: NOT
34002: IFFALSE 34006
// continue ;
34004: GO 33938
// if HexInfo ( _x , _y ) = 0 then
34006: LD_VAR 0 7
34010: PPUSH
34011: LD_VAR 0 8
34015: PPUSH
34016: CALL_OW 428
34020: PUSH
34021: LD_INT 0
34023: EQUAL
34024: IFFALSE 34049
// begin ComMoveXY ( unit , _x , _y ) ;
34026: LD_VAR 0 1
34030: PPUSH
34031: LD_VAR 0 7
34035: PPUSH
34036: LD_VAR 0 8
34040: PPUSH
34041: CALL_OW 111
// exit ;
34045: POP
34046: POP
34047: GO 34053
// end ; end ;
34049: GO 33938
34051: POP
34052: POP
// end ;
34053: LD_VAR 0 3
34057: RET
// export function ScanBase ( side , base_area ) ; begin
34058: LD_INT 0
34060: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34061: LD_ADDR_VAR 0 3
34065: PUSH
34066: LD_VAR 0 2
34070: PPUSH
34071: LD_INT 81
34073: PUSH
34074: LD_VAR 0 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PPUSH
34083: CALL_OW 70
34087: ST_TO_ADDR
// end ;
34088: LD_VAR 0 3
34092: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34093: LD_INT 0
34095: PPUSH
34096: PPUSH
34097: PPUSH
34098: PPUSH
// result := false ;
34099: LD_ADDR_VAR 0 2
34103: PUSH
34104: LD_INT 0
34106: ST_TO_ADDR
// side := GetSide ( unit ) ;
34107: LD_ADDR_VAR 0 3
34111: PUSH
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 255
34121: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34122: LD_ADDR_VAR 0 4
34126: PUSH
34127: LD_VAR 0 1
34131: PPUSH
34132: CALL_OW 248
34136: ST_TO_ADDR
// case nat of 1 :
34137: LD_VAR 0 4
34141: PUSH
34142: LD_INT 1
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 34161
34150: POP
// tech := tech_lassight ; 2 :
34151: LD_ADDR_VAR 0 5
34155: PUSH
34156: LD_INT 12
34158: ST_TO_ADDR
34159: GO 34200
34161: LD_INT 2
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34180
34169: POP
// tech := tech_mortar ; 3 :
34170: LD_ADDR_VAR 0 5
34174: PUSH
34175: LD_INT 41
34177: ST_TO_ADDR
34178: GO 34200
34180: LD_INT 3
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34199
34188: POP
// tech := tech_bazooka ; end ;
34189: LD_ADDR_VAR 0 5
34193: PUSH
34194: LD_INT 44
34196: ST_TO_ADDR
34197: GO 34200
34199: POP
// if Researched ( side , tech ) then
34200: LD_VAR 0 3
34204: PPUSH
34205: LD_VAR 0 5
34209: PPUSH
34210: CALL_OW 325
34214: IFFALSE 34241
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34216: LD_ADDR_VAR 0 2
34220: PUSH
34221: LD_INT 5
34223: PUSH
34224: LD_INT 8
34226: PUSH
34227: LD_INT 9
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: PUSH
34235: LD_VAR 0 4
34239: ARRAY
34240: ST_TO_ADDR
// end ;
34241: LD_VAR 0 2
34245: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34246: LD_INT 0
34248: PPUSH
34249: PPUSH
34250: PPUSH
// if not mines then
34251: LD_VAR 0 2
34255: NOT
34256: IFFALSE 34260
// exit ;
34258: GO 34404
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34260: LD_ADDR_VAR 0 5
34264: PUSH
34265: LD_INT 81
34267: PUSH
34268: LD_VAR 0 1
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: PUSH
34280: LD_INT 21
34282: PUSH
34283: LD_INT 3
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PPUSH
34298: CALL_OW 69
34302: ST_TO_ADDR
// for i in mines do
34303: LD_ADDR_VAR 0 4
34307: PUSH
34308: LD_VAR 0 2
34312: PUSH
34313: FOR_IN
34314: IFFALSE 34402
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34316: LD_VAR 0 4
34320: PUSH
34321: LD_INT 1
34323: ARRAY
34324: PPUSH
34325: LD_VAR 0 4
34329: PUSH
34330: LD_INT 2
34332: ARRAY
34333: PPUSH
34334: CALL_OW 458
34338: NOT
34339: IFFALSE 34343
// continue ;
34341: GO 34313
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34343: LD_VAR 0 4
34347: PUSH
34348: LD_INT 1
34350: ARRAY
34351: PPUSH
34352: LD_VAR 0 4
34356: PUSH
34357: LD_INT 2
34359: ARRAY
34360: PPUSH
34361: CALL_OW 428
34365: PUSH
34366: LD_VAR 0 5
34370: IN
34371: IFFALSE 34400
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34373: LD_VAR 0 4
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: PPUSH
34382: LD_VAR 0 4
34386: PUSH
34387: LD_INT 2
34389: ARRAY
34390: PPUSH
34391: LD_VAR 0 1
34395: PPUSH
34396: CALL_OW 456
// end ;
34400: GO 34313
34402: POP
34403: POP
// end ;
34404: LD_VAR 0 3
34408: RET
// export function Count ( array ) ; var i ; begin
34409: LD_INT 0
34411: PPUSH
34412: PPUSH
// result := 0 ;
34413: LD_ADDR_VAR 0 2
34417: PUSH
34418: LD_INT 0
34420: ST_TO_ADDR
// for i in array do
34421: LD_ADDR_VAR 0 3
34425: PUSH
34426: LD_VAR 0 1
34430: PUSH
34431: FOR_IN
34432: IFFALSE 34456
// if i then
34434: LD_VAR 0 3
34438: IFFALSE 34454
// result := result + 1 ;
34440: LD_ADDR_VAR 0 2
34444: PUSH
34445: LD_VAR 0 2
34449: PUSH
34450: LD_INT 1
34452: PLUS
34453: ST_TO_ADDR
34454: GO 34431
34456: POP
34457: POP
// end ;
34458: LD_VAR 0 2
34462: RET
// export function IsEmpty ( building ) ; begin
34463: LD_INT 0
34465: PPUSH
// if not building then
34466: LD_VAR 0 1
34470: NOT
34471: IFFALSE 34475
// exit ;
34473: GO 34518
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34475: LD_ADDR_VAR 0 2
34479: PUSH
34480: LD_VAR 0 1
34484: PUSH
34485: LD_INT 22
34487: PUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 255
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 58
34504: PUSH
34505: EMPTY
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PPUSH
34512: CALL_OW 69
34516: IN
34517: ST_TO_ADDR
// end ;
34518: LD_VAR 0 2
34522: RET
// export function IsNotFull ( building ) ; begin
34523: LD_INT 0
34525: PPUSH
// if not building then
34526: LD_VAR 0 1
34530: NOT
34531: IFFALSE 34535
// exit ;
34533: GO 34554
// result := UnitsInside ( building ) < 6 ;
34535: LD_ADDR_VAR 0 2
34539: PUSH
34540: LD_VAR 0 1
34544: PPUSH
34545: CALL_OW 313
34549: PUSH
34550: LD_INT 6
34552: LESS
34553: ST_TO_ADDR
// end ;
34554: LD_VAR 0 2
34558: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
34563: PPUSH
34564: PPUSH
// tmp := [ ] ;
34565: LD_ADDR_VAR 0 3
34569: PUSH
34570: EMPTY
34571: ST_TO_ADDR
// list := [ ] ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: EMPTY
34578: ST_TO_ADDR
// for i = 16 to 25 do
34579: LD_ADDR_VAR 0 4
34583: PUSH
34584: DOUBLE
34585: LD_INT 16
34587: DEC
34588: ST_TO_ADDR
34589: LD_INT 25
34591: PUSH
34592: FOR_TO
34593: IFFALSE 34666
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_VAR 0 3
34604: PUSH
34605: LD_INT 22
34607: PUSH
34608: LD_VAR 0 1
34612: PPUSH
34613: CALL_OW 255
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 91
34624: PUSH
34625: LD_VAR 0 1
34629: PUSH
34630: LD_INT 6
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 30
34640: PUSH
34641: LD_VAR 0 4
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: PPUSH
34658: CALL_OW 69
34662: ADD
34663: ST_TO_ADDR
34664: GO 34592
34666: POP
34667: POP
// for i = 1 to tmp do
34668: LD_ADDR_VAR 0 4
34672: PUSH
34673: DOUBLE
34674: LD_INT 1
34676: DEC
34677: ST_TO_ADDR
34678: LD_VAR 0 3
34682: PUSH
34683: FOR_TO
34684: IFFALSE 34772
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34686: LD_ADDR_VAR 0 5
34690: PUSH
34691: LD_VAR 0 5
34695: PUSH
34696: LD_VAR 0 3
34700: PUSH
34701: LD_VAR 0 4
34705: ARRAY
34706: PPUSH
34707: CALL_OW 266
34711: PUSH
34712: LD_VAR 0 3
34716: PUSH
34717: LD_VAR 0 4
34721: ARRAY
34722: PPUSH
34723: CALL_OW 250
34727: PUSH
34728: LD_VAR 0 3
34732: PUSH
34733: LD_VAR 0 4
34737: ARRAY
34738: PPUSH
34739: CALL_OW 251
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_VAR 0 4
34753: ARRAY
34754: PPUSH
34755: CALL_OW 254
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: PUSH
34766: EMPTY
34767: LIST
34768: ADD
34769: ST_TO_ADDR
34770: GO 34683
34772: POP
34773: POP
// result := list ;
34774: LD_ADDR_VAR 0 2
34778: PUSH
34779: LD_VAR 0 5
34783: ST_TO_ADDR
// end ;
34784: LD_VAR 0 2
34788: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34789: LD_INT 0
34791: PPUSH
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
// if not factory then
34798: LD_VAR 0 1
34802: NOT
34803: IFFALSE 34807
// exit ;
34805: GO 35400
// if control = control_apeman then
34807: LD_VAR 0 4
34811: PUSH
34812: LD_INT 5
34814: EQUAL
34815: IFFALSE 34924
// begin tmp := UnitsInside ( factory ) ;
34817: LD_ADDR_VAR 0 8
34821: PUSH
34822: LD_VAR 0 1
34826: PPUSH
34827: CALL_OW 313
34831: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34832: LD_VAR 0 8
34836: PPUSH
34837: LD_INT 25
34839: PUSH
34840: LD_INT 12
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PPUSH
34847: CALL_OW 72
34851: NOT
34852: IFFALSE 34862
// control := control_manual ;
34854: LD_ADDR_VAR 0 4
34858: PUSH
34859: LD_INT 1
34861: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34862: LD_ADDR_VAR 0 8
34866: PUSH
34867: LD_VAR 0 1
34871: PPUSH
34872: CALL 34559 0 1
34876: ST_TO_ADDR
// if tmp then
34877: LD_VAR 0 8
34881: IFFALSE 34924
// begin for i in tmp do
34883: LD_ADDR_VAR 0 7
34887: PUSH
34888: LD_VAR 0 8
34892: PUSH
34893: FOR_IN
34894: IFFALSE 34922
// if i [ 1 ] = b_ext_radio then
34896: LD_VAR 0 7
34900: PUSH
34901: LD_INT 1
34903: ARRAY
34904: PUSH
34905: LD_INT 22
34907: EQUAL
34908: IFFALSE 34920
// begin control := control_remote ;
34910: LD_ADDR_VAR 0 4
34914: PUSH
34915: LD_INT 2
34917: ST_TO_ADDR
// break ;
34918: GO 34922
// end ;
34920: GO 34893
34922: POP
34923: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34924: LD_VAR 0 1
34928: PPUSH
34929: LD_VAR 0 2
34933: PPUSH
34934: LD_VAR 0 3
34938: PPUSH
34939: LD_VAR 0 4
34943: PPUSH
34944: LD_VAR 0 5
34948: PPUSH
34949: CALL_OW 448
34953: IFFALSE 34988
// begin result := [ chassis , engine , control , weapon ] ;
34955: LD_ADDR_VAR 0 6
34959: PUSH
34960: LD_VAR 0 2
34964: PUSH
34965: LD_VAR 0 3
34969: PUSH
34970: LD_VAR 0 4
34974: PUSH
34975: LD_VAR 0 5
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: ST_TO_ADDR
// exit ;
34986: GO 35400
// end ; _chassis := AvailableChassisList ( factory ) ;
34988: LD_ADDR_VAR 0 9
34992: PUSH
34993: LD_VAR 0 1
34997: PPUSH
34998: CALL_OW 475
35002: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35003: LD_ADDR_VAR 0 11
35007: PUSH
35008: LD_VAR 0 1
35012: PPUSH
35013: CALL_OW 476
35017: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35018: LD_ADDR_VAR 0 12
35022: PUSH
35023: LD_VAR 0 1
35027: PPUSH
35028: CALL_OW 477
35032: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35033: LD_ADDR_VAR 0 10
35037: PUSH
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 478
35047: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35048: LD_VAR 0 9
35052: NOT
35053: PUSH
35054: LD_VAR 0 11
35058: NOT
35059: OR
35060: PUSH
35061: LD_VAR 0 12
35065: NOT
35066: OR
35067: PUSH
35068: LD_VAR 0 10
35072: NOT
35073: OR
35074: IFFALSE 35109
// begin result := [ chassis , engine , control , weapon ] ;
35076: LD_ADDR_VAR 0 6
35080: PUSH
35081: LD_VAR 0 2
35085: PUSH
35086: LD_VAR 0 3
35090: PUSH
35091: LD_VAR 0 4
35095: PUSH
35096: LD_VAR 0 5
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
// exit ;
35107: GO 35400
// end ; if not chassis in _chassis then
35109: LD_VAR 0 2
35113: PUSH
35114: LD_VAR 0 9
35118: IN
35119: NOT
35120: IFFALSE 35146
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35122: LD_ADDR_VAR 0 2
35126: PUSH
35127: LD_VAR 0 9
35131: PUSH
35132: LD_INT 1
35134: PPUSH
35135: LD_VAR 0 9
35139: PPUSH
35140: CALL_OW 12
35144: ARRAY
35145: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35146: LD_VAR 0 2
35150: PPUSH
35151: LD_VAR 0 3
35155: PPUSH
35156: CALL 35405 0 2
35160: NOT
35161: IFFALSE 35220
// repeat engine := _engine [ 1 ] ;
35163: LD_ADDR_VAR 0 3
35167: PUSH
35168: LD_VAR 0 11
35172: PUSH
35173: LD_INT 1
35175: ARRAY
35176: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35177: LD_ADDR_VAR 0 11
35181: PUSH
35182: LD_VAR 0 11
35186: PPUSH
35187: LD_INT 1
35189: PPUSH
35190: CALL_OW 3
35194: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35195: LD_VAR 0 2
35199: PPUSH
35200: LD_VAR 0 3
35204: PPUSH
35205: CALL 35405 0 2
35209: PUSH
35210: LD_VAR 0 11
35214: PUSH
35215: EMPTY
35216: EQUAL
35217: OR
35218: IFFALSE 35163
// if not control in _control then
35220: LD_VAR 0 4
35224: PUSH
35225: LD_VAR 0 12
35229: IN
35230: NOT
35231: IFFALSE 35257
// control := _control [ rand ( 1 , _control ) ] ;
35233: LD_ADDR_VAR 0 4
35237: PUSH
35238: LD_VAR 0 12
35242: PUSH
35243: LD_INT 1
35245: PPUSH
35246: LD_VAR 0 12
35250: PPUSH
35251: CALL_OW 12
35255: ARRAY
35256: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35257: LD_VAR 0 2
35261: PPUSH
35262: LD_VAR 0 5
35266: PPUSH
35267: CALL 35625 0 2
35271: NOT
35272: IFFALSE 35331
// repeat weapon := _weapon [ 1 ] ;
35274: LD_ADDR_VAR 0 5
35278: PUSH
35279: LD_VAR 0 10
35283: PUSH
35284: LD_INT 1
35286: ARRAY
35287: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35288: LD_ADDR_VAR 0 10
35292: PUSH
35293: LD_VAR 0 10
35297: PPUSH
35298: LD_INT 1
35300: PPUSH
35301: CALL_OW 3
35305: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35306: LD_VAR 0 2
35310: PPUSH
35311: LD_VAR 0 5
35315: PPUSH
35316: CALL 35625 0 2
35320: PUSH
35321: LD_VAR 0 10
35325: PUSH
35326: EMPTY
35327: EQUAL
35328: OR
35329: IFFALSE 35274
// result := [ ] ;
35331: LD_ADDR_VAR 0 6
35335: PUSH
35336: EMPTY
35337: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35338: LD_VAR 0 1
35342: PPUSH
35343: LD_VAR 0 2
35347: PPUSH
35348: LD_VAR 0 3
35352: PPUSH
35353: LD_VAR 0 4
35357: PPUSH
35358: LD_VAR 0 5
35362: PPUSH
35363: CALL_OW 448
35367: IFFALSE 35400
// result := [ chassis , engine , control , weapon ] ;
35369: LD_ADDR_VAR 0 6
35373: PUSH
35374: LD_VAR 0 2
35378: PUSH
35379: LD_VAR 0 3
35383: PUSH
35384: LD_VAR 0 4
35388: PUSH
35389: LD_VAR 0 5
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: ST_TO_ADDR
// end ;
35400: LD_VAR 0 6
35404: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35405: LD_INT 0
35407: PPUSH
// if not chassis or not engine then
35408: LD_VAR 0 1
35412: NOT
35413: PUSH
35414: LD_VAR 0 2
35418: NOT
35419: OR
35420: IFFALSE 35424
// exit ;
35422: GO 35620
// case engine of engine_solar :
35424: LD_VAR 0 2
35428: PUSH
35429: LD_INT 2
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35437
35435: GO 35475
35437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35438: LD_ADDR_VAR 0 3
35442: PUSH
35443: LD_INT 11
35445: PUSH
35446: LD_INT 12
35448: PUSH
35449: LD_INT 13
35451: PUSH
35452: LD_INT 14
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 3
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: ST_TO_ADDR
35473: GO 35604
35475: LD_INT 1
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35545
35483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35484: LD_ADDR_VAR 0 3
35488: PUSH
35489: LD_INT 11
35491: PUSH
35492: LD_INT 12
35494: PUSH
35495: LD_INT 13
35497: PUSH
35498: LD_INT 14
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: LD_INT 4
35512: PUSH
35513: LD_INT 5
35515: PUSH
35516: LD_INT 21
35518: PUSH
35519: LD_INT 23
35521: PUSH
35522: LD_INT 22
35524: PUSH
35525: LD_INT 24
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: ST_TO_ADDR
35543: GO 35604
35545: LD_INT 3
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35553
35551: GO 35603
35553: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35554: LD_ADDR_VAR 0 3
35558: PUSH
35559: LD_INT 13
35561: PUSH
35562: LD_INT 14
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: LD_INT 4
35573: PUSH
35574: LD_INT 5
35576: PUSH
35577: LD_INT 21
35579: PUSH
35580: LD_INT 22
35582: PUSH
35583: LD_INT 23
35585: PUSH
35586: LD_INT 24
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: ST_TO_ADDR
35601: GO 35604
35603: POP
// result := ( chassis in result ) ;
35604: LD_ADDR_VAR 0 3
35608: PUSH
35609: LD_VAR 0 1
35613: PUSH
35614: LD_VAR 0 3
35618: IN
35619: ST_TO_ADDR
// end ;
35620: LD_VAR 0 3
35624: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35625: LD_INT 0
35627: PPUSH
// if not chassis or not weapon then
35628: LD_VAR 0 1
35632: NOT
35633: PUSH
35634: LD_VAR 0 2
35638: NOT
35639: OR
35640: IFFALSE 35644
// exit ;
35642: GO 36706
// case weapon of us_machine_gun :
35644: LD_VAR 0 2
35648: PUSH
35649: LD_INT 2
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35657
35655: GO 35687
35657: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35658: LD_ADDR_VAR 0 3
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: LD_INT 4
35674: PUSH
35675: LD_INT 5
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
35685: GO 36690
35687: LD_INT 3
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35695
35693: GO 35725
35695: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35696: LD_ADDR_VAR 0 3
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 3
35709: PUSH
35710: LD_INT 4
35712: PUSH
35713: LD_INT 5
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
35723: GO 36690
35725: LD_INT 11
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35733
35731: GO 35763
35733: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: LD_INT 4
35750: PUSH
35751: LD_INT 5
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: ST_TO_ADDR
35761: GO 36690
35763: LD_INT 4
35765: DOUBLE
35766: EQUAL
35767: IFTRUE 35771
35769: GO 35797
35771: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35772: LD_ADDR_VAR 0 3
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: LD_INT 4
35785: PUSH
35786: LD_INT 5
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: ST_TO_ADDR
35795: GO 36690
35797: LD_INT 5
35799: DOUBLE
35800: EQUAL
35801: IFTRUE 35805
35803: GO 35831
35805: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35806: LD_ADDR_VAR 0 3
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: LD_INT 3
35816: PUSH
35817: LD_INT 4
35819: PUSH
35820: LD_INT 5
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
35829: GO 36690
35831: LD_INT 9
35833: DOUBLE
35834: EQUAL
35835: IFTRUE 35839
35837: GO 35865
35839: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35840: LD_ADDR_VAR 0 3
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 4
35853: PUSH
35854: LD_INT 5
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: ST_TO_ADDR
35863: GO 36690
35865: LD_INT 7
35867: DOUBLE
35868: EQUAL
35869: IFTRUE 35873
35871: GO 35899
35873: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35874: LD_ADDR_VAR 0 3
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: LD_INT 3
35884: PUSH
35885: LD_INT 4
35887: PUSH
35888: LD_INT 5
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
35897: GO 36690
35899: LD_INT 12
35901: DOUBLE
35902: EQUAL
35903: IFTRUE 35907
35905: GO 35933
35907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35908: LD_ADDR_VAR 0 3
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: LD_INT 4
35921: PUSH
35922: LD_INT 5
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: ST_TO_ADDR
35931: GO 36690
35933: LD_INT 13
35935: DOUBLE
35936: EQUAL
35937: IFTRUE 35941
35939: GO 35967
35941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35942: LD_ADDR_VAR 0 3
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 4
35955: PUSH
35956: LD_INT 5
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: ST_TO_ADDR
35965: GO 36690
35967: LD_INT 14
35969: DOUBLE
35970: EQUAL
35971: IFTRUE 35975
35973: GO 35993
35975: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35976: LD_ADDR_VAR 0 3
35980: PUSH
35981: LD_INT 4
35983: PUSH
35984: LD_INT 5
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: ST_TO_ADDR
35991: GO 36690
35993: LD_INT 6
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36001
35999: GO 36019
36001: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36002: LD_ADDR_VAR 0 3
36006: PUSH
36007: LD_INT 4
36009: PUSH
36010: LD_INT 5
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: ST_TO_ADDR
36017: GO 36690
36019: LD_INT 10
36021: DOUBLE
36022: EQUAL
36023: IFTRUE 36027
36025: GO 36045
36027: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36028: LD_ADDR_VAR 0 3
36032: PUSH
36033: LD_INT 4
36035: PUSH
36036: LD_INT 5
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: ST_TO_ADDR
36043: GO 36690
36045: LD_INT 22
36047: DOUBLE
36048: EQUAL
36049: IFTRUE 36053
36051: GO 36079
36053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36054: LD_ADDR_VAR 0 3
36058: PUSH
36059: LD_INT 11
36061: PUSH
36062: LD_INT 12
36064: PUSH
36065: LD_INT 13
36067: PUSH
36068: LD_INT 14
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: ST_TO_ADDR
36077: GO 36690
36079: LD_INT 23
36081: DOUBLE
36082: EQUAL
36083: IFTRUE 36087
36085: GO 36113
36087: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36088: LD_ADDR_VAR 0 3
36092: PUSH
36093: LD_INT 11
36095: PUSH
36096: LD_INT 12
36098: PUSH
36099: LD_INT 13
36101: PUSH
36102: LD_INT 14
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: ST_TO_ADDR
36111: GO 36690
36113: LD_INT 24
36115: DOUBLE
36116: EQUAL
36117: IFTRUE 36121
36119: GO 36147
36121: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36122: LD_ADDR_VAR 0 3
36126: PUSH
36127: LD_INT 11
36129: PUSH
36130: LD_INT 12
36132: PUSH
36133: LD_INT 13
36135: PUSH
36136: LD_INT 14
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
36145: GO 36690
36147: LD_INT 30
36149: DOUBLE
36150: EQUAL
36151: IFTRUE 36155
36153: GO 36181
36155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36156: LD_ADDR_VAR 0 3
36160: PUSH
36161: LD_INT 11
36163: PUSH
36164: LD_INT 12
36166: PUSH
36167: LD_INT 13
36169: PUSH
36170: LD_INT 14
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: ST_TO_ADDR
36179: GO 36690
36181: LD_INT 25
36183: DOUBLE
36184: EQUAL
36185: IFTRUE 36189
36187: GO 36207
36189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36190: LD_ADDR_VAR 0 3
36194: PUSH
36195: LD_INT 13
36197: PUSH
36198: LD_INT 14
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: ST_TO_ADDR
36205: GO 36690
36207: LD_INT 27
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36215
36213: GO 36233
36215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36216: LD_ADDR_VAR 0 3
36220: PUSH
36221: LD_INT 13
36223: PUSH
36224: LD_INT 14
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: ST_TO_ADDR
36231: GO 36690
36233: LD_EXP 49
36237: DOUBLE
36238: EQUAL
36239: IFTRUE 36243
36241: GO 36269
36243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: LD_INT 11
36251: PUSH
36252: LD_INT 12
36254: PUSH
36255: LD_INT 13
36257: PUSH
36258: LD_INT 14
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: ST_TO_ADDR
36267: GO 36690
36269: LD_INT 28
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36295
36277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 13
36285: PUSH
36286: LD_INT 14
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: ST_TO_ADDR
36293: GO 36690
36295: LD_INT 29
36297: DOUBLE
36298: EQUAL
36299: IFTRUE 36303
36301: GO 36321
36303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36304: LD_ADDR_VAR 0 3
36308: PUSH
36309: LD_INT 13
36311: PUSH
36312: LD_INT 14
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: ST_TO_ADDR
36319: GO 36690
36321: LD_INT 31
36323: DOUBLE
36324: EQUAL
36325: IFTRUE 36329
36327: GO 36347
36329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: LD_INT 13
36337: PUSH
36338: LD_INT 14
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: ST_TO_ADDR
36345: GO 36690
36347: LD_INT 26
36349: DOUBLE
36350: EQUAL
36351: IFTRUE 36355
36353: GO 36373
36355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36356: LD_ADDR_VAR 0 3
36360: PUSH
36361: LD_INT 13
36363: PUSH
36364: LD_INT 14
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: ST_TO_ADDR
36371: GO 36690
36373: LD_INT 42
36375: DOUBLE
36376: EQUAL
36377: IFTRUE 36381
36379: GO 36407
36381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36382: LD_ADDR_VAR 0 3
36386: PUSH
36387: LD_INT 21
36389: PUSH
36390: LD_INT 22
36392: PUSH
36393: LD_INT 23
36395: PUSH
36396: LD_INT 24
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: ST_TO_ADDR
36405: GO 36690
36407: LD_INT 43
36409: DOUBLE
36410: EQUAL
36411: IFTRUE 36415
36413: GO 36441
36415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36416: LD_ADDR_VAR 0 3
36420: PUSH
36421: LD_INT 21
36423: PUSH
36424: LD_INT 22
36426: PUSH
36427: LD_INT 23
36429: PUSH
36430: LD_INT 24
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
36439: GO 36690
36441: LD_INT 44
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36449
36447: GO 36475
36449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_INT 21
36457: PUSH
36458: LD_INT 22
36460: PUSH
36461: LD_INT 23
36463: PUSH
36464: LD_INT 24
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: ST_TO_ADDR
36473: GO 36690
36475: LD_INT 45
36477: DOUBLE
36478: EQUAL
36479: IFTRUE 36483
36481: GO 36509
36483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36484: LD_ADDR_VAR 0 3
36488: PUSH
36489: LD_INT 21
36491: PUSH
36492: LD_INT 22
36494: PUSH
36495: LD_INT 23
36497: PUSH
36498: LD_INT 24
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: ST_TO_ADDR
36507: GO 36690
36509: LD_INT 49
36511: DOUBLE
36512: EQUAL
36513: IFTRUE 36517
36515: GO 36543
36517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_INT 21
36525: PUSH
36526: LD_INT 22
36528: PUSH
36529: LD_INT 23
36531: PUSH
36532: LD_INT 24
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 36690
36543: LD_INT 51
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36577
36551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36552: LD_ADDR_VAR 0 3
36556: PUSH
36557: LD_INT 21
36559: PUSH
36560: LD_INT 22
36562: PUSH
36563: LD_INT 23
36565: PUSH
36566: LD_INT 24
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: ST_TO_ADDR
36575: GO 36690
36577: LD_INT 52
36579: DOUBLE
36580: EQUAL
36581: IFTRUE 36585
36583: GO 36611
36585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36586: LD_ADDR_VAR 0 3
36590: PUSH
36591: LD_INT 21
36593: PUSH
36594: LD_INT 22
36596: PUSH
36597: LD_INT 23
36599: PUSH
36600: LD_INT 24
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 36690
36611: LD_INT 53
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36637
36619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_INT 23
36627: PUSH
36628: LD_INT 24
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: ST_TO_ADDR
36635: GO 36690
36637: LD_INT 46
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36663
36645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_INT 23
36653: PUSH
36654: LD_INT 24
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: ST_TO_ADDR
36661: GO 36690
36663: LD_INT 47
36665: DOUBLE
36666: EQUAL
36667: IFTRUE 36671
36669: GO 36689
36671: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36672: LD_ADDR_VAR 0 3
36676: PUSH
36677: LD_INT 23
36679: PUSH
36680: LD_INT 24
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: ST_TO_ADDR
36687: GO 36690
36689: POP
// result := ( chassis in result ) ;
36690: LD_ADDR_VAR 0 3
36694: PUSH
36695: LD_VAR 0 1
36699: PUSH
36700: LD_VAR 0 3
36704: IN
36705: ST_TO_ADDR
// end ;
36706: LD_VAR 0 3
36710: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36711: LD_INT 0
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
36718: PPUSH
36719: PPUSH
// result := array ;
36720: LD_ADDR_VAR 0 5
36724: PUSH
36725: LD_VAR 0 1
36729: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36730: LD_VAR 0 1
36734: NOT
36735: PUSH
36736: LD_VAR 0 2
36740: NOT
36741: OR
36742: PUSH
36743: LD_VAR 0 3
36747: NOT
36748: OR
36749: PUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_VAR 0 1
36759: GREATER
36760: OR
36761: PUSH
36762: LD_VAR 0 3
36766: PUSH
36767: LD_VAR 0 1
36771: GREATER
36772: OR
36773: IFFALSE 36777
// exit ;
36775: GO 37073
// if direction then
36777: LD_VAR 0 4
36781: IFFALSE 36845
// begin d := 1 ;
36783: LD_ADDR_VAR 0 9
36787: PUSH
36788: LD_INT 1
36790: ST_TO_ADDR
// if i_from > i_to then
36791: LD_VAR 0 2
36795: PUSH
36796: LD_VAR 0 3
36800: GREATER
36801: IFFALSE 36827
// length := ( array - i_from ) + i_to else
36803: LD_ADDR_VAR 0 11
36807: PUSH
36808: LD_VAR 0 1
36812: PUSH
36813: LD_VAR 0 2
36817: MINUS
36818: PUSH
36819: LD_VAR 0 3
36823: PLUS
36824: ST_TO_ADDR
36825: GO 36843
// length := i_to - i_from ;
36827: LD_ADDR_VAR 0 11
36831: PUSH
36832: LD_VAR 0 3
36836: PUSH
36837: LD_VAR 0 2
36841: MINUS
36842: ST_TO_ADDR
// end else
36843: GO 36906
// begin d := - 1 ;
36845: LD_ADDR_VAR 0 9
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: ST_TO_ADDR
// if i_from > i_to then
36854: LD_VAR 0 2
36858: PUSH
36859: LD_VAR 0 3
36863: GREATER
36864: IFFALSE 36884
// length := i_from - i_to else
36866: LD_ADDR_VAR 0 11
36870: PUSH
36871: LD_VAR 0 2
36875: PUSH
36876: LD_VAR 0 3
36880: MINUS
36881: ST_TO_ADDR
36882: GO 36906
// length := ( array - i_to ) + i_from ;
36884: LD_ADDR_VAR 0 11
36888: PUSH
36889: LD_VAR 0 1
36893: PUSH
36894: LD_VAR 0 3
36898: MINUS
36899: PUSH
36900: LD_VAR 0 2
36904: PLUS
36905: ST_TO_ADDR
// end ; if not length then
36906: LD_VAR 0 11
36910: NOT
36911: IFFALSE 36915
// exit ;
36913: GO 37073
// tmp := array ;
36915: LD_ADDR_VAR 0 10
36919: PUSH
36920: LD_VAR 0 1
36924: ST_TO_ADDR
// for i = 1 to length do
36925: LD_ADDR_VAR 0 6
36929: PUSH
36930: DOUBLE
36931: LD_INT 1
36933: DEC
36934: ST_TO_ADDR
36935: LD_VAR 0 11
36939: PUSH
36940: FOR_TO
36941: IFFALSE 37061
// begin for j = 1 to array do
36943: LD_ADDR_VAR 0 7
36947: PUSH
36948: DOUBLE
36949: LD_INT 1
36951: DEC
36952: ST_TO_ADDR
36953: LD_VAR 0 1
36957: PUSH
36958: FOR_TO
36959: IFFALSE 37047
// begin k := j + d ;
36961: LD_ADDR_VAR 0 8
36965: PUSH
36966: LD_VAR 0 7
36970: PUSH
36971: LD_VAR 0 9
36975: PLUS
36976: ST_TO_ADDR
// if k > array then
36977: LD_VAR 0 8
36981: PUSH
36982: LD_VAR 0 1
36986: GREATER
36987: IFFALSE 36997
// k := 1 ;
36989: LD_ADDR_VAR 0 8
36993: PUSH
36994: LD_INT 1
36996: ST_TO_ADDR
// if not k then
36997: LD_VAR 0 8
37001: NOT
37002: IFFALSE 37014
// k := array ;
37004: LD_ADDR_VAR 0 8
37008: PUSH
37009: LD_VAR 0 1
37013: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37014: LD_ADDR_VAR 0 10
37018: PUSH
37019: LD_VAR 0 10
37023: PPUSH
37024: LD_VAR 0 8
37028: PPUSH
37029: LD_VAR 0 1
37033: PUSH
37034: LD_VAR 0 7
37038: ARRAY
37039: PPUSH
37040: CALL_OW 1
37044: ST_TO_ADDR
// end ;
37045: GO 36958
37047: POP
37048: POP
// array := tmp ;
37049: LD_ADDR_VAR 0 1
37053: PUSH
37054: LD_VAR 0 10
37058: ST_TO_ADDR
// end ;
37059: GO 36940
37061: POP
37062: POP
// result := array ;
37063: LD_ADDR_VAR 0 5
37067: PUSH
37068: LD_VAR 0 1
37072: ST_TO_ADDR
// end ;
37073: LD_VAR 0 5
37077: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37078: LD_INT 0
37080: PPUSH
37081: PPUSH
// result := 0 ;
37082: LD_ADDR_VAR 0 3
37086: PUSH
37087: LD_INT 0
37089: ST_TO_ADDR
// if not array or not value in array then
37090: LD_VAR 0 1
37094: NOT
37095: PUSH
37096: LD_VAR 0 2
37100: PUSH
37101: LD_VAR 0 1
37105: IN
37106: NOT
37107: OR
37108: IFFALSE 37112
// exit ;
37110: GO 37166
// for i = 1 to array do
37112: LD_ADDR_VAR 0 4
37116: PUSH
37117: DOUBLE
37118: LD_INT 1
37120: DEC
37121: ST_TO_ADDR
37122: LD_VAR 0 1
37126: PUSH
37127: FOR_TO
37128: IFFALSE 37164
// if value = array [ i ] then
37130: LD_VAR 0 2
37134: PUSH
37135: LD_VAR 0 1
37139: PUSH
37140: LD_VAR 0 4
37144: ARRAY
37145: EQUAL
37146: IFFALSE 37162
// begin result := i ;
37148: LD_ADDR_VAR 0 3
37152: PUSH
37153: LD_VAR 0 4
37157: ST_TO_ADDR
// exit ;
37158: POP
37159: POP
37160: GO 37166
// end ;
37162: GO 37127
37164: POP
37165: POP
// end ;
37166: LD_VAR 0 3
37170: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37171: LD_INT 0
37173: PPUSH
// vc_chassis := chassis ;
37174: LD_ADDR_OWVAR 37
37178: PUSH
37179: LD_VAR 0 1
37183: ST_TO_ADDR
// vc_engine := engine ;
37184: LD_ADDR_OWVAR 39
37188: PUSH
37189: LD_VAR 0 2
37193: ST_TO_ADDR
// vc_control := control ;
37194: LD_ADDR_OWVAR 38
37198: PUSH
37199: LD_VAR 0 3
37203: ST_TO_ADDR
// vc_weapon := weapon ;
37204: LD_ADDR_OWVAR 40
37208: PUSH
37209: LD_VAR 0 4
37213: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37214: LD_ADDR_OWVAR 41
37218: PUSH
37219: LD_VAR 0 5
37223: ST_TO_ADDR
// end ;
37224: LD_VAR 0 6
37228: RET
// export function WantPlant ( unit ) ; var task ; begin
37229: LD_INT 0
37231: PPUSH
37232: PPUSH
// result := false ;
37233: LD_ADDR_VAR 0 2
37237: PUSH
37238: LD_INT 0
37240: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37241: LD_ADDR_VAR 0 3
37245: PUSH
37246: LD_VAR 0 1
37250: PPUSH
37251: CALL_OW 437
37255: ST_TO_ADDR
// if task then
37256: LD_VAR 0 3
37260: IFFALSE 37288
// if task [ 1 ] [ 1 ] = p then
37262: LD_VAR 0 3
37266: PUSH
37267: LD_INT 1
37269: ARRAY
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: PUSH
37275: LD_STRING p
37277: EQUAL
37278: IFFALSE 37288
// result := true ;
37280: LD_ADDR_VAR 0 2
37284: PUSH
37285: LD_INT 1
37287: ST_TO_ADDR
// end ;
37288: LD_VAR 0 2
37292: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37293: LD_INT 0
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
// if pos < 1 then
37299: LD_VAR 0 2
37303: PUSH
37304: LD_INT 1
37306: LESS
37307: IFFALSE 37311
// exit ;
37309: GO 37614
// if pos = 1 then
37311: LD_VAR 0 2
37315: PUSH
37316: LD_INT 1
37318: EQUAL
37319: IFFALSE 37352
// result := Replace ( arr , pos [ 1 ] , value ) else
37321: LD_ADDR_VAR 0 4
37325: PUSH
37326: LD_VAR 0 1
37330: PPUSH
37331: LD_VAR 0 2
37335: PUSH
37336: LD_INT 1
37338: ARRAY
37339: PPUSH
37340: LD_VAR 0 3
37344: PPUSH
37345: CALL_OW 1
37349: ST_TO_ADDR
37350: GO 37614
// begin tmp := arr ;
37352: LD_ADDR_VAR 0 6
37356: PUSH
37357: LD_VAR 0 1
37361: ST_TO_ADDR
// s_arr := [ tmp ] ;
37362: LD_ADDR_VAR 0 7
37366: PUSH
37367: LD_VAR 0 6
37371: PUSH
37372: EMPTY
37373: LIST
37374: ST_TO_ADDR
// for i = 1 to pos - 1 do
37375: LD_ADDR_VAR 0 5
37379: PUSH
37380: DOUBLE
37381: LD_INT 1
37383: DEC
37384: ST_TO_ADDR
37385: LD_VAR 0 2
37389: PUSH
37390: LD_INT 1
37392: MINUS
37393: PUSH
37394: FOR_TO
37395: IFFALSE 37440
// begin tmp := tmp [ pos [ i ] ] ;
37397: LD_ADDR_VAR 0 6
37401: PUSH
37402: LD_VAR 0 6
37406: PUSH
37407: LD_VAR 0 2
37411: PUSH
37412: LD_VAR 0 5
37416: ARRAY
37417: ARRAY
37418: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37419: LD_ADDR_VAR 0 7
37423: PUSH
37424: LD_VAR 0 7
37428: PUSH
37429: LD_VAR 0 6
37433: PUSH
37434: EMPTY
37435: LIST
37436: ADD
37437: ST_TO_ADDR
// end ;
37438: GO 37394
37440: POP
37441: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37442: LD_ADDR_VAR 0 6
37446: PUSH
37447: LD_VAR 0 6
37451: PPUSH
37452: LD_VAR 0 2
37456: PUSH
37457: LD_VAR 0 2
37461: ARRAY
37462: PPUSH
37463: LD_VAR 0 3
37467: PPUSH
37468: CALL_OW 1
37472: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37473: LD_ADDR_VAR 0 7
37477: PUSH
37478: LD_VAR 0 7
37482: PPUSH
37483: LD_VAR 0 7
37487: PPUSH
37488: LD_VAR 0 6
37492: PPUSH
37493: CALL_OW 1
37497: ST_TO_ADDR
// for i = s_arr downto 2 do
37498: LD_ADDR_VAR 0 5
37502: PUSH
37503: DOUBLE
37504: LD_VAR 0 7
37508: INC
37509: ST_TO_ADDR
37510: LD_INT 2
37512: PUSH
37513: FOR_DOWNTO
37514: IFFALSE 37598
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37516: LD_ADDR_VAR 0 6
37520: PUSH
37521: LD_VAR 0 7
37525: PUSH
37526: LD_VAR 0 5
37530: PUSH
37531: LD_INT 1
37533: MINUS
37534: ARRAY
37535: PPUSH
37536: LD_VAR 0 2
37540: PUSH
37541: LD_VAR 0 5
37545: PUSH
37546: LD_INT 1
37548: MINUS
37549: ARRAY
37550: PPUSH
37551: LD_VAR 0 7
37555: PUSH
37556: LD_VAR 0 5
37560: ARRAY
37561: PPUSH
37562: CALL_OW 1
37566: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37567: LD_ADDR_VAR 0 7
37571: PUSH
37572: LD_VAR 0 7
37576: PPUSH
37577: LD_VAR 0 5
37581: PUSH
37582: LD_INT 1
37584: MINUS
37585: PPUSH
37586: LD_VAR 0 6
37590: PPUSH
37591: CALL_OW 1
37595: ST_TO_ADDR
// end ;
37596: GO 37513
37598: POP
37599: POP
// result := s_arr [ 1 ] ;
37600: LD_ADDR_VAR 0 4
37604: PUSH
37605: LD_VAR 0 7
37609: PUSH
37610: LD_INT 1
37612: ARRAY
37613: ST_TO_ADDR
// end ; end ;
37614: LD_VAR 0 4
37618: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37619: LD_INT 0
37621: PPUSH
37622: PPUSH
// if not list then
37623: LD_VAR 0 1
37627: NOT
37628: IFFALSE 37632
// exit ;
37630: GO 37723
// i := list [ pos1 ] ;
37632: LD_ADDR_VAR 0 5
37636: PUSH
37637: LD_VAR 0 1
37641: PUSH
37642: LD_VAR 0 2
37646: ARRAY
37647: ST_TO_ADDR
// if not i then
37648: LD_VAR 0 5
37652: NOT
37653: IFFALSE 37657
// exit ;
37655: GO 37723
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37657: LD_ADDR_VAR 0 1
37661: PUSH
37662: LD_VAR 0 1
37666: PPUSH
37667: LD_VAR 0 2
37671: PPUSH
37672: LD_VAR 0 1
37676: PUSH
37677: LD_VAR 0 3
37681: ARRAY
37682: PPUSH
37683: CALL_OW 1
37687: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37688: LD_ADDR_VAR 0 1
37692: PUSH
37693: LD_VAR 0 1
37697: PPUSH
37698: LD_VAR 0 3
37702: PPUSH
37703: LD_VAR 0 5
37707: PPUSH
37708: CALL_OW 1
37712: ST_TO_ADDR
// result := list ;
37713: LD_ADDR_VAR 0 4
37717: PUSH
37718: LD_VAR 0 1
37722: ST_TO_ADDR
// end ;
37723: LD_VAR 0 4
37727: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37728: LD_INT 0
37730: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37731: LD_ADDR_VAR 0 5
37735: PUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: CALL_OW 250
37745: PPUSH
37746: LD_VAR 0 1
37750: PPUSH
37751: CALL_OW 251
37755: PPUSH
37756: LD_VAR 0 2
37760: PPUSH
37761: LD_VAR 0 3
37765: PPUSH
37766: LD_VAR 0 4
37770: PPUSH
37771: CALL 37781 0 5
37775: ST_TO_ADDR
// end ;
37776: LD_VAR 0 5
37780: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37781: LD_INT 0
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
// if not list then
37787: LD_VAR 0 3
37791: NOT
37792: IFFALSE 37796
// exit ;
37794: GO 38184
// result := [ ] ;
37796: LD_ADDR_VAR 0 6
37800: PUSH
37801: EMPTY
37802: ST_TO_ADDR
// for i in list do
37803: LD_ADDR_VAR 0 7
37807: PUSH
37808: LD_VAR 0 3
37812: PUSH
37813: FOR_IN
37814: IFFALSE 38016
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37816: LD_ADDR_VAR 0 9
37820: PUSH
37821: LD_VAR 0 7
37825: PPUSH
37826: LD_VAR 0 1
37830: PPUSH
37831: LD_VAR 0 2
37835: PPUSH
37836: CALL_OW 297
37840: ST_TO_ADDR
// if not result then
37841: LD_VAR 0 6
37845: NOT
37846: IFFALSE 37872
// result := [ [ i , tmp ] ] else
37848: LD_ADDR_VAR 0 6
37852: PUSH
37853: LD_VAR 0 7
37857: PUSH
37858: LD_VAR 0 9
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: ST_TO_ADDR
37870: GO 38014
// begin if result [ result ] [ 2 ] < tmp then
37872: LD_VAR 0 6
37876: PUSH
37877: LD_VAR 0 6
37881: ARRAY
37882: PUSH
37883: LD_INT 2
37885: ARRAY
37886: PUSH
37887: LD_VAR 0 9
37891: LESS
37892: IFFALSE 37934
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37894: LD_ADDR_VAR 0 6
37898: PUSH
37899: LD_VAR 0 6
37903: PPUSH
37904: LD_VAR 0 6
37908: PUSH
37909: LD_INT 1
37911: PLUS
37912: PPUSH
37913: LD_VAR 0 7
37917: PUSH
37918: LD_VAR 0 9
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PPUSH
37927: CALL_OW 2
37931: ST_TO_ADDR
37932: GO 38014
// for j = 1 to result do
37934: LD_ADDR_VAR 0 8
37938: PUSH
37939: DOUBLE
37940: LD_INT 1
37942: DEC
37943: ST_TO_ADDR
37944: LD_VAR 0 6
37948: PUSH
37949: FOR_TO
37950: IFFALSE 38012
// begin if tmp < result [ j ] [ 2 ] then
37952: LD_VAR 0 9
37956: PUSH
37957: LD_VAR 0 6
37961: PUSH
37962: LD_VAR 0 8
37966: ARRAY
37967: PUSH
37968: LD_INT 2
37970: ARRAY
37971: LESS
37972: IFFALSE 38010
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37974: LD_ADDR_VAR 0 6
37978: PUSH
37979: LD_VAR 0 6
37983: PPUSH
37984: LD_VAR 0 8
37988: PPUSH
37989: LD_VAR 0 7
37993: PUSH
37994: LD_VAR 0 9
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PPUSH
38003: CALL_OW 2
38007: ST_TO_ADDR
// break ;
38008: GO 38012
// end ; end ;
38010: GO 37949
38012: POP
38013: POP
// end ; end ;
38014: GO 37813
38016: POP
38017: POP
// if result and not asc then
38018: LD_VAR 0 6
38022: PUSH
38023: LD_VAR 0 4
38027: NOT
38028: AND
38029: IFFALSE 38104
// begin tmp := result ;
38031: LD_ADDR_VAR 0 9
38035: PUSH
38036: LD_VAR 0 6
38040: ST_TO_ADDR
// for i = tmp downto 1 do
38041: LD_ADDR_VAR 0 7
38045: PUSH
38046: DOUBLE
38047: LD_VAR 0 9
38051: INC
38052: ST_TO_ADDR
38053: LD_INT 1
38055: PUSH
38056: FOR_DOWNTO
38057: IFFALSE 38102
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38059: LD_ADDR_VAR 0 6
38063: PUSH
38064: LD_VAR 0 6
38068: PPUSH
38069: LD_VAR 0 9
38073: PUSH
38074: LD_VAR 0 7
38078: MINUS
38079: PUSH
38080: LD_INT 1
38082: PLUS
38083: PPUSH
38084: LD_VAR 0 9
38088: PUSH
38089: LD_VAR 0 7
38093: ARRAY
38094: PPUSH
38095: CALL_OW 1
38099: ST_TO_ADDR
38100: GO 38056
38102: POP
38103: POP
// end ; tmp := [ ] ;
38104: LD_ADDR_VAR 0 9
38108: PUSH
38109: EMPTY
38110: ST_TO_ADDR
// if mode then
38111: LD_VAR 0 5
38115: IFFALSE 38184
// begin for i = 1 to result do
38117: LD_ADDR_VAR 0 7
38121: PUSH
38122: DOUBLE
38123: LD_INT 1
38125: DEC
38126: ST_TO_ADDR
38127: LD_VAR 0 6
38131: PUSH
38132: FOR_TO
38133: IFFALSE 38172
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38135: LD_ADDR_VAR 0 9
38139: PUSH
38140: LD_VAR 0 9
38144: PPUSH
38145: LD_VAR 0 7
38149: PPUSH
38150: LD_VAR 0 6
38154: PUSH
38155: LD_VAR 0 7
38159: ARRAY
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: PPUSH
38165: CALL_OW 1
38169: ST_TO_ADDR
38170: GO 38132
38172: POP
38173: POP
// result := tmp ;
38174: LD_ADDR_VAR 0 6
38178: PUSH
38179: LD_VAR 0 9
38183: ST_TO_ADDR
// end ; end ;
38184: LD_VAR 0 6
38188: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38197: LD_ADDR_VAR 0 5
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// if not x or not y then
38219: LD_VAR 0 2
38223: NOT
38224: PUSH
38225: LD_VAR 0 3
38229: NOT
38230: OR
38231: IFFALSE 38235
// exit ;
38233: GO 39887
// if not range then
38235: LD_VAR 0 4
38239: NOT
38240: IFFALSE 38250
// range := 10 ;
38242: LD_ADDR_VAR 0 4
38246: PUSH
38247: LD_INT 10
38249: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38250: LD_ADDR_VAR 0 8
38254: PUSH
38255: LD_INT 81
38257: PUSH
38258: LD_VAR 0 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 92
38269: PUSH
38270: LD_VAR 0 2
38274: PUSH
38275: LD_VAR 0 3
38279: PUSH
38280: LD_VAR 0 4
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: PUSH
38294: LD_INT 21
38296: PUSH
38297: LD_INT 3
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: PPUSH
38313: CALL_OW 69
38317: ST_TO_ADDR
// if not tmp then
38318: LD_VAR 0 8
38322: NOT
38323: IFFALSE 38327
// exit ;
38325: GO 39887
// for i in tmp do
38327: LD_ADDR_VAR 0 6
38331: PUSH
38332: LD_VAR 0 8
38336: PUSH
38337: FOR_IN
38338: IFFALSE 39862
// begin points := [ 0 , 0 , 0 ] ;
38340: LD_ADDR_VAR 0 9
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: ST_TO_ADDR
// bpoints := 1 ;
38359: LD_ADDR_VAR 0 10
38363: PUSH
38364: LD_INT 1
38366: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38367: LD_VAR 0 6
38371: PPUSH
38372: CALL_OW 247
38376: PUSH
38377: LD_INT 1
38379: DOUBLE
38380: EQUAL
38381: IFTRUE 38385
38383: GO 38963
38385: POP
// begin if GetClass ( i ) = 1 then
38386: LD_VAR 0 6
38390: PPUSH
38391: CALL_OW 257
38395: PUSH
38396: LD_INT 1
38398: EQUAL
38399: IFFALSE 38420
// points := [ 10 , 5 , 3 ] ;
38401: LD_ADDR_VAR 0 9
38405: PUSH
38406: LD_INT 10
38408: PUSH
38409: LD_INT 5
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38420: LD_VAR 0 6
38424: PPUSH
38425: CALL_OW 257
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 4
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: LIST
38443: IN
38444: IFFALSE 38465
// points := [ 3 , 2 , 1 ] ;
38446: LD_ADDR_VAR 0 9
38450: PUSH
38451: LD_INT 3
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38465: LD_VAR 0 6
38469: PPUSH
38470: CALL_OW 257
38474: PUSH
38475: LD_INT 5
38477: EQUAL
38478: IFFALSE 38499
// points := [ 130 , 5 , 2 ] ;
38480: LD_ADDR_VAR 0 9
38484: PUSH
38485: LD_INT 130
38487: PUSH
38488: LD_INT 5
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: LIST
38498: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38499: LD_VAR 0 6
38503: PPUSH
38504: CALL_OW 257
38508: PUSH
38509: LD_INT 8
38511: EQUAL
38512: IFFALSE 38533
// points := [ 35 , 35 , 30 ] ;
38514: LD_ADDR_VAR 0 9
38518: PUSH
38519: LD_INT 35
38521: PUSH
38522: LD_INT 35
38524: PUSH
38525: LD_INT 30
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38533: LD_VAR 0 6
38537: PPUSH
38538: CALL_OW 257
38542: PUSH
38543: LD_INT 9
38545: EQUAL
38546: IFFALSE 38567
// points := [ 20 , 55 , 40 ] ;
38548: LD_ADDR_VAR 0 9
38552: PUSH
38553: LD_INT 20
38555: PUSH
38556: LD_INT 55
38558: PUSH
38559: LD_INT 40
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38567: LD_VAR 0 6
38571: PPUSH
38572: CALL_OW 257
38576: PUSH
38577: LD_INT 12
38579: PUSH
38580: LD_INT 16
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: IN
38587: IFFALSE 38608
// points := [ 5 , 3 , 2 ] ;
38589: LD_ADDR_VAR 0 9
38593: PUSH
38594: LD_INT 5
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38608: LD_VAR 0 6
38612: PPUSH
38613: CALL_OW 257
38617: PUSH
38618: LD_INT 17
38620: EQUAL
38621: IFFALSE 38642
// points := [ 100 , 50 , 75 ] ;
38623: LD_ADDR_VAR 0 9
38627: PUSH
38628: LD_INT 100
38630: PUSH
38631: LD_INT 50
38633: PUSH
38634: LD_INT 75
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38642: LD_VAR 0 6
38646: PPUSH
38647: CALL_OW 257
38651: PUSH
38652: LD_INT 15
38654: EQUAL
38655: IFFALSE 38676
// points := [ 10 , 5 , 3 ] ;
38657: LD_ADDR_VAR 0 9
38661: PUSH
38662: LD_INT 10
38664: PUSH
38665: LD_INT 5
38667: PUSH
38668: LD_INT 3
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38676: LD_VAR 0 6
38680: PPUSH
38681: CALL_OW 257
38685: PUSH
38686: LD_INT 14
38688: EQUAL
38689: IFFALSE 38710
// points := [ 10 , 0 , 0 ] ;
38691: LD_ADDR_VAR 0 9
38695: PUSH
38696: LD_INT 10
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38710: LD_VAR 0 6
38714: PPUSH
38715: CALL_OW 257
38719: PUSH
38720: LD_INT 11
38722: EQUAL
38723: IFFALSE 38744
// points := [ 30 , 10 , 5 ] ;
38725: LD_ADDR_VAR 0 9
38729: PUSH
38730: LD_INT 30
38732: PUSH
38733: LD_INT 10
38735: PUSH
38736: LD_INT 5
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38744: LD_VAR 0 1
38748: PPUSH
38749: LD_INT 5
38751: PPUSH
38752: CALL_OW 321
38756: PUSH
38757: LD_INT 2
38759: EQUAL
38760: IFFALSE 38777
// bpoints := bpoints * 1.8 ;
38762: LD_ADDR_VAR 0 10
38766: PUSH
38767: LD_VAR 0 10
38771: PUSH
38772: LD_REAL  1.80000000000000E+0000
38775: MUL
38776: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38777: LD_VAR 0 6
38781: PPUSH
38782: CALL_OW 257
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: LD_INT 4
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: IN
38805: PUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: LD_INT 51
38813: PPUSH
38814: CALL_OW 321
38818: PUSH
38819: LD_INT 2
38821: EQUAL
38822: AND
38823: IFFALSE 38840
// bpoints := bpoints * 1.2 ;
38825: LD_ADDR_VAR 0 10
38829: PUSH
38830: LD_VAR 0 10
38834: PUSH
38835: LD_REAL  1.20000000000000E+0000
38838: MUL
38839: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38840: LD_VAR 0 6
38844: PPUSH
38845: CALL_OW 257
38849: PUSH
38850: LD_INT 5
38852: PUSH
38853: LD_INT 7
38855: PUSH
38856: LD_INT 9
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: IN
38864: PUSH
38865: LD_VAR 0 1
38869: PPUSH
38870: LD_INT 52
38872: PPUSH
38873: CALL_OW 321
38877: PUSH
38878: LD_INT 2
38880: EQUAL
38881: AND
38882: IFFALSE 38899
// bpoints := bpoints * 1.5 ;
38884: LD_ADDR_VAR 0 10
38888: PUSH
38889: LD_VAR 0 10
38893: PUSH
38894: LD_REAL  1.50000000000000E+0000
38897: MUL
38898: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38899: LD_VAR 0 1
38903: PPUSH
38904: LD_INT 66
38906: PPUSH
38907: CALL_OW 321
38911: PUSH
38912: LD_INT 2
38914: EQUAL
38915: IFFALSE 38932
// bpoints := bpoints * 1.1 ;
38917: LD_ADDR_VAR 0 10
38921: PUSH
38922: LD_VAR 0 10
38926: PUSH
38927: LD_REAL  1.10000000000000E+0000
38930: MUL
38931: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38932: LD_ADDR_VAR 0 10
38936: PUSH
38937: LD_VAR 0 10
38941: PUSH
38942: LD_VAR 0 6
38946: PPUSH
38947: LD_INT 1
38949: PPUSH
38950: CALL_OW 259
38954: PUSH
38955: LD_REAL  1.15000000000000E+0000
38958: MUL
38959: MUL
38960: ST_TO_ADDR
// end ; unit_vehicle :
38961: GO 39791
38963: LD_INT 2
38965: DOUBLE
38966: EQUAL
38967: IFTRUE 38971
38969: GO 39779
38971: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38972: LD_VAR 0 6
38976: PPUSH
38977: CALL_OW 264
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: LD_INT 42
38987: PUSH
38988: LD_INT 24
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: IN
38996: IFFALSE 39017
// points := [ 25 , 5 , 3 ] ;
38998: LD_ADDR_VAR 0 9
39002: PUSH
39003: LD_INT 25
39005: PUSH
39006: LD_INT 5
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39017: LD_VAR 0 6
39021: PPUSH
39022: CALL_OW 264
39026: PUSH
39027: LD_INT 4
39029: PUSH
39030: LD_INT 43
39032: PUSH
39033: LD_INT 25
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: IN
39041: IFFALSE 39062
// points := [ 40 , 15 , 5 ] ;
39043: LD_ADDR_VAR 0 9
39047: PUSH
39048: LD_INT 40
39050: PUSH
39051: LD_INT 15
39053: PUSH
39054: LD_INT 5
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39062: LD_VAR 0 6
39066: PPUSH
39067: CALL_OW 264
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 23
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: IN
39082: IFFALSE 39103
// points := [ 7 , 25 , 8 ] ;
39084: LD_ADDR_VAR 0 9
39088: PUSH
39089: LD_INT 7
39091: PUSH
39092: LD_INT 25
39094: PUSH
39095: LD_INT 8
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39103: LD_VAR 0 6
39107: PPUSH
39108: CALL_OW 264
39112: PUSH
39113: LD_INT 5
39115: PUSH
39116: LD_INT 27
39118: PUSH
39119: LD_INT 44
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: IN
39127: IFFALSE 39148
// points := [ 14 , 50 , 16 ] ;
39129: LD_ADDR_VAR 0 9
39133: PUSH
39134: LD_INT 14
39136: PUSH
39137: LD_INT 50
39139: PUSH
39140: LD_INT 16
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39148: LD_VAR 0 6
39152: PPUSH
39153: CALL_OW 264
39157: PUSH
39158: LD_INT 6
39160: PUSH
39161: LD_INT 46
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: IN
39168: IFFALSE 39189
// points := [ 32 , 120 , 70 ] ;
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_INT 32
39177: PUSH
39178: LD_INT 120
39180: PUSH
39181: LD_INT 70
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39189: LD_VAR 0 6
39193: PPUSH
39194: CALL_OW 264
39198: PUSH
39199: LD_INT 7
39201: PUSH
39202: LD_INT 28
39204: PUSH
39205: LD_INT 45
39207: PUSH
39208: LD_EXP 49
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: IN
39219: IFFALSE 39240
// points := [ 35 , 20 , 45 ] ;
39221: LD_ADDR_VAR 0 9
39225: PUSH
39226: LD_INT 35
39228: PUSH
39229: LD_INT 20
39231: PUSH
39232: LD_INT 45
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39240: LD_VAR 0 6
39244: PPUSH
39245: CALL_OW 264
39249: PUSH
39250: LD_INT 47
39252: PUSH
39253: EMPTY
39254: LIST
39255: IN
39256: IFFALSE 39277
// points := [ 67 , 45 , 75 ] ;
39258: LD_ADDR_VAR 0 9
39262: PUSH
39263: LD_INT 67
39265: PUSH
39266: LD_INT 45
39268: PUSH
39269: LD_INT 75
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39277: LD_VAR 0 6
39281: PPUSH
39282: CALL_OW 264
39286: PUSH
39287: LD_INT 26
39289: PUSH
39290: EMPTY
39291: LIST
39292: IN
39293: IFFALSE 39314
// points := [ 120 , 30 , 80 ] ;
39295: LD_ADDR_VAR 0 9
39299: PUSH
39300: LD_INT 120
39302: PUSH
39303: LD_INT 30
39305: PUSH
39306: LD_INT 80
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39314: LD_VAR 0 6
39318: PPUSH
39319: CALL_OW 264
39323: PUSH
39324: LD_INT 22
39326: PUSH
39327: EMPTY
39328: LIST
39329: IN
39330: IFFALSE 39351
// points := [ 40 , 1 , 1 ] ;
39332: LD_ADDR_VAR 0 9
39336: PUSH
39337: LD_INT 40
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39351: LD_VAR 0 6
39355: PPUSH
39356: CALL_OW 264
39360: PUSH
39361: LD_INT 29
39363: PUSH
39364: EMPTY
39365: LIST
39366: IN
39367: IFFALSE 39388
// points := [ 70 , 200 , 400 ] ;
39369: LD_ADDR_VAR 0 9
39373: PUSH
39374: LD_INT 70
39376: PUSH
39377: LD_INT 200
39379: PUSH
39380: LD_INT 400
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39388: LD_VAR 0 6
39392: PPUSH
39393: CALL_OW 264
39397: PUSH
39398: LD_INT 14
39400: PUSH
39401: LD_INT 53
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: IN
39408: IFFALSE 39429
// points := [ 40 , 10 , 20 ] ;
39410: LD_ADDR_VAR 0 9
39414: PUSH
39415: LD_INT 40
39417: PUSH
39418: LD_INT 10
39420: PUSH
39421: LD_INT 20
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39429: LD_VAR 0 6
39433: PPUSH
39434: CALL_OW 264
39438: PUSH
39439: LD_INT 9
39441: PUSH
39442: EMPTY
39443: LIST
39444: IN
39445: IFFALSE 39466
// points := [ 5 , 70 , 20 ] ;
39447: LD_ADDR_VAR 0 9
39451: PUSH
39452: LD_INT 5
39454: PUSH
39455: LD_INT 70
39457: PUSH
39458: LD_INT 20
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39466: LD_VAR 0 6
39470: PPUSH
39471: CALL_OW 264
39475: PUSH
39476: LD_INT 10
39478: PUSH
39479: EMPTY
39480: LIST
39481: IN
39482: IFFALSE 39503
// points := [ 35 , 110 , 70 ] ;
39484: LD_ADDR_VAR 0 9
39488: PUSH
39489: LD_INT 35
39491: PUSH
39492: LD_INT 110
39494: PUSH
39495: LD_INT 70
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39503: LD_VAR 0 6
39507: PPUSH
39508: CALL_OW 265
39512: PUSH
39513: LD_INT 25
39515: EQUAL
39516: IFFALSE 39537
// points := [ 80 , 65 , 100 ] ;
39518: LD_ADDR_VAR 0 9
39522: PUSH
39523: LD_INT 80
39525: PUSH
39526: LD_INT 65
39528: PUSH
39529: LD_INT 100
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: LIST
39536: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39537: LD_VAR 0 6
39541: PPUSH
39542: CALL_OW 263
39546: PUSH
39547: LD_INT 1
39549: EQUAL
39550: IFFALSE 39585
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39552: LD_ADDR_VAR 0 10
39556: PUSH
39557: LD_VAR 0 10
39561: PUSH
39562: LD_VAR 0 6
39566: PPUSH
39567: CALL_OW 311
39571: PPUSH
39572: LD_INT 3
39574: PPUSH
39575: CALL_OW 259
39579: PUSH
39580: LD_INT 4
39582: MUL
39583: MUL
39584: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39585: LD_VAR 0 6
39589: PPUSH
39590: CALL_OW 263
39594: PUSH
39595: LD_INT 2
39597: EQUAL
39598: IFFALSE 39649
// begin j := IsControledBy ( i ) ;
39600: LD_ADDR_VAR 0 7
39604: PUSH
39605: LD_VAR 0 6
39609: PPUSH
39610: CALL_OW 312
39614: ST_TO_ADDR
// if j then
39615: LD_VAR 0 7
39619: IFFALSE 39649
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39621: LD_ADDR_VAR 0 10
39625: PUSH
39626: LD_VAR 0 10
39630: PUSH
39631: LD_VAR 0 7
39635: PPUSH
39636: LD_INT 3
39638: PPUSH
39639: CALL_OW 259
39643: PUSH
39644: LD_INT 3
39646: MUL
39647: MUL
39648: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39649: LD_VAR 0 6
39653: PPUSH
39654: CALL_OW 264
39658: PUSH
39659: LD_INT 5
39661: PUSH
39662: LD_INT 6
39664: PUSH
39665: LD_INT 46
39667: PUSH
39668: LD_INT 44
39670: PUSH
39671: LD_INT 47
39673: PUSH
39674: LD_INT 45
39676: PUSH
39677: LD_INT 28
39679: PUSH
39680: LD_INT 7
39682: PUSH
39683: LD_INT 27
39685: PUSH
39686: LD_INT 29
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: IN
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: LD_INT 52
39709: PPUSH
39710: CALL_OW 321
39714: PUSH
39715: LD_INT 2
39717: EQUAL
39718: AND
39719: IFFALSE 39736
// bpoints := bpoints * 1.2 ;
39721: LD_ADDR_VAR 0 10
39725: PUSH
39726: LD_VAR 0 10
39730: PUSH
39731: LD_REAL  1.20000000000000E+0000
39734: MUL
39735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39736: LD_VAR 0 6
39740: PPUSH
39741: CALL_OW 264
39745: PUSH
39746: LD_INT 6
39748: PUSH
39749: LD_INT 46
39751: PUSH
39752: LD_INT 47
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: IN
39760: IFFALSE 39777
// bpoints := bpoints * 1.2 ;
39762: LD_ADDR_VAR 0 10
39766: PUSH
39767: LD_VAR 0 10
39771: PUSH
39772: LD_REAL  1.20000000000000E+0000
39775: MUL
39776: ST_TO_ADDR
// end ; unit_building :
39777: GO 39791
39779: LD_INT 3
39781: DOUBLE
39782: EQUAL
39783: IFTRUE 39787
39785: GO 39790
39787: POP
// ; end ;
39788: GO 39791
39790: POP
// for j = 1 to 3 do
39791: LD_ADDR_VAR 0 7
39795: PUSH
39796: DOUBLE
39797: LD_INT 1
39799: DEC
39800: ST_TO_ADDR
39801: LD_INT 3
39803: PUSH
39804: FOR_TO
39805: IFFALSE 39858
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39807: LD_ADDR_VAR 0 5
39811: PUSH
39812: LD_VAR 0 5
39816: PPUSH
39817: LD_VAR 0 7
39821: PPUSH
39822: LD_VAR 0 5
39826: PUSH
39827: LD_VAR 0 7
39831: ARRAY
39832: PUSH
39833: LD_VAR 0 9
39837: PUSH
39838: LD_VAR 0 7
39842: ARRAY
39843: PUSH
39844: LD_VAR 0 10
39848: MUL
39849: PLUS
39850: PPUSH
39851: CALL_OW 1
39855: ST_TO_ADDR
39856: GO 39804
39858: POP
39859: POP
// end ;
39860: GO 38337
39862: POP
39863: POP
// result := Replace ( result , 4 , tmp ) ;
39864: LD_ADDR_VAR 0 5
39868: PUSH
39869: LD_VAR 0 5
39873: PPUSH
39874: LD_INT 4
39876: PPUSH
39877: LD_VAR 0 8
39881: PPUSH
39882: CALL_OW 1
39886: ST_TO_ADDR
// end ;
39887: LD_VAR 0 5
39891: RET
// export function DangerAtRange ( unit , range ) ; begin
39892: LD_INT 0
39894: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39895: LD_ADDR_VAR 0 3
39899: PUSH
39900: LD_VAR 0 1
39904: PPUSH
39905: CALL_OW 255
39909: PPUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 250
39919: PPUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 251
39929: PPUSH
39930: LD_VAR 0 2
39934: PPUSH
39935: CALL 38189 0 4
39939: ST_TO_ADDR
// end ;
39940: LD_VAR 0 3
39944: RET
// export function DangerInArea ( side , area ) ; begin
39945: LD_INT 0
39947: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_VAR 0 2
39957: PPUSH
39958: LD_INT 81
39960: PUSH
39961: LD_VAR 0 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PPUSH
39970: CALL_OW 70
39974: ST_TO_ADDR
// end ;
39975: LD_VAR 0 3
39979: RET
// export function IsExtension ( b ) ; begin
39980: LD_INT 0
39982: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39983: LD_ADDR_VAR 0 2
39987: PUSH
39988: LD_VAR 0 1
39992: PUSH
39993: LD_INT 23
39995: PUSH
39996: LD_INT 20
39998: PUSH
39999: LD_INT 22
40001: PUSH
40002: LD_INT 17
40004: PUSH
40005: LD_INT 24
40007: PUSH
40008: LD_INT 21
40010: PUSH
40011: LD_INT 19
40013: PUSH
40014: LD_INT 16
40016: PUSH
40017: LD_INT 25
40019: PUSH
40020: LD_INT 18
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: IN
40035: ST_TO_ADDR
// end ;
40036: LD_VAR 0 2
40040: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40041: LD_INT 0
40043: PPUSH
40044: PPUSH
40045: PPUSH
// result := [ ] ;
40046: LD_ADDR_VAR 0 4
40050: PUSH
40051: EMPTY
40052: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40053: LD_ADDR_VAR 0 5
40057: PUSH
40058: LD_VAR 0 2
40062: PPUSH
40063: LD_INT 21
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PPUSH
40073: CALL_OW 70
40077: ST_TO_ADDR
// if not tmp then
40078: LD_VAR 0 5
40082: NOT
40083: IFFALSE 40087
// exit ;
40085: GO 40151
// if checkLink then
40087: LD_VAR 0 3
40091: IFFALSE 40141
// begin for i in tmp do
40093: LD_ADDR_VAR 0 6
40097: PUSH
40098: LD_VAR 0 5
40102: PUSH
40103: FOR_IN
40104: IFFALSE 40139
// if GetBase ( i ) <> base then
40106: LD_VAR 0 6
40110: PPUSH
40111: CALL_OW 274
40115: PUSH
40116: LD_VAR 0 1
40120: NONEQUAL
40121: IFFALSE 40137
// ComLinkToBase ( base , i ) ;
40123: LD_VAR 0 1
40127: PPUSH
40128: LD_VAR 0 6
40132: PPUSH
40133: CALL_OW 169
40137: GO 40103
40139: POP
40140: POP
// end ; result := tmp ;
40141: LD_ADDR_VAR 0 4
40145: PUSH
40146: LD_VAR 0 5
40150: ST_TO_ADDR
// end ;
40151: LD_VAR 0 4
40155: RET
// export function ComComplete ( units , b ) ; var i ; begin
40156: LD_INT 0
40158: PPUSH
40159: PPUSH
// if not units then
40160: LD_VAR 0 1
40164: NOT
40165: IFFALSE 40169
// exit ;
40167: GO 40259
// for i in units do
40169: LD_ADDR_VAR 0 4
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: FOR_IN
40180: IFFALSE 40257
// if BuildingStatus ( b ) = bs_build then
40182: LD_VAR 0 2
40186: PPUSH
40187: CALL_OW 461
40191: PUSH
40192: LD_INT 1
40194: EQUAL
40195: IFFALSE 40255
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40197: LD_VAR 0 4
40201: PPUSH
40202: LD_STRING h
40204: PUSH
40205: LD_VAR 0 2
40209: PPUSH
40210: CALL_OW 250
40214: PUSH
40215: LD_VAR 0 2
40219: PPUSH
40220: CALL_OW 251
40224: PUSH
40225: LD_VAR 0 2
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: PPUSH
40251: CALL_OW 446
40255: GO 40179
40257: POP
40258: POP
// end ;
40259: LD_VAR 0 3
40263: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40264: LD_INT 0
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
40270: PPUSH
40271: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40272: LD_VAR 0 1
40276: NOT
40277: PUSH
40278: LD_VAR 0 1
40282: PPUSH
40283: CALL_OW 263
40287: PUSH
40288: LD_INT 2
40290: NONEQUAL
40291: OR
40292: IFFALSE 40296
// exit ;
40294: GO 40612
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40296: LD_ADDR_VAR 0 6
40300: PUSH
40301: LD_INT 22
40303: PUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL_OW 255
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 30
40323: PUSH
40324: LD_INT 36
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 34
40333: PUSH
40334: LD_INT 31
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PPUSH
40350: CALL_OW 69
40354: ST_TO_ADDR
// if not tmp then
40355: LD_VAR 0 6
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 40612
// result := [ ] ;
40364: LD_ADDR_VAR 0 2
40368: PUSH
40369: EMPTY
40370: ST_TO_ADDR
// for i in tmp do
40371: LD_ADDR_VAR 0 3
40375: PUSH
40376: LD_VAR 0 6
40380: PUSH
40381: FOR_IN
40382: IFFALSE 40453
// begin t := UnitsInside ( i ) ;
40384: LD_ADDR_VAR 0 4
40388: PUSH
40389: LD_VAR 0 3
40393: PPUSH
40394: CALL_OW 313
40398: ST_TO_ADDR
// if t then
40399: LD_VAR 0 4
40403: IFFALSE 40451
// for j in t do
40405: LD_ADDR_VAR 0 7
40409: PUSH
40410: LD_VAR 0 4
40414: PUSH
40415: FOR_IN
40416: IFFALSE 40449
// result := Replace ( result , result + 1 , j ) ;
40418: LD_ADDR_VAR 0 2
40422: PUSH
40423: LD_VAR 0 2
40427: PPUSH
40428: LD_VAR 0 2
40432: PUSH
40433: LD_INT 1
40435: PLUS
40436: PPUSH
40437: LD_VAR 0 7
40441: PPUSH
40442: CALL_OW 1
40446: ST_TO_ADDR
40447: GO 40415
40449: POP
40450: POP
// end ;
40451: GO 40381
40453: POP
40454: POP
// if not result then
40455: LD_VAR 0 2
40459: NOT
40460: IFFALSE 40464
// exit ;
40462: GO 40612
// mech := result [ 1 ] ;
40464: LD_ADDR_VAR 0 5
40468: PUSH
40469: LD_VAR 0 2
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: ST_TO_ADDR
// if result > 1 then
40478: LD_VAR 0 2
40482: PUSH
40483: LD_INT 1
40485: GREATER
40486: IFFALSE 40598
// begin for i = 2 to result do
40488: LD_ADDR_VAR 0 3
40492: PUSH
40493: DOUBLE
40494: LD_INT 2
40496: DEC
40497: ST_TO_ADDR
40498: LD_VAR 0 2
40502: PUSH
40503: FOR_TO
40504: IFFALSE 40596
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40506: LD_ADDR_VAR 0 4
40510: PUSH
40511: LD_VAR 0 2
40515: PUSH
40516: LD_VAR 0 3
40520: ARRAY
40521: PPUSH
40522: LD_INT 3
40524: PPUSH
40525: CALL_OW 259
40529: PUSH
40530: LD_VAR 0 2
40534: PUSH
40535: LD_VAR 0 3
40539: ARRAY
40540: PPUSH
40541: CALL_OW 432
40545: MINUS
40546: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40547: LD_VAR 0 4
40551: PUSH
40552: LD_VAR 0 5
40556: PPUSH
40557: LD_INT 3
40559: PPUSH
40560: CALL_OW 259
40564: PUSH
40565: LD_VAR 0 5
40569: PPUSH
40570: CALL_OW 432
40574: MINUS
40575: GREATEREQUAL
40576: IFFALSE 40594
// mech := result [ i ] ;
40578: LD_ADDR_VAR 0 5
40582: PUSH
40583: LD_VAR 0 2
40587: PUSH
40588: LD_VAR 0 3
40592: ARRAY
40593: ST_TO_ADDR
// end ;
40594: GO 40503
40596: POP
40597: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40598: LD_VAR 0 1
40602: PPUSH
40603: LD_VAR 0 5
40607: PPUSH
40608: CALL_OW 135
// end ;
40612: LD_VAR 0 2
40616: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40617: LD_INT 0
40619: PPUSH
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
// result := [ ] ;
40632: LD_ADDR_VAR 0 7
40636: PUSH
40637: EMPTY
40638: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40639: LD_VAR 0 1
40643: PPUSH
40644: CALL_OW 266
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: IN
40659: NOT
40660: IFFALSE 40664
// exit ;
40662: GO 42298
// if name then
40664: LD_VAR 0 3
40668: IFFALSE 40684
// SetBName ( base_dep , name ) ;
40670: LD_VAR 0 1
40674: PPUSH
40675: LD_VAR 0 3
40679: PPUSH
40680: CALL_OW 500
// base := GetBase ( base_dep ) ;
40684: LD_ADDR_VAR 0 15
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 274
40698: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40699: LD_ADDR_VAR 0 16
40703: PUSH
40704: LD_VAR 0 1
40708: PPUSH
40709: CALL_OW 255
40713: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40714: LD_ADDR_VAR 0 17
40718: PUSH
40719: LD_VAR 0 1
40723: PPUSH
40724: CALL_OW 248
40728: ST_TO_ADDR
// if sources then
40729: LD_VAR 0 5
40733: IFFALSE 40780
// for i = 1 to 3 do
40735: LD_ADDR_VAR 0 8
40739: PUSH
40740: DOUBLE
40741: LD_INT 1
40743: DEC
40744: ST_TO_ADDR
40745: LD_INT 3
40747: PUSH
40748: FOR_TO
40749: IFFALSE 40778
// AddResourceType ( base , i , sources [ i ] ) ;
40751: LD_VAR 0 15
40755: PPUSH
40756: LD_VAR 0 8
40760: PPUSH
40761: LD_VAR 0 5
40765: PUSH
40766: LD_VAR 0 8
40770: ARRAY
40771: PPUSH
40772: CALL_OW 276
40776: GO 40748
40778: POP
40779: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40780: LD_ADDR_VAR 0 18
40784: PUSH
40785: LD_VAR 0 15
40789: PPUSH
40790: LD_VAR 0 2
40794: PPUSH
40795: LD_INT 1
40797: PPUSH
40798: CALL 40041 0 3
40802: ST_TO_ADDR
// InitHc ;
40803: CALL_OW 19
// InitUc ;
40807: CALL_OW 18
// uc_side := side ;
40811: LD_ADDR_OWVAR 20
40815: PUSH
40816: LD_VAR 0 16
40820: ST_TO_ADDR
// uc_nation := nation ;
40821: LD_ADDR_OWVAR 21
40825: PUSH
40826: LD_VAR 0 17
40830: ST_TO_ADDR
// if buildings then
40831: LD_VAR 0 18
40835: IFFALSE 42157
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40837: LD_ADDR_VAR 0 19
40841: PUSH
40842: LD_VAR 0 18
40846: PPUSH
40847: LD_INT 2
40849: PUSH
40850: LD_INT 30
40852: PUSH
40853: LD_INT 29
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 30
40862: PUSH
40863: LD_INT 30
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: PPUSH
40875: CALL_OW 72
40879: ST_TO_ADDR
// if tmp then
40880: LD_VAR 0 19
40884: IFFALSE 40932
// for i in tmp do
40886: LD_ADDR_VAR 0 8
40890: PUSH
40891: LD_VAR 0 19
40895: PUSH
40896: FOR_IN
40897: IFFALSE 40930
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40899: LD_VAR 0 8
40903: PPUSH
40904: CALL_OW 250
40908: PPUSH
40909: LD_VAR 0 8
40913: PPUSH
40914: CALL_OW 251
40918: PPUSH
40919: LD_VAR 0 16
40923: PPUSH
40924: CALL_OW 441
40928: GO 40896
40930: POP
40931: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40932: LD_VAR 0 18
40936: PPUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 30
40942: PUSH
40943: LD_INT 32
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 30
40952: PUSH
40953: LD_INT 33
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: PPUSH
40965: CALL_OW 72
40969: IFFALSE 41057
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40971: LD_ADDR_VAR 0 8
40975: PUSH
40976: LD_VAR 0 18
40980: PPUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 30
40986: PUSH
40987: LD_INT 32
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 30
40996: PUSH
40997: LD_INT 33
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: PPUSH
41009: CALL_OW 72
41013: PUSH
41014: FOR_IN
41015: IFFALSE 41055
// begin if not GetBWeapon ( i ) then
41017: LD_VAR 0 8
41021: PPUSH
41022: CALL_OW 269
41026: NOT
41027: IFFALSE 41053
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41029: LD_VAR 0 8
41033: PPUSH
41034: LD_VAR 0 8
41038: PPUSH
41039: LD_VAR 0 2
41043: PPUSH
41044: CALL 42303 0 2
41048: PPUSH
41049: CALL_OW 431
// end ;
41053: GO 41014
41055: POP
41056: POP
// end ; for i = 1 to personel do
41057: LD_ADDR_VAR 0 8
41061: PUSH
41062: DOUBLE
41063: LD_INT 1
41065: DEC
41066: ST_TO_ADDR
41067: LD_VAR 0 6
41071: PUSH
41072: FOR_TO
41073: IFFALSE 42137
// begin if i > 4 then
41075: LD_VAR 0 8
41079: PUSH
41080: LD_INT 4
41082: GREATER
41083: IFFALSE 41087
// break ;
41085: GO 42137
// case i of 1 :
41087: LD_VAR 0 8
41091: PUSH
41092: LD_INT 1
41094: DOUBLE
41095: EQUAL
41096: IFTRUE 41100
41098: GO 41180
41100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41101: LD_ADDR_VAR 0 12
41105: PUSH
41106: LD_VAR 0 18
41110: PPUSH
41111: LD_INT 22
41113: PUSH
41114: LD_VAR 0 16
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 58
41125: PUSH
41126: EMPTY
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 30
41134: PUSH
41135: LD_INT 32
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 30
41144: PUSH
41145: LD_INT 4
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 30
41154: PUSH
41155: LD_INT 5
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: PPUSH
41173: CALL_OW 72
41177: ST_TO_ADDR
41178: GO 41402
41180: LD_INT 2
41182: DOUBLE
41183: EQUAL
41184: IFTRUE 41188
41186: GO 41250
41188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41189: LD_ADDR_VAR 0 12
41193: PUSH
41194: LD_VAR 0 18
41198: PPUSH
41199: LD_INT 22
41201: PUSH
41202: LD_VAR 0 16
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: LD_INT 30
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 30
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PPUSH
41243: CALL_OW 72
41247: ST_TO_ADDR
41248: GO 41402
41250: LD_INT 3
41252: DOUBLE
41253: EQUAL
41254: IFTRUE 41258
41256: GO 41320
41258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41259: LD_ADDR_VAR 0 12
41263: PUSH
41264: LD_VAR 0 18
41268: PPUSH
41269: LD_INT 22
41271: PUSH
41272: LD_VAR 0 16
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: LD_INT 30
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 30
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PPUSH
41313: CALL_OW 72
41317: ST_TO_ADDR
41318: GO 41402
41320: LD_INT 4
41322: DOUBLE
41323: EQUAL
41324: IFTRUE 41328
41326: GO 41401
41328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41329: LD_ADDR_VAR 0 12
41333: PUSH
41334: LD_VAR 0 18
41338: PPUSH
41339: LD_INT 22
41341: PUSH
41342: LD_VAR 0 16
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 30
41356: PUSH
41357: LD_INT 6
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 30
41366: PUSH
41367: LD_INT 7
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 30
41376: PUSH
41377: LD_INT 8
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PPUSH
41394: CALL_OW 72
41398: ST_TO_ADDR
41399: GO 41402
41401: POP
// if i = 1 then
41402: LD_VAR 0 8
41406: PUSH
41407: LD_INT 1
41409: EQUAL
41410: IFFALSE 41521
// begin tmp := [ ] ;
41412: LD_ADDR_VAR 0 19
41416: PUSH
41417: EMPTY
41418: ST_TO_ADDR
// for j in f do
41419: LD_ADDR_VAR 0 9
41423: PUSH
41424: LD_VAR 0 12
41428: PUSH
41429: FOR_IN
41430: IFFALSE 41503
// if GetBType ( j ) = b_bunker then
41432: LD_VAR 0 9
41436: PPUSH
41437: CALL_OW 266
41441: PUSH
41442: LD_INT 32
41444: EQUAL
41445: IFFALSE 41472
// tmp := Insert ( tmp , 1 , j ) else
41447: LD_ADDR_VAR 0 19
41451: PUSH
41452: LD_VAR 0 19
41456: PPUSH
41457: LD_INT 1
41459: PPUSH
41460: LD_VAR 0 9
41464: PPUSH
41465: CALL_OW 2
41469: ST_TO_ADDR
41470: GO 41501
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41472: LD_ADDR_VAR 0 19
41476: PUSH
41477: LD_VAR 0 19
41481: PPUSH
41482: LD_VAR 0 19
41486: PUSH
41487: LD_INT 1
41489: PLUS
41490: PPUSH
41491: LD_VAR 0 9
41495: PPUSH
41496: CALL_OW 2
41500: ST_TO_ADDR
41501: GO 41429
41503: POP
41504: POP
// if tmp then
41505: LD_VAR 0 19
41509: IFFALSE 41521
// f := tmp ;
41511: LD_ADDR_VAR 0 12
41515: PUSH
41516: LD_VAR 0 19
41520: ST_TO_ADDR
// end ; x := personel [ i ] ;
41521: LD_ADDR_VAR 0 13
41525: PUSH
41526: LD_VAR 0 6
41530: PUSH
41531: LD_VAR 0 8
41535: ARRAY
41536: ST_TO_ADDR
// if x = - 1 then
41537: LD_VAR 0 13
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: EQUAL
41546: IFFALSE 41755
// begin for j in f do
41548: LD_ADDR_VAR 0 9
41552: PUSH
41553: LD_VAR 0 12
41557: PUSH
41558: FOR_IN
41559: IFFALSE 41751
// repeat InitHc ;
41561: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41565: LD_VAR 0 9
41569: PPUSH
41570: CALL_OW 266
41574: PUSH
41575: LD_INT 5
41577: EQUAL
41578: IFFALSE 41648
// begin if UnitsInside ( j ) < 3 then
41580: LD_VAR 0 9
41584: PPUSH
41585: CALL_OW 313
41589: PUSH
41590: LD_INT 3
41592: LESS
41593: IFFALSE 41629
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41595: LD_INT 0
41597: PPUSH
41598: LD_INT 5
41600: PUSH
41601: LD_INT 8
41603: PUSH
41604: LD_INT 9
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: PUSH
41612: LD_VAR 0 17
41616: ARRAY
41617: PPUSH
41618: LD_VAR 0 4
41622: PPUSH
41623: CALL_OW 380
41627: GO 41646
// PrepareHuman ( false , i , skill ) ;
41629: LD_INT 0
41631: PPUSH
41632: LD_VAR 0 8
41636: PPUSH
41637: LD_VAR 0 4
41641: PPUSH
41642: CALL_OW 380
// end else
41646: GO 41665
// PrepareHuman ( false , i , skill ) ;
41648: LD_INT 0
41650: PPUSH
41651: LD_VAR 0 8
41655: PPUSH
41656: LD_VAR 0 4
41660: PPUSH
41661: CALL_OW 380
// un := CreateHuman ;
41665: LD_ADDR_VAR 0 14
41669: PUSH
41670: CALL_OW 44
41674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41675: LD_ADDR_VAR 0 7
41679: PUSH
41680: LD_VAR 0 7
41684: PPUSH
41685: LD_INT 1
41687: PPUSH
41688: LD_VAR 0 14
41692: PPUSH
41693: CALL_OW 2
41697: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41698: LD_VAR 0 14
41702: PPUSH
41703: LD_VAR 0 9
41707: PPUSH
41708: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41712: LD_VAR 0 9
41716: PPUSH
41717: CALL_OW 313
41721: PUSH
41722: LD_INT 6
41724: EQUAL
41725: PUSH
41726: LD_VAR 0 9
41730: PPUSH
41731: CALL_OW 266
41735: PUSH
41736: LD_INT 32
41738: PUSH
41739: LD_INT 31
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: IN
41746: OR
41747: IFFALSE 41561
41749: GO 41558
41751: POP
41752: POP
// end else
41753: GO 42135
// for j = 1 to x do
41755: LD_ADDR_VAR 0 9
41759: PUSH
41760: DOUBLE
41761: LD_INT 1
41763: DEC
41764: ST_TO_ADDR
41765: LD_VAR 0 13
41769: PUSH
41770: FOR_TO
41771: IFFALSE 42133
// begin InitHc ;
41773: CALL_OW 19
// if not f then
41777: LD_VAR 0 12
41781: NOT
41782: IFFALSE 41871
// begin PrepareHuman ( false , i , skill ) ;
41784: LD_INT 0
41786: PPUSH
41787: LD_VAR 0 8
41791: PPUSH
41792: LD_VAR 0 4
41796: PPUSH
41797: CALL_OW 380
// un := CreateHuman ;
41801: LD_ADDR_VAR 0 14
41805: PUSH
41806: CALL_OW 44
41810: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41811: LD_ADDR_VAR 0 7
41815: PUSH
41816: LD_VAR 0 7
41820: PPUSH
41821: LD_INT 1
41823: PPUSH
41824: LD_VAR 0 14
41828: PPUSH
41829: CALL_OW 2
41833: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41834: LD_VAR 0 14
41838: PPUSH
41839: LD_VAR 0 1
41843: PPUSH
41844: CALL_OW 250
41848: PPUSH
41849: LD_VAR 0 1
41853: PPUSH
41854: CALL_OW 251
41858: PPUSH
41859: LD_INT 10
41861: PPUSH
41862: LD_INT 0
41864: PPUSH
41865: CALL_OW 50
// continue ;
41869: GO 41770
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41871: LD_VAR 0 12
41875: PUSH
41876: LD_INT 1
41878: ARRAY
41879: PPUSH
41880: CALL_OW 313
41884: PUSH
41885: LD_VAR 0 12
41889: PUSH
41890: LD_INT 1
41892: ARRAY
41893: PPUSH
41894: CALL_OW 266
41898: PUSH
41899: LD_INT 32
41901: PUSH
41902: LD_INT 31
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: IN
41909: AND
41910: PUSH
41911: LD_VAR 0 12
41915: PUSH
41916: LD_INT 1
41918: ARRAY
41919: PPUSH
41920: CALL_OW 313
41924: PUSH
41925: LD_INT 6
41927: EQUAL
41928: OR
41929: IFFALSE 41949
// f := Delete ( f , 1 ) ;
41931: LD_ADDR_VAR 0 12
41935: PUSH
41936: LD_VAR 0 12
41940: PPUSH
41941: LD_INT 1
41943: PPUSH
41944: CALL_OW 3
41948: ST_TO_ADDR
// if not f then
41949: LD_VAR 0 12
41953: NOT
41954: IFFALSE 41972
// begin x := x + 2 ;
41956: LD_ADDR_VAR 0 13
41960: PUSH
41961: LD_VAR 0 13
41965: PUSH
41966: LD_INT 2
41968: PLUS
41969: ST_TO_ADDR
// continue ;
41970: GO 41770
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41972: LD_VAR 0 12
41976: PUSH
41977: LD_INT 1
41979: ARRAY
41980: PPUSH
41981: CALL_OW 266
41985: PUSH
41986: LD_INT 5
41988: EQUAL
41989: IFFALSE 42063
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41991: LD_VAR 0 12
41995: PUSH
41996: LD_INT 1
41998: ARRAY
41999: PPUSH
42000: CALL_OW 313
42004: PUSH
42005: LD_INT 3
42007: LESS
42008: IFFALSE 42044
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42010: LD_INT 0
42012: PPUSH
42013: LD_INT 5
42015: PUSH
42016: LD_INT 8
42018: PUSH
42019: LD_INT 9
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: PUSH
42027: LD_VAR 0 17
42031: ARRAY
42032: PPUSH
42033: LD_VAR 0 4
42037: PPUSH
42038: CALL_OW 380
42042: GO 42061
// PrepareHuman ( false , i , skill ) ;
42044: LD_INT 0
42046: PPUSH
42047: LD_VAR 0 8
42051: PPUSH
42052: LD_VAR 0 4
42056: PPUSH
42057: CALL_OW 380
// end else
42061: GO 42080
// PrepareHuman ( false , i , skill ) ;
42063: LD_INT 0
42065: PPUSH
42066: LD_VAR 0 8
42070: PPUSH
42071: LD_VAR 0 4
42075: PPUSH
42076: CALL_OW 380
// un := CreateHuman ;
42080: LD_ADDR_VAR 0 14
42084: PUSH
42085: CALL_OW 44
42089: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42090: LD_ADDR_VAR 0 7
42094: PUSH
42095: LD_VAR 0 7
42099: PPUSH
42100: LD_INT 1
42102: PPUSH
42103: LD_VAR 0 14
42107: PPUSH
42108: CALL_OW 2
42112: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42113: LD_VAR 0 14
42117: PPUSH
42118: LD_VAR 0 12
42122: PUSH
42123: LD_INT 1
42125: ARRAY
42126: PPUSH
42127: CALL_OW 52
// end ;
42131: GO 41770
42133: POP
42134: POP
// end ;
42135: GO 41072
42137: POP
42138: POP
// result := result ^ buildings ;
42139: LD_ADDR_VAR 0 7
42143: PUSH
42144: LD_VAR 0 7
42148: PUSH
42149: LD_VAR 0 18
42153: ADD
42154: ST_TO_ADDR
// end else
42155: GO 42298
// begin for i = 1 to personel do
42157: LD_ADDR_VAR 0 8
42161: PUSH
42162: DOUBLE
42163: LD_INT 1
42165: DEC
42166: ST_TO_ADDR
42167: LD_VAR 0 6
42171: PUSH
42172: FOR_TO
42173: IFFALSE 42296
// begin if i > 4 then
42175: LD_VAR 0 8
42179: PUSH
42180: LD_INT 4
42182: GREATER
42183: IFFALSE 42187
// break ;
42185: GO 42296
// x := personel [ i ] ;
42187: LD_ADDR_VAR 0 13
42191: PUSH
42192: LD_VAR 0 6
42196: PUSH
42197: LD_VAR 0 8
42201: ARRAY
42202: ST_TO_ADDR
// if x = - 1 then
42203: LD_VAR 0 13
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: EQUAL
42212: IFFALSE 42216
// continue ;
42214: GO 42172
// PrepareHuman ( false , i , skill ) ;
42216: LD_INT 0
42218: PPUSH
42219: LD_VAR 0 8
42223: PPUSH
42224: LD_VAR 0 4
42228: PPUSH
42229: CALL_OW 380
// un := CreateHuman ;
42233: LD_ADDR_VAR 0 14
42237: PUSH
42238: CALL_OW 44
42242: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42243: LD_VAR 0 14
42247: PPUSH
42248: LD_VAR 0 1
42252: PPUSH
42253: CALL_OW 250
42257: PPUSH
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 251
42267: PPUSH
42268: LD_INT 10
42270: PPUSH
42271: LD_INT 0
42273: PPUSH
42274: CALL_OW 50
// result := result ^ un ;
42278: LD_ADDR_VAR 0 7
42282: PUSH
42283: LD_VAR 0 7
42287: PUSH
42288: LD_VAR 0 14
42292: ADD
42293: ST_TO_ADDR
// end ;
42294: GO 42172
42296: POP
42297: POP
// end ; end ;
42298: LD_VAR 0 7
42302: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42303: LD_INT 0
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
42319: PPUSH
42320: PPUSH
// result := false ;
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_INT 0
42328: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42329: LD_VAR 0 1
42333: NOT
42334: PUSH
42335: LD_VAR 0 1
42339: PPUSH
42340: CALL_OW 266
42344: PUSH
42345: LD_INT 32
42347: PUSH
42348: LD_INT 33
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: IN
42355: NOT
42356: OR
42357: IFFALSE 42361
// exit ;
42359: GO 43470
// nat := GetNation ( tower ) ;
42361: LD_ADDR_VAR 0 12
42365: PUSH
42366: LD_VAR 0 1
42370: PPUSH
42371: CALL_OW 248
42375: ST_TO_ADDR
// side := GetSide ( tower ) ;
42376: LD_ADDR_VAR 0 16
42380: PUSH
42381: LD_VAR 0 1
42385: PPUSH
42386: CALL_OW 255
42390: ST_TO_ADDR
// x := GetX ( tower ) ;
42391: LD_ADDR_VAR 0 10
42395: PUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: CALL_OW 250
42405: ST_TO_ADDR
// y := GetY ( tower ) ;
42406: LD_ADDR_VAR 0 11
42410: PUSH
42411: LD_VAR 0 1
42415: PPUSH
42416: CALL_OW 251
42420: ST_TO_ADDR
// if not x or not y then
42421: LD_VAR 0 10
42425: NOT
42426: PUSH
42427: LD_VAR 0 11
42431: NOT
42432: OR
42433: IFFALSE 42437
// exit ;
42435: GO 43470
// weapon := 0 ;
42437: LD_ADDR_VAR 0 18
42441: PUSH
42442: LD_INT 0
42444: ST_TO_ADDR
// fac_list := [ ] ;
42445: LD_ADDR_VAR 0 17
42449: PUSH
42450: EMPTY
42451: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42452: LD_ADDR_VAR 0 6
42456: PUSH
42457: LD_VAR 0 1
42461: PPUSH
42462: CALL_OW 274
42466: PPUSH
42467: LD_VAR 0 2
42471: PPUSH
42472: LD_INT 0
42474: PPUSH
42475: CALL 40041 0 3
42479: PPUSH
42480: LD_INT 30
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PPUSH
42490: CALL_OW 72
42494: ST_TO_ADDR
// if not factories then
42495: LD_VAR 0 6
42499: NOT
42500: IFFALSE 42504
// exit ;
42502: GO 43470
// for i in factories do
42504: LD_ADDR_VAR 0 8
42508: PUSH
42509: LD_VAR 0 6
42513: PUSH
42514: FOR_IN
42515: IFFALSE 42540
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42517: LD_ADDR_VAR 0 17
42521: PUSH
42522: LD_VAR 0 17
42526: PUSH
42527: LD_VAR 0 8
42531: PPUSH
42532: CALL_OW 478
42536: UNION
42537: ST_TO_ADDR
42538: GO 42514
42540: POP
42541: POP
// if not fac_list then
42542: LD_VAR 0 17
42546: NOT
42547: IFFALSE 42551
// exit ;
42549: GO 43470
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42551: LD_ADDR_VAR 0 5
42555: PUSH
42556: LD_INT 4
42558: PUSH
42559: LD_INT 5
42561: PUSH
42562: LD_INT 9
42564: PUSH
42565: LD_INT 10
42567: PUSH
42568: LD_INT 6
42570: PUSH
42571: LD_INT 7
42573: PUSH
42574: LD_INT 11
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 27
42588: PUSH
42589: LD_INT 28
42591: PUSH
42592: LD_INT 26
42594: PUSH
42595: LD_INT 30
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 43
42606: PUSH
42607: LD_INT 44
42609: PUSH
42610: LD_INT 46
42612: PUSH
42613: LD_INT 45
42615: PUSH
42616: LD_INT 47
42618: PUSH
42619: LD_INT 49
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: PUSH
42635: LD_VAR 0 12
42639: ARRAY
42640: ST_TO_ADDR
// list := list isect fac_list ;
42641: LD_ADDR_VAR 0 5
42645: PUSH
42646: LD_VAR 0 5
42650: PUSH
42651: LD_VAR 0 17
42655: ISECT
42656: ST_TO_ADDR
// if not list then
42657: LD_VAR 0 5
42661: NOT
42662: IFFALSE 42666
// exit ;
42664: GO 43470
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42666: LD_VAR 0 12
42670: PUSH
42671: LD_INT 3
42673: EQUAL
42674: PUSH
42675: LD_INT 49
42677: PUSH
42678: LD_VAR 0 5
42682: IN
42683: AND
42684: PUSH
42685: LD_INT 31
42687: PPUSH
42688: LD_VAR 0 16
42692: PPUSH
42693: CALL_OW 321
42697: PUSH
42698: LD_INT 2
42700: EQUAL
42701: AND
42702: IFFALSE 42762
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42704: LD_INT 22
42706: PUSH
42707: LD_VAR 0 16
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 35
42718: PUSH
42719: LD_INT 49
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 91
42728: PUSH
42729: LD_VAR 0 1
42733: PUSH
42734: LD_INT 10
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: PPUSH
42747: CALL_OW 69
42751: NOT
42752: IFFALSE 42762
// weapon := ru_time_lapser ;
42754: LD_ADDR_VAR 0 18
42758: PUSH
42759: LD_INT 49
42761: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42762: LD_VAR 0 12
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: IN
42777: PUSH
42778: LD_INT 11
42780: PUSH
42781: LD_VAR 0 5
42785: IN
42786: PUSH
42787: LD_INT 30
42789: PUSH
42790: LD_VAR 0 5
42794: IN
42795: OR
42796: AND
42797: PUSH
42798: LD_INT 6
42800: PPUSH
42801: LD_VAR 0 16
42805: PPUSH
42806: CALL_OW 321
42810: PUSH
42811: LD_INT 2
42813: EQUAL
42814: AND
42815: IFFALSE 42980
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42817: LD_INT 22
42819: PUSH
42820: LD_VAR 0 16
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 35
42834: PUSH
42835: LD_INT 11
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 35
42844: PUSH
42845: LD_INT 30
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 91
42859: PUSH
42860: LD_VAR 0 1
42864: PUSH
42865: LD_INT 18
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: PPUSH
42878: CALL_OW 69
42882: NOT
42883: PUSH
42884: LD_INT 22
42886: PUSH
42887: LD_VAR 0 16
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 30
42901: PUSH
42902: LD_INT 32
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 30
42911: PUSH
42912: LD_INT 33
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 91
42926: PUSH
42927: LD_VAR 0 1
42931: PUSH
42932: LD_INT 12
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: PPUSH
42948: CALL_OW 69
42952: PUSH
42953: LD_INT 2
42955: GREATER
42956: AND
42957: IFFALSE 42980
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42959: LD_ADDR_VAR 0 18
42963: PUSH
42964: LD_INT 11
42966: PUSH
42967: LD_INT 30
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_VAR 0 12
42978: ARRAY
42979: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42980: LD_VAR 0 18
42984: NOT
42985: PUSH
42986: LD_INT 40
42988: PPUSH
42989: LD_VAR 0 16
42993: PPUSH
42994: CALL_OW 321
42998: PUSH
42999: LD_INT 2
43001: EQUAL
43002: AND
43003: PUSH
43004: LD_INT 7
43006: PUSH
43007: LD_VAR 0 5
43011: IN
43012: PUSH
43013: LD_INT 28
43015: PUSH
43016: LD_VAR 0 5
43020: IN
43021: OR
43022: PUSH
43023: LD_INT 45
43025: PUSH
43026: LD_VAR 0 5
43030: IN
43031: OR
43032: AND
43033: IFFALSE 43287
// begin hex := GetHexInfo ( x , y ) ;
43035: LD_ADDR_VAR 0 4
43039: PUSH
43040: LD_VAR 0 10
43044: PPUSH
43045: LD_VAR 0 11
43049: PPUSH
43050: CALL_OW 546
43054: ST_TO_ADDR
// if hex [ 1 ] then
43055: LD_VAR 0 4
43059: PUSH
43060: LD_INT 1
43062: ARRAY
43063: IFFALSE 43067
// exit ;
43065: GO 43470
// height := hex [ 2 ] ;
43067: LD_ADDR_VAR 0 15
43071: PUSH
43072: LD_VAR 0 4
43076: PUSH
43077: LD_INT 2
43079: ARRAY
43080: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43081: LD_ADDR_VAR 0 14
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 3
43094: PUSH
43095: LD_INT 5
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
// for i in tmp do
43104: LD_ADDR_VAR 0 8
43108: PUSH
43109: LD_VAR 0 14
43113: PUSH
43114: FOR_IN
43115: IFFALSE 43285
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43117: LD_ADDR_VAR 0 9
43121: PUSH
43122: LD_VAR 0 10
43126: PPUSH
43127: LD_VAR 0 8
43131: PPUSH
43132: LD_INT 5
43134: PPUSH
43135: CALL_OW 272
43139: PUSH
43140: LD_VAR 0 11
43144: PPUSH
43145: LD_VAR 0 8
43149: PPUSH
43150: LD_INT 5
43152: PPUSH
43153: CALL_OW 273
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43162: LD_VAR 0 9
43166: PUSH
43167: LD_INT 1
43169: ARRAY
43170: PPUSH
43171: LD_VAR 0 9
43175: PUSH
43176: LD_INT 2
43178: ARRAY
43179: PPUSH
43180: CALL_OW 488
43184: IFFALSE 43283
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43186: LD_ADDR_VAR 0 4
43190: PUSH
43191: LD_VAR 0 9
43195: PUSH
43196: LD_INT 1
43198: ARRAY
43199: PPUSH
43200: LD_VAR 0 9
43204: PUSH
43205: LD_INT 2
43207: ARRAY
43208: PPUSH
43209: CALL_OW 546
43213: ST_TO_ADDR
// if hex [ 1 ] then
43214: LD_VAR 0 4
43218: PUSH
43219: LD_INT 1
43221: ARRAY
43222: IFFALSE 43226
// continue ;
43224: GO 43114
// h := hex [ 2 ] ;
43226: LD_ADDR_VAR 0 13
43230: PUSH
43231: LD_VAR 0 4
43235: PUSH
43236: LD_INT 2
43238: ARRAY
43239: ST_TO_ADDR
// if h + 7 < height then
43240: LD_VAR 0 13
43244: PUSH
43245: LD_INT 7
43247: PLUS
43248: PUSH
43249: LD_VAR 0 15
43253: LESS
43254: IFFALSE 43283
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43256: LD_ADDR_VAR 0 18
43260: PUSH
43261: LD_INT 7
43263: PUSH
43264: LD_INT 28
43266: PUSH
43267: LD_INT 45
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: PUSH
43275: LD_VAR 0 12
43279: ARRAY
43280: ST_TO_ADDR
// break ;
43281: GO 43285
// end ; end ; end ;
43283: GO 43114
43285: POP
43286: POP
// end ; if not weapon then
43287: LD_VAR 0 18
43291: NOT
43292: IFFALSE 43352
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43294: LD_ADDR_VAR 0 5
43298: PUSH
43299: LD_VAR 0 5
43303: PUSH
43304: LD_INT 11
43306: PUSH
43307: LD_INT 30
43309: PUSH
43310: LD_INT 49
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: DIFF
43318: ST_TO_ADDR
// if not list then
43319: LD_VAR 0 5
43323: NOT
43324: IFFALSE 43328
// exit ;
43326: GO 43470
// weapon := list [ rand ( 1 , list ) ] ;
43328: LD_ADDR_VAR 0 18
43332: PUSH
43333: LD_VAR 0 5
43337: PUSH
43338: LD_INT 1
43340: PPUSH
43341: LD_VAR 0 5
43345: PPUSH
43346: CALL_OW 12
43350: ARRAY
43351: ST_TO_ADDR
// end ; if weapon then
43352: LD_VAR 0 18
43356: IFFALSE 43470
// begin tmp := CostOfWeapon ( weapon ) ;
43358: LD_ADDR_VAR 0 14
43362: PUSH
43363: LD_VAR 0 18
43367: PPUSH
43368: CALL_OW 451
43372: ST_TO_ADDR
// j := GetBase ( tower ) ;
43373: LD_ADDR_VAR 0 9
43377: PUSH
43378: LD_VAR 0 1
43382: PPUSH
43383: CALL_OW 274
43387: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43388: LD_VAR 0 9
43392: PPUSH
43393: LD_INT 1
43395: PPUSH
43396: CALL_OW 275
43400: PUSH
43401: LD_VAR 0 14
43405: PUSH
43406: LD_INT 1
43408: ARRAY
43409: GREATEREQUAL
43410: PUSH
43411: LD_VAR 0 9
43415: PPUSH
43416: LD_INT 2
43418: PPUSH
43419: CALL_OW 275
43423: PUSH
43424: LD_VAR 0 14
43428: PUSH
43429: LD_INT 2
43431: ARRAY
43432: GREATEREQUAL
43433: AND
43434: PUSH
43435: LD_VAR 0 9
43439: PPUSH
43440: LD_INT 3
43442: PPUSH
43443: CALL_OW 275
43447: PUSH
43448: LD_VAR 0 14
43452: PUSH
43453: LD_INT 3
43455: ARRAY
43456: GREATEREQUAL
43457: AND
43458: IFFALSE 43470
// result := weapon ;
43460: LD_ADDR_VAR 0 3
43464: PUSH
43465: LD_VAR 0 18
43469: ST_TO_ADDR
// end ; end ;
43470: LD_VAR 0 3
43474: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43475: LD_INT 0
43477: PPUSH
43478: PPUSH
// result := true ;
43479: LD_ADDR_VAR 0 3
43483: PUSH
43484: LD_INT 1
43486: ST_TO_ADDR
// if array1 = array2 then
43487: LD_VAR 0 1
43491: PUSH
43492: LD_VAR 0 2
43496: EQUAL
43497: IFFALSE 43557
// begin for i = 1 to array1 do
43499: LD_ADDR_VAR 0 4
43503: PUSH
43504: DOUBLE
43505: LD_INT 1
43507: DEC
43508: ST_TO_ADDR
43509: LD_VAR 0 1
43513: PUSH
43514: FOR_TO
43515: IFFALSE 43553
// if array1 [ i ] <> array2 [ i ] then
43517: LD_VAR 0 1
43521: PUSH
43522: LD_VAR 0 4
43526: ARRAY
43527: PUSH
43528: LD_VAR 0 2
43532: PUSH
43533: LD_VAR 0 4
43537: ARRAY
43538: NONEQUAL
43539: IFFALSE 43551
// begin result := false ;
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 0
43548: ST_TO_ADDR
// break ;
43549: GO 43553
// end ;
43551: GO 43514
43553: POP
43554: POP
// end else
43555: GO 43565
// result := false ;
43557: LD_ADDR_VAR 0 3
43561: PUSH
43562: LD_INT 0
43564: ST_TO_ADDR
// end ;
43565: LD_VAR 0 3
43569: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43570: LD_INT 0
43572: PPUSH
43573: PPUSH
// if not array1 or not array2 then
43574: LD_VAR 0 1
43578: NOT
43579: PUSH
43580: LD_VAR 0 2
43584: NOT
43585: OR
43586: IFFALSE 43590
// exit ;
43588: GO 43654
// result := true ;
43590: LD_ADDR_VAR 0 3
43594: PUSH
43595: LD_INT 1
43597: ST_TO_ADDR
// for i = 1 to array1 do
43598: LD_ADDR_VAR 0 4
43602: PUSH
43603: DOUBLE
43604: LD_INT 1
43606: DEC
43607: ST_TO_ADDR
43608: LD_VAR 0 1
43612: PUSH
43613: FOR_TO
43614: IFFALSE 43652
// if array1 [ i ] <> array2 [ i ] then
43616: LD_VAR 0 1
43620: PUSH
43621: LD_VAR 0 4
43625: ARRAY
43626: PUSH
43627: LD_VAR 0 2
43631: PUSH
43632: LD_VAR 0 4
43636: ARRAY
43637: NONEQUAL
43638: IFFALSE 43650
// begin result := false ;
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_INT 0
43647: ST_TO_ADDR
// break ;
43648: GO 43652
// end ;
43650: GO 43613
43652: POP
43653: POP
// end ;
43654: LD_VAR 0 3
43658: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43659: LD_INT 0
43661: PPUSH
43662: PPUSH
43663: PPUSH
// pom := GetBase ( fac ) ;
43664: LD_ADDR_VAR 0 5
43668: PUSH
43669: LD_VAR 0 1
43673: PPUSH
43674: CALL_OW 274
43678: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43679: LD_ADDR_VAR 0 4
43683: PUSH
43684: LD_VAR 0 2
43688: PUSH
43689: LD_INT 1
43691: ARRAY
43692: PPUSH
43693: LD_VAR 0 2
43697: PUSH
43698: LD_INT 2
43700: ARRAY
43701: PPUSH
43702: LD_VAR 0 2
43706: PUSH
43707: LD_INT 3
43709: ARRAY
43710: PPUSH
43711: LD_VAR 0 2
43715: PUSH
43716: LD_INT 4
43718: ARRAY
43719: PPUSH
43720: CALL_OW 449
43724: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43725: LD_ADDR_VAR 0 3
43729: PUSH
43730: LD_VAR 0 5
43734: PPUSH
43735: LD_INT 1
43737: PPUSH
43738: CALL_OW 275
43742: PUSH
43743: LD_VAR 0 4
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: GREATEREQUAL
43752: PUSH
43753: LD_VAR 0 5
43757: PPUSH
43758: LD_INT 2
43760: PPUSH
43761: CALL_OW 275
43765: PUSH
43766: LD_VAR 0 4
43770: PUSH
43771: LD_INT 2
43773: ARRAY
43774: GREATEREQUAL
43775: AND
43776: PUSH
43777: LD_VAR 0 5
43781: PPUSH
43782: LD_INT 3
43784: PPUSH
43785: CALL_OW 275
43789: PUSH
43790: LD_VAR 0 4
43794: PUSH
43795: LD_INT 3
43797: ARRAY
43798: GREATEREQUAL
43799: AND
43800: ST_TO_ADDR
// end ;
43801: LD_VAR 0 3
43805: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43806: LD_INT 0
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
// pom := GetBase ( building ) ;
43812: LD_ADDR_VAR 0 3
43816: PUSH
43817: LD_VAR 0 1
43821: PPUSH
43822: CALL_OW 274
43826: ST_TO_ADDR
// if not pom then
43827: LD_VAR 0 3
43831: NOT
43832: IFFALSE 43836
// exit ;
43834: GO 44006
// btype := GetBType ( building ) ;
43836: LD_ADDR_VAR 0 5
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 266
43850: ST_TO_ADDR
// if btype = b_armoury then
43851: LD_VAR 0 5
43855: PUSH
43856: LD_INT 4
43858: EQUAL
43859: IFFALSE 43869
// btype := b_barracks ;
43861: LD_ADDR_VAR 0 5
43865: PUSH
43866: LD_INT 5
43868: ST_TO_ADDR
// if btype = b_depot then
43869: LD_VAR 0 5
43873: PUSH
43874: LD_INT 0
43876: EQUAL
43877: IFFALSE 43887
// btype := b_warehouse ;
43879: LD_ADDR_VAR 0 5
43883: PUSH
43884: LD_INT 1
43886: ST_TO_ADDR
// if btype = b_workshop then
43887: LD_VAR 0 5
43891: PUSH
43892: LD_INT 2
43894: EQUAL
43895: IFFALSE 43905
// btype := b_factory ;
43897: LD_ADDR_VAR 0 5
43901: PUSH
43902: LD_INT 3
43904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43905: LD_ADDR_VAR 0 4
43909: PUSH
43910: LD_VAR 0 5
43914: PPUSH
43915: LD_VAR 0 1
43919: PPUSH
43920: CALL_OW 248
43924: PPUSH
43925: CALL_OW 450
43929: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43930: LD_ADDR_VAR 0 2
43934: PUSH
43935: LD_VAR 0 3
43939: PPUSH
43940: LD_INT 1
43942: PPUSH
43943: CALL_OW 275
43947: PUSH
43948: LD_VAR 0 4
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: GREATEREQUAL
43957: PUSH
43958: LD_VAR 0 3
43962: PPUSH
43963: LD_INT 2
43965: PPUSH
43966: CALL_OW 275
43970: PUSH
43971: LD_VAR 0 4
43975: PUSH
43976: LD_INT 2
43978: ARRAY
43979: GREATEREQUAL
43980: AND
43981: PUSH
43982: LD_VAR 0 3
43986: PPUSH
43987: LD_INT 3
43989: PPUSH
43990: CALL_OW 275
43994: PUSH
43995: LD_VAR 0 4
43999: PUSH
44000: LD_INT 3
44002: ARRAY
44003: GREATEREQUAL
44004: AND
44005: ST_TO_ADDR
// end ;
44006: LD_VAR 0 2
44010: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44011: LD_INT 0
44013: PPUSH
44014: PPUSH
44015: PPUSH
// pom := GetBase ( building ) ;
44016: LD_ADDR_VAR 0 4
44020: PUSH
44021: LD_VAR 0 1
44025: PPUSH
44026: CALL_OW 274
44030: ST_TO_ADDR
// if not pom then
44031: LD_VAR 0 4
44035: NOT
44036: IFFALSE 44040
// exit ;
44038: GO 44141
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44040: LD_ADDR_VAR 0 5
44044: PUSH
44045: LD_VAR 0 2
44049: PPUSH
44050: LD_VAR 0 1
44054: PPUSH
44055: CALL_OW 248
44059: PPUSH
44060: CALL_OW 450
44064: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44065: LD_ADDR_VAR 0 3
44069: PUSH
44070: LD_VAR 0 4
44074: PPUSH
44075: LD_INT 1
44077: PPUSH
44078: CALL_OW 275
44082: PUSH
44083: LD_VAR 0 5
44087: PUSH
44088: LD_INT 1
44090: ARRAY
44091: GREATEREQUAL
44092: PUSH
44093: LD_VAR 0 4
44097: PPUSH
44098: LD_INT 2
44100: PPUSH
44101: CALL_OW 275
44105: PUSH
44106: LD_VAR 0 5
44110: PUSH
44111: LD_INT 2
44113: ARRAY
44114: GREATEREQUAL
44115: AND
44116: PUSH
44117: LD_VAR 0 4
44121: PPUSH
44122: LD_INT 3
44124: PPUSH
44125: CALL_OW 275
44129: PUSH
44130: LD_VAR 0 5
44134: PUSH
44135: LD_INT 3
44137: ARRAY
44138: GREATEREQUAL
44139: AND
44140: ST_TO_ADDR
// end ;
44141: LD_VAR 0 3
44145: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44146: LD_INT 0
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
// result := false ;
44159: LD_ADDR_VAR 0 8
44163: PUSH
44164: LD_INT 0
44166: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44167: LD_VAR 0 5
44171: NOT
44172: PUSH
44173: LD_VAR 0 1
44177: NOT
44178: OR
44179: PUSH
44180: LD_VAR 0 2
44184: NOT
44185: OR
44186: PUSH
44187: LD_VAR 0 3
44191: NOT
44192: OR
44193: IFFALSE 44197
// exit ;
44195: GO 45011
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44197: LD_ADDR_VAR 0 14
44201: PUSH
44202: LD_VAR 0 1
44206: PPUSH
44207: LD_VAR 0 2
44211: PPUSH
44212: LD_VAR 0 3
44216: PPUSH
44217: LD_VAR 0 4
44221: PPUSH
44222: LD_VAR 0 5
44226: PUSH
44227: LD_INT 1
44229: ARRAY
44230: PPUSH
44231: CALL_OW 248
44235: PPUSH
44236: LD_INT 0
44238: PPUSH
44239: CALL 46248 0 6
44243: ST_TO_ADDR
// if not hexes then
44244: LD_VAR 0 14
44248: NOT
44249: IFFALSE 44253
// exit ;
44251: GO 45011
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44253: LD_ADDR_VAR 0 17
44257: PUSH
44258: LD_VAR 0 5
44262: PPUSH
44263: LD_INT 22
44265: PUSH
44266: LD_VAR 0 13
44270: PPUSH
44271: CALL_OW 255
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 30
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 30
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PPUSH
44312: CALL_OW 72
44316: ST_TO_ADDR
// for i = 1 to hexes do
44317: LD_ADDR_VAR 0 9
44321: PUSH
44322: DOUBLE
44323: LD_INT 1
44325: DEC
44326: ST_TO_ADDR
44327: LD_VAR 0 14
44331: PUSH
44332: FOR_TO
44333: IFFALSE 45009
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44335: LD_ADDR_VAR 0 13
44339: PUSH
44340: LD_VAR 0 14
44344: PUSH
44345: LD_VAR 0 9
44349: ARRAY
44350: PUSH
44351: LD_INT 1
44353: ARRAY
44354: PPUSH
44355: LD_VAR 0 14
44359: PUSH
44360: LD_VAR 0 9
44364: ARRAY
44365: PUSH
44366: LD_INT 2
44368: ARRAY
44369: PPUSH
44370: CALL_OW 428
44374: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44375: LD_VAR 0 14
44379: PUSH
44380: LD_VAR 0 9
44384: ARRAY
44385: PUSH
44386: LD_INT 1
44388: ARRAY
44389: PPUSH
44390: LD_VAR 0 14
44394: PUSH
44395: LD_VAR 0 9
44399: ARRAY
44400: PUSH
44401: LD_INT 2
44403: ARRAY
44404: PPUSH
44405: CALL_OW 351
44409: PUSH
44410: LD_VAR 0 14
44414: PUSH
44415: LD_VAR 0 9
44419: ARRAY
44420: PUSH
44421: LD_INT 1
44423: ARRAY
44424: PPUSH
44425: LD_VAR 0 14
44429: PUSH
44430: LD_VAR 0 9
44434: ARRAY
44435: PUSH
44436: LD_INT 2
44438: ARRAY
44439: PPUSH
44440: CALL_OW 488
44444: NOT
44445: OR
44446: PUSH
44447: LD_VAR 0 13
44451: PPUSH
44452: CALL_OW 247
44456: PUSH
44457: LD_INT 3
44459: EQUAL
44460: OR
44461: IFFALSE 44467
// exit ;
44463: POP
44464: POP
44465: GO 45011
// if not tmp then
44467: LD_VAR 0 13
44471: NOT
44472: IFFALSE 44476
// continue ;
44474: GO 44332
// result := true ;
44476: LD_ADDR_VAR 0 8
44480: PUSH
44481: LD_INT 1
44483: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44484: LD_VAR 0 6
44488: PUSH
44489: LD_VAR 0 13
44493: PPUSH
44494: CALL_OW 247
44498: PUSH
44499: LD_INT 2
44501: EQUAL
44502: AND
44503: PUSH
44504: LD_VAR 0 13
44508: PPUSH
44509: CALL_OW 263
44513: PUSH
44514: LD_INT 1
44516: EQUAL
44517: AND
44518: IFFALSE 44682
// begin if IsDrivenBy ( tmp ) then
44520: LD_VAR 0 13
44524: PPUSH
44525: CALL_OW 311
44529: IFFALSE 44533
// continue ;
44531: GO 44332
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44533: LD_VAR 0 6
44537: PPUSH
44538: LD_INT 3
44540: PUSH
44541: LD_INT 60
44543: PUSH
44544: EMPTY
44545: LIST
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: LD_INT 55
44556: PUSH
44557: EMPTY
44558: LIST
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PPUSH
44568: CALL_OW 72
44572: IFFALSE 44680
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44574: LD_ADDR_VAR 0 18
44578: PUSH
44579: LD_VAR 0 6
44583: PPUSH
44584: LD_INT 3
44586: PUSH
44587: LD_INT 60
44589: PUSH
44590: EMPTY
44591: LIST
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: LD_INT 55
44602: PUSH
44603: EMPTY
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PPUSH
44614: CALL_OW 72
44618: PUSH
44619: LD_INT 1
44621: ARRAY
44622: ST_TO_ADDR
// if IsInUnit ( driver ) then
44623: LD_VAR 0 18
44627: PPUSH
44628: CALL_OW 310
44632: IFFALSE 44643
// ComExit ( driver ) ;
44634: LD_VAR 0 18
44638: PPUSH
44639: CALL 69432 0 1
// AddComEnterUnit ( driver , tmp ) ;
44643: LD_VAR 0 18
44647: PPUSH
44648: LD_VAR 0 13
44652: PPUSH
44653: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44657: LD_VAR 0 18
44661: PPUSH
44662: LD_VAR 0 7
44666: PPUSH
44667: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44671: LD_VAR 0 18
44675: PPUSH
44676: CALL_OW 181
// end ; continue ;
44680: GO 44332
// end ; if not cleaners or not tmp in cleaners then
44682: LD_VAR 0 6
44686: NOT
44687: PUSH
44688: LD_VAR 0 13
44692: PUSH
44693: LD_VAR 0 6
44697: IN
44698: NOT
44699: OR
44700: IFFALSE 45007
// begin if dep then
44702: LD_VAR 0 17
44706: IFFALSE 44842
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44708: LD_ADDR_VAR 0 16
44712: PUSH
44713: LD_VAR 0 17
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: PPUSH
44722: CALL_OW 250
44726: PPUSH
44727: LD_VAR 0 17
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PPUSH
44736: CALL_OW 254
44740: PPUSH
44741: LD_INT 5
44743: PPUSH
44744: CALL_OW 272
44748: PUSH
44749: LD_VAR 0 17
44753: PUSH
44754: LD_INT 1
44756: ARRAY
44757: PPUSH
44758: CALL_OW 251
44762: PPUSH
44763: LD_VAR 0 17
44767: PUSH
44768: LD_INT 1
44770: ARRAY
44771: PPUSH
44772: CALL_OW 254
44776: PPUSH
44777: LD_INT 5
44779: PPUSH
44780: CALL_OW 273
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44789: LD_VAR 0 16
44793: PUSH
44794: LD_INT 1
44796: ARRAY
44797: PPUSH
44798: LD_VAR 0 16
44802: PUSH
44803: LD_INT 2
44805: ARRAY
44806: PPUSH
44807: CALL_OW 488
44811: IFFALSE 44842
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44813: LD_VAR 0 13
44817: PPUSH
44818: LD_VAR 0 16
44822: PUSH
44823: LD_INT 1
44825: ARRAY
44826: PPUSH
44827: LD_VAR 0 16
44831: PUSH
44832: LD_INT 2
44834: ARRAY
44835: PPUSH
44836: CALL_OW 111
// continue ;
44840: GO 44332
// end ; end ; r := GetDir ( tmp ) ;
44842: LD_ADDR_VAR 0 15
44846: PUSH
44847: LD_VAR 0 13
44851: PPUSH
44852: CALL_OW 254
44856: ST_TO_ADDR
// if r = 5 then
44857: LD_VAR 0 15
44861: PUSH
44862: LD_INT 5
44864: EQUAL
44865: IFFALSE 44875
// r := 0 ;
44867: LD_ADDR_VAR 0 15
44871: PUSH
44872: LD_INT 0
44874: ST_TO_ADDR
// for j = r to 5 do
44875: LD_ADDR_VAR 0 10
44879: PUSH
44880: DOUBLE
44881: LD_VAR 0 15
44885: DEC
44886: ST_TO_ADDR
44887: LD_INT 5
44889: PUSH
44890: FOR_TO
44891: IFFALSE 45005
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44893: LD_ADDR_VAR 0 11
44897: PUSH
44898: LD_VAR 0 13
44902: PPUSH
44903: CALL_OW 250
44907: PPUSH
44908: LD_VAR 0 10
44912: PPUSH
44913: LD_INT 2
44915: PPUSH
44916: CALL_OW 272
44920: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44921: LD_ADDR_VAR 0 12
44925: PUSH
44926: LD_VAR 0 13
44930: PPUSH
44931: CALL_OW 251
44935: PPUSH
44936: LD_VAR 0 10
44940: PPUSH
44941: LD_INT 2
44943: PPUSH
44944: CALL_OW 273
44948: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44949: LD_VAR 0 11
44953: PPUSH
44954: LD_VAR 0 12
44958: PPUSH
44959: CALL_OW 488
44963: PUSH
44964: LD_VAR 0 11
44968: PPUSH
44969: LD_VAR 0 12
44973: PPUSH
44974: CALL_OW 428
44978: NOT
44979: AND
44980: IFFALSE 45003
// begin ComMoveXY ( tmp , _x , _y ) ;
44982: LD_VAR 0 13
44986: PPUSH
44987: LD_VAR 0 11
44991: PPUSH
44992: LD_VAR 0 12
44996: PPUSH
44997: CALL_OW 111
// break ;
45001: GO 45005
// end ; end ;
45003: GO 44890
45005: POP
45006: POP
// end ; end ;
45007: GO 44332
45009: POP
45010: POP
// end ;
45011: LD_VAR 0 8
45015: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45016: LD_INT 0
45018: PPUSH
// result := true ;
45019: LD_ADDR_VAR 0 3
45023: PUSH
45024: LD_INT 1
45026: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45027: LD_VAR 0 2
45031: PUSH
45032: LD_INT 24
45034: DOUBLE
45035: EQUAL
45036: IFTRUE 45046
45038: LD_INT 33
45040: DOUBLE
45041: EQUAL
45042: IFTRUE 45046
45044: GO 45071
45046: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45047: LD_ADDR_VAR 0 3
45051: PUSH
45052: LD_INT 32
45054: PPUSH
45055: LD_VAR 0 1
45059: PPUSH
45060: CALL_OW 321
45064: PUSH
45065: LD_INT 2
45067: EQUAL
45068: ST_TO_ADDR
45069: GO 45391
45071: LD_INT 20
45073: DOUBLE
45074: EQUAL
45075: IFTRUE 45079
45077: GO 45104
45079: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45080: LD_ADDR_VAR 0 3
45084: PUSH
45085: LD_INT 6
45087: PPUSH
45088: LD_VAR 0 1
45092: PPUSH
45093: CALL_OW 321
45097: PUSH
45098: LD_INT 2
45100: EQUAL
45101: ST_TO_ADDR
45102: GO 45391
45104: LD_INT 22
45106: DOUBLE
45107: EQUAL
45108: IFTRUE 45118
45110: LD_INT 36
45112: DOUBLE
45113: EQUAL
45114: IFTRUE 45118
45116: GO 45143
45118: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45119: LD_ADDR_VAR 0 3
45123: PUSH
45124: LD_INT 15
45126: PPUSH
45127: LD_VAR 0 1
45131: PPUSH
45132: CALL_OW 321
45136: PUSH
45137: LD_INT 2
45139: EQUAL
45140: ST_TO_ADDR
45141: GO 45391
45143: LD_INT 30
45145: DOUBLE
45146: EQUAL
45147: IFTRUE 45151
45149: GO 45176
45151: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45152: LD_ADDR_VAR 0 3
45156: PUSH
45157: LD_INT 20
45159: PPUSH
45160: LD_VAR 0 1
45164: PPUSH
45165: CALL_OW 321
45169: PUSH
45170: LD_INT 2
45172: EQUAL
45173: ST_TO_ADDR
45174: GO 45391
45176: LD_INT 28
45178: DOUBLE
45179: EQUAL
45180: IFTRUE 45190
45182: LD_INT 21
45184: DOUBLE
45185: EQUAL
45186: IFTRUE 45190
45188: GO 45215
45190: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45191: LD_ADDR_VAR 0 3
45195: PUSH
45196: LD_INT 21
45198: PPUSH
45199: LD_VAR 0 1
45203: PPUSH
45204: CALL_OW 321
45208: PUSH
45209: LD_INT 2
45211: EQUAL
45212: ST_TO_ADDR
45213: GO 45391
45215: LD_INT 16
45217: DOUBLE
45218: EQUAL
45219: IFTRUE 45223
45221: GO 45250
45223: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45224: LD_ADDR_VAR 0 3
45228: PUSH
45229: LD_EXP 56
45233: PPUSH
45234: LD_VAR 0 1
45238: PPUSH
45239: CALL_OW 321
45243: PUSH
45244: LD_INT 2
45246: EQUAL
45247: ST_TO_ADDR
45248: GO 45391
45250: LD_INT 19
45252: DOUBLE
45253: EQUAL
45254: IFTRUE 45264
45256: LD_INT 23
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45264
45262: GO 45291
45264: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45265: LD_ADDR_VAR 0 3
45269: PUSH
45270: LD_EXP 55
45274: PPUSH
45275: LD_VAR 0 1
45279: PPUSH
45280: CALL_OW 321
45284: PUSH
45285: LD_INT 2
45287: EQUAL
45288: ST_TO_ADDR
45289: GO 45391
45291: LD_INT 17
45293: DOUBLE
45294: EQUAL
45295: IFTRUE 45299
45297: GO 45324
45299: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45300: LD_ADDR_VAR 0 3
45304: PUSH
45305: LD_INT 39
45307: PPUSH
45308: LD_VAR 0 1
45312: PPUSH
45313: CALL_OW 321
45317: PUSH
45318: LD_INT 2
45320: EQUAL
45321: ST_TO_ADDR
45322: GO 45391
45324: LD_INT 18
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 45357
45332: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45333: LD_ADDR_VAR 0 3
45337: PUSH
45338: LD_INT 40
45340: PPUSH
45341: LD_VAR 0 1
45345: PPUSH
45346: CALL_OW 321
45350: PUSH
45351: LD_INT 2
45353: EQUAL
45354: ST_TO_ADDR
45355: GO 45391
45357: LD_INT 27
45359: DOUBLE
45360: EQUAL
45361: IFTRUE 45365
45363: GO 45390
45365: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45366: LD_ADDR_VAR 0 3
45370: PUSH
45371: LD_INT 35
45373: PPUSH
45374: LD_VAR 0 1
45378: PPUSH
45379: CALL_OW 321
45383: PUSH
45384: LD_INT 2
45386: EQUAL
45387: ST_TO_ADDR
45388: GO 45391
45390: POP
// end ;
45391: LD_VAR 0 3
45395: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45396: LD_INT 0
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
// result := false ;
45409: LD_ADDR_VAR 0 6
45413: PUSH
45414: LD_INT 0
45416: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45417: LD_VAR 0 1
45421: NOT
45422: PUSH
45423: LD_VAR 0 1
45427: PPUSH
45428: CALL_OW 266
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: IN
45443: NOT
45444: OR
45445: PUSH
45446: LD_VAR 0 2
45450: NOT
45451: OR
45452: PUSH
45453: LD_VAR 0 5
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: LD_INT 5
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: IN
45484: NOT
45485: OR
45486: PUSH
45487: LD_VAR 0 3
45491: PPUSH
45492: LD_VAR 0 4
45496: PPUSH
45497: CALL_OW 488
45501: NOT
45502: OR
45503: IFFALSE 45507
// exit ;
45505: GO 46243
// side := GetSide ( depot ) ;
45507: LD_ADDR_VAR 0 9
45511: PUSH
45512: LD_VAR 0 1
45516: PPUSH
45517: CALL_OW 255
45521: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45522: LD_VAR 0 9
45526: PPUSH
45527: LD_VAR 0 2
45531: PPUSH
45532: CALL 45016 0 2
45536: NOT
45537: IFFALSE 45541
// exit ;
45539: GO 46243
// pom := GetBase ( depot ) ;
45541: LD_ADDR_VAR 0 10
45545: PUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL_OW 274
45555: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45556: LD_ADDR_VAR 0 11
45560: PUSH
45561: LD_VAR 0 2
45565: PPUSH
45566: LD_VAR 0 1
45570: PPUSH
45571: CALL_OW 248
45575: PPUSH
45576: CALL_OW 450
45580: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45581: LD_VAR 0 10
45585: PPUSH
45586: LD_INT 1
45588: PPUSH
45589: CALL_OW 275
45593: PUSH
45594: LD_VAR 0 11
45598: PUSH
45599: LD_INT 1
45601: ARRAY
45602: GREATEREQUAL
45603: PUSH
45604: LD_VAR 0 10
45608: PPUSH
45609: LD_INT 2
45611: PPUSH
45612: CALL_OW 275
45616: PUSH
45617: LD_VAR 0 11
45621: PUSH
45622: LD_INT 2
45624: ARRAY
45625: GREATEREQUAL
45626: AND
45627: PUSH
45628: LD_VAR 0 10
45632: PPUSH
45633: LD_INT 3
45635: PPUSH
45636: CALL_OW 275
45640: PUSH
45641: LD_VAR 0 11
45645: PUSH
45646: LD_INT 3
45648: ARRAY
45649: GREATEREQUAL
45650: AND
45651: NOT
45652: IFFALSE 45656
// exit ;
45654: GO 46243
// if GetBType ( depot ) = b_depot then
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 266
45665: PUSH
45666: LD_INT 0
45668: EQUAL
45669: IFFALSE 45681
// dist := 28 else
45671: LD_ADDR_VAR 0 14
45675: PUSH
45676: LD_INT 28
45678: ST_TO_ADDR
45679: GO 45689
// dist := 36 ;
45681: LD_ADDR_VAR 0 14
45685: PUSH
45686: LD_INT 36
45688: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45689: LD_VAR 0 1
45693: PPUSH
45694: LD_VAR 0 3
45698: PPUSH
45699: LD_VAR 0 4
45703: PPUSH
45704: CALL_OW 297
45708: PUSH
45709: LD_VAR 0 14
45713: GREATER
45714: IFFALSE 45718
// exit ;
45716: GO 46243
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45718: LD_ADDR_VAR 0 12
45722: PUSH
45723: LD_VAR 0 2
45727: PPUSH
45728: LD_VAR 0 3
45732: PPUSH
45733: LD_VAR 0 4
45737: PPUSH
45738: LD_VAR 0 5
45742: PPUSH
45743: LD_VAR 0 1
45747: PPUSH
45748: CALL_OW 248
45752: PPUSH
45753: LD_INT 0
45755: PPUSH
45756: CALL 46248 0 6
45760: ST_TO_ADDR
// if not hexes then
45761: LD_VAR 0 12
45765: NOT
45766: IFFALSE 45770
// exit ;
45768: GO 46243
// hex := GetHexInfo ( x , y ) ;
45770: LD_ADDR_VAR 0 15
45774: PUSH
45775: LD_VAR 0 3
45779: PPUSH
45780: LD_VAR 0 4
45784: PPUSH
45785: CALL_OW 546
45789: ST_TO_ADDR
// if hex [ 1 ] then
45790: LD_VAR 0 15
45794: PUSH
45795: LD_INT 1
45797: ARRAY
45798: IFFALSE 45802
// exit ;
45800: GO 46243
// height := hex [ 2 ] ;
45802: LD_ADDR_VAR 0 13
45806: PUSH
45807: LD_VAR 0 15
45811: PUSH
45812: LD_INT 2
45814: ARRAY
45815: ST_TO_ADDR
// for i = 1 to hexes do
45816: LD_ADDR_VAR 0 7
45820: PUSH
45821: DOUBLE
45822: LD_INT 1
45824: DEC
45825: ST_TO_ADDR
45826: LD_VAR 0 12
45830: PUSH
45831: FOR_TO
45832: IFFALSE 46162
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45834: LD_VAR 0 12
45838: PUSH
45839: LD_VAR 0 7
45843: ARRAY
45844: PUSH
45845: LD_INT 1
45847: ARRAY
45848: PPUSH
45849: LD_VAR 0 12
45853: PUSH
45854: LD_VAR 0 7
45858: ARRAY
45859: PUSH
45860: LD_INT 2
45862: ARRAY
45863: PPUSH
45864: CALL_OW 488
45868: NOT
45869: PUSH
45870: LD_VAR 0 12
45874: PUSH
45875: LD_VAR 0 7
45879: ARRAY
45880: PUSH
45881: LD_INT 1
45883: ARRAY
45884: PPUSH
45885: LD_VAR 0 12
45889: PUSH
45890: LD_VAR 0 7
45894: ARRAY
45895: PUSH
45896: LD_INT 2
45898: ARRAY
45899: PPUSH
45900: CALL_OW 428
45904: PUSH
45905: LD_INT 0
45907: GREATER
45908: OR
45909: PUSH
45910: LD_VAR 0 12
45914: PUSH
45915: LD_VAR 0 7
45919: ARRAY
45920: PUSH
45921: LD_INT 1
45923: ARRAY
45924: PPUSH
45925: LD_VAR 0 12
45929: PUSH
45930: LD_VAR 0 7
45934: ARRAY
45935: PUSH
45936: LD_INT 2
45938: ARRAY
45939: PPUSH
45940: CALL_OW 351
45944: OR
45945: IFFALSE 45951
// exit ;
45947: POP
45948: POP
45949: GO 46243
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45951: LD_ADDR_VAR 0 8
45955: PUSH
45956: LD_VAR 0 12
45960: PUSH
45961: LD_VAR 0 7
45965: ARRAY
45966: PUSH
45967: LD_INT 1
45969: ARRAY
45970: PPUSH
45971: LD_VAR 0 12
45975: PUSH
45976: LD_VAR 0 7
45980: ARRAY
45981: PUSH
45982: LD_INT 2
45984: ARRAY
45985: PPUSH
45986: CALL_OW 546
45990: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45991: LD_VAR 0 8
45995: PUSH
45996: LD_INT 1
45998: ARRAY
45999: PUSH
46000: LD_VAR 0 8
46004: PUSH
46005: LD_INT 2
46007: ARRAY
46008: PUSH
46009: LD_VAR 0 13
46013: PUSH
46014: LD_INT 2
46016: PLUS
46017: GREATER
46018: OR
46019: PUSH
46020: LD_VAR 0 8
46024: PUSH
46025: LD_INT 2
46027: ARRAY
46028: PUSH
46029: LD_VAR 0 13
46033: PUSH
46034: LD_INT 2
46036: MINUS
46037: LESS
46038: OR
46039: PUSH
46040: LD_VAR 0 8
46044: PUSH
46045: LD_INT 3
46047: ARRAY
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 8
46054: PUSH
46055: LD_INT 9
46057: PUSH
46058: LD_INT 10
46060: PUSH
46061: LD_INT 11
46063: PUSH
46064: LD_INT 12
46066: PUSH
46067: LD_INT 13
46069: PUSH
46070: LD_INT 16
46072: PUSH
46073: LD_INT 17
46075: PUSH
46076: LD_INT 18
46078: PUSH
46079: LD_INT 19
46081: PUSH
46082: LD_INT 20
46084: PUSH
46085: LD_INT 21
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: IN
46103: NOT
46104: OR
46105: PUSH
46106: LD_VAR 0 8
46110: PUSH
46111: LD_INT 5
46113: ARRAY
46114: NOT
46115: OR
46116: PUSH
46117: LD_VAR 0 8
46121: PUSH
46122: LD_INT 6
46124: ARRAY
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 7
46134: PUSH
46135: LD_INT 9
46137: PUSH
46138: LD_INT 10
46140: PUSH
46141: LD_INT 11
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: IN
46152: NOT
46153: OR
46154: IFFALSE 46160
// exit ;
46156: POP
46157: POP
46158: GO 46243
// end ;
46160: GO 45831
46162: POP
46163: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46164: LD_VAR 0 9
46168: PPUSH
46169: LD_VAR 0 3
46173: PPUSH
46174: LD_VAR 0 4
46178: PPUSH
46179: LD_INT 20
46181: PPUSH
46182: CALL 38189 0 4
46186: PUSH
46187: LD_INT 4
46189: ARRAY
46190: IFFALSE 46194
// exit ;
46192: GO 46243
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46194: LD_VAR 0 2
46198: PUSH
46199: LD_INT 29
46201: PUSH
46202: LD_INT 30
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: IN
46209: PUSH
46210: LD_VAR 0 3
46214: PPUSH
46215: LD_VAR 0 4
46219: PPUSH
46220: LD_VAR 0 9
46224: PPUSH
46225: CALL_OW 440
46229: NOT
46230: AND
46231: IFFALSE 46235
// exit ;
46233: GO 46243
// result := true ;
46235: LD_ADDR_VAR 0 6
46239: PUSH
46240: LD_INT 1
46242: ST_TO_ADDR
// end ;
46243: LD_VAR 0 6
46247: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46248: LD_INT 0
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
// result = [ ] ;
46308: LD_ADDR_VAR 0 7
46312: PUSH
46313: EMPTY
46314: ST_TO_ADDR
// temp_list = [ ] ;
46315: LD_ADDR_VAR 0 9
46319: PUSH
46320: EMPTY
46321: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46322: LD_VAR 0 4
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: LD_INT 4
46341: PUSH
46342: LD_INT 5
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: IN
46353: NOT
46354: PUSH
46355: LD_VAR 0 1
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: IN
46370: PUSH
46371: LD_VAR 0 5
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: IN
46390: NOT
46391: AND
46392: OR
46393: IFFALSE 46397
// exit ;
46395: GO 64788
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46397: LD_VAR 0 1
46401: PUSH
46402: LD_INT 6
46404: PUSH
46405: LD_INT 7
46407: PUSH
46408: LD_INT 8
46410: PUSH
46411: LD_INT 13
46413: PUSH
46414: LD_INT 12
46416: PUSH
46417: LD_INT 15
46419: PUSH
46420: LD_INT 11
46422: PUSH
46423: LD_INT 14
46425: PUSH
46426: LD_INT 10
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: IN
46440: IFFALSE 46450
// btype = b_lab ;
46442: LD_ADDR_VAR 0 1
46446: PUSH
46447: LD_INT 6
46449: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46450: LD_VAR 0 6
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: IN
46469: NOT
46470: PUSH
46471: LD_VAR 0 1
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 3
46487: PUSH
46488: LD_INT 6
46490: PUSH
46491: LD_INT 36
46493: PUSH
46494: LD_INT 4
46496: PUSH
46497: LD_INT 5
46499: PUSH
46500: LD_INT 31
46502: PUSH
46503: LD_INT 32
46505: PUSH
46506: LD_INT 33
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: IN
46522: NOT
46523: PUSH
46524: LD_VAR 0 6
46528: PUSH
46529: LD_INT 1
46531: EQUAL
46532: AND
46533: OR
46534: PUSH
46535: LD_VAR 0 1
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 3
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: IN
46550: NOT
46551: PUSH
46552: LD_VAR 0 6
46556: PUSH
46557: LD_INT 2
46559: EQUAL
46560: AND
46561: OR
46562: IFFALSE 46572
// mode = 0 ;
46564: LD_ADDR_VAR 0 6
46568: PUSH
46569: LD_INT 0
46571: ST_TO_ADDR
// case mode of 0 :
46572: LD_VAR 0 6
46576: PUSH
46577: LD_INT 0
46579: DOUBLE
46580: EQUAL
46581: IFTRUE 46585
46583: GO 58038
46585: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46586: LD_ADDR_VAR 0 11
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46779: LD_ADDR_VAR 0 12
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46975: LD_ADDR_VAR 0 13
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47174: LD_ADDR_VAR 0 14
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 3
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47370: LD_ADDR_VAR 0 15
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47563: LD_ADDR_VAR 0 16
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47756: LD_ADDR_VAR 0 17
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47986: LD_ADDR_VAR 0 18
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48216: LD_ADDR_VAR 0 19
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48446: LD_ADDR_VAR 0 20
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48676: LD_ADDR_VAR 0 21
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48906: LD_ADDR_VAR 0 22
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49136: LD_ADDR_VAR 0 23
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49416: LD_ADDR_VAR 0 24
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49692: LD_ADDR_VAR 0 25
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49966: LD_ADDR_VAR 0 26
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50242: LD_ADDR_VAR 0 27
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50522: LD_ADDR_VAR 0 28
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50804: LD_ADDR_VAR 0 29
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51083: LD_ADDR_VAR 0 30
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51361: LD_ADDR_VAR 0 31
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51639: LD_ADDR_VAR 0 32
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 3
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51917: LD_ADDR_VAR 0 33
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52196: LD_ADDR_VAR 0 34
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52476: LD_ADDR_VAR 0 35
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52588: LD_ADDR_VAR 0 36
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52700: LD_ADDR_VAR 0 37
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52812: LD_ADDR_VAR 0 38
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52924: LD_ADDR_VAR 0 39
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53036: LD_ADDR_VAR 0 40
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53148: LD_ADDR_VAR 0 41
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 3
53422: NEG
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53498: LD_ADDR_VAR 0 42
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 3
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53848: LD_ADDR_VAR 0 43
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 3
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 3
54144: NEG
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54196: LD_ADDR_VAR 0 44
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54546: LD_ADDR_VAR 0 45
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 3
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54896: LD_ADDR_VAR 0 46
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55244: LD_ADDR_VAR 0 47
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55395: LD_ADDR_VAR 0 48
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55542: LD_ADDR_VAR 0 49
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55686: LD_ADDR_VAR 0 50
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55830: LD_ADDR_VAR 0 51
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55977: LD_ADDR_VAR 0 52
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56128: LD_ADDR_VAR 0 53
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56358: LD_ADDR_VAR 0 54
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56588: LD_ADDR_VAR 0 55
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56818: LD_ADDR_VAR 0 56
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57048: LD_ADDR_VAR 0 57
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57278: LD_ADDR_VAR 0 58
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57508: LD_ADDR_VAR 0 59
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57596: LD_ADDR_VAR 0 60
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57684: LD_ADDR_VAR 0 61
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57772: LD_ADDR_VAR 0 62
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57860: LD_ADDR_VAR 0 63
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57948: LD_ADDR_VAR 0 64
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: ST_TO_ADDR
// end ; 1 :
58036: GO 63933
58038: LD_INT 1
58040: DOUBLE
58041: EQUAL
58042: IFTRUE 58046
58044: GO 60669
58046: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58047: LD_ADDR_VAR 0 11
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: LIST
58090: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58091: LD_ADDR_VAR 0 12
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58132: LD_ADDR_VAR 0 13
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58172: LD_ADDR_VAR 0 14
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58213: LD_ADDR_VAR 0 15
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58257: LD_ADDR_VAR 0 16
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58303: LD_ADDR_VAR 0 17
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58347: LD_ADDR_VAR 0 18
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: LIST
58387: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58388: LD_ADDR_VAR 0 19
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58428: LD_ADDR_VAR 0 20
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58469: LD_ADDR_VAR 0 21
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58513: LD_ADDR_VAR 0 22
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58559: LD_ADDR_VAR 0 23
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58603: LD_ADDR_VAR 0 24
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58644: LD_ADDR_VAR 0 25
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58684: LD_ADDR_VAR 0 26
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 4
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58725: LD_ADDR_VAR 0 27
58729: PUSH
58730: LD_INT 3
58732: NEG
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58769: LD_ADDR_VAR 0 28
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: LD_INT 4
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: NEG
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58815: LD_ADDR_VAR 0 29
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 4
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 4
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 5
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 5
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 4
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 6
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 6
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 5
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58970: LD_ADDR_VAR 0 30
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 5
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 5
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 5
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 6
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 6
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59113: LD_ADDR_VAR 0 31
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 4
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 5
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 5
59190: PUSH
59191: LD_INT 5
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 6
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 6
59220: PUSH
59221: LD_INT 6
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 5
59230: PUSH
59231: LD_INT 6
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59252: LD_ADDR_VAR 0 32
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 4
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 5
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 6
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 6
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59395: LD_ADDR_VAR 0 33
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 3
59413: NEG
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 4
59447: NEG
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 4
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 4
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 5
59481: NEG
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 5
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 5
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 6
59515: NEG
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 6
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59550: LD_ADDR_VAR 0 34
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: NEG
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: NEG
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: LD_INT 5
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 5
59641: NEG
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: NEG
59654: PUSH
59655: LD_INT 5
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 5
59665: NEG
59666: PUSH
59667: LD_INT 6
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 6
59677: NEG
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 6
59689: NEG
59690: PUSH
59691: LD_INT 6
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59713: LD_ADDR_VAR 0 41
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59757: LD_ADDR_VAR 0 42
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59798: LD_ADDR_VAR 0 43
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59838: LD_ADDR_VAR 0 44
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59879: LD_ADDR_VAR 0 45
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59923: LD_ADDR_VAR 0 46
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59969: LD_ADDR_VAR 0 47
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60002: LD_ADDR_VAR 0 48
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60033: LD_ADDR_VAR 0 49
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60062: LD_ADDR_VAR 0 50
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60091: LD_ADDR_VAR 0 51
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60122: LD_ADDR_VAR 0 52
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60155: LD_ADDR_VAR 0 53
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60199: LD_ADDR_VAR 0 54
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60240: LD_ADDR_VAR 0 55
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60280: LD_ADDR_VAR 0 56
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60321: LD_ADDR_VAR 0 57
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60365: LD_ADDR_VAR 0 58
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60411: LD_ADDR_VAR 0 59
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60455: LD_ADDR_VAR 0 60
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60496: LD_ADDR_VAR 0 61
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60536: LD_ADDR_VAR 0 62
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: LIST
60576: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60577: LD_ADDR_VAR 0 63
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60621: LD_ADDR_VAR 0 64
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: ST_TO_ADDR
// end ; 2 :
60667: GO 63933
60669: LD_INT 2
60671: DOUBLE
60672: EQUAL
60673: IFTRUE 60677
60675: GO 63932
60677: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60678: LD_ADDR_VAR 0 29
60682: PUSH
60683: LD_INT 4
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 5
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 5
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 4
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 5
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 4
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 4
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 5
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 5
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 4
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: LD_INT 5
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 3
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 3
60961: NEG
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 4
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 4
61075: NEG
61076: PUSH
61077: LD_INT 5
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 4
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 5
61123: NEG
61124: PUSH
61125: LD_INT 4
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 5
61135: NEG
61136: PUSH
61137: LD_INT 5
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: LD_INT 5
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 5
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61216: LD_ADDR_VAR 0 30
61220: PUSH
61221: LD_INT 4
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 4
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 5
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 5
61253: PUSH
61254: LD_INT 5
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: LD_INT 5
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: LD_INT 4
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 5
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 5
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 4
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 4
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 4
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 4
61406: NEG
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 4
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 4
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 5
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 5
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 3
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 3
61520: NEG
61521: PUSH
61522: LD_INT 4
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: LD_INT 4
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 4
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 4
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: LD_INT 5
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 4
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: LD_INT 3
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 4
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 5
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: LD_INT 5
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61763: LD_ADDR_VAR 0 31
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 4
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 4
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: LD_INT 5
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 5
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 4
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 5
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 3
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: NEG
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: LD_INT 4
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 4
61977: NEG
61978: PUSH
61979: LD_INT 5
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: LD_INT 4
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 3
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 4
62013: NEG
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 5
62025: NEG
62026: PUSH
62027: LD_INT 4
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 5
62037: NEG
62038: PUSH
62039: LD_INT 5
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 5
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 5
62061: NEG
62062: PUSH
62063: LD_INT 3
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 3
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 4
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 4
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: LD_INT 4
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 4
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 4
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 5
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 5
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 5
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62313: LD_ADDR_VAR 0 32
62317: PUSH
62318: LD_INT 4
62320: NEG
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 4
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 5
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 5
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 5
62399: NEG
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 4
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 4
62482: NEG
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: LD_INT 4
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: LD_INT 4
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 4
62518: NEG
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 4
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 5
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 4
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: LD_INT 4
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: LD_INT 5
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: LD_INT 3
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: LD_INT 5
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 3
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 4
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 4
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: LD_INT 2
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 4
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 4
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 5
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 5
62755: PUSH
62756: LD_INT 5
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: LD_INT 5
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 5
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62860: LD_ADDR_VAR 0 33
62864: PUSH
62865: LD_INT 4
62867: NEG
62868: PUSH
62869: LD_INT 4
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 4
62879: NEG
62880: PUSH
62881: LD_INT 5
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: LD_INT 4
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: LD_INT 3
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 5
62927: NEG
62928: PUSH
62929: LD_INT 4
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 5
62939: NEG
62940: PUSH
62941: LD_INT 5
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: LD_INT 5
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 5
62963: NEG
62964: PUSH
62965: LD_INT 3
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 4
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 3
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 4
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: LD_INT 4
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 4
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 4
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 5
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 5
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 4
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 5
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: PUSH
63171: LD_INT 3
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 3
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 4
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 4
63200: PUSH
63201: LD_INT 4
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: LD_INT 4
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 4
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 4
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 5
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 5
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 4
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 3
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: LD_INT 5
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63398: LD_ADDR_VAR 0 34
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 4
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 5
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: LD_INT 4
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: LD_INT 3
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 3
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 4
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: LD_INT 5
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: LD_INT 5
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 4
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 4
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 4
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 5
63630: PUSH
63631: LD_INT 5
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 3
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 3
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: LD_INT 3
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 4
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: LD_INT 4
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 3
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: LD_INT 4
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 4
63783: NEG
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 4
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 4
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 5
63839: NEG
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 5
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 5
63862: NEG
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: ST_TO_ADDR
// end ; end ;
63930: GO 63933
63932: POP
// case btype of b_depot , b_warehouse :
63933: LD_VAR 0 1
63937: PUSH
63938: LD_INT 0
63940: DOUBLE
63941: EQUAL
63942: IFTRUE 63952
63944: LD_INT 1
63946: DOUBLE
63947: EQUAL
63948: IFTRUE 63952
63950: GO 64153
63952: POP
// case nation of nation_american :
63953: LD_VAR 0 5
63957: PUSH
63958: LD_INT 1
63960: DOUBLE
63961: EQUAL
63962: IFTRUE 63966
63964: GO 64022
63966: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63967: LD_ADDR_VAR 0 9
63971: PUSH
63972: LD_VAR 0 11
63976: PUSH
63977: LD_VAR 0 12
63981: PUSH
63982: LD_VAR 0 13
63986: PUSH
63987: LD_VAR 0 14
63991: PUSH
63992: LD_VAR 0 15
63996: PUSH
63997: LD_VAR 0 16
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: PUSH
64010: LD_VAR 0 4
64014: PUSH
64015: LD_INT 1
64017: PLUS
64018: ARRAY
64019: ST_TO_ADDR
64020: GO 64151
64022: LD_INT 2
64024: DOUBLE
64025: EQUAL
64026: IFTRUE 64030
64028: GO 64086
64030: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64031: LD_ADDR_VAR 0 9
64035: PUSH
64036: LD_VAR 0 17
64040: PUSH
64041: LD_VAR 0 18
64045: PUSH
64046: LD_VAR 0 19
64050: PUSH
64051: LD_VAR 0 20
64055: PUSH
64056: LD_VAR 0 21
64060: PUSH
64061: LD_VAR 0 22
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: PUSH
64074: LD_VAR 0 4
64078: PUSH
64079: LD_INT 1
64081: PLUS
64082: ARRAY
64083: ST_TO_ADDR
64084: GO 64151
64086: LD_INT 3
64088: DOUBLE
64089: EQUAL
64090: IFTRUE 64094
64092: GO 64150
64094: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64095: LD_ADDR_VAR 0 9
64099: PUSH
64100: LD_VAR 0 23
64104: PUSH
64105: LD_VAR 0 24
64109: PUSH
64110: LD_VAR 0 25
64114: PUSH
64115: LD_VAR 0 26
64119: PUSH
64120: LD_VAR 0 27
64124: PUSH
64125: LD_VAR 0 28
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: PUSH
64138: LD_VAR 0 4
64142: PUSH
64143: LD_INT 1
64145: PLUS
64146: ARRAY
64147: ST_TO_ADDR
64148: GO 64151
64150: POP
64151: GO 64706
64153: LD_INT 2
64155: DOUBLE
64156: EQUAL
64157: IFTRUE 64167
64159: LD_INT 3
64161: DOUBLE
64162: EQUAL
64163: IFTRUE 64167
64165: GO 64223
64167: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64168: LD_ADDR_VAR 0 9
64172: PUSH
64173: LD_VAR 0 29
64177: PUSH
64178: LD_VAR 0 30
64182: PUSH
64183: LD_VAR 0 31
64187: PUSH
64188: LD_VAR 0 32
64192: PUSH
64193: LD_VAR 0 33
64197: PUSH
64198: LD_VAR 0 34
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: PUSH
64211: LD_VAR 0 4
64215: PUSH
64216: LD_INT 1
64218: PLUS
64219: ARRAY
64220: ST_TO_ADDR
64221: GO 64706
64223: LD_INT 16
64225: DOUBLE
64226: EQUAL
64227: IFTRUE 64285
64229: LD_INT 17
64231: DOUBLE
64232: EQUAL
64233: IFTRUE 64285
64235: LD_INT 18
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64285
64241: LD_INT 19
64243: DOUBLE
64244: EQUAL
64245: IFTRUE 64285
64247: LD_INT 22
64249: DOUBLE
64250: EQUAL
64251: IFTRUE 64285
64253: LD_INT 20
64255: DOUBLE
64256: EQUAL
64257: IFTRUE 64285
64259: LD_INT 21
64261: DOUBLE
64262: EQUAL
64263: IFTRUE 64285
64265: LD_INT 23
64267: DOUBLE
64268: EQUAL
64269: IFTRUE 64285
64271: LD_INT 24
64273: DOUBLE
64274: EQUAL
64275: IFTRUE 64285
64277: LD_INT 25
64279: DOUBLE
64280: EQUAL
64281: IFTRUE 64285
64283: GO 64341
64285: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64286: LD_ADDR_VAR 0 9
64290: PUSH
64291: LD_VAR 0 35
64295: PUSH
64296: LD_VAR 0 36
64300: PUSH
64301: LD_VAR 0 37
64305: PUSH
64306: LD_VAR 0 38
64310: PUSH
64311: LD_VAR 0 39
64315: PUSH
64316: LD_VAR 0 40
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: PUSH
64329: LD_VAR 0 4
64333: PUSH
64334: LD_INT 1
64336: PLUS
64337: ARRAY
64338: ST_TO_ADDR
64339: GO 64706
64341: LD_INT 6
64343: DOUBLE
64344: EQUAL
64345: IFTRUE 64397
64347: LD_INT 7
64349: DOUBLE
64350: EQUAL
64351: IFTRUE 64397
64353: LD_INT 8
64355: DOUBLE
64356: EQUAL
64357: IFTRUE 64397
64359: LD_INT 13
64361: DOUBLE
64362: EQUAL
64363: IFTRUE 64397
64365: LD_INT 12
64367: DOUBLE
64368: EQUAL
64369: IFTRUE 64397
64371: LD_INT 15
64373: DOUBLE
64374: EQUAL
64375: IFTRUE 64397
64377: LD_INT 11
64379: DOUBLE
64380: EQUAL
64381: IFTRUE 64397
64383: LD_INT 14
64385: DOUBLE
64386: EQUAL
64387: IFTRUE 64397
64389: LD_INT 10
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64397
64395: GO 64453
64397: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64398: LD_ADDR_VAR 0 9
64402: PUSH
64403: LD_VAR 0 41
64407: PUSH
64408: LD_VAR 0 42
64412: PUSH
64413: LD_VAR 0 43
64417: PUSH
64418: LD_VAR 0 44
64422: PUSH
64423: LD_VAR 0 45
64427: PUSH
64428: LD_VAR 0 46
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: PUSH
64441: LD_VAR 0 4
64445: PUSH
64446: LD_INT 1
64448: PLUS
64449: ARRAY
64450: ST_TO_ADDR
64451: GO 64706
64453: LD_INT 36
64455: DOUBLE
64456: EQUAL
64457: IFTRUE 64461
64459: GO 64517
64461: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64462: LD_ADDR_VAR 0 9
64466: PUSH
64467: LD_VAR 0 47
64471: PUSH
64472: LD_VAR 0 48
64476: PUSH
64477: LD_VAR 0 49
64481: PUSH
64482: LD_VAR 0 50
64486: PUSH
64487: LD_VAR 0 51
64491: PUSH
64492: LD_VAR 0 52
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: LD_VAR 0 4
64509: PUSH
64510: LD_INT 1
64512: PLUS
64513: ARRAY
64514: ST_TO_ADDR
64515: GO 64706
64517: LD_INT 4
64519: DOUBLE
64520: EQUAL
64521: IFTRUE 64543
64523: LD_INT 5
64525: DOUBLE
64526: EQUAL
64527: IFTRUE 64543
64529: LD_INT 34
64531: DOUBLE
64532: EQUAL
64533: IFTRUE 64543
64535: LD_INT 37
64537: DOUBLE
64538: EQUAL
64539: IFTRUE 64543
64541: GO 64599
64543: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64544: LD_ADDR_VAR 0 9
64548: PUSH
64549: LD_VAR 0 53
64553: PUSH
64554: LD_VAR 0 54
64558: PUSH
64559: LD_VAR 0 55
64563: PUSH
64564: LD_VAR 0 56
64568: PUSH
64569: LD_VAR 0 57
64573: PUSH
64574: LD_VAR 0 58
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: PUSH
64587: LD_VAR 0 4
64591: PUSH
64592: LD_INT 1
64594: PLUS
64595: ARRAY
64596: ST_TO_ADDR
64597: GO 64706
64599: LD_INT 31
64601: DOUBLE
64602: EQUAL
64603: IFTRUE 64649
64605: LD_INT 32
64607: DOUBLE
64608: EQUAL
64609: IFTRUE 64649
64611: LD_INT 33
64613: DOUBLE
64614: EQUAL
64615: IFTRUE 64649
64617: LD_INT 27
64619: DOUBLE
64620: EQUAL
64621: IFTRUE 64649
64623: LD_INT 26
64625: DOUBLE
64626: EQUAL
64627: IFTRUE 64649
64629: LD_INT 28
64631: DOUBLE
64632: EQUAL
64633: IFTRUE 64649
64635: LD_INT 29
64637: DOUBLE
64638: EQUAL
64639: IFTRUE 64649
64641: LD_INT 30
64643: DOUBLE
64644: EQUAL
64645: IFTRUE 64649
64647: GO 64705
64649: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64650: LD_ADDR_VAR 0 9
64654: PUSH
64655: LD_VAR 0 59
64659: PUSH
64660: LD_VAR 0 60
64664: PUSH
64665: LD_VAR 0 61
64669: PUSH
64670: LD_VAR 0 62
64674: PUSH
64675: LD_VAR 0 63
64679: PUSH
64680: LD_VAR 0 64
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: PUSH
64693: LD_VAR 0 4
64697: PUSH
64698: LD_INT 1
64700: PLUS
64701: ARRAY
64702: ST_TO_ADDR
64703: GO 64706
64705: POP
// temp_list2 = [ ] ;
64706: LD_ADDR_VAR 0 10
64710: PUSH
64711: EMPTY
64712: ST_TO_ADDR
// for i in temp_list do
64713: LD_ADDR_VAR 0 8
64717: PUSH
64718: LD_VAR 0 9
64722: PUSH
64723: FOR_IN
64724: IFFALSE 64776
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64726: LD_ADDR_VAR 0 10
64730: PUSH
64731: LD_VAR 0 10
64735: PUSH
64736: LD_VAR 0 8
64740: PUSH
64741: LD_INT 1
64743: ARRAY
64744: PUSH
64745: LD_VAR 0 2
64749: PLUS
64750: PUSH
64751: LD_VAR 0 8
64755: PUSH
64756: LD_INT 2
64758: ARRAY
64759: PUSH
64760: LD_VAR 0 3
64764: PLUS
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: EMPTY
64771: LIST
64772: ADD
64773: ST_TO_ADDR
64774: GO 64723
64776: POP
64777: POP
// result = temp_list2 ;
64778: LD_ADDR_VAR 0 7
64782: PUSH
64783: LD_VAR 0 10
64787: ST_TO_ADDR
// end ;
64788: LD_VAR 0 7
64792: RET
// export function EnemyInRange ( unit , dist ) ; begin
64793: LD_INT 0
64795: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64796: LD_ADDR_VAR 0 3
64800: PUSH
64801: LD_VAR 0 1
64805: PPUSH
64806: CALL_OW 255
64810: PPUSH
64811: LD_VAR 0 1
64815: PPUSH
64816: CALL_OW 250
64820: PPUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: CALL_OW 251
64830: PPUSH
64831: LD_VAR 0 2
64835: PPUSH
64836: CALL 38189 0 4
64840: PUSH
64841: LD_INT 4
64843: ARRAY
64844: ST_TO_ADDR
// end ;
64845: LD_VAR 0 3
64849: RET
// export function PlayerSeeMe ( unit ) ; begin
64850: LD_INT 0
64852: PPUSH
// result := See ( your_side , unit ) ;
64853: LD_ADDR_VAR 0 2
64857: PUSH
64858: LD_OWVAR 2
64862: PPUSH
64863: LD_VAR 0 1
64867: PPUSH
64868: CALL_OW 292
64872: ST_TO_ADDR
// end ;
64873: LD_VAR 0 2
64877: RET
// export function ReverseDir ( unit ) ; begin
64878: LD_INT 0
64880: PPUSH
// if not unit then
64881: LD_VAR 0 1
64885: NOT
64886: IFFALSE 64890
// exit ;
64888: GO 64913
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64890: LD_ADDR_VAR 0 2
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 254
64904: PUSH
64905: LD_INT 3
64907: PLUS
64908: PUSH
64909: LD_INT 6
64911: MOD
64912: ST_TO_ADDR
// end ;
64913: LD_VAR 0 2
64917: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64918: LD_INT 0
64920: PPUSH
64921: PPUSH
64922: PPUSH
64923: PPUSH
64924: PPUSH
// if not hexes then
64925: LD_VAR 0 2
64929: NOT
64930: IFFALSE 64934
// exit ;
64932: GO 65082
// dist := 9999 ;
64934: LD_ADDR_VAR 0 5
64938: PUSH
64939: LD_INT 9999
64941: ST_TO_ADDR
// for i = 1 to hexes do
64942: LD_ADDR_VAR 0 4
64946: PUSH
64947: DOUBLE
64948: LD_INT 1
64950: DEC
64951: ST_TO_ADDR
64952: LD_VAR 0 2
64956: PUSH
64957: FOR_TO
64958: IFFALSE 65070
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64960: LD_VAR 0 1
64964: PPUSH
64965: LD_VAR 0 2
64969: PUSH
64970: LD_VAR 0 4
64974: ARRAY
64975: PUSH
64976: LD_INT 1
64978: ARRAY
64979: PPUSH
64980: LD_VAR 0 2
64984: PUSH
64985: LD_VAR 0 4
64989: ARRAY
64990: PUSH
64991: LD_INT 2
64993: ARRAY
64994: PPUSH
64995: CALL_OW 297
64999: PUSH
65000: LD_VAR 0 5
65004: LESS
65005: IFFALSE 65068
// begin hex := hexes [ i ] ;
65007: LD_ADDR_VAR 0 7
65011: PUSH
65012: LD_VAR 0 2
65016: PUSH
65017: LD_VAR 0 4
65021: ARRAY
65022: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65023: LD_ADDR_VAR 0 5
65027: PUSH
65028: LD_VAR 0 1
65032: PPUSH
65033: LD_VAR 0 2
65037: PUSH
65038: LD_VAR 0 4
65042: ARRAY
65043: PUSH
65044: LD_INT 1
65046: ARRAY
65047: PPUSH
65048: LD_VAR 0 2
65052: PUSH
65053: LD_VAR 0 4
65057: ARRAY
65058: PUSH
65059: LD_INT 2
65061: ARRAY
65062: PPUSH
65063: CALL_OW 297
65067: ST_TO_ADDR
// end ; end ;
65068: GO 64957
65070: POP
65071: POP
// result := hex ;
65072: LD_ADDR_VAR 0 3
65076: PUSH
65077: LD_VAR 0 7
65081: ST_TO_ADDR
// end ;
65082: LD_VAR 0 3
65086: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65087: LD_INT 0
65089: PPUSH
65090: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65091: LD_VAR 0 1
65095: NOT
65096: PUSH
65097: LD_VAR 0 1
65101: PUSH
65102: LD_INT 21
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 23
65114: PUSH
65115: LD_INT 2
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PPUSH
65126: CALL_OW 69
65130: IN
65131: NOT
65132: OR
65133: IFFALSE 65137
// exit ;
65135: GO 65184
// for i = 1 to 3 do
65137: LD_ADDR_VAR 0 3
65141: PUSH
65142: DOUBLE
65143: LD_INT 1
65145: DEC
65146: ST_TO_ADDR
65147: LD_INT 3
65149: PUSH
65150: FOR_TO
65151: IFFALSE 65182
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65153: LD_VAR 0 1
65157: PPUSH
65158: CALL_OW 250
65162: PPUSH
65163: LD_VAR 0 1
65167: PPUSH
65168: CALL_OW 251
65172: PPUSH
65173: LD_INT 1
65175: PPUSH
65176: CALL_OW 453
65180: GO 65150
65182: POP
65183: POP
// end ;
65184: LD_VAR 0 2
65188: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65189: LD_INT 0
65191: PPUSH
65192: PPUSH
65193: PPUSH
65194: PPUSH
65195: PPUSH
65196: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65197: LD_VAR 0 1
65201: NOT
65202: PUSH
65203: LD_VAR 0 2
65207: NOT
65208: OR
65209: PUSH
65210: LD_VAR 0 1
65214: PPUSH
65215: CALL_OW 314
65219: OR
65220: IFFALSE 65224
// exit ;
65222: GO 65665
// x := GetX ( enemy_unit ) ;
65224: LD_ADDR_VAR 0 7
65228: PUSH
65229: LD_VAR 0 2
65233: PPUSH
65234: CALL_OW 250
65238: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65239: LD_ADDR_VAR 0 8
65243: PUSH
65244: LD_VAR 0 2
65248: PPUSH
65249: CALL_OW 251
65253: ST_TO_ADDR
// if not x or not y then
65254: LD_VAR 0 7
65258: NOT
65259: PUSH
65260: LD_VAR 0 8
65264: NOT
65265: OR
65266: IFFALSE 65270
// exit ;
65268: GO 65665
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65270: LD_ADDR_VAR 0 6
65274: PUSH
65275: LD_VAR 0 7
65279: PPUSH
65280: LD_INT 0
65282: PPUSH
65283: LD_INT 4
65285: PPUSH
65286: CALL_OW 272
65290: PUSH
65291: LD_VAR 0 8
65295: PPUSH
65296: LD_INT 0
65298: PPUSH
65299: LD_INT 4
65301: PPUSH
65302: CALL_OW 273
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_VAR 0 7
65315: PPUSH
65316: LD_INT 1
65318: PPUSH
65319: LD_INT 4
65321: PPUSH
65322: CALL_OW 272
65326: PUSH
65327: LD_VAR 0 8
65331: PPUSH
65332: LD_INT 1
65334: PPUSH
65335: LD_INT 4
65337: PPUSH
65338: CALL_OW 273
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_VAR 0 7
65351: PPUSH
65352: LD_INT 2
65354: PPUSH
65355: LD_INT 4
65357: PPUSH
65358: CALL_OW 272
65362: PUSH
65363: LD_VAR 0 8
65367: PPUSH
65368: LD_INT 2
65370: PPUSH
65371: LD_INT 4
65373: PPUSH
65374: CALL_OW 273
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_VAR 0 7
65387: PPUSH
65388: LD_INT 3
65390: PPUSH
65391: LD_INT 4
65393: PPUSH
65394: CALL_OW 272
65398: PUSH
65399: LD_VAR 0 8
65403: PPUSH
65404: LD_INT 3
65406: PPUSH
65407: LD_INT 4
65409: PPUSH
65410: CALL_OW 273
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_VAR 0 7
65423: PPUSH
65424: LD_INT 4
65426: PPUSH
65427: LD_INT 4
65429: PPUSH
65430: CALL_OW 272
65434: PUSH
65435: LD_VAR 0 8
65439: PPUSH
65440: LD_INT 4
65442: PPUSH
65443: LD_INT 4
65445: PPUSH
65446: CALL_OW 273
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_VAR 0 7
65459: PPUSH
65460: LD_INT 5
65462: PPUSH
65463: LD_INT 4
65465: PPUSH
65466: CALL_OW 272
65470: PUSH
65471: LD_VAR 0 8
65475: PPUSH
65476: LD_INT 5
65478: PPUSH
65479: LD_INT 4
65481: PPUSH
65482: CALL_OW 273
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: ST_TO_ADDR
// for i = tmp downto 1 do
65499: LD_ADDR_VAR 0 4
65503: PUSH
65504: DOUBLE
65505: LD_VAR 0 6
65509: INC
65510: ST_TO_ADDR
65511: LD_INT 1
65513: PUSH
65514: FOR_DOWNTO
65515: IFFALSE 65616
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65517: LD_VAR 0 6
65521: PUSH
65522: LD_VAR 0 4
65526: ARRAY
65527: PUSH
65528: LD_INT 1
65530: ARRAY
65531: PPUSH
65532: LD_VAR 0 6
65536: PUSH
65537: LD_VAR 0 4
65541: ARRAY
65542: PUSH
65543: LD_INT 2
65545: ARRAY
65546: PPUSH
65547: CALL_OW 488
65551: NOT
65552: PUSH
65553: LD_VAR 0 6
65557: PUSH
65558: LD_VAR 0 4
65562: ARRAY
65563: PUSH
65564: LD_INT 1
65566: ARRAY
65567: PPUSH
65568: LD_VAR 0 6
65572: PUSH
65573: LD_VAR 0 4
65577: ARRAY
65578: PUSH
65579: LD_INT 2
65581: ARRAY
65582: PPUSH
65583: CALL_OW 428
65587: PUSH
65588: LD_INT 0
65590: NONEQUAL
65591: OR
65592: IFFALSE 65614
// tmp := Delete ( tmp , i ) ;
65594: LD_ADDR_VAR 0 6
65598: PUSH
65599: LD_VAR 0 6
65603: PPUSH
65604: LD_VAR 0 4
65608: PPUSH
65609: CALL_OW 3
65613: ST_TO_ADDR
65614: GO 65514
65616: POP
65617: POP
// j := GetClosestHex ( unit , tmp ) ;
65618: LD_ADDR_VAR 0 5
65622: PUSH
65623: LD_VAR 0 1
65627: PPUSH
65628: LD_VAR 0 6
65632: PPUSH
65633: CALL 64918 0 2
65637: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65638: LD_VAR 0 1
65642: PPUSH
65643: LD_VAR 0 5
65647: PUSH
65648: LD_INT 1
65650: ARRAY
65651: PPUSH
65652: LD_VAR 0 5
65656: PUSH
65657: LD_INT 2
65659: ARRAY
65660: PPUSH
65661: CALL_OW 111
// end ;
65665: LD_VAR 0 3
65669: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65670: LD_INT 0
65672: PPUSH
65673: PPUSH
65674: PPUSH
// uc_side = 0 ;
65675: LD_ADDR_OWVAR 20
65679: PUSH
65680: LD_INT 0
65682: ST_TO_ADDR
// uc_nation = 0 ;
65683: LD_ADDR_OWVAR 21
65687: PUSH
65688: LD_INT 0
65690: ST_TO_ADDR
// InitHc_All ( ) ;
65691: CALL_OW 584
// InitVc ;
65695: CALL_OW 20
// if mastodonts then
65699: LD_VAR 0 6
65703: IFFALSE 65770
// for i = 1 to mastodonts do
65705: LD_ADDR_VAR 0 11
65709: PUSH
65710: DOUBLE
65711: LD_INT 1
65713: DEC
65714: ST_TO_ADDR
65715: LD_VAR 0 6
65719: PUSH
65720: FOR_TO
65721: IFFALSE 65768
// begin vc_chassis := 31 ;
65723: LD_ADDR_OWVAR 37
65727: PUSH
65728: LD_INT 31
65730: ST_TO_ADDR
// vc_control := control_rider ;
65731: LD_ADDR_OWVAR 38
65735: PUSH
65736: LD_INT 4
65738: ST_TO_ADDR
// animal := CreateVehicle ;
65739: LD_ADDR_VAR 0 12
65743: PUSH
65744: CALL_OW 45
65748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65749: LD_VAR 0 12
65753: PPUSH
65754: LD_VAR 0 8
65758: PPUSH
65759: LD_INT 0
65761: PPUSH
65762: CALL 67958 0 3
// end ;
65766: GO 65720
65768: POP
65769: POP
// if horses then
65770: LD_VAR 0 5
65774: IFFALSE 65841
// for i = 1 to horses do
65776: LD_ADDR_VAR 0 11
65780: PUSH
65781: DOUBLE
65782: LD_INT 1
65784: DEC
65785: ST_TO_ADDR
65786: LD_VAR 0 5
65790: PUSH
65791: FOR_TO
65792: IFFALSE 65839
// begin hc_class := 21 ;
65794: LD_ADDR_OWVAR 28
65798: PUSH
65799: LD_INT 21
65801: ST_TO_ADDR
// hc_gallery :=  ;
65802: LD_ADDR_OWVAR 33
65806: PUSH
65807: LD_STRING 
65809: ST_TO_ADDR
// animal := CreateHuman ;
65810: LD_ADDR_VAR 0 12
65814: PUSH
65815: CALL_OW 44
65819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65820: LD_VAR 0 12
65824: PPUSH
65825: LD_VAR 0 8
65829: PPUSH
65830: LD_INT 0
65832: PPUSH
65833: CALL 67958 0 3
// end ;
65837: GO 65791
65839: POP
65840: POP
// if birds then
65841: LD_VAR 0 1
65845: IFFALSE 65912
// for i = 1 to birds do
65847: LD_ADDR_VAR 0 11
65851: PUSH
65852: DOUBLE
65853: LD_INT 1
65855: DEC
65856: ST_TO_ADDR
65857: LD_VAR 0 1
65861: PUSH
65862: FOR_TO
65863: IFFALSE 65910
// begin hc_class = 18 ;
65865: LD_ADDR_OWVAR 28
65869: PUSH
65870: LD_INT 18
65872: ST_TO_ADDR
// hc_gallery =  ;
65873: LD_ADDR_OWVAR 33
65877: PUSH
65878: LD_STRING 
65880: ST_TO_ADDR
// animal := CreateHuman ;
65881: LD_ADDR_VAR 0 12
65885: PUSH
65886: CALL_OW 44
65890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65891: LD_VAR 0 12
65895: PPUSH
65896: LD_VAR 0 8
65900: PPUSH
65901: LD_INT 0
65903: PPUSH
65904: CALL 67958 0 3
// end ;
65908: GO 65862
65910: POP
65911: POP
// if tigers then
65912: LD_VAR 0 2
65916: IFFALSE 66000
// for i = 1 to tigers do
65918: LD_ADDR_VAR 0 11
65922: PUSH
65923: DOUBLE
65924: LD_INT 1
65926: DEC
65927: ST_TO_ADDR
65928: LD_VAR 0 2
65932: PUSH
65933: FOR_TO
65934: IFFALSE 65998
// begin hc_class = class_tiger ;
65936: LD_ADDR_OWVAR 28
65940: PUSH
65941: LD_INT 14
65943: ST_TO_ADDR
// hc_gallery =  ;
65944: LD_ADDR_OWVAR 33
65948: PUSH
65949: LD_STRING 
65951: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65952: LD_ADDR_OWVAR 35
65956: PUSH
65957: LD_INT 7
65959: NEG
65960: PPUSH
65961: LD_INT 7
65963: PPUSH
65964: CALL_OW 12
65968: ST_TO_ADDR
// animal := CreateHuman ;
65969: LD_ADDR_VAR 0 12
65973: PUSH
65974: CALL_OW 44
65978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65979: LD_VAR 0 12
65983: PPUSH
65984: LD_VAR 0 8
65988: PPUSH
65989: LD_INT 0
65991: PPUSH
65992: CALL 67958 0 3
// end ;
65996: GO 65933
65998: POP
65999: POP
// if apemans then
66000: LD_VAR 0 3
66004: IFFALSE 66127
// for i = 1 to apemans do
66006: LD_ADDR_VAR 0 11
66010: PUSH
66011: DOUBLE
66012: LD_INT 1
66014: DEC
66015: ST_TO_ADDR
66016: LD_VAR 0 3
66020: PUSH
66021: FOR_TO
66022: IFFALSE 66125
// begin hc_class = class_apeman ;
66024: LD_ADDR_OWVAR 28
66028: PUSH
66029: LD_INT 12
66031: ST_TO_ADDR
// hc_gallery =  ;
66032: LD_ADDR_OWVAR 33
66036: PUSH
66037: LD_STRING 
66039: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66040: LD_ADDR_OWVAR 35
66044: PUSH
66045: LD_INT 2
66047: NEG
66048: PPUSH
66049: LD_INT 2
66051: PPUSH
66052: CALL_OW 12
66056: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66057: LD_ADDR_OWVAR 31
66061: PUSH
66062: LD_INT 1
66064: PPUSH
66065: LD_INT 3
66067: PPUSH
66068: CALL_OW 12
66072: PUSH
66073: LD_INT 1
66075: PPUSH
66076: LD_INT 3
66078: PPUSH
66079: CALL_OW 12
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: ST_TO_ADDR
// animal := CreateHuman ;
66096: LD_ADDR_VAR 0 12
66100: PUSH
66101: CALL_OW 44
66105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66106: LD_VAR 0 12
66110: PPUSH
66111: LD_VAR 0 8
66115: PPUSH
66116: LD_INT 0
66118: PPUSH
66119: CALL 67958 0 3
// end ;
66123: GO 66021
66125: POP
66126: POP
// if enchidnas then
66127: LD_VAR 0 4
66131: IFFALSE 66198
// for i = 1 to enchidnas do
66133: LD_ADDR_VAR 0 11
66137: PUSH
66138: DOUBLE
66139: LD_INT 1
66141: DEC
66142: ST_TO_ADDR
66143: LD_VAR 0 4
66147: PUSH
66148: FOR_TO
66149: IFFALSE 66196
// begin hc_class = 13 ;
66151: LD_ADDR_OWVAR 28
66155: PUSH
66156: LD_INT 13
66158: ST_TO_ADDR
// hc_gallery =  ;
66159: LD_ADDR_OWVAR 33
66163: PUSH
66164: LD_STRING 
66166: ST_TO_ADDR
// animal := CreateHuman ;
66167: LD_ADDR_VAR 0 12
66171: PUSH
66172: CALL_OW 44
66176: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66177: LD_VAR 0 12
66181: PPUSH
66182: LD_VAR 0 8
66186: PPUSH
66187: LD_INT 0
66189: PPUSH
66190: CALL 67958 0 3
// end ;
66194: GO 66148
66196: POP
66197: POP
// if fishes then
66198: LD_VAR 0 7
66202: IFFALSE 66269
// for i = 1 to fishes do
66204: LD_ADDR_VAR 0 11
66208: PUSH
66209: DOUBLE
66210: LD_INT 1
66212: DEC
66213: ST_TO_ADDR
66214: LD_VAR 0 7
66218: PUSH
66219: FOR_TO
66220: IFFALSE 66267
// begin hc_class = 20 ;
66222: LD_ADDR_OWVAR 28
66226: PUSH
66227: LD_INT 20
66229: ST_TO_ADDR
// hc_gallery =  ;
66230: LD_ADDR_OWVAR 33
66234: PUSH
66235: LD_STRING 
66237: ST_TO_ADDR
// animal := CreateHuman ;
66238: LD_ADDR_VAR 0 12
66242: PUSH
66243: CALL_OW 44
66247: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66248: LD_VAR 0 12
66252: PPUSH
66253: LD_VAR 0 9
66257: PPUSH
66258: LD_INT 0
66260: PPUSH
66261: CALL 67958 0 3
// end ;
66265: GO 66219
66267: POP
66268: POP
// end ;
66269: LD_VAR 0 10
66273: RET
// export function WantHeal ( sci , unit ) ; begin
66274: LD_INT 0
66276: PPUSH
// if GetTaskList ( sci ) > 0 then
66277: LD_VAR 0 1
66281: PPUSH
66282: CALL_OW 437
66286: PUSH
66287: LD_INT 0
66289: GREATER
66290: IFFALSE 66360
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66292: LD_VAR 0 1
66296: PPUSH
66297: CALL_OW 437
66301: PUSH
66302: LD_INT 1
66304: ARRAY
66305: PUSH
66306: LD_INT 1
66308: ARRAY
66309: PUSH
66310: LD_STRING l
66312: EQUAL
66313: PUSH
66314: LD_VAR 0 1
66318: PPUSH
66319: CALL_OW 437
66323: PUSH
66324: LD_INT 1
66326: ARRAY
66327: PUSH
66328: LD_INT 4
66330: ARRAY
66331: PUSH
66332: LD_VAR 0 2
66336: EQUAL
66337: AND
66338: IFFALSE 66350
// result := true else
66340: LD_ADDR_VAR 0 3
66344: PUSH
66345: LD_INT 1
66347: ST_TO_ADDR
66348: GO 66358
// result := false ;
66350: LD_ADDR_VAR 0 3
66354: PUSH
66355: LD_INT 0
66357: ST_TO_ADDR
// end else
66358: GO 66368
// result := false ;
66360: LD_ADDR_VAR 0 3
66364: PUSH
66365: LD_INT 0
66367: ST_TO_ADDR
// end ;
66368: LD_VAR 0 3
66372: RET
// export function HealTarget ( sci ) ; begin
66373: LD_INT 0
66375: PPUSH
// if not sci then
66376: LD_VAR 0 1
66380: NOT
66381: IFFALSE 66385
// exit ;
66383: GO 66450
// result := 0 ;
66385: LD_ADDR_VAR 0 2
66389: PUSH
66390: LD_INT 0
66392: ST_TO_ADDR
// if GetTaskList ( sci ) then
66393: LD_VAR 0 1
66397: PPUSH
66398: CALL_OW 437
66402: IFFALSE 66450
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66404: LD_VAR 0 1
66408: PPUSH
66409: CALL_OW 437
66413: PUSH
66414: LD_INT 1
66416: ARRAY
66417: PUSH
66418: LD_INT 1
66420: ARRAY
66421: PUSH
66422: LD_STRING l
66424: EQUAL
66425: IFFALSE 66450
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66427: LD_ADDR_VAR 0 2
66431: PUSH
66432: LD_VAR 0 1
66436: PPUSH
66437: CALL_OW 437
66441: PUSH
66442: LD_INT 1
66444: ARRAY
66445: PUSH
66446: LD_INT 4
66448: ARRAY
66449: ST_TO_ADDR
// end ;
66450: LD_VAR 0 2
66454: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66455: LD_INT 0
66457: PPUSH
66458: PPUSH
66459: PPUSH
66460: PPUSH
// if not base_units then
66461: LD_VAR 0 1
66465: NOT
66466: IFFALSE 66470
// exit ;
66468: GO 66557
// result := false ;
66470: LD_ADDR_VAR 0 2
66474: PUSH
66475: LD_INT 0
66477: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66478: LD_ADDR_VAR 0 5
66482: PUSH
66483: LD_VAR 0 1
66487: PPUSH
66488: LD_INT 21
66490: PUSH
66491: LD_INT 3
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PPUSH
66498: CALL_OW 72
66502: ST_TO_ADDR
// if not tmp then
66503: LD_VAR 0 5
66507: NOT
66508: IFFALSE 66512
// exit ;
66510: GO 66557
// for i in tmp do
66512: LD_ADDR_VAR 0 3
66516: PUSH
66517: LD_VAR 0 5
66521: PUSH
66522: FOR_IN
66523: IFFALSE 66555
// begin result := EnemyInRange ( i , 22 ) ;
66525: LD_ADDR_VAR 0 2
66529: PUSH
66530: LD_VAR 0 3
66534: PPUSH
66535: LD_INT 22
66537: PPUSH
66538: CALL 64793 0 2
66542: ST_TO_ADDR
// if result then
66543: LD_VAR 0 2
66547: IFFALSE 66553
// exit ;
66549: POP
66550: POP
66551: GO 66557
// end ;
66553: GO 66522
66555: POP
66556: POP
// end ;
66557: LD_VAR 0 2
66561: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66562: LD_INT 0
66564: PPUSH
66565: PPUSH
// if not units then
66566: LD_VAR 0 1
66570: NOT
66571: IFFALSE 66575
// exit ;
66573: GO 66645
// result := [ ] ;
66575: LD_ADDR_VAR 0 3
66579: PUSH
66580: EMPTY
66581: ST_TO_ADDR
// for i in units do
66582: LD_ADDR_VAR 0 4
66586: PUSH
66587: LD_VAR 0 1
66591: PUSH
66592: FOR_IN
66593: IFFALSE 66643
// if GetTag ( i ) = tag then
66595: LD_VAR 0 4
66599: PPUSH
66600: CALL_OW 110
66604: PUSH
66605: LD_VAR 0 2
66609: EQUAL
66610: IFFALSE 66641
// result := Replace ( result , result + 1 , i ) ;
66612: LD_ADDR_VAR 0 3
66616: PUSH
66617: LD_VAR 0 3
66621: PPUSH
66622: LD_VAR 0 3
66626: PUSH
66627: LD_INT 1
66629: PLUS
66630: PPUSH
66631: LD_VAR 0 4
66635: PPUSH
66636: CALL_OW 1
66640: ST_TO_ADDR
66641: GO 66592
66643: POP
66644: POP
// end ;
66645: LD_VAR 0 3
66649: RET
// export function IsDriver ( un ) ; begin
66650: LD_INT 0
66652: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66653: LD_ADDR_VAR 0 2
66657: PUSH
66658: LD_VAR 0 1
66662: PUSH
66663: LD_INT 55
66665: PUSH
66666: EMPTY
66667: LIST
66668: PPUSH
66669: CALL_OW 69
66673: IN
66674: ST_TO_ADDR
// end ;
66675: LD_VAR 0 2
66679: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66680: LD_INT 0
66682: PPUSH
66683: PPUSH
// list := [ ] ;
66684: LD_ADDR_VAR 0 5
66688: PUSH
66689: EMPTY
66690: ST_TO_ADDR
// case d of 0 :
66691: LD_VAR 0 3
66695: PUSH
66696: LD_INT 0
66698: DOUBLE
66699: EQUAL
66700: IFTRUE 66704
66702: GO 66837
66704: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66705: LD_ADDR_VAR 0 5
66709: PUSH
66710: LD_VAR 0 1
66714: PUSH
66715: LD_INT 4
66717: MINUS
66718: PUSH
66719: LD_VAR 0 2
66723: PUSH
66724: LD_INT 4
66726: MINUS
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: PUSH
66736: LD_VAR 0 1
66740: PUSH
66741: LD_INT 3
66743: MINUS
66744: PUSH
66745: LD_VAR 0 2
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: LD_VAR 0 1
66762: PUSH
66763: LD_INT 4
66765: PLUS
66766: PUSH
66767: LD_VAR 0 2
66771: PUSH
66772: LD_INT 4
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: LIST
66779: PUSH
66780: LD_VAR 0 1
66784: PUSH
66785: LD_INT 3
66787: PLUS
66788: PUSH
66789: LD_VAR 0 2
66793: PUSH
66794: LD_INT 3
66796: PLUS
66797: PUSH
66798: LD_INT 5
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: LIST
66805: PUSH
66806: LD_VAR 0 1
66810: PUSH
66811: LD_VAR 0 2
66815: PUSH
66816: LD_INT 4
66818: PLUS
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// end ; 1 :
66835: GO 67535
66837: LD_INT 1
66839: DOUBLE
66840: EQUAL
66841: IFTRUE 66845
66843: GO 66978
66845: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66846: LD_ADDR_VAR 0 5
66850: PUSH
66851: LD_VAR 0 1
66855: PUSH
66856: LD_VAR 0 2
66860: PUSH
66861: LD_INT 4
66863: MINUS
66864: PUSH
66865: LD_INT 3
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: PUSH
66873: LD_VAR 0 1
66877: PUSH
66878: LD_INT 3
66880: MINUS
66881: PUSH
66882: LD_VAR 0 2
66886: PUSH
66887: LD_INT 3
66889: MINUS
66890: PUSH
66891: LD_INT 2
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: LIST
66898: PUSH
66899: LD_VAR 0 1
66903: PUSH
66904: LD_INT 4
66906: MINUS
66907: PUSH
66908: LD_VAR 0 2
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: PUSH
66921: LD_VAR 0 1
66925: PUSH
66926: LD_VAR 0 2
66930: PUSH
66931: LD_INT 3
66933: PLUS
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: LIST
66942: PUSH
66943: LD_VAR 0 1
66947: PUSH
66948: LD_INT 4
66950: PLUS
66951: PUSH
66952: LD_VAR 0 2
66956: PUSH
66957: LD_INT 4
66959: PLUS
66960: PUSH
66961: LD_INT 5
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// end ; 2 :
66976: GO 67535
66978: LD_INT 2
66980: DOUBLE
66981: EQUAL
66982: IFTRUE 66986
66984: GO 67115
66986: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66987: LD_ADDR_VAR 0 5
66991: PUSH
66992: LD_VAR 0 1
66996: PUSH
66997: LD_VAR 0 2
67001: PUSH
67002: LD_INT 3
67004: MINUS
67005: PUSH
67006: LD_INT 3
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: PUSH
67014: LD_VAR 0 1
67018: PUSH
67019: LD_INT 4
67021: PLUS
67022: PUSH
67023: LD_VAR 0 2
67027: PUSH
67028: LD_INT 4
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: PUSH
67036: LD_VAR 0 1
67040: PUSH
67041: LD_VAR 0 2
67045: PUSH
67046: LD_INT 4
67048: PLUS
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: PUSH
67058: LD_VAR 0 1
67062: PUSH
67063: LD_INT 3
67065: MINUS
67066: PUSH
67067: LD_VAR 0 2
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: PUSH
67080: LD_VAR 0 1
67084: PUSH
67085: LD_INT 4
67087: MINUS
67088: PUSH
67089: LD_VAR 0 2
67093: PUSH
67094: LD_INT 4
67096: MINUS
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: ST_TO_ADDR
// end ; 3 :
67113: GO 67535
67115: LD_INT 3
67117: DOUBLE
67118: EQUAL
67119: IFTRUE 67123
67121: GO 67256
67123: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67124: LD_ADDR_VAR 0 5
67128: PUSH
67129: LD_VAR 0 1
67133: PUSH
67134: LD_INT 3
67136: PLUS
67137: PUSH
67138: LD_VAR 0 2
67142: PUSH
67143: LD_INT 4
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: LIST
67150: PUSH
67151: LD_VAR 0 1
67155: PUSH
67156: LD_INT 4
67158: PLUS
67159: PUSH
67160: LD_VAR 0 2
67164: PUSH
67165: LD_INT 4
67167: PLUS
67168: PUSH
67169: LD_INT 5
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: PUSH
67177: LD_VAR 0 1
67181: PUSH
67182: LD_INT 4
67184: MINUS
67185: PUSH
67186: LD_VAR 0 2
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: PUSH
67199: LD_VAR 0 1
67203: PUSH
67204: LD_VAR 0 2
67208: PUSH
67209: LD_INT 4
67211: MINUS
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: PUSH
67221: LD_VAR 0 1
67225: PUSH
67226: LD_INT 3
67228: MINUS
67229: PUSH
67230: LD_VAR 0 2
67234: PUSH
67235: LD_INT 3
67237: MINUS
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: LIST
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: ST_TO_ADDR
// end ; 4 :
67254: GO 67535
67256: LD_INT 4
67258: DOUBLE
67259: EQUAL
67260: IFTRUE 67264
67262: GO 67397
67264: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67265: LD_ADDR_VAR 0 5
67269: PUSH
67270: LD_VAR 0 1
67274: PUSH
67275: LD_VAR 0 2
67279: PUSH
67280: LD_INT 4
67282: PLUS
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: LIST
67291: PUSH
67292: LD_VAR 0 1
67296: PUSH
67297: LD_INT 3
67299: PLUS
67300: PUSH
67301: LD_VAR 0 2
67305: PUSH
67306: LD_INT 3
67308: PLUS
67309: PUSH
67310: LD_INT 5
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: PUSH
67318: LD_VAR 0 1
67322: PUSH
67323: LD_INT 4
67325: PLUS
67326: PUSH
67327: LD_VAR 0 2
67331: PUSH
67332: LD_INT 4
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: PUSH
67340: LD_VAR 0 1
67344: PUSH
67345: LD_VAR 0 2
67349: PUSH
67350: LD_INT 3
67352: MINUS
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: PUSH
67362: LD_VAR 0 1
67366: PUSH
67367: LD_INT 4
67369: MINUS
67370: PUSH
67371: LD_VAR 0 2
67375: PUSH
67376: LD_INT 4
67378: MINUS
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: ST_TO_ADDR
// end ; 5 :
67395: GO 67535
67397: LD_INT 5
67399: DOUBLE
67400: EQUAL
67401: IFTRUE 67405
67403: GO 67534
67405: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67406: LD_ADDR_VAR 0 5
67410: PUSH
67411: LD_VAR 0 1
67415: PUSH
67416: LD_INT 4
67418: MINUS
67419: PUSH
67420: LD_VAR 0 2
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: LIST
67432: PUSH
67433: LD_VAR 0 1
67437: PUSH
67438: LD_VAR 0 2
67442: PUSH
67443: LD_INT 4
67445: MINUS
67446: PUSH
67447: LD_INT 3
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: PUSH
67455: LD_VAR 0 1
67459: PUSH
67460: LD_INT 4
67462: PLUS
67463: PUSH
67464: LD_VAR 0 2
67468: PUSH
67469: LD_INT 4
67471: PLUS
67472: PUSH
67473: LD_INT 5
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: LIST
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: LD_INT 3
67488: PLUS
67489: PUSH
67490: LD_VAR 0 2
67494: PUSH
67495: LD_INT 4
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: PUSH
67503: LD_VAR 0 1
67507: PUSH
67508: LD_VAR 0 2
67512: PUSH
67513: LD_INT 3
67515: PLUS
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: ST_TO_ADDR
// end ; end ;
67532: GO 67535
67534: POP
// result := list ;
67535: LD_ADDR_VAR 0 4
67539: PUSH
67540: LD_VAR 0 5
67544: ST_TO_ADDR
// end ;
67545: LD_VAR 0 4
67549: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67550: LD_INT 0
67552: PPUSH
67553: PPUSH
67554: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67555: LD_VAR 0 1
67559: NOT
67560: PUSH
67561: LD_VAR 0 2
67565: PUSH
67566: LD_INT 1
67568: PUSH
67569: LD_INT 2
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: LD_INT 4
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: IN
67584: NOT
67585: OR
67586: IFFALSE 67590
// exit ;
67588: GO 67682
// tmp := [ ] ;
67590: LD_ADDR_VAR 0 5
67594: PUSH
67595: EMPTY
67596: ST_TO_ADDR
// for i in units do
67597: LD_ADDR_VAR 0 4
67601: PUSH
67602: LD_VAR 0 1
67606: PUSH
67607: FOR_IN
67608: IFFALSE 67651
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67610: LD_ADDR_VAR 0 5
67614: PUSH
67615: LD_VAR 0 5
67619: PPUSH
67620: LD_VAR 0 5
67624: PUSH
67625: LD_INT 1
67627: PLUS
67628: PPUSH
67629: LD_VAR 0 4
67633: PPUSH
67634: LD_VAR 0 2
67638: PPUSH
67639: CALL_OW 259
67643: PPUSH
67644: CALL_OW 2
67648: ST_TO_ADDR
67649: GO 67607
67651: POP
67652: POP
// if not tmp then
67653: LD_VAR 0 5
67657: NOT
67658: IFFALSE 67662
// exit ;
67660: GO 67682
// result := SortListByListDesc ( units , tmp ) ;
67662: LD_ADDR_VAR 0 3
67666: PUSH
67667: LD_VAR 0 1
67671: PPUSH
67672: LD_VAR 0 5
67676: PPUSH
67677: CALL_OW 77
67681: ST_TO_ADDR
// end ;
67682: LD_VAR 0 3
67686: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67687: LD_INT 0
67689: PPUSH
67690: PPUSH
67691: PPUSH
// result := false ;
67692: LD_ADDR_VAR 0 3
67696: PUSH
67697: LD_INT 0
67699: ST_TO_ADDR
// x := GetX ( building ) ;
67700: LD_ADDR_VAR 0 4
67704: PUSH
67705: LD_VAR 0 2
67709: PPUSH
67710: CALL_OW 250
67714: ST_TO_ADDR
// y := GetY ( building ) ;
67715: LD_ADDR_VAR 0 5
67719: PUSH
67720: LD_VAR 0 2
67724: PPUSH
67725: CALL_OW 251
67729: ST_TO_ADDR
// if not building or not x or not y then
67730: LD_VAR 0 2
67734: NOT
67735: PUSH
67736: LD_VAR 0 4
67740: NOT
67741: OR
67742: PUSH
67743: LD_VAR 0 5
67747: NOT
67748: OR
67749: IFFALSE 67753
// exit ;
67751: GO 67845
// if GetTaskList ( unit ) then
67753: LD_VAR 0 1
67757: PPUSH
67758: CALL_OW 437
67762: IFFALSE 67845
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67764: LD_STRING e
67766: PUSH
67767: LD_VAR 0 1
67771: PPUSH
67772: CALL_OW 437
67776: PUSH
67777: LD_INT 1
67779: ARRAY
67780: PUSH
67781: LD_INT 1
67783: ARRAY
67784: EQUAL
67785: PUSH
67786: LD_VAR 0 4
67790: PUSH
67791: LD_VAR 0 1
67795: PPUSH
67796: CALL_OW 437
67800: PUSH
67801: LD_INT 1
67803: ARRAY
67804: PUSH
67805: LD_INT 2
67807: ARRAY
67808: EQUAL
67809: AND
67810: PUSH
67811: LD_VAR 0 5
67815: PUSH
67816: LD_VAR 0 1
67820: PPUSH
67821: CALL_OW 437
67825: PUSH
67826: LD_INT 1
67828: ARRAY
67829: PUSH
67830: LD_INT 3
67832: ARRAY
67833: EQUAL
67834: AND
67835: IFFALSE 67845
// result := true end ;
67837: LD_ADDR_VAR 0 3
67841: PUSH
67842: LD_INT 1
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 3
67849: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67850: LD_INT 0
67852: PPUSH
// result := false ;
67853: LD_ADDR_VAR 0 4
67857: PUSH
67858: LD_INT 0
67860: ST_TO_ADDR
// if GetTaskList ( unit ) then
67861: LD_VAR 0 1
67865: PPUSH
67866: CALL_OW 437
67870: IFFALSE 67953
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67872: LD_STRING M
67874: PUSH
67875: LD_VAR 0 1
67879: PPUSH
67880: CALL_OW 437
67884: PUSH
67885: LD_INT 1
67887: ARRAY
67888: PUSH
67889: LD_INT 1
67891: ARRAY
67892: EQUAL
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: LD_VAR 0 1
67903: PPUSH
67904: CALL_OW 437
67908: PUSH
67909: LD_INT 1
67911: ARRAY
67912: PUSH
67913: LD_INT 2
67915: ARRAY
67916: EQUAL
67917: AND
67918: PUSH
67919: LD_VAR 0 3
67923: PUSH
67924: LD_VAR 0 1
67928: PPUSH
67929: CALL_OW 437
67933: PUSH
67934: LD_INT 1
67936: ARRAY
67937: PUSH
67938: LD_INT 3
67940: ARRAY
67941: EQUAL
67942: AND
67943: IFFALSE 67953
// result := true ;
67945: LD_ADDR_VAR 0 4
67949: PUSH
67950: LD_INT 1
67952: ST_TO_ADDR
// end ; end ;
67953: LD_VAR 0 4
67957: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67958: LD_INT 0
67960: PPUSH
67961: PPUSH
67962: PPUSH
67963: PPUSH
// if not unit or not area then
67964: LD_VAR 0 1
67968: NOT
67969: PUSH
67970: LD_VAR 0 2
67974: NOT
67975: OR
67976: IFFALSE 67980
// exit ;
67978: GO 68144
// tmp := AreaToList ( area , i ) ;
67980: LD_ADDR_VAR 0 6
67984: PUSH
67985: LD_VAR 0 2
67989: PPUSH
67990: LD_VAR 0 5
67994: PPUSH
67995: CALL_OW 517
67999: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68000: LD_ADDR_VAR 0 5
68004: PUSH
68005: DOUBLE
68006: LD_INT 1
68008: DEC
68009: ST_TO_ADDR
68010: LD_VAR 0 6
68014: PUSH
68015: LD_INT 1
68017: ARRAY
68018: PUSH
68019: FOR_TO
68020: IFFALSE 68142
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68022: LD_ADDR_VAR 0 7
68026: PUSH
68027: LD_VAR 0 6
68031: PUSH
68032: LD_INT 1
68034: ARRAY
68035: PUSH
68036: LD_VAR 0 5
68040: ARRAY
68041: PUSH
68042: LD_VAR 0 6
68046: PUSH
68047: LD_INT 2
68049: ARRAY
68050: PUSH
68051: LD_VAR 0 5
68055: ARRAY
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68061: LD_VAR 0 7
68065: PUSH
68066: LD_INT 1
68068: ARRAY
68069: PPUSH
68070: LD_VAR 0 7
68074: PUSH
68075: LD_INT 2
68077: ARRAY
68078: PPUSH
68079: CALL_OW 428
68083: PUSH
68084: LD_INT 0
68086: EQUAL
68087: IFFALSE 68140
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68089: LD_VAR 0 1
68093: PPUSH
68094: LD_VAR 0 7
68098: PUSH
68099: LD_INT 1
68101: ARRAY
68102: PPUSH
68103: LD_VAR 0 7
68107: PUSH
68108: LD_INT 2
68110: ARRAY
68111: PPUSH
68112: LD_VAR 0 3
68116: PPUSH
68117: CALL_OW 48
// result := IsPlaced ( unit ) ;
68121: LD_ADDR_VAR 0 4
68125: PUSH
68126: LD_VAR 0 1
68130: PPUSH
68131: CALL_OW 305
68135: ST_TO_ADDR
// exit ;
68136: POP
68137: POP
68138: GO 68144
// end ; end ;
68140: GO 68019
68142: POP
68143: POP
// end ;
68144: LD_VAR 0 4
68148: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68149: LD_INT 0
68151: PPUSH
68152: PPUSH
68153: PPUSH
// if not side or side > 8 then
68154: LD_VAR 0 1
68158: NOT
68159: PUSH
68160: LD_VAR 0 1
68164: PUSH
68165: LD_INT 8
68167: GREATER
68168: OR
68169: IFFALSE 68173
// exit ;
68171: GO 68360
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68173: LD_ADDR_VAR 0 4
68177: PUSH
68178: LD_INT 22
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 21
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PPUSH
68204: CALL_OW 69
68208: ST_TO_ADDR
// if not tmp then
68209: LD_VAR 0 4
68213: NOT
68214: IFFALSE 68218
// exit ;
68216: GO 68360
// enable_addtolog := true ;
68218: LD_ADDR_OWVAR 81
68222: PUSH
68223: LD_INT 1
68225: ST_TO_ADDR
// AddToLog ( [ ) ;
68226: LD_STRING [
68228: PPUSH
68229: CALL_OW 561
// for i in tmp do
68233: LD_ADDR_VAR 0 3
68237: PUSH
68238: LD_VAR 0 4
68242: PUSH
68243: FOR_IN
68244: IFFALSE 68351
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68246: LD_STRING [
68248: PUSH
68249: LD_VAR 0 3
68253: PPUSH
68254: CALL_OW 266
68258: STR
68259: PUSH
68260: LD_STRING , 
68262: STR
68263: PUSH
68264: LD_VAR 0 3
68268: PPUSH
68269: CALL_OW 250
68273: STR
68274: PUSH
68275: LD_STRING , 
68277: STR
68278: PUSH
68279: LD_VAR 0 3
68283: PPUSH
68284: CALL_OW 251
68288: STR
68289: PUSH
68290: LD_STRING , 
68292: STR
68293: PUSH
68294: LD_VAR 0 3
68298: PPUSH
68299: CALL_OW 254
68303: STR
68304: PUSH
68305: LD_STRING , 
68307: STR
68308: PUSH
68309: LD_VAR 0 3
68313: PPUSH
68314: LD_INT 1
68316: PPUSH
68317: CALL_OW 268
68321: STR
68322: PUSH
68323: LD_STRING , 
68325: STR
68326: PUSH
68327: LD_VAR 0 3
68331: PPUSH
68332: LD_INT 2
68334: PPUSH
68335: CALL_OW 268
68339: STR
68340: PUSH
68341: LD_STRING ],
68343: STR
68344: PPUSH
68345: CALL_OW 561
// end ;
68349: GO 68243
68351: POP
68352: POP
// AddToLog ( ]; ) ;
68353: LD_STRING ];
68355: PPUSH
68356: CALL_OW 561
// end ;
68360: LD_VAR 0 2
68364: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68365: LD_INT 0
68367: PPUSH
68368: PPUSH
68369: PPUSH
68370: PPUSH
68371: PPUSH
// if not area or not rate or not max then
68372: LD_VAR 0 1
68376: NOT
68377: PUSH
68378: LD_VAR 0 2
68382: NOT
68383: OR
68384: PUSH
68385: LD_VAR 0 4
68389: NOT
68390: OR
68391: IFFALSE 68395
// exit ;
68393: GO 68587
// while 1 do
68395: LD_INT 1
68397: IFFALSE 68587
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68399: LD_ADDR_VAR 0 9
68403: PUSH
68404: LD_VAR 0 1
68408: PPUSH
68409: LD_INT 1
68411: PPUSH
68412: CALL_OW 287
68416: PUSH
68417: LD_INT 10
68419: MUL
68420: ST_TO_ADDR
// r := rate / 10 ;
68421: LD_ADDR_VAR 0 7
68425: PUSH
68426: LD_VAR 0 2
68430: PUSH
68431: LD_INT 10
68433: DIVREAL
68434: ST_TO_ADDR
// time := 1 1$00 ;
68435: LD_ADDR_VAR 0 8
68439: PUSH
68440: LD_INT 2100
68442: ST_TO_ADDR
// if amount < min then
68443: LD_VAR 0 9
68447: PUSH
68448: LD_VAR 0 3
68452: LESS
68453: IFFALSE 68471
// r := r * 2 else
68455: LD_ADDR_VAR 0 7
68459: PUSH
68460: LD_VAR 0 7
68464: PUSH
68465: LD_INT 2
68467: MUL
68468: ST_TO_ADDR
68469: GO 68497
// if amount > max then
68471: LD_VAR 0 9
68475: PUSH
68476: LD_VAR 0 4
68480: GREATER
68481: IFFALSE 68497
// r := r / 2 ;
68483: LD_ADDR_VAR 0 7
68487: PUSH
68488: LD_VAR 0 7
68492: PUSH
68493: LD_INT 2
68495: DIVREAL
68496: ST_TO_ADDR
// time := time / r ;
68497: LD_ADDR_VAR 0 8
68501: PUSH
68502: LD_VAR 0 8
68506: PUSH
68507: LD_VAR 0 7
68511: DIVREAL
68512: ST_TO_ADDR
// if time < 0 then
68513: LD_VAR 0 8
68517: PUSH
68518: LD_INT 0
68520: LESS
68521: IFFALSE 68538
// time := time * - 1 ;
68523: LD_ADDR_VAR 0 8
68527: PUSH
68528: LD_VAR 0 8
68532: PUSH
68533: LD_INT 1
68535: NEG
68536: MUL
68537: ST_TO_ADDR
// wait ( time ) ;
68538: LD_VAR 0 8
68542: PPUSH
68543: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68547: LD_INT 35
68549: PPUSH
68550: LD_INT 875
68552: PPUSH
68553: CALL_OW 12
68557: PPUSH
68558: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68562: LD_INT 1
68564: PPUSH
68565: LD_INT 5
68567: PPUSH
68568: CALL_OW 12
68572: PPUSH
68573: LD_VAR 0 1
68577: PPUSH
68578: LD_INT 1
68580: PPUSH
68581: CALL_OW 55
// end ;
68585: GO 68395
// end ;
68587: LD_VAR 0 5
68591: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68592: LD_INT 0
68594: PPUSH
68595: PPUSH
68596: PPUSH
68597: PPUSH
68598: PPUSH
68599: PPUSH
68600: PPUSH
68601: PPUSH
// if not turrets or not factories then
68602: LD_VAR 0 1
68606: NOT
68607: PUSH
68608: LD_VAR 0 2
68612: NOT
68613: OR
68614: IFFALSE 68618
// exit ;
68616: GO 68925
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68618: LD_ADDR_VAR 0 10
68622: PUSH
68623: LD_INT 5
68625: PUSH
68626: LD_INT 6
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: LD_INT 4
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: LD_INT 5
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 24
68660: PUSH
68661: LD_INT 25
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 23
68670: PUSH
68671: LD_INT 27
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 42
68684: PUSH
68685: LD_INT 43
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 44
68694: PUSH
68695: LD_INT 46
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 45
68704: PUSH
68705: LD_INT 47
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: LIST
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: LIST
68721: ST_TO_ADDR
// result := [ ] ;
68722: LD_ADDR_VAR 0 3
68726: PUSH
68727: EMPTY
68728: ST_TO_ADDR
// for i in turrets do
68729: LD_ADDR_VAR 0 4
68733: PUSH
68734: LD_VAR 0 1
68738: PUSH
68739: FOR_IN
68740: IFFALSE 68923
// begin nat := GetNation ( i ) ;
68742: LD_ADDR_VAR 0 7
68746: PUSH
68747: LD_VAR 0 4
68751: PPUSH
68752: CALL_OW 248
68756: ST_TO_ADDR
// weapon := 0 ;
68757: LD_ADDR_VAR 0 8
68761: PUSH
68762: LD_INT 0
68764: ST_TO_ADDR
// if not nat then
68765: LD_VAR 0 7
68769: NOT
68770: IFFALSE 68774
// continue ;
68772: GO 68739
// for j in list [ nat ] do
68774: LD_ADDR_VAR 0 5
68778: PUSH
68779: LD_VAR 0 10
68783: PUSH
68784: LD_VAR 0 7
68788: ARRAY
68789: PUSH
68790: FOR_IN
68791: IFFALSE 68832
// if GetBWeapon ( i ) = j [ 1 ] then
68793: LD_VAR 0 4
68797: PPUSH
68798: CALL_OW 269
68802: PUSH
68803: LD_VAR 0 5
68807: PUSH
68808: LD_INT 1
68810: ARRAY
68811: EQUAL
68812: IFFALSE 68830
// begin weapon := j [ 2 ] ;
68814: LD_ADDR_VAR 0 8
68818: PUSH
68819: LD_VAR 0 5
68823: PUSH
68824: LD_INT 2
68826: ARRAY
68827: ST_TO_ADDR
// break ;
68828: GO 68832
// end ;
68830: GO 68790
68832: POP
68833: POP
// if not weapon then
68834: LD_VAR 0 8
68838: NOT
68839: IFFALSE 68843
// continue ;
68841: GO 68739
// for k in factories do
68843: LD_ADDR_VAR 0 6
68847: PUSH
68848: LD_VAR 0 2
68852: PUSH
68853: FOR_IN
68854: IFFALSE 68919
// begin weapons := AvailableWeaponList ( k ) ;
68856: LD_ADDR_VAR 0 9
68860: PUSH
68861: LD_VAR 0 6
68865: PPUSH
68866: CALL_OW 478
68870: ST_TO_ADDR
// if not weapons then
68871: LD_VAR 0 9
68875: NOT
68876: IFFALSE 68880
// continue ;
68878: GO 68853
// if weapon in weapons then
68880: LD_VAR 0 8
68884: PUSH
68885: LD_VAR 0 9
68889: IN
68890: IFFALSE 68917
// begin result := [ i , weapon ] ;
68892: LD_ADDR_VAR 0 3
68896: PUSH
68897: LD_VAR 0 4
68901: PUSH
68902: LD_VAR 0 8
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: ST_TO_ADDR
// exit ;
68911: POP
68912: POP
68913: POP
68914: POP
68915: GO 68925
// end ; end ;
68917: GO 68853
68919: POP
68920: POP
// end ;
68921: GO 68739
68923: POP
68924: POP
// end ;
68925: LD_VAR 0 3
68929: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68930: LD_INT 0
68932: PPUSH
// if not side or side > 8 then
68933: LD_VAR 0 3
68937: NOT
68938: PUSH
68939: LD_VAR 0 3
68943: PUSH
68944: LD_INT 8
68946: GREATER
68947: OR
68948: IFFALSE 68952
// exit ;
68950: GO 69011
// if not range then
68952: LD_VAR 0 4
68956: NOT
68957: IFFALSE 68968
// range := - 12 ;
68959: LD_ADDR_VAR 0 4
68963: PUSH
68964: LD_INT 12
68966: NEG
68967: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68968: LD_VAR 0 1
68972: PPUSH
68973: LD_VAR 0 2
68977: PPUSH
68978: LD_VAR 0 3
68982: PPUSH
68983: LD_VAR 0 4
68987: PPUSH
68988: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68992: LD_VAR 0 1
68996: PPUSH
68997: LD_VAR 0 2
69001: PPUSH
69002: LD_VAR 0 3
69006: PPUSH
69007: CALL_OW 331
// end ;
69011: LD_VAR 0 5
69015: RET
// export function Video ( mode ) ; begin
69016: LD_INT 0
69018: PPUSH
// ingame_video = mode ;
69019: LD_ADDR_OWVAR 52
69023: PUSH
69024: LD_VAR 0 1
69028: ST_TO_ADDR
// interface_hidden = mode ;
69029: LD_ADDR_OWVAR 54
69033: PUSH
69034: LD_VAR 0 1
69038: ST_TO_ADDR
// end ;
69039: LD_VAR 0 2
69043: RET
// export function Join ( array , element ) ; begin
69044: LD_INT 0
69046: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69047: LD_ADDR_VAR 0 3
69051: PUSH
69052: LD_VAR 0 1
69056: PPUSH
69057: LD_VAR 0 1
69061: PUSH
69062: LD_INT 1
69064: PLUS
69065: PPUSH
69066: LD_VAR 0 2
69070: PPUSH
69071: CALL_OW 1
69075: ST_TO_ADDR
// end ;
69076: LD_VAR 0 3
69080: RET
// export function JoinUnion ( array , element ) ; begin
69081: LD_INT 0
69083: PPUSH
// result := array union element ;
69084: LD_ADDR_VAR 0 3
69088: PUSH
69089: LD_VAR 0 1
69093: PUSH
69094: LD_VAR 0 2
69098: UNION
69099: ST_TO_ADDR
// end ;
69100: LD_VAR 0 3
69104: RET
// export function GetBehemoths ( side ) ; begin
69105: LD_INT 0
69107: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69108: LD_ADDR_VAR 0 2
69112: PUSH
69113: LD_INT 22
69115: PUSH
69116: LD_VAR 0 1
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 31
69127: PUSH
69128: LD_INT 25
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PPUSH
69139: CALL_OW 69
69143: ST_TO_ADDR
// end ;
69144: LD_VAR 0 2
69148: RET
// export function Shuffle ( array ) ; var i , index ; begin
69149: LD_INT 0
69151: PPUSH
69152: PPUSH
69153: PPUSH
// result := [ ] ;
69154: LD_ADDR_VAR 0 2
69158: PUSH
69159: EMPTY
69160: ST_TO_ADDR
// if not array then
69161: LD_VAR 0 1
69165: NOT
69166: IFFALSE 69170
// exit ;
69168: GO 69269
// Randomize ;
69170: CALL_OW 10
// for i = array downto 1 do
69174: LD_ADDR_VAR 0 3
69178: PUSH
69179: DOUBLE
69180: LD_VAR 0 1
69184: INC
69185: ST_TO_ADDR
69186: LD_INT 1
69188: PUSH
69189: FOR_DOWNTO
69190: IFFALSE 69267
// begin index := rand ( 1 , array ) ;
69192: LD_ADDR_VAR 0 4
69196: PUSH
69197: LD_INT 1
69199: PPUSH
69200: LD_VAR 0 1
69204: PPUSH
69205: CALL_OW 12
69209: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69210: LD_ADDR_VAR 0 2
69214: PUSH
69215: LD_VAR 0 2
69219: PPUSH
69220: LD_VAR 0 2
69224: PUSH
69225: LD_INT 1
69227: PLUS
69228: PPUSH
69229: LD_VAR 0 1
69233: PUSH
69234: LD_VAR 0 4
69238: ARRAY
69239: PPUSH
69240: CALL_OW 2
69244: ST_TO_ADDR
// array := Delete ( array , index ) ;
69245: LD_ADDR_VAR 0 1
69249: PUSH
69250: LD_VAR 0 1
69254: PPUSH
69255: LD_VAR 0 4
69259: PPUSH
69260: CALL_OW 3
69264: ST_TO_ADDR
// end ;
69265: GO 69189
69267: POP
69268: POP
// end ;
69269: LD_VAR 0 2
69273: RET
// export function GetBaseMaterials ( base ) ; begin
69274: LD_INT 0
69276: PPUSH
// result := [ 0 , 0 , 0 ] ;
69277: LD_ADDR_VAR 0 2
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: LIST
69295: ST_TO_ADDR
// if not base then
69296: LD_VAR 0 1
69300: NOT
69301: IFFALSE 69305
// exit ;
69303: GO 69354
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69305: LD_ADDR_VAR 0 2
69309: PUSH
69310: LD_VAR 0 1
69314: PPUSH
69315: LD_INT 1
69317: PPUSH
69318: CALL_OW 275
69322: PUSH
69323: LD_VAR 0 1
69327: PPUSH
69328: LD_INT 2
69330: PPUSH
69331: CALL_OW 275
69335: PUSH
69336: LD_VAR 0 1
69340: PPUSH
69341: LD_INT 3
69343: PPUSH
69344: CALL_OW 275
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: ST_TO_ADDR
// end ;
69354: LD_VAR 0 2
69358: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69359: LD_INT 0
69361: PPUSH
69362: PPUSH
// result := array ;
69363: LD_ADDR_VAR 0 3
69367: PUSH
69368: LD_VAR 0 1
69372: ST_TO_ADDR
// if size > 0 then
69373: LD_VAR 0 2
69377: PUSH
69378: LD_INT 0
69380: GREATER
69381: IFFALSE 69427
// for i := array downto size do
69383: LD_ADDR_VAR 0 4
69387: PUSH
69388: DOUBLE
69389: LD_VAR 0 1
69393: INC
69394: ST_TO_ADDR
69395: LD_VAR 0 2
69399: PUSH
69400: FOR_DOWNTO
69401: IFFALSE 69425
// result := Delete ( result , result ) ;
69403: LD_ADDR_VAR 0 3
69407: PUSH
69408: LD_VAR 0 3
69412: PPUSH
69413: LD_VAR 0 3
69417: PPUSH
69418: CALL_OW 3
69422: ST_TO_ADDR
69423: GO 69400
69425: POP
69426: POP
// end ;
69427: LD_VAR 0 3
69431: RET
// export function ComExit ( unit ) ; var tmp ; begin
69432: LD_INT 0
69434: PPUSH
69435: PPUSH
// if not IsInUnit ( unit ) then
69436: LD_VAR 0 1
69440: PPUSH
69441: CALL_OW 310
69445: NOT
69446: IFFALSE 69450
// exit ;
69448: GO 69510
// tmp := IsInUnit ( unit ) ;
69450: LD_ADDR_VAR 0 3
69454: PUSH
69455: LD_VAR 0 1
69459: PPUSH
69460: CALL_OW 310
69464: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69465: LD_VAR 0 3
69469: PPUSH
69470: CALL_OW 247
69474: PUSH
69475: LD_INT 2
69477: EQUAL
69478: IFFALSE 69491
// ComExitVehicle ( unit ) else
69480: LD_VAR 0 1
69484: PPUSH
69485: CALL_OW 121
69489: GO 69500
// ComExitBuilding ( unit ) ;
69491: LD_VAR 0 1
69495: PPUSH
69496: CALL_OW 122
// result := tmp ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: LD_VAR 0 3
69509: ST_TO_ADDR
// end ;
69510: LD_VAR 0 2
69514: RET
// export function ComExitAll ( units ) ; var i ; begin
69515: LD_INT 0
69517: PPUSH
69518: PPUSH
// if not units then
69519: LD_VAR 0 1
69523: NOT
69524: IFFALSE 69528
// exit ;
69526: GO 69554
// for i in units do
69528: LD_ADDR_VAR 0 3
69532: PUSH
69533: LD_VAR 0 1
69537: PUSH
69538: FOR_IN
69539: IFFALSE 69552
// ComExit ( i ) ;
69541: LD_VAR 0 3
69545: PPUSH
69546: CALL 69432 0 1
69550: GO 69538
69552: POP
69553: POP
// end ;
69554: LD_VAR 0 2
69558: RET
// export function ResetHc ; begin
69559: LD_INT 0
69561: PPUSH
// InitHc ;
69562: CALL_OW 19
// hc_importance := 0 ;
69566: LD_ADDR_OWVAR 32
69570: PUSH
69571: LD_INT 0
69573: ST_TO_ADDR
// end ;
69574: LD_VAR 0 1
69578: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69579: LD_INT 0
69581: PPUSH
69582: PPUSH
69583: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69584: LD_ADDR_VAR 0 6
69588: PUSH
69589: LD_VAR 0 1
69593: PUSH
69594: LD_VAR 0 3
69598: PLUS
69599: PUSH
69600: LD_INT 2
69602: DIV
69603: ST_TO_ADDR
// if _x < 0 then
69604: LD_VAR 0 6
69608: PUSH
69609: LD_INT 0
69611: LESS
69612: IFFALSE 69629
// _x := _x * - 1 ;
69614: LD_ADDR_VAR 0 6
69618: PUSH
69619: LD_VAR 0 6
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: MUL
69628: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69629: LD_ADDR_VAR 0 7
69633: PUSH
69634: LD_VAR 0 2
69638: PUSH
69639: LD_VAR 0 4
69643: PLUS
69644: PUSH
69645: LD_INT 2
69647: DIV
69648: ST_TO_ADDR
// if _y < 0 then
69649: LD_VAR 0 7
69653: PUSH
69654: LD_INT 0
69656: LESS
69657: IFFALSE 69674
// _y := _y * - 1 ;
69659: LD_ADDR_VAR 0 7
69663: PUSH
69664: LD_VAR 0 7
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: MUL
69673: ST_TO_ADDR
// result := [ _x , _y ] ;
69674: LD_ADDR_VAR 0 5
69678: PUSH
69679: LD_VAR 0 6
69683: PUSH
69684: LD_VAR 0 7
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: ST_TO_ADDR
// end ;
69693: LD_VAR 0 5
69697: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69698: LD_INT 0
69700: PPUSH
69701: PPUSH
69702: PPUSH
69703: PPUSH
// task := GetTaskList ( unit ) ;
69704: LD_ADDR_VAR 0 7
69708: PUSH
69709: LD_VAR 0 1
69713: PPUSH
69714: CALL_OW 437
69718: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69719: LD_VAR 0 7
69723: NOT
69724: PUSH
69725: LD_VAR 0 1
69729: PPUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: CALL_OW 308
69739: NOT
69740: AND
69741: IFFALSE 69745
// exit ;
69743: GO 69863
// if IsInArea ( unit , area ) then
69745: LD_VAR 0 1
69749: PPUSH
69750: LD_VAR 0 2
69754: PPUSH
69755: CALL_OW 308
69759: IFFALSE 69777
// begin ComMoveToArea ( unit , goAway ) ;
69761: LD_VAR 0 1
69765: PPUSH
69766: LD_VAR 0 3
69770: PPUSH
69771: CALL_OW 113
// exit ;
69775: GO 69863
// end ; if task [ 1 ] [ 1 ] <> M then
69777: LD_VAR 0 7
69781: PUSH
69782: LD_INT 1
69784: ARRAY
69785: PUSH
69786: LD_INT 1
69788: ARRAY
69789: PUSH
69790: LD_STRING M
69792: NONEQUAL
69793: IFFALSE 69797
// exit ;
69795: GO 69863
// x := task [ 1 ] [ 2 ] ;
69797: LD_ADDR_VAR 0 5
69801: PUSH
69802: LD_VAR 0 7
69806: PUSH
69807: LD_INT 1
69809: ARRAY
69810: PUSH
69811: LD_INT 2
69813: ARRAY
69814: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69815: LD_ADDR_VAR 0 6
69819: PUSH
69820: LD_VAR 0 7
69824: PUSH
69825: LD_INT 1
69827: ARRAY
69828: PUSH
69829: LD_INT 3
69831: ARRAY
69832: ST_TO_ADDR
// if InArea ( x , y , area ) then
69833: LD_VAR 0 5
69837: PPUSH
69838: LD_VAR 0 6
69842: PPUSH
69843: LD_VAR 0 2
69847: PPUSH
69848: CALL_OW 309
69852: IFFALSE 69863
// ComStop ( unit ) ;
69854: LD_VAR 0 1
69858: PPUSH
69859: CALL_OW 141
// end ;
69863: LD_VAR 0 4
69867: RET
// export function Abs ( value ) ; begin
69868: LD_INT 0
69870: PPUSH
// result := value ;
69871: LD_ADDR_VAR 0 2
69875: PUSH
69876: LD_VAR 0 1
69880: ST_TO_ADDR
// if value < 0 then
69881: LD_VAR 0 1
69885: PUSH
69886: LD_INT 0
69888: LESS
69889: IFFALSE 69906
// result := value * - 1 ;
69891: LD_ADDR_VAR 0 2
69895: PUSH
69896: LD_VAR 0 1
69900: PUSH
69901: LD_INT 1
69903: NEG
69904: MUL
69905: ST_TO_ADDR
// end ;
69906: LD_VAR 0 2
69910: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69911: LD_INT 0
69913: PPUSH
69914: PPUSH
69915: PPUSH
69916: PPUSH
69917: PPUSH
69918: PPUSH
69919: PPUSH
69920: PPUSH
// if not unit or not building then
69921: LD_VAR 0 1
69925: NOT
69926: PUSH
69927: LD_VAR 0 2
69931: NOT
69932: OR
69933: IFFALSE 69937
// exit ;
69935: GO 70163
// x := GetX ( building ) ;
69937: LD_ADDR_VAR 0 4
69941: PUSH
69942: LD_VAR 0 2
69946: PPUSH
69947: CALL_OW 250
69951: ST_TO_ADDR
// y := GetY ( building ) ;
69952: LD_ADDR_VAR 0 6
69956: PUSH
69957: LD_VAR 0 2
69961: PPUSH
69962: CALL_OW 251
69966: ST_TO_ADDR
// d := GetDir ( building ) ;
69967: LD_ADDR_VAR 0 8
69971: PUSH
69972: LD_VAR 0 2
69976: PPUSH
69977: CALL_OW 254
69981: ST_TO_ADDR
// r := 4 ;
69982: LD_ADDR_VAR 0 9
69986: PUSH
69987: LD_INT 4
69989: ST_TO_ADDR
// for i := 1 to 5 do
69990: LD_ADDR_VAR 0 10
69994: PUSH
69995: DOUBLE
69996: LD_INT 1
69998: DEC
69999: ST_TO_ADDR
70000: LD_INT 5
70002: PUSH
70003: FOR_TO
70004: IFFALSE 70161
// begin _x := ShiftX ( x , d , r + i ) ;
70006: LD_ADDR_VAR 0 5
70010: PUSH
70011: LD_VAR 0 4
70015: PPUSH
70016: LD_VAR 0 8
70020: PPUSH
70021: LD_VAR 0 9
70025: PUSH
70026: LD_VAR 0 10
70030: PLUS
70031: PPUSH
70032: CALL_OW 272
70036: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70037: LD_ADDR_VAR 0 7
70041: PUSH
70042: LD_VAR 0 6
70046: PPUSH
70047: LD_VAR 0 8
70051: PPUSH
70052: LD_VAR 0 9
70056: PUSH
70057: LD_VAR 0 10
70061: PLUS
70062: PPUSH
70063: CALL_OW 273
70067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70068: LD_VAR 0 5
70072: PPUSH
70073: LD_VAR 0 7
70077: PPUSH
70078: CALL_OW 488
70082: PUSH
70083: LD_VAR 0 5
70087: PPUSH
70088: LD_VAR 0 7
70092: PPUSH
70093: CALL_OW 428
70097: PPUSH
70098: CALL_OW 247
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: LD_INT 2
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: IN
70113: NOT
70114: AND
70115: IFFALSE 70159
// begin ComMoveXY ( unit , _x , _y ) ;
70117: LD_VAR 0 1
70121: PPUSH
70122: LD_VAR 0 5
70126: PPUSH
70127: LD_VAR 0 7
70131: PPUSH
70132: CALL_OW 111
// result := [ _x , _y ] ;
70136: LD_ADDR_VAR 0 3
70140: PUSH
70141: LD_VAR 0 5
70145: PUSH
70146: LD_VAR 0 7
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: ST_TO_ADDR
// exit ;
70155: POP
70156: POP
70157: GO 70163
// end ; end ;
70159: GO 70003
70161: POP
70162: POP
// end ;
70163: LD_VAR 0 3
70167: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70168: LD_INT 0
70170: PPUSH
70171: PPUSH
70172: PPUSH
// result := 0 ;
70173: LD_ADDR_VAR 0 3
70177: PUSH
70178: LD_INT 0
70180: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70181: LD_VAR 0 1
70185: PUSH
70186: LD_INT 0
70188: LESS
70189: PUSH
70190: LD_VAR 0 1
70194: PUSH
70195: LD_INT 8
70197: GREATER
70198: OR
70199: PUSH
70200: LD_VAR 0 2
70204: PUSH
70205: LD_INT 0
70207: LESS
70208: OR
70209: PUSH
70210: LD_VAR 0 2
70214: PUSH
70215: LD_INT 8
70217: GREATER
70218: OR
70219: IFFALSE 70223
// exit ;
70221: GO 70298
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70223: LD_ADDR_VAR 0 4
70227: PUSH
70228: LD_INT 22
70230: PUSH
70231: LD_VAR 0 2
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PPUSH
70240: CALL_OW 69
70244: PUSH
70245: FOR_IN
70246: IFFALSE 70296
// begin un := UnitShoot ( i ) ;
70248: LD_ADDR_VAR 0 5
70252: PUSH
70253: LD_VAR 0 4
70257: PPUSH
70258: CALL_OW 504
70262: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70263: LD_VAR 0 5
70267: PPUSH
70268: CALL_OW 255
70272: PUSH
70273: LD_VAR 0 1
70277: EQUAL
70278: IFFALSE 70294
// begin result := un ;
70280: LD_ADDR_VAR 0 3
70284: PUSH
70285: LD_VAR 0 5
70289: ST_TO_ADDR
// exit ;
70290: POP
70291: POP
70292: GO 70298
// end ; end ;
70294: GO 70245
70296: POP
70297: POP
// end ;
70298: LD_VAR 0 3
70302: RET
// export function GetCargoBay ( units ) ; begin
70303: LD_INT 0
70305: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70306: LD_ADDR_VAR 0 2
70310: PUSH
70311: LD_VAR 0 1
70315: PPUSH
70316: LD_INT 2
70318: PUSH
70319: LD_INT 34
70321: PUSH
70322: LD_INT 12
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 34
70331: PUSH
70332: LD_INT 51
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 34
70341: PUSH
70342: LD_INT 32
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 34
70351: PUSH
70352: LD_EXP 45
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: PPUSH
70368: CALL_OW 72
70372: ST_TO_ADDR
// end ;
70373: LD_VAR 0 2
70377: RET
// export function Negate ( value ) ; begin
70378: LD_INT 0
70380: PPUSH
// result := not value ;
70381: LD_ADDR_VAR 0 2
70385: PUSH
70386: LD_VAR 0 1
70390: NOT
70391: ST_TO_ADDR
// end ;
70392: LD_VAR 0 2
70396: RET
// export function Inc ( value ) ; begin
70397: LD_INT 0
70399: PPUSH
// result := value + 1 ;
70400: LD_ADDR_VAR 0 2
70404: PUSH
70405: LD_VAR 0 1
70409: PUSH
70410: LD_INT 1
70412: PLUS
70413: ST_TO_ADDR
// end ;
70414: LD_VAR 0 2
70418: RET
// export function Dec ( value ) ; begin
70419: LD_INT 0
70421: PPUSH
// result := value - 1 ;
70422: LD_ADDR_VAR 0 2
70426: PUSH
70427: LD_VAR 0 1
70431: PUSH
70432: LD_INT 1
70434: MINUS
70435: ST_TO_ADDR
// end ;
70436: LD_VAR 0 2
70440: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70441: LD_INT 0
70443: PPUSH
70444: PPUSH
70445: PPUSH
70446: PPUSH
70447: PPUSH
70448: PPUSH
70449: PPUSH
70450: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70451: LD_VAR 0 1
70455: PPUSH
70456: LD_VAR 0 2
70460: PPUSH
70461: CALL_OW 488
70465: NOT
70466: PUSH
70467: LD_VAR 0 3
70471: PPUSH
70472: LD_VAR 0 4
70476: PPUSH
70477: CALL_OW 488
70481: NOT
70482: OR
70483: IFFALSE 70496
// begin result := - 1 ;
70485: LD_ADDR_VAR 0 5
70489: PUSH
70490: LD_INT 1
70492: NEG
70493: ST_TO_ADDR
// exit ;
70494: GO 70731
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70496: LD_ADDR_VAR 0 12
70500: PUSH
70501: LD_VAR 0 1
70505: PPUSH
70506: LD_VAR 0 2
70510: PPUSH
70511: LD_VAR 0 3
70515: PPUSH
70516: LD_VAR 0 4
70520: PPUSH
70521: CALL 69579 0 4
70525: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70526: LD_ADDR_VAR 0 11
70530: PUSH
70531: LD_VAR 0 1
70535: PPUSH
70536: LD_VAR 0 2
70540: PPUSH
70541: LD_VAR 0 12
70545: PUSH
70546: LD_INT 1
70548: ARRAY
70549: PPUSH
70550: LD_VAR 0 12
70554: PUSH
70555: LD_INT 2
70557: ARRAY
70558: PPUSH
70559: CALL_OW 298
70563: ST_TO_ADDR
// distance := 9999 ;
70564: LD_ADDR_VAR 0 10
70568: PUSH
70569: LD_INT 9999
70571: ST_TO_ADDR
// for i := 0 to 5 do
70572: LD_ADDR_VAR 0 6
70576: PUSH
70577: DOUBLE
70578: LD_INT 0
70580: DEC
70581: ST_TO_ADDR
70582: LD_INT 5
70584: PUSH
70585: FOR_TO
70586: IFFALSE 70729
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70588: LD_ADDR_VAR 0 7
70592: PUSH
70593: LD_VAR 0 1
70597: PPUSH
70598: LD_VAR 0 6
70602: PPUSH
70603: LD_VAR 0 11
70607: PPUSH
70608: CALL_OW 272
70612: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70613: LD_ADDR_VAR 0 8
70617: PUSH
70618: LD_VAR 0 2
70622: PPUSH
70623: LD_VAR 0 6
70627: PPUSH
70628: LD_VAR 0 11
70632: PPUSH
70633: CALL_OW 273
70637: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70638: LD_VAR 0 7
70642: PPUSH
70643: LD_VAR 0 8
70647: PPUSH
70648: CALL_OW 488
70652: NOT
70653: IFFALSE 70657
// continue ;
70655: GO 70585
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70657: LD_ADDR_VAR 0 9
70661: PUSH
70662: LD_VAR 0 12
70666: PUSH
70667: LD_INT 1
70669: ARRAY
70670: PPUSH
70671: LD_VAR 0 12
70675: PUSH
70676: LD_INT 2
70678: ARRAY
70679: PPUSH
70680: LD_VAR 0 7
70684: PPUSH
70685: LD_VAR 0 8
70689: PPUSH
70690: CALL_OW 298
70694: ST_TO_ADDR
// if tmp < distance then
70695: LD_VAR 0 9
70699: PUSH
70700: LD_VAR 0 10
70704: LESS
70705: IFFALSE 70727
// begin result := i ;
70707: LD_ADDR_VAR 0 5
70711: PUSH
70712: LD_VAR 0 6
70716: ST_TO_ADDR
// distance := tmp ;
70717: LD_ADDR_VAR 0 10
70721: PUSH
70722: LD_VAR 0 9
70726: ST_TO_ADDR
// end ; end ;
70727: GO 70585
70729: POP
70730: POP
// end ;
70731: LD_VAR 0 5
70735: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70736: LD_INT 0
70738: PPUSH
70739: PPUSH
// if not driver or not IsInUnit ( driver ) then
70740: LD_VAR 0 1
70744: NOT
70745: PUSH
70746: LD_VAR 0 1
70750: PPUSH
70751: CALL_OW 310
70755: NOT
70756: OR
70757: IFFALSE 70761
// exit ;
70759: GO 70851
// vehicle := IsInUnit ( driver ) ;
70761: LD_ADDR_VAR 0 3
70765: PUSH
70766: LD_VAR 0 1
70770: PPUSH
70771: CALL_OW 310
70775: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70776: LD_VAR 0 1
70780: PPUSH
70781: LD_STRING \
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: LD_INT 0
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: PUSH
70811: LD_STRING E
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: LD_VAR 0 3
70824: PUSH
70825: LD_INT 0
70827: PUSH
70828: LD_INT 0
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PPUSH
70847: CALL_OW 446
// end ;
70851: LD_VAR 0 2
70855: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70856: LD_INT 0
70858: PPUSH
70859: PPUSH
// if not driver or not IsInUnit ( driver ) then
70860: LD_VAR 0 1
70864: NOT
70865: PUSH
70866: LD_VAR 0 1
70870: PPUSH
70871: CALL_OW 310
70875: NOT
70876: OR
70877: IFFALSE 70881
// exit ;
70879: GO 70971
// vehicle := IsInUnit ( driver ) ;
70881: LD_ADDR_VAR 0 3
70885: PUSH
70886: LD_VAR 0 1
70890: PPUSH
70891: CALL_OW 310
70895: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70896: LD_VAR 0 1
70900: PPUSH
70901: LD_STRING \
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: LD_INT 0
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: LD_INT 0
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: PUSH
70931: LD_STRING E
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: LD_INT 0
70939: PUSH
70940: LD_VAR 0 3
70944: PUSH
70945: LD_INT 0
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PPUSH
70967: CALL_OW 447
// end ;
70971: LD_VAR 0 2
70975: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70976: LD_INT 0
70978: PPUSH
70979: PPUSH
70980: PPUSH
// tmp := [ ] ;
70981: LD_ADDR_VAR 0 5
70985: PUSH
70986: EMPTY
70987: ST_TO_ADDR
// for i in units do
70988: LD_ADDR_VAR 0 4
70992: PUSH
70993: LD_VAR 0 1
70997: PUSH
70998: FOR_IN
70999: IFFALSE 71037
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71001: LD_ADDR_VAR 0 5
71005: PUSH
71006: LD_VAR 0 5
71010: PPUSH
71011: LD_VAR 0 5
71015: PUSH
71016: LD_INT 1
71018: PLUS
71019: PPUSH
71020: LD_VAR 0 4
71024: PPUSH
71025: CALL_OW 256
71029: PPUSH
71030: CALL_OW 2
71034: ST_TO_ADDR
71035: GO 70998
71037: POP
71038: POP
// if not tmp then
71039: LD_VAR 0 5
71043: NOT
71044: IFFALSE 71048
// exit ;
71046: GO 71096
// if asc then
71048: LD_VAR 0 2
71052: IFFALSE 71076
// result := SortListByListAsc ( units , tmp ) else
71054: LD_ADDR_VAR 0 3
71058: PUSH
71059: LD_VAR 0 1
71063: PPUSH
71064: LD_VAR 0 5
71068: PPUSH
71069: CALL_OW 76
71073: ST_TO_ADDR
71074: GO 71096
// result := SortListByListDesc ( units , tmp ) ;
71076: LD_ADDR_VAR 0 3
71080: PUSH
71081: LD_VAR 0 1
71085: PPUSH
71086: LD_VAR 0 5
71090: PPUSH
71091: CALL_OW 77
71095: ST_TO_ADDR
// end ;
71096: LD_VAR 0 3
71100: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71101: LD_INT 0
71103: PPUSH
71104: PPUSH
// task := GetTaskList ( mech ) ;
71105: LD_ADDR_VAR 0 4
71109: PUSH
71110: LD_VAR 0 1
71114: PPUSH
71115: CALL_OW 437
71119: ST_TO_ADDR
// if not task then
71120: LD_VAR 0 4
71124: NOT
71125: IFFALSE 71129
// exit ;
71127: GO 71171
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71129: LD_ADDR_VAR 0 3
71133: PUSH
71134: LD_VAR 0 4
71138: PUSH
71139: LD_INT 1
71141: ARRAY
71142: PUSH
71143: LD_INT 1
71145: ARRAY
71146: PUSH
71147: LD_STRING r
71149: EQUAL
71150: PUSH
71151: LD_VAR 0 4
71155: PUSH
71156: LD_INT 1
71158: ARRAY
71159: PUSH
71160: LD_INT 4
71162: ARRAY
71163: PUSH
71164: LD_VAR 0 2
71168: EQUAL
71169: AND
71170: ST_TO_ADDR
// end ;
71171: LD_VAR 0 3
71175: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71176: LD_INT 0
71178: PPUSH
// SetDir ( unit , d ) ;
71179: LD_VAR 0 1
71183: PPUSH
71184: LD_VAR 0 4
71188: PPUSH
71189: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71193: LD_VAR 0 1
71197: PPUSH
71198: LD_VAR 0 2
71202: PPUSH
71203: LD_VAR 0 3
71207: PPUSH
71208: LD_VAR 0 5
71212: PPUSH
71213: CALL_OW 48
// end ;
71217: LD_VAR 0 6
71221: RET
// export function ToNaturalNumber ( number ) ; begin
71222: LD_INT 0
71224: PPUSH
// result := number div 1 ;
71225: LD_ADDR_VAR 0 2
71229: PUSH
71230: LD_VAR 0 1
71234: PUSH
71235: LD_INT 1
71237: DIV
71238: ST_TO_ADDR
// if number < 0 then
71239: LD_VAR 0 1
71243: PUSH
71244: LD_INT 0
71246: LESS
71247: IFFALSE 71257
// result := 0 ;
71249: LD_ADDR_VAR 0 2
71253: PUSH
71254: LD_INT 0
71256: ST_TO_ADDR
// end ;
71257: LD_VAR 0 2
71261: RET
// export function SortByClass ( units , class ) ; var un ; begin
71262: LD_INT 0
71264: PPUSH
71265: PPUSH
// if not units or not class then
71266: LD_VAR 0 1
71270: NOT
71271: PUSH
71272: LD_VAR 0 2
71276: NOT
71277: OR
71278: IFFALSE 71282
// exit ;
71280: GO 71377
// result := [ ] ;
71282: LD_ADDR_VAR 0 3
71286: PUSH
71287: EMPTY
71288: ST_TO_ADDR
// for un in units do
71289: LD_ADDR_VAR 0 4
71293: PUSH
71294: LD_VAR 0 1
71298: PUSH
71299: FOR_IN
71300: IFFALSE 71375
// if GetClass ( un ) = class then
71302: LD_VAR 0 4
71306: PPUSH
71307: CALL_OW 257
71311: PUSH
71312: LD_VAR 0 2
71316: EQUAL
71317: IFFALSE 71344
// result := Insert ( result , 1 , un ) else
71319: LD_ADDR_VAR 0 3
71323: PUSH
71324: LD_VAR 0 3
71328: PPUSH
71329: LD_INT 1
71331: PPUSH
71332: LD_VAR 0 4
71336: PPUSH
71337: CALL_OW 2
71341: ST_TO_ADDR
71342: GO 71373
// result := Replace ( result , result + 1 , un ) ;
71344: LD_ADDR_VAR 0 3
71348: PUSH
71349: LD_VAR 0 3
71353: PPUSH
71354: LD_VAR 0 3
71358: PUSH
71359: LD_INT 1
71361: PLUS
71362: PPUSH
71363: LD_VAR 0 4
71367: PPUSH
71368: CALL_OW 1
71372: ST_TO_ADDR
71373: GO 71299
71375: POP
71376: POP
// end ;
71377: LD_VAR 0 3
71381: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71382: LD_INT 0
71384: PPUSH
71385: PPUSH
71386: PPUSH
71387: PPUSH
71388: PPUSH
71389: PPUSH
71390: PPUSH
// result := [ ] ;
71391: LD_ADDR_VAR 0 4
71395: PUSH
71396: EMPTY
71397: ST_TO_ADDR
// if x - r < 0 then
71398: LD_VAR 0 1
71402: PUSH
71403: LD_VAR 0 3
71407: MINUS
71408: PUSH
71409: LD_INT 0
71411: LESS
71412: IFFALSE 71424
// min_x := 0 else
71414: LD_ADDR_VAR 0 8
71418: PUSH
71419: LD_INT 0
71421: ST_TO_ADDR
71422: GO 71440
// min_x := x - r ;
71424: LD_ADDR_VAR 0 8
71428: PUSH
71429: LD_VAR 0 1
71433: PUSH
71434: LD_VAR 0 3
71438: MINUS
71439: ST_TO_ADDR
// if y - r < 0 then
71440: LD_VAR 0 2
71444: PUSH
71445: LD_VAR 0 3
71449: MINUS
71450: PUSH
71451: LD_INT 0
71453: LESS
71454: IFFALSE 71466
// min_y := 0 else
71456: LD_ADDR_VAR 0 7
71460: PUSH
71461: LD_INT 0
71463: ST_TO_ADDR
71464: GO 71482
// min_y := y - r ;
71466: LD_ADDR_VAR 0 7
71470: PUSH
71471: LD_VAR 0 2
71475: PUSH
71476: LD_VAR 0 3
71480: MINUS
71481: ST_TO_ADDR
// max_x := x + r ;
71482: LD_ADDR_VAR 0 9
71486: PUSH
71487: LD_VAR 0 1
71491: PUSH
71492: LD_VAR 0 3
71496: PLUS
71497: ST_TO_ADDR
// max_y := y + r ;
71498: LD_ADDR_VAR 0 10
71502: PUSH
71503: LD_VAR 0 2
71507: PUSH
71508: LD_VAR 0 3
71512: PLUS
71513: ST_TO_ADDR
// for _x = min_x to max_x do
71514: LD_ADDR_VAR 0 5
71518: PUSH
71519: DOUBLE
71520: LD_VAR 0 8
71524: DEC
71525: ST_TO_ADDR
71526: LD_VAR 0 9
71530: PUSH
71531: FOR_TO
71532: IFFALSE 71633
// for _y = min_y to max_y do
71534: LD_ADDR_VAR 0 6
71538: PUSH
71539: DOUBLE
71540: LD_VAR 0 7
71544: DEC
71545: ST_TO_ADDR
71546: LD_VAR 0 10
71550: PUSH
71551: FOR_TO
71552: IFFALSE 71629
// begin if not ValidHex ( _x , _y ) then
71554: LD_VAR 0 5
71558: PPUSH
71559: LD_VAR 0 6
71563: PPUSH
71564: CALL_OW 488
71568: NOT
71569: IFFALSE 71573
// continue ;
71571: GO 71551
// if GetResourceTypeXY ( _x , _y ) then
71573: LD_VAR 0 5
71577: PPUSH
71578: LD_VAR 0 6
71582: PPUSH
71583: CALL_OW 283
71587: IFFALSE 71627
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71589: LD_ADDR_VAR 0 4
71593: PUSH
71594: LD_VAR 0 4
71598: PPUSH
71599: LD_VAR 0 4
71603: PUSH
71604: LD_INT 1
71606: PLUS
71607: PPUSH
71608: LD_VAR 0 5
71612: PUSH
71613: LD_VAR 0 6
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PPUSH
71622: CALL_OW 1
71626: ST_TO_ADDR
// end ;
71627: GO 71551
71629: POP
71630: POP
71631: GO 71531
71633: POP
71634: POP
// end ;
71635: LD_VAR 0 4
71639: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71640: LD_INT 0
71642: PPUSH
71643: PPUSH
71644: PPUSH
71645: PPUSH
71646: PPUSH
71647: PPUSH
71648: PPUSH
71649: PPUSH
// if not units then
71650: LD_VAR 0 1
71654: NOT
71655: IFFALSE 71659
// exit ;
71657: GO 72084
// result := UnitFilter ( units , [ f_ok ] ) ;
71659: LD_ADDR_VAR 0 3
71663: PUSH
71664: LD_VAR 0 1
71668: PPUSH
71669: LD_INT 50
71671: PUSH
71672: EMPTY
71673: LIST
71674: PPUSH
71675: CALL_OW 72
71679: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71680: LD_ADDR_VAR 0 8
71684: PUSH
71685: LD_VAR 0 1
71689: PUSH
71690: LD_INT 1
71692: ARRAY
71693: PPUSH
71694: CALL_OW 255
71698: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
71699: LD_ADDR_VAR 0 10
71703: PUSH
71704: LD_INT 29
71706: PUSH
71707: LD_EXP 48
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: ST_TO_ADDR
// if not result then
71716: LD_VAR 0 3
71720: NOT
71721: IFFALSE 71725
// exit ;
71723: GO 72084
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71725: LD_ADDR_VAR 0 5
71729: PUSH
71730: LD_INT 81
71732: PUSH
71733: LD_VAR 0 8
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PPUSH
71742: CALL_OW 69
71746: ST_TO_ADDR
// for i in result do
71747: LD_ADDR_VAR 0 4
71751: PUSH
71752: LD_VAR 0 3
71756: PUSH
71757: FOR_IN
71758: IFFALSE 72082
// begin tag := GetTag ( i ) + 1 ;
71760: LD_ADDR_VAR 0 9
71764: PUSH
71765: LD_VAR 0 4
71769: PPUSH
71770: CALL_OW 110
71774: PUSH
71775: LD_INT 1
71777: PLUS
71778: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71779: LD_ADDR_VAR 0 7
71783: PUSH
71784: LD_VAR 0 4
71788: PPUSH
71789: CALL_OW 250
71793: PPUSH
71794: LD_VAR 0 4
71798: PPUSH
71799: CALL_OW 251
71803: PPUSH
71804: LD_INT 6
71806: PPUSH
71807: CALL 71382 0 3
71811: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71812: LD_VAR 0 7
71816: PUSH
71817: LD_VAR 0 4
71821: PPUSH
71822: CALL_OW 264
71826: PUSH
71827: LD_VAR 0 10
71831: IN
71832: NOT
71833: AND
71834: IFFALSE 71873
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71836: LD_VAR 0 4
71840: PPUSH
71841: LD_VAR 0 7
71845: PUSH
71846: LD_INT 1
71848: ARRAY
71849: PUSH
71850: LD_INT 1
71852: ARRAY
71853: PPUSH
71854: LD_VAR 0 7
71858: PUSH
71859: LD_INT 1
71861: ARRAY
71862: PUSH
71863: LD_INT 2
71865: ARRAY
71866: PPUSH
71867: CALL_OW 116
71871: GO 72080
// if path > tag then
71873: LD_VAR 0 2
71877: PUSH
71878: LD_VAR 0 9
71882: GREATER
71883: IFFALSE 72050
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
71885: LD_ADDR_VAR 0 6
71889: PUSH
71890: LD_VAR 0 5
71894: PPUSH
71895: LD_INT 91
71897: PUSH
71898: LD_VAR 0 4
71902: PUSH
71903: LD_INT 12
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: LIST
71910: PPUSH
71911: CALL_OW 72
71915: ST_TO_ADDR
// if nearEnemy then
71916: LD_VAR 0 6
71920: IFFALSE 71948
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71922: LD_VAR 0 4
71926: PPUSH
71927: LD_VAR 0 6
71931: PPUSH
71932: LD_VAR 0 4
71936: PPUSH
71937: CALL_OW 74
71941: PPUSH
71942: CALL_OW 115
71946: GO 72048
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71948: LD_VAR 0 4
71952: PPUSH
71953: LD_VAR 0 2
71957: PUSH
71958: LD_VAR 0 9
71962: ARRAY
71963: PUSH
71964: LD_INT 1
71966: ARRAY
71967: PPUSH
71968: LD_VAR 0 2
71972: PUSH
71973: LD_VAR 0 9
71977: ARRAY
71978: PUSH
71979: LD_INT 2
71981: ARRAY
71982: PPUSH
71983: CALL_OW 297
71987: PUSH
71988: LD_INT 6
71990: GREATER
71991: IFFALSE 72034
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71993: LD_VAR 0 4
71997: PPUSH
71998: LD_VAR 0 2
72002: PUSH
72003: LD_VAR 0 9
72007: ARRAY
72008: PUSH
72009: LD_INT 1
72011: ARRAY
72012: PPUSH
72013: LD_VAR 0 2
72017: PUSH
72018: LD_VAR 0 9
72022: ARRAY
72023: PUSH
72024: LD_INT 2
72026: ARRAY
72027: PPUSH
72028: CALL_OW 114
72032: GO 72048
// SetTag ( i , tag ) ;
72034: LD_VAR 0 4
72038: PPUSH
72039: LD_VAR 0 9
72043: PPUSH
72044: CALL_OW 109
// end else
72048: GO 72080
// if enemy then
72050: LD_VAR 0 5
72054: IFFALSE 72080
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72056: LD_VAR 0 4
72060: PPUSH
72061: LD_VAR 0 5
72065: PPUSH
72066: LD_VAR 0 4
72070: PPUSH
72071: CALL_OW 74
72075: PPUSH
72076: CALL_OW 115
// end ;
72080: GO 71757
72082: POP
72083: POP
// end ;
72084: LD_VAR 0 3
72088: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72089: LD_INT 0
72091: PPUSH
72092: PPUSH
72093: PPUSH
// if not unit or IsInUnit ( unit ) then
72094: LD_VAR 0 1
72098: NOT
72099: PUSH
72100: LD_VAR 0 1
72104: PPUSH
72105: CALL_OW 310
72109: OR
72110: IFFALSE 72114
// exit ;
72112: GO 72205
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72114: LD_ADDR_VAR 0 4
72118: PUSH
72119: LD_VAR 0 1
72123: PPUSH
72124: CALL_OW 250
72128: PPUSH
72129: LD_VAR 0 2
72133: PPUSH
72134: LD_INT 1
72136: PPUSH
72137: CALL_OW 272
72141: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72142: LD_ADDR_VAR 0 5
72146: PUSH
72147: LD_VAR 0 1
72151: PPUSH
72152: CALL_OW 251
72156: PPUSH
72157: LD_VAR 0 2
72161: PPUSH
72162: LD_INT 1
72164: PPUSH
72165: CALL_OW 273
72169: ST_TO_ADDR
// if ValidHex ( x , y ) then
72170: LD_VAR 0 4
72174: PPUSH
72175: LD_VAR 0 5
72179: PPUSH
72180: CALL_OW 488
72184: IFFALSE 72205
// ComTurnXY ( unit , x , y ) ;
72186: LD_VAR 0 1
72190: PPUSH
72191: LD_VAR 0 4
72195: PPUSH
72196: LD_VAR 0 5
72200: PPUSH
72201: CALL_OW 118
// end ;
72205: LD_VAR 0 3
72209: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72210: LD_INT 0
72212: PPUSH
72213: PPUSH
// result := false ;
72214: LD_ADDR_VAR 0 3
72218: PUSH
72219: LD_INT 0
72221: ST_TO_ADDR
// if not units then
72222: LD_VAR 0 2
72226: NOT
72227: IFFALSE 72231
// exit ;
72229: GO 72276
// for i in units do
72231: LD_ADDR_VAR 0 4
72235: PUSH
72236: LD_VAR 0 2
72240: PUSH
72241: FOR_IN
72242: IFFALSE 72274
// if See ( side , i ) then
72244: LD_VAR 0 1
72248: PPUSH
72249: LD_VAR 0 4
72253: PPUSH
72254: CALL_OW 292
72258: IFFALSE 72272
// begin result := true ;
72260: LD_ADDR_VAR 0 3
72264: PUSH
72265: LD_INT 1
72267: ST_TO_ADDR
// exit ;
72268: POP
72269: POP
72270: GO 72276
// end ;
72272: GO 72241
72274: POP
72275: POP
// end ;
72276: LD_VAR 0 3
72280: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72281: LD_INT 0
72283: PPUSH
72284: PPUSH
72285: PPUSH
72286: PPUSH
// if not unit or not points then
72287: LD_VAR 0 1
72291: NOT
72292: PUSH
72293: LD_VAR 0 2
72297: NOT
72298: OR
72299: IFFALSE 72303
// exit ;
72301: GO 72393
// dist := 99999 ;
72303: LD_ADDR_VAR 0 5
72307: PUSH
72308: LD_INT 99999
72310: ST_TO_ADDR
// for i in points do
72311: LD_ADDR_VAR 0 4
72315: PUSH
72316: LD_VAR 0 2
72320: PUSH
72321: FOR_IN
72322: IFFALSE 72391
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72324: LD_ADDR_VAR 0 6
72328: PUSH
72329: LD_VAR 0 1
72333: PPUSH
72334: LD_VAR 0 4
72338: PUSH
72339: LD_INT 1
72341: ARRAY
72342: PPUSH
72343: LD_VAR 0 4
72347: PUSH
72348: LD_INT 2
72350: ARRAY
72351: PPUSH
72352: CALL_OW 297
72356: ST_TO_ADDR
// if tmpDist < dist then
72357: LD_VAR 0 6
72361: PUSH
72362: LD_VAR 0 5
72366: LESS
72367: IFFALSE 72389
// begin result := i ;
72369: LD_ADDR_VAR 0 3
72373: PUSH
72374: LD_VAR 0 4
72378: ST_TO_ADDR
// dist := tmpDist ;
72379: LD_ADDR_VAR 0 5
72383: PUSH
72384: LD_VAR 0 6
72388: ST_TO_ADDR
// end ; end ;
72389: GO 72321
72391: POP
72392: POP
// end ; end_of_file
72393: LD_VAR 0 3
72397: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72398: LD_VAR 0 1
72402: PUSH
72403: LD_INT 200
72405: DOUBLE
72406: GREATEREQUAL
72407: IFFALSE 72415
72409: LD_INT 299
72411: DOUBLE
72412: LESSEQUAL
72413: IFTRUE 72417
72415: GO 72449
72417: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72418: LD_VAR 0 1
72422: PPUSH
72423: LD_VAR 0 2
72427: PPUSH
72428: LD_VAR 0 3
72432: PPUSH
72433: LD_VAR 0 4
72437: PPUSH
72438: LD_VAR 0 5
72442: PPUSH
72443: CALL 14617 0 5
72447: GO 72526
72449: LD_INT 300
72451: DOUBLE
72452: GREATEREQUAL
72453: IFFALSE 72461
72455: LD_INT 399
72457: DOUBLE
72458: LESSEQUAL
72459: IFTRUE 72463
72461: GO 72525
72463: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72464: LD_VAR 0 1
72468: PPUSH
72469: LD_VAR 0 2
72473: PPUSH
72474: LD_VAR 0 3
72478: PPUSH
72479: LD_VAR 0 4
72483: PPUSH
72484: LD_VAR 0 5
72488: PPUSH
72489: LD_VAR 0 6
72493: PPUSH
72494: LD_VAR 0 7
72498: PPUSH
72499: LD_VAR 0 8
72503: PPUSH
72504: LD_VAR 0 9
72508: PPUSH
72509: LD_VAR 0 10
72513: PPUSH
72514: LD_VAR 0 11
72518: PPUSH
72519: CALL 30327 0 11
72523: GO 72526
72525: POP
// end ;
72526: PPOPN 11
72528: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72529: LD_VAR 0 1
72533: PPUSH
72534: LD_VAR 0 2
72538: PPUSH
72539: LD_VAR 0 3
72543: PPUSH
72544: LD_VAR 0 4
72548: PPUSH
72549: LD_VAR 0 5
72553: PPUSH
72554: CALL 14609 0 5
// end ; end_of_file
72558: PPOPN 5
72560: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72561: LD_VAR 0 1
72565: PPUSH
72566: LD_VAR 0 2
72570: PPUSH
72571: LD_VAR 0 3
72575: PPUSH
72576: LD_VAR 0 4
72580: PPUSH
72581: LD_VAR 0 5
72585: PPUSH
72586: LD_VAR 0 6
72590: PPUSH
72591: CALL 18522 0 6
// end ;
72595: PPOPN 6
72597: END
