// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 740 0 2
// PrepareArabian ;
  31: CALL 1433 0 0
// PrepareRussian ;
  35: CALL 3031 0 0
// Action ;
  39: CALL 7656 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 250: LD_ADDR_OWVAR 79
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// end ;
 258: LD_VAR 0 1
 262: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 263: LD_EXP 10
 267: NOT
 268: PUSH
 269: LD_EXP 9
 273: NOT
 274: AND
 275: PUSH
 276: LD_EXP 39
 280: NOT
 281: AND
 282: PUSH
 283: LD_EXP 40
 287: NOT
 288: AND
 289: IFFALSE 301
 291: GO 293
 293: DISABLE
// SetAchievement ( ACH_EXT ) ;
 294: LD_STRING ACH_EXT
 296: PPUSH
 297: CALL_OW 543
 301: END
// every 0 0$1 trigger captureCounter >= 6 do
 302: LD_EXP 18
 306: PUSH
 307: LD_INT 6
 309: GREATEREQUAL
 310: IFFALSE 322
 312: GO 314
 314: DISABLE
// SetAchievement ( ACH_KEY ) ;
 315: LD_STRING ACH_KEY
 317: PPUSH
 318: CALL_OW 543
 322: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 323: LD_EXP 19
 327: PUSH
 328: LD_INT 3
 330: GREATEREQUAL
 331: IFFALSE 343
 333: GO 335
 335: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 336: LD_STRING ACH_CHEM
 338: PPUSH
 339: CALL_OW 543
 343: END
// every 0 0$1 trigger debug do var i ;
 344: LD_EXP 1
 348: IFFALSE 432
 350: GO 352
 352: DISABLE
 353: LD_INT 0
 355: PPUSH
// begin enable ;
 356: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 357: LD_ADDR_VAR 0 1
 361: PUSH
 362: LD_INT 22
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 21
 377: PUSH
 378: LD_INT 3
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: FOR_IN
 399: IFFALSE 430
// if GetLives ( i ) < 1000 then
 401: LD_VAR 0 1
 405: PPUSH
 406: CALL_OW 256
 410: PUSH
 411: LD_INT 1000
 413: LESS
 414: IFFALSE 428
// SetLives ( i , 1000 ) ;
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 1000
 423: PPUSH
 424: CALL_OW 234
 428: GO 398
 430: POP
 431: POP
// end ; end_of_file
 432: PPOPN 1
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function SayX ( units , ident ) ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// result := false ;
 527: LD_ADDR_VAR 0 3
 531: PUSH
 532: LD_INT 0
 534: ST_TO_ADDR
// if not units then
 535: LD_VAR 0 1
 539: NOT
 540: IFFALSE 544
// exit ;
 542: GO 598
// for i in units do
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: LD_VAR 0 1
 553: PUSH
 554: FOR_IN
 555: IFFALSE 596
// if IsOk ( i ) then
 557: LD_VAR 0 4
 561: PPUSH
 562: CALL_OW 302
 566: IFFALSE 594
// begin Say ( i , ident ) ;
 568: LD_VAR 0 4
 572: PPUSH
 573: LD_VAR 0 2
 577: PPUSH
 578: CALL_OW 88
// result := i ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_VAR 0 4
 591: ST_TO_ADDR
// break ;
 592: GO 596
// end ;
 594: GO 554
 596: POP
 597: POP
// end ;
 598: LD_VAR 0 3
 602: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 603: LD_INT 0
 605: PPUSH
 606: PPUSH
// InitUc ;
 607: CALL_OW 18
// InitHc ;
 611: CALL_OW 19
// uc_side := 0 ;
 615: LD_ADDR_OWVAR 20
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// uc_nation := 0 ;
 623: LD_ADDR_OWVAR 21
 627: PUSH
 628: LD_INT 0
 630: ST_TO_ADDR
// for i = 1 to amount do
 631: LD_ADDR_VAR 0 4
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 2
 645: PUSH
 646: FOR_TO
 647: IFFALSE 729
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 649: LD_ADDR_OWVAR 29
 653: PUSH
 654: LD_INT 9
 656: PPUSH
 657: LD_INT 12
 659: PPUSH
 660: CALL_OW 12
 664: PUSH
 665: LD_INT 9
 667: PPUSH
 668: LD_INT 12
 670: PPUSH
 671: CALL_OW 12
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 680: LD_ADDR_OWVAR 35
 684: PUSH
 685: LD_INT 1
 687: NEG
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL_OW 12
 696: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 697: LD_INT 0
 699: PPUSH
 700: LD_INT 12
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 646
 729: POP
 730: POP
// InitHc ;
 731: CALL_OW 19
// end ;
 735: LD_VAR 0 3
 739: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 740: LD_INT 0
 742: PPUSH
 743: PPUSH
// uc_side := 0 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// uc_nation := 0 ;
 752: LD_ADDR_OWVAR 21
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// for i := 1 to 3 do
 760: LD_ADDR_VAR 0 4
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_INT 3
 772: PUSH
 773: FOR_TO
 774: IFFALSE 811
// begin hc_class := 21 ;
 776: LD_ADDR_OWVAR 28
 780: PUSH
 781: LD_INT 21
 783: ST_TO_ADDR
// hc_gallery :=  ;
 784: LD_ADDR_OWVAR 33
 788: PUSH
 789: LD_STRING 
 791: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 792: CALL_OW 44
 796: PPUSH
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// end ;
 809: GO 773
 811: POP
 812: POP
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 4
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 864
// begin hc_class := 18 ;
 829: LD_ADDR_OWVAR 28
 833: PUSH
 834: LD_INT 18
 836: ST_TO_ADDR
// hc_gallery :=  ;
 837: LD_ADDR_OWVAR 33
 841: PUSH
 842: LD_STRING 
 844: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 845: CALL_OW 44
 849: PPUSH
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end ;
 862: GO 826
 864: POP
 865: POP
// for i := 1 to 3 do
 866: LD_ADDR_VAR 0 4
 870: PUSH
 871: DOUBLE
 872: LD_INT 1
 874: DEC
 875: ST_TO_ADDR
 876: LD_INT 3
 878: PUSH
 879: FOR_TO
 880: IFFALSE 917
// begin hc_class := 13 ;
 882: LD_ADDR_OWVAR 28
 886: PUSH
 887: LD_INT 13
 889: ST_TO_ADDR
// hc_gallery :=  ;
 890: LD_ADDR_OWVAR 33
 894: PUSH
 895: LD_STRING 
 897: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 898: CALL_OW 44
 902: PPUSH
 903: LD_VAR 0 1
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 879
 917: POP
 918: POP
// for i := 1 to 4 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 4
 931: PUSH
 932: FOR_TO
 933: IFFALSE 970
// begin hc_class := class_frog ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 19
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_VAR 0 2
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end ;
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 3
 976: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
// if not observer or not unit then
 982: LD_VAR 0 1
 986: NOT
 987: PUSH
 988: LD_VAR 0 2
 992: NOT
 993: OR
 994: IFFALSE 998
// exit ;
 996: GO 1046
// if not See ( GetSide ( observer ) , unit ) then
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL_OW 255
1007: PPUSH
1008: LD_VAR 0 2
1012: PPUSH
1013: CALL_OW 292
1017: NOT
1018: IFFALSE 1022
// exit ;
1020: GO 1046
// result := GetDistUnits ( observer , unit ) < 12 ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 1
1031: PPUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: CALL_OW 296
1041: PUSH
1042: LD_INT 12
1044: LESS
1045: ST_TO_ADDR
// end ;
1046: LD_VAR 0 3
1050: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1051: LD_INT 0
1053: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_VAR 0 2
1067: PUSH
1068: LD_INT 2
1070: ARRAY
1071: PPUSH
1072: CALL_OW 488
1076: PUSH
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: ARRAY
1085: PPUSH
1086: LD_VAR 0 2
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 428
1099: PUSH
1100: LD_INT 0
1102: EQUAL
1103: AND
1104: IFFALSE 1138
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1106: LD_VAR 0 1
1110: PPUSH
1111: LD_VAR 0 2
1115: PUSH
1116: LD_INT 1
1118: ARRAY
1119: PPUSH
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 3
1133: PPUSH
1134: CALL_OW 48
// end ;
1138: LD_VAR 0 4
1142: RET
// export function ReverseArray ( array ) ; var i ; begin
1143: LD_INT 0
1145: PPUSH
1146: PPUSH
// if not array then
1147: LD_VAR 0 1
1151: NOT
1152: IFFALSE 1156
// exit ;
1154: GO 1214
// result := [ ] ;
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: EMPTY
1162: ST_TO_ADDR
// for i := 1 to array do
1163: LD_ADDR_VAR 0 3
1167: PUSH
1168: DOUBLE
1169: LD_INT 1
1171: DEC
1172: ST_TO_ADDR
1173: LD_VAR 0 1
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1212
// result := Insert ( result , 1 , array [ i ] ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_INT 1
1193: PPUSH
1194: LD_VAR 0 1
1198: PUSH
1199: LD_VAR 0 3
1203: ARRAY
1204: PPUSH
1205: CALL_OW 2
1209: ST_TO_ADDR
1210: GO 1178
1212: POP
1213: POP
// end ;
1214: LD_VAR 0 2
1218: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1219: LD_INT 0
1221: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1222: LD_VAR 0 1
1226: PPUSH
1227: LD_VAR 0 2
1231: PPUSH
1232: LD_VAR 0 3
1236: PPUSH
1237: LD_VAR 0 4
1241: PPUSH
1242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1246: LD_VAR 0 1
1250: PPUSH
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: CALL_OW 331
// end ;
1265: LD_VAR 0 5
1269: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1270: LD_INT 0
1272: PPUSH
// if not units then
1273: LD_VAR 0 1
1277: NOT
1278: IFFALSE 1282
// exit ;
1280: GO 1365
// result := true ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 1
1289: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 26
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: LD_VAR 0 2
1318: PPUSH
1319: CALL_OW 88
1323: NOT
1324: IFFALSE 1365
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1326: LD_ADDR_VAR 0 4
1330: PUSH
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 26
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 72
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 88
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 4
1369: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
// if not group then
1374: LD_VAR 0 2
1378: NOT
1379: IFFALSE 1383
// exit ;
1381: GO 1428
// for i in group do
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: LD_VAR 0 2
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1426
// if See ( side , i ) then
1396: LD_VAR 0 1
1400: PPUSH
1401: LD_VAR 0 4
1405: PPUSH
1406: CALL_OW 292
1410: IFFALSE 1424
// begin result := true ;
1412: LD_ADDR_VAR 0 3
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// exit ;
1420: POP
1421: POP
1422: GO 1428
// end ;
1424: GO 1393
1426: POP
1427: POP
// end ; end_of_file
1428: LD_VAR 0 3
1432: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1433: LD_INT 0
1435: PPUSH
1436: PPUSH
// uc_side := 2 ;
1437: LD_ADDR_OWVAR 20
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// uc_nation := 2 ;
1445: LD_ADDR_OWVAR 21
1449: PUSH
1450: LD_INT 2
1452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Heike
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 31029 0 3
1476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 24
1481: PUSH
1482: LD_STRING Ibrahim
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 31029 0 3
1500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 22
1505: PUSH
1506: LD_STRING Givi
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 31029 0 3
1524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 25
1529: PUSH
1530: LD_STRING Kamil
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 31029 0 3
1548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 26
1553: PUSH
1554: LD_STRING Kaia
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 31029 0 3
1572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 27
1577: PUSH
1578: LD_STRING Sophia
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 31029 0 3
1596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 28
1601: PUSH
1602: LD_STRING Markov
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 31029 0 3
1620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1621: LD_ADDR_EXP 33
1625: PUSH
1626: LD_STRING Aviradze
1628: PPUSH
1629: LD_EXP 1
1633: NOT
1634: PPUSH
1635: LD_EXP 2
1639: PPUSH
1640: CALL 31029 0 3
1644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1645: LD_ADDR_EXP 32
1649: PUSH
1650: LD_STRING Kurt
1652: PPUSH
1653: LD_EXP 1
1657: NOT
1658: PPUSH
1659: LD_EXP 2
1663: PPUSH
1664: CALL 31029 0 3
1668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1669: LD_ADDR_EXP 23
1673: PUSH
1674: LD_STRING Mike
1676: PPUSH
1677: LD_EXP 1
1681: NOT
1682: PPUSH
1683: LD_EXP 2
1687: PPUSH
1688: CALL 31029 0 3
1692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1693: LD_ADDR_EXP 30
1697: PUSH
1698: LD_STRING Olaf
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: LD_STRING 
1706: PPUSH
1707: CALL 31029 0 3
1711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1712: LD_ADDR_EXP 34
1716: PUSH
1717: LD_STRING 04_2_others
1719: PPUSH
1720: CALL_OW 31
1724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1725: LD_ADDR_EXP 36
1729: PUSH
1730: LD_STRING 04_2_apes
1732: PPUSH
1733: CALL_OW 31
1737: ST_TO_ADDR
// if hasFlamethrower then
1738: LD_EXP 3
1742: IFFALSE 1973
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1744: LD_INT 70
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_INT 13
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: LD_INT 27
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 1000
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 13
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: LD_INT 25
1810: PUSH
1811: LD_INT 2
1813: PUSH
1814: LD_INT 1000
1816: PUSH
1817: LD_INT 0
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 13
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 26
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1000
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 13
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 1
1881: PUSH
1882: LD_INT 27
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1000
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 60
1933: PUSH
1934: LD_INT 40
1936: PUSH
1937: LD_INT 20
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_OWVAR 67
1949: ARRAY
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// end else
1971: GO 2187
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1973: LD_ADDR_EXP 35
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 25
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 1000
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 27
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: LD_INT 1000
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 13
2054: PUSH
2055: LD_INT 1
2057: PUSH
2058: LD_INT 1
2060: PUSH
2061: LD_INT 24
2063: PUSH
2064: LD_INT 2
2066: PUSH
2067: LD_INT 1000
2069: PUSH
2070: LD_INT 0
2072: PUSH
2073: LD_INT 0
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 13
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 1
2097: PUSH
2098: LD_INT 27
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: LD_INT 1000
2106: PUSH
2107: LD_INT 0
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 13
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 32
2137: PUSH
2138: LD_INT 2
2140: PUSH
2141: LD_INT 1000
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 50
2149: PUSH
2150: LD_INT 30
2152: PUSH
2153: LD_INT 20
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: LD_OWVAR 67
2165: ARRAY
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// end ; uc_side := 5 ;
2187: LD_ADDR_OWVAR 20
2191: PUSH
2192: LD_INT 5
2194: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2195: LD_ADDR_EXP 29
2199: PUSH
2200: LD_STRING Abdul
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: LD_STRING 
2208: PPUSH
2209: CALL 31029 0 3
2213: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2214: LD_ADDR_EXP 31
2218: PUSH
2219: LD_STRING Omar
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: LD_STRING 
2227: PPUSH
2228: CALL 31029 0 3
2232: ST_TO_ADDR
// end ;
2233: LD_VAR 0 1
2237: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2238: LD_INT 0
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
// pfx := 04_1_ ;
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: LD_STRING 04_1_
2252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2253: LD_INT 35
2255: PPUSH
2256: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 2
2265: PPUSH
2266: CALL_OW 428
2270: NOT
2271: IFFALSE 2253
// tmp := [ ] ;
2273: LD_ADDR_VAR 0 4
2277: PUSH
2278: EMPTY
2279: ST_TO_ADDR
// uc_side := 5 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 5
2287: ST_TO_ADDR
// uc_nation := 2 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2296: LD_ADDR_EXP 33
2300: PUSH
2301: LD_STRING Aviradze_L
2303: PPUSH
2304: LD_EXP 1
2308: NOT
2309: PPUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL 31029 0 3
2319: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 14
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2347: LD_EXP 33
2351: PPUSH
2352: LD_INT 8
2354: PPUSH
2355: LD_INT 6
2357: PPUSH
2358: CALL_OW 111
// AddComHold ( Aviradze ) ;
2362: LD_EXP 33
2366: PPUSH
2367: CALL_OW 200
// tmp := [ Aviradze ] ;
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: LD_EXP 33
2380: PUSH
2381: EMPTY
2382: LIST
2383: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2384: LD_INT 70
2386: PPUSH
2387: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2391: LD_STRING Ibrahim_L
2393: PPUSH
2394: LD_EXP 1
2398: NOT
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL 31029 0 3
2409: IFFALSE 2509
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2411: LD_ADDR_EXP 24
2415: PUSH
2416: LD_STRING Ibrahim_L
2418: PPUSH
2419: LD_EXP 1
2423: NOT
2424: PPUSH
2425: LD_VAR 0 2
2429: PPUSH
2430: CALL 31029 0 3
2434: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 14
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2462: LD_EXP 24
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: LD_INT 7
2472: PPUSH
2473: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2477: LD_EXP 24
2481: PPUSH
2482: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2486: LD_ADDR_VAR 0 4
2490: PUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_EXP 24
2500: ADD
2501: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2502: LD_INT 70
2504: PPUSH
2505: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2509: LD_STRING Kaia_L
2511: PPUSH
2512: LD_EXP 1
2516: NOT
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL 31029 0 3
2527: IFFALSE 2627
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2529: LD_ADDR_EXP 26
2533: PUSH
2534: LD_STRING Kaia_L
2536: PPUSH
2537: LD_EXP 1
2541: NOT
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL 31029 0 3
2552: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 14
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2580: LD_EXP 26
2584: PPUSH
2585: LD_INT 8
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 111
// AddComHold ( Kaia ) ;
2595: LD_EXP 26
2599: PPUSH
2600: CALL_OW 200
// tmp := tmp ^ Kaia ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: LD_VAR 0 4
2613: PUSH
2614: LD_EXP 26
2618: ADD
2619: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2620: LD_INT 70
2622: PPUSH
2623: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2627: LD_STRING Kamil_L
2629: PPUSH
2630: LD_EXP 1
2634: NOT
2635: PPUSH
2636: LD_VAR 0 2
2640: PPUSH
2641: CALL 31029 0 3
2645: IFFALSE 2745
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2647: LD_ADDR_EXP 25
2651: PUSH
2652: LD_STRING Kamil_L
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL 31029 0 3
2670: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 14
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2698: LD_EXP 25
2702: PPUSH
2703: LD_INT 8
2705: PPUSH
2706: LD_INT 7
2708: PPUSH
2709: CALL_OW 111
// AddComHold ( Kamil ) ;
2713: LD_EXP 25
2717: PPUSH
2718: CALL_OW 200
// tmp := tmp ^ Kamil ;
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_EXP 25
2736: ADD
2737: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2738: LD_INT 70
2740: PPUSH
2741: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2745: LD_STRING Sophia_L
2747: PPUSH
2748: LD_EXP 1
2752: NOT
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: CALL 31029 0 3
2763: IFFALSE 2863
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2765: LD_ADDR_EXP 27
2769: PUSH
2770: LD_STRING Sophia_L
2772: PPUSH
2773: LD_EXP 1
2777: NOT
2778: PPUSH
2779: LD_VAR 0 2
2783: PPUSH
2784: CALL 31029 0 3
2788: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 14
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2816: LD_EXP 27
2820: PPUSH
2821: LD_INT 9
2823: PPUSH
2824: LD_INT 6
2826: PPUSH
2827: CALL_OW 111
// AddComHold ( Sophia ) ;
2831: LD_EXP 27
2835: PPUSH
2836: CALL_OW 200
// tmp := tmp ^ Sophia ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_VAR 0 4
2849: PUSH
2850: LD_EXP 27
2854: ADD
2855: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2856: LD_INT 70
2858: PPUSH
2859: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_STRING 04_1_others_L
2870: PPUSH
2871: CALL_OW 31
2875: ST_TO_ADDR
// if tmp2 then
2876: LD_VAR 0 5
2880: IFFALSE 2977
// for i in tmp2 do
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: FOR_IN
2893: IFFALSE 2975
// begin SetDir ( i , 2 ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 14
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2922: LD_ADDR_EXP 34
2926: PUSH
2927: LD_EXP 34
2931: PPUSH
2932: LD_EXP 34
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: CALL_OW 1
2950: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 17
2958: PPUSH
2959: LD_INT 14
2961: PPUSH
2962: CALL_OW 111
// wait ( 0 0$2 ) ;
2966: LD_INT 70
2968: PPUSH
2969: CALL_OW 67
// end ;
2973: GO 2892
2975: POP
2976: POP
// for i in tmp union tmp2 do
2977: LD_ADDR_VAR 0 3
2981: PUSH
2982: LD_VAR 0 4
2986: PUSH
2987: LD_VAR 0 5
2991: UNION
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3024
// begin SetSide ( i , 2 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_EXP 21
3017: PPUSH
3018: CALL_OW 112
// end ;
3022: GO 2993
3024: POP
3025: POP
// end ; end_of_file
3026: LD_VAR 0 1
3030: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
// uc_side := 3 ;
3036: LD_ADDR_OWVAR 20
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// uc_nation := 3 ;
3044: LD_ADDR_OWVAR 21
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3052: LD_ADDR_EXP 37
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3059: LD_ADDR_EXP 38
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3066: LD_ADDR_EXP 41
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3222
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3089: LD_INT 0
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 4
3100: PUSH
3101: LD_INT 5
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: PUSH
3109: LD_OWVAR 67
3113: ARRAY
3114: PPUSH
3115: CALL_OW 380
// un := CreateHuman ;
3119: LD_ADDR_VAR 0 3
3123: PUSH
3124: CALL_OW 44
3128: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3129: LD_ADDR_EXP 37
3133: PUSH
3134: LD_EXP 37
3138: PPUSH
3139: LD_EXP 37
3143: PUSH
3144: LD_INT 1
3146: PLUS
3147: PPUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: CALL_OW 1
3157: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3158: LD_VAR 0 3
3162: PPUSH
3163: LD_INT 100
3165: PPUSH
3166: LD_INT 63
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 97
3186: PPUSH
3187: LD_INT 64
3189: PPUSH
3190: CALL_OW 428
3194: PUSH
3195: LD_INT 98
3197: PPUSH
3198: LD_INT 58
3200: PPUSH
3201: CALL_OW 428
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_VAR 0 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ;
3220: GO 3086
3222: POP
3223: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3224: LD_INT 51
3226: PPUSH
3227: LD_INT 77
3229: PPUSH
3230: CALL_OW 428
3234: PPUSH
3235: CALL_OW 274
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 120
3245: PPUSH
3246: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3250: LD_INT 10
3252: PPUSH
3253: CALL_OW 274
3257: PPUSH
3258: LD_INT 2
3260: PPUSH
3261: LD_INT 300
3263: PPUSH
3264: CALL_OW 277
// for i := 1 to 2 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 2
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3396
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3284: LD_INT 0
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 3
3292: PUSH
3293: LD_INT 4
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 380
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3324: LD_ADDR_EXP 38
3328: PUSH
3329: LD_EXP 38
3333: PPUSH
3334: LD_EXP 38
3338: PUSH
3339: LD_INT 1
3341: PLUS
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: CALL_OW 1
3352: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3353: LD_VAR 0 3
3357: PPUSH
3358: LD_INT 198
3360: PPUSH
3361: LD_INT 106
3363: PPUSH
3364: CALL_OW 428
3368: PUSH
3369: LD_INT 205
3371: PPUSH
3372: LD_INT 114
3374: PPUSH
3375: CALL_OW 428
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_VAR 0 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 52
// end ;
3394: GO 3281
3396: POP
3397: POP
// for i := 1 to 2 do
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 2
3410: PUSH
3411: FOR_TO
3412: IFFALSE 3489
// begin PrepareHuman ( false , 2 , 3 ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 2
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL_OW 380
// un := CreateHuman ;
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: CALL_OW 44
3436: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3437: LD_ADDR_EXP 38
3441: PUSH
3442: LD_EXP 38
3446: PPUSH
3447: LD_EXP 38
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 1
3465: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3466: LD_VAR 0 3
3470: PPUSH
3471: LD_INT 204
3473: PPUSH
3474: LD_INT 108
3476: PPUSH
3477: LD_INT 2
3479: PPUSH
3480: LD_INT 0
3482: PPUSH
3483: CALL_OW 50
// end ;
3487: GO 3411
3489: POP
3490: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 4
3503: PUSH
3504: LD_INT 5
3506: PUSH
3507: LD_INT 6
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_OWVAR 67
3519: ARRAY
3520: PUSH
3521: FOR_TO
3522: IFFALSE 3643
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 4
3538: PUSH
3539: LD_INT 1
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 5
3554: PPUSH
3555: CALL_OW 12
3559: ARRAY
3560: PPUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: LD_OWVAR 67
3579: ARRAY
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3595: LD_VAR 0 3
3599: PPUSH
3600: LD_INT 11
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 65932 0 3
3610: IFFALSE 3641
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3612: LD_ADDR_EXP 39
3616: PUSH
3617: LD_EXP 39
3621: PPUSH
3622: LD_EXP 39
3626: PUSH
3627: LD_INT 1
3629: PLUS
3630: PPUSH
3631: LD_VAR 0 3
3635: PPUSH
3636: CALL_OW 1
3640: ST_TO_ADDR
// end ;
3641: GO 3521
3643: POP
3644: POP
// for i := 1 to 3 do
3645: LD_ADDR_VAR 0 2
3649: PUSH
3650: DOUBLE
3651: LD_INT 1
3653: DEC
3654: ST_TO_ADDR
3655: LD_INT 3
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3749
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 4
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_OWVAR 67
3685: ARRAY
3686: PPUSH
3687: CALL_OW 380
// un := CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 11
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL 65932 0 3
3716: IFFALSE 3747
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3718: LD_ADDR_EXP 39
3722: PUSH
3723: LD_EXP 39
3727: PPUSH
3728: LD_EXP 39
3732: PUSH
3733: LD_INT 1
3735: PLUS
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL_OW 1
3746: ST_TO_ADDR
// end ;
3747: GO 3658
3749: POP
3750: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3751: LD_ADDR_VAR 0 2
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 5
3763: PUSH
3764: LD_INT 6
3766: PUSH
3767: LD_INT 7
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3903
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: CALL_OW 12
3819: ARRAY
3820: PPUSH
3821: LD_INT 3
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 5
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: LD_OWVAR 67
3839: ARRAY
3840: PPUSH
3841: CALL_OW 380
// un := CreateHuman ;
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: CALL_OW 44
3854: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3855: LD_VAR 0 3
3859: PPUSH
3860: LD_INT 15
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL 65932 0 3
3870: IFFALSE 3901
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3872: LD_ADDR_EXP 40
3876: PUSH
3877: LD_EXP 40
3881: PPUSH
3882: LD_EXP 40
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// end ;
3901: GO 3781
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
// uc_side := 3 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// uc_nation := 3 ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// for i := 1 to 6 do
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: DOUBLE
3937: LD_INT 1
3939: DEC
3940: ST_TO_ADDR
3941: LD_INT 6
3943: PUSH
3944: FOR_TO
3945: IFFALSE 4024
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 1
3952: PUSH
3953: LD_INT 4
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 1
3962: PPUSH
3963: LD_INT 2
3965: PPUSH
3966: CALL_OW 12
3970: ARRAY
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL_OW 380
// un := CreateHuman ;
3979: LD_ADDR_VAR 0 3
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 54
3996: PPUSH
3997: LD_INT 88
3999: PPUSH
4000: LD_INT 12
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 50
// SetLives ( un , 1 ) ;
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_INT 1
4017: PPUSH
4018: CALL_OW 234
// end ;
4022: GO 3944
4024: POP
4025: POP
// uc_side := 3 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 3
4033: ST_TO_ADDR
// uc_nation := 0 ;
4034: LD_ADDR_OWVAR 21
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4042: LD_ADDR_EXP 42
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// apeEngGroup := [ ] ;
4049: LD_ADDR_EXP 43
4053: PUSH
4054: EMPTY
4055: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 4
4068: PUSH
4069: LD_INT 5
4071: PUSH
4072: LD_INT 6
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_OWVAR 67
4084: ARRAY
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4201
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PUSH
4098: LD_INT 4
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_OWVAR 67
4113: ARRAY
4114: PPUSH
4115: CALL_OW 380
// un := CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4129: LD_ADDR_EXP 42
4133: PUSH
4134: LD_EXP 42
4138: PPUSH
4139: LD_EXP 42
4143: PUSH
4144: LD_INT 1
4146: PLUS
4147: PPUSH
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 1
4157: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4158: LD_VAR 0 3
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: LD_INT 5
4168: PPUSH
4169: CALL_OW 12
4173: PPUSH
4174: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 56
4185: PPUSH
4186: LD_INT 82
4188: PPUSH
4189: LD_INT 6
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 50
// end ;
4199: GO 4086
4201: POP
4202: POP
// for i := 1 to 2 do
4203: LD_ADDR_VAR 0 2
4207: PUSH
4208: DOUBLE
4209: LD_INT 1
4211: DEC
4212: ST_TO_ADDR
4213: LD_INT 2
4215: PUSH
4216: FOR_TO
4217: IFFALSE 4293
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4219: LD_INT 0
4221: PPUSH
4222: LD_INT 16
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: CALL_OW 380
// un := CreateHuman ;
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: CALL_OW 44
4241: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4242: LD_ADDR_EXP 43
4246: PUSH
4247: LD_EXP 43
4251: PPUSH
4252: LD_EXP 43
4256: PUSH
4257: LD_INT 1
4259: PLUS
4260: PPUSH
4261: LD_VAR 0 3
4265: PPUSH
4266: CALL_OW 1
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 51
4278: PPUSH
4279: LD_INT 77
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 52
// end ;
4291: GO 4216
4293: POP
4294: POP
// end ;
4295: LD_VAR 0 1
4299: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4300: LD_EXP 42
4304: PPUSH
4305: LD_INT 3
4307: PUSH
4308: LD_INT 24
4310: PUSH
4311: LD_INT 600
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: EMPTY
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 72
4343: PUSH
4344: LD_INT 66
4346: PPUSH
4347: LD_INT 89
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 302
4359: AND
4360: IFFALSE 4445
4362: GO 4364
4364: DISABLE
4365: LD_INT 0
4367: PPUSH
// begin enable ;
4368: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_EXP 42
4378: PPUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 24
4384: PUSH
4385: LD_INT 600
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: LD_INT 54
4401: PUSH
4402: EMPTY
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PPUSH
4413: CALL_OW 72
4417: PUSH
4418: FOR_IN
4419: IFFALSE 4443
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4421: LD_VAR 0 1
4425: PPUSH
4426: LD_INT 66
4428: PPUSH
4429: LD_INT 89
4431: PPUSH
4432: CALL_OW 428
4436: PPUSH
4437: CALL_OW 120
4441: GO 4418
4443: POP
4444: POP
// end ;
4445: PPOPN 1
4447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4448: LD_INT 22
4450: PUSH
4451: LD_INT 2
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 92
4460: PUSH
4461: LD_INT 54
4463: PUSH
4464: LD_INT 77
4466: PUSH
4467: LD_INT 8
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: IFFALSE 4548
4486: GO 4488
4488: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4489: LD_EXP 43
4493: PPUSH
4494: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4498: LD_EXP 43
4502: PPUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 92
4515: PUSH
4516: LD_INT 54
4518: PUSH
4519: LD_INT 77
4521: PUSH
4522: LD_INT 8
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PPUSH
4535: CALL_OW 69
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 175
// end ;
4548: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4560: LD_ADDR_VAR 0 3
4564: PUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 3
4570: PPUSH
4571: CALL_OW 12
4575: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4576: LD_ADDR_VAR 0 5
4580: PUSH
4581: LD_INT 16
4583: PUSH
4584: LD_INT 17
4586: PUSH
4587: LD_INT 19
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_VAR 0 3
4599: ARRAY
4600: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4601: LD_ADDR_VAR 0 7
4605: PUSH
4606: LD_INT 159
4608: PUSH
4609: LD_INT 25
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 137
4618: PUSH
4619: LD_INT 37
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 123
4628: PUSH
4629: LD_INT 55
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 115
4638: PUSH
4639: LD_INT 71
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 106
4648: PUSH
4649: LD_INT 88
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 97
4658: PUSH
4659: LD_INT 114
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 75
4668: PUSH
4669: LD_INT 146
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 206
4687: PUSH
4688: LD_INT 135
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 184
4697: PUSH
4698: LD_INT 111
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 154
4707: PUSH
4708: LD_INT 97
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 122
4717: PUSH
4718: LD_INT 80
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 109
4727: PUSH
4728: LD_INT 78
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 97
4737: PUSH
4738: LD_INT 113
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 75
4747: PUSH
4748: LD_INT 147
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 185
4766: PUSH
4767: LD_INT 72
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 171
4776: PUSH
4777: LD_INT 83
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 161
4786: PUSH
4787: LD_INT 99
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 125
4796: PUSH
4797: LD_INT 82
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 105
4806: PUSH
4807: LD_INT 90
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 96
4816: PUSH
4817: LD_INT 116
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 75
4826: PUSH
4827: LD_INT 147
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_VAR 0 3
4852: ARRAY
4853: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4854: LD_ADDR_VAR 0 4
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 5
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 3
4877: ARRAY
4878: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4879: LD_ADDR_VAR 0 6
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 20
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_VAR 0 3
4902: ARRAY
4903: ST_TO_ADDR
// for i := 1 to 2 do
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: DOUBLE
4910: LD_INT 1
4912: DEC
4913: ST_TO_ADDR
4914: LD_INT 2
4916: PUSH
4917: FOR_TO
4918: IFFALSE 4936
// EraseResourceArea ( i , outerSpawnArea ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_VAR 0 6
4929: PPUSH
4930: CALL_OW 286
4934: GO 4917
4936: POP
4937: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4938: LD_VAR 0 6
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 21
4968: PUSH
4969: LD_INT 3
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 70
4986: IFFALSE 5201
// repeat wait ( 0 0$1 ) ;
4988: LD_INT 35
4990: PPUSH
4991: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4995: LD_VAR 0 6
4999: PPUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 21
5005: PUSH
5006: LD_INT 2
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5093
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: PPUSH
5072: CALL_OW 70
5076: PUSH
5077: FOR_IN
5078: IFFALSE 5091
// RemoveUnit ( i ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: CALL_OW 64
5089: GO 5077
5091: POP
5092: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 21
5100: PUSH
5101: LD_INT 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 6
5123: PPUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL_OW 70
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5159
// ComMoveXY ( i , 113 , 53 ) ;
5142: LD_VAR 0 2
5146: PPUSH
5147: LD_INT 113
5149: PPUSH
5150: LD_INT 53
5152: PPUSH
5153: CALL_OW 111
5157: GO 5139
5159: POP
5160: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 2
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 70
5198: NOT
5199: IFFALSE 4988
// case convoyCounter of 1 .. 3 :
5201: LD_EXP 16
5205: PUSH
5206: LD_INT 1
5208: DOUBLE
5209: GREATEREQUAL
5210: IFFALSE 5218
5212: LD_INT 3
5214: DOUBLE
5215: LESSEQUAL
5216: IFTRUE 5220
5218: GO 5815
5220: POP
// begin uc_side := 3 ;
5221: LD_ADDR_OWVAR 20
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// uc_nation := 3 ;
5229: LD_ADDR_OWVAR 21
5233: PUSH
5234: LD_INT 3
5236: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_INT 5
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 7
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: LD_OWVAR 67
5265: ARRAY
5266: PUSH
5267: LD_EXP 16
5271: MINUS
5272: PUSH
5273: FOR_TO
5274: IFFALSE 5461
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5276: LD_INT 0
5278: PPUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: LD_INT 4
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: PPUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: LD_INT 6
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_OWVAR 67
5327: ARRAY
5328: PPUSH
5329: CALL_OW 380
// un := CreateHuman ;
5333: LD_ADDR_VAR 0 8
5337: PUSH
5338: CALL_OW 44
5342: ST_TO_ADDR
// SetDir ( un , dir ) ;
5343: LD_VAR 0 8
5347: PPUSH
5348: LD_VAR 0 4
5352: PPUSH
5353: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5357: LD_VAR 0 8
5361: PPUSH
5362: LD_VAR 0 5
5366: PPUSH
5367: LD_INT 0
5369: PPUSH
5370: CALL 65932 0 3
5374: IFFALSE 5459
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5376: LD_ADDR_EXP 41
5380: PUSH
5381: LD_EXP 41
5385: PPUSH
5386: LD_EXP 41
5390: PUSH
5391: LD_INT 1
5393: PLUS
5394: PPUSH
5395: LD_VAR 0 8
5399: PPUSH
5400: CALL_OW 1
5404: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5405: LD_VAR 0 8
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5417: LD_VAR 0 8
5421: PPUSH
5422: LD_VAR 0 7
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: LD_VAR 0 7
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PUSH
5444: LD_INT 2
5446: ARRAY
5447: PPUSH
5448: CALL_OW 111
// wait ( 0 0$2 ) ;
5452: LD_INT 70
5454: PPUSH
5455: CALL_OW 67
// end ; end ;
5459: GO 5273
5461: POP
5462: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: DOUBLE
5469: LD_INT 1
5471: DEC
5472: ST_TO_ADDR
5473: LD_INT 3
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: LD_OWVAR 67
5491: ARRAY
5492: PUSH
5493: FOR_TO
5494: IFFALSE 5811
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5496: LD_INT 3
5498: PPUSH
5499: LD_INT 3
5501: PPUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 22
5507: PUSH
5508: LD_INT 23
5510: PUSH
5511: LD_INT 24
5513: PUSH
5514: LD_INT 24
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_OWVAR 67
5528: PPUSH
5529: LD_OWVAR 67
5533: PUSH
5534: LD_INT 2
5536: PLUS
5537: PPUSH
5538: CALL_OW 12
5542: ARRAY
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 42
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 43
5558: PUSH
5559: LD_INT 44
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 1
5574: PPUSH
5575: LD_OWVAR 67
5579: PUSH
5580: LD_INT 2
5582: PLUS
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: PPUSH
5590: LD_INT 90
5592: PPUSH
5593: CALL 435 0 7
// un := CreateVehicle ;
5597: LD_ADDR_VAR 0 8
5601: PUSH
5602: CALL_OW 45
5606: ST_TO_ADDR
// SetDir ( un , dir ) ;
5607: LD_VAR 0 8
5611: PPUSH
5612: LD_VAR 0 4
5616: PPUSH
5617: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5621: LD_VAR 0 8
5625: PPUSH
5626: LD_VAR 0 5
5630: PPUSH
5631: LD_INT 0
5633: PPUSH
5634: CALL 65932 0 3
5638: IFFALSE 5809
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5640: LD_ADDR_EXP 41
5644: PUSH
5645: LD_EXP 41
5649: PPUSH
5650: LD_EXP 41
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: PPUSH
5659: LD_VAR 0 8
5663: PPUSH
5664: CALL_OW 1
5668: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: LD_INT 5
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PUSH
5686: LD_OWVAR 67
5690: ARRAY
5691: PPUSH
5692: CALL_OW 383
// un := CreateHuman ;
5696: LD_ADDR_VAR 0 8
5700: PUSH
5701: CALL_OW 44
5705: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5706: LD_VAR 0 8
5710: PPUSH
5711: LD_EXP 41
5715: PUSH
5716: LD_EXP 41
5720: ARRAY
5721: PPUSH
5722: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5726: LD_ADDR_EXP 41
5730: PUSH
5731: LD_EXP 41
5735: PPUSH
5736: LD_EXP 41
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_VAR 0 8
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5755: LD_VAR 0 8
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5767: LD_VAR 0 8
5771: PPUSH
5772: LD_VAR 0 7
5776: PUSH
5777: LD_INT 1
5779: ARRAY
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PPUSH
5785: LD_VAR 0 7
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 2
5796: ARRAY
5797: PPUSH
5798: CALL_OW 111
// wait ( 0 0$3 ) ;
5802: LD_INT 105
5804: PPUSH
5805: CALL_OW 67
// end ; end ;
5809: GO 5493
5811: POP
5812: POP
// end ; 4 .. 7 :
5813: GO 6368
5815: LD_INT 4
5817: DOUBLE
5818: GREATEREQUAL
5819: IFFALSE 5827
5821: LD_INT 7
5823: DOUBLE
5824: LESSEQUAL
5825: IFTRUE 5829
5827: GO 6367
5829: POP
// begin uc_side := 3 ;
5830: LD_ADDR_OWVAR 20
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// uc_nation := 3 ;
5838: LD_ADDR_OWVAR 21
5842: PUSH
5843: LD_INT 3
5845: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5846: LD_ADDR_VAR 0 2
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_INT 2
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: LD_INT 4
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_OWVAR 67
5874: ARRAY
5875: PUSH
5876: FOR_TO
5877: IFFALSE 6037
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_OWVAR 67
5903: ARRAY
5904: PPUSH
5905: CALL_OW 380
// un := CreateHuman ;
5909: LD_ADDR_VAR 0 8
5913: PUSH
5914: CALL_OW 44
5918: ST_TO_ADDR
// SetDir ( un , dir ) ;
5919: LD_VAR 0 8
5923: PPUSH
5924: LD_VAR 0 4
5928: PPUSH
5929: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5933: LD_VAR 0 8
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_INT 0
5945: PPUSH
5946: CALL 65932 0 3
5950: IFFALSE 6035
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5952: LD_ADDR_EXP 41
5956: PUSH
5957: LD_EXP 41
5961: PPUSH
5962: LD_EXP 41
5966: PUSH
5967: LD_INT 1
5969: PLUS
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 1
5980: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5981: LD_VAR 0 8
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5993: LD_VAR 0 8
5997: PPUSH
5998: LD_VAR 0 7
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: PUSH
6007: LD_INT 1
6009: ARRAY
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PUSH
6020: LD_INT 2
6022: ARRAY
6023: PPUSH
6024: CALL_OW 111
// wait ( 0 0$2 ) ;
6028: LD_INT 70
6030: PPUSH
6031: CALL_OW 67
// end ; end ;
6035: GO 5876
6037: POP
6038: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6039: LD_ADDR_VAR 0 2
6043: PUSH
6044: DOUBLE
6045: LD_INT 1
6047: DEC
6048: ST_TO_ADDR
6049: LD_INT 2
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_OWVAR 67
6067: ARRAY
6068: PUSH
6069: FOR_TO
6070: IFFALSE 6363
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL_OW 12
6098: ARRAY
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: LD_INT 42
6108: PUSH
6109: LD_INT 44
6111: PUSH
6112: LD_INT 43
6114: PUSH
6115: LD_INT 44
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_OWVAR 67
6131: PUSH
6132: LD_INT 1
6134: PLUS
6135: PPUSH
6136: CALL_OW 12
6140: ARRAY
6141: PPUSH
6142: LD_INT 90
6144: PPUSH
6145: CALL 435 0 7
// un := CreateVehicle ;
6149: LD_ADDR_VAR 0 8
6153: PUSH
6154: CALL_OW 45
6158: ST_TO_ADDR
// SetDir ( un , dir ) ;
6159: LD_VAR 0 8
6163: PPUSH
6164: LD_VAR 0 4
6168: PPUSH
6169: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6173: LD_VAR 0 8
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL 65932 0 3
6190: IFFALSE 6361
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6192: LD_ADDR_EXP 41
6196: PUSH
6197: LD_EXP 41
6201: PPUSH
6202: LD_EXP 41
6206: PUSH
6207: LD_INT 1
6209: PLUS
6210: PPUSH
6211: LD_VAR 0 8
6215: PPUSH
6216: CALL_OW 1
6220: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6221: LD_INT 0
6223: PPUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PPUSH
6244: CALL_OW 383
// un := CreateHuman ;
6248: LD_ADDR_VAR 0 8
6252: PUSH
6253: CALL_OW 44
6257: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6258: LD_VAR 0 8
6262: PPUSH
6263: LD_EXP 41
6267: PUSH
6268: LD_EXP 41
6272: ARRAY
6273: PPUSH
6274: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6278: LD_ADDR_EXP 41
6282: PUSH
6283: LD_EXP 41
6287: PPUSH
6288: LD_EXP 41
6292: PUSH
6293: LD_INT 1
6295: PLUS
6296: PPUSH
6297: LD_VAR 0 8
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6307: LD_VAR 0 8
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 7
6328: PUSH
6329: LD_INT 1
6331: ARRAY
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_VAR 0 7
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PUSH
6346: LD_INT 2
6348: ARRAY
6349: PPUSH
6350: CALL_OW 111
// wait ( 0 0$2 ) ;
6354: LD_INT 70
6356: PPUSH
6357: CALL_OW 67
// end ; end ;
6361: GO 6069
6363: POP
6364: POP
// end ; end ;
6365: GO 6368
6367: POP
// repeat wait ( 0 0$1 ) ;
6368: LD_INT 35
6370: PPUSH
6371: CALL_OW 67
// for un in ruConvoySquad do
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_EXP 41
6384: PUSH
6385: FOR_IN
6386: IFFALSE 6881
// begin if IsInArea ( un , westSouthOutArea ) then
6388: LD_VAR 0 8
6392: PPUSH
6393: LD_INT 18
6395: PPUSH
6396: CALL_OW 308
6400: IFFALSE 6479
// begin if GetType ( un ) = unit_vehicle then
6402: LD_VAR 0 8
6406: PPUSH
6407: CALL_OW 247
6411: PUSH
6412: LD_INT 2
6414: EQUAL
6415: IFFALSE 6438
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6417: LD_ADDR_EXP 41
6421: PUSH
6422: LD_EXP 41
6426: PUSH
6427: LD_VAR 0 8
6431: PPUSH
6432: CALL_OW 311
6436: DIFF
6437: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
6438: LD_ADDR_EXP 15
6442: PUSH
6443: LD_EXP 15
6447: PUSH
6448: LD_INT 1
6450: PLUS
6451: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6452: LD_ADDR_EXP 41
6456: PUSH
6457: LD_EXP 41
6461: PUSH
6462: LD_VAR 0 8
6466: DIFF
6467: ST_TO_ADDR
// RemoveUnit ( un ) ;
6468: LD_VAR 0 8
6472: PPUSH
6473: CALL_OW 64
// break ;
6477: GO 6881
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6479: LD_VAR 0 8
6483: PPUSH
6484: CALL_OW 305
6488: NOT
6489: PUSH
6490: LD_VAR 0 8
6494: PPUSH
6495: CALL_OW 310
6499: NOT
6500: AND
6501: IFFALSE 6519
// ruConvoySquad := ruConvoySquad diff un ;
6503: LD_ADDR_EXP 41
6507: PUSH
6508: LD_EXP 41
6512: PUSH
6513: LD_VAR 0 8
6517: DIFF
6518: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6519: LD_VAR 0 8
6523: PPUSH
6524: CALL_OW 302
6528: PUSH
6529: LD_VAR 0 8
6533: PPUSH
6534: CALL_OW 314
6538: NOT
6539: AND
6540: IFFALSE 6879
// begin tag := GetTag ( un ) ;
6542: LD_ADDR_VAR 0 9
6546: PUSH
6547: LD_VAR 0 8
6551: PPUSH
6552: CALL_OW 110
6556: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6557: LD_VAR 0 8
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 9
6571: PUSH
6572: LD_INT 1
6574: PLUS
6575: ARRAY
6576: PUSH
6577: LD_INT 1
6579: ARRAY
6580: PPUSH
6581: LD_VAR 0 7
6585: PUSH
6586: LD_VAR 0 9
6590: PUSH
6591: LD_INT 1
6593: PLUS
6594: ARRAY
6595: PUSH
6596: LD_INT 2
6598: ARRAY
6599: PPUSH
6600: CALL_OW 297
6604: PUSH
6605: LD_INT 6
6607: LESS
6608: IFFALSE 6719
// begin SetTag ( un , tag + 1 ) ;
6610: LD_VAR 0 8
6614: PPUSH
6615: LD_VAR 0 9
6619: PUSH
6620: LD_INT 1
6622: PLUS
6623: PPUSH
6624: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6628: LD_VAR 0 8
6632: PPUSH
6633: CALL_OW 247
6637: PUSH
6638: LD_INT 2
6640: EQUAL
6641: PUSH
6642: LD_VAR 0 8
6646: PPUSH
6647: CALL_OW 257
6651: PUSH
6652: LD_INT 3
6654: EQUAL
6655: OR
6656: IFFALSE 6717
// begin AddComWait ( un , 0 0$4 ) ;
6658: LD_VAR 0 8
6662: PPUSH
6663: LD_INT 140
6665: PPUSH
6666: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6670: LD_VAR 0 8
6674: PPUSH
6675: LD_VAR 0 7
6679: PUSH
6680: LD_VAR 0 9
6684: PUSH
6685: LD_INT 1
6687: PLUS
6688: ARRAY
6689: PUSH
6690: LD_INT 1
6692: ARRAY
6693: PPUSH
6694: LD_VAR 0 7
6698: PUSH
6699: LD_VAR 0 9
6703: PUSH
6704: LD_INT 1
6706: PLUS
6707: ARRAY
6708: PUSH
6709: LD_INT 2
6711: ARRAY
6712: PPUSH
6713: CALL_OW 174
// end ; end else
6717: GO 6879
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6719: LD_VAR 0 8
6723: PPUSH
6724: CALL_OW 257
6728: PUSH
6729: LD_INT 4
6731: EQUAL
6732: PUSH
6733: LD_EXP 41
6737: PPUSH
6738: LD_INT 21
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: LD_INT 24
6753: PUSH
6754: LD_INT 1000
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PPUSH
6769: CALL_OW 72
6773: AND
6774: IFFALSE 6832
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6776: LD_VAR 0 8
6780: PPUSH
6781: LD_EXP 41
6785: PPUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 1
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: LD_INT 24
6801: PUSH
6802: LD_INT 1000
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: LD_INT 1
6824: ARRAY
6825: PPUSH
6826: CALL_OW 128
6830: GO 6879
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6832: LD_VAR 0 8
6836: PPUSH
6837: LD_VAR 0 7
6841: PUSH
6842: LD_VAR 0 9
6846: PUSH
6847: LD_INT 1
6849: PLUS
6850: ARRAY
6851: PUSH
6852: LD_INT 1
6854: ARRAY
6855: PPUSH
6856: LD_VAR 0 7
6860: PUSH
6861: LD_VAR 0 9
6865: PUSH
6866: LD_INT 1
6868: PLUS
6869: ARRAY
6870: PUSH
6871: LD_INT 2
6873: ARRAY
6874: PPUSH
6875: CALL_OW 114
// end ; end ; end ;
6879: GO 6385
6881: POP
6882: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
6883: LD_EXP 41
6887: PPUSH
6888: LD_INT 52
6890: PUSH
6891: EMPTY
6892: LIST
6893: PUSH
6894: LD_INT 21
6896: PUSH
6897: LD_INT 1
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PPUSH
6908: CALL_OW 72
6912: NOT
6913: IFFALSE 6368
// end ;
6915: LD_VAR 0 1
6919: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6920: LD_EXP 16
6924: PUSH
6925: LD_INT 3
6927: PPUSH
6928: LD_INT 5
6930: PPUSH
6931: CALL_OW 12
6935: LESS
6936: PUSH
6937: LD_EXP 41
6941: NOT
6942: AND
6943: PUSH
6944: LD_OWVAR 67
6948: PUSH
6949: LD_INT 1
6951: GREATER
6952: AND
6953: IFFALSE 7341
6955: GO 6957
6957: DISABLE
6958: LD_INT 0
6960: PPUSH
6961: PPUSH
6962: PPUSH
// begin uc_side := 3 ;
6963: LD_ADDR_OWVAR 20
6967: PUSH
6968: LD_INT 3
6970: ST_TO_ADDR
// uc_nation := 3 ;
6971: LD_ADDR_OWVAR 21
6975: PUSH
6976: LD_INT 3
6978: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6979: LD_ADDR_VAR 0 1
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_INT 2
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: LD_INT 4
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: PUSH
7003: LD_OWVAR 67
7007: ARRAY
7008: PUSH
7009: FOR_TO
7010: IFFALSE 7262
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7012: LD_INT 3
7014: PPUSH
7015: LD_INT 3
7017: PPUSH
7018: LD_INT 21
7020: PUSH
7021: LD_INT 22
7023: PUSH
7024: LD_INT 23
7026: PUSH
7027: LD_INT 24
7029: PUSH
7030: LD_INT 24
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: PUSH
7040: LD_OWVAR 67
7044: PPUSH
7045: LD_OWVAR 67
7049: PUSH
7050: LD_INT 2
7052: PLUS
7053: PPUSH
7054: CALL_OW 12
7058: ARRAY
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: LD_INT 1
7065: PPUSH
7066: LD_INT 42
7068: PUSH
7069: LD_INT 44
7071: PUSH
7072: LD_INT 43
7074: PUSH
7075: LD_INT 44
7077: PUSH
7078: LD_INT 46
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 1
7090: PPUSH
7091: LD_OWVAR 67
7095: PUSH
7096: LD_INT 2
7098: PLUS
7099: PPUSH
7100: CALL_OW 12
7104: ARRAY
7105: PPUSH
7106: LD_INT 90
7108: PPUSH
7109: CALL 435 0 7
// un := CreateVehicle ;
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: CALL_OW 45
7122: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7123: LD_VAR 0 3
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7135: LD_VAR 0 3
7139: PPUSH
7140: LD_INT 23
7142: PPUSH
7143: LD_INT 0
7145: PPUSH
7146: CALL 65932 0 3
7150: IFFALSE 7260
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7152: LD_ADDR_VAR 0 2
7156: PUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: LD_VAR 0 2
7166: PUSH
7167: LD_INT 1
7169: PLUS
7170: PPUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 1
7180: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7181: LD_INT 0
7183: PPUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 4
7189: PUSH
7190: LD_INT 5
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: LD_OWVAR 67
7202: ARRAY
7203: PPUSH
7204: CALL_OW 383
// un := CreateHuman ;
7208: LD_ADDR_VAR 0 3
7212: PUSH
7213: CALL_OW 44
7217: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7218: LD_VAR 0 3
7222: PPUSH
7223: LD_VAR 0 2
7227: PUSH
7228: LD_VAR 0 2
7232: ARRAY
7233: PPUSH
7234: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7238: LD_VAR 0 3
7242: PPUSH
7243: LD_INT 80
7245: PPUSH
7246: LD_INT 139
7248: PPUSH
7249: CALL_OW 111
// wait ( 0 0$3 ) ;
7253: LD_INT 105
7255: PPUSH
7256: CALL_OW 67
// end ; end ;
7260: GO 7009
7262: POP
7263: POP
// for i in tmp do
7264: LD_ADDR_VAR 0 1
7268: PUSH
7269: LD_VAR 0 2
7273: PUSH
7274: FOR_IN
7275: IFFALSE 7339
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7277: LD_VAR 0 1
7281: PPUSH
7282: LD_INT 101
7284: PPUSH
7285: LD_INT 102
7287: PPUSH
7288: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7292: LD_VAR 0 1
7296: PPUSH
7297: LD_INT 110
7299: PPUSH
7300: LD_INT 78
7302: PPUSH
7303: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7307: LD_VAR 0 1
7311: PPUSH
7312: LD_INT 75
7314: PPUSH
7315: LD_INT 101
7317: PPUSH
7318: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7322: LD_VAR 0 1
7326: PPUSH
7327: LD_INT 57
7329: PPUSH
7330: LD_INT 83
7332: PPUSH
7333: CALL_OW 174
// end ;
7337: GO 7274
7339: POP
7340: POP
// end ; end_of_file
7341: PPOPN 3
7343: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7344: LD_VAR 0 1
7348: PUSH
7349: LD_EXP 21
7353: EQUAL
7354: IFFALSE 7363
// YouLost ( Heike ) ;
7356: LD_STRING Heike
7358: PPUSH
7359: CALL_OW 104
// if un in apeSoldGroup then
7363: LD_VAR 0 1
7367: PUSH
7368: LD_EXP 42
7372: IN
7373: IFFALSE 7391
// apeSoldGroup := apeSoldGroup diff un ;
7375: LD_ADDR_EXP 42
7379: PUSH
7380: LD_EXP 42
7384: PUSH
7385: LD_VAR 0 1
7389: DIFF
7390: ST_TO_ADDR
// if un in apeEngGroup then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_EXP 43
7400: IN
7401: IFFALSE 7419
// apeEngGroup := apeEngGroup diff un ;
7403: LD_ADDR_EXP 43
7407: PUSH
7408: LD_EXP 43
7412: PUSH
7413: LD_VAR 0 1
7417: DIFF
7418: ST_TO_ADDR
// if un in oilBaseGuard then
7419: LD_VAR 0 1
7423: PUSH
7424: LD_EXP 38
7428: IN
7429: IFFALSE 7447
// oilBaseGuard := oilBaseGuard diff un ;
7431: LD_ADDR_EXP 38
7435: PUSH
7436: LD_EXP 38
7440: PUSH
7441: LD_VAR 0 1
7445: DIFF
7446: ST_TO_ADDR
// if un in ruNorthGroup then
7447: LD_VAR 0 1
7451: PUSH
7452: LD_EXP 39
7456: IN
7457: IFFALSE 7475
// ruNorthGroup := ruNorthGroup diff un ;
7459: LD_ADDR_EXP 39
7463: PUSH
7464: LD_EXP 39
7468: PUSH
7469: LD_VAR 0 1
7473: DIFF
7474: ST_TO_ADDR
// if un in ruSouthGroup then
7475: LD_VAR 0 1
7479: PUSH
7480: LD_EXP 40
7484: IN
7485: IFFALSE 7503
// ruSouthGroup := ruSouthGroup diff un ;
7487: LD_ADDR_EXP 40
7491: PUSH
7492: LD_EXP 40
7496: PUSH
7497: LD_VAR 0 1
7501: DIFF
7502: ST_TO_ADDR
// if un in ruConvoySquad then
7503: LD_VAR 0 1
7507: PUSH
7508: LD_EXP 41
7512: IN
7513: IFFALSE 7531
// ruConvoySquad := ruConvoySquad diff un ;
7515: LD_ADDR_EXP 41
7519: PUSH
7520: LD_EXP 41
7524: PUSH
7525: LD_VAR 0 1
7529: DIFF
7530: ST_TO_ADDR
// end ;
7531: PPOPN 1
7533: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7534: LD_VAR 0 1
7538: PPUSH
7539: CALL_OW 264
7543: PUSH
7544: LD_INT 30
7546: EQUAL
7547: IFFALSE 7557
// radarConstructed := true ;
7549: LD_ADDR_EXP 13
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7557: LD_VAR 0 1
7561: PPUSH
7562: CALL_OW 264
7566: PUSH
7567: LD_INT 26
7569: EQUAL
7570: IFFALSE 7580
// flamethrowerBuilt := true ;
7572: LD_ADDR_EXP 20
7576: PUSH
7577: LD_INT 1
7579: ST_TO_ADDR
// end ;
7580: PPOPN 2
7582: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7583: LD_ADDR_EXP 18
7587: PUSH
7588: LD_EXP 18
7592: PUSH
7593: LD_INT 1
7595: PLUS
7596: ST_TO_ADDR
// if oldId in ruConvoySquad then
7597: LD_VAR 0 2
7601: PUSH
7602: LD_EXP 41
7606: IN
7607: IFFALSE 7625
// ruConvoySquad := ruConvoySquad diff oldId ;
7609: LD_ADDR_EXP 41
7613: PUSH
7614: LD_EXP 41
7618: PUSH
7619: LD_VAR 0 2
7623: DIFF
7624: ST_TO_ADDR
// if newId in ruConvoySquad then
7625: LD_VAR 0 1
7629: PUSH
7630: LD_EXP 41
7634: IN
7635: IFFALSE 7653
// ruConvoySquad := ruConvoySquad diff newId ;
7637: LD_ADDR_EXP 41
7641: PUSH
7642: LD_EXP 41
7646: PUSH
7647: LD_VAR 0 1
7651: DIFF
7652: ST_TO_ADDR
// end ; end_of_file
7653: PPOPN 4
7655: END
// export function Action ; var i , un , veh , tmp ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
7662: PPUSH
// InGameOn ;
7663: CALL_OW 8
// music_nat := 2 ;
7667: LD_ADDR_OWVAR 71
7671: PUSH
7672: LD_INT 2
7674: ST_TO_ADDR
// music_class := 0 ;
7675: LD_ADDR_OWVAR 72
7679: PUSH
7680: LD_INT 0
7682: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7683: LD_INT 7
7685: PPUSH
7686: LD_INT 6
7688: PPUSH
7689: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7693: LD_INT 7
7695: PPUSH
7696: LD_INT 6
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: LD_INT 20
7704: NEG
7705: PPUSH
7706: CALL 1219 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7710: LD_ADDR_VAR 0 5
7714: PUSH
7715: LD_EXP 21
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_EXP 23
7729: PUSH
7730: LD_EXP 24
7734: PUSH
7735: LD_EXP 25
7739: PUSH
7740: LD_EXP 26
7744: PUSH
7745: LD_EXP 27
7749: PUSH
7750: LD_EXP 28
7754: PUSH
7755: LD_EXP 33
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: ST_TO_ADDR
// tmp := tmp diff 0 ;
7771: LD_ADDR_VAR 0 5
7775: PUSH
7776: LD_VAR 0 5
7780: PUSH
7781: LD_INT 0
7783: DIFF
7784: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7785: LD_ADDR_VAR 0 5
7789: PUSH
7790: LD_VAR 0 5
7794: PPUSH
7795: LD_INT 3
7797: PPUSH
7798: CALL 65524 0 2
7802: ST_TO_ADDR
// for i in heikeVehicles do
7803: LD_ADDR_VAR 0 2
7807: PUSH
7808: LD_EXP 35
7812: PUSH
7813: FOR_IN
7814: IFFALSE 8013
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7816: LD_INT 5
7818: PPUSH
7819: LD_VAR 0 2
7823: PUSH
7824: LD_INT 5
7826: ARRAY
7827: PPUSH
7828: LD_VAR 0 2
7832: PUSH
7833: LD_INT 1
7835: ARRAY
7836: PPUSH
7837: LD_VAR 0 2
7841: PUSH
7842: LD_INT 2
7844: ARRAY
7845: PPUSH
7846: LD_VAR 0 2
7850: PUSH
7851: LD_INT 3
7853: ARRAY
7854: PPUSH
7855: LD_VAR 0 2
7859: PUSH
7860: LD_INT 4
7862: ARRAY
7863: PPUSH
7864: LD_INT 34
7866: PPUSH
7867: CALL 435 0 7
// veh := CreateVehicle ;
7871: LD_ADDR_VAR 0 4
7875: PUSH
7876: CALL_OW 45
7880: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 4
7888: ARRAY
7889: PUSH
7890: LD_INT 51
7892: PUSH
7893: LD_INT 32
7895: PUSH
7896: LD_INT 12
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: IN
7904: IFFALSE 7984
// begin if i [ 7 ] [ 1 ] then
7906: LD_VAR 0 2
7910: PUSH
7911: LD_INT 7
7913: ARRAY
7914: PUSH
7915: LD_INT 1
7917: ARRAY
7918: IFFALSE 7945
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7920: LD_VAR 0 4
7924: PPUSH
7925: LD_INT 1
7927: PPUSH
7928: LD_VAR 0 2
7932: PUSH
7933: LD_INT 7
7935: ARRAY
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7945: LD_VAR 0 2
7949: PUSH
7950: LD_INT 7
7952: ARRAY
7953: PUSH
7954: LD_INT 2
7956: ARRAY
7957: IFFALSE 7984
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7959: LD_VAR 0 4
7963: PPUSH
7964: LD_INT 2
7966: PPUSH
7967: LD_VAR 0 2
7971: PUSH
7972: LD_INT 7
7974: ARRAY
7975: PUSH
7976: LD_INT 2
7978: ARRAY
7979: PPUSH
7980: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
7984: LD_VAR 0 4
7988: PPUSH
7989: LD_INT 2
7991: PPUSH
7992: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
7996: LD_VAR 0 4
8000: PPUSH
8001: LD_INT 4
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 49
// end ;
8011: GO 7813
8013: POP
8014: POP
// if tmp then
8015: LD_VAR 0 5
8019: IFFALSE 8074
// for i in tmp union heikeApes do
8021: LD_ADDR_VAR 0 2
8025: PUSH
8026: LD_VAR 0 5
8030: PUSH
8031: LD_EXP 36
8035: UNION
8036: PUSH
8037: FOR_IN
8038: IFFALSE 8072
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
8040: LD_VAR 0 2
8044: PPUSH
8045: LD_INT 5
8047: PPUSH
8048: LD_INT 0
8050: PPUSH
8051: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8055: LD_VAR 0 2
8059: PPUSH
8060: LD_INT 26
8062: PPUSH
8063: LD_INT 9
8065: PPUSH
8066: CALL_OW 118
// end ;
8070: GO 8037
8072: POP
8073: POP
// if heikeSecondSquad then
8074: LD_EXP 34
8078: IFFALSE 8127
// for i in heikeSecondSquad do
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_EXP 34
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8125
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8093: LD_VAR 0 2
8097: PPUSH
8098: LD_INT 6
8100: PPUSH
8101: LD_INT 0
8103: PPUSH
8104: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8108: LD_VAR 0 2
8112: PPUSH
8113: LD_INT 26
8115: PPUSH
8116: LD_INT 9
8118: PPUSH
8119: CALL_OW 118
// end ;
8123: GO 8090
8125: POP
8126: POP
// if heikeApes then
8127: LD_EXP 36
8131: IFFALSE 8174
// for i in heikeApes do
8133: LD_ADDR_VAR 0 2
8137: PUSH
8138: LD_EXP 36
8142: PUSH
8143: FOR_IN
8144: IFFALSE 8172
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8146: LD_VAR 0 2
8150: PPUSH
8151: LD_INT 7
8153: PPUSH
8154: LD_INT 0
8156: PPUSH
8157: CALL_OW 49
// ComHold ( i ) ;
8161: LD_VAR 0 2
8165: PPUSH
8166: CALL_OW 140
// end ;
8170: GO 8143
8172: POP
8173: POP
// if Kurt then
8174: LD_EXP 32
8178: IFFALSE 8210
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8180: LD_EXP 32
8184: PPUSH
8185: LD_INT 8
8187: PPUSH
8188: LD_INT 0
8190: PPUSH
8191: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8195: LD_EXP 32
8199: PPUSH
8200: LD_INT 42
8202: PPUSH
8203: LD_INT 32
8205: PPUSH
8206: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8210: LD_EXP 21
8214: PPUSH
8215: LD_STRING DH-Start-1
8217: PPUSH
8218: CALL_OW 88
// if Givi then
8222: LD_EXP 22
8226: IFFALSE 8489
// begin Say ( Givi , DG-Start-2-5 ) ;
8228: LD_EXP 22
8232: PPUSH
8233: LD_STRING DG-Start-2-5
8235: PPUSH
8236: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8240: LD_EXP 21
8244: PPUSH
8245: LD_STRING DH-Start-3
8247: PPUSH
8248: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8252: LD_EXP 21
8256: PPUSH
8257: LD_STRING DH-Start-4
8259: PPUSH
8260: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8264: LD_EXP 22
8268: PPUSH
8269: LD_STRING DG-Start-5
8271: PPUSH
8272: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8276: LD_EXP 21
8280: PPUSH
8281: LD_STRING DH-Start-6
8283: PPUSH
8284: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8288: LD_EXP 22
8292: PPUSH
8293: LD_STRING DG-Start-7
8295: PPUSH
8296: CALL_OW 88
// if Mike then
8300: LD_EXP 23
8304: IFFALSE 8477
// begin Say ( Mike , DM-Start-8 ) ;
8306: LD_EXP 23
8310: PPUSH
8311: LD_STRING DM-Start-8
8313: PPUSH
8314: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8318: LD_EXP 23
8322: PPUSH
8323: LD_STRING DM-Start-9
8325: PPUSH
8326: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8330: LD_EXP 22
8334: PPUSH
8335: LD_STRING DG-Start-10
8337: PPUSH
8338: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8342: LD_EXP 22
8346: PPUSH
8347: LD_STRING DG-Start-11
8349: PPUSH
8350: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8354: LD_EXP 21
8358: PPUSH
8359: LD_STRING DH-Start-12
8361: PPUSH
8362: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8366: LD_EXP 22
8370: PPUSH
8371: LD_STRING DG-Start-13
8373: PPUSH
8374: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8378: LD_EXP 22
8382: PPUSH
8383: LD_STRING DG-Start-14
8385: PPUSH
8386: CALL_OW 88
// if Kaia then
8390: LD_EXP 26
8394: IFFALSE 8477
// begin Say ( Kaia , DK-Start-15 ) ;
8396: LD_EXP 26
8400: PPUSH
8401: LD_STRING DK-Start-15
8403: PPUSH
8404: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8408: LD_EXP 26
8412: PPUSH
8413: LD_STRING DK-Start-16
8415: PPUSH
8416: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8420: LD_EXP 26
8424: PPUSH
8425: LD_STRING DK-Start-17
8427: PPUSH
8428: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8432: LD_INT 10
8434: PPUSH
8435: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8439: LD_EXP 22
8443: PPUSH
8444: LD_EXP 26
8448: PPUSH
8449: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8453: LD_EXP 22
8457: PPUSH
8458: LD_STRING DG-Start-18
8460: PPUSH
8461: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8465: LD_EXP 26
8469: PPUSH
8470: LD_STRING DK-Start-19
8472: PPUSH
8473: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8477: LD_EXP 21
8481: PPUSH
8482: LD_STRING DH-Start-20
8484: PPUSH
8485: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8489: LD_INT 70
8491: PPUSH
8492: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8496: LD_EXP 29
8500: PPUSH
8501: LD_STRING DShar-Start-21
8503: PPUSH
8504: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8508: LD_EXP 21
8512: PPUSH
8513: LD_STRING DH-Start-22
8515: PPUSH
8516: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8520: LD_EXP 29
8524: PPUSH
8525: LD_STRING DShar-Start-23
8527: PPUSH
8528: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8532: LD_EXP 29
8536: PPUSH
8537: LD_STRING DShar-Start-24
8539: PPUSH
8540: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8544: LD_EXP 29
8548: PPUSH
8549: LD_STRING DShar-Start-25
8551: PPUSH
8552: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8556: LD_EXP 29
8560: PPUSH
8561: LD_STRING DShar-Start-26
8563: PPUSH
8564: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8568: LD_EXP 21
8572: PPUSH
8573: LD_STRING DH-Start-27
8575: PPUSH
8576: CALL_OW 88
// if Kaia then
8580: LD_EXP 26
8584: IFFALSE 8626
// begin ComTurnUnit ( Heike , Kaia ) ;
8586: LD_EXP 21
8590: PPUSH
8591: LD_EXP 26
8595: PPUSH
8596: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8600: LD_EXP 26
8604: PPUSH
8605: LD_STRING DK-Start-28
8607: PPUSH
8608: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8612: LD_EXP 21
8616: PPUSH
8617: LD_STRING DH-Start-29
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8638
// Say ( Heike , DH-Start-a-28 ) ;
8626: LD_EXP 21
8630: PPUSH
8631: LD_STRING DH-Start-a-28
8633: PPUSH
8634: CALL_OW 88
// if Givi then
8638: LD_EXP 22
8642: IFFALSE 8877
// begin ComTurnUnit ( Heike , Givi ) ;
8644: LD_EXP 21
8648: PPUSH
8649: LD_EXP 22
8653: PPUSH
8654: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8658: LD_EXP 22
8662: PPUSH
8663: LD_EXP 21
8667: PPUSH
8668: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8672: LD_EXP 21
8676: PPUSH
8677: LD_STRING DH-Start-30
8679: PPUSH
8680: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8684: LD_EXP 21
8688: PPUSH
8689: LD_STRING DH-Start-31
8691: PPUSH
8692: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8696: LD_EXP 22
8700: PPUSH
8701: LD_STRING DG-Start-32
8703: PPUSH
8704: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8708: LD_EXP 21
8712: PPUSH
8713: LD_STRING DH-Start-33
8715: PPUSH
8716: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8720: LD_EXP 22
8724: PPUSH
8725: LD_STRING DG-Start-34
8727: PPUSH
8728: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8732: LD_EXP 22
8736: PPUSH
8737: LD_STRING DG-Start-35
8739: PPUSH
8740: CALL_OW 88
// if Kurt and not dialogue_skipped then
8744: LD_EXP 32
8748: PUSH
8749: LD_OWVAR 59
8753: NOT
8754: AND
8755: IFFALSE 8786
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8757: LD_EXP 32
8761: PPUSH
8762: LD_INT 28
8764: PPUSH
8765: LD_INT 13
8767: PPUSH
8768: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8772: LD_EXP 32
8776: PPUSH
8777: LD_EXP 21
8781: PPUSH
8782: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8786: LD_EXP 22
8790: PPUSH
8791: LD_STRING DG-Start-36
8793: PPUSH
8794: CALL_OW 88
// if Kurt then
8798: LD_EXP 32
8802: IFFALSE 8875
// begin if not Givi then
8804: LD_EXP 22
8808: NOT
8809: IFFALSE 8825
// Say ( Kurt , DKs-Start-37-a ) else
8811: LD_EXP 32
8815: PPUSH
8816: LD_STRING DKs-Start-37-a
8818: PPUSH
8819: CALL_OW 88
8823: GO 8837
// Say ( Kurt , DKs-Start-37 ) ;
8825: LD_EXP 32
8829: PPUSH
8830: LD_STRING DKs-Start-37
8832: PPUSH
8833: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8837: LD_EXP 32
8841: PPUSH
8842: LD_STRING DKs-Start-38
8844: PPUSH
8845: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8849: LD_EXP 21
8853: PPUSH
8854: LD_EXP 32
8858: PPUSH
8859: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8863: LD_EXP 21
8867: PPUSH
8868: LD_STRING DH-Start-39
8870: PPUSH
8871: CALL_OW 88
// end ; end else
8875: GO 8906
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8877: LD_EXP 34
8881: PPUSH
8882: LD_STRING DArm-Start-a-37
8884: PPUSH
8885: LD_STRING DArf-Start-a-37
8887: PPUSH
8888: CALL 1270 0 3
8892: IFFALSE 8906
// Say ( Heike , DH-Start-39 ) ;
8894: LD_EXP 21
8898: PPUSH
8899: LD_STRING DH-Start-39
8901: PPUSH
8902: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8906: LD_INT 44
8908: PPUSH
8909: LD_INT 25
8911: PPUSH
8912: CALL_OW 428
8916: IFFALSE 8933
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8918: LD_INT 44
8920: PPUSH
8921: LD_INT 25
8923: PPUSH
8924: CALL_OW 428
8928: PPUSH
8929: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8933: LD_EXP 30
8937: PPUSH
8938: LD_INT 5
8940: PPUSH
8941: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8945: LD_EXP 30
8949: PPUSH
8950: LD_INT 44
8952: PPUSH
8953: LD_INT 25
8955: PPUSH
8956: LD_INT 0
8958: PPUSH
8959: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8963: LD_EXP 30
8967: PPUSH
8968: LD_INT 29
8970: PPUSH
8971: LD_INT 12
8973: PPUSH
8974: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8978: LD_INT 35
8980: PPUSH
8981: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
8985: LD_OWVAR 59
8989: PUSH
8990: LD_EXP 21
8994: PPUSH
8995: LD_EXP 30
8999: PPUSH
9000: CALL_OW 296
9004: PUSH
9005: LD_INT 8
9007: LESS
9008: OR
9009: PUSH
9010: LD_EXP 30
9014: PPUSH
9015: LD_INT 26
9017: PPUSH
9018: LD_INT 9
9020: PPUSH
9021: CALL_OW 297
9025: PUSH
9026: LD_INT 6
9028: LESS
9029: OR
9030: IFFALSE 8978
// Say ( Olaf , DO-Scout-1 ) ;
9032: LD_EXP 30
9036: PPUSH
9037: LD_STRING DO-Scout-1
9039: PPUSH
9040: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9044: LD_EXP 30
9048: PPUSH
9049: LD_EXP 21
9053: PPUSH
9054: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9058: LD_ADDR_VAR 0 2
9062: PUSH
9063: LD_VAR 0 5
9067: PUSH
9068: LD_EXP 34
9072: UNION
9073: PUSH
9074: FOR_IN
9075: IFFALSE 9093
// ComTurnUnit ( i , Olaf ) ;
9077: LD_VAR 0 2
9081: PPUSH
9082: LD_EXP 30
9086: PPUSH
9087: CALL_OW 119
9091: GO 9074
9093: POP
9094: POP
// wait ( 0 0$0.3 ) ;
9095: LD_INT 10
9097: PPUSH
9098: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9102: LD_EXP 21
9106: PPUSH
9107: LD_EXP 30
9111: PPUSH
9112: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9116: LD_EXP 21
9120: PPUSH
9121: LD_EXP 30
9125: PPUSH
9126: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9130: LD_EXP 21
9134: PPUSH
9135: LD_STRING DH-Scout-2
9137: PPUSH
9138: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9142: LD_EXP 30
9146: PPUSH
9147: LD_STRING DO-Scout-3
9149: PPUSH
9150: CALL_OW 88
// if Mike and Givi then
9154: LD_EXP 23
9158: PUSH
9159: LD_EXP 22
9163: AND
9164: IFFALSE 9180
// Say ( Olaf , DO-Scout-4 ) else
9166: LD_EXP 30
9170: PPUSH
9171: LD_STRING DO-Scout-4
9173: PPUSH
9174: CALL_OW 88
9178: GO 9280
// begin if Mike then
9180: LD_EXP 23
9184: IFFALSE 9212
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9186: LD_EXP 30
9190: PPUSH
9191: LD_STRING DO-Scout-a-4
9193: PPUSH
9194: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9198: LD_EXP 21
9202: PPUSH
9203: LD_STRING DH-Scout-a-5
9205: PPUSH
9206: CALL_OW 88
// end else
9210: GO 9280
// if Givi then
9212: LD_EXP 22
9216: IFFALSE 9244
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9218: LD_EXP 30
9222: PPUSH
9223: LD_STRING DO-Scout-b-4
9225: PPUSH
9226: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9230: LD_EXP 21
9234: PPUSH
9235: LD_STRING DH-Scout-b-5
9237: PPUSH
9238: CALL_OW 88
// end else
9242: GO 9280
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9244: LD_EXP 30
9248: PPUSH
9249: LD_STRING DO-Scout-f-4
9251: PPUSH
9252: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9256: LD_EXP 21
9260: PPUSH
9261: LD_STRING DH-Scout-f-5
9263: PPUSH
9264: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9268: LD_EXP 30
9272: PPUSH
9273: LD_STRING DO-Scout-f-6
9275: PPUSH
9276: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9280: LD_EXP 21
9284: PPUSH
9285: LD_STRING DH-Scout-5
9287: PPUSH
9288: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DO-Scout-6
9299: PPUSH
9300: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9304: LD_EXP 30
9308: PPUSH
9309: LD_STRING DO-Scout-7
9311: PPUSH
9312: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9316: LD_EXP 21
9320: PPUSH
9321: LD_STRING DH-Scout-8
9323: PPUSH
9324: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9328: LD_EXP 21
9332: PPUSH
9333: LD_STRING DH-Scout-9
9335: PPUSH
9336: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9340: LD_EXP 30
9344: PPUSH
9345: LD_STRING DO-Scout-10
9347: PPUSH
9348: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9352: LD_EXP 30
9356: PPUSH
9357: LD_STRING DO-Scout-12
9359: PPUSH
9360: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9364: LD_EXP 30
9368: PPUSH
9369: LD_STRING DO-Scout-13
9371: PPUSH
9372: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9376: LD_EXP 30
9380: PPUSH
9381: LD_STRING DO-Scout-14
9383: PPUSH
9384: CALL_OW 88
// if Givi then
9388: LD_EXP 22
9392: IFFALSE 9418
// begin Say ( Givi , DG-Scout-15 ) ;
9394: LD_EXP 22
9398: PPUSH
9399: LD_STRING DG-Scout-15
9401: PPUSH
9402: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9406: LD_EXP 26
9410: PPUSH
9411: LD_STRING DK-Scout-16
9413: PPUSH
9414: CALL_OW 88
// end ; if not dialogue_skipped then
9418: LD_OWVAR 59
9422: NOT
9423: IFFALSE 9544
// begin async ;
9425: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9426: LD_EXP 30
9430: PPUSH
9431: LD_STRING DO-Scout-17
9433: PPUSH
9434: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9438: LD_INT 55
9440: PPUSH
9441: LD_INT 77
9443: PPUSH
9444: LD_INT 2
9446: PPUSH
9447: LD_INT 6
9449: NEG
9450: PPUSH
9451: CALL 1219 0 4
// wait ( 10 ) ;
9455: LD_INT 10
9457: PPUSH
9458: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9462: LD_INT 55
9464: PPUSH
9465: LD_INT 77
9467: PPUSH
9468: CALL_OW 84
// wait ( 0 0$5 ) ;
9472: LD_INT 175
9474: PPUSH
9475: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9479: LD_EXP 30
9483: PPUSH
9484: LD_STRING DO-Scout-18
9486: PPUSH
9487: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9491: LD_INT 204
9493: PPUSH
9494: LD_INT 107
9496: PPUSH
9497: LD_INT 2
9499: PPUSH
9500: LD_INT 12
9502: NEG
9503: PPUSH
9504: CALL 1219 0 4
// wait ( 10 ) ;
9508: LD_INT 10
9510: PPUSH
9511: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9515: LD_INT 204
9517: PPUSH
9518: LD_INT 107
9520: PPUSH
9521: CALL_OW 84
// wait ( 0 0$5 ) ;
9525: LD_INT 175
9527: PPUSH
9528: CALL_OW 67
// sync ;
9532: SYNC
// CenterNowOnUnits ( Heike ) ;
9533: LD_EXP 21
9537: PPUSH
9538: CALL_OW 87
// end else
9542: GO 9578
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9544: LD_INT 55
9546: PPUSH
9547: LD_INT 77
9549: PPUSH
9550: LD_INT 2
9552: PPUSH
9553: LD_INT 6
9555: NEG
9556: PPUSH
9557: CALL 1219 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9561: LD_INT 204
9563: PPUSH
9564: LD_INT 107
9566: PPUSH
9567: LD_INT 2
9569: PPUSH
9570: LD_INT 12
9572: NEG
9573: PPUSH
9574: CALL 1219 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
9578: LD_EXP 30
9582: PPUSH
9583: LD_STRING DO-Scout-19
9585: PPUSH
9586: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9590: LD_EXP 30
9594: PPUSH
9595: LD_STRING DO-Scout-20
9597: PPUSH
9598: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9602: LD_EXP 21
9606: PPUSH
9607: LD_STRING DH-Scout-21
9609: PPUSH
9610: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9614: LD_EXP 21
9618: PPUSH
9619: LD_STRING DH-Scout-22
9621: PPUSH
9622: CALL_OW 88
// InGameOff ;
9626: CALL_OW 9
// if Givi then
9630: LD_EXP 22
9634: IFFALSE 9649
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9636: LD_INT 13
9638: PPUSH
9639: LD_INT 2
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9649: LD_STRING Road
9651: PPUSH
9652: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_INT 22
9663: PUSH
9664: LD_INT 5
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 21
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PPUSH
9685: CALL_OW 69
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9707
// SetSide ( i , 2 ) ;
9693: LD_VAR 0 2
9697: PPUSH
9698: LD_INT 2
9700: PPUSH
9701: CALL_OW 235
9705: GO 9690
9707: POP
9708: POP
// SaveForQuickRestart ;
9709: CALL_OW 22
// end ;
9713: LD_VAR 0 1
9717: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9718: LD_INT 2
9720: PPUSH
9721: LD_INT 9
9723: PPUSH
9724: CALL_OW 294
9728: IFFALSE 10095
9730: GO 9732
9732: DISABLE
// begin DialogueOn ;
9733: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9737: LD_INT 111
9739: PPUSH
9740: LD_INT 72
9742: PPUSH
9743: LD_INT 2
9745: PPUSH
9746: LD_INT 20
9748: NEG
9749: PPUSH
9750: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9754: LD_INT 111
9756: PPUSH
9757: LD_INT 72
9759: PPUSH
9760: LD_INT 2
9762: PPUSH
9763: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9767: LD_INT 111
9769: PPUSH
9770: LD_INT 72
9772: PPUSH
9773: CALL_OW 86
// if IsOk ( Kamil ) then
9777: LD_EXP 25
9781: PPUSH
9782: CALL_OW 302
9786: IFFALSE 9903
// begin Say ( Kamil , DKam-Cross-1 ) ;
9788: LD_EXP 25
9792: PPUSH
9793: LD_STRING DKam-Cross-1
9795: PPUSH
9796: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9800: LD_EXP 25
9804: PPUSH
9805: LD_STRING DKam-Cross-2
9807: PPUSH
9808: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9812: LD_EXP 25
9816: PPUSH
9817: LD_STRING DKam-Cross-3
9819: PPUSH
9820: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9824: LD_EXP 25
9828: PPUSH
9829: LD_STRING DKam-Cross-4
9831: PPUSH
9832: CALL_OW 88
// if IsOk ( Ibrahim ) then
9836: LD_EXP 24
9840: PPUSH
9841: CALL_OW 302
9845: IFFALSE 9901
// begin if ibrahimJoinedIn04 then
9847: LD_EXP 4
9851: IFFALSE 9865
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9853: LD_EXP 24
9857: PPUSH
9858: LD_STRING DI-Cross-b-5
9860: PPUSH
9861: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9865: LD_EXP 24
9869: PPUSH
9870: LD_STRING DI-Cross-b-6
9872: PPUSH
9873: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9877: LD_EXP 24
9881: PPUSH
9882: LD_STRING DI-Cross-b-7
9884: PPUSH
9885: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9889: LD_EXP 25
9893: PPUSH
9894: LD_STRING DKam-Cross-8
9896: PPUSH
9897: CALL_OW 88
// end ; end else
9901: GO 10061
// if IsOk ( Sophia ) then
9903: LD_EXP 27
9907: PPUSH
9908: CALL_OW 302
9912: IFFALSE 10029
// begin Say ( Sophia , DS-Cross-1 ) ;
9914: LD_EXP 27
9918: PPUSH
9919: LD_STRING DS-Cross-1
9921: PPUSH
9922: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9926: LD_EXP 27
9930: PPUSH
9931: LD_STRING DS-Cross-2
9933: PPUSH
9934: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9938: LD_EXP 27
9942: PPUSH
9943: LD_STRING DS-Cross-3
9945: PPUSH
9946: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9950: LD_EXP 27
9954: PPUSH
9955: LD_STRING DS-Cross-4
9957: PPUSH
9958: CALL_OW 88
// if IsOk ( Ibrahim ) then
9962: LD_EXP 24
9966: PPUSH
9967: CALL_OW 302
9971: IFFALSE 10027
// begin if ibrahimJoinedIn04 then
9973: LD_EXP 4
9977: IFFALSE 9991
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9979: LD_EXP 24
9983: PPUSH
9984: LD_STRING DI-Cross-b-5
9986: PPUSH
9987: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9991: LD_EXP 24
9995: PPUSH
9996: LD_STRING DI-Cross-b-6
9998: PPUSH
9999: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10003: LD_EXP 24
10007: PPUSH
10008: LD_STRING DI-Cross-b-7
10010: PPUSH
10011: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10015: LD_EXP 27
10019: PPUSH
10020: LD_STRING DS-Cross-8
10022: PPUSH
10023: CALL_OW 88
// end ; end else
10027: GO 10061
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10029: LD_EXP 34
10033: PPUSH
10034: LD_INT 50
10036: PUSH
10037: EMPTY
10038: LIST
10039: PPUSH
10040: CALL_OW 72
10044: IFFALSE 10061
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10046: LD_EXP 34
10050: PPUSH
10051: LD_STRING DArm-Cross-c-1
10053: PPUSH
10054: LD_STRING DArf-Cross-c-1
10056: PPUSH
10057: CALL 1270 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10061: LD_EXP 57
10065: PPUSH
10066: LD_INT 2
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 322
// DialogueOff ;
10076: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10080: LD_STRING Crane
10082: PPUSH
10083: CALL_OW 337
// spottedCrossRoad := true ;
10087: LD_ADDR_EXP 8
10091: PUSH
10092: LD_INT 1
10094: ST_TO_ADDR
// end ;
10095: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10096: LD_INT 22
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 2
10108: PUSH
10109: LD_INT 30
10111: PUSH
10112: LD_INT 0
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PUSH
10119: LD_INT 30
10121: PUSH
10122: LD_INT 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 69
10142: PUSH
10143: LD_EXP 26
10147: PPUSH
10148: CALL_OW 302
10152: PUSH
10153: LD_EXP 34
10157: OR
10158: AND
10159: IFFALSE 10371
10161: GO 10163
10163: DISABLE
// begin DialogueOn ;
10164: CALL_OW 6
// if Kaia then
10168: LD_EXP 26
10172: IFFALSE 10185
// CenterNowOnUnits ( Kaia ) else
10174: LD_EXP 26
10178: PPUSH
10179: CALL_OW 87
10183: GO 10194
// CenterNowOnUnits ( Heike ) ;
10185: LD_EXP 21
10189: PPUSH
10190: CALL_OW 87
// if IsOk ( Kaia ) then
10194: LD_EXP 26
10198: PPUSH
10199: CALL_OW 302
10203: IFFALSE 10219
// Say ( Kaia , DK-Cam-1 ) else
10205: LD_EXP 26
10209: PPUSH
10210: LD_STRING DK-Cam-1
10212: PPUSH
10213: CALL_OW 88
10217: GO 10234
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10219: LD_EXP 34
10223: PPUSH
10224: LD_STRING DArm-Cam-1
10226: PPUSH
10227: LD_STRING DArf-Cam-1
10229: PPUSH
10230: CALL 1270 0 3
// Say ( Heike , DH-Cam-2 ) ;
10234: LD_EXP 21
10238: PPUSH
10239: LD_STRING DH-Cam-2
10241: PPUSH
10242: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10246: LD_EXP 21
10250: PPUSH
10251: LD_STRING DH-Cam-3
10253: PPUSH
10254: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10258: LD_EXP 21
10262: PPUSH
10263: LD_STRING DH-Cam-4
10265: PPUSH
10266: CALL_OW 88
// if IsOk ( Kaia ) then
10270: LD_EXP 26
10274: PPUSH
10275: CALL_OW 302
10279: IFFALSE 10295
// Say ( Kaia , DK-Cam-5 ) else
10281: LD_EXP 26
10285: PPUSH
10286: LD_STRING DK-Cam-5
10288: PPUSH
10289: CALL_OW 88
10293: GO 10310
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10295: LD_EXP 34
10299: PPUSH
10300: LD_STRING DArm-Cam-5
10302: PPUSH
10303: LD_STRING DArf-Cam-5
10305: PPUSH
10306: CALL 1270 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10310: LD_EXP 30
10314: PPUSH
10315: LD_STRING DO-Cam-6
10317: PPUSH
10318: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10322: LD_EXP 30
10326: PPUSH
10327: LD_STRING DO-Cam-7
10329: PPUSH
10330: CALL_OW 88
// DialogueOff ;
10334: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10338: LD_STRING Radar
10340: PPUSH
10341: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10345: LD_INT 6
10347: PPUSH
10348: LD_INT 2
10350: PPUSH
10351: LD_INT 1
10353: PPUSH
10354: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10358: LD_INT 20
10360: PPUSH
10361: LD_INT 2
10363: PPUSH
10364: LD_INT 1
10366: PPUSH
10367: CALL_OW 324
// end ;
10371: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10372: LD_INT 22
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: LD_INT 34
10387: PUSH
10388: LD_INT 30
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 35
10397: PUSH
10398: LD_INT 30
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PPUSH
10414: CALL_OW 69
10418: IFFALSE 10430
10420: GO 10422
10422: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10423: LD_STRING RadarDone
10425: PPUSH
10426: CALL_OW 337
10430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10431: LD_INT 22
10433: PUSH
10434: LD_INT 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 34
10443: PUSH
10444: LD_EXP 50
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PPUSH
10457: CALL_OW 69
10461: IFFALSE 10473
10463: GO 10465
10465: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10466: LD_STRING CraneDone
10468: PPUSH
10469: CALL_OW 337
10473: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10474: LD_EXP 30
10478: PPUSH
10479: CALL_OW 302
10483: PUSH
10484: LD_EXP 33
10488: PPUSH
10489: CALL_OW 302
10493: AND
10494: PUSH
10495: LD_INT 6
10497: PPUSH
10498: LD_INT 2
10500: PPUSH
10501: CALL_OW 321
10505: PUSH
10506: LD_INT 2
10508: EQUAL
10509: AND
10510: PUSH
10511: LD_EXP 33
10515: PPUSH
10516: LD_EXP 21
10520: PPUSH
10521: CALL_OW 296
10525: PUSH
10526: LD_INT 10
10528: LESS
10529: PUSH
10530: LD_EXP 33
10534: PPUSH
10535: CALL_OW 310
10539: OR
10540: AND
10541: IFFALSE 10755
10543: GO 10545
10545: DISABLE
// begin DialogueOn ;
10546: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10550: LD_EXP 33
10554: PPUSH
10555: LD_STRING DA-RC-1
10557: PPUSH
10558: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10562: LD_EXP 33
10566: PPUSH
10567: LD_STRING DA-RC-2
10569: PPUSH
10570: CALL_OW 88
// if IsOk ( Kaia ) then
10574: LD_EXP 26
10578: PPUSH
10579: CALL_OW 302
10583: IFFALSE 10657
// begin Say ( Kaia , DK-RC-3 ) ;
10585: LD_EXP 26
10589: PPUSH
10590: LD_STRING DK-RC-3
10592: PPUSH
10593: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10597: LD_EXP 33
10601: PPUSH
10602: LD_STRING DA-RC-4
10604: PPUSH
10605: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10609: LD_EXP 26
10613: PPUSH
10614: LD_STRING DK-RC-5
10616: PPUSH
10617: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10621: LD_EXP 33
10625: PPUSH
10626: LD_STRING DA-RC-6
10628: PPUSH
10629: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10633: LD_EXP 26
10637: PPUSH
10638: LD_STRING DK-RC-7
10640: PPUSH
10641: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10645: LD_EXP 33
10649: PPUSH
10650: LD_STRING DA-RC-8
10652: PPUSH
10653: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10657: LD_EXP 21
10661: PPUSH
10662: LD_STRING DH-RC-9
10664: PPUSH
10665: CALL_OW 88
// if IsOk ( Markov ) then
10669: LD_EXP 28
10673: PPUSH
10674: CALL_OW 302
10678: IFFALSE 10706
// begin Say ( Markov , DMar-RC-10 ) ;
10680: LD_EXP 28
10684: PPUSH
10685: LD_STRING DMar-RC-10
10687: PPUSH
10688: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10692: LD_EXP 28
10696: PPUSH
10697: LD_STRING DMar-RC-11
10699: PPUSH
10700: CALL_OW 88
// end else
10704: GO 10718
// begin Say ( Olaf , DO-RC-a-10 ) ;
10706: LD_EXP 30
10710: PPUSH
10711: LD_STRING DO-RC-a-10
10713: PPUSH
10714: CALL_OW 88
// end ; DialogueOff ;
10718: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10722: LD_STRING RemoteControl
10724: PPUSH
10725: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10729: LD_INT 15
10731: PPUSH
10732: LD_INT 2
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10742: LD_INT 22
10744: PPUSH
10745: LD_INT 2
10747: PPUSH
10748: LD_INT 1
10750: PPUSH
10751: CALL_OW 324
// end ;
10755: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10756: LD_INT 12
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_INT 2
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 70
10773: IFFALSE 11140
10775: GO 10777
10777: DISABLE
10778: LD_INT 0
10780: PPUSH
// begin PrepareWestBase ;
10781: CALL 3910 0 0
// westBaseSpotted := true ;
10785: LD_ADDR_EXP 5
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10793: LD_INT 70
10795: PPUSH
10796: CALL_OW 67
// InGameOn ;
10800: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10804: LD_INT 56
10806: PPUSH
10807: LD_INT 77
10809: PPUSH
10810: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10814: LD_INT 56
10816: PPUSH
10817: LD_INT 77
10819: PPUSH
10820: LD_INT 2
10822: PPUSH
10823: LD_INT 12
10825: NEG
10826: PPUSH
10827: CALL_OW 330
// wait ( 0 0$2 ) ;
10831: LD_INT 70
10833: PPUSH
10834: CALL_OW 67
// DialogueOn ;
10838: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10842: LD_EXP 21
10846: PPUSH
10847: LD_STRING DH-Rbase-1
10849: PPUSH
10850: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10854: LD_EXP 26
10858: PPUSH
10859: LD_STRING DK-Rbase-2
10861: PPUSH
10862: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10866: LD_EXP 26
10870: PPUSH
10871: LD_STRING DK-Rbase-3
10873: PPUSH
10874: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10878: LD_EXP 26
10882: PPUSH
10883: LD_STRING DK-Rbase-4
10885: PPUSH
10886: CALL_OW 88
// DialogueOff ;
10890: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10894: LD_INT 56
10896: PPUSH
10897: LD_INT 77
10899: PPUSH
10900: LD_INT 2
10902: PPUSH
10903: CALL_OW 331
// InGameOff ;
10907: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10911: LD_INT 35
10913: PPUSH
10914: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10918: LD_EXP 42
10922: NOT
10923: PUSH
10924: LD_EXP 43
10928: NOT
10929: AND
10930: IFFALSE 10911
// wait ( 0 0$2 ) ;
10932: LD_INT 70
10934: PPUSH
10935: CALL_OW 67
// if IsOk ( Kaia ) then
10939: LD_EXP 26
10943: PPUSH
10944: CALL_OW 302
10948: IFFALSE 11063
// begin DialogueOn ;
10950: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10954: LD_INT 56
10956: PPUSH
10957: LD_INT 81
10959: PPUSH
10960: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
10964: LD_EXP 26
10968: PPUSH
10969: LD_STRING DK-Rbase-5
10971: PPUSH
10972: CALL_OW 88
// if IsOk ( Givi ) then
10976: LD_EXP 22
10980: PPUSH
10981: CALL_OW 302
10985: IFFALSE 11059
// begin Say ( Givi , DG-Rbase-6 ) ;
10987: LD_EXP 22
10991: PPUSH
10992: LD_STRING DG-Rbase-6
10994: PPUSH
10995: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
10999: LD_EXP 22
11003: PPUSH
11004: LD_STRING DG-Rbase-7
11006: PPUSH
11007: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11011: LD_EXP 26
11015: PPUSH
11016: LD_STRING DK-Rbase-8
11018: PPUSH
11019: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11023: LD_EXP 22
11027: PPUSH
11028: LD_STRING DG-Rbase-9
11030: PPUSH
11031: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11035: LD_EXP 22
11039: PPUSH
11040: LD_STRING DG-Rbase-10
11042: PPUSH
11043: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11047: LD_EXP 26
11051: PPUSH
11052: LD_STRING DK-Rbase-11
11054: PPUSH
11055: CALL_OW 88
// end ; DialogueOff ;
11059: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11063: LD_ADDR_VAR 0 1
11067: PUSH
11068: LD_INT 12
11070: PPUSH
11071: LD_INT 22
11073: PUSH
11074: LD_INT 3
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 21
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PPUSH
11095: CALL_OW 70
11099: PUSH
11100: FOR_IN
11101: IFFALSE 11117
// SetSide ( i , 2 ) ;
11103: LD_VAR 0 1
11107: PPUSH
11108: LD_INT 2
11110: PPUSH
11111: CALL_OW 235
11115: GO 11100
11117: POP
11118: POP
// westBaseCaptured := true ;
11119: LD_ADDR_EXP 9
11123: PUSH
11124: LD_INT 1
11126: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11127: LD_INT 0
11129: PPUSH
11130: LD_INT 2
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 324
// end ;
11140: PPOPN 1
11142: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11143: LD_EXP 38
11147: NOT
11148: PUSH
11149: LD_INT 10
11151: PPUSH
11152: CALL_OW 255
11156: PUSH
11157: LD_INT 2
11159: EQUAL
11160: OR
11161: IFFALSE 11298
11163: GO 11165
11165: DISABLE
// begin DialogueOn ;
11166: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11170: LD_EXP 21
11174: PPUSH
11175: LD_STRING DH-Goal-1
11177: PPUSH
11178: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11182: LD_EXP 29
11186: PPUSH
11187: LD_STRING DShar-Goal-2
11189: PPUSH
11190: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11194: LD_EXP 21
11198: PPUSH
11199: LD_STRING DH-Goal-3
11201: PPUSH
11202: CALL_OW 88
// if reinforcementsAllowed then
11206: LD_EXP 14
11210: IFFALSE 11236
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11212: LD_EXP 29
11216: PPUSH
11217: LD_STRING DShar-Goal-4
11219: PPUSH
11220: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11224: LD_EXP 21
11228: PPUSH
11229: LD_STRING DH-Goal-5
11231: PPUSH
11232: CALL_OW 88
// end ; DialogueOff ;
11236: CALL_OW 7
// eastBaseCaptured := true ;
11240: LD_ADDR_EXP 10
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11248: LD_STRING BaseCaptured
11250: PPUSH
11251: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11255: LD_INT 10
11257: PPUSH
11258: LD_INT 2
11260: PPUSH
11261: CALL_OW 235
// if not reinforcementsAllowed then
11265: LD_EXP 14
11269: NOT
11270: IFFALSE 11274
// exit ;
11272: GO 11298
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11274: LD_INT 21000
11276: PUSH
11277: LD_INT 1050
11279: NEG
11280: PPUSH
11281: LD_INT 1050
11283: PPUSH
11284: CALL_OW 12
11288: PLUS
11289: PPUSH
11290: CALL_OW 67
// PrepareReinforcements ;
11294: CALL 2238 0 0
// end ;
11298: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11299: LD_INT 22
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: LD_INT 13
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PPUSH
11323: CALL_OW 69
11327: IFFALSE 11344
11329: GO 11331
11331: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11332: LD_EXP 22
11336: PPUSH
11337: LD_STRING DG-Lab-1
11339: PPUSH
11340: CALL_OW 88
// end ;
11344: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11345: LD_INT 5
11347: PPUSH
11348: LD_INT 2
11350: PPUSH
11351: CALL_OW 321
11355: PUSH
11356: LD_INT 2
11358: EQUAL
11359: PUSH
11360: LD_EXP 22
11364: PPUSH
11365: CALL_OW 302
11369: AND
11370: IFFALSE 11431
11372: GO 11374
11374: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11375: LD_EXP 22
11379: PPUSH
11380: LD_STRING DG-Stim-1
11382: PPUSH
11383: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11387: LD_EXP 21
11391: PPUSH
11392: LD_STRING DH-Stim-2
11394: PPUSH
11395: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11399: LD_EXP 22
11403: PPUSH
11404: LD_STRING DG-Stim-3
11406: PPUSH
11407: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11411: LD_EXP 21
11415: PPUSH
11416: LD_STRING DH-Stim-4
11418: PPUSH
11419: CALL_OW 88
// drugsResearched := true ;
11423: LD_ADDR_EXP 11
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// end ;
11431: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11432: LD_EXP 11
11436: IFFALSE 11748
11438: GO 11440
11440: DISABLE
11441: LD_INT 0
11443: PPUSH
11444: PPUSH
11445: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11446: LD_ADDR_VAR 0 2
11450: PUSH
11451: LD_EXP 21
11455: PUSH
11456: LD_EXP 22
11460: PUSH
11461: LD_EXP 30
11465: PUSH
11466: LD_EXP 28
11470: PUSH
11471: LD_EXP 26
11475: PUSH
11476: LD_EXP 27
11480: PUSH
11481: LD_EXP 32
11485: PUSH
11486: LD_EXP 25
11490: PUSH
11491: LD_EXP 23
11495: PUSH
11496: LD_EXP 24
11500: PUSH
11501: LD_EXP 33
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11519: LD_ADDR_VAR 0 3
11523: PUSH
11524: LD_STRING H
11526: PUSH
11527: LD_STRING G
11529: PUSH
11530: LD_STRING O
11532: PUSH
11533: LD_STRING Mar
11535: PUSH
11536: LD_STRING K
11538: PUSH
11539: LD_STRING S
11541: PUSH
11542: LD_STRING Ks
11544: PUSH
11545: LD_STRING Kam
11547: PUSH
11548: LD_STRING M
11550: PUSH
11551: LD_STRING I
11553: PUSH
11554: LD_STRING A
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11570: LD_INT 35
11572: PPUSH
11573: CALL_OW 67
// for i := tmp downto 1 do
11577: LD_ADDR_VAR 0 1
11581: PUSH
11582: DOUBLE
11583: LD_VAR 0 2
11587: INC
11588: ST_TO_ADDR
11589: LD_INT 1
11591: PUSH
11592: FOR_DOWNTO
11593: IFFALSE 11739
// if GetLives ( tmp [ i ] ) < 250 then
11595: LD_VAR 0 2
11599: PUSH
11600: LD_VAR 0 1
11604: ARRAY
11605: PPUSH
11606: CALL_OW 256
11610: PUSH
11611: LD_INT 250
11613: LESS
11614: IFFALSE 11737
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11616: LD_ADDR_EXP 19
11620: PUSH
11621: LD_EXP 19
11625: PUSH
11626: LD_INT 1
11628: PLUS
11629: ST_TO_ADDR
// DialogueOn ;
11630: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11634: LD_VAR 0 2
11638: PUSH
11639: LD_VAR 0 1
11643: ARRAY
11644: PPUSH
11645: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11649: LD_VAR 0 2
11653: PUSH
11654: LD_VAR 0 1
11658: ARRAY
11659: PPUSH
11660: LD_STRING D
11662: PUSH
11663: LD_VAR 0 3
11667: PUSH
11668: LD_VAR 0 1
11672: ARRAY
11673: STR
11674: PUSH
11675: LD_STRING -Stim-a-1
11677: STR
11678: PPUSH
11679: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11683: LD_ADDR_VAR 0 2
11687: PUSH
11688: LD_VAR 0 2
11692: PPUSH
11693: LD_VAR 0 1
11697: PPUSH
11698: CALL_OW 3
11702: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11703: LD_ADDR_VAR 0 3
11707: PUSH
11708: LD_VAR 0 3
11712: PPUSH
11713: LD_VAR 0 1
11717: PPUSH
11718: CALL_OW 3
11722: ST_TO_ADDR
// drugsTested := true ;
11723: LD_ADDR_EXP 6
11727: PUSH
11728: LD_INT 1
11730: ST_TO_ADDR
// DialogueOff ;
11731: CALL_OW 7
// break ;
11735: GO 11739
// end ;
11737: GO 11592
11739: POP
11740: POP
// until not tmp ;
11741: LD_VAR 0 2
11745: NOT
11746: IFFALSE 11570
// end ;
11748: PPOPN 3
11750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11751: LD_INT 22
11753: PUSH
11754: LD_INT 2
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 34
11763: PUSH
11764: LD_INT 31
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PPUSH
11775: CALL_OW 69
11779: PUSH
11780: LD_INT 22
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 33
11792: PUSH
11793: LD_INT 2
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: AND
11809: IFFALSE 11822
11811: GO 11813
11813: DISABLE
// remoteControlConstructed := true ;
11814: LD_ADDR_EXP 12
11818: PUSH
11819: LD_INT 1
11821: ST_TO_ADDR
11822: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11823: LD_EXP 12
11827: IFFALSE 12127
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
11835: PPUSH
11836: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11837: LD_ADDR_VAR 0 2
11841: PUSH
11842: LD_EXP 21
11846: PUSH
11847: LD_EXP 22
11851: PUSH
11852: LD_EXP 30
11856: PUSH
11857: LD_EXP 28
11861: PUSH
11862: LD_EXP 26
11866: PUSH
11867: LD_EXP 27
11871: PUSH
11872: LD_EXP 32
11876: PUSH
11877: LD_EXP 25
11881: PUSH
11882: LD_EXP 23
11886: PUSH
11887: LD_EXP 24
11891: PUSH
11892: LD_EXP 33
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11910: LD_ADDR_VAR 0 3
11914: PUSH
11915: LD_STRING H
11917: PUSH
11918: LD_STRING G
11920: PUSH
11921: LD_STRING O
11923: PUSH
11924: LD_STRING Mar
11926: PUSH
11927: LD_STRING K
11929: PUSH
11930: LD_STRING S
11932: PUSH
11933: LD_STRING Ks
11935: PUSH
11936: LD_STRING Kam
11938: PUSH
11939: LD_STRING M
11941: PUSH
11942: LD_STRING I
11944: PUSH
11945: LD_STRING A
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11961: LD_INT 35
11963: PPUSH
11964: CALL_OW 67
// for i := tmp downto 1 do
11968: LD_ADDR_VAR 0 1
11972: PUSH
11973: DOUBLE
11974: LD_VAR 0 2
11978: INC
11979: ST_TO_ADDR
11980: LD_INT 1
11982: PUSH
11983: FOR_DOWNTO
11984: IFFALSE 12118
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
11986: LD_VAR 0 2
11990: PUSH
11991: LD_VAR 0 1
11995: ARRAY
11996: PPUSH
11997: CALL_OW 257
12001: PUSH
12002: LD_INT 3
12004: EQUAL
12005: PUSH
12006: LD_VAR 0 2
12010: PUSH
12011: LD_VAR 0 1
12015: ARRAY
12016: PPUSH
12017: CALL_OW 432
12021: AND
12022: IFFALSE 12116
// begin DialogueOn ;
12024: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12028: LD_VAR 0 2
12032: PUSH
12033: LD_VAR 0 1
12037: ARRAY
12038: PPUSH
12039: LD_STRING D
12041: PUSH
12042: LD_VAR 0 3
12046: PUSH
12047: LD_VAR 0 1
12051: ARRAY
12052: STR
12053: PUSH
12054: LD_STRING -RC-a-1
12056: STR
12057: PPUSH
12058: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12062: LD_ADDR_VAR 0 2
12066: PUSH
12067: LD_VAR 0 2
12071: PPUSH
12072: LD_VAR 0 1
12076: PPUSH
12077: CALL_OW 3
12081: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12082: LD_ADDR_VAR 0 3
12086: PUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_VAR 0 1
12096: PPUSH
12097: CALL_OW 3
12101: ST_TO_ADDR
// DialogueOff ;
12102: CALL_OW 7
// remoteControlTested := true ;
12106: LD_ADDR_EXP 7
12110: PUSH
12111: LD_INT 1
12113: ST_TO_ADDR
// break ;
12114: GO 12118
// end ;
12116: GO 11983
12118: POP
12119: POP
// until not tmp ;
12120: LD_VAR 0 2
12124: NOT
12125: IFFALSE 11961
// end ;
12127: PPOPN 3
12129: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12130: LD_EXP 7
12134: PUSH
12135: LD_EXP 28
12139: PPUSH
12140: CALL_OW 302
12144: AND
12145: IFFALSE 12174
12147: GO 12149
12149: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12150: LD_EXP 28
12154: PPUSH
12155: LD_STRING DMar-RC-a-2
12157: PPUSH
12158: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12162: LD_EXP 28
12166: PPUSH
12167: LD_STRING DMar-RC-a-3
12169: PPUSH
12170: CALL_OW 88
// end ;
12174: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12175: LD_EXP 14
12179: PUSH
12180: LD_EXP 21
12184: PPUSH
12185: LD_EXP 33
12189: PPUSH
12190: CALL_OW 296
12194: PUSH
12195: LD_INT 8
12197: LESS
12198: AND
12199: PUSH
12200: LD_INT 2
12202: PPUSH
12203: CALL_OW 463
12207: NOT
12208: AND
12209: PUSH
12210: LD_EXP 33
12214: PPUSH
12215: CALL_OW 302
12219: AND
12220: PUSH
12221: LD_EXP 21
12225: PPUSH
12226: CALL_OW 302
12230: AND
12231: IFFALSE 12409
12233: GO 12235
12235: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12236: LD_EXP 33
12240: PPUSH
12241: CALL_OW 310
12245: NOT
12246: IFFALSE 12262
// ComTurnUnit ( Aviradze , Heike ) ;
12248: LD_EXP 33
12252: PPUSH
12253: LD_EXP 21
12257: PPUSH
12258: CALL_OW 119
// if not IsInUnit ( Heike ) then
12262: LD_EXP 21
12266: PPUSH
12267: CALL_OW 310
12271: NOT
12272: IFFALSE 12288
// ComTurnUnit ( Heike , Aviradze ) ;
12274: LD_EXP 21
12278: PPUSH
12279: LD_EXP 33
12283: PPUSH
12284: CALL_OW 119
// wait ( 0 0$1 ) ;
12288: LD_INT 35
12290: PPUSH
12291: CALL_OW 67
// DialogueOn ;
12295: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12299: LD_EXP 33
12303: PPUSH
12304: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12308: LD_EXP 21
12312: PPUSH
12313: LD_STRING DH-Beria-1
12315: PPUSH
12316: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12320: LD_EXP 33
12324: PPUSH
12325: LD_STRING DA-Beria-2
12327: PPUSH
12328: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12332: LD_EXP 21
12336: PPUSH
12337: LD_STRING DH-Beria-3
12339: PPUSH
12340: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12344: LD_EXP 33
12348: PPUSH
12349: LD_STRING DA-Beria-4
12351: PPUSH
12352: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12356: LD_EXP 33
12360: PPUSH
12361: LD_STRING DA-Beria-5
12363: PPUSH
12364: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12368: LD_EXP 33
12372: PPUSH
12373: LD_STRING DA-Beria-6
12375: PPUSH
12376: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12380: LD_EXP 21
12384: PPUSH
12385: LD_STRING DA-Beria-7
12387: PPUSH
12388: CALL_OW 88
// DialogueOff ;
12392: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12396: LD_INT 52
12398: PPUSH
12399: LD_INT 2
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 322
// end ;
12409: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12410: LD_EXP 26
12414: PPUSH
12415: CALL_OW 300
12419: PUSH
12420: LD_EXP 26
12424: PPUSH
12425: CALL_OW 256
12429: PUSH
12430: LD_INT 10
12432: LESS
12433: AND
12434: IFFALSE 12471
12436: GO 12438
12438: DISABLE
// begin DialogueOn ;
12439: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12443: LD_EXP 26
12447: PPUSH
12448: LD_STRING DK-Kdeath-1
12450: PPUSH
12451: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12455: LD_EXP 21
12459: PPUSH
12460: LD_STRING DH-Kdeath-2
12462: PPUSH
12463: CALL_OW 88
// DialogueOff ;
12467: CALL_OW 7
// end ;
12471: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12472: LD_INT 2
12474: PPUSH
12475: LD_EXP 39
12479: PPUSH
12480: CALL 1370 0 2
12484: IFFALSE 12501
12486: GO 12488
12488: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12489: LD_EXP 21
12493: PPUSH
12494: LD_STRING DH-Obj-1
12496: PPUSH
12497: CALL_OW 88
12501: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12502: LD_INT 2
12504: PPUSH
12505: LD_EXP 40
12509: PPUSH
12510: CALL 1370 0 2
12514: IFFALSE 12531
12516: GO 12518
12518: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12519: LD_EXP 21
12523: PPUSH
12524: LD_STRING DH-Obj-a-1
12526: PPUSH
12527: CALL_OW 88
12531: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12532: LD_EXP 10
12536: PUSH
12537: LD_OWVAR 1
12541: PUSH
12542: LD_INT 14700
12544: PUSH
12545: LD_INT 13650
12547: PUSH
12548: LD_INT 12600
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: PUSH
12556: LD_OWVAR 67
12560: ARRAY
12561: GREATEREQUAL
12562: OR
12563: IFFALSE 12591
12565: GO 12567
12567: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12568: LD_INT 4200
12570: PPUSH
12571: LD_INT 5250
12573: PPUSH
12574: CALL_OW 12
12578: PPUSH
12579: CALL_OW 67
// convoyStarted := true ;
12583: LD_ADDR_EXP 17
12587: PUSH
12588: LD_INT 1
12590: ST_TO_ADDR
// end ;
12591: END
// every 0 0$1 trigger convoyStarted do
12592: LD_EXP 17
12596: IFFALSE 12680
12598: GO 12600
12600: DISABLE
// begin DialogueOn ;
12601: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12605: LD_EXP 29
12609: PPUSH
12610: LD_STRING DShar-Convoy-1
12612: PPUSH
12613: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12617: LD_EXP 21
12621: PPUSH
12622: LD_STRING DH-Convoy-2
12624: PPUSH
12625: CALL_OW 88
// DialogueOff ;
12629: CALL_OW 7
// PrepareConvoy ;
12633: CALL 4549 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
12637: LD_INT 5250
12639: PPUSH
12640: LD_INT 11550
12642: PPUSH
12643: CALL_OW 12
12647: PPUSH
12648: CALL_OW 67
// PrepareConvoy ;
12652: CALL 4549 0 0
// convoyCounter := convoyCounter - 1 ;
12656: LD_ADDR_EXP 16
12660: PUSH
12661: LD_EXP 16
12665: PUSH
12666: LD_INT 1
12668: MINUS
12669: ST_TO_ADDR
// until convoyCounter <= 0 ;
12670: LD_EXP 16
12674: PUSH
12675: LD_INT 0
12677: LESSEQUAL
12678: IFFALSE 12637
// end ;
12680: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12681: LD_EXP 15
12685: PUSH
12686: LD_INT 10
12688: GREATEREQUAL
12689: IFFALSE 12706
12691: GO 12693
12693: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12694: LD_EXP 31
12698: PPUSH
12699: LD_STRING DOm-Fail-1
12701: PPUSH
12702: CALL_OW 94
12706: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12707: LD_EXP 39
12711: NOT
12712: PUSH
12713: LD_EXP 40
12717: NOT
12718: AND
12719: IFFALSE 12731
12721: GO 12723
12723: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12724: LD_STRING RaiderDone
12726: PPUSH
12727: CALL_OW 337
12731: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12732: LD_INT 22
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 33
12744: PUSH
12745: LD_INT 2
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 69
12760: PUSH
12761: LD_INT 3
12763: GREATEREQUAL
12764: PUSH
12765: LD_INT 22
12767: PUSH
12768: LD_INT 2
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 34
12777: PUSH
12778: LD_INT 31
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 69
12793: PUSH
12794: LD_INT 2
12796: GREATEREQUAL
12797: AND
12798: IFFALSE 12810
12800: GO 12802
12802: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12803: LD_STRING RemoteControlDone
12805: PPUSH
12806: CALL_OW 337
12810: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
12811: LD_EXP 16
12815: PUSH
12816: LD_INT 1
12818: LESS
12819: PUSH
12820: LD_EXP 41
12824: PPUSH
12825: LD_INT 52
12827: PUSH
12828: EMPTY
12829: LIST
12830: PUSH
12831: LD_INT 21
12833: PUSH
12834: LD_INT 1
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PPUSH
12845: CALL_OW 72
12849: NOT
12850: AND
12851: PUSH
12852: LD_OWVAR 1
12856: PUSH
12857: LD_INT 126000
12859: GREATEREQUAL
12860: OR
12861: IFFALSE 13678
12863: GO 12865
12865: DISABLE
12866: LD_INT 0
12868: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12869: LD_STRING ReinforcementsDone
12871: PPUSH
12872: CALL_OW 337
// music_class := music_victory ;
12876: LD_ADDR_OWVAR 72
12880: PUSH
12881: LD_INT 4
12883: ST_TO_ADDR
// InGameOn ;
12884: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12888: LD_EXP 21
12892: PPUSH
12893: LD_STRING DH-end-1
12895: PPUSH
12896: CALL_OW 88
// wait ( 0 0$2 ) ;
12900: LD_INT 70
12902: PPUSH
12903: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12907: LD_EXP 29
12911: PPUSH
12912: LD_STRING DShar-end-2
12914: PPUSH
12915: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12919: LD_EXP 39
12923: NOT
12924: PUSH
12925: LD_EXP 40
12929: NOT
12930: AND
12931: IFFALSE 12947
// begin Say ( Heike , DH-end-3 ) ;
12933: LD_EXP 21
12937: PPUSH
12938: LD_STRING DH-end-3
12940: PPUSH
12941: CALL_OW 88
// end else
12945: GO 13044
// begin Say ( Heike , DH-end-a-3 ) ;
12947: LD_EXP 21
12951: PPUSH
12952: LD_STRING DH-end-a-3
12954: PPUSH
12955: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12959: LD_EXP 29
12963: PPUSH
12964: LD_STRING DShar-end-a-4
12966: PPUSH
12967: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
12971: LD_EXP 21
12975: PPUSH
12976: LD_STRING DH-end-a-5
12978: PPUSH
12979: CALL_OW 88
// InGameOff ;
12983: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12987: LD_INT 35
12989: PPUSH
12990: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12994: LD_INT 22
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 21
13006: PUSH
13007: LD_INT 1
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PPUSH
13018: CALL_OW 69
13022: PUSH
13023: LD_INT 0
13025: EQUAL
13026: IFFALSE 12987
// InGameOn ;
13028: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13032: LD_EXP 21
13036: PPUSH
13037: LD_STRING DH-end-a-6
13039: PPUSH
13040: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13044: LD_EXP 29
13048: PPUSH
13049: LD_STRING DShar-end-3
13051: PPUSH
13052: CALL_OW 94
// if not flamethrowerBuilt then
13056: LD_EXP 20
13060: NOT
13061: IFFALSE 13070
// SetAchievement ( ACH_FIRE ) ;
13063: LD_STRING ACH_FIRE
13065: PPUSH
13066: CALL_OW 543
// if drugsTested then
13070: LD_EXP 6
13074: IFFALSE 13088
// AddMedal ( med1 , 1 ) else
13076: LD_STRING med1
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 101
13086: GO 13128
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13088: LD_INT 5
13090: PPUSH
13091: LD_INT 2
13093: PPUSH
13094: CALL_OW 321
13098: PUSH
13099: LD_INT 2
13101: EQUAL
13102: IFFALSE 13117
// AddMedal ( med1 , - 1 ) else
13104: LD_STRING med1
13106: PPUSH
13107: LD_INT 1
13109: NEG
13110: PPUSH
13111: CALL_OW 101
13115: GO 13128
// AddMedal ( med1 , - 2 ) ;
13117: LD_STRING med1
13119: PPUSH
13120: LD_INT 2
13122: NEG
13123: PPUSH
13124: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
13128: LD_INT 22
13130: PUSH
13131: LD_INT 2
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 33
13140: PUSH
13141: LD_INT 2
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: PUSH
13157: LD_INT 3
13159: GREATEREQUAL
13160: PUSH
13161: LD_INT 22
13163: PUSH
13164: LD_INT 2
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 34
13173: PUSH
13174: LD_INT 31
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PUSH
13190: LD_INT 2
13192: GREATEREQUAL
13193: AND
13194: IFFALSE 13208
// AddMedal ( med2 , 1 ) else
13196: LD_STRING med2
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: CALL_OW 101
13206: GO 13219
// AddMedal ( med2 , - 1 ) ;
13208: LD_STRING med2
13210: PPUSH
13211: LD_INT 1
13213: NEG
13214: PPUSH
13215: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13219: LD_EXP 15
13223: PUSH
13224: LD_INT 10
13226: PUSH
13227: LD_INT 8
13229: PUSH
13230: LD_INT 6
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: LD_OWVAR 67
13242: ARRAY
13243: LESS
13244: IFFALSE 13258
// AddMedal ( med3 , 1 ) else
13246: LD_STRING med3
13248: PPUSH
13249: LD_INT 1
13251: PPUSH
13252: CALL_OW 101
13256: GO 13269
// AddMedal ( med3 , - 1 ) ;
13258: LD_STRING med3
13260: PPUSH
13261: LD_INT 1
13263: NEG
13264: PPUSH
13265: CALL_OW 101
// GiveMedals ( MAIN ) ;
13269: LD_STRING MAIN
13271: PPUSH
13272: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13276: LD_INT 22
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 23
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 21
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: PPUSH
13316: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13320: LD_EXP 15
13324: PPUSH
13325: LD_STRING 05_ConvoySavedCounter
13327: PPUSH
13328: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13332: LD_EXP 13
13336: PPUSH
13337: LD_STRING 05_Radar
13339: PPUSH
13340: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13344: LD_EXP 6
13348: PPUSH
13349: LD_STRING 05_DrugsTested
13351: PPUSH
13352: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13356: LD_INT 22
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 33
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PPUSH
13380: CALL_OW 69
13384: PUSH
13385: LD_INT 3
13387: GREATEREQUAL
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 34
13401: PUSH
13402: LD_INT 31
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PPUSH
13413: CALL_OW 69
13417: PUSH
13418: LD_INT 2
13420: GREATEREQUAL
13421: AND
13422: PPUSH
13423: LD_STRING 05_RemoteControl
13425: PPUSH
13426: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13430: LD_EXP 21
13434: PPUSH
13435: LD_STRING 05_Heike
13437: PPUSH
13438: CALL_OW 38
// if Aviradze then
13442: LD_EXP 33
13446: IFFALSE 13460
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13448: LD_EXP 33
13452: PPUSH
13453: LD_STRING 05_Aviradze
13455: PPUSH
13456: CALL_OW 38
// if Ibrahim then
13460: LD_EXP 24
13464: IFFALSE 13478
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13466: LD_EXP 24
13470: PPUSH
13471: LD_STRING 05_Ibrahim
13473: PPUSH
13474: CALL_OW 38
// if Kamil then
13478: LD_EXP 25
13482: IFFALSE 13496
// SaveCharacters ( Kamil , 05_Kamil ) ;
13484: LD_EXP 25
13488: PPUSH
13489: LD_STRING 05_Kamil
13491: PPUSH
13492: CALL_OW 38
// if Sophia then
13496: LD_EXP 27
13500: IFFALSE 13514
// SaveCharacters ( Sophia , 05_Sophia ) ;
13502: LD_EXP 27
13506: PPUSH
13507: LD_STRING 05_Sophia
13509: PPUSH
13510: CALL_OW 38
// if Kaia then
13514: LD_EXP 26
13518: IFFALSE 13532
// SaveCharacters ( Kaia , 05_Kaia ) ;
13520: LD_EXP 26
13524: PPUSH
13525: LD_STRING 05_Kaia
13527: PPUSH
13528: CALL_OW 38
// if Givi then
13532: LD_EXP 22
13536: IFFALSE 13550
// SaveCharacters ( Givi , 05_Givi ) ;
13538: LD_EXP 22
13542: PPUSH
13543: LD_STRING 05_Givi
13545: PPUSH
13546: CALL_OW 38
// if Mike then
13550: LD_EXP 23
13554: IFFALSE 13568
// SaveCharacters ( Mike , 05_Mike ) ;
13556: LD_EXP 23
13560: PPUSH
13561: LD_STRING 05_Mike
13563: PPUSH
13564: CALL_OW 38
// if Markov then
13568: LD_EXP 28
13572: IFFALSE 13586
// SaveCharacters ( Markov , 05_Markov ) ;
13574: LD_EXP 28
13578: PPUSH
13579: LD_STRING 05_Markov
13581: PPUSH
13582: CALL_OW 38
// if Kurt then
13586: LD_EXP 32
13590: IFFALSE 13604
// SaveCharacters ( Kurt , 05_Kurt ) ;
13592: LD_EXP 32
13596: PPUSH
13597: LD_STRING 05_Kurt
13599: PPUSH
13600: CALL_OW 38
// if heikeSecondSquad then
13604: LD_EXP 34
13608: IFFALSE 13622
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13610: LD_EXP 34
13614: PPUSH
13615: LD_STRING 05_others
13617: PPUSH
13618: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13622: LD_ADDR_VAR 0 1
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 23
13639: PUSH
13640: LD_INT 0
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PPUSH
13651: CALL_OW 69
13655: ST_TO_ADDR
// if tmp then
13656: LD_VAR 0 1
13660: IFFALSE 13674
// SaveCharacters ( tmp , 05_apes ) ;
13662: LD_VAR 0 1
13666: PPUSH
13667: LD_STRING 05_apes
13669: PPUSH
13670: CALL_OW 38
// YouWin ;
13674: CALL_OW 103
// end ; end_of_file
13678: PPOPN 1
13680: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13681: LD_EXP 9
13685: PUSH
13686: LD_INT 13
13688: PPUSH
13689: LD_INT 1
13691: PPUSH
13692: CALL_OW 287
13696: PUSH
13697: LD_INT 25
13699: LESS
13700: AND
13701: IFFALSE 13728
13703: GO 13705
13705: DISABLE
// begin enable ;
13706: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13707: LD_INT 1
13709: PPUSH
13710: LD_INT 5
13712: PPUSH
13713: CALL_OW 12
13717: PPUSH
13718: LD_INT 13
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 55
// end ; end_of_file
13728: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13729: LD_INT 0
13731: PPUSH
// ar_miner := 81 ;
13732: LD_ADDR_EXP 51
13736: PUSH
13737: LD_INT 81
13739: ST_TO_ADDR
// ar_crane := 88 ;
13740: LD_ADDR_EXP 50
13744: PUSH
13745: LD_INT 88
13747: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13748: LD_ADDR_EXP 45
13752: PUSH
13753: LD_INT 89
13755: ST_TO_ADDR
// us_hack := 99 ;
13756: LD_ADDR_EXP 46
13760: PUSH
13761: LD_INT 99
13763: ST_TO_ADDR
// us_artillery := 97 ;
13764: LD_ADDR_EXP 47
13768: PUSH
13769: LD_INT 97
13771: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13772: LD_ADDR_EXP 48
13776: PUSH
13777: LD_INT 91
13779: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13780: LD_ADDR_EXP 49
13784: PUSH
13785: LD_INT 92
13787: ST_TO_ADDR
// ru_radar := 98 ;
13788: LD_ADDR_EXP 44
13792: PUSH
13793: LD_INT 98
13795: ST_TO_ADDR
// tech_Artillery := 80 ;
13796: LD_ADDR_EXP 52
13800: PUSH
13801: LD_INT 80
13803: ST_TO_ADDR
// tech_RadMat := 81 ;
13804: LD_ADDR_EXP 53
13808: PUSH
13809: LD_INT 81
13811: ST_TO_ADDR
// tech_BasicTools := 82 ;
13812: LD_ADDR_EXP 54
13816: PUSH
13817: LD_INT 82
13819: ST_TO_ADDR
// tech_Cargo := 83 ;
13820: LD_ADDR_EXP 55
13824: PUSH
13825: LD_INT 83
13827: ST_TO_ADDR
// tech_Track := 84 ;
13828: LD_ADDR_EXP 56
13832: PUSH
13833: LD_INT 84
13835: ST_TO_ADDR
// tech_Crane := 85 ;
13836: LD_ADDR_EXP 57
13840: PUSH
13841: LD_INT 85
13843: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13844: LD_ADDR_EXP 58
13848: PUSH
13849: LD_INT 86
13851: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13852: LD_ADDR_EXP 59
13856: PUSH
13857: LD_INT 87
13859: ST_TO_ADDR
// end ;
13860: LD_VAR 0 1
13864: RET
// every 1 do
13865: GO 13867
13867: DISABLE
// InitGlobalVariables ; end_of_file
13868: CALL 13729 0 0
13872: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13873: LD_INT 0
13875: PPUSH
13876: PPUSH
13877: PPUSH
13878: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 264
13888: PUSH
13889: LD_EXP 48
13893: EQUAL
13894: IFFALSE 13966
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13896: LD_INT 68
13898: PPUSH
13899: LD_VAR 0 1
13903: PPUSH
13904: CALL_OW 255
13908: PPUSH
13909: CALL_OW 321
13913: PUSH
13914: LD_INT 2
13916: EQUAL
13917: IFFALSE 13929
// eff := 70 else
13919: LD_ADDR_VAR 0 4
13923: PUSH
13924: LD_INT 70
13926: ST_TO_ADDR
13927: GO 13937
// eff := 30 ;
13929: LD_ADDR_VAR 0 4
13933: PUSH
13934: LD_INT 30
13936: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 250
13946: PPUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 251
13956: PPUSH
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 495
// end ; end ;
13966: LD_VAR 0 2
13970: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13971: LD_INT 0
13973: PPUSH
// end ;
13974: LD_VAR 0 4
13978: RET
// export function SOS_Command ( cmd ) ; begin
13979: LD_INT 0
13981: PPUSH
// end ;
13982: LD_VAR 0 2
13986: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13987: LD_INT 0
13989: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
13990: LD_VAR 0 1
13994: PUSH
13995: LD_INT 250
13997: EQUAL
13998: PUSH
13999: LD_VAR 0 2
14003: PPUSH
14004: CALL_OW 264
14008: PUSH
14009: LD_EXP 51
14013: EQUAL
14014: AND
14015: IFFALSE 14036
// MinerPlaceMine ( unit , x , y ) ;
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 4
14026: PPUSH
14027: LD_VAR 0 5
14031: PPUSH
14032: CALL 16377 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14036: LD_VAR 0 1
14040: PUSH
14041: LD_INT 251
14043: EQUAL
14044: PUSH
14045: LD_VAR 0 2
14049: PPUSH
14050: CALL_OW 264
14054: PUSH
14055: LD_EXP 51
14059: EQUAL
14060: AND
14061: IFFALSE 14082
// MinerDetonateMine ( unit , x , y ) ;
14063: LD_VAR 0 2
14067: PPUSH
14068: LD_VAR 0 4
14072: PPUSH
14073: LD_VAR 0 5
14077: PPUSH
14078: CALL 16654 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14082: LD_VAR 0 1
14086: PUSH
14087: LD_INT 252
14089: EQUAL
14090: PUSH
14091: LD_VAR 0 2
14095: PPUSH
14096: CALL_OW 264
14100: PUSH
14101: LD_EXP 51
14105: EQUAL
14106: AND
14107: IFFALSE 14128
// MinerCreateMinefield ( unit , x , y ) ;
14109: LD_VAR 0 2
14113: PPUSH
14114: LD_VAR 0 4
14118: PPUSH
14119: LD_VAR 0 5
14123: PPUSH
14124: CALL 17071 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14128: LD_VAR 0 1
14132: PUSH
14133: LD_INT 253
14135: EQUAL
14136: PUSH
14137: LD_VAR 0 2
14141: PPUSH
14142: CALL_OW 257
14146: PUSH
14147: LD_INT 5
14149: EQUAL
14150: AND
14151: IFFALSE 14172
// ComBinocular ( unit , x , y ) ;
14153: LD_VAR 0 2
14157: PPUSH
14158: LD_VAR 0 4
14162: PPUSH
14163: LD_VAR 0 5
14167: PPUSH
14168: CALL 17442 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14172: LD_VAR 0 1
14176: PUSH
14177: LD_INT 254
14179: EQUAL
14180: PUSH
14181: LD_VAR 0 2
14185: PPUSH
14186: CALL_OW 264
14190: PUSH
14191: LD_EXP 46
14195: EQUAL
14196: AND
14197: PUSH
14198: LD_VAR 0 3
14202: PPUSH
14203: CALL_OW 263
14207: PUSH
14208: LD_INT 3
14210: EQUAL
14211: AND
14212: IFFALSE 14228
// HackDestroyVehicle ( unit , selectedUnit ) ;
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: CALL 15737 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14228: LD_VAR 0 1
14232: PUSH
14233: LD_INT 255
14235: EQUAL
14236: PUSH
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 264
14246: PUSH
14247: LD_INT 14
14249: PUSH
14250: LD_INT 53
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: IN
14257: AND
14258: PUSH
14259: LD_VAR 0 4
14263: PPUSH
14264: LD_VAR 0 5
14268: PPUSH
14269: CALL_OW 488
14273: AND
14274: IFFALSE 14298
// CutTreeXYR ( unit , x , y , 12 ) ;
14276: LD_VAR 0 2
14280: PPUSH
14281: LD_VAR 0 4
14285: PPUSH
14286: LD_VAR 0 5
14290: PPUSH
14291: LD_INT 12
14293: PPUSH
14294: CALL 14303 0 4
// end ;
14298: LD_VAR 0 6
14302: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14303: LD_INT 0
14305: PPUSH
14306: PPUSH
14307: PPUSH
14308: PPUSH
14309: PPUSH
14310: PPUSH
14311: PPUSH
14312: PPUSH
14313: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14314: LD_VAR 0 1
14318: NOT
14319: PUSH
14320: LD_VAR 0 2
14324: PPUSH
14325: LD_VAR 0 3
14329: PPUSH
14330: CALL_OW 488
14334: NOT
14335: OR
14336: PUSH
14337: LD_VAR 0 4
14341: NOT
14342: OR
14343: IFFALSE 14347
// exit ;
14345: GO 14687
// list := [ ] ;
14347: LD_ADDR_VAR 0 13
14351: PUSH
14352: EMPTY
14353: ST_TO_ADDR
// if x - r < 0 then
14354: LD_VAR 0 2
14358: PUSH
14359: LD_VAR 0 4
14363: MINUS
14364: PUSH
14365: LD_INT 0
14367: LESS
14368: IFFALSE 14380
// min_x := 0 else
14370: LD_ADDR_VAR 0 7
14374: PUSH
14375: LD_INT 0
14377: ST_TO_ADDR
14378: GO 14396
// min_x := x - r ;
14380: LD_ADDR_VAR 0 7
14384: PUSH
14385: LD_VAR 0 2
14389: PUSH
14390: LD_VAR 0 4
14394: MINUS
14395: ST_TO_ADDR
// if y - r < 0 then
14396: LD_VAR 0 3
14400: PUSH
14401: LD_VAR 0 4
14405: MINUS
14406: PUSH
14407: LD_INT 0
14409: LESS
14410: IFFALSE 14422
// min_y := 0 else
14412: LD_ADDR_VAR 0 8
14416: PUSH
14417: LD_INT 0
14419: ST_TO_ADDR
14420: GO 14438
// min_y := y - r ;
14422: LD_ADDR_VAR 0 8
14426: PUSH
14427: LD_VAR 0 3
14431: PUSH
14432: LD_VAR 0 4
14436: MINUS
14437: ST_TO_ADDR
// max_x := x + r ;
14438: LD_ADDR_VAR 0 9
14442: PUSH
14443: LD_VAR 0 2
14447: PUSH
14448: LD_VAR 0 4
14452: PLUS
14453: ST_TO_ADDR
// max_y := y + r ;
14454: LD_ADDR_VAR 0 10
14458: PUSH
14459: LD_VAR 0 3
14463: PUSH
14464: LD_VAR 0 4
14468: PLUS
14469: ST_TO_ADDR
// for _x = min_x to max_x do
14470: LD_ADDR_VAR 0 11
14474: PUSH
14475: DOUBLE
14476: LD_VAR 0 7
14480: DEC
14481: ST_TO_ADDR
14482: LD_VAR 0 9
14486: PUSH
14487: FOR_TO
14488: IFFALSE 14605
// for _y = min_y to max_y do
14490: LD_ADDR_VAR 0 12
14494: PUSH
14495: DOUBLE
14496: LD_VAR 0 8
14500: DEC
14501: ST_TO_ADDR
14502: LD_VAR 0 10
14506: PUSH
14507: FOR_TO
14508: IFFALSE 14601
// begin if not ValidHex ( _x , _y ) then
14510: LD_VAR 0 11
14514: PPUSH
14515: LD_VAR 0 12
14519: PPUSH
14520: CALL_OW 488
14524: NOT
14525: IFFALSE 14529
// continue ;
14527: GO 14507
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14529: LD_VAR 0 11
14533: PPUSH
14534: LD_VAR 0 12
14538: PPUSH
14539: CALL_OW 351
14543: PUSH
14544: LD_VAR 0 11
14548: PPUSH
14549: LD_VAR 0 12
14553: PPUSH
14554: CALL_OW 554
14558: AND
14559: IFFALSE 14599
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14561: LD_ADDR_VAR 0 13
14565: PUSH
14566: LD_VAR 0 13
14570: PPUSH
14571: LD_VAR 0 13
14575: PUSH
14576: LD_INT 1
14578: PLUS
14579: PPUSH
14580: LD_VAR 0 11
14584: PUSH
14585: LD_VAR 0 12
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 2
14598: ST_TO_ADDR
// end ;
14599: GO 14507
14601: POP
14602: POP
14603: GO 14487
14605: POP
14606: POP
// if not list then
14607: LD_VAR 0 13
14611: NOT
14612: IFFALSE 14616
// exit ;
14614: GO 14687
// for i in list do
14616: LD_ADDR_VAR 0 6
14620: PUSH
14621: LD_VAR 0 13
14625: PUSH
14626: FOR_IN
14627: IFFALSE 14685
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14629: LD_VAR 0 1
14633: PPUSH
14634: LD_STRING M
14636: PUSH
14637: LD_VAR 0 6
14641: PUSH
14642: LD_INT 1
14644: ARRAY
14645: PUSH
14646: LD_VAR 0 6
14650: PUSH
14651: LD_INT 2
14653: ARRAY
14654: PUSH
14655: LD_INT 0
14657: PUSH
14658: LD_INT 0
14660: PUSH
14661: LD_INT 0
14663: PUSH
14664: LD_INT 0
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: PPUSH
14679: CALL_OW 447
14683: GO 14626
14685: POP
14686: POP
// end ;
14687: LD_VAR 0 5
14691: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14692: LD_EXP 60
14696: NOT
14697: IFFALSE 14747
14699: GO 14701
14701: DISABLE
// begin initHack := true ;
14702: LD_ADDR_EXP 60
14706: PUSH
14707: LD_INT 1
14709: ST_TO_ADDR
// hackTanks := [ ] ;
14710: LD_ADDR_EXP 61
14714: PUSH
14715: EMPTY
14716: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14717: LD_ADDR_EXP 62
14721: PUSH
14722: EMPTY
14723: ST_TO_ADDR
// hackLimit := 3 ;
14724: LD_ADDR_EXP 63
14728: PUSH
14729: LD_INT 3
14731: ST_TO_ADDR
// hackDist := 12 ;
14732: LD_ADDR_EXP 64
14736: PUSH
14737: LD_INT 12
14739: ST_TO_ADDR
// hackCounter := [ ] ;
14740: LD_ADDR_EXP 65
14744: PUSH
14745: EMPTY
14746: ST_TO_ADDR
// end ;
14747: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14748: LD_EXP 60
14752: PUSH
14753: LD_INT 34
14755: PUSH
14756: LD_EXP 46
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: AND
14770: IFFALSE 15025
14772: GO 14774
14774: DISABLE
14775: LD_INT 0
14777: PPUSH
14778: PPUSH
// begin enable ;
14779: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14780: LD_ADDR_VAR 0 1
14784: PUSH
14785: LD_INT 34
14787: PUSH
14788: LD_EXP 46
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: PUSH
14802: FOR_IN
14803: IFFALSE 15023
// begin if not i in hackTanks then
14805: LD_VAR 0 1
14809: PUSH
14810: LD_EXP 61
14814: IN
14815: NOT
14816: IFFALSE 14899
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14818: LD_ADDR_EXP 61
14822: PUSH
14823: LD_EXP 61
14827: PPUSH
14828: LD_EXP 61
14832: PUSH
14833: LD_INT 1
14835: PLUS
14836: PPUSH
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 1
14846: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14847: LD_ADDR_EXP 62
14851: PUSH
14852: LD_EXP 62
14856: PPUSH
14857: LD_EXP 62
14861: PUSH
14862: LD_INT 1
14864: PLUS
14865: PPUSH
14866: EMPTY
14867: PPUSH
14868: CALL_OW 1
14872: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14873: LD_ADDR_EXP 65
14877: PUSH
14878: LD_EXP 65
14882: PPUSH
14883: LD_EXP 65
14887: PUSH
14888: LD_INT 1
14890: PLUS
14891: PPUSH
14892: EMPTY
14893: PPUSH
14894: CALL_OW 1
14898: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 302
14908: NOT
14909: IFFALSE 14922
// begin HackUnlinkAll ( i ) ;
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL 15028 0 1
// continue ;
14920: GO 14802
// end ; HackCheckCapturedStatus ( i ) ;
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL 15471 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14931: LD_ADDR_VAR 0 2
14935: PUSH
14936: LD_INT 81
14938: PUSH
14939: LD_VAR 0 1
14943: PPUSH
14944: CALL_OW 255
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 33
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 91
14965: PUSH
14966: LD_VAR 0 1
14970: PUSH
14971: LD_EXP 64
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 50
14983: PUSH
14984: EMPTY
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 69
14997: ST_TO_ADDR
// if not tmp then
14998: LD_VAR 0 2
15002: NOT
15003: IFFALSE 15007
// continue ;
15005: GO 14802
// HackLink ( i , tmp ) ;
15007: LD_VAR 0 1
15011: PPUSH
15012: LD_VAR 0 2
15016: PPUSH
15017: CALL 15164 0 2
// end ;
15021: GO 14802
15023: POP
15024: POP
// end ;
15025: PPOPN 2
15027: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15028: LD_INT 0
15030: PPUSH
15031: PPUSH
15032: PPUSH
// if not hack in hackTanks then
15033: LD_VAR 0 1
15037: PUSH
15038: LD_EXP 61
15042: IN
15043: NOT
15044: IFFALSE 15048
// exit ;
15046: GO 15159
// index := GetElementIndex ( hackTanks , hack ) ;
15048: LD_ADDR_VAR 0 4
15052: PUSH
15053: LD_EXP 61
15057: PPUSH
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL 35760 0 2
15067: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15068: LD_EXP 62
15072: PUSH
15073: LD_VAR 0 4
15077: ARRAY
15078: IFFALSE 15159
// begin for i in hackTanksCaptured [ index ] do
15080: LD_ADDR_VAR 0 3
15084: PUSH
15085: LD_EXP 62
15089: PUSH
15090: LD_VAR 0 4
15094: ARRAY
15095: PUSH
15096: FOR_IN
15097: IFFALSE 15123
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15099: LD_VAR 0 3
15103: PUSH
15104: LD_INT 1
15106: ARRAY
15107: PPUSH
15108: LD_VAR 0 3
15112: PUSH
15113: LD_INT 2
15115: ARRAY
15116: PPUSH
15117: CALL_OW 235
15121: GO 15096
15123: POP
15124: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15125: LD_ADDR_EXP 62
15129: PUSH
15130: LD_EXP 62
15134: PPUSH
15135: LD_VAR 0 4
15139: PPUSH
15140: EMPTY
15141: PPUSH
15142: CALL_OW 1
15146: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15147: LD_VAR 0 1
15151: PPUSH
15152: LD_INT 0
15154: PPUSH
15155: CALL_OW 505
// end ; end ;
15159: LD_VAR 0 2
15163: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15164: LD_INT 0
15166: PPUSH
15167: PPUSH
15168: PPUSH
// if not hack in hackTanks or not vehicles then
15169: LD_VAR 0 1
15173: PUSH
15174: LD_EXP 61
15178: IN
15179: NOT
15180: PUSH
15181: LD_VAR 0 2
15185: NOT
15186: OR
15187: IFFALSE 15191
// exit ;
15189: GO 15466
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15191: LD_ADDR_VAR 0 2
15195: PUSH
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 2
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL 36410 0 4
15216: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15217: LD_ADDR_VAR 0 5
15221: PUSH
15222: LD_EXP 61
15226: PPUSH
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL 35760 0 2
15236: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15237: LD_EXP 62
15241: PUSH
15242: LD_VAR 0 5
15246: ARRAY
15247: PUSH
15248: LD_EXP 63
15252: LESS
15253: IFFALSE 15442
// begin for i := 1 to vehicles do
15255: LD_ADDR_VAR 0 4
15259: PUSH
15260: DOUBLE
15261: LD_INT 1
15263: DEC
15264: ST_TO_ADDR
15265: LD_VAR 0 2
15269: PUSH
15270: FOR_TO
15271: IFFALSE 15440
// begin if hackTanksCaptured [ index ] = hackLimit then
15273: LD_EXP 62
15277: PUSH
15278: LD_VAR 0 5
15282: ARRAY
15283: PUSH
15284: LD_EXP 63
15288: EQUAL
15289: IFFALSE 15293
// break ;
15291: GO 15440
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15293: LD_ADDR_EXP 65
15297: PUSH
15298: LD_EXP 65
15302: PPUSH
15303: LD_VAR 0 5
15307: PPUSH
15308: LD_EXP 65
15312: PUSH
15313: LD_VAR 0 5
15317: ARRAY
15318: PUSH
15319: LD_INT 1
15321: PLUS
15322: PPUSH
15323: CALL_OW 1
15327: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15328: LD_ADDR_EXP 62
15332: PUSH
15333: LD_EXP 62
15337: PPUSH
15338: LD_VAR 0 5
15342: PUSH
15343: LD_EXP 62
15347: PUSH
15348: LD_VAR 0 5
15352: ARRAY
15353: PUSH
15354: LD_INT 1
15356: PLUS
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PPUSH
15362: LD_VAR 0 2
15366: PUSH
15367: LD_VAR 0 4
15371: ARRAY
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: LD_VAR 0 4
15382: ARRAY
15383: PPUSH
15384: CALL_OW 255
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PPUSH
15393: CALL 35975 0 3
15397: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15398: LD_VAR 0 2
15402: PUSH
15403: LD_VAR 0 4
15407: ARRAY
15408: PPUSH
15409: LD_VAR 0 1
15413: PPUSH
15414: CALL_OW 255
15418: PPUSH
15419: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15423: LD_VAR 0 2
15427: PUSH
15428: LD_VAR 0 4
15432: ARRAY
15433: PPUSH
15434: CALL_OW 141
// end ;
15438: GO 15270
15440: POP
15441: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15442: LD_VAR 0 1
15446: PPUSH
15447: LD_EXP 62
15451: PUSH
15452: LD_VAR 0 5
15456: ARRAY
15457: PUSH
15458: LD_INT 0
15460: PLUS
15461: PPUSH
15462: CALL_OW 505
// end ;
15466: LD_VAR 0 3
15470: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15471: LD_INT 0
15473: PPUSH
15474: PPUSH
15475: PPUSH
15476: PPUSH
// if not hack in hackTanks then
15477: LD_VAR 0 1
15481: PUSH
15482: LD_EXP 61
15486: IN
15487: NOT
15488: IFFALSE 15492
// exit ;
15490: GO 15732
// index := GetElementIndex ( hackTanks , hack ) ;
15492: LD_ADDR_VAR 0 4
15496: PUSH
15497: LD_EXP 61
15501: PPUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL 35760 0 2
15511: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15512: LD_ADDR_VAR 0 3
15516: PUSH
15517: DOUBLE
15518: LD_EXP 62
15522: PUSH
15523: LD_VAR 0 4
15527: ARRAY
15528: INC
15529: ST_TO_ADDR
15530: LD_INT 1
15532: PUSH
15533: FOR_DOWNTO
15534: IFFALSE 15706
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15536: LD_ADDR_VAR 0 5
15540: PUSH
15541: LD_EXP 62
15545: PUSH
15546: LD_VAR 0 4
15550: ARRAY
15551: PUSH
15552: LD_VAR 0 3
15556: ARRAY
15557: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15558: LD_VAR 0 5
15562: PUSH
15563: LD_INT 1
15565: ARRAY
15566: PPUSH
15567: CALL_OW 302
15571: NOT
15572: PUSH
15573: LD_VAR 0 5
15577: PUSH
15578: LD_INT 1
15580: ARRAY
15581: PPUSH
15582: CALL_OW 255
15586: PUSH
15587: LD_VAR 0 1
15591: PPUSH
15592: CALL_OW 255
15596: NONEQUAL
15597: OR
15598: IFFALSE 15704
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15600: LD_VAR 0 5
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: PPUSH
15609: CALL_OW 305
15613: PUSH
15614: LD_VAR 0 5
15618: PUSH
15619: LD_INT 1
15621: ARRAY
15622: PPUSH
15623: CALL_OW 255
15627: PUSH
15628: LD_VAR 0 1
15632: PPUSH
15633: CALL_OW 255
15637: EQUAL
15638: AND
15639: IFFALSE 15663
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15641: LD_VAR 0 5
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 5
15654: PUSH
15655: LD_INT 2
15657: ARRAY
15658: PPUSH
15659: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15663: LD_ADDR_EXP 62
15667: PUSH
15668: LD_EXP 62
15672: PPUSH
15673: LD_VAR 0 4
15677: PPUSH
15678: LD_EXP 62
15682: PUSH
15683: LD_VAR 0 4
15687: ARRAY
15688: PPUSH
15689: LD_VAR 0 3
15693: PPUSH
15694: CALL_OW 3
15698: PPUSH
15699: CALL_OW 1
15703: ST_TO_ADDR
// end ; end ;
15704: GO 15533
15706: POP
15707: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15708: LD_VAR 0 1
15712: PPUSH
15713: LD_EXP 62
15717: PUSH
15718: LD_VAR 0 4
15722: ARRAY
15723: PUSH
15724: LD_INT 0
15726: PLUS
15727: PPUSH
15728: CALL_OW 505
// end ;
15732: LD_VAR 0 2
15736: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
15741: PPUSH
15742: PPUSH
// if not hack in hackTanks then
15743: LD_VAR 0 1
15747: PUSH
15748: LD_EXP 61
15752: IN
15753: NOT
15754: IFFALSE 15758
// exit ;
15756: GO 15843
// index := GetElementIndex ( hackTanks , hack ) ;
15758: LD_ADDR_VAR 0 5
15762: PUSH
15763: LD_EXP 61
15767: PPUSH
15768: LD_VAR 0 1
15772: PPUSH
15773: CALL 35760 0 2
15777: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15778: LD_ADDR_VAR 0 4
15782: PUSH
15783: DOUBLE
15784: LD_INT 1
15786: DEC
15787: ST_TO_ADDR
15788: LD_EXP 62
15792: PUSH
15793: LD_VAR 0 5
15797: ARRAY
15798: PUSH
15799: FOR_TO
15800: IFFALSE 15841
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15802: LD_EXP 62
15806: PUSH
15807: LD_VAR 0 5
15811: ARRAY
15812: PUSH
15813: LD_VAR 0 4
15817: ARRAY
15818: PUSH
15819: LD_INT 1
15821: ARRAY
15822: PUSH
15823: LD_VAR 0 2
15827: EQUAL
15828: IFFALSE 15839
// KillUnit ( vehicle ) ;
15830: LD_VAR 0 2
15834: PPUSH
15835: CALL_OW 66
15839: GO 15799
15841: POP
15842: POP
// end ;
15843: LD_VAR 0 3
15847: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
15848: LD_EXP 66
15852: NOT
15853: IFFALSE 15888
15855: GO 15857
15857: DISABLE
// begin initMiner := true ;
15858: LD_ADDR_EXP 66
15862: PUSH
15863: LD_INT 1
15865: ST_TO_ADDR
// minersList := [ ] ;
15866: LD_ADDR_EXP 67
15870: PUSH
15871: EMPTY
15872: ST_TO_ADDR
// minerMinesList := [ ] ;
15873: LD_ADDR_EXP 68
15877: PUSH
15878: EMPTY
15879: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
15880: LD_ADDR_EXP 69
15884: PUSH
15885: LD_INT 5
15887: ST_TO_ADDR
// end ;
15888: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
15889: LD_EXP 66
15893: PUSH
15894: LD_INT 34
15896: PUSH
15897: LD_EXP 51
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: AND
15911: IFFALSE 16374
15913: GO 15915
15915: DISABLE
15916: LD_INT 0
15918: PPUSH
15919: PPUSH
15920: PPUSH
15921: PPUSH
// begin enable ;
15922: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: LD_INT 34
15930: PUSH
15931: LD_EXP 51
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PPUSH
15940: CALL_OW 69
15944: PUSH
15945: FOR_IN
15946: IFFALSE 16018
// begin if not i in minersList then
15948: LD_VAR 0 1
15952: PUSH
15953: LD_EXP 67
15957: IN
15958: NOT
15959: IFFALSE 16016
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
15961: LD_ADDR_EXP 67
15965: PUSH
15966: LD_EXP 67
15970: PPUSH
15971: LD_EXP 67
15975: PUSH
15976: LD_INT 1
15978: PLUS
15979: PPUSH
15980: LD_VAR 0 1
15984: PPUSH
15985: CALL_OW 1
15989: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15990: LD_ADDR_EXP 68
15994: PUSH
15995: LD_EXP 68
15999: PPUSH
16000: LD_EXP 68
16004: PUSH
16005: LD_INT 1
16007: PLUS
16008: PPUSH
16009: EMPTY
16010: PPUSH
16011: CALL_OW 1
16015: ST_TO_ADDR
// end end ;
16016: GO 15945
16018: POP
16019: POP
// for i := minerMinesList downto 1 do
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: DOUBLE
16026: LD_EXP 68
16030: INC
16031: ST_TO_ADDR
16032: LD_INT 1
16034: PUSH
16035: FOR_DOWNTO
16036: IFFALSE 16372
// begin if IsLive ( minersList [ i ] ) then
16038: LD_EXP 67
16042: PUSH
16043: LD_VAR 0 1
16047: ARRAY
16048: PPUSH
16049: CALL_OW 300
16053: IFFALSE 16081
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16055: LD_EXP 67
16059: PUSH
16060: LD_VAR 0 1
16064: ARRAY
16065: PPUSH
16066: LD_EXP 68
16070: PUSH
16071: LD_VAR 0 1
16075: ARRAY
16076: PPUSH
16077: CALL_OW 505
// if not minerMinesList [ i ] then
16081: LD_EXP 68
16085: PUSH
16086: LD_VAR 0 1
16090: ARRAY
16091: NOT
16092: IFFALSE 16096
// continue ;
16094: GO 16035
// for j := minerMinesList [ i ] downto 1 do
16096: LD_ADDR_VAR 0 2
16100: PUSH
16101: DOUBLE
16102: LD_EXP 68
16106: PUSH
16107: LD_VAR 0 1
16111: ARRAY
16112: INC
16113: ST_TO_ADDR
16114: LD_INT 1
16116: PUSH
16117: FOR_DOWNTO
16118: IFFALSE 16368
// begin side := GetSide ( minersList [ i ] ) ;
16120: LD_ADDR_VAR 0 3
16124: PUSH
16125: LD_EXP 67
16129: PUSH
16130: LD_VAR 0 1
16134: ARRAY
16135: PPUSH
16136: CALL_OW 255
16140: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16141: LD_ADDR_VAR 0 4
16145: PUSH
16146: LD_EXP 68
16150: PUSH
16151: LD_VAR 0 1
16155: ARRAY
16156: PUSH
16157: LD_VAR 0 2
16161: ARRAY
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: PPUSH
16167: LD_EXP 68
16171: PUSH
16172: LD_VAR 0 1
16176: ARRAY
16177: PUSH
16178: LD_VAR 0 2
16182: ARRAY
16183: PUSH
16184: LD_INT 2
16186: ARRAY
16187: PPUSH
16188: CALL_OW 428
16192: ST_TO_ADDR
// if not tmp then
16193: LD_VAR 0 4
16197: NOT
16198: IFFALSE 16202
// continue ;
16200: GO 16117
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16202: LD_VAR 0 4
16206: PUSH
16207: LD_INT 81
16209: PUSH
16210: LD_VAR 0 3
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PPUSH
16219: CALL_OW 69
16223: IN
16224: PUSH
16225: LD_EXP 68
16229: PUSH
16230: LD_VAR 0 1
16234: ARRAY
16235: PUSH
16236: LD_VAR 0 2
16240: ARRAY
16241: PUSH
16242: LD_INT 1
16244: ARRAY
16245: PPUSH
16246: LD_EXP 68
16250: PUSH
16251: LD_VAR 0 1
16255: ARRAY
16256: PUSH
16257: LD_VAR 0 2
16261: ARRAY
16262: PUSH
16263: LD_INT 2
16265: ARRAY
16266: PPUSH
16267: CALL_OW 458
16271: AND
16272: IFFALSE 16366
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16274: LD_EXP 68
16278: PUSH
16279: LD_VAR 0 1
16283: ARRAY
16284: PUSH
16285: LD_VAR 0 2
16289: ARRAY
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: PPUSH
16295: LD_EXP 68
16299: PUSH
16300: LD_VAR 0 1
16304: ARRAY
16305: PUSH
16306: LD_VAR 0 2
16310: ARRAY
16311: PUSH
16312: LD_INT 2
16314: ARRAY
16315: PPUSH
16316: LD_VAR 0 3
16320: PPUSH
16321: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16325: LD_ADDR_EXP 68
16329: PUSH
16330: LD_EXP 68
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: LD_EXP 68
16344: PUSH
16345: LD_VAR 0 1
16349: ARRAY
16350: PPUSH
16351: LD_VAR 0 2
16355: PPUSH
16356: CALL_OW 3
16360: PPUSH
16361: CALL_OW 1
16365: ST_TO_ADDR
// end ; end ;
16366: GO 16117
16368: POP
16369: POP
// end ;
16370: GO 16035
16372: POP
16373: POP
// end ;
16374: PPOPN 4
16376: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
16377: LD_INT 0
16379: PPUSH
16380: PPUSH
// result := false ;
16381: LD_ADDR_VAR 0 4
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 264
16398: PUSH
16399: LD_EXP 51
16403: EQUAL
16404: NOT
16405: IFFALSE 16409
// exit ;
16407: GO 16649
// index := GetElementIndex ( minersList , unit ) ;
16409: LD_ADDR_VAR 0 5
16413: PUSH
16414: LD_EXP 67
16418: PPUSH
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL 35760 0 2
16428: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16429: LD_EXP 68
16433: PUSH
16434: LD_VAR 0 5
16438: ARRAY
16439: PUSH
16440: LD_EXP 69
16444: GREATEREQUAL
16445: IFFALSE 16449
// exit ;
16447: GO 16649
// ComMoveXY ( unit , x , y ) ;
16449: LD_VAR 0 1
16453: PPUSH
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16468: LD_INT 35
16470: PPUSH
16471: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_VAR 0 3
16489: PPUSH
16490: CALL 65824 0 3
16494: NOT
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 314
16505: AND
16506: IFFALSE 16510
// exit ;
16508: GO 16649
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16510: LD_VAR 0 2
16514: PPUSH
16515: LD_VAR 0 3
16519: PPUSH
16520: CALL_OW 428
16524: PUSH
16525: LD_VAR 0 1
16529: EQUAL
16530: PUSH
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL_OW 314
16540: NOT
16541: AND
16542: IFFALSE 16468
// PlaySoundXY ( x , y , PlantMine ) ;
16544: LD_VAR 0 2
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_STRING PlantMine
16556: PPUSH
16557: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16561: LD_VAR 0 2
16565: PPUSH
16566: LD_VAR 0 3
16570: PPUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 255
16580: PPUSH
16581: LD_INT 0
16583: PPUSH
16584: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16588: LD_ADDR_EXP 68
16592: PUSH
16593: LD_EXP 68
16597: PPUSH
16598: LD_VAR 0 5
16602: PUSH
16603: LD_EXP 68
16607: PUSH
16608: LD_VAR 0 5
16612: ARRAY
16613: PUSH
16614: LD_INT 1
16616: PLUS
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: LD_VAR 0 2
16626: PUSH
16627: LD_VAR 0 3
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL 35975 0 3
16640: ST_TO_ADDR
// result := true ;
16641: LD_ADDR_VAR 0 4
16645: PUSH
16646: LD_INT 1
16648: ST_TO_ADDR
// end ;
16649: LD_VAR 0 4
16653: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16654: LD_INT 0
16656: PPUSH
16657: PPUSH
16658: PPUSH
// if not unit in minersList then
16659: LD_VAR 0 1
16663: PUSH
16664: LD_EXP 67
16668: IN
16669: NOT
16670: IFFALSE 16674
// exit ;
16672: GO 17066
// index := GetElementIndex ( minersList , unit ) ;
16674: LD_ADDR_VAR 0 6
16678: PUSH
16679: LD_EXP 67
16683: PPUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL 35760 0 2
16693: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
16694: LD_ADDR_VAR 0 5
16698: PUSH
16699: DOUBLE
16700: LD_EXP 68
16704: PUSH
16705: LD_VAR 0 6
16709: ARRAY
16710: INC
16711: ST_TO_ADDR
16712: LD_INT 1
16714: PUSH
16715: FOR_DOWNTO
16716: IFFALSE 16877
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16718: LD_EXP 68
16722: PUSH
16723: LD_VAR 0 6
16727: ARRAY
16728: PUSH
16729: LD_VAR 0 5
16733: ARRAY
16734: PUSH
16735: LD_INT 1
16737: ARRAY
16738: PUSH
16739: LD_VAR 0 2
16743: EQUAL
16744: PUSH
16745: LD_EXP 68
16749: PUSH
16750: LD_VAR 0 6
16754: ARRAY
16755: PUSH
16756: LD_VAR 0 5
16760: ARRAY
16761: PUSH
16762: LD_INT 2
16764: ARRAY
16765: PUSH
16766: LD_VAR 0 3
16770: EQUAL
16771: AND
16772: IFFALSE 16875
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16774: LD_EXP 68
16778: PUSH
16779: LD_VAR 0 6
16783: ARRAY
16784: PUSH
16785: LD_VAR 0 5
16789: ARRAY
16790: PUSH
16791: LD_INT 1
16793: ARRAY
16794: PPUSH
16795: LD_EXP 68
16799: PUSH
16800: LD_VAR 0 6
16804: ARRAY
16805: PUSH
16806: LD_VAR 0 5
16810: ARRAY
16811: PUSH
16812: LD_INT 2
16814: ARRAY
16815: PPUSH
16816: LD_VAR 0 1
16820: PPUSH
16821: CALL_OW 255
16825: PPUSH
16826: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16830: LD_ADDR_EXP 68
16834: PUSH
16835: LD_EXP 68
16839: PPUSH
16840: LD_VAR 0 6
16844: PPUSH
16845: LD_EXP 68
16849: PUSH
16850: LD_VAR 0 6
16854: ARRAY
16855: PPUSH
16856: LD_VAR 0 5
16860: PPUSH
16861: CALL_OW 3
16865: PPUSH
16866: CALL_OW 1
16870: ST_TO_ADDR
// exit ;
16871: POP
16872: POP
16873: GO 17066
// end ; end ;
16875: GO 16715
16877: POP
16878: POP
// for i := minerMinesList [ index ] downto 1 do
16879: LD_ADDR_VAR 0 5
16883: PUSH
16884: DOUBLE
16885: LD_EXP 68
16889: PUSH
16890: LD_VAR 0 6
16894: ARRAY
16895: INC
16896: ST_TO_ADDR
16897: LD_INT 1
16899: PUSH
16900: FOR_DOWNTO
16901: IFFALSE 17064
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
16903: LD_EXP 68
16907: PUSH
16908: LD_VAR 0 6
16912: ARRAY
16913: PUSH
16914: LD_VAR 0 5
16918: ARRAY
16919: PUSH
16920: LD_INT 1
16922: ARRAY
16923: PPUSH
16924: LD_EXP 68
16928: PUSH
16929: LD_VAR 0 6
16933: ARRAY
16934: PUSH
16935: LD_VAR 0 5
16939: ARRAY
16940: PUSH
16941: LD_INT 2
16943: ARRAY
16944: PPUSH
16945: LD_VAR 0 2
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: CALL_OW 298
16959: PUSH
16960: LD_INT 6
16962: LESS
16963: IFFALSE 17062
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16965: LD_EXP 68
16969: PUSH
16970: LD_VAR 0 6
16974: ARRAY
16975: PUSH
16976: LD_VAR 0 5
16980: ARRAY
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PPUSH
16986: LD_EXP 68
16990: PUSH
16991: LD_VAR 0 6
16995: ARRAY
16996: PUSH
16997: LD_VAR 0 5
17001: ARRAY
17002: PUSH
17003: LD_INT 2
17005: ARRAY
17006: PPUSH
17007: LD_VAR 0 1
17011: PPUSH
17012: CALL_OW 255
17016: PPUSH
17017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17021: LD_ADDR_EXP 68
17025: PUSH
17026: LD_EXP 68
17030: PPUSH
17031: LD_VAR 0 6
17035: PPUSH
17036: LD_EXP 68
17040: PUSH
17041: LD_VAR 0 6
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 5
17051: PPUSH
17052: CALL_OW 3
17056: PPUSH
17057: CALL_OW 1
17061: ST_TO_ADDR
// end ; end ;
17062: GO 16900
17064: POP
17065: POP
// end ;
17066: LD_VAR 0 4
17070: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
17075: PPUSH
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
17081: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 264
17091: PUSH
17092: LD_EXP 51
17096: EQUAL
17097: NOT
17098: PUSH
17099: LD_VAR 0 1
17103: PUSH
17104: LD_EXP 67
17108: IN
17109: NOT
17110: OR
17111: IFFALSE 17115
// exit ;
17113: GO 17437
// index := GetElementIndex ( minersList , unit ) ;
17115: LD_ADDR_VAR 0 6
17119: PUSH
17120: LD_EXP 67
17124: PPUSH
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL 35760 0 2
17134: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17135: LD_ADDR_VAR 0 8
17139: PUSH
17140: LD_EXP 69
17144: PUSH
17145: LD_EXP 68
17149: PUSH
17150: LD_VAR 0 6
17154: ARRAY
17155: MINUS
17156: ST_TO_ADDR
// if not minesFreeAmount then
17157: LD_VAR 0 8
17161: NOT
17162: IFFALSE 17166
// exit ;
17164: GO 17437
// tmp := [ ] ;
17166: LD_ADDR_VAR 0 7
17170: PUSH
17171: EMPTY
17172: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17173: LD_ADDR_VAR 0 5
17177: PUSH
17178: DOUBLE
17179: LD_INT 1
17181: DEC
17182: ST_TO_ADDR
17183: LD_VAR 0 8
17187: PUSH
17188: FOR_TO
17189: IFFALSE 17384
// begin _d := rand ( 0 , 5 ) ;
17191: LD_ADDR_VAR 0 11
17195: PUSH
17196: LD_INT 0
17198: PPUSH
17199: LD_INT 5
17201: PPUSH
17202: CALL_OW 12
17206: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17207: LD_ADDR_VAR 0 12
17211: PUSH
17212: LD_INT 2
17214: PPUSH
17215: LD_INT 6
17217: PPUSH
17218: CALL_OW 12
17222: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17223: LD_ADDR_VAR 0 9
17227: PUSH
17228: LD_VAR 0 2
17232: PPUSH
17233: LD_VAR 0 11
17237: PPUSH
17238: LD_VAR 0 12
17242: PPUSH
17243: CALL_OW 272
17247: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17248: LD_ADDR_VAR 0 10
17252: PUSH
17253: LD_VAR 0 3
17257: PPUSH
17258: LD_VAR 0 11
17262: PPUSH
17263: LD_VAR 0 12
17267: PPUSH
17268: CALL_OW 273
17272: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17273: LD_VAR 0 9
17277: PPUSH
17278: LD_VAR 0 10
17282: PPUSH
17283: CALL_OW 488
17287: PUSH
17288: LD_VAR 0 9
17292: PUSH
17293: LD_VAR 0 10
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_VAR 0 7
17306: IN
17307: NOT
17308: AND
17309: PUSH
17310: LD_VAR 0 9
17314: PPUSH
17315: LD_VAR 0 10
17319: PPUSH
17320: CALL_OW 458
17324: NOT
17325: AND
17326: IFFALSE 17368
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17328: LD_ADDR_VAR 0 7
17332: PUSH
17333: LD_VAR 0 7
17337: PPUSH
17338: LD_VAR 0 7
17342: PUSH
17343: LD_INT 1
17345: PLUS
17346: PPUSH
17347: LD_VAR 0 9
17351: PUSH
17352: LD_VAR 0 10
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 1
17365: ST_TO_ADDR
17366: GO 17382
// i := i - 1 ;
17368: LD_ADDR_VAR 0 5
17372: PUSH
17373: LD_VAR 0 5
17377: PUSH
17378: LD_INT 1
17380: MINUS
17381: ST_TO_ADDR
// end ;
17382: GO 17188
17384: POP
17385: POP
// for i in tmp do
17386: LD_ADDR_VAR 0 5
17390: PUSH
17391: LD_VAR 0 7
17395: PUSH
17396: FOR_IN
17397: IFFALSE 17435
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17399: LD_VAR 0 1
17403: PPUSH
17404: LD_VAR 0 5
17408: PUSH
17409: LD_INT 1
17411: ARRAY
17412: PPUSH
17413: LD_VAR 0 5
17417: PUSH
17418: LD_INT 2
17420: ARRAY
17421: PPUSH
17422: CALL 16377 0 3
17426: NOT
17427: IFFALSE 17433
// exit ;
17429: POP
17430: POP
17431: GO 17437
17433: GO 17396
17435: POP
17436: POP
// end ;
17437: LD_VAR 0 4
17441: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
17442: LD_INT 0
17444: PPUSH
17445: PPUSH
17446: PPUSH
17447: PPUSH
17448: PPUSH
17449: PPUSH
17450: PPUSH
// if not GetClass ( unit ) = class_sniper then
17451: LD_VAR 0 1
17455: PPUSH
17456: CALL_OW 257
17460: PUSH
17461: LD_INT 5
17463: EQUAL
17464: NOT
17465: IFFALSE 17469
// exit ;
17467: GO 17857
// dist := 8 ;
17469: LD_ADDR_VAR 0 5
17473: PUSH
17474: LD_INT 8
17476: ST_TO_ADDR
// viewRange := 12 ;
17477: LD_ADDR_VAR 0 7
17481: PUSH
17482: LD_INT 12
17484: ST_TO_ADDR
// side := GetSide ( unit ) ;
17485: LD_ADDR_VAR 0 6
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 255
17499: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17500: LD_INT 61
17502: PPUSH
17503: LD_VAR 0 6
17507: PPUSH
17508: CALL_OW 321
17512: PUSH
17513: LD_INT 2
17515: EQUAL
17516: IFFALSE 17526
// viewRange := 16 ;
17518: LD_ADDR_VAR 0 7
17522: PUSH
17523: LD_INT 16
17525: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17526: LD_VAR 0 1
17530: PPUSH
17531: LD_VAR 0 2
17535: PPUSH
17536: LD_VAR 0 3
17540: PPUSH
17541: CALL_OW 297
17545: PUSH
17546: LD_VAR 0 5
17550: GREATER
17551: IFFALSE 17630
// begin ComMoveXY ( unit , x , y ) ;
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_VAR 0 2
17562: PPUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17572: LD_INT 35
17574: PPUSH
17575: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_VAR 0 2
17588: PPUSH
17589: LD_VAR 0 3
17593: PPUSH
17594: CALL 65824 0 3
17598: NOT
17599: IFFALSE 17603
// exit ;
17601: GO 17857
// until GetDistUnitXY ( unit , x , y ) < dist ;
17603: LD_VAR 0 1
17607: PPUSH
17608: LD_VAR 0 2
17612: PPUSH
17613: LD_VAR 0 3
17617: PPUSH
17618: CALL_OW 297
17622: PUSH
17623: LD_VAR 0 5
17627: LESS
17628: IFFALSE 17572
// end ; ComTurnXY ( unit , x , y ) ;
17630: LD_VAR 0 1
17634: PPUSH
17635: LD_VAR 0 2
17639: PPUSH
17640: LD_VAR 0 3
17644: PPUSH
17645: CALL_OW 118
// wait ( 5 ) ;
17649: LD_INT 5
17651: PPUSH
17652: CALL_OW 67
// _d := GetDir ( unit ) ;
17656: LD_ADDR_VAR 0 10
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 254
17670: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
17671: LD_ADDR_VAR 0 8
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 250
17685: PPUSH
17686: LD_VAR 0 10
17690: PPUSH
17691: LD_VAR 0 5
17695: PPUSH
17696: CALL_OW 272
17700: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
17701: LD_ADDR_VAR 0 9
17705: PUSH
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 251
17715: PPUSH
17716: LD_VAR 0 10
17720: PPUSH
17721: LD_VAR 0 5
17725: PPUSH
17726: CALL_OW 273
17730: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17731: LD_VAR 0 8
17735: PPUSH
17736: LD_VAR 0 9
17740: PPUSH
17741: CALL_OW 488
17745: NOT
17746: IFFALSE 17750
// exit ;
17748: GO 17857
// ComAnimCustom ( unit , 1 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17762: LD_VAR 0 8
17766: PPUSH
17767: LD_VAR 0 9
17771: PPUSH
17772: LD_VAR 0 6
17776: PPUSH
17777: LD_VAR 0 7
17781: PPUSH
17782: CALL_OW 330
// repeat wait ( 1 ) ;
17786: LD_INT 1
17788: PPUSH
17789: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
17793: LD_VAR 0 1
17797: PPUSH
17798: CALL_OW 316
17802: PUSH
17803: LD_VAR 0 1
17807: PPUSH
17808: CALL_OW 314
17812: OR
17813: PUSH
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 302
17823: NOT
17824: OR
17825: PUSH
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 301
17835: OR
17836: IFFALSE 17786
// RemoveSeeing ( _x , _y , side ) ;
17838: LD_VAR 0 8
17842: PPUSH
17843: LD_VAR 0 9
17847: PPUSH
17848: LD_VAR 0 6
17852: PPUSH
17853: CALL_OW 331
// end ; end_of_file
17857: LD_VAR 0 4
17861: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17862: LD_VAR 0 2
17866: PUSH
17867: LD_INT 100
17869: EQUAL
17870: IFFALSE 18819
// begin if not StreamModeActive then
17872: LD_EXP 70
17876: NOT
17877: IFFALSE 17887
// StreamModeActive := true ;
17879: LD_ADDR_EXP 70
17883: PUSH
17884: LD_INT 1
17886: ST_TO_ADDR
// if p3 = 0 then
17887: LD_VAR 0 3
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17901
// InitStreamMode ;
17897: CALL 18977 0 0
// if p3 = 1 then
17901: LD_VAR 0 3
17905: PUSH
17906: LD_INT 1
17908: EQUAL
17909: IFFALSE 17919
// sRocket := true ;
17911: LD_ADDR_EXP 75
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// if p3 = 2 then
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 2
17926: EQUAL
17927: IFFALSE 17937
// sSpeed := true ;
17929: LD_ADDR_EXP 74
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
// if p3 = 3 then
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 3
17944: EQUAL
17945: IFFALSE 17955
// sEngine := true ;
17947: LD_ADDR_EXP 76
17951: PUSH
17952: LD_INT 1
17954: ST_TO_ADDR
// if p3 = 4 then
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 4
17962: EQUAL
17963: IFFALSE 17973
// sSpec := true ;
17965: LD_ADDR_EXP 73
17969: PUSH
17970: LD_INT 1
17972: ST_TO_ADDR
// if p3 = 5 then
17973: LD_VAR 0 3
17977: PUSH
17978: LD_INT 5
17980: EQUAL
17981: IFFALSE 17991
// sLevel := true ;
17983: LD_ADDR_EXP 77
17987: PUSH
17988: LD_INT 1
17990: ST_TO_ADDR
// if p3 = 6 then
17991: LD_VAR 0 3
17995: PUSH
17996: LD_INT 6
17998: EQUAL
17999: IFFALSE 18009
// sArmoury := true ;
18001: LD_ADDR_EXP 78
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// if p3 = 7 then
18009: LD_VAR 0 3
18013: PUSH
18014: LD_INT 7
18016: EQUAL
18017: IFFALSE 18027
// sRadar := true ;
18019: LD_ADDR_EXP 79
18023: PUSH
18024: LD_INT 1
18026: ST_TO_ADDR
// if p3 = 8 then
18027: LD_VAR 0 3
18031: PUSH
18032: LD_INT 8
18034: EQUAL
18035: IFFALSE 18045
// sBunker := true ;
18037: LD_ADDR_EXP 80
18041: PUSH
18042: LD_INT 1
18044: ST_TO_ADDR
// if p3 = 9 then
18045: LD_VAR 0 3
18049: PUSH
18050: LD_INT 9
18052: EQUAL
18053: IFFALSE 18063
// sHack := true ;
18055: LD_ADDR_EXP 81
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// if p3 = 10 then
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 10
18070: EQUAL
18071: IFFALSE 18081
// sFire := true ;
18073: LD_ADDR_EXP 82
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// if p3 = 11 then
18081: LD_VAR 0 3
18085: PUSH
18086: LD_INT 11
18088: EQUAL
18089: IFFALSE 18099
// sRefresh := true ;
18091: LD_ADDR_EXP 83
18095: PUSH
18096: LD_INT 1
18098: ST_TO_ADDR
// if p3 = 12 then
18099: LD_VAR 0 3
18103: PUSH
18104: LD_INT 12
18106: EQUAL
18107: IFFALSE 18117
// sExp := true ;
18109: LD_ADDR_EXP 84
18113: PUSH
18114: LD_INT 1
18116: ST_TO_ADDR
// if p3 = 13 then
18117: LD_VAR 0 3
18121: PUSH
18122: LD_INT 13
18124: EQUAL
18125: IFFALSE 18135
// sDepot := true ;
18127: LD_ADDR_EXP 85
18131: PUSH
18132: LD_INT 1
18134: ST_TO_ADDR
// if p3 = 14 then
18135: LD_VAR 0 3
18139: PUSH
18140: LD_INT 14
18142: EQUAL
18143: IFFALSE 18153
// sFlag := true ;
18145: LD_ADDR_EXP 86
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// if p3 = 15 then
18153: LD_VAR 0 3
18157: PUSH
18158: LD_INT 15
18160: EQUAL
18161: IFFALSE 18171
// sKamikadze := true ;
18163: LD_ADDR_EXP 94
18167: PUSH
18168: LD_INT 1
18170: ST_TO_ADDR
// if p3 = 16 then
18171: LD_VAR 0 3
18175: PUSH
18176: LD_INT 16
18178: EQUAL
18179: IFFALSE 18189
// sTroll := true ;
18181: LD_ADDR_EXP 95
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// if p3 = 17 then
18189: LD_VAR 0 3
18193: PUSH
18194: LD_INT 17
18196: EQUAL
18197: IFFALSE 18207
// sSlow := true ;
18199: LD_ADDR_EXP 96
18203: PUSH
18204: LD_INT 1
18206: ST_TO_ADDR
// if p3 = 18 then
18207: LD_VAR 0 3
18211: PUSH
18212: LD_INT 18
18214: EQUAL
18215: IFFALSE 18225
// sLack := true ;
18217: LD_ADDR_EXP 97
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// if p3 = 19 then
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 19
18232: EQUAL
18233: IFFALSE 18243
// sTank := true ;
18235: LD_ADDR_EXP 99
18239: PUSH
18240: LD_INT 1
18242: ST_TO_ADDR
// if p3 = 20 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 20
18250: EQUAL
18251: IFFALSE 18261
// sRemote := true ;
18253: LD_ADDR_EXP 100
18257: PUSH
18258: LD_INT 1
18260: ST_TO_ADDR
// if p3 = 21 then
18261: LD_VAR 0 3
18265: PUSH
18266: LD_INT 21
18268: EQUAL
18269: IFFALSE 18279
// sPowell := true ;
18271: LD_ADDR_EXP 101
18275: PUSH
18276: LD_INT 1
18278: ST_TO_ADDR
// if p3 = 22 then
18279: LD_VAR 0 3
18283: PUSH
18284: LD_INT 22
18286: EQUAL
18287: IFFALSE 18297
// sTeleport := true ;
18289: LD_ADDR_EXP 104
18293: PUSH
18294: LD_INT 1
18296: ST_TO_ADDR
// if p3 = 23 then
18297: LD_VAR 0 3
18301: PUSH
18302: LD_INT 23
18304: EQUAL
18305: IFFALSE 18315
// sOilTower := true ;
18307: LD_ADDR_EXP 106
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// if p3 = 24 then
18315: LD_VAR 0 3
18319: PUSH
18320: LD_INT 24
18322: EQUAL
18323: IFFALSE 18333
// sShovel := true ;
18325: LD_ADDR_EXP 107
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// if p3 = 25 then
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 25
18340: EQUAL
18341: IFFALSE 18351
// sSheik := true ;
18343: LD_ADDR_EXP 108
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// if p3 = 26 then
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 26
18358: EQUAL
18359: IFFALSE 18369
// sEarthquake := true ;
18361: LD_ADDR_EXP 110
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// if p3 = 27 then
18369: LD_VAR 0 3
18373: PUSH
18374: LD_INT 27
18376: EQUAL
18377: IFFALSE 18387
// sAI := true ;
18379: LD_ADDR_EXP 111
18383: PUSH
18384: LD_INT 1
18386: ST_TO_ADDR
// if p3 = 28 then
18387: LD_VAR 0 3
18391: PUSH
18392: LD_INT 28
18394: EQUAL
18395: IFFALSE 18405
// sCargo := true ;
18397: LD_ADDR_EXP 114
18401: PUSH
18402: LD_INT 1
18404: ST_TO_ADDR
// if p3 = 29 then
18405: LD_VAR 0 3
18409: PUSH
18410: LD_INT 29
18412: EQUAL
18413: IFFALSE 18423
// sDLaser := true ;
18415: LD_ADDR_EXP 115
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// if p3 = 30 then
18423: LD_VAR 0 3
18427: PUSH
18428: LD_INT 30
18430: EQUAL
18431: IFFALSE 18441
// sExchange := true ;
18433: LD_ADDR_EXP 116
18437: PUSH
18438: LD_INT 1
18440: ST_TO_ADDR
// if p3 = 31 then
18441: LD_VAR 0 3
18445: PUSH
18446: LD_INT 31
18448: EQUAL
18449: IFFALSE 18459
// sFac := true ;
18451: LD_ADDR_EXP 117
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
// if p3 = 32 then
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 32
18466: EQUAL
18467: IFFALSE 18477
// sPower := true ;
18469: LD_ADDR_EXP 118
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// if p3 = 33 then
18477: LD_VAR 0 3
18481: PUSH
18482: LD_INT 33
18484: EQUAL
18485: IFFALSE 18495
// sRandom := true ;
18487: LD_ADDR_EXP 119
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// if p3 = 34 then
18495: LD_VAR 0 3
18499: PUSH
18500: LD_INT 34
18502: EQUAL
18503: IFFALSE 18513
// sShield := true ;
18505: LD_ADDR_EXP 120
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
// if p3 = 35 then
18513: LD_VAR 0 3
18517: PUSH
18518: LD_INT 35
18520: EQUAL
18521: IFFALSE 18531
// sTime := true ;
18523: LD_ADDR_EXP 121
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// if p3 = 36 then
18531: LD_VAR 0 3
18535: PUSH
18536: LD_INT 36
18538: EQUAL
18539: IFFALSE 18549
// sTools := true ;
18541: LD_ADDR_EXP 122
18545: PUSH
18546: LD_INT 1
18548: ST_TO_ADDR
// if p3 = 101 then
18549: LD_VAR 0 3
18553: PUSH
18554: LD_INT 101
18556: EQUAL
18557: IFFALSE 18567
// sSold := true ;
18559: LD_ADDR_EXP 87
18563: PUSH
18564: LD_INT 1
18566: ST_TO_ADDR
// if p3 = 102 then
18567: LD_VAR 0 3
18571: PUSH
18572: LD_INT 102
18574: EQUAL
18575: IFFALSE 18585
// sDiff := true ;
18577: LD_ADDR_EXP 88
18581: PUSH
18582: LD_INT 1
18584: ST_TO_ADDR
// if p3 = 103 then
18585: LD_VAR 0 3
18589: PUSH
18590: LD_INT 103
18592: EQUAL
18593: IFFALSE 18603
// sFog := true ;
18595: LD_ADDR_EXP 91
18599: PUSH
18600: LD_INT 1
18602: ST_TO_ADDR
// if p3 = 104 then
18603: LD_VAR 0 3
18607: PUSH
18608: LD_INT 104
18610: EQUAL
18611: IFFALSE 18621
// sReset := true ;
18613: LD_ADDR_EXP 92
18617: PUSH
18618: LD_INT 1
18620: ST_TO_ADDR
// if p3 = 105 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 105
18628: EQUAL
18629: IFFALSE 18639
// sSun := true ;
18631: LD_ADDR_EXP 93
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 106 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 106
18646: EQUAL
18647: IFFALSE 18657
// sTiger := true ;
18649: LD_ADDR_EXP 89
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 107 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 107
18664: EQUAL
18665: IFFALSE 18675
// sBomb := true ;
18667: LD_ADDR_EXP 90
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 108 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 108
18682: EQUAL
18683: IFFALSE 18693
// sWound := true ;
18685: LD_ADDR_EXP 98
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 109 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 109
18700: EQUAL
18701: IFFALSE 18711
// sBetray := true ;
18703: LD_ADDR_EXP 102
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 110 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 110
18718: EQUAL
18719: IFFALSE 18729
// sContamin := true ;
18721: LD_ADDR_EXP 103
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 111 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 111
18736: EQUAL
18737: IFFALSE 18747
// sOil := true ;
18739: LD_ADDR_EXP 105
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 112 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 112
18754: EQUAL
18755: IFFALSE 18765
// sStu := true ;
18757: LD_ADDR_EXP 109
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 113 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 113
18772: EQUAL
18773: IFFALSE 18783
// sBazooka := true ;
18775: LD_ADDR_EXP 112
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 114 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 114
18790: EQUAL
18791: IFFALSE 18801
// sMortar := true ;
18793: LD_ADDR_EXP 113
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 115 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 115
18808: EQUAL
18809: IFFALSE 18819
// sRanger := true ;
18811: LD_ADDR_EXP 123
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// end ; if p2 = 101 then
18819: LD_VAR 0 2
18823: PUSH
18824: LD_INT 101
18826: EQUAL
18827: IFFALSE 18955
// begin case p3 of 1 :
18829: LD_VAR 0 3
18833: PUSH
18834: LD_INT 1
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 18849
18842: POP
// hHackUnlimitedResources ; 2 :
18843: CALL 29990 0 0
18847: GO 18955
18849: LD_INT 2
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18864
18857: POP
// hHackSetLevel10 ; 3 :
18858: CALL 30123 0 0
18862: GO 18955
18864: LD_INT 3
18866: DOUBLE
18867: EQUAL
18868: IFTRUE 18872
18870: GO 18879
18872: POP
// hHackSetLevel10YourUnits ; 4 :
18873: CALL 30208 0 0
18877: GO 18955
18879: LD_INT 4
18881: DOUBLE
18882: EQUAL
18883: IFTRUE 18887
18885: GO 18894
18887: POP
// hHackInvincible ; 5 :
18888: CALL 30656 0 0
18892: GO 18955
18894: LD_INT 5
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 18909
18902: POP
// hHackInvisible ; 6 :
18903: CALL 30767 0 0
18907: GO 18955
18909: LD_INT 6
18911: DOUBLE
18912: EQUAL
18913: IFTRUE 18917
18915: GO 18924
18917: POP
// hHackChangeYourSide ; 7 :
18918: CALL 30824 0 0
18922: GO 18955
18924: LD_INT 7
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 18939
18932: POP
// hHackChangeUnitSide ; 8 :
18933: CALL 30866 0 0
18937: GO 18955
18939: LD_INT 8
18941: DOUBLE
18942: EQUAL
18943: IFTRUE 18947
18945: GO 18954
18947: POP
// hHackFog ; end ;
18948: CALL 30967 0 0
18952: GO 18955
18954: POP
// end ; end ;
18955: PPOPN 6
18957: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18958: GO 18960
18960: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18961: LD_STRING initStreamRollete();
18963: PPUSH
18964: CALL_OW 559
// InitStreamMode ;
18968: CALL 18977 0 0
// DefineStreamItems ( ) ;
18972: CALL 19417 0 0
// end ;
18976: END
// function InitStreamMode ; begin
18977: LD_INT 0
18979: PPUSH
// streamModeActive := false ;
18980: LD_ADDR_EXP 70
18984: PUSH
18985: LD_INT 0
18987: ST_TO_ADDR
// normalCounter := 36 ;
18988: LD_ADDR_EXP 71
18992: PUSH
18993: LD_INT 36
18995: ST_TO_ADDR
// hardcoreCounter := 16 ;
18996: LD_ADDR_EXP 72
19000: PUSH
19001: LD_INT 16
19003: ST_TO_ADDR
// sRocket := false ;
19004: LD_ADDR_EXP 75
19008: PUSH
19009: LD_INT 0
19011: ST_TO_ADDR
// sSpeed := false ;
19012: LD_ADDR_EXP 74
19016: PUSH
19017: LD_INT 0
19019: ST_TO_ADDR
// sEngine := false ;
19020: LD_ADDR_EXP 76
19024: PUSH
19025: LD_INT 0
19027: ST_TO_ADDR
// sSpec := false ;
19028: LD_ADDR_EXP 73
19032: PUSH
19033: LD_INT 0
19035: ST_TO_ADDR
// sLevel := false ;
19036: LD_ADDR_EXP 77
19040: PUSH
19041: LD_INT 0
19043: ST_TO_ADDR
// sArmoury := false ;
19044: LD_ADDR_EXP 78
19048: PUSH
19049: LD_INT 0
19051: ST_TO_ADDR
// sRadar := false ;
19052: LD_ADDR_EXP 79
19056: PUSH
19057: LD_INT 0
19059: ST_TO_ADDR
// sBunker := false ;
19060: LD_ADDR_EXP 80
19064: PUSH
19065: LD_INT 0
19067: ST_TO_ADDR
// sHack := false ;
19068: LD_ADDR_EXP 81
19072: PUSH
19073: LD_INT 0
19075: ST_TO_ADDR
// sFire := false ;
19076: LD_ADDR_EXP 82
19080: PUSH
19081: LD_INT 0
19083: ST_TO_ADDR
// sRefresh := false ;
19084: LD_ADDR_EXP 83
19088: PUSH
19089: LD_INT 0
19091: ST_TO_ADDR
// sExp := false ;
19092: LD_ADDR_EXP 84
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// sDepot := false ;
19100: LD_ADDR_EXP 85
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// sFlag := false ;
19108: LD_ADDR_EXP 86
19112: PUSH
19113: LD_INT 0
19115: ST_TO_ADDR
// sKamikadze := false ;
19116: LD_ADDR_EXP 94
19120: PUSH
19121: LD_INT 0
19123: ST_TO_ADDR
// sTroll := false ;
19124: LD_ADDR_EXP 95
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// sSlow := false ;
19132: LD_ADDR_EXP 96
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// sLack := false ;
19140: LD_ADDR_EXP 97
19144: PUSH
19145: LD_INT 0
19147: ST_TO_ADDR
// sTank := false ;
19148: LD_ADDR_EXP 99
19152: PUSH
19153: LD_INT 0
19155: ST_TO_ADDR
// sRemote := false ;
19156: LD_ADDR_EXP 100
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// sPowell := false ;
19164: LD_ADDR_EXP 101
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// sTeleport := false ;
19172: LD_ADDR_EXP 104
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// sOilTower := false ;
19180: LD_ADDR_EXP 106
19184: PUSH
19185: LD_INT 0
19187: ST_TO_ADDR
// sShovel := false ;
19188: LD_ADDR_EXP 107
19192: PUSH
19193: LD_INT 0
19195: ST_TO_ADDR
// sSheik := false ;
19196: LD_ADDR_EXP 108
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
// sEarthquake := false ;
19204: LD_ADDR_EXP 110
19208: PUSH
19209: LD_INT 0
19211: ST_TO_ADDR
// sAI := false ;
19212: LD_ADDR_EXP 111
19216: PUSH
19217: LD_INT 0
19219: ST_TO_ADDR
// sCargo := false ;
19220: LD_ADDR_EXP 114
19224: PUSH
19225: LD_INT 0
19227: ST_TO_ADDR
// sDLaser := false ;
19228: LD_ADDR_EXP 115
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// sExchange := false ;
19236: LD_ADDR_EXP 116
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// sFac := false ;
19244: LD_ADDR_EXP 117
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// sPower := false ;
19252: LD_ADDR_EXP 118
19256: PUSH
19257: LD_INT 0
19259: ST_TO_ADDR
// sRandom := false ;
19260: LD_ADDR_EXP 119
19264: PUSH
19265: LD_INT 0
19267: ST_TO_ADDR
// sShield := false ;
19268: LD_ADDR_EXP 120
19272: PUSH
19273: LD_INT 0
19275: ST_TO_ADDR
// sTime := false ;
19276: LD_ADDR_EXP 121
19280: PUSH
19281: LD_INT 0
19283: ST_TO_ADDR
// sTools := false ;
19284: LD_ADDR_EXP 122
19288: PUSH
19289: LD_INT 0
19291: ST_TO_ADDR
// sSold := false ;
19292: LD_ADDR_EXP 87
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// sDiff := false ;
19300: LD_ADDR_EXP 88
19304: PUSH
19305: LD_INT 0
19307: ST_TO_ADDR
// sFog := false ;
19308: LD_ADDR_EXP 91
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// sReset := false ;
19316: LD_ADDR_EXP 92
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// sSun := false ;
19324: LD_ADDR_EXP 93
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// sTiger := false ;
19332: LD_ADDR_EXP 89
19336: PUSH
19337: LD_INT 0
19339: ST_TO_ADDR
// sBomb := false ;
19340: LD_ADDR_EXP 90
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// sWound := false ;
19348: LD_ADDR_EXP 98
19352: PUSH
19353: LD_INT 0
19355: ST_TO_ADDR
// sBetray := false ;
19356: LD_ADDR_EXP 102
19360: PUSH
19361: LD_INT 0
19363: ST_TO_ADDR
// sContamin := false ;
19364: LD_ADDR_EXP 103
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// sOil := false ;
19372: LD_ADDR_EXP 105
19376: PUSH
19377: LD_INT 0
19379: ST_TO_ADDR
// sStu := false ;
19380: LD_ADDR_EXP 109
19384: PUSH
19385: LD_INT 0
19387: ST_TO_ADDR
// sBazooka := false ;
19388: LD_ADDR_EXP 112
19392: PUSH
19393: LD_INT 0
19395: ST_TO_ADDR
// sMortar := false ;
19396: LD_ADDR_EXP 113
19400: PUSH
19401: LD_INT 0
19403: ST_TO_ADDR
// sRanger := false ;
19404: LD_ADDR_EXP 123
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// end ;
19412: LD_VAR 0 1
19416: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19417: LD_INT 0
19419: PPUSH
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
// result := [ ] ;
19424: LD_ADDR_VAR 0 1
19428: PUSH
19429: EMPTY
19430: ST_TO_ADDR
// if campaign_id = 1 then
19431: LD_OWVAR 69
19435: PUSH
19436: LD_INT 1
19438: EQUAL
19439: IFFALSE 22377
// begin case mission_number of 1 :
19441: LD_OWVAR 70
19445: PUSH
19446: LD_INT 1
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 19518
19454: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19455: LD_ADDR_VAR 0 1
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: LD_INT 4
19465: PUSH
19466: LD_INT 11
19468: PUSH
19469: LD_INT 12
19471: PUSH
19472: LD_INT 15
19474: PUSH
19475: LD_INT 16
19477: PUSH
19478: LD_INT 22
19480: PUSH
19481: LD_INT 23
19483: PUSH
19484: LD_INT 26
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 101
19500: PUSH
19501: LD_INT 102
19503: PUSH
19504: LD_INT 106
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: ST_TO_ADDR
19516: GO 22375
19518: LD_INT 2
19520: DOUBLE
19521: EQUAL
19522: IFTRUE 19526
19524: GO 19598
19526: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19527: LD_ADDR_VAR 0 1
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 4
19537: PUSH
19538: LD_INT 11
19540: PUSH
19541: LD_INT 12
19543: PUSH
19544: LD_INT 15
19546: PUSH
19547: LD_INT 16
19549: PUSH
19550: LD_INT 22
19552: PUSH
19553: LD_INT 23
19555: PUSH
19556: LD_INT 26
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 101
19572: PUSH
19573: LD_INT 102
19575: PUSH
19576: LD_INT 105
19578: PUSH
19579: LD_INT 106
19581: PUSH
19582: LD_INT 108
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: ST_TO_ADDR
19596: GO 22375
19598: LD_INT 3
19600: DOUBLE
19601: EQUAL
19602: IFTRUE 19606
19604: GO 19682
19606: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19607: LD_ADDR_VAR 0 1
19611: PUSH
19612: LD_INT 2
19614: PUSH
19615: LD_INT 4
19617: PUSH
19618: LD_INT 5
19620: PUSH
19621: LD_INT 11
19623: PUSH
19624: LD_INT 12
19626: PUSH
19627: LD_INT 15
19629: PUSH
19630: LD_INT 16
19632: PUSH
19633: LD_INT 22
19635: PUSH
19636: LD_INT 26
19638: PUSH
19639: LD_INT 36
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 101
19656: PUSH
19657: LD_INT 102
19659: PUSH
19660: LD_INT 105
19662: PUSH
19663: LD_INT 106
19665: PUSH
19666: LD_INT 108
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: ST_TO_ADDR
19680: GO 22375
19682: LD_INT 4
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19774
19690: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19691: LD_ADDR_VAR 0 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 4
19701: PUSH
19702: LD_INT 5
19704: PUSH
19705: LD_INT 8
19707: PUSH
19708: LD_INT 11
19710: PUSH
19711: LD_INT 12
19713: PUSH
19714: LD_INT 15
19716: PUSH
19717: LD_INT 16
19719: PUSH
19720: LD_INT 22
19722: PUSH
19723: LD_INT 23
19725: PUSH
19726: LD_INT 26
19728: PUSH
19729: LD_INT 36
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 101
19748: PUSH
19749: LD_INT 102
19751: PUSH
19752: LD_INT 105
19754: PUSH
19755: LD_INT 106
19757: PUSH
19758: LD_INT 108
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: ST_TO_ADDR
19772: GO 22375
19774: LD_INT 5
19776: DOUBLE
19777: EQUAL
19778: IFTRUE 19782
19780: GO 19882
19782: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19783: LD_ADDR_VAR 0 1
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 4
19793: PUSH
19794: LD_INT 5
19796: PUSH
19797: LD_INT 6
19799: PUSH
19800: LD_INT 8
19802: PUSH
19803: LD_INT 11
19805: PUSH
19806: LD_INT 12
19808: PUSH
19809: LD_INT 15
19811: PUSH
19812: LD_INT 16
19814: PUSH
19815: LD_INT 22
19817: PUSH
19818: LD_INT 23
19820: PUSH
19821: LD_INT 25
19823: PUSH
19824: LD_INT 26
19826: PUSH
19827: LD_INT 36
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 101
19848: PUSH
19849: LD_INT 102
19851: PUSH
19852: LD_INT 105
19854: PUSH
19855: LD_INT 106
19857: PUSH
19858: LD_INT 108
19860: PUSH
19861: LD_INT 109
19863: PUSH
19864: LD_INT 112
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: ST_TO_ADDR
19880: GO 22375
19882: LD_INT 6
19884: DOUBLE
19885: EQUAL
19886: IFTRUE 19890
19888: GO 20010
19890: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19891: LD_ADDR_VAR 0 1
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: LD_INT 4
19901: PUSH
19902: LD_INT 5
19904: PUSH
19905: LD_INT 6
19907: PUSH
19908: LD_INT 8
19910: PUSH
19911: LD_INT 11
19913: PUSH
19914: LD_INT 12
19916: PUSH
19917: LD_INT 15
19919: PUSH
19920: LD_INT 16
19922: PUSH
19923: LD_INT 20
19925: PUSH
19926: LD_INT 21
19928: PUSH
19929: LD_INT 22
19931: PUSH
19932: LD_INT 23
19934: PUSH
19935: LD_INT 25
19937: PUSH
19938: LD_INT 26
19940: PUSH
19941: LD_INT 30
19943: PUSH
19944: LD_INT 31
19946: PUSH
19947: LD_INT 32
19949: PUSH
19950: LD_INT 36
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 101
19976: PUSH
19977: LD_INT 102
19979: PUSH
19980: LD_INT 105
19982: PUSH
19983: LD_INT 106
19985: PUSH
19986: LD_INT 108
19988: PUSH
19989: LD_INT 109
19991: PUSH
19992: LD_INT 112
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: ST_TO_ADDR
20008: GO 22375
20010: LD_INT 7
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20118
20018: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20019: LD_ADDR_VAR 0 1
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: LD_INT 4
20029: PUSH
20030: LD_INT 5
20032: PUSH
20033: LD_INT 7
20035: PUSH
20036: LD_INT 11
20038: PUSH
20039: LD_INT 12
20041: PUSH
20042: LD_INT 15
20044: PUSH
20045: LD_INT 16
20047: PUSH
20048: LD_INT 20
20050: PUSH
20051: LD_INT 21
20053: PUSH
20054: LD_INT 22
20056: PUSH
20057: LD_INT 23
20059: PUSH
20060: LD_INT 25
20062: PUSH
20063: LD_INT 26
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 101
20084: PUSH
20085: LD_INT 102
20087: PUSH
20088: LD_INT 103
20090: PUSH
20091: LD_INT 105
20093: PUSH
20094: LD_INT 106
20096: PUSH
20097: LD_INT 108
20099: PUSH
20100: LD_INT 112
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 22375
20118: LD_INT 8
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20254
20126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20127: LD_ADDR_VAR 0 1
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 4
20137: PUSH
20138: LD_INT 5
20140: PUSH
20141: LD_INT 6
20143: PUSH
20144: LD_INT 7
20146: PUSH
20147: LD_INT 8
20149: PUSH
20150: LD_INT 11
20152: PUSH
20153: LD_INT 12
20155: PUSH
20156: LD_INT 15
20158: PUSH
20159: LD_INT 16
20161: PUSH
20162: LD_INT 20
20164: PUSH
20165: LD_INT 21
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_INT 23
20173: PUSH
20174: LD_INT 25
20176: PUSH
20177: LD_INT 26
20179: PUSH
20180: LD_INT 30
20182: PUSH
20183: LD_INT 31
20185: PUSH
20186: LD_INT 32
20188: PUSH
20189: LD_INT 36
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 101
20216: PUSH
20217: LD_INT 102
20219: PUSH
20220: LD_INT 103
20222: PUSH
20223: LD_INT 105
20225: PUSH
20226: LD_INT 106
20228: PUSH
20229: LD_INT 108
20231: PUSH
20232: LD_INT 109
20234: PUSH
20235: LD_INT 112
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: ST_TO_ADDR
20252: GO 22375
20254: LD_INT 9
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20398
20262: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20263: LD_ADDR_VAR 0 1
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 4
20273: PUSH
20274: LD_INT 5
20276: PUSH
20277: LD_INT 6
20279: PUSH
20280: LD_INT 7
20282: PUSH
20283: LD_INT 8
20285: PUSH
20286: LD_INT 11
20288: PUSH
20289: LD_INT 12
20291: PUSH
20292: LD_INT 15
20294: PUSH
20295: LD_INT 16
20297: PUSH
20298: LD_INT 20
20300: PUSH
20301: LD_INT 21
20303: PUSH
20304: LD_INT 22
20306: PUSH
20307: LD_INT 23
20309: PUSH
20310: LD_INT 25
20312: PUSH
20313: LD_INT 26
20315: PUSH
20316: LD_INT 28
20318: PUSH
20319: LD_INT 30
20321: PUSH
20322: LD_INT 31
20324: PUSH
20325: LD_INT 32
20327: PUSH
20328: LD_INT 36
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 101
20356: PUSH
20357: LD_INT 102
20359: PUSH
20360: LD_INT 103
20362: PUSH
20363: LD_INT 105
20365: PUSH
20366: LD_INT 106
20368: PUSH
20369: LD_INT 108
20371: PUSH
20372: LD_INT 109
20374: PUSH
20375: LD_INT 112
20377: PUSH
20378: LD_INT 114
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: ST_TO_ADDR
20396: GO 22375
20398: LD_INT 10
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20590
20406: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20407: LD_ADDR_VAR 0 1
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: LD_INT 4
20417: PUSH
20418: LD_INT 5
20420: PUSH
20421: LD_INT 6
20423: PUSH
20424: LD_INT 7
20426: PUSH
20427: LD_INT 8
20429: PUSH
20430: LD_INT 9
20432: PUSH
20433: LD_INT 10
20435: PUSH
20436: LD_INT 11
20438: PUSH
20439: LD_INT 12
20441: PUSH
20442: LD_INT 13
20444: PUSH
20445: LD_INT 14
20447: PUSH
20448: LD_INT 15
20450: PUSH
20451: LD_INT 16
20453: PUSH
20454: LD_INT 17
20456: PUSH
20457: LD_INT 18
20459: PUSH
20460: LD_INT 19
20462: PUSH
20463: LD_INT 20
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 22
20471: PUSH
20472: LD_INT 23
20474: PUSH
20475: LD_INT 24
20477: PUSH
20478: LD_INT 25
20480: PUSH
20481: LD_INT 26
20483: PUSH
20484: LD_INT 28
20486: PUSH
20487: LD_INT 30
20489: PUSH
20490: LD_INT 31
20492: PUSH
20493: LD_INT 32
20495: PUSH
20496: LD_INT 36
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 101
20532: PUSH
20533: LD_INT 102
20535: PUSH
20536: LD_INT 103
20538: PUSH
20539: LD_INT 104
20541: PUSH
20542: LD_INT 105
20544: PUSH
20545: LD_INT 106
20547: PUSH
20548: LD_INT 107
20550: PUSH
20551: LD_INT 108
20553: PUSH
20554: LD_INT 109
20556: PUSH
20557: LD_INT 110
20559: PUSH
20560: LD_INT 111
20562: PUSH
20563: LD_INT 112
20565: PUSH
20566: LD_INT 114
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: ST_TO_ADDR
20588: GO 22375
20590: LD_INT 11
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20790
20598: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20599: LD_ADDR_VAR 0 1
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: LD_INT 3
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: LD_INT 5
20615: PUSH
20616: LD_INT 6
20618: PUSH
20619: LD_INT 7
20621: PUSH
20622: LD_INT 8
20624: PUSH
20625: LD_INT 9
20627: PUSH
20628: LD_INT 10
20630: PUSH
20631: LD_INT 11
20633: PUSH
20634: LD_INT 12
20636: PUSH
20637: LD_INT 13
20639: PUSH
20640: LD_INT 14
20642: PUSH
20643: LD_INT 15
20645: PUSH
20646: LD_INT 16
20648: PUSH
20649: LD_INT 17
20651: PUSH
20652: LD_INT 18
20654: PUSH
20655: LD_INT 19
20657: PUSH
20658: LD_INT 20
20660: PUSH
20661: LD_INT 21
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: LD_INT 23
20669: PUSH
20670: LD_INT 24
20672: PUSH
20673: LD_INT 25
20675: PUSH
20676: LD_INT 26
20678: PUSH
20679: LD_INT 28
20681: PUSH
20682: LD_INT 30
20684: PUSH
20685: LD_INT 31
20687: PUSH
20688: LD_INT 32
20690: PUSH
20691: LD_INT 34
20693: PUSH
20694: LD_INT 36
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 101
20732: PUSH
20733: LD_INT 102
20735: PUSH
20736: LD_INT 103
20738: PUSH
20739: LD_INT 104
20741: PUSH
20742: LD_INT 105
20744: PUSH
20745: LD_INT 106
20747: PUSH
20748: LD_INT 107
20750: PUSH
20751: LD_INT 108
20753: PUSH
20754: LD_INT 109
20756: PUSH
20757: LD_INT 110
20759: PUSH
20760: LD_INT 111
20762: PUSH
20763: LD_INT 112
20765: PUSH
20766: LD_INT 114
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: ST_TO_ADDR
20788: GO 22375
20790: LD_INT 12
20792: DOUBLE
20793: EQUAL
20794: IFTRUE 20798
20796: GO 21006
20798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20799: LD_ADDR_VAR 0 1
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 3
20812: PUSH
20813: LD_INT 4
20815: PUSH
20816: LD_INT 5
20818: PUSH
20819: LD_INT 6
20821: PUSH
20822: LD_INT 7
20824: PUSH
20825: LD_INT 8
20827: PUSH
20828: LD_INT 9
20830: PUSH
20831: LD_INT 10
20833: PUSH
20834: LD_INT 11
20836: PUSH
20837: LD_INT 12
20839: PUSH
20840: LD_INT 13
20842: PUSH
20843: LD_INT 14
20845: PUSH
20846: LD_INT 15
20848: PUSH
20849: LD_INT 16
20851: PUSH
20852: LD_INT 17
20854: PUSH
20855: LD_INT 18
20857: PUSH
20858: LD_INT 19
20860: PUSH
20861: LD_INT 20
20863: PUSH
20864: LD_INT 21
20866: PUSH
20867: LD_INT 22
20869: PUSH
20870: LD_INT 23
20872: PUSH
20873: LD_INT 24
20875: PUSH
20876: LD_INT 25
20878: PUSH
20879: LD_INT 26
20881: PUSH
20882: LD_INT 27
20884: PUSH
20885: LD_INT 28
20887: PUSH
20888: LD_INT 30
20890: PUSH
20891: LD_INT 31
20893: PUSH
20894: LD_INT 32
20896: PUSH
20897: LD_INT 33
20899: PUSH
20900: LD_INT 34
20902: PUSH
20903: LD_INT 36
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 101
20944: PUSH
20945: LD_INT 102
20947: PUSH
20948: LD_INT 103
20950: PUSH
20951: LD_INT 104
20953: PUSH
20954: LD_INT 105
20956: PUSH
20957: LD_INT 106
20959: PUSH
20960: LD_INT 107
20962: PUSH
20963: LD_INT 108
20965: PUSH
20966: LD_INT 109
20968: PUSH
20969: LD_INT 110
20971: PUSH
20972: LD_INT 111
20974: PUSH
20975: LD_INT 112
20977: PUSH
20978: LD_INT 113
20980: PUSH
20981: LD_INT 114
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: ST_TO_ADDR
21004: GO 22375
21006: LD_INT 13
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21210
21014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: LD_INT 3
21028: PUSH
21029: LD_INT 4
21031: PUSH
21032: LD_INT 5
21034: PUSH
21035: LD_INT 8
21037: PUSH
21038: LD_INT 9
21040: PUSH
21041: LD_INT 10
21043: PUSH
21044: LD_INT 11
21046: PUSH
21047: LD_INT 12
21049: PUSH
21050: LD_INT 14
21052: PUSH
21053: LD_INT 15
21055: PUSH
21056: LD_INT 16
21058: PUSH
21059: LD_INT 17
21061: PUSH
21062: LD_INT 18
21064: PUSH
21065: LD_INT 19
21067: PUSH
21068: LD_INT 20
21070: PUSH
21071: LD_INT 21
21073: PUSH
21074: LD_INT 22
21076: PUSH
21077: LD_INT 23
21079: PUSH
21080: LD_INT 24
21082: PUSH
21083: LD_INT 25
21085: PUSH
21086: LD_INT 26
21088: PUSH
21089: LD_INT 27
21091: PUSH
21092: LD_INT 28
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 31
21100: PUSH
21101: LD_INT 32
21103: PUSH
21104: LD_INT 33
21106: PUSH
21107: LD_INT 34
21109: PUSH
21110: LD_INT 36
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 101
21148: PUSH
21149: LD_INT 102
21151: PUSH
21152: LD_INT 103
21154: PUSH
21155: LD_INT 104
21157: PUSH
21158: LD_INT 105
21160: PUSH
21161: LD_INT 106
21163: PUSH
21164: LD_INT 107
21166: PUSH
21167: LD_INT 108
21169: PUSH
21170: LD_INT 109
21172: PUSH
21173: LD_INT 110
21175: PUSH
21176: LD_INT 111
21178: PUSH
21179: LD_INT 112
21181: PUSH
21182: LD_INT 113
21184: PUSH
21185: LD_INT 114
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: ST_TO_ADDR
21208: GO 22375
21210: LD_INT 14
21212: DOUBLE
21213: EQUAL
21214: IFTRUE 21218
21216: GO 21430
21218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21219: LD_ADDR_VAR 0 1
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: LD_INT 4
21235: PUSH
21236: LD_INT 5
21238: PUSH
21239: LD_INT 6
21241: PUSH
21242: LD_INT 7
21244: PUSH
21245: LD_INT 8
21247: PUSH
21248: LD_INT 9
21250: PUSH
21251: LD_INT 10
21253: PUSH
21254: LD_INT 11
21256: PUSH
21257: LD_INT 12
21259: PUSH
21260: LD_INT 13
21262: PUSH
21263: LD_INT 14
21265: PUSH
21266: LD_INT 15
21268: PUSH
21269: LD_INT 16
21271: PUSH
21272: LD_INT 17
21274: PUSH
21275: LD_INT 18
21277: PUSH
21278: LD_INT 19
21280: PUSH
21281: LD_INT 20
21283: PUSH
21284: LD_INT 21
21286: PUSH
21287: LD_INT 22
21289: PUSH
21290: LD_INT 23
21292: PUSH
21293: LD_INT 24
21295: PUSH
21296: LD_INT 25
21298: PUSH
21299: LD_INT 26
21301: PUSH
21302: LD_INT 27
21304: PUSH
21305: LD_INT 28
21307: PUSH
21308: LD_INT 29
21310: PUSH
21311: LD_INT 30
21313: PUSH
21314: LD_INT 31
21316: PUSH
21317: LD_INT 32
21319: PUSH
21320: LD_INT 33
21322: PUSH
21323: LD_INT 34
21325: PUSH
21326: LD_INT 36
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 101
21368: PUSH
21369: LD_INT 102
21371: PUSH
21372: LD_INT 103
21374: PUSH
21375: LD_INT 104
21377: PUSH
21378: LD_INT 105
21380: PUSH
21381: LD_INT 106
21383: PUSH
21384: LD_INT 107
21386: PUSH
21387: LD_INT 108
21389: PUSH
21390: LD_INT 109
21392: PUSH
21393: LD_INT 110
21395: PUSH
21396: LD_INT 111
21398: PUSH
21399: LD_INT 112
21401: PUSH
21402: LD_INT 113
21404: PUSH
21405: LD_INT 114
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: ST_TO_ADDR
21428: GO 22375
21430: LD_INT 15
21432: DOUBLE
21433: EQUAL
21434: IFTRUE 21438
21436: GO 21650
21438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21439: LD_ADDR_VAR 0 1
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 3
21452: PUSH
21453: LD_INT 4
21455: PUSH
21456: LD_INT 5
21458: PUSH
21459: LD_INT 6
21461: PUSH
21462: LD_INT 7
21464: PUSH
21465: LD_INT 8
21467: PUSH
21468: LD_INT 9
21470: PUSH
21471: LD_INT 10
21473: PUSH
21474: LD_INT 11
21476: PUSH
21477: LD_INT 12
21479: PUSH
21480: LD_INT 13
21482: PUSH
21483: LD_INT 14
21485: PUSH
21486: LD_INT 15
21488: PUSH
21489: LD_INT 16
21491: PUSH
21492: LD_INT 17
21494: PUSH
21495: LD_INT 18
21497: PUSH
21498: LD_INT 19
21500: PUSH
21501: LD_INT 20
21503: PUSH
21504: LD_INT 21
21506: PUSH
21507: LD_INT 22
21509: PUSH
21510: LD_INT 23
21512: PUSH
21513: LD_INT 24
21515: PUSH
21516: LD_INT 25
21518: PUSH
21519: LD_INT 26
21521: PUSH
21522: LD_INT 27
21524: PUSH
21525: LD_INT 28
21527: PUSH
21528: LD_INT 29
21530: PUSH
21531: LD_INT 30
21533: PUSH
21534: LD_INT 31
21536: PUSH
21537: LD_INT 32
21539: PUSH
21540: LD_INT 33
21542: PUSH
21543: LD_INT 34
21545: PUSH
21546: LD_INT 36
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 101
21588: PUSH
21589: LD_INT 102
21591: PUSH
21592: LD_INT 103
21594: PUSH
21595: LD_INT 104
21597: PUSH
21598: LD_INT 105
21600: PUSH
21601: LD_INT 106
21603: PUSH
21604: LD_INT 107
21606: PUSH
21607: LD_INT 108
21609: PUSH
21610: LD_INT 109
21612: PUSH
21613: LD_INT 110
21615: PUSH
21616: LD_INT 111
21618: PUSH
21619: LD_INT 112
21621: PUSH
21622: LD_INT 113
21624: PUSH
21625: LD_INT 114
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: ST_TO_ADDR
21648: GO 22375
21650: LD_INT 16
21652: DOUBLE
21653: EQUAL
21654: IFTRUE 21658
21656: GO 21782
21658: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21659: LD_ADDR_VAR 0 1
21663: PUSH
21664: LD_INT 2
21666: PUSH
21667: LD_INT 4
21669: PUSH
21670: LD_INT 5
21672: PUSH
21673: LD_INT 7
21675: PUSH
21676: LD_INT 11
21678: PUSH
21679: LD_INT 12
21681: PUSH
21682: LD_INT 15
21684: PUSH
21685: LD_INT 16
21687: PUSH
21688: LD_INT 20
21690: PUSH
21691: LD_INT 21
21693: PUSH
21694: LD_INT 22
21696: PUSH
21697: LD_INT 23
21699: PUSH
21700: LD_INT 25
21702: PUSH
21703: LD_INT 26
21705: PUSH
21706: LD_INT 30
21708: PUSH
21709: LD_INT 31
21711: PUSH
21712: LD_INT 32
21714: PUSH
21715: LD_INT 33
21717: PUSH
21718: LD_INT 34
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 101
21744: PUSH
21745: LD_INT 102
21747: PUSH
21748: LD_INT 103
21750: PUSH
21751: LD_INT 106
21753: PUSH
21754: LD_INT 108
21756: PUSH
21757: LD_INT 112
21759: PUSH
21760: LD_INT 113
21762: PUSH
21763: LD_INT 114
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: ST_TO_ADDR
21780: GO 22375
21782: LD_INT 17
21784: DOUBLE
21785: EQUAL
21786: IFTRUE 21790
21788: GO 22002
21790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21791: LD_ADDR_VAR 0 1
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: LD_INT 3
21804: PUSH
21805: LD_INT 4
21807: PUSH
21808: LD_INT 5
21810: PUSH
21811: LD_INT 6
21813: PUSH
21814: LD_INT 7
21816: PUSH
21817: LD_INT 8
21819: PUSH
21820: LD_INT 9
21822: PUSH
21823: LD_INT 10
21825: PUSH
21826: LD_INT 11
21828: PUSH
21829: LD_INT 12
21831: PUSH
21832: LD_INT 13
21834: PUSH
21835: LD_INT 14
21837: PUSH
21838: LD_INT 15
21840: PUSH
21841: LD_INT 16
21843: PUSH
21844: LD_INT 17
21846: PUSH
21847: LD_INT 18
21849: PUSH
21850: LD_INT 19
21852: PUSH
21853: LD_INT 20
21855: PUSH
21856: LD_INT 21
21858: PUSH
21859: LD_INT 22
21861: PUSH
21862: LD_INT 23
21864: PUSH
21865: LD_INT 24
21867: PUSH
21868: LD_INT 25
21870: PUSH
21871: LD_INT 26
21873: PUSH
21874: LD_INT 27
21876: PUSH
21877: LD_INT 28
21879: PUSH
21880: LD_INT 29
21882: PUSH
21883: LD_INT 30
21885: PUSH
21886: LD_INT 31
21888: PUSH
21889: LD_INT 32
21891: PUSH
21892: LD_INT 33
21894: PUSH
21895: LD_INT 34
21897: PUSH
21898: LD_INT 36
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 101
21940: PUSH
21941: LD_INT 102
21943: PUSH
21944: LD_INT 103
21946: PUSH
21947: LD_INT 104
21949: PUSH
21950: LD_INT 105
21952: PUSH
21953: LD_INT 106
21955: PUSH
21956: LD_INT 107
21958: PUSH
21959: LD_INT 108
21961: PUSH
21962: LD_INT 109
21964: PUSH
21965: LD_INT 110
21967: PUSH
21968: LD_INT 111
21970: PUSH
21971: LD_INT 112
21973: PUSH
21974: LD_INT 113
21976: PUSH
21977: LD_INT 114
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: ST_TO_ADDR
22000: GO 22375
22002: LD_INT 18
22004: DOUBLE
22005: EQUAL
22006: IFTRUE 22010
22008: GO 22146
22010: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22011: LD_ADDR_VAR 0 1
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 4
22021: PUSH
22022: LD_INT 5
22024: PUSH
22025: LD_INT 7
22027: PUSH
22028: LD_INT 11
22030: PUSH
22031: LD_INT 12
22033: PUSH
22034: LD_INT 15
22036: PUSH
22037: LD_INT 16
22039: PUSH
22040: LD_INT 20
22042: PUSH
22043: LD_INT 21
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_INT 23
22051: PUSH
22052: LD_INT 25
22054: PUSH
22055: LD_INT 26
22057: PUSH
22058: LD_INT 30
22060: PUSH
22061: LD_INT 31
22063: PUSH
22064: LD_INT 32
22066: PUSH
22067: LD_INT 33
22069: PUSH
22070: LD_INT 34
22072: PUSH
22073: LD_INT 35
22075: PUSH
22076: LD_INT 36
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 101
22104: PUSH
22105: LD_INT 102
22107: PUSH
22108: LD_INT 103
22110: PUSH
22111: LD_INT 106
22113: PUSH
22114: LD_INT 108
22116: PUSH
22117: LD_INT 112
22119: PUSH
22120: LD_INT 113
22122: PUSH
22123: LD_INT 114
22125: PUSH
22126: LD_INT 115
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: ST_TO_ADDR
22144: GO 22375
22146: LD_INT 19
22148: DOUBLE
22149: EQUAL
22150: IFTRUE 22154
22152: GO 22374
22154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22155: LD_ADDR_VAR 0 1
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: LD_INT 4
22171: PUSH
22172: LD_INT 5
22174: PUSH
22175: LD_INT 6
22177: PUSH
22178: LD_INT 7
22180: PUSH
22181: LD_INT 8
22183: PUSH
22184: LD_INT 9
22186: PUSH
22187: LD_INT 10
22189: PUSH
22190: LD_INT 11
22192: PUSH
22193: LD_INT 12
22195: PUSH
22196: LD_INT 13
22198: PUSH
22199: LD_INT 14
22201: PUSH
22202: LD_INT 15
22204: PUSH
22205: LD_INT 16
22207: PUSH
22208: LD_INT 17
22210: PUSH
22211: LD_INT 18
22213: PUSH
22214: LD_INT 19
22216: PUSH
22217: LD_INT 20
22219: PUSH
22220: LD_INT 21
22222: PUSH
22223: LD_INT 22
22225: PUSH
22226: LD_INT 23
22228: PUSH
22229: LD_INT 24
22231: PUSH
22232: LD_INT 25
22234: PUSH
22235: LD_INT 26
22237: PUSH
22238: LD_INT 27
22240: PUSH
22241: LD_INT 28
22243: PUSH
22244: LD_INT 29
22246: PUSH
22247: LD_INT 30
22249: PUSH
22250: LD_INT 31
22252: PUSH
22253: LD_INT 32
22255: PUSH
22256: LD_INT 33
22258: PUSH
22259: LD_INT 34
22261: PUSH
22262: LD_INT 35
22264: PUSH
22265: LD_INT 36
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 101
22308: PUSH
22309: LD_INT 102
22311: PUSH
22312: LD_INT 103
22314: PUSH
22315: LD_INT 104
22317: PUSH
22318: LD_INT 105
22320: PUSH
22321: LD_INT 106
22323: PUSH
22324: LD_INT 107
22326: PUSH
22327: LD_INT 108
22329: PUSH
22330: LD_INT 109
22332: PUSH
22333: LD_INT 110
22335: PUSH
22336: LD_INT 111
22338: PUSH
22339: LD_INT 112
22341: PUSH
22342: LD_INT 113
22344: PUSH
22345: LD_INT 114
22347: PUSH
22348: LD_INT 115
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: ST_TO_ADDR
22372: GO 22375
22374: POP
// end else
22375: GO 22594
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22377: LD_ADDR_VAR 0 1
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: LD_INT 4
22393: PUSH
22394: LD_INT 5
22396: PUSH
22397: LD_INT 6
22399: PUSH
22400: LD_INT 7
22402: PUSH
22403: LD_INT 8
22405: PUSH
22406: LD_INT 9
22408: PUSH
22409: LD_INT 10
22411: PUSH
22412: LD_INT 11
22414: PUSH
22415: LD_INT 12
22417: PUSH
22418: LD_INT 13
22420: PUSH
22421: LD_INT 14
22423: PUSH
22424: LD_INT 15
22426: PUSH
22427: LD_INT 16
22429: PUSH
22430: LD_INT 17
22432: PUSH
22433: LD_INT 18
22435: PUSH
22436: LD_INT 19
22438: PUSH
22439: LD_INT 20
22441: PUSH
22442: LD_INT 21
22444: PUSH
22445: LD_INT 22
22447: PUSH
22448: LD_INT 23
22450: PUSH
22451: LD_INT 24
22453: PUSH
22454: LD_INT 25
22456: PUSH
22457: LD_INT 26
22459: PUSH
22460: LD_INT 27
22462: PUSH
22463: LD_INT 28
22465: PUSH
22466: LD_INT 29
22468: PUSH
22469: LD_INT 30
22471: PUSH
22472: LD_INT 31
22474: PUSH
22475: LD_INT 32
22477: PUSH
22478: LD_INT 33
22480: PUSH
22481: LD_INT 34
22483: PUSH
22484: LD_INT 35
22486: PUSH
22487: LD_INT 36
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 101
22530: PUSH
22531: LD_INT 102
22533: PUSH
22534: LD_INT 103
22536: PUSH
22537: LD_INT 104
22539: PUSH
22540: LD_INT 105
22542: PUSH
22543: LD_INT 106
22545: PUSH
22546: LD_INT 107
22548: PUSH
22549: LD_INT 108
22551: PUSH
22552: LD_INT 109
22554: PUSH
22555: LD_INT 110
22557: PUSH
22558: LD_INT 111
22560: PUSH
22561: LD_INT 112
22563: PUSH
22564: LD_INT 113
22566: PUSH
22567: LD_INT 114
22569: PUSH
22570: LD_INT 115
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: ST_TO_ADDR
// if result then
22594: LD_VAR 0 1
22598: IFFALSE 22887
// begin normal :=  ;
22600: LD_ADDR_VAR 0 3
22604: PUSH
22605: LD_STRING 
22607: ST_TO_ADDR
// hardcore :=  ;
22608: LD_ADDR_VAR 0 4
22612: PUSH
22613: LD_STRING 
22615: ST_TO_ADDR
// for i = 1 to normalCounter do
22616: LD_ADDR_VAR 0 5
22620: PUSH
22621: DOUBLE
22622: LD_INT 1
22624: DEC
22625: ST_TO_ADDR
22626: LD_EXP 71
22630: PUSH
22631: FOR_TO
22632: IFFALSE 22733
// begin tmp := 0 ;
22634: LD_ADDR_VAR 0 2
22638: PUSH
22639: LD_STRING 0
22641: ST_TO_ADDR
// if result [ 1 ] then
22642: LD_VAR 0 1
22646: PUSH
22647: LD_INT 1
22649: ARRAY
22650: IFFALSE 22715
// if result [ 1 ] [ 1 ] = i then
22652: LD_VAR 0 1
22656: PUSH
22657: LD_INT 1
22659: ARRAY
22660: PUSH
22661: LD_INT 1
22663: ARRAY
22664: PUSH
22665: LD_VAR 0 5
22669: EQUAL
22670: IFFALSE 22715
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22672: LD_ADDR_VAR 0 1
22676: PUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: LD_INT 1
22684: PPUSH
22685: LD_VAR 0 1
22689: PUSH
22690: LD_INT 1
22692: ARRAY
22693: PPUSH
22694: LD_INT 1
22696: PPUSH
22697: CALL_OW 3
22701: PPUSH
22702: CALL_OW 1
22706: ST_TO_ADDR
// tmp := 1 ;
22707: LD_ADDR_VAR 0 2
22711: PUSH
22712: LD_STRING 1
22714: ST_TO_ADDR
// end ; normal := normal & tmp ;
22715: LD_ADDR_VAR 0 3
22719: PUSH
22720: LD_VAR 0 3
22724: PUSH
22725: LD_VAR 0 2
22729: STR
22730: ST_TO_ADDR
// end ;
22731: GO 22631
22733: POP
22734: POP
// for i = 1 to hardcoreCounter do
22735: LD_ADDR_VAR 0 5
22739: PUSH
22740: DOUBLE
22741: LD_INT 1
22743: DEC
22744: ST_TO_ADDR
22745: LD_EXP 72
22749: PUSH
22750: FOR_TO
22751: IFFALSE 22856
// begin tmp := 0 ;
22753: LD_ADDR_VAR 0 2
22757: PUSH
22758: LD_STRING 0
22760: ST_TO_ADDR
// if result [ 2 ] then
22761: LD_VAR 0 1
22765: PUSH
22766: LD_INT 2
22768: ARRAY
22769: IFFALSE 22838
// if result [ 2 ] [ 1 ] = 100 + i then
22771: LD_VAR 0 1
22775: PUSH
22776: LD_INT 2
22778: ARRAY
22779: PUSH
22780: LD_INT 1
22782: ARRAY
22783: PUSH
22784: LD_INT 100
22786: PUSH
22787: LD_VAR 0 5
22791: PLUS
22792: EQUAL
22793: IFFALSE 22838
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22795: LD_ADDR_VAR 0 1
22799: PUSH
22800: LD_VAR 0 1
22804: PPUSH
22805: LD_INT 2
22807: PPUSH
22808: LD_VAR 0 1
22812: PUSH
22813: LD_INT 2
22815: ARRAY
22816: PPUSH
22817: LD_INT 1
22819: PPUSH
22820: CALL_OW 3
22824: PPUSH
22825: CALL_OW 1
22829: ST_TO_ADDR
// tmp := 1 ;
22830: LD_ADDR_VAR 0 2
22834: PUSH
22835: LD_STRING 1
22837: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22838: LD_ADDR_VAR 0 4
22842: PUSH
22843: LD_VAR 0 4
22847: PUSH
22848: LD_VAR 0 2
22852: STR
22853: ST_TO_ADDR
// end ;
22854: GO 22750
22856: POP
22857: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22858: LD_STRING getStreamItemsFromMission("
22860: PUSH
22861: LD_VAR 0 3
22865: STR
22866: PUSH
22867: LD_STRING ","
22869: STR
22870: PUSH
22871: LD_VAR 0 4
22875: STR
22876: PUSH
22877: LD_STRING ")
22879: STR
22880: PPUSH
22881: CALL_OW 559
// end else
22885: GO 22894
// ToLua ( getStreamItemsFromMission("","") ) ;
22887: LD_STRING getStreamItemsFromMission("","")
22889: PPUSH
22890: CALL_OW 559
// end ;
22894: LD_VAR 0 1
22898: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22899: LD_EXP 70
22903: PUSH
22904: LD_EXP 75
22908: AND
22909: IFFALSE 23033
22911: GO 22913
22913: DISABLE
22914: LD_INT 0
22916: PPUSH
22917: PPUSH
// begin enable ;
22918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22919: LD_ADDR_VAR 0 2
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_OWVAR 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: LD_INT 34
22941: PUSH
22942: LD_INT 7
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 34
22951: PUSH
22952: LD_INT 45
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 34
22961: PUSH
22962: LD_INT 28
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 34
22971: PUSH
22972: LD_INT 47
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 69
22994: ST_TO_ADDR
// if not tmp then
22995: LD_VAR 0 2
22999: NOT
23000: IFFALSE 23004
// exit ;
23002: GO 23033
// for i in tmp do
23004: LD_ADDR_VAR 0 1
23008: PUSH
23009: LD_VAR 0 2
23013: PUSH
23014: FOR_IN
23015: IFFALSE 23031
// begin SetLives ( i , 0 ) ;
23017: LD_VAR 0 1
23021: PPUSH
23022: LD_INT 0
23024: PPUSH
23025: CALL_OW 234
// end ;
23029: GO 23014
23031: POP
23032: POP
// end ;
23033: PPOPN 2
23035: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23036: LD_EXP 70
23040: PUSH
23041: LD_EXP 76
23045: AND
23046: IFFALSE 23130
23048: GO 23050
23050: DISABLE
23051: LD_INT 0
23053: PPUSH
23054: PPUSH
// begin enable ;
23055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_INT 22
23063: PUSH
23064: LD_OWVAR 2
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 32
23075: PUSH
23076: LD_INT 3
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PPUSH
23087: CALL_OW 69
23091: ST_TO_ADDR
// if not tmp then
23092: LD_VAR 0 2
23096: NOT
23097: IFFALSE 23101
// exit ;
23099: GO 23130
// for i in tmp do
23101: LD_ADDR_VAR 0 1
23105: PUSH
23106: LD_VAR 0 2
23110: PUSH
23111: FOR_IN
23112: IFFALSE 23128
// begin SetLives ( i , 0 ) ;
23114: LD_VAR 0 1
23118: PPUSH
23119: LD_INT 0
23121: PPUSH
23122: CALL_OW 234
// end ;
23126: GO 23111
23128: POP
23129: POP
// end ;
23130: PPOPN 2
23132: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23133: LD_EXP 70
23137: PUSH
23138: LD_EXP 73
23142: AND
23143: IFFALSE 23236
23145: GO 23147
23147: DISABLE
23148: LD_INT 0
23150: PPUSH
// begin enable ;
23151: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23152: LD_ADDR_VAR 0 1
23156: PUSH
23157: LD_INT 22
23159: PUSH
23160: LD_OWVAR 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 25
23174: PUSH
23175: LD_INT 5
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 25
23184: PUSH
23185: LD_INT 9
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 25
23194: PUSH
23195: LD_INT 8
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PPUSH
23212: CALL_OW 69
23216: PUSH
23217: FOR_IN
23218: IFFALSE 23234
// begin SetClass ( i , 1 ) ;
23220: LD_VAR 0 1
23224: PPUSH
23225: LD_INT 1
23227: PPUSH
23228: CALL_OW 336
// end ;
23232: GO 23217
23234: POP
23235: POP
// end ;
23236: PPOPN 1
23238: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23239: LD_EXP 70
23243: PUSH
23244: LD_EXP 74
23248: AND
23249: PUSH
23250: LD_OWVAR 65
23254: PUSH
23255: LD_INT 7
23257: LESS
23258: AND
23259: IFFALSE 23273
23261: GO 23263
23263: DISABLE
// begin enable ;
23264: ENABLE
// game_speed := 7 ;
23265: LD_ADDR_OWVAR 65
23269: PUSH
23270: LD_INT 7
23272: ST_TO_ADDR
// end ;
23273: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23274: LD_EXP 70
23278: PUSH
23279: LD_EXP 77
23283: AND
23284: IFFALSE 23486
23286: GO 23288
23288: DISABLE
23289: LD_INT 0
23291: PPUSH
23292: PPUSH
23293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23294: LD_ADDR_VAR 0 3
23298: PUSH
23299: LD_INT 81
23301: PUSH
23302: LD_OWVAR 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 21
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PPUSH
23325: CALL_OW 69
23329: ST_TO_ADDR
// if not tmp then
23330: LD_VAR 0 3
23334: NOT
23335: IFFALSE 23339
// exit ;
23337: GO 23486
// if tmp > 5 then
23339: LD_VAR 0 3
23343: PUSH
23344: LD_INT 5
23346: GREATER
23347: IFFALSE 23359
// k := 5 else
23349: LD_ADDR_VAR 0 2
23353: PUSH
23354: LD_INT 5
23356: ST_TO_ADDR
23357: GO 23369
// k := tmp ;
23359: LD_ADDR_VAR 0 2
23363: PUSH
23364: LD_VAR 0 3
23368: ST_TO_ADDR
// for i := 1 to k do
23369: LD_ADDR_VAR 0 1
23373: PUSH
23374: DOUBLE
23375: LD_INT 1
23377: DEC
23378: ST_TO_ADDR
23379: LD_VAR 0 2
23383: PUSH
23384: FOR_TO
23385: IFFALSE 23484
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23387: LD_VAR 0 3
23391: PUSH
23392: LD_VAR 0 1
23396: ARRAY
23397: PPUSH
23398: LD_VAR 0 1
23402: PUSH
23403: LD_INT 4
23405: MOD
23406: PUSH
23407: LD_INT 1
23409: PLUS
23410: PPUSH
23411: CALL_OW 259
23415: PUSH
23416: LD_INT 10
23418: LESS
23419: IFFALSE 23482
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23421: LD_VAR 0 3
23425: PUSH
23426: LD_VAR 0 1
23430: ARRAY
23431: PPUSH
23432: LD_VAR 0 1
23436: PUSH
23437: LD_INT 4
23439: MOD
23440: PUSH
23441: LD_INT 1
23443: PLUS
23444: PPUSH
23445: LD_VAR 0 3
23449: PUSH
23450: LD_VAR 0 1
23454: ARRAY
23455: PPUSH
23456: LD_VAR 0 1
23460: PUSH
23461: LD_INT 4
23463: MOD
23464: PUSH
23465: LD_INT 1
23467: PLUS
23468: PPUSH
23469: CALL_OW 259
23473: PUSH
23474: LD_INT 1
23476: PLUS
23477: PPUSH
23478: CALL_OW 237
23482: GO 23384
23484: POP
23485: POP
// end ;
23486: PPOPN 3
23488: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23489: LD_EXP 70
23493: PUSH
23494: LD_EXP 78
23498: AND
23499: IFFALSE 23519
23501: GO 23503
23503: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23504: LD_INT 4
23506: PPUSH
23507: LD_OWVAR 2
23511: PPUSH
23512: LD_INT 0
23514: PPUSH
23515: CALL_OW 324
23519: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23520: LD_EXP 70
23524: PUSH
23525: LD_EXP 107
23529: AND
23530: IFFALSE 23550
23532: GO 23534
23534: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23535: LD_INT 19
23537: PPUSH
23538: LD_OWVAR 2
23542: PPUSH
23543: LD_INT 0
23545: PPUSH
23546: CALL_OW 324
23550: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23551: LD_EXP 70
23555: PUSH
23556: LD_EXP 79
23560: AND
23561: IFFALSE 23663
23563: GO 23565
23565: DISABLE
23566: LD_INT 0
23568: PPUSH
23569: PPUSH
// begin enable ;
23570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23571: LD_ADDR_VAR 0 2
23575: PUSH
23576: LD_INT 22
23578: PUSH
23579: LD_OWVAR 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 34
23593: PUSH
23594: LD_INT 11
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 34
23603: PUSH
23604: LD_INT 30
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PPUSH
23620: CALL_OW 69
23624: ST_TO_ADDR
// if not tmp then
23625: LD_VAR 0 2
23629: NOT
23630: IFFALSE 23634
// exit ;
23632: GO 23663
// for i in tmp do
23634: LD_ADDR_VAR 0 1
23638: PUSH
23639: LD_VAR 0 2
23643: PUSH
23644: FOR_IN
23645: IFFALSE 23661
// begin SetLives ( i , 0 ) ;
23647: LD_VAR 0 1
23651: PPUSH
23652: LD_INT 0
23654: PPUSH
23655: CALL_OW 234
// end ;
23659: GO 23644
23661: POP
23662: POP
// end ;
23663: PPOPN 2
23665: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23666: LD_EXP 70
23670: PUSH
23671: LD_EXP 80
23675: AND
23676: IFFALSE 23696
23678: GO 23680
23680: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23681: LD_INT 32
23683: PPUSH
23684: LD_OWVAR 2
23688: PPUSH
23689: LD_INT 0
23691: PPUSH
23692: CALL_OW 324
23696: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23697: LD_EXP 70
23701: PUSH
23702: LD_EXP 81
23706: AND
23707: IFFALSE 23888
23709: GO 23711
23711: DISABLE
23712: LD_INT 0
23714: PPUSH
23715: PPUSH
23716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23717: LD_ADDR_VAR 0 2
23721: PUSH
23722: LD_INT 22
23724: PUSH
23725: LD_OWVAR 2
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 33
23736: PUSH
23737: LD_INT 3
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PPUSH
23748: CALL_OW 69
23752: ST_TO_ADDR
// if not tmp then
23753: LD_VAR 0 2
23757: NOT
23758: IFFALSE 23762
// exit ;
23760: GO 23888
// side := 0 ;
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_INT 0
23769: ST_TO_ADDR
// for i := 1 to 8 do
23770: LD_ADDR_VAR 0 1
23774: PUSH
23775: DOUBLE
23776: LD_INT 1
23778: DEC
23779: ST_TO_ADDR
23780: LD_INT 8
23782: PUSH
23783: FOR_TO
23784: IFFALSE 23832
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23786: LD_OWVAR 2
23790: PUSH
23791: LD_VAR 0 1
23795: NONEQUAL
23796: PUSH
23797: LD_OWVAR 2
23801: PPUSH
23802: LD_VAR 0 1
23806: PPUSH
23807: CALL_OW 81
23811: PUSH
23812: LD_INT 2
23814: EQUAL
23815: AND
23816: IFFALSE 23830
// begin side := i ;
23818: LD_ADDR_VAR 0 3
23822: PUSH
23823: LD_VAR 0 1
23827: ST_TO_ADDR
// break ;
23828: GO 23832
// end ;
23830: GO 23783
23832: POP
23833: POP
// if not side then
23834: LD_VAR 0 3
23838: NOT
23839: IFFALSE 23843
// exit ;
23841: GO 23888
// for i := 1 to tmp do
23843: LD_ADDR_VAR 0 1
23847: PUSH
23848: DOUBLE
23849: LD_INT 1
23851: DEC
23852: ST_TO_ADDR
23853: LD_VAR 0 2
23857: PUSH
23858: FOR_TO
23859: IFFALSE 23886
// if Prob ( 60 ) then
23861: LD_INT 60
23863: PPUSH
23864: CALL_OW 13
23868: IFFALSE 23884
// SetSide ( i , side ) ;
23870: LD_VAR 0 1
23874: PPUSH
23875: LD_VAR 0 3
23879: PPUSH
23880: CALL_OW 235
23884: GO 23858
23886: POP
23887: POP
// end ;
23888: PPOPN 3
23890: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23891: LD_EXP 70
23895: PUSH
23896: LD_EXP 83
23900: AND
23901: IFFALSE 24020
23903: GO 23905
23905: DISABLE
23906: LD_INT 0
23908: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23909: LD_ADDR_VAR 0 1
23913: PUSH
23914: LD_INT 22
23916: PUSH
23917: LD_OWVAR 2
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 21
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: LD_INT 23
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: PPUSH
23958: CALL_OW 69
23962: PUSH
23963: FOR_IN
23964: IFFALSE 24018
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23966: LD_VAR 0 1
23970: PPUSH
23971: CALL_OW 257
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 3
23984: PUSH
23985: LD_INT 4
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: IN
23994: IFFALSE 24016
// SetClass ( un , rand ( 1 , 4 ) ) ;
23996: LD_VAR 0 1
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: LD_INT 4
24006: PPUSH
24007: CALL_OW 12
24011: PPUSH
24012: CALL_OW 336
24016: GO 23963
24018: POP
24019: POP
// end ;
24020: PPOPN 1
24022: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24023: LD_EXP 70
24027: PUSH
24028: LD_EXP 82
24032: AND
24033: IFFALSE 24112
24035: GO 24037
24037: DISABLE
24038: LD_INT 0
24040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24041: LD_ADDR_VAR 0 1
24045: PUSH
24046: LD_INT 22
24048: PUSH
24049: LD_OWVAR 2
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 21
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PPUSH
24072: CALL_OW 69
24076: ST_TO_ADDR
// if not tmp then
24077: LD_VAR 0 1
24081: NOT
24082: IFFALSE 24086
// exit ;
24084: GO 24112
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24086: LD_VAR 0 1
24090: PUSH
24091: LD_INT 1
24093: PPUSH
24094: LD_VAR 0 1
24098: PPUSH
24099: CALL_OW 12
24103: ARRAY
24104: PPUSH
24105: LD_INT 100
24107: PPUSH
24108: CALL_OW 234
// end ;
24112: PPOPN 1
24114: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24115: LD_EXP 70
24119: PUSH
24120: LD_EXP 84
24124: AND
24125: IFFALSE 24223
24127: GO 24129
24129: DISABLE
24130: LD_INT 0
24132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24133: LD_ADDR_VAR 0 1
24137: PUSH
24138: LD_INT 22
24140: PUSH
24141: LD_OWVAR 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 21
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PPUSH
24164: CALL_OW 69
24168: ST_TO_ADDR
// if not tmp then
24169: LD_VAR 0 1
24173: NOT
24174: IFFALSE 24178
// exit ;
24176: GO 24223
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24178: LD_VAR 0 1
24182: PUSH
24183: LD_INT 1
24185: PPUSH
24186: LD_VAR 0 1
24190: PPUSH
24191: CALL_OW 12
24195: ARRAY
24196: PPUSH
24197: LD_INT 1
24199: PPUSH
24200: LD_INT 4
24202: PPUSH
24203: CALL_OW 12
24207: PPUSH
24208: LD_INT 3000
24210: PPUSH
24211: LD_INT 9000
24213: PPUSH
24214: CALL_OW 12
24218: PPUSH
24219: CALL_OW 492
// end ;
24223: PPOPN 1
24225: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24226: LD_EXP 70
24230: PUSH
24231: LD_EXP 85
24235: AND
24236: IFFALSE 24256
24238: GO 24240
24240: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24241: LD_INT 1
24243: PPUSH
24244: LD_OWVAR 2
24248: PPUSH
24249: LD_INT 0
24251: PPUSH
24252: CALL_OW 324
24256: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24257: LD_EXP 70
24261: PUSH
24262: LD_EXP 86
24266: AND
24267: IFFALSE 24350
24269: GO 24271
24271: DISABLE
24272: LD_INT 0
24274: PPUSH
24275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24276: LD_ADDR_VAR 0 2
24280: PUSH
24281: LD_INT 22
24283: PUSH
24284: LD_OWVAR 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 21
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 69
24311: ST_TO_ADDR
// if not tmp then
24312: LD_VAR 0 2
24316: NOT
24317: IFFALSE 24321
// exit ;
24319: GO 24350
// for i in tmp do
24321: LD_ADDR_VAR 0 1
24325: PUSH
24326: LD_VAR 0 2
24330: PUSH
24331: FOR_IN
24332: IFFALSE 24348
// SetBLevel ( i , 10 ) ;
24334: LD_VAR 0 1
24338: PPUSH
24339: LD_INT 10
24341: PPUSH
24342: CALL_OW 241
24346: GO 24331
24348: POP
24349: POP
// end ;
24350: PPOPN 2
24352: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24353: LD_EXP 70
24357: PUSH
24358: LD_EXP 87
24362: AND
24363: IFFALSE 24474
24365: GO 24367
24367: DISABLE
24368: LD_INT 0
24370: PPUSH
24371: PPUSH
24372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_INT 22
24380: PUSH
24381: LD_OWVAR 2
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 25
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PPUSH
24404: CALL_OW 69
24408: ST_TO_ADDR
// if not tmp then
24409: LD_VAR 0 3
24413: NOT
24414: IFFALSE 24418
// exit ;
24416: GO 24474
// un := tmp [ rand ( 1 , tmp ) ] ;
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_VAR 0 3
24427: PUSH
24428: LD_INT 1
24430: PPUSH
24431: LD_VAR 0 3
24435: PPUSH
24436: CALL_OW 12
24440: ARRAY
24441: ST_TO_ADDR
// if Crawls ( un ) then
24442: LD_VAR 0 2
24446: PPUSH
24447: CALL_OW 318
24451: IFFALSE 24462
// ComWalk ( un ) ;
24453: LD_VAR 0 2
24457: PPUSH
24458: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24462: LD_VAR 0 2
24466: PPUSH
24467: LD_INT 5
24469: PPUSH
24470: CALL_OW 336
// end ;
24474: PPOPN 3
24476: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24477: LD_EXP 70
24481: PUSH
24482: LD_EXP 88
24486: AND
24487: PUSH
24488: LD_OWVAR 67
24492: PUSH
24493: LD_INT 3
24495: LESS
24496: AND
24497: IFFALSE 24516
24499: GO 24501
24501: DISABLE
// Difficulty := Difficulty + 1 ;
24502: LD_ADDR_OWVAR 67
24506: PUSH
24507: LD_OWVAR 67
24511: PUSH
24512: LD_INT 1
24514: PLUS
24515: ST_TO_ADDR
24516: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24517: LD_EXP 70
24521: PUSH
24522: LD_EXP 89
24526: AND
24527: IFFALSE 24630
24529: GO 24531
24531: DISABLE
24532: LD_INT 0
24534: PPUSH
// begin for i := 1 to 5 do
24535: LD_ADDR_VAR 0 1
24539: PUSH
24540: DOUBLE
24541: LD_INT 1
24543: DEC
24544: ST_TO_ADDR
24545: LD_INT 5
24547: PUSH
24548: FOR_TO
24549: IFFALSE 24628
// begin uc_nation := nation_nature ;
24551: LD_ADDR_OWVAR 21
24555: PUSH
24556: LD_INT 0
24558: ST_TO_ADDR
// uc_side := 0 ;
24559: LD_ADDR_OWVAR 20
24563: PUSH
24564: LD_INT 0
24566: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24567: LD_ADDR_OWVAR 29
24571: PUSH
24572: LD_INT 12
24574: PUSH
24575: LD_INT 12
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: ST_TO_ADDR
// hc_agressivity := 20 ;
24582: LD_ADDR_OWVAR 35
24586: PUSH
24587: LD_INT 20
24589: ST_TO_ADDR
// hc_class := class_tiger ;
24590: LD_ADDR_OWVAR 28
24594: PUSH
24595: LD_INT 14
24597: ST_TO_ADDR
// hc_gallery :=  ;
24598: LD_ADDR_OWVAR 33
24602: PUSH
24603: LD_STRING 
24605: ST_TO_ADDR
// hc_name :=  ;
24606: LD_ADDR_OWVAR 26
24610: PUSH
24611: LD_STRING 
24613: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24614: CALL_OW 44
24618: PPUSH
24619: LD_INT 0
24621: PPUSH
24622: CALL_OW 51
// end ;
24626: GO 24548
24628: POP
24629: POP
// end ;
24630: PPOPN 1
24632: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24633: LD_EXP 70
24637: PUSH
24638: LD_EXP 90
24642: AND
24643: IFFALSE 24652
24645: GO 24647
24647: DISABLE
// StreamSibBomb ;
24648: CALL 24653 0 0
24652: END
// export function StreamSibBomb ; var i , x , y ; begin
24653: LD_INT 0
24655: PPUSH
24656: PPUSH
24657: PPUSH
24658: PPUSH
// result := false ;
24659: LD_ADDR_VAR 0 1
24663: PUSH
24664: LD_INT 0
24666: ST_TO_ADDR
// for i := 1 to 16 do
24667: LD_ADDR_VAR 0 2
24671: PUSH
24672: DOUBLE
24673: LD_INT 1
24675: DEC
24676: ST_TO_ADDR
24677: LD_INT 16
24679: PUSH
24680: FOR_TO
24681: IFFALSE 24880
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 10
24690: PUSH
24691: LD_INT 20
24693: PUSH
24694: LD_INT 30
24696: PUSH
24697: LD_INT 40
24699: PUSH
24700: LD_INT 50
24702: PUSH
24703: LD_INT 60
24705: PUSH
24706: LD_INT 70
24708: PUSH
24709: LD_INT 80
24711: PUSH
24712: LD_INT 90
24714: PUSH
24715: LD_INT 100
24717: PUSH
24718: LD_INT 110
24720: PUSH
24721: LD_INT 120
24723: PUSH
24724: LD_INT 130
24726: PUSH
24727: LD_INT 140
24729: PUSH
24730: LD_INT 150
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: PPUSH
24753: LD_INT 15
24755: PPUSH
24756: CALL_OW 12
24760: ARRAY
24761: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24762: LD_ADDR_VAR 0 4
24766: PUSH
24767: LD_INT 10
24769: PUSH
24770: LD_INT 20
24772: PUSH
24773: LD_INT 30
24775: PUSH
24776: LD_INT 40
24778: PUSH
24779: LD_INT 50
24781: PUSH
24782: LD_INT 60
24784: PUSH
24785: LD_INT 70
24787: PUSH
24788: LD_INT 80
24790: PUSH
24791: LD_INT 90
24793: PUSH
24794: LD_INT 100
24796: PUSH
24797: LD_INT 110
24799: PUSH
24800: LD_INT 120
24802: PUSH
24803: LD_INT 130
24805: PUSH
24806: LD_INT 140
24808: PUSH
24809: LD_INT 150
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PPUSH
24832: LD_INT 15
24834: PPUSH
24835: CALL_OW 12
24839: ARRAY
24840: ST_TO_ADDR
// if ValidHex ( x , y ) then
24841: LD_VAR 0 3
24845: PPUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: CALL_OW 488
24855: IFFALSE 24878
// begin result := [ x , y ] ;
24857: LD_ADDR_VAR 0 1
24861: PUSH
24862: LD_VAR 0 3
24866: PUSH
24867: LD_VAR 0 4
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: ST_TO_ADDR
// break ;
24876: GO 24880
// end ; end ;
24878: GO 24680
24880: POP
24881: POP
// if result then
24882: LD_VAR 0 1
24886: IFFALSE 24946
// begin ToLua ( playSibBomb() ) ;
24888: LD_STRING playSibBomb()
24890: PPUSH
24891: CALL_OW 559
// wait ( 0 0$14 ) ;
24895: LD_INT 490
24897: PPUSH
24898: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24902: LD_VAR 0 1
24906: PUSH
24907: LD_INT 1
24909: ARRAY
24910: PPUSH
24911: LD_VAR 0 1
24915: PUSH
24916: LD_INT 2
24918: ARRAY
24919: PPUSH
24920: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24924: LD_VAR 0 1
24928: PUSH
24929: LD_INT 1
24931: ARRAY
24932: PPUSH
24933: LD_VAR 0 1
24937: PUSH
24938: LD_INT 2
24940: ARRAY
24941: PPUSH
24942: CALL_OW 429
// end ; end ;
24946: LD_VAR 0 1
24950: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24951: LD_EXP 70
24955: PUSH
24956: LD_EXP 92
24960: AND
24961: IFFALSE 24973
24963: GO 24965
24965: DISABLE
// YouLost (  ) ;
24966: LD_STRING 
24968: PPUSH
24969: CALL_OW 104
24973: END
// every 0 0$1 trigger StreamModeActive and sFog do
24974: LD_EXP 70
24978: PUSH
24979: LD_EXP 91
24983: AND
24984: IFFALSE 24998
24986: GO 24988
24988: DISABLE
// FogOff ( your_side ) ;
24989: LD_OWVAR 2
24993: PPUSH
24994: CALL_OW 344
24998: END
// every 0 0$1 trigger StreamModeActive and sSun do
24999: LD_EXP 70
25003: PUSH
25004: LD_EXP 93
25008: AND
25009: IFFALSE 25037
25011: GO 25013
25013: DISABLE
// begin solar_recharge_percent := 0 ;
25014: LD_ADDR_OWVAR 79
25018: PUSH
25019: LD_INT 0
25021: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25022: LD_INT 10500
25024: PPUSH
25025: CALL_OW 67
// solar_recharge_percent := 100 ;
25029: LD_ADDR_OWVAR 79
25033: PUSH
25034: LD_INT 100
25036: ST_TO_ADDR
// end ;
25037: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25038: LD_EXP 70
25042: PUSH
25043: LD_EXP 94
25047: AND
25048: IFFALSE 25287
25050: GO 25052
25052: DISABLE
25053: LD_INT 0
25055: PPUSH
25056: PPUSH
25057: PPUSH
// begin tmp := [ ] ;
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: EMPTY
25064: ST_TO_ADDR
// for i := 1 to 6 do
25065: LD_ADDR_VAR 0 1
25069: PUSH
25070: DOUBLE
25071: LD_INT 1
25073: DEC
25074: ST_TO_ADDR
25075: LD_INT 6
25077: PUSH
25078: FOR_TO
25079: IFFALSE 25184
// begin uc_nation := nation_nature ;
25081: LD_ADDR_OWVAR 21
25085: PUSH
25086: LD_INT 0
25088: ST_TO_ADDR
// uc_side := 0 ;
25089: LD_ADDR_OWVAR 20
25093: PUSH
25094: LD_INT 0
25096: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25097: LD_ADDR_OWVAR 29
25101: PUSH
25102: LD_INT 12
25104: PUSH
25105: LD_INT 12
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: ST_TO_ADDR
// hc_agressivity := 20 ;
25112: LD_ADDR_OWVAR 35
25116: PUSH
25117: LD_INT 20
25119: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25120: LD_ADDR_OWVAR 28
25124: PUSH
25125: LD_INT 17
25127: ST_TO_ADDR
// hc_gallery :=  ;
25128: LD_ADDR_OWVAR 33
25132: PUSH
25133: LD_STRING 
25135: ST_TO_ADDR
// hc_name :=  ;
25136: LD_ADDR_OWVAR 26
25140: PUSH
25141: LD_STRING 
25143: ST_TO_ADDR
// un := CreateHuman ;
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: CALL_OW 44
25153: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25154: LD_VAR 0 2
25158: PPUSH
25159: LD_INT 1
25161: PPUSH
25162: CALL_OW 51
// tmp := tmp ^ un ;
25166: LD_ADDR_VAR 0 3
25170: PUSH
25171: LD_VAR 0 3
25175: PUSH
25176: LD_VAR 0 2
25180: ADD
25181: ST_TO_ADDR
// end ;
25182: GO 25078
25184: POP
25185: POP
// repeat wait ( 0 0$1 ) ;
25186: LD_INT 35
25188: PPUSH
25189: CALL_OW 67
// for un in tmp do
25193: LD_ADDR_VAR 0 2
25197: PUSH
25198: LD_VAR 0 3
25202: PUSH
25203: FOR_IN
25204: IFFALSE 25278
// begin if IsDead ( un ) then
25206: LD_VAR 0 2
25210: PPUSH
25211: CALL_OW 301
25215: IFFALSE 25235
// begin tmp := tmp diff un ;
25217: LD_ADDR_VAR 0 3
25221: PUSH
25222: LD_VAR 0 3
25226: PUSH
25227: LD_VAR 0 2
25231: DIFF
25232: ST_TO_ADDR
// continue ;
25233: GO 25203
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25235: LD_VAR 0 2
25239: PPUSH
25240: LD_INT 3
25242: PUSH
25243: LD_INT 22
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 69
25261: PPUSH
25262: LD_VAR 0 2
25266: PPUSH
25267: CALL_OW 74
25271: PPUSH
25272: CALL_OW 115
// end ;
25276: GO 25203
25278: POP
25279: POP
// until not tmp ;
25280: LD_VAR 0 3
25284: NOT
25285: IFFALSE 25186
// end ;
25287: PPOPN 3
25289: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25290: LD_EXP 70
25294: PUSH
25295: LD_EXP 95
25299: AND
25300: IFFALSE 25354
25302: GO 25304
25304: DISABLE
// begin ToLua ( displayTroll(); ) ;
25305: LD_STRING displayTroll();
25307: PPUSH
25308: CALL_OW 559
// wait ( 3 3$00 ) ;
25312: LD_INT 6300
25314: PPUSH
25315: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25319: LD_STRING hideTroll();
25321: PPUSH
25322: CALL_OW 559
// wait ( 1 1$00 ) ;
25326: LD_INT 2100
25328: PPUSH
25329: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25333: LD_STRING displayTroll();
25335: PPUSH
25336: CALL_OW 559
// wait ( 1 1$00 ) ;
25340: LD_INT 2100
25342: PPUSH
25343: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25347: LD_STRING hideTroll();
25349: PPUSH
25350: CALL_OW 559
// end ;
25354: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25355: LD_EXP 70
25359: PUSH
25360: LD_EXP 96
25364: AND
25365: IFFALSE 25428
25367: GO 25369
25369: DISABLE
25370: LD_INT 0
25372: PPUSH
// begin p := 0 ;
25373: LD_ADDR_VAR 0 1
25377: PUSH
25378: LD_INT 0
25380: ST_TO_ADDR
// repeat game_speed := 1 ;
25381: LD_ADDR_OWVAR 65
25385: PUSH
25386: LD_INT 1
25388: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25389: LD_INT 35
25391: PPUSH
25392: CALL_OW 67
// p := p + 1 ;
25396: LD_ADDR_VAR 0 1
25400: PUSH
25401: LD_VAR 0 1
25405: PUSH
25406: LD_INT 1
25408: PLUS
25409: ST_TO_ADDR
// until p >= 60 ;
25410: LD_VAR 0 1
25414: PUSH
25415: LD_INT 60
25417: GREATEREQUAL
25418: IFFALSE 25381
// game_speed := 4 ;
25420: LD_ADDR_OWVAR 65
25424: PUSH
25425: LD_INT 4
25427: ST_TO_ADDR
// end ;
25428: PPOPN 1
25430: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25431: LD_EXP 70
25435: PUSH
25436: LD_EXP 97
25440: AND
25441: IFFALSE 25587
25443: GO 25445
25445: DISABLE
25446: LD_INT 0
25448: PPUSH
25449: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25450: LD_ADDR_VAR 0 1
25454: PUSH
25455: LD_INT 22
25457: PUSH
25458: LD_OWVAR 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 2
25469: PUSH
25470: LD_INT 30
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 30
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: ST_TO_ADDR
// if not depot then
25504: LD_VAR 0 1
25508: NOT
25509: IFFALSE 25513
// exit ;
25511: GO 25587
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25513: LD_ADDR_VAR 0 2
25517: PUSH
25518: LD_VAR 0 1
25522: PUSH
25523: LD_INT 1
25525: PPUSH
25526: LD_VAR 0 1
25530: PPUSH
25531: CALL_OW 12
25535: ARRAY
25536: PPUSH
25537: CALL_OW 274
25541: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25542: LD_VAR 0 2
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: LD_INT 0
25552: PPUSH
25553: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25557: LD_VAR 0 2
25561: PPUSH
25562: LD_INT 2
25564: PPUSH
25565: LD_INT 0
25567: PPUSH
25568: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25572: LD_VAR 0 2
25576: PPUSH
25577: LD_INT 3
25579: PPUSH
25580: LD_INT 0
25582: PPUSH
25583: CALL_OW 277
// end ;
25587: PPOPN 2
25589: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25590: LD_EXP 70
25594: PUSH
25595: LD_EXP 98
25599: AND
25600: IFFALSE 25697
25602: GO 25604
25604: DISABLE
25605: LD_INT 0
25607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25608: LD_ADDR_VAR 0 1
25612: PUSH
25613: LD_INT 22
25615: PUSH
25616: LD_OWVAR 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 21
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 3
25637: PUSH
25638: LD_INT 23
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: LIST
25656: PPUSH
25657: CALL_OW 69
25661: ST_TO_ADDR
// if not tmp then
25662: LD_VAR 0 1
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25697
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25671: LD_VAR 0 1
25675: PUSH
25676: LD_INT 1
25678: PPUSH
25679: LD_VAR 0 1
25683: PPUSH
25684: CALL_OW 12
25688: ARRAY
25689: PPUSH
25690: LD_INT 200
25692: PPUSH
25693: CALL_OW 234
// end ;
25697: PPOPN 1
25699: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25700: LD_EXP 70
25704: PUSH
25705: LD_EXP 99
25709: AND
25710: IFFALSE 25789
25712: GO 25714
25714: DISABLE
25715: LD_INT 0
25717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25718: LD_ADDR_VAR 0 1
25722: PUSH
25723: LD_INT 22
25725: PUSH
25726: LD_OWVAR 2
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 21
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PPUSH
25749: CALL_OW 69
25753: ST_TO_ADDR
// if not tmp then
25754: LD_VAR 0 1
25758: NOT
25759: IFFALSE 25763
// exit ;
25761: GO 25789
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25763: LD_VAR 0 1
25767: PUSH
25768: LD_INT 1
25770: PPUSH
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL_OW 12
25780: ARRAY
25781: PPUSH
25782: LD_INT 60
25784: PPUSH
25785: CALL_OW 234
// end ;
25789: PPOPN 1
25791: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25792: LD_EXP 70
25796: PUSH
25797: LD_EXP 100
25801: AND
25802: IFFALSE 25901
25804: GO 25806
25806: DISABLE
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
// begin enable ;
25811: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_INT 22
25819: PUSH
25820: LD_OWVAR 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 61
25831: PUSH
25832: EMPTY
25833: LIST
25834: PUSH
25835: LD_INT 33
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 69
25854: ST_TO_ADDR
// if not tmp then
25855: LD_VAR 0 1
25859: NOT
25860: IFFALSE 25864
// exit ;
25862: GO 25901
// for i in tmp do
25864: LD_ADDR_VAR 0 2
25868: PUSH
25869: LD_VAR 0 1
25873: PUSH
25874: FOR_IN
25875: IFFALSE 25899
// if IsControledBy ( i ) then
25877: LD_VAR 0 2
25881: PPUSH
25882: CALL_OW 312
25886: IFFALSE 25897
// ComUnlink ( i ) ;
25888: LD_VAR 0 2
25892: PPUSH
25893: CALL_OW 136
25897: GO 25874
25899: POP
25900: POP
// end ;
25901: PPOPN 2
25903: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25904: LD_EXP 70
25908: PUSH
25909: LD_EXP 101
25913: AND
25914: IFFALSE 26054
25916: GO 25918
25918: DISABLE
25919: LD_INT 0
25921: PPUSH
25922: PPUSH
// begin ToLua ( displayPowell(); ) ;
25923: LD_STRING displayPowell();
25925: PPUSH
25926: CALL_OW 559
// uc_side := 0 ;
25930: LD_ADDR_OWVAR 20
25934: PUSH
25935: LD_INT 0
25937: ST_TO_ADDR
// uc_nation := 2 ;
25938: LD_ADDR_OWVAR 21
25942: PUSH
25943: LD_INT 2
25945: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25946: LD_ADDR_OWVAR 37
25950: PUSH
25951: LD_INT 14
25953: ST_TO_ADDR
// vc_engine := engine_siberite ;
25954: LD_ADDR_OWVAR 39
25958: PUSH
25959: LD_INT 3
25961: ST_TO_ADDR
// vc_control := control_apeman ;
25962: LD_ADDR_OWVAR 38
25966: PUSH
25967: LD_INT 5
25969: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25970: LD_ADDR_OWVAR 40
25974: PUSH
25975: LD_INT 29
25977: ST_TO_ADDR
// un := CreateVehicle ;
25978: LD_ADDR_VAR 0 2
25982: PUSH
25983: CALL_OW 45
25987: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25988: LD_VAR 0 2
25992: PPUSH
25993: LD_INT 1
25995: PPUSH
25996: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26000: LD_INT 35
26002: PPUSH
26003: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26007: LD_VAR 0 2
26011: PPUSH
26012: LD_INT 22
26014: PUSH
26015: LD_OWVAR 2
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: PPUSH
26029: LD_VAR 0 2
26033: PPUSH
26034: CALL_OW 74
26038: PPUSH
26039: CALL_OW 115
// until IsDead ( un ) ;
26043: LD_VAR 0 2
26047: PPUSH
26048: CALL_OW 301
26052: IFFALSE 26000
// end ;
26054: PPOPN 2
26056: END
// every 0 0$1 trigger StreamModeActive and sStu do
26057: LD_EXP 70
26061: PUSH
26062: LD_EXP 109
26066: AND
26067: IFFALSE 26083
26069: GO 26071
26071: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26072: LD_STRING displayStucuk();
26074: PPUSH
26075: CALL_OW 559
// ResetFog ;
26079: CALL_OW 335
// end ;
26083: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26084: LD_EXP 70
26088: PUSH
26089: LD_EXP 102
26093: AND
26094: IFFALSE 26235
26096: GO 26098
26098: DISABLE
26099: LD_INT 0
26101: PPUSH
26102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26103: LD_ADDR_VAR 0 2
26107: PUSH
26108: LD_INT 22
26110: PUSH
26111: LD_OWVAR 2
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 21
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PPUSH
26134: CALL_OW 69
26138: ST_TO_ADDR
// if not tmp then
26139: LD_VAR 0 2
26143: NOT
26144: IFFALSE 26148
// exit ;
26146: GO 26235
// un := tmp [ rand ( 1 , tmp ) ] ;
26148: LD_ADDR_VAR 0 1
26152: PUSH
26153: LD_VAR 0 2
26157: PUSH
26158: LD_INT 1
26160: PPUSH
26161: LD_VAR 0 2
26165: PPUSH
26166: CALL_OW 12
26170: ARRAY
26171: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26172: LD_VAR 0 1
26176: PPUSH
26177: LD_INT 0
26179: PPUSH
26180: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26184: LD_VAR 0 1
26188: PPUSH
26189: LD_OWVAR 3
26193: PUSH
26194: LD_VAR 0 1
26198: DIFF
26199: PPUSH
26200: LD_VAR 0 1
26204: PPUSH
26205: CALL_OW 74
26209: PPUSH
26210: CALL_OW 115
// wait ( 0 0$20 ) ;
26214: LD_INT 700
26216: PPUSH
26217: CALL_OW 67
// SetSide ( un , your_side ) ;
26221: LD_VAR 0 1
26225: PPUSH
26226: LD_OWVAR 2
26230: PPUSH
26231: CALL_OW 235
// end ;
26235: PPOPN 2
26237: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26238: LD_EXP 70
26242: PUSH
26243: LD_EXP 103
26247: AND
26248: IFFALSE 26354
26250: GO 26252
26252: DISABLE
26253: LD_INT 0
26255: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26256: LD_ADDR_VAR 0 1
26260: PUSH
26261: LD_INT 22
26263: PUSH
26264: LD_OWVAR 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: LD_INT 30
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 30
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: LIST
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PPUSH
26305: CALL_OW 69
26309: ST_TO_ADDR
// if not depot then
26310: LD_VAR 0 1
26314: NOT
26315: IFFALSE 26319
// exit ;
26317: GO 26354
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26319: LD_VAR 0 1
26323: PUSH
26324: LD_INT 1
26326: ARRAY
26327: PPUSH
26328: CALL_OW 250
26332: PPUSH
26333: LD_VAR 0 1
26337: PUSH
26338: LD_INT 1
26340: ARRAY
26341: PPUSH
26342: CALL_OW 251
26346: PPUSH
26347: LD_INT 70
26349: PPUSH
26350: CALL_OW 495
// end ;
26354: PPOPN 1
26356: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26357: LD_EXP 70
26361: PUSH
26362: LD_EXP 104
26366: AND
26367: IFFALSE 26578
26369: GO 26371
26371: DISABLE
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26379: LD_ADDR_VAR 0 5
26383: PUSH
26384: LD_INT 22
26386: PUSH
26387: LD_OWVAR 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 21
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 69
26414: ST_TO_ADDR
// if not tmp then
26415: LD_VAR 0 5
26419: NOT
26420: IFFALSE 26424
// exit ;
26422: GO 26578
// for i in tmp do
26424: LD_ADDR_VAR 0 1
26428: PUSH
26429: LD_VAR 0 5
26433: PUSH
26434: FOR_IN
26435: IFFALSE 26576
// begin d := rand ( 0 , 5 ) ;
26437: LD_ADDR_VAR 0 4
26441: PUSH
26442: LD_INT 0
26444: PPUSH
26445: LD_INT 5
26447: PPUSH
26448: CALL_OW 12
26452: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26453: LD_ADDR_VAR 0 2
26457: PUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 250
26467: PPUSH
26468: LD_VAR 0 4
26472: PPUSH
26473: LD_INT 3
26475: PPUSH
26476: LD_INT 12
26478: PPUSH
26479: CALL_OW 12
26483: PPUSH
26484: CALL_OW 272
26488: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26489: LD_ADDR_VAR 0 3
26493: PUSH
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 251
26503: PPUSH
26504: LD_VAR 0 4
26508: PPUSH
26509: LD_INT 3
26511: PPUSH
26512: LD_INT 12
26514: PPUSH
26515: CALL_OW 12
26519: PPUSH
26520: CALL_OW 273
26524: ST_TO_ADDR
// if ValidHex ( x , y ) then
26525: LD_VAR 0 2
26529: PPUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 488
26539: IFFALSE 26574
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26541: LD_VAR 0 1
26545: PPUSH
26546: LD_VAR 0 2
26550: PPUSH
26551: LD_VAR 0 3
26555: PPUSH
26556: LD_INT 3
26558: PPUSH
26559: LD_INT 6
26561: PPUSH
26562: CALL_OW 12
26566: PPUSH
26567: LD_INT 1
26569: PPUSH
26570: CALL_OW 483
// end ;
26574: GO 26434
26576: POP
26577: POP
// end ;
26578: PPOPN 5
26580: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26581: LD_EXP 70
26585: PUSH
26586: LD_EXP 105
26590: AND
26591: IFFALSE 26685
26593: GO 26595
26595: DISABLE
26596: LD_INT 0
26598: PPUSH
26599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26600: LD_ADDR_VAR 0 2
26604: PUSH
26605: LD_INT 22
26607: PUSH
26608: LD_OWVAR 2
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 32
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 21
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: PPUSH
26642: CALL_OW 69
26646: ST_TO_ADDR
// if not tmp then
26647: LD_VAR 0 2
26651: NOT
26652: IFFALSE 26656
// exit ;
26654: GO 26685
// for i in tmp do
26656: LD_ADDR_VAR 0 1
26660: PUSH
26661: LD_VAR 0 2
26665: PUSH
26666: FOR_IN
26667: IFFALSE 26683
// SetFuel ( i , 0 ) ;
26669: LD_VAR 0 1
26673: PPUSH
26674: LD_INT 0
26676: PPUSH
26677: CALL_OW 240
26681: GO 26666
26683: POP
26684: POP
// end ;
26685: PPOPN 2
26687: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26688: LD_EXP 70
26692: PUSH
26693: LD_EXP 106
26697: AND
26698: IFFALSE 26764
26700: GO 26702
26702: DISABLE
26703: LD_INT 0
26705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26706: LD_ADDR_VAR 0 1
26710: PUSH
26711: LD_INT 22
26713: PUSH
26714: LD_OWVAR 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 30
26725: PUSH
26726: LD_INT 29
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PPUSH
26737: CALL_OW 69
26741: ST_TO_ADDR
// if not tmp then
26742: LD_VAR 0 1
26746: NOT
26747: IFFALSE 26751
// exit ;
26749: GO 26764
// DestroyUnit ( tmp [ 1 ] ) ;
26751: LD_VAR 0 1
26755: PUSH
26756: LD_INT 1
26758: ARRAY
26759: PPUSH
26760: CALL_OW 65
// end ;
26764: PPOPN 1
26766: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26767: LD_EXP 70
26771: PUSH
26772: LD_EXP 108
26776: AND
26777: IFFALSE 26906
26779: GO 26781
26781: DISABLE
26782: LD_INT 0
26784: PPUSH
// begin uc_side := 0 ;
26785: LD_ADDR_OWVAR 20
26789: PUSH
26790: LD_INT 0
26792: ST_TO_ADDR
// uc_nation := nation_arabian ;
26793: LD_ADDR_OWVAR 21
26797: PUSH
26798: LD_INT 2
26800: ST_TO_ADDR
// hc_gallery :=  ;
26801: LD_ADDR_OWVAR 33
26805: PUSH
26806: LD_STRING 
26808: ST_TO_ADDR
// hc_name :=  ;
26809: LD_ADDR_OWVAR 26
26813: PUSH
26814: LD_STRING 
26816: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26817: LD_INT 1
26819: PPUSH
26820: LD_INT 11
26822: PPUSH
26823: LD_INT 10
26825: PPUSH
26826: CALL_OW 380
// un := CreateHuman ;
26830: LD_ADDR_VAR 0 1
26834: PUSH
26835: CALL_OW 44
26839: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26840: LD_VAR 0 1
26844: PPUSH
26845: LD_INT 1
26847: PPUSH
26848: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26852: LD_INT 35
26854: PPUSH
26855: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26859: LD_VAR 0 1
26863: PPUSH
26864: LD_INT 22
26866: PUSH
26867: LD_OWVAR 2
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PPUSH
26876: CALL_OW 69
26880: PPUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 74
26890: PPUSH
26891: CALL_OW 115
// until IsDead ( un ) ;
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 301
26904: IFFALSE 26852
// end ;
26906: PPOPN 1
26908: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26909: LD_EXP 70
26913: PUSH
26914: LD_EXP 110
26918: AND
26919: IFFALSE 26931
26921: GO 26923
26923: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26924: LD_STRING earthquake(getX(game), 0, 32)
26926: PPUSH
26927: CALL_OW 559
26931: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26932: LD_EXP 70
26936: PUSH
26937: LD_EXP 111
26941: AND
26942: IFFALSE 27033
26944: GO 26946
26946: DISABLE
26947: LD_INT 0
26949: PPUSH
// begin enable ;
26950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26951: LD_ADDR_VAR 0 1
26955: PUSH
26956: LD_INT 22
26958: PUSH
26959: LD_OWVAR 2
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 21
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 33
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: LIST
26992: PPUSH
26993: CALL_OW 69
26997: ST_TO_ADDR
// if not tmp then
26998: LD_VAR 0 1
27002: NOT
27003: IFFALSE 27007
// exit ;
27005: GO 27033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27007: LD_VAR 0 1
27011: PUSH
27012: LD_INT 1
27014: PPUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 12
27024: ARRAY
27025: PPUSH
27026: LD_INT 1
27028: PPUSH
27029: CALL_OW 234
// end ;
27033: PPOPN 1
27035: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27036: LD_EXP 70
27040: PUSH
27041: LD_EXP 112
27045: AND
27046: IFFALSE 27187
27048: GO 27050
27050: DISABLE
27051: LD_INT 0
27053: PPUSH
27054: PPUSH
27055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27056: LD_ADDR_VAR 0 3
27060: PUSH
27061: LD_INT 22
27063: PUSH
27064: LD_OWVAR 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 25
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PPUSH
27087: CALL_OW 69
27091: ST_TO_ADDR
// if not tmp then
27092: LD_VAR 0 3
27096: NOT
27097: IFFALSE 27101
// exit ;
27099: GO 27187
// un := tmp [ rand ( 1 , tmp ) ] ;
27101: LD_ADDR_VAR 0 2
27105: PUSH
27106: LD_VAR 0 3
27110: PUSH
27111: LD_INT 1
27113: PPUSH
27114: LD_VAR 0 3
27118: PPUSH
27119: CALL_OW 12
27123: ARRAY
27124: ST_TO_ADDR
// if Crawls ( un ) then
27125: LD_VAR 0 2
27129: PPUSH
27130: CALL_OW 318
27134: IFFALSE 27145
// ComWalk ( un ) ;
27136: LD_VAR 0 2
27140: PPUSH
27141: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27145: LD_VAR 0 2
27149: PPUSH
27150: LD_INT 9
27152: PPUSH
27153: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27157: LD_INT 28
27159: PPUSH
27160: LD_OWVAR 2
27164: PPUSH
27165: LD_INT 2
27167: PPUSH
27168: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27172: LD_INT 29
27174: PPUSH
27175: LD_OWVAR 2
27179: PPUSH
27180: LD_INT 2
27182: PPUSH
27183: CALL_OW 322
// end ;
27187: PPOPN 3
27189: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27190: LD_EXP 70
27194: PUSH
27195: LD_EXP 113
27199: AND
27200: IFFALSE 27311
27202: GO 27204
27204: DISABLE
27205: LD_INT 0
27207: PPUSH
27208: PPUSH
27209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27210: LD_ADDR_VAR 0 3
27214: PUSH
27215: LD_INT 22
27217: PUSH
27218: LD_OWVAR 2
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 25
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PPUSH
27241: CALL_OW 69
27245: ST_TO_ADDR
// if not tmp then
27246: LD_VAR 0 3
27250: NOT
27251: IFFALSE 27255
// exit ;
27253: GO 27311
// un := tmp [ rand ( 1 , tmp ) ] ;
27255: LD_ADDR_VAR 0 2
27259: PUSH
27260: LD_VAR 0 3
27264: PUSH
27265: LD_INT 1
27267: PPUSH
27268: LD_VAR 0 3
27272: PPUSH
27273: CALL_OW 12
27277: ARRAY
27278: ST_TO_ADDR
// if Crawls ( un ) then
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 318
27288: IFFALSE 27299
// ComWalk ( un ) ;
27290: LD_VAR 0 2
27294: PPUSH
27295: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27299: LD_VAR 0 2
27303: PPUSH
27304: LD_INT 8
27306: PPUSH
27307: CALL_OW 336
// end ;
27311: PPOPN 3
27313: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27314: LD_EXP 70
27318: PUSH
27319: LD_EXP 114
27323: AND
27324: IFFALSE 27468
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27333: LD_ADDR_VAR 0 2
27337: PUSH
27338: LD_INT 22
27340: PUSH
27341: LD_OWVAR 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 21
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: LD_INT 34
27365: PUSH
27366: LD_INT 12
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 34
27375: PUSH
27376: LD_INT 51
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 34
27385: PUSH
27386: LD_INT 32
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: PPUSH
27404: CALL_OW 69
27408: ST_TO_ADDR
// if not tmp then
27409: LD_VAR 0 2
27413: NOT
27414: IFFALSE 27418
// exit ;
27416: GO 27468
// for i in tmp do
27418: LD_ADDR_VAR 0 1
27422: PUSH
27423: LD_VAR 0 2
27427: PUSH
27428: FOR_IN
27429: IFFALSE 27466
// if GetCargo ( i , mat_artifact ) = 0 then
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_INT 4
27438: PPUSH
27439: CALL_OW 289
27443: PUSH
27444: LD_INT 0
27446: EQUAL
27447: IFFALSE 27464
// SetCargo ( i , mat_siberit , 100 ) ;
27449: LD_VAR 0 1
27453: PPUSH
27454: LD_INT 3
27456: PPUSH
27457: LD_INT 100
27459: PPUSH
27460: CALL_OW 290
27464: GO 27428
27466: POP
27467: POP
// end ;
27468: PPOPN 2
27470: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27471: LD_EXP 70
27475: PUSH
27476: LD_EXP 115
27480: AND
27481: IFFALSE 27664
27483: GO 27485
27485: DISABLE
27486: LD_INT 0
27488: PPUSH
27489: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27490: LD_ADDR_VAR 0 2
27494: PUSH
27495: LD_INT 22
27497: PUSH
27498: LD_OWVAR 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PPUSH
27507: CALL_OW 69
27511: ST_TO_ADDR
// if not tmp then
27512: LD_VAR 0 2
27516: NOT
27517: IFFALSE 27521
// exit ;
27519: GO 27664
// for i := 1 to 2 do
27521: LD_ADDR_VAR 0 1
27525: PUSH
27526: DOUBLE
27527: LD_INT 1
27529: DEC
27530: ST_TO_ADDR
27531: LD_INT 2
27533: PUSH
27534: FOR_TO
27535: IFFALSE 27662
// begin uc_side := your_side ;
27537: LD_ADDR_OWVAR 20
27541: PUSH
27542: LD_OWVAR 2
27546: ST_TO_ADDR
// uc_nation := nation_american ;
27547: LD_ADDR_OWVAR 21
27551: PUSH
27552: LD_INT 1
27554: ST_TO_ADDR
// vc_chassis := us_morphling ;
27555: LD_ADDR_OWVAR 37
27559: PUSH
27560: LD_INT 5
27562: ST_TO_ADDR
// vc_engine := engine_siberite ;
27563: LD_ADDR_OWVAR 39
27567: PUSH
27568: LD_INT 3
27570: ST_TO_ADDR
// vc_control := control_computer ;
27571: LD_ADDR_OWVAR 38
27575: PUSH
27576: LD_INT 3
27578: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27579: LD_ADDR_OWVAR 40
27583: PUSH
27584: LD_INT 10
27586: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27587: LD_VAR 0 2
27591: PUSH
27592: LD_INT 1
27594: ARRAY
27595: PPUSH
27596: CALL_OW 310
27600: NOT
27601: IFFALSE 27648
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27603: CALL_OW 45
27607: PPUSH
27608: LD_VAR 0 2
27612: PUSH
27613: LD_INT 1
27615: ARRAY
27616: PPUSH
27617: CALL_OW 250
27621: PPUSH
27622: LD_VAR 0 2
27626: PUSH
27627: LD_INT 1
27629: ARRAY
27630: PPUSH
27631: CALL_OW 251
27635: PPUSH
27636: LD_INT 12
27638: PPUSH
27639: LD_INT 1
27641: PPUSH
27642: CALL_OW 50
27646: GO 27660
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27648: CALL_OW 45
27652: PPUSH
27653: LD_INT 1
27655: PPUSH
27656: CALL_OW 51
// end ;
27660: GO 27534
27662: POP
27663: POP
// end ;
27664: PPOPN 2
27666: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27667: LD_EXP 70
27671: PUSH
27672: LD_EXP 116
27676: AND
27677: IFFALSE 27899
27679: GO 27681
27681: DISABLE
27682: LD_INT 0
27684: PPUSH
27685: PPUSH
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27690: LD_ADDR_VAR 0 6
27694: PUSH
27695: LD_INT 22
27697: PUSH
27698: LD_OWVAR 2
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 21
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: LD_INT 23
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: PPUSH
27739: CALL_OW 69
27743: ST_TO_ADDR
// if not tmp then
27744: LD_VAR 0 6
27748: NOT
27749: IFFALSE 27753
// exit ;
27751: GO 27899
// s1 := rand ( 1 , 4 ) ;
27753: LD_ADDR_VAR 0 2
27757: PUSH
27758: LD_INT 1
27760: PPUSH
27761: LD_INT 4
27763: PPUSH
27764: CALL_OW 12
27768: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27769: LD_ADDR_VAR 0 4
27773: PUSH
27774: LD_VAR 0 6
27778: PUSH
27779: LD_INT 1
27781: ARRAY
27782: PPUSH
27783: LD_VAR 0 2
27787: PPUSH
27788: CALL_OW 259
27792: ST_TO_ADDR
// if s1 = 1 then
27793: LD_VAR 0 2
27797: PUSH
27798: LD_INT 1
27800: EQUAL
27801: IFFALSE 27821
// s2 := rand ( 2 , 4 ) else
27803: LD_ADDR_VAR 0 3
27807: PUSH
27808: LD_INT 2
27810: PPUSH
27811: LD_INT 4
27813: PPUSH
27814: CALL_OW 12
27818: ST_TO_ADDR
27819: GO 27829
// s2 := 1 ;
27821: LD_ADDR_VAR 0 3
27825: PUSH
27826: LD_INT 1
27828: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27829: LD_ADDR_VAR 0 5
27833: PUSH
27834: LD_VAR 0 6
27838: PUSH
27839: LD_INT 1
27841: ARRAY
27842: PPUSH
27843: LD_VAR 0 3
27847: PPUSH
27848: CALL_OW 259
27852: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27853: LD_VAR 0 6
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PPUSH
27862: LD_VAR 0 2
27866: PPUSH
27867: LD_VAR 0 5
27871: PPUSH
27872: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27876: LD_VAR 0 6
27880: PUSH
27881: LD_INT 1
27883: ARRAY
27884: PPUSH
27885: LD_VAR 0 3
27889: PPUSH
27890: LD_VAR 0 4
27894: PPUSH
27895: CALL_OW 237
// end ;
27899: PPOPN 6
27901: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27902: LD_EXP 70
27906: PUSH
27907: LD_EXP 117
27911: AND
27912: IFFALSE 27991
27914: GO 27916
27916: DISABLE
27917: LD_INT 0
27919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27920: LD_ADDR_VAR 0 1
27924: PUSH
27925: LD_INT 22
27927: PUSH
27928: LD_OWVAR 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 30
27939: PUSH
27940: LD_INT 3
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PPUSH
27951: CALL_OW 69
27955: ST_TO_ADDR
// if not tmp then
27956: LD_VAR 0 1
27960: NOT
27961: IFFALSE 27965
// exit ;
27963: GO 27991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27965: LD_VAR 0 1
27969: PUSH
27970: LD_INT 1
27972: PPUSH
27973: LD_VAR 0 1
27977: PPUSH
27978: CALL_OW 12
27982: ARRAY
27983: PPUSH
27984: LD_INT 1
27986: PPUSH
27987: CALL_OW 234
// end ;
27991: PPOPN 1
27993: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27994: LD_EXP 70
27998: PUSH
27999: LD_EXP 118
28003: AND
28004: IFFALSE 28116
28006: GO 28008
28008: DISABLE
28009: LD_INT 0
28011: PPUSH
28012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28013: LD_ADDR_VAR 0 2
28017: PUSH
28018: LD_INT 22
28020: PUSH
28021: LD_OWVAR 2
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: LD_INT 30
28035: PUSH
28036: LD_INT 27
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 30
28045: PUSH
28046: LD_INT 26
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 30
28055: PUSH
28056: LD_INT 28
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PPUSH
28073: CALL_OW 69
28077: ST_TO_ADDR
// if not tmp then
28078: LD_VAR 0 2
28082: NOT
28083: IFFALSE 28087
// exit ;
28085: GO 28116
// for i in tmp do
28087: LD_ADDR_VAR 0 1
28091: PUSH
28092: LD_VAR 0 2
28096: PUSH
28097: FOR_IN
28098: IFFALSE 28114
// SetLives ( i , 1 ) ;
28100: LD_VAR 0 1
28104: PPUSH
28105: LD_INT 1
28107: PPUSH
28108: CALL_OW 234
28112: GO 28097
28114: POP
28115: POP
// end ;
28116: PPOPN 2
28118: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28119: LD_EXP 70
28123: PUSH
28124: LD_EXP 119
28128: AND
28129: IFFALSE 28403
28131: GO 28133
28133: DISABLE
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
28138: PPUSH
// begin i := rand ( 1 , 7 ) ;
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: LD_INT 1
28146: PPUSH
28147: LD_INT 7
28149: PPUSH
28150: CALL_OW 12
28154: ST_TO_ADDR
// case i of 1 :
28155: LD_VAR 0 1
28159: PUSH
28160: LD_INT 1
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28178
28168: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28169: LD_STRING earthquake(getX(game), 0, 32)
28171: PPUSH
28172: CALL_OW 559
28176: GO 28403
28178: LD_INT 2
28180: DOUBLE
28181: EQUAL
28182: IFTRUE 28186
28184: GO 28200
28186: POP
// begin ToLua ( displayStucuk(); ) ;
28187: LD_STRING displayStucuk();
28189: PPUSH
28190: CALL_OW 559
// ResetFog ;
28194: CALL_OW 335
// end ; 3 :
28198: GO 28403
28200: LD_INT 3
28202: DOUBLE
28203: EQUAL
28204: IFTRUE 28208
28206: GO 28312
28208: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28209: LD_ADDR_VAR 0 2
28213: PUSH
28214: LD_INT 22
28216: PUSH
28217: LD_OWVAR 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 25
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PPUSH
28240: CALL_OW 69
28244: ST_TO_ADDR
// if not tmp then
28245: LD_VAR 0 2
28249: NOT
28250: IFFALSE 28254
// exit ;
28252: GO 28403
// un := tmp [ rand ( 1 , tmp ) ] ;
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_VAR 0 2
28263: PUSH
28264: LD_INT 1
28266: PPUSH
28267: LD_VAR 0 2
28271: PPUSH
28272: CALL_OW 12
28276: ARRAY
28277: ST_TO_ADDR
// if Crawls ( un ) then
28278: LD_VAR 0 3
28282: PPUSH
28283: CALL_OW 318
28287: IFFALSE 28298
// ComWalk ( un ) ;
28289: LD_VAR 0 3
28293: PPUSH
28294: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28298: LD_VAR 0 3
28302: PPUSH
28303: LD_INT 8
28305: PPUSH
28306: CALL_OW 336
// end ; 4 :
28310: GO 28403
28312: LD_INT 4
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 28381
28320: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28321: LD_ADDR_VAR 0 2
28325: PUSH
28326: LD_INT 22
28328: PUSH
28329: LD_OWVAR 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 30
28340: PUSH
28341: LD_INT 29
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PPUSH
28352: CALL_OW 69
28356: ST_TO_ADDR
// if not tmp then
28357: LD_VAR 0 2
28361: NOT
28362: IFFALSE 28366
// exit ;
28364: GO 28403
// DestroyUnit ( tmp [ 1 ] ) ;
28366: LD_VAR 0 2
28370: PUSH
28371: LD_INT 1
28373: ARRAY
28374: PPUSH
28375: CALL_OW 65
// end ; 5 .. 7 :
28379: GO 28403
28381: LD_INT 5
28383: DOUBLE
28384: GREATEREQUAL
28385: IFFALSE 28393
28387: LD_INT 7
28389: DOUBLE
28390: LESSEQUAL
28391: IFTRUE 28395
28393: GO 28402
28395: POP
// StreamSibBomb ; end ;
28396: CALL 24653 0 0
28400: GO 28403
28402: POP
// end ;
28403: PPOPN 3
28405: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28406: LD_EXP 70
28410: PUSH
28411: LD_EXP 120
28415: AND
28416: IFFALSE 28572
28418: GO 28420
28420: DISABLE
28421: LD_INT 0
28423: PPUSH
28424: PPUSH
28425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28426: LD_ADDR_VAR 0 2
28430: PUSH
28431: LD_INT 81
28433: PUSH
28434: LD_OWVAR 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 21
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 21
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PPUSH
28475: CALL_OW 69
28479: ST_TO_ADDR
// if not tmp then
28480: LD_VAR 0 2
28484: NOT
28485: IFFALSE 28489
// exit ;
28487: GO 28572
// p := 0 ;
28489: LD_ADDR_VAR 0 3
28493: PUSH
28494: LD_INT 0
28496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28497: LD_INT 35
28499: PPUSH
28500: CALL_OW 67
// p := p + 1 ;
28504: LD_ADDR_VAR 0 3
28508: PUSH
28509: LD_VAR 0 3
28513: PUSH
28514: LD_INT 1
28516: PLUS
28517: ST_TO_ADDR
// for i in tmp do
28518: LD_ADDR_VAR 0 1
28522: PUSH
28523: LD_VAR 0 2
28527: PUSH
28528: FOR_IN
28529: IFFALSE 28560
// if GetLives ( i ) < 1000 then
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 256
28540: PUSH
28541: LD_INT 1000
28543: LESS
28544: IFFALSE 28558
// SetLives ( i , 1000 ) ;
28546: LD_VAR 0 1
28550: PPUSH
28551: LD_INT 1000
28553: PPUSH
28554: CALL_OW 234
28558: GO 28528
28560: POP
28561: POP
// until p > 20 ;
28562: LD_VAR 0 3
28566: PUSH
28567: LD_INT 20
28569: GREATER
28570: IFFALSE 28497
// end ;
28572: PPOPN 3
28574: END
// every 0 0$1 trigger StreamModeActive and sTime do
28575: LD_EXP 70
28579: PUSH
28580: LD_EXP 121
28584: AND
28585: IFFALSE 28620
28587: GO 28589
28589: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28590: LD_INT 28
28592: PPUSH
28593: LD_OWVAR 2
28597: PPUSH
28598: LD_INT 2
28600: PPUSH
28601: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28605: LD_INT 30
28607: PPUSH
28608: LD_OWVAR 2
28612: PPUSH
28613: LD_INT 2
28615: PPUSH
28616: CALL_OW 322
// end ;
28620: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28621: LD_EXP 70
28625: PUSH
28626: LD_EXP 122
28630: AND
28631: IFFALSE 28752
28633: GO 28635
28635: DISABLE
28636: LD_INT 0
28638: PPUSH
28639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28640: LD_ADDR_VAR 0 2
28644: PUSH
28645: LD_INT 22
28647: PUSH
28648: LD_OWVAR 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 21
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 3
28669: PUSH
28670: LD_INT 23
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: ST_TO_ADDR
// if not tmp then
28694: LD_VAR 0 2
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28752
// for i in tmp do
28703: LD_ADDR_VAR 0 1
28707: PUSH
28708: LD_VAR 0 2
28712: PUSH
28713: FOR_IN
28714: IFFALSE 28750
// begin if Crawls ( i ) then
28716: LD_VAR 0 1
28720: PPUSH
28721: CALL_OW 318
28725: IFFALSE 28736
// ComWalk ( i ) ;
28727: LD_VAR 0 1
28731: PPUSH
28732: CALL_OW 138
// SetClass ( i , 2 ) ;
28736: LD_VAR 0 1
28740: PPUSH
28741: LD_INT 2
28743: PPUSH
28744: CALL_OW 336
// end ;
28748: GO 28713
28750: POP
28751: POP
// end ;
28752: PPOPN 2
28754: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28755: LD_EXP 70
28759: PUSH
28760: LD_EXP 123
28764: AND
28765: IFFALSE 29046
28767: GO 28769
28769: DISABLE
28770: LD_INT 0
28772: PPUSH
28773: PPUSH
28774: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28775: LD_OWVAR 2
28779: PPUSH
28780: LD_INT 9
28782: PPUSH
28783: LD_INT 1
28785: PPUSH
28786: LD_INT 1
28788: PPUSH
28789: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28793: LD_INT 9
28795: PPUSH
28796: LD_OWVAR 2
28800: PPUSH
28801: CALL_OW 343
// uc_side := 9 ;
28805: LD_ADDR_OWVAR 20
28809: PUSH
28810: LD_INT 9
28812: ST_TO_ADDR
// uc_nation := 2 ;
28813: LD_ADDR_OWVAR 21
28817: PUSH
28818: LD_INT 2
28820: ST_TO_ADDR
// hc_name := Dark Warrior ;
28821: LD_ADDR_OWVAR 26
28825: PUSH
28826: LD_STRING Dark Warrior
28828: ST_TO_ADDR
// hc_gallery :=  ;
28829: LD_ADDR_OWVAR 33
28833: PUSH
28834: LD_STRING 
28836: ST_TO_ADDR
// hc_noskilllimit := true ;
28837: LD_ADDR_OWVAR 76
28841: PUSH
28842: LD_INT 1
28844: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28845: LD_ADDR_OWVAR 31
28849: PUSH
28850: LD_INT 30
28852: PUSH
28853: LD_INT 30
28855: PUSH
28856: LD_INT 30
28858: PUSH
28859: LD_INT 30
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: ST_TO_ADDR
// un := CreateHuman ;
28868: LD_ADDR_VAR 0 3
28872: PUSH
28873: CALL_OW 44
28877: ST_TO_ADDR
// hc_noskilllimit := false ;
28878: LD_ADDR_OWVAR 76
28882: PUSH
28883: LD_INT 0
28885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28886: LD_VAR 0 3
28890: PPUSH
28891: LD_INT 1
28893: PPUSH
28894: CALL_OW 51
// p := 0 ;
28898: LD_ADDR_VAR 0 2
28902: PUSH
28903: LD_INT 0
28905: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28906: LD_INT 35
28908: PPUSH
28909: CALL_OW 67
// p := p + 1 ;
28913: LD_ADDR_VAR 0 2
28917: PUSH
28918: LD_VAR 0 2
28922: PUSH
28923: LD_INT 1
28925: PLUS
28926: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28927: LD_VAR 0 3
28931: PPUSH
28932: CALL_OW 256
28936: PUSH
28937: LD_INT 1000
28939: LESS
28940: IFFALSE 28954
// SetLives ( un , 1000 ) ;
28942: LD_VAR 0 3
28946: PPUSH
28947: LD_INT 1000
28949: PPUSH
28950: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28954: LD_VAR 0 3
28958: PPUSH
28959: LD_INT 81
28961: PUSH
28962: LD_OWVAR 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 91
28973: PUSH
28974: LD_VAR 0 3
28978: PUSH
28979: LD_INT 30
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: PPUSH
28996: LD_VAR 0 3
29000: PPUSH
29001: CALL_OW 74
29005: PPUSH
29006: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29010: LD_VAR 0 2
29014: PUSH
29015: LD_INT 60
29017: GREATER
29018: PUSH
29019: LD_VAR 0 3
29023: PPUSH
29024: CALL_OW 301
29028: OR
29029: IFFALSE 28906
// if un then
29031: LD_VAR 0 3
29035: IFFALSE 29046
// RemoveUnit ( un ) ;
29037: LD_VAR 0 3
29041: PPUSH
29042: CALL_OW 64
// end ;
29046: PPOPN 3
29048: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29049: LD_INT 0
29051: PPUSH
// case cmd of 301 :
29052: LD_VAR 0 1
29056: PUSH
29057: LD_INT 301
29059: DOUBLE
29060: EQUAL
29061: IFTRUE 29065
29063: GO 29097
29065: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29066: LD_VAR 0 6
29070: PPUSH
29071: LD_VAR 0 7
29075: PPUSH
29076: LD_VAR 0 8
29080: PPUSH
29081: LD_VAR 0 4
29085: PPUSH
29086: LD_VAR 0 5
29090: PPUSH
29091: CALL 30298 0 5
29095: GO 29218
29097: LD_INT 302
29099: DOUBLE
29100: EQUAL
29101: IFTRUE 29105
29103: GO 29142
29105: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29106: LD_VAR 0 6
29110: PPUSH
29111: LD_VAR 0 7
29115: PPUSH
29116: LD_VAR 0 8
29120: PPUSH
29121: LD_VAR 0 9
29125: PPUSH
29126: LD_VAR 0 4
29130: PPUSH
29131: LD_VAR 0 5
29135: PPUSH
29136: CALL 30389 0 6
29140: GO 29218
29142: LD_INT 303
29144: DOUBLE
29145: EQUAL
29146: IFTRUE 29150
29148: GO 29187
29150: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29151: LD_VAR 0 6
29155: PPUSH
29156: LD_VAR 0 7
29160: PPUSH
29161: LD_VAR 0 8
29165: PPUSH
29166: LD_VAR 0 9
29170: PPUSH
29171: LD_VAR 0 4
29175: PPUSH
29176: LD_VAR 0 5
29180: PPUSH
29181: CALL 29223 0 6
29185: GO 29218
29187: LD_INT 304
29189: DOUBLE
29190: EQUAL
29191: IFTRUE 29195
29193: GO 29217
29195: POP
// hHackTeleport ( unit , x , y ) ; end ;
29196: LD_VAR 0 2
29200: PPUSH
29201: LD_VAR 0 4
29205: PPUSH
29206: LD_VAR 0 5
29210: PPUSH
29211: CALL 30982 0 3
29215: GO 29218
29217: POP
// end ;
29218: LD_VAR 0 12
29222: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29223: LD_INT 0
29225: PPUSH
29226: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29227: LD_VAR 0 1
29231: PUSH
29232: LD_INT 1
29234: LESS
29235: PUSH
29236: LD_VAR 0 1
29240: PUSH
29241: LD_INT 3
29243: GREATER
29244: OR
29245: PUSH
29246: LD_VAR 0 5
29250: PPUSH
29251: LD_VAR 0 6
29255: PPUSH
29256: CALL_OW 428
29260: OR
29261: IFFALSE 29265
// exit ;
29263: GO 29985
// uc_side := your_side ;
29265: LD_ADDR_OWVAR 20
29269: PUSH
29270: LD_OWVAR 2
29274: ST_TO_ADDR
// uc_nation := nation ;
29275: LD_ADDR_OWVAR 21
29279: PUSH
29280: LD_VAR 0 1
29284: ST_TO_ADDR
// bc_level = 1 ;
29285: LD_ADDR_OWVAR 43
29289: PUSH
29290: LD_INT 1
29292: ST_TO_ADDR
// case btype of 1 :
29293: LD_VAR 0 2
29297: PUSH
29298: LD_INT 1
29300: DOUBLE
29301: EQUAL
29302: IFTRUE 29306
29304: GO 29317
29306: POP
// bc_type := b_depot ; 2 :
29307: LD_ADDR_OWVAR 42
29311: PUSH
29312: LD_INT 0
29314: ST_TO_ADDR
29315: GO 29929
29317: LD_INT 2
29319: DOUBLE
29320: EQUAL
29321: IFTRUE 29325
29323: GO 29336
29325: POP
// bc_type := b_warehouse ; 3 :
29326: LD_ADDR_OWVAR 42
29330: PUSH
29331: LD_INT 1
29333: ST_TO_ADDR
29334: GO 29929
29336: LD_INT 3
29338: DOUBLE
29339: EQUAL
29340: IFTRUE 29344
29342: GO 29355
29344: POP
// bc_type := b_lab ; 4 .. 9 :
29345: LD_ADDR_OWVAR 42
29349: PUSH
29350: LD_INT 6
29352: ST_TO_ADDR
29353: GO 29929
29355: LD_INT 4
29357: DOUBLE
29358: GREATEREQUAL
29359: IFFALSE 29367
29361: LD_INT 9
29363: DOUBLE
29364: LESSEQUAL
29365: IFTRUE 29369
29367: GO 29421
29369: POP
// begin bc_type := b_lab_half ;
29370: LD_ADDR_OWVAR 42
29374: PUSH
29375: LD_INT 7
29377: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29378: LD_ADDR_OWVAR 44
29382: PUSH
29383: LD_INT 10
29385: PUSH
29386: LD_INT 11
29388: PUSH
29389: LD_INT 12
29391: PUSH
29392: LD_INT 15
29394: PUSH
29395: LD_INT 14
29397: PUSH
29398: LD_INT 13
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: PUSH
29409: LD_VAR 0 2
29413: PUSH
29414: LD_INT 3
29416: MINUS
29417: ARRAY
29418: ST_TO_ADDR
// end ; 10 .. 13 :
29419: GO 29929
29421: LD_INT 10
29423: DOUBLE
29424: GREATEREQUAL
29425: IFFALSE 29433
29427: LD_INT 13
29429: DOUBLE
29430: LESSEQUAL
29431: IFTRUE 29435
29433: GO 29512
29435: POP
// begin bc_type := b_lab_full ;
29436: LD_ADDR_OWVAR 42
29440: PUSH
29441: LD_INT 8
29443: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29444: LD_ADDR_OWVAR 44
29448: PUSH
29449: LD_INT 10
29451: PUSH
29452: LD_INT 12
29454: PUSH
29455: LD_INT 14
29457: PUSH
29458: LD_INT 13
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: PUSH
29467: LD_VAR 0 2
29471: PUSH
29472: LD_INT 9
29474: MINUS
29475: ARRAY
29476: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29477: LD_ADDR_OWVAR 45
29481: PUSH
29482: LD_INT 11
29484: PUSH
29485: LD_INT 15
29487: PUSH
29488: LD_INT 12
29490: PUSH
29491: LD_INT 15
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: PUSH
29500: LD_VAR 0 2
29504: PUSH
29505: LD_INT 9
29507: MINUS
29508: ARRAY
29509: ST_TO_ADDR
// end ; 14 :
29510: GO 29929
29512: LD_INT 14
29514: DOUBLE
29515: EQUAL
29516: IFTRUE 29520
29518: GO 29531
29520: POP
// bc_type := b_workshop ; 15 :
29521: LD_ADDR_OWVAR 42
29525: PUSH
29526: LD_INT 2
29528: ST_TO_ADDR
29529: GO 29929
29531: LD_INT 15
29533: DOUBLE
29534: EQUAL
29535: IFTRUE 29539
29537: GO 29550
29539: POP
// bc_type := b_factory ; 16 :
29540: LD_ADDR_OWVAR 42
29544: PUSH
29545: LD_INT 3
29547: ST_TO_ADDR
29548: GO 29929
29550: LD_INT 16
29552: DOUBLE
29553: EQUAL
29554: IFTRUE 29558
29556: GO 29569
29558: POP
// bc_type := b_ext_gun ; 17 :
29559: LD_ADDR_OWVAR 42
29563: PUSH
29564: LD_INT 17
29566: ST_TO_ADDR
29567: GO 29929
29569: LD_INT 17
29571: DOUBLE
29572: EQUAL
29573: IFTRUE 29577
29575: GO 29605
29577: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29578: LD_ADDR_OWVAR 42
29582: PUSH
29583: LD_INT 19
29585: PUSH
29586: LD_INT 23
29588: PUSH
29589: LD_INT 19
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: PUSH
29597: LD_VAR 0 1
29601: ARRAY
29602: ST_TO_ADDR
29603: GO 29929
29605: LD_INT 18
29607: DOUBLE
29608: EQUAL
29609: IFTRUE 29613
29611: GO 29624
29613: POP
// bc_type := b_ext_radar ; 19 :
29614: LD_ADDR_OWVAR 42
29618: PUSH
29619: LD_INT 20
29621: ST_TO_ADDR
29622: GO 29929
29624: LD_INT 19
29626: DOUBLE
29627: EQUAL
29628: IFTRUE 29632
29630: GO 29643
29632: POP
// bc_type := b_ext_radio ; 20 :
29633: LD_ADDR_OWVAR 42
29637: PUSH
29638: LD_INT 22
29640: ST_TO_ADDR
29641: GO 29929
29643: LD_INT 20
29645: DOUBLE
29646: EQUAL
29647: IFTRUE 29651
29649: GO 29662
29651: POP
// bc_type := b_ext_siberium ; 21 :
29652: LD_ADDR_OWVAR 42
29656: PUSH
29657: LD_INT 21
29659: ST_TO_ADDR
29660: GO 29929
29662: LD_INT 21
29664: DOUBLE
29665: EQUAL
29666: IFTRUE 29670
29668: GO 29681
29670: POP
// bc_type := b_ext_computer ; 22 :
29671: LD_ADDR_OWVAR 42
29675: PUSH
29676: LD_INT 24
29678: ST_TO_ADDR
29679: GO 29929
29681: LD_INT 22
29683: DOUBLE
29684: EQUAL
29685: IFTRUE 29689
29687: GO 29700
29689: POP
// bc_type := b_ext_track ; 23 :
29690: LD_ADDR_OWVAR 42
29694: PUSH
29695: LD_INT 16
29697: ST_TO_ADDR
29698: GO 29929
29700: LD_INT 23
29702: DOUBLE
29703: EQUAL
29704: IFTRUE 29708
29706: GO 29719
29708: POP
// bc_type := b_ext_laser ; 24 :
29709: LD_ADDR_OWVAR 42
29713: PUSH
29714: LD_INT 25
29716: ST_TO_ADDR
29717: GO 29929
29719: LD_INT 24
29721: DOUBLE
29722: EQUAL
29723: IFTRUE 29727
29725: GO 29738
29727: POP
// bc_type := b_control_tower ; 25 :
29728: LD_ADDR_OWVAR 42
29732: PUSH
29733: LD_INT 36
29735: ST_TO_ADDR
29736: GO 29929
29738: LD_INT 25
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 29757
29746: POP
// bc_type := b_breastwork ; 26 :
29747: LD_ADDR_OWVAR 42
29751: PUSH
29752: LD_INT 31
29754: ST_TO_ADDR
29755: GO 29929
29757: LD_INT 26
29759: DOUBLE
29760: EQUAL
29761: IFTRUE 29765
29763: GO 29776
29765: POP
// bc_type := b_bunker ; 27 :
29766: LD_ADDR_OWVAR 42
29770: PUSH
29771: LD_INT 32
29773: ST_TO_ADDR
29774: GO 29929
29776: LD_INT 27
29778: DOUBLE
29779: EQUAL
29780: IFTRUE 29784
29782: GO 29795
29784: POP
// bc_type := b_turret ; 28 :
29785: LD_ADDR_OWVAR 42
29789: PUSH
29790: LD_INT 33
29792: ST_TO_ADDR
29793: GO 29929
29795: LD_INT 28
29797: DOUBLE
29798: EQUAL
29799: IFTRUE 29803
29801: GO 29814
29803: POP
// bc_type := b_armoury ; 29 :
29804: LD_ADDR_OWVAR 42
29808: PUSH
29809: LD_INT 4
29811: ST_TO_ADDR
29812: GO 29929
29814: LD_INT 29
29816: DOUBLE
29817: EQUAL
29818: IFTRUE 29822
29820: GO 29833
29822: POP
// bc_type := b_barracks ; 30 :
29823: LD_ADDR_OWVAR 42
29827: PUSH
29828: LD_INT 5
29830: ST_TO_ADDR
29831: GO 29929
29833: LD_INT 30
29835: DOUBLE
29836: EQUAL
29837: IFTRUE 29841
29839: GO 29852
29841: POP
// bc_type := b_solar_power ; 31 :
29842: LD_ADDR_OWVAR 42
29846: PUSH
29847: LD_INT 27
29849: ST_TO_ADDR
29850: GO 29929
29852: LD_INT 31
29854: DOUBLE
29855: EQUAL
29856: IFTRUE 29860
29858: GO 29871
29860: POP
// bc_type := b_oil_power ; 32 :
29861: LD_ADDR_OWVAR 42
29865: PUSH
29866: LD_INT 26
29868: ST_TO_ADDR
29869: GO 29929
29871: LD_INT 32
29873: DOUBLE
29874: EQUAL
29875: IFTRUE 29879
29877: GO 29890
29879: POP
// bc_type := b_siberite_power ; 33 :
29880: LD_ADDR_OWVAR 42
29884: PUSH
29885: LD_INT 28
29887: ST_TO_ADDR
29888: GO 29929
29890: LD_INT 33
29892: DOUBLE
29893: EQUAL
29894: IFTRUE 29898
29896: GO 29909
29898: POP
// bc_type := b_oil_mine ; 34 :
29899: LD_ADDR_OWVAR 42
29903: PUSH
29904: LD_INT 29
29906: ST_TO_ADDR
29907: GO 29929
29909: LD_INT 34
29911: DOUBLE
29912: EQUAL
29913: IFTRUE 29917
29915: GO 29928
29917: POP
// bc_type := b_siberite_mine ; end ;
29918: LD_ADDR_OWVAR 42
29922: PUSH
29923: LD_INT 30
29925: ST_TO_ADDR
29926: GO 29929
29928: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29929: LD_ADDR_VAR 0 8
29933: PUSH
29934: LD_VAR 0 5
29938: PPUSH
29939: LD_VAR 0 6
29943: PPUSH
29944: LD_VAR 0 3
29948: PPUSH
29949: CALL_OW 47
29953: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29954: LD_OWVAR 42
29958: PUSH
29959: LD_INT 32
29961: PUSH
29962: LD_INT 33
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: IN
29969: IFFALSE 29985
// PlaceWeaponTurret ( b , weapon ) ;
29971: LD_VAR 0 8
29975: PPUSH
29976: LD_VAR 0 4
29980: PPUSH
29981: CALL_OW 431
// end ;
29985: LD_VAR 0 7
29989: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29990: LD_INT 0
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29996: LD_ADDR_VAR 0 4
30000: PUSH
30001: LD_INT 22
30003: PUSH
30004: LD_OWVAR 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: LD_INT 30
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 30
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PPUSH
30045: CALL_OW 69
30049: ST_TO_ADDR
// if not tmp then
30050: LD_VAR 0 4
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 30118
// for i in tmp do
30059: LD_ADDR_VAR 0 2
30063: PUSH
30064: LD_VAR 0 4
30068: PUSH
30069: FOR_IN
30070: IFFALSE 30116
// for j = 1 to 3 do
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: DOUBLE
30078: LD_INT 1
30080: DEC
30081: ST_TO_ADDR
30082: LD_INT 3
30084: PUSH
30085: FOR_TO
30086: IFFALSE 30112
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30088: LD_VAR 0 2
30092: PPUSH
30093: CALL_OW 274
30097: PPUSH
30098: LD_VAR 0 3
30102: PPUSH
30103: LD_INT 99999
30105: PPUSH
30106: CALL_OW 277
30110: GO 30085
30112: POP
30113: POP
30114: GO 30069
30116: POP
30117: POP
// end ;
30118: LD_VAR 0 1
30122: RET
// export function hHackSetLevel10 ; var i , j ; begin
30123: LD_INT 0
30125: PPUSH
30126: PPUSH
30127: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30128: LD_ADDR_VAR 0 2
30132: PUSH
30133: LD_INT 21
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PPUSH
30143: CALL_OW 69
30147: PUSH
30148: FOR_IN
30149: IFFALSE 30201
// if IsSelected ( i ) then
30151: LD_VAR 0 2
30155: PPUSH
30156: CALL_OW 306
30160: IFFALSE 30199
// begin for j := 1 to 4 do
30162: LD_ADDR_VAR 0 3
30166: PUSH
30167: DOUBLE
30168: LD_INT 1
30170: DEC
30171: ST_TO_ADDR
30172: LD_INT 4
30174: PUSH
30175: FOR_TO
30176: IFFALSE 30197
// SetSkill ( i , j , 10 ) ;
30178: LD_VAR 0 2
30182: PPUSH
30183: LD_VAR 0 3
30187: PPUSH
30188: LD_INT 10
30190: PPUSH
30191: CALL_OW 237
30195: GO 30175
30197: POP
30198: POP
// end ;
30199: GO 30148
30201: POP
30202: POP
// end ;
30203: LD_VAR 0 1
30207: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30208: LD_INT 0
30210: PPUSH
30211: PPUSH
30212: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30213: LD_ADDR_VAR 0 2
30217: PUSH
30218: LD_INT 22
30220: PUSH
30221: LD_OWVAR 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 21
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PPUSH
30244: CALL_OW 69
30248: PUSH
30249: FOR_IN
30250: IFFALSE 30291
// begin for j := 1 to 4 do
30252: LD_ADDR_VAR 0 3
30256: PUSH
30257: DOUBLE
30258: LD_INT 1
30260: DEC
30261: ST_TO_ADDR
30262: LD_INT 4
30264: PUSH
30265: FOR_TO
30266: IFFALSE 30287
// SetSkill ( i , j , 10 ) ;
30268: LD_VAR 0 2
30272: PPUSH
30273: LD_VAR 0 3
30277: PPUSH
30278: LD_INT 10
30280: PPUSH
30281: CALL_OW 237
30285: GO 30265
30287: POP
30288: POP
// end ;
30289: GO 30249
30291: POP
30292: POP
// end ;
30293: LD_VAR 0 1
30297: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30298: LD_INT 0
30300: PPUSH
// uc_side := your_side ;
30301: LD_ADDR_OWVAR 20
30305: PUSH
30306: LD_OWVAR 2
30310: ST_TO_ADDR
// uc_nation := nation ;
30311: LD_ADDR_OWVAR 21
30315: PUSH
30316: LD_VAR 0 1
30320: ST_TO_ADDR
// InitHc ;
30321: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30325: LD_INT 0
30327: PPUSH
30328: LD_VAR 0 2
30332: PPUSH
30333: LD_VAR 0 3
30337: PPUSH
30338: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30342: LD_VAR 0 4
30346: PPUSH
30347: LD_VAR 0 5
30351: PPUSH
30352: CALL_OW 428
30356: PUSH
30357: LD_INT 0
30359: EQUAL
30360: IFFALSE 30384
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30362: CALL_OW 44
30366: PPUSH
30367: LD_VAR 0 4
30371: PPUSH
30372: LD_VAR 0 5
30376: PPUSH
30377: LD_INT 1
30379: PPUSH
30380: CALL_OW 48
// end ;
30384: LD_VAR 0 6
30388: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30389: LD_INT 0
30391: PPUSH
30392: PPUSH
// uc_side := your_side ;
30393: LD_ADDR_OWVAR 20
30397: PUSH
30398: LD_OWVAR 2
30402: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30403: LD_VAR 0 1
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: LD_INT 3
30416: PUSH
30417: LD_INT 4
30419: PUSH
30420: LD_INT 5
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: IN
30430: IFFALSE 30442
// uc_nation := nation_american else
30432: LD_ADDR_OWVAR 21
30436: PUSH
30437: LD_INT 1
30439: ST_TO_ADDR
30440: GO 30485
// if chassis in [ 11 , 12 , 13 , 14 ] then
30442: LD_VAR 0 1
30446: PUSH
30447: LD_INT 11
30449: PUSH
30450: LD_INT 12
30452: PUSH
30453: LD_INT 13
30455: PUSH
30456: LD_INT 14
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: IN
30465: IFFALSE 30477
// uc_nation := nation_arabian else
30467: LD_ADDR_OWVAR 21
30471: PUSH
30472: LD_INT 2
30474: ST_TO_ADDR
30475: GO 30485
// uc_nation := nation_russian ;
30477: LD_ADDR_OWVAR 21
30481: PUSH
30482: LD_INT 3
30484: ST_TO_ADDR
// vc_chassis := chassis ;
30485: LD_ADDR_OWVAR 37
30489: PUSH
30490: LD_VAR 0 1
30494: ST_TO_ADDR
// vc_engine := engine ;
30495: LD_ADDR_OWVAR 39
30499: PUSH
30500: LD_VAR 0 2
30504: ST_TO_ADDR
// vc_control := control ;
30505: LD_ADDR_OWVAR 38
30509: PUSH
30510: LD_VAR 0 3
30514: ST_TO_ADDR
// vc_weapon := weapon ;
30515: LD_ADDR_OWVAR 40
30519: PUSH
30520: LD_VAR 0 4
30524: ST_TO_ADDR
// un := CreateVehicle ;
30525: LD_ADDR_VAR 0 8
30529: PUSH
30530: CALL_OW 45
30534: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30535: LD_VAR 0 8
30539: PPUSH
30540: LD_INT 0
30542: PPUSH
30543: LD_INT 5
30545: PPUSH
30546: CALL_OW 12
30550: PPUSH
30551: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30555: LD_VAR 0 8
30559: PPUSH
30560: LD_VAR 0 5
30564: PPUSH
30565: LD_VAR 0 6
30569: PPUSH
30570: LD_INT 1
30572: PPUSH
30573: CALL_OW 48
// end ;
30577: LD_VAR 0 7
30581: RET
// export hInvincible ; every 1 do
30582: GO 30584
30584: DISABLE
// hInvincible := [ ] ;
30585: LD_ADDR_EXP 124
30589: PUSH
30590: EMPTY
30591: ST_TO_ADDR
30592: END
// every 10 do var i ;
30593: GO 30595
30595: DISABLE
30596: LD_INT 0
30598: PPUSH
// begin enable ;
30599: ENABLE
// if not hInvincible then
30600: LD_EXP 124
30604: NOT
30605: IFFALSE 30609
// exit ;
30607: GO 30653
// for i in hInvincible do
30609: LD_ADDR_VAR 0 1
30613: PUSH
30614: LD_EXP 124
30618: PUSH
30619: FOR_IN
30620: IFFALSE 30651
// if GetLives ( i ) < 1000 then
30622: LD_VAR 0 1
30626: PPUSH
30627: CALL_OW 256
30631: PUSH
30632: LD_INT 1000
30634: LESS
30635: IFFALSE 30649
// SetLives ( i , 1000 ) ;
30637: LD_VAR 0 1
30641: PPUSH
30642: LD_INT 1000
30644: PPUSH
30645: CALL_OW 234
30649: GO 30619
30651: POP
30652: POP
// end ;
30653: PPOPN 1
30655: END
// export function hHackInvincible ; var i ; begin
30656: LD_INT 0
30658: PPUSH
30659: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30660: LD_ADDR_VAR 0 2
30664: PUSH
30665: LD_INT 2
30667: PUSH
30668: LD_INT 21
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 21
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: PPUSH
30693: CALL_OW 69
30697: PUSH
30698: FOR_IN
30699: IFFALSE 30760
// if IsSelected ( i ) then
30701: LD_VAR 0 2
30705: PPUSH
30706: CALL_OW 306
30710: IFFALSE 30758
// begin if i in hInvincible then
30712: LD_VAR 0 2
30716: PUSH
30717: LD_EXP 124
30721: IN
30722: IFFALSE 30742
// hInvincible := hInvincible diff i else
30724: LD_ADDR_EXP 124
30728: PUSH
30729: LD_EXP 124
30733: PUSH
30734: LD_VAR 0 2
30738: DIFF
30739: ST_TO_ADDR
30740: GO 30758
// hInvincible := hInvincible union i ;
30742: LD_ADDR_EXP 124
30746: PUSH
30747: LD_EXP 124
30751: PUSH
30752: LD_VAR 0 2
30756: UNION
30757: ST_TO_ADDR
// end ;
30758: GO 30698
30760: POP
30761: POP
// end ;
30762: LD_VAR 0 1
30766: RET
// export function hHackInvisible ; var i , j ; begin
30767: LD_INT 0
30769: PPUSH
30770: PPUSH
30771: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30772: LD_ADDR_VAR 0 2
30776: PUSH
30777: LD_INT 21
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PPUSH
30787: CALL_OW 69
30791: PUSH
30792: FOR_IN
30793: IFFALSE 30817
// if IsSelected ( i ) then
30795: LD_VAR 0 2
30799: PPUSH
30800: CALL_OW 306
30804: IFFALSE 30815
// ComForceInvisible ( i ) ;
30806: LD_VAR 0 2
30810: PPUSH
30811: CALL_OW 496
30815: GO 30792
30817: POP
30818: POP
// end ;
30819: LD_VAR 0 1
30823: RET
// export function hHackChangeYourSide ; begin
30824: LD_INT 0
30826: PPUSH
// if your_side = 8 then
30827: LD_OWVAR 2
30831: PUSH
30832: LD_INT 8
30834: EQUAL
30835: IFFALSE 30847
// your_side := 0 else
30837: LD_ADDR_OWVAR 2
30841: PUSH
30842: LD_INT 0
30844: ST_TO_ADDR
30845: GO 30861
// your_side := your_side + 1 ;
30847: LD_ADDR_OWVAR 2
30851: PUSH
30852: LD_OWVAR 2
30856: PUSH
30857: LD_INT 1
30859: PLUS
30860: ST_TO_ADDR
// end ;
30861: LD_VAR 0 1
30865: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30866: LD_INT 0
30868: PPUSH
30869: PPUSH
30870: PPUSH
// for i in all_units do
30871: LD_ADDR_VAR 0 2
30875: PUSH
30876: LD_OWVAR 3
30880: PUSH
30881: FOR_IN
30882: IFFALSE 30960
// if IsSelected ( i ) then
30884: LD_VAR 0 2
30888: PPUSH
30889: CALL_OW 306
30893: IFFALSE 30958
// begin j := GetSide ( i ) ;
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: LD_VAR 0 2
30904: PPUSH
30905: CALL_OW 255
30909: ST_TO_ADDR
// if j = 8 then
30910: LD_VAR 0 3
30914: PUSH
30915: LD_INT 8
30917: EQUAL
30918: IFFALSE 30930
// j := 0 else
30920: LD_ADDR_VAR 0 3
30924: PUSH
30925: LD_INT 0
30927: ST_TO_ADDR
30928: GO 30944
// j := j + 1 ;
30930: LD_ADDR_VAR 0 3
30934: PUSH
30935: LD_VAR 0 3
30939: PUSH
30940: LD_INT 1
30942: PLUS
30943: ST_TO_ADDR
// SetSide ( i , j ) ;
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 3
30953: PPUSH
30954: CALL_OW 235
// end ;
30958: GO 30881
30960: POP
30961: POP
// end ;
30962: LD_VAR 0 1
30966: RET
// export function hHackFog ; begin
30967: LD_INT 0
30969: PPUSH
// FogOff ( true ) ;
30970: LD_INT 1
30972: PPUSH
30973: CALL_OW 344
// end ;
30977: LD_VAR 0 1
30981: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30982: LD_INT 0
30984: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30985: LD_VAR 0 1
30989: PPUSH
30990: LD_VAR 0 2
30994: PPUSH
30995: LD_VAR 0 3
30999: PPUSH
31000: LD_INT 1
31002: PPUSH
31003: LD_INT 1
31005: PPUSH
31006: CALL_OW 483
// CenterOnXY ( x , y ) ;
31010: LD_VAR 0 2
31014: PPUSH
31015: LD_VAR 0 3
31019: PPUSH
31020: CALL_OW 84
// end ; end_of_file end_of_file
31024: LD_VAR 0 4
31028: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31029: LD_INT 0
31031: PPUSH
31032: PPUSH
// if exist_mode then
31033: LD_VAR 0 2
31037: IFFALSE 31062
// unit := CreateCharacter ( prefix & ident ) else
31039: LD_ADDR_VAR 0 5
31043: PUSH
31044: LD_VAR 0 3
31048: PUSH
31049: LD_VAR 0 1
31053: STR
31054: PPUSH
31055: CALL_OW 34
31059: ST_TO_ADDR
31060: GO 31077
// unit := NewCharacter ( ident ) ;
31062: LD_ADDR_VAR 0 5
31066: PUSH
31067: LD_VAR 0 1
31071: PPUSH
31072: CALL_OW 25
31076: ST_TO_ADDR
// result := unit ;
31077: LD_ADDR_VAR 0 4
31081: PUSH
31082: LD_VAR 0 5
31086: ST_TO_ADDR
// end ;
31087: LD_VAR 0 4
31091: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31092: LD_INT 0
31094: PPUSH
31095: PPUSH
// if not side or not nation then
31096: LD_VAR 0 1
31100: NOT
31101: PUSH
31102: LD_VAR 0 2
31106: NOT
31107: OR
31108: IFFALSE 31112
// exit ;
31110: GO 31876
// case nation of nation_american :
31112: LD_VAR 0 2
31116: PUSH
31117: LD_INT 1
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31339
31125: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_INT 35
31133: PUSH
31134: LD_INT 45
31136: PUSH
31137: LD_INT 46
31139: PUSH
31140: LD_INT 47
31142: PUSH
31143: LD_INT 82
31145: PUSH
31146: LD_INT 83
31148: PUSH
31149: LD_INT 84
31151: PUSH
31152: LD_INT 85
31154: PUSH
31155: LD_INT 86
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 6
31166: PUSH
31167: LD_INT 15
31169: PUSH
31170: LD_INT 16
31172: PUSH
31173: LD_INT 7
31175: PUSH
31176: LD_INT 12
31178: PUSH
31179: LD_INT 13
31181: PUSH
31182: LD_INT 10
31184: PUSH
31185: LD_INT 14
31187: PUSH
31188: LD_INT 20
31190: PUSH
31191: LD_INT 21
31193: PUSH
31194: LD_INT 22
31196: PUSH
31197: LD_INT 25
31199: PUSH
31200: LD_INT 32
31202: PUSH
31203: LD_INT 27
31205: PUSH
31206: LD_INT 36
31208: PUSH
31209: LD_INT 69
31211: PUSH
31212: LD_INT 39
31214: PUSH
31215: LD_INT 34
31217: PUSH
31218: LD_INT 40
31220: PUSH
31221: LD_INT 48
31223: PUSH
31224: LD_INT 49
31226: PUSH
31227: LD_INT 50
31229: PUSH
31230: LD_INT 51
31232: PUSH
31233: LD_INT 52
31235: PUSH
31236: LD_INT 53
31238: PUSH
31239: LD_INT 54
31241: PUSH
31242: LD_INT 55
31244: PUSH
31245: LD_INT 56
31247: PUSH
31248: LD_INT 57
31250: PUSH
31251: LD_INT 58
31253: PUSH
31254: LD_INT 59
31256: PUSH
31257: LD_INT 60
31259: PUSH
31260: LD_INT 61
31262: PUSH
31263: LD_INT 62
31265: PUSH
31266: LD_INT 80
31268: PUSH
31269: LD_INT 82
31271: PUSH
31272: LD_INT 83
31274: PUSH
31275: LD_INT 84
31277: PUSH
31278: LD_INT 85
31280: PUSH
31281: LD_INT 86
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: ST_TO_ADDR
31337: GO 31800
31339: LD_INT 2
31341: DOUBLE
31342: EQUAL
31343: IFTRUE 31347
31345: GO 31569
31347: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31348: LD_ADDR_VAR 0 4
31352: PUSH
31353: LD_INT 35
31355: PUSH
31356: LD_INT 45
31358: PUSH
31359: LD_INT 46
31361: PUSH
31362: LD_INT 47
31364: PUSH
31365: LD_INT 82
31367: PUSH
31368: LD_INT 83
31370: PUSH
31371: LD_INT 84
31373: PUSH
31374: LD_INT 85
31376: PUSH
31377: LD_INT 87
31379: PUSH
31380: LD_INT 70
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 11
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 4
31394: PUSH
31395: LD_INT 5
31397: PUSH
31398: LD_INT 6
31400: PUSH
31401: LD_INT 15
31403: PUSH
31404: LD_INT 18
31406: PUSH
31407: LD_INT 7
31409: PUSH
31410: LD_INT 17
31412: PUSH
31413: LD_INT 8
31415: PUSH
31416: LD_INT 20
31418: PUSH
31419: LD_INT 21
31421: PUSH
31422: LD_INT 22
31424: PUSH
31425: LD_INT 72
31427: PUSH
31428: LD_INT 26
31430: PUSH
31431: LD_INT 69
31433: PUSH
31434: LD_INT 39
31436: PUSH
31437: LD_INT 40
31439: PUSH
31440: LD_INT 41
31442: PUSH
31443: LD_INT 42
31445: PUSH
31446: LD_INT 43
31448: PUSH
31449: LD_INT 48
31451: PUSH
31452: LD_INT 49
31454: PUSH
31455: LD_INT 50
31457: PUSH
31458: LD_INT 51
31460: PUSH
31461: LD_INT 52
31463: PUSH
31464: LD_INT 53
31466: PUSH
31467: LD_INT 54
31469: PUSH
31470: LD_INT 55
31472: PUSH
31473: LD_INT 56
31475: PUSH
31476: LD_INT 60
31478: PUSH
31479: LD_INT 61
31481: PUSH
31482: LD_INT 62
31484: PUSH
31485: LD_INT 66
31487: PUSH
31488: LD_INT 67
31490: PUSH
31491: LD_INT 68
31493: PUSH
31494: LD_INT 81
31496: PUSH
31497: LD_INT 82
31499: PUSH
31500: LD_INT 83
31502: PUSH
31503: LD_INT 84
31505: PUSH
31506: LD_INT 85
31508: PUSH
31509: LD_INT 87
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: ST_TO_ADDR
31567: GO 31800
31569: LD_INT 3
31571: DOUBLE
31572: EQUAL
31573: IFTRUE 31577
31575: GO 31799
31577: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: LD_INT 46
31585: PUSH
31586: LD_INT 47
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: LD_INT 82
31597: PUSH
31598: LD_INT 83
31600: PUSH
31601: LD_INT 84
31603: PUSH
31604: LD_INT 85
31606: PUSH
31607: LD_INT 86
31609: PUSH
31610: LD_INT 11
31612: PUSH
31613: LD_INT 9
31615: PUSH
31616: LD_INT 20
31618: PUSH
31619: LD_INT 19
31621: PUSH
31622: LD_INT 21
31624: PUSH
31625: LD_INT 24
31627: PUSH
31628: LD_INT 22
31630: PUSH
31631: LD_INT 25
31633: PUSH
31634: LD_INT 28
31636: PUSH
31637: LD_INT 29
31639: PUSH
31640: LD_INT 30
31642: PUSH
31643: LD_INT 31
31645: PUSH
31646: LD_INT 37
31648: PUSH
31649: LD_INT 38
31651: PUSH
31652: LD_INT 32
31654: PUSH
31655: LD_INT 27
31657: PUSH
31658: LD_INT 33
31660: PUSH
31661: LD_INT 69
31663: PUSH
31664: LD_INT 39
31666: PUSH
31667: LD_INT 34
31669: PUSH
31670: LD_INT 40
31672: PUSH
31673: LD_INT 71
31675: PUSH
31676: LD_INT 23
31678: PUSH
31679: LD_INT 44
31681: PUSH
31682: LD_INT 48
31684: PUSH
31685: LD_INT 49
31687: PUSH
31688: LD_INT 50
31690: PUSH
31691: LD_INT 51
31693: PUSH
31694: LD_INT 52
31696: PUSH
31697: LD_INT 53
31699: PUSH
31700: LD_INT 54
31702: PUSH
31703: LD_INT 55
31705: PUSH
31706: LD_INT 56
31708: PUSH
31709: LD_INT 57
31711: PUSH
31712: LD_INT 58
31714: PUSH
31715: LD_INT 59
31717: PUSH
31718: LD_INT 63
31720: PUSH
31721: LD_INT 64
31723: PUSH
31724: LD_INT 65
31726: PUSH
31727: LD_INT 82
31729: PUSH
31730: LD_INT 83
31732: PUSH
31733: LD_INT 84
31735: PUSH
31736: LD_INT 85
31738: PUSH
31739: LD_INT 86
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: ST_TO_ADDR
31797: GO 31800
31799: POP
// if state > - 1 and state < 3 then
31800: LD_VAR 0 3
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: GREATER
31809: PUSH
31810: LD_VAR 0 3
31814: PUSH
31815: LD_INT 3
31817: LESS
31818: AND
31819: IFFALSE 31876
// for i in result do
31821: LD_ADDR_VAR 0 5
31825: PUSH
31826: LD_VAR 0 4
31830: PUSH
31831: FOR_IN
31832: IFFALSE 31874
// if GetTech ( i , side ) <> state then
31834: LD_VAR 0 5
31838: PPUSH
31839: LD_VAR 0 1
31843: PPUSH
31844: CALL_OW 321
31848: PUSH
31849: LD_VAR 0 3
31853: NONEQUAL
31854: IFFALSE 31872
// result := result diff i ;
31856: LD_ADDR_VAR 0 4
31860: PUSH
31861: LD_VAR 0 4
31865: PUSH
31866: LD_VAR 0 5
31870: DIFF
31871: ST_TO_ADDR
31872: GO 31831
31874: POP
31875: POP
// end ;
31876: LD_VAR 0 4
31880: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31881: LD_INT 0
31883: PPUSH
31884: PPUSH
31885: PPUSH
// result := true ;
31886: LD_ADDR_VAR 0 3
31890: PUSH
31891: LD_INT 1
31893: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31894: LD_ADDR_VAR 0 5
31898: PUSH
31899: LD_VAR 0 2
31903: PPUSH
31904: CALL_OW 480
31908: ST_TO_ADDR
// if not tmp then
31909: LD_VAR 0 5
31913: NOT
31914: IFFALSE 31918
// exit ;
31916: GO 31967
// for i in tmp do
31918: LD_ADDR_VAR 0 4
31922: PUSH
31923: LD_VAR 0 5
31927: PUSH
31928: FOR_IN
31929: IFFALSE 31965
// if GetTech ( i , side ) <> state_researched then
31931: LD_VAR 0 4
31935: PPUSH
31936: LD_VAR 0 1
31940: PPUSH
31941: CALL_OW 321
31945: PUSH
31946: LD_INT 2
31948: NONEQUAL
31949: IFFALSE 31963
// begin result := false ;
31951: LD_ADDR_VAR 0 3
31955: PUSH
31956: LD_INT 0
31958: ST_TO_ADDR
// exit ;
31959: POP
31960: POP
31961: GO 31967
// end ;
31963: GO 31928
31965: POP
31966: POP
// end ;
31967: LD_VAR 0 3
31971: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31972: LD_INT 0
31974: PPUSH
31975: PPUSH
31976: PPUSH
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31987: LD_VAR 0 1
31991: NOT
31992: PUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: CALL_OW 257
32002: PUSH
32003: LD_INT 9
32005: NONEQUAL
32006: OR
32007: IFFALSE 32011
// exit ;
32009: GO 32584
// side := GetSide ( unit ) ;
32011: LD_ADDR_VAR 0 9
32015: PUSH
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 255
32025: ST_TO_ADDR
// tech_space := tech_spacanom ;
32026: LD_ADDR_VAR 0 12
32030: PUSH
32031: LD_INT 29
32033: ST_TO_ADDR
// tech_time := tech_taurad ;
32034: LD_ADDR_VAR 0 13
32038: PUSH
32039: LD_INT 28
32041: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32042: LD_ADDR_VAR 0 11
32046: PUSH
32047: LD_VAR 0 1
32051: PPUSH
32052: CALL_OW 310
32056: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32057: LD_VAR 0 11
32061: PPUSH
32062: CALL_OW 247
32066: PUSH
32067: LD_INT 2
32069: EQUAL
32070: IFFALSE 32074
// exit ;
32072: GO 32584
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32074: LD_ADDR_VAR 0 8
32078: PUSH
32079: LD_INT 81
32081: PUSH
32082: LD_VAR 0 9
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 21
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PPUSH
32112: CALL_OW 69
32116: ST_TO_ADDR
// if not tmp then
32117: LD_VAR 0 8
32121: NOT
32122: IFFALSE 32126
// exit ;
32124: GO 32584
// if in_unit then
32126: LD_VAR 0 11
32130: IFFALSE 32154
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32132: LD_ADDR_VAR 0 10
32136: PUSH
32137: LD_VAR 0 8
32141: PPUSH
32142: LD_VAR 0 11
32146: PPUSH
32147: CALL_OW 74
32151: ST_TO_ADDR
32152: GO 32174
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32154: LD_ADDR_VAR 0 10
32158: PUSH
32159: LD_VAR 0 8
32163: PPUSH
32164: LD_VAR 0 1
32168: PPUSH
32169: CALL_OW 74
32173: ST_TO_ADDR
// if not enemy then
32174: LD_VAR 0 10
32178: NOT
32179: IFFALSE 32183
// exit ;
32181: GO 32584
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32183: LD_VAR 0 11
32187: PUSH
32188: LD_VAR 0 11
32192: PPUSH
32193: LD_VAR 0 10
32197: PPUSH
32198: CALL_OW 296
32202: PUSH
32203: LD_INT 13
32205: GREATER
32206: AND
32207: PUSH
32208: LD_VAR 0 1
32212: PPUSH
32213: LD_VAR 0 10
32217: PPUSH
32218: CALL_OW 296
32222: PUSH
32223: LD_INT 12
32225: GREATER
32226: OR
32227: IFFALSE 32231
// exit ;
32229: GO 32584
// missile := [ 1 ] ;
32231: LD_ADDR_VAR 0 14
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32242: LD_VAR 0 9
32246: PPUSH
32247: LD_VAR 0 12
32251: PPUSH
32252: CALL_OW 325
32256: IFFALSE 32285
// missile := Insert ( missile , missile + 1 , 2 ) ;
32258: LD_ADDR_VAR 0 14
32262: PUSH
32263: LD_VAR 0 14
32267: PPUSH
32268: LD_VAR 0 14
32272: PUSH
32273: LD_INT 1
32275: PLUS
32276: PPUSH
32277: LD_INT 2
32279: PPUSH
32280: CALL_OW 2
32284: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32285: LD_VAR 0 9
32289: PPUSH
32290: LD_VAR 0 13
32294: PPUSH
32295: CALL_OW 325
32299: PUSH
32300: LD_VAR 0 10
32304: PPUSH
32305: CALL_OW 255
32309: PPUSH
32310: LD_VAR 0 13
32314: PPUSH
32315: CALL_OW 325
32319: NOT
32320: AND
32321: IFFALSE 32350
// missile := Insert ( missile , missile + 1 , 3 ) ;
32323: LD_ADDR_VAR 0 14
32327: PUSH
32328: LD_VAR 0 14
32332: PPUSH
32333: LD_VAR 0 14
32337: PUSH
32338: LD_INT 1
32340: PLUS
32341: PPUSH
32342: LD_INT 3
32344: PPUSH
32345: CALL_OW 2
32349: ST_TO_ADDR
// if missile < 2 then
32350: LD_VAR 0 14
32354: PUSH
32355: LD_INT 2
32357: LESS
32358: IFFALSE 32362
// exit ;
32360: GO 32584
// x := GetX ( enemy ) ;
32362: LD_ADDR_VAR 0 4
32366: PUSH
32367: LD_VAR 0 10
32371: PPUSH
32372: CALL_OW 250
32376: ST_TO_ADDR
// y := GetY ( enemy ) ;
32377: LD_ADDR_VAR 0 5
32381: PUSH
32382: LD_VAR 0 10
32386: PPUSH
32387: CALL_OW 251
32391: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32392: LD_ADDR_VAR 0 6
32396: PUSH
32397: LD_VAR 0 4
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PPUSH
32406: LD_INT 1
32408: PPUSH
32409: CALL_OW 12
32413: PLUS
32414: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32415: LD_ADDR_VAR 0 7
32419: PUSH
32420: LD_VAR 0 5
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PPUSH
32429: LD_INT 1
32431: PPUSH
32432: CALL_OW 12
32436: PLUS
32437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32438: LD_VAR 0 6
32442: PPUSH
32443: LD_VAR 0 7
32447: PPUSH
32448: CALL_OW 488
32452: NOT
32453: IFFALSE 32475
// begin _x := x ;
32455: LD_ADDR_VAR 0 6
32459: PUSH
32460: LD_VAR 0 4
32464: ST_TO_ADDR
// _y := y ;
32465: LD_ADDR_VAR 0 7
32469: PUSH
32470: LD_VAR 0 5
32474: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 1
32482: PPUSH
32483: LD_VAR 0 14
32487: PPUSH
32488: CALL_OW 12
32492: ST_TO_ADDR
// case i of 1 :
32493: LD_VAR 0 3
32497: PUSH
32498: LD_INT 1
32500: DOUBLE
32501: EQUAL
32502: IFTRUE 32506
32504: GO 32523
32506: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32507: LD_VAR 0 1
32511: PPUSH
32512: LD_VAR 0 10
32516: PPUSH
32517: CALL_OW 115
32521: GO 32584
32523: LD_INT 2
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 32553
32531: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32532: LD_VAR 0 1
32536: PPUSH
32537: LD_VAR 0 6
32541: PPUSH
32542: LD_VAR 0 7
32546: PPUSH
32547: CALL_OW 153
32551: GO 32584
32553: LD_INT 3
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32561
32559: GO 32583
32561: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32562: LD_VAR 0 1
32566: PPUSH
32567: LD_VAR 0 6
32571: PPUSH
32572: LD_VAR 0 7
32576: PPUSH
32577: CALL_OW 154
32581: GO 32584
32583: POP
// end ;
32584: LD_VAR 0 2
32588: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32589: LD_INT 0
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
// if not unit or not building then
32597: LD_VAR 0 1
32601: NOT
32602: PUSH
32603: LD_VAR 0 2
32607: NOT
32608: OR
32609: IFFALSE 32613
// exit ;
32611: GO 32771
// x := GetX ( building ) ;
32613: LD_ADDR_VAR 0 5
32617: PUSH
32618: LD_VAR 0 2
32622: PPUSH
32623: CALL_OW 250
32627: ST_TO_ADDR
// y := GetY ( building ) ;
32628: LD_ADDR_VAR 0 6
32632: PUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 251
32642: ST_TO_ADDR
// for i = 0 to 5 do
32643: LD_ADDR_VAR 0 4
32647: PUSH
32648: DOUBLE
32649: LD_INT 0
32651: DEC
32652: ST_TO_ADDR
32653: LD_INT 5
32655: PUSH
32656: FOR_TO
32657: IFFALSE 32769
// begin _x := ShiftX ( x , i , 3 ) ;
32659: LD_ADDR_VAR 0 7
32663: PUSH
32664: LD_VAR 0 5
32668: PPUSH
32669: LD_VAR 0 4
32673: PPUSH
32674: LD_INT 3
32676: PPUSH
32677: CALL_OW 272
32681: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32682: LD_ADDR_VAR 0 8
32686: PUSH
32687: LD_VAR 0 6
32691: PPUSH
32692: LD_VAR 0 4
32696: PPUSH
32697: LD_INT 3
32699: PPUSH
32700: CALL_OW 273
32704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32705: LD_VAR 0 7
32709: PPUSH
32710: LD_VAR 0 8
32714: PPUSH
32715: CALL_OW 488
32719: NOT
32720: IFFALSE 32724
// continue ;
32722: GO 32656
// if HexInfo ( _x , _y ) = 0 then
32724: LD_VAR 0 7
32728: PPUSH
32729: LD_VAR 0 8
32733: PPUSH
32734: CALL_OW 428
32738: PUSH
32739: LD_INT 0
32741: EQUAL
32742: IFFALSE 32767
// begin ComMoveXY ( unit , _x , _y ) ;
32744: LD_VAR 0 1
32748: PPUSH
32749: LD_VAR 0 7
32753: PPUSH
32754: LD_VAR 0 8
32758: PPUSH
32759: CALL_OW 111
// exit ;
32763: POP
32764: POP
32765: GO 32771
// end ; end ;
32767: GO 32656
32769: POP
32770: POP
// end ;
32771: LD_VAR 0 3
32775: RET
// export function ScanBase ( side , base_area ) ; begin
32776: LD_INT 0
32778: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32779: LD_ADDR_VAR 0 3
32783: PUSH
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_INT 81
32791: PUSH
32792: LD_VAR 0 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PPUSH
32801: CALL_OW 70
32805: ST_TO_ADDR
// end ;
32806: LD_VAR 0 3
32810: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32811: LD_INT 0
32813: PPUSH
32814: PPUSH
32815: PPUSH
32816: PPUSH
// result := false ;
32817: LD_ADDR_VAR 0 2
32821: PUSH
32822: LD_INT 0
32824: ST_TO_ADDR
// side := GetSide ( unit ) ;
32825: LD_ADDR_VAR 0 3
32829: PUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 255
32839: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32840: LD_ADDR_VAR 0 4
32844: PUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 248
32854: ST_TO_ADDR
// case nat of 1 :
32855: LD_VAR 0 4
32859: PUSH
32860: LD_INT 1
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32879
32868: POP
// tech := tech_lassight ; 2 :
32869: LD_ADDR_VAR 0 5
32873: PUSH
32874: LD_INT 12
32876: ST_TO_ADDR
32877: GO 32918
32879: LD_INT 2
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32898
32887: POP
// tech := tech_mortar ; 3 :
32888: LD_ADDR_VAR 0 5
32892: PUSH
32893: LD_INT 41
32895: ST_TO_ADDR
32896: GO 32918
32898: LD_INT 3
32900: DOUBLE
32901: EQUAL
32902: IFTRUE 32906
32904: GO 32917
32906: POP
// tech := tech_bazooka ; end ;
32907: LD_ADDR_VAR 0 5
32911: PUSH
32912: LD_INT 44
32914: ST_TO_ADDR
32915: GO 32918
32917: POP
// if Researched ( side , tech ) then
32918: LD_VAR 0 3
32922: PPUSH
32923: LD_VAR 0 5
32927: PPUSH
32928: CALL_OW 325
32932: IFFALSE 32959
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32934: LD_ADDR_VAR 0 2
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: LD_INT 8
32944: PUSH
32945: LD_INT 9
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: PUSH
32953: LD_VAR 0 4
32957: ARRAY
32958: ST_TO_ADDR
// end ;
32959: LD_VAR 0 2
32963: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32964: LD_INT 0
32966: PPUSH
32967: PPUSH
32968: PPUSH
// if not mines then
32969: LD_VAR 0 2
32973: NOT
32974: IFFALSE 32978
// exit ;
32976: GO 33122
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32978: LD_ADDR_VAR 0 5
32982: PUSH
32983: LD_INT 81
32985: PUSH
32986: LD_VAR 0 1
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 3
32997: PUSH
32998: LD_INT 21
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PPUSH
33016: CALL_OW 69
33020: ST_TO_ADDR
// for i in mines do
33021: LD_ADDR_VAR 0 4
33025: PUSH
33026: LD_VAR 0 2
33030: PUSH
33031: FOR_IN
33032: IFFALSE 33120
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33034: LD_VAR 0 4
33038: PUSH
33039: LD_INT 1
33041: ARRAY
33042: PPUSH
33043: LD_VAR 0 4
33047: PUSH
33048: LD_INT 2
33050: ARRAY
33051: PPUSH
33052: CALL_OW 458
33056: NOT
33057: IFFALSE 33061
// continue ;
33059: GO 33031
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33061: LD_VAR 0 4
33065: PUSH
33066: LD_INT 1
33068: ARRAY
33069: PPUSH
33070: LD_VAR 0 4
33074: PUSH
33075: LD_INT 2
33077: ARRAY
33078: PPUSH
33079: CALL_OW 428
33083: PUSH
33084: LD_VAR 0 5
33088: IN
33089: IFFALSE 33118
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33091: LD_VAR 0 4
33095: PUSH
33096: LD_INT 1
33098: ARRAY
33099: PPUSH
33100: LD_VAR 0 4
33104: PUSH
33105: LD_INT 2
33107: ARRAY
33108: PPUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: CALL_OW 456
// end ;
33118: GO 33031
33120: POP
33121: POP
// end ;
33122: LD_VAR 0 3
33126: RET
// export function Count ( array ) ; var i ; begin
33127: LD_INT 0
33129: PPUSH
33130: PPUSH
// result := 0 ;
33131: LD_ADDR_VAR 0 2
33135: PUSH
33136: LD_INT 0
33138: ST_TO_ADDR
// for i in array do
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_VAR 0 1
33148: PUSH
33149: FOR_IN
33150: IFFALSE 33174
// if i then
33152: LD_VAR 0 3
33156: IFFALSE 33172
// result := result + 1 ;
33158: LD_ADDR_VAR 0 2
33162: PUSH
33163: LD_VAR 0 2
33167: PUSH
33168: LD_INT 1
33170: PLUS
33171: ST_TO_ADDR
33172: GO 33149
33174: POP
33175: POP
// end ;
33176: LD_VAR 0 2
33180: RET
// export function IsEmpty ( building ) ; begin
33181: LD_INT 0
33183: PPUSH
// if not building then
33184: LD_VAR 0 1
33188: NOT
33189: IFFALSE 33193
// exit ;
33191: GO 33236
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33193: LD_ADDR_VAR 0 2
33197: PUSH
33198: LD_VAR 0 1
33202: PUSH
33203: LD_INT 22
33205: PUSH
33206: LD_VAR 0 1
33210: PPUSH
33211: CALL_OW 255
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 58
33222: PUSH
33223: EMPTY
33224: LIST
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PPUSH
33230: CALL_OW 69
33234: IN
33235: ST_TO_ADDR
// end ;
33236: LD_VAR 0 2
33240: RET
// export function IsNotFull ( building ) ; begin
33241: LD_INT 0
33243: PPUSH
// if not building then
33244: LD_VAR 0 1
33248: NOT
33249: IFFALSE 33253
// exit ;
33251: GO 33272
// result := UnitsInside ( building ) < 6 ;
33253: LD_ADDR_VAR 0 2
33257: PUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: CALL_OW 313
33267: PUSH
33268: LD_INT 6
33270: LESS
33271: ST_TO_ADDR
// end ;
33272: LD_VAR 0 2
33276: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33277: LD_INT 0
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
// tmp := [ ] ;
33283: LD_ADDR_VAR 0 3
33287: PUSH
33288: EMPTY
33289: ST_TO_ADDR
// list := [ ] ;
33290: LD_ADDR_VAR 0 5
33294: PUSH
33295: EMPTY
33296: ST_TO_ADDR
// for i = 16 to 25 do
33297: LD_ADDR_VAR 0 4
33301: PUSH
33302: DOUBLE
33303: LD_INT 16
33305: DEC
33306: ST_TO_ADDR
33307: LD_INT 25
33309: PUSH
33310: FOR_TO
33311: IFFALSE 33384
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33313: LD_ADDR_VAR 0 3
33317: PUSH
33318: LD_VAR 0 3
33322: PUSH
33323: LD_INT 22
33325: PUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: CALL_OW 255
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 91
33342: PUSH
33343: LD_VAR 0 1
33347: PUSH
33348: LD_INT 6
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 30
33358: PUSH
33359: LD_VAR 0 4
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: PPUSH
33376: CALL_OW 69
33380: ADD
33381: ST_TO_ADDR
33382: GO 33310
33384: POP
33385: POP
// for i = 1 to tmp do
33386: LD_ADDR_VAR 0 4
33390: PUSH
33391: DOUBLE
33392: LD_INT 1
33394: DEC
33395: ST_TO_ADDR
33396: LD_VAR 0 3
33400: PUSH
33401: FOR_TO
33402: IFFALSE 33490
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33404: LD_ADDR_VAR 0 5
33408: PUSH
33409: LD_VAR 0 5
33413: PUSH
33414: LD_VAR 0 3
33418: PUSH
33419: LD_VAR 0 4
33423: ARRAY
33424: PPUSH
33425: CALL_OW 266
33429: PUSH
33430: LD_VAR 0 3
33434: PUSH
33435: LD_VAR 0 4
33439: ARRAY
33440: PPUSH
33441: CALL_OW 250
33445: PUSH
33446: LD_VAR 0 3
33450: PUSH
33451: LD_VAR 0 4
33455: ARRAY
33456: PPUSH
33457: CALL_OW 251
33461: PUSH
33462: LD_VAR 0 3
33466: PUSH
33467: LD_VAR 0 4
33471: ARRAY
33472: PPUSH
33473: CALL_OW 254
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: ADD
33487: ST_TO_ADDR
33488: GO 33401
33490: POP
33491: POP
// result := list ;
33492: LD_ADDR_VAR 0 2
33496: PUSH
33497: LD_VAR 0 5
33501: ST_TO_ADDR
// end ;
33502: LD_VAR 0 2
33506: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33507: LD_INT 0
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
// if not factory then
33516: LD_VAR 0 1
33520: NOT
33521: IFFALSE 33525
// exit ;
33523: GO 34118
// if control = control_apeman then
33525: LD_VAR 0 4
33529: PUSH
33530: LD_INT 5
33532: EQUAL
33533: IFFALSE 33642
// begin tmp := UnitsInside ( factory ) ;
33535: LD_ADDR_VAR 0 8
33539: PUSH
33540: LD_VAR 0 1
33544: PPUSH
33545: CALL_OW 313
33549: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33550: LD_VAR 0 8
33554: PPUSH
33555: LD_INT 25
33557: PUSH
33558: LD_INT 12
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PPUSH
33565: CALL_OW 72
33569: NOT
33570: IFFALSE 33580
// control := control_manual ;
33572: LD_ADDR_VAR 0 4
33576: PUSH
33577: LD_INT 1
33579: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33580: LD_ADDR_VAR 0 8
33584: PUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: CALL 33277 0 1
33594: ST_TO_ADDR
// if tmp then
33595: LD_VAR 0 8
33599: IFFALSE 33642
// begin for i in tmp do
33601: LD_ADDR_VAR 0 7
33605: PUSH
33606: LD_VAR 0 8
33610: PUSH
33611: FOR_IN
33612: IFFALSE 33640
// if i [ 1 ] = b_ext_radio then
33614: LD_VAR 0 7
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PUSH
33623: LD_INT 22
33625: EQUAL
33626: IFFALSE 33638
// begin control := control_remote ;
33628: LD_ADDR_VAR 0 4
33632: PUSH
33633: LD_INT 2
33635: ST_TO_ADDR
// break ;
33636: GO 33640
// end ;
33638: GO 33611
33640: POP
33641: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33642: LD_VAR 0 1
33646: PPUSH
33647: LD_VAR 0 2
33651: PPUSH
33652: LD_VAR 0 3
33656: PPUSH
33657: LD_VAR 0 4
33661: PPUSH
33662: LD_VAR 0 5
33666: PPUSH
33667: CALL_OW 448
33671: IFFALSE 33706
// begin result := [ chassis , engine , control , weapon ] ;
33673: LD_ADDR_VAR 0 6
33677: PUSH
33678: LD_VAR 0 2
33682: PUSH
33683: LD_VAR 0 3
33687: PUSH
33688: LD_VAR 0 4
33692: PUSH
33693: LD_VAR 0 5
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
// exit ;
33704: GO 34118
// end ; _chassis := AvailableChassisList ( factory ) ;
33706: LD_ADDR_VAR 0 9
33710: PUSH
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL_OW 475
33720: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33721: LD_ADDR_VAR 0 11
33725: PUSH
33726: LD_VAR 0 1
33730: PPUSH
33731: CALL_OW 476
33735: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33736: LD_ADDR_VAR 0 12
33740: PUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 477
33750: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33751: LD_ADDR_VAR 0 10
33755: PUSH
33756: LD_VAR 0 1
33760: PPUSH
33761: CALL_OW 478
33765: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33766: LD_VAR 0 9
33770: NOT
33771: PUSH
33772: LD_VAR 0 11
33776: NOT
33777: OR
33778: PUSH
33779: LD_VAR 0 12
33783: NOT
33784: OR
33785: PUSH
33786: LD_VAR 0 10
33790: NOT
33791: OR
33792: IFFALSE 33827
// begin result := [ chassis , engine , control , weapon ] ;
33794: LD_ADDR_VAR 0 6
33798: PUSH
33799: LD_VAR 0 2
33803: PUSH
33804: LD_VAR 0 3
33808: PUSH
33809: LD_VAR 0 4
33813: PUSH
33814: LD_VAR 0 5
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
// exit ;
33825: GO 34118
// end ; if not chassis in _chassis then
33827: LD_VAR 0 2
33831: PUSH
33832: LD_VAR 0 9
33836: IN
33837: NOT
33838: IFFALSE 33864
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33840: LD_ADDR_VAR 0 2
33844: PUSH
33845: LD_VAR 0 9
33849: PUSH
33850: LD_INT 1
33852: PPUSH
33853: LD_VAR 0 9
33857: PPUSH
33858: CALL_OW 12
33862: ARRAY
33863: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33864: LD_VAR 0 2
33868: PPUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: CALL 34123 0 2
33878: NOT
33879: IFFALSE 33938
// repeat engine := _engine [ 1 ] ;
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_VAR 0 11
33890: PUSH
33891: LD_INT 1
33893: ARRAY
33894: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33895: LD_ADDR_VAR 0 11
33899: PUSH
33900: LD_VAR 0 11
33904: PPUSH
33905: LD_INT 1
33907: PPUSH
33908: CALL_OW 3
33912: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33913: LD_VAR 0 2
33917: PPUSH
33918: LD_VAR 0 3
33922: PPUSH
33923: CALL 34123 0 2
33927: PUSH
33928: LD_VAR 0 11
33932: PUSH
33933: EMPTY
33934: EQUAL
33935: OR
33936: IFFALSE 33881
// if not control in _control then
33938: LD_VAR 0 4
33942: PUSH
33943: LD_VAR 0 12
33947: IN
33948: NOT
33949: IFFALSE 33975
// control := _control [ rand ( 1 , _control ) ] ;
33951: LD_ADDR_VAR 0 4
33955: PUSH
33956: LD_VAR 0 12
33960: PUSH
33961: LD_INT 1
33963: PPUSH
33964: LD_VAR 0 12
33968: PPUSH
33969: CALL_OW 12
33973: ARRAY
33974: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33975: LD_VAR 0 2
33979: PPUSH
33980: LD_VAR 0 5
33984: PPUSH
33985: CALL 34343 0 2
33989: NOT
33990: IFFALSE 34049
// repeat weapon := _weapon [ 1 ] ;
33992: LD_ADDR_VAR 0 5
33996: PUSH
33997: LD_VAR 0 10
34001: PUSH
34002: LD_INT 1
34004: ARRAY
34005: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34006: LD_ADDR_VAR 0 10
34010: PUSH
34011: LD_VAR 0 10
34015: PPUSH
34016: LD_INT 1
34018: PPUSH
34019: CALL_OW 3
34023: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34024: LD_VAR 0 2
34028: PPUSH
34029: LD_VAR 0 5
34033: PPUSH
34034: CALL 34343 0 2
34038: PUSH
34039: LD_VAR 0 10
34043: PUSH
34044: EMPTY
34045: EQUAL
34046: OR
34047: IFFALSE 33992
// result := [ ] ;
34049: LD_ADDR_VAR 0 6
34053: PUSH
34054: EMPTY
34055: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34056: LD_VAR 0 1
34060: PPUSH
34061: LD_VAR 0 2
34065: PPUSH
34066: LD_VAR 0 3
34070: PPUSH
34071: LD_VAR 0 4
34075: PPUSH
34076: LD_VAR 0 5
34080: PPUSH
34081: CALL_OW 448
34085: IFFALSE 34118
// result := [ chassis , engine , control , weapon ] ;
34087: LD_ADDR_VAR 0 6
34091: PUSH
34092: LD_VAR 0 2
34096: PUSH
34097: LD_VAR 0 3
34101: PUSH
34102: LD_VAR 0 4
34106: PUSH
34107: LD_VAR 0 5
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: ST_TO_ADDR
// end ;
34118: LD_VAR 0 6
34122: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34123: LD_INT 0
34125: PPUSH
// if not chassis or not engine then
34126: LD_VAR 0 1
34130: NOT
34131: PUSH
34132: LD_VAR 0 2
34136: NOT
34137: OR
34138: IFFALSE 34142
// exit ;
34140: GO 34338
// case engine of engine_solar :
34142: LD_VAR 0 2
34146: PUSH
34147: LD_INT 2
34149: DOUBLE
34150: EQUAL
34151: IFTRUE 34155
34153: GO 34193
34155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34156: LD_ADDR_VAR 0 3
34160: PUSH
34161: LD_INT 11
34163: PUSH
34164: LD_INT 12
34166: PUSH
34167: LD_INT 13
34169: PUSH
34170: LD_INT 14
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: LD_INT 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: ST_TO_ADDR
34191: GO 34322
34193: LD_INT 1
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34201
34199: GO 34263
34201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34202: LD_ADDR_VAR 0 3
34206: PUSH
34207: LD_INT 11
34209: PUSH
34210: LD_INT 12
34212: PUSH
34213: LD_INT 13
34215: PUSH
34216: LD_INT 14
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: LD_INT 4
34230: PUSH
34231: LD_INT 5
34233: PUSH
34234: LD_INT 21
34236: PUSH
34237: LD_INT 23
34239: PUSH
34240: LD_INT 22
34242: PUSH
34243: LD_INT 24
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: ST_TO_ADDR
34261: GO 34322
34263: LD_INT 3
34265: DOUBLE
34266: EQUAL
34267: IFTRUE 34271
34269: GO 34321
34271: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34272: LD_ADDR_VAR 0 3
34276: PUSH
34277: LD_INT 13
34279: PUSH
34280: LD_INT 14
34282: PUSH
34283: LD_INT 2
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: LD_INT 4
34291: PUSH
34292: LD_INT 5
34294: PUSH
34295: LD_INT 21
34297: PUSH
34298: LD_INT 22
34300: PUSH
34301: LD_INT 23
34303: PUSH
34304: LD_INT 24
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: ST_TO_ADDR
34319: GO 34322
34321: POP
// result := ( chassis in result ) ;
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_VAR 0 1
34331: PUSH
34332: LD_VAR 0 3
34336: IN
34337: ST_TO_ADDR
// end ;
34338: LD_VAR 0 3
34342: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34343: LD_INT 0
34345: PPUSH
// if not chassis or not weapon then
34346: LD_VAR 0 1
34350: NOT
34351: PUSH
34352: LD_VAR 0 2
34356: NOT
34357: OR
34358: IFFALSE 34362
// exit ;
34360: GO 35388
// case weapon of us_machine_gun :
34362: LD_VAR 0 2
34366: PUSH
34367: LD_INT 2
34369: DOUBLE
34370: EQUAL
34371: IFTRUE 34375
34373: GO 34405
34375: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34376: LD_ADDR_VAR 0 3
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: LD_INT 4
34392: PUSH
34393: LD_INT 5
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
34403: GO 35372
34405: LD_INT 3
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34413
34411: GO 34443
34413: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: LD_INT 5
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: ST_TO_ADDR
34441: GO 35372
34443: LD_INT 11
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34481
34451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 3
34465: PUSH
34466: LD_INT 4
34468: PUSH
34469: LD_INT 5
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: ST_TO_ADDR
34479: GO 35372
34481: LD_INT 4
34483: DOUBLE
34484: EQUAL
34485: IFTRUE 34489
34487: GO 34515
34489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 4
34503: PUSH
34504: LD_INT 5
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: ST_TO_ADDR
34513: GO 35372
34515: LD_INT 5
34517: DOUBLE
34518: EQUAL
34519: IFTRUE 34523
34521: GO 34549
34523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34524: LD_ADDR_VAR 0 3
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: LD_INT 4
34537: PUSH
34538: LD_INT 5
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
34547: GO 35372
34549: LD_INT 9
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34583
34557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 3
34568: PUSH
34569: LD_INT 4
34571: PUSH
34572: LD_INT 5
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
34581: GO 35372
34583: LD_INT 7
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34591
34589: GO 34617
34591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34592: LD_ADDR_VAR 0 3
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: LD_INT 5
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
34615: GO 35372
34617: LD_INT 12
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34651
34625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: LD_INT 4
34639: PUSH
34640: LD_INT 5
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: ST_TO_ADDR
34649: GO 35372
34651: LD_INT 13
34653: DOUBLE
34654: EQUAL
34655: IFTRUE 34659
34657: GO 34685
34659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34660: LD_ADDR_VAR 0 3
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: LD_INT 3
34670: PUSH
34671: LD_INT 4
34673: PUSH
34674: LD_INT 5
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: ST_TO_ADDR
34683: GO 35372
34685: LD_INT 14
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34693
34691: GO 34711
34693: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_INT 4
34701: PUSH
34702: LD_INT 5
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: ST_TO_ADDR
34709: GO 35372
34711: LD_INT 6
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 34737
34719: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34720: LD_ADDR_VAR 0 3
34724: PUSH
34725: LD_INT 4
34727: PUSH
34728: LD_INT 5
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: ST_TO_ADDR
34735: GO 35372
34737: LD_INT 10
34739: DOUBLE
34740: EQUAL
34741: IFTRUE 34745
34743: GO 34763
34745: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34746: LD_ADDR_VAR 0 3
34750: PUSH
34751: LD_INT 4
34753: PUSH
34754: LD_INT 5
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: ST_TO_ADDR
34761: GO 35372
34763: LD_INT 22
34765: DOUBLE
34766: EQUAL
34767: IFTRUE 34771
34769: GO 34797
34771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34772: LD_ADDR_VAR 0 3
34776: PUSH
34777: LD_INT 11
34779: PUSH
34780: LD_INT 12
34782: PUSH
34783: LD_INT 13
34785: PUSH
34786: LD_INT 14
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: ST_TO_ADDR
34795: GO 35372
34797: LD_INT 23
34799: DOUBLE
34800: EQUAL
34801: IFTRUE 34805
34803: GO 34831
34805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34806: LD_ADDR_VAR 0 3
34810: PUSH
34811: LD_INT 11
34813: PUSH
34814: LD_INT 12
34816: PUSH
34817: LD_INT 13
34819: PUSH
34820: LD_INT 14
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
34829: GO 35372
34831: LD_INT 24
34833: DOUBLE
34834: EQUAL
34835: IFTRUE 34839
34837: GO 34865
34839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_INT 11
34847: PUSH
34848: LD_INT 12
34850: PUSH
34851: LD_INT 13
34853: PUSH
34854: LD_INT 14
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: ST_TO_ADDR
34863: GO 35372
34865: LD_INT 30
34867: DOUBLE
34868: EQUAL
34869: IFTRUE 34873
34871: GO 34899
34873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34874: LD_ADDR_VAR 0 3
34878: PUSH
34879: LD_INT 11
34881: PUSH
34882: LD_INT 12
34884: PUSH
34885: LD_INT 13
34887: PUSH
34888: LD_INT 14
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
34897: GO 35372
34899: LD_INT 25
34901: DOUBLE
34902: EQUAL
34903: IFTRUE 34907
34905: GO 34925
34907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: LD_INT 13
34915: PUSH
34916: LD_INT 14
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: ST_TO_ADDR
34923: GO 35372
34925: LD_INT 27
34927: DOUBLE
34928: EQUAL
34929: IFTRUE 34933
34931: GO 34951
34933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34934: LD_ADDR_VAR 0 3
34938: PUSH
34939: LD_INT 13
34941: PUSH
34942: LD_INT 14
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: ST_TO_ADDR
34949: GO 35372
34951: LD_INT 28
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 34977
34959: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_INT 13
34967: PUSH
34968: LD_INT 14
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: ST_TO_ADDR
34975: GO 35372
34977: LD_INT 29
34979: DOUBLE
34980: EQUAL
34981: IFTRUE 34985
34983: GO 35003
34985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34986: LD_ADDR_VAR 0 3
34990: PUSH
34991: LD_INT 13
34993: PUSH
34994: LD_INT 14
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: ST_TO_ADDR
35001: GO 35372
35003: LD_INT 31
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35029
35011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: LD_INT 13
35019: PUSH
35020: LD_INT 14
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: ST_TO_ADDR
35027: GO 35372
35029: LD_INT 26
35031: DOUBLE
35032: EQUAL
35033: IFTRUE 35037
35035: GO 35055
35037: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35038: LD_ADDR_VAR 0 3
35042: PUSH
35043: LD_INT 13
35045: PUSH
35046: LD_INT 14
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: ST_TO_ADDR
35053: GO 35372
35055: LD_INT 42
35057: DOUBLE
35058: EQUAL
35059: IFTRUE 35063
35061: GO 35089
35063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35064: LD_ADDR_VAR 0 3
35068: PUSH
35069: LD_INT 21
35071: PUSH
35072: LD_INT 22
35074: PUSH
35075: LD_INT 23
35077: PUSH
35078: LD_INT 24
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
35087: GO 35372
35089: LD_INT 43
35091: DOUBLE
35092: EQUAL
35093: IFTRUE 35097
35095: GO 35123
35097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35098: LD_ADDR_VAR 0 3
35102: PUSH
35103: LD_INT 21
35105: PUSH
35106: LD_INT 22
35108: PUSH
35109: LD_INT 23
35111: PUSH
35112: LD_INT 24
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: ST_TO_ADDR
35121: GO 35372
35123: LD_INT 44
35125: DOUBLE
35126: EQUAL
35127: IFTRUE 35131
35129: GO 35157
35131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35132: LD_ADDR_VAR 0 3
35136: PUSH
35137: LD_INT 21
35139: PUSH
35140: LD_INT 22
35142: PUSH
35143: LD_INT 23
35145: PUSH
35146: LD_INT 24
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: ST_TO_ADDR
35155: GO 35372
35157: LD_INT 45
35159: DOUBLE
35160: EQUAL
35161: IFTRUE 35165
35163: GO 35191
35165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_INT 21
35173: PUSH
35174: LD_INT 22
35176: PUSH
35177: LD_INT 23
35179: PUSH
35180: LD_INT 24
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: ST_TO_ADDR
35189: GO 35372
35191: LD_INT 49
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35225
35199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 21
35207: PUSH
35208: LD_INT 22
35210: PUSH
35211: LD_INT 23
35213: PUSH
35214: LD_INT 24
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: ST_TO_ADDR
35223: GO 35372
35225: LD_INT 51
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35233
35231: GO 35259
35233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_INT 21
35241: PUSH
35242: LD_INT 22
35244: PUSH
35245: LD_INT 23
35247: PUSH
35248: LD_INT 24
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: ST_TO_ADDR
35257: GO 35372
35259: LD_INT 52
35261: DOUBLE
35262: EQUAL
35263: IFTRUE 35267
35265: GO 35293
35267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35268: LD_ADDR_VAR 0 3
35272: PUSH
35273: LD_INT 21
35275: PUSH
35276: LD_INT 22
35278: PUSH
35279: LD_INT 23
35281: PUSH
35282: LD_INT 24
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
35291: GO 35372
35293: LD_INT 53
35295: DOUBLE
35296: EQUAL
35297: IFTRUE 35301
35299: GO 35319
35301: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35302: LD_ADDR_VAR 0 3
35306: PUSH
35307: LD_INT 23
35309: PUSH
35310: LD_INT 24
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: ST_TO_ADDR
35317: GO 35372
35319: LD_INT 46
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35327
35325: GO 35345
35327: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_INT 23
35335: PUSH
35336: LD_INT 24
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: ST_TO_ADDR
35343: GO 35372
35345: LD_INT 47
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35353
35351: GO 35371
35353: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35354: LD_ADDR_VAR 0 3
35358: PUSH
35359: LD_INT 23
35361: PUSH
35362: LD_INT 24
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: ST_TO_ADDR
35369: GO 35372
35371: POP
// result := ( chassis in result ) ;
35372: LD_ADDR_VAR 0 3
35376: PUSH
35377: LD_VAR 0 1
35381: PUSH
35382: LD_VAR 0 3
35386: IN
35387: ST_TO_ADDR
// end ;
35388: LD_VAR 0 3
35392: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35393: LD_INT 0
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
35399: PPUSH
35400: PPUSH
35401: PPUSH
// result := array ;
35402: LD_ADDR_VAR 0 5
35406: PUSH
35407: LD_VAR 0 1
35411: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35412: LD_VAR 0 1
35416: NOT
35417: PUSH
35418: LD_VAR 0 2
35422: NOT
35423: OR
35424: PUSH
35425: LD_VAR 0 3
35429: NOT
35430: OR
35431: PUSH
35432: LD_VAR 0 2
35436: PUSH
35437: LD_VAR 0 1
35441: GREATER
35442: OR
35443: PUSH
35444: LD_VAR 0 3
35448: PUSH
35449: LD_VAR 0 1
35453: GREATER
35454: OR
35455: IFFALSE 35459
// exit ;
35457: GO 35755
// if direction then
35459: LD_VAR 0 4
35463: IFFALSE 35527
// begin d := 1 ;
35465: LD_ADDR_VAR 0 9
35469: PUSH
35470: LD_INT 1
35472: ST_TO_ADDR
// if i_from > i_to then
35473: LD_VAR 0 2
35477: PUSH
35478: LD_VAR 0 3
35482: GREATER
35483: IFFALSE 35509
// length := ( array - i_from ) + i_to else
35485: LD_ADDR_VAR 0 11
35489: PUSH
35490: LD_VAR 0 1
35494: PUSH
35495: LD_VAR 0 2
35499: MINUS
35500: PUSH
35501: LD_VAR 0 3
35505: PLUS
35506: ST_TO_ADDR
35507: GO 35525
// length := i_to - i_from ;
35509: LD_ADDR_VAR 0 11
35513: PUSH
35514: LD_VAR 0 3
35518: PUSH
35519: LD_VAR 0 2
35523: MINUS
35524: ST_TO_ADDR
// end else
35525: GO 35588
// begin d := - 1 ;
35527: LD_ADDR_VAR 0 9
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: ST_TO_ADDR
// if i_from > i_to then
35536: LD_VAR 0 2
35540: PUSH
35541: LD_VAR 0 3
35545: GREATER
35546: IFFALSE 35566
// length := i_from - i_to else
35548: LD_ADDR_VAR 0 11
35552: PUSH
35553: LD_VAR 0 2
35557: PUSH
35558: LD_VAR 0 3
35562: MINUS
35563: ST_TO_ADDR
35564: GO 35588
// length := ( array - i_to ) + i_from ;
35566: LD_ADDR_VAR 0 11
35570: PUSH
35571: LD_VAR 0 1
35575: PUSH
35576: LD_VAR 0 3
35580: MINUS
35581: PUSH
35582: LD_VAR 0 2
35586: PLUS
35587: ST_TO_ADDR
// end ; if not length then
35588: LD_VAR 0 11
35592: NOT
35593: IFFALSE 35597
// exit ;
35595: GO 35755
// tmp := array ;
35597: LD_ADDR_VAR 0 10
35601: PUSH
35602: LD_VAR 0 1
35606: ST_TO_ADDR
// for i = 1 to length do
35607: LD_ADDR_VAR 0 6
35611: PUSH
35612: DOUBLE
35613: LD_INT 1
35615: DEC
35616: ST_TO_ADDR
35617: LD_VAR 0 11
35621: PUSH
35622: FOR_TO
35623: IFFALSE 35743
// begin for j = 1 to array do
35625: LD_ADDR_VAR 0 7
35629: PUSH
35630: DOUBLE
35631: LD_INT 1
35633: DEC
35634: ST_TO_ADDR
35635: LD_VAR 0 1
35639: PUSH
35640: FOR_TO
35641: IFFALSE 35729
// begin k := j + d ;
35643: LD_ADDR_VAR 0 8
35647: PUSH
35648: LD_VAR 0 7
35652: PUSH
35653: LD_VAR 0 9
35657: PLUS
35658: ST_TO_ADDR
// if k > array then
35659: LD_VAR 0 8
35663: PUSH
35664: LD_VAR 0 1
35668: GREATER
35669: IFFALSE 35679
// k := 1 ;
35671: LD_ADDR_VAR 0 8
35675: PUSH
35676: LD_INT 1
35678: ST_TO_ADDR
// if not k then
35679: LD_VAR 0 8
35683: NOT
35684: IFFALSE 35696
// k := array ;
35686: LD_ADDR_VAR 0 8
35690: PUSH
35691: LD_VAR 0 1
35695: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35696: LD_ADDR_VAR 0 10
35700: PUSH
35701: LD_VAR 0 10
35705: PPUSH
35706: LD_VAR 0 8
35710: PPUSH
35711: LD_VAR 0 1
35715: PUSH
35716: LD_VAR 0 7
35720: ARRAY
35721: PPUSH
35722: CALL_OW 1
35726: ST_TO_ADDR
// end ;
35727: GO 35640
35729: POP
35730: POP
// array := tmp ;
35731: LD_ADDR_VAR 0 1
35735: PUSH
35736: LD_VAR 0 10
35740: ST_TO_ADDR
// end ;
35741: GO 35622
35743: POP
35744: POP
// result := array ;
35745: LD_ADDR_VAR 0 5
35749: PUSH
35750: LD_VAR 0 1
35754: ST_TO_ADDR
// end ;
35755: LD_VAR 0 5
35759: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35760: LD_INT 0
35762: PPUSH
35763: PPUSH
// result := 0 ;
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 0
35771: ST_TO_ADDR
// if not array or not value in array then
35772: LD_VAR 0 1
35776: NOT
35777: PUSH
35778: LD_VAR 0 2
35782: PUSH
35783: LD_VAR 0 1
35787: IN
35788: NOT
35789: OR
35790: IFFALSE 35794
// exit ;
35792: GO 35848
// for i = 1 to array do
35794: LD_ADDR_VAR 0 4
35798: PUSH
35799: DOUBLE
35800: LD_INT 1
35802: DEC
35803: ST_TO_ADDR
35804: LD_VAR 0 1
35808: PUSH
35809: FOR_TO
35810: IFFALSE 35846
// if value = array [ i ] then
35812: LD_VAR 0 2
35816: PUSH
35817: LD_VAR 0 1
35821: PUSH
35822: LD_VAR 0 4
35826: ARRAY
35827: EQUAL
35828: IFFALSE 35844
// begin result := i ;
35830: LD_ADDR_VAR 0 3
35834: PUSH
35835: LD_VAR 0 4
35839: ST_TO_ADDR
// exit ;
35840: POP
35841: POP
35842: GO 35848
// end ;
35844: GO 35809
35846: POP
35847: POP
// end ;
35848: LD_VAR 0 3
35852: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35853: LD_INT 0
35855: PPUSH
// vc_chassis := chassis ;
35856: LD_ADDR_OWVAR 37
35860: PUSH
35861: LD_VAR 0 1
35865: ST_TO_ADDR
// vc_engine := engine ;
35866: LD_ADDR_OWVAR 39
35870: PUSH
35871: LD_VAR 0 2
35875: ST_TO_ADDR
// vc_control := control ;
35876: LD_ADDR_OWVAR 38
35880: PUSH
35881: LD_VAR 0 3
35885: ST_TO_ADDR
// vc_weapon := weapon ;
35886: LD_ADDR_OWVAR 40
35890: PUSH
35891: LD_VAR 0 4
35895: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35896: LD_ADDR_OWVAR 41
35900: PUSH
35901: LD_VAR 0 5
35905: ST_TO_ADDR
// end ;
35906: LD_VAR 0 6
35910: RET
// export function WantPlant ( unit ) ; var task ; begin
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
// result := false ;
35915: LD_ADDR_VAR 0 2
35919: PUSH
35920: LD_INT 0
35922: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35923: LD_ADDR_VAR 0 3
35927: PUSH
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL_OW 437
35937: ST_TO_ADDR
// if task then
35938: LD_VAR 0 3
35942: IFFALSE 35970
// if task [ 1 ] [ 1 ] = p then
35944: LD_VAR 0 3
35948: PUSH
35949: LD_INT 1
35951: ARRAY
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: PUSH
35957: LD_STRING p
35959: EQUAL
35960: IFFALSE 35970
// result := true ;
35962: LD_ADDR_VAR 0 2
35966: PUSH
35967: LD_INT 1
35969: ST_TO_ADDR
// end ;
35970: LD_VAR 0 2
35974: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35975: LD_INT 0
35977: PPUSH
35978: PPUSH
35979: PPUSH
35980: PPUSH
// if pos < 1 then
35981: LD_VAR 0 2
35985: PUSH
35986: LD_INT 1
35988: LESS
35989: IFFALSE 35993
// exit ;
35991: GO 36296
// if pos = 1 then
35993: LD_VAR 0 2
35997: PUSH
35998: LD_INT 1
36000: EQUAL
36001: IFFALSE 36034
// result := Replace ( arr , pos [ 1 ] , value ) else
36003: LD_ADDR_VAR 0 4
36007: PUSH
36008: LD_VAR 0 1
36012: PPUSH
36013: LD_VAR 0 2
36017: PUSH
36018: LD_INT 1
36020: ARRAY
36021: PPUSH
36022: LD_VAR 0 3
36026: PPUSH
36027: CALL_OW 1
36031: ST_TO_ADDR
36032: GO 36296
// begin tmp := arr ;
36034: LD_ADDR_VAR 0 6
36038: PUSH
36039: LD_VAR 0 1
36043: ST_TO_ADDR
// s_arr := [ tmp ] ;
36044: LD_ADDR_VAR 0 7
36048: PUSH
36049: LD_VAR 0 6
36053: PUSH
36054: EMPTY
36055: LIST
36056: ST_TO_ADDR
// for i = 1 to pos - 1 do
36057: LD_ADDR_VAR 0 5
36061: PUSH
36062: DOUBLE
36063: LD_INT 1
36065: DEC
36066: ST_TO_ADDR
36067: LD_VAR 0 2
36071: PUSH
36072: LD_INT 1
36074: MINUS
36075: PUSH
36076: FOR_TO
36077: IFFALSE 36122
// begin tmp := tmp [ pos [ i ] ] ;
36079: LD_ADDR_VAR 0 6
36083: PUSH
36084: LD_VAR 0 6
36088: PUSH
36089: LD_VAR 0 2
36093: PUSH
36094: LD_VAR 0 5
36098: ARRAY
36099: ARRAY
36100: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36101: LD_ADDR_VAR 0 7
36105: PUSH
36106: LD_VAR 0 7
36110: PUSH
36111: LD_VAR 0 6
36115: PUSH
36116: EMPTY
36117: LIST
36118: ADD
36119: ST_TO_ADDR
// end ;
36120: GO 36076
36122: POP
36123: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36124: LD_ADDR_VAR 0 6
36128: PUSH
36129: LD_VAR 0 6
36133: PPUSH
36134: LD_VAR 0 2
36138: PUSH
36139: LD_VAR 0 2
36143: ARRAY
36144: PPUSH
36145: LD_VAR 0 3
36149: PPUSH
36150: CALL_OW 1
36154: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36155: LD_ADDR_VAR 0 7
36159: PUSH
36160: LD_VAR 0 7
36164: PPUSH
36165: LD_VAR 0 7
36169: PPUSH
36170: LD_VAR 0 6
36174: PPUSH
36175: CALL_OW 1
36179: ST_TO_ADDR
// for i = s_arr downto 2 do
36180: LD_ADDR_VAR 0 5
36184: PUSH
36185: DOUBLE
36186: LD_VAR 0 7
36190: INC
36191: ST_TO_ADDR
36192: LD_INT 2
36194: PUSH
36195: FOR_DOWNTO
36196: IFFALSE 36280
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36198: LD_ADDR_VAR 0 6
36202: PUSH
36203: LD_VAR 0 7
36207: PUSH
36208: LD_VAR 0 5
36212: PUSH
36213: LD_INT 1
36215: MINUS
36216: ARRAY
36217: PPUSH
36218: LD_VAR 0 2
36222: PUSH
36223: LD_VAR 0 5
36227: PUSH
36228: LD_INT 1
36230: MINUS
36231: ARRAY
36232: PPUSH
36233: LD_VAR 0 7
36237: PUSH
36238: LD_VAR 0 5
36242: ARRAY
36243: PPUSH
36244: CALL_OW 1
36248: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36249: LD_ADDR_VAR 0 7
36253: PUSH
36254: LD_VAR 0 7
36258: PPUSH
36259: LD_VAR 0 5
36263: PUSH
36264: LD_INT 1
36266: MINUS
36267: PPUSH
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 1
36277: ST_TO_ADDR
// end ;
36278: GO 36195
36280: POP
36281: POP
// result := s_arr [ 1 ] ;
36282: LD_ADDR_VAR 0 4
36286: PUSH
36287: LD_VAR 0 7
36291: PUSH
36292: LD_INT 1
36294: ARRAY
36295: ST_TO_ADDR
// end ; end ;
36296: LD_VAR 0 4
36300: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36301: LD_INT 0
36303: PPUSH
36304: PPUSH
// if not list then
36305: LD_VAR 0 1
36309: NOT
36310: IFFALSE 36314
// exit ;
36312: GO 36405
// i := list [ pos1 ] ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_VAR 0 1
36323: PUSH
36324: LD_VAR 0 2
36328: ARRAY
36329: ST_TO_ADDR
// if not i then
36330: LD_VAR 0 5
36334: NOT
36335: IFFALSE 36339
// exit ;
36337: GO 36405
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36339: LD_ADDR_VAR 0 1
36343: PUSH
36344: LD_VAR 0 1
36348: PPUSH
36349: LD_VAR 0 2
36353: PPUSH
36354: LD_VAR 0 1
36358: PUSH
36359: LD_VAR 0 3
36363: ARRAY
36364: PPUSH
36365: CALL_OW 1
36369: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36370: LD_ADDR_VAR 0 1
36374: PUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: LD_VAR 0 3
36384: PPUSH
36385: LD_VAR 0 5
36389: PPUSH
36390: CALL_OW 1
36394: ST_TO_ADDR
// result := list ;
36395: LD_ADDR_VAR 0 4
36399: PUSH
36400: LD_VAR 0 1
36404: ST_TO_ADDR
// end ;
36405: LD_VAR 0 4
36409: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36410: LD_INT 0
36412: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36413: LD_ADDR_VAR 0 5
36417: PUSH
36418: LD_VAR 0 1
36422: PPUSH
36423: CALL_OW 250
36427: PPUSH
36428: LD_VAR 0 1
36432: PPUSH
36433: CALL_OW 251
36437: PPUSH
36438: LD_VAR 0 2
36442: PPUSH
36443: LD_VAR 0 3
36447: PPUSH
36448: LD_VAR 0 4
36452: PPUSH
36453: CALL 36463 0 5
36457: ST_TO_ADDR
// end ;
36458: LD_VAR 0 5
36462: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36463: LD_INT 0
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
// if not list then
36469: LD_VAR 0 3
36473: NOT
36474: IFFALSE 36478
// exit ;
36476: GO 36866
// result := [ ] ;
36478: LD_ADDR_VAR 0 6
36482: PUSH
36483: EMPTY
36484: ST_TO_ADDR
// for i in list do
36485: LD_ADDR_VAR 0 7
36489: PUSH
36490: LD_VAR 0 3
36494: PUSH
36495: FOR_IN
36496: IFFALSE 36698
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36498: LD_ADDR_VAR 0 9
36502: PUSH
36503: LD_VAR 0 7
36507: PPUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: LD_VAR 0 2
36517: PPUSH
36518: CALL_OW 297
36522: ST_TO_ADDR
// if not result then
36523: LD_VAR 0 6
36527: NOT
36528: IFFALSE 36554
// result := [ [ i , tmp ] ] else
36530: LD_ADDR_VAR 0 6
36534: PUSH
36535: LD_VAR 0 7
36539: PUSH
36540: LD_VAR 0 9
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: ST_TO_ADDR
36552: GO 36696
// begin if result [ result ] [ 2 ] < tmp then
36554: LD_VAR 0 6
36558: PUSH
36559: LD_VAR 0 6
36563: ARRAY
36564: PUSH
36565: LD_INT 2
36567: ARRAY
36568: PUSH
36569: LD_VAR 0 9
36573: LESS
36574: IFFALSE 36616
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36576: LD_ADDR_VAR 0 6
36580: PUSH
36581: LD_VAR 0 6
36585: PPUSH
36586: LD_VAR 0 6
36590: PUSH
36591: LD_INT 1
36593: PLUS
36594: PPUSH
36595: LD_VAR 0 7
36599: PUSH
36600: LD_VAR 0 9
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PPUSH
36609: CALL_OW 2
36613: ST_TO_ADDR
36614: GO 36696
// for j = 1 to result do
36616: LD_ADDR_VAR 0 8
36620: PUSH
36621: DOUBLE
36622: LD_INT 1
36624: DEC
36625: ST_TO_ADDR
36626: LD_VAR 0 6
36630: PUSH
36631: FOR_TO
36632: IFFALSE 36694
// begin if tmp < result [ j ] [ 2 ] then
36634: LD_VAR 0 9
36638: PUSH
36639: LD_VAR 0 6
36643: PUSH
36644: LD_VAR 0 8
36648: ARRAY
36649: PUSH
36650: LD_INT 2
36652: ARRAY
36653: LESS
36654: IFFALSE 36692
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36656: LD_ADDR_VAR 0 6
36660: PUSH
36661: LD_VAR 0 6
36665: PPUSH
36666: LD_VAR 0 8
36670: PPUSH
36671: LD_VAR 0 7
36675: PUSH
36676: LD_VAR 0 9
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PPUSH
36685: CALL_OW 2
36689: ST_TO_ADDR
// break ;
36690: GO 36694
// end ; end ;
36692: GO 36631
36694: POP
36695: POP
// end ; end ;
36696: GO 36495
36698: POP
36699: POP
// if result and not asc then
36700: LD_VAR 0 6
36704: PUSH
36705: LD_VAR 0 4
36709: NOT
36710: AND
36711: IFFALSE 36786
// begin tmp := result ;
36713: LD_ADDR_VAR 0 9
36717: PUSH
36718: LD_VAR 0 6
36722: ST_TO_ADDR
// for i = tmp downto 1 do
36723: LD_ADDR_VAR 0 7
36727: PUSH
36728: DOUBLE
36729: LD_VAR 0 9
36733: INC
36734: ST_TO_ADDR
36735: LD_INT 1
36737: PUSH
36738: FOR_DOWNTO
36739: IFFALSE 36784
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36741: LD_ADDR_VAR 0 6
36745: PUSH
36746: LD_VAR 0 6
36750: PPUSH
36751: LD_VAR 0 9
36755: PUSH
36756: LD_VAR 0 7
36760: MINUS
36761: PUSH
36762: LD_INT 1
36764: PLUS
36765: PPUSH
36766: LD_VAR 0 9
36770: PUSH
36771: LD_VAR 0 7
36775: ARRAY
36776: PPUSH
36777: CALL_OW 1
36781: ST_TO_ADDR
36782: GO 36738
36784: POP
36785: POP
// end ; tmp := [ ] ;
36786: LD_ADDR_VAR 0 9
36790: PUSH
36791: EMPTY
36792: ST_TO_ADDR
// if mode then
36793: LD_VAR 0 5
36797: IFFALSE 36866
// begin for i = 1 to result do
36799: LD_ADDR_VAR 0 7
36803: PUSH
36804: DOUBLE
36805: LD_INT 1
36807: DEC
36808: ST_TO_ADDR
36809: LD_VAR 0 6
36813: PUSH
36814: FOR_TO
36815: IFFALSE 36854
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36817: LD_ADDR_VAR 0 9
36821: PUSH
36822: LD_VAR 0 9
36826: PPUSH
36827: LD_VAR 0 7
36831: PPUSH
36832: LD_VAR 0 6
36836: PUSH
36837: LD_VAR 0 7
36841: ARRAY
36842: PUSH
36843: LD_INT 1
36845: ARRAY
36846: PPUSH
36847: CALL_OW 1
36851: ST_TO_ADDR
36852: GO 36814
36854: POP
36855: POP
// result := tmp ;
36856: LD_ADDR_VAR 0 6
36860: PUSH
36861: LD_VAR 0 9
36865: ST_TO_ADDR
// end ; end ;
36866: LD_VAR 0 6
36870: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36871: LD_INT 0
36873: PPUSH
36874: PPUSH
36875: PPUSH
36876: PPUSH
36877: PPUSH
36878: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36879: LD_ADDR_VAR 0 5
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: EMPTY
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// if not x or not y then
36901: LD_VAR 0 2
36905: NOT
36906: PUSH
36907: LD_VAR 0 3
36911: NOT
36912: OR
36913: IFFALSE 36917
// exit ;
36915: GO 38563
// if not range then
36917: LD_VAR 0 4
36921: NOT
36922: IFFALSE 36932
// range := 10 ;
36924: LD_ADDR_VAR 0 4
36928: PUSH
36929: LD_INT 10
36931: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36932: LD_ADDR_VAR 0 8
36936: PUSH
36937: LD_INT 81
36939: PUSH
36940: LD_VAR 0 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 92
36951: PUSH
36952: LD_VAR 0 2
36956: PUSH
36957: LD_VAR 0 3
36961: PUSH
36962: LD_VAR 0 4
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 3
36975: PUSH
36976: LD_INT 21
36978: PUSH
36979: LD_INT 3
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: PPUSH
36995: CALL_OW 69
36999: ST_TO_ADDR
// if not tmp then
37000: LD_VAR 0 8
37004: NOT
37005: IFFALSE 37009
// exit ;
37007: GO 38563
// for i in tmp do
37009: LD_ADDR_VAR 0 6
37013: PUSH
37014: LD_VAR 0 8
37018: PUSH
37019: FOR_IN
37020: IFFALSE 38538
// begin points := [ 0 , 0 , 0 ] ;
37022: LD_ADDR_VAR 0 9
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// bpoints := 1 ;
37041: LD_ADDR_VAR 0 10
37045: PUSH
37046: LD_INT 1
37048: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37049: LD_VAR 0 6
37053: PPUSH
37054: CALL_OW 247
37058: PUSH
37059: LD_INT 1
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37645
37067: POP
// begin if GetClass ( i ) = 1 then
37068: LD_VAR 0 6
37072: PPUSH
37073: CALL_OW 257
37077: PUSH
37078: LD_INT 1
37080: EQUAL
37081: IFFALSE 37102
// points := [ 10 , 5 , 3 ] ;
37083: LD_ADDR_VAR 0 9
37087: PUSH
37088: LD_INT 10
37090: PUSH
37091: LD_INT 5
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37102: LD_VAR 0 6
37106: PPUSH
37107: CALL_OW 257
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 3
37117: PUSH
37118: LD_INT 4
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: LIST
37125: IN
37126: IFFALSE 37147
// points := [ 3 , 2 , 1 ] ;
37128: LD_ADDR_VAR 0 9
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37147: LD_VAR 0 6
37151: PPUSH
37152: CALL_OW 257
37156: PUSH
37157: LD_INT 5
37159: EQUAL
37160: IFFALSE 37181
// points := [ 130 , 5 , 2 ] ;
37162: LD_ADDR_VAR 0 9
37166: PUSH
37167: LD_INT 130
37169: PUSH
37170: LD_INT 5
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37181: LD_VAR 0 6
37185: PPUSH
37186: CALL_OW 257
37190: PUSH
37191: LD_INT 8
37193: EQUAL
37194: IFFALSE 37215
// points := [ 35 , 35 , 30 ] ;
37196: LD_ADDR_VAR 0 9
37200: PUSH
37201: LD_INT 35
37203: PUSH
37204: LD_INT 35
37206: PUSH
37207: LD_INT 30
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37215: LD_VAR 0 6
37219: PPUSH
37220: CALL_OW 257
37224: PUSH
37225: LD_INT 9
37227: EQUAL
37228: IFFALSE 37249
// points := [ 20 , 55 , 40 ] ;
37230: LD_ADDR_VAR 0 9
37234: PUSH
37235: LD_INT 20
37237: PUSH
37238: LD_INT 55
37240: PUSH
37241: LD_INT 40
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37249: LD_VAR 0 6
37253: PPUSH
37254: CALL_OW 257
37258: PUSH
37259: LD_INT 12
37261: PUSH
37262: LD_INT 16
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: IN
37269: IFFALSE 37290
// points := [ 5 , 3 , 2 ] ;
37271: LD_ADDR_VAR 0 9
37275: PUSH
37276: LD_INT 5
37278: PUSH
37279: LD_INT 3
37281: PUSH
37282: LD_INT 2
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37290: LD_VAR 0 6
37294: PPUSH
37295: CALL_OW 257
37299: PUSH
37300: LD_INT 17
37302: EQUAL
37303: IFFALSE 37324
// points := [ 100 , 50 , 75 ] ;
37305: LD_ADDR_VAR 0 9
37309: PUSH
37310: LD_INT 100
37312: PUSH
37313: LD_INT 50
37315: PUSH
37316: LD_INT 75
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37324: LD_VAR 0 6
37328: PPUSH
37329: CALL_OW 257
37333: PUSH
37334: LD_INT 15
37336: EQUAL
37337: IFFALSE 37358
// points := [ 10 , 5 , 3 ] ;
37339: LD_ADDR_VAR 0 9
37343: PUSH
37344: LD_INT 10
37346: PUSH
37347: LD_INT 5
37349: PUSH
37350: LD_INT 3
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37358: LD_VAR 0 6
37362: PPUSH
37363: CALL_OW 257
37367: PUSH
37368: LD_INT 14
37370: EQUAL
37371: IFFALSE 37392
// points := [ 10 , 0 , 0 ] ;
37373: LD_ADDR_VAR 0 9
37377: PUSH
37378: LD_INT 10
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37392: LD_VAR 0 6
37396: PPUSH
37397: CALL_OW 257
37401: PUSH
37402: LD_INT 11
37404: EQUAL
37405: IFFALSE 37426
// points := [ 30 , 10 , 5 ] ;
37407: LD_ADDR_VAR 0 9
37411: PUSH
37412: LD_INT 30
37414: PUSH
37415: LD_INT 10
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37426: LD_VAR 0 1
37430: PPUSH
37431: LD_INT 5
37433: PPUSH
37434: CALL_OW 321
37438: PUSH
37439: LD_INT 2
37441: EQUAL
37442: IFFALSE 37459
// bpoints := bpoints * 1.8 ;
37444: LD_ADDR_VAR 0 10
37448: PUSH
37449: LD_VAR 0 10
37453: PUSH
37454: LD_REAL  1.80000000000000E+0000
37457: MUL
37458: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37459: LD_VAR 0 6
37463: PPUSH
37464: CALL_OW 257
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: LD_INT 2
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: LD_INT 4
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: IN
37487: PUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: LD_INT 51
37495: PPUSH
37496: CALL_OW 321
37500: PUSH
37501: LD_INT 2
37503: EQUAL
37504: AND
37505: IFFALSE 37522
// bpoints := bpoints * 1.2 ;
37507: LD_ADDR_VAR 0 10
37511: PUSH
37512: LD_VAR 0 10
37516: PUSH
37517: LD_REAL  1.20000000000000E+0000
37520: MUL
37521: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 257
37531: PUSH
37532: LD_INT 5
37534: PUSH
37535: LD_INT 7
37537: PUSH
37538: LD_INT 9
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: IN
37546: PUSH
37547: LD_VAR 0 1
37551: PPUSH
37552: LD_INT 52
37554: PPUSH
37555: CALL_OW 321
37559: PUSH
37560: LD_INT 2
37562: EQUAL
37563: AND
37564: IFFALSE 37581
// bpoints := bpoints * 1.5 ;
37566: LD_ADDR_VAR 0 10
37570: PUSH
37571: LD_VAR 0 10
37575: PUSH
37576: LD_REAL  1.50000000000000E+0000
37579: MUL
37580: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37581: LD_VAR 0 1
37585: PPUSH
37586: LD_INT 66
37588: PPUSH
37589: CALL_OW 321
37593: PUSH
37594: LD_INT 2
37596: EQUAL
37597: IFFALSE 37614
// bpoints := bpoints * 1.1 ;
37599: LD_ADDR_VAR 0 10
37603: PUSH
37604: LD_VAR 0 10
37608: PUSH
37609: LD_REAL  1.10000000000000E+0000
37612: MUL
37613: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37614: LD_ADDR_VAR 0 10
37618: PUSH
37619: LD_VAR 0 10
37623: PUSH
37624: LD_VAR 0 6
37628: PPUSH
37629: LD_INT 1
37631: PPUSH
37632: CALL_OW 259
37636: PUSH
37637: LD_REAL  1.15000000000000E+0000
37640: MUL
37641: MUL
37642: ST_TO_ADDR
// end ; unit_vehicle :
37643: GO 38467
37645: LD_INT 2
37647: DOUBLE
37648: EQUAL
37649: IFTRUE 37653
37651: GO 38455
37653: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37654: LD_VAR 0 6
37658: PPUSH
37659: CALL_OW 264
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 42
37669: PUSH
37670: LD_INT 24
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: IN
37678: IFFALSE 37699
// points := [ 25 , 5 , 3 ] ;
37680: LD_ADDR_VAR 0 9
37684: PUSH
37685: LD_INT 25
37687: PUSH
37688: LD_INT 5
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37699: LD_VAR 0 6
37703: PPUSH
37704: CALL_OW 264
37708: PUSH
37709: LD_INT 4
37711: PUSH
37712: LD_INT 43
37714: PUSH
37715: LD_INT 25
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: IN
37723: IFFALSE 37744
// points := [ 40 , 15 , 5 ] ;
37725: LD_ADDR_VAR 0 9
37729: PUSH
37730: LD_INT 40
37732: PUSH
37733: LD_INT 15
37735: PUSH
37736: LD_INT 5
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37744: LD_VAR 0 6
37748: PPUSH
37749: CALL_OW 264
37753: PUSH
37754: LD_INT 3
37756: PUSH
37757: LD_INT 23
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: IN
37764: IFFALSE 37785
// points := [ 7 , 25 , 8 ] ;
37766: LD_ADDR_VAR 0 9
37770: PUSH
37771: LD_INT 7
37773: PUSH
37774: LD_INT 25
37776: PUSH
37777: LD_INT 8
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37785: LD_VAR 0 6
37789: PPUSH
37790: CALL_OW 264
37794: PUSH
37795: LD_INT 5
37797: PUSH
37798: LD_INT 27
37800: PUSH
37801: LD_INT 44
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: IN
37809: IFFALSE 37830
// points := [ 14 , 50 , 16 ] ;
37811: LD_ADDR_VAR 0 9
37815: PUSH
37816: LD_INT 14
37818: PUSH
37819: LD_INT 50
37821: PUSH
37822: LD_INT 16
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37830: LD_VAR 0 6
37834: PPUSH
37835: CALL_OW 264
37839: PUSH
37840: LD_INT 6
37842: PUSH
37843: LD_INT 46
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: IN
37850: IFFALSE 37871
// points := [ 32 , 120 , 70 ] ;
37852: LD_ADDR_VAR 0 9
37856: PUSH
37857: LD_INT 32
37859: PUSH
37860: LD_INT 120
37862: PUSH
37863: LD_INT 70
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37871: LD_VAR 0 6
37875: PPUSH
37876: CALL_OW 264
37880: PUSH
37881: LD_INT 7
37883: PUSH
37884: LD_INT 28
37886: PUSH
37887: LD_INT 45
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: IN
37895: IFFALSE 37916
// points := [ 35 , 20 , 45 ] ;
37897: LD_ADDR_VAR 0 9
37901: PUSH
37902: LD_INT 35
37904: PUSH
37905: LD_INT 20
37907: PUSH
37908: LD_INT 45
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37916: LD_VAR 0 6
37920: PPUSH
37921: CALL_OW 264
37925: PUSH
37926: LD_INT 47
37928: PUSH
37929: EMPTY
37930: LIST
37931: IN
37932: IFFALSE 37953
// points := [ 67 , 45 , 75 ] ;
37934: LD_ADDR_VAR 0 9
37938: PUSH
37939: LD_INT 67
37941: PUSH
37942: LD_INT 45
37944: PUSH
37945: LD_INT 75
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37953: LD_VAR 0 6
37957: PPUSH
37958: CALL_OW 264
37962: PUSH
37963: LD_INT 26
37965: PUSH
37966: EMPTY
37967: LIST
37968: IN
37969: IFFALSE 37990
// points := [ 120 , 30 , 80 ] ;
37971: LD_ADDR_VAR 0 9
37975: PUSH
37976: LD_INT 120
37978: PUSH
37979: LD_INT 30
37981: PUSH
37982: LD_INT 80
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37990: LD_VAR 0 6
37994: PPUSH
37995: CALL_OW 264
37999: PUSH
38000: LD_INT 22
38002: PUSH
38003: EMPTY
38004: LIST
38005: IN
38006: IFFALSE 38027
// points := [ 40 , 1 , 1 ] ;
38008: LD_ADDR_VAR 0 9
38012: PUSH
38013: LD_INT 40
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38027: LD_VAR 0 6
38031: PPUSH
38032: CALL_OW 264
38036: PUSH
38037: LD_INT 29
38039: PUSH
38040: EMPTY
38041: LIST
38042: IN
38043: IFFALSE 38064
// points := [ 70 , 200 , 400 ] ;
38045: LD_ADDR_VAR 0 9
38049: PUSH
38050: LD_INT 70
38052: PUSH
38053: LD_INT 200
38055: PUSH
38056: LD_INT 400
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38064: LD_VAR 0 6
38068: PPUSH
38069: CALL_OW 264
38073: PUSH
38074: LD_INT 14
38076: PUSH
38077: LD_INT 53
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: IN
38084: IFFALSE 38105
// points := [ 40 , 10 , 20 ] ;
38086: LD_ADDR_VAR 0 9
38090: PUSH
38091: LD_INT 40
38093: PUSH
38094: LD_INT 10
38096: PUSH
38097: LD_INT 20
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38105: LD_VAR 0 6
38109: PPUSH
38110: CALL_OW 264
38114: PUSH
38115: LD_INT 9
38117: PUSH
38118: EMPTY
38119: LIST
38120: IN
38121: IFFALSE 38142
// points := [ 5 , 70 , 20 ] ;
38123: LD_ADDR_VAR 0 9
38127: PUSH
38128: LD_INT 5
38130: PUSH
38131: LD_INT 70
38133: PUSH
38134: LD_INT 20
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38142: LD_VAR 0 6
38146: PPUSH
38147: CALL_OW 264
38151: PUSH
38152: LD_INT 10
38154: PUSH
38155: EMPTY
38156: LIST
38157: IN
38158: IFFALSE 38179
// points := [ 35 , 110 , 70 ] ;
38160: LD_ADDR_VAR 0 9
38164: PUSH
38165: LD_INT 35
38167: PUSH
38168: LD_INT 110
38170: PUSH
38171: LD_INT 70
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38179: LD_VAR 0 6
38183: PPUSH
38184: CALL_OW 265
38188: PUSH
38189: LD_INT 25
38191: EQUAL
38192: IFFALSE 38213
// points := [ 80 , 65 , 100 ] ;
38194: LD_ADDR_VAR 0 9
38198: PUSH
38199: LD_INT 80
38201: PUSH
38202: LD_INT 65
38204: PUSH
38205: LD_INT 100
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38213: LD_VAR 0 6
38217: PPUSH
38218: CALL_OW 263
38222: PUSH
38223: LD_INT 1
38225: EQUAL
38226: IFFALSE 38261
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38228: LD_ADDR_VAR 0 10
38232: PUSH
38233: LD_VAR 0 10
38237: PUSH
38238: LD_VAR 0 6
38242: PPUSH
38243: CALL_OW 311
38247: PPUSH
38248: LD_INT 3
38250: PPUSH
38251: CALL_OW 259
38255: PUSH
38256: LD_INT 4
38258: MUL
38259: MUL
38260: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38261: LD_VAR 0 6
38265: PPUSH
38266: CALL_OW 263
38270: PUSH
38271: LD_INT 2
38273: EQUAL
38274: IFFALSE 38325
// begin j := IsControledBy ( i ) ;
38276: LD_ADDR_VAR 0 7
38280: PUSH
38281: LD_VAR 0 6
38285: PPUSH
38286: CALL_OW 312
38290: ST_TO_ADDR
// if j then
38291: LD_VAR 0 7
38295: IFFALSE 38325
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38297: LD_ADDR_VAR 0 10
38301: PUSH
38302: LD_VAR 0 10
38306: PUSH
38307: LD_VAR 0 7
38311: PPUSH
38312: LD_INT 3
38314: PPUSH
38315: CALL_OW 259
38319: PUSH
38320: LD_INT 3
38322: MUL
38323: MUL
38324: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38325: LD_VAR 0 6
38329: PPUSH
38330: CALL_OW 264
38334: PUSH
38335: LD_INT 5
38337: PUSH
38338: LD_INT 6
38340: PUSH
38341: LD_INT 46
38343: PUSH
38344: LD_INT 44
38346: PUSH
38347: LD_INT 47
38349: PUSH
38350: LD_INT 45
38352: PUSH
38353: LD_INT 28
38355: PUSH
38356: LD_INT 7
38358: PUSH
38359: LD_INT 27
38361: PUSH
38362: LD_INT 29
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: IN
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_INT 52
38385: PPUSH
38386: CALL_OW 321
38390: PUSH
38391: LD_INT 2
38393: EQUAL
38394: AND
38395: IFFALSE 38412
// bpoints := bpoints * 1.2 ;
38397: LD_ADDR_VAR 0 10
38401: PUSH
38402: LD_VAR 0 10
38406: PUSH
38407: LD_REAL  1.20000000000000E+0000
38410: MUL
38411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38412: LD_VAR 0 6
38416: PPUSH
38417: CALL_OW 264
38421: PUSH
38422: LD_INT 6
38424: PUSH
38425: LD_INT 46
38427: PUSH
38428: LD_INT 47
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: IN
38436: IFFALSE 38453
// bpoints := bpoints * 1.2 ;
38438: LD_ADDR_VAR 0 10
38442: PUSH
38443: LD_VAR 0 10
38447: PUSH
38448: LD_REAL  1.20000000000000E+0000
38451: MUL
38452: ST_TO_ADDR
// end ; unit_building :
38453: GO 38467
38455: LD_INT 3
38457: DOUBLE
38458: EQUAL
38459: IFTRUE 38463
38461: GO 38466
38463: POP
// ; end ;
38464: GO 38467
38466: POP
// for j = 1 to 3 do
38467: LD_ADDR_VAR 0 7
38471: PUSH
38472: DOUBLE
38473: LD_INT 1
38475: DEC
38476: ST_TO_ADDR
38477: LD_INT 3
38479: PUSH
38480: FOR_TO
38481: IFFALSE 38534
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38483: LD_ADDR_VAR 0 5
38487: PUSH
38488: LD_VAR 0 5
38492: PPUSH
38493: LD_VAR 0 7
38497: PPUSH
38498: LD_VAR 0 5
38502: PUSH
38503: LD_VAR 0 7
38507: ARRAY
38508: PUSH
38509: LD_VAR 0 9
38513: PUSH
38514: LD_VAR 0 7
38518: ARRAY
38519: PUSH
38520: LD_VAR 0 10
38524: MUL
38525: PLUS
38526: PPUSH
38527: CALL_OW 1
38531: ST_TO_ADDR
38532: GO 38480
38534: POP
38535: POP
// end ;
38536: GO 37019
38538: POP
38539: POP
// result := Replace ( result , 4 , tmp ) ;
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: LD_VAR 0 5
38549: PPUSH
38550: LD_INT 4
38552: PPUSH
38553: LD_VAR 0 8
38557: PPUSH
38558: CALL_OW 1
38562: ST_TO_ADDR
// end ;
38563: LD_VAR 0 5
38567: RET
// export function DangerAtRange ( unit , range ) ; begin
38568: LD_INT 0
38570: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38571: LD_ADDR_VAR 0 3
38575: PUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL_OW 255
38585: PPUSH
38586: LD_VAR 0 1
38590: PPUSH
38591: CALL_OW 250
38595: PPUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 251
38605: PPUSH
38606: LD_VAR 0 2
38610: PPUSH
38611: CALL 36871 0 4
38615: ST_TO_ADDR
// end ;
38616: LD_VAR 0 3
38620: RET
// export function DangerInArea ( side , area ) ; begin
38621: LD_INT 0
38623: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38624: LD_ADDR_VAR 0 3
38628: PUSH
38629: LD_VAR 0 2
38633: PPUSH
38634: LD_INT 81
38636: PUSH
38637: LD_VAR 0 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PPUSH
38646: CALL_OW 70
38650: ST_TO_ADDR
// end ;
38651: LD_VAR 0 3
38655: RET
// export function IsExtension ( b ) ; begin
38656: LD_INT 0
38658: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38659: LD_ADDR_VAR 0 2
38663: PUSH
38664: LD_VAR 0 1
38668: PUSH
38669: LD_INT 23
38671: PUSH
38672: LD_INT 20
38674: PUSH
38675: LD_INT 22
38677: PUSH
38678: LD_INT 17
38680: PUSH
38681: LD_INT 24
38683: PUSH
38684: LD_INT 21
38686: PUSH
38687: LD_INT 19
38689: PUSH
38690: LD_INT 16
38692: PUSH
38693: LD_INT 25
38695: PUSH
38696: LD_INT 18
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: IN
38711: ST_TO_ADDR
// end ;
38712: LD_VAR 0 2
38716: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38717: LD_INT 0
38719: PPUSH
38720: PPUSH
38721: PPUSH
// result := [ ] ;
38722: LD_ADDR_VAR 0 3
38726: PUSH
38727: EMPTY
38728: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38729: LD_ADDR_VAR 0 4
38733: PUSH
38734: LD_VAR 0 2
38738: PPUSH
38739: LD_INT 21
38741: PUSH
38742: LD_INT 3
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PPUSH
38749: CALL_OW 70
38753: ST_TO_ADDR
// if not tmp then
38754: LD_VAR 0 4
38758: NOT
38759: IFFALSE 38763
// exit ;
38761: GO 38821
// for i in tmp do
38763: LD_ADDR_VAR 0 5
38767: PUSH
38768: LD_VAR 0 4
38772: PUSH
38773: FOR_IN
38774: IFFALSE 38809
// if GetBase ( i ) <> base then
38776: LD_VAR 0 5
38780: PPUSH
38781: CALL_OW 274
38785: PUSH
38786: LD_VAR 0 1
38790: NONEQUAL
38791: IFFALSE 38807
// ComLinkToBase ( base , i ) ;
38793: LD_VAR 0 1
38797: PPUSH
38798: LD_VAR 0 5
38802: PPUSH
38803: CALL_OW 169
38807: GO 38773
38809: POP
38810: POP
// result := tmp ;
38811: LD_ADDR_VAR 0 3
38815: PUSH
38816: LD_VAR 0 4
38820: ST_TO_ADDR
// end ;
38821: LD_VAR 0 3
38825: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38826: LD_INT 0
38828: PPUSH
38829: PPUSH
// if BuildingStatus ( b ) = bs_build then
38830: LD_VAR 0 2
38834: PPUSH
38835: CALL_OW 461
38839: PUSH
38840: LD_INT 1
38842: EQUAL
38843: IFFALSE 38903
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38845: LD_VAR 0 1
38849: PPUSH
38850: LD_STRING h
38852: PUSH
38853: LD_VAR 0 2
38857: PPUSH
38858: CALL_OW 250
38862: PUSH
38863: LD_VAR 0 2
38867: PPUSH
38868: CALL_OW 251
38872: PUSH
38873: LD_VAR 0 2
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: PUSH
38896: EMPTY
38897: LIST
38898: PPUSH
38899: CALL_OW 446
// end ;
38903: LD_VAR 0 3
38907: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38908: LD_INT 0
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38916: LD_VAR 0 1
38920: NOT
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 263
38931: PUSH
38932: LD_INT 2
38934: EQUAL
38935: NOT
38936: OR
38937: IFFALSE 38941
// exit ;
38939: GO 39257
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38941: LD_ADDR_VAR 0 6
38945: PUSH
38946: LD_INT 22
38948: PUSH
38949: LD_VAR 0 1
38953: PPUSH
38954: CALL_OW 255
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 30
38968: PUSH
38969: LD_INT 36
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 34
38978: PUSH
38979: LD_INT 31
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PPUSH
38995: CALL_OW 69
38999: ST_TO_ADDR
// if not tmp then
39000: LD_VAR 0 6
39004: NOT
39005: IFFALSE 39009
// exit ;
39007: GO 39257
// result := [ ] ;
39009: LD_ADDR_VAR 0 2
39013: PUSH
39014: EMPTY
39015: ST_TO_ADDR
// for i in tmp do
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: LD_VAR 0 6
39025: PUSH
39026: FOR_IN
39027: IFFALSE 39098
// begin t := UnitsInside ( i ) ;
39029: LD_ADDR_VAR 0 4
39033: PUSH
39034: LD_VAR 0 3
39038: PPUSH
39039: CALL_OW 313
39043: ST_TO_ADDR
// if t then
39044: LD_VAR 0 4
39048: IFFALSE 39096
// for j in t do
39050: LD_ADDR_VAR 0 7
39054: PUSH
39055: LD_VAR 0 4
39059: PUSH
39060: FOR_IN
39061: IFFALSE 39094
// result := Insert ( result , result + 1 , j ) ;
39063: LD_ADDR_VAR 0 2
39067: PUSH
39068: LD_VAR 0 2
39072: PPUSH
39073: LD_VAR 0 2
39077: PUSH
39078: LD_INT 1
39080: PLUS
39081: PPUSH
39082: LD_VAR 0 7
39086: PPUSH
39087: CALL_OW 2
39091: ST_TO_ADDR
39092: GO 39060
39094: POP
39095: POP
// end ;
39096: GO 39026
39098: POP
39099: POP
// if not result then
39100: LD_VAR 0 2
39104: NOT
39105: IFFALSE 39109
// exit ;
39107: GO 39257
// mech := result [ 1 ] ;
39109: LD_ADDR_VAR 0 5
39113: PUSH
39114: LD_VAR 0 2
39118: PUSH
39119: LD_INT 1
39121: ARRAY
39122: ST_TO_ADDR
// if result > 1 then
39123: LD_VAR 0 2
39127: PUSH
39128: LD_INT 1
39130: GREATER
39131: IFFALSE 39243
// for i = 2 to result do
39133: LD_ADDR_VAR 0 3
39137: PUSH
39138: DOUBLE
39139: LD_INT 2
39141: DEC
39142: ST_TO_ADDR
39143: LD_VAR 0 2
39147: PUSH
39148: FOR_TO
39149: IFFALSE 39241
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39151: LD_ADDR_VAR 0 4
39155: PUSH
39156: LD_VAR 0 2
39160: PUSH
39161: LD_VAR 0 3
39165: ARRAY
39166: PPUSH
39167: LD_INT 3
39169: PPUSH
39170: CALL_OW 259
39174: PUSH
39175: LD_VAR 0 2
39179: PUSH
39180: LD_VAR 0 3
39184: ARRAY
39185: PPUSH
39186: CALL_OW 432
39190: MINUS
39191: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39192: LD_VAR 0 4
39196: PUSH
39197: LD_VAR 0 5
39201: PPUSH
39202: LD_INT 3
39204: PPUSH
39205: CALL_OW 259
39209: PUSH
39210: LD_VAR 0 5
39214: PPUSH
39215: CALL_OW 432
39219: MINUS
39220: GREATEREQUAL
39221: IFFALSE 39239
// mech := result [ i ] ;
39223: LD_ADDR_VAR 0 5
39227: PUSH
39228: LD_VAR 0 2
39232: PUSH
39233: LD_VAR 0 3
39237: ARRAY
39238: ST_TO_ADDR
// end ;
39239: GO 39148
39241: POP
39242: POP
// ComLinkTo ( vehicle , mech ) ;
39243: LD_VAR 0 1
39247: PPUSH
39248: LD_VAR 0 5
39252: PPUSH
39253: CALL_OW 135
// end ;
39257: LD_VAR 0 2
39261: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39262: LD_INT 0
39264: PPUSH
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
39272: PPUSH
39273: PPUSH
39274: PPUSH
39275: PPUSH
39276: PPUSH
// result := [ ] ;
39277: LD_ADDR_VAR 0 7
39281: PUSH
39282: EMPTY
39283: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39284: LD_VAR 0 1
39288: PPUSH
39289: CALL_OW 266
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: IN
39304: NOT
39305: IFFALSE 39309
// exit ;
39307: GO 40940
// if name then
39309: LD_VAR 0 3
39313: IFFALSE 39329
// SetBName ( base_dep , name ) ;
39315: LD_VAR 0 1
39319: PPUSH
39320: LD_VAR 0 3
39324: PPUSH
39325: CALL_OW 500
// base := GetBase ( base_dep ) ;
39329: LD_ADDR_VAR 0 15
39333: PUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 274
39343: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39344: LD_ADDR_VAR 0 16
39348: PUSH
39349: LD_VAR 0 1
39353: PPUSH
39354: CALL_OW 255
39358: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39359: LD_ADDR_VAR 0 17
39363: PUSH
39364: LD_VAR 0 1
39368: PPUSH
39369: CALL_OW 248
39373: ST_TO_ADDR
// if sources then
39374: LD_VAR 0 5
39378: IFFALSE 39425
// for i = 1 to 3 do
39380: LD_ADDR_VAR 0 8
39384: PUSH
39385: DOUBLE
39386: LD_INT 1
39388: DEC
39389: ST_TO_ADDR
39390: LD_INT 3
39392: PUSH
39393: FOR_TO
39394: IFFALSE 39423
// AddResourceType ( base , i , sources [ i ] ) ;
39396: LD_VAR 0 15
39400: PPUSH
39401: LD_VAR 0 8
39405: PPUSH
39406: LD_VAR 0 5
39410: PUSH
39411: LD_VAR 0 8
39415: ARRAY
39416: PPUSH
39417: CALL_OW 276
39421: GO 39393
39423: POP
39424: POP
// buildings := GetBaseBuildings ( base , area ) ;
39425: LD_ADDR_VAR 0 18
39429: PUSH
39430: LD_VAR 0 15
39434: PPUSH
39435: LD_VAR 0 2
39439: PPUSH
39440: CALL 38717 0 2
39444: ST_TO_ADDR
// InitHc ;
39445: CALL_OW 19
// InitUc ;
39449: CALL_OW 18
// uc_side := side ;
39453: LD_ADDR_OWVAR 20
39457: PUSH
39458: LD_VAR 0 16
39462: ST_TO_ADDR
// uc_nation := nation ;
39463: LD_ADDR_OWVAR 21
39467: PUSH
39468: LD_VAR 0 17
39472: ST_TO_ADDR
// if buildings then
39473: LD_VAR 0 18
39477: IFFALSE 40799
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39479: LD_ADDR_VAR 0 19
39483: PUSH
39484: LD_VAR 0 18
39488: PPUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 30
39494: PUSH
39495: LD_INT 29
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 30
39504: PUSH
39505: LD_INT 30
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: PPUSH
39517: CALL_OW 72
39521: ST_TO_ADDR
// if tmp then
39522: LD_VAR 0 19
39526: IFFALSE 39574
// for i in tmp do
39528: LD_ADDR_VAR 0 8
39532: PUSH
39533: LD_VAR 0 19
39537: PUSH
39538: FOR_IN
39539: IFFALSE 39572
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39541: LD_VAR 0 8
39545: PPUSH
39546: CALL_OW 250
39550: PPUSH
39551: LD_VAR 0 8
39555: PPUSH
39556: CALL_OW 251
39560: PPUSH
39561: LD_VAR 0 16
39565: PPUSH
39566: CALL_OW 441
39570: GO 39538
39572: POP
39573: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39574: LD_VAR 0 18
39578: PPUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 30
39584: PUSH
39585: LD_INT 32
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 30
39594: PUSH
39595: LD_INT 33
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: PPUSH
39607: CALL_OW 72
39611: IFFALSE 39699
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39613: LD_ADDR_VAR 0 8
39617: PUSH
39618: LD_VAR 0 18
39622: PPUSH
39623: LD_INT 2
39625: PUSH
39626: LD_INT 30
39628: PUSH
39629: LD_INT 32
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 30
39638: PUSH
39639: LD_INT 33
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: PPUSH
39651: CALL_OW 72
39655: PUSH
39656: FOR_IN
39657: IFFALSE 39697
// begin if not GetBWeapon ( i ) then
39659: LD_VAR 0 8
39663: PPUSH
39664: CALL_OW 269
39668: NOT
39669: IFFALSE 39695
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39671: LD_VAR 0 8
39675: PPUSH
39676: LD_VAR 0 8
39680: PPUSH
39681: LD_VAR 0 2
39685: PPUSH
39686: CALL 40945 0 2
39690: PPUSH
39691: CALL_OW 431
// end ;
39695: GO 39656
39697: POP
39698: POP
// end ; for i = 1 to personel do
39699: LD_ADDR_VAR 0 8
39703: PUSH
39704: DOUBLE
39705: LD_INT 1
39707: DEC
39708: ST_TO_ADDR
39709: LD_VAR 0 6
39713: PUSH
39714: FOR_TO
39715: IFFALSE 40779
// begin if i > 4 then
39717: LD_VAR 0 8
39721: PUSH
39722: LD_INT 4
39724: GREATER
39725: IFFALSE 39729
// break ;
39727: GO 40779
// case i of 1 :
39729: LD_VAR 0 8
39733: PUSH
39734: LD_INT 1
39736: DOUBLE
39737: EQUAL
39738: IFTRUE 39742
39740: GO 39822
39742: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39743: LD_ADDR_VAR 0 12
39747: PUSH
39748: LD_VAR 0 18
39752: PPUSH
39753: LD_INT 22
39755: PUSH
39756: LD_VAR 0 16
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 58
39767: PUSH
39768: EMPTY
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 30
39776: PUSH
39777: LD_INT 32
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 30
39786: PUSH
39787: LD_INT 4
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 30
39796: PUSH
39797: LD_INT 5
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: PPUSH
39815: CALL_OW 72
39819: ST_TO_ADDR
39820: GO 40044
39822: LD_INT 2
39824: DOUBLE
39825: EQUAL
39826: IFTRUE 39830
39828: GO 39892
39830: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39831: LD_ADDR_VAR 0 12
39835: PUSH
39836: LD_VAR 0 18
39840: PPUSH
39841: LD_INT 22
39843: PUSH
39844: LD_VAR 0 16
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 30
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 30
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PPUSH
39885: CALL_OW 72
39889: ST_TO_ADDR
39890: GO 40044
39892: LD_INT 3
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39900
39898: GO 39962
39900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39901: LD_ADDR_VAR 0 12
39905: PUSH
39906: LD_VAR 0 18
39910: PPUSH
39911: LD_INT 22
39913: PUSH
39914: LD_VAR 0 16
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 30
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 30
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PPUSH
39955: CALL_OW 72
39959: ST_TO_ADDR
39960: GO 40044
39962: LD_INT 4
39964: DOUBLE
39965: EQUAL
39966: IFTRUE 39970
39968: GO 40043
39970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39971: LD_ADDR_VAR 0 12
39975: PUSH
39976: LD_VAR 0 18
39980: PPUSH
39981: LD_INT 22
39983: PUSH
39984: LD_VAR 0 16
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 30
39998: PUSH
39999: LD_INT 6
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 30
40008: PUSH
40009: LD_INT 7
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 30
40018: PUSH
40019: LD_INT 8
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PPUSH
40036: CALL_OW 72
40040: ST_TO_ADDR
40041: GO 40044
40043: POP
// if i = 1 then
40044: LD_VAR 0 8
40048: PUSH
40049: LD_INT 1
40051: EQUAL
40052: IFFALSE 40163
// begin tmp := [ ] ;
40054: LD_ADDR_VAR 0 19
40058: PUSH
40059: EMPTY
40060: ST_TO_ADDR
// for j in f do
40061: LD_ADDR_VAR 0 9
40065: PUSH
40066: LD_VAR 0 12
40070: PUSH
40071: FOR_IN
40072: IFFALSE 40145
// if GetBType ( j ) = b_bunker then
40074: LD_VAR 0 9
40078: PPUSH
40079: CALL_OW 266
40083: PUSH
40084: LD_INT 32
40086: EQUAL
40087: IFFALSE 40114
// tmp := Insert ( tmp , 1 , j ) else
40089: LD_ADDR_VAR 0 19
40093: PUSH
40094: LD_VAR 0 19
40098: PPUSH
40099: LD_INT 1
40101: PPUSH
40102: LD_VAR 0 9
40106: PPUSH
40107: CALL_OW 2
40111: ST_TO_ADDR
40112: GO 40143
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40114: LD_ADDR_VAR 0 19
40118: PUSH
40119: LD_VAR 0 19
40123: PPUSH
40124: LD_VAR 0 19
40128: PUSH
40129: LD_INT 1
40131: PLUS
40132: PPUSH
40133: LD_VAR 0 9
40137: PPUSH
40138: CALL_OW 2
40142: ST_TO_ADDR
40143: GO 40071
40145: POP
40146: POP
// if tmp then
40147: LD_VAR 0 19
40151: IFFALSE 40163
// f := tmp ;
40153: LD_ADDR_VAR 0 12
40157: PUSH
40158: LD_VAR 0 19
40162: ST_TO_ADDR
// end ; x := personel [ i ] ;
40163: LD_ADDR_VAR 0 13
40167: PUSH
40168: LD_VAR 0 6
40172: PUSH
40173: LD_VAR 0 8
40177: ARRAY
40178: ST_TO_ADDR
// if x = - 1 then
40179: LD_VAR 0 13
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: EQUAL
40188: IFFALSE 40397
// begin for j in f do
40190: LD_ADDR_VAR 0 9
40194: PUSH
40195: LD_VAR 0 12
40199: PUSH
40200: FOR_IN
40201: IFFALSE 40393
// repeat InitHc ;
40203: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40207: LD_VAR 0 9
40211: PPUSH
40212: CALL_OW 266
40216: PUSH
40217: LD_INT 5
40219: EQUAL
40220: IFFALSE 40290
// begin if UnitsInside ( j ) < 3 then
40222: LD_VAR 0 9
40226: PPUSH
40227: CALL_OW 313
40231: PUSH
40232: LD_INT 3
40234: LESS
40235: IFFALSE 40271
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40237: LD_INT 0
40239: PPUSH
40240: LD_INT 5
40242: PUSH
40243: LD_INT 8
40245: PUSH
40246: LD_INT 9
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: PUSH
40254: LD_VAR 0 17
40258: ARRAY
40259: PPUSH
40260: LD_VAR 0 4
40264: PPUSH
40265: CALL_OW 380
40269: GO 40288
// PrepareHuman ( false , i , skill ) ;
40271: LD_INT 0
40273: PPUSH
40274: LD_VAR 0 8
40278: PPUSH
40279: LD_VAR 0 4
40283: PPUSH
40284: CALL_OW 380
// end else
40288: GO 40307
// PrepareHuman ( false , i , skill ) ;
40290: LD_INT 0
40292: PPUSH
40293: LD_VAR 0 8
40297: PPUSH
40298: LD_VAR 0 4
40302: PPUSH
40303: CALL_OW 380
// un := CreateHuman ;
40307: LD_ADDR_VAR 0 14
40311: PUSH
40312: CALL_OW 44
40316: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40317: LD_ADDR_VAR 0 7
40321: PUSH
40322: LD_VAR 0 7
40326: PPUSH
40327: LD_INT 1
40329: PPUSH
40330: LD_VAR 0 14
40334: PPUSH
40335: CALL_OW 2
40339: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40340: LD_VAR 0 14
40344: PPUSH
40345: LD_VAR 0 9
40349: PPUSH
40350: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40354: LD_VAR 0 9
40358: PPUSH
40359: CALL_OW 313
40363: PUSH
40364: LD_INT 6
40366: EQUAL
40367: PUSH
40368: LD_VAR 0 9
40372: PPUSH
40373: CALL_OW 266
40377: PUSH
40378: LD_INT 32
40380: PUSH
40381: LD_INT 31
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: IN
40388: OR
40389: IFFALSE 40203
40391: GO 40200
40393: POP
40394: POP
// end else
40395: GO 40777
// for j = 1 to x do
40397: LD_ADDR_VAR 0 9
40401: PUSH
40402: DOUBLE
40403: LD_INT 1
40405: DEC
40406: ST_TO_ADDR
40407: LD_VAR 0 13
40411: PUSH
40412: FOR_TO
40413: IFFALSE 40775
// begin InitHc ;
40415: CALL_OW 19
// if not f then
40419: LD_VAR 0 12
40423: NOT
40424: IFFALSE 40513
// begin PrepareHuman ( false , i , skill ) ;
40426: LD_INT 0
40428: PPUSH
40429: LD_VAR 0 8
40433: PPUSH
40434: LD_VAR 0 4
40438: PPUSH
40439: CALL_OW 380
// un := CreateHuman ;
40443: LD_ADDR_VAR 0 14
40447: PUSH
40448: CALL_OW 44
40452: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40453: LD_ADDR_VAR 0 7
40457: PUSH
40458: LD_VAR 0 7
40462: PPUSH
40463: LD_INT 1
40465: PPUSH
40466: LD_VAR 0 14
40470: PPUSH
40471: CALL_OW 2
40475: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40476: LD_VAR 0 14
40480: PPUSH
40481: LD_VAR 0 1
40485: PPUSH
40486: CALL_OW 250
40490: PPUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 251
40500: PPUSH
40501: LD_INT 10
40503: PPUSH
40504: LD_INT 0
40506: PPUSH
40507: CALL_OW 50
// continue ;
40511: GO 40412
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40513: LD_VAR 0 12
40517: PUSH
40518: LD_INT 1
40520: ARRAY
40521: PPUSH
40522: CALL_OW 313
40526: PUSH
40527: LD_VAR 0 12
40531: PUSH
40532: LD_INT 1
40534: ARRAY
40535: PPUSH
40536: CALL_OW 266
40540: PUSH
40541: LD_INT 32
40543: PUSH
40544: LD_INT 31
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: IN
40551: AND
40552: PUSH
40553: LD_VAR 0 12
40557: PUSH
40558: LD_INT 1
40560: ARRAY
40561: PPUSH
40562: CALL_OW 313
40566: PUSH
40567: LD_INT 6
40569: EQUAL
40570: OR
40571: IFFALSE 40591
// f := Delete ( f , 1 ) ;
40573: LD_ADDR_VAR 0 12
40577: PUSH
40578: LD_VAR 0 12
40582: PPUSH
40583: LD_INT 1
40585: PPUSH
40586: CALL_OW 3
40590: ST_TO_ADDR
// if not f then
40591: LD_VAR 0 12
40595: NOT
40596: IFFALSE 40614
// begin x := x + 2 ;
40598: LD_ADDR_VAR 0 13
40602: PUSH
40603: LD_VAR 0 13
40607: PUSH
40608: LD_INT 2
40610: PLUS
40611: ST_TO_ADDR
// continue ;
40612: GO 40412
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40614: LD_VAR 0 12
40618: PUSH
40619: LD_INT 1
40621: ARRAY
40622: PPUSH
40623: CALL_OW 266
40627: PUSH
40628: LD_INT 5
40630: EQUAL
40631: IFFALSE 40705
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40633: LD_VAR 0 12
40637: PUSH
40638: LD_INT 1
40640: ARRAY
40641: PPUSH
40642: CALL_OW 313
40646: PUSH
40647: LD_INT 3
40649: LESS
40650: IFFALSE 40686
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40652: LD_INT 0
40654: PPUSH
40655: LD_INT 5
40657: PUSH
40658: LD_INT 8
40660: PUSH
40661: LD_INT 9
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: PUSH
40669: LD_VAR 0 17
40673: ARRAY
40674: PPUSH
40675: LD_VAR 0 4
40679: PPUSH
40680: CALL_OW 380
40684: GO 40703
// PrepareHuman ( false , i , skill ) ;
40686: LD_INT 0
40688: PPUSH
40689: LD_VAR 0 8
40693: PPUSH
40694: LD_VAR 0 4
40698: PPUSH
40699: CALL_OW 380
// end else
40703: GO 40722
// PrepareHuman ( false , i , skill ) ;
40705: LD_INT 0
40707: PPUSH
40708: LD_VAR 0 8
40712: PPUSH
40713: LD_VAR 0 4
40717: PPUSH
40718: CALL_OW 380
// un := CreateHuman ;
40722: LD_ADDR_VAR 0 14
40726: PUSH
40727: CALL_OW 44
40731: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40732: LD_ADDR_VAR 0 7
40736: PUSH
40737: LD_VAR 0 7
40741: PPUSH
40742: LD_INT 1
40744: PPUSH
40745: LD_VAR 0 14
40749: PPUSH
40750: CALL_OW 2
40754: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40755: LD_VAR 0 14
40759: PPUSH
40760: LD_VAR 0 12
40764: PUSH
40765: LD_INT 1
40767: ARRAY
40768: PPUSH
40769: CALL_OW 52
// end ;
40773: GO 40412
40775: POP
40776: POP
// end ;
40777: GO 39714
40779: POP
40780: POP
// result := result ^ buildings ;
40781: LD_ADDR_VAR 0 7
40785: PUSH
40786: LD_VAR 0 7
40790: PUSH
40791: LD_VAR 0 18
40795: ADD
40796: ST_TO_ADDR
// end else
40797: GO 40940
// begin for i = 1 to personel do
40799: LD_ADDR_VAR 0 8
40803: PUSH
40804: DOUBLE
40805: LD_INT 1
40807: DEC
40808: ST_TO_ADDR
40809: LD_VAR 0 6
40813: PUSH
40814: FOR_TO
40815: IFFALSE 40938
// begin if i > 4 then
40817: LD_VAR 0 8
40821: PUSH
40822: LD_INT 4
40824: GREATER
40825: IFFALSE 40829
// break ;
40827: GO 40938
// x := personel [ i ] ;
40829: LD_ADDR_VAR 0 13
40833: PUSH
40834: LD_VAR 0 6
40838: PUSH
40839: LD_VAR 0 8
40843: ARRAY
40844: ST_TO_ADDR
// if x = - 1 then
40845: LD_VAR 0 13
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: EQUAL
40854: IFFALSE 40858
// continue ;
40856: GO 40814
// PrepareHuman ( false , i , skill ) ;
40858: LD_INT 0
40860: PPUSH
40861: LD_VAR 0 8
40865: PPUSH
40866: LD_VAR 0 4
40870: PPUSH
40871: CALL_OW 380
// un := CreateHuman ;
40875: LD_ADDR_VAR 0 14
40879: PUSH
40880: CALL_OW 44
40884: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40885: LD_VAR 0 14
40889: PPUSH
40890: LD_VAR 0 1
40894: PPUSH
40895: CALL_OW 250
40899: PPUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 251
40909: PPUSH
40910: LD_INT 10
40912: PPUSH
40913: LD_INT 0
40915: PPUSH
40916: CALL_OW 50
// result := result ^ un ;
40920: LD_ADDR_VAR 0 7
40924: PUSH
40925: LD_VAR 0 7
40929: PUSH
40930: LD_VAR 0 14
40934: ADD
40935: ST_TO_ADDR
// end ;
40936: GO 40814
40938: POP
40939: POP
// end ; end ;
40940: LD_VAR 0 7
40944: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40945: LD_INT 0
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
// result := false ;
40963: LD_ADDR_VAR 0 3
40967: PUSH
40968: LD_INT 0
40970: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40971: LD_VAR 0 1
40975: NOT
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 266
40986: PUSH
40987: LD_INT 32
40989: PUSH
40990: LD_INT 33
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: IN
40997: NOT
40998: OR
40999: IFFALSE 41003
// exit ;
41001: GO 42139
// nat := GetNation ( tower ) ;
41003: LD_ADDR_VAR 0 12
41007: PUSH
41008: LD_VAR 0 1
41012: PPUSH
41013: CALL_OW 248
41017: ST_TO_ADDR
// side := GetSide ( tower ) ;
41018: LD_ADDR_VAR 0 16
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 255
41032: ST_TO_ADDR
// x := GetX ( tower ) ;
41033: LD_ADDR_VAR 0 10
41037: PUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: CALL_OW 250
41047: ST_TO_ADDR
// y := GetY ( tower ) ;
41048: LD_ADDR_VAR 0 11
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 251
41062: ST_TO_ADDR
// if not x or not y then
41063: LD_VAR 0 10
41067: NOT
41068: PUSH
41069: LD_VAR 0 11
41073: NOT
41074: OR
41075: IFFALSE 41079
// exit ;
41077: GO 42139
// weapon := 0 ;
41079: LD_ADDR_VAR 0 18
41083: PUSH
41084: LD_INT 0
41086: ST_TO_ADDR
// fac_list := [ ] ;
41087: LD_ADDR_VAR 0 17
41091: PUSH
41092: EMPTY
41093: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41094: LD_ADDR_VAR 0 6
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 274
41108: PPUSH
41109: LD_VAR 0 2
41113: PPUSH
41114: CALL 38717 0 2
41118: PPUSH
41119: LD_INT 30
41121: PUSH
41122: LD_INT 3
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PPUSH
41129: CALL_OW 72
41133: ST_TO_ADDR
// if not factories then
41134: LD_VAR 0 6
41138: NOT
41139: IFFALSE 41143
// exit ;
41141: GO 42139
// for i in factories do
41143: LD_ADDR_VAR 0 8
41147: PUSH
41148: LD_VAR 0 6
41152: PUSH
41153: FOR_IN
41154: IFFALSE 41179
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41156: LD_ADDR_VAR 0 17
41160: PUSH
41161: LD_VAR 0 17
41165: PUSH
41166: LD_VAR 0 8
41170: PPUSH
41171: CALL_OW 478
41175: UNION
41176: ST_TO_ADDR
41177: GO 41153
41179: POP
41180: POP
// if not fac_list then
41181: LD_VAR 0 17
41185: NOT
41186: IFFALSE 41190
// exit ;
41188: GO 42139
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_INT 4
41197: PUSH
41198: LD_INT 5
41200: PUSH
41201: LD_INT 9
41203: PUSH
41204: LD_INT 10
41206: PUSH
41207: LD_INT 6
41209: PUSH
41210: LD_INT 7
41212: PUSH
41213: LD_INT 11
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 27
41227: PUSH
41228: LD_INT 28
41230: PUSH
41231: LD_INT 26
41233: PUSH
41234: LD_INT 30
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 43
41245: PUSH
41246: LD_INT 44
41248: PUSH
41249: LD_INT 46
41251: PUSH
41252: LD_INT 45
41254: PUSH
41255: LD_INT 47
41257: PUSH
41258: LD_INT 49
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: PUSH
41274: LD_VAR 0 12
41278: ARRAY
41279: ST_TO_ADDR
// for i in list do
41280: LD_ADDR_VAR 0 8
41284: PUSH
41285: LD_VAR 0 5
41289: PUSH
41290: FOR_IN
41291: IFFALSE 41324
// if not i in fac_list then
41293: LD_VAR 0 8
41297: PUSH
41298: LD_VAR 0 17
41302: IN
41303: NOT
41304: IFFALSE 41322
// list := list diff i ;
41306: LD_ADDR_VAR 0 5
41310: PUSH
41311: LD_VAR 0 5
41315: PUSH
41316: LD_VAR 0 8
41320: DIFF
41321: ST_TO_ADDR
41322: GO 41290
41324: POP
41325: POP
// if not list then
41326: LD_VAR 0 5
41330: NOT
41331: IFFALSE 41335
// exit ;
41333: GO 42139
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41335: LD_VAR 0 12
41339: PUSH
41340: LD_INT 3
41342: EQUAL
41343: PUSH
41344: LD_INT 49
41346: PUSH
41347: LD_VAR 0 5
41351: IN
41352: AND
41353: PUSH
41354: LD_INT 31
41356: PPUSH
41357: LD_VAR 0 16
41361: PPUSH
41362: CALL_OW 321
41366: PUSH
41367: LD_INT 2
41369: EQUAL
41370: AND
41371: IFFALSE 41431
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41373: LD_INT 22
41375: PUSH
41376: LD_VAR 0 16
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 35
41387: PUSH
41388: LD_INT 49
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 91
41397: PUSH
41398: LD_VAR 0 1
41402: PUSH
41403: LD_INT 10
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: PPUSH
41416: CALL_OW 69
41420: NOT
41421: IFFALSE 41431
// weapon := ru_time_lapser ;
41423: LD_ADDR_VAR 0 18
41427: PUSH
41428: LD_INT 49
41430: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41431: LD_VAR 0 12
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: IN
41446: PUSH
41447: LD_INT 11
41449: PUSH
41450: LD_VAR 0 5
41454: IN
41455: PUSH
41456: LD_INT 30
41458: PUSH
41459: LD_VAR 0 5
41463: IN
41464: OR
41465: AND
41466: PUSH
41467: LD_INT 6
41469: PPUSH
41470: LD_VAR 0 16
41474: PPUSH
41475: CALL_OW 321
41479: PUSH
41480: LD_INT 2
41482: EQUAL
41483: AND
41484: IFFALSE 41649
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41486: LD_INT 22
41488: PUSH
41489: LD_VAR 0 16
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 35
41503: PUSH
41504: LD_INT 11
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 35
41513: PUSH
41514: LD_INT 30
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 91
41528: PUSH
41529: LD_VAR 0 1
41533: PUSH
41534: LD_INT 18
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: PPUSH
41547: CALL_OW 69
41551: NOT
41552: PUSH
41553: LD_INT 22
41555: PUSH
41556: LD_VAR 0 16
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: LD_INT 30
41570: PUSH
41571: LD_INT 32
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 30
41580: PUSH
41581: LD_INT 33
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 91
41595: PUSH
41596: LD_VAR 0 1
41600: PUSH
41601: LD_INT 12
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: LIST
41613: PUSH
41614: EMPTY
41615: LIST
41616: PPUSH
41617: CALL_OW 69
41621: PUSH
41622: LD_INT 2
41624: GREATER
41625: AND
41626: IFFALSE 41649
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41628: LD_ADDR_VAR 0 18
41632: PUSH
41633: LD_INT 11
41635: PUSH
41636: LD_INT 30
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_VAR 0 12
41647: ARRAY
41648: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41649: LD_VAR 0 18
41653: NOT
41654: PUSH
41655: LD_INT 40
41657: PPUSH
41658: LD_VAR 0 16
41662: PPUSH
41663: CALL_OW 321
41667: PUSH
41668: LD_INT 2
41670: EQUAL
41671: AND
41672: PUSH
41673: LD_INT 7
41675: PUSH
41676: LD_VAR 0 5
41680: IN
41681: PUSH
41682: LD_INT 28
41684: PUSH
41685: LD_VAR 0 5
41689: IN
41690: OR
41691: PUSH
41692: LD_INT 45
41694: PUSH
41695: LD_VAR 0 5
41699: IN
41700: OR
41701: AND
41702: IFFALSE 41956
// begin hex := GetHexInfo ( x , y ) ;
41704: LD_ADDR_VAR 0 4
41708: PUSH
41709: LD_VAR 0 10
41713: PPUSH
41714: LD_VAR 0 11
41718: PPUSH
41719: CALL_OW 546
41723: ST_TO_ADDR
// if hex [ 1 ] then
41724: LD_VAR 0 4
41728: PUSH
41729: LD_INT 1
41731: ARRAY
41732: IFFALSE 41736
// exit ;
41734: GO 42139
// height := hex [ 2 ] ;
41736: LD_ADDR_VAR 0 15
41740: PUSH
41741: LD_VAR 0 4
41745: PUSH
41746: LD_INT 2
41748: ARRAY
41749: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41750: LD_ADDR_VAR 0 14
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 3
41763: PUSH
41764: LD_INT 5
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
// for i in tmp do
41773: LD_ADDR_VAR 0 8
41777: PUSH
41778: LD_VAR 0 14
41782: PUSH
41783: FOR_IN
41784: IFFALSE 41954
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41786: LD_ADDR_VAR 0 9
41790: PUSH
41791: LD_VAR 0 10
41795: PPUSH
41796: LD_VAR 0 8
41800: PPUSH
41801: LD_INT 5
41803: PPUSH
41804: CALL_OW 272
41808: PUSH
41809: LD_VAR 0 11
41813: PPUSH
41814: LD_VAR 0 8
41818: PPUSH
41819: LD_INT 5
41821: PPUSH
41822: CALL_OW 273
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41831: LD_VAR 0 9
41835: PUSH
41836: LD_INT 1
41838: ARRAY
41839: PPUSH
41840: LD_VAR 0 9
41844: PUSH
41845: LD_INT 2
41847: ARRAY
41848: PPUSH
41849: CALL_OW 488
41853: IFFALSE 41952
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41855: LD_ADDR_VAR 0 4
41859: PUSH
41860: LD_VAR 0 9
41864: PUSH
41865: LD_INT 1
41867: ARRAY
41868: PPUSH
41869: LD_VAR 0 9
41873: PUSH
41874: LD_INT 2
41876: ARRAY
41877: PPUSH
41878: CALL_OW 546
41882: ST_TO_ADDR
// if hex [ 1 ] then
41883: LD_VAR 0 4
41887: PUSH
41888: LD_INT 1
41890: ARRAY
41891: IFFALSE 41895
// continue ;
41893: GO 41783
// h := hex [ 2 ] ;
41895: LD_ADDR_VAR 0 13
41899: PUSH
41900: LD_VAR 0 4
41904: PUSH
41905: LD_INT 2
41907: ARRAY
41908: ST_TO_ADDR
// if h + 7 < height then
41909: LD_VAR 0 13
41913: PUSH
41914: LD_INT 7
41916: PLUS
41917: PUSH
41918: LD_VAR 0 15
41922: LESS
41923: IFFALSE 41952
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41925: LD_ADDR_VAR 0 18
41929: PUSH
41930: LD_INT 7
41932: PUSH
41933: LD_INT 28
41935: PUSH
41936: LD_INT 45
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: PUSH
41944: LD_VAR 0 12
41948: ARRAY
41949: ST_TO_ADDR
// break ;
41950: GO 41954
// end ; end ; end ;
41952: GO 41783
41954: POP
41955: POP
// end ; if not weapon then
41956: LD_VAR 0 18
41960: NOT
41961: IFFALSE 42021
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41963: LD_ADDR_VAR 0 5
41967: PUSH
41968: LD_VAR 0 5
41972: PUSH
41973: LD_INT 11
41975: PUSH
41976: LD_INT 30
41978: PUSH
41979: LD_INT 49
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: DIFF
41987: ST_TO_ADDR
// if not list then
41988: LD_VAR 0 5
41992: NOT
41993: IFFALSE 41997
// exit ;
41995: GO 42139
// weapon := list [ rand ( 1 , list ) ] ;
41997: LD_ADDR_VAR 0 18
42001: PUSH
42002: LD_VAR 0 5
42006: PUSH
42007: LD_INT 1
42009: PPUSH
42010: LD_VAR 0 5
42014: PPUSH
42015: CALL_OW 12
42019: ARRAY
42020: ST_TO_ADDR
// end ; if weapon then
42021: LD_VAR 0 18
42025: IFFALSE 42139
// begin tmp := CostOfWeapon ( weapon ) ;
42027: LD_ADDR_VAR 0 14
42031: PUSH
42032: LD_VAR 0 18
42036: PPUSH
42037: CALL_OW 451
42041: ST_TO_ADDR
// j := GetBase ( tower ) ;
42042: LD_ADDR_VAR 0 9
42046: PUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 274
42056: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42057: LD_VAR 0 9
42061: PPUSH
42062: LD_INT 1
42064: PPUSH
42065: CALL_OW 275
42069: PUSH
42070: LD_VAR 0 14
42074: PUSH
42075: LD_INT 1
42077: ARRAY
42078: GREATEREQUAL
42079: PUSH
42080: LD_VAR 0 9
42084: PPUSH
42085: LD_INT 2
42087: PPUSH
42088: CALL_OW 275
42092: PUSH
42093: LD_VAR 0 14
42097: PUSH
42098: LD_INT 2
42100: ARRAY
42101: GREATEREQUAL
42102: AND
42103: PUSH
42104: LD_VAR 0 9
42108: PPUSH
42109: LD_INT 3
42111: PPUSH
42112: CALL_OW 275
42116: PUSH
42117: LD_VAR 0 14
42121: PUSH
42122: LD_INT 3
42124: ARRAY
42125: GREATEREQUAL
42126: AND
42127: IFFALSE 42139
// result := weapon ;
42129: LD_ADDR_VAR 0 3
42133: PUSH
42134: LD_VAR 0 18
42138: ST_TO_ADDR
// end ; end ;
42139: LD_VAR 0 3
42143: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42144: LD_INT 0
42146: PPUSH
42147: PPUSH
// result := true ;
42148: LD_ADDR_VAR 0 3
42152: PUSH
42153: LD_INT 1
42155: ST_TO_ADDR
// if array1 = array2 then
42156: LD_VAR 0 1
42160: PUSH
42161: LD_VAR 0 2
42165: EQUAL
42166: IFFALSE 42226
// begin for i = 1 to array1 do
42168: LD_ADDR_VAR 0 4
42172: PUSH
42173: DOUBLE
42174: LD_INT 1
42176: DEC
42177: ST_TO_ADDR
42178: LD_VAR 0 1
42182: PUSH
42183: FOR_TO
42184: IFFALSE 42222
// if array1 [ i ] <> array2 [ i ] then
42186: LD_VAR 0 1
42190: PUSH
42191: LD_VAR 0 4
42195: ARRAY
42196: PUSH
42197: LD_VAR 0 2
42201: PUSH
42202: LD_VAR 0 4
42206: ARRAY
42207: NONEQUAL
42208: IFFALSE 42220
// begin result := false ;
42210: LD_ADDR_VAR 0 3
42214: PUSH
42215: LD_INT 0
42217: ST_TO_ADDR
// break ;
42218: GO 42222
// end ;
42220: GO 42183
42222: POP
42223: POP
// end else
42224: GO 42234
// result := false ;
42226: LD_ADDR_VAR 0 3
42230: PUSH
42231: LD_INT 0
42233: ST_TO_ADDR
// end ;
42234: LD_VAR 0 3
42238: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42239: LD_INT 0
42241: PPUSH
42242: PPUSH
42243: PPUSH
// pom := GetBase ( fac ) ;
42244: LD_ADDR_VAR 0 5
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 274
42258: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42259: LD_ADDR_VAR 0 4
42263: PUSH
42264: LD_VAR 0 2
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: PPUSH
42273: LD_VAR 0 2
42277: PUSH
42278: LD_INT 2
42280: ARRAY
42281: PPUSH
42282: LD_VAR 0 2
42286: PUSH
42287: LD_INT 3
42289: ARRAY
42290: PPUSH
42291: LD_VAR 0 2
42295: PUSH
42296: LD_INT 4
42298: ARRAY
42299: PPUSH
42300: CALL_OW 449
42304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42305: LD_ADDR_VAR 0 3
42309: PUSH
42310: LD_VAR 0 5
42314: PPUSH
42315: LD_INT 1
42317: PPUSH
42318: CALL_OW 275
42322: PUSH
42323: LD_VAR 0 4
42327: PUSH
42328: LD_INT 1
42330: ARRAY
42331: GREATEREQUAL
42332: PUSH
42333: LD_VAR 0 5
42337: PPUSH
42338: LD_INT 2
42340: PPUSH
42341: CALL_OW 275
42345: PUSH
42346: LD_VAR 0 4
42350: PUSH
42351: LD_INT 2
42353: ARRAY
42354: GREATEREQUAL
42355: AND
42356: PUSH
42357: LD_VAR 0 5
42361: PPUSH
42362: LD_INT 3
42364: PPUSH
42365: CALL_OW 275
42369: PUSH
42370: LD_VAR 0 4
42374: PUSH
42375: LD_INT 3
42377: ARRAY
42378: GREATEREQUAL
42379: AND
42380: ST_TO_ADDR
// end ;
42381: LD_VAR 0 3
42385: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42386: LD_INT 0
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
// pom := GetBase ( building ) ;
42392: LD_ADDR_VAR 0 3
42396: PUSH
42397: LD_VAR 0 1
42401: PPUSH
42402: CALL_OW 274
42406: ST_TO_ADDR
// if not pom then
42407: LD_VAR 0 3
42411: NOT
42412: IFFALSE 42416
// exit ;
42414: GO 42586
// btype := GetBType ( building ) ;
42416: LD_ADDR_VAR 0 5
42420: PUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL_OW 266
42430: ST_TO_ADDR
// if btype = b_armoury then
42431: LD_VAR 0 5
42435: PUSH
42436: LD_INT 4
42438: EQUAL
42439: IFFALSE 42449
// btype := b_barracks ;
42441: LD_ADDR_VAR 0 5
42445: PUSH
42446: LD_INT 5
42448: ST_TO_ADDR
// if btype = b_depot then
42449: LD_VAR 0 5
42453: PUSH
42454: LD_INT 0
42456: EQUAL
42457: IFFALSE 42467
// btype := b_warehouse ;
42459: LD_ADDR_VAR 0 5
42463: PUSH
42464: LD_INT 1
42466: ST_TO_ADDR
// if btype = b_workshop then
42467: LD_VAR 0 5
42471: PUSH
42472: LD_INT 2
42474: EQUAL
42475: IFFALSE 42485
// btype := b_factory ;
42477: LD_ADDR_VAR 0 5
42481: PUSH
42482: LD_INT 3
42484: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42485: LD_ADDR_VAR 0 4
42489: PUSH
42490: LD_VAR 0 5
42494: PPUSH
42495: LD_VAR 0 1
42499: PPUSH
42500: CALL_OW 248
42504: PPUSH
42505: CALL_OW 450
42509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42510: LD_ADDR_VAR 0 2
42514: PUSH
42515: LD_VAR 0 3
42519: PPUSH
42520: LD_INT 1
42522: PPUSH
42523: CALL_OW 275
42527: PUSH
42528: LD_VAR 0 4
42532: PUSH
42533: LD_INT 1
42535: ARRAY
42536: GREATEREQUAL
42537: PUSH
42538: LD_VAR 0 3
42542: PPUSH
42543: LD_INT 2
42545: PPUSH
42546: CALL_OW 275
42550: PUSH
42551: LD_VAR 0 4
42555: PUSH
42556: LD_INT 2
42558: ARRAY
42559: GREATEREQUAL
42560: AND
42561: PUSH
42562: LD_VAR 0 3
42566: PPUSH
42567: LD_INT 3
42569: PPUSH
42570: CALL_OW 275
42574: PUSH
42575: LD_VAR 0 4
42579: PUSH
42580: LD_INT 3
42582: ARRAY
42583: GREATEREQUAL
42584: AND
42585: ST_TO_ADDR
// end ;
42586: LD_VAR 0 2
42590: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42591: LD_INT 0
42593: PPUSH
42594: PPUSH
42595: PPUSH
// pom := GetBase ( building ) ;
42596: LD_ADDR_VAR 0 4
42600: PUSH
42601: LD_VAR 0 1
42605: PPUSH
42606: CALL_OW 274
42610: ST_TO_ADDR
// if not pom then
42611: LD_VAR 0 4
42615: NOT
42616: IFFALSE 42620
// exit ;
42618: GO 42721
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42620: LD_ADDR_VAR 0 5
42624: PUSH
42625: LD_VAR 0 2
42629: PPUSH
42630: LD_VAR 0 1
42634: PPUSH
42635: CALL_OW 248
42639: PPUSH
42640: CALL_OW 450
42644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_VAR 0 4
42654: PPUSH
42655: LD_INT 1
42657: PPUSH
42658: CALL_OW 275
42662: PUSH
42663: LD_VAR 0 5
42667: PUSH
42668: LD_INT 1
42670: ARRAY
42671: GREATEREQUAL
42672: PUSH
42673: LD_VAR 0 4
42677: PPUSH
42678: LD_INT 2
42680: PPUSH
42681: CALL_OW 275
42685: PUSH
42686: LD_VAR 0 5
42690: PUSH
42691: LD_INT 2
42693: ARRAY
42694: GREATEREQUAL
42695: AND
42696: PUSH
42697: LD_VAR 0 4
42701: PPUSH
42702: LD_INT 3
42704: PPUSH
42705: CALL_OW 275
42709: PUSH
42710: LD_VAR 0 5
42714: PUSH
42715: LD_INT 3
42717: ARRAY
42718: GREATEREQUAL
42719: AND
42720: ST_TO_ADDR
// end ;
42721: LD_VAR 0 3
42725: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42726: LD_INT 0
42728: PPUSH
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
// result := false ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_INT 0
42745: ST_TO_ADDR
// if not base or not btype or not x or not y then
42746: LD_VAR 0 1
42750: NOT
42751: PUSH
42752: LD_VAR 0 2
42756: NOT
42757: OR
42758: PUSH
42759: LD_VAR 0 3
42763: NOT
42764: OR
42765: PUSH
42766: LD_VAR 0 4
42770: NOT
42771: OR
42772: IFFALSE 42776
// exit ;
42774: GO 43385
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42776: LD_ADDR_VAR 0 12
42780: PUSH
42781: LD_VAR 0 2
42785: PPUSH
42786: LD_VAR 0 3
42790: PPUSH
42791: LD_VAR 0 4
42795: PPUSH
42796: LD_VAR 0 5
42800: PPUSH
42801: LD_VAR 0 1
42805: PUSH
42806: LD_INT 1
42808: ARRAY
42809: PPUSH
42810: CALL_OW 248
42814: PPUSH
42815: LD_INT 0
42817: PPUSH
42818: CALL 44222 0 6
42822: ST_TO_ADDR
// if not hexes then
42823: LD_VAR 0 12
42827: NOT
42828: IFFALSE 42832
// exit ;
42830: GO 43385
// for i = 1 to hexes do
42832: LD_ADDR_VAR 0 7
42836: PUSH
42837: DOUBLE
42838: LD_INT 1
42840: DEC
42841: ST_TO_ADDR
42842: LD_VAR 0 12
42846: PUSH
42847: FOR_TO
42848: IFFALSE 43383
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42850: LD_ADDR_VAR 0 11
42854: PUSH
42855: LD_VAR 0 12
42859: PUSH
42860: LD_VAR 0 7
42864: ARRAY
42865: PUSH
42866: LD_INT 1
42868: ARRAY
42869: PPUSH
42870: LD_VAR 0 12
42874: PUSH
42875: LD_VAR 0 7
42879: ARRAY
42880: PUSH
42881: LD_INT 2
42883: ARRAY
42884: PPUSH
42885: CALL_OW 428
42889: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42890: LD_VAR 0 12
42894: PUSH
42895: LD_VAR 0 7
42899: ARRAY
42900: PUSH
42901: LD_INT 1
42903: ARRAY
42904: PPUSH
42905: LD_VAR 0 12
42909: PUSH
42910: LD_VAR 0 7
42914: ARRAY
42915: PUSH
42916: LD_INT 2
42918: ARRAY
42919: PPUSH
42920: CALL_OW 351
42924: PUSH
42925: LD_VAR 0 12
42929: PUSH
42930: LD_VAR 0 7
42934: ARRAY
42935: PUSH
42936: LD_INT 1
42938: ARRAY
42939: PPUSH
42940: LD_VAR 0 12
42944: PUSH
42945: LD_VAR 0 7
42949: ARRAY
42950: PUSH
42951: LD_INT 2
42953: ARRAY
42954: PPUSH
42955: CALL_OW 488
42959: NOT
42960: OR
42961: PUSH
42962: LD_VAR 0 11
42966: PPUSH
42967: CALL_OW 247
42971: PUSH
42972: LD_INT 3
42974: EQUAL
42975: OR
42976: IFFALSE 42982
// exit ;
42978: POP
42979: POP
42980: GO 43385
// if not tmp or not tmp in base then
42982: LD_VAR 0 11
42986: NOT
42987: PUSH
42988: LD_VAR 0 11
42992: PUSH
42993: LD_VAR 0 1
42997: IN
42998: NOT
42999: OR
43000: IFFALSE 43004
// continue ;
43002: GO 42847
// result := true ;
43004: LD_ADDR_VAR 0 6
43008: PUSH
43009: LD_INT 1
43011: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43012: LD_ADDR_VAR 0 15
43016: PUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: LD_INT 22
43024: PUSH
43025: LD_VAR 0 11
43029: PPUSH
43030: CALL_OW 255
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 30
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 30
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PPUSH
43071: CALL_OW 72
43075: ST_TO_ADDR
// if dep then
43076: LD_VAR 0 15
43080: IFFALSE 43216
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43082: LD_ADDR_VAR 0 14
43086: PUSH
43087: LD_VAR 0 15
43091: PUSH
43092: LD_INT 1
43094: ARRAY
43095: PPUSH
43096: CALL_OW 250
43100: PPUSH
43101: LD_VAR 0 15
43105: PUSH
43106: LD_INT 1
43108: ARRAY
43109: PPUSH
43110: CALL_OW 254
43114: PPUSH
43115: LD_INT 5
43117: PPUSH
43118: CALL_OW 272
43122: PUSH
43123: LD_VAR 0 15
43127: PUSH
43128: LD_INT 1
43130: ARRAY
43131: PPUSH
43132: CALL_OW 251
43136: PPUSH
43137: LD_VAR 0 15
43141: PUSH
43142: LD_INT 1
43144: ARRAY
43145: PPUSH
43146: CALL_OW 254
43150: PPUSH
43151: LD_INT 5
43153: PPUSH
43154: CALL_OW 273
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43163: LD_VAR 0 14
43167: PUSH
43168: LD_INT 1
43170: ARRAY
43171: PPUSH
43172: LD_VAR 0 14
43176: PUSH
43177: LD_INT 2
43179: ARRAY
43180: PPUSH
43181: CALL_OW 488
43185: IFFALSE 43216
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43187: LD_VAR 0 11
43191: PPUSH
43192: LD_VAR 0 14
43196: PUSH
43197: LD_INT 1
43199: ARRAY
43200: PPUSH
43201: LD_VAR 0 14
43205: PUSH
43206: LD_INT 2
43208: ARRAY
43209: PPUSH
43210: CALL_OW 111
// continue ;
43214: GO 42847
// end ; end ; r := GetDir ( tmp ) ;
43216: LD_ADDR_VAR 0 13
43220: PUSH
43221: LD_VAR 0 11
43225: PPUSH
43226: CALL_OW 254
43230: ST_TO_ADDR
// if r = 5 then
43231: LD_VAR 0 13
43235: PUSH
43236: LD_INT 5
43238: EQUAL
43239: IFFALSE 43249
// r := 0 ;
43241: LD_ADDR_VAR 0 13
43245: PUSH
43246: LD_INT 0
43248: ST_TO_ADDR
// for j = r to 5 do
43249: LD_ADDR_VAR 0 8
43253: PUSH
43254: DOUBLE
43255: LD_VAR 0 13
43259: DEC
43260: ST_TO_ADDR
43261: LD_INT 5
43263: PUSH
43264: FOR_TO
43265: IFFALSE 43379
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43267: LD_ADDR_VAR 0 9
43271: PUSH
43272: LD_VAR 0 11
43276: PPUSH
43277: CALL_OW 250
43281: PPUSH
43282: LD_VAR 0 8
43286: PPUSH
43287: LD_INT 2
43289: PPUSH
43290: CALL_OW 272
43294: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43295: LD_ADDR_VAR 0 10
43299: PUSH
43300: LD_VAR 0 11
43304: PPUSH
43305: CALL_OW 251
43309: PPUSH
43310: LD_VAR 0 8
43314: PPUSH
43315: LD_INT 2
43317: PPUSH
43318: CALL_OW 273
43322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43323: LD_VAR 0 9
43327: PPUSH
43328: LD_VAR 0 10
43332: PPUSH
43333: CALL_OW 488
43337: PUSH
43338: LD_VAR 0 9
43342: PPUSH
43343: LD_VAR 0 10
43347: PPUSH
43348: CALL_OW 428
43352: NOT
43353: AND
43354: IFFALSE 43377
// begin ComMoveXY ( tmp , _x , _y ) ;
43356: LD_VAR 0 11
43360: PPUSH
43361: LD_VAR 0 9
43365: PPUSH
43366: LD_VAR 0 10
43370: PPUSH
43371: CALL_OW 111
// break ;
43375: GO 43379
// end ; end ;
43377: GO 43264
43379: POP
43380: POP
// end ;
43381: GO 42847
43383: POP
43384: POP
// end ;
43385: LD_VAR 0 6
43389: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43390: LD_INT 0
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
// result := false ;
43402: LD_ADDR_VAR 0 6
43406: PUSH
43407: LD_INT 0
43409: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43410: LD_VAR 0 1
43414: NOT
43415: PUSH
43416: LD_VAR 0 1
43420: PPUSH
43421: CALL_OW 266
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: IN
43436: NOT
43437: OR
43438: PUSH
43439: LD_VAR 0 2
43443: NOT
43444: OR
43445: PUSH
43446: LD_VAR 0 5
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 3
43462: PUSH
43463: LD_INT 4
43465: PUSH
43466: LD_INT 5
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: IN
43477: NOT
43478: OR
43479: PUSH
43480: LD_VAR 0 3
43484: PPUSH
43485: LD_VAR 0 4
43489: PPUSH
43490: CALL_OW 488
43494: NOT
43495: OR
43496: IFFALSE 43500
// exit ;
43498: GO 44217
// pom := GetBase ( depot ) ;
43500: LD_ADDR_VAR 0 10
43504: PUSH
43505: LD_VAR 0 1
43509: PPUSH
43510: CALL_OW 274
43514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43515: LD_ADDR_VAR 0 11
43519: PUSH
43520: LD_VAR 0 2
43524: PPUSH
43525: LD_VAR 0 1
43529: PPUSH
43530: CALL_OW 248
43534: PPUSH
43535: CALL_OW 450
43539: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43540: LD_VAR 0 10
43544: PPUSH
43545: LD_INT 1
43547: PPUSH
43548: CALL_OW 275
43552: PUSH
43553: LD_VAR 0 11
43557: PUSH
43558: LD_INT 1
43560: ARRAY
43561: GREATEREQUAL
43562: PUSH
43563: LD_VAR 0 10
43567: PPUSH
43568: LD_INT 2
43570: PPUSH
43571: CALL_OW 275
43575: PUSH
43576: LD_VAR 0 11
43580: PUSH
43581: LD_INT 2
43583: ARRAY
43584: GREATEREQUAL
43585: AND
43586: PUSH
43587: LD_VAR 0 10
43591: PPUSH
43592: LD_INT 3
43594: PPUSH
43595: CALL_OW 275
43599: PUSH
43600: LD_VAR 0 11
43604: PUSH
43605: LD_INT 3
43607: ARRAY
43608: GREATEREQUAL
43609: AND
43610: NOT
43611: IFFALSE 43615
// exit ;
43613: GO 44217
// if GetBType ( depot ) = b_depot then
43615: LD_VAR 0 1
43619: PPUSH
43620: CALL_OW 266
43624: PUSH
43625: LD_INT 0
43627: EQUAL
43628: IFFALSE 43640
// dist := 28 else
43630: LD_ADDR_VAR 0 14
43634: PUSH
43635: LD_INT 28
43637: ST_TO_ADDR
43638: GO 43648
// dist := 36 ;
43640: LD_ADDR_VAR 0 14
43644: PUSH
43645: LD_INT 36
43647: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43648: LD_VAR 0 1
43652: PPUSH
43653: LD_VAR 0 3
43657: PPUSH
43658: LD_VAR 0 4
43662: PPUSH
43663: CALL_OW 297
43667: PUSH
43668: LD_VAR 0 14
43672: GREATER
43673: IFFALSE 43677
// exit ;
43675: GO 44217
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43677: LD_ADDR_VAR 0 12
43681: PUSH
43682: LD_VAR 0 2
43686: PPUSH
43687: LD_VAR 0 3
43691: PPUSH
43692: LD_VAR 0 4
43696: PPUSH
43697: LD_VAR 0 5
43701: PPUSH
43702: LD_VAR 0 1
43706: PPUSH
43707: CALL_OW 248
43711: PPUSH
43712: LD_INT 0
43714: PPUSH
43715: CALL 44222 0 6
43719: ST_TO_ADDR
// if not hexes then
43720: LD_VAR 0 12
43724: NOT
43725: IFFALSE 43729
// exit ;
43727: GO 44217
// hex := GetHexInfo ( x , y ) ;
43729: LD_ADDR_VAR 0 15
43733: PUSH
43734: LD_VAR 0 3
43738: PPUSH
43739: LD_VAR 0 4
43743: PPUSH
43744: CALL_OW 546
43748: ST_TO_ADDR
// if hex [ 1 ] then
43749: LD_VAR 0 15
43753: PUSH
43754: LD_INT 1
43756: ARRAY
43757: IFFALSE 43761
// exit ;
43759: GO 44217
// height := hex [ 2 ] ;
43761: LD_ADDR_VAR 0 13
43765: PUSH
43766: LD_VAR 0 15
43770: PUSH
43771: LD_INT 2
43773: ARRAY
43774: ST_TO_ADDR
// for i = 1 to hexes do
43775: LD_ADDR_VAR 0 7
43779: PUSH
43780: DOUBLE
43781: LD_INT 1
43783: DEC
43784: ST_TO_ADDR
43785: LD_VAR 0 12
43789: PUSH
43790: FOR_TO
43791: IFFALSE 44121
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43793: LD_VAR 0 12
43797: PUSH
43798: LD_VAR 0 7
43802: ARRAY
43803: PUSH
43804: LD_INT 1
43806: ARRAY
43807: PPUSH
43808: LD_VAR 0 12
43812: PUSH
43813: LD_VAR 0 7
43817: ARRAY
43818: PUSH
43819: LD_INT 2
43821: ARRAY
43822: PPUSH
43823: CALL_OW 488
43827: NOT
43828: PUSH
43829: LD_VAR 0 12
43833: PUSH
43834: LD_VAR 0 7
43838: ARRAY
43839: PUSH
43840: LD_INT 1
43842: ARRAY
43843: PPUSH
43844: LD_VAR 0 12
43848: PUSH
43849: LD_VAR 0 7
43853: ARRAY
43854: PUSH
43855: LD_INT 2
43857: ARRAY
43858: PPUSH
43859: CALL_OW 428
43863: PUSH
43864: LD_INT 0
43866: GREATER
43867: OR
43868: PUSH
43869: LD_VAR 0 12
43873: PUSH
43874: LD_VAR 0 7
43878: ARRAY
43879: PUSH
43880: LD_INT 1
43882: ARRAY
43883: PPUSH
43884: LD_VAR 0 12
43888: PUSH
43889: LD_VAR 0 7
43893: ARRAY
43894: PUSH
43895: LD_INT 2
43897: ARRAY
43898: PPUSH
43899: CALL_OW 351
43903: OR
43904: IFFALSE 43910
// exit ;
43906: POP
43907: POP
43908: GO 44217
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43910: LD_ADDR_VAR 0 8
43914: PUSH
43915: LD_VAR 0 12
43919: PUSH
43920: LD_VAR 0 7
43924: ARRAY
43925: PUSH
43926: LD_INT 1
43928: ARRAY
43929: PPUSH
43930: LD_VAR 0 12
43934: PUSH
43935: LD_VAR 0 7
43939: ARRAY
43940: PUSH
43941: LD_INT 2
43943: ARRAY
43944: PPUSH
43945: CALL_OW 546
43949: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43950: LD_VAR 0 8
43954: PUSH
43955: LD_INT 1
43957: ARRAY
43958: PUSH
43959: LD_VAR 0 8
43963: PUSH
43964: LD_INT 2
43966: ARRAY
43967: PUSH
43968: LD_VAR 0 13
43972: PUSH
43973: LD_INT 2
43975: PLUS
43976: GREATER
43977: OR
43978: PUSH
43979: LD_VAR 0 8
43983: PUSH
43984: LD_INT 2
43986: ARRAY
43987: PUSH
43988: LD_VAR 0 13
43992: PUSH
43993: LD_INT 2
43995: MINUS
43996: LESS
43997: OR
43998: PUSH
43999: LD_VAR 0 8
44003: PUSH
44004: LD_INT 3
44006: ARRAY
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 8
44013: PUSH
44014: LD_INT 9
44016: PUSH
44017: LD_INT 10
44019: PUSH
44020: LD_INT 11
44022: PUSH
44023: LD_INT 12
44025: PUSH
44026: LD_INT 13
44028: PUSH
44029: LD_INT 16
44031: PUSH
44032: LD_INT 17
44034: PUSH
44035: LD_INT 18
44037: PUSH
44038: LD_INT 19
44040: PUSH
44041: LD_INT 20
44043: PUSH
44044: LD_INT 21
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: IN
44062: NOT
44063: OR
44064: PUSH
44065: LD_VAR 0 8
44069: PUSH
44070: LD_INT 5
44072: ARRAY
44073: NOT
44074: OR
44075: PUSH
44076: LD_VAR 0 8
44080: PUSH
44081: LD_INT 6
44083: ARRAY
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 7
44093: PUSH
44094: LD_INT 9
44096: PUSH
44097: LD_INT 10
44099: PUSH
44100: LD_INT 11
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: IN
44111: NOT
44112: OR
44113: IFFALSE 44119
// exit ;
44115: POP
44116: POP
44117: GO 44217
// end ;
44119: GO 43790
44121: POP
44122: POP
// side := GetSide ( depot ) ;
44123: LD_ADDR_VAR 0 9
44127: PUSH
44128: LD_VAR 0 1
44132: PPUSH
44133: CALL_OW 255
44137: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44138: LD_VAR 0 9
44142: PPUSH
44143: LD_VAR 0 3
44147: PPUSH
44148: LD_VAR 0 4
44152: PPUSH
44153: LD_INT 20
44155: PPUSH
44156: CALL 36871 0 4
44160: PUSH
44161: LD_INT 4
44163: ARRAY
44164: IFFALSE 44168
// exit ;
44166: GO 44217
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44168: LD_VAR 0 2
44172: PUSH
44173: LD_INT 29
44175: PUSH
44176: LD_INT 30
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: IN
44183: PUSH
44184: LD_VAR 0 3
44188: PPUSH
44189: LD_VAR 0 4
44193: PPUSH
44194: LD_VAR 0 9
44198: PPUSH
44199: CALL_OW 440
44203: NOT
44204: AND
44205: IFFALSE 44209
// exit ;
44207: GO 44217
// result := true ;
44209: LD_ADDR_VAR 0 6
44213: PUSH
44214: LD_INT 1
44216: ST_TO_ADDR
// end ;
44217: LD_VAR 0 6
44221: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44222: LD_INT 0
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
// result = [ ] ;
44282: LD_ADDR_VAR 0 7
44286: PUSH
44287: EMPTY
44288: ST_TO_ADDR
// temp_list = [ ] ;
44289: LD_ADDR_VAR 0 9
44293: PUSH
44294: EMPTY
44295: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44296: LD_VAR 0 4
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: LD_INT 4
44315: PUSH
44316: LD_INT 5
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: IN
44327: NOT
44328: PUSH
44329: LD_VAR 0 1
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: IN
44344: PUSH
44345: LD_VAR 0 5
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: IN
44364: NOT
44365: AND
44366: OR
44367: IFFALSE 44371
// exit ;
44369: GO 62762
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44371: LD_VAR 0 1
44375: PUSH
44376: LD_INT 6
44378: PUSH
44379: LD_INT 7
44381: PUSH
44382: LD_INT 8
44384: PUSH
44385: LD_INT 13
44387: PUSH
44388: LD_INT 12
44390: PUSH
44391: LD_INT 15
44393: PUSH
44394: LD_INT 11
44396: PUSH
44397: LD_INT 14
44399: PUSH
44400: LD_INT 10
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: IN
44414: IFFALSE 44424
// btype = b_lab ;
44416: LD_ADDR_VAR 0 1
44420: PUSH
44421: LD_INT 6
44423: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44424: LD_VAR 0 6
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: LIST
44442: IN
44443: NOT
44444: PUSH
44445: LD_VAR 0 1
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: LD_INT 6
44464: PUSH
44465: LD_INT 36
44467: PUSH
44468: LD_INT 4
44470: PUSH
44471: LD_INT 5
44473: PUSH
44474: LD_INT 31
44476: PUSH
44477: LD_INT 32
44479: PUSH
44480: LD_INT 33
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: IN
44496: NOT
44497: PUSH
44498: LD_VAR 0 6
44502: PUSH
44503: LD_INT 1
44505: EQUAL
44506: AND
44507: OR
44508: PUSH
44509: LD_VAR 0 1
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: IN
44524: NOT
44525: PUSH
44526: LD_VAR 0 6
44530: PUSH
44531: LD_INT 2
44533: EQUAL
44534: AND
44535: OR
44536: IFFALSE 44546
// mode = 0 ;
44538: LD_ADDR_VAR 0 6
44542: PUSH
44543: LD_INT 0
44545: ST_TO_ADDR
// case mode of 0 :
44546: LD_VAR 0 6
44550: PUSH
44551: LD_INT 0
44553: DOUBLE
44554: EQUAL
44555: IFTRUE 44559
44557: GO 56012
44559: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44560: LD_ADDR_VAR 0 11
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44753: LD_ADDR_VAR 0 12
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 3
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44949: LD_ADDR_VAR 0 13
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 3
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 3
45108: NEG
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: NEG
45121: PUSH
45122: LD_INT 3
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45148: LD_ADDR_VAR 0 14
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45344: LD_ADDR_VAR 0 15
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45537: LD_ADDR_VAR 0 16
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: PUSH
45695: LD_INT 3
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45730: LD_ADDR_VAR 0 17
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45960: LD_ADDR_VAR 0 18
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46190: LD_ADDR_VAR 0 19
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46420: LD_ADDR_VAR 0 20
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46650: LD_ADDR_VAR 0 21
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46880: LD_ADDR_VAR 0 22
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47110: LD_ADDR_VAR 0 23
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47390: LD_ADDR_VAR 0 24
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47666: LD_ADDR_VAR 0 25
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 3
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 3
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47940: LD_ADDR_VAR 0 26
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: LD_INT 3
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48216: LD_ADDR_VAR 0 27
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: NEG
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48496: LD_ADDR_VAR 0 28
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48778: LD_ADDR_VAR 0 29
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 3
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49057: LD_ADDR_VAR 0 30
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 3
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49335: LD_ADDR_VAR 0 31
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 3
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 3
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49613: LD_ADDR_VAR 0 32
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 3
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 3
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49891: LD_ADDR_VAR 0 33
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 3
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50170: LD_ADDR_VAR 0 34
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 3
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50450: LD_ADDR_VAR 0 35
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50562: LD_ADDR_VAR 0 36
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50674: LD_ADDR_VAR 0 37
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50786: LD_ADDR_VAR 0 38
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50898: LD_ADDR_VAR 0 39
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51010: LD_ADDR_VAR 0 40
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51122: LD_ADDR_VAR 0 41
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: LD_INT 2
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 3
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51472: LD_ADDR_VAR 0 42
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 3
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51822: LD_ADDR_VAR 0 43
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 3
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52170: LD_ADDR_VAR 0 44
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 3
52467: NEG
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: NEG
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52520: LD_ADDR_VAR 0 45
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52870: LD_ADDR_VAR 0 46
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 3
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53218: LD_ADDR_VAR 0 47
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53369: LD_ADDR_VAR 0 48
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53516: LD_ADDR_VAR 0 49
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53660: LD_ADDR_VAR 0 50
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53804: LD_ADDR_VAR 0 51
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53951: LD_ADDR_VAR 0 52
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54102: LD_ADDR_VAR 0 53
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54332: LD_ADDR_VAR 0 54
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54562: LD_ADDR_VAR 0 55
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54792: LD_ADDR_VAR 0 56
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55022: LD_ADDR_VAR 0 57
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55252: LD_ADDR_VAR 0 58
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55482: LD_ADDR_VAR 0 59
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55570: LD_ADDR_VAR 0 60
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55658: LD_ADDR_VAR 0 61
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55746: LD_ADDR_VAR 0 62
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55834: LD_ADDR_VAR 0 63
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55922: LD_ADDR_VAR 0 64
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: ST_TO_ADDR
// end ; 1 :
56010: GO 61907
56012: LD_INT 1
56014: DOUBLE
56015: EQUAL
56016: IFTRUE 56020
56018: GO 58643
56020: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56021: LD_ADDR_VAR 0 11
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56065: LD_ADDR_VAR 0 12
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56106: LD_ADDR_VAR 0 13
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56146: LD_ADDR_VAR 0 14
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56187: LD_ADDR_VAR 0 15
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56231: LD_ADDR_VAR 0 16
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: LD_INT 3
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56277: LD_ADDR_VAR 0 17
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56321: LD_ADDR_VAR 0 18
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56362: LD_ADDR_VAR 0 19
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56402: LD_ADDR_VAR 0 20
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56443: LD_ADDR_VAR 0 21
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56487: LD_ADDR_VAR 0 22
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56533: LD_ADDR_VAR 0 23
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 4
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: LD_INT 3
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56577: LD_ADDR_VAR 0 24
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 4
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56618: LD_ADDR_VAR 0 25
56622: PUSH
56623: LD_INT 3
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: LD_INT 4
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: LIST
56657: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56658: LD_ADDR_VAR 0 26
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 4
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56699: LD_ADDR_VAR 0 27
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 4
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56743: LD_ADDR_VAR 0 28
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: LD_INT 4
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56789: LD_ADDR_VAR 0 29
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 4
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 4
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 3
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 5
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 5
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 4
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 6
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 6
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 5
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56944: LD_ADDR_VAR 0 30
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 4
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 4
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 4
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 5
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 5
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 6
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 6
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57087: LD_ADDR_VAR 0 31
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 4
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 4
57134: PUSH
57135: LD_INT 4
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: LD_INT 4
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 5
57154: PUSH
57155: LD_INT 4
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 5
57164: PUSH
57165: LD_INT 5
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: LD_INT 5
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 6
57184: PUSH
57185: LD_INT 5
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 6
57194: PUSH
57195: LD_INT 6
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 5
57204: PUSH
57205: LD_INT 6
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57226: LD_ADDR_VAR 0 32
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 4
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 4
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: LD_INT 5
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 5
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 6
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 6
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 5
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57369: LD_ADDR_VAR 0 33
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 4
57421: NEG
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: NEG
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 5
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 5
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 6
57489: NEG
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 6
57500: NEG
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57524: LD_ADDR_VAR 0 34
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: LD_INT 3
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: LD_INT 3
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: LD_INT 4
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: NEG
57592: PUSH
57593: LD_INT 4
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: NEG
57604: PUSH
57605: LD_INT 5
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 5
57615: NEG
57616: PUSH
57617: LD_INT 4
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 5
57627: NEG
57628: PUSH
57629: LD_INT 5
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 5
57639: NEG
57640: PUSH
57641: LD_INT 6
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 6
57651: NEG
57652: PUSH
57653: LD_INT 5
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 6
57663: NEG
57664: PUSH
57665: LD_INT 6
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57687: LD_ADDR_VAR 0 41
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57731: LD_ADDR_VAR 0 42
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57772: LD_ADDR_VAR 0 43
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57812: LD_ADDR_VAR 0 44
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57853: LD_ADDR_VAR 0 45
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57897: LD_ADDR_VAR 0 46
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57943: LD_ADDR_VAR 0 47
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57976: LD_ADDR_VAR 0 48
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58007: LD_ADDR_VAR 0 49
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58036: LD_ADDR_VAR 0 50
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58065: LD_ADDR_VAR 0 51
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58096: LD_ADDR_VAR 0 52
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58129: LD_ADDR_VAR 0 53
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58173: LD_ADDR_VAR 0 54
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: LIST
58213: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58214: LD_ADDR_VAR 0 55
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58254: LD_ADDR_VAR 0 56
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58295: LD_ADDR_VAR 0 57
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58339: LD_ADDR_VAR 0 58
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58385: LD_ADDR_VAR 0 59
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58429: LD_ADDR_VAR 0 60
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58470: LD_ADDR_VAR 0 61
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58510: LD_ADDR_VAR 0 62
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58551: LD_ADDR_VAR 0 63
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58595: LD_ADDR_VAR 0 64
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// end ; 2 :
58641: GO 61907
58643: LD_INT 2
58645: DOUBLE
58646: EQUAL
58647: IFTRUE 58651
58649: GO 61906
58651: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58652: LD_ADDR_VAR 0 29
58656: PUSH
58657: LD_INT 4
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 5
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 4
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 5
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: LD_INT 3
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 4
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: PUSH
58793: LD_INT 4
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 4
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 4
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 4
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 3
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 4
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 5
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: LD_INT 5
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 5
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 4
59002: NEG
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 4
59037: NEG
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: LD_INT 5
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: NEG
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 3
59073: NEG
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 4
59085: NEG
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 5
59097: NEG
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 5
59109: NEG
59110: PUSH
59111: LD_INT 5
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: LD_INT 5
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 5
59133: NEG
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59190: LD_ADDR_VAR 0 30
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 4
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 5
59217: PUSH
59218: LD_INT 4
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 5
59227: PUSH
59228: LD_INT 5
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: LD_INT 4
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: LD_INT 3
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 5
59267: PUSH
59268: LD_INT 3
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: LD_INT 5
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 4
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: LD_INT 4
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 4
59380: NEG
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 4
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 4
59425: NEG
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 5
59436: NEG
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 5
59447: NEG
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 5
59459: NEG
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 3
59482: NEG
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 4
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 4
59542: NEG
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 4
59554: NEG
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 4
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 4
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 5
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: LD_INT 4
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 4
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 5
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: LD_INT 5
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59737: LD_ADDR_VAR 0 31
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 3
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 4
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 5
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 4
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 3
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: LD_INT 5
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 3
59837: NEG
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 4
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 4
59916: NEG
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 4
59939: NEG
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 4
59951: NEG
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: LD_INT 3
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 5
59999: NEG
60000: PUSH
60001: LD_INT 4
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 5
60011: NEG
60012: PUSH
60013: LD_INT 5
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: LD_INT 5
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 5
60035: NEG
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: LD_INT 4
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: LD_INT 4
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: LD_INT 4
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 4
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 4
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 5
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 5
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60287: LD_ADDR_VAR 0 32
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 4
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: NEG
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 5
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 5
60373: NEG
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: NEG
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 4
60456: NEG
60457: PUSH
60458: LD_INT 3
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 4
60468: NEG
60469: PUSH
60470: LD_INT 4
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: LD_INT 4
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 4
60492: NEG
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: LD_INT 4
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 5
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 4
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 4
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 5
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 5
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 3
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 4
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 4
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 4
60699: PUSH
60700: LD_INT 4
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 4
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 5
60719: PUSH
60720: LD_INT 4
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 5
60729: PUSH
60730: LD_INT 5
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 4
60739: PUSH
60740: LD_INT 5
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 3
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 5
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: LD_INT 5
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60834: LD_ADDR_VAR 0 33
60838: PUSH
60839: LD_INT 4
60841: NEG
60842: PUSH
60843: LD_INT 4
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: LD_INT 5
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 4
60889: NEG
60890: PUSH
60891: LD_INT 3
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 5
60901: NEG
60902: PUSH
60903: LD_INT 4
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 5
60913: NEG
60914: PUSH
60915: LD_INT 5
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: NEG
60926: PUSH
60927: LD_INT 5
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 5
60937: NEG
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 3
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 4
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 2
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 4
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: LD_INT 4
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 4
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 4
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 5
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 4
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 5
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 4
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 4
61174: PUSH
61175: LD_INT 4
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 4
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 4
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 4
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 4
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 5
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: LD_INT 5
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 4
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 5
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61372: LD_ADDR_VAR 0 34
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 4
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 5
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 3
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 4
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 5
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: LD_INT 3
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: LD_INT 5
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 3
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 3
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 4
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 4
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 4
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: PUSH
61575: LD_INT 4
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: LD_INT 3
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 5
61594: PUSH
61595: LD_INT 4
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 5
61604: PUSH
61605: LD_INT 5
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: LD_INT 5
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: LD_INT 4
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: LD_INT 3
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 5
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: LD_INT 5
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: LD_INT 3
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 4
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 4
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 3
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: LD_INT 4
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 4
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 4
61802: NEG
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 5
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 5
61836: NEG
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 3
61848: NEG
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: ST_TO_ADDR
// end ; end ;
61904: GO 61907
61906: POP
// case btype of b_depot , b_warehouse :
61907: LD_VAR 0 1
61911: PUSH
61912: LD_INT 0
61914: DOUBLE
61915: EQUAL
61916: IFTRUE 61926
61918: LD_INT 1
61920: DOUBLE
61921: EQUAL
61922: IFTRUE 61926
61924: GO 62127
61926: POP
// case nation of nation_american :
61927: LD_VAR 0 5
61931: PUSH
61932: LD_INT 1
61934: DOUBLE
61935: EQUAL
61936: IFTRUE 61940
61938: GO 61996
61940: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61941: LD_ADDR_VAR 0 9
61945: PUSH
61946: LD_VAR 0 11
61950: PUSH
61951: LD_VAR 0 12
61955: PUSH
61956: LD_VAR 0 13
61960: PUSH
61961: LD_VAR 0 14
61965: PUSH
61966: LD_VAR 0 15
61970: PUSH
61971: LD_VAR 0 16
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: PUSH
61984: LD_VAR 0 4
61988: PUSH
61989: LD_INT 1
61991: PLUS
61992: ARRAY
61993: ST_TO_ADDR
61994: GO 62125
61996: LD_INT 2
61998: DOUBLE
61999: EQUAL
62000: IFTRUE 62004
62002: GO 62060
62004: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62005: LD_ADDR_VAR 0 9
62009: PUSH
62010: LD_VAR 0 17
62014: PUSH
62015: LD_VAR 0 18
62019: PUSH
62020: LD_VAR 0 19
62024: PUSH
62025: LD_VAR 0 20
62029: PUSH
62030: LD_VAR 0 21
62034: PUSH
62035: LD_VAR 0 22
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: PUSH
62048: LD_VAR 0 4
62052: PUSH
62053: LD_INT 1
62055: PLUS
62056: ARRAY
62057: ST_TO_ADDR
62058: GO 62125
62060: LD_INT 3
62062: DOUBLE
62063: EQUAL
62064: IFTRUE 62068
62066: GO 62124
62068: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62069: LD_ADDR_VAR 0 9
62073: PUSH
62074: LD_VAR 0 23
62078: PUSH
62079: LD_VAR 0 24
62083: PUSH
62084: LD_VAR 0 25
62088: PUSH
62089: LD_VAR 0 26
62093: PUSH
62094: LD_VAR 0 27
62098: PUSH
62099: LD_VAR 0 28
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: PUSH
62112: LD_VAR 0 4
62116: PUSH
62117: LD_INT 1
62119: PLUS
62120: ARRAY
62121: ST_TO_ADDR
62122: GO 62125
62124: POP
62125: GO 62680
62127: LD_INT 2
62129: DOUBLE
62130: EQUAL
62131: IFTRUE 62141
62133: LD_INT 3
62135: DOUBLE
62136: EQUAL
62137: IFTRUE 62141
62139: GO 62197
62141: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62142: LD_ADDR_VAR 0 9
62146: PUSH
62147: LD_VAR 0 29
62151: PUSH
62152: LD_VAR 0 30
62156: PUSH
62157: LD_VAR 0 31
62161: PUSH
62162: LD_VAR 0 32
62166: PUSH
62167: LD_VAR 0 33
62171: PUSH
62172: LD_VAR 0 34
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: PUSH
62185: LD_VAR 0 4
62189: PUSH
62190: LD_INT 1
62192: PLUS
62193: ARRAY
62194: ST_TO_ADDR
62195: GO 62680
62197: LD_INT 16
62199: DOUBLE
62200: EQUAL
62201: IFTRUE 62259
62203: LD_INT 17
62205: DOUBLE
62206: EQUAL
62207: IFTRUE 62259
62209: LD_INT 18
62211: DOUBLE
62212: EQUAL
62213: IFTRUE 62259
62215: LD_INT 19
62217: DOUBLE
62218: EQUAL
62219: IFTRUE 62259
62221: LD_INT 22
62223: DOUBLE
62224: EQUAL
62225: IFTRUE 62259
62227: LD_INT 20
62229: DOUBLE
62230: EQUAL
62231: IFTRUE 62259
62233: LD_INT 21
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62259
62239: LD_INT 23
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62259
62245: LD_INT 24
62247: DOUBLE
62248: EQUAL
62249: IFTRUE 62259
62251: LD_INT 25
62253: DOUBLE
62254: EQUAL
62255: IFTRUE 62259
62257: GO 62315
62259: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62260: LD_ADDR_VAR 0 9
62264: PUSH
62265: LD_VAR 0 35
62269: PUSH
62270: LD_VAR 0 36
62274: PUSH
62275: LD_VAR 0 37
62279: PUSH
62280: LD_VAR 0 38
62284: PUSH
62285: LD_VAR 0 39
62289: PUSH
62290: LD_VAR 0 40
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: PUSH
62303: LD_VAR 0 4
62307: PUSH
62308: LD_INT 1
62310: PLUS
62311: ARRAY
62312: ST_TO_ADDR
62313: GO 62680
62315: LD_INT 6
62317: DOUBLE
62318: EQUAL
62319: IFTRUE 62371
62321: LD_INT 7
62323: DOUBLE
62324: EQUAL
62325: IFTRUE 62371
62327: LD_INT 8
62329: DOUBLE
62330: EQUAL
62331: IFTRUE 62371
62333: LD_INT 13
62335: DOUBLE
62336: EQUAL
62337: IFTRUE 62371
62339: LD_INT 12
62341: DOUBLE
62342: EQUAL
62343: IFTRUE 62371
62345: LD_INT 15
62347: DOUBLE
62348: EQUAL
62349: IFTRUE 62371
62351: LD_INT 11
62353: DOUBLE
62354: EQUAL
62355: IFTRUE 62371
62357: LD_INT 14
62359: DOUBLE
62360: EQUAL
62361: IFTRUE 62371
62363: LD_INT 10
62365: DOUBLE
62366: EQUAL
62367: IFTRUE 62371
62369: GO 62427
62371: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62372: LD_ADDR_VAR 0 9
62376: PUSH
62377: LD_VAR 0 41
62381: PUSH
62382: LD_VAR 0 42
62386: PUSH
62387: LD_VAR 0 43
62391: PUSH
62392: LD_VAR 0 44
62396: PUSH
62397: LD_VAR 0 45
62401: PUSH
62402: LD_VAR 0 46
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: PUSH
62415: LD_VAR 0 4
62419: PUSH
62420: LD_INT 1
62422: PLUS
62423: ARRAY
62424: ST_TO_ADDR
62425: GO 62680
62427: LD_INT 36
62429: DOUBLE
62430: EQUAL
62431: IFTRUE 62435
62433: GO 62491
62435: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62436: LD_ADDR_VAR 0 9
62440: PUSH
62441: LD_VAR 0 47
62445: PUSH
62446: LD_VAR 0 48
62450: PUSH
62451: LD_VAR 0 49
62455: PUSH
62456: LD_VAR 0 50
62460: PUSH
62461: LD_VAR 0 51
62465: PUSH
62466: LD_VAR 0 52
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: PUSH
62479: LD_VAR 0 4
62483: PUSH
62484: LD_INT 1
62486: PLUS
62487: ARRAY
62488: ST_TO_ADDR
62489: GO 62680
62491: LD_INT 4
62493: DOUBLE
62494: EQUAL
62495: IFTRUE 62517
62497: LD_INT 5
62499: DOUBLE
62500: EQUAL
62501: IFTRUE 62517
62503: LD_INT 34
62505: DOUBLE
62506: EQUAL
62507: IFTRUE 62517
62509: LD_INT 37
62511: DOUBLE
62512: EQUAL
62513: IFTRUE 62517
62515: GO 62573
62517: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62518: LD_ADDR_VAR 0 9
62522: PUSH
62523: LD_VAR 0 53
62527: PUSH
62528: LD_VAR 0 54
62532: PUSH
62533: LD_VAR 0 55
62537: PUSH
62538: LD_VAR 0 56
62542: PUSH
62543: LD_VAR 0 57
62547: PUSH
62548: LD_VAR 0 58
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: PUSH
62561: LD_VAR 0 4
62565: PUSH
62566: LD_INT 1
62568: PLUS
62569: ARRAY
62570: ST_TO_ADDR
62571: GO 62680
62573: LD_INT 31
62575: DOUBLE
62576: EQUAL
62577: IFTRUE 62623
62579: LD_INT 32
62581: DOUBLE
62582: EQUAL
62583: IFTRUE 62623
62585: LD_INT 33
62587: DOUBLE
62588: EQUAL
62589: IFTRUE 62623
62591: LD_INT 27
62593: DOUBLE
62594: EQUAL
62595: IFTRUE 62623
62597: LD_INT 26
62599: DOUBLE
62600: EQUAL
62601: IFTRUE 62623
62603: LD_INT 28
62605: DOUBLE
62606: EQUAL
62607: IFTRUE 62623
62609: LD_INT 29
62611: DOUBLE
62612: EQUAL
62613: IFTRUE 62623
62615: LD_INT 30
62617: DOUBLE
62618: EQUAL
62619: IFTRUE 62623
62621: GO 62679
62623: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62624: LD_ADDR_VAR 0 9
62628: PUSH
62629: LD_VAR 0 59
62633: PUSH
62634: LD_VAR 0 60
62638: PUSH
62639: LD_VAR 0 61
62643: PUSH
62644: LD_VAR 0 62
62648: PUSH
62649: LD_VAR 0 63
62653: PUSH
62654: LD_VAR 0 64
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: PUSH
62667: LD_VAR 0 4
62671: PUSH
62672: LD_INT 1
62674: PLUS
62675: ARRAY
62676: ST_TO_ADDR
62677: GO 62680
62679: POP
// temp_list2 = [ ] ;
62680: LD_ADDR_VAR 0 10
62684: PUSH
62685: EMPTY
62686: ST_TO_ADDR
// for i in temp_list do
62687: LD_ADDR_VAR 0 8
62691: PUSH
62692: LD_VAR 0 9
62696: PUSH
62697: FOR_IN
62698: IFFALSE 62750
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62700: LD_ADDR_VAR 0 10
62704: PUSH
62705: LD_VAR 0 10
62709: PUSH
62710: LD_VAR 0 8
62714: PUSH
62715: LD_INT 1
62717: ARRAY
62718: PUSH
62719: LD_VAR 0 2
62723: PLUS
62724: PUSH
62725: LD_VAR 0 8
62729: PUSH
62730: LD_INT 2
62732: ARRAY
62733: PUSH
62734: LD_VAR 0 3
62738: PLUS
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: EMPTY
62745: LIST
62746: ADD
62747: ST_TO_ADDR
62748: GO 62697
62750: POP
62751: POP
// result = temp_list2 ;
62752: LD_ADDR_VAR 0 7
62756: PUSH
62757: LD_VAR 0 10
62761: ST_TO_ADDR
// end ;
62762: LD_VAR 0 7
62766: RET
// export function EnemyInRange ( unit , dist ) ; begin
62767: LD_INT 0
62769: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62770: LD_ADDR_VAR 0 3
62774: PUSH
62775: LD_VAR 0 1
62779: PPUSH
62780: CALL_OW 255
62784: PPUSH
62785: LD_VAR 0 1
62789: PPUSH
62790: CALL_OW 250
62794: PPUSH
62795: LD_VAR 0 1
62799: PPUSH
62800: CALL_OW 251
62804: PPUSH
62805: LD_VAR 0 2
62809: PPUSH
62810: CALL 36871 0 4
62814: PUSH
62815: LD_INT 4
62817: ARRAY
62818: ST_TO_ADDR
// end ;
62819: LD_VAR 0 3
62823: RET
// export function PlayerSeeMe ( unit ) ; begin
62824: LD_INT 0
62826: PPUSH
// result := See ( your_side , unit ) ;
62827: LD_ADDR_VAR 0 2
62831: PUSH
62832: LD_OWVAR 2
62836: PPUSH
62837: LD_VAR 0 1
62841: PPUSH
62842: CALL_OW 292
62846: ST_TO_ADDR
// end ;
62847: LD_VAR 0 2
62851: RET
// export function ReverseDir ( unit ) ; begin
62852: LD_INT 0
62854: PPUSH
// if not unit then
62855: LD_VAR 0 1
62859: NOT
62860: IFFALSE 62864
// exit ;
62862: GO 62887
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62864: LD_ADDR_VAR 0 2
62868: PUSH
62869: LD_VAR 0 1
62873: PPUSH
62874: CALL_OW 254
62878: PUSH
62879: LD_INT 3
62881: PLUS
62882: PUSH
62883: LD_INT 6
62885: MOD
62886: ST_TO_ADDR
// end ;
62887: LD_VAR 0 2
62891: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62892: LD_INT 0
62894: PPUSH
62895: PPUSH
62896: PPUSH
62897: PPUSH
62898: PPUSH
// if not hexes then
62899: LD_VAR 0 2
62903: NOT
62904: IFFALSE 62908
// exit ;
62906: GO 63056
// dist := 9999 ;
62908: LD_ADDR_VAR 0 5
62912: PUSH
62913: LD_INT 9999
62915: ST_TO_ADDR
// for i = 1 to hexes do
62916: LD_ADDR_VAR 0 4
62920: PUSH
62921: DOUBLE
62922: LD_INT 1
62924: DEC
62925: ST_TO_ADDR
62926: LD_VAR 0 2
62930: PUSH
62931: FOR_TO
62932: IFFALSE 63044
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62934: LD_VAR 0 1
62938: PPUSH
62939: LD_VAR 0 2
62943: PUSH
62944: LD_VAR 0 4
62948: ARRAY
62949: PUSH
62950: LD_INT 1
62952: ARRAY
62953: PPUSH
62954: LD_VAR 0 2
62958: PUSH
62959: LD_VAR 0 4
62963: ARRAY
62964: PUSH
62965: LD_INT 2
62967: ARRAY
62968: PPUSH
62969: CALL_OW 297
62973: PUSH
62974: LD_VAR 0 5
62978: LESS
62979: IFFALSE 63042
// begin hex := hexes [ i ] ;
62981: LD_ADDR_VAR 0 7
62985: PUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_VAR 0 4
62995: ARRAY
62996: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62997: LD_ADDR_VAR 0 5
63001: PUSH
63002: LD_VAR 0 1
63006: PPUSH
63007: LD_VAR 0 2
63011: PUSH
63012: LD_VAR 0 4
63016: ARRAY
63017: PUSH
63018: LD_INT 1
63020: ARRAY
63021: PPUSH
63022: LD_VAR 0 2
63026: PUSH
63027: LD_VAR 0 4
63031: ARRAY
63032: PUSH
63033: LD_INT 2
63035: ARRAY
63036: PPUSH
63037: CALL_OW 297
63041: ST_TO_ADDR
// end ; end ;
63042: GO 62931
63044: POP
63045: POP
// result := hex ;
63046: LD_ADDR_VAR 0 3
63050: PUSH
63051: LD_VAR 0 7
63055: ST_TO_ADDR
// end ;
63056: LD_VAR 0 3
63060: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63061: LD_INT 0
63063: PPUSH
63064: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63065: LD_VAR 0 1
63069: NOT
63070: PUSH
63071: LD_VAR 0 1
63075: PUSH
63076: LD_INT 21
63078: PUSH
63079: LD_INT 2
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 23
63088: PUSH
63089: LD_INT 2
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PPUSH
63100: CALL_OW 69
63104: IN
63105: NOT
63106: OR
63107: IFFALSE 63111
// exit ;
63109: GO 63158
// for i = 1 to 3 do
63111: LD_ADDR_VAR 0 3
63115: PUSH
63116: DOUBLE
63117: LD_INT 1
63119: DEC
63120: ST_TO_ADDR
63121: LD_INT 3
63123: PUSH
63124: FOR_TO
63125: IFFALSE 63156
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63127: LD_VAR 0 1
63131: PPUSH
63132: CALL_OW 250
63136: PPUSH
63137: LD_VAR 0 1
63141: PPUSH
63142: CALL_OW 251
63146: PPUSH
63147: LD_INT 1
63149: PPUSH
63150: CALL_OW 453
63154: GO 63124
63156: POP
63157: POP
// end ;
63158: LD_VAR 0 2
63162: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63163: LD_INT 0
63165: PPUSH
63166: PPUSH
63167: PPUSH
63168: PPUSH
63169: PPUSH
63170: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63171: LD_VAR 0 1
63175: NOT
63176: PUSH
63177: LD_VAR 0 2
63181: NOT
63182: OR
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: CALL_OW 314
63193: OR
63194: IFFALSE 63198
// exit ;
63196: GO 63639
// x := GetX ( enemy_unit ) ;
63198: LD_ADDR_VAR 0 7
63202: PUSH
63203: LD_VAR 0 2
63207: PPUSH
63208: CALL_OW 250
63212: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63213: LD_ADDR_VAR 0 8
63217: PUSH
63218: LD_VAR 0 2
63222: PPUSH
63223: CALL_OW 251
63227: ST_TO_ADDR
// if not x or not y then
63228: LD_VAR 0 7
63232: NOT
63233: PUSH
63234: LD_VAR 0 8
63238: NOT
63239: OR
63240: IFFALSE 63244
// exit ;
63242: GO 63639
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63244: LD_ADDR_VAR 0 6
63248: PUSH
63249: LD_VAR 0 7
63253: PPUSH
63254: LD_INT 0
63256: PPUSH
63257: LD_INT 4
63259: PPUSH
63260: CALL_OW 272
63264: PUSH
63265: LD_VAR 0 8
63269: PPUSH
63270: LD_INT 0
63272: PPUSH
63273: LD_INT 4
63275: PPUSH
63276: CALL_OW 273
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_VAR 0 7
63289: PPUSH
63290: LD_INT 1
63292: PPUSH
63293: LD_INT 4
63295: PPUSH
63296: CALL_OW 272
63300: PUSH
63301: LD_VAR 0 8
63305: PPUSH
63306: LD_INT 1
63308: PPUSH
63309: LD_INT 4
63311: PPUSH
63312: CALL_OW 273
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_VAR 0 7
63325: PPUSH
63326: LD_INT 2
63328: PPUSH
63329: LD_INT 4
63331: PPUSH
63332: CALL_OW 272
63336: PUSH
63337: LD_VAR 0 8
63341: PPUSH
63342: LD_INT 2
63344: PPUSH
63345: LD_INT 4
63347: PPUSH
63348: CALL_OW 273
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_VAR 0 7
63361: PPUSH
63362: LD_INT 3
63364: PPUSH
63365: LD_INT 4
63367: PPUSH
63368: CALL_OW 272
63372: PUSH
63373: LD_VAR 0 8
63377: PPUSH
63378: LD_INT 3
63380: PPUSH
63381: LD_INT 4
63383: PPUSH
63384: CALL_OW 273
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_VAR 0 7
63397: PPUSH
63398: LD_INT 4
63400: PPUSH
63401: LD_INT 4
63403: PPUSH
63404: CALL_OW 272
63408: PUSH
63409: LD_VAR 0 8
63413: PPUSH
63414: LD_INT 4
63416: PPUSH
63417: LD_INT 4
63419: PPUSH
63420: CALL_OW 273
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_VAR 0 7
63433: PPUSH
63434: LD_INT 5
63436: PPUSH
63437: LD_INT 4
63439: PPUSH
63440: CALL_OW 272
63444: PUSH
63445: LD_VAR 0 8
63449: PPUSH
63450: LD_INT 5
63452: PPUSH
63453: LD_INT 4
63455: PPUSH
63456: CALL_OW 273
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// for i = tmp downto 1 do
63473: LD_ADDR_VAR 0 4
63477: PUSH
63478: DOUBLE
63479: LD_VAR 0 6
63483: INC
63484: ST_TO_ADDR
63485: LD_INT 1
63487: PUSH
63488: FOR_DOWNTO
63489: IFFALSE 63590
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63491: LD_VAR 0 6
63495: PUSH
63496: LD_VAR 0 4
63500: ARRAY
63501: PUSH
63502: LD_INT 1
63504: ARRAY
63505: PPUSH
63506: LD_VAR 0 6
63510: PUSH
63511: LD_VAR 0 4
63515: ARRAY
63516: PUSH
63517: LD_INT 2
63519: ARRAY
63520: PPUSH
63521: CALL_OW 488
63525: NOT
63526: PUSH
63527: LD_VAR 0 6
63531: PUSH
63532: LD_VAR 0 4
63536: ARRAY
63537: PUSH
63538: LD_INT 1
63540: ARRAY
63541: PPUSH
63542: LD_VAR 0 6
63546: PUSH
63547: LD_VAR 0 4
63551: ARRAY
63552: PUSH
63553: LD_INT 2
63555: ARRAY
63556: PPUSH
63557: CALL_OW 428
63561: PUSH
63562: LD_INT 0
63564: NONEQUAL
63565: OR
63566: IFFALSE 63588
// tmp := Delete ( tmp , i ) ;
63568: LD_ADDR_VAR 0 6
63572: PUSH
63573: LD_VAR 0 6
63577: PPUSH
63578: LD_VAR 0 4
63582: PPUSH
63583: CALL_OW 3
63587: ST_TO_ADDR
63588: GO 63488
63590: POP
63591: POP
// j := GetClosestHex ( unit , tmp ) ;
63592: LD_ADDR_VAR 0 5
63596: PUSH
63597: LD_VAR 0 1
63601: PPUSH
63602: LD_VAR 0 6
63606: PPUSH
63607: CALL 62892 0 2
63611: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63612: LD_VAR 0 1
63616: PPUSH
63617: LD_VAR 0 5
63621: PUSH
63622: LD_INT 1
63624: ARRAY
63625: PPUSH
63626: LD_VAR 0 5
63630: PUSH
63631: LD_INT 2
63633: ARRAY
63634: PPUSH
63635: CALL_OW 111
// end ;
63639: LD_VAR 0 3
63643: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63644: LD_INT 0
63646: PPUSH
63647: PPUSH
63648: PPUSH
// uc_side = 0 ;
63649: LD_ADDR_OWVAR 20
63653: PUSH
63654: LD_INT 0
63656: ST_TO_ADDR
// uc_nation = 0 ;
63657: LD_ADDR_OWVAR 21
63661: PUSH
63662: LD_INT 0
63664: ST_TO_ADDR
// InitHc ;
63665: CALL_OW 19
// InitVc ;
63669: CALL_OW 20
// if mastodonts then
63673: LD_VAR 0 6
63677: IFFALSE 63744
// for i = 1 to mastodonts do
63679: LD_ADDR_VAR 0 11
63683: PUSH
63684: DOUBLE
63685: LD_INT 1
63687: DEC
63688: ST_TO_ADDR
63689: LD_VAR 0 6
63693: PUSH
63694: FOR_TO
63695: IFFALSE 63742
// begin vc_chassis := 31 ;
63697: LD_ADDR_OWVAR 37
63701: PUSH
63702: LD_INT 31
63704: ST_TO_ADDR
// vc_control := control_rider ;
63705: LD_ADDR_OWVAR 38
63709: PUSH
63710: LD_INT 4
63712: ST_TO_ADDR
// animal := CreateVehicle ;
63713: LD_ADDR_VAR 0 12
63717: PUSH
63718: CALL_OW 45
63722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63723: LD_VAR 0 12
63727: PPUSH
63728: LD_VAR 0 8
63732: PPUSH
63733: LD_INT 0
63735: PPUSH
63736: CALL 65932 0 3
// end ;
63740: GO 63694
63742: POP
63743: POP
// if horses then
63744: LD_VAR 0 5
63748: IFFALSE 63815
// for i = 1 to horses do
63750: LD_ADDR_VAR 0 11
63754: PUSH
63755: DOUBLE
63756: LD_INT 1
63758: DEC
63759: ST_TO_ADDR
63760: LD_VAR 0 5
63764: PUSH
63765: FOR_TO
63766: IFFALSE 63813
// begin hc_class := 21 ;
63768: LD_ADDR_OWVAR 28
63772: PUSH
63773: LD_INT 21
63775: ST_TO_ADDR
// hc_gallery :=  ;
63776: LD_ADDR_OWVAR 33
63780: PUSH
63781: LD_STRING 
63783: ST_TO_ADDR
// animal := CreateHuman ;
63784: LD_ADDR_VAR 0 12
63788: PUSH
63789: CALL_OW 44
63793: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63794: LD_VAR 0 12
63798: PPUSH
63799: LD_VAR 0 8
63803: PPUSH
63804: LD_INT 0
63806: PPUSH
63807: CALL 65932 0 3
// end ;
63811: GO 63765
63813: POP
63814: POP
// if birds then
63815: LD_VAR 0 1
63819: IFFALSE 63886
// for i = 1 to birds do
63821: LD_ADDR_VAR 0 11
63825: PUSH
63826: DOUBLE
63827: LD_INT 1
63829: DEC
63830: ST_TO_ADDR
63831: LD_VAR 0 1
63835: PUSH
63836: FOR_TO
63837: IFFALSE 63884
// begin hc_class = 18 ;
63839: LD_ADDR_OWVAR 28
63843: PUSH
63844: LD_INT 18
63846: ST_TO_ADDR
// hc_gallery =  ;
63847: LD_ADDR_OWVAR 33
63851: PUSH
63852: LD_STRING 
63854: ST_TO_ADDR
// animal := CreateHuman ;
63855: LD_ADDR_VAR 0 12
63859: PUSH
63860: CALL_OW 44
63864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63865: LD_VAR 0 12
63869: PPUSH
63870: LD_VAR 0 8
63874: PPUSH
63875: LD_INT 0
63877: PPUSH
63878: CALL 65932 0 3
// end ;
63882: GO 63836
63884: POP
63885: POP
// if tigers then
63886: LD_VAR 0 2
63890: IFFALSE 63974
// for i = 1 to tigers do
63892: LD_ADDR_VAR 0 11
63896: PUSH
63897: DOUBLE
63898: LD_INT 1
63900: DEC
63901: ST_TO_ADDR
63902: LD_VAR 0 2
63906: PUSH
63907: FOR_TO
63908: IFFALSE 63972
// begin hc_class = class_tiger ;
63910: LD_ADDR_OWVAR 28
63914: PUSH
63915: LD_INT 14
63917: ST_TO_ADDR
// hc_gallery =  ;
63918: LD_ADDR_OWVAR 33
63922: PUSH
63923: LD_STRING 
63925: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63926: LD_ADDR_OWVAR 35
63930: PUSH
63931: LD_INT 7
63933: NEG
63934: PPUSH
63935: LD_INT 7
63937: PPUSH
63938: CALL_OW 12
63942: ST_TO_ADDR
// animal := CreateHuman ;
63943: LD_ADDR_VAR 0 12
63947: PUSH
63948: CALL_OW 44
63952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63953: LD_VAR 0 12
63957: PPUSH
63958: LD_VAR 0 8
63962: PPUSH
63963: LD_INT 0
63965: PPUSH
63966: CALL 65932 0 3
// end ;
63970: GO 63907
63972: POP
63973: POP
// if apemans then
63974: LD_VAR 0 3
63978: IFFALSE 64101
// for i = 1 to apemans do
63980: LD_ADDR_VAR 0 11
63984: PUSH
63985: DOUBLE
63986: LD_INT 1
63988: DEC
63989: ST_TO_ADDR
63990: LD_VAR 0 3
63994: PUSH
63995: FOR_TO
63996: IFFALSE 64099
// begin hc_class = class_apeman ;
63998: LD_ADDR_OWVAR 28
64002: PUSH
64003: LD_INT 12
64005: ST_TO_ADDR
// hc_gallery =  ;
64006: LD_ADDR_OWVAR 33
64010: PUSH
64011: LD_STRING 
64013: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64014: LD_ADDR_OWVAR 35
64018: PUSH
64019: LD_INT 5
64021: NEG
64022: PPUSH
64023: LD_INT 5
64025: PPUSH
64026: CALL_OW 12
64030: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64031: LD_ADDR_OWVAR 31
64035: PUSH
64036: LD_INT 1
64038: PPUSH
64039: LD_INT 3
64041: PPUSH
64042: CALL_OW 12
64046: PUSH
64047: LD_INT 1
64049: PPUSH
64050: LD_INT 3
64052: PPUSH
64053: CALL_OW 12
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// animal := CreateHuman ;
64070: LD_ADDR_VAR 0 12
64074: PUSH
64075: CALL_OW 44
64079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64080: LD_VAR 0 12
64084: PPUSH
64085: LD_VAR 0 8
64089: PPUSH
64090: LD_INT 0
64092: PPUSH
64093: CALL 65932 0 3
// end ;
64097: GO 63995
64099: POP
64100: POP
// if enchidnas then
64101: LD_VAR 0 4
64105: IFFALSE 64172
// for i = 1 to enchidnas do
64107: LD_ADDR_VAR 0 11
64111: PUSH
64112: DOUBLE
64113: LD_INT 1
64115: DEC
64116: ST_TO_ADDR
64117: LD_VAR 0 4
64121: PUSH
64122: FOR_TO
64123: IFFALSE 64170
// begin hc_class = 13 ;
64125: LD_ADDR_OWVAR 28
64129: PUSH
64130: LD_INT 13
64132: ST_TO_ADDR
// hc_gallery =  ;
64133: LD_ADDR_OWVAR 33
64137: PUSH
64138: LD_STRING 
64140: ST_TO_ADDR
// animal := CreateHuman ;
64141: LD_ADDR_VAR 0 12
64145: PUSH
64146: CALL_OW 44
64150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64151: LD_VAR 0 12
64155: PPUSH
64156: LD_VAR 0 8
64160: PPUSH
64161: LD_INT 0
64163: PPUSH
64164: CALL 65932 0 3
// end ;
64168: GO 64122
64170: POP
64171: POP
// if fishes then
64172: LD_VAR 0 7
64176: IFFALSE 64243
// for i = 1 to fishes do
64178: LD_ADDR_VAR 0 11
64182: PUSH
64183: DOUBLE
64184: LD_INT 1
64186: DEC
64187: ST_TO_ADDR
64188: LD_VAR 0 7
64192: PUSH
64193: FOR_TO
64194: IFFALSE 64241
// begin hc_class = 20 ;
64196: LD_ADDR_OWVAR 28
64200: PUSH
64201: LD_INT 20
64203: ST_TO_ADDR
// hc_gallery =  ;
64204: LD_ADDR_OWVAR 33
64208: PUSH
64209: LD_STRING 
64211: ST_TO_ADDR
// animal := CreateHuman ;
64212: LD_ADDR_VAR 0 12
64216: PUSH
64217: CALL_OW 44
64221: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64222: LD_VAR 0 12
64226: PPUSH
64227: LD_VAR 0 9
64231: PPUSH
64232: LD_INT 0
64234: PPUSH
64235: CALL 65932 0 3
// end ;
64239: GO 64193
64241: POP
64242: POP
// end ;
64243: LD_VAR 0 10
64247: RET
// export function WantHeal ( sci , unit ) ; begin
64248: LD_INT 0
64250: PPUSH
// if GetTaskList ( sci ) > 0 then
64251: LD_VAR 0 1
64255: PPUSH
64256: CALL_OW 437
64260: PUSH
64261: LD_INT 0
64263: GREATER
64264: IFFALSE 64334
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64266: LD_VAR 0 1
64270: PPUSH
64271: CALL_OW 437
64275: PUSH
64276: LD_INT 1
64278: ARRAY
64279: PUSH
64280: LD_INT 1
64282: ARRAY
64283: PUSH
64284: LD_STRING l
64286: EQUAL
64287: PUSH
64288: LD_VAR 0 1
64292: PPUSH
64293: CALL_OW 437
64297: PUSH
64298: LD_INT 1
64300: ARRAY
64301: PUSH
64302: LD_INT 4
64304: ARRAY
64305: PUSH
64306: LD_VAR 0 2
64310: EQUAL
64311: AND
64312: IFFALSE 64324
// result := true else
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: LD_INT 1
64321: ST_TO_ADDR
64322: GO 64332
// result := false ;
64324: LD_ADDR_VAR 0 3
64328: PUSH
64329: LD_INT 0
64331: ST_TO_ADDR
// end else
64332: GO 64342
// result := false ;
64334: LD_ADDR_VAR 0 3
64338: PUSH
64339: LD_INT 0
64341: ST_TO_ADDR
// end ;
64342: LD_VAR 0 3
64346: RET
// export function HealTarget ( sci ) ; begin
64347: LD_INT 0
64349: PPUSH
// if not sci then
64350: LD_VAR 0 1
64354: NOT
64355: IFFALSE 64359
// exit ;
64357: GO 64424
// result := 0 ;
64359: LD_ADDR_VAR 0 2
64363: PUSH
64364: LD_INT 0
64366: ST_TO_ADDR
// if GetTaskList ( sci ) then
64367: LD_VAR 0 1
64371: PPUSH
64372: CALL_OW 437
64376: IFFALSE 64424
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64378: LD_VAR 0 1
64382: PPUSH
64383: CALL_OW 437
64387: PUSH
64388: LD_INT 1
64390: ARRAY
64391: PUSH
64392: LD_INT 1
64394: ARRAY
64395: PUSH
64396: LD_STRING l
64398: EQUAL
64399: IFFALSE 64424
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64401: LD_ADDR_VAR 0 2
64405: PUSH
64406: LD_VAR 0 1
64410: PPUSH
64411: CALL_OW 437
64415: PUSH
64416: LD_INT 1
64418: ARRAY
64419: PUSH
64420: LD_INT 4
64422: ARRAY
64423: ST_TO_ADDR
// end ;
64424: LD_VAR 0 2
64428: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64429: LD_INT 0
64431: PPUSH
64432: PPUSH
64433: PPUSH
64434: PPUSH
// if not base_units then
64435: LD_VAR 0 1
64439: NOT
64440: IFFALSE 64444
// exit ;
64442: GO 64531
// result := false ;
64444: LD_ADDR_VAR 0 2
64448: PUSH
64449: LD_INT 0
64451: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64452: LD_ADDR_VAR 0 5
64456: PUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: LD_INT 21
64464: PUSH
64465: LD_INT 3
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PPUSH
64472: CALL_OW 72
64476: ST_TO_ADDR
// if not tmp then
64477: LD_VAR 0 5
64481: NOT
64482: IFFALSE 64486
// exit ;
64484: GO 64531
// for i in tmp do
64486: LD_ADDR_VAR 0 3
64490: PUSH
64491: LD_VAR 0 5
64495: PUSH
64496: FOR_IN
64497: IFFALSE 64529
// begin result := EnemyInRange ( i , 22 ) ;
64499: LD_ADDR_VAR 0 2
64503: PUSH
64504: LD_VAR 0 3
64508: PPUSH
64509: LD_INT 22
64511: PPUSH
64512: CALL 62767 0 2
64516: ST_TO_ADDR
// if result then
64517: LD_VAR 0 2
64521: IFFALSE 64527
// exit ;
64523: POP
64524: POP
64525: GO 64531
// end ;
64527: GO 64496
64529: POP
64530: POP
// end ;
64531: LD_VAR 0 2
64535: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64536: LD_INT 0
64538: PPUSH
64539: PPUSH
// if not units then
64540: LD_VAR 0 1
64544: NOT
64545: IFFALSE 64549
// exit ;
64547: GO 64619
// result := [ ] ;
64549: LD_ADDR_VAR 0 3
64553: PUSH
64554: EMPTY
64555: ST_TO_ADDR
// for i in units do
64556: LD_ADDR_VAR 0 4
64560: PUSH
64561: LD_VAR 0 1
64565: PUSH
64566: FOR_IN
64567: IFFALSE 64617
// if GetTag ( i ) = tag then
64569: LD_VAR 0 4
64573: PPUSH
64574: CALL_OW 110
64578: PUSH
64579: LD_VAR 0 2
64583: EQUAL
64584: IFFALSE 64615
// result := Insert ( result , result + 1 , i ) ;
64586: LD_ADDR_VAR 0 3
64590: PUSH
64591: LD_VAR 0 3
64595: PPUSH
64596: LD_VAR 0 3
64600: PUSH
64601: LD_INT 1
64603: PLUS
64604: PPUSH
64605: LD_VAR 0 4
64609: PPUSH
64610: CALL_OW 2
64614: ST_TO_ADDR
64615: GO 64566
64617: POP
64618: POP
// end ;
64619: LD_VAR 0 3
64623: RET
// export function IsDriver ( un ) ; begin
64624: LD_INT 0
64626: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64627: LD_ADDR_VAR 0 2
64631: PUSH
64632: LD_VAR 0 1
64636: PUSH
64637: LD_INT 55
64639: PUSH
64640: EMPTY
64641: LIST
64642: PPUSH
64643: CALL_OW 69
64647: IN
64648: ST_TO_ADDR
// end ;
64649: LD_VAR 0 2
64653: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
// list := [ ] ;
64658: LD_ADDR_VAR 0 5
64662: PUSH
64663: EMPTY
64664: ST_TO_ADDR
// case d of 0 :
64665: LD_VAR 0 3
64669: PUSH
64670: LD_INT 0
64672: DOUBLE
64673: EQUAL
64674: IFTRUE 64678
64676: GO 64811
64678: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64679: LD_ADDR_VAR 0 5
64683: PUSH
64684: LD_VAR 0 1
64688: PUSH
64689: LD_INT 4
64691: MINUS
64692: PUSH
64693: LD_VAR 0 2
64697: PUSH
64698: LD_INT 4
64700: MINUS
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: PUSH
64710: LD_VAR 0 1
64714: PUSH
64715: LD_INT 3
64717: MINUS
64718: PUSH
64719: LD_VAR 0 2
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: PUSH
64732: LD_VAR 0 1
64736: PUSH
64737: LD_INT 4
64739: PLUS
64740: PUSH
64741: LD_VAR 0 2
64745: PUSH
64746: LD_INT 4
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: PUSH
64754: LD_VAR 0 1
64758: PUSH
64759: LD_INT 3
64761: PLUS
64762: PUSH
64763: LD_VAR 0 2
64767: PUSH
64768: LD_INT 3
64770: PLUS
64771: PUSH
64772: LD_INT 5
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: PUSH
64780: LD_VAR 0 1
64784: PUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_INT 4
64792: PLUS
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// end ; 1 :
64809: GO 65509
64811: LD_INT 1
64813: DOUBLE
64814: EQUAL
64815: IFTRUE 64819
64817: GO 64952
64819: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64820: LD_ADDR_VAR 0 5
64824: PUSH
64825: LD_VAR 0 1
64829: PUSH
64830: LD_VAR 0 2
64834: PUSH
64835: LD_INT 4
64837: MINUS
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: PUSH
64847: LD_VAR 0 1
64851: PUSH
64852: LD_INT 3
64854: MINUS
64855: PUSH
64856: LD_VAR 0 2
64860: PUSH
64861: LD_INT 3
64863: MINUS
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: PUSH
64873: LD_VAR 0 1
64877: PUSH
64878: LD_INT 4
64880: MINUS
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: PUSH
64895: LD_VAR 0 1
64899: PUSH
64900: LD_VAR 0 2
64904: PUSH
64905: LD_INT 3
64907: PLUS
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: LIST
64916: PUSH
64917: LD_VAR 0 1
64921: PUSH
64922: LD_INT 4
64924: PLUS
64925: PUSH
64926: LD_VAR 0 2
64930: PUSH
64931: LD_INT 4
64933: PLUS
64934: PUSH
64935: LD_INT 5
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// end ; 2 :
64950: GO 65509
64952: LD_INT 2
64954: DOUBLE
64955: EQUAL
64956: IFTRUE 64960
64958: GO 65089
64960: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64961: LD_ADDR_VAR 0 5
64965: PUSH
64966: LD_VAR 0 1
64970: PUSH
64971: LD_VAR 0 2
64975: PUSH
64976: LD_INT 3
64978: MINUS
64979: PUSH
64980: LD_INT 3
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: PUSH
64988: LD_VAR 0 1
64992: PUSH
64993: LD_INT 4
64995: PLUS
64996: PUSH
64997: LD_VAR 0 2
65001: PUSH
65002: LD_INT 4
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: LIST
65009: PUSH
65010: LD_VAR 0 1
65014: PUSH
65015: LD_VAR 0 2
65019: PUSH
65020: LD_INT 4
65022: PLUS
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: PUSH
65032: LD_VAR 0 1
65036: PUSH
65037: LD_INT 3
65039: MINUS
65040: PUSH
65041: LD_VAR 0 2
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: PUSH
65054: LD_VAR 0 1
65058: PUSH
65059: LD_INT 4
65061: MINUS
65062: PUSH
65063: LD_VAR 0 2
65067: PUSH
65068: LD_INT 4
65070: MINUS
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// end ; 3 :
65087: GO 65509
65089: LD_INT 3
65091: DOUBLE
65092: EQUAL
65093: IFTRUE 65097
65095: GO 65230
65097: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65098: LD_ADDR_VAR 0 5
65102: PUSH
65103: LD_VAR 0 1
65107: PUSH
65108: LD_INT 3
65110: PLUS
65111: PUSH
65112: LD_VAR 0 2
65116: PUSH
65117: LD_INT 4
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: PUSH
65125: LD_VAR 0 1
65129: PUSH
65130: LD_INT 4
65132: PLUS
65133: PUSH
65134: LD_VAR 0 2
65138: PUSH
65139: LD_INT 4
65141: PLUS
65142: PUSH
65143: LD_INT 5
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: PUSH
65151: LD_VAR 0 1
65155: PUSH
65156: LD_INT 4
65158: MINUS
65159: PUSH
65160: LD_VAR 0 2
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: PUSH
65173: LD_VAR 0 1
65177: PUSH
65178: LD_VAR 0 2
65182: PUSH
65183: LD_INT 4
65185: MINUS
65186: PUSH
65187: LD_INT 3
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: PUSH
65195: LD_VAR 0 1
65199: PUSH
65200: LD_INT 3
65202: MINUS
65203: PUSH
65204: LD_VAR 0 2
65208: PUSH
65209: LD_INT 3
65211: MINUS
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// end ; 4 :
65228: GO 65509
65230: LD_INT 4
65232: DOUBLE
65233: EQUAL
65234: IFTRUE 65238
65236: GO 65371
65238: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65239: LD_ADDR_VAR 0 5
65243: PUSH
65244: LD_VAR 0 1
65248: PUSH
65249: LD_VAR 0 2
65253: PUSH
65254: LD_INT 4
65256: PLUS
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: LIST
65265: PUSH
65266: LD_VAR 0 1
65270: PUSH
65271: LD_INT 3
65273: PLUS
65274: PUSH
65275: LD_VAR 0 2
65279: PUSH
65280: LD_INT 3
65282: PLUS
65283: PUSH
65284: LD_INT 5
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 1
65296: PUSH
65297: LD_INT 4
65299: PLUS
65300: PUSH
65301: LD_VAR 0 2
65305: PUSH
65306: LD_INT 4
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: LIST
65313: PUSH
65314: LD_VAR 0 1
65318: PUSH
65319: LD_VAR 0 2
65323: PUSH
65324: LD_INT 3
65326: MINUS
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: PUSH
65336: LD_VAR 0 1
65340: PUSH
65341: LD_INT 4
65343: MINUS
65344: PUSH
65345: LD_VAR 0 2
65349: PUSH
65350: LD_INT 4
65352: MINUS
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: ST_TO_ADDR
// end ; 5 :
65369: GO 65509
65371: LD_INT 5
65373: DOUBLE
65374: EQUAL
65375: IFTRUE 65379
65377: GO 65508
65379: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65380: LD_ADDR_VAR 0 5
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_INT 4
65392: MINUS
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: PUSH
65407: LD_VAR 0 1
65411: PUSH
65412: LD_VAR 0 2
65416: PUSH
65417: LD_INT 4
65419: MINUS
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: PUSH
65429: LD_VAR 0 1
65433: PUSH
65434: LD_INT 4
65436: PLUS
65437: PUSH
65438: LD_VAR 0 2
65442: PUSH
65443: LD_INT 4
65445: PLUS
65446: PUSH
65447: LD_INT 5
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: PUSH
65455: LD_VAR 0 1
65459: PUSH
65460: LD_INT 3
65462: PLUS
65463: PUSH
65464: LD_VAR 0 2
65468: PUSH
65469: LD_INT 4
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: PUSH
65477: LD_VAR 0 1
65481: PUSH
65482: LD_VAR 0 2
65486: PUSH
65487: LD_INT 3
65489: PLUS
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// end ; end ;
65506: GO 65509
65508: POP
// result := list ;
65509: LD_ADDR_VAR 0 4
65513: PUSH
65514: LD_VAR 0 5
65518: ST_TO_ADDR
// end ;
65519: LD_VAR 0 4
65523: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65524: LD_INT 0
65526: PPUSH
65527: PPUSH
65528: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65529: LD_VAR 0 1
65533: NOT
65534: PUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: LD_INT 3
65548: PUSH
65549: LD_INT 4
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: IN
65558: NOT
65559: OR
65560: IFFALSE 65564
// exit ;
65562: GO 65656
// tmp := [ ] ;
65564: LD_ADDR_VAR 0 5
65568: PUSH
65569: EMPTY
65570: ST_TO_ADDR
// for i in units do
65571: LD_ADDR_VAR 0 4
65575: PUSH
65576: LD_VAR 0 1
65580: PUSH
65581: FOR_IN
65582: IFFALSE 65625
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65584: LD_ADDR_VAR 0 5
65588: PUSH
65589: LD_VAR 0 5
65593: PPUSH
65594: LD_VAR 0 5
65598: PUSH
65599: LD_INT 1
65601: PLUS
65602: PPUSH
65603: LD_VAR 0 4
65607: PPUSH
65608: LD_VAR 0 2
65612: PPUSH
65613: CALL_OW 259
65617: PPUSH
65618: CALL_OW 2
65622: ST_TO_ADDR
65623: GO 65581
65625: POP
65626: POP
// if not tmp then
65627: LD_VAR 0 5
65631: NOT
65632: IFFALSE 65636
// exit ;
65634: GO 65656
// result := SortListByListDesc ( units , tmp ) ;
65636: LD_ADDR_VAR 0 3
65640: PUSH
65641: LD_VAR 0 1
65645: PPUSH
65646: LD_VAR 0 5
65650: PPUSH
65651: CALL_OW 77
65655: ST_TO_ADDR
// end ;
65656: LD_VAR 0 3
65660: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65661: LD_INT 0
65663: PPUSH
65664: PPUSH
65665: PPUSH
// result := false ;
65666: LD_ADDR_VAR 0 3
65670: PUSH
65671: LD_INT 0
65673: ST_TO_ADDR
// x := GetX ( building ) ;
65674: LD_ADDR_VAR 0 4
65678: PUSH
65679: LD_VAR 0 2
65683: PPUSH
65684: CALL_OW 250
65688: ST_TO_ADDR
// y := GetY ( building ) ;
65689: LD_ADDR_VAR 0 5
65693: PUSH
65694: LD_VAR 0 2
65698: PPUSH
65699: CALL_OW 251
65703: ST_TO_ADDR
// if not building or not x or not y then
65704: LD_VAR 0 2
65708: NOT
65709: PUSH
65710: LD_VAR 0 4
65714: NOT
65715: OR
65716: PUSH
65717: LD_VAR 0 5
65721: NOT
65722: OR
65723: IFFALSE 65727
// exit ;
65725: GO 65819
// if GetTaskList ( unit ) then
65727: LD_VAR 0 1
65731: PPUSH
65732: CALL_OW 437
65736: IFFALSE 65819
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65738: LD_STRING e
65740: PUSH
65741: LD_VAR 0 1
65745: PPUSH
65746: CALL_OW 437
65750: PUSH
65751: LD_INT 1
65753: ARRAY
65754: PUSH
65755: LD_INT 1
65757: ARRAY
65758: EQUAL
65759: PUSH
65760: LD_VAR 0 4
65764: PUSH
65765: LD_VAR 0 1
65769: PPUSH
65770: CALL_OW 437
65774: PUSH
65775: LD_INT 1
65777: ARRAY
65778: PUSH
65779: LD_INT 2
65781: ARRAY
65782: EQUAL
65783: AND
65784: PUSH
65785: LD_VAR 0 5
65789: PUSH
65790: LD_VAR 0 1
65794: PPUSH
65795: CALL_OW 437
65799: PUSH
65800: LD_INT 1
65802: ARRAY
65803: PUSH
65804: LD_INT 3
65806: ARRAY
65807: EQUAL
65808: AND
65809: IFFALSE 65819
// result := true end ;
65811: LD_ADDR_VAR 0 3
65815: PUSH
65816: LD_INT 1
65818: ST_TO_ADDR
// end ;
65819: LD_VAR 0 3
65823: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65824: LD_INT 0
65826: PPUSH
// result := false ;
65827: LD_ADDR_VAR 0 4
65831: PUSH
65832: LD_INT 0
65834: ST_TO_ADDR
// if GetTaskList ( unit ) then
65835: LD_VAR 0 1
65839: PPUSH
65840: CALL_OW 437
65844: IFFALSE 65927
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65846: LD_STRING M
65848: PUSH
65849: LD_VAR 0 1
65853: PPUSH
65854: CALL_OW 437
65858: PUSH
65859: LD_INT 1
65861: ARRAY
65862: PUSH
65863: LD_INT 1
65865: ARRAY
65866: EQUAL
65867: PUSH
65868: LD_VAR 0 2
65872: PUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 437
65882: PUSH
65883: LD_INT 1
65885: ARRAY
65886: PUSH
65887: LD_INT 2
65889: ARRAY
65890: EQUAL
65891: AND
65892: PUSH
65893: LD_VAR 0 3
65897: PUSH
65898: LD_VAR 0 1
65902: PPUSH
65903: CALL_OW 437
65907: PUSH
65908: LD_INT 1
65910: ARRAY
65911: PUSH
65912: LD_INT 3
65914: ARRAY
65915: EQUAL
65916: AND
65917: IFFALSE 65927
// result := true ;
65919: LD_ADDR_VAR 0 4
65923: PUSH
65924: LD_INT 1
65926: ST_TO_ADDR
// end ; end ;
65927: LD_VAR 0 4
65931: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65932: LD_INT 0
65934: PPUSH
65935: PPUSH
65936: PPUSH
65937: PPUSH
// if not unit or not area then
65938: LD_VAR 0 1
65942: NOT
65943: PUSH
65944: LD_VAR 0 2
65948: NOT
65949: OR
65950: IFFALSE 65954
// exit ;
65952: GO 66118
// tmp := AreaToList ( area , i ) ;
65954: LD_ADDR_VAR 0 6
65958: PUSH
65959: LD_VAR 0 2
65963: PPUSH
65964: LD_VAR 0 5
65968: PPUSH
65969: CALL_OW 517
65973: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65974: LD_ADDR_VAR 0 5
65978: PUSH
65979: DOUBLE
65980: LD_INT 1
65982: DEC
65983: ST_TO_ADDR
65984: LD_VAR 0 6
65988: PUSH
65989: LD_INT 1
65991: ARRAY
65992: PUSH
65993: FOR_TO
65994: IFFALSE 66116
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65996: LD_ADDR_VAR 0 7
66000: PUSH
66001: LD_VAR 0 6
66005: PUSH
66006: LD_INT 1
66008: ARRAY
66009: PUSH
66010: LD_VAR 0 5
66014: ARRAY
66015: PUSH
66016: LD_VAR 0 6
66020: PUSH
66021: LD_INT 2
66023: ARRAY
66024: PUSH
66025: LD_VAR 0 5
66029: ARRAY
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66035: LD_VAR 0 7
66039: PUSH
66040: LD_INT 1
66042: ARRAY
66043: PPUSH
66044: LD_VAR 0 7
66048: PUSH
66049: LD_INT 2
66051: ARRAY
66052: PPUSH
66053: CALL_OW 428
66057: PUSH
66058: LD_INT 0
66060: EQUAL
66061: IFFALSE 66114
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66063: LD_VAR 0 1
66067: PPUSH
66068: LD_VAR 0 7
66072: PUSH
66073: LD_INT 1
66075: ARRAY
66076: PPUSH
66077: LD_VAR 0 7
66081: PUSH
66082: LD_INT 2
66084: ARRAY
66085: PPUSH
66086: LD_VAR 0 3
66090: PPUSH
66091: CALL_OW 48
// result := IsPlaced ( unit ) ;
66095: LD_ADDR_VAR 0 4
66099: PUSH
66100: LD_VAR 0 1
66104: PPUSH
66105: CALL_OW 305
66109: ST_TO_ADDR
// exit ;
66110: POP
66111: POP
66112: GO 66118
// end ; end ;
66114: GO 65993
66116: POP
66117: POP
// end ;
66118: LD_VAR 0 4
66122: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66123: LD_INT 0
66125: PPUSH
66126: PPUSH
66127: PPUSH
// if not side or side > 8 then
66128: LD_VAR 0 1
66132: NOT
66133: PUSH
66134: LD_VAR 0 1
66138: PUSH
66139: LD_INT 8
66141: GREATER
66142: OR
66143: IFFALSE 66147
// exit ;
66145: GO 66334
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66147: LD_ADDR_VAR 0 4
66151: PUSH
66152: LD_INT 22
66154: PUSH
66155: LD_VAR 0 1
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 21
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PPUSH
66178: CALL_OW 69
66182: ST_TO_ADDR
// if not tmp then
66183: LD_VAR 0 4
66187: NOT
66188: IFFALSE 66192
// exit ;
66190: GO 66334
// enable_addtolog := true ;
66192: LD_ADDR_OWVAR 81
66196: PUSH
66197: LD_INT 1
66199: ST_TO_ADDR
// AddToLog ( [ ) ;
66200: LD_STRING [
66202: PPUSH
66203: CALL_OW 561
// for i in tmp do
66207: LD_ADDR_VAR 0 3
66211: PUSH
66212: LD_VAR 0 4
66216: PUSH
66217: FOR_IN
66218: IFFALSE 66325
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66220: LD_STRING [
66222: PUSH
66223: LD_VAR 0 3
66227: PPUSH
66228: CALL_OW 266
66232: STR
66233: PUSH
66234: LD_STRING , 
66236: STR
66237: PUSH
66238: LD_VAR 0 3
66242: PPUSH
66243: CALL_OW 250
66247: STR
66248: PUSH
66249: LD_STRING , 
66251: STR
66252: PUSH
66253: LD_VAR 0 3
66257: PPUSH
66258: CALL_OW 251
66262: STR
66263: PUSH
66264: LD_STRING , 
66266: STR
66267: PUSH
66268: LD_VAR 0 3
66272: PPUSH
66273: CALL_OW 254
66277: STR
66278: PUSH
66279: LD_STRING , 
66281: STR
66282: PUSH
66283: LD_VAR 0 3
66287: PPUSH
66288: LD_INT 1
66290: PPUSH
66291: CALL_OW 268
66295: STR
66296: PUSH
66297: LD_STRING , 
66299: STR
66300: PUSH
66301: LD_VAR 0 3
66305: PPUSH
66306: LD_INT 2
66308: PPUSH
66309: CALL_OW 268
66313: STR
66314: PUSH
66315: LD_STRING ],
66317: STR
66318: PPUSH
66319: CALL_OW 561
// end ;
66323: GO 66217
66325: POP
66326: POP
// AddToLog ( ]; ) ;
66327: LD_STRING ];
66329: PPUSH
66330: CALL_OW 561
// end ;
66334: LD_VAR 0 2
66338: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66339: LD_INT 0
66341: PPUSH
66342: PPUSH
66343: PPUSH
66344: PPUSH
66345: PPUSH
// if not area or not rate or not max then
66346: LD_VAR 0 1
66350: NOT
66351: PUSH
66352: LD_VAR 0 2
66356: NOT
66357: OR
66358: PUSH
66359: LD_VAR 0 4
66363: NOT
66364: OR
66365: IFFALSE 66369
// exit ;
66367: GO 66561
// while 1 do
66369: LD_INT 1
66371: IFFALSE 66561
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66373: LD_ADDR_VAR 0 9
66377: PUSH
66378: LD_VAR 0 1
66382: PPUSH
66383: LD_INT 1
66385: PPUSH
66386: CALL_OW 287
66390: PUSH
66391: LD_INT 10
66393: MUL
66394: ST_TO_ADDR
// r := rate / 10 ;
66395: LD_ADDR_VAR 0 7
66399: PUSH
66400: LD_VAR 0 2
66404: PUSH
66405: LD_INT 10
66407: DIVREAL
66408: ST_TO_ADDR
// time := 1 1$00 ;
66409: LD_ADDR_VAR 0 8
66413: PUSH
66414: LD_INT 2100
66416: ST_TO_ADDR
// if amount < min then
66417: LD_VAR 0 9
66421: PUSH
66422: LD_VAR 0 3
66426: LESS
66427: IFFALSE 66445
// r := r * 2 else
66429: LD_ADDR_VAR 0 7
66433: PUSH
66434: LD_VAR 0 7
66438: PUSH
66439: LD_INT 2
66441: MUL
66442: ST_TO_ADDR
66443: GO 66471
// if amount > max then
66445: LD_VAR 0 9
66449: PUSH
66450: LD_VAR 0 4
66454: GREATER
66455: IFFALSE 66471
// r := r / 2 ;
66457: LD_ADDR_VAR 0 7
66461: PUSH
66462: LD_VAR 0 7
66466: PUSH
66467: LD_INT 2
66469: DIVREAL
66470: ST_TO_ADDR
// time := time / r ;
66471: LD_ADDR_VAR 0 8
66475: PUSH
66476: LD_VAR 0 8
66480: PUSH
66481: LD_VAR 0 7
66485: DIVREAL
66486: ST_TO_ADDR
// if time < 0 then
66487: LD_VAR 0 8
66491: PUSH
66492: LD_INT 0
66494: LESS
66495: IFFALSE 66512
// time := time * - 1 ;
66497: LD_ADDR_VAR 0 8
66501: PUSH
66502: LD_VAR 0 8
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: MUL
66511: ST_TO_ADDR
// wait ( time ) ;
66512: LD_VAR 0 8
66516: PPUSH
66517: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66521: LD_INT 35
66523: PPUSH
66524: LD_INT 875
66526: PPUSH
66527: CALL_OW 12
66531: PPUSH
66532: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66536: LD_INT 1
66538: PPUSH
66539: LD_INT 5
66541: PPUSH
66542: CALL_OW 12
66546: PPUSH
66547: LD_VAR 0 1
66551: PPUSH
66552: LD_INT 1
66554: PPUSH
66555: CALL_OW 55
// end ;
66559: GO 66369
// end ;
66561: LD_VAR 0 5
66565: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66566: LD_INT 0
66568: PPUSH
66569: PPUSH
66570: PPUSH
66571: PPUSH
66572: PPUSH
66573: PPUSH
66574: PPUSH
66575: PPUSH
// if not turrets or not factories then
66576: LD_VAR 0 1
66580: NOT
66581: PUSH
66582: LD_VAR 0 2
66586: NOT
66587: OR
66588: IFFALSE 66592
// exit ;
66590: GO 66899
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66592: LD_ADDR_VAR 0 10
66596: PUSH
66597: LD_INT 5
66599: PUSH
66600: LD_INT 6
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: LD_INT 4
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: LD_INT 5
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 24
66634: PUSH
66635: LD_INT 25
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 23
66644: PUSH
66645: LD_INT 27
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 42
66658: PUSH
66659: LD_INT 43
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 44
66668: PUSH
66669: LD_INT 46
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 45
66678: PUSH
66679: LD_INT 47
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: ST_TO_ADDR
// result := [ ] ;
66696: LD_ADDR_VAR 0 3
66700: PUSH
66701: EMPTY
66702: ST_TO_ADDR
// for i in turrets do
66703: LD_ADDR_VAR 0 4
66707: PUSH
66708: LD_VAR 0 1
66712: PUSH
66713: FOR_IN
66714: IFFALSE 66897
// begin nat := GetNation ( i ) ;
66716: LD_ADDR_VAR 0 7
66720: PUSH
66721: LD_VAR 0 4
66725: PPUSH
66726: CALL_OW 248
66730: ST_TO_ADDR
// weapon := 0 ;
66731: LD_ADDR_VAR 0 8
66735: PUSH
66736: LD_INT 0
66738: ST_TO_ADDR
// if not nat then
66739: LD_VAR 0 7
66743: NOT
66744: IFFALSE 66748
// continue ;
66746: GO 66713
// for j in list [ nat ] do
66748: LD_ADDR_VAR 0 5
66752: PUSH
66753: LD_VAR 0 10
66757: PUSH
66758: LD_VAR 0 7
66762: ARRAY
66763: PUSH
66764: FOR_IN
66765: IFFALSE 66806
// if GetBWeapon ( i ) = j [ 1 ] then
66767: LD_VAR 0 4
66771: PPUSH
66772: CALL_OW 269
66776: PUSH
66777: LD_VAR 0 5
66781: PUSH
66782: LD_INT 1
66784: ARRAY
66785: EQUAL
66786: IFFALSE 66804
// begin weapon := j [ 2 ] ;
66788: LD_ADDR_VAR 0 8
66792: PUSH
66793: LD_VAR 0 5
66797: PUSH
66798: LD_INT 2
66800: ARRAY
66801: ST_TO_ADDR
// break ;
66802: GO 66806
// end ;
66804: GO 66764
66806: POP
66807: POP
// if not weapon then
66808: LD_VAR 0 8
66812: NOT
66813: IFFALSE 66817
// continue ;
66815: GO 66713
// for k in factories do
66817: LD_ADDR_VAR 0 6
66821: PUSH
66822: LD_VAR 0 2
66826: PUSH
66827: FOR_IN
66828: IFFALSE 66893
// begin weapons := AvailableWeaponList ( k ) ;
66830: LD_ADDR_VAR 0 9
66834: PUSH
66835: LD_VAR 0 6
66839: PPUSH
66840: CALL_OW 478
66844: ST_TO_ADDR
// if not weapons then
66845: LD_VAR 0 9
66849: NOT
66850: IFFALSE 66854
// continue ;
66852: GO 66827
// if weapon in weapons then
66854: LD_VAR 0 8
66858: PUSH
66859: LD_VAR 0 9
66863: IN
66864: IFFALSE 66891
// begin result := [ i , weapon ] ;
66866: LD_ADDR_VAR 0 3
66870: PUSH
66871: LD_VAR 0 4
66875: PUSH
66876: LD_VAR 0 8
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// exit ;
66885: POP
66886: POP
66887: POP
66888: POP
66889: GO 66899
// end ; end ;
66891: GO 66827
66893: POP
66894: POP
// end ;
66895: GO 66713
66897: POP
66898: POP
// end ;
66899: LD_VAR 0 3
66903: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66904: LD_INT 0
66906: PPUSH
// if not side or side > 8 then
66907: LD_VAR 0 3
66911: NOT
66912: PUSH
66913: LD_VAR 0 3
66917: PUSH
66918: LD_INT 8
66920: GREATER
66921: OR
66922: IFFALSE 66926
// exit ;
66924: GO 66985
// if not range then
66926: LD_VAR 0 4
66930: NOT
66931: IFFALSE 66942
// range := - 12 ;
66933: LD_ADDR_VAR 0 4
66937: PUSH
66938: LD_INT 12
66940: NEG
66941: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66942: LD_VAR 0 1
66946: PPUSH
66947: LD_VAR 0 2
66951: PPUSH
66952: LD_VAR 0 3
66956: PPUSH
66957: LD_VAR 0 4
66961: PPUSH
66962: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66966: LD_VAR 0 1
66970: PPUSH
66971: LD_VAR 0 2
66975: PPUSH
66976: LD_VAR 0 3
66980: PPUSH
66981: CALL_OW 331
// end ;
66985: LD_VAR 0 5
66989: RET
// export function Video ( mode ) ; begin
66990: LD_INT 0
66992: PPUSH
// ingame_video = mode ;
66993: LD_ADDR_OWVAR 52
66997: PUSH
66998: LD_VAR 0 1
67002: ST_TO_ADDR
// interface_hidden = mode ;
67003: LD_ADDR_OWVAR 54
67007: PUSH
67008: LD_VAR 0 1
67012: ST_TO_ADDR
// end ;
67013: LD_VAR 0 2
67017: RET
// export function Join ( array , element ) ; begin
67018: LD_INT 0
67020: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67021: LD_ADDR_VAR 0 3
67025: PUSH
67026: LD_VAR 0 1
67030: PPUSH
67031: LD_VAR 0 1
67035: PUSH
67036: LD_INT 1
67038: PLUS
67039: PPUSH
67040: LD_VAR 0 2
67044: PPUSH
67045: CALL_OW 1
67049: ST_TO_ADDR
// end ;
67050: LD_VAR 0 3
67054: RET
// export function JoinUnion ( array , element ) ; begin
67055: LD_INT 0
67057: PPUSH
// result := array union element ;
67058: LD_ADDR_VAR 0 3
67062: PUSH
67063: LD_VAR 0 1
67067: PUSH
67068: LD_VAR 0 2
67072: UNION
67073: ST_TO_ADDR
// end ;
67074: LD_VAR 0 3
67078: RET
// export function GetBehemoths ( side ) ; begin
67079: LD_INT 0
67081: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67082: LD_ADDR_VAR 0 2
67086: PUSH
67087: LD_INT 22
67089: PUSH
67090: LD_VAR 0 1
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 31
67101: PUSH
67102: LD_INT 25
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PPUSH
67113: CALL_OW 69
67117: ST_TO_ADDR
// end ;
67118: LD_VAR 0 2
67122: RET
// export function Shuffle ( array ) ; var i , index ; begin
67123: LD_INT 0
67125: PPUSH
67126: PPUSH
67127: PPUSH
// result := [ ] ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: EMPTY
67134: ST_TO_ADDR
// if not array then
67135: LD_VAR 0 1
67139: NOT
67140: IFFALSE 67144
// exit ;
67142: GO 67243
// Randomize ;
67144: CALL_OW 10
// for i = array downto 1 do
67148: LD_ADDR_VAR 0 3
67152: PUSH
67153: DOUBLE
67154: LD_VAR 0 1
67158: INC
67159: ST_TO_ADDR
67160: LD_INT 1
67162: PUSH
67163: FOR_DOWNTO
67164: IFFALSE 67241
// begin index := rand ( 1 , array ) ;
67166: LD_ADDR_VAR 0 4
67170: PUSH
67171: LD_INT 1
67173: PPUSH
67174: LD_VAR 0 1
67178: PPUSH
67179: CALL_OW 12
67183: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67184: LD_ADDR_VAR 0 2
67188: PUSH
67189: LD_VAR 0 2
67193: PPUSH
67194: LD_VAR 0 2
67198: PUSH
67199: LD_INT 1
67201: PLUS
67202: PPUSH
67203: LD_VAR 0 1
67207: PUSH
67208: LD_VAR 0 4
67212: ARRAY
67213: PPUSH
67214: CALL_OW 2
67218: ST_TO_ADDR
// array := Delete ( array , index ) ;
67219: LD_ADDR_VAR 0 1
67223: PUSH
67224: LD_VAR 0 1
67228: PPUSH
67229: LD_VAR 0 4
67233: PPUSH
67234: CALL_OW 3
67238: ST_TO_ADDR
// end ;
67239: GO 67163
67241: POP
67242: POP
// end ;
67243: LD_VAR 0 2
67247: RET
// export function GetBaseMaterials ( base ) ; begin
67248: LD_INT 0
67250: PPUSH
// result := [ 0 , 0 , 0 ] ;
67251: LD_ADDR_VAR 0 2
67255: PUSH
67256: LD_INT 0
67258: PUSH
67259: LD_INT 0
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: LIST
67269: ST_TO_ADDR
// if not base then
67270: LD_VAR 0 1
67274: NOT
67275: IFFALSE 67279
// exit ;
67277: GO 67328
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67279: LD_ADDR_VAR 0 2
67283: PUSH
67284: LD_VAR 0 1
67288: PPUSH
67289: LD_INT 1
67291: PPUSH
67292: CALL_OW 275
67296: PUSH
67297: LD_VAR 0 1
67301: PPUSH
67302: LD_INT 2
67304: PPUSH
67305: CALL_OW 275
67309: PUSH
67310: LD_VAR 0 1
67314: PPUSH
67315: LD_INT 3
67317: PPUSH
67318: CALL_OW 275
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: ST_TO_ADDR
// end ;
67328: LD_VAR 0 2
67332: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67333: LD_INT 0
67335: PPUSH
67336: PPUSH
// result := array ;
67337: LD_ADDR_VAR 0 3
67341: PUSH
67342: LD_VAR 0 1
67346: ST_TO_ADDR
// if size > 0 then
67347: LD_VAR 0 2
67351: PUSH
67352: LD_INT 0
67354: GREATER
67355: IFFALSE 67401
// for i := array downto size do
67357: LD_ADDR_VAR 0 4
67361: PUSH
67362: DOUBLE
67363: LD_VAR 0 1
67367: INC
67368: ST_TO_ADDR
67369: LD_VAR 0 2
67373: PUSH
67374: FOR_DOWNTO
67375: IFFALSE 67399
// result := Delete ( result , result ) ;
67377: LD_ADDR_VAR 0 3
67381: PUSH
67382: LD_VAR 0 3
67386: PPUSH
67387: LD_VAR 0 3
67391: PPUSH
67392: CALL_OW 3
67396: ST_TO_ADDR
67397: GO 67374
67399: POP
67400: POP
// end ;
67401: LD_VAR 0 3
67405: RET
// export function ComExit ( unit ) ; var tmp ; begin
67406: LD_INT 0
67408: PPUSH
67409: PPUSH
// if not IsInUnit ( unit ) then
67410: LD_VAR 0 1
67414: PPUSH
67415: CALL_OW 310
67419: NOT
67420: IFFALSE 67424
// exit ;
67422: GO 67484
// tmp := IsInUnit ( unit ) ;
67424: LD_ADDR_VAR 0 3
67428: PUSH
67429: LD_VAR 0 1
67433: PPUSH
67434: CALL_OW 310
67438: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67439: LD_VAR 0 3
67443: PPUSH
67444: CALL_OW 247
67448: PUSH
67449: LD_INT 2
67451: EQUAL
67452: IFFALSE 67465
// ComExitVehicle ( unit ) else
67454: LD_VAR 0 1
67458: PPUSH
67459: CALL_OW 121
67463: GO 67474
// ComExitBuilding ( unit ) ;
67465: LD_VAR 0 1
67469: PPUSH
67470: CALL_OW 122
// result := tmp ;
67474: LD_ADDR_VAR 0 2
67478: PUSH
67479: LD_VAR 0 3
67483: ST_TO_ADDR
// end ;
67484: LD_VAR 0 2
67488: RET
// export function ResetHc ; begin
67489: LD_INT 0
67491: PPUSH
// InitHc ;
67492: CALL_OW 19
// hc_importance := 0 ;
67496: LD_ADDR_OWVAR 32
67500: PUSH
67501: LD_INT 0
67503: ST_TO_ADDR
// end ;
67504: LD_VAR 0 1
67508: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67509: LD_INT 0
67511: PPUSH
67512: PPUSH
67513: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67514: LD_ADDR_VAR 0 6
67518: PUSH
67519: LD_VAR 0 1
67523: PUSH
67524: LD_VAR 0 3
67528: PLUS
67529: PUSH
67530: LD_INT 2
67532: DIV
67533: ST_TO_ADDR
// if _x < 0 then
67534: LD_VAR 0 6
67538: PUSH
67539: LD_INT 0
67541: LESS
67542: IFFALSE 67559
// _x := _x * - 1 ;
67544: LD_ADDR_VAR 0 6
67548: PUSH
67549: LD_VAR 0 6
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: MUL
67558: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67559: LD_ADDR_VAR 0 7
67563: PUSH
67564: LD_VAR 0 2
67568: PUSH
67569: LD_VAR 0 4
67573: PLUS
67574: PUSH
67575: LD_INT 2
67577: DIV
67578: ST_TO_ADDR
// if _y < 0 then
67579: LD_VAR 0 7
67583: PUSH
67584: LD_INT 0
67586: LESS
67587: IFFALSE 67604
// _y := _y * - 1 ;
67589: LD_ADDR_VAR 0 7
67593: PUSH
67594: LD_VAR 0 7
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: MUL
67603: ST_TO_ADDR
// result := [ _x , _y ] ;
67604: LD_ADDR_VAR 0 5
67608: PUSH
67609: LD_VAR 0 6
67613: PUSH
67614: LD_VAR 0 7
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: ST_TO_ADDR
// end ;
67623: LD_VAR 0 5
67627: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67628: LD_INT 0
67630: PPUSH
67631: PPUSH
67632: PPUSH
67633: PPUSH
// task := GetTaskList ( unit ) ;
67634: LD_ADDR_VAR 0 7
67638: PUSH
67639: LD_VAR 0 1
67643: PPUSH
67644: CALL_OW 437
67648: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67649: LD_VAR 0 7
67653: NOT
67654: PUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: LD_VAR 0 2
67664: PPUSH
67665: CALL_OW 308
67669: NOT
67670: AND
67671: IFFALSE 67675
// exit ;
67673: GO 67793
// if IsInArea ( unit , area ) then
67675: LD_VAR 0 1
67679: PPUSH
67680: LD_VAR 0 2
67684: PPUSH
67685: CALL_OW 308
67689: IFFALSE 67707
// begin ComMoveToArea ( unit , goAway ) ;
67691: LD_VAR 0 1
67695: PPUSH
67696: LD_VAR 0 3
67700: PPUSH
67701: CALL_OW 113
// exit ;
67705: GO 67793
// end ; if task [ 1 ] [ 1 ] <> M then
67707: LD_VAR 0 7
67711: PUSH
67712: LD_INT 1
67714: ARRAY
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PUSH
67720: LD_STRING M
67722: NONEQUAL
67723: IFFALSE 67727
// exit ;
67725: GO 67793
// x := task [ 1 ] [ 2 ] ;
67727: LD_ADDR_VAR 0 5
67731: PUSH
67732: LD_VAR 0 7
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: PUSH
67741: LD_INT 2
67743: ARRAY
67744: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67745: LD_ADDR_VAR 0 6
67749: PUSH
67750: LD_VAR 0 7
67754: PUSH
67755: LD_INT 1
67757: ARRAY
67758: PUSH
67759: LD_INT 3
67761: ARRAY
67762: ST_TO_ADDR
// if InArea ( x , y , area ) then
67763: LD_VAR 0 5
67767: PPUSH
67768: LD_VAR 0 6
67772: PPUSH
67773: LD_VAR 0 2
67777: PPUSH
67778: CALL_OW 309
67782: IFFALSE 67793
// ComStop ( unit ) ;
67784: LD_VAR 0 1
67788: PPUSH
67789: CALL_OW 141
// end ;
67793: LD_VAR 0 4
67797: RET
// export function Abs ( value ) ; begin
67798: LD_INT 0
67800: PPUSH
// result := value ;
67801: LD_ADDR_VAR 0 2
67805: PUSH
67806: LD_VAR 0 1
67810: ST_TO_ADDR
// if value < 0 then
67811: LD_VAR 0 1
67815: PUSH
67816: LD_INT 0
67818: LESS
67819: IFFALSE 67836
// result := value * - 1 ;
67821: LD_ADDR_VAR 0 2
67825: PUSH
67826: LD_VAR 0 1
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: MUL
67835: ST_TO_ADDR
// end ;
67836: LD_VAR 0 2
67840: RET
