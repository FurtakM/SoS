// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8115 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 34284 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 34284 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 34284 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 34284 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 34284 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 34284 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 34284 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 34284 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 34284 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 34284 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 34284 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 34284 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 34284 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 34284 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 34284 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 34284 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 34284 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 34284 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 34284 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 34284 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 34284 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 34284 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 70577 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 70577 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 70577 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 70577 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 70577 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 70577 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 70577 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 70577 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7780: LD_VAR 0 1
7784: PPUSH
7785: CALL 14346 0 1
// if un = Heike then
7789: LD_VAR 0 1
7793: PUSH
7794: LD_EXP 21
7798: EQUAL
7799: IFFALSE 7808
// YouLost ( Heike ) ;
7801: LD_STRING Heike
7803: PPUSH
7804: CALL_OW 104
// if un in apeSoldGroup then
7808: LD_VAR 0 1
7812: PUSH
7813: LD_EXP 42
7817: IN
7818: IFFALSE 7836
// apeSoldGroup := apeSoldGroup diff un ;
7820: LD_ADDR_EXP 42
7824: PUSH
7825: LD_EXP 42
7829: PUSH
7830: LD_VAR 0 1
7834: DIFF
7835: ST_TO_ADDR
// if un in apeEngGroup then
7836: LD_VAR 0 1
7840: PUSH
7841: LD_EXP 43
7845: IN
7846: IFFALSE 7864
// apeEngGroup := apeEngGroup diff un ;
7848: LD_ADDR_EXP 43
7852: PUSH
7853: LD_EXP 43
7857: PUSH
7858: LD_VAR 0 1
7862: DIFF
7863: ST_TO_ADDR
// if un in oilBaseGuard then
7864: LD_VAR 0 1
7868: PUSH
7869: LD_EXP 38
7873: IN
7874: IFFALSE 7892
// oilBaseGuard := oilBaseGuard diff un ;
7876: LD_ADDR_EXP 38
7880: PUSH
7881: LD_EXP 38
7885: PUSH
7886: LD_VAR 0 1
7890: DIFF
7891: ST_TO_ADDR
// if un in ruNorthGroup then
7892: LD_VAR 0 1
7896: PUSH
7897: LD_EXP 39
7901: IN
7902: IFFALSE 7920
// ruNorthGroup := ruNorthGroup diff un ;
7904: LD_ADDR_EXP 39
7908: PUSH
7909: LD_EXP 39
7913: PUSH
7914: LD_VAR 0 1
7918: DIFF
7919: ST_TO_ADDR
// if un in ruSouthGroup then
7920: LD_VAR 0 1
7924: PUSH
7925: LD_EXP 40
7929: IN
7930: IFFALSE 7948
// ruSouthGroup := ruSouthGroup diff un ;
7932: LD_ADDR_EXP 40
7936: PUSH
7937: LD_EXP 40
7941: PUSH
7942: LD_VAR 0 1
7946: DIFF
7947: ST_TO_ADDR
// if un in ruConvoySquad then
7948: LD_VAR 0 1
7952: PUSH
7953: LD_EXP 41
7957: IN
7958: IFFALSE 7976
// ruConvoySquad := ruConvoySquad diff un ;
7960: LD_ADDR_EXP 41
7964: PUSH
7965: LD_EXP 41
7969: PUSH
7970: LD_VAR 0 1
7974: DIFF
7975: ST_TO_ADDR
// end ;
7976: PPOPN 1
7978: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_VAR 0 2
7988: PPUSH
7989: CALL 14466 0 2
// if GetWeapon ( veh ) = ar_radar then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 30
8005: EQUAL
8006: IFFALSE 8016
// radarConstructed := true ;
8008: LD_ADDR_EXP 13
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 264
8025: PUSH
8026: LD_INT 26
8028: EQUAL
8029: IFFALSE 8039
// flamethrowerBuilt := true ;
8031: LD_ADDR_EXP 20
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// end ;
8039: PPOPN 2
8041: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8042: LD_ADDR_EXP 18
8046: PUSH
8047: LD_EXP 18
8051: PUSH
8052: LD_INT 1
8054: PLUS
8055: ST_TO_ADDR
// if oldId in ruConvoySquad then
8056: LD_VAR 0 2
8060: PUSH
8061: LD_EXP 41
8065: IN
8066: IFFALSE 8084
// ruConvoySquad := ruConvoySquad diff oldId ;
8068: LD_ADDR_EXP 41
8072: PUSH
8073: LD_EXP 41
8077: PUSH
8078: LD_VAR 0 2
8082: DIFF
8083: ST_TO_ADDR
// if newId in ruConvoySquad then
8084: LD_VAR 0 1
8088: PUSH
8089: LD_EXP 41
8093: IN
8094: IFFALSE 8112
// ruConvoySquad := ruConvoySquad diff newId ;
8096: LD_ADDR_EXP 41
8100: PUSH
8101: LD_EXP 41
8105: PUSH
8106: LD_VAR 0 1
8110: DIFF
8111: ST_TO_ADDR
// end ; end_of_file
8112: PPOPN 4
8114: END
// export function Action ; var i , p , un , veh , tmp ; begin
8115: LD_INT 0
8117: PPUSH
8118: PPUSH
8119: PPUSH
8120: PPUSH
8121: PPUSH
8122: PPUSH
// InGameOn ;
8123: CALL_OW 8
// music_nat := 2 ;
8127: LD_ADDR_OWVAR 71
8131: PUSH
8132: LD_INT 2
8134: ST_TO_ADDR
// music_class := music_recon ;
8135: LD_ADDR_OWVAR 72
8139: PUSH
8140: LD_INT 3
8142: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8143: LD_INT 7
8145: PPUSH
8146: LD_INT 6
8148: PPUSH
8149: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8153: LD_INT 7
8155: PPUSH
8156: LD_INT 6
8158: PPUSH
8159: LD_INT 2
8161: PPUSH
8162: LD_INT 30
8164: NEG
8165: PPUSH
8166: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 21
8179: PUSH
8180: LD_EXP 22
8184: PUSH
8185: LD_EXP 23
8189: PUSH
8190: LD_EXP 24
8194: PUSH
8195: LD_EXP 25
8199: PUSH
8200: LD_EXP 26
8204: PUSH
8205: LD_EXP 28
8209: PUSH
8210: LD_EXP 33
8214: PUSH
8215: LD_EXP 27
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// tmp := tmp diff 0 ;
8231: LD_ADDR_VAR 0 6
8235: PUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 0
8243: DIFF
8244: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8245: LD_ADDR_VAR 0 6
8249: PUSH
8250: LD_VAR 0 6
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL 70169 0 2
8262: ST_TO_ADDR
// for i in heikeVehicles do
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: LD_EXP 35
8272: PUSH
8273: FOR_IN
8274: IFFALSE 8473
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8276: LD_INT 5
8278: PPUSH
8279: LD_VAR 0 2
8283: PUSH
8284: LD_INT 5
8286: ARRAY
8287: PPUSH
8288: LD_VAR 0 2
8292: PUSH
8293: LD_INT 1
8295: ARRAY
8296: PPUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 3
8313: ARRAY
8314: PPUSH
8315: LD_VAR 0 2
8319: PUSH
8320: LD_INT 4
8322: ARRAY
8323: PPUSH
8324: LD_INT 34
8326: PPUSH
8327: CALL 439 0 7
// veh := CreateVehicle ;
8331: LD_ADDR_VAR 0 5
8335: PUSH
8336: CALL_OW 45
8340: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8341: LD_VAR 0 2
8345: PUSH
8346: LD_INT 4
8348: ARRAY
8349: PUSH
8350: LD_INT 51
8352: PUSH
8353: LD_INT 32
8355: PUSH
8356: LD_INT 12
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: IN
8364: IFFALSE 8444
// begin if i [ 7 ] [ 1 ] then
8366: LD_VAR 0 2
8370: PUSH
8371: LD_INT 7
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: IFFALSE 8405
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8380: LD_VAR 0 5
8384: PPUSH
8385: LD_INT 1
8387: PPUSH
8388: LD_VAR 0 2
8392: PUSH
8393: LD_INT 7
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 7
8412: ARRAY
8413: PUSH
8414: LD_INT 2
8416: ARRAY
8417: IFFALSE 8444
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8419: LD_VAR 0 5
8423: PPUSH
8424: LD_INT 2
8426: PPUSH
8427: LD_VAR 0 2
8431: PUSH
8432: LD_INT 7
8434: ARRAY
8435: PUSH
8436: LD_INT 2
8438: ARRAY
8439: PPUSH
8440: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8456: LD_VAR 0 5
8460: PPUSH
8461: LD_INT 4
8463: PPUSH
8464: LD_INT 0
8466: PPUSH
8467: CALL_OW 49
// end ;
8471: GO 8273
8473: POP
8474: POP
// if tmp then
8475: LD_VAR 0 6
8479: IFFALSE 8589
// begin p := 0 ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// for i in tmp do
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: LD_VAR 0 6
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8587
// begin p := p + 1 ;
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 1
8514: PLUS
8515: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8516: LD_VAR 0 2
8520: PPUSH
8521: LD_INT 5
8523: PPUSH
8524: LD_INT 0
8526: PPUSH
8527: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8531: LD_VAR 0 2
8535: PPUSH
8536: LD_INT 26
8538: PPUSH
8539: LD_INT 9
8541: PPUSH
8542: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_EXP 35
8555: GREATEREQUAL
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 257
8566: PUSH
8567: LD_INT 3
8569: EQUAL
8570: AND
8571: IFFALSE 8585
// SetClass ( i , 1 ) ;
8573: LD_VAR 0 2
8577: PPUSH
8578: LD_INT 1
8580: PPUSH
8581: CALL_OW 336
// end ;
8585: GO 8499
8587: POP
8588: POP
// end ; if heikeSecondSquad then
8589: LD_EXP 34
8593: IFFALSE 8707
// for i in heikeSecondSquad do
8595: LD_ADDR_VAR 0 2
8599: PUSH
8600: LD_EXP 34
8604: PUSH
8605: FOR_IN
8606: IFFALSE 8705
// begin p := p + 1 ;
8608: LD_ADDR_VAR 0 3
8612: PUSH
8613: LD_VAR 0 3
8617: PUSH
8618: LD_INT 1
8620: PLUS
8621: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_INT 6
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8637: LD_VAR 0 2
8641: PPUSH
8642: LD_INT 26
8644: PPUSH
8645: LD_INT 9
8647: PPUSH
8648: CALL_OW 118
// ForceSleep ( i , true ) ;
8652: LD_VAR 0 2
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8664: LD_VAR 0 3
8668: PUSH
8669: LD_EXP 35
8673: GREATEREQUAL
8674: PUSH
8675: LD_VAR 0 2
8679: PPUSH
8680: CALL_OW 257
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: AND
8689: IFFALSE 8703
// SetClass ( i , 1 ) ;
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: CALL_OW 336
// end ;
8703: GO 8605
8705: POP
8706: POP
// if heikeApes then
8707: LD_EXP 36
8711: IFFALSE 8754
// for i in heikeApes do
8713: LD_ADDR_VAR 0 2
8717: PUSH
8718: LD_EXP 36
8722: PUSH
8723: FOR_IN
8724: IFFALSE 8752
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8726: LD_VAR 0 2
8730: PPUSH
8731: LD_INT 7
8733: PPUSH
8734: LD_INT 0
8736: PPUSH
8737: CALL_OW 49
// ComHold ( i ) ;
8741: LD_VAR 0 2
8745: PPUSH
8746: CALL_OW 140
// end ;
8750: GO 8723
8752: POP
8753: POP
// if Kurt then
8754: LD_EXP 32
8758: IFFALSE 8790
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8760: LD_EXP 32
8764: PPUSH
8765: LD_INT 8
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8775: LD_EXP 32
8779: PPUSH
8780: LD_INT 42
8782: PPUSH
8783: LD_INT 32
8785: PPUSH
8786: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8790: LD_INT 70
8792: PPUSH
8793: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8797: LD_EXP 21
8801: PPUSH
8802: LD_STRING DH-Start-1
8804: PPUSH
8805: CALL_OW 88
// if Givi then
8809: LD_EXP 22
8813: IFFALSE 9076
// begin Say ( Givi , DG-Start-2-5 ) ;
8815: LD_EXP 22
8819: PPUSH
8820: LD_STRING DG-Start-2-5
8822: PPUSH
8823: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8827: LD_EXP 21
8831: PPUSH
8832: LD_STRING DH-Start-3
8834: PPUSH
8835: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8839: LD_EXP 21
8843: PPUSH
8844: LD_STRING DH-Start-4
8846: PPUSH
8847: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8851: LD_EXP 22
8855: PPUSH
8856: LD_STRING DG-Start-5
8858: PPUSH
8859: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8863: LD_EXP 21
8867: PPUSH
8868: LD_STRING DH-Start-6
8870: PPUSH
8871: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8875: LD_EXP 22
8879: PPUSH
8880: LD_STRING DG-Start-7
8882: PPUSH
8883: CALL_OW 88
// if Mike then
8887: LD_EXP 23
8891: IFFALSE 9064
// begin Say ( Mike , DM-Start-8 ) ;
8893: LD_EXP 23
8897: PPUSH
8898: LD_STRING DM-Start-8
8900: PPUSH
8901: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8905: LD_EXP 23
8909: PPUSH
8910: LD_STRING DM-Start-9
8912: PPUSH
8913: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8917: LD_EXP 22
8921: PPUSH
8922: LD_STRING DG-Start-10
8924: PPUSH
8925: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8929: LD_EXP 22
8933: PPUSH
8934: LD_STRING DG-Start-11
8936: PPUSH
8937: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8941: LD_EXP 21
8945: PPUSH
8946: LD_STRING DH-Start-12
8948: PPUSH
8949: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING DG-Start-13
8960: PPUSH
8961: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8965: LD_EXP 22
8969: PPUSH
8970: LD_STRING DG-Start-14
8972: PPUSH
8973: CALL_OW 88
// if Kaia then
8977: LD_EXP 26
8981: IFFALSE 9064
// begin Say ( Kaia , DK-Start-15 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_STRING DK-Start-15
8990: PPUSH
8991: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8995: LD_EXP 26
8999: PPUSH
9000: LD_STRING DK-Start-16
9002: PPUSH
9003: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9007: LD_EXP 26
9011: PPUSH
9012: LD_STRING DK-Start-17
9014: PPUSH
9015: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9019: LD_INT 10
9021: PPUSH
9022: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9026: LD_EXP 22
9030: PPUSH
9031: LD_EXP 26
9035: PPUSH
9036: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9040: LD_EXP 22
9044: PPUSH
9045: LD_STRING DG-Start-18
9047: PPUSH
9048: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9052: LD_EXP 26
9056: PPUSH
9057: LD_STRING DK-Start-19
9059: PPUSH
9060: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9064: LD_EXP 21
9068: PPUSH
9069: LD_STRING DH-Start-20
9071: PPUSH
9072: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9076: LD_INT 70
9078: PPUSH
9079: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9083: LD_EXP 29
9087: PPUSH
9088: LD_STRING DShar-Start-21
9090: PPUSH
9091: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9095: LD_EXP 21
9099: PPUSH
9100: LD_STRING DH-Start-22
9102: PPUSH
9103: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9107: LD_EXP 29
9111: PPUSH
9112: LD_STRING DShar-Start-23
9114: PPUSH
9115: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9119: LD_EXP 29
9123: PPUSH
9124: LD_STRING DShar-Start-24
9126: PPUSH
9127: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9131: LD_EXP 29
9135: PPUSH
9136: LD_STRING DShar-Start-25
9138: PPUSH
9139: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9143: LD_EXP 29
9147: PPUSH
9148: LD_STRING DShar-Start-26
9150: PPUSH
9151: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9155: LD_EXP 21
9159: PPUSH
9160: LD_STRING DH-Start-27
9162: PPUSH
9163: CALL_OW 88
// if Kaia then
9167: LD_EXP 26
9171: IFFALSE 9213
// begin ComTurnUnit ( Heike , Kaia ) ;
9173: LD_EXP 21
9177: PPUSH
9178: LD_EXP 26
9182: PPUSH
9183: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9187: LD_EXP 26
9191: PPUSH
9192: LD_STRING DK-Start-28
9194: PPUSH
9195: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9199: LD_EXP 21
9203: PPUSH
9204: LD_STRING DH-Start-29
9206: PPUSH
9207: CALL_OW 88
// end else
9211: GO 9225
// Say ( Heike , DH-Start-a-28 ) ;
9213: LD_EXP 21
9217: PPUSH
9218: LD_STRING DH-Start-a-28
9220: PPUSH
9221: CALL_OW 88
// if Givi then
9225: LD_EXP 22
9229: IFFALSE 9464
// begin ComTurnUnit ( Heike , Givi ) ;
9231: LD_EXP 21
9235: PPUSH
9236: LD_EXP 22
9240: PPUSH
9241: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9245: LD_EXP 22
9249: PPUSH
9250: LD_EXP 21
9254: PPUSH
9255: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9259: LD_EXP 21
9263: PPUSH
9264: LD_STRING DH-Start-30
9266: PPUSH
9267: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9271: LD_EXP 21
9275: PPUSH
9276: LD_STRING DH-Start-31
9278: PPUSH
9279: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9283: LD_EXP 22
9287: PPUSH
9288: LD_STRING DG-Start-32
9290: PPUSH
9291: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9295: LD_EXP 21
9299: PPUSH
9300: LD_STRING DH-Start-33
9302: PPUSH
9303: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9307: LD_EXP 22
9311: PPUSH
9312: LD_STRING DG-Start-34
9314: PPUSH
9315: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9319: LD_EXP 22
9323: PPUSH
9324: LD_STRING DG-Start-35
9326: PPUSH
9327: CALL_OW 88
// if Kurt and not dialogue_skipped then
9331: LD_EXP 32
9335: PUSH
9336: LD_OWVAR 59
9340: NOT
9341: AND
9342: IFFALSE 9373
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9344: LD_EXP 32
9348: PPUSH
9349: LD_INT 28
9351: PPUSH
9352: LD_INT 13
9354: PPUSH
9355: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9359: LD_EXP 32
9363: PPUSH
9364: LD_EXP 21
9368: PPUSH
9369: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9373: LD_EXP 22
9377: PPUSH
9378: LD_STRING DG-Start-36
9380: PPUSH
9381: CALL_OW 88
// if Kurt then
9385: LD_EXP 32
9389: IFFALSE 9462
// begin if not Givi then
9391: LD_EXP 22
9395: NOT
9396: IFFALSE 9412
// Say ( Kurt , DKs-Start-37-a ) else
9398: LD_EXP 32
9402: PPUSH
9403: LD_STRING DKs-Start-37-a
9405: PPUSH
9406: CALL_OW 88
9410: GO 9424
// Say ( Kurt , DKs-Start-37 ) ;
9412: LD_EXP 32
9416: PPUSH
9417: LD_STRING DKs-Start-37
9419: PPUSH
9420: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9424: LD_EXP 32
9428: PPUSH
9429: LD_STRING DKs-Start-38
9431: PPUSH
9432: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9436: LD_EXP 21
9440: PPUSH
9441: LD_EXP 32
9445: PPUSH
9446: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9450: LD_EXP 21
9454: PPUSH
9455: LD_STRING DH-Start-39
9457: PPUSH
9458: CALL_OW 88
// end ; end else
9462: GO 9493
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DArm-Start-a-37
9471: PPUSH
9472: LD_STRING DArf-Start-a-37
9474: PPUSH
9475: CALL 1274 0 3
9479: IFFALSE 9493
// Say ( Heike , DH-Start-39 ) ;
9481: LD_EXP 21
9485: PPUSH
9486: LD_STRING DH-Start-39
9488: PPUSH
9489: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9493: LD_INT 44
9495: PPUSH
9496: LD_INT 25
9498: PPUSH
9499: CALL_OW 428
9503: IFFALSE 9520
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9505: LD_INT 44
9507: PPUSH
9508: LD_INT 25
9510: PPUSH
9511: CALL_OW 428
9515: PPUSH
9516: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_INT 5
9527: PPUSH
9528: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9532: LD_EXP 30
9536: PPUSH
9537: LD_INT 44
9539: PPUSH
9540: LD_INT 25
9542: PPUSH
9543: LD_INT 0
9545: PPUSH
9546: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9550: LD_EXP 30
9554: PPUSH
9555: LD_INT 29
9557: PPUSH
9558: LD_INT 12
9560: PPUSH
9561: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9572: LD_OWVAR 59
9576: PUSH
9577: LD_EXP 21
9581: PPUSH
9582: LD_EXP 30
9586: PPUSH
9587: CALL_OW 296
9591: PUSH
9592: LD_INT 8
9594: LESS
9595: OR
9596: PUSH
9597: LD_EXP 30
9601: PPUSH
9602: LD_INT 26
9604: PPUSH
9605: LD_INT 9
9607: PPUSH
9608: CALL_OW 297
9612: PUSH
9613: LD_INT 6
9615: LESS
9616: OR
9617: IFFALSE 9565
// Say ( Olaf , DO-Scout-1 ) ;
9619: LD_EXP 30
9623: PPUSH
9624: LD_STRING DO-Scout-1
9626: PPUSH
9627: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_EXP 21
9640: PPUSH
9641: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: LD_VAR 0 6
9654: PUSH
9655: LD_EXP 34
9659: UNION
9660: PUSH
9661: FOR_IN
9662: IFFALSE 9680
// ComTurnUnit ( i , Olaf ) ;
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_EXP 30
9673: PPUSH
9674: CALL_OW 119
9678: GO 9661
9680: POP
9681: POP
// wait ( 0 0$0.3 ) ;
9682: LD_INT 10
9684: PPUSH
9685: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9689: LD_EXP 21
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9703: LD_EXP 21
9707: PPUSH
9708: LD_EXP 30
9712: PPUSH
9713: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9717: LD_EXP 21
9721: PPUSH
9722: LD_STRING DH-Scout-2
9724: PPUSH
9725: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9729: LD_EXP 30
9733: PPUSH
9734: LD_STRING DO-Scout-3
9736: PPUSH
9737: CALL_OW 88
// if Mike and Givi then
9741: LD_EXP 23
9745: PUSH
9746: LD_EXP 22
9750: AND
9751: IFFALSE 9767
// Say ( Olaf , DO-Scout-4 ) else
9753: LD_EXP 30
9757: PPUSH
9758: LD_STRING DO-Scout-4
9760: PPUSH
9761: CALL_OW 88
9765: GO 9867
// begin if Mike then
9767: LD_EXP 23
9771: IFFALSE 9799
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9773: LD_EXP 30
9777: PPUSH
9778: LD_STRING DO-Scout-a-4
9780: PPUSH
9781: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9785: LD_EXP 21
9789: PPUSH
9790: LD_STRING DH-Scout-a-5
9792: PPUSH
9793: CALL_OW 88
// end else
9797: GO 9867
// if Givi then
9799: LD_EXP 22
9803: IFFALSE 9831
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9805: LD_EXP 30
9809: PPUSH
9810: LD_STRING DO-Scout-b-4
9812: PPUSH
9813: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9817: LD_EXP 21
9821: PPUSH
9822: LD_STRING DH-Scout-b-5
9824: PPUSH
9825: CALL_OW 88
// end else
9829: GO 9867
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9831: LD_EXP 30
9835: PPUSH
9836: LD_STRING DO-Scout-f-4
9838: PPUSH
9839: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9843: LD_EXP 21
9847: PPUSH
9848: LD_STRING DH-Scout-f-5
9850: PPUSH
9851: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9855: LD_EXP 30
9859: PPUSH
9860: LD_STRING DO-Scout-f-6
9862: PPUSH
9863: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9867: LD_EXP 21
9871: PPUSH
9872: LD_STRING DH-Scout-5
9874: PPUSH
9875: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-6
9886: PPUSH
9887: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_STRING DO-Scout-7
9898: PPUSH
9899: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9903: LD_EXP 21
9907: PPUSH
9908: LD_STRING DH-Scout-8
9910: PPUSH
9911: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9915: LD_EXP 21
9919: PPUSH
9920: LD_STRING DH-Scout-9
9922: PPUSH
9923: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9927: LD_EXP 30
9931: PPUSH
9932: LD_STRING DO-Scout-10
9934: PPUSH
9935: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9939: LD_EXP 30
9943: PPUSH
9944: LD_STRING DO-Scout-12
9946: PPUSH
9947: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9951: LD_EXP 30
9955: PPUSH
9956: LD_STRING DO-Scout-13
9958: PPUSH
9959: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9963: LD_EXP 30
9967: PPUSH
9968: LD_STRING DO-Scout-14
9970: PPUSH
9971: CALL_OW 88
// if Givi then
9975: LD_EXP 22
9979: IFFALSE 10005
// begin Say ( Givi , DG-Scout-15 ) ;
9981: LD_EXP 22
9985: PPUSH
9986: LD_STRING DG-Scout-15
9988: PPUSH
9989: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9993: LD_EXP 26
9997: PPUSH
9998: LD_STRING DK-Scout-16
10000: PPUSH
10001: CALL_OW 88
// end ; if not dialogue_skipped then
10005: LD_OWVAR 59
10009: NOT
10010: IFFALSE 10131
// begin async ;
10012: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10013: LD_EXP 30
10017: PPUSH
10018: LD_STRING DO-Scout-17
10020: PPUSH
10021: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10025: LD_INT 55
10027: PPUSH
10028: LD_INT 77
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: LD_INT 6
10036: NEG
10037: PPUSH
10038: CALL 1223 0 4
// wait ( 10 ) ;
10042: LD_INT 10
10044: PPUSH
10045: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10049: LD_INT 55
10051: PPUSH
10052: LD_INT 77
10054: PPUSH
10055: CALL_OW 84
// wait ( 0 0$10 ) ;
10059: LD_INT 350
10061: PPUSH
10062: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-18
10073: PPUSH
10074: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10078: LD_INT 204
10080: PPUSH
10081: LD_INT 107
10083: PPUSH
10084: LD_INT 2
10086: PPUSH
10087: LD_INT 12
10089: NEG
10090: PPUSH
10091: CALL 1223 0 4
// wait ( 10 ) ;
10095: LD_INT 10
10097: PPUSH
10098: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10102: LD_INT 204
10104: PPUSH
10105: LD_INT 107
10107: PPUSH
10108: CALL_OW 84
// wait ( 0 0$10 ) ;
10112: LD_INT 350
10114: PPUSH
10115: CALL_OW 67
// sync ;
10119: SYNC
// CenterNowOnUnits ( Heike ) ;
10120: LD_EXP 21
10124: PPUSH
10125: CALL_OW 87
// end else
10129: GO 10165
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10131: LD_INT 55
10133: PPUSH
10134: LD_INT 77
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: LD_INT 6
10142: NEG
10143: PPUSH
10144: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10148: LD_INT 204
10150: PPUSH
10151: LD_INT 107
10153: PPUSH
10154: LD_INT 2
10156: PPUSH
10157: LD_INT 12
10159: NEG
10160: PPUSH
10161: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10165: LD_EXP 30
10169: PPUSH
10170: LD_STRING DO-Scout-19
10172: PPUSH
10173: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10177: LD_EXP 30
10181: PPUSH
10182: LD_STRING DO-Scout-20
10184: PPUSH
10185: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10189: LD_EXP 21
10193: PPUSH
10194: LD_STRING DH-Scout-21
10196: PPUSH
10197: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10201: LD_EXP 21
10205: PPUSH
10206: LD_STRING DH-Scout-22
10208: PPUSH
10209: CALL_OW 88
// InGameOff ;
10213: CALL_OW 9
// if heikeSecondSquad then
10217: LD_EXP 34
10221: IFFALSE 10235
// ForceSleep ( heikeSecondSquad , false ) ;
10223: LD_EXP 34
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 585
// if Givi then
10235: LD_EXP 22
10239: IFFALSE 10254
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10241: LD_INT 13
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10254: LD_STRING Road
10256: PPUSH
10257: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10261: LD_ADDR_VAR 0 2
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 5
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 69
10294: PUSH
10295: FOR_IN
10296: IFFALSE 10312
// SetSide ( i , 2 ) ;
10298: LD_VAR 0 2
10302: PPUSH
10303: LD_INT 2
10305: PPUSH
10306: CALL_OW 235
10310: GO 10295
10312: POP
10313: POP
// SaveForQuickRestart ;
10314: CALL_OW 22
// music_class := music_auto ;
10318: LD_ADDR_OWVAR 72
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10331: LD_INT 2
10333: PPUSH
10334: LD_INT 9
10336: PPUSH
10337: CALL_OW 294
10341: IFFALSE 10706
10343: GO 10345
10345: DISABLE
// begin DialogueOn ;
10346: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10350: LD_INT 111
10352: PPUSH
10353: LD_INT 72
10355: PPUSH
10356: LD_INT 2
10358: PPUSH
10359: LD_INT 20
10361: NEG
10362: PPUSH
10363: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10367: LD_INT 111
10369: PPUSH
10370: LD_INT 72
10372: PPUSH
10373: LD_INT 2
10375: PPUSH
10376: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10380: LD_INT 111
10382: PPUSH
10383: LD_INT 72
10385: PPUSH
10386: CALL_OW 86
// if IsOk ( Kamil ) then
10390: LD_EXP 25
10394: PPUSH
10395: CALL_OW 302
10399: IFFALSE 10516
// begin Say ( Kamil , DKam-Cross-1 ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DKam-Cross-1
10408: PPUSH
10409: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING DKam-Cross-2
10420: PPUSH
10421: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DKam-Cross-3
10432: PPUSH
10433: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10437: LD_EXP 25
10441: PPUSH
10442: LD_STRING DKam-Cross-4
10444: PPUSH
10445: CALL_OW 88
// if IsOk ( Ibrahim ) then
10449: LD_EXP 24
10453: PPUSH
10454: CALL_OW 302
10458: IFFALSE 10514
// begin if ibrahimJoinedIn04 then
10460: LD_EXP 4
10464: IFFALSE 10478
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10466: LD_EXP 24
10470: PPUSH
10471: LD_STRING DI-Cross-b-5
10473: PPUSH
10474: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10478: LD_EXP 24
10482: PPUSH
10483: LD_STRING DI-Cross-b-6
10485: PPUSH
10486: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10490: LD_EXP 24
10494: PPUSH
10495: LD_STRING DI-Cross-b-7
10497: PPUSH
10498: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10502: LD_EXP 25
10506: PPUSH
10507: LD_STRING DKam-Cross-8
10509: PPUSH
10510: CALL_OW 88
// end ; end else
10514: GO 10674
// if IsOk ( Sophia ) then
10516: LD_EXP 27
10520: PPUSH
10521: CALL_OW 302
10525: IFFALSE 10642
// begin Say ( Sophia , DS-Cross-1 ) ;
10527: LD_EXP 27
10531: PPUSH
10532: LD_STRING DS-Cross-1
10534: PPUSH
10535: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_STRING DS-Cross-2
10546: PPUSH
10547: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10551: LD_EXP 27
10555: PPUSH
10556: LD_STRING DS-Cross-3
10558: PPUSH
10559: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10563: LD_EXP 27
10567: PPUSH
10568: LD_STRING DS-Cross-4
10570: PPUSH
10571: CALL_OW 88
// if IsOk ( Ibrahim ) then
10575: LD_EXP 24
10579: PPUSH
10580: CALL_OW 302
10584: IFFALSE 10640
// begin if ibrahimJoinedIn04 then
10586: LD_EXP 4
10590: IFFALSE 10604
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10592: LD_EXP 24
10596: PPUSH
10597: LD_STRING DI-Cross-b-5
10599: PPUSH
10600: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10604: LD_EXP 24
10608: PPUSH
10609: LD_STRING DI-Cross-b-6
10611: PPUSH
10612: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10616: LD_EXP 24
10620: PPUSH
10621: LD_STRING DI-Cross-b-7
10623: PPUSH
10624: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10628: LD_EXP 27
10632: PPUSH
10633: LD_STRING DS-Cross-8
10635: PPUSH
10636: CALL_OW 88
// end ; end else
10640: GO 10674
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10642: LD_EXP 34
10646: PPUSH
10647: LD_INT 50
10649: PUSH
10650: EMPTY
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: IFFALSE 10674
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10659: LD_EXP 34
10663: PPUSH
10664: LD_STRING DArm-Cross-c-1
10666: PPUSH
10667: LD_STRING DArf-Cross-c-1
10669: PPUSH
10670: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10674: LD_INT 85
10676: PPUSH
10677: LD_INT 2
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 322
// DialogueOff ;
10687: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10691: LD_STRING Crane
10693: PPUSH
10694: CALL_OW 337
// spottedCrossRoad := true ;
10698: LD_ADDR_EXP 8
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// end ;
10706: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10707: LD_INT 22
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 0
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 30
10732: PUSH
10733: LD_INT 1
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: PUSH
10754: LD_EXP 26
10758: PPUSH
10759: CALL_OW 302
10763: PUSH
10764: LD_EXP 34
10768: OR
10769: AND
10770: IFFALSE 10982
10772: GO 10774
10774: DISABLE
// begin DialogueOn ;
10775: CALL_OW 6
// if Kaia then
10779: LD_EXP 26
10783: IFFALSE 10796
// CenterNowOnUnits ( Kaia ) else
10785: LD_EXP 26
10789: PPUSH
10790: CALL_OW 87
10794: GO 10805
// CenterNowOnUnits ( Heike ) ;
10796: LD_EXP 21
10800: PPUSH
10801: CALL_OW 87
// if IsOk ( Kaia ) then
10805: LD_EXP 26
10809: PPUSH
10810: CALL_OW 302
10814: IFFALSE 10830
// Say ( Kaia , DK-Cam-1 ) else
10816: LD_EXP 26
10820: PPUSH
10821: LD_STRING DK-Cam-1
10823: PPUSH
10824: CALL_OW 88
10828: GO 10845
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10830: LD_EXP 34
10834: PPUSH
10835: LD_STRING DArm-Cam-1
10837: PPUSH
10838: LD_STRING DArf-Cam-1
10840: PPUSH
10841: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10845: LD_EXP 21
10849: PPUSH
10850: LD_STRING DH-Cam-2
10852: PPUSH
10853: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10857: LD_EXP 21
10861: PPUSH
10862: LD_STRING DH-Cam-3
10864: PPUSH
10865: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10869: LD_EXP 21
10873: PPUSH
10874: LD_STRING DH-Cam-4
10876: PPUSH
10877: CALL_OW 88
// if IsOk ( Kaia ) then
10881: LD_EXP 26
10885: PPUSH
10886: CALL_OW 302
10890: IFFALSE 10906
// Say ( Kaia , DK-Cam-5 ) else
10892: LD_EXP 26
10896: PPUSH
10897: LD_STRING DK-Cam-5
10899: PPUSH
10900: CALL_OW 88
10904: GO 10921
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10906: LD_EXP 34
10910: PPUSH
10911: LD_STRING DArm-Cam-5
10913: PPUSH
10914: LD_STRING DArf-Cam-5
10916: PPUSH
10917: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10921: LD_EXP 30
10925: PPUSH
10926: LD_STRING DO-Cam-6
10928: PPUSH
10929: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10933: LD_EXP 30
10937: PPUSH
10938: LD_STRING DO-Cam-7
10940: PPUSH
10941: CALL_OW 88
// DialogueOff ;
10945: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10949: LD_STRING Radar
10951: PPUSH
10952: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10956: LD_INT 6
10958: PPUSH
10959: LD_INT 2
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10969: LD_INT 20
10971: PPUSH
10972: LD_INT 2
10974: PPUSH
10975: LD_INT 1
10977: PPUSH
10978: CALL_OW 324
// end ;
10982: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10983: LD_INT 22
10985: PUSH
10986: LD_INT 2
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 2
10995: PUSH
10996: LD_INT 34
10998: PUSH
10999: LD_INT 30
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 35
11008: PUSH
11009: LD_INT 30
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 69
11029: IFFALSE 11041
11031: GO 11033
11033: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11034: LD_STRING RadarDone
11036: PPUSH
11037: CALL_OW 337
11041: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11042: LD_INT 22
11044: PUSH
11045: LD_INT 2
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 34
11054: PUSH
11055: LD_INT 88
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 69
11070: IFFALSE 11082
11072: GO 11074
11074: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11075: LD_STRING CraneDone
11077: PPUSH
11078: CALL_OW 337
11082: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11083: LD_EXP 30
11087: PPUSH
11088: CALL_OW 302
11092: PUSH
11093: LD_EXP 33
11097: PPUSH
11098: CALL_OW 302
11102: AND
11103: PUSH
11104: LD_INT 6
11106: PPUSH
11107: LD_INT 2
11109: PPUSH
11110: CALL_OW 321
11114: PUSH
11115: LD_INT 2
11117: EQUAL
11118: AND
11119: PUSH
11120: LD_EXP 33
11124: PPUSH
11125: LD_EXP 21
11129: PPUSH
11130: CALL_OW 296
11134: PUSH
11135: LD_INT 10
11137: LESS
11138: PUSH
11139: LD_EXP 33
11143: PPUSH
11144: CALL_OW 310
11148: OR
11149: AND
11150: IFFALSE 11364
11152: GO 11154
11154: DISABLE
// begin DialogueOn ;
11155: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11159: LD_EXP 33
11163: PPUSH
11164: LD_STRING DA-RC-1
11166: PPUSH
11167: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11171: LD_EXP 33
11175: PPUSH
11176: LD_STRING DA-RC-2
11178: PPUSH
11179: CALL_OW 88
// if IsOk ( Kaia ) then
11183: LD_EXP 26
11187: PPUSH
11188: CALL_OW 302
11192: IFFALSE 11266
// begin Say ( Kaia , DK-RC-3 ) ;
11194: LD_EXP 26
11198: PPUSH
11199: LD_STRING DK-RC-3
11201: PPUSH
11202: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11206: LD_EXP 33
11210: PPUSH
11211: LD_STRING DA-RC-4
11213: PPUSH
11214: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11218: LD_EXP 26
11222: PPUSH
11223: LD_STRING DK-RC-5
11225: PPUSH
11226: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11230: LD_EXP 33
11234: PPUSH
11235: LD_STRING DA-RC-6
11237: PPUSH
11238: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11242: LD_EXP 26
11246: PPUSH
11247: LD_STRING DK-RC-7
11249: PPUSH
11250: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11254: LD_EXP 33
11258: PPUSH
11259: LD_STRING DA-RC-8
11261: PPUSH
11262: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11266: LD_EXP 21
11270: PPUSH
11271: LD_STRING DH-RC-9
11273: PPUSH
11274: CALL_OW 88
// if IsOk ( Markov ) then
11278: LD_EXP 28
11282: PPUSH
11283: CALL_OW 302
11287: IFFALSE 11315
// begin Say ( Markov , DMar-RC-10 ) ;
11289: LD_EXP 28
11293: PPUSH
11294: LD_STRING DMar-RC-10
11296: PPUSH
11297: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11301: LD_EXP 28
11305: PPUSH
11306: LD_STRING DMar-RC-11
11308: PPUSH
11309: CALL_OW 88
// end else
11313: GO 11327
// begin Say ( Olaf , DO-RC-a-10 ) ;
11315: LD_EXP 30
11319: PPUSH
11320: LD_STRING DO-RC-a-10
11322: PPUSH
11323: CALL_OW 88
// end ; DialogueOff ;
11327: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11331: LD_STRING RemoteControl
11333: PPUSH
11334: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11338: LD_INT 15
11340: PPUSH
11341: LD_INT 2
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11351: LD_INT 22
11353: PPUSH
11354: LD_INT 2
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 324
// end ;
11364: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11365: LD_INT 12
11367: PPUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 70
11382: IFFALSE 11749
11384: GO 11386
11386: DISABLE
11387: LD_INT 0
11389: PPUSH
// begin PrepareWestBase ;
11390: CALL 3992 0 0
// westBaseSpotted := true ;
11394: LD_ADDR_EXP 5
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11402: LD_INT 70
11404: PPUSH
11405: CALL_OW 67
// InGameOn ;
11409: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11413: LD_INT 56
11415: PPUSH
11416: LD_INT 77
11418: PPUSH
11419: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11423: LD_INT 56
11425: PPUSH
11426: LD_INT 77
11428: PPUSH
11429: LD_INT 2
11431: PPUSH
11432: LD_INT 12
11434: NEG
11435: PPUSH
11436: CALL_OW 330
// wait ( 0 0$2 ) ;
11440: LD_INT 70
11442: PPUSH
11443: CALL_OW 67
// DialogueOn ;
11447: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11451: LD_EXP 21
11455: PPUSH
11456: LD_STRING DH-Rbase-1
11458: PPUSH
11459: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING DK-Rbase-2
11470: PPUSH
11471: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11475: LD_EXP 26
11479: PPUSH
11480: LD_STRING DK-Rbase-3
11482: PPUSH
11483: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11487: LD_EXP 26
11491: PPUSH
11492: LD_STRING DK-Rbase-4
11494: PPUSH
11495: CALL_OW 88
// DialogueOff ;
11499: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11503: LD_INT 56
11505: PPUSH
11506: LD_INT 77
11508: PPUSH
11509: LD_INT 2
11511: PPUSH
11512: CALL_OW 331
// InGameOff ;
11516: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11520: LD_INT 35
11522: PPUSH
11523: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11527: LD_EXP 42
11531: NOT
11532: PUSH
11533: LD_EXP 43
11537: NOT
11538: AND
11539: IFFALSE 11520
// wait ( 0 0$2 ) ;
11541: LD_INT 70
11543: PPUSH
11544: CALL_OW 67
// if IsOk ( Kaia ) then
11548: LD_EXP 26
11552: PPUSH
11553: CALL_OW 302
11557: IFFALSE 11672
// begin DialogueOn ;
11559: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11563: LD_INT 56
11565: PPUSH
11566: LD_INT 81
11568: PPUSH
11569: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11573: LD_EXP 26
11577: PPUSH
11578: LD_STRING DK-Rbase-5
11580: PPUSH
11581: CALL_OW 88
// if IsOk ( Givi ) then
11585: LD_EXP 22
11589: PPUSH
11590: CALL_OW 302
11594: IFFALSE 11668
// begin Say ( Givi , DG-Rbase-6 ) ;
11596: LD_EXP 22
11600: PPUSH
11601: LD_STRING DG-Rbase-6
11603: PPUSH
11604: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11608: LD_EXP 22
11612: PPUSH
11613: LD_STRING DG-Rbase-7
11615: PPUSH
11616: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11620: LD_EXP 26
11624: PPUSH
11625: LD_STRING DK-Rbase-8
11627: PPUSH
11628: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11632: LD_EXP 22
11636: PPUSH
11637: LD_STRING DG-Rbase-9
11639: PPUSH
11640: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11644: LD_EXP 22
11648: PPUSH
11649: LD_STRING DG-Rbase-10
11651: PPUSH
11652: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11656: LD_EXP 26
11660: PPUSH
11661: LD_STRING DK-Rbase-11
11663: PPUSH
11664: CALL_OW 88
// end ; DialogueOff ;
11668: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11672: LD_ADDR_VAR 0 1
11676: PUSH
11677: LD_INT 12
11679: PPUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 3
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 21
11692: PUSH
11693: LD_INT 3
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PPUSH
11704: CALL_OW 70
11708: PUSH
11709: FOR_IN
11710: IFFALSE 11726
// SetSide ( i , 2 ) ;
11712: LD_VAR 0 1
11716: PPUSH
11717: LD_INT 2
11719: PPUSH
11720: CALL_OW 235
11724: GO 11709
11726: POP
11727: POP
// westBaseCaptured := true ;
11728: LD_ADDR_EXP 9
11732: PUSH
11733: LD_INT 1
11735: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11736: LD_INT 0
11738: PPUSH
11739: LD_INT 2
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL_OW 324
// end ;
11749: PPOPN 1
11751: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11752: LD_EXP 38
11756: NOT
11757: PUSH
11758: LD_INT 10
11760: PPUSH
11761: CALL_OW 255
11765: PUSH
11766: LD_INT 2
11768: EQUAL
11769: OR
11770: IFFALSE 11907
11772: GO 11774
11774: DISABLE
// begin DialogueOn ;
11775: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11779: LD_EXP 21
11783: PPUSH
11784: LD_STRING DH-Goal-1
11786: PPUSH
11787: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11791: LD_EXP 29
11795: PPUSH
11796: LD_STRING DShar-Goal-2
11798: PPUSH
11799: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11803: LD_EXP 21
11807: PPUSH
11808: LD_STRING DH-Goal-3
11810: PPUSH
11811: CALL_OW 88
// if reinforcementsAllowed then
11815: LD_EXP 14
11819: IFFALSE 11845
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11821: LD_EXP 29
11825: PPUSH
11826: LD_STRING DShar-Goal-4
11828: PPUSH
11829: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11833: LD_EXP 21
11837: PPUSH
11838: LD_STRING DH-Goal-5
11840: PPUSH
11841: CALL_OW 88
// end ; DialogueOff ;
11845: CALL_OW 7
// eastBaseCaptured := true ;
11849: LD_ADDR_EXP 10
11853: PUSH
11854: LD_INT 1
11856: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11857: LD_STRING BaseCaptured
11859: PPUSH
11860: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11864: LD_INT 10
11866: PPUSH
11867: LD_INT 2
11869: PPUSH
11870: CALL_OW 235
// if not reinforcementsAllowed then
11874: LD_EXP 14
11878: NOT
11879: IFFALSE 11883
// exit ;
11881: GO 11907
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11883: LD_INT 21000
11885: PUSH
11886: LD_INT 1050
11888: NEG
11889: PPUSH
11890: LD_INT 1050
11892: PPUSH
11893: CALL_OW 12
11897: PLUS
11898: PPUSH
11899: CALL_OW 67
// PrepareReinforcements ;
11903: CALL 2250 0 0
// end ;
11907: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11908: LD_INT 22
11910: PUSH
11911: LD_INT 2
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 30
11920: PUSH
11921: LD_INT 13
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 69
11936: IFFALSE 11953
11938: GO 11940
11940: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11941: LD_EXP 22
11945: PPUSH
11946: LD_STRING DG-Lab-1
11948: PPUSH
11949: CALL_OW 88
// end ;
11953: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11954: LD_INT 5
11956: PPUSH
11957: LD_INT 2
11959: PPUSH
11960: CALL_OW 321
11964: PUSH
11965: LD_INT 2
11967: EQUAL
11968: PUSH
11969: LD_EXP 22
11973: PPUSH
11974: CALL_OW 302
11978: AND
11979: IFFALSE 12040
11981: GO 11983
11983: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11984: LD_EXP 22
11988: PPUSH
11989: LD_STRING DG-Stim-1
11991: PPUSH
11992: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11996: LD_EXP 21
12000: PPUSH
12001: LD_STRING DH-Stim-2
12003: PPUSH
12004: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12008: LD_EXP 22
12012: PPUSH
12013: LD_STRING DG-Stim-3
12015: PPUSH
12016: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12020: LD_EXP 21
12024: PPUSH
12025: LD_STRING DH-Stim-4
12027: PPUSH
12028: CALL_OW 88
// drugsResearched := true ;
12032: LD_ADDR_EXP 11
12036: PUSH
12037: LD_INT 1
12039: ST_TO_ADDR
// end ;
12040: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12041: LD_EXP 11
12045: IFFALSE 12357
12047: GO 12049
12049: DISABLE
12050: LD_INT 0
12052: PPUSH
12053: PPUSH
12054: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12055: LD_ADDR_VAR 0 2
12059: PUSH
12060: LD_EXP 21
12064: PUSH
12065: LD_EXP 22
12069: PUSH
12070: LD_EXP 30
12074: PUSH
12075: LD_EXP 28
12079: PUSH
12080: LD_EXP 26
12084: PUSH
12085: LD_EXP 27
12089: PUSH
12090: LD_EXP 32
12094: PUSH
12095: LD_EXP 25
12099: PUSH
12100: LD_EXP 23
12104: PUSH
12105: LD_EXP 24
12109: PUSH
12110: LD_EXP 33
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: LD_STRING H
12135: PUSH
12136: LD_STRING G
12138: PUSH
12139: LD_STRING O
12141: PUSH
12142: LD_STRING Mar
12144: PUSH
12145: LD_STRING K
12147: PUSH
12148: LD_STRING S
12150: PUSH
12151: LD_STRING Ks
12153: PUSH
12154: LD_STRING Kam
12156: PUSH
12157: LD_STRING M
12159: PUSH
12160: LD_STRING I
12162: PUSH
12163: LD_STRING A
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12179: LD_INT 35
12181: PPUSH
12182: CALL_OW 67
// for i := tmp downto 1 do
12186: LD_ADDR_VAR 0 1
12190: PUSH
12191: DOUBLE
12192: LD_VAR 0 2
12196: INC
12197: ST_TO_ADDR
12198: LD_INT 1
12200: PUSH
12201: FOR_DOWNTO
12202: IFFALSE 12348
// if GetLives ( tmp [ i ] ) < 250 then
12204: LD_VAR 0 2
12208: PUSH
12209: LD_VAR 0 1
12213: ARRAY
12214: PPUSH
12215: CALL_OW 256
12219: PUSH
12220: LD_INT 250
12222: LESS
12223: IFFALSE 12346
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12225: LD_ADDR_EXP 19
12229: PUSH
12230: LD_EXP 19
12234: PUSH
12235: LD_INT 1
12237: PLUS
12238: ST_TO_ADDR
// DialogueOn ;
12239: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12243: LD_VAR 0 2
12247: PUSH
12248: LD_VAR 0 1
12252: ARRAY
12253: PPUSH
12254: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12258: LD_VAR 0 2
12262: PUSH
12263: LD_VAR 0 1
12267: ARRAY
12268: PPUSH
12269: LD_STRING D
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 1
12281: ARRAY
12282: STR
12283: PUSH
12284: LD_STRING -Stim-a-1
12286: STR
12287: PPUSH
12288: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12292: LD_ADDR_VAR 0 2
12296: PUSH
12297: LD_VAR 0 2
12301: PPUSH
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 3
12311: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12312: LD_ADDR_VAR 0 3
12316: PUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 3
12331: ST_TO_ADDR
// drugsTested := true ;
12332: LD_ADDR_EXP 6
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// DialogueOff ;
12340: CALL_OW 7
// break ;
12344: GO 12348
// end ;
12346: GO 12201
12348: POP
12349: POP
// until not tmp ;
12350: LD_VAR 0 2
12354: NOT
12355: IFFALSE 12179
// end ;
12357: PPOPN 3
12359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12360: LD_INT 22
12362: PUSH
12363: LD_INT 2
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 34
12372: PUSH
12373: LD_INT 31
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PPUSH
12384: CALL_OW 69
12388: PUSH
12389: LD_INT 22
12391: PUSH
12392: LD_INT 2
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 33
12401: PUSH
12402: LD_INT 2
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PPUSH
12413: CALL_OW 69
12417: AND
12418: IFFALSE 12431
12420: GO 12422
12422: DISABLE
// remoteControlConstructed := true ;
12423: LD_ADDR_EXP 12
12427: PUSH
12428: LD_INT 1
12430: ST_TO_ADDR
12431: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12432: LD_EXP 12
12436: IFFALSE 12736
12438: GO 12440
12440: DISABLE
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
12445: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12446: LD_ADDR_VAR 0 2
12450: PUSH
12451: LD_EXP 21
12455: PUSH
12456: LD_EXP 22
12460: PUSH
12461: LD_EXP 30
12465: PUSH
12466: LD_EXP 28
12470: PUSH
12471: LD_EXP 26
12475: PUSH
12476: LD_EXP 27
12480: PUSH
12481: LD_EXP 32
12485: PUSH
12486: LD_EXP 25
12490: PUSH
12491: LD_EXP 23
12495: PUSH
12496: LD_EXP 24
12500: PUSH
12501: LD_EXP 33
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12519: LD_ADDR_VAR 0 3
12523: PUSH
12524: LD_STRING H
12526: PUSH
12527: LD_STRING G
12529: PUSH
12530: LD_STRING O
12532: PUSH
12533: LD_STRING Mar
12535: PUSH
12536: LD_STRING K
12538: PUSH
12539: LD_STRING S
12541: PUSH
12542: LD_STRING Ks
12544: PUSH
12545: LD_STRING Kam
12547: PUSH
12548: LD_STRING M
12550: PUSH
12551: LD_STRING I
12553: PUSH
12554: LD_STRING A
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12570: LD_INT 35
12572: PPUSH
12573: CALL_OW 67
// for i := tmp downto 1 do
12577: LD_ADDR_VAR 0 1
12581: PUSH
12582: DOUBLE
12583: LD_VAR 0 2
12587: INC
12588: ST_TO_ADDR
12589: LD_INT 1
12591: PUSH
12592: FOR_DOWNTO
12593: IFFALSE 12727
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12595: LD_VAR 0 2
12599: PUSH
12600: LD_VAR 0 1
12604: ARRAY
12605: PPUSH
12606: CALL_OW 257
12610: PUSH
12611: LD_INT 3
12613: EQUAL
12614: PUSH
12615: LD_VAR 0 2
12619: PUSH
12620: LD_VAR 0 1
12624: ARRAY
12625: PPUSH
12626: CALL_OW 432
12630: AND
12631: IFFALSE 12725
// begin DialogueOn ;
12633: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12637: LD_VAR 0 2
12641: PUSH
12642: LD_VAR 0 1
12646: ARRAY
12647: PPUSH
12648: LD_STRING D
12650: PUSH
12651: LD_VAR 0 3
12655: PUSH
12656: LD_VAR 0 1
12660: ARRAY
12661: STR
12662: PUSH
12663: LD_STRING -RC-a-1
12665: STR
12666: PPUSH
12667: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12671: LD_ADDR_VAR 0 2
12675: PUSH
12676: LD_VAR 0 2
12680: PPUSH
12681: LD_VAR 0 1
12685: PPUSH
12686: CALL_OW 3
12690: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12691: LD_ADDR_VAR 0 3
12695: PUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_VAR 0 1
12705: PPUSH
12706: CALL_OW 3
12710: ST_TO_ADDR
// DialogueOff ;
12711: CALL_OW 7
// remoteControlTested := true ;
12715: LD_ADDR_EXP 7
12719: PUSH
12720: LD_INT 1
12722: ST_TO_ADDR
// break ;
12723: GO 12727
// end ;
12725: GO 12592
12727: POP
12728: POP
// until not tmp ;
12729: LD_VAR 0 2
12733: NOT
12734: IFFALSE 12570
// end ;
12736: PPOPN 3
12738: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12739: LD_EXP 7
12743: PUSH
12744: LD_EXP 28
12748: PPUSH
12749: CALL_OW 302
12753: AND
12754: IFFALSE 12783
12756: GO 12758
12758: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12759: LD_EXP 28
12763: PPUSH
12764: LD_STRING DMar-RC-a-2
12766: PPUSH
12767: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12771: LD_EXP 28
12775: PPUSH
12776: LD_STRING DMar-RC-a-3
12778: PPUSH
12779: CALL_OW 88
// end ;
12783: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12784: LD_EXP 14
12788: PUSH
12789: LD_EXP 21
12793: PPUSH
12794: LD_EXP 33
12798: PPUSH
12799: CALL_OW 296
12803: PUSH
12804: LD_INT 8
12806: LESS
12807: AND
12808: PUSH
12809: LD_INT 2
12811: PPUSH
12812: CALL_OW 463
12816: NOT
12817: AND
12818: PUSH
12819: LD_EXP 33
12823: PPUSH
12824: CALL_OW 302
12828: AND
12829: PUSH
12830: LD_EXP 21
12834: PPUSH
12835: CALL_OW 302
12839: AND
12840: IFFALSE 13018
12842: GO 12844
12844: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12845: LD_EXP 33
12849: PPUSH
12850: CALL_OW 310
12854: NOT
12855: IFFALSE 12871
// ComTurnUnit ( Aviradze , Heike ) ;
12857: LD_EXP 33
12861: PPUSH
12862: LD_EXP 21
12866: PPUSH
12867: CALL_OW 119
// if not IsInUnit ( Heike ) then
12871: LD_EXP 21
12875: PPUSH
12876: CALL_OW 310
12880: NOT
12881: IFFALSE 12897
// ComTurnUnit ( Heike , Aviradze ) ;
12883: LD_EXP 21
12887: PPUSH
12888: LD_EXP 33
12892: PPUSH
12893: CALL_OW 119
// wait ( 0 0$1 ) ;
12897: LD_INT 35
12899: PPUSH
12900: CALL_OW 67
// DialogueOn ;
12904: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12908: LD_EXP 33
12912: PPUSH
12913: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12917: LD_EXP 21
12921: PPUSH
12922: LD_STRING DH-Beria-1
12924: PPUSH
12925: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12929: LD_EXP 33
12933: PPUSH
12934: LD_STRING DA-Beria-2
12936: PPUSH
12937: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12941: LD_EXP 21
12945: PPUSH
12946: LD_STRING DH-Beria-3
12948: PPUSH
12949: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12953: LD_EXP 33
12957: PPUSH
12958: LD_STRING DA-Beria-4
12960: PPUSH
12961: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12965: LD_EXP 33
12969: PPUSH
12970: LD_STRING DA-Beria-5
12972: PPUSH
12973: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12977: LD_EXP 33
12981: PPUSH
12982: LD_STRING DA-Beria-6
12984: PPUSH
12985: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12989: LD_EXP 21
12993: PPUSH
12994: LD_STRING DA-Beria-7
12996: PPUSH
12997: CALL_OW 88
// DialogueOff ;
13001: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13005: LD_INT 52
13007: PPUSH
13008: LD_INT 2
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 322
// end ;
13018: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13019: LD_EXP 26
13023: PPUSH
13024: CALL_OW 300
13028: PUSH
13029: LD_EXP 26
13033: PPUSH
13034: CALL_OW 256
13038: PUSH
13039: LD_INT 10
13041: LESS
13042: AND
13043: IFFALSE 13080
13045: GO 13047
13047: DISABLE
// begin DialogueOn ;
13048: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13052: LD_EXP 26
13056: PPUSH
13057: LD_STRING DK-Kdeath-1
13059: PPUSH
13060: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13064: LD_EXP 21
13068: PPUSH
13069: LD_STRING DH-Kdeath-2
13071: PPUSH
13072: CALL_OW 88
// DialogueOff ;
13076: CALL_OW 7
// end ;
13080: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13081: LD_INT 2
13083: PPUSH
13084: LD_EXP 39
13088: PPUSH
13089: CALL 1374 0 2
13093: IFFALSE 13110
13095: GO 13097
13097: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13098: LD_EXP 21
13102: PPUSH
13103: LD_STRING DH-Obj-1
13105: PPUSH
13106: CALL_OW 88
13110: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13111: LD_INT 2
13113: PPUSH
13114: LD_EXP 40
13118: PPUSH
13119: CALL 1374 0 2
13123: IFFALSE 13140
13125: GO 13127
13127: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13128: LD_EXP 21
13132: PPUSH
13133: LD_STRING DH-Obj-a-1
13135: PPUSH
13136: CALL_OW 88
13140: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13141: LD_EXP 10
13145: PUSH
13146: LD_OWVAR 1
13150: PUSH
13151: LD_INT 14700
13153: PUSH
13154: LD_INT 13650
13156: PUSH
13157: LD_INT 12600
13159: PUSH
13160: LD_INT 11550
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: LD_OWVAR 67
13173: ARRAY
13174: GREATEREQUAL
13175: OR
13176: IFFALSE 13204
13178: GO 13180
13180: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13181: LD_INT 4200
13183: PPUSH
13184: LD_INT 5250
13186: PPUSH
13187: CALL_OW 12
13191: PPUSH
13192: CALL_OW 67
// convoyStarted := true ;
13196: LD_ADDR_EXP 17
13200: PUSH
13201: LD_INT 1
13203: ST_TO_ADDR
// end ;
13204: END
// every 0 0$1 trigger convoyStarted do
13205: LD_EXP 17
13209: IFFALSE 13293
13211: GO 13213
13213: DISABLE
// begin DialogueOn ;
13214: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13218: LD_EXP 29
13222: PPUSH
13223: LD_STRING DShar-Convoy-1
13225: PPUSH
13226: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13230: LD_EXP 21
13234: PPUSH
13235: LD_STRING DH-Convoy-2
13237: PPUSH
13238: CALL_OW 88
// DialogueOff ;
13242: CALL_OW 7
// PrepareConvoy ;
13246: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13250: LD_INT 5250
13252: PPUSH
13253: LD_INT 11550
13255: PPUSH
13256: CALL_OW 12
13260: PPUSH
13261: CALL_OW 67
// PrepareConvoy ;
13265: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13269: LD_ADDR_EXP 16
13273: PUSH
13274: LD_EXP 16
13278: PUSH
13279: LD_INT 1
13281: MINUS
13282: ST_TO_ADDR
// until convoyCounter <= 0 ;
13283: LD_EXP 16
13287: PUSH
13288: LD_INT 0
13290: LESSEQUAL
13291: IFFALSE 13250
// end ;
13293: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13294: LD_EXP 15
13298: PUSH
13299: LD_INT 10
13301: GREATEREQUAL
13302: IFFALSE 13319
13304: GO 13306
13306: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13307: LD_EXP 31
13311: PPUSH
13312: LD_STRING DOm-Fail-1
13314: PPUSH
13315: CALL_OW 94
13319: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13320: LD_EXP 39
13324: NOT
13325: PUSH
13326: LD_EXP 40
13330: NOT
13331: AND
13332: IFFALSE 13344
13334: GO 13336
13336: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13337: LD_STRING RaiderDone
13339: PPUSH
13340: CALL_OW 337
13344: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13345: LD_INT 22
13347: PUSH
13348: LD_INT 2
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 33
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PPUSH
13369: CALL_OW 69
13373: PUSH
13374: LD_INT 3
13376: GREATEREQUAL
13377: PUSH
13378: LD_INT 22
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 34
13390: PUSH
13391: LD_INT 31
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 69
13406: PUSH
13407: LD_INT 2
13409: GREATEREQUAL
13410: AND
13411: IFFALSE 13423
13413: GO 13415
13415: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13416: LD_STRING RemoteControlDone
13418: PPUSH
13419: CALL_OW 337
13423: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13424: LD_EXP 16
13428: PUSH
13429: LD_INT 1
13431: LESS
13432: PUSH
13433: LD_EXP 41
13437: PPUSH
13438: LD_INT 52
13440: PUSH
13441: EMPTY
13442: LIST
13443: PUSH
13444: LD_INT 21
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: NOT
13463: AND
13464: PUSH
13465: LD_OWVAR 1
13469: PUSH
13470: LD_INT 126000
13472: GREATEREQUAL
13473: OR
13474: IFFALSE 14295
13476: GO 13478
13478: DISABLE
13479: LD_INT 0
13481: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13482: LD_STRING ReinforcementsDone
13484: PPUSH
13485: CALL_OW 337
// music_class := music_victory ;
13489: LD_ADDR_OWVAR 72
13493: PUSH
13494: LD_INT 4
13496: ST_TO_ADDR
// InGameOn ;
13497: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13501: LD_EXP 21
13505: PPUSH
13506: LD_STRING DH-end-1
13508: PPUSH
13509: CALL_OW 88
// wait ( 0 0$2 ) ;
13513: LD_INT 70
13515: PPUSH
13516: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13520: LD_EXP 29
13524: PPUSH
13525: LD_STRING DShar-end-2
13527: PPUSH
13528: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13532: LD_EXP 39
13536: NOT
13537: PUSH
13538: LD_EXP 40
13542: NOT
13543: AND
13544: IFFALSE 13560
// begin Say ( Heike , DH-end-3 ) ;
13546: LD_EXP 21
13550: PPUSH
13551: LD_STRING DH-end-3
13553: PPUSH
13554: CALL_OW 88
// end else
13558: GO 13657
// begin Say ( Heike , DH-end-a-3 ) ;
13560: LD_EXP 21
13564: PPUSH
13565: LD_STRING DH-end-a-3
13567: PPUSH
13568: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13572: LD_EXP 29
13576: PPUSH
13577: LD_STRING DShar-end-a-4
13579: PPUSH
13580: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13584: LD_EXP 21
13588: PPUSH
13589: LD_STRING DH-end-a-5
13591: PPUSH
13592: CALL_OW 88
// InGameOff ;
13596: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13600: LD_INT 35
13602: PPUSH
13603: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13607: LD_INT 22
13609: PUSH
13610: LD_INT 3
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 21
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 69
13635: PUSH
13636: LD_INT 0
13638: EQUAL
13639: IFFALSE 13600
// InGameOn ;
13641: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13645: LD_EXP 21
13649: PPUSH
13650: LD_STRING DH-end-a-6
13652: PPUSH
13653: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13657: LD_EXP 29
13661: PPUSH
13662: LD_STRING DShar-end-3
13664: PPUSH
13665: CALL_OW 94
// if not flamethrowerBuilt then
13669: LD_EXP 20
13673: NOT
13674: IFFALSE 13683
// SetAchievement ( ACH_FIRE ) ;
13676: LD_STRING ACH_FIRE
13678: PPUSH
13679: CALL_OW 543
// if drugsTested then
13683: LD_EXP 6
13687: IFFALSE 13701
// AddMedal ( med1 , 1 ) else
13689: LD_STRING med1
13691: PPUSH
13692: LD_INT 1
13694: PPUSH
13695: CALL_OW 101
13699: GO 13741
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13701: LD_INT 5
13703: PPUSH
13704: LD_INT 2
13706: PPUSH
13707: CALL_OW 321
13711: PUSH
13712: LD_INT 2
13714: EQUAL
13715: IFFALSE 13730
// AddMedal ( med1 , - 1 ) else
13717: LD_STRING med1
13719: PPUSH
13720: LD_INT 1
13722: NEG
13723: PPUSH
13724: CALL_OW 101
13728: GO 13741
// AddMedal ( med1 , - 2 ) ;
13730: LD_STRING med1
13732: PPUSH
13733: LD_INT 2
13735: NEG
13736: PPUSH
13737: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13741: LD_INT 22
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 33
13753: PUSH
13754: LD_INT 2
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: PUSH
13770: LD_INT 3
13772: GREATEREQUAL
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 31
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: PUSH
13803: LD_INT 1
13805: GREATEREQUAL
13806: AND
13807: IFFALSE 13821
// AddMedal ( med2 , 1 ) else
13809: LD_STRING med2
13811: PPUSH
13812: LD_INT 1
13814: PPUSH
13815: CALL_OW 101
13819: GO 13832
// AddMedal ( med2 , - 1 ) ;
13821: LD_STRING med2
13823: PPUSH
13824: LD_INT 1
13826: NEG
13827: PPUSH
13828: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13832: LD_EXP 15
13836: PUSH
13837: LD_INT 10
13839: PUSH
13840: LD_INT 8
13842: PUSH
13843: LD_INT 6
13845: PUSH
13846: LD_INT 5
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: PUSH
13855: LD_OWVAR 67
13859: ARRAY
13860: LESS
13861: IFFALSE 13875
// AddMedal ( med3 , 1 ) else
13863: LD_STRING med3
13865: PPUSH
13866: LD_INT 1
13868: PPUSH
13869: CALL_OW 101
13873: GO 13886
// AddMedal ( med3 , - 1 ) ;
13875: LD_STRING med3
13877: PPUSH
13878: LD_INT 1
13880: NEG
13881: PPUSH
13882: CALL_OW 101
// GiveMedals ( MAIN ) ;
13886: LD_STRING MAIN
13888: PPUSH
13889: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13893: LD_INT 22
13895: PUSH
13896: LD_INT 2
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 23
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: PPUSH
13928: CALL_OW 69
13932: PPUSH
13933: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13937: LD_EXP 15
13941: PPUSH
13942: LD_STRING 05_ConvoySavedCounter
13944: PPUSH
13945: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13949: LD_EXP 13
13953: PPUSH
13954: LD_STRING 05_Radar
13956: PPUSH
13957: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13961: LD_EXP 6
13965: PPUSH
13966: LD_STRING 05_DrugsTested
13968: PPUSH
13969: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13973: LD_INT 22
13975: PUSH
13976: LD_INT 2
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 33
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: PUSH
14002: LD_INT 3
14004: GREATEREQUAL
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 34
14018: PUSH
14019: LD_INT 31
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 69
14034: PUSH
14035: LD_INT 2
14037: GREATEREQUAL
14038: AND
14039: PPUSH
14040: LD_STRING 05_RemoteControl
14042: PPUSH
14043: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14047: LD_EXP 21
14051: PPUSH
14052: LD_STRING 05_Heike
14054: PPUSH
14055: CALL_OW 38
// if Aviradze then
14059: LD_EXP 33
14063: IFFALSE 14077
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14065: LD_EXP 33
14069: PPUSH
14070: LD_STRING 05_Aviradze
14072: PPUSH
14073: CALL_OW 38
// if Ibrahim then
14077: LD_EXP 24
14081: IFFALSE 14095
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14083: LD_EXP 24
14087: PPUSH
14088: LD_STRING 05_Ibrahim
14090: PPUSH
14091: CALL_OW 38
// if Kamil then
14095: LD_EXP 25
14099: IFFALSE 14113
// SaveCharacters ( Kamil , 05_Kamil ) ;
14101: LD_EXP 25
14105: PPUSH
14106: LD_STRING 05_Kamil
14108: PPUSH
14109: CALL_OW 38
// if Sophia then
14113: LD_EXP 27
14117: IFFALSE 14131
// SaveCharacters ( Sophia , 05_Sophia ) ;
14119: LD_EXP 27
14123: PPUSH
14124: LD_STRING 05_Sophia
14126: PPUSH
14127: CALL_OW 38
// if Kaia then
14131: LD_EXP 26
14135: IFFALSE 14149
// SaveCharacters ( Kaia , 05_Kaia ) ;
14137: LD_EXP 26
14141: PPUSH
14142: LD_STRING 05_Kaia
14144: PPUSH
14145: CALL_OW 38
// if Givi then
14149: LD_EXP 22
14153: IFFALSE 14167
// SaveCharacters ( Givi , 05_Givi ) ;
14155: LD_EXP 22
14159: PPUSH
14160: LD_STRING 05_Givi
14162: PPUSH
14163: CALL_OW 38
// if Mike then
14167: LD_EXP 23
14171: IFFALSE 14185
// SaveCharacters ( Mike , 05_Mike ) ;
14173: LD_EXP 23
14177: PPUSH
14178: LD_STRING 05_Mike
14180: PPUSH
14181: CALL_OW 38
// if Markov then
14185: LD_EXP 28
14189: IFFALSE 14203
// SaveCharacters ( Markov , 05_Markov ) ;
14191: LD_EXP 28
14195: PPUSH
14196: LD_STRING 05_Markov
14198: PPUSH
14199: CALL_OW 38
// if Kurt then
14203: LD_EXP 32
14207: IFFALSE 14221
// SaveCharacters ( Kurt , 05_Kurt ) ;
14209: LD_EXP 32
14213: PPUSH
14214: LD_STRING 05_Kurt
14216: PPUSH
14217: CALL_OW 38
// if heikeSecondSquad then
14221: LD_EXP 34
14225: IFFALSE 14239
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14227: LD_EXP 34
14231: PPUSH
14232: LD_STRING 05_others
14234: PPUSH
14235: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14239: LD_ADDR_VAR 0 1
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 23
14256: PUSH
14257: LD_INT 0
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if tmp then
14273: LD_VAR 0 1
14277: IFFALSE 14291
// SaveCharacters ( tmp , 05_apes ) ;
14279: LD_VAR 0 1
14283: PPUSH
14284: LD_STRING 05_apes
14286: PPUSH
14287: CALL_OW 38
// YouWin ;
14291: CALL_OW 103
// end ; end_of_file
14295: PPOPN 1
14297: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14298: LD_EXP 9
14302: PUSH
14303: LD_INT 13
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 287
14313: PUSH
14314: LD_INT 25
14316: LESS
14317: AND
14318: IFFALSE 14345
14320: GO 14322
14322: DISABLE
// begin enable ;
14323: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14324: LD_INT 1
14326: PPUSH
14327: LD_INT 5
14329: PPUSH
14330: CALL_OW 12
14334: PPUSH
14335: LD_INT 13
14337: PPUSH
14338: LD_INT 1
14340: PPUSH
14341: CALL_OW 55
// end ; end_of_file
14345: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14346: LD_INT 0
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 264
14361: PUSH
14362: LD_INT 91
14364: EQUAL
14365: IFFALSE 14437
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14367: LD_INT 68
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 255
14379: PPUSH
14380: CALL_OW 321
14384: PUSH
14385: LD_INT 2
14387: EQUAL
14388: IFFALSE 14400
// eff := 70 else
14390: LD_ADDR_VAR 0 4
14394: PUSH
14395: LD_INT 70
14397: ST_TO_ADDR
14398: GO 14408
// eff := 30 ;
14400: LD_ADDR_VAR 0 4
14404: PUSH
14405: LD_INT 30
14407: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 250
14417: PPUSH
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 251
14427: PPUSH
14428: LD_VAR 0 4
14432: PPUSH
14433: CALL_OW 495
// end ; end ;
14437: LD_VAR 0 2
14441: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14442: LD_INT 0
14444: PPUSH
// end ;
14445: LD_VAR 0 4
14449: RET
// export function SOS_Command ( cmd ) ; begin
14450: LD_INT 0
14452: PPUSH
// end ;
14453: LD_VAR 0 2
14457: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14458: LD_INT 0
14460: PPUSH
// end ;
14461: LD_VAR 0 6
14465: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14466: LD_INT 0
14468: PPUSH
14469: PPUSH
// if not vehicle or not factory then
14470: LD_VAR 0 1
14474: NOT
14475: PUSH
14476: LD_VAR 0 2
14480: NOT
14481: OR
14482: IFFALSE 14486
// exit ;
14484: GO 14717
// if factoryWaypoints >= factory then
14486: LD_EXP 112
14490: PUSH
14491: LD_VAR 0 2
14495: GREATEREQUAL
14496: IFFALSE 14717
// if factoryWaypoints [ factory ] then
14498: LD_EXP 112
14502: PUSH
14503: LD_VAR 0 2
14507: ARRAY
14508: IFFALSE 14717
// begin if GetControl ( vehicle ) = control_manual then
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 263
14519: PUSH
14520: LD_INT 1
14522: EQUAL
14523: IFFALSE 14604
// begin driver := IsDrivenBy ( vehicle ) ;
14525: LD_ADDR_VAR 0 4
14529: PUSH
14530: LD_VAR 0 1
14534: PPUSH
14535: CALL_OW 311
14539: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14540: LD_VAR 0 4
14544: PPUSH
14545: LD_EXP 112
14549: PUSH
14550: LD_VAR 0 2
14554: ARRAY
14555: PUSH
14556: LD_INT 3
14558: ARRAY
14559: PPUSH
14560: LD_EXP 112
14564: PUSH
14565: LD_VAR 0 2
14569: ARRAY
14570: PUSH
14571: LD_INT 4
14573: ARRAY
14574: PPUSH
14575: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14579: LD_VAR 0 4
14583: PPUSH
14584: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14588: LD_VAR 0 4
14592: PPUSH
14593: LD_VAR 0 2
14597: PPUSH
14598: CALL_OW 180
// end else
14602: GO 14717
// if GetControl ( vehicle ) = control_remote then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 263
14613: PUSH
14614: LD_INT 2
14616: EQUAL
14617: IFFALSE 14678
// begin wait ( 0 0$2 ) ;
14619: LD_INT 70
14621: PPUSH
14622: CALL_OW 67
// if Connect ( vehicle ) then
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL 42390 0 1
14635: IFFALSE 14676
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14637: LD_VAR 0 1
14641: PPUSH
14642: LD_EXP 112
14646: PUSH
14647: LD_VAR 0 2
14651: ARRAY
14652: PUSH
14653: LD_INT 3
14655: ARRAY
14656: PPUSH
14657: LD_EXP 112
14661: PUSH
14662: LD_VAR 0 2
14666: ARRAY
14667: PUSH
14668: LD_INT 4
14670: ARRAY
14671: PPUSH
14672: CALL_OW 171
// end else
14676: GO 14717
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_EXP 112
14687: PUSH
14688: LD_VAR 0 2
14692: ARRAY
14693: PUSH
14694: LD_INT 3
14696: ARRAY
14697: PPUSH
14698: LD_EXP 112
14702: PUSH
14703: LD_VAR 0 2
14707: ARRAY
14708: PUSH
14709: LD_INT 4
14711: ARRAY
14712: PPUSH
14713: CALL_OW 171
// end ; end ;
14717: LD_VAR 0 3
14721: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14722: LD_INT 0
14724: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14725: LD_VAR 0 1
14729: PUSH
14730: LD_INT 250
14732: EQUAL
14733: PUSH
14734: LD_VAR 0 2
14738: PPUSH
14739: CALL_OW 264
14743: PUSH
14744: LD_INT 81
14746: EQUAL
14747: AND
14748: IFFALSE 14769
// MinerPlaceMine ( unit , x , y ) ;
14750: LD_VAR 0 2
14754: PPUSH
14755: LD_VAR 0 4
14759: PPUSH
14760: LD_VAR 0 5
14764: PPUSH
14765: CALL 17154 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 251
14776: EQUAL
14777: PUSH
14778: LD_VAR 0 2
14782: PPUSH
14783: CALL_OW 264
14787: PUSH
14788: LD_INT 81
14790: EQUAL
14791: AND
14792: IFFALSE 14813
// MinerDetonateMine ( unit , x , y ) ;
14794: LD_VAR 0 2
14798: PPUSH
14799: LD_VAR 0 4
14803: PPUSH
14804: LD_VAR 0 5
14808: PPUSH
14809: CALL 17429 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14813: LD_VAR 0 1
14817: PUSH
14818: LD_INT 252
14820: EQUAL
14821: PUSH
14822: LD_VAR 0 2
14826: PPUSH
14827: CALL_OW 264
14831: PUSH
14832: LD_INT 81
14834: EQUAL
14835: AND
14836: IFFALSE 14857
// MinerCreateMinefield ( unit , x , y ) ;
14838: LD_VAR 0 2
14842: PPUSH
14843: LD_VAR 0 4
14847: PPUSH
14848: LD_VAR 0 5
14852: PPUSH
14853: CALL 17846 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14857: LD_VAR 0 1
14861: PUSH
14862: LD_INT 253
14864: EQUAL
14865: PUSH
14866: LD_VAR 0 2
14870: PPUSH
14871: CALL_OW 257
14875: PUSH
14876: LD_INT 5
14878: EQUAL
14879: AND
14880: IFFALSE 14901
// ComBinocular ( unit , x , y ) ;
14882: LD_VAR 0 2
14886: PPUSH
14887: LD_VAR 0 4
14891: PPUSH
14892: LD_VAR 0 5
14896: PPUSH
14897: CALL 18215 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14901: LD_VAR 0 1
14905: PUSH
14906: LD_INT 254
14908: EQUAL
14909: PUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 264
14919: PUSH
14920: LD_INT 99
14922: EQUAL
14923: AND
14924: PUSH
14925: LD_VAR 0 3
14929: PPUSH
14930: CALL_OW 263
14934: PUSH
14935: LD_INT 3
14937: EQUAL
14938: AND
14939: IFFALSE 14955
// HackDestroyVehicle ( unit , selectedUnit ) ;
14941: LD_VAR 0 2
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL 16518 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14955: LD_VAR 0 1
14959: PUSH
14960: LD_INT 255
14962: EQUAL
14963: PUSH
14964: LD_VAR 0 2
14968: PPUSH
14969: CALL_OW 264
14973: PUSH
14974: LD_INT 14
14976: PUSH
14977: LD_INT 53
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: IN
14984: AND
14985: PUSH
14986: LD_VAR 0 4
14990: PPUSH
14991: LD_VAR 0 5
14995: PPUSH
14996: CALL_OW 488
15000: AND
15001: IFFALSE 15025
// CutTreeXYR ( unit , x , y , 12 ) ;
15003: LD_VAR 0 2
15007: PPUSH
15008: LD_VAR 0 4
15012: PPUSH
15013: LD_VAR 0 5
15017: PPUSH
15018: LD_INT 12
15020: PPUSH
15021: CALL 15088 0 4
// if cmd = 256 then
15025: LD_VAR 0 1
15029: PUSH
15030: LD_INT 256
15032: EQUAL
15033: IFFALSE 15054
// SetFactoryWaypoint ( unit , x , y ) ;
15035: LD_VAR 0 2
15039: PPUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: LD_VAR 0 5
15049: PPUSH
15050: CALL 32973 0 3
// if cmd = 257 then
15054: LD_VAR 0 1
15058: PUSH
15059: LD_INT 257
15061: EQUAL
15062: IFFALSE 15083
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15064: LD_VAR 0 2
15068: PPUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_VAR 0 5
15078: PPUSH
15079: CALL 33335 0 3
// end ;
15083: LD_VAR 0 6
15087: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15088: LD_INT 0
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15099: LD_VAR 0 1
15103: NOT
15104: PUSH
15105: LD_VAR 0 2
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 488
15119: NOT
15120: OR
15121: PUSH
15122: LD_VAR 0 4
15126: NOT
15127: OR
15128: IFFALSE 15132
// exit ;
15130: GO 15472
// list := [ ] ;
15132: LD_ADDR_VAR 0 13
15136: PUSH
15137: EMPTY
15138: ST_TO_ADDR
// if x - r < 0 then
15139: LD_VAR 0 2
15143: PUSH
15144: LD_VAR 0 4
15148: MINUS
15149: PUSH
15150: LD_INT 0
15152: LESS
15153: IFFALSE 15165
// min_x := 0 else
15155: LD_ADDR_VAR 0 7
15159: PUSH
15160: LD_INT 0
15162: ST_TO_ADDR
15163: GO 15181
// min_x := x - r ;
15165: LD_ADDR_VAR 0 7
15169: PUSH
15170: LD_VAR 0 2
15174: PUSH
15175: LD_VAR 0 4
15179: MINUS
15180: ST_TO_ADDR
// if y - r < 0 then
15181: LD_VAR 0 3
15185: PUSH
15186: LD_VAR 0 4
15190: MINUS
15191: PUSH
15192: LD_INT 0
15194: LESS
15195: IFFALSE 15207
// min_y := 0 else
15197: LD_ADDR_VAR 0 8
15201: PUSH
15202: LD_INT 0
15204: ST_TO_ADDR
15205: GO 15223
// min_y := y - r ;
15207: LD_ADDR_VAR 0 8
15211: PUSH
15212: LD_VAR 0 3
15216: PUSH
15217: LD_VAR 0 4
15221: MINUS
15222: ST_TO_ADDR
// max_x := x + r ;
15223: LD_ADDR_VAR 0 9
15227: PUSH
15228: LD_VAR 0 2
15232: PUSH
15233: LD_VAR 0 4
15237: PLUS
15238: ST_TO_ADDR
// max_y := y + r ;
15239: LD_ADDR_VAR 0 10
15243: PUSH
15244: LD_VAR 0 3
15248: PUSH
15249: LD_VAR 0 4
15253: PLUS
15254: ST_TO_ADDR
// for _x = min_x to max_x do
15255: LD_ADDR_VAR 0 11
15259: PUSH
15260: DOUBLE
15261: LD_VAR 0 7
15265: DEC
15266: ST_TO_ADDR
15267: LD_VAR 0 9
15271: PUSH
15272: FOR_TO
15273: IFFALSE 15390
// for _y = min_y to max_y do
15275: LD_ADDR_VAR 0 12
15279: PUSH
15280: DOUBLE
15281: LD_VAR 0 8
15285: DEC
15286: ST_TO_ADDR
15287: LD_VAR 0 10
15291: PUSH
15292: FOR_TO
15293: IFFALSE 15386
// begin if not ValidHex ( _x , _y ) then
15295: LD_VAR 0 11
15299: PPUSH
15300: LD_VAR 0 12
15304: PPUSH
15305: CALL_OW 488
15309: NOT
15310: IFFALSE 15314
// continue ;
15312: GO 15292
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15314: LD_VAR 0 11
15318: PPUSH
15319: LD_VAR 0 12
15323: PPUSH
15324: CALL_OW 351
15328: PUSH
15329: LD_VAR 0 11
15333: PPUSH
15334: LD_VAR 0 12
15338: PPUSH
15339: CALL_OW 554
15343: AND
15344: IFFALSE 15384
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15346: LD_ADDR_VAR 0 13
15350: PUSH
15351: LD_VAR 0 13
15355: PPUSH
15356: LD_VAR 0 13
15360: PUSH
15361: LD_INT 1
15363: PLUS
15364: PPUSH
15365: LD_VAR 0 11
15369: PUSH
15370: LD_VAR 0 12
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 2
15383: ST_TO_ADDR
// end ;
15384: GO 15292
15386: POP
15387: POP
15388: GO 15272
15390: POP
15391: POP
// if not list then
15392: LD_VAR 0 13
15396: NOT
15397: IFFALSE 15401
// exit ;
15399: GO 15472
// for i in list do
15401: LD_ADDR_VAR 0 6
15405: PUSH
15406: LD_VAR 0 13
15410: PUSH
15411: FOR_IN
15412: IFFALSE 15470
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_STRING M
15421: PUSH
15422: LD_VAR 0 6
15426: PUSH
15427: LD_INT 1
15429: ARRAY
15430: PUSH
15431: LD_VAR 0 6
15435: PUSH
15436: LD_INT 2
15438: ARRAY
15439: PUSH
15440: LD_INT 0
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: LD_INT 0
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: PPUSH
15464: CALL_OW 447
15468: GO 15411
15470: POP
15471: POP
// end ;
15472: LD_VAR 0 5
15476: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15477: LD_EXP 44
15481: NOT
15482: IFFALSE 15532
15484: GO 15486
15486: DISABLE
// begin initHack := true ;
15487: LD_ADDR_EXP 44
15491: PUSH
15492: LD_INT 1
15494: ST_TO_ADDR
// hackTanks := [ ] ;
15495: LD_ADDR_EXP 45
15499: PUSH
15500: EMPTY
15501: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15502: LD_ADDR_EXP 46
15506: PUSH
15507: EMPTY
15508: ST_TO_ADDR
// hackLimit := 3 ;
15509: LD_ADDR_EXP 47
15513: PUSH
15514: LD_INT 3
15516: ST_TO_ADDR
// hackDist := 12 ;
15517: LD_ADDR_EXP 48
15521: PUSH
15522: LD_INT 12
15524: ST_TO_ADDR
// hackCounter := [ ] ;
15525: LD_ADDR_EXP 49
15529: PUSH
15530: EMPTY
15531: ST_TO_ADDR
// end ;
15532: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15533: LD_EXP 44
15537: PUSH
15538: LD_INT 34
15540: PUSH
15541: LD_INT 99
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: AND
15553: IFFALSE 15806
15555: GO 15557
15557: DISABLE
15558: LD_INT 0
15560: PPUSH
15561: PPUSH
// begin enable ;
15562: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15563: LD_ADDR_VAR 0 1
15567: PUSH
15568: LD_INT 34
15570: PUSH
15571: LD_INT 99
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: FOR_IN
15584: IFFALSE 15804
// begin if not i in hackTanks then
15586: LD_VAR 0 1
15590: PUSH
15591: LD_EXP 45
15595: IN
15596: NOT
15597: IFFALSE 15680
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15599: LD_ADDR_EXP 45
15603: PUSH
15604: LD_EXP 45
15608: PPUSH
15609: LD_EXP 45
15613: PUSH
15614: LD_INT 1
15616: PLUS
15617: PPUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 1
15627: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15628: LD_ADDR_EXP 46
15632: PUSH
15633: LD_EXP 46
15637: PPUSH
15638: LD_EXP 46
15642: PUSH
15643: LD_INT 1
15645: PLUS
15646: PPUSH
15647: EMPTY
15648: PPUSH
15649: CALL_OW 1
15653: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15654: LD_ADDR_EXP 49
15658: PUSH
15659: LD_EXP 49
15663: PPUSH
15664: LD_EXP 49
15668: PUSH
15669: LD_INT 1
15671: PLUS
15672: PPUSH
15673: EMPTY
15674: PPUSH
15675: CALL_OW 1
15679: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 302
15689: NOT
15690: IFFALSE 15703
// begin HackUnlinkAll ( i ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: CALL 15809 0 1
// continue ;
15701: GO 15583
// end ; HackCheckCapturedStatus ( i ) ;
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL 16252 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15712: LD_ADDR_VAR 0 2
15716: PUSH
15717: LD_INT 81
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 255
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 33
15736: PUSH
15737: LD_INT 3
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 91
15746: PUSH
15747: LD_VAR 0 1
15751: PUSH
15752: LD_EXP 48
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 50
15764: PUSH
15765: EMPTY
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: PPUSH
15774: CALL_OW 69
15778: ST_TO_ADDR
// if not tmp then
15779: LD_VAR 0 2
15783: NOT
15784: IFFALSE 15788
// continue ;
15786: GO 15583
// HackLink ( i , tmp ) ;
15788: LD_VAR 0 1
15792: PPUSH
15793: LD_VAR 0 2
15797: PPUSH
15798: CALL 15945 0 2
// end ;
15802: GO 15583
15804: POP
15805: POP
// end ;
15806: PPOPN 2
15808: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15809: LD_INT 0
15811: PPUSH
15812: PPUSH
15813: PPUSH
// if not hack in hackTanks then
15814: LD_VAR 0 1
15818: PUSH
15819: LD_EXP 45
15823: IN
15824: NOT
15825: IFFALSE 15829
// exit ;
15827: GO 15940
// index := GetElementIndex ( hackTanks , hack ) ;
15829: LD_ADDR_VAR 0 4
15833: PUSH
15834: LD_EXP 45
15838: PPUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL 39206 0 2
15848: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15849: LD_EXP 46
15853: PUSH
15854: LD_VAR 0 4
15858: ARRAY
15859: IFFALSE 15940
// begin for i in hackTanksCaptured [ index ] do
15861: LD_ADDR_VAR 0 3
15865: PUSH
15866: LD_EXP 46
15870: PUSH
15871: LD_VAR 0 4
15875: ARRAY
15876: PUSH
15877: FOR_IN
15878: IFFALSE 15904
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 1
15887: ARRAY
15888: PPUSH
15889: LD_VAR 0 3
15893: PUSH
15894: LD_INT 2
15896: ARRAY
15897: PPUSH
15898: CALL_OW 235
15902: GO 15877
15904: POP
15905: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15906: LD_ADDR_EXP 46
15910: PUSH
15911: LD_EXP 46
15915: PPUSH
15916: LD_VAR 0 4
15920: PPUSH
15921: EMPTY
15922: PPUSH
15923: CALL_OW 1
15927: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15928: LD_VAR 0 1
15932: PPUSH
15933: LD_INT 0
15935: PPUSH
15936: CALL_OW 505
// end ; end ;
15940: LD_VAR 0 2
15944: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15945: LD_INT 0
15947: PPUSH
15948: PPUSH
15949: PPUSH
// if not hack in hackTanks or not vehicles then
15950: LD_VAR 0 1
15954: PUSH
15955: LD_EXP 45
15959: IN
15960: NOT
15961: PUSH
15962: LD_VAR 0 2
15966: NOT
15967: OR
15968: IFFALSE 15972
// exit ;
15970: GO 16247
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15972: LD_ADDR_VAR 0 2
15976: PUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: LD_VAR 0 2
15986: PPUSH
15987: LD_INT 1
15989: PPUSH
15990: LD_INT 1
15992: PPUSH
15993: CALL 39856 0 4
15997: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15998: LD_ADDR_VAR 0 5
16002: PUSH
16003: LD_EXP 45
16007: PPUSH
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL 39206 0 2
16017: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16018: LD_EXP 46
16022: PUSH
16023: LD_VAR 0 5
16027: ARRAY
16028: PUSH
16029: LD_EXP 47
16033: LESS
16034: IFFALSE 16223
// begin for i := 1 to vehicles do
16036: LD_ADDR_VAR 0 4
16040: PUSH
16041: DOUBLE
16042: LD_INT 1
16044: DEC
16045: ST_TO_ADDR
16046: LD_VAR 0 2
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16221
// begin if hackTanksCaptured [ index ] = hackLimit then
16054: LD_EXP 46
16058: PUSH
16059: LD_VAR 0 5
16063: ARRAY
16064: PUSH
16065: LD_EXP 47
16069: EQUAL
16070: IFFALSE 16074
// break ;
16072: GO 16221
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16074: LD_ADDR_EXP 49
16078: PUSH
16079: LD_EXP 49
16083: PPUSH
16084: LD_VAR 0 5
16088: PPUSH
16089: LD_EXP 49
16093: PUSH
16094: LD_VAR 0 5
16098: ARRAY
16099: PUSH
16100: LD_INT 1
16102: PLUS
16103: PPUSH
16104: CALL_OW 1
16108: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16109: LD_ADDR_EXP 46
16113: PUSH
16114: LD_EXP 46
16118: PPUSH
16119: LD_VAR 0 5
16123: PUSH
16124: LD_EXP 46
16128: PUSH
16129: LD_VAR 0 5
16133: ARRAY
16134: PUSH
16135: LD_INT 1
16137: PLUS
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PPUSH
16143: LD_VAR 0 2
16147: PUSH
16148: LD_VAR 0 4
16152: ARRAY
16153: PUSH
16154: LD_VAR 0 2
16158: PUSH
16159: LD_VAR 0 4
16163: ARRAY
16164: PPUSH
16165: CALL_OW 255
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PPUSH
16174: CALL 39421 0 3
16178: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16179: LD_VAR 0 2
16183: PUSH
16184: LD_VAR 0 4
16188: ARRAY
16189: PPUSH
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 255
16199: PPUSH
16200: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16204: LD_VAR 0 2
16208: PUSH
16209: LD_VAR 0 4
16213: ARRAY
16214: PPUSH
16215: CALL_OW 141
// end ;
16219: GO 16051
16221: POP
16222: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16223: LD_VAR 0 1
16227: PPUSH
16228: LD_EXP 46
16232: PUSH
16233: LD_VAR 0 5
16237: ARRAY
16238: PUSH
16239: LD_INT 0
16241: PLUS
16242: PPUSH
16243: CALL_OW 505
// end ;
16247: LD_VAR 0 3
16251: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16252: LD_INT 0
16254: PPUSH
16255: PPUSH
16256: PPUSH
16257: PPUSH
// if not hack in hackTanks then
16258: LD_VAR 0 1
16262: PUSH
16263: LD_EXP 45
16267: IN
16268: NOT
16269: IFFALSE 16273
// exit ;
16271: GO 16513
// index := GetElementIndex ( hackTanks , hack ) ;
16273: LD_ADDR_VAR 0 4
16277: PUSH
16278: LD_EXP 45
16282: PPUSH
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL 39206 0 2
16292: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: DOUBLE
16299: LD_EXP 46
16303: PUSH
16304: LD_VAR 0 4
16308: ARRAY
16309: INC
16310: ST_TO_ADDR
16311: LD_INT 1
16313: PUSH
16314: FOR_DOWNTO
16315: IFFALSE 16487
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16317: LD_ADDR_VAR 0 5
16321: PUSH
16322: LD_EXP 46
16326: PUSH
16327: LD_VAR 0 4
16331: ARRAY
16332: PUSH
16333: LD_VAR 0 3
16337: ARRAY
16338: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16339: LD_VAR 0 5
16343: PUSH
16344: LD_INT 1
16346: ARRAY
16347: PPUSH
16348: CALL_OW 302
16352: NOT
16353: PUSH
16354: LD_VAR 0 5
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: CALL_OW 255
16367: PUSH
16368: LD_VAR 0 1
16372: PPUSH
16373: CALL_OW 255
16377: NONEQUAL
16378: OR
16379: IFFALSE 16485
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16381: LD_VAR 0 5
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: PPUSH
16390: CALL_OW 305
16394: PUSH
16395: LD_VAR 0 5
16399: PUSH
16400: LD_INT 1
16402: ARRAY
16403: PPUSH
16404: CALL_OW 255
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 255
16418: EQUAL
16419: AND
16420: IFFALSE 16444
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16422: LD_VAR 0 5
16426: PUSH
16427: LD_INT 1
16429: ARRAY
16430: PPUSH
16431: LD_VAR 0 5
16435: PUSH
16436: LD_INT 2
16438: ARRAY
16439: PPUSH
16440: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16444: LD_ADDR_EXP 46
16448: PUSH
16449: LD_EXP 46
16453: PPUSH
16454: LD_VAR 0 4
16458: PPUSH
16459: LD_EXP 46
16463: PUSH
16464: LD_VAR 0 4
16468: ARRAY
16469: PPUSH
16470: LD_VAR 0 3
16474: PPUSH
16475: CALL_OW 3
16479: PPUSH
16480: CALL_OW 1
16484: ST_TO_ADDR
// end ; end ;
16485: GO 16314
16487: POP
16488: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16489: LD_VAR 0 1
16493: PPUSH
16494: LD_EXP 46
16498: PUSH
16499: LD_VAR 0 4
16503: ARRAY
16504: PUSH
16505: LD_INT 0
16507: PLUS
16508: PPUSH
16509: CALL_OW 505
// end ;
16513: LD_VAR 0 2
16517: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16518: LD_INT 0
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
// if not hack in hackTanks then
16524: LD_VAR 0 1
16528: PUSH
16529: LD_EXP 45
16533: IN
16534: NOT
16535: IFFALSE 16539
// exit ;
16537: GO 16624
// index := GetElementIndex ( hackTanks , hack ) ;
16539: LD_ADDR_VAR 0 5
16543: PUSH
16544: LD_EXP 45
16548: PPUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL 39206 0 2
16558: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16559: LD_ADDR_VAR 0 4
16563: PUSH
16564: DOUBLE
16565: LD_INT 1
16567: DEC
16568: ST_TO_ADDR
16569: LD_EXP 46
16573: PUSH
16574: LD_VAR 0 5
16578: ARRAY
16579: PUSH
16580: FOR_TO
16581: IFFALSE 16622
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16583: LD_EXP 46
16587: PUSH
16588: LD_VAR 0 5
16592: ARRAY
16593: PUSH
16594: LD_VAR 0 4
16598: ARRAY
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PUSH
16604: LD_VAR 0 2
16608: EQUAL
16609: IFFALSE 16620
// KillUnit ( vehicle ) ;
16611: LD_VAR 0 2
16615: PPUSH
16616: CALL_OW 66
16620: GO 16580
16622: POP
16623: POP
// end ;
16624: LD_VAR 0 3
16628: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16629: LD_EXP 50
16633: NOT
16634: IFFALSE 16669
16636: GO 16638
16638: DISABLE
// begin initMiner := true ;
16639: LD_ADDR_EXP 50
16643: PUSH
16644: LD_INT 1
16646: ST_TO_ADDR
// minersList := [ ] ;
16647: LD_ADDR_EXP 51
16651: PUSH
16652: EMPTY
16653: ST_TO_ADDR
// minerMinesList := [ ] ;
16654: LD_ADDR_EXP 52
16658: PUSH
16659: EMPTY
16660: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16661: LD_ADDR_EXP 53
16665: PUSH
16666: LD_INT 5
16668: ST_TO_ADDR
// end ;
16669: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16670: LD_EXP 50
16674: PUSH
16675: LD_INT 34
16677: PUSH
16678: LD_INT 81
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PPUSH
16685: CALL_OW 69
16689: AND
16690: IFFALSE 17151
16692: GO 16694
16694: DISABLE
16695: LD_INT 0
16697: PPUSH
16698: PPUSH
16699: PPUSH
16700: PPUSH
// begin enable ;
16701: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16702: LD_ADDR_VAR 0 1
16706: PUSH
16707: LD_INT 34
16709: PUSH
16710: LD_INT 81
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PPUSH
16717: CALL_OW 69
16721: PUSH
16722: FOR_IN
16723: IFFALSE 16795
// begin if not i in minersList then
16725: LD_VAR 0 1
16729: PUSH
16730: LD_EXP 51
16734: IN
16735: NOT
16736: IFFALSE 16793
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16738: LD_ADDR_EXP 51
16742: PUSH
16743: LD_EXP 51
16747: PPUSH
16748: LD_EXP 51
16752: PUSH
16753: LD_INT 1
16755: PLUS
16756: PPUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 1
16766: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16767: LD_ADDR_EXP 52
16771: PUSH
16772: LD_EXP 52
16776: PPUSH
16777: LD_EXP 52
16781: PUSH
16782: LD_INT 1
16784: PLUS
16785: PPUSH
16786: EMPTY
16787: PPUSH
16788: CALL_OW 1
16792: ST_TO_ADDR
// end end ;
16793: GO 16722
16795: POP
16796: POP
// for i := minerMinesList downto 1 do
16797: LD_ADDR_VAR 0 1
16801: PUSH
16802: DOUBLE
16803: LD_EXP 52
16807: INC
16808: ST_TO_ADDR
16809: LD_INT 1
16811: PUSH
16812: FOR_DOWNTO
16813: IFFALSE 17149
// begin if IsLive ( minersList [ i ] ) then
16815: LD_EXP 51
16819: PUSH
16820: LD_VAR 0 1
16824: ARRAY
16825: PPUSH
16826: CALL_OW 300
16830: IFFALSE 16858
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16832: LD_EXP 51
16836: PUSH
16837: LD_VAR 0 1
16841: ARRAY
16842: PPUSH
16843: LD_EXP 52
16847: PUSH
16848: LD_VAR 0 1
16852: ARRAY
16853: PPUSH
16854: CALL_OW 505
// if not minerMinesList [ i ] then
16858: LD_EXP 52
16862: PUSH
16863: LD_VAR 0 1
16867: ARRAY
16868: NOT
16869: IFFALSE 16873
// continue ;
16871: GO 16812
// for j := minerMinesList [ i ] downto 1 do
16873: LD_ADDR_VAR 0 2
16877: PUSH
16878: DOUBLE
16879: LD_EXP 52
16883: PUSH
16884: LD_VAR 0 1
16888: ARRAY
16889: INC
16890: ST_TO_ADDR
16891: LD_INT 1
16893: PUSH
16894: FOR_DOWNTO
16895: IFFALSE 17145
// begin side := GetSide ( minersList [ i ] ) ;
16897: LD_ADDR_VAR 0 3
16901: PUSH
16902: LD_EXP 51
16906: PUSH
16907: LD_VAR 0 1
16911: ARRAY
16912: PPUSH
16913: CALL_OW 255
16917: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16918: LD_ADDR_VAR 0 4
16922: PUSH
16923: LD_EXP 52
16927: PUSH
16928: LD_VAR 0 1
16932: ARRAY
16933: PUSH
16934: LD_VAR 0 2
16938: ARRAY
16939: PUSH
16940: LD_INT 1
16942: ARRAY
16943: PPUSH
16944: LD_EXP 52
16948: PUSH
16949: LD_VAR 0 1
16953: ARRAY
16954: PUSH
16955: LD_VAR 0 2
16959: ARRAY
16960: PUSH
16961: LD_INT 2
16963: ARRAY
16964: PPUSH
16965: CALL_OW 428
16969: ST_TO_ADDR
// if not tmp then
16970: LD_VAR 0 4
16974: NOT
16975: IFFALSE 16979
// continue ;
16977: GO 16894
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16979: LD_VAR 0 4
16983: PUSH
16984: LD_INT 81
16986: PUSH
16987: LD_VAR 0 3
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 69
17000: IN
17001: PUSH
17002: LD_EXP 52
17006: PUSH
17007: LD_VAR 0 1
17011: ARRAY
17012: PUSH
17013: LD_VAR 0 2
17017: ARRAY
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_EXP 52
17027: PUSH
17028: LD_VAR 0 1
17032: ARRAY
17033: PUSH
17034: LD_VAR 0 2
17038: ARRAY
17039: PUSH
17040: LD_INT 2
17042: ARRAY
17043: PPUSH
17044: CALL_OW 458
17048: AND
17049: IFFALSE 17143
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17051: LD_EXP 52
17055: PUSH
17056: LD_VAR 0 1
17060: ARRAY
17061: PUSH
17062: LD_VAR 0 2
17066: ARRAY
17067: PUSH
17068: LD_INT 1
17070: ARRAY
17071: PPUSH
17072: LD_EXP 52
17076: PUSH
17077: LD_VAR 0 1
17081: ARRAY
17082: PUSH
17083: LD_VAR 0 2
17087: ARRAY
17088: PUSH
17089: LD_INT 2
17091: ARRAY
17092: PPUSH
17093: LD_VAR 0 3
17097: PPUSH
17098: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17102: LD_ADDR_EXP 52
17106: PUSH
17107: LD_EXP 52
17111: PPUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: LD_EXP 52
17121: PUSH
17122: LD_VAR 0 1
17126: ARRAY
17127: PPUSH
17128: LD_VAR 0 2
17132: PPUSH
17133: CALL_OW 3
17137: PPUSH
17138: CALL_OW 1
17142: ST_TO_ADDR
// end ; end ;
17143: GO 16894
17145: POP
17146: POP
// end ;
17147: GO 16812
17149: POP
17150: POP
// end ;
17151: PPOPN 4
17153: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17154: LD_INT 0
17156: PPUSH
17157: PPUSH
// result := false ;
17158: LD_ADDR_VAR 0 4
17162: PUSH
17163: LD_INT 0
17165: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 264
17175: PUSH
17176: LD_INT 81
17178: EQUAL
17179: NOT
17180: IFFALSE 17184
// exit ;
17182: GO 17424
// index := GetElementIndex ( minersList , unit ) ;
17184: LD_ADDR_VAR 0 5
17188: PUSH
17189: LD_EXP 51
17193: PPUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL 39206 0 2
17203: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17204: LD_EXP 52
17208: PUSH
17209: LD_VAR 0 5
17213: ARRAY
17214: PUSH
17215: LD_EXP 53
17219: GREATEREQUAL
17220: IFFALSE 17224
// exit ;
17222: GO 17424
// ComMoveXY ( unit , x , y ) ;
17224: LD_VAR 0 1
17228: PPUSH
17229: LD_VAR 0 2
17233: PPUSH
17234: LD_VAR 0 3
17238: PPUSH
17239: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17243: LD_INT 35
17245: PPUSH
17246: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17250: LD_VAR 0 1
17254: PPUSH
17255: LD_VAR 0 2
17259: PPUSH
17260: LD_VAR 0 3
17264: PPUSH
17265: CALL 70469 0 3
17269: NOT
17270: PUSH
17271: LD_VAR 0 1
17275: PPUSH
17276: CALL_OW 314
17280: AND
17281: IFFALSE 17285
// exit ;
17283: GO 17424
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17285: LD_VAR 0 2
17289: PPUSH
17290: LD_VAR 0 3
17294: PPUSH
17295: CALL_OW 428
17299: PUSH
17300: LD_VAR 0 1
17304: EQUAL
17305: PUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 314
17315: NOT
17316: AND
17317: IFFALSE 17243
// PlaySoundXY ( x , y , PlantMine ) ;
17319: LD_VAR 0 2
17323: PPUSH
17324: LD_VAR 0 3
17328: PPUSH
17329: LD_STRING PlantMine
17331: PPUSH
17332: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17336: LD_VAR 0 2
17340: PPUSH
17341: LD_VAR 0 3
17345: PPUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 255
17355: PPUSH
17356: LD_INT 0
17358: PPUSH
17359: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17363: LD_ADDR_EXP 52
17367: PUSH
17368: LD_EXP 52
17372: PPUSH
17373: LD_VAR 0 5
17377: PUSH
17378: LD_EXP 52
17382: PUSH
17383: LD_VAR 0 5
17387: ARRAY
17388: PUSH
17389: LD_INT 1
17391: PLUS
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PPUSH
17397: LD_VAR 0 2
17401: PUSH
17402: LD_VAR 0 3
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PPUSH
17411: CALL 39421 0 3
17415: ST_TO_ADDR
// result := true ;
17416: LD_ADDR_VAR 0 4
17420: PUSH
17421: LD_INT 1
17423: ST_TO_ADDR
// end ;
17424: LD_VAR 0 4
17428: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17429: LD_INT 0
17431: PPUSH
17432: PPUSH
17433: PPUSH
// if not unit in minersList then
17434: LD_VAR 0 1
17438: PUSH
17439: LD_EXP 51
17443: IN
17444: NOT
17445: IFFALSE 17449
// exit ;
17447: GO 17841
// index := GetElementIndex ( minersList , unit ) ;
17449: LD_ADDR_VAR 0 6
17453: PUSH
17454: LD_EXP 51
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL 39206 0 2
17468: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17469: LD_ADDR_VAR 0 5
17473: PUSH
17474: DOUBLE
17475: LD_EXP 52
17479: PUSH
17480: LD_VAR 0 6
17484: ARRAY
17485: INC
17486: ST_TO_ADDR
17487: LD_INT 1
17489: PUSH
17490: FOR_DOWNTO
17491: IFFALSE 17652
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17493: LD_EXP 52
17497: PUSH
17498: LD_VAR 0 6
17502: ARRAY
17503: PUSH
17504: LD_VAR 0 5
17508: ARRAY
17509: PUSH
17510: LD_INT 1
17512: ARRAY
17513: PUSH
17514: LD_VAR 0 2
17518: EQUAL
17519: PUSH
17520: LD_EXP 52
17524: PUSH
17525: LD_VAR 0 6
17529: ARRAY
17530: PUSH
17531: LD_VAR 0 5
17535: ARRAY
17536: PUSH
17537: LD_INT 2
17539: ARRAY
17540: PUSH
17541: LD_VAR 0 3
17545: EQUAL
17546: AND
17547: IFFALSE 17650
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17549: LD_EXP 52
17553: PUSH
17554: LD_VAR 0 6
17558: ARRAY
17559: PUSH
17560: LD_VAR 0 5
17564: ARRAY
17565: PUSH
17566: LD_INT 1
17568: ARRAY
17569: PPUSH
17570: LD_EXP 52
17574: PUSH
17575: LD_VAR 0 6
17579: ARRAY
17580: PUSH
17581: LD_VAR 0 5
17585: ARRAY
17586: PUSH
17587: LD_INT 2
17589: ARRAY
17590: PPUSH
17591: LD_VAR 0 1
17595: PPUSH
17596: CALL_OW 255
17600: PPUSH
17601: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17605: LD_ADDR_EXP 52
17609: PUSH
17610: LD_EXP 52
17614: PPUSH
17615: LD_VAR 0 6
17619: PPUSH
17620: LD_EXP 52
17624: PUSH
17625: LD_VAR 0 6
17629: ARRAY
17630: PPUSH
17631: LD_VAR 0 5
17635: PPUSH
17636: CALL_OW 3
17640: PPUSH
17641: CALL_OW 1
17645: ST_TO_ADDR
// exit ;
17646: POP
17647: POP
17648: GO 17841
// end ; end ;
17650: GO 17490
17652: POP
17653: POP
// for i := minerMinesList [ index ] downto 1 do
17654: LD_ADDR_VAR 0 5
17658: PUSH
17659: DOUBLE
17660: LD_EXP 52
17664: PUSH
17665: LD_VAR 0 6
17669: ARRAY
17670: INC
17671: ST_TO_ADDR
17672: LD_INT 1
17674: PUSH
17675: FOR_DOWNTO
17676: IFFALSE 17839
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17678: LD_EXP 52
17682: PUSH
17683: LD_VAR 0 6
17687: ARRAY
17688: PUSH
17689: LD_VAR 0 5
17693: ARRAY
17694: PUSH
17695: LD_INT 1
17697: ARRAY
17698: PPUSH
17699: LD_EXP 52
17703: PUSH
17704: LD_VAR 0 6
17708: ARRAY
17709: PUSH
17710: LD_VAR 0 5
17714: ARRAY
17715: PUSH
17716: LD_INT 2
17718: ARRAY
17719: PPUSH
17720: LD_VAR 0 2
17724: PPUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: CALL_OW 298
17734: PUSH
17735: LD_INT 6
17737: LESS
17738: IFFALSE 17837
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17740: LD_EXP 52
17744: PUSH
17745: LD_VAR 0 6
17749: ARRAY
17750: PUSH
17751: LD_VAR 0 5
17755: ARRAY
17756: PUSH
17757: LD_INT 1
17759: ARRAY
17760: PPUSH
17761: LD_EXP 52
17765: PUSH
17766: LD_VAR 0 6
17770: ARRAY
17771: PUSH
17772: LD_VAR 0 5
17776: ARRAY
17777: PUSH
17778: LD_INT 2
17780: ARRAY
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 255
17791: PPUSH
17792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17796: LD_ADDR_EXP 52
17800: PUSH
17801: LD_EXP 52
17805: PPUSH
17806: LD_VAR 0 6
17810: PPUSH
17811: LD_EXP 52
17815: PUSH
17816: LD_VAR 0 6
17820: ARRAY
17821: PPUSH
17822: LD_VAR 0 5
17826: PPUSH
17827: CALL_OW 3
17831: PPUSH
17832: CALL_OW 1
17836: ST_TO_ADDR
// end ; end ;
17837: GO 17675
17839: POP
17840: POP
// end ;
17841: LD_VAR 0 4
17845: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17846: LD_INT 0
17848: PPUSH
17849: PPUSH
17850: PPUSH
17851: PPUSH
17852: PPUSH
17853: PPUSH
17854: PPUSH
17855: PPUSH
17856: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17857: LD_VAR 0 1
17861: PPUSH
17862: CALL_OW 264
17866: PUSH
17867: LD_INT 81
17869: EQUAL
17870: NOT
17871: PUSH
17872: LD_VAR 0 1
17876: PUSH
17877: LD_EXP 51
17881: IN
17882: NOT
17883: OR
17884: IFFALSE 17888
// exit ;
17886: GO 18210
// index := GetElementIndex ( minersList , unit ) ;
17888: LD_ADDR_VAR 0 6
17892: PUSH
17893: LD_EXP 51
17897: PPUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL 39206 0 2
17907: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17908: LD_ADDR_VAR 0 8
17912: PUSH
17913: LD_EXP 53
17917: PUSH
17918: LD_EXP 52
17922: PUSH
17923: LD_VAR 0 6
17927: ARRAY
17928: MINUS
17929: ST_TO_ADDR
// if not minesFreeAmount then
17930: LD_VAR 0 8
17934: NOT
17935: IFFALSE 17939
// exit ;
17937: GO 18210
// tmp := [ ] ;
17939: LD_ADDR_VAR 0 7
17943: PUSH
17944: EMPTY
17945: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17946: LD_ADDR_VAR 0 5
17950: PUSH
17951: DOUBLE
17952: LD_INT 1
17954: DEC
17955: ST_TO_ADDR
17956: LD_VAR 0 8
17960: PUSH
17961: FOR_TO
17962: IFFALSE 18157
// begin _d := rand ( 0 , 5 ) ;
17964: LD_ADDR_VAR 0 11
17968: PUSH
17969: LD_INT 0
17971: PPUSH
17972: LD_INT 5
17974: PPUSH
17975: CALL_OW 12
17979: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17980: LD_ADDR_VAR 0 12
17984: PUSH
17985: LD_INT 2
17987: PPUSH
17988: LD_INT 6
17990: PPUSH
17991: CALL_OW 12
17995: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17996: LD_ADDR_VAR 0 9
18000: PUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: LD_VAR 0 11
18010: PPUSH
18011: LD_VAR 0 12
18015: PPUSH
18016: CALL_OW 272
18020: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18021: LD_ADDR_VAR 0 10
18025: PUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_VAR 0 11
18035: PPUSH
18036: LD_VAR 0 12
18040: PPUSH
18041: CALL_OW 273
18045: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18046: LD_VAR 0 9
18050: PPUSH
18051: LD_VAR 0 10
18055: PPUSH
18056: CALL_OW 488
18060: PUSH
18061: LD_VAR 0 9
18065: PUSH
18066: LD_VAR 0 10
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_VAR 0 7
18079: IN
18080: NOT
18081: AND
18082: PUSH
18083: LD_VAR 0 9
18087: PPUSH
18088: LD_VAR 0 10
18092: PPUSH
18093: CALL_OW 458
18097: NOT
18098: AND
18099: IFFALSE 18141
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18101: LD_ADDR_VAR 0 7
18105: PUSH
18106: LD_VAR 0 7
18110: PPUSH
18111: LD_VAR 0 7
18115: PUSH
18116: LD_INT 1
18118: PLUS
18119: PPUSH
18120: LD_VAR 0 9
18124: PUSH
18125: LD_VAR 0 10
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 1
18138: ST_TO_ADDR
18139: GO 18155
// i := i - 1 ;
18141: LD_ADDR_VAR 0 5
18145: PUSH
18146: LD_VAR 0 5
18150: PUSH
18151: LD_INT 1
18153: MINUS
18154: ST_TO_ADDR
// end ;
18155: GO 17961
18157: POP
18158: POP
// for i in tmp do
18159: LD_ADDR_VAR 0 5
18163: PUSH
18164: LD_VAR 0 7
18168: PUSH
18169: FOR_IN
18170: IFFALSE 18208
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18172: LD_VAR 0 1
18176: PPUSH
18177: LD_VAR 0 5
18181: PUSH
18182: LD_INT 1
18184: ARRAY
18185: PPUSH
18186: LD_VAR 0 5
18190: PUSH
18191: LD_INT 2
18193: ARRAY
18194: PPUSH
18195: CALL 17154 0 3
18199: NOT
18200: IFFALSE 18206
// exit ;
18202: POP
18203: POP
18204: GO 18210
18206: GO 18169
18208: POP
18209: POP
// end ;
18210: LD_VAR 0 4
18214: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18215: LD_INT 0
18217: PPUSH
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
18222: PPUSH
18223: PPUSH
// if not GetClass ( unit ) = class_sniper then
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 257
18233: PUSH
18234: LD_INT 5
18236: EQUAL
18237: NOT
18238: IFFALSE 18242
// exit ;
18240: GO 18630
// dist := 8 ;
18242: LD_ADDR_VAR 0 5
18246: PUSH
18247: LD_INT 8
18249: ST_TO_ADDR
// viewRange := 12 ;
18250: LD_ADDR_VAR 0 7
18254: PUSH
18255: LD_INT 12
18257: ST_TO_ADDR
// side := GetSide ( unit ) ;
18258: LD_ADDR_VAR 0 6
18262: PUSH
18263: LD_VAR 0 1
18267: PPUSH
18268: CALL_OW 255
18272: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18273: LD_INT 61
18275: PPUSH
18276: LD_VAR 0 6
18280: PPUSH
18281: CALL_OW 321
18285: PUSH
18286: LD_INT 2
18288: EQUAL
18289: IFFALSE 18299
// viewRange := 16 ;
18291: LD_ADDR_VAR 0 7
18295: PUSH
18296: LD_INT 16
18298: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: LD_VAR 0 3
18313: PPUSH
18314: CALL_OW 297
18318: PUSH
18319: LD_VAR 0 5
18323: GREATER
18324: IFFALSE 18403
// begin ComMoveXY ( unit , x , y ) ;
18326: LD_VAR 0 1
18330: PPUSH
18331: LD_VAR 0 2
18335: PPUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18345: LD_INT 35
18347: PPUSH
18348: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_VAR 0 2
18361: PPUSH
18362: LD_VAR 0 3
18366: PPUSH
18367: CALL 70469 0 3
18371: NOT
18372: IFFALSE 18376
// exit ;
18374: GO 18630
// until GetDistUnitXY ( unit , x , y ) < dist ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 2
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: CALL_OW 297
18395: PUSH
18396: LD_VAR 0 5
18400: LESS
18401: IFFALSE 18345
// end ; ComTurnXY ( unit , x , y ) ;
18403: LD_VAR 0 1
18407: PPUSH
18408: LD_VAR 0 2
18412: PPUSH
18413: LD_VAR 0 3
18417: PPUSH
18418: CALL_OW 118
// wait ( 5 ) ;
18422: LD_INT 5
18424: PPUSH
18425: CALL_OW 67
// _d := GetDir ( unit ) ;
18429: LD_ADDR_VAR 0 10
18433: PUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 254
18443: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18444: LD_ADDR_VAR 0 8
18448: PUSH
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 250
18458: PPUSH
18459: LD_VAR 0 10
18463: PPUSH
18464: LD_VAR 0 5
18468: PPUSH
18469: CALL_OW 272
18473: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18474: LD_ADDR_VAR 0 9
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 251
18488: PPUSH
18489: LD_VAR 0 10
18493: PPUSH
18494: LD_VAR 0 5
18498: PPUSH
18499: CALL_OW 273
18503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18504: LD_VAR 0 8
18508: PPUSH
18509: LD_VAR 0 9
18513: PPUSH
18514: CALL_OW 488
18518: NOT
18519: IFFALSE 18523
// exit ;
18521: GO 18630
// ComAnimCustom ( unit , 1 ) ;
18523: LD_VAR 0 1
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18535: LD_VAR 0 8
18539: PPUSH
18540: LD_VAR 0 9
18544: PPUSH
18545: LD_VAR 0 6
18549: PPUSH
18550: LD_VAR 0 7
18554: PPUSH
18555: CALL_OW 330
// repeat wait ( 1 ) ;
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18566: LD_VAR 0 1
18570: PPUSH
18571: CALL_OW 316
18575: PUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 314
18585: OR
18586: PUSH
18587: LD_VAR 0 1
18591: PPUSH
18592: CALL_OW 302
18596: NOT
18597: OR
18598: PUSH
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 301
18608: OR
18609: IFFALSE 18559
// RemoveSeeing ( _x , _y , side ) ;
18611: LD_VAR 0 8
18615: PPUSH
18616: LD_VAR 0 9
18620: PPUSH
18621: LD_VAR 0 6
18625: PPUSH
18626: CALL_OW 331
// end ; end_of_file
18630: LD_VAR 0 4
18634: RET
// every 0 0$1 do
18635: GO 18637
18637: DISABLE
// begin enable ;
18638: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18639: LD_STRING updateTimer(
18641: PUSH
18642: LD_OWVAR 1
18646: STR
18647: PUSH
18648: LD_STRING );
18650: STR
18651: PPUSH
18652: CALL_OW 559
// end ;
18656: END
// export function SOS_MapStart ( ) ; begin
18657: LD_INT 0
18659: PPUSH
// if streamModeActive then
18660: LD_EXP 54
18664: IFFALSE 18673
// DefineStreamItems ( true ) ;
18666: LD_INT 1
18668: PPUSH
18669: CALL 20327 0 1
// UpdateFactoryWaypoints ( ) ;
18673: CALL 33188 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18677: CALL 33445 0 0
// end ;
18681: LD_VAR 0 1
18685: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18686: LD_INT 0
18688: PPUSH
// if p2 = 100 then
18689: LD_VAR 0 2
18693: PUSH
18694: LD_INT 100
18696: EQUAL
18697: IFFALSE 19700
// begin if not StreamModeActive then
18699: LD_EXP 54
18703: NOT
18704: IFFALSE 18714
// StreamModeActive := true ;
18706: LD_ADDR_EXP 54
18710: PUSH
18711: LD_INT 1
18713: ST_TO_ADDR
// if p3 = 0 then
18714: LD_VAR 0 3
18718: PUSH
18719: LD_INT 0
18721: EQUAL
18722: IFFALSE 18728
// InitStreamMode ;
18724: CALL 19863 0 0
// if p3 = 1 then
18728: LD_VAR 0 3
18732: PUSH
18733: LD_INT 1
18735: EQUAL
18736: IFFALSE 18746
// sRocket := true ;
18738: LD_ADDR_EXP 59
18742: PUSH
18743: LD_INT 1
18745: ST_TO_ADDR
// if p3 = 2 then
18746: LD_VAR 0 3
18750: PUSH
18751: LD_INT 2
18753: EQUAL
18754: IFFALSE 18764
// sSpeed := true ;
18756: LD_ADDR_EXP 58
18760: PUSH
18761: LD_INT 1
18763: ST_TO_ADDR
// if p3 = 3 then
18764: LD_VAR 0 3
18768: PUSH
18769: LD_INT 3
18771: EQUAL
18772: IFFALSE 18782
// sEngine := true ;
18774: LD_ADDR_EXP 60
18778: PUSH
18779: LD_INT 1
18781: ST_TO_ADDR
// if p3 = 4 then
18782: LD_VAR 0 3
18786: PUSH
18787: LD_INT 4
18789: EQUAL
18790: IFFALSE 18800
// sSpec := true ;
18792: LD_ADDR_EXP 57
18796: PUSH
18797: LD_INT 1
18799: ST_TO_ADDR
// if p3 = 5 then
18800: LD_VAR 0 3
18804: PUSH
18805: LD_INT 5
18807: EQUAL
18808: IFFALSE 18818
// sLevel := true ;
18810: LD_ADDR_EXP 61
18814: PUSH
18815: LD_INT 1
18817: ST_TO_ADDR
// if p3 = 6 then
18818: LD_VAR 0 3
18822: PUSH
18823: LD_INT 6
18825: EQUAL
18826: IFFALSE 18836
// sArmoury := true ;
18828: LD_ADDR_EXP 62
18832: PUSH
18833: LD_INT 1
18835: ST_TO_ADDR
// if p3 = 7 then
18836: LD_VAR 0 3
18840: PUSH
18841: LD_INT 7
18843: EQUAL
18844: IFFALSE 18854
// sRadar := true ;
18846: LD_ADDR_EXP 63
18850: PUSH
18851: LD_INT 1
18853: ST_TO_ADDR
// if p3 = 8 then
18854: LD_VAR 0 3
18858: PUSH
18859: LD_INT 8
18861: EQUAL
18862: IFFALSE 18872
// sBunker := true ;
18864: LD_ADDR_EXP 64
18868: PUSH
18869: LD_INT 1
18871: ST_TO_ADDR
// if p3 = 9 then
18872: LD_VAR 0 3
18876: PUSH
18877: LD_INT 9
18879: EQUAL
18880: IFFALSE 18890
// sHack := true ;
18882: LD_ADDR_EXP 65
18886: PUSH
18887: LD_INT 1
18889: ST_TO_ADDR
// if p3 = 10 then
18890: LD_VAR 0 3
18894: PUSH
18895: LD_INT 10
18897: EQUAL
18898: IFFALSE 18908
// sFire := true ;
18900: LD_ADDR_EXP 66
18904: PUSH
18905: LD_INT 1
18907: ST_TO_ADDR
// if p3 = 11 then
18908: LD_VAR 0 3
18912: PUSH
18913: LD_INT 11
18915: EQUAL
18916: IFFALSE 18926
// sRefresh := true ;
18918: LD_ADDR_EXP 67
18922: PUSH
18923: LD_INT 1
18925: ST_TO_ADDR
// if p3 = 12 then
18926: LD_VAR 0 3
18930: PUSH
18931: LD_INT 12
18933: EQUAL
18934: IFFALSE 18944
// sExp := true ;
18936: LD_ADDR_EXP 68
18940: PUSH
18941: LD_INT 1
18943: ST_TO_ADDR
// if p3 = 13 then
18944: LD_VAR 0 3
18948: PUSH
18949: LD_INT 13
18951: EQUAL
18952: IFFALSE 18962
// sDepot := true ;
18954: LD_ADDR_EXP 69
18958: PUSH
18959: LD_INT 1
18961: ST_TO_ADDR
// if p3 = 14 then
18962: LD_VAR 0 3
18966: PUSH
18967: LD_INT 14
18969: EQUAL
18970: IFFALSE 18980
// sFlag := true ;
18972: LD_ADDR_EXP 70
18976: PUSH
18977: LD_INT 1
18979: ST_TO_ADDR
// if p3 = 15 then
18980: LD_VAR 0 3
18984: PUSH
18985: LD_INT 15
18987: EQUAL
18988: IFFALSE 18998
// sKamikadze := true ;
18990: LD_ADDR_EXP 78
18994: PUSH
18995: LD_INT 1
18997: ST_TO_ADDR
// if p3 = 16 then
18998: LD_VAR 0 3
19002: PUSH
19003: LD_INT 16
19005: EQUAL
19006: IFFALSE 19016
// sTroll := true ;
19008: LD_ADDR_EXP 79
19012: PUSH
19013: LD_INT 1
19015: ST_TO_ADDR
// if p3 = 17 then
19016: LD_VAR 0 3
19020: PUSH
19021: LD_INT 17
19023: EQUAL
19024: IFFALSE 19034
// sSlow := true ;
19026: LD_ADDR_EXP 80
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// if p3 = 18 then
19034: LD_VAR 0 3
19038: PUSH
19039: LD_INT 18
19041: EQUAL
19042: IFFALSE 19052
// sLack := true ;
19044: LD_ADDR_EXP 81
19048: PUSH
19049: LD_INT 1
19051: ST_TO_ADDR
// if p3 = 19 then
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 19
19059: EQUAL
19060: IFFALSE 19070
// sTank := true ;
19062: LD_ADDR_EXP 83
19066: PUSH
19067: LD_INT 1
19069: ST_TO_ADDR
// if p3 = 20 then
19070: LD_VAR 0 3
19074: PUSH
19075: LD_INT 20
19077: EQUAL
19078: IFFALSE 19088
// sRemote := true ;
19080: LD_ADDR_EXP 84
19084: PUSH
19085: LD_INT 1
19087: ST_TO_ADDR
// if p3 = 21 then
19088: LD_VAR 0 3
19092: PUSH
19093: LD_INT 21
19095: EQUAL
19096: IFFALSE 19106
// sPowell := true ;
19098: LD_ADDR_EXP 85
19102: PUSH
19103: LD_INT 1
19105: ST_TO_ADDR
// if p3 = 22 then
19106: LD_VAR 0 3
19110: PUSH
19111: LD_INT 22
19113: EQUAL
19114: IFFALSE 19124
// sTeleport := true ;
19116: LD_ADDR_EXP 88
19120: PUSH
19121: LD_INT 1
19123: ST_TO_ADDR
// if p3 = 23 then
19124: LD_VAR 0 3
19128: PUSH
19129: LD_INT 23
19131: EQUAL
19132: IFFALSE 19142
// sOilTower := true ;
19134: LD_ADDR_EXP 90
19138: PUSH
19139: LD_INT 1
19141: ST_TO_ADDR
// if p3 = 24 then
19142: LD_VAR 0 3
19146: PUSH
19147: LD_INT 24
19149: EQUAL
19150: IFFALSE 19160
// sShovel := true ;
19152: LD_ADDR_EXP 91
19156: PUSH
19157: LD_INT 1
19159: ST_TO_ADDR
// if p3 = 25 then
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 25
19167: EQUAL
19168: IFFALSE 19178
// sSheik := true ;
19170: LD_ADDR_EXP 92
19174: PUSH
19175: LD_INT 1
19177: ST_TO_ADDR
// if p3 = 26 then
19178: LD_VAR 0 3
19182: PUSH
19183: LD_INT 26
19185: EQUAL
19186: IFFALSE 19196
// sEarthquake := true ;
19188: LD_ADDR_EXP 94
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// if p3 = 27 then
19196: LD_VAR 0 3
19200: PUSH
19201: LD_INT 27
19203: EQUAL
19204: IFFALSE 19214
// sAI := true ;
19206: LD_ADDR_EXP 95
19210: PUSH
19211: LD_INT 1
19213: ST_TO_ADDR
// if p3 = 28 then
19214: LD_VAR 0 3
19218: PUSH
19219: LD_INT 28
19221: EQUAL
19222: IFFALSE 19232
// sCargo := true ;
19224: LD_ADDR_EXP 98
19228: PUSH
19229: LD_INT 1
19231: ST_TO_ADDR
// if p3 = 29 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 29
19239: EQUAL
19240: IFFALSE 19250
// sDLaser := true ;
19242: LD_ADDR_EXP 99
19246: PUSH
19247: LD_INT 1
19249: ST_TO_ADDR
// if p3 = 30 then
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 30
19257: EQUAL
19258: IFFALSE 19268
// sExchange := true ;
19260: LD_ADDR_EXP 100
19264: PUSH
19265: LD_INT 1
19267: ST_TO_ADDR
// if p3 = 31 then
19268: LD_VAR 0 3
19272: PUSH
19273: LD_INT 31
19275: EQUAL
19276: IFFALSE 19286
// sFac := true ;
19278: LD_ADDR_EXP 101
19282: PUSH
19283: LD_INT 1
19285: ST_TO_ADDR
// if p3 = 32 then
19286: LD_VAR 0 3
19290: PUSH
19291: LD_INT 32
19293: EQUAL
19294: IFFALSE 19304
// sPower := true ;
19296: LD_ADDR_EXP 102
19300: PUSH
19301: LD_INT 1
19303: ST_TO_ADDR
// if p3 = 33 then
19304: LD_VAR 0 3
19308: PUSH
19309: LD_INT 33
19311: EQUAL
19312: IFFALSE 19322
// sRandom := true ;
19314: LD_ADDR_EXP 103
19318: PUSH
19319: LD_INT 1
19321: ST_TO_ADDR
// if p3 = 34 then
19322: LD_VAR 0 3
19326: PUSH
19327: LD_INT 34
19329: EQUAL
19330: IFFALSE 19340
// sShield := true ;
19332: LD_ADDR_EXP 104
19336: PUSH
19337: LD_INT 1
19339: ST_TO_ADDR
// if p3 = 35 then
19340: LD_VAR 0 3
19344: PUSH
19345: LD_INT 35
19347: EQUAL
19348: IFFALSE 19358
// sTime := true ;
19350: LD_ADDR_EXP 105
19354: PUSH
19355: LD_INT 1
19357: ST_TO_ADDR
// if p3 = 36 then
19358: LD_VAR 0 3
19362: PUSH
19363: LD_INT 36
19365: EQUAL
19366: IFFALSE 19376
// sTools := true ;
19368: LD_ADDR_EXP 106
19372: PUSH
19373: LD_INT 1
19375: ST_TO_ADDR
// if p3 = 101 then
19376: LD_VAR 0 3
19380: PUSH
19381: LD_INT 101
19383: EQUAL
19384: IFFALSE 19394
// sSold := true ;
19386: LD_ADDR_EXP 71
19390: PUSH
19391: LD_INT 1
19393: ST_TO_ADDR
// if p3 = 102 then
19394: LD_VAR 0 3
19398: PUSH
19399: LD_INT 102
19401: EQUAL
19402: IFFALSE 19412
// sDiff := true ;
19404: LD_ADDR_EXP 72
19408: PUSH
19409: LD_INT 1
19411: ST_TO_ADDR
// if p3 = 103 then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 103
19419: EQUAL
19420: IFFALSE 19430
// sFog := true ;
19422: LD_ADDR_EXP 75
19426: PUSH
19427: LD_INT 1
19429: ST_TO_ADDR
// if p3 = 104 then
19430: LD_VAR 0 3
19434: PUSH
19435: LD_INT 104
19437: EQUAL
19438: IFFALSE 19448
// sReset := true ;
19440: LD_ADDR_EXP 76
19444: PUSH
19445: LD_INT 1
19447: ST_TO_ADDR
// if p3 = 105 then
19448: LD_VAR 0 3
19452: PUSH
19453: LD_INT 105
19455: EQUAL
19456: IFFALSE 19466
// sSun := true ;
19458: LD_ADDR_EXP 77
19462: PUSH
19463: LD_INT 1
19465: ST_TO_ADDR
// if p3 = 106 then
19466: LD_VAR 0 3
19470: PUSH
19471: LD_INT 106
19473: EQUAL
19474: IFFALSE 19484
// sTiger := true ;
19476: LD_ADDR_EXP 73
19480: PUSH
19481: LD_INT 1
19483: ST_TO_ADDR
// if p3 = 107 then
19484: LD_VAR 0 3
19488: PUSH
19489: LD_INT 107
19491: EQUAL
19492: IFFALSE 19502
// sBomb := true ;
19494: LD_ADDR_EXP 74
19498: PUSH
19499: LD_INT 1
19501: ST_TO_ADDR
// if p3 = 108 then
19502: LD_VAR 0 3
19506: PUSH
19507: LD_INT 108
19509: EQUAL
19510: IFFALSE 19520
// sWound := true ;
19512: LD_ADDR_EXP 82
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// if p3 = 109 then
19520: LD_VAR 0 3
19524: PUSH
19525: LD_INT 109
19527: EQUAL
19528: IFFALSE 19538
// sBetray := true ;
19530: LD_ADDR_EXP 86
19534: PUSH
19535: LD_INT 1
19537: ST_TO_ADDR
// if p3 = 110 then
19538: LD_VAR 0 3
19542: PUSH
19543: LD_INT 110
19545: EQUAL
19546: IFFALSE 19556
// sContamin := true ;
19548: LD_ADDR_EXP 87
19552: PUSH
19553: LD_INT 1
19555: ST_TO_ADDR
// if p3 = 111 then
19556: LD_VAR 0 3
19560: PUSH
19561: LD_INT 111
19563: EQUAL
19564: IFFALSE 19574
// sOil := true ;
19566: LD_ADDR_EXP 89
19570: PUSH
19571: LD_INT 1
19573: ST_TO_ADDR
// if p3 = 112 then
19574: LD_VAR 0 3
19578: PUSH
19579: LD_INT 112
19581: EQUAL
19582: IFFALSE 19592
// sStu := true ;
19584: LD_ADDR_EXP 93
19588: PUSH
19589: LD_INT 1
19591: ST_TO_ADDR
// if p3 = 113 then
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 113
19599: EQUAL
19600: IFFALSE 19610
// sBazooka := true ;
19602: LD_ADDR_EXP 96
19606: PUSH
19607: LD_INT 1
19609: ST_TO_ADDR
// if p3 = 114 then
19610: LD_VAR 0 3
19614: PUSH
19615: LD_INT 114
19617: EQUAL
19618: IFFALSE 19628
// sMortar := true ;
19620: LD_ADDR_EXP 97
19624: PUSH
19625: LD_INT 1
19627: ST_TO_ADDR
// if p3 = 115 then
19628: LD_VAR 0 3
19632: PUSH
19633: LD_INT 115
19635: EQUAL
19636: IFFALSE 19646
// sRanger := true ;
19638: LD_ADDR_EXP 107
19642: PUSH
19643: LD_INT 1
19645: ST_TO_ADDR
// if p3 = 116 then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 116
19653: EQUAL
19654: IFFALSE 19664
// sComputer := true ;
19656: LD_ADDR_EXP 108
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// if p3 = 117 then
19664: LD_VAR 0 3
19668: PUSH
19669: LD_INT 117
19671: EQUAL
19672: IFFALSE 19682
// s30 := true ;
19674: LD_ADDR_EXP 109
19678: PUSH
19679: LD_INT 1
19681: ST_TO_ADDR
// if p3 = 118 then
19682: LD_VAR 0 3
19686: PUSH
19687: LD_INT 118
19689: EQUAL
19690: IFFALSE 19700
// s60 := true ;
19692: LD_ADDR_EXP 110
19696: PUSH
19697: LD_INT 1
19699: ST_TO_ADDR
// end ; if p2 = 101 then
19700: LD_VAR 0 2
19704: PUSH
19705: LD_INT 101
19707: EQUAL
19708: IFFALSE 19836
// begin case p3 of 1 :
19710: LD_VAR 0 3
19714: PUSH
19715: LD_INT 1
19717: DOUBLE
19718: EQUAL
19719: IFTRUE 19723
19721: GO 19730
19723: POP
// hHackUnlimitedResources ; 2 :
19724: CALL 31934 0 0
19728: GO 19836
19730: LD_INT 2
19732: DOUBLE
19733: EQUAL
19734: IFTRUE 19738
19736: GO 19745
19738: POP
// hHackSetLevel10 ; 3 :
19739: CALL 32067 0 0
19743: GO 19836
19745: LD_INT 3
19747: DOUBLE
19748: EQUAL
19749: IFTRUE 19753
19751: GO 19760
19753: POP
// hHackSetLevel10YourUnits ; 4 :
19754: CALL 32152 0 0
19758: GO 19836
19760: LD_INT 4
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19775
19768: POP
// hHackInvincible ; 5 :
19769: CALL 32600 0 0
19773: GO 19836
19775: LD_INT 5
19777: DOUBLE
19778: EQUAL
19779: IFTRUE 19783
19781: GO 19790
19783: POP
// hHackInvisible ; 6 :
19784: CALL 32711 0 0
19788: GO 19836
19790: LD_INT 6
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19805
19798: POP
// hHackChangeYourSide ; 7 :
19799: CALL 32768 0 0
19803: GO 19836
19805: LD_INT 7
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19820
19813: POP
// hHackChangeUnitSide ; 8 :
19814: CALL 32810 0 0
19818: GO 19836
19820: LD_INT 8
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19835
19828: POP
// hHackFog ; end ;
19829: CALL 32911 0 0
19833: GO 19836
19835: POP
// end ; end ;
19836: LD_VAR 0 7
19840: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19841: GO 19843
19843: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19844: LD_STRING initStreamRollete();
19846: PPUSH
19847: CALL_OW 559
// InitStreamMode ;
19851: CALL 19863 0 0
// DefineStreamItems ( false ) ;
19855: LD_INT 0
19857: PPUSH
19858: CALL 20327 0 1
// end ;
19862: END
// function InitStreamMode ; begin
19863: LD_INT 0
19865: PPUSH
// streamModeActive := false ;
19866: LD_ADDR_EXP 54
19870: PUSH
19871: LD_INT 0
19873: ST_TO_ADDR
// normalCounter := 36 ;
19874: LD_ADDR_EXP 55
19878: PUSH
19879: LD_INT 36
19881: ST_TO_ADDR
// hardcoreCounter := 18 ;
19882: LD_ADDR_EXP 56
19886: PUSH
19887: LD_INT 18
19889: ST_TO_ADDR
// sRocket := false ;
19890: LD_ADDR_EXP 59
19894: PUSH
19895: LD_INT 0
19897: ST_TO_ADDR
// sSpeed := false ;
19898: LD_ADDR_EXP 58
19902: PUSH
19903: LD_INT 0
19905: ST_TO_ADDR
// sEngine := false ;
19906: LD_ADDR_EXP 60
19910: PUSH
19911: LD_INT 0
19913: ST_TO_ADDR
// sSpec := false ;
19914: LD_ADDR_EXP 57
19918: PUSH
19919: LD_INT 0
19921: ST_TO_ADDR
// sLevel := false ;
19922: LD_ADDR_EXP 61
19926: PUSH
19927: LD_INT 0
19929: ST_TO_ADDR
// sArmoury := false ;
19930: LD_ADDR_EXP 62
19934: PUSH
19935: LD_INT 0
19937: ST_TO_ADDR
// sRadar := false ;
19938: LD_ADDR_EXP 63
19942: PUSH
19943: LD_INT 0
19945: ST_TO_ADDR
// sBunker := false ;
19946: LD_ADDR_EXP 64
19950: PUSH
19951: LD_INT 0
19953: ST_TO_ADDR
// sHack := false ;
19954: LD_ADDR_EXP 65
19958: PUSH
19959: LD_INT 0
19961: ST_TO_ADDR
// sFire := false ;
19962: LD_ADDR_EXP 66
19966: PUSH
19967: LD_INT 0
19969: ST_TO_ADDR
// sRefresh := false ;
19970: LD_ADDR_EXP 67
19974: PUSH
19975: LD_INT 0
19977: ST_TO_ADDR
// sExp := false ;
19978: LD_ADDR_EXP 68
19982: PUSH
19983: LD_INT 0
19985: ST_TO_ADDR
// sDepot := false ;
19986: LD_ADDR_EXP 69
19990: PUSH
19991: LD_INT 0
19993: ST_TO_ADDR
// sFlag := false ;
19994: LD_ADDR_EXP 70
19998: PUSH
19999: LD_INT 0
20001: ST_TO_ADDR
// sKamikadze := false ;
20002: LD_ADDR_EXP 78
20006: PUSH
20007: LD_INT 0
20009: ST_TO_ADDR
// sTroll := false ;
20010: LD_ADDR_EXP 79
20014: PUSH
20015: LD_INT 0
20017: ST_TO_ADDR
// sSlow := false ;
20018: LD_ADDR_EXP 80
20022: PUSH
20023: LD_INT 0
20025: ST_TO_ADDR
// sLack := false ;
20026: LD_ADDR_EXP 81
20030: PUSH
20031: LD_INT 0
20033: ST_TO_ADDR
// sTank := false ;
20034: LD_ADDR_EXP 83
20038: PUSH
20039: LD_INT 0
20041: ST_TO_ADDR
// sRemote := false ;
20042: LD_ADDR_EXP 84
20046: PUSH
20047: LD_INT 0
20049: ST_TO_ADDR
// sPowell := false ;
20050: LD_ADDR_EXP 85
20054: PUSH
20055: LD_INT 0
20057: ST_TO_ADDR
// sTeleport := false ;
20058: LD_ADDR_EXP 88
20062: PUSH
20063: LD_INT 0
20065: ST_TO_ADDR
// sOilTower := false ;
20066: LD_ADDR_EXP 90
20070: PUSH
20071: LD_INT 0
20073: ST_TO_ADDR
// sShovel := false ;
20074: LD_ADDR_EXP 91
20078: PUSH
20079: LD_INT 0
20081: ST_TO_ADDR
// sSheik := false ;
20082: LD_ADDR_EXP 92
20086: PUSH
20087: LD_INT 0
20089: ST_TO_ADDR
// sEarthquake := false ;
20090: LD_ADDR_EXP 94
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// sAI := false ;
20098: LD_ADDR_EXP 95
20102: PUSH
20103: LD_INT 0
20105: ST_TO_ADDR
// sCargo := false ;
20106: LD_ADDR_EXP 98
20110: PUSH
20111: LD_INT 0
20113: ST_TO_ADDR
// sDLaser := false ;
20114: LD_ADDR_EXP 99
20118: PUSH
20119: LD_INT 0
20121: ST_TO_ADDR
// sExchange := false ;
20122: LD_ADDR_EXP 100
20126: PUSH
20127: LD_INT 0
20129: ST_TO_ADDR
// sFac := false ;
20130: LD_ADDR_EXP 101
20134: PUSH
20135: LD_INT 0
20137: ST_TO_ADDR
// sPower := false ;
20138: LD_ADDR_EXP 102
20142: PUSH
20143: LD_INT 0
20145: ST_TO_ADDR
// sRandom := false ;
20146: LD_ADDR_EXP 103
20150: PUSH
20151: LD_INT 0
20153: ST_TO_ADDR
// sShield := false ;
20154: LD_ADDR_EXP 104
20158: PUSH
20159: LD_INT 0
20161: ST_TO_ADDR
// sTime := false ;
20162: LD_ADDR_EXP 105
20166: PUSH
20167: LD_INT 0
20169: ST_TO_ADDR
// sTools := false ;
20170: LD_ADDR_EXP 106
20174: PUSH
20175: LD_INT 0
20177: ST_TO_ADDR
// sSold := false ;
20178: LD_ADDR_EXP 71
20182: PUSH
20183: LD_INT 0
20185: ST_TO_ADDR
// sDiff := false ;
20186: LD_ADDR_EXP 72
20190: PUSH
20191: LD_INT 0
20193: ST_TO_ADDR
// sFog := false ;
20194: LD_ADDR_EXP 75
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
// sReset := false ;
20202: LD_ADDR_EXP 76
20206: PUSH
20207: LD_INT 0
20209: ST_TO_ADDR
// sSun := false ;
20210: LD_ADDR_EXP 77
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// sTiger := false ;
20218: LD_ADDR_EXP 73
20222: PUSH
20223: LD_INT 0
20225: ST_TO_ADDR
// sBomb := false ;
20226: LD_ADDR_EXP 74
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// sWound := false ;
20234: LD_ADDR_EXP 82
20238: PUSH
20239: LD_INT 0
20241: ST_TO_ADDR
// sBetray := false ;
20242: LD_ADDR_EXP 86
20246: PUSH
20247: LD_INT 0
20249: ST_TO_ADDR
// sContamin := false ;
20250: LD_ADDR_EXP 87
20254: PUSH
20255: LD_INT 0
20257: ST_TO_ADDR
// sOil := false ;
20258: LD_ADDR_EXP 89
20262: PUSH
20263: LD_INT 0
20265: ST_TO_ADDR
// sStu := false ;
20266: LD_ADDR_EXP 93
20270: PUSH
20271: LD_INT 0
20273: ST_TO_ADDR
// sBazooka := false ;
20274: LD_ADDR_EXP 96
20278: PUSH
20279: LD_INT 0
20281: ST_TO_ADDR
// sMortar := false ;
20282: LD_ADDR_EXP 97
20286: PUSH
20287: LD_INT 0
20289: ST_TO_ADDR
// sRanger := false ;
20290: LD_ADDR_EXP 107
20294: PUSH
20295: LD_INT 0
20297: ST_TO_ADDR
// sComputer := false ;
20298: LD_ADDR_EXP 108
20302: PUSH
20303: LD_INT 0
20305: ST_TO_ADDR
// s30 := false ;
20306: LD_ADDR_EXP 109
20310: PUSH
20311: LD_INT 0
20313: ST_TO_ADDR
// s60 := false ;
20314: LD_ADDR_EXP 110
20318: PUSH
20319: LD_INT 0
20321: ST_TO_ADDR
// end ;
20322: LD_VAR 0 1
20326: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20327: LD_INT 0
20329: PPUSH
20330: PPUSH
20331: PPUSH
20332: PPUSH
20333: PPUSH
20334: PPUSH
20335: PPUSH
// result := [ ] ;
20336: LD_ADDR_VAR 0 2
20340: PUSH
20341: EMPTY
20342: ST_TO_ADDR
// if campaign_id = 1 then
20343: LD_OWVAR 69
20347: PUSH
20348: LD_INT 1
20350: EQUAL
20351: IFFALSE 23517
// begin case mission_number of 1 :
20353: LD_OWVAR 70
20357: PUSH
20358: LD_INT 1
20360: DOUBLE
20361: EQUAL
20362: IFTRUE 20366
20364: GO 20442
20366: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20367: LD_ADDR_VAR 0 2
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: LD_INT 4
20377: PUSH
20378: LD_INT 11
20380: PUSH
20381: LD_INT 12
20383: PUSH
20384: LD_INT 15
20386: PUSH
20387: LD_INT 16
20389: PUSH
20390: LD_INT 22
20392: PUSH
20393: LD_INT 23
20395: PUSH
20396: LD_INT 26
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 101
20412: PUSH
20413: LD_INT 102
20415: PUSH
20416: LD_INT 106
20418: PUSH
20419: LD_INT 116
20421: PUSH
20422: LD_INT 117
20424: PUSH
20425: LD_INT 118
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: ST_TO_ADDR
20440: GO 23515
20442: LD_INT 2
20444: DOUBLE
20445: EQUAL
20446: IFTRUE 20450
20448: GO 20534
20450: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20451: LD_ADDR_VAR 0 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: LD_INT 4
20461: PUSH
20462: LD_INT 11
20464: PUSH
20465: LD_INT 12
20467: PUSH
20468: LD_INT 15
20470: PUSH
20471: LD_INT 16
20473: PUSH
20474: LD_INT 22
20476: PUSH
20477: LD_INT 23
20479: PUSH
20480: LD_INT 26
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 101
20496: PUSH
20497: LD_INT 102
20499: PUSH
20500: LD_INT 105
20502: PUSH
20503: LD_INT 106
20505: PUSH
20506: LD_INT 108
20508: PUSH
20509: LD_INT 116
20511: PUSH
20512: LD_INT 117
20514: PUSH
20515: LD_INT 118
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: ST_TO_ADDR
20532: GO 23515
20534: LD_INT 3
20536: DOUBLE
20537: EQUAL
20538: IFTRUE 20542
20540: GO 20630
20542: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20543: LD_ADDR_VAR 0 2
20547: PUSH
20548: LD_INT 2
20550: PUSH
20551: LD_INT 4
20553: PUSH
20554: LD_INT 5
20556: PUSH
20557: LD_INT 11
20559: PUSH
20560: LD_INT 12
20562: PUSH
20563: LD_INT 15
20565: PUSH
20566: LD_INT 16
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 26
20574: PUSH
20575: LD_INT 36
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 101
20592: PUSH
20593: LD_INT 102
20595: PUSH
20596: LD_INT 105
20598: PUSH
20599: LD_INT 106
20601: PUSH
20602: LD_INT 108
20604: PUSH
20605: LD_INT 116
20607: PUSH
20608: LD_INT 117
20610: PUSH
20611: LD_INT 118
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: ST_TO_ADDR
20628: GO 23515
20630: LD_INT 4
20632: DOUBLE
20633: EQUAL
20634: IFTRUE 20638
20636: GO 20734
20638: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20639: LD_ADDR_VAR 0 2
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: LD_INT 4
20649: PUSH
20650: LD_INT 5
20652: PUSH
20653: LD_INT 8
20655: PUSH
20656: LD_INT 11
20658: PUSH
20659: LD_INT 12
20661: PUSH
20662: LD_INT 15
20664: PUSH
20665: LD_INT 16
20667: PUSH
20668: LD_INT 22
20670: PUSH
20671: LD_INT 23
20673: PUSH
20674: LD_INT 26
20676: PUSH
20677: LD_INT 36
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 101
20696: PUSH
20697: LD_INT 102
20699: PUSH
20700: LD_INT 105
20702: PUSH
20703: LD_INT 106
20705: PUSH
20706: LD_INT 108
20708: PUSH
20709: LD_INT 116
20711: PUSH
20712: LD_INT 117
20714: PUSH
20715: LD_INT 118
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: ST_TO_ADDR
20732: GO 23515
20734: LD_INT 5
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20854
20742: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20743: LD_ADDR_VAR 0 2
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: LD_INT 4
20753: PUSH
20754: LD_INT 5
20756: PUSH
20757: LD_INT 6
20759: PUSH
20760: LD_INT 8
20762: PUSH
20763: LD_INT 11
20765: PUSH
20766: LD_INT 12
20768: PUSH
20769: LD_INT 15
20771: PUSH
20772: LD_INT 16
20774: PUSH
20775: LD_INT 22
20777: PUSH
20778: LD_INT 23
20780: PUSH
20781: LD_INT 25
20783: PUSH
20784: LD_INT 26
20786: PUSH
20787: LD_INT 36
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 101
20808: PUSH
20809: LD_INT 102
20811: PUSH
20812: LD_INT 105
20814: PUSH
20815: LD_INT 106
20817: PUSH
20818: LD_INT 108
20820: PUSH
20821: LD_INT 109
20823: PUSH
20824: LD_INT 112
20826: PUSH
20827: LD_INT 116
20829: PUSH
20830: LD_INT 117
20832: PUSH
20833: LD_INT 118
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: ST_TO_ADDR
20852: GO 23515
20854: LD_INT 6
20856: DOUBLE
20857: EQUAL
20858: IFTRUE 20862
20860: GO 20994
20862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20863: LD_ADDR_VAR 0 2
20867: PUSH
20868: LD_INT 2
20870: PUSH
20871: LD_INT 4
20873: PUSH
20874: LD_INT 5
20876: PUSH
20877: LD_INT 6
20879: PUSH
20880: LD_INT 8
20882: PUSH
20883: LD_INT 11
20885: PUSH
20886: LD_INT 12
20888: PUSH
20889: LD_INT 15
20891: PUSH
20892: LD_INT 16
20894: PUSH
20895: LD_INT 20
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_INT 23
20906: PUSH
20907: LD_INT 25
20909: PUSH
20910: LD_INT 26
20912: PUSH
20913: LD_INT 30
20915: PUSH
20916: LD_INT 31
20918: PUSH
20919: LD_INT 32
20921: PUSH
20922: LD_INT 36
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 101
20948: PUSH
20949: LD_INT 102
20951: PUSH
20952: LD_INT 105
20954: PUSH
20955: LD_INT 106
20957: PUSH
20958: LD_INT 108
20960: PUSH
20961: LD_INT 109
20963: PUSH
20964: LD_INT 112
20966: PUSH
20967: LD_INT 116
20969: PUSH
20970: LD_INT 117
20972: PUSH
20973: LD_INT 118
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: ST_TO_ADDR
20992: GO 23515
20994: LD_INT 7
20996: DOUBLE
20997: EQUAL
20998: IFTRUE 21002
21000: GO 21114
21002: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21003: LD_ADDR_VAR 0 2
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: LD_INT 4
21013: PUSH
21014: LD_INT 5
21016: PUSH
21017: LD_INT 7
21019: PUSH
21020: LD_INT 11
21022: PUSH
21023: LD_INT 12
21025: PUSH
21026: LD_INT 15
21028: PUSH
21029: LD_INT 16
21031: PUSH
21032: LD_INT 20
21034: PUSH
21035: LD_INT 21
21037: PUSH
21038: LD_INT 22
21040: PUSH
21041: LD_INT 23
21043: PUSH
21044: LD_INT 25
21046: PUSH
21047: LD_INT 26
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 101
21068: PUSH
21069: LD_INT 102
21071: PUSH
21072: LD_INT 103
21074: PUSH
21075: LD_INT 105
21077: PUSH
21078: LD_INT 106
21080: PUSH
21081: LD_INT 108
21083: PUSH
21084: LD_INT 112
21086: PUSH
21087: LD_INT 116
21089: PUSH
21090: LD_INT 117
21092: PUSH
21093: LD_INT 118
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: ST_TO_ADDR
21112: GO 23515
21114: LD_INT 8
21116: DOUBLE
21117: EQUAL
21118: IFTRUE 21122
21120: GO 21262
21122: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21123: LD_ADDR_VAR 0 2
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: LD_INT 4
21133: PUSH
21134: LD_INT 5
21136: PUSH
21137: LD_INT 6
21139: PUSH
21140: LD_INT 7
21142: PUSH
21143: LD_INT 8
21145: PUSH
21146: LD_INT 11
21148: PUSH
21149: LD_INT 12
21151: PUSH
21152: LD_INT 15
21154: PUSH
21155: LD_INT 16
21157: PUSH
21158: LD_INT 20
21160: PUSH
21161: LD_INT 21
21163: PUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 23
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 26
21175: PUSH
21176: LD_INT 30
21178: PUSH
21179: LD_INT 31
21181: PUSH
21182: LD_INT 32
21184: PUSH
21185: LD_INT 36
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 101
21212: PUSH
21213: LD_INT 102
21215: PUSH
21216: LD_INT 103
21218: PUSH
21219: LD_INT 105
21221: PUSH
21222: LD_INT 106
21224: PUSH
21225: LD_INT 108
21227: PUSH
21228: LD_INT 109
21230: PUSH
21231: LD_INT 112
21233: PUSH
21234: LD_INT 116
21236: PUSH
21237: LD_INT 117
21239: PUSH
21240: LD_INT 118
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: ST_TO_ADDR
21260: GO 23515
21262: LD_INT 9
21264: DOUBLE
21265: EQUAL
21266: IFTRUE 21270
21268: GO 21418
21270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21271: LD_ADDR_VAR 0 2
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: LD_INT 4
21281: PUSH
21282: LD_INT 5
21284: PUSH
21285: LD_INT 6
21287: PUSH
21288: LD_INT 7
21290: PUSH
21291: LD_INT 8
21293: PUSH
21294: LD_INT 11
21296: PUSH
21297: LD_INT 12
21299: PUSH
21300: LD_INT 15
21302: PUSH
21303: LD_INT 16
21305: PUSH
21306: LD_INT 20
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 22
21314: PUSH
21315: LD_INT 23
21317: PUSH
21318: LD_INT 25
21320: PUSH
21321: LD_INT 26
21323: PUSH
21324: LD_INT 28
21326: PUSH
21327: LD_INT 30
21329: PUSH
21330: LD_INT 31
21332: PUSH
21333: LD_INT 32
21335: PUSH
21336: LD_INT 36
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 101
21364: PUSH
21365: LD_INT 102
21367: PUSH
21368: LD_INT 103
21370: PUSH
21371: LD_INT 105
21373: PUSH
21374: LD_INT 106
21376: PUSH
21377: LD_INT 108
21379: PUSH
21380: LD_INT 109
21382: PUSH
21383: LD_INT 112
21385: PUSH
21386: LD_INT 114
21388: PUSH
21389: LD_INT 116
21391: PUSH
21392: LD_INT 117
21394: PUSH
21395: LD_INT 118
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: ST_TO_ADDR
21416: GO 23515
21418: LD_INT 10
21420: DOUBLE
21421: EQUAL
21422: IFTRUE 21426
21424: GO 21622
21426: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21427: LD_ADDR_VAR 0 2
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: LD_INT 5
21440: PUSH
21441: LD_INT 6
21443: PUSH
21444: LD_INT 7
21446: PUSH
21447: LD_INT 8
21449: PUSH
21450: LD_INT 9
21452: PUSH
21453: LD_INT 10
21455: PUSH
21456: LD_INT 11
21458: PUSH
21459: LD_INT 12
21461: PUSH
21462: LD_INT 13
21464: PUSH
21465: LD_INT 14
21467: PUSH
21468: LD_INT 15
21470: PUSH
21471: LD_INT 16
21473: PUSH
21474: LD_INT 17
21476: PUSH
21477: LD_INT 18
21479: PUSH
21480: LD_INT 19
21482: PUSH
21483: LD_INT 20
21485: PUSH
21486: LD_INT 21
21488: PUSH
21489: LD_INT 22
21491: PUSH
21492: LD_INT 23
21494: PUSH
21495: LD_INT 24
21497: PUSH
21498: LD_INT 25
21500: PUSH
21501: LD_INT 26
21503: PUSH
21504: LD_INT 28
21506: PUSH
21507: LD_INT 30
21509: PUSH
21510: LD_INT 31
21512: PUSH
21513: LD_INT 32
21515: PUSH
21516: LD_INT 36
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 101
21552: PUSH
21553: LD_INT 102
21555: PUSH
21556: LD_INT 103
21558: PUSH
21559: LD_INT 104
21561: PUSH
21562: LD_INT 105
21564: PUSH
21565: LD_INT 106
21567: PUSH
21568: LD_INT 107
21570: PUSH
21571: LD_INT 108
21573: PUSH
21574: LD_INT 109
21576: PUSH
21577: LD_INT 110
21579: PUSH
21580: LD_INT 111
21582: PUSH
21583: LD_INT 112
21585: PUSH
21586: LD_INT 114
21588: PUSH
21589: LD_INT 116
21591: PUSH
21592: LD_INT 117
21594: PUSH
21595: LD_INT 118
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: ST_TO_ADDR
21620: GO 23515
21622: LD_INT 11
21624: DOUBLE
21625: EQUAL
21626: IFTRUE 21630
21628: GO 21834
21630: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21631: LD_ADDR_VAR 0 2
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: LD_INT 3
21641: PUSH
21642: LD_INT 4
21644: PUSH
21645: LD_INT 5
21647: PUSH
21648: LD_INT 6
21650: PUSH
21651: LD_INT 7
21653: PUSH
21654: LD_INT 8
21656: PUSH
21657: LD_INT 9
21659: PUSH
21660: LD_INT 10
21662: PUSH
21663: LD_INT 11
21665: PUSH
21666: LD_INT 12
21668: PUSH
21669: LD_INT 13
21671: PUSH
21672: LD_INT 14
21674: PUSH
21675: LD_INT 15
21677: PUSH
21678: LD_INT 16
21680: PUSH
21681: LD_INT 17
21683: PUSH
21684: LD_INT 18
21686: PUSH
21687: LD_INT 19
21689: PUSH
21690: LD_INT 20
21692: PUSH
21693: LD_INT 21
21695: PUSH
21696: LD_INT 22
21698: PUSH
21699: LD_INT 23
21701: PUSH
21702: LD_INT 24
21704: PUSH
21705: LD_INT 25
21707: PUSH
21708: LD_INT 26
21710: PUSH
21711: LD_INT 28
21713: PUSH
21714: LD_INT 30
21716: PUSH
21717: LD_INT 31
21719: PUSH
21720: LD_INT 32
21722: PUSH
21723: LD_INT 34
21725: PUSH
21726: LD_INT 36
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 101
21764: PUSH
21765: LD_INT 102
21767: PUSH
21768: LD_INT 103
21770: PUSH
21771: LD_INT 104
21773: PUSH
21774: LD_INT 105
21776: PUSH
21777: LD_INT 106
21779: PUSH
21780: LD_INT 107
21782: PUSH
21783: LD_INT 108
21785: PUSH
21786: LD_INT 109
21788: PUSH
21789: LD_INT 110
21791: PUSH
21792: LD_INT 111
21794: PUSH
21795: LD_INT 112
21797: PUSH
21798: LD_INT 114
21800: PUSH
21801: LD_INT 116
21803: PUSH
21804: LD_INT 117
21806: PUSH
21807: LD_INT 118
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: ST_TO_ADDR
21832: GO 23515
21834: LD_INT 12
21836: DOUBLE
21837: EQUAL
21838: IFTRUE 21842
21840: GO 22062
21842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21843: LD_ADDR_VAR 0 2
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: LD_INT 3
21856: PUSH
21857: LD_INT 4
21859: PUSH
21860: LD_INT 5
21862: PUSH
21863: LD_INT 6
21865: PUSH
21866: LD_INT 7
21868: PUSH
21869: LD_INT 8
21871: PUSH
21872: LD_INT 9
21874: PUSH
21875: LD_INT 10
21877: PUSH
21878: LD_INT 11
21880: PUSH
21881: LD_INT 12
21883: PUSH
21884: LD_INT 13
21886: PUSH
21887: LD_INT 14
21889: PUSH
21890: LD_INT 15
21892: PUSH
21893: LD_INT 16
21895: PUSH
21896: LD_INT 17
21898: PUSH
21899: LD_INT 18
21901: PUSH
21902: LD_INT 19
21904: PUSH
21905: LD_INT 20
21907: PUSH
21908: LD_INT 21
21910: PUSH
21911: LD_INT 22
21913: PUSH
21914: LD_INT 23
21916: PUSH
21917: LD_INT 24
21919: PUSH
21920: LD_INT 25
21922: PUSH
21923: LD_INT 26
21925: PUSH
21926: LD_INT 27
21928: PUSH
21929: LD_INT 28
21931: PUSH
21932: LD_INT 30
21934: PUSH
21935: LD_INT 31
21937: PUSH
21938: LD_INT 32
21940: PUSH
21941: LD_INT 33
21943: PUSH
21944: LD_INT 34
21946: PUSH
21947: LD_INT 36
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 101
21988: PUSH
21989: LD_INT 102
21991: PUSH
21992: LD_INT 103
21994: PUSH
21995: LD_INT 104
21997: PUSH
21998: LD_INT 105
22000: PUSH
22001: LD_INT 106
22003: PUSH
22004: LD_INT 107
22006: PUSH
22007: LD_INT 108
22009: PUSH
22010: LD_INT 109
22012: PUSH
22013: LD_INT 110
22015: PUSH
22016: LD_INT 111
22018: PUSH
22019: LD_INT 112
22021: PUSH
22022: LD_INT 113
22024: PUSH
22025: LD_INT 114
22027: PUSH
22028: LD_INT 116
22030: PUSH
22031: LD_INT 117
22033: PUSH
22034: LD_INT 118
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: ST_TO_ADDR
22060: GO 23515
22062: LD_INT 13
22064: DOUBLE
22065: EQUAL
22066: IFTRUE 22070
22068: GO 22278
22070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 3
22084: PUSH
22085: LD_INT 4
22087: PUSH
22088: LD_INT 5
22090: PUSH
22091: LD_INT 8
22093: PUSH
22094: LD_INT 9
22096: PUSH
22097: LD_INT 10
22099: PUSH
22100: LD_INT 11
22102: PUSH
22103: LD_INT 12
22105: PUSH
22106: LD_INT 14
22108: PUSH
22109: LD_INT 15
22111: PUSH
22112: LD_INT 16
22114: PUSH
22115: LD_INT 17
22117: PUSH
22118: LD_INT 18
22120: PUSH
22121: LD_INT 19
22123: PUSH
22124: LD_INT 20
22126: PUSH
22127: LD_INT 21
22129: PUSH
22130: LD_INT 22
22132: PUSH
22133: LD_INT 23
22135: PUSH
22136: LD_INT 24
22138: PUSH
22139: LD_INT 25
22141: PUSH
22142: LD_INT 26
22144: PUSH
22145: LD_INT 27
22147: PUSH
22148: LD_INT 28
22150: PUSH
22151: LD_INT 30
22153: PUSH
22154: LD_INT 31
22156: PUSH
22157: LD_INT 32
22159: PUSH
22160: LD_INT 33
22162: PUSH
22163: LD_INT 34
22165: PUSH
22166: LD_INT 36
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 101
22204: PUSH
22205: LD_INT 102
22207: PUSH
22208: LD_INT 103
22210: PUSH
22211: LD_INT 104
22213: PUSH
22214: LD_INT 105
22216: PUSH
22217: LD_INT 106
22219: PUSH
22220: LD_INT 107
22222: PUSH
22223: LD_INT 108
22225: PUSH
22226: LD_INT 109
22228: PUSH
22229: LD_INT 110
22231: PUSH
22232: LD_INT 111
22234: PUSH
22235: LD_INT 112
22237: PUSH
22238: LD_INT 113
22240: PUSH
22241: LD_INT 114
22243: PUSH
22244: LD_INT 116
22246: PUSH
22247: LD_INT 117
22249: PUSH
22250: LD_INT 118
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: ST_TO_ADDR
22276: GO 23515
22278: LD_INT 14
22280: DOUBLE
22281: EQUAL
22282: IFTRUE 22286
22284: GO 22510
22286: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22287: LD_ADDR_VAR 0 2
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: LD_INT 2
22297: PUSH
22298: LD_INT 3
22300: PUSH
22301: LD_INT 4
22303: PUSH
22304: LD_INT 5
22306: PUSH
22307: LD_INT 6
22309: PUSH
22310: LD_INT 7
22312: PUSH
22313: LD_INT 8
22315: PUSH
22316: LD_INT 9
22318: PUSH
22319: LD_INT 10
22321: PUSH
22322: LD_INT 11
22324: PUSH
22325: LD_INT 12
22327: PUSH
22328: LD_INT 13
22330: PUSH
22331: LD_INT 14
22333: PUSH
22334: LD_INT 15
22336: PUSH
22337: LD_INT 16
22339: PUSH
22340: LD_INT 17
22342: PUSH
22343: LD_INT 18
22345: PUSH
22346: LD_INT 19
22348: PUSH
22349: LD_INT 20
22351: PUSH
22352: LD_INT 21
22354: PUSH
22355: LD_INT 22
22357: PUSH
22358: LD_INT 23
22360: PUSH
22361: LD_INT 24
22363: PUSH
22364: LD_INT 25
22366: PUSH
22367: LD_INT 26
22369: PUSH
22370: LD_INT 27
22372: PUSH
22373: LD_INT 28
22375: PUSH
22376: LD_INT 29
22378: PUSH
22379: LD_INT 30
22381: PUSH
22382: LD_INT 31
22384: PUSH
22385: LD_INT 32
22387: PUSH
22388: LD_INT 33
22390: PUSH
22391: LD_INT 34
22393: PUSH
22394: LD_INT 36
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 101
22436: PUSH
22437: LD_INT 102
22439: PUSH
22440: LD_INT 103
22442: PUSH
22443: LD_INT 104
22445: PUSH
22446: LD_INT 105
22448: PUSH
22449: LD_INT 106
22451: PUSH
22452: LD_INT 107
22454: PUSH
22455: LD_INT 108
22457: PUSH
22458: LD_INT 109
22460: PUSH
22461: LD_INT 110
22463: PUSH
22464: LD_INT 111
22466: PUSH
22467: LD_INT 112
22469: PUSH
22470: LD_INT 113
22472: PUSH
22473: LD_INT 114
22475: PUSH
22476: LD_INT 116
22478: PUSH
22479: LD_INT 117
22481: PUSH
22482: LD_INT 118
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: ST_TO_ADDR
22508: GO 23515
22510: LD_INT 15
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22742
22518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: LD_INT 4
22535: PUSH
22536: LD_INT 5
22538: PUSH
22539: LD_INT 6
22541: PUSH
22542: LD_INT 7
22544: PUSH
22545: LD_INT 8
22547: PUSH
22548: LD_INT 9
22550: PUSH
22551: LD_INT 10
22553: PUSH
22554: LD_INT 11
22556: PUSH
22557: LD_INT 12
22559: PUSH
22560: LD_INT 13
22562: PUSH
22563: LD_INT 14
22565: PUSH
22566: LD_INT 15
22568: PUSH
22569: LD_INT 16
22571: PUSH
22572: LD_INT 17
22574: PUSH
22575: LD_INT 18
22577: PUSH
22578: LD_INT 19
22580: PUSH
22581: LD_INT 20
22583: PUSH
22584: LD_INT 21
22586: PUSH
22587: LD_INT 22
22589: PUSH
22590: LD_INT 23
22592: PUSH
22593: LD_INT 24
22595: PUSH
22596: LD_INT 25
22598: PUSH
22599: LD_INT 26
22601: PUSH
22602: LD_INT 27
22604: PUSH
22605: LD_INT 28
22607: PUSH
22608: LD_INT 29
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_INT 31
22616: PUSH
22617: LD_INT 32
22619: PUSH
22620: LD_INT 33
22622: PUSH
22623: LD_INT 34
22625: PUSH
22626: LD_INT 36
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 101
22668: PUSH
22669: LD_INT 102
22671: PUSH
22672: LD_INT 103
22674: PUSH
22675: LD_INT 104
22677: PUSH
22678: LD_INT 105
22680: PUSH
22681: LD_INT 106
22683: PUSH
22684: LD_INT 107
22686: PUSH
22687: LD_INT 108
22689: PUSH
22690: LD_INT 109
22692: PUSH
22693: LD_INT 110
22695: PUSH
22696: LD_INT 111
22698: PUSH
22699: LD_INT 112
22701: PUSH
22702: LD_INT 113
22704: PUSH
22705: LD_INT 114
22707: PUSH
22708: LD_INT 116
22710: PUSH
22711: LD_INT 117
22713: PUSH
22714: LD_INT 118
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: ST_TO_ADDR
22740: GO 23515
22742: LD_INT 16
22744: DOUBLE
22745: EQUAL
22746: IFTRUE 22750
22748: GO 22886
22750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22751: LD_ADDR_VAR 0 2
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 4
22761: PUSH
22762: LD_INT 5
22764: PUSH
22765: LD_INT 7
22767: PUSH
22768: LD_INT 11
22770: PUSH
22771: LD_INT 12
22773: PUSH
22774: LD_INT 15
22776: PUSH
22777: LD_INT 16
22779: PUSH
22780: LD_INT 20
22782: PUSH
22783: LD_INT 21
22785: PUSH
22786: LD_INT 22
22788: PUSH
22789: LD_INT 23
22791: PUSH
22792: LD_INT 25
22794: PUSH
22795: LD_INT 26
22797: PUSH
22798: LD_INT 30
22800: PUSH
22801: LD_INT 31
22803: PUSH
22804: LD_INT 32
22806: PUSH
22807: LD_INT 33
22809: PUSH
22810: LD_INT 34
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 101
22836: PUSH
22837: LD_INT 102
22839: PUSH
22840: LD_INT 103
22842: PUSH
22843: LD_INT 106
22845: PUSH
22846: LD_INT 108
22848: PUSH
22849: LD_INT 112
22851: PUSH
22852: LD_INT 113
22854: PUSH
22855: LD_INT 114
22857: PUSH
22858: LD_INT 116
22860: PUSH
22861: LD_INT 117
22863: PUSH
22864: LD_INT 118
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: ST_TO_ADDR
22884: GO 23515
22886: LD_INT 17
22888: DOUBLE
22889: EQUAL
22890: IFTRUE 22894
22892: GO 23118
22894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22895: LD_ADDR_VAR 0 2
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: LD_INT 4
22911: PUSH
22912: LD_INT 5
22914: PUSH
22915: LD_INT 6
22917: PUSH
22918: LD_INT 7
22920: PUSH
22921: LD_INT 8
22923: PUSH
22924: LD_INT 9
22926: PUSH
22927: LD_INT 10
22929: PUSH
22930: LD_INT 11
22932: PUSH
22933: LD_INT 12
22935: PUSH
22936: LD_INT 13
22938: PUSH
22939: LD_INT 14
22941: PUSH
22942: LD_INT 15
22944: PUSH
22945: LD_INT 16
22947: PUSH
22948: LD_INT 17
22950: PUSH
22951: LD_INT 18
22953: PUSH
22954: LD_INT 19
22956: PUSH
22957: LD_INT 20
22959: PUSH
22960: LD_INT 21
22962: PUSH
22963: LD_INT 22
22965: PUSH
22966: LD_INT 23
22968: PUSH
22969: LD_INT 24
22971: PUSH
22972: LD_INT 25
22974: PUSH
22975: LD_INT 26
22977: PUSH
22978: LD_INT 27
22980: PUSH
22981: LD_INT 28
22983: PUSH
22984: LD_INT 29
22986: PUSH
22987: LD_INT 30
22989: PUSH
22990: LD_INT 31
22992: PUSH
22993: LD_INT 32
22995: PUSH
22996: LD_INT 33
22998: PUSH
22999: LD_INT 34
23001: PUSH
23002: LD_INT 36
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 101
23044: PUSH
23045: LD_INT 102
23047: PUSH
23048: LD_INT 103
23050: PUSH
23051: LD_INT 104
23053: PUSH
23054: LD_INT 105
23056: PUSH
23057: LD_INT 106
23059: PUSH
23060: LD_INT 107
23062: PUSH
23063: LD_INT 108
23065: PUSH
23066: LD_INT 109
23068: PUSH
23069: LD_INT 110
23071: PUSH
23072: LD_INT 111
23074: PUSH
23075: LD_INT 112
23077: PUSH
23078: LD_INT 113
23080: PUSH
23081: LD_INT 114
23083: PUSH
23084: LD_INT 116
23086: PUSH
23087: LD_INT 117
23089: PUSH
23090: LD_INT 118
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: ST_TO_ADDR
23116: GO 23515
23118: LD_INT 18
23120: DOUBLE
23121: EQUAL
23122: IFTRUE 23126
23124: GO 23274
23126: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: LD_INT 4
23137: PUSH
23138: LD_INT 5
23140: PUSH
23141: LD_INT 7
23143: PUSH
23144: LD_INT 11
23146: PUSH
23147: LD_INT 12
23149: PUSH
23150: LD_INT 15
23152: PUSH
23153: LD_INT 16
23155: PUSH
23156: LD_INT 20
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 25
23170: PUSH
23171: LD_INT 26
23173: PUSH
23174: LD_INT 30
23176: PUSH
23177: LD_INT 31
23179: PUSH
23180: LD_INT 32
23182: PUSH
23183: LD_INT 33
23185: PUSH
23186: LD_INT 34
23188: PUSH
23189: LD_INT 35
23191: PUSH
23192: LD_INT 36
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 101
23220: PUSH
23221: LD_INT 102
23223: PUSH
23224: LD_INT 103
23226: PUSH
23227: LD_INT 106
23229: PUSH
23230: LD_INT 108
23232: PUSH
23233: LD_INT 112
23235: PUSH
23236: LD_INT 113
23238: PUSH
23239: LD_INT 114
23241: PUSH
23242: LD_INT 115
23244: PUSH
23245: LD_INT 116
23247: PUSH
23248: LD_INT 117
23250: PUSH
23251: LD_INT 118
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 23515
23274: LD_INT 19
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23514
23282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: LD_INT 2
23293: PUSH
23294: LD_INT 3
23296: PUSH
23297: LD_INT 4
23299: PUSH
23300: LD_INT 5
23302: PUSH
23303: LD_INT 6
23305: PUSH
23306: LD_INT 7
23308: PUSH
23309: LD_INT 8
23311: PUSH
23312: LD_INT 9
23314: PUSH
23315: LD_INT 10
23317: PUSH
23318: LD_INT 11
23320: PUSH
23321: LD_INT 12
23323: PUSH
23324: LD_INT 13
23326: PUSH
23327: LD_INT 14
23329: PUSH
23330: LD_INT 15
23332: PUSH
23333: LD_INT 16
23335: PUSH
23336: LD_INT 17
23338: PUSH
23339: LD_INT 18
23341: PUSH
23342: LD_INT 19
23344: PUSH
23345: LD_INT 20
23347: PUSH
23348: LD_INT 21
23350: PUSH
23351: LD_INT 22
23353: PUSH
23354: LD_INT 23
23356: PUSH
23357: LD_INT 24
23359: PUSH
23360: LD_INT 25
23362: PUSH
23363: LD_INT 26
23365: PUSH
23366: LD_INT 27
23368: PUSH
23369: LD_INT 28
23371: PUSH
23372: LD_INT 29
23374: PUSH
23375: LD_INT 30
23377: PUSH
23378: LD_INT 31
23380: PUSH
23381: LD_INT 32
23383: PUSH
23384: LD_INT 33
23386: PUSH
23387: LD_INT 34
23389: PUSH
23390: LD_INT 35
23392: PUSH
23393: LD_INT 36
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 101
23436: PUSH
23437: LD_INT 102
23439: PUSH
23440: LD_INT 103
23442: PUSH
23443: LD_INT 104
23445: PUSH
23446: LD_INT 105
23448: PUSH
23449: LD_INT 106
23451: PUSH
23452: LD_INT 107
23454: PUSH
23455: LD_INT 108
23457: PUSH
23458: LD_INT 109
23460: PUSH
23461: LD_INT 110
23463: PUSH
23464: LD_INT 111
23466: PUSH
23467: LD_INT 112
23469: PUSH
23470: LD_INT 113
23472: PUSH
23473: LD_INT 114
23475: PUSH
23476: LD_INT 115
23478: PUSH
23479: LD_INT 116
23481: PUSH
23482: LD_INT 117
23484: PUSH
23485: LD_INT 118
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: ST_TO_ADDR
23512: GO 23515
23514: POP
// end else
23515: GO 23746
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23517: LD_ADDR_VAR 0 2
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: LD_INT 4
23533: PUSH
23534: LD_INT 5
23536: PUSH
23537: LD_INT 6
23539: PUSH
23540: LD_INT 7
23542: PUSH
23543: LD_INT 8
23545: PUSH
23546: LD_INT 9
23548: PUSH
23549: LD_INT 10
23551: PUSH
23552: LD_INT 11
23554: PUSH
23555: LD_INT 12
23557: PUSH
23558: LD_INT 13
23560: PUSH
23561: LD_INT 14
23563: PUSH
23564: LD_INT 15
23566: PUSH
23567: LD_INT 16
23569: PUSH
23570: LD_INT 17
23572: PUSH
23573: LD_INT 18
23575: PUSH
23576: LD_INT 19
23578: PUSH
23579: LD_INT 20
23581: PUSH
23582: LD_INT 21
23584: PUSH
23585: LD_INT 22
23587: PUSH
23588: LD_INT 23
23590: PUSH
23591: LD_INT 24
23593: PUSH
23594: LD_INT 25
23596: PUSH
23597: LD_INT 26
23599: PUSH
23600: LD_INT 27
23602: PUSH
23603: LD_INT 28
23605: PUSH
23606: LD_INT 29
23608: PUSH
23609: LD_INT 30
23611: PUSH
23612: LD_INT 31
23614: PUSH
23615: LD_INT 32
23617: PUSH
23618: LD_INT 33
23620: PUSH
23621: LD_INT 34
23623: PUSH
23624: LD_INT 35
23626: PUSH
23627: LD_INT 36
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 101
23670: PUSH
23671: LD_INT 102
23673: PUSH
23674: LD_INT 103
23676: PUSH
23677: LD_INT 104
23679: PUSH
23680: LD_INT 105
23682: PUSH
23683: LD_INT 106
23685: PUSH
23686: LD_INT 107
23688: PUSH
23689: LD_INT 108
23691: PUSH
23692: LD_INT 109
23694: PUSH
23695: LD_INT 110
23697: PUSH
23698: LD_INT 111
23700: PUSH
23701: LD_INT 112
23703: PUSH
23704: LD_INT 113
23706: PUSH
23707: LD_INT 114
23709: PUSH
23710: LD_INT 115
23712: PUSH
23713: LD_INT 116
23715: PUSH
23716: LD_INT 117
23718: PUSH
23719: LD_INT 118
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: ST_TO_ADDR
// if result then
23746: LD_VAR 0 2
23750: IFFALSE 24536
// begin normal :=  ;
23752: LD_ADDR_VAR 0 5
23756: PUSH
23757: LD_STRING 
23759: ST_TO_ADDR
// hardcore :=  ;
23760: LD_ADDR_VAR 0 6
23764: PUSH
23765: LD_STRING 
23767: ST_TO_ADDR
// active :=  ;
23768: LD_ADDR_VAR 0 7
23772: PUSH
23773: LD_STRING 
23775: ST_TO_ADDR
// for i = 1 to normalCounter do
23776: LD_ADDR_VAR 0 8
23780: PUSH
23781: DOUBLE
23782: LD_INT 1
23784: DEC
23785: ST_TO_ADDR
23786: LD_EXP 55
23790: PUSH
23791: FOR_TO
23792: IFFALSE 23893
// begin tmp := 0 ;
23794: LD_ADDR_VAR 0 3
23798: PUSH
23799: LD_STRING 0
23801: ST_TO_ADDR
// if result [ 1 ] then
23802: LD_VAR 0 2
23806: PUSH
23807: LD_INT 1
23809: ARRAY
23810: IFFALSE 23875
// if result [ 1 ] [ 1 ] = i then
23812: LD_VAR 0 2
23816: PUSH
23817: LD_INT 1
23819: ARRAY
23820: PUSH
23821: LD_INT 1
23823: ARRAY
23824: PUSH
23825: LD_VAR 0 8
23829: EQUAL
23830: IFFALSE 23875
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23832: LD_ADDR_VAR 0 2
23836: PUSH
23837: LD_VAR 0 2
23841: PPUSH
23842: LD_INT 1
23844: PPUSH
23845: LD_VAR 0 2
23849: PUSH
23850: LD_INT 1
23852: ARRAY
23853: PPUSH
23854: LD_INT 1
23856: PPUSH
23857: CALL_OW 3
23861: PPUSH
23862: CALL_OW 1
23866: ST_TO_ADDR
// tmp := 1 ;
23867: LD_ADDR_VAR 0 3
23871: PUSH
23872: LD_STRING 1
23874: ST_TO_ADDR
// end ; normal := normal & tmp ;
23875: LD_ADDR_VAR 0 5
23879: PUSH
23880: LD_VAR 0 5
23884: PUSH
23885: LD_VAR 0 3
23889: STR
23890: ST_TO_ADDR
// end ;
23891: GO 23791
23893: POP
23894: POP
// for i = 1 to hardcoreCounter do
23895: LD_ADDR_VAR 0 8
23899: PUSH
23900: DOUBLE
23901: LD_INT 1
23903: DEC
23904: ST_TO_ADDR
23905: LD_EXP 56
23909: PUSH
23910: FOR_TO
23911: IFFALSE 24016
// begin tmp := 0 ;
23913: LD_ADDR_VAR 0 3
23917: PUSH
23918: LD_STRING 0
23920: ST_TO_ADDR
// if result [ 2 ] then
23921: LD_VAR 0 2
23925: PUSH
23926: LD_INT 2
23928: ARRAY
23929: IFFALSE 23998
// if result [ 2 ] [ 1 ] = 100 + i then
23931: LD_VAR 0 2
23935: PUSH
23936: LD_INT 2
23938: ARRAY
23939: PUSH
23940: LD_INT 1
23942: ARRAY
23943: PUSH
23944: LD_INT 100
23946: PUSH
23947: LD_VAR 0 8
23951: PLUS
23952: EQUAL
23953: IFFALSE 23998
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23955: LD_ADDR_VAR 0 2
23959: PUSH
23960: LD_VAR 0 2
23964: PPUSH
23965: LD_INT 2
23967: PPUSH
23968: LD_VAR 0 2
23972: PUSH
23973: LD_INT 2
23975: ARRAY
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: CALL_OW 3
23984: PPUSH
23985: CALL_OW 1
23989: ST_TO_ADDR
// tmp := 1 ;
23990: LD_ADDR_VAR 0 3
23994: PUSH
23995: LD_STRING 1
23997: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23998: LD_ADDR_VAR 0 6
24002: PUSH
24003: LD_VAR 0 6
24007: PUSH
24008: LD_VAR 0 3
24012: STR
24013: ST_TO_ADDR
// end ;
24014: GO 23910
24016: POP
24017: POP
// if isGameLoad then
24018: LD_VAR 0 1
24022: IFFALSE 24497
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24024: LD_ADDR_VAR 0 4
24028: PUSH
24029: LD_EXP 59
24033: PUSH
24034: LD_EXP 58
24038: PUSH
24039: LD_EXP 60
24043: PUSH
24044: LD_EXP 57
24048: PUSH
24049: LD_EXP 61
24053: PUSH
24054: LD_EXP 62
24058: PUSH
24059: LD_EXP 63
24063: PUSH
24064: LD_EXP 64
24068: PUSH
24069: LD_EXP 65
24073: PUSH
24074: LD_EXP 66
24078: PUSH
24079: LD_EXP 67
24083: PUSH
24084: LD_EXP 68
24088: PUSH
24089: LD_EXP 69
24093: PUSH
24094: LD_EXP 70
24098: PUSH
24099: LD_EXP 78
24103: PUSH
24104: LD_EXP 79
24108: PUSH
24109: LD_EXP 80
24113: PUSH
24114: LD_EXP 81
24118: PUSH
24119: LD_EXP 83
24123: PUSH
24124: LD_EXP 84
24128: PUSH
24129: LD_EXP 85
24133: PUSH
24134: LD_EXP 88
24138: PUSH
24139: LD_EXP 90
24143: PUSH
24144: LD_EXP 91
24148: PUSH
24149: LD_EXP 92
24153: PUSH
24154: LD_EXP 94
24158: PUSH
24159: LD_EXP 95
24163: PUSH
24164: LD_EXP 98
24168: PUSH
24169: LD_EXP 99
24173: PUSH
24174: LD_EXP 100
24178: PUSH
24179: LD_EXP 101
24183: PUSH
24184: LD_EXP 102
24188: PUSH
24189: LD_EXP 103
24193: PUSH
24194: LD_EXP 104
24198: PUSH
24199: LD_EXP 105
24203: PUSH
24204: LD_EXP 106
24208: PUSH
24209: LD_EXP 71
24213: PUSH
24214: LD_EXP 72
24218: PUSH
24219: LD_EXP 75
24223: PUSH
24224: LD_EXP 76
24228: PUSH
24229: LD_EXP 77
24233: PUSH
24234: LD_EXP 73
24238: PUSH
24239: LD_EXP 74
24243: PUSH
24244: LD_EXP 82
24248: PUSH
24249: LD_EXP 86
24253: PUSH
24254: LD_EXP 87
24258: PUSH
24259: LD_EXP 89
24263: PUSH
24264: LD_EXP 93
24268: PUSH
24269: LD_EXP 96
24273: PUSH
24274: LD_EXP 97
24278: PUSH
24279: LD_EXP 107
24283: PUSH
24284: LD_EXP 108
24288: PUSH
24289: LD_EXP 109
24293: PUSH
24294: LD_EXP 110
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: ST_TO_ADDR
// tmp :=  ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_STRING 
24362: ST_TO_ADDR
// for i = 1 to normalCounter do
24363: LD_ADDR_VAR 0 8
24367: PUSH
24368: DOUBLE
24369: LD_INT 1
24371: DEC
24372: ST_TO_ADDR
24373: LD_EXP 55
24377: PUSH
24378: FOR_TO
24379: IFFALSE 24415
// begin if flags [ i ] then
24381: LD_VAR 0 4
24385: PUSH
24386: LD_VAR 0 8
24390: ARRAY
24391: IFFALSE 24413
// tmp := tmp & i & ; ;
24393: LD_ADDR_VAR 0 3
24397: PUSH
24398: LD_VAR 0 3
24402: PUSH
24403: LD_VAR 0 8
24407: STR
24408: PUSH
24409: LD_STRING ;
24411: STR
24412: ST_TO_ADDR
// end ;
24413: GO 24378
24415: POP
24416: POP
// for i = 1 to hardcoreCounter do
24417: LD_ADDR_VAR 0 8
24421: PUSH
24422: DOUBLE
24423: LD_INT 1
24425: DEC
24426: ST_TO_ADDR
24427: LD_EXP 56
24431: PUSH
24432: FOR_TO
24433: IFFALSE 24479
// begin if flags [ normalCounter + i ] then
24435: LD_VAR 0 4
24439: PUSH
24440: LD_EXP 55
24444: PUSH
24445: LD_VAR 0 8
24449: PLUS
24450: ARRAY
24451: IFFALSE 24477
// tmp := tmp & ( 100 + i ) & ; ;
24453: LD_ADDR_VAR 0 3
24457: PUSH
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 100
24465: PUSH
24466: LD_VAR 0 8
24470: PLUS
24471: STR
24472: PUSH
24473: LD_STRING ;
24475: STR
24476: ST_TO_ADDR
// end ;
24477: GO 24432
24479: POP
24480: POP
// if tmp then
24481: LD_VAR 0 3
24485: IFFALSE 24497
// active := tmp ;
24487: LD_ADDR_VAR 0 7
24491: PUSH
24492: LD_VAR 0 3
24496: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24497: LD_STRING getStreamItemsFromMission("
24499: PUSH
24500: LD_VAR 0 5
24504: STR
24505: PUSH
24506: LD_STRING ","
24508: STR
24509: PUSH
24510: LD_VAR 0 6
24514: STR
24515: PUSH
24516: LD_STRING ","
24518: STR
24519: PUSH
24520: LD_VAR 0 7
24524: STR
24525: PUSH
24526: LD_STRING ")
24528: STR
24529: PPUSH
24530: CALL_OW 559
// end else
24534: GO 24543
// ToLua ( getStreamItemsFromMission("","","") ) ;
24536: LD_STRING getStreamItemsFromMission("","","")
24538: PPUSH
24539: CALL_OW 559
// end ;
24543: LD_VAR 0 2
24547: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24548: LD_EXP 54
24552: PUSH
24553: LD_EXP 59
24557: AND
24558: IFFALSE 24682
24560: GO 24562
24562: DISABLE
24563: LD_INT 0
24565: PPUSH
24566: PPUSH
// begin enable ;
24567: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24568: LD_ADDR_VAR 0 2
24572: PUSH
24573: LD_INT 22
24575: PUSH
24576: LD_OWVAR 2
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 34
24590: PUSH
24591: LD_INT 7
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 34
24600: PUSH
24601: LD_INT 45
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 34
24610: PUSH
24611: LD_INT 28
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 34
24620: PUSH
24621: LD_INT 47
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PPUSH
24639: CALL_OW 69
24643: ST_TO_ADDR
// if not tmp then
24644: LD_VAR 0 2
24648: NOT
24649: IFFALSE 24653
// exit ;
24651: GO 24682
// for i in tmp do
24653: LD_ADDR_VAR 0 1
24657: PUSH
24658: LD_VAR 0 2
24662: PUSH
24663: FOR_IN
24664: IFFALSE 24680
// begin SetLives ( i , 0 ) ;
24666: LD_VAR 0 1
24670: PPUSH
24671: LD_INT 0
24673: PPUSH
24674: CALL_OW 234
// end ;
24678: GO 24663
24680: POP
24681: POP
// end ;
24682: PPOPN 2
24684: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24685: LD_EXP 54
24689: PUSH
24690: LD_EXP 60
24694: AND
24695: IFFALSE 24779
24697: GO 24699
24699: DISABLE
24700: LD_INT 0
24702: PPUSH
24703: PPUSH
// begin enable ;
24704: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24705: LD_ADDR_VAR 0 2
24709: PUSH
24710: LD_INT 22
24712: PUSH
24713: LD_OWVAR 2
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 32
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PPUSH
24736: CALL_OW 69
24740: ST_TO_ADDR
// if not tmp then
24741: LD_VAR 0 2
24745: NOT
24746: IFFALSE 24750
// exit ;
24748: GO 24779
// for i in tmp do
24750: LD_ADDR_VAR 0 1
24754: PUSH
24755: LD_VAR 0 2
24759: PUSH
24760: FOR_IN
24761: IFFALSE 24777
// begin SetLives ( i , 0 ) ;
24763: LD_VAR 0 1
24767: PPUSH
24768: LD_INT 0
24770: PPUSH
24771: CALL_OW 234
// end ;
24775: GO 24760
24777: POP
24778: POP
// end ;
24779: PPOPN 2
24781: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24782: LD_EXP 54
24786: PUSH
24787: LD_EXP 57
24791: AND
24792: IFFALSE 24885
24794: GO 24796
24796: DISABLE
24797: LD_INT 0
24799: PPUSH
// begin enable ;
24800: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24801: LD_ADDR_VAR 0 1
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_OWVAR 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 2
24820: PUSH
24821: LD_INT 25
24823: PUSH
24824: LD_INT 5
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 25
24833: PUSH
24834: LD_INT 9
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 25
24843: PUSH
24844: LD_INT 8
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PPUSH
24861: CALL_OW 69
24865: PUSH
24866: FOR_IN
24867: IFFALSE 24883
// begin SetClass ( i , 1 ) ;
24869: LD_VAR 0 1
24873: PPUSH
24874: LD_INT 1
24876: PPUSH
24877: CALL_OW 336
// end ;
24881: GO 24866
24883: POP
24884: POP
// end ;
24885: PPOPN 1
24887: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24888: LD_EXP 54
24892: PUSH
24893: LD_EXP 58
24897: AND
24898: PUSH
24899: LD_OWVAR 65
24903: PUSH
24904: LD_INT 7
24906: LESS
24907: AND
24908: IFFALSE 24922
24910: GO 24912
24912: DISABLE
// begin enable ;
24913: ENABLE
// game_speed := 7 ;
24914: LD_ADDR_OWVAR 65
24918: PUSH
24919: LD_INT 7
24921: ST_TO_ADDR
// end ;
24922: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24923: LD_EXP 54
24927: PUSH
24928: LD_EXP 61
24932: AND
24933: IFFALSE 25135
24935: GO 24937
24937: DISABLE
24938: LD_INT 0
24940: PPUSH
24941: PPUSH
24942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_INT 81
24950: PUSH
24951: LD_OWVAR 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PPUSH
24974: CALL_OW 69
24978: ST_TO_ADDR
// if not tmp then
24979: LD_VAR 0 3
24983: NOT
24984: IFFALSE 24988
// exit ;
24986: GO 25135
// if tmp > 5 then
24988: LD_VAR 0 3
24992: PUSH
24993: LD_INT 5
24995: GREATER
24996: IFFALSE 25008
// k := 5 else
24998: LD_ADDR_VAR 0 2
25002: PUSH
25003: LD_INT 5
25005: ST_TO_ADDR
25006: GO 25018
// k := tmp ;
25008: LD_ADDR_VAR 0 2
25012: PUSH
25013: LD_VAR 0 3
25017: ST_TO_ADDR
// for i := 1 to k do
25018: LD_ADDR_VAR 0 1
25022: PUSH
25023: DOUBLE
25024: LD_INT 1
25026: DEC
25027: ST_TO_ADDR
25028: LD_VAR 0 2
25032: PUSH
25033: FOR_TO
25034: IFFALSE 25133
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25036: LD_VAR 0 3
25040: PUSH
25041: LD_VAR 0 1
25045: ARRAY
25046: PPUSH
25047: LD_VAR 0 1
25051: PUSH
25052: LD_INT 4
25054: MOD
25055: PUSH
25056: LD_INT 1
25058: PLUS
25059: PPUSH
25060: CALL_OW 259
25064: PUSH
25065: LD_INT 10
25067: LESS
25068: IFFALSE 25131
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25070: LD_VAR 0 3
25074: PUSH
25075: LD_VAR 0 1
25079: ARRAY
25080: PPUSH
25081: LD_VAR 0 1
25085: PUSH
25086: LD_INT 4
25088: MOD
25089: PUSH
25090: LD_INT 1
25092: PLUS
25093: PPUSH
25094: LD_VAR 0 3
25098: PUSH
25099: LD_VAR 0 1
25103: ARRAY
25104: PPUSH
25105: LD_VAR 0 1
25109: PUSH
25110: LD_INT 4
25112: MOD
25113: PUSH
25114: LD_INT 1
25116: PLUS
25117: PPUSH
25118: CALL_OW 259
25122: PUSH
25123: LD_INT 1
25125: PLUS
25126: PPUSH
25127: CALL_OW 237
25131: GO 25033
25133: POP
25134: POP
// end ;
25135: PPOPN 3
25137: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25138: LD_EXP 54
25142: PUSH
25143: LD_EXP 62
25147: AND
25148: IFFALSE 25168
25150: GO 25152
25152: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25153: LD_INT 4
25155: PPUSH
25156: LD_OWVAR 2
25160: PPUSH
25161: LD_INT 0
25163: PPUSH
25164: CALL_OW 324
25168: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25169: LD_EXP 54
25173: PUSH
25174: LD_EXP 91
25178: AND
25179: IFFALSE 25199
25181: GO 25183
25183: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25184: LD_INT 19
25186: PPUSH
25187: LD_OWVAR 2
25191: PPUSH
25192: LD_INT 0
25194: PPUSH
25195: CALL_OW 324
25199: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25200: LD_EXP 54
25204: PUSH
25205: LD_EXP 63
25209: AND
25210: IFFALSE 25312
25212: GO 25214
25214: DISABLE
25215: LD_INT 0
25217: PPUSH
25218: PPUSH
// begin enable ;
25219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25220: LD_ADDR_VAR 0 2
25224: PUSH
25225: LD_INT 22
25227: PUSH
25228: LD_OWVAR 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 2
25239: PUSH
25240: LD_INT 34
25242: PUSH
25243: LD_INT 11
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 34
25252: PUSH
25253: LD_INT 30
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PPUSH
25269: CALL_OW 69
25273: ST_TO_ADDR
// if not tmp then
25274: LD_VAR 0 2
25278: NOT
25279: IFFALSE 25283
// exit ;
25281: GO 25312
// for i in tmp do
25283: LD_ADDR_VAR 0 1
25287: PUSH
25288: LD_VAR 0 2
25292: PUSH
25293: FOR_IN
25294: IFFALSE 25310
// begin SetLives ( i , 0 ) ;
25296: LD_VAR 0 1
25300: PPUSH
25301: LD_INT 0
25303: PPUSH
25304: CALL_OW 234
// end ;
25308: GO 25293
25310: POP
25311: POP
// end ;
25312: PPOPN 2
25314: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25315: LD_EXP 54
25319: PUSH
25320: LD_EXP 64
25324: AND
25325: IFFALSE 25345
25327: GO 25329
25329: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25330: LD_INT 32
25332: PPUSH
25333: LD_OWVAR 2
25337: PPUSH
25338: LD_INT 0
25340: PPUSH
25341: CALL_OW 324
25345: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25346: LD_EXP 54
25350: PUSH
25351: LD_EXP 65
25355: AND
25356: IFFALSE 25537
25358: GO 25360
25360: DISABLE
25361: LD_INT 0
25363: PPUSH
25364: PPUSH
25365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: LD_INT 22
25373: PUSH
25374: LD_OWVAR 2
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 33
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PPUSH
25397: CALL_OW 69
25401: ST_TO_ADDR
// if not tmp then
25402: LD_VAR 0 2
25406: NOT
25407: IFFALSE 25411
// exit ;
25409: GO 25537
// side := 0 ;
25411: LD_ADDR_VAR 0 3
25415: PUSH
25416: LD_INT 0
25418: ST_TO_ADDR
// for i := 1 to 8 do
25419: LD_ADDR_VAR 0 1
25423: PUSH
25424: DOUBLE
25425: LD_INT 1
25427: DEC
25428: ST_TO_ADDR
25429: LD_INT 8
25431: PUSH
25432: FOR_TO
25433: IFFALSE 25481
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25435: LD_OWVAR 2
25439: PUSH
25440: LD_VAR 0 1
25444: NONEQUAL
25445: PUSH
25446: LD_OWVAR 2
25450: PPUSH
25451: LD_VAR 0 1
25455: PPUSH
25456: CALL_OW 81
25460: PUSH
25461: LD_INT 2
25463: EQUAL
25464: AND
25465: IFFALSE 25479
// begin side := i ;
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: LD_VAR 0 1
25476: ST_TO_ADDR
// break ;
25477: GO 25481
// end ;
25479: GO 25432
25481: POP
25482: POP
// if not side then
25483: LD_VAR 0 3
25487: NOT
25488: IFFALSE 25492
// exit ;
25490: GO 25537
// for i := 1 to tmp do
25492: LD_ADDR_VAR 0 1
25496: PUSH
25497: DOUBLE
25498: LD_INT 1
25500: DEC
25501: ST_TO_ADDR
25502: LD_VAR 0 2
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25535
// if Prob ( 60 ) then
25510: LD_INT 60
25512: PPUSH
25513: CALL_OW 13
25517: IFFALSE 25533
// SetSide ( i , side ) ;
25519: LD_VAR 0 1
25523: PPUSH
25524: LD_VAR 0 3
25528: PPUSH
25529: CALL_OW 235
25533: GO 25507
25535: POP
25536: POP
// end ;
25537: PPOPN 3
25539: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25540: LD_EXP 54
25544: PUSH
25545: LD_EXP 67
25549: AND
25550: IFFALSE 25669
25552: GO 25554
25554: DISABLE
25555: LD_INT 0
25557: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25558: LD_ADDR_VAR 0 1
25562: PUSH
25563: LD_INT 22
25565: PUSH
25566: LD_OWVAR 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 21
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: LD_INT 23
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: PPUSH
25607: CALL_OW 69
25611: PUSH
25612: FOR_IN
25613: IFFALSE 25667
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 257
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: LD_INT 4
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: IN
25643: IFFALSE 25665
// SetClass ( un , rand ( 1 , 4 ) ) ;
25645: LD_VAR 0 1
25649: PPUSH
25650: LD_INT 1
25652: PPUSH
25653: LD_INT 4
25655: PPUSH
25656: CALL_OW 12
25660: PPUSH
25661: CALL_OW 336
25665: GO 25612
25667: POP
25668: POP
// end ;
25669: PPOPN 1
25671: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25672: LD_EXP 54
25676: PUSH
25677: LD_EXP 66
25681: AND
25682: IFFALSE 25761
25684: GO 25686
25686: DISABLE
25687: LD_INT 0
25689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25690: LD_ADDR_VAR 0 1
25694: PUSH
25695: LD_INT 22
25697: PUSH
25698: LD_OWVAR 2
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 21
25709: PUSH
25710: LD_INT 3
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PPUSH
25721: CALL_OW 69
25725: ST_TO_ADDR
// if not tmp then
25726: LD_VAR 0 1
25730: NOT
25731: IFFALSE 25735
// exit ;
25733: GO 25761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25735: LD_VAR 0 1
25739: PUSH
25740: LD_INT 1
25742: PPUSH
25743: LD_VAR 0 1
25747: PPUSH
25748: CALL_OW 12
25752: ARRAY
25753: PPUSH
25754: LD_INT 100
25756: PPUSH
25757: CALL_OW 234
// end ;
25761: PPOPN 1
25763: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25764: LD_EXP 54
25768: PUSH
25769: LD_EXP 68
25773: AND
25774: IFFALSE 25872
25776: GO 25778
25778: DISABLE
25779: LD_INT 0
25781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25782: LD_ADDR_VAR 0 1
25786: PUSH
25787: LD_INT 22
25789: PUSH
25790: LD_OWVAR 2
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 21
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PPUSH
25813: CALL_OW 69
25817: ST_TO_ADDR
// if not tmp then
25818: LD_VAR 0 1
25822: NOT
25823: IFFALSE 25827
// exit ;
25825: GO 25872
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25827: LD_VAR 0 1
25831: PUSH
25832: LD_INT 1
25834: PPUSH
25835: LD_VAR 0 1
25839: PPUSH
25840: CALL_OW 12
25844: ARRAY
25845: PPUSH
25846: LD_INT 1
25848: PPUSH
25849: LD_INT 4
25851: PPUSH
25852: CALL_OW 12
25856: PPUSH
25857: LD_INT 3000
25859: PPUSH
25860: LD_INT 9000
25862: PPUSH
25863: CALL_OW 12
25867: PPUSH
25868: CALL_OW 492
// end ;
25872: PPOPN 1
25874: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25875: LD_EXP 54
25879: PUSH
25880: LD_EXP 69
25884: AND
25885: IFFALSE 25905
25887: GO 25889
25889: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25890: LD_INT 1
25892: PPUSH
25893: LD_OWVAR 2
25897: PPUSH
25898: LD_INT 0
25900: PPUSH
25901: CALL_OW 324
25905: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25906: LD_EXP 54
25910: PUSH
25911: LD_EXP 70
25915: AND
25916: IFFALSE 25999
25918: GO 25920
25920: DISABLE
25921: LD_INT 0
25923: PPUSH
25924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25925: LD_ADDR_VAR 0 2
25929: PUSH
25930: LD_INT 22
25932: PUSH
25933: LD_OWVAR 2
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 3
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PPUSH
25956: CALL_OW 69
25960: ST_TO_ADDR
// if not tmp then
25961: LD_VAR 0 2
25965: NOT
25966: IFFALSE 25970
// exit ;
25968: GO 25999
// for i in tmp do
25970: LD_ADDR_VAR 0 1
25974: PUSH
25975: LD_VAR 0 2
25979: PUSH
25980: FOR_IN
25981: IFFALSE 25997
// SetBLevel ( i , 10 ) ;
25983: LD_VAR 0 1
25987: PPUSH
25988: LD_INT 10
25990: PPUSH
25991: CALL_OW 241
25995: GO 25980
25997: POP
25998: POP
// end ;
25999: PPOPN 2
26001: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26002: LD_EXP 54
26006: PUSH
26007: LD_EXP 71
26011: AND
26012: IFFALSE 26123
26014: GO 26016
26016: DISABLE
26017: LD_INT 0
26019: PPUSH
26020: PPUSH
26021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26022: LD_ADDR_VAR 0 3
26026: PUSH
26027: LD_INT 22
26029: PUSH
26030: LD_OWVAR 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 25
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PPUSH
26053: CALL_OW 69
26057: ST_TO_ADDR
// if not tmp then
26058: LD_VAR 0 3
26062: NOT
26063: IFFALSE 26067
// exit ;
26065: GO 26123
// un := tmp [ rand ( 1 , tmp ) ] ;
26067: LD_ADDR_VAR 0 2
26071: PUSH
26072: LD_VAR 0 3
26076: PUSH
26077: LD_INT 1
26079: PPUSH
26080: LD_VAR 0 3
26084: PPUSH
26085: CALL_OW 12
26089: ARRAY
26090: ST_TO_ADDR
// if Crawls ( un ) then
26091: LD_VAR 0 2
26095: PPUSH
26096: CALL_OW 318
26100: IFFALSE 26111
// ComWalk ( un ) ;
26102: LD_VAR 0 2
26106: PPUSH
26107: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26111: LD_VAR 0 2
26115: PPUSH
26116: LD_INT 5
26118: PPUSH
26119: CALL_OW 336
// end ;
26123: PPOPN 3
26125: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26126: LD_EXP 54
26130: PUSH
26131: LD_EXP 72
26135: AND
26136: PUSH
26137: LD_OWVAR 67
26141: PUSH
26142: LD_INT 4
26144: LESS
26145: AND
26146: IFFALSE 26165
26148: GO 26150
26150: DISABLE
// begin Difficulty := Difficulty + 1 ;
26151: LD_ADDR_OWVAR 67
26155: PUSH
26156: LD_OWVAR 67
26160: PUSH
26161: LD_INT 1
26163: PLUS
26164: ST_TO_ADDR
// end ;
26165: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26166: LD_EXP 54
26170: PUSH
26171: LD_EXP 73
26175: AND
26176: IFFALSE 26279
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
// begin for i := 1 to 5 do
26184: LD_ADDR_VAR 0 1
26188: PUSH
26189: DOUBLE
26190: LD_INT 1
26192: DEC
26193: ST_TO_ADDR
26194: LD_INT 5
26196: PUSH
26197: FOR_TO
26198: IFFALSE 26277
// begin uc_nation := nation_nature ;
26200: LD_ADDR_OWVAR 21
26204: PUSH
26205: LD_INT 0
26207: ST_TO_ADDR
// uc_side := 0 ;
26208: LD_ADDR_OWVAR 20
26212: PUSH
26213: LD_INT 0
26215: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26216: LD_ADDR_OWVAR 29
26220: PUSH
26221: LD_INT 12
26223: PUSH
26224: LD_INT 12
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: ST_TO_ADDR
// hc_agressivity := 20 ;
26231: LD_ADDR_OWVAR 35
26235: PUSH
26236: LD_INT 20
26238: ST_TO_ADDR
// hc_class := class_tiger ;
26239: LD_ADDR_OWVAR 28
26243: PUSH
26244: LD_INT 14
26246: ST_TO_ADDR
// hc_gallery :=  ;
26247: LD_ADDR_OWVAR 33
26251: PUSH
26252: LD_STRING 
26254: ST_TO_ADDR
// hc_name :=  ;
26255: LD_ADDR_OWVAR 26
26259: PUSH
26260: LD_STRING 
26262: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26263: CALL_OW 44
26267: PPUSH
26268: LD_INT 0
26270: PPUSH
26271: CALL_OW 51
// end ;
26275: GO 26197
26277: POP
26278: POP
// end ;
26279: PPOPN 1
26281: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26282: LD_EXP 54
26286: PUSH
26287: LD_EXP 74
26291: AND
26292: IFFALSE 26301
26294: GO 26296
26296: DISABLE
// StreamSibBomb ;
26297: CALL 26302 0 0
26301: END
// export function StreamSibBomb ; var i , x , y ; begin
26302: LD_INT 0
26304: PPUSH
26305: PPUSH
26306: PPUSH
26307: PPUSH
// result := false ;
26308: LD_ADDR_VAR 0 1
26312: PUSH
26313: LD_INT 0
26315: ST_TO_ADDR
// for i := 1 to 16 do
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: DOUBLE
26322: LD_INT 1
26324: DEC
26325: ST_TO_ADDR
26326: LD_INT 16
26328: PUSH
26329: FOR_TO
26330: IFFALSE 26529
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_INT 10
26339: PUSH
26340: LD_INT 20
26342: PUSH
26343: LD_INT 30
26345: PUSH
26346: LD_INT 40
26348: PUSH
26349: LD_INT 50
26351: PUSH
26352: LD_INT 60
26354: PUSH
26355: LD_INT 70
26357: PUSH
26358: LD_INT 80
26360: PUSH
26361: LD_INT 90
26363: PUSH
26364: LD_INT 100
26366: PUSH
26367: LD_INT 110
26369: PUSH
26370: LD_INT 120
26372: PUSH
26373: LD_INT 130
26375: PUSH
26376: LD_INT 140
26378: PUSH
26379: LD_INT 150
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PPUSH
26402: LD_INT 15
26404: PPUSH
26405: CALL_OW 12
26409: ARRAY
26410: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26411: LD_ADDR_VAR 0 4
26415: PUSH
26416: LD_INT 10
26418: PUSH
26419: LD_INT 20
26421: PUSH
26422: LD_INT 30
26424: PUSH
26425: LD_INT 40
26427: PUSH
26428: LD_INT 50
26430: PUSH
26431: LD_INT 60
26433: PUSH
26434: LD_INT 70
26436: PUSH
26437: LD_INT 80
26439: PUSH
26440: LD_INT 90
26442: PUSH
26443: LD_INT 100
26445: PUSH
26446: LD_INT 110
26448: PUSH
26449: LD_INT 120
26451: PUSH
26452: LD_INT 130
26454: PUSH
26455: LD_INT 140
26457: PUSH
26458: LD_INT 150
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: PPUSH
26481: LD_INT 15
26483: PPUSH
26484: CALL_OW 12
26488: ARRAY
26489: ST_TO_ADDR
// if ValidHex ( x , y ) then
26490: LD_VAR 0 3
26494: PPUSH
26495: LD_VAR 0 4
26499: PPUSH
26500: CALL_OW 488
26504: IFFALSE 26527
// begin result := [ x , y ] ;
26506: LD_ADDR_VAR 0 1
26510: PUSH
26511: LD_VAR 0 3
26515: PUSH
26516: LD_VAR 0 4
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: ST_TO_ADDR
// break ;
26525: GO 26529
// end ; end ;
26527: GO 26329
26529: POP
26530: POP
// if result then
26531: LD_VAR 0 1
26535: IFFALSE 26595
// begin ToLua ( playSibBomb() ) ;
26537: LD_STRING playSibBomb()
26539: PPUSH
26540: CALL_OW 559
// wait ( 0 0$14 ) ;
26544: LD_INT 490
26546: PPUSH
26547: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26551: LD_VAR 0 1
26555: PUSH
26556: LD_INT 1
26558: ARRAY
26559: PPUSH
26560: LD_VAR 0 1
26564: PUSH
26565: LD_INT 2
26567: ARRAY
26568: PPUSH
26569: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26573: LD_VAR 0 1
26577: PUSH
26578: LD_INT 1
26580: ARRAY
26581: PPUSH
26582: LD_VAR 0 1
26586: PUSH
26587: LD_INT 2
26589: ARRAY
26590: PPUSH
26591: CALL_OW 429
// end ; end ;
26595: LD_VAR 0 1
26599: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26600: LD_EXP 54
26604: PUSH
26605: LD_EXP 76
26609: AND
26610: IFFALSE 26622
26612: GO 26614
26614: DISABLE
// YouLost (  ) ;
26615: LD_STRING 
26617: PPUSH
26618: CALL_OW 104
26622: END
// every 0 0$1 trigger StreamModeActive and sFog do
26623: LD_EXP 54
26627: PUSH
26628: LD_EXP 75
26632: AND
26633: IFFALSE 26647
26635: GO 26637
26637: DISABLE
// FogOff ( your_side ) ;
26638: LD_OWVAR 2
26642: PPUSH
26643: CALL_OW 344
26647: END
// every 0 0$1 trigger StreamModeActive and sSun do
26648: LD_EXP 54
26652: PUSH
26653: LD_EXP 77
26657: AND
26658: IFFALSE 26686
26660: GO 26662
26662: DISABLE
// begin solar_recharge_percent := 0 ;
26663: LD_ADDR_OWVAR 79
26667: PUSH
26668: LD_INT 0
26670: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26671: LD_INT 10500
26673: PPUSH
26674: CALL_OW 67
// solar_recharge_percent := 100 ;
26678: LD_ADDR_OWVAR 79
26682: PUSH
26683: LD_INT 100
26685: ST_TO_ADDR
// end ;
26686: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26687: LD_EXP 54
26691: PUSH
26692: LD_EXP 78
26696: AND
26697: IFFALSE 26936
26699: GO 26701
26701: DISABLE
26702: LD_INT 0
26704: PPUSH
26705: PPUSH
26706: PPUSH
// begin tmp := [ ] ;
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: EMPTY
26713: ST_TO_ADDR
// for i := 1 to 6 do
26714: LD_ADDR_VAR 0 1
26718: PUSH
26719: DOUBLE
26720: LD_INT 1
26722: DEC
26723: ST_TO_ADDR
26724: LD_INT 6
26726: PUSH
26727: FOR_TO
26728: IFFALSE 26833
// begin uc_nation := nation_nature ;
26730: LD_ADDR_OWVAR 21
26734: PUSH
26735: LD_INT 0
26737: ST_TO_ADDR
// uc_side := 0 ;
26738: LD_ADDR_OWVAR 20
26742: PUSH
26743: LD_INT 0
26745: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26746: LD_ADDR_OWVAR 29
26750: PUSH
26751: LD_INT 12
26753: PUSH
26754: LD_INT 12
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: ST_TO_ADDR
// hc_agressivity := 20 ;
26761: LD_ADDR_OWVAR 35
26765: PUSH
26766: LD_INT 20
26768: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26769: LD_ADDR_OWVAR 28
26773: PUSH
26774: LD_INT 17
26776: ST_TO_ADDR
// hc_gallery :=  ;
26777: LD_ADDR_OWVAR 33
26781: PUSH
26782: LD_STRING 
26784: ST_TO_ADDR
// hc_name :=  ;
26785: LD_ADDR_OWVAR 26
26789: PUSH
26790: LD_STRING 
26792: ST_TO_ADDR
// un := CreateHuman ;
26793: LD_ADDR_VAR 0 2
26797: PUSH
26798: CALL_OW 44
26802: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26803: LD_VAR 0 2
26807: PPUSH
26808: LD_INT 1
26810: PPUSH
26811: CALL_OW 51
// tmp := tmp ^ un ;
26815: LD_ADDR_VAR 0 3
26819: PUSH
26820: LD_VAR 0 3
26824: PUSH
26825: LD_VAR 0 2
26829: ADD
26830: ST_TO_ADDR
// end ;
26831: GO 26727
26833: POP
26834: POP
// repeat wait ( 0 0$1 ) ;
26835: LD_INT 35
26837: PPUSH
26838: CALL_OW 67
// for un in tmp do
26842: LD_ADDR_VAR 0 2
26846: PUSH
26847: LD_VAR 0 3
26851: PUSH
26852: FOR_IN
26853: IFFALSE 26927
// begin if IsDead ( un ) then
26855: LD_VAR 0 2
26859: PPUSH
26860: CALL_OW 301
26864: IFFALSE 26884
// begin tmp := tmp diff un ;
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: LD_VAR 0 3
26875: PUSH
26876: LD_VAR 0 2
26880: DIFF
26881: ST_TO_ADDR
// continue ;
26882: GO 26852
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_INT 3
26891: PUSH
26892: LD_INT 22
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PPUSH
26906: CALL_OW 69
26910: PPUSH
26911: LD_VAR 0 2
26915: PPUSH
26916: CALL_OW 74
26920: PPUSH
26921: CALL_OW 115
// end ;
26925: GO 26852
26927: POP
26928: POP
// until not tmp ;
26929: LD_VAR 0 3
26933: NOT
26934: IFFALSE 26835
// end ;
26936: PPOPN 3
26938: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26939: LD_EXP 54
26943: PUSH
26944: LD_EXP 79
26948: AND
26949: IFFALSE 27003
26951: GO 26953
26953: DISABLE
// begin ToLua ( displayTroll(); ) ;
26954: LD_STRING displayTroll();
26956: PPUSH
26957: CALL_OW 559
// wait ( 3 3$00 ) ;
26961: LD_INT 6300
26963: PPUSH
26964: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26968: LD_STRING hideTroll();
26970: PPUSH
26971: CALL_OW 559
// wait ( 1 1$00 ) ;
26975: LD_INT 2100
26977: PPUSH
26978: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26982: LD_STRING displayTroll();
26984: PPUSH
26985: CALL_OW 559
// wait ( 1 1$00 ) ;
26989: LD_INT 2100
26991: PPUSH
26992: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26996: LD_STRING hideTroll();
26998: PPUSH
26999: CALL_OW 559
// end ;
27003: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27004: LD_EXP 54
27008: PUSH
27009: LD_EXP 80
27013: AND
27014: IFFALSE 27077
27016: GO 27018
27018: DISABLE
27019: LD_INT 0
27021: PPUSH
// begin p := 0 ;
27022: LD_ADDR_VAR 0 1
27026: PUSH
27027: LD_INT 0
27029: ST_TO_ADDR
// repeat game_speed := 1 ;
27030: LD_ADDR_OWVAR 65
27034: PUSH
27035: LD_INT 1
27037: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27038: LD_INT 35
27040: PPUSH
27041: CALL_OW 67
// p := p + 1 ;
27045: LD_ADDR_VAR 0 1
27049: PUSH
27050: LD_VAR 0 1
27054: PUSH
27055: LD_INT 1
27057: PLUS
27058: ST_TO_ADDR
// until p >= 60 ;
27059: LD_VAR 0 1
27063: PUSH
27064: LD_INT 60
27066: GREATEREQUAL
27067: IFFALSE 27030
// game_speed := 4 ;
27069: LD_ADDR_OWVAR 65
27073: PUSH
27074: LD_INT 4
27076: ST_TO_ADDR
// end ;
27077: PPOPN 1
27079: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27080: LD_EXP 54
27084: PUSH
27085: LD_EXP 81
27089: AND
27090: IFFALSE 27236
27092: GO 27094
27094: DISABLE
27095: LD_INT 0
27097: PPUSH
27098: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27099: LD_ADDR_VAR 0 1
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_OWVAR 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: LD_INT 30
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 30
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PPUSH
27148: CALL_OW 69
27152: ST_TO_ADDR
// if not depot then
27153: LD_VAR 0 1
27157: NOT
27158: IFFALSE 27162
// exit ;
27160: GO 27236
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27162: LD_ADDR_VAR 0 2
27166: PUSH
27167: LD_VAR 0 1
27171: PUSH
27172: LD_INT 1
27174: PPUSH
27175: LD_VAR 0 1
27179: PPUSH
27180: CALL_OW 12
27184: ARRAY
27185: PPUSH
27186: CALL_OW 274
27190: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27191: LD_VAR 0 2
27195: PPUSH
27196: LD_INT 1
27198: PPUSH
27199: LD_INT 0
27201: PPUSH
27202: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27206: LD_VAR 0 2
27210: PPUSH
27211: LD_INT 2
27213: PPUSH
27214: LD_INT 0
27216: PPUSH
27217: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27221: LD_VAR 0 2
27225: PPUSH
27226: LD_INT 3
27228: PPUSH
27229: LD_INT 0
27231: PPUSH
27232: CALL_OW 277
// end ;
27236: PPOPN 2
27238: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27239: LD_EXP 54
27243: PUSH
27244: LD_EXP 82
27248: AND
27249: IFFALSE 27346
27251: GO 27253
27253: DISABLE
27254: LD_INT 0
27256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27257: LD_ADDR_VAR 0 1
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_OWVAR 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 21
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 3
27286: PUSH
27287: LD_INT 23
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: LIST
27305: PPUSH
27306: CALL_OW 69
27310: ST_TO_ADDR
// if not tmp then
27311: LD_VAR 0 1
27315: NOT
27316: IFFALSE 27320
// exit ;
27318: GO 27346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27320: LD_VAR 0 1
27324: PUSH
27325: LD_INT 1
27327: PPUSH
27328: LD_VAR 0 1
27332: PPUSH
27333: CALL_OW 12
27337: ARRAY
27338: PPUSH
27339: LD_INT 200
27341: PPUSH
27342: CALL_OW 234
// end ;
27346: PPOPN 1
27348: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27349: LD_EXP 54
27353: PUSH
27354: LD_EXP 83
27358: AND
27359: IFFALSE 27438
27361: GO 27363
27363: DISABLE
27364: LD_INT 0
27366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27367: LD_ADDR_VAR 0 1
27371: PUSH
27372: LD_INT 22
27374: PUSH
27375: LD_OWVAR 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 21
27386: PUSH
27387: LD_INT 2
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PPUSH
27398: CALL_OW 69
27402: ST_TO_ADDR
// if not tmp then
27403: LD_VAR 0 1
27407: NOT
27408: IFFALSE 27412
// exit ;
27410: GO 27438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27412: LD_VAR 0 1
27416: PUSH
27417: LD_INT 1
27419: PPUSH
27420: LD_VAR 0 1
27424: PPUSH
27425: CALL_OW 12
27429: ARRAY
27430: PPUSH
27431: LD_INT 60
27433: PPUSH
27434: CALL_OW 234
// end ;
27438: PPOPN 1
27440: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27441: LD_EXP 54
27445: PUSH
27446: LD_EXP 84
27450: AND
27451: IFFALSE 27550
27453: GO 27455
27455: DISABLE
27456: LD_INT 0
27458: PPUSH
27459: PPUSH
// begin enable ;
27460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27461: LD_ADDR_VAR 0 1
27465: PUSH
27466: LD_INT 22
27468: PUSH
27469: LD_OWVAR 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 61
27480: PUSH
27481: EMPTY
27482: LIST
27483: PUSH
27484: LD_INT 33
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: ST_TO_ADDR
// if not tmp then
27504: LD_VAR 0 1
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 27550
// for i in tmp do
27513: LD_ADDR_VAR 0 2
27517: PUSH
27518: LD_VAR 0 1
27522: PUSH
27523: FOR_IN
27524: IFFALSE 27548
// if IsControledBy ( i ) then
27526: LD_VAR 0 2
27530: PPUSH
27531: CALL_OW 312
27535: IFFALSE 27546
// ComUnlink ( i ) ;
27537: LD_VAR 0 2
27541: PPUSH
27542: CALL_OW 136
27546: GO 27523
27548: POP
27549: POP
// end ;
27550: PPOPN 2
27552: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27553: LD_EXP 54
27557: PUSH
27558: LD_EXP 85
27562: AND
27563: IFFALSE 27703
27565: GO 27567
27567: DISABLE
27568: LD_INT 0
27570: PPUSH
27571: PPUSH
// begin ToLua ( displayPowell(); ) ;
27572: LD_STRING displayPowell();
27574: PPUSH
27575: CALL_OW 559
// uc_side := 0 ;
27579: LD_ADDR_OWVAR 20
27583: PUSH
27584: LD_INT 0
27586: ST_TO_ADDR
// uc_nation := 2 ;
27587: LD_ADDR_OWVAR 21
27591: PUSH
27592: LD_INT 2
27594: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27595: LD_ADDR_OWVAR 37
27599: PUSH
27600: LD_INT 14
27602: ST_TO_ADDR
// vc_engine := engine_siberite ;
27603: LD_ADDR_OWVAR 39
27607: PUSH
27608: LD_INT 3
27610: ST_TO_ADDR
// vc_control := control_apeman ;
27611: LD_ADDR_OWVAR 38
27615: PUSH
27616: LD_INT 5
27618: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27619: LD_ADDR_OWVAR 40
27623: PUSH
27624: LD_INT 29
27626: ST_TO_ADDR
// un := CreateVehicle ;
27627: LD_ADDR_VAR 0 2
27631: PUSH
27632: CALL_OW 45
27636: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27637: LD_VAR 0 2
27641: PPUSH
27642: LD_INT 1
27644: PPUSH
27645: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27649: LD_INT 35
27651: PPUSH
27652: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_INT 22
27663: PUSH
27664: LD_OWVAR 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PPUSH
27673: CALL_OW 69
27677: PPUSH
27678: LD_VAR 0 2
27682: PPUSH
27683: CALL_OW 74
27687: PPUSH
27688: CALL_OW 115
// until IsDead ( un ) ;
27692: LD_VAR 0 2
27696: PPUSH
27697: CALL_OW 301
27701: IFFALSE 27649
// end ;
27703: PPOPN 2
27705: END
// every 0 0$1 trigger StreamModeActive and sStu do
27706: LD_EXP 54
27710: PUSH
27711: LD_EXP 93
27715: AND
27716: IFFALSE 27732
27718: GO 27720
27720: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27721: LD_STRING displayStucuk();
27723: PPUSH
27724: CALL_OW 559
// ResetFog ;
27728: CALL_OW 335
// end ;
27732: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27733: LD_EXP 54
27737: PUSH
27738: LD_EXP 86
27742: AND
27743: IFFALSE 27884
27745: GO 27747
27747: DISABLE
27748: LD_INT 0
27750: PPUSH
27751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27752: LD_ADDR_VAR 0 2
27756: PUSH
27757: LD_INT 22
27759: PUSH
27760: LD_OWVAR 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 21
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: ST_TO_ADDR
// if not tmp then
27788: LD_VAR 0 2
27792: NOT
27793: IFFALSE 27797
// exit ;
27795: GO 27884
// un := tmp [ rand ( 1 , tmp ) ] ;
27797: LD_ADDR_VAR 0 1
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: LD_INT 1
27809: PPUSH
27810: LD_VAR 0 2
27814: PPUSH
27815: CALL_OW 12
27819: ARRAY
27820: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27821: LD_VAR 0 1
27825: PPUSH
27826: LD_INT 0
27828: PPUSH
27829: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_OWVAR 3
27842: PUSH
27843: LD_VAR 0 1
27847: DIFF
27848: PPUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL_OW 74
27858: PPUSH
27859: CALL_OW 115
// wait ( 0 0$20 ) ;
27863: LD_INT 700
27865: PPUSH
27866: CALL_OW 67
// SetSide ( un , your_side ) ;
27870: LD_VAR 0 1
27874: PPUSH
27875: LD_OWVAR 2
27879: PPUSH
27880: CALL_OW 235
// end ;
27884: PPOPN 2
27886: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27887: LD_EXP 54
27891: PUSH
27892: LD_EXP 87
27896: AND
27897: IFFALSE 28003
27899: GO 27901
27901: DISABLE
27902: LD_INT 0
27904: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27905: LD_ADDR_VAR 0 1
27909: PUSH
27910: LD_INT 22
27912: PUSH
27913: LD_OWVAR 2
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: LD_INT 30
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 30
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PPUSH
27954: CALL_OW 69
27958: ST_TO_ADDR
// if not depot then
27959: LD_VAR 0 1
27963: NOT
27964: IFFALSE 27968
// exit ;
27966: GO 28003
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27968: LD_VAR 0 1
27972: PUSH
27973: LD_INT 1
27975: ARRAY
27976: PPUSH
27977: CALL_OW 250
27981: PPUSH
27982: LD_VAR 0 1
27986: PUSH
27987: LD_INT 1
27989: ARRAY
27990: PPUSH
27991: CALL_OW 251
27995: PPUSH
27996: LD_INT 70
27998: PPUSH
27999: CALL_OW 495
// end ;
28003: PPOPN 1
28005: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28006: LD_EXP 54
28010: PUSH
28011: LD_EXP 88
28015: AND
28016: IFFALSE 28227
28018: GO 28020
28020: DISABLE
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
28025: PPUSH
28026: PPUSH
28027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28028: LD_ADDR_VAR 0 5
28032: PUSH
28033: LD_INT 22
28035: PUSH
28036: LD_OWVAR 2
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 21
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PPUSH
28059: CALL_OW 69
28063: ST_TO_ADDR
// if not tmp then
28064: LD_VAR 0 5
28068: NOT
28069: IFFALSE 28073
// exit ;
28071: GO 28227
// for i in tmp do
28073: LD_ADDR_VAR 0 1
28077: PUSH
28078: LD_VAR 0 5
28082: PUSH
28083: FOR_IN
28084: IFFALSE 28225
// begin d := rand ( 0 , 5 ) ;
28086: LD_ADDR_VAR 0 4
28090: PUSH
28091: LD_INT 0
28093: PPUSH
28094: LD_INT 5
28096: PPUSH
28097: CALL_OW 12
28101: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28102: LD_ADDR_VAR 0 2
28106: PUSH
28107: LD_VAR 0 1
28111: PPUSH
28112: CALL_OW 250
28116: PPUSH
28117: LD_VAR 0 4
28121: PPUSH
28122: LD_INT 3
28124: PPUSH
28125: LD_INT 12
28127: PPUSH
28128: CALL_OW 12
28132: PPUSH
28133: CALL_OW 272
28137: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28138: LD_ADDR_VAR 0 3
28142: PUSH
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL_OW 251
28152: PPUSH
28153: LD_VAR 0 4
28157: PPUSH
28158: LD_INT 3
28160: PPUSH
28161: LD_INT 12
28163: PPUSH
28164: CALL_OW 12
28168: PPUSH
28169: CALL_OW 273
28173: ST_TO_ADDR
// if ValidHex ( x , y ) then
28174: LD_VAR 0 2
28178: PPUSH
28179: LD_VAR 0 3
28183: PPUSH
28184: CALL_OW 488
28188: IFFALSE 28223
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28190: LD_VAR 0 1
28194: PPUSH
28195: LD_VAR 0 2
28199: PPUSH
28200: LD_VAR 0 3
28204: PPUSH
28205: LD_INT 3
28207: PPUSH
28208: LD_INT 6
28210: PPUSH
28211: CALL_OW 12
28215: PPUSH
28216: LD_INT 1
28218: PPUSH
28219: CALL_OW 483
// end ;
28223: GO 28083
28225: POP
28226: POP
// end ;
28227: PPOPN 5
28229: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28230: LD_EXP 54
28234: PUSH
28235: LD_EXP 89
28239: AND
28240: IFFALSE 28334
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28249: LD_ADDR_VAR 0 2
28253: PUSH
28254: LD_INT 22
28256: PUSH
28257: LD_OWVAR 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 32
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 21
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL_OW 69
28295: ST_TO_ADDR
// if not tmp then
28296: LD_VAR 0 2
28300: NOT
28301: IFFALSE 28305
// exit ;
28303: GO 28334
// for i in tmp do
28305: LD_ADDR_VAR 0 1
28309: PUSH
28310: LD_VAR 0 2
28314: PUSH
28315: FOR_IN
28316: IFFALSE 28332
// SetFuel ( i , 0 ) ;
28318: LD_VAR 0 1
28322: PPUSH
28323: LD_INT 0
28325: PPUSH
28326: CALL_OW 240
28330: GO 28315
28332: POP
28333: POP
// end ;
28334: PPOPN 2
28336: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28337: LD_EXP 54
28341: PUSH
28342: LD_EXP 90
28346: AND
28347: IFFALSE 28413
28349: GO 28351
28351: DISABLE
28352: LD_INT 0
28354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28355: LD_ADDR_VAR 0 1
28359: PUSH
28360: LD_INT 22
28362: PUSH
28363: LD_OWVAR 2
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 30
28374: PUSH
28375: LD_INT 29
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PPUSH
28386: CALL_OW 69
28390: ST_TO_ADDR
// if not tmp then
28391: LD_VAR 0 1
28395: NOT
28396: IFFALSE 28400
// exit ;
28398: GO 28413
// DestroyUnit ( tmp [ 1 ] ) ;
28400: LD_VAR 0 1
28404: PUSH
28405: LD_INT 1
28407: ARRAY
28408: PPUSH
28409: CALL_OW 65
// end ;
28413: PPOPN 1
28415: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28416: LD_EXP 54
28420: PUSH
28421: LD_EXP 92
28425: AND
28426: IFFALSE 28555
28428: GO 28430
28430: DISABLE
28431: LD_INT 0
28433: PPUSH
// begin uc_side := 0 ;
28434: LD_ADDR_OWVAR 20
28438: PUSH
28439: LD_INT 0
28441: ST_TO_ADDR
// uc_nation := nation_arabian ;
28442: LD_ADDR_OWVAR 21
28446: PUSH
28447: LD_INT 2
28449: ST_TO_ADDR
// hc_gallery :=  ;
28450: LD_ADDR_OWVAR 33
28454: PUSH
28455: LD_STRING 
28457: ST_TO_ADDR
// hc_name :=  ;
28458: LD_ADDR_OWVAR 26
28462: PUSH
28463: LD_STRING 
28465: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28466: LD_INT 1
28468: PPUSH
28469: LD_INT 11
28471: PPUSH
28472: LD_INT 10
28474: PPUSH
28475: CALL_OW 380
// un := CreateHuman ;
28479: LD_ADDR_VAR 0 1
28483: PUSH
28484: CALL_OW 44
28488: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28489: LD_VAR 0 1
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28501: LD_INT 35
28503: PPUSH
28504: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_INT 22
28515: PUSH
28516: LD_OWVAR 2
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PPUSH
28525: CALL_OW 69
28529: PPUSH
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL_OW 74
28539: PPUSH
28540: CALL_OW 115
// until IsDead ( un ) ;
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 301
28553: IFFALSE 28501
// end ;
28555: PPOPN 1
28557: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28558: LD_EXP 54
28562: PUSH
28563: LD_EXP 94
28567: AND
28568: IFFALSE 28580
28570: GO 28572
28572: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28573: LD_STRING earthquake(getX(game), 0, 32)
28575: PPUSH
28576: CALL_OW 559
28580: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28581: LD_EXP 54
28585: PUSH
28586: LD_EXP 95
28590: AND
28591: IFFALSE 28682
28593: GO 28595
28595: DISABLE
28596: LD_INT 0
28598: PPUSH
// begin enable ;
28599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28600: LD_ADDR_VAR 0 1
28604: PUSH
28605: LD_INT 22
28607: PUSH
28608: LD_OWVAR 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 21
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 33
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: PPUSH
28642: CALL_OW 69
28646: ST_TO_ADDR
// if not tmp then
28647: LD_VAR 0 1
28651: NOT
28652: IFFALSE 28656
// exit ;
28654: GO 28682
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28656: LD_VAR 0 1
28660: PUSH
28661: LD_INT 1
28663: PPUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL_OW 12
28673: ARRAY
28674: PPUSH
28675: LD_INT 1
28677: PPUSH
28678: CALL_OW 234
// end ;
28682: PPOPN 1
28684: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28685: LD_EXP 54
28689: PUSH
28690: LD_EXP 96
28694: AND
28695: IFFALSE 28836
28697: GO 28699
28699: DISABLE
28700: LD_INT 0
28702: PPUSH
28703: PPUSH
28704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: LD_OWVAR 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 25
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PPUSH
28736: CALL_OW 69
28740: ST_TO_ADDR
// if not tmp then
28741: LD_VAR 0 3
28745: NOT
28746: IFFALSE 28750
// exit ;
28748: GO 28836
// un := tmp [ rand ( 1 , tmp ) ] ;
28750: LD_ADDR_VAR 0 2
28754: PUSH
28755: LD_VAR 0 3
28759: PUSH
28760: LD_INT 1
28762: PPUSH
28763: LD_VAR 0 3
28767: PPUSH
28768: CALL_OW 12
28772: ARRAY
28773: ST_TO_ADDR
// if Crawls ( un ) then
28774: LD_VAR 0 2
28778: PPUSH
28779: CALL_OW 318
28783: IFFALSE 28794
// ComWalk ( un ) ;
28785: LD_VAR 0 2
28789: PPUSH
28790: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28794: LD_VAR 0 2
28798: PPUSH
28799: LD_INT 9
28801: PPUSH
28802: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28806: LD_INT 28
28808: PPUSH
28809: LD_OWVAR 2
28813: PPUSH
28814: LD_INT 2
28816: PPUSH
28817: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28821: LD_INT 29
28823: PPUSH
28824: LD_OWVAR 2
28828: PPUSH
28829: LD_INT 2
28831: PPUSH
28832: CALL_OW 322
// end ;
28836: PPOPN 3
28838: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28839: LD_EXP 54
28843: PUSH
28844: LD_EXP 97
28848: AND
28849: IFFALSE 28960
28851: GO 28853
28853: DISABLE
28854: LD_INT 0
28856: PPUSH
28857: PPUSH
28858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28859: LD_ADDR_VAR 0 3
28863: PUSH
28864: LD_INT 22
28866: PUSH
28867: LD_OWVAR 2
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 25
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PPUSH
28890: CALL_OW 69
28894: ST_TO_ADDR
// if not tmp then
28895: LD_VAR 0 3
28899: NOT
28900: IFFALSE 28904
// exit ;
28902: GO 28960
// un := tmp [ rand ( 1 , tmp ) ] ;
28904: LD_ADDR_VAR 0 2
28908: PUSH
28909: LD_VAR 0 3
28913: PUSH
28914: LD_INT 1
28916: PPUSH
28917: LD_VAR 0 3
28921: PPUSH
28922: CALL_OW 12
28926: ARRAY
28927: ST_TO_ADDR
// if Crawls ( un ) then
28928: LD_VAR 0 2
28932: PPUSH
28933: CALL_OW 318
28937: IFFALSE 28948
// ComWalk ( un ) ;
28939: LD_VAR 0 2
28943: PPUSH
28944: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28948: LD_VAR 0 2
28952: PPUSH
28953: LD_INT 8
28955: PPUSH
28956: CALL_OW 336
// end ;
28960: PPOPN 3
28962: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28963: LD_EXP 54
28967: PUSH
28968: LD_EXP 98
28972: AND
28973: IFFALSE 29117
28975: GO 28977
28977: DISABLE
28978: LD_INT 0
28980: PPUSH
28981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28982: LD_ADDR_VAR 0 2
28986: PUSH
28987: LD_INT 22
28989: PUSH
28990: LD_OWVAR 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 21
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 34
29014: PUSH
29015: LD_INT 12
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 34
29024: PUSH
29025: LD_INT 51
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 34
29034: PUSH
29035: LD_INT 32
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: PPUSH
29053: CALL_OW 69
29057: ST_TO_ADDR
// if not tmp then
29058: LD_VAR 0 2
29062: NOT
29063: IFFALSE 29067
// exit ;
29065: GO 29117
// for i in tmp do
29067: LD_ADDR_VAR 0 1
29071: PUSH
29072: LD_VAR 0 2
29076: PUSH
29077: FOR_IN
29078: IFFALSE 29115
// if GetCargo ( i , mat_artifact ) = 0 then
29080: LD_VAR 0 1
29084: PPUSH
29085: LD_INT 4
29087: PPUSH
29088: CALL_OW 289
29092: PUSH
29093: LD_INT 0
29095: EQUAL
29096: IFFALSE 29113
// SetCargo ( i , mat_siberit , 100 ) ;
29098: LD_VAR 0 1
29102: PPUSH
29103: LD_INT 3
29105: PPUSH
29106: LD_INT 100
29108: PPUSH
29109: CALL_OW 290
29113: GO 29077
29115: POP
29116: POP
// end ;
29117: PPOPN 2
29119: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29120: LD_EXP 54
29124: PUSH
29125: LD_EXP 99
29129: AND
29130: IFFALSE 29313
29132: GO 29134
29134: DISABLE
29135: LD_INT 0
29137: PPUSH
29138: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29139: LD_ADDR_VAR 0 2
29143: PUSH
29144: LD_INT 22
29146: PUSH
29147: LD_OWVAR 2
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PPUSH
29156: CALL_OW 69
29160: ST_TO_ADDR
// if not tmp then
29161: LD_VAR 0 2
29165: NOT
29166: IFFALSE 29170
// exit ;
29168: GO 29313
// for i := 1 to 2 do
29170: LD_ADDR_VAR 0 1
29174: PUSH
29175: DOUBLE
29176: LD_INT 1
29178: DEC
29179: ST_TO_ADDR
29180: LD_INT 2
29182: PUSH
29183: FOR_TO
29184: IFFALSE 29311
// begin uc_side := your_side ;
29186: LD_ADDR_OWVAR 20
29190: PUSH
29191: LD_OWVAR 2
29195: ST_TO_ADDR
// uc_nation := nation_american ;
29196: LD_ADDR_OWVAR 21
29200: PUSH
29201: LD_INT 1
29203: ST_TO_ADDR
// vc_chassis := us_morphling ;
29204: LD_ADDR_OWVAR 37
29208: PUSH
29209: LD_INT 5
29211: ST_TO_ADDR
// vc_engine := engine_siberite ;
29212: LD_ADDR_OWVAR 39
29216: PUSH
29217: LD_INT 3
29219: ST_TO_ADDR
// vc_control := control_computer ;
29220: LD_ADDR_OWVAR 38
29224: PUSH
29225: LD_INT 3
29227: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29228: LD_ADDR_OWVAR 40
29232: PUSH
29233: LD_INT 10
29235: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29236: LD_VAR 0 2
29240: PUSH
29241: LD_INT 1
29243: ARRAY
29244: PPUSH
29245: CALL_OW 310
29249: NOT
29250: IFFALSE 29297
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29252: CALL_OW 45
29256: PPUSH
29257: LD_VAR 0 2
29261: PUSH
29262: LD_INT 1
29264: ARRAY
29265: PPUSH
29266: CALL_OW 250
29270: PPUSH
29271: LD_VAR 0 2
29275: PUSH
29276: LD_INT 1
29278: ARRAY
29279: PPUSH
29280: CALL_OW 251
29284: PPUSH
29285: LD_INT 12
29287: PPUSH
29288: LD_INT 1
29290: PPUSH
29291: CALL_OW 50
29295: GO 29309
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29297: CALL_OW 45
29301: PPUSH
29302: LD_INT 1
29304: PPUSH
29305: CALL_OW 51
// end ;
29309: GO 29183
29311: POP
29312: POP
// end ;
29313: PPOPN 2
29315: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29316: LD_EXP 54
29320: PUSH
29321: LD_EXP 100
29325: AND
29326: IFFALSE 29548
29328: GO 29330
29330: DISABLE
29331: LD_INT 0
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29339: LD_ADDR_VAR 0 6
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_OWVAR 2
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 21
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 23
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: LIST
29387: PPUSH
29388: CALL_OW 69
29392: ST_TO_ADDR
// if not tmp then
29393: LD_VAR 0 6
29397: NOT
29398: IFFALSE 29402
// exit ;
29400: GO 29548
// s1 := rand ( 1 , 4 ) ;
29402: LD_ADDR_VAR 0 2
29406: PUSH
29407: LD_INT 1
29409: PPUSH
29410: LD_INT 4
29412: PPUSH
29413: CALL_OW 12
29417: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29418: LD_ADDR_VAR 0 4
29422: PUSH
29423: LD_VAR 0 6
29427: PUSH
29428: LD_INT 1
29430: ARRAY
29431: PPUSH
29432: LD_VAR 0 2
29436: PPUSH
29437: CALL_OW 259
29441: ST_TO_ADDR
// if s1 = 1 then
29442: LD_VAR 0 2
29446: PUSH
29447: LD_INT 1
29449: EQUAL
29450: IFFALSE 29470
// s2 := rand ( 2 , 4 ) else
29452: LD_ADDR_VAR 0 3
29456: PUSH
29457: LD_INT 2
29459: PPUSH
29460: LD_INT 4
29462: PPUSH
29463: CALL_OW 12
29467: ST_TO_ADDR
29468: GO 29478
// s2 := 1 ;
29470: LD_ADDR_VAR 0 3
29474: PUSH
29475: LD_INT 1
29477: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29478: LD_ADDR_VAR 0 5
29482: PUSH
29483: LD_VAR 0 6
29487: PUSH
29488: LD_INT 1
29490: ARRAY
29491: PPUSH
29492: LD_VAR 0 3
29496: PPUSH
29497: CALL_OW 259
29501: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29502: LD_VAR 0 6
29506: PUSH
29507: LD_INT 1
29509: ARRAY
29510: PPUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: LD_VAR 0 5
29520: PPUSH
29521: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29525: LD_VAR 0 6
29529: PUSH
29530: LD_INT 1
29532: ARRAY
29533: PPUSH
29534: LD_VAR 0 3
29538: PPUSH
29539: LD_VAR 0 4
29543: PPUSH
29544: CALL_OW 237
// end ;
29548: PPOPN 6
29550: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29551: LD_EXP 54
29555: PUSH
29556: LD_EXP 101
29560: AND
29561: IFFALSE 29640
29563: GO 29565
29565: DISABLE
29566: LD_INT 0
29568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29569: LD_ADDR_VAR 0 1
29573: PUSH
29574: LD_INT 22
29576: PUSH
29577: LD_OWVAR 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 30
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL_OW 69
29604: ST_TO_ADDR
// if not tmp then
29605: LD_VAR 0 1
29609: NOT
29610: IFFALSE 29614
// exit ;
29612: GO 29640
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29614: LD_VAR 0 1
29618: PUSH
29619: LD_INT 1
29621: PPUSH
29622: LD_VAR 0 1
29626: PPUSH
29627: CALL_OW 12
29631: ARRAY
29632: PPUSH
29633: LD_INT 1
29635: PPUSH
29636: CALL_OW 234
// end ;
29640: PPOPN 1
29642: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29643: LD_EXP 54
29647: PUSH
29648: LD_EXP 102
29652: AND
29653: IFFALSE 29765
29655: GO 29657
29657: DISABLE
29658: LD_INT 0
29660: PPUSH
29661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29662: LD_ADDR_VAR 0 2
29666: PUSH
29667: LD_INT 22
29669: PUSH
29670: LD_OWVAR 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 2
29681: PUSH
29682: LD_INT 30
29684: PUSH
29685: LD_INT 27
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 30
29694: PUSH
29695: LD_INT 26
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 28
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PPUSH
29722: CALL_OW 69
29726: ST_TO_ADDR
// if not tmp then
29727: LD_VAR 0 2
29731: NOT
29732: IFFALSE 29736
// exit ;
29734: GO 29765
// for i in tmp do
29736: LD_ADDR_VAR 0 1
29740: PUSH
29741: LD_VAR 0 2
29745: PUSH
29746: FOR_IN
29747: IFFALSE 29763
// SetLives ( i , 1 ) ;
29749: LD_VAR 0 1
29753: PPUSH
29754: LD_INT 1
29756: PPUSH
29757: CALL_OW 234
29761: GO 29746
29763: POP
29764: POP
// end ;
29765: PPOPN 2
29767: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29768: LD_EXP 54
29772: PUSH
29773: LD_EXP 103
29777: AND
29778: IFFALSE 30065
29780: GO 29782
29782: DISABLE
29783: LD_INT 0
29785: PPUSH
29786: PPUSH
29787: PPUSH
// begin i := rand ( 1 , 7 ) ;
29788: LD_ADDR_VAR 0 1
29792: PUSH
29793: LD_INT 1
29795: PPUSH
29796: LD_INT 7
29798: PPUSH
29799: CALL_OW 12
29803: ST_TO_ADDR
// case i of 1 :
29804: LD_VAR 0 1
29808: PUSH
29809: LD_INT 1
29811: DOUBLE
29812: EQUAL
29813: IFTRUE 29817
29815: GO 29827
29817: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29818: LD_STRING earthquake(getX(game), 0, 32)
29820: PPUSH
29821: CALL_OW 559
29825: GO 30065
29827: LD_INT 2
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29849
29835: POP
// begin ToLua ( displayStucuk(); ) ;
29836: LD_STRING displayStucuk();
29838: PPUSH
29839: CALL_OW 559
// ResetFog ;
29843: CALL_OW 335
// end ; 3 :
29847: GO 30065
29849: LD_INT 3
29851: DOUBLE
29852: EQUAL
29853: IFTRUE 29857
29855: GO 29961
29857: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29858: LD_ADDR_VAR 0 2
29862: PUSH
29863: LD_INT 22
29865: PUSH
29866: LD_OWVAR 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 25
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PPUSH
29889: CALL_OW 69
29893: ST_TO_ADDR
// if not tmp then
29894: LD_VAR 0 2
29898: NOT
29899: IFFALSE 29903
// exit ;
29901: GO 30065
// un := tmp [ rand ( 1 , tmp ) ] ;
29903: LD_ADDR_VAR 0 3
29907: PUSH
29908: LD_VAR 0 2
29912: PUSH
29913: LD_INT 1
29915: PPUSH
29916: LD_VAR 0 2
29920: PPUSH
29921: CALL_OW 12
29925: ARRAY
29926: ST_TO_ADDR
// if Crawls ( un ) then
29927: LD_VAR 0 3
29931: PPUSH
29932: CALL_OW 318
29936: IFFALSE 29947
// ComWalk ( un ) ;
29938: LD_VAR 0 3
29942: PPUSH
29943: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29947: LD_VAR 0 3
29951: PPUSH
29952: LD_INT 8
29954: PPUSH
29955: CALL_OW 336
// end ; 4 :
29959: GO 30065
29961: LD_INT 4
29963: DOUBLE
29964: EQUAL
29965: IFTRUE 29969
29967: GO 30043
29969: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29970: LD_ADDR_VAR 0 2
29974: PUSH
29975: LD_INT 22
29977: PUSH
29978: LD_OWVAR 2
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 30
29989: PUSH
29990: LD_INT 29
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PPUSH
30001: CALL_OW 69
30005: ST_TO_ADDR
// if not tmp then
30006: LD_VAR 0 2
30010: NOT
30011: IFFALSE 30015
// exit ;
30013: GO 30065
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30015: LD_VAR 0 2
30019: PUSH
30020: LD_INT 1
30022: ARRAY
30023: PPUSH
30024: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30028: LD_VAR 0 2
30032: PUSH
30033: LD_INT 1
30035: ARRAY
30036: PPUSH
30037: CALL_OW 65
// end ; 5 .. 7 :
30041: GO 30065
30043: LD_INT 5
30045: DOUBLE
30046: GREATEREQUAL
30047: IFFALSE 30055
30049: LD_INT 7
30051: DOUBLE
30052: LESSEQUAL
30053: IFTRUE 30057
30055: GO 30064
30057: POP
// StreamSibBomb ; end ;
30058: CALL 26302 0 0
30062: GO 30065
30064: POP
// end ;
30065: PPOPN 3
30067: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30068: LD_EXP 54
30072: PUSH
30073: LD_EXP 104
30077: AND
30078: IFFALSE 30234
30080: GO 30082
30082: DISABLE
30083: LD_INT 0
30085: PPUSH
30086: PPUSH
30087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30088: LD_ADDR_VAR 0 2
30092: PUSH
30093: LD_INT 81
30095: PUSH
30096: LD_OWVAR 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: LD_INT 21
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 21
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PPUSH
30137: CALL_OW 69
30141: ST_TO_ADDR
// if not tmp then
30142: LD_VAR 0 2
30146: NOT
30147: IFFALSE 30151
// exit ;
30149: GO 30234
// p := 0 ;
30151: LD_ADDR_VAR 0 3
30155: PUSH
30156: LD_INT 0
30158: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30159: LD_INT 35
30161: PPUSH
30162: CALL_OW 67
// p := p + 1 ;
30166: LD_ADDR_VAR 0 3
30170: PUSH
30171: LD_VAR 0 3
30175: PUSH
30176: LD_INT 1
30178: PLUS
30179: ST_TO_ADDR
// for i in tmp do
30180: LD_ADDR_VAR 0 1
30184: PUSH
30185: LD_VAR 0 2
30189: PUSH
30190: FOR_IN
30191: IFFALSE 30222
// if GetLives ( i ) < 1000 then
30193: LD_VAR 0 1
30197: PPUSH
30198: CALL_OW 256
30202: PUSH
30203: LD_INT 1000
30205: LESS
30206: IFFALSE 30220
// SetLives ( i , 1000 ) ;
30208: LD_VAR 0 1
30212: PPUSH
30213: LD_INT 1000
30215: PPUSH
30216: CALL_OW 234
30220: GO 30190
30222: POP
30223: POP
// until p > 20 ;
30224: LD_VAR 0 3
30228: PUSH
30229: LD_INT 20
30231: GREATER
30232: IFFALSE 30159
// end ;
30234: PPOPN 3
30236: END
// every 0 0$1 trigger StreamModeActive and sTime do
30237: LD_EXP 54
30241: PUSH
30242: LD_EXP 105
30246: AND
30247: IFFALSE 30282
30249: GO 30251
30251: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30252: LD_INT 28
30254: PPUSH
30255: LD_OWVAR 2
30259: PPUSH
30260: LD_INT 2
30262: PPUSH
30263: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30267: LD_INT 30
30269: PPUSH
30270: LD_OWVAR 2
30274: PPUSH
30275: LD_INT 2
30277: PPUSH
30278: CALL_OW 322
// end ;
30282: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30283: LD_EXP 54
30287: PUSH
30288: LD_EXP 106
30292: AND
30293: IFFALSE 30414
30295: GO 30297
30297: DISABLE
30298: LD_INT 0
30300: PPUSH
30301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30302: LD_ADDR_VAR 0 2
30306: PUSH
30307: LD_INT 22
30309: PUSH
30310: LD_OWVAR 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 21
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: LD_INT 23
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 69
30355: ST_TO_ADDR
// if not tmp then
30356: LD_VAR 0 2
30360: NOT
30361: IFFALSE 30365
// exit ;
30363: GO 30414
// for i in tmp do
30365: LD_ADDR_VAR 0 1
30369: PUSH
30370: LD_VAR 0 2
30374: PUSH
30375: FOR_IN
30376: IFFALSE 30412
// begin if Crawls ( i ) then
30378: LD_VAR 0 1
30382: PPUSH
30383: CALL_OW 318
30387: IFFALSE 30398
// ComWalk ( i ) ;
30389: LD_VAR 0 1
30393: PPUSH
30394: CALL_OW 138
// SetClass ( i , 2 ) ;
30398: LD_VAR 0 1
30402: PPUSH
30403: LD_INT 2
30405: PPUSH
30406: CALL_OW 336
// end ;
30410: GO 30375
30412: POP
30413: POP
// end ;
30414: PPOPN 2
30416: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30417: LD_EXP 54
30421: PUSH
30422: LD_EXP 107
30426: AND
30427: IFFALSE 30715
30429: GO 30431
30431: DISABLE
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
30436: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30437: LD_OWVAR 2
30441: PPUSH
30442: LD_INT 9
30444: PPUSH
30445: LD_INT 1
30447: PPUSH
30448: LD_INT 1
30450: PPUSH
30451: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30455: LD_INT 9
30457: PPUSH
30458: LD_OWVAR 2
30462: PPUSH
30463: CALL_OW 343
// uc_side := 9 ;
30467: LD_ADDR_OWVAR 20
30471: PUSH
30472: LD_INT 9
30474: ST_TO_ADDR
// uc_nation := 2 ;
30475: LD_ADDR_OWVAR 21
30479: PUSH
30480: LD_INT 2
30482: ST_TO_ADDR
// hc_name := Dark Warrior ;
30483: LD_ADDR_OWVAR 26
30487: PUSH
30488: LD_STRING Dark Warrior
30490: ST_TO_ADDR
// hc_gallery :=  ;
30491: LD_ADDR_OWVAR 33
30495: PUSH
30496: LD_STRING 
30498: ST_TO_ADDR
// hc_noskilllimit := true ;
30499: LD_ADDR_OWVAR 76
30503: PUSH
30504: LD_INT 1
30506: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30507: LD_ADDR_OWVAR 31
30511: PUSH
30512: LD_INT 30
30514: PUSH
30515: LD_INT 30
30517: PUSH
30518: LD_INT 30
30520: PUSH
30521: LD_INT 30
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: ST_TO_ADDR
// un := CreateHuman ;
30530: LD_ADDR_VAR 0 3
30534: PUSH
30535: CALL_OW 44
30539: ST_TO_ADDR
// hc_noskilllimit := false ;
30540: LD_ADDR_OWVAR 76
30544: PUSH
30545: LD_INT 0
30547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30548: LD_VAR 0 3
30552: PPUSH
30553: LD_INT 1
30555: PPUSH
30556: CALL_OW 51
// ToLua ( playRanger() ) ;
30560: LD_STRING playRanger()
30562: PPUSH
30563: CALL_OW 559
// p := 0 ;
30567: LD_ADDR_VAR 0 2
30571: PUSH
30572: LD_INT 0
30574: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30575: LD_INT 35
30577: PPUSH
30578: CALL_OW 67
// p := p + 1 ;
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_VAR 0 2
30591: PUSH
30592: LD_INT 1
30594: PLUS
30595: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30596: LD_VAR 0 3
30600: PPUSH
30601: CALL_OW 256
30605: PUSH
30606: LD_INT 1000
30608: LESS
30609: IFFALSE 30623
// SetLives ( un , 1000 ) ;
30611: LD_VAR 0 3
30615: PPUSH
30616: LD_INT 1000
30618: PPUSH
30619: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30623: LD_VAR 0 3
30627: PPUSH
30628: LD_INT 81
30630: PUSH
30631: LD_OWVAR 2
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 91
30642: PUSH
30643: LD_VAR 0 3
30647: PUSH
30648: LD_INT 30
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 69
30664: PPUSH
30665: LD_VAR 0 3
30669: PPUSH
30670: CALL_OW 74
30674: PPUSH
30675: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30679: LD_VAR 0 2
30683: PUSH
30684: LD_INT 80
30686: GREATER
30687: PUSH
30688: LD_VAR 0 3
30692: PPUSH
30693: CALL_OW 301
30697: OR
30698: IFFALSE 30575
// if un then
30700: LD_VAR 0 3
30704: IFFALSE 30715
// RemoveUnit ( un ) ;
30706: LD_VAR 0 3
30710: PPUSH
30711: CALL_OW 64
// end ;
30715: PPOPN 3
30717: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30718: LD_EXP 108
30722: IFFALSE 30838
30724: GO 30726
30726: DISABLE
30727: LD_INT 0
30729: PPUSH
30730: PPUSH
30731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30732: LD_ADDR_VAR 0 2
30736: PUSH
30737: LD_INT 81
30739: PUSH
30740: LD_OWVAR 2
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 21
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PPUSH
30763: CALL_OW 69
30767: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30768: LD_STRING playComputer()
30770: PPUSH
30771: CALL_OW 559
// if not tmp then
30775: LD_VAR 0 2
30779: NOT
30780: IFFALSE 30784
// exit ;
30782: GO 30838
// for i in tmp do
30784: LD_ADDR_VAR 0 1
30788: PUSH
30789: LD_VAR 0 2
30793: PUSH
30794: FOR_IN
30795: IFFALSE 30836
// for j := 1 to 4 do
30797: LD_ADDR_VAR 0 3
30801: PUSH
30802: DOUBLE
30803: LD_INT 1
30805: DEC
30806: ST_TO_ADDR
30807: LD_INT 4
30809: PUSH
30810: FOR_TO
30811: IFFALSE 30832
// SetSkill ( i , j , 10 ) ;
30813: LD_VAR 0 1
30817: PPUSH
30818: LD_VAR 0 3
30822: PPUSH
30823: LD_INT 10
30825: PPUSH
30826: CALL_OW 237
30830: GO 30810
30832: POP
30833: POP
30834: GO 30794
30836: POP
30837: POP
// end ;
30838: PPOPN 3
30840: END
// every 0 0$1 trigger s30 do var i , tmp ;
30841: LD_EXP 109
30845: IFFALSE 30914
30847: GO 30849
30849: DISABLE
30850: LD_INT 0
30852: PPUSH
30853: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: LD_INT 22
30861: PUSH
30862: LD_OWVAR 2
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PPUSH
30871: CALL_OW 69
30875: ST_TO_ADDR
// if not tmp then
30876: LD_VAR 0 2
30880: NOT
30881: IFFALSE 30885
// exit ;
30883: GO 30914
// for i in tmp do
30885: LD_ADDR_VAR 0 1
30889: PUSH
30890: LD_VAR 0 2
30894: PUSH
30895: FOR_IN
30896: IFFALSE 30912
// SetLives ( i , 300 ) ;
30898: LD_VAR 0 1
30902: PPUSH
30903: LD_INT 300
30905: PPUSH
30906: CALL_OW 234
30910: GO 30895
30912: POP
30913: POP
// end ;
30914: PPOPN 2
30916: END
// every 0 0$1 trigger s60 do var i , tmp ;
30917: LD_EXP 110
30921: IFFALSE 30990
30923: GO 30925
30925: DISABLE
30926: LD_INT 0
30928: PPUSH
30929: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30930: LD_ADDR_VAR 0 2
30934: PUSH
30935: LD_INT 22
30937: PUSH
30938: LD_OWVAR 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PPUSH
30947: CALL_OW 69
30951: ST_TO_ADDR
// if not tmp then
30952: LD_VAR 0 2
30956: NOT
30957: IFFALSE 30961
// exit ;
30959: GO 30990
// for i in tmp do
30961: LD_ADDR_VAR 0 1
30965: PUSH
30966: LD_VAR 0 2
30970: PUSH
30971: FOR_IN
30972: IFFALSE 30988
// SetLives ( i , 600 ) ;
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_INT 600
30981: PPUSH
30982: CALL_OW 234
30986: GO 30971
30988: POP
30989: POP
// end ;
30990: PPOPN 2
30992: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30993: LD_INT 0
30995: PPUSH
// case cmd of 301 :
30996: LD_VAR 0 1
31000: PUSH
31001: LD_INT 301
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31041
31009: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31010: LD_VAR 0 6
31014: PPUSH
31015: LD_VAR 0 7
31019: PPUSH
31020: LD_VAR 0 8
31024: PPUSH
31025: LD_VAR 0 4
31029: PPUSH
31030: LD_VAR 0 5
31034: PPUSH
31035: CALL 32242 0 5
31039: GO 31162
31041: LD_INT 302
31043: DOUBLE
31044: EQUAL
31045: IFTRUE 31049
31047: GO 31086
31049: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31050: LD_VAR 0 6
31054: PPUSH
31055: LD_VAR 0 7
31059: PPUSH
31060: LD_VAR 0 8
31064: PPUSH
31065: LD_VAR 0 9
31069: PPUSH
31070: LD_VAR 0 4
31074: PPUSH
31075: LD_VAR 0 5
31079: PPUSH
31080: CALL 32333 0 6
31084: GO 31162
31086: LD_INT 303
31088: DOUBLE
31089: EQUAL
31090: IFTRUE 31094
31092: GO 31131
31094: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31095: LD_VAR 0 6
31099: PPUSH
31100: LD_VAR 0 7
31104: PPUSH
31105: LD_VAR 0 8
31109: PPUSH
31110: LD_VAR 0 9
31114: PPUSH
31115: LD_VAR 0 4
31119: PPUSH
31120: LD_VAR 0 5
31124: PPUSH
31125: CALL 31167 0 6
31129: GO 31162
31131: LD_INT 304
31133: DOUBLE
31134: EQUAL
31135: IFTRUE 31139
31137: GO 31161
31139: POP
// hHackTeleport ( unit , x , y ) ; end ;
31140: LD_VAR 0 2
31144: PPUSH
31145: LD_VAR 0 4
31149: PPUSH
31150: LD_VAR 0 5
31154: PPUSH
31155: CALL 32926 0 3
31159: GO 31162
31161: POP
// end ;
31162: LD_VAR 0 12
31166: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31167: LD_INT 0
31169: PPUSH
31170: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31171: LD_VAR 0 1
31175: PUSH
31176: LD_INT 1
31178: LESS
31179: PUSH
31180: LD_VAR 0 1
31184: PUSH
31185: LD_INT 3
31187: GREATER
31188: OR
31189: PUSH
31190: LD_VAR 0 5
31194: PPUSH
31195: LD_VAR 0 6
31199: PPUSH
31200: CALL_OW 428
31204: OR
31205: IFFALSE 31209
// exit ;
31207: GO 31929
// uc_side := your_side ;
31209: LD_ADDR_OWVAR 20
31213: PUSH
31214: LD_OWVAR 2
31218: ST_TO_ADDR
// uc_nation := nation ;
31219: LD_ADDR_OWVAR 21
31223: PUSH
31224: LD_VAR 0 1
31228: ST_TO_ADDR
// bc_level = 1 ;
31229: LD_ADDR_OWVAR 43
31233: PUSH
31234: LD_INT 1
31236: ST_TO_ADDR
// case btype of 1 :
31237: LD_VAR 0 2
31241: PUSH
31242: LD_INT 1
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31250
31248: GO 31261
31250: POP
// bc_type := b_depot ; 2 :
31251: LD_ADDR_OWVAR 42
31255: PUSH
31256: LD_INT 0
31258: ST_TO_ADDR
31259: GO 31873
31261: LD_INT 2
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31269
31267: GO 31280
31269: POP
// bc_type := b_warehouse ; 3 :
31270: LD_ADDR_OWVAR 42
31274: PUSH
31275: LD_INT 1
31277: ST_TO_ADDR
31278: GO 31873
31280: LD_INT 3
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31299
31288: POP
// bc_type := b_lab ; 4 .. 9 :
31289: LD_ADDR_OWVAR 42
31293: PUSH
31294: LD_INT 6
31296: ST_TO_ADDR
31297: GO 31873
31299: LD_INT 4
31301: DOUBLE
31302: GREATEREQUAL
31303: IFFALSE 31311
31305: LD_INT 9
31307: DOUBLE
31308: LESSEQUAL
31309: IFTRUE 31313
31311: GO 31365
31313: POP
// begin bc_type := b_lab_half ;
31314: LD_ADDR_OWVAR 42
31318: PUSH
31319: LD_INT 7
31321: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31322: LD_ADDR_OWVAR 44
31326: PUSH
31327: LD_INT 10
31329: PUSH
31330: LD_INT 11
31332: PUSH
31333: LD_INT 12
31335: PUSH
31336: LD_INT 15
31338: PUSH
31339: LD_INT 14
31341: PUSH
31342: LD_INT 13
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: PUSH
31353: LD_VAR 0 2
31357: PUSH
31358: LD_INT 3
31360: MINUS
31361: ARRAY
31362: ST_TO_ADDR
// end ; 10 .. 13 :
31363: GO 31873
31365: LD_INT 10
31367: DOUBLE
31368: GREATEREQUAL
31369: IFFALSE 31377
31371: LD_INT 13
31373: DOUBLE
31374: LESSEQUAL
31375: IFTRUE 31379
31377: GO 31456
31379: POP
// begin bc_type := b_lab_full ;
31380: LD_ADDR_OWVAR 42
31384: PUSH
31385: LD_INT 8
31387: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31388: LD_ADDR_OWVAR 44
31392: PUSH
31393: LD_INT 10
31395: PUSH
31396: LD_INT 12
31398: PUSH
31399: LD_INT 14
31401: PUSH
31402: LD_INT 13
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: PUSH
31411: LD_VAR 0 2
31415: PUSH
31416: LD_INT 9
31418: MINUS
31419: ARRAY
31420: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31421: LD_ADDR_OWVAR 45
31425: PUSH
31426: LD_INT 11
31428: PUSH
31429: LD_INT 15
31431: PUSH
31432: LD_INT 12
31434: PUSH
31435: LD_INT 15
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: PUSH
31444: LD_VAR 0 2
31448: PUSH
31449: LD_INT 9
31451: MINUS
31452: ARRAY
31453: ST_TO_ADDR
// end ; 14 :
31454: GO 31873
31456: LD_INT 14
31458: DOUBLE
31459: EQUAL
31460: IFTRUE 31464
31462: GO 31475
31464: POP
// bc_type := b_workshop ; 15 :
31465: LD_ADDR_OWVAR 42
31469: PUSH
31470: LD_INT 2
31472: ST_TO_ADDR
31473: GO 31873
31475: LD_INT 15
31477: DOUBLE
31478: EQUAL
31479: IFTRUE 31483
31481: GO 31494
31483: POP
// bc_type := b_factory ; 16 :
31484: LD_ADDR_OWVAR 42
31488: PUSH
31489: LD_INT 3
31491: ST_TO_ADDR
31492: GO 31873
31494: LD_INT 16
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31513
31502: POP
// bc_type := b_ext_gun ; 17 :
31503: LD_ADDR_OWVAR 42
31507: PUSH
31508: LD_INT 17
31510: ST_TO_ADDR
31511: GO 31873
31513: LD_INT 17
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31521
31519: GO 31549
31521: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31522: LD_ADDR_OWVAR 42
31526: PUSH
31527: LD_INT 19
31529: PUSH
31530: LD_INT 23
31532: PUSH
31533: LD_INT 19
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: PUSH
31541: LD_VAR 0 1
31545: ARRAY
31546: ST_TO_ADDR
31547: GO 31873
31549: LD_INT 18
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31568
31557: POP
// bc_type := b_ext_radar ; 19 :
31558: LD_ADDR_OWVAR 42
31562: PUSH
31563: LD_INT 20
31565: ST_TO_ADDR
31566: GO 31873
31568: LD_INT 19
31570: DOUBLE
31571: EQUAL
31572: IFTRUE 31576
31574: GO 31587
31576: POP
// bc_type := b_ext_radio ; 20 :
31577: LD_ADDR_OWVAR 42
31581: PUSH
31582: LD_INT 22
31584: ST_TO_ADDR
31585: GO 31873
31587: LD_INT 20
31589: DOUBLE
31590: EQUAL
31591: IFTRUE 31595
31593: GO 31606
31595: POP
// bc_type := b_ext_siberium ; 21 :
31596: LD_ADDR_OWVAR 42
31600: PUSH
31601: LD_INT 21
31603: ST_TO_ADDR
31604: GO 31873
31606: LD_INT 21
31608: DOUBLE
31609: EQUAL
31610: IFTRUE 31614
31612: GO 31625
31614: POP
// bc_type := b_ext_computer ; 22 :
31615: LD_ADDR_OWVAR 42
31619: PUSH
31620: LD_INT 24
31622: ST_TO_ADDR
31623: GO 31873
31625: LD_INT 22
31627: DOUBLE
31628: EQUAL
31629: IFTRUE 31633
31631: GO 31644
31633: POP
// bc_type := b_ext_track ; 23 :
31634: LD_ADDR_OWVAR 42
31638: PUSH
31639: LD_INT 16
31641: ST_TO_ADDR
31642: GO 31873
31644: LD_INT 23
31646: DOUBLE
31647: EQUAL
31648: IFTRUE 31652
31650: GO 31663
31652: POP
// bc_type := b_ext_laser ; 24 :
31653: LD_ADDR_OWVAR 42
31657: PUSH
31658: LD_INT 25
31660: ST_TO_ADDR
31661: GO 31873
31663: LD_INT 24
31665: DOUBLE
31666: EQUAL
31667: IFTRUE 31671
31669: GO 31682
31671: POP
// bc_type := b_control_tower ; 25 :
31672: LD_ADDR_OWVAR 42
31676: PUSH
31677: LD_INT 36
31679: ST_TO_ADDR
31680: GO 31873
31682: LD_INT 25
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31701
31690: POP
// bc_type := b_breastwork ; 26 :
31691: LD_ADDR_OWVAR 42
31695: PUSH
31696: LD_INT 31
31698: ST_TO_ADDR
31699: GO 31873
31701: LD_INT 26
31703: DOUBLE
31704: EQUAL
31705: IFTRUE 31709
31707: GO 31720
31709: POP
// bc_type := b_bunker ; 27 :
31710: LD_ADDR_OWVAR 42
31714: PUSH
31715: LD_INT 32
31717: ST_TO_ADDR
31718: GO 31873
31720: LD_INT 27
31722: DOUBLE
31723: EQUAL
31724: IFTRUE 31728
31726: GO 31739
31728: POP
// bc_type := b_turret ; 28 :
31729: LD_ADDR_OWVAR 42
31733: PUSH
31734: LD_INT 33
31736: ST_TO_ADDR
31737: GO 31873
31739: LD_INT 28
31741: DOUBLE
31742: EQUAL
31743: IFTRUE 31747
31745: GO 31758
31747: POP
// bc_type := b_armoury ; 29 :
31748: LD_ADDR_OWVAR 42
31752: PUSH
31753: LD_INT 4
31755: ST_TO_ADDR
31756: GO 31873
31758: LD_INT 29
31760: DOUBLE
31761: EQUAL
31762: IFTRUE 31766
31764: GO 31777
31766: POP
// bc_type := b_barracks ; 30 :
31767: LD_ADDR_OWVAR 42
31771: PUSH
31772: LD_INT 5
31774: ST_TO_ADDR
31775: GO 31873
31777: LD_INT 30
31779: DOUBLE
31780: EQUAL
31781: IFTRUE 31785
31783: GO 31796
31785: POP
// bc_type := b_solar_power ; 31 :
31786: LD_ADDR_OWVAR 42
31790: PUSH
31791: LD_INT 27
31793: ST_TO_ADDR
31794: GO 31873
31796: LD_INT 31
31798: DOUBLE
31799: EQUAL
31800: IFTRUE 31804
31802: GO 31815
31804: POP
// bc_type := b_oil_power ; 32 :
31805: LD_ADDR_OWVAR 42
31809: PUSH
31810: LD_INT 26
31812: ST_TO_ADDR
31813: GO 31873
31815: LD_INT 32
31817: DOUBLE
31818: EQUAL
31819: IFTRUE 31823
31821: GO 31834
31823: POP
// bc_type := b_siberite_power ; 33 :
31824: LD_ADDR_OWVAR 42
31828: PUSH
31829: LD_INT 28
31831: ST_TO_ADDR
31832: GO 31873
31834: LD_INT 33
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31842
31840: GO 31853
31842: POP
// bc_type := b_oil_mine ; 34 :
31843: LD_ADDR_OWVAR 42
31847: PUSH
31848: LD_INT 29
31850: ST_TO_ADDR
31851: GO 31873
31853: LD_INT 34
31855: DOUBLE
31856: EQUAL
31857: IFTRUE 31861
31859: GO 31872
31861: POP
// bc_type := b_siberite_mine ; end ;
31862: LD_ADDR_OWVAR 42
31866: PUSH
31867: LD_INT 30
31869: ST_TO_ADDR
31870: GO 31873
31872: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31873: LD_ADDR_VAR 0 8
31877: PUSH
31878: LD_VAR 0 5
31882: PPUSH
31883: LD_VAR 0 6
31887: PPUSH
31888: LD_VAR 0 3
31892: PPUSH
31893: CALL_OW 47
31897: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31898: LD_OWVAR 42
31902: PUSH
31903: LD_INT 32
31905: PUSH
31906: LD_INT 33
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: IN
31913: IFFALSE 31929
// PlaceWeaponTurret ( b , weapon ) ;
31915: LD_VAR 0 8
31919: PPUSH
31920: LD_VAR 0 4
31924: PPUSH
31925: CALL_OW 431
// end ;
31929: LD_VAR 0 7
31933: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31934: LD_INT 0
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31940: LD_ADDR_VAR 0 4
31944: PUSH
31945: LD_INT 22
31947: PUSH
31948: LD_OWVAR 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 30
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 30
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PPUSH
31989: CALL_OW 69
31993: ST_TO_ADDR
// if not tmp then
31994: LD_VAR 0 4
31998: NOT
31999: IFFALSE 32003
// exit ;
32001: GO 32062
// for i in tmp do
32003: LD_ADDR_VAR 0 2
32007: PUSH
32008: LD_VAR 0 4
32012: PUSH
32013: FOR_IN
32014: IFFALSE 32060
// for j = 1 to 3 do
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: DOUBLE
32022: LD_INT 1
32024: DEC
32025: ST_TO_ADDR
32026: LD_INT 3
32028: PUSH
32029: FOR_TO
32030: IFFALSE 32056
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32032: LD_VAR 0 2
32036: PPUSH
32037: CALL_OW 274
32041: PPUSH
32042: LD_VAR 0 3
32046: PPUSH
32047: LD_INT 99999
32049: PPUSH
32050: CALL_OW 277
32054: GO 32029
32056: POP
32057: POP
32058: GO 32013
32060: POP
32061: POP
// end ;
32062: LD_VAR 0 1
32066: RET
// export function hHackSetLevel10 ; var i , j ; begin
32067: LD_INT 0
32069: PPUSH
32070: PPUSH
32071: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32072: LD_ADDR_VAR 0 2
32076: PUSH
32077: LD_INT 21
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PPUSH
32087: CALL_OW 69
32091: PUSH
32092: FOR_IN
32093: IFFALSE 32145
// if IsSelected ( i ) then
32095: LD_VAR 0 2
32099: PPUSH
32100: CALL_OW 306
32104: IFFALSE 32143
// begin for j := 1 to 4 do
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: DOUBLE
32112: LD_INT 1
32114: DEC
32115: ST_TO_ADDR
32116: LD_INT 4
32118: PUSH
32119: FOR_TO
32120: IFFALSE 32141
// SetSkill ( i , j , 10 ) ;
32122: LD_VAR 0 2
32126: PPUSH
32127: LD_VAR 0 3
32131: PPUSH
32132: LD_INT 10
32134: PPUSH
32135: CALL_OW 237
32139: GO 32119
32141: POP
32142: POP
// end ;
32143: GO 32092
32145: POP
32146: POP
// end ;
32147: LD_VAR 0 1
32151: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32152: LD_INT 0
32154: PPUSH
32155: PPUSH
32156: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32157: LD_ADDR_VAR 0 2
32161: PUSH
32162: LD_INT 22
32164: PUSH
32165: LD_OWVAR 2
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 21
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PPUSH
32188: CALL_OW 69
32192: PUSH
32193: FOR_IN
32194: IFFALSE 32235
// begin for j := 1 to 4 do
32196: LD_ADDR_VAR 0 3
32200: PUSH
32201: DOUBLE
32202: LD_INT 1
32204: DEC
32205: ST_TO_ADDR
32206: LD_INT 4
32208: PUSH
32209: FOR_TO
32210: IFFALSE 32231
// SetSkill ( i , j , 10 ) ;
32212: LD_VAR 0 2
32216: PPUSH
32217: LD_VAR 0 3
32221: PPUSH
32222: LD_INT 10
32224: PPUSH
32225: CALL_OW 237
32229: GO 32209
32231: POP
32232: POP
// end ;
32233: GO 32193
32235: POP
32236: POP
// end ;
32237: LD_VAR 0 1
32241: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32242: LD_INT 0
32244: PPUSH
// uc_side := your_side ;
32245: LD_ADDR_OWVAR 20
32249: PUSH
32250: LD_OWVAR 2
32254: ST_TO_ADDR
// uc_nation := nation ;
32255: LD_ADDR_OWVAR 21
32259: PUSH
32260: LD_VAR 0 1
32264: ST_TO_ADDR
// InitHc ;
32265: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32269: LD_INT 0
32271: PPUSH
32272: LD_VAR 0 2
32276: PPUSH
32277: LD_VAR 0 3
32281: PPUSH
32282: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32286: LD_VAR 0 4
32290: PPUSH
32291: LD_VAR 0 5
32295: PPUSH
32296: CALL_OW 428
32300: PUSH
32301: LD_INT 0
32303: EQUAL
32304: IFFALSE 32328
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32306: CALL_OW 44
32310: PPUSH
32311: LD_VAR 0 4
32315: PPUSH
32316: LD_VAR 0 5
32320: PPUSH
32321: LD_INT 1
32323: PPUSH
32324: CALL_OW 48
// end ;
32328: LD_VAR 0 6
32332: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32333: LD_INT 0
32335: PPUSH
32336: PPUSH
// uc_side := your_side ;
32337: LD_ADDR_OWVAR 20
32341: PUSH
32342: LD_OWVAR 2
32346: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32347: LD_VAR 0 1
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: LD_INT 5
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: IN
32374: IFFALSE 32386
// uc_nation := nation_american else
32376: LD_ADDR_OWVAR 21
32380: PUSH
32381: LD_INT 1
32383: ST_TO_ADDR
32384: GO 32429
// if chassis in [ 11 , 12 , 13 , 14 ] then
32386: LD_VAR 0 1
32390: PUSH
32391: LD_INT 11
32393: PUSH
32394: LD_INT 12
32396: PUSH
32397: LD_INT 13
32399: PUSH
32400: LD_INT 14
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: IN
32409: IFFALSE 32421
// uc_nation := nation_arabian else
32411: LD_ADDR_OWVAR 21
32415: PUSH
32416: LD_INT 2
32418: ST_TO_ADDR
32419: GO 32429
// uc_nation := nation_russian ;
32421: LD_ADDR_OWVAR 21
32425: PUSH
32426: LD_INT 3
32428: ST_TO_ADDR
// vc_chassis := chassis ;
32429: LD_ADDR_OWVAR 37
32433: PUSH
32434: LD_VAR 0 1
32438: ST_TO_ADDR
// vc_engine := engine ;
32439: LD_ADDR_OWVAR 39
32443: PUSH
32444: LD_VAR 0 2
32448: ST_TO_ADDR
// vc_control := control ;
32449: LD_ADDR_OWVAR 38
32453: PUSH
32454: LD_VAR 0 3
32458: ST_TO_ADDR
// vc_weapon := weapon ;
32459: LD_ADDR_OWVAR 40
32463: PUSH
32464: LD_VAR 0 4
32468: ST_TO_ADDR
// un := CreateVehicle ;
32469: LD_ADDR_VAR 0 8
32473: PUSH
32474: CALL_OW 45
32478: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32479: LD_VAR 0 8
32483: PPUSH
32484: LD_INT 0
32486: PPUSH
32487: LD_INT 5
32489: PPUSH
32490: CALL_OW 12
32494: PPUSH
32495: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32499: LD_VAR 0 8
32503: PPUSH
32504: LD_VAR 0 5
32508: PPUSH
32509: LD_VAR 0 6
32513: PPUSH
32514: LD_INT 1
32516: PPUSH
32517: CALL_OW 48
// end ;
32521: LD_VAR 0 7
32525: RET
// export hInvincible ; every 1 do
32526: GO 32528
32528: DISABLE
// hInvincible := [ ] ;
32529: LD_ADDR_EXP 111
32533: PUSH
32534: EMPTY
32535: ST_TO_ADDR
32536: END
// every 10 do var i ;
32537: GO 32539
32539: DISABLE
32540: LD_INT 0
32542: PPUSH
// begin enable ;
32543: ENABLE
// if not hInvincible then
32544: LD_EXP 111
32548: NOT
32549: IFFALSE 32553
// exit ;
32551: GO 32597
// for i in hInvincible do
32553: LD_ADDR_VAR 0 1
32557: PUSH
32558: LD_EXP 111
32562: PUSH
32563: FOR_IN
32564: IFFALSE 32595
// if GetLives ( i ) < 1000 then
32566: LD_VAR 0 1
32570: PPUSH
32571: CALL_OW 256
32575: PUSH
32576: LD_INT 1000
32578: LESS
32579: IFFALSE 32593
// SetLives ( i , 1000 ) ;
32581: LD_VAR 0 1
32585: PPUSH
32586: LD_INT 1000
32588: PPUSH
32589: CALL_OW 234
32593: GO 32563
32595: POP
32596: POP
// end ;
32597: PPOPN 1
32599: END
// export function hHackInvincible ; var i ; begin
32600: LD_INT 0
32602: PPUSH
32603: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32604: LD_ADDR_VAR 0 2
32608: PUSH
32609: LD_INT 2
32611: PUSH
32612: LD_INT 21
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 21
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: PPUSH
32637: CALL_OW 69
32641: PUSH
32642: FOR_IN
32643: IFFALSE 32704
// if IsSelected ( i ) then
32645: LD_VAR 0 2
32649: PPUSH
32650: CALL_OW 306
32654: IFFALSE 32702
// begin if i in hInvincible then
32656: LD_VAR 0 2
32660: PUSH
32661: LD_EXP 111
32665: IN
32666: IFFALSE 32686
// hInvincible := hInvincible diff i else
32668: LD_ADDR_EXP 111
32672: PUSH
32673: LD_EXP 111
32677: PUSH
32678: LD_VAR 0 2
32682: DIFF
32683: ST_TO_ADDR
32684: GO 32702
// hInvincible := hInvincible union i ;
32686: LD_ADDR_EXP 111
32690: PUSH
32691: LD_EXP 111
32695: PUSH
32696: LD_VAR 0 2
32700: UNION
32701: ST_TO_ADDR
// end ;
32702: GO 32642
32704: POP
32705: POP
// end ;
32706: LD_VAR 0 1
32710: RET
// export function hHackInvisible ; var i , j ; begin
32711: LD_INT 0
32713: PPUSH
32714: PPUSH
32715: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32716: LD_ADDR_VAR 0 2
32720: PUSH
32721: LD_INT 21
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 69
32735: PUSH
32736: FOR_IN
32737: IFFALSE 32761
// if IsSelected ( i ) then
32739: LD_VAR 0 2
32743: PPUSH
32744: CALL_OW 306
32748: IFFALSE 32759
// ComForceInvisible ( i ) ;
32750: LD_VAR 0 2
32754: PPUSH
32755: CALL_OW 496
32759: GO 32736
32761: POP
32762: POP
// end ;
32763: LD_VAR 0 1
32767: RET
// export function hHackChangeYourSide ; begin
32768: LD_INT 0
32770: PPUSH
// if your_side = 8 then
32771: LD_OWVAR 2
32775: PUSH
32776: LD_INT 8
32778: EQUAL
32779: IFFALSE 32791
// your_side := 0 else
32781: LD_ADDR_OWVAR 2
32785: PUSH
32786: LD_INT 0
32788: ST_TO_ADDR
32789: GO 32805
// your_side := your_side + 1 ;
32791: LD_ADDR_OWVAR 2
32795: PUSH
32796: LD_OWVAR 2
32800: PUSH
32801: LD_INT 1
32803: PLUS
32804: ST_TO_ADDR
// end ;
32805: LD_VAR 0 1
32809: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32810: LD_INT 0
32812: PPUSH
32813: PPUSH
32814: PPUSH
// for i in all_units do
32815: LD_ADDR_VAR 0 2
32819: PUSH
32820: LD_OWVAR 3
32824: PUSH
32825: FOR_IN
32826: IFFALSE 32904
// if IsSelected ( i ) then
32828: LD_VAR 0 2
32832: PPUSH
32833: CALL_OW 306
32837: IFFALSE 32902
// begin j := GetSide ( i ) ;
32839: LD_ADDR_VAR 0 3
32843: PUSH
32844: LD_VAR 0 2
32848: PPUSH
32849: CALL_OW 255
32853: ST_TO_ADDR
// if j = 8 then
32854: LD_VAR 0 3
32858: PUSH
32859: LD_INT 8
32861: EQUAL
32862: IFFALSE 32874
// j := 0 else
32864: LD_ADDR_VAR 0 3
32868: PUSH
32869: LD_INT 0
32871: ST_TO_ADDR
32872: GO 32888
// j := j + 1 ;
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_VAR 0 3
32883: PUSH
32884: LD_INT 1
32886: PLUS
32887: ST_TO_ADDR
// SetSide ( i , j ) ;
32888: LD_VAR 0 2
32892: PPUSH
32893: LD_VAR 0 3
32897: PPUSH
32898: CALL_OW 235
// end ;
32902: GO 32825
32904: POP
32905: POP
// end ;
32906: LD_VAR 0 1
32910: RET
// export function hHackFog ; begin
32911: LD_INT 0
32913: PPUSH
// FogOff ( true ) ;
32914: LD_INT 1
32916: PPUSH
32917: CALL_OW 344
// end ;
32921: LD_VAR 0 1
32925: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32926: LD_INT 0
32928: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32929: LD_VAR 0 1
32933: PPUSH
32934: LD_VAR 0 2
32938: PPUSH
32939: LD_VAR 0 3
32943: PPUSH
32944: LD_INT 1
32946: PPUSH
32947: LD_INT 1
32949: PPUSH
32950: CALL_OW 483
// CenterOnXY ( x , y ) ;
32954: LD_VAR 0 2
32958: PPUSH
32959: LD_VAR 0 3
32963: PPUSH
32964: CALL_OW 84
// end ;
32968: LD_VAR 0 4
32972: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32973: LD_INT 0
32975: PPUSH
32976: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32977: LD_VAR 0 1
32981: NOT
32982: PUSH
32983: LD_VAR 0 2
32987: PPUSH
32988: LD_VAR 0 3
32992: PPUSH
32993: CALL_OW 488
32997: NOT
32998: OR
32999: PUSH
33000: LD_VAR 0 1
33004: PPUSH
33005: CALL_OW 266
33009: PUSH
33010: LD_INT 3
33012: NONEQUAL
33013: PUSH
33014: LD_VAR 0 1
33018: PPUSH
33019: CALL_OW 247
33023: PUSH
33024: LD_INT 1
33026: EQUAL
33027: NOT
33028: AND
33029: OR
33030: IFFALSE 33034
// exit ;
33032: GO 33183
// if GetType ( factory ) = unit_human then
33034: LD_VAR 0 1
33038: PPUSH
33039: CALL_OW 247
33043: PUSH
33044: LD_INT 1
33046: EQUAL
33047: IFFALSE 33064
// factory := IsInUnit ( factory ) ;
33049: LD_ADDR_VAR 0 1
33053: PUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL_OW 310
33063: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33064: LD_VAR 0 1
33068: PPUSH
33069: CALL_OW 266
33073: PUSH
33074: LD_INT 3
33076: NONEQUAL
33077: IFFALSE 33081
// exit ;
33079: GO 33183
// if HexInfo ( x , y ) = factory then
33081: LD_VAR 0 2
33085: PPUSH
33086: LD_VAR 0 3
33090: PPUSH
33091: CALL_OW 428
33095: PUSH
33096: LD_VAR 0 1
33100: EQUAL
33101: IFFALSE 33128
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33103: LD_ADDR_EXP 112
33107: PUSH
33108: LD_EXP 112
33112: PPUSH
33113: LD_VAR 0 1
33117: PPUSH
33118: LD_INT 0
33120: PPUSH
33121: CALL_OW 1
33125: ST_TO_ADDR
33126: GO 33179
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33128: LD_ADDR_EXP 112
33132: PUSH
33133: LD_EXP 112
33137: PPUSH
33138: LD_VAR 0 1
33142: PPUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 255
33152: PUSH
33153: LD_VAR 0 1
33157: PUSH
33158: LD_VAR 0 2
33162: PUSH
33163: LD_VAR 0 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: PPUSH
33174: CALL_OW 1
33178: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33179: CALL 33188 0 0
// end ;
33183: LD_VAR 0 4
33187: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33188: LD_INT 0
33190: PPUSH
33191: PPUSH
33192: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33193: LD_STRING resetFactoryWaypoint();
33195: PPUSH
33196: CALL_OW 559
// if factoryWaypoints then
33200: LD_EXP 112
33204: IFFALSE 33330
// begin list := PrepareArray ( factoryWaypoints ) ;
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_EXP 112
33215: PPUSH
33216: CALL 75418 0 1
33220: ST_TO_ADDR
// for i := 1 to list do
33221: LD_ADDR_VAR 0 2
33225: PUSH
33226: DOUBLE
33227: LD_INT 1
33229: DEC
33230: ST_TO_ADDR
33231: LD_VAR 0 3
33235: PUSH
33236: FOR_TO
33237: IFFALSE 33328
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33239: LD_STRING setFactoryWaypointXY(
33241: PUSH
33242: LD_VAR 0 3
33246: PUSH
33247: LD_VAR 0 2
33251: ARRAY
33252: PUSH
33253: LD_INT 1
33255: ARRAY
33256: STR
33257: PUSH
33258: LD_STRING ,
33260: STR
33261: PUSH
33262: LD_VAR 0 3
33266: PUSH
33267: LD_VAR 0 2
33271: ARRAY
33272: PUSH
33273: LD_INT 2
33275: ARRAY
33276: STR
33277: PUSH
33278: LD_STRING ,
33280: STR
33281: PUSH
33282: LD_VAR 0 3
33286: PUSH
33287: LD_VAR 0 2
33291: ARRAY
33292: PUSH
33293: LD_INT 3
33295: ARRAY
33296: STR
33297: PUSH
33298: LD_STRING ,
33300: STR
33301: PUSH
33302: LD_VAR 0 3
33306: PUSH
33307: LD_VAR 0 2
33311: ARRAY
33312: PUSH
33313: LD_INT 4
33315: ARRAY
33316: STR
33317: PUSH
33318: LD_STRING )
33320: STR
33321: PPUSH
33322: CALL_OW 559
33326: GO 33236
33328: POP
33329: POP
// end ; end ;
33330: LD_VAR 0 1
33334: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33335: LD_INT 0
33337: PPUSH
// if HexInfo ( x , y ) = warehouse then
33338: LD_VAR 0 2
33342: PPUSH
33343: LD_VAR 0 3
33347: PPUSH
33348: CALL_OW 428
33352: PUSH
33353: LD_VAR 0 1
33357: EQUAL
33358: IFFALSE 33385
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33360: LD_ADDR_EXP 113
33364: PUSH
33365: LD_EXP 113
33369: PPUSH
33370: LD_VAR 0 1
33374: PPUSH
33375: LD_INT 0
33377: PPUSH
33378: CALL_OW 1
33382: ST_TO_ADDR
33383: GO 33436
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33385: LD_ADDR_EXP 113
33389: PUSH
33390: LD_EXP 113
33394: PPUSH
33395: LD_VAR 0 1
33399: PPUSH
33400: LD_VAR 0 1
33404: PPUSH
33405: CALL_OW 255
33409: PUSH
33410: LD_VAR 0 1
33414: PUSH
33415: LD_VAR 0 2
33419: PUSH
33420: LD_VAR 0 3
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: PPUSH
33431: CALL_OW 1
33435: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33436: CALL 33445 0 0
// end ;
33440: LD_VAR 0 4
33444: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33445: LD_INT 0
33447: PPUSH
33448: PPUSH
33449: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33450: LD_STRING resetWarehouseGatheringPoints();
33452: PPUSH
33453: CALL_OW 559
// if warehouseGatheringPoints then
33457: LD_EXP 113
33461: IFFALSE 33587
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33463: LD_ADDR_VAR 0 3
33467: PUSH
33468: LD_EXP 113
33472: PPUSH
33473: CALL 75418 0 1
33477: ST_TO_ADDR
// for i := 1 to list do
33478: LD_ADDR_VAR 0 2
33482: PUSH
33483: DOUBLE
33484: LD_INT 1
33486: DEC
33487: ST_TO_ADDR
33488: LD_VAR 0 3
33492: PUSH
33493: FOR_TO
33494: IFFALSE 33585
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33496: LD_STRING setWarehouseGatheringPointXY(
33498: PUSH
33499: LD_VAR 0 3
33503: PUSH
33504: LD_VAR 0 2
33508: ARRAY
33509: PUSH
33510: LD_INT 1
33512: ARRAY
33513: STR
33514: PUSH
33515: LD_STRING ,
33517: STR
33518: PUSH
33519: LD_VAR 0 3
33523: PUSH
33524: LD_VAR 0 2
33528: ARRAY
33529: PUSH
33530: LD_INT 2
33532: ARRAY
33533: STR
33534: PUSH
33535: LD_STRING ,
33537: STR
33538: PUSH
33539: LD_VAR 0 3
33543: PUSH
33544: LD_VAR 0 2
33548: ARRAY
33549: PUSH
33550: LD_INT 3
33552: ARRAY
33553: STR
33554: PUSH
33555: LD_STRING ,
33557: STR
33558: PUSH
33559: LD_VAR 0 3
33563: PUSH
33564: LD_VAR 0 2
33568: ARRAY
33569: PUSH
33570: LD_INT 4
33572: ARRAY
33573: STR
33574: PUSH
33575: LD_STRING )
33577: STR
33578: PPUSH
33579: CALL_OW 559
33583: GO 33493
33585: POP
33586: POP
// end ; end ;
33587: LD_VAR 0 1
33591: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33592: LD_EXP 113
33596: IFFALSE 34281
33598: GO 33600
33600: DISABLE
33601: LD_INT 0
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
// begin enable ;
33612: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_EXP 113
33622: PPUSH
33623: CALL 75418 0 1
33627: ST_TO_ADDR
// if not list then
33628: LD_VAR 0 3
33632: NOT
33633: IFFALSE 33637
// exit ;
33635: GO 34281
// for i := 1 to list do
33637: LD_ADDR_VAR 0 1
33641: PUSH
33642: DOUBLE
33643: LD_INT 1
33645: DEC
33646: ST_TO_ADDR
33647: LD_VAR 0 3
33651: PUSH
33652: FOR_TO
33653: IFFALSE 34279
// begin depot := list [ i ] [ 2 ] ;
33655: LD_ADDR_VAR 0 8
33659: PUSH
33660: LD_VAR 0 3
33664: PUSH
33665: LD_VAR 0 1
33669: ARRAY
33670: PUSH
33671: LD_INT 2
33673: ARRAY
33674: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33675: LD_ADDR_VAR 0 5
33679: PUSH
33680: LD_VAR 0 3
33684: PUSH
33685: LD_VAR 0 1
33689: ARRAY
33690: PUSH
33691: LD_INT 1
33693: ARRAY
33694: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33695: LD_VAR 0 8
33699: PPUSH
33700: CALL_OW 301
33704: PUSH
33705: LD_VAR 0 5
33709: PUSH
33710: LD_VAR 0 8
33714: PPUSH
33715: CALL_OW 255
33719: NONEQUAL
33720: OR
33721: IFFALSE 33750
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33723: LD_ADDR_EXP 113
33727: PUSH
33728: LD_EXP 113
33732: PPUSH
33733: LD_VAR 0 8
33737: PPUSH
33738: LD_INT 0
33740: PPUSH
33741: CALL_OW 1
33745: ST_TO_ADDR
// exit ;
33746: POP
33747: POP
33748: GO 34281
// end ; x := list [ i ] [ 3 ] ;
33750: LD_ADDR_VAR 0 6
33754: PUSH
33755: LD_VAR 0 3
33759: PUSH
33760: LD_VAR 0 1
33764: ARRAY
33765: PUSH
33766: LD_INT 3
33768: ARRAY
33769: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33770: LD_ADDR_VAR 0 7
33774: PUSH
33775: LD_VAR 0 3
33779: PUSH
33780: LD_VAR 0 1
33784: ARRAY
33785: PUSH
33786: LD_INT 4
33788: ARRAY
33789: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33790: LD_ADDR_VAR 0 9
33794: PUSH
33795: LD_VAR 0 6
33799: PPUSH
33800: LD_VAR 0 7
33804: PPUSH
33805: LD_INT 16
33807: PPUSH
33808: CALL 74006 0 3
33812: ST_TO_ADDR
// if not cratesNearbyPoint then
33813: LD_VAR 0 9
33817: NOT
33818: IFFALSE 33824
// exit ;
33820: POP
33821: POP
33822: GO 34281
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33824: LD_ADDR_VAR 0 4
33828: PUSH
33829: LD_INT 22
33831: PUSH
33832: LD_VAR 0 5
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: LD_INT 60
33846: PUSH
33847: EMPTY
33848: LIST
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 91
33856: PUSH
33857: LD_VAR 0 8
33861: PUSH
33862: LD_INT 6
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 25
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 25
33885: PUSH
33886: LD_INT 16
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 69
33908: PUSH
33909: LD_VAR 0 8
33913: PPUSH
33914: CALL_OW 313
33918: PPUSH
33919: LD_INT 3
33921: PUSH
33922: LD_INT 60
33924: PUSH
33925: EMPTY
33926: LIST
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 25
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 25
33947: PUSH
33948: LD_INT 16
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PPUSH
33964: CALL_OW 72
33968: UNION
33969: ST_TO_ADDR
// if tmp then
33970: LD_VAR 0 4
33974: IFFALSE 34054
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33976: LD_ADDR_VAR 0 4
33980: PUSH
33981: LD_VAR 0 4
33985: PPUSH
33986: LD_INT 3
33988: PPUSH
33989: CALL 71975 0 2
33993: ST_TO_ADDR
// for j in tmp do
33994: LD_ADDR_VAR 0 2
33998: PUSH
33999: LD_VAR 0 4
34003: PUSH
34004: FOR_IN
34005: IFFALSE 34048
// begin if IsInUnit ( j ) then
34007: LD_VAR 0 2
34011: PPUSH
34012: CALL_OW 310
34016: IFFALSE 34027
// ComExit ( j ) ;
34018: LD_VAR 0 2
34022: PPUSH
34023: CALL 72058 0 1
// AddComCollect ( j , x , y ) ;
34027: LD_VAR 0 2
34031: PPUSH
34032: LD_VAR 0 6
34036: PPUSH
34037: LD_VAR 0 7
34041: PPUSH
34042: CALL_OW 177
// end ;
34046: GO 34004
34048: POP
34049: POP
// exit ;
34050: POP
34051: POP
34052: GO 34281
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34054: LD_ADDR_VAR 0 4
34058: PUSH
34059: LD_INT 22
34061: PUSH
34062: LD_VAR 0 5
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 91
34073: PUSH
34074: LD_VAR 0 8
34078: PUSH
34079: LD_INT 8
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 34
34092: PUSH
34093: LD_INT 12
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 34
34102: PUSH
34103: LD_INT 51
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 34
34112: PUSH
34113: LD_INT 32
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 34
34122: PUSH
34123: LD_INT 89
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: LIST
34141: PPUSH
34142: CALL_OW 69
34146: ST_TO_ADDR
// if tmp then
34147: LD_VAR 0 4
34151: IFFALSE 34277
// begin for j in tmp do
34153: LD_ADDR_VAR 0 2
34157: PUSH
34158: LD_VAR 0 4
34162: PUSH
34163: FOR_IN
34164: IFFALSE 34275
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34166: LD_VAR 0 2
34170: PPUSH
34171: CALL_OW 262
34175: PUSH
34176: LD_INT 3
34178: EQUAL
34179: PUSH
34180: LD_VAR 0 2
34184: PPUSH
34185: CALL_OW 261
34189: PUSH
34190: LD_INT 20
34192: GREATER
34193: OR
34194: PUSH
34195: LD_VAR 0 2
34199: PPUSH
34200: CALL_OW 314
34204: NOT
34205: AND
34206: PUSH
34207: LD_VAR 0 2
34211: PPUSH
34212: CALL_OW 263
34216: PUSH
34217: LD_INT 1
34219: NONEQUAL
34220: PUSH
34221: LD_VAR 0 2
34225: PPUSH
34226: CALL_OW 311
34230: OR
34231: AND
34232: IFFALSE 34273
// begin ComCollect ( j , x , y ) ;
34234: LD_VAR 0 2
34238: PPUSH
34239: LD_VAR 0 6
34243: PPUSH
34244: LD_VAR 0 7
34248: PPUSH
34249: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34253: LD_VAR 0 2
34257: PPUSH
34258: LD_VAR 0 8
34262: PPUSH
34263: CALL_OW 172
// exit ;
34267: POP
34268: POP
34269: POP
34270: POP
34271: GO 34281
// end ;
34273: GO 34163
34275: POP
34276: POP
// end ; end ;
34277: GO 33652
34279: POP
34280: POP
// end ; end_of_file end_of_file
34281: PPOPN 9
34283: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34284: LD_INT 0
34286: PPUSH
34287: PPUSH
// if exist_mode then
34288: LD_VAR 0 2
34292: IFFALSE 34317
// unit := CreateCharacter ( prefix & ident ) else
34294: LD_ADDR_VAR 0 5
34298: PUSH
34299: LD_VAR 0 3
34303: PUSH
34304: LD_VAR 0 1
34308: STR
34309: PPUSH
34310: CALL_OW 34
34314: ST_TO_ADDR
34315: GO 34332
// unit := NewCharacter ( ident ) ;
34317: LD_ADDR_VAR 0 5
34321: PUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 25
34331: ST_TO_ADDR
// result := unit ;
34332: LD_ADDR_VAR 0 4
34336: PUSH
34337: LD_VAR 0 5
34341: ST_TO_ADDR
// end ;
34342: LD_VAR 0 4
34346: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34347: LD_INT 0
34349: PPUSH
34350: PPUSH
// if not side or not nation then
34351: LD_VAR 0 1
34355: NOT
34356: PUSH
34357: LD_VAR 0 2
34361: NOT
34362: OR
34363: IFFALSE 34367
// exit ;
34365: GO 35135
// case nation of nation_american :
34367: LD_VAR 0 2
34371: PUSH
34372: LD_INT 1
34374: DOUBLE
34375: EQUAL
34376: IFTRUE 34380
34378: GO 34594
34380: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34381: LD_ADDR_VAR 0 4
34385: PUSH
34386: LD_INT 35
34388: PUSH
34389: LD_INT 45
34391: PUSH
34392: LD_INT 46
34394: PUSH
34395: LD_INT 47
34397: PUSH
34398: LD_INT 82
34400: PUSH
34401: LD_INT 83
34403: PUSH
34404: LD_INT 84
34406: PUSH
34407: LD_INT 85
34409: PUSH
34410: LD_INT 86
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 6
34421: PUSH
34422: LD_INT 15
34424: PUSH
34425: LD_INT 16
34427: PUSH
34428: LD_INT 7
34430: PUSH
34431: LD_INT 12
34433: PUSH
34434: LD_INT 13
34436: PUSH
34437: LD_INT 10
34439: PUSH
34440: LD_INT 14
34442: PUSH
34443: LD_INT 20
34445: PUSH
34446: LD_INT 21
34448: PUSH
34449: LD_INT 22
34451: PUSH
34452: LD_INT 25
34454: PUSH
34455: LD_INT 32
34457: PUSH
34458: LD_INT 27
34460: PUSH
34461: LD_INT 36
34463: PUSH
34464: LD_INT 69
34466: PUSH
34467: LD_INT 39
34469: PUSH
34470: LD_INT 34
34472: PUSH
34473: LD_INT 40
34475: PUSH
34476: LD_INT 48
34478: PUSH
34479: LD_INT 49
34481: PUSH
34482: LD_INT 50
34484: PUSH
34485: LD_INT 51
34487: PUSH
34488: LD_INT 52
34490: PUSH
34491: LD_INT 53
34493: PUSH
34494: LD_INT 54
34496: PUSH
34497: LD_INT 55
34499: PUSH
34500: LD_INT 56
34502: PUSH
34503: LD_INT 57
34505: PUSH
34506: LD_INT 58
34508: PUSH
34509: LD_INT 59
34511: PUSH
34512: LD_INT 60
34514: PUSH
34515: LD_INT 61
34517: PUSH
34518: LD_INT 62
34520: PUSH
34521: LD_INT 80
34523: PUSH
34524: LD_INT 82
34526: PUSH
34527: LD_INT 83
34529: PUSH
34530: LD_INT 84
34532: PUSH
34533: LD_INT 85
34535: PUSH
34536: LD_INT 86
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: ST_TO_ADDR
34592: GO 35059
34594: LD_INT 2
34596: DOUBLE
34597: EQUAL
34598: IFTRUE 34602
34600: GO 34828
34602: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34603: LD_ADDR_VAR 0 4
34607: PUSH
34608: LD_INT 35
34610: PUSH
34611: LD_INT 45
34613: PUSH
34614: LD_INT 46
34616: PUSH
34617: LD_INT 47
34619: PUSH
34620: LD_INT 82
34622: PUSH
34623: LD_INT 83
34625: PUSH
34626: LD_INT 84
34628: PUSH
34629: LD_INT 85
34631: PUSH
34632: LD_INT 87
34634: PUSH
34635: LD_INT 70
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: LD_INT 11
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: LD_INT 4
34649: PUSH
34650: LD_INT 5
34652: PUSH
34653: LD_INT 6
34655: PUSH
34656: LD_INT 15
34658: PUSH
34659: LD_INT 18
34661: PUSH
34662: LD_INT 7
34664: PUSH
34665: LD_INT 17
34667: PUSH
34668: LD_INT 8
34670: PUSH
34671: LD_INT 20
34673: PUSH
34674: LD_INT 21
34676: PUSH
34677: LD_INT 22
34679: PUSH
34680: LD_INT 72
34682: PUSH
34683: LD_INT 26
34685: PUSH
34686: LD_INT 69
34688: PUSH
34689: LD_INT 39
34691: PUSH
34692: LD_INT 40
34694: PUSH
34695: LD_INT 41
34697: PUSH
34698: LD_INT 42
34700: PUSH
34701: LD_INT 43
34703: PUSH
34704: LD_INT 48
34706: PUSH
34707: LD_INT 49
34709: PUSH
34710: LD_INT 50
34712: PUSH
34713: LD_INT 51
34715: PUSH
34716: LD_INT 52
34718: PUSH
34719: LD_INT 53
34721: PUSH
34722: LD_INT 54
34724: PUSH
34725: LD_INT 55
34727: PUSH
34728: LD_INT 56
34730: PUSH
34731: LD_INT 60
34733: PUSH
34734: LD_INT 61
34736: PUSH
34737: LD_INT 62
34739: PUSH
34740: LD_INT 66
34742: PUSH
34743: LD_INT 67
34745: PUSH
34746: LD_INT 68
34748: PUSH
34749: LD_INT 81
34751: PUSH
34752: LD_INT 82
34754: PUSH
34755: LD_INT 83
34757: PUSH
34758: LD_INT 84
34760: PUSH
34761: LD_INT 85
34763: PUSH
34764: LD_INT 87
34766: PUSH
34767: LD_INT 88
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
34826: GO 35059
34828: LD_INT 3
34830: DOUBLE
34831: EQUAL
34832: IFTRUE 34836
34834: GO 35058
34836: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34837: LD_ADDR_VAR 0 4
34841: PUSH
34842: LD_INT 46
34844: PUSH
34845: LD_INT 47
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: LD_INT 82
34856: PUSH
34857: LD_INT 83
34859: PUSH
34860: LD_INT 84
34862: PUSH
34863: LD_INT 85
34865: PUSH
34866: LD_INT 86
34868: PUSH
34869: LD_INT 11
34871: PUSH
34872: LD_INT 9
34874: PUSH
34875: LD_INT 20
34877: PUSH
34878: LD_INT 19
34880: PUSH
34881: LD_INT 21
34883: PUSH
34884: LD_INT 24
34886: PUSH
34887: LD_INT 22
34889: PUSH
34890: LD_INT 25
34892: PUSH
34893: LD_INT 28
34895: PUSH
34896: LD_INT 29
34898: PUSH
34899: LD_INT 30
34901: PUSH
34902: LD_INT 31
34904: PUSH
34905: LD_INT 37
34907: PUSH
34908: LD_INT 38
34910: PUSH
34911: LD_INT 32
34913: PUSH
34914: LD_INT 27
34916: PUSH
34917: LD_INT 33
34919: PUSH
34920: LD_INT 69
34922: PUSH
34923: LD_INT 39
34925: PUSH
34926: LD_INT 34
34928: PUSH
34929: LD_INT 40
34931: PUSH
34932: LD_INT 71
34934: PUSH
34935: LD_INT 23
34937: PUSH
34938: LD_INT 44
34940: PUSH
34941: LD_INT 48
34943: PUSH
34944: LD_INT 49
34946: PUSH
34947: LD_INT 50
34949: PUSH
34950: LD_INT 51
34952: PUSH
34953: LD_INT 52
34955: PUSH
34956: LD_INT 53
34958: PUSH
34959: LD_INT 54
34961: PUSH
34962: LD_INT 55
34964: PUSH
34965: LD_INT 56
34967: PUSH
34968: LD_INT 57
34970: PUSH
34971: LD_INT 58
34973: PUSH
34974: LD_INT 59
34976: PUSH
34977: LD_INT 63
34979: PUSH
34980: LD_INT 64
34982: PUSH
34983: LD_INT 65
34985: PUSH
34986: LD_INT 82
34988: PUSH
34989: LD_INT 83
34991: PUSH
34992: LD_INT 84
34994: PUSH
34995: LD_INT 85
34997: PUSH
34998: LD_INT 86
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
35056: GO 35059
35058: POP
// if state > - 1 and state < 3 then
35059: LD_VAR 0 3
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: GREATER
35068: PUSH
35069: LD_VAR 0 3
35073: PUSH
35074: LD_INT 3
35076: LESS
35077: AND
35078: IFFALSE 35135
// for i in result do
35080: LD_ADDR_VAR 0 5
35084: PUSH
35085: LD_VAR 0 4
35089: PUSH
35090: FOR_IN
35091: IFFALSE 35133
// if GetTech ( i , side ) <> state then
35093: LD_VAR 0 5
35097: PPUSH
35098: LD_VAR 0 1
35102: PPUSH
35103: CALL_OW 321
35107: PUSH
35108: LD_VAR 0 3
35112: NONEQUAL
35113: IFFALSE 35131
// result := result diff i ;
35115: LD_ADDR_VAR 0 4
35119: PUSH
35120: LD_VAR 0 4
35124: PUSH
35125: LD_VAR 0 5
35129: DIFF
35130: ST_TO_ADDR
35131: GO 35090
35133: POP
35134: POP
// end ;
35135: LD_VAR 0 4
35139: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35140: LD_INT 0
35142: PPUSH
35143: PPUSH
35144: PPUSH
// result := true ;
35145: LD_ADDR_VAR 0 3
35149: PUSH
35150: LD_INT 1
35152: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35153: LD_ADDR_VAR 0 5
35157: PUSH
35158: LD_VAR 0 2
35162: PPUSH
35163: CALL_OW 480
35167: ST_TO_ADDR
// if not tmp then
35168: LD_VAR 0 5
35172: NOT
35173: IFFALSE 35177
// exit ;
35175: GO 35226
// for i in tmp do
35177: LD_ADDR_VAR 0 4
35181: PUSH
35182: LD_VAR 0 5
35186: PUSH
35187: FOR_IN
35188: IFFALSE 35224
// if GetTech ( i , side ) <> state_researched then
35190: LD_VAR 0 4
35194: PPUSH
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 321
35204: PUSH
35205: LD_INT 2
35207: NONEQUAL
35208: IFFALSE 35222
// begin result := false ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_INT 0
35217: ST_TO_ADDR
// exit ;
35218: POP
35219: POP
35220: GO 35226
// end ;
35222: GO 35187
35224: POP
35225: POP
// end ;
35226: LD_VAR 0 3
35230: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35231: LD_INT 0
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35246: LD_VAR 0 1
35250: NOT
35251: PUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: CALL_OW 257
35261: PUSH
35262: LD_INT 9
35264: NONEQUAL
35265: OR
35266: IFFALSE 35270
// exit ;
35268: GO 35843
// side := GetSide ( unit ) ;
35270: LD_ADDR_VAR 0 9
35274: PUSH
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL_OW 255
35284: ST_TO_ADDR
// tech_space := tech_spacanom ;
35285: LD_ADDR_VAR 0 12
35289: PUSH
35290: LD_INT 29
35292: ST_TO_ADDR
// tech_time := tech_taurad ;
35293: LD_ADDR_VAR 0 13
35297: PUSH
35298: LD_INT 28
35300: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35301: LD_ADDR_VAR 0 11
35305: PUSH
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL_OW 310
35315: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35316: LD_VAR 0 11
35320: PPUSH
35321: CALL_OW 247
35325: PUSH
35326: LD_INT 2
35328: EQUAL
35329: IFFALSE 35333
// exit ;
35331: GO 35843
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35333: LD_ADDR_VAR 0 8
35337: PUSH
35338: LD_INT 81
35340: PUSH
35341: LD_VAR 0 9
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: LD_INT 21
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PPUSH
35371: CALL_OW 69
35375: ST_TO_ADDR
// if not tmp then
35376: LD_VAR 0 8
35380: NOT
35381: IFFALSE 35385
// exit ;
35383: GO 35843
// if in_unit then
35385: LD_VAR 0 11
35389: IFFALSE 35413
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35391: LD_ADDR_VAR 0 10
35395: PUSH
35396: LD_VAR 0 8
35400: PPUSH
35401: LD_VAR 0 11
35405: PPUSH
35406: CALL_OW 74
35410: ST_TO_ADDR
35411: GO 35433
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35413: LD_ADDR_VAR 0 10
35417: PUSH
35418: LD_VAR 0 8
35422: PPUSH
35423: LD_VAR 0 1
35427: PPUSH
35428: CALL_OW 74
35432: ST_TO_ADDR
// if not enemy then
35433: LD_VAR 0 10
35437: NOT
35438: IFFALSE 35442
// exit ;
35440: GO 35843
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35442: LD_VAR 0 11
35446: PUSH
35447: LD_VAR 0 11
35451: PPUSH
35452: LD_VAR 0 10
35456: PPUSH
35457: CALL_OW 296
35461: PUSH
35462: LD_INT 13
35464: GREATER
35465: AND
35466: PUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: LD_VAR 0 10
35476: PPUSH
35477: CALL_OW 296
35481: PUSH
35482: LD_INT 12
35484: GREATER
35485: OR
35486: IFFALSE 35490
// exit ;
35488: GO 35843
// missile := [ 1 ] ;
35490: LD_ADDR_VAR 0 14
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: EMPTY
35499: LIST
35500: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35501: LD_VAR 0 9
35505: PPUSH
35506: LD_VAR 0 12
35510: PPUSH
35511: CALL_OW 325
35515: IFFALSE 35544
// missile := Replace ( missile , missile + 1 , 2 ) ;
35517: LD_ADDR_VAR 0 14
35521: PUSH
35522: LD_VAR 0 14
35526: PPUSH
35527: LD_VAR 0 14
35531: PUSH
35532: LD_INT 1
35534: PLUS
35535: PPUSH
35536: LD_INT 2
35538: PPUSH
35539: CALL_OW 1
35543: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35544: LD_VAR 0 9
35548: PPUSH
35549: LD_VAR 0 13
35553: PPUSH
35554: CALL_OW 325
35558: PUSH
35559: LD_VAR 0 10
35563: PPUSH
35564: CALL_OW 255
35568: PPUSH
35569: LD_VAR 0 13
35573: PPUSH
35574: CALL_OW 325
35578: NOT
35579: AND
35580: IFFALSE 35609
// missile := Replace ( missile , missile + 1 , 3 ) ;
35582: LD_ADDR_VAR 0 14
35586: PUSH
35587: LD_VAR 0 14
35591: PPUSH
35592: LD_VAR 0 14
35596: PUSH
35597: LD_INT 1
35599: PLUS
35600: PPUSH
35601: LD_INT 3
35603: PPUSH
35604: CALL_OW 1
35608: ST_TO_ADDR
// if missile < 2 then
35609: LD_VAR 0 14
35613: PUSH
35614: LD_INT 2
35616: LESS
35617: IFFALSE 35621
// exit ;
35619: GO 35843
// x := GetX ( enemy ) ;
35621: LD_ADDR_VAR 0 4
35625: PUSH
35626: LD_VAR 0 10
35630: PPUSH
35631: CALL_OW 250
35635: ST_TO_ADDR
// y := GetY ( enemy ) ;
35636: LD_ADDR_VAR 0 5
35640: PUSH
35641: LD_VAR 0 10
35645: PPUSH
35646: CALL_OW 251
35650: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35651: LD_ADDR_VAR 0 6
35655: PUSH
35656: LD_VAR 0 4
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PPUSH
35665: LD_INT 1
35667: PPUSH
35668: CALL_OW 12
35672: PLUS
35673: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35674: LD_ADDR_VAR 0 7
35678: PUSH
35679: LD_VAR 0 5
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PPUSH
35688: LD_INT 1
35690: PPUSH
35691: CALL_OW 12
35695: PLUS
35696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35697: LD_VAR 0 6
35701: PPUSH
35702: LD_VAR 0 7
35706: PPUSH
35707: CALL_OW 488
35711: NOT
35712: IFFALSE 35734
// begin _x := x ;
35714: LD_ADDR_VAR 0 6
35718: PUSH
35719: LD_VAR 0 4
35723: ST_TO_ADDR
// _y := y ;
35724: LD_ADDR_VAR 0 7
35728: PUSH
35729: LD_VAR 0 5
35733: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_INT 1
35741: PPUSH
35742: LD_VAR 0 14
35746: PPUSH
35747: CALL_OW 12
35751: ST_TO_ADDR
// case i of 1 :
35752: LD_VAR 0 3
35756: PUSH
35757: LD_INT 1
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35765
35763: GO 35782
35765: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35766: LD_VAR 0 1
35770: PPUSH
35771: LD_VAR 0 10
35775: PPUSH
35776: CALL_OW 115
35780: GO 35843
35782: LD_INT 2
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35790
35788: GO 35812
35790: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35791: LD_VAR 0 1
35795: PPUSH
35796: LD_VAR 0 6
35800: PPUSH
35801: LD_VAR 0 7
35805: PPUSH
35806: CALL_OW 153
35810: GO 35843
35812: LD_INT 3
35814: DOUBLE
35815: EQUAL
35816: IFTRUE 35820
35818: GO 35842
35820: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35821: LD_VAR 0 1
35825: PPUSH
35826: LD_VAR 0 6
35830: PPUSH
35831: LD_VAR 0 7
35835: PPUSH
35836: CALL_OW 154
35840: GO 35843
35842: POP
// end ;
35843: LD_VAR 0 2
35847: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35848: LD_INT 0
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
// if not unit or not building then
35856: LD_VAR 0 1
35860: NOT
35861: PUSH
35862: LD_VAR 0 2
35866: NOT
35867: OR
35868: IFFALSE 35872
// exit ;
35870: GO 36030
// x := GetX ( building ) ;
35872: LD_ADDR_VAR 0 5
35876: PUSH
35877: LD_VAR 0 2
35881: PPUSH
35882: CALL_OW 250
35886: ST_TO_ADDR
// y := GetY ( building ) ;
35887: LD_ADDR_VAR 0 6
35891: PUSH
35892: LD_VAR 0 2
35896: PPUSH
35897: CALL_OW 251
35901: ST_TO_ADDR
// for i = 0 to 5 do
35902: LD_ADDR_VAR 0 4
35906: PUSH
35907: DOUBLE
35908: LD_INT 0
35910: DEC
35911: ST_TO_ADDR
35912: LD_INT 5
35914: PUSH
35915: FOR_TO
35916: IFFALSE 36028
// begin _x := ShiftX ( x , i , 3 ) ;
35918: LD_ADDR_VAR 0 7
35922: PUSH
35923: LD_VAR 0 5
35927: PPUSH
35928: LD_VAR 0 4
35932: PPUSH
35933: LD_INT 3
35935: PPUSH
35936: CALL_OW 272
35940: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35941: LD_ADDR_VAR 0 8
35945: PUSH
35946: LD_VAR 0 6
35950: PPUSH
35951: LD_VAR 0 4
35955: PPUSH
35956: LD_INT 3
35958: PPUSH
35959: CALL_OW 273
35963: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35964: LD_VAR 0 7
35968: PPUSH
35969: LD_VAR 0 8
35973: PPUSH
35974: CALL_OW 488
35978: NOT
35979: IFFALSE 35983
// continue ;
35981: GO 35915
// if HexInfo ( _x , _y ) = 0 then
35983: LD_VAR 0 7
35987: PPUSH
35988: LD_VAR 0 8
35992: PPUSH
35993: CALL_OW 428
35997: PUSH
35998: LD_INT 0
36000: EQUAL
36001: IFFALSE 36026
// begin ComMoveXY ( unit , _x , _y ) ;
36003: LD_VAR 0 1
36007: PPUSH
36008: LD_VAR 0 7
36012: PPUSH
36013: LD_VAR 0 8
36017: PPUSH
36018: CALL_OW 111
// exit ;
36022: POP
36023: POP
36024: GO 36030
// end ; end ;
36026: GO 35915
36028: POP
36029: POP
// end ;
36030: LD_VAR 0 3
36034: RET
// export function ScanBase ( side , base_area ) ; begin
36035: LD_INT 0
36037: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36038: LD_ADDR_VAR 0 3
36042: PUSH
36043: LD_VAR 0 2
36047: PPUSH
36048: LD_INT 81
36050: PUSH
36051: LD_VAR 0 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PPUSH
36060: CALL_OW 70
36064: ST_TO_ADDR
// end ;
36065: LD_VAR 0 3
36069: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36070: LD_INT 0
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
// result := false ;
36076: LD_ADDR_VAR 0 2
36080: PUSH
36081: LD_INT 0
36083: ST_TO_ADDR
// side := GetSide ( unit ) ;
36084: LD_ADDR_VAR 0 3
36088: PUSH
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 255
36098: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36099: LD_ADDR_VAR 0 4
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 248
36113: ST_TO_ADDR
// case nat of 1 :
36114: LD_VAR 0 4
36118: PUSH
36119: LD_INT 1
36121: DOUBLE
36122: EQUAL
36123: IFTRUE 36127
36125: GO 36138
36127: POP
// tech := tech_lassight ; 2 :
36128: LD_ADDR_VAR 0 5
36132: PUSH
36133: LD_INT 12
36135: ST_TO_ADDR
36136: GO 36177
36138: LD_INT 2
36140: DOUBLE
36141: EQUAL
36142: IFTRUE 36146
36144: GO 36157
36146: POP
// tech := tech_mortar ; 3 :
36147: LD_ADDR_VAR 0 5
36151: PUSH
36152: LD_INT 41
36154: ST_TO_ADDR
36155: GO 36177
36157: LD_INT 3
36159: DOUBLE
36160: EQUAL
36161: IFTRUE 36165
36163: GO 36176
36165: POP
// tech := tech_bazooka ; end ;
36166: LD_ADDR_VAR 0 5
36170: PUSH
36171: LD_INT 44
36173: ST_TO_ADDR
36174: GO 36177
36176: POP
// if Researched ( side , tech ) then
36177: LD_VAR 0 3
36181: PPUSH
36182: LD_VAR 0 5
36186: PPUSH
36187: CALL_OW 325
36191: IFFALSE 36218
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: LD_INT 8
36203: PUSH
36204: LD_INT 9
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: PUSH
36212: LD_VAR 0 4
36216: ARRAY
36217: ST_TO_ADDR
// end ;
36218: LD_VAR 0 2
36222: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36223: LD_INT 0
36225: PPUSH
36226: PPUSH
36227: PPUSH
// if not mines then
36228: LD_VAR 0 2
36232: NOT
36233: IFFALSE 36237
// exit ;
36235: GO 36381
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36237: LD_ADDR_VAR 0 5
36241: PUSH
36242: LD_INT 81
36244: PUSH
36245: LD_VAR 0 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 3
36256: PUSH
36257: LD_INT 21
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PPUSH
36275: CALL_OW 69
36279: ST_TO_ADDR
// for i in mines do
36280: LD_ADDR_VAR 0 4
36284: PUSH
36285: LD_VAR 0 2
36289: PUSH
36290: FOR_IN
36291: IFFALSE 36379
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36293: LD_VAR 0 4
36297: PUSH
36298: LD_INT 1
36300: ARRAY
36301: PPUSH
36302: LD_VAR 0 4
36306: PUSH
36307: LD_INT 2
36309: ARRAY
36310: PPUSH
36311: CALL_OW 458
36315: NOT
36316: IFFALSE 36320
// continue ;
36318: GO 36290
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36320: LD_VAR 0 4
36324: PUSH
36325: LD_INT 1
36327: ARRAY
36328: PPUSH
36329: LD_VAR 0 4
36333: PUSH
36334: LD_INT 2
36336: ARRAY
36337: PPUSH
36338: CALL_OW 428
36342: PUSH
36343: LD_VAR 0 5
36347: IN
36348: IFFALSE 36377
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36350: LD_VAR 0 4
36354: PUSH
36355: LD_INT 1
36357: ARRAY
36358: PPUSH
36359: LD_VAR 0 4
36363: PUSH
36364: LD_INT 2
36366: ARRAY
36367: PPUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 456
// end ;
36377: GO 36290
36379: POP
36380: POP
// end ;
36381: LD_VAR 0 3
36385: RET
// export function Count ( array ) ; var i ; begin
36386: LD_INT 0
36388: PPUSH
36389: PPUSH
// result := 0 ;
36390: LD_ADDR_VAR 0 2
36394: PUSH
36395: LD_INT 0
36397: ST_TO_ADDR
// for i in array do
36398: LD_ADDR_VAR 0 3
36402: PUSH
36403: LD_VAR 0 1
36407: PUSH
36408: FOR_IN
36409: IFFALSE 36433
// if i then
36411: LD_VAR 0 3
36415: IFFALSE 36431
// result := result + 1 ;
36417: LD_ADDR_VAR 0 2
36421: PUSH
36422: LD_VAR 0 2
36426: PUSH
36427: LD_INT 1
36429: PLUS
36430: ST_TO_ADDR
36431: GO 36408
36433: POP
36434: POP
// end ;
36435: LD_VAR 0 2
36439: RET
// export function IsEmpty ( building ) ; begin
36440: LD_INT 0
36442: PPUSH
// if not building then
36443: LD_VAR 0 1
36447: NOT
36448: IFFALSE 36452
// exit ;
36450: GO 36495
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36452: LD_ADDR_VAR 0 2
36456: PUSH
36457: LD_VAR 0 1
36461: PUSH
36462: LD_INT 22
36464: PUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL_OW 255
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 58
36481: PUSH
36482: EMPTY
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PPUSH
36489: CALL_OW 69
36493: IN
36494: ST_TO_ADDR
// end ;
36495: LD_VAR 0 2
36499: RET
// export function IsNotFull ( building ) ; var places ; begin
36500: LD_INT 0
36502: PPUSH
36503: PPUSH
// if not building then
36504: LD_VAR 0 1
36508: NOT
36509: IFFALSE 36513
// exit ;
36511: GO 36684
// result := false ;
36513: LD_ADDR_VAR 0 2
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// places := 0 ;
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_INT 0
36528: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL_OW 266
36538: PUSH
36539: LD_INT 0
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36601
36545: LD_INT 1
36547: DOUBLE
36548: EQUAL
36549: IFTRUE 36601
36551: LD_INT 6
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36601
36557: LD_INT 7
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36601
36563: LD_INT 8
36565: DOUBLE
36566: EQUAL
36567: IFTRUE 36601
36569: LD_INT 4
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36601
36575: LD_INT 5
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36601
36581: LD_INT 2
36583: DOUBLE
36584: EQUAL
36585: IFTRUE 36601
36587: LD_INT 3
36589: DOUBLE
36590: EQUAL
36591: IFTRUE 36601
36593: LD_INT 35
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36612
36601: POP
// places := 6 ; b_bunker , b_breastwork :
36602: LD_ADDR_VAR 0 3
36606: PUSH
36607: LD_INT 6
36609: ST_TO_ADDR
36610: GO 36657
36612: LD_INT 32
36614: DOUBLE
36615: EQUAL
36616: IFTRUE 36626
36618: LD_INT 31
36620: DOUBLE
36621: EQUAL
36622: IFTRUE 36626
36624: GO 36637
36626: POP
// places := 1 ; b_control_tower :
36627: LD_ADDR_VAR 0 3
36631: PUSH
36632: LD_INT 1
36634: ST_TO_ADDR
36635: GO 36657
36637: LD_INT 36
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36656
36645: POP
// places := 3 ; end ;
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_INT 3
36653: ST_TO_ADDR
36654: GO 36657
36656: POP
// if places then
36657: LD_VAR 0 3
36661: IFFALSE 36684
// result := UnitsInside ( building ) < places ;
36663: LD_ADDR_VAR 0 2
36667: PUSH
36668: LD_VAR 0 1
36672: PPUSH
36673: CALL_OW 313
36677: PUSH
36678: LD_VAR 0 3
36682: LESS
36683: ST_TO_ADDR
// end ;
36684: LD_VAR 0 2
36688: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36689: LD_INT 0
36691: PPUSH
36692: PPUSH
36693: PPUSH
36694: PPUSH
// tmp := [ ] ;
36695: LD_ADDR_VAR 0 3
36699: PUSH
36700: EMPTY
36701: ST_TO_ADDR
// list := [ ] ;
36702: LD_ADDR_VAR 0 5
36706: PUSH
36707: EMPTY
36708: ST_TO_ADDR
// for i = 16 to 25 do
36709: LD_ADDR_VAR 0 4
36713: PUSH
36714: DOUBLE
36715: LD_INT 16
36717: DEC
36718: ST_TO_ADDR
36719: LD_INT 25
36721: PUSH
36722: FOR_TO
36723: IFFALSE 36796
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36725: LD_ADDR_VAR 0 3
36729: PUSH
36730: LD_VAR 0 3
36734: PUSH
36735: LD_INT 22
36737: PUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: CALL_OW 255
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 91
36754: PUSH
36755: LD_VAR 0 1
36759: PUSH
36760: LD_INT 6
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 30
36770: PUSH
36771: LD_VAR 0 4
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: PUSH
36785: EMPTY
36786: LIST
36787: PPUSH
36788: CALL_OW 69
36792: ADD
36793: ST_TO_ADDR
36794: GO 36722
36796: POP
36797: POP
// for i = 1 to tmp do
36798: LD_ADDR_VAR 0 4
36802: PUSH
36803: DOUBLE
36804: LD_INT 1
36806: DEC
36807: ST_TO_ADDR
36808: LD_VAR 0 3
36812: PUSH
36813: FOR_TO
36814: IFFALSE 36902
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36816: LD_ADDR_VAR 0 5
36820: PUSH
36821: LD_VAR 0 5
36825: PUSH
36826: LD_VAR 0 3
36830: PUSH
36831: LD_VAR 0 4
36835: ARRAY
36836: PPUSH
36837: CALL_OW 266
36841: PUSH
36842: LD_VAR 0 3
36846: PUSH
36847: LD_VAR 0 4
36851: ARRAY
36852: PPUSH
36853: CALL_OW 250
36857: PUSH
36858: LD_VAR 0 3
36862: PUSH
36863: LD_VAR 0 4
36867: ARRAY
36868: PPUSH
36869: CALL_OW 251
36873: PUSH
36874: LD_VAR 0 3
36878: PUSH
36879: LD_VAR 0 4
36883: ARRAY
36884: PPUSH
36885: CALL_OW 254
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: ADD
36899: ST_TO_ADDR
36900: GO 36813
36902: POP
36903: POP
// result := list ;
36904: LD_ADDR_VAR 0 2
36908: PUSH
36909: LD_VAR 0 5
36913: ST_TO_ADDR
// end ;
36914: LD_VAR 0 2
36918: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36919: LD_INT 0
36921: PPUSH
36922: PPUSH
36923: PPUSH
36924: PPUSH
36925: PPUSH
36926: PPUSH
36927: PPUSH
// if not factory then
36928: LD_VAR 0 1
36932: NOT
36933: IFFALSE 36937
// exit ;
36935: GO 37530
// if control = control_apeman then
36937: LD_VAR 0 4
36941: PUSH
36942: LD_INT 5
36944: EQUAL
36945: IFFALSE 37054
// begin tmp := UnitsInside ( factory ) ;
36947: LD_ADDR_VAR 0 8
36951: PUSH
36952: LD_VAR 0 1
36956: PPUSH
36957: CALL_OW 313
36961: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36962: LD_VAR 0 8
36966: PPUSH
36967: LD_INT 25
36969: PUSH
36970: LD_INT 12
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PPUSH
36977: CALL_OW 72
36981: NOT
36982: IFFALSE 36992
// control := control_manual ;
36984: LD_ADDR_VAR 0 4
36988: PUSH
36989: LD_INT 1
36991: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36992: LD_ADDR_VAR 0 8
36996: PUSH
36997: LD_VAR 0 1
37001: PPUSH
37002: CALL 36689 0 1
37006: ST_TO_ADDR
// if tmp then
37007: LD_VAR 0 8
37011: IFFALSE 37054
// begin for i in tmp do
37013: LD_ADDR_VAR 0 7
37017: PUSH
37018: LD_VAR 0 8
37022: PUSH
37023: FOR_IN
37024: IFFALSE 37052
// if i [ 1 ] = b_ext_radio then
37026: LD_VAR 0 7
37030: PUSH
37031: LD_INT 1
37033: ARRAY
37034: PUSH
37035: LD_INT 22
37037: EQUAL
37038: IFFALSE 37050
// begin control := control_remote ;
37040: LD_ADDR_VAR 0 4
37044: PUSH
37045: LD_INT 2
37047: ST_TO_ADDR
// break ;
37048: GO 37052
// end ;
37050: GO 37023
37052: POP
37053: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37054: LD_VAR 0 1
37058: PPUSH
37059: LD_VAR 0 2
37063: PPUSH
37064: LD_VAR 0 3
37068: PPUSH
37069: LD_VAR 0 4
37073: PPUSH
37074: LD_VAR 0 5
37078: PPUSH
37079: CALL_OW 448
37083: IFFALSE 37118
// begin result := [ chassis , engine , control , weapon ] ;
37085: LD_ADDR_VAR 0 6
37089: PUSH
37090: LD_VAR 0 2
37094: PUSH
37095: LD_VAR 0 3
37099: PUSH
37100: LD_VAR 0 4
37104: PUSH
37105: LD_VAR 0 5
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// exit ;
37116: GO 37530
// end ; _chassis := AvailableChassisList ( factory ) ;
37118: LD_ADDR_VAR 0 9
37122: PUSH
37123: LD_VAR 0 1
37127: PPUSH
37128: CALL_OW 475
37132: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37133: LD_ADDR_VAR 0 11
37137: PUSH
37138: LD_VAR 0 1
37142: PPUSH
37143: CALL_OW 476
37147: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37148: LD_ADDR_VAR 0 12
37152: PUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 477
37162: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37163: LD_ADDR_VAR 0 10
37167: PUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: CALL_OW 478
37177: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37178: LD_VAR 0 9
37182: NOT
37183: PUSH
37184: LD_VAR 0 11
37188: NOT
37189: OR
37190: PUSH
37191: LD_VAR 0 12
37195: NOT
37196: OR
37197: PUSH
37198: LD_VAR 0 10
37202: NOT
37203: OR
37204: IFFALSE 37239
// begin result := [ chassis , engine , control , weapon ] ;
37206: LD_ADDR_VAR 0 6
37210: PUSH
37211: LD_VAR 0 2
37215: PUSH
37216: LD_VAR 0 3
37220: PUSH
37221: LD_VAR 0 4
37225: PUSH
37226: LD_VAR 0 5
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
// exit ;
37237: GO 37530
// end ; if not chassis in _chassis then
37239: LD_VAR 0 2
37243: PUSH
37244: LD_VAR 0 9
37248: IN
37249: NOT
37250: IFFALSE 37276
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37252: LD_ADDR_VAR 0 2
37256: PUSH
37257: LD_VAR 0 9
37261: PUSH
37262: LD_INT 1
37264: PPUSH
37265: LD_VAR 0 9
37269: PPUSH
37270: CALL_OW 12
37274: ARRAY
37275: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37276: LD_VAR 0 2
37280: PPUSH
37281: LD_VAR 0 3
37285: PPUSH
37286: CALL 37535 0 2
37290: NOT
37291: IFFALSE 37350
// repeat engine := _engine [ 1 ] ;
37293: LD_ADDR_VAR 0 3
37297: PUSH
37298: LD_VAR 0 11
37302: PUSH
37303: LD_INT 1
37305: ARRAY
37306: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37307: LD_ADDR_VAR 0 11
37311: PUSH
37312: LD_VAR 0 11
37316: PPUSH
37317: LD_INT 1
37319: PPUSH
37320: CALL_OW 3
37324: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37325: LD_VAR 0 2
37329: PPUSH
37330: LD_VAR 0 3
37334: PPUSH
37335: CALL 37535 0 2
37339: PUSH
37340: LD_VAR 0 11
37344: PUSH
37345: EMPTY
37346: EQUAL
37347: OR
37348: IFFALSE 37293
// if not control in _control then
37350: LD_VAR 0 4
37354: PUSH
37355: LD_VAR 0 12
37359: IN
37360: NOT
37361: IFFALSE 37387
// control := _control [ rand ( 1 , _control ) ] ;
37363: LD_ADDR_VAR 0 4
37367: PUSH
37368: LD_VAR 0 12
37372: PUSH
37373: LD_INT 1
37375: PPUSH
37376: LD_VAR 0 12
37380: PPUSH
37381: CALL_OW 12
37385: ARRAY
37386: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37387: LD_VAR 0 2
37391: PPUSH
37392: LD_VAR 0 5
37396: PPUSH
37397: CALL 37755 0 2
37401: NOT
37402: IFFALSE 37461
// repeat weapon := _weapon [ 1 ] ;
37404: LD_ADDR_VAR 0 5
37408: PUSH
37409: LD_VAR 0 10
37413: PUSH
37414: LD_INT 1
37416: ARRAY
37417: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37418: LD_ADDR_VAR 0 10
37422: PUSH
37423: LD_VAR 0 10
37427: PPUSH
37428: LD_INT 1
37430: PPUSH
37431: CALL_OW 3
37435: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37436: LD_VAR 0 2
37440: PPUSH
37441: LD_VAR 0 5
37445: PPUSH
37446: CALL 37755 0 2
37450: PUSH
37451: LD_VAR 0 10
37455: PUSH
37456: EMPTY
37457: EQUAL
37458: OR
37459: IFFALSE 37404
// result := [ ] ;
37461: LD_ADDR_VAR 0 6
37465: PUSH
37466: EMPTY
37467: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37468: LD_VAR 0 1
37472: PPUSH
37473: LD_VAR 0 2
37477: PPUSH
37478: LD_VAR 0 3
37482: PPUSH
37483: LD_VAR 0 4
37487: PPUSH
37488: LD_VAR 0 5
37492: PPUSH
37493: CALL_OW 448
37497: IFFALSE 37530
// result := [ chassis , engine , control , weapon ] ;
37499: LD_ADDR_VAR 0 6
37503: PUSH
37504: LD_VAR 0 2
37508: PUSH
37509: LD_VAR 0 3
37513: PUSH
37514: LD_VAR 0 4
37518: PUSH
37519: LD_VAR 0 5
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: ST_TO_ADDR
// end ;
37530: LD_VAR 0 6
37534: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37535: LD_INT 0
37537: PPUSH
// if not chassis or not engine then
37538: LD_VAR 0 1
37542: NOT
37543: PUSH
37544: LD_VAR 0 2
37548: NOT
37549: OR
37550: IFFALSE 37554
// exit ;
37552: GO 37750
// case engine of engine_solar :
37554: LD_VAR 0 2
37558: PUSH
37559: LD_INT 2
37561: DOUBLE
37562: EQUAL
37563: IFTRUE 37567
37565: GO 37605
37567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37568: LD_ADDR_VAR 0 3
37572: PUSH
37573: LD_INT 11
37575: PUSH
37576: LD_INT 12
37578: PUSH
37579: LD_INT 13
37581: PUSH
37582: LD_INT 14
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 2
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: ST_TO_ADDR
37603: GO 37734
37605: LD_INT 1
37607: DOUBLE
37608: EQUAL
37609: IFTRUE 37613
37611: GO 37675
37613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37614: LD_ADDR_VAR 0 3
37618: PUSH
37619: LD_INT 11
37621: PUSH
37622: LD_INT 12
37624: PUSH
37625: LD_INT 13
37627: PUSH
37628: LD_INT 14
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: LD_INT 4
37642: PUSH
37643: LD_INT 5
37645: PUSH
37646: LD_INT 21
37648: PUSH
37649: LD_INT 23
37651: PUSH
37652: LD_INT 22
37654: PUSH
37655: LD_INT 24
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: ST_TO_ADDR
37673: GO 37734
37675: LD_INT 3
37677: DOUBLE
37678: EQUAL
37679: IFTRUE 37683
37681: GO 37733
37683: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37684: LD_ADDR_VAR 0 3
37688: PUSH
37689: LD_INT 13
37691: PUSH
37692: LD_INT 14
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: LD_INT 3
37700: PUSH
37701: LD_INT 4
37703: PUSH
37704: LD_INT 5
37706: PUSH
37707: LD_INT 21
37709: PUSH
37710: LD_INT 22
37712: PUSH
37713: LD_INT 23
37715: PUSH
37716: LD_INT 24
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
37731: GO 37734
37733: POP
// result := ( chassis in result ) ;
37734: LD_ADDR_VAR 0 3
37738: PUSH
37739: LD_VAR 0 1
37743: PUSH
37744: LD_VAR 0 3
37748: IN
37749: ST_TO_ADDR
// end ;
37750: LD_VAR 0 3
37754: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37755: LD_INT 0
37757: PPUSH
// if not chassis or not weapon then
37758: LD_VAR 0 1
37762: NOT
37763: PUSH
37764: LD_VAR 0 2
37768: NOT
37769: OR
37770: IFFALSE 37774
// exit ;
37772: GO 38834
// case weapon of us_machine_gun :
37774: LD_VAR 0 2
37778: PUSH
37779: LD_INT 2
37781: DOUBLE
37782: EQUAL
37783: IFTRUE 37787
37785: GO 37817
37787: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37788: LD_ADDR_VAR 0 3
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 3
37801: PUSH
37802: LD_INT 4
37804: PUSH
37805: LD_INT 5
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
37815: GO 38818
37817: LD_INT 3
37819: DOUBLE
37820: EQUAL
37821: IFTRUE 37825
37823: GO 37855
37825: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37826: LD_ADDR_VAR 0 3
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: LD_INT 4
37842: PUSH
37843: LD_INT 5
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: ST_TO_ADDR
37853: GO 38818
37855: LD_INT 11
37857: DOUBLE
37858: EQUAL
37859: IFTRUE 37863
37861: GO 37893
37863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37864: LD_ADDR_VAR 0 3
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: LD_INT 4
37880: PUSH
37881: LD_INT 5
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: ST_TO_ADDR
37891: GO 38818
37893: LD_INT 4
37895: DOUBLE
37896: EQUAL
37897: IFTRUE 37901
37899: GO 37927
37901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37902: LD_ADDR_VAR 0 3
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: LD_INT 4
37915: PUSH
37916: LD_INT 5
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
37925: GO 38818
37927: LD_INT 5
37929: DOUBLE
37930: EQUAL
37931: IFTRUE 37935
37933: GO 37961
37935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37936: LD_ADDR_VAR 0 3
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: LD_INT 4
37949: PUSH
37950: LD_INT 5
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: ST_TO_ADDR
37959: GO 38818
37961: LD_INT 9
37963: DOUBLE
37964: EQUAL
37965: IFTRUE 37969
37967: GO 37995
37969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: LD_INT 4
37983: PUSH
37984: LD_INT 5
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: ST_TO_ADDR
37993: GO 38818
37995: LD_INT 7
37997: DOUBLE
37998: EQUAL
37999: IFTRUE 38003
38001: GO 38029
38003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38004: LD_ADDR_VAR 0 3
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: LD_INT 3
38014: PUSH
38015: LD_INT 4
38017: PUSH
38018: LD_INT 5
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: ST_TO_ADDR
38027: GO 38818
38029: LD_INT 12
38031: DOUBLE
38032: EQUAL
38033: IFTRUE 38037
38035: GO 38063
38037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: LD_INT 4
38051: PUSH
38052: LD_INT 5
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
38061: GO 38818
38063: LD_INT 13
38065: DOUBLE
38066: EQUAL
38067: IFTRUE 38071
38069: GO 38097
38071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38072: LD_ADDR_VAR 0 3
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: LD_INT 3
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: LD_INT 5
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
38095: GO 38818
38097: LD_INT 14
38099: DOUBLE
38100: EQUAL
38101: IFTRUE 38105
38103: GO 38123
38105: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38106: LD_ADDR_VAR 0 3
38110: PUSH
38111: LD_INT 4
38113: PUSH
38114: LD_INT 5
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: ST_TO_ADDR
38121: GO 38818
38123: LD_INT 6
38125: DOUBLE
38126: EQUAL
38127: IFTRUE 38131
38129: GO 38149
38131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38132: LD_ADDR_VAR 0 3
38136: PUSH
38137: LD_INT 4
38139: PUSH
38140: LD_INT 5
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: ST_TO_ADDR
38147: GO 38818
38149: LD_INT 10
38151: DOUBLE
38152: EQUAL
38153: IFTRUE 38157
38155: GO 38175
38157: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38158: LD_ADDR_VAR 0 3
38162: PUSH
38163: LD_INT 4
38165: PUSH
38166: LD_INT 5
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: ST_TO_ADDR
38173: GO 38818
38175: LD_INT 22
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38183
38181: GO 38209
38183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: LD_INT 11
38191: PUSH
38192: LD_INT 12
38194: PUSH
38195: LD_INT 13
38197: PUSH
38198: LD_INT 14
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: ST_TO_ADDR
38207: GO 38818
38209: LD_INT 23
38211: DOUBLE
38212: EQUAL
38213: IFTRUE 38217
38215: GO 38243
38217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38218: LD_ADDR_VAR 0 3
38222: PUSH
38223: LD_INT 11
38225: PUSH
38226: LD_INT 12
38228: PUSH
38229: LD_INT 13
38231: PUSH
38232: LD_INT 14
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
38241: GO 38818
38243: LD_INT 24
38245: DOUBLE
38246: EQUAL
38247: IFTRUE 38251
38249: GO 38277
38251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38252: LD_ADDR_VAR 0 3
38256: PUSH
38257: LD_INT 11
38259: PUSH
38260: LD_INT 12
38262: PUSH
38263: LD_INT 13
38265: PUSH
38266: LD_INT 14
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
38275: GO 38818
38277: LD_INT 30
38279: DOUBLE
38280: EQUAL
38281: IFTRUE 38285
38283: GO 38311
38285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38286: LD_ADDR_VAR 0 3
38290: PUSH
38291: LD_INT 11
38293: PUSH
38294: LD_INT 12
38296: PUSH
38297: LD_INT 13
38299: PUSH
38300: LD_INT 14
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
38309: GO 38818
38311: LD_INT 25
38313: DOUBLE
38314: EQUAL
38315: IFTRUE 38319
38317: GO 38337
38319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38320: LD_ADDR_VAR 0 3
38324: PUSH
38325: LD_INT 13
38327: PUSH
38328: LD_INT 14
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: ST_TO_ADDR
38335: GO 38818
38337: LD_INT 27
38339: DOUBLE
38340: EQUAL
38341: IFTRUE 38345
38343: GO 38363
38345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38346: LD_ADDR_VAR 0 3
38350: PUSH
38351: LD_INT 13
38353: PUSH
38354: LD_INT 14
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: ST_TO_ADDR
38361: GO 38818
38363: LD_INT 92
38365: DOUBLE
38366: EQUAL
38367: IFTRUE 38371
38369: GO 38397
38371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38372: LD_ADDR_VAR 0 3
38376: PUSH
38377: LD_INT 11
38379: PUSH
38380: LD_INT 12
38382: PUSH
38383: LD_INT 13
38385: PUSH
38386: LD_INT 14
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
38395: GO 38818
38397: LD_INT 28
38399: DOUBLE
38400: EQUAL
38401: IFTRUE 38405
38403: GO 38423
38405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_INT 13
38413: PUSH
38414: LD_INT 14
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: ST_TO_ADDR
38421: GO 38818
38423: LD_INT 29
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38431
38429: GO 38449
38431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: LD_INT 13
38439: PUSH
38440: LD_INT 14
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: ST_TO_ADDR
38447: GO 38818
38449: LD_INT 31
38451: DOUBLE
38452: EQUAL
38453: IFTRUE 38457
38455: GO 38475
38457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38458: LD_ADDR_VAR 0 3
38462: PUSH
38463: LD_INT 13
38465: PUSH
38466: LD_INT 14
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: ST_TO_ADDR
38473: GO 38818
38475: LD_INT 26
38477: DOUBLE
38478: EQUAL
38479: IFTRUE 38483
38481: GO 38501
38483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38484: LD_ADDR_VAR 0 3
38488: PUSH
38489: LD_INT 13
38491: PUSH
38492: LD_INT 14
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: ST_TO_ADDR
38499: GO 38818
38501: LD_INT 42
38503: DOUBLE
38504: EQUAL
38505: IFTRUE 38509
38507: GO 38535
38509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38510: LD_ADDR_VAR 0 3
38514: PUSH
38515: LD_INT 21
38517: PUSH
38518: LD_INT 22
38520: PUSH
38521: LD_INT 23
38523: PUSH
38524: LD_INT 24
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
38533: GO 38818
38535: LD_INT 43
38537: DOUBLE
38538: EQUAL
38539: IFTRUE 38543
38541: GO 38569
38543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38544: LD_ADDR_VAR 0 3
38548: PUSH
38549: LD_INT 21
38551: PUSH
38552: LD_INT 22
38554: PUSH
38555: LD_INT 23
38557: PUSH
38558: LD_INT 24
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: ST_TO_ADDR
38567: GO 38818
38569: LD_INT 44
38571: DOUBLE
38572: EQUAL
38573: IFTRUE 38577
38575: GO 38603
38577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38578: LD_ADDR_VAR 0 3
38582: PUSH
38583: LD_INT 21
38585: PUSH
38586: LD_INT 22
38588: PUSH
38589: LD_INT 23
38591: PUSH
38592: LD_INT 24
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: ST_TO_ADDR
38601: GO 38818
38603: LD_INT 45
38605: DOUBLE
38606: EQUAL
38607: IFTRUE 38611
38609: GO 38637
38611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38612: LD_ADDR_VAR 0 3
38616: PUSH
38617: LD_INT 21
38619: PUSH
38620: LD_INT 22
38622: PUSH
38623: LD_INT 23
38625: PUSH
38626: LD_INT 24
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: ST_TO_ADDR
38635: GO 38818
38637: LD_INT 49
38639: DOUBLE
38640: EQUAL
38641: IFTRUE 38645
38643: GO 38671
38645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38646: LD_ADDR_VAR 0 3
38650: PUSH
38651: LD_INT 21
38653: PUSH
38654: LD_INT 22
38656: PUSH
38657: LD_INT 23
38659: PUSH
38660: LD_INT 24
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: ST_TO_ADDR
38669: GO 38818
38671: LD_INT 51
38673: DOUBLE
38674: EQUAL
38675: IFTRUE 38679
38677: GO 38705
38679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: LD_INT 21
38687: PUSH
38688: LD_INT 22
38690: PUSH
38691: LD_INT 23
38693: PUSH
38694: LD_INT 24
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: ST_TO_ADDR
38703: GO 38818
38705: LD_INT 52
38707: DOUBLE
38708: EQUAL
38709: IFTRUE 38713
38711: GO 38739
38713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38714: LD_ADDR_VAR 0 3
38718: PUSH
38719: LD_INT 21
38721: PUSH
38722: LD_INT 22
38724: PUSH
38725: LD_INT 23
38727: PUSH
38728: LD_INT 24
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
38737: GO 38818
38739: LD_INT 53
38741: DOUBLE
38742: EQUAL
38743: IFTRUE 38747
38745: GO 38765
38747: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38748: LD_ADDR_VAR 0 3
38752: PUSH
38753: LD_INT 23
38755: PUSH
38756: LD_INT 24
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: ST_TO_ADDR
38763: GO 38818
38765: LD_INT 46
38767: DOUBLE
38768: EQUAL
38769: IFTRUE 38773
38771: GO 38791
38773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38774: LD_ADDR_VAR 0 3
38778: PUSH
38779: LD_INT 23
38781: PUSH
38782: LD_INT 24
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: ST_TO_ADDR
38789: GO 38818
38791: LD_INT 47
38793: DOUBLE
38794: EQUAL
38795: IFTRUE 38799
38797: GO 38817
38799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38800: LD_ADDR_VAR 0 3
38804: PUSH
38805: LD_INT 23
38807: PUSH
38808: LD_INT 24
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: ST_TO_ADDR
38815: GO 38818
38817: POP
// result := ( chassis in result ) ;
38818: LD_ADDR_VAR 0 3
38822: PUSH
38823: LD_VAR 0 1
38827: PUSH
38828: LD_VAR 0 3
38832: IN
38833: ST_TO_ADDR
// end ;
38834: LD_VAR 0 3
38838: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38839: LD_INT 0
38841: PPUSH
38842: PPUSH
38843: PPUSH
38844: PPUSH
38845: PPUSH
38846: PPUSH
38847: PPUSH
// result := array ;
38848: LD_ADDR_VAR 0 5
38852: PUSH
38853: LD_VAR 0 1
38857: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38858: LD_VAR 0 1
38862: NOT
38863: PUSH
38864: LD_VAR 0 2
38868: NOT
38869: OR
38870: PUSH
38871: LD_VAR 0 3
38875: NOT
38876: OR
38877: PUSH
38878: LD_VAR 0 2
38882: PUSH
38883: LD_VAR 0 1
38887: GREATER
38888: OR
38889: PUSH
38890: LD_VAR 0 3
38894: PUSH
38895: LD_VAR 0 1
38899: GREATER
38900: OR
38901: IFFALSE 38905
// exit ;
38903: GO 39201
// if direction then
38905: LD_VAR 0 4
38909: IFFALSE 38973
// begin d := 1 ;
38911: LD_ADDR_VAR 0 9
38915: PUSH
38916: LD_INT 1
38918: ST_TO_ADDR
// if i_from > i_to then
38919: LD_VAR 0 2
38923: PUSH
38924: LD_VAR 0 3
38928: GREATER
38929: IFFALSE 38955
// length := ( array - i_from ) + i_to else
38931: LD_ADDR_VAR 0 11
38935: PUSH
38936: LD_VAR 0 1
38940: PUSH
38941: LD_VAR 0 2
38945: MINUS
38946: PUSH
38947: LD_VAR 0 3
38951: PLUS
38952: ST_TO_ADDR
38953: GO 38971
// length := i_to - i_from ;
38955: LD_ADDR_VAR 0 11
38959: PUSH
38960: LD_VAR 0 3
38964: PUSH
38965: LD_VAR 0 2
38969: MINUS
38970: ST_TO_ADDR
// end else
38971: GO 39034
// begin d := - 1 ;
38973: LD_ADDR_VAR 0 9
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: ST_TO_ADDR
// if i_from > i_to then
38982: LD_VAR 0 2
38986: PUSH
38987: LD_VAR 0 3
38991: GREATER
38992: IFFALSE 39012
// length := i_from - i_to else
38994: LD_ADDR_VAR 0 11
38998: PUSH
38999: LD_VAR 0 2
39003: PUSH
39004: LD_VAR 0 3
39008: MINUS
39009: ST_TO_ADDR
39010: GO 39034
// length := ( array - i_to ) + i_from ;
39012: LD_ADDR_VAR 0 11
39016: PUSH
39017: LD_VAR 0 1
39021: PUSH
39022: LD_VAR 0 3
39026: MINUS
39027: PUSH
39028: LD_VAR 0 2
39032: PLUS
39033: ST_TO_ADDR
// end ; if not length then
39034: LD_VAR 0 11
39038: NOT
39039: IFFALSE 39043
// exit ;
39041: GO 39201
// tmp := array ;
39043: LD_ADDR_VAR 0 10
39047: PUSH
39048: LD_VAR 0 1
39052: ST_TO_ADDR
// for i = 1 to length do
39053: LD_ADDR_VAR 0 6
39057: PUSH
39058: DOUBLE
39059: LD_INT 1
39061: DEC
39062: ST_TO_ADDR
39063: LD_VAR 0 11
39067: PUSH
39068: FOR_TO
39069: IFFALSE 39189
// begin for j = 1 to array do
39071: LD_ADDR_VAR 0 7
39075: PUSH
39076: DOUBLE
39077: LD_INT 1
39079: DEC
39080: ST_TO_ADDR
39081: LD_VAR 0 1
39085: PUSH
39086: FOR_TO
39087: IFFALSE 39175
// begin k := j + d ;
39089: LD_ADDR_VAR 0 8
39093: PUSH
39094: LD_VAR 0 7
39098: PUSH
39099: LD_VAR 0 9
39103: PLUS
39104: ST_TO_ADDR
// if k > array then
39105: LD_VAR 0 8
39109: PUSH
39110: LD_VAR 0 1
39114: GREATER
39115: IFFALSE 39125
// k := 1 ;
39117: LD_ADDR_VAR 0 8
39121: PUSH
39122: LD_INT 1
39124: ST_TO_ADDR
// if not k then
39125: LD_VAR 0 8
39129: NOT
39130: IFFALSE 39142
// k := array ;
39132: LD_ADDR_VAR 0 8
39136: PUSH
39137: LD_VAR 0 1
39141: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39142: LD_ADDR_VAR 0 10
39146: PUSH
39147: LD_VAR 0 10
39151: PPUSH
39152: LD_VAR 0 8
39156: PPUSH
39157: LD_VAR 0 1
39161: PUSH
39162: LD_VAR 0 7
39166: ARRAY
39167: PPUSH
39168: CALL_OW 1
39172: ST_TO_ADDR
// end ;
39173: GO 39086
39175: POP
39176: POP
// array := tmp ;
39177: LD_ADDR_VAR 0 1
39181: PUSH
39182: LD_VAR 0 10
39186: ST_TO_ADDR
// end ;
39187: GO 39068
39189: POP
39190: POP
// result := array ;
39191: LD_ADDR_VAR 0 5
39195: PUSH
39196: LD_VAR 0 1
39200: ST_TO_ADDR
// end ;
39201: LD_VAR 0 5
39205: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39206: LD_INT 0
39208: PPUSH
39209: PPUSH
// result := 0 ;
39210: LD_ADDR_VAR 0 3
39214: PUSH
39215: LD_INT 0
39217: ST_TO_ADDR
// if not array or not value in array then
39218: LD_VAR 0 1
39222: NOT
39223: PUSH
39224: LD_VAR 0 2
39228: PUSH
39229: LD_VAR 0 1
39233: IN
39234: NOT
39235: OR
39236: IFFALSE 39240
// exit ;
39238: GO 39294
// for i = 1 to array do
39240: LD_ADDR_VAR 0 4
39244: PUSH
39245: DOUBLE
39246: LD_INT 1
39248: DEC
39249: ST_TO_ADDR
39250: LD_VAR 0 1
39254: PUSH
39255: FOR_TO
39256: IFFALSE 39292
// if value = array [ i ] then
39258: LD_VAR 0 2
39262: PUSH
39263: LD_VAR 0 1
39267: PUSH
39268: LD_VAR 0 4
39272: ARRAY
39273: EQUAL
39274: IFFALSE 39290
// begin result := i ;
39276: LD_ADDR_VAR 0 3
39280: PUSH
39281: LD_VAR 0 4
39285: ST_TO_ADDR
// exit ;
39286: POP
39287: POP
39288: GO 39294
// end ;
39290: GO 39255
39292: POP
39293: POP
// end ;
39294: LD_VAR 0 3
39298: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39299: LD_INT 0
39301: PPUSH
// vc_chassis := chassis ;
39302: LD_ADDR_OWVAR 37
39306: PUSH
39307: LD_VAR 0 1
39311: ST_TO_ADDR
// vc_engine := engine ;
39312: LD_ADDR_OWVAR 39
39316: PUSH
39317: LD_VAR 0 2
39321: ST_TO_ADDR
// vc_control := control ;
39322: LD_ADDR_OWVAR 38
39326: PUSH
39327: LD_VAR 0 3
39331: ST_TO_ADDR
// vc_weapon := weapon ;
39332: LD_ADDR_OWVAR 40
39336: PUSH
39337: LD_VAR 0 4
39341: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39342: LD_ADDR_OWVAR 41
39346: PUSH
39347: LD_VAR 0 5
39351: ST_TO_ADDR
// end ;
39352: LD_VAR 0 6
39356: RET
// export function WantPlant ( unit ) ; var task ; begin
39357: LD_INT 0
39359: PPUSH
39360: PPUSH
// result := false ;
39361: LD_ADDR_VAR 0 2
39365: PUSH
39366: LD_INT 0
39368: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39369: LD_ADDR_VAR 0 3
39373: PUSH
39374: LD_VAR 0 1
39378: PPUSH
39379: CALL_OW 437
39383: ST_TO_ADDR
// if task then
39384: LD_VAR 0 3
39388: IFFALSE 39416
// if task [ 1 ] [ 1 ] = p then
39390: LD_VAR 0 3
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PUSH
39403: LD_STRING p
39405: EQUAL
39406: IFFALSE 39416
// result := true ;
39408: LD_ADDR_VAR 0 2
39412: PUSH
39413: LD_INT 1
39415: ST_TO_ADDR
// end ;
39416: LD_VAR 0 2
39420: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39421: LD_INT 0
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
// if pos < 1 then
39427: LD_VAR 0 2
39431: PUSH
39432: LD_INT 1
39434: LESS
39435: IFFALSE 39439
// exit ;
39437: GO 39742
// if pos = 1 then
39439: LD_VAR 0 2
39443: PUSH
39444: LD_INT 1
39446: EQUAL
39447: IFFALSE 39480
// result := Replace ( arr , pos [ 1 ] , value ) else
39449: LD_ADDR_VAR 0 4
39453: PUSH
39454: LD_VAR 0 1
39458: PPUSH
39459: LD_VAR 0 2
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: LD_VAR 0 3
39472: PPUSH
39473: CALL_OW 1
39477: ST_TO_ADDR
39478: GO 39742
// begin tmp := arr ;
39480: LD_ADDR_VAR 0 6
39484: PUSH
39485: LD_VAR 0 1
39489: ST_TO_ADDR
// s_arr := [ tmp ] ;
39490: LD_ADDR_VAR 0 7
39494: PUSH
39495: LD_VAR 0 6
39499: PUSH
39500: EMPTY
39501: LIST
39502: ST_TO_ADDR
// for i = 1 to pos - 1 do
39503: LD_ADDR_VAR 0 5
39507: PUSH
39508: DOUBLE
39509: LD_INT 1
39511: DEC
39512: ST_TO_ADDR
39513: LD_VAR 0 2
39517: PUSH
39518: LD_INT 1
39520: MINUS
39521: PUSH
39522: FOR_TO
39523: IFFALSE 39568
// begin tmp := tmp [ pos [ i ] ] ;
39525: LD_ADDR_VAR 0 6
39529: PUSH
39530: LD_VAR 0 6
39534: PUSH
39535: LD_VAR 0 2
39539: PUSH
39540: LD_VAR 0 5
39544: ARRAY
39545: ARRAY
39546: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39547: LD_ADDR_VAR 0 7
39551: PUSH
39552: LD_VAR 0 7
39556: PUSH
39557: LD_VAR 0 6
39561: PUSH
39562: EMPTY
39563: LIST
39564: ADD
39565: ST_TO_ADDR
// end ;
39566: GO 39522
39568: POP
39569: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39570: LD_ADDR_VAR 0 6
39574: PUSH
39575: LD_VAR 0 6
39579: PPUSH
39580: LD_VAR 0 2
39584: PUSH
39585: LD_VAR 0 2
39589: ARRAY
39590: PPUSH
39591: LD_VAR 0 3
39595: PPUSH
39596: CALL_OW 1
39600: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39601: LD_ADDR_VAR 0 7
39605: PUSH
39606: LD_VAR 0 7
39610: PPUSH
39611: LD_VAR 0 7
39615: PPUSH
39616: LD_VAR 0 6
39620: PPUSH
39621: CALL_OW 1
39625: ST_TO_ADDR
// for i = s_arr downto 2 do
39626: LD_ADDR_VAR 0 5
39630: PUSH
39631: DOUBLE
39632: LD_VAR 0 7
39636: INC
39637: ST_TO_ADDR
39638: LD_INT 2
39640: PUSH
39641: FOR_DOWNTO
39642: IFFALSE 39726
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39644: LD_ADDR_VAR 0 6
39648: PUSH
39649: LD_VAR 0 7
39653: PUSH
39654: LD_VAR 0 5
39658: PUSH
39659: LD_INT 1
39661: MINUS
39662: ARRAY
39663: PPUSH
39664: LD_VAR 0 2
39668: PUSH
39669: LD_VAR 0 5
39673: PUSH
39674: LD_INT 1
39676: MINUS
39677: ARRAY
39678: PPUSH
39679: LD_VAR 0 7
39683: PUSH
39684: LD_VAR 0 5
39688: ARRAY
39689: PPUSH
39690: CALL_OW 1
39694: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39695: LD_ADDR_VAR 0 7
39699: PUSH
39700: LD_VAR 0 7
39704: PPUSH
39705: LD_VAR 0 5
39709: PUSH
39710: LD_INT 1
39712: MINUS
39713: PPUSH
39714: LD_VAR 0 6
39718: PPUSH
39719: CALL_OW 1
39723: ST_TO_ADDR
// end ;
39724: GO 39641
39726: POP
39727: POP
// result := s_arr [ 1 ] ;
39728: LD_ADDR_VAR 0 4
39732: PUSH
39733: LD_VAR 0 7
39737: PUSH
39738: LD_INT 1
39740: ARRAY
39741: ST_TO_ADDR
// end ; end ;
39742: LD_VAR 0 4
39746: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39747: LD_INT 0
39749: PPUSH
39750: PPUSH
// if not list then
39751: LD_VAR 0 1
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 39851
// i := list [ pos1 ] ;
39760: LD_ADDR_VAR 0 5
39764: PUSH
39765: LD_VAR 0 1
39769: PUSH
39770: LD_VAR 0 2
39774: ARRAY
39775: ST_TO_ADDR
// if not i then
39776: LD_VAR 0 5
39780: NOT
39781: IFFALSE 39785
// exit ;
39783: GO 39851
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39785: LD_ADDR_VAR 0 1
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: LD_VAR 0 2
39799: PPUSH
39800: LD_VAR 0 1
39804: PUSH
39805: LD_VAR 0 3
39809: ARRAY
39810: PPUSH
39811: CALL_OW 1
39815: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39816: LD_ADDR_VAR 0 1
39820: PUSH
39821: LD_VAR 0 1
39825: PPUSH
39826: LD_VAR 0 3
39830: PPUSH
39831: LD_VAR 0 5
39835: PPUSH
39836: CALL_OW 1
39840: ST_TO_ADDR
// result := list ;
39841: LD_ADDR_VAR 0 4
39845: PUSH
39846: LD_VAR 0 1
39850: ST_TO_ADDR
// end ;
39851: LD_VAR 0 4
39855: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39856: LD_INT 0
39858: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39859: LD_ADDR_VAR 0 5
39863: PUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 250
39873: PPUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 251
39883: PPUSH
39884: LD_VAR 0 2
39888: PPUSH
39889: LD_VAR 0 3
39893: PPUSH
39894: LD_VAR 0 4
39898: PPUSH
39899: CALL 39909 0 5
39903: ST_TO_ADDR
// end ;
39904: LD_VAR 0 5
39908: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39909: LD_INT 0
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
// if not list then
39915: LD_VAR 0 3
39919: NOT
39920: IFFALSE 39924
// exit ;
39922: GO 40312
// result := [ ] ;
39924: LD_ADDR_VAR 0 6
39928: PUSH
39929: EMPTY
39930: ST_TO_ADDR
// for i in list do
39931: LD_ADDR_VAR 0 7
39935: PUSH
39936: LD_VAR 0 3
39940: PUSH
39941: FOR_IN
39942: IFFALSE 40144
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39944: LD_ADDR_VAR 0 9
39948: PUSH
39949: LD_VAR 0 7
39953: PPUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: LD_VAR 0 2
39963: PPUSH
39964: CALL_OW 297
39968: ST_TO_ADDR
// if not result then
39969: LD_VAR 0 6
39973: NOT
39974: IFFALSE 40000
// result := [ [ i , tmp ] ] else
39976: LD_ADDR_VAR 0 6
39980: PUSH
39981: LD_VAR 0 7
39985: PUSH
39986: LD_VAR 0 9
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: ST_TO_ADDR
39998: GO 40142
// begin if result [ result ] [ 2 ] < tmp then
40000: LD_VAR 0 6
40004: PUSH
40005: LD_VAR 0 6
40009: ARRAY
40010: PUSH
40011: LD_INT 2
40013: ARRAY
40014: PUSH
40015: LD_VAR 0 9
40019: LESS
40020: IFFALSE 40062
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40022: LD_ADDR_VAR 0 6
40026: PUSH
40027: LD_VAR 0 6
40031: PPUSH
40032: LD_VAR 0 6
40036: PUSH
40037: LD_INT 1
40039: PLUS
40040: PPUSH
40041: LD_VAR 0 7
40045: PUSH
40046: LD_VAR 0 9
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PPUSH
40055: CALL_OW 2
40059: ST_TO_ADDR
40060: GO 40142
// for j = 1 to result do
40062: LD_ADDR_VAR 0 8
40066: PUSH
40067: DOUBLE
40068: LD_INT 1
40070: DEC
40071: ST_TO_ADDR
40072: LD_VAR 0 6
40076: PUSH
40077: FOR_TO
40078: IFFALSE 40140
// begin if tmp < result [ j ] [ 2 ] then
40080: LD_VAR 0 9
40084: PUSH
40085: LD_VAR 0 6
40089: PUSH
40090: LD_VAR 0 8
40094: ARRAY
40095: PUSH
40096: LD_INT 2
40098: ARRAY
40099: LESS
40100: IFFALSE 40138
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40102: LD_ADDR_VAR 0 6
40106: PUSH
40107: LD_VAR 0 6
40111: PPUSH
40112: LD_VAR 0 8
40116: PPUSH
40117: LD_VAR 0 7
40121: PUSH
40122: LD_VAR 0 9
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PPUSH
40131: CALL_OW 2
40135: ST_TO_ADDR
// break ;
40136: GO 40140
// end ; end ;
40138: GO 40077
40140: POP
40141: POP
// end ; end ;
40142: GO 39941
40144: POP
40145: POP
// if result and not asc then
40146: LD_VAR 0 6
40150: PUSH
40151: LD_VAR 0 4
40155: NOT
40156: AND
40157: IFFALSE 40232
// begin tmp := result ;
40159: LD_ADDR_VAR 0 9
40163: PUSH
40164: LD_VAR 0 6
40168: ST_TO_ADDR
// for i = tmp downto 1 do
40169: LD_ADDR_VAR 0 7
40173: PUSH
40174: DOUBLE
40175: LD_VAR 0 9
40179: INC
40180: ST_TO_ADDR
40181: LD_INT 1
40183: PUSH
40184: FOR_DOWNTO
40185: IFFALSE 40230
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40187: LD_ADDR_VAR 0 6
40191: PUSH
40192: LD_VAR 0 6
40196: PPUSH
40197: LD_VAR 0 9
40201: PUSH
40202: LD_VAR 0 7
40206: MINUS
40207: PUSH
40208: LD_INT 1
40210: PLUS
40211: PPUSH
40212: LD_VAR 0 9
40216: PUSH
40217: LD_VAR 0 7
40221: ARRAY
40222: PPUSH
40223: CALL_OW 1
40227: ST_TO_ADDR
40228: GO 40184
40230: POP
40231: POP
// end ; tmp := [ ] ;
40232: LD_ADDR_VAR 0 9
40236: PUSH
40237: EMPTY
40238: ST_TO_ADDR
// if mode then
40239: LD_VAR 0 5
40243: IFFALSE 40312
// begin for i = 1 to result do
40245: LD_ADDR_VAR 0 7
40249: PUSH
40250: DOUBLE
40251: LD_INT 1
40253: DEC
40254: ST_TO_ADDR
40255: LD_VAR 0 6
40259: PUSH
40260: FOR_TO
40261: IFFALSE 40300
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40263: LD_ADDR_VAR 0 9
40267: PUSH
40268: LD_VAR 0 9
40272: PPUSH
40273: LD_VAR 0 7
40277: PPUSH
40278: LD_VAR 0 6
40282: PUSH
40283: LD_VAR 0 7
40287: ARRAY
40288: PUSH
40289: LD_INT 1
40291: ARRAY
40292: PPUSH
40293: CALL_OW 1
40297: ST_TO_ADDR
40298: GO 40260
40300: POP
40301: POP
// result := tmp ;
40302: LD_ADDR_VAR 0 6
40306: PUSH
40307: LD_VAR 0 9
40311: ST_TO_ADDR
// end ; end ;
40312: LD_VAR 0 6
40316: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40317: LD_INT 0
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40325: LD_ADDR_VAR 0 5
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: ST_TO_ADDR
// if not x or not y then
40347: LD_VAR 0 2
40351: NOT
40352: PUSH
40353: LD_VAR 0 3
40357: NOT
40358: OR
40359: IFFALSE 40363
// exit ;
40361: GO 42013
// if not range then
40363: LD_VAR 0 4
40367: NOT
40368: IFFALSE 40378
// range := 10 ;
40370: LD_ADDR_VAR 0 4
40374: PUSH
40375: LD_INT 10
40377: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40378: LD_ADDR_VAR 0 8
40382: PUSH
40383: LD_INT 81
40385: PUSH
40386: LD_VAR 0 1
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 92
40397: PUSH
40398: LD_VAR 0 2
40402: PUSH
40403: LD_VAR 0 3
40407: PUSH
40408: LD_VAR 0 4
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 3
40421: PUSH
40422: LD_INT 21
40424: PUSH
40425: LD_INT 3
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: PPUSH
40441: CALL_OW 69
40445: ST_TO_ADDR
// if not tmp then
40446: LD_VAR 0 8
40450: NOT
40451: IFFALSE 40455
// exit ;
40453: GO 42013
// for i in tmp do
40455: LD_ADDR_VAR 0 6
40459: PUSH
40460: LD_VAR 0 8
40464: PUSH
40465: FOR_IN
40466: IFFALSE 41988
// begin points := [ 0 , 0 , 0 ] ;
40468: LD_ADDR_VAR 0 9
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
// bpoints := 1 ;
40487: LD_ADDR_VAR 0 10
40491: PUSH
40492: LD_INT 1
40494: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40495: LD_VAR 0 6
40499: PPUSH
40500: CALL_OW 247
40504: PUSH
40505: LD_INT 1
40507: DOUBLE
40508: EQUAL
40509: IFTRUE 40513
40511: GO 41091
40513: POP
// begin if GetClass ( i ) = 1 then
40514: LD_VAR 0 6
40518: PPUSH
40519: CALL_OW 257
40523: PUSH
40524: LD_INT 1
40526: EQUAL
40527: IFFALSE 40548
// points := [ 10 , 5 , 3 ] ;
40529: LD_ADDR_VAR 0 9
40533: PUSH
40534: LD_INT 10
40536: PUSH
40537: LD_INT 5
40539: PUSH
40540: LD_INT 3
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40548: LD_VAR 0 6
40552: PPUSH
40553: CALL_OW 257
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 3
40563: PUSH
40564: LD_INT 4
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: IN
40572: IFFALSE 40593
// points := [ 3 , 2 , 1 ] ;
40574: LD_ADDR_VAR 0 9
40578: PUSH
40579: LD_INT 3
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40593: LD_VAR 0 6
40597: PPUSH
40598: CALL_OW 257
40602: PUSH
40603: LD_INT 5
40605: EQUAL
40606: IFFALSE 40627
// points := [ 130 , 5 , 2 ] ;
40608: LD_ADDR_VAR 0 9
40612: PUSH
40613: LD_INT 130
40615: PUSH
40616: LD_INT 5
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40627: LD_VAR 0 6
40631: PPUSH
40632: CALL_OW 257
40636: PUSH
40637: LD_INT 8
40639: EQUAL
40640: IFFALSE 40661
// points := [ 35 , 35 , 30 ] ;
40642: LD_ADDR_VAR 0 9
40646: PUSH
40647: LD_INT 35
40649: PUSH
40650: LD_INT 35
40652: PUSH
40653: LD_INT 30
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40661: LD_VAR 0 6
40665: PPUSH
40666: CALL_OW 257
40670: PUSH
40671: LD_INT 9
40673: EQUAL
40674: IFFALSE 40695
// points := [ 20 , 55 , 40 ] ;
40676: LD_ADDR_VAR 0 9
40680: PUSH
40681: LD_INT 20
40683: PUSH
40684: LD_INT 55
40686: PUSH
40687: LD_INT 40
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: LIST
40694: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40695: LD_VAR 0 6
40699: PPUSH
40700: CALL_OW 257
40704: PUSH
40705: LD_INT 12
40707: PUSH
40708: LD_INT 16
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: IN
40715: IFFALSE 40736
// points := [ 5 , 3 , 2 ] ;
40717: LD_ADDR_VAR 0 9
40721: PUSH
40722: LD_INT 5
40724: PUSH
40725: LD_INT 3
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40736: LD_VAR 0 6
40740: PPUSH
40741: CALL_OW 257
40745: PUSH
40746: LD_INT 17
40748: EQUAL
40749: IFFALSE 40770
// points := [ 100 , 50 , 75 ] ;
40751: LD_ADDR_VAR 0 9
40755: PUSH
40756: LD_INT 100
40758: PUSH
40759: LD_INT 50
40761: PUSH
40762: LD_INT 75
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40770: LD_VAR 0 6
40774: PPUSH
40775: CALL_OW 257
40779: PUSH
40780: LD_INT 15
40782: EQUAL
40783: IFFALSE 40804
// points := [ 10 , 5 , 3 ] ;
40785: LD_ADDR_VAR 0 9
40789: PUSH
40790: LD_INT 10
40792: PUSH
40793: LD_INT 5
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40804: LD_VAR 0 6
40808: PPUSH
40809: CALL_OW 257
40813: PUSH
40814: LD_INT 14
40816: EQUAL
40817: IFFALSE 40838
// points := [ 10 , 0 , 0 ] ;
40819: LD_ADDR_VAR 0 9
40823: PUSH
40824: LD_INT 10
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: LIST
40837: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40838: LD_VAR 0 6
40842: PPUSH
40843: CALL_OW 257
40847: PUSH
40848: LD_INT 11
40850: EQUAL
40851: IFFALSE 40872
// points := [ 30 , 10 , 5 ] ;
40853: LD_ADDR_VAR 0 9
40857: PUSH
40858: LD_INT 30
40860: PUSH
40861: LD_INT 10
40863: PUSH
40864: LD_INT 5
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40872: LD_VAR 0 1
40876: PPUSH
40877: LD_INT 5
40879: PPUSH
40880: CALL_OW 321
40884: PUSH
40885: LD_INT 2
40887: EQUAL
40888: IFFALSE 40905
// bpoints := bpoints * 1.8 ;
40890: LD_ADDR_VAR 0 10
40894: PUSH
40895: LD_VAR 0 10
40899: PUSH
40900: LD_REAL  1.80000000000000E+0000
40903: MUL
40904: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40905: LD_VAR 0 6
40909: PPUSH
40910: CALL_OW 257
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: IN
40933: PUSH
40934: LD_VAR 0 1
40938: PPUSH
40939: LD_INT 51
40941: PPUSH
40942: CALL_OW 321
40946: PUSH
40947: LD_INT 2
40949: EQUAL
40950: AND
40951: IFFALSE 40968
// bpoints := bpoints * 1.2 ;
40953: LD_ADDR_VAR 0 10
40957: PUSH
40958: LD_VAR 0 10
40962: PUSH
40963: LD_REAL  1.20000000000000E+0000
40966: MUL
40967: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40968: LD_VAR 0 6
40972: PPUSH
40973: CALL_OW 257
40977: PUSH
40978: LD_INT 5
40980: PUSH
40981: LD_INT 7
40983: PUSH
40984: LD_INT 9
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: IN
40992: PUSH
40993: LD_VAR 0 1
40997: PPUSH
40998: LD_INT 52
41000: PPUSH
41001: CALL_OW 321
41005: PUSH
41006: LD_INT 2
41008: EQUAL
41009: AND
41010: IFFALSE 41027
// bpoints := bpoints * 1.5 ;
41012: LD_ADDR_VAR 0 10
41016: PUSH
41017: LD_VAR 0 10
41021: PUSH
41022: LD_REAL  1.50000000000000E+0000
41025: MUL
41026: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41027: LD_VAR 0 1
41031: PPUSH
41032: LD_INT 66
41034: PPUSH
41035: CALL_OW 321
41039: PUSH
41040: LD_INT 2
41042: EQUAL
41043: IFFALSE 41060
// bpoints := bpoints * 1.1 ;
41045: LD_ADDR_VAR 0 10
41049: PUSH
41050: LD_VAR 0 10
41054: PUSH
41055: LD_REAL  1.10000000000000E+0000
41058: MUL
41059: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41060: LD_ADDR_VAR 0 10
41064: PUSH
41065: LD_VAR 0 10
41069: PUSH
41070: LD_VAR 0 6
41074: PPUSH
41075: LD_INT 1
41077: PPUSH
41078: CALL_OW 259
41082: PUSH
41083: LD_REAL  1.15000000000000E+0000
41086: MUL
41087: MUL
41088: ST_TO_ADDR
// end ; unit_vehicle :
41089: GO 41917
41091: LD_INT 2
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41099
41097: GO 41905
41099: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41100: LD_VAR 0 6
41104: PPUSH
41105: CALL_OW 264
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 42
41115: PUSH
41116: LD_INT 24
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: IN
41124: IFFALSE 41145
// points := [ 25 , 5 , 3 ] ;
41126: LD_ADDR_VAR 0 9
41130: PUSH
41131: LD_INT 25
41133: PUSH
41134: LD_INT 5
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41145: LD_VAR 0 6
41149: PPUSH
41150: CALL_OW 264
41154: PUSH
41155: LD_INT 4
41157: PUSH
41158: LD_INT 43
41160: PUSH
41161: LD_INT 25
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: IN
41169: IFFALSE 41190
// points := [ 40 , 15 , 5 ] ;
41171: LD_ADDR_VAR 0 9
41175: PUSH
41176: LD_INT 40
41178: PUSH
41179: LD_INT 15
41181: PUSH
41182: LD_INT 5
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41190: LD_VAR 0 6
41194: PPUSH
41195: CALL_OW 264
41199: PUSH
41200: LD_INT 3
41202: PUSH
41203: LD_INT 23
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: IN
41210: IFFALSE 41231
// points := [ 7 , 25 , 8 ] ;
41212: LD_ADDR_VAR 0 9
41216: PUSH
41217: LD_INT 7
41219: PUSH
41220: LD_INT 25
41222: PUSH
41223: LD_INT 8
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: LIST
41230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41231: LD_VAR 0 6
41235: PPUSH
41236: CALL_OW 264
41240: PUSH
41241: LD_INT 5
41243: PUSH
41244: LD_INT 27
41246: PUSH
41247: LD_INT 44
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: IN
41255: IFFALSE 41276
// points := [ 14 , 50 , 16 ] ;
41257: LD_ADDR_VAR 0 9
41261: PUSH
41262: LD_INT 14
41264: PUSH
41265: LD_INT 50
41267: PUSH
41268: LD_INT 16
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41276: LD_VAR 0 6
41280: PPUSH
41281: CALL_OW 264
41285: PUSH
41286: LD_INT 6
41288: PUSH
41289: LD_INT 46
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: IN
41296: IFFALSE 41317
// points := [ 32 , 120 , 70 ] ;
41298: LD_ADDR_VAR 0 9
41302: PUSH
41303: LD_INT 32
41305: PUSH
41306: LD_INT 120
41308: PUSH
41309: LD_INT 70
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: LIST
41316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41317: LD_VAR 0 6
41321: PPUSH
41322: CALL_OW 264
41326: PUSH
41327: LD_INT 7
41329: PUSH
41330: LD_INT 28
41332: PUSH
41333: LD_INT 45
41335: PUSH
41336: LD_INT 92
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: IN
41345: IFFALSE 41366
// points := [ 35 , 20 , 45 ] ;
41347: LD_ADDR_VAR 0 9
41351: PUSH
41352: LD_INT 35
41354: PUSH
41355: LD_INT 20
41357: PUSH
41358: LD_INT 45
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41366: LD_VAR 0 6
41370: PPUSH
41371: CALL_OW 264
41375: PUSH
41376: LD_INT 47
41378: PUSH
41379: EMPTY
41380: LIST
41381: IN
41382: IFFALSE 41403
// points := [ 67 , 45 , 75 ] ;
41384: LD_ADDR_VAR 0 9
41388: PUSH
41389: LD_INT 67
41391: PUSH
41392: LD_INT 45
41394: PUSH
41395: LD_INT 75
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41403: LD_VAR 0 6
41407: PPUSH
41408: CALL_OW 264
41412: PUSH
41413: LD_INT 26
41415: PUSH
41416: EMPTY
41417: LIST
41418: IN
41419: IFFALSE 41440
// points := [ 120 , 30 , 80 ] ;
41421: LD_ADDR_VAR 0 9
41425: PUSH
41426: LD_INT 120
41428: PUSH
41429: LD_INT 30
41431: PUSH
41432: LD_INT 80
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41440: LD_VAR 0 6
41444: PPUSH
41445: CALL_OW 264
41449: PUSH
41450: LD_INT 22
41452: PUSH
41453: EMPTY
41454: LIST
41455: IN
41456: IFFALSE 41477
// points := [ 40 , 1 , 1 ] ;
41458: LD_ADDR_VAR 0 9
41462: PUSH
41463: LD_INT 40
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41477: LD_VAR 0 6
41481: PPUSH
41482: CALL_OW 264
41486: PUSH
41487: LD_INT 29
41489: PUSH
41490: EMPTY
41491: LIST
41492: IN
41493: IFFALSE 41514
// points := [ 70 , 200 , 400 ] ;
41495: LD_ADDR_VAR 0 9
41499: PUSH
41500: LD_INT 70
41502: PUSH
41503: LD_INT 200
41505: PUSH
41506: LD_INT 400
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41514: LD_VAR 0 6
41518: PPUSH
41519: CALL_OW 264
41523: PUSH
41524: LD_INT 14
41526: PUSH
41527: LD_INT 53
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: IN
41534: IFFALSE 41555
// points := [ 40 , 10 , 20 ] ;
41536: LD_ADDR_VAR 0 9
41540: PUSH
41541: LD_INT 40
41543: PUSH
41544: LD_INT 10
41546: PUSH
41547: LD_INT 20
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41555: LD_VAR 0 6
41559: PPUSH
41560: CALL_OW 264
41564: PUSH
41565: LD_INT 9
41567: PUSH
41568: EMPTY
41569: LIST
41570: IN
41571: IFFALSE 41592
// points := [ 5 , 70 , 20 ] ;
41573: LD_ADDR_VAR 0 9
41577: PUSH
41578: LD_INT 5
41580: PUSH
41581: LD_INT 70
41583: PUSH
41584: LD_INT 20
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41592: LD_VAR 0 6
41596: PPUSH
41597: CALL_OW 264
41601: PUSH
41602: LD_INT 10
41604: PUSH
41605: EMPTY
41606: LIST
41607: IN
41608: IFFALSE 41629
// points := [ 35 , 110 , 70 ] ;
41610: LD_ADDR_VAR 0 9
41614: PUSH
41615: LD_INT 35
41617: PUSH
41618: LD_INT 110
41620: PUSH
41621: LD_INT 70
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41629: LD_VAR 0 6
41633: PPUSH
41634: CALL_OW 265
41638: PUSH
41639: LD_INT 25
41641: EQUAL
41642: IFFALSE 41663
// points := [ 80 , 65 , 100 ] ;
41644: LD_ADDR_VAR 0 9
41648: PUSH
41649: LD_INT 80
41651: PUSH
41652: LD_INT 65
41654: PUSH
41655: LD_INT 100
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41663: LD_VAR 0 6
41667: PPUSH
41668: CALL_OW 263
41672: PUSH
41673: LD_INT 1
41675: EQUAL
41676: IFFALSE 41711
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41678: LD_ADDR_VAR 0 10
41682: PUSH
41683: LD_VAR 0 10
41687: PUSH
41688: LD_VAR 0 6
41692: PPUSH
41693: CALL_OW 311
41697: PPUSH
41698: LD_INT 3
41700: PPUSH
41701: CALL_OW 259
41705: PUSH
41706: LD_INT 4
41708: MUL
41709: MUL
41710: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41711: LD_VAR 0 6
41715: PPUSH
41716: CALL_OW 263
41720: PUSH
41721: LD_INT 2
41723: EQUAL
41724: IFFALSE 41775
// begin j := IsControledBy ( i ) ;
41726: LD_ADDR_VAR 0 7
41730: PUSH
41731: LD_VAR 0 6
41735: PPUSH
41736: CALL_OW 312
41740: ST_TO_ADDR
// if j then
41741: LD_VAR 0 7
41745: IFFALSE 41775
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41747: LD_ADDR_VAR 0 10
41751: PUSH
41752: LD_VAR 0 10
41756: PUSH
41757: LD_VAR 0 7
41761: PPUSH
41762: LD_INT 3
41764: PPUSH
41765: CALL_OW 259
41769: PUSH
41770: LD_INT 3
41772: MUL
41773: MUL
41774: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41775: LD_VAR 0 6
41779: PPUSH
41780: CALL_OW 264
41784: PUSH
41785: LD_INT 5
41787: PUSH
41788: LD_INT 6
41790: PUSH
41791: LD_INT 46
41793: PUSH
41794: LD_INT 44
41796: PUSH
41797: LD_INT 47
41799: PUSH
41800: LD_INT 45
41802: PUSH
41803: LD_INT 28
41805: PUSH
41806: LD_INT 7
41808: PUSH
41809: LD_INT 27
41811: PUSH
41812: LD_INT 29
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: IN
41827: PUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: LD_INT 52
41835: PPUSH
41836: CALL_OW 321
41840: PUSH
41841: LD_INT 2
41843: EQUAL
41844: AND
41845: IFFALSE 41862
// bpoints := bpoints * 1.2 ;
41847: LD_ADDR_VAR 0 10
41851: PUSH
41852: LD_VAR 0 10
41856: PUSH
41857: LD_REAL  1.20000000000000E+0000
41860: MUL
41861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41862: LD_VAR 0 6
41866: PPUSH
41867: CALL_OW 264
41871: PUSH
41872: LD_INT 6
41874: PUSH
41875: LD_INT 46
41877: PUSH
41878: LD_INT 47
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: IN
41886: IFFALSE 41903
// bpoints := bpoints * 1.2 ;
41888: LD_ADDR_VAR 0 10
41892: PUSH
41893: LD_VAR 0 10
41897: PUSH
41898: LD_REAL  1.20000000000000E+0000
41901: MUL
41902: ST_TO_ADDR
// end ; unit_building :
41903: GO 41917
41905: LD_INT 3
41907: DOUBLE
41908: EQUAL
41909: IFTRUE 41913
41911: GO 41916
41913: POP
// ; end ;
41914: GO 41917
41916: POP
// for j = 1 to 3 do
41917: LD_ADDR_VAR 0 7
41921: PUSH
41922: DOUBLE
41923: LD_INT 1
41925: DEC
41926: ST_TO_ADDR
41927: LD_INT 3
41929: PUSH
41930: FOR_TO
41931: IFFALSE 41984
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41933: LD_ADDR_VAR 0 5
41937: PUSH
41938: LD_VAR 0 5
41942: PPUSH
41943: LD_VAR 0 7
41947: PPUSH
41948: LD_VAR 0 5
41952: PUSH
41953: LD_VAR 0 7
41957: ARRAY
41958: PUSH
41959: LD_VAR 0 9
41963: PUSH
41964: LD_VAR 0 7
41968: ARRAY
41969: PUSH
41970: LD_VAR 0 10
41974: MUL
41975: PLUS
41976: PPUSH
41977: CALL_OW 1
41981: ST_TO_ADDR
41982: GO 41930
41984: POP
41985: POP
// end ;
41986: GO 40465
41988: POP
41989: POP
// result := Replace ( result , 4 , tmp ) ;
41990: LD_ADDR_VAR 0 5
41994: PUSH
41995: LD_VAR 0 5
41999: PPUSH
42000: LD_INT 4
42002: PPUSH
42003: LD_VAR 0 8
42007: PPUSH
42008: CALL_OW 1
42012: ST_TO_ADDR
// end ;
42013: LD_VAR 0 5
42017: RET
// export function DangerAtRange ( unit , range ) ; begin
42018: LD_INT 0
42020: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42021: LD_ADDR_VAR 0 3
42025: PUSH
42026: LD_VAR 0 1
42030: PPUSH
42031: CALL_OW 255
42035: PPUSH
42036: LD_VAR 0 1
42040: PPUSH
42041: CALL_OW 250
42045: PPUSH
42046: LD_VAR 0 1
42050: PPUSH
42051: CALL_OW 251
42055: PPUSH
42056: LD_VAR 0 2
42060: PPUSH
42061: CALL 40317 0 4
42065: ST_TO_ADDR
// end ;
42066: LD_VAR 0 3
42070: RET
// export function DangerInArea ( side , area ) ; begin
42071: LD_INT 0
42073: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42074: LD_ADDR_VAR 0 3
42078: PUSH
42079: LD_VAR 0 2
42083: PPUSH
42084: LD_INT 81
42086: PUSH
42087: LD_VAR 0 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PPUSH
42096: CALL_OW 70
42100: ST_TO_ADDR
// end ;
42101: LD_VAR 0 3
42105: RET
// export function IsExtension ( b ) ; begin
42106: LD_INT 0
42108: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42109: LD_ADDR_VAR 0 2
42113: PUSH
42114: LD_VAR 0 1
42118: PUSH
42119: LD_INT 23
42121: PUSH
42122: LD_INT 20
42124: PUSH
42125: LD_INT 22
42127: PUSH
42128: LD_INT 17
42130: PUSH
42131: LD_INT 24
42133: PUSH
42134: LD_INT 21
42136: PUSH
42137: LD_INT 19
42139: PUSH
42140: LD_INT 16
42142: PUSH
42143: LD_INT 25
42145: PUSH
42146: LD_INT 18
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: IN
42161: ST_TO_ADDR
// end ;
42162: LD_VAR 0 2
42166: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42167: LD_INT 0
42169: PPUSH
42170: PPUSH
42171: PPUSH
// result := [ ] ;
42172: LD_ADDR_VAR 0 4
42176: PUSH
42177: EMPTY
42178: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42179: LD_ADDR_VAR 0 5
42183: PUSH
42184: LD_VAR 0 2
42188: PPUSH
42189: LD_INT 21
42191: PUSH
42192: LD_INT 3
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PPUSH
42199: CALL_OW 70
42203: ST_TO_ADDR
// if not tmp then
42204: LD_VAR 0 5
42208: NOT
42209: IFFALSE 42213
// exit ;
42211: GO 42277
// if checkLink then
42213: LD_VAR 0 3
42217: IFFALSE 42267
// begin for i in tmp do
42219: LD_ADDR_VAR 0 6
42223: PUSH
42224: LD_VAR 0 5
42228: PUSH
42229: FOR_IN
42230: IFFALSE 42265
// if GetBase ( i ) <> base then
42232: LD_VAR 0 6
42236: PPUSH
42237: CALL_OW 274
42241: PUSH
42242: LD_VAR 0 1
42246: NONEQUAL
42247: IFFALSE 42263
// ComLinkToBase ( base , i ) ;
42249: LD_VAR 0 1
42253: PPUSH
42254: LD_VAR 0 6
42258: PPUSH
42259: CALL_OW 169
42263: GO 42229
42265: POP
42266: POP
// end ; result := tmp ;
42267: LD_ADDR_VAR 0 4
42271: PUSH
42272: LD_VAR 0 5
42276: ST_TO_ADDR
// end ;
42277: LD_VAR 0 4
42281: RET
// export function ComComplete ( units , b ) ; var i ; begin
42282: LD_INT 0
42284: PPUSH
42285: PPUSH
// if not units then
42286: LD_VAR 0 1
42290: NOT
42291: IFFALSE 42295
// exit ;
42293: GO 42385
// for i in units do
42295: LD_ADDR_VAR 0 4
42299: PUSH
42300: LD_VAR 0 1
42304: PUSH
42305: FOR_IN
42306: IFFALSE 42383
// if BuildingStatus ( b ) = bs_build then
42308: LD_VAR 0 2
42312: PPUSH
42313: CALL_OW 461
42317: PUSH
42318: LD_INT 1
42320: EQUAL
42321: IFFALSE 42381
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42323: LD_VAR 0 4
42327: PPUSH
42328: LD_STRING h
42330: PUSH
42331: LD_VAR 0 2
42335: PPUSH
42336: CALL_OW 250
42340: PUSH
42341: LD_VAR 0 2
42345: PPUSH
42346: CALL_OW 251
42350: PUSH
42351: LD_VAR 0 2
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: PUSH
42374: EMPTY
42375: LIST
42376: PPUSH
42377: CALL_OW 446
42381: GO 42305
42383: POP
42384: POP
// end ;
42385: LD_VAR 0 3
42389: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42390: LD_INT 0
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42398: LD_VAR 0 1
42402: NOT
42403: PUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 263
42413: PUSH
42414: LD_INT 2
42416: NONEQUAL
42417: OR
42418: IFFALSE 42422
// exit ;
42420: GO 42738
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42422: LD_ADDR_VAR 0 6
42426: PUSH
42427: LD_INT 22
42429: PUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: CALL_OW 255
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 30
42449: PUSH
42450: LD_INT 36
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 34
42459: PUSH
42460: LD_INT 31
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PPUSH
42476: CALL_OW 69
42480: ST_TO_ADDR
// if not tmp then
42481: LD_VAR 0 6
42485: NOT
42486: IFFALSE 42490
// exit ;
42488: GO 42738
// result := [ ] ;
42490: LD_ADDR_VAR 0 2
42494: PUSH
42495: EMPTY
42496: ST_TO_ADDR
// for i in tmp do
42497: LD_ADDR_VAR 0 3
42501: PUSH
42502: LD_VAR 0 6
42506: PUSH
42507: FOR_IN
42508: IFFALSE 42579
// begin t := UnitsInside ( i ) ;
42510: LD_ADDR_VAR 0 4
42514: PUSH
42515: LD_VAR 0 3
42519: PPUSH
42520: CALL_OW 313
42524: ST_TO_ADDR
// if t then
42525: LD_VAR 0 4
42529: IFFALSE 42577
// for j in t do
42531: LD_ADDR_VAR 0 7
42535: PUSH
42536: LD_VAR 0 4
42540: PUSH
42541: FOR_IN
42542: IFFALSE 42575
// result := Replace ( result , result + 1 , j ) ;
42544: LD_ADDR_VAR 0 2
42548: PUSH
42549: LD_VAR 0 2
42553: PPUSH
42554: LD_VAR 0 2
42558: PUSH
42559: LD_INT 1
42561: PLUS
42562: PPUSH
42563: LD_VAR 0 7
42567: PPUSH
42568: CALL_OW 1
42572: ST_TO_ADDR
42573: GO 42541
42575: POP
42576: POP
// end ;
42577: GO 42507
42579: POP
42580: POP
// if not result then
42581: LD_VAR 0 2
42585: NOT
42586: IFFALSE 42590
// exit ;
42588: GO 42738
// mech := result [ 1 ] ;
42590: LD_ADDR_VAR 0 5
42594: PUSH
42595: LD_VAR 0 2
42599: PUSH
42600: LD_INT 1
42602: ARRAY
42603: ST_TO_ADDR
// if result > 1 then
42604: LD_VAR 0 2
42608: PUSH
42609: LD_INT 1
42611: GREATER
42612: IFFALSE 42724
// begin for i = 2 to result do
42614: LD_ADDR_VAR 0 3
42618: PUSH
42619: DOUBLE
42620: LD_INT 2
42622: DEC
42623: ST_TO_ADDR
42624: LD_VAR 0 2
42628: PUSH
42629: FOR_TO
42630: IFFALSE 42722
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42632: LD_ADDR_VAR 0 4
42636: PUSH
42637: LD_VAR 0 2
42641: PUSH
42642: LD_VAR 0 3
42646: ARRAY
42647: PPUSH
42648: LD_INT 3
42650: PPUSH
42651: CALL_OW 259
42655: PUSH
42656: LD_VAR 0 2
42660: PUSH
42661: LD_VAR 0 3
42665: ARRAY
42666: PPUSH
42667: CALL_OW 432
42671: MINUS
42672: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42673: LD_VAR 0 4
42677: PUSH
42678: LD_VAR 0 5
42682: PPUSH
42683: LD_INT 3
42685: PPUSH
42686: CALL_OW 259
42690: PUSH
42691: LD_VAR 0 5
42695: PPUSH
42696: CALL_OW 432
42700: MINUS
42701: GREATEREQUAL
42702: IFFALSE 42720
// mech := result [ i ] ;
42704: LD_ADDR_VAR 0 5
42708: PUSH
42709: LD_VAR 0 2
42713: PUSH
42714: LD_VAR 0 3
42718: ARRAY
42719: ST_TO_ADDR
// end ;
42720: GO 42629
42722: POP
42723: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42724: LD_VAR 0 1
42728: PPUSH
42729: LD_VAR 0 5
42733: PPUSH
42734: CALL_OW 135
// end ;
42738: LD_VAR 0 2
42742: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42743: LD_INT 0
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
// result := [ ] ;
42758: LD_ADDR_VAR 0 7
42762: PUSH
42763: EMPTY
42764: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42765: LD_VAR 0 1
42769: PPUSH
42770: CALL_OW 266
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: IN
42785: NOT
42786: IFFALSE 42790
// exit ;
42788: GO 44424
// if name then
42790: LD_VAR 0 3
42794: IFFALSE 42810
// SetBName ( base_dep , name ) ;
42796: LD_VAR 0 1
42800: PPUSH
42801: LD_VAR 0 3
42805: PPUSH
42806: CALL_OW 500
// base := GetBase ( base_dep ) ;
42810: LD_ADDR_VAR 0 15
42814: PUSH
42815: LD_VAR 0 1
42819: PPUSH
42820: CALL_OW 274
42824: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42825: LD_ADDR_VAR 0 16
42829: PUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 255
42839: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42840: LD_ADDR_VAR 0 17
42844: PUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: CALL_OW 248
42854: ST_TO_ADDR
// if sources then
42855: LD_VAR 0 5
42859: IFFALSE 42906
// for i = 1 to 3 do
42861: LD_ADDR_VAR 0 8
42865: PUSH
42866: DOUBLE
42867: LD_INT 1
42869: DEC
42870: ST_TO_ADDR
42871: LD_INT 3
42873: PUSH
42874: FOR_TO
42875: IFFALSE 42904
// AddResourceType ( base , i , sources [ i ] ) ;
42877: LD_VAR 0 15
42881: PPUSH
42882: LD_VAR 0 8
42886: PPUSH
42887: LD_VAR 0 5
42891: PUSH
42892: LD_VAR 0 8
42896: ARRAY
42897: PPUSH
42898: CALL_OW 276
42902: GO 42874
42904: POP
42905: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42906: LD_ADDR_VAR 0 18
42910: PUSH
42911: LD_VAR 0 15
42915: PPUSH
42916: LD_VAR 0 2
42920: PPUSH
42921: LD_INT 1
42923: PPUSH
42924: CALL 42167 0 3
42928: ST_TO_ADDR
// InitHc ;
42929: CALL_OW 19
// InitUc ;
42933: CALL_OW 18
// uc_side := side ;
42937: LD_ADDR_OWVAR 20
42941: PUSH
42942: LD_VAR 0 16
42946: ST_TO_ADDR
// uc_nation := nation ;
42947: LD_ADDR_OWVAR 21
42951: PUSH
42952: LD_VAR 0 17
42956: ST_TO_ADDR
// if buildings then
42957: LD_VAR 0 18
42961: IFFALSE 44283
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42963: LD_ADDR_VAR 0 19
42967: PUSH
42968: LD_VAR 0 18
42972: PPUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 30
42978: PUSH
42979: LD_INT 29
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 30
42988: PUSH
42989: LD_INT 30
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: PPUSH
43001: CALL_OW 72
43005: ST_TO_ADDR
// if tmp then
43006: LD_VAR 0 19
43010: IFFALSE 43058
// for i in tmp do
43012: LD_ADDR_VAR 0 8
43016: PUSH
43017: LD_VAR 0 19
43021: PUSH
43022: FOR_IN
43023: IFFALSE 43056
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43025: LD_VAR 0 8
43029: PPUSH
43030: CALL_OW 250
43034: PPUSH
43035: LD_VAR 0 8
43039: PPUSH
43040: CALL_OW 251
43044: PPUSH
43045: LD_VAR 0 16
43049: PPUSH
43050: CALL_OW 441
43054: GO 43022
43056: POP
43057: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43058: LD_VAR 0 18
43062: PPUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 30
43068: PUSH
43069: LD_INT 32
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 30
43078: PUSH
43079: LD_INT 33
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: PPUSH
43091: CALL_OW 72
43095: IFFALSE 43183
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43097: LD_ADDR_VAR 0 8
43101: PUSH
43102: LD_VAR 0 18
43106: PPUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 30
43112: PUSH
43113: LD_INT 32
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 30
43122: PUSH
43123: LD_INT 33
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: PPUSH
43135: CALL_OW 72
43139: PUSH
43140: FOR_IN
43141: IFFALSE 43181
// begin if not GetBWeapon ( i ) then
43143: LD_VAR 0 8
43147: PPUSH
43148: CALL_OW 269
43152: NOT
43153: IFFALSE 43179
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43155: LD_VAR 0 8
43159: PPUSH
43160: LD_VAR 0 8
43164: PPUSH
43165: LD_VAR 0 2
43169: PPUSH
43170: CALL 44429 0 2
43174: PPUSH
43175: CALL_OW 431
// end ;
43179: GO 43140
43181: POP
43182: POP
// end ; for i = 1 to personel do
43183: LD_ADDR_VAR 0 8
43187: PUSH
43188: DOUBLE
43189: LD_INT 1
43191: DEC
43192: ST_TO_ADDR
43193: LD_VAR 0 6
43197: PUSH
43198: FOR_TO
43199: IFFALSE 44263
// begin if i > 4 then
43201: LD_VAR 0 8
43205: PUSH
43206: LD_INT 4
43208: GREATER
43209: IFFALSE 43213
// break ;
43211: GO 44263
// case i of 1 :
43213: LD_VAR 0 8
43217: PUSH
43218: LD_INT 1
43220: DOUBLE
43221: EQUAL
43222: IFTRUE 43226
43224: GO 43306
43226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43227: LD_ADDR_VAR 0 12
43231: PUSH
43232: LD_VAR 0 18
43236: PPUSH
43237: LD_INT 22
43239: PUSH
43240: LD_VAR 0 16
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 58
43251: PUSH
43252: EMPTY
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 30
43260: PUSH
43261: LD_INT 32
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 30
43270: PUSH
43271: LD_INT 4
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 30
43280: PUSH
43281: LD_INT 5
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: PPUSH
43299: CALL_OW 72
43303: ST_TO_ADDR
43304: GO 43528
43306: LD_INT 2
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43376
43314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43315: LD_ADDR_VAR 0 12
43319: PUSH
43320: LD_VAR 0 18
43324: PPUSH
43325: LD_INT 22
43327: PUSH
43328: LD_VAR 0 16
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 30
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 30
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PPUSH
43369: CALL_OW 72
43373: ST_TO_ADDR
43374: GO 43528
43376: LD_INT 3
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43384
43382: GO 43446
43384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43385: LD_ADDR_VAR 0 12
43389: PUSH
43390: LD_VAR 0 18
43394: PPUSH
43395: LD_INT 22
43397: PUSH
43398: LD_VAR 0 16
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 30
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 30
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PPUSH
43439: CALL_OW 72
43443: ST_TO_ADDR
43444: GO 43528
43446: LD_INT 4
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 43527
43454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43455: LD_ADDR_VAR 0 12
43459: PUSH
43460: LD_VAR 0 18
43464: PPUSH
43465: LD_INT 22
43467: PUSH
43468: LD_VAR 0 16
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: LD_INT 30
43482: PUSH
43483: LD_INT 6
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 30
43492: PUSH
43493: LD_INT 7
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 30
43502: PUSH
43503: LD_INT 8
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PPUSH
43520: CALL_OW 72
43524: ST_TO_ADDR
43525: GO 43528
43527: POP
// if i = 1 then
43528: LD_VAR 0 8
43532: PUSH
43533: LD_INT 1
43535: EQUAL
43536: IFFALSE 43647
// begin tmp := [ ] ;
43538: LD_ADDR_VAR 0 19
43542: PUSH
43543: EMPTY
43544: ST_TO_ADDR
// for j in f do
43545: LD_ADDR_VAR 0 9
43549: PUSH
43550: LD_VAR 0 12
43554: PUSH
43555: FOR_IN
43556: IFFALSE 43629
// if GetBType ( j ) = b_bunker then
43558: LD_VAR 0 9
43562: PPUSH
43563: CALL_OW 266
43567: PUSH
43568: LD_INT 32
43570: EQUAL
43571: IFFALSE 43598
// tmp := Insert ( tmp , 1 , j ) else
43573: LD_ADDR_VAR 0 19
43577: PUSH
43578: LD_VAR 0 19
43582: PPUSH
43583: LD_INT 1
43585: PPUSH
43586: LD_VAR 0 9
43590: PPUSH
43591: CALL_OW 2
43595: ST_TO_ADDR
43596: GO 43627
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43598: LD_ADDR_VAR 0 19
43602: PUSH
43603: LD_VAR 0 19
43607: PPUSH
43608: LD_VAR 0 19
43612: PUSH
43613: LD_INT 1
43615: PLUS
43616: PPUSH
43617: LD_VAR 0 9
43621: PPUSH
43622: CALL_OW 2
43626: ST_TO_ADDR
43627: GO 43555
43629: POP
43630: POP
// if tmp then
43631: LD_VAR 0 19
43635: IFFALSE 43647
// f := tmp ;
43637: LD_ADDR_VAR 0 12
43641: PUSH
43642: LD_VAR 0 19
43646: ST_TO_ADDR
// end ; x := personel [ i ] ;
43647: LD_ADDR_VAR 0 13
43651: PUSH
43652: LD_VAR 0 6
43656: PUSH
43657: LD_VAR 0 8
43661: ARRAY
43662: ST_TO_ADDR
// if x = - 1 then
43663: LD_VAR 0 13
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: EQUAL
43672: IFFALSE 43881
// begin for j in f do
43674: LD_ADDR_VAR 0 9
43678: PUSH
43679: LD_VAR 0 12
43683: PUSH
43684: FOR_IN
43685: IFFALSE 43877
// repeat InitHc ;
43687: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43691: LD_VAR 0 9
43695: PPUSH
43696: CALL_OW 266
43700: PUSH
43701: LD_INT 5
43703: EQUAL
43704: IFFALSE 43774
// begin if UnitsInside ( j ) < 3 then
43706: LD_VAR 0 9
43710: PPUSH
43711: CALL_OW 313
43715: PUSH
43716: LD_INT 3
43718: LESS
43719: IFFALSE 43755
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43721: LD_INT 0
43723: PPUSH
43724: LD_INT 5
43726: PUSH
43727: LD_INT 8
43729: PUSH
43730: LD_INT 9
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: PUSH
43738: LD_VAR 0 17
43742: ARRAY
43743: PPUSH
43744: LD_VAR 0 4
43748: PPUSH
43749: CALL_OW 380
43753: GO 43772
// PrepareHuman ( false , i , skill ) ;
43755: LD_INT 0
43757: PPUSH
43758: LD_VAR 0 8
43762: PPUSH
43763: LD_VAR 0 4
43767: PPUSH
43768: CALL_OW 380
// end else
43772: GO 43791
// PrepareHuman ( false , i , skill ) ;
43774: LD_INT 0
43776: PPUSH
43777: LD_VAR 0 8
43781: PPUSH
43782: LD_VAR 0 4
43786: PPUSH
43787: CALL_OW 380
// un := CreateHuman ;
43791: LD_ADDR_VAR 0 14
43795: PUSH
43796: CALL_OW 44
43800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43801: LD_ADDR_VAR 0 7
43805: PUSH
43806: LD_VAR 0 7
43810: PPUSH
43811: LD_INT 1
43813: PPUSH
43814: LD_VAR 0 14
43818: PPUSH
43819: CALL_OW 2
43823: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43824: LD_VAR 0 14
43828: PPUSH
43829: LD_VAR 0 9
43833: PPUSH
43834: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43838: LD_VAR 0 9
43842: PPUSH
43843: CALL_OW 313
43847: PUSH
43848: LD_INT 6
43850: EQUAL
43851: PUSH
43852: LD_VAR 0 9
43856: PPUSH
43857: CALL_OW 266
43861: PUSH
43862: LD_INT 32
43864: PUSH
43865: LD_INT 31
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: IN
43872: OR
43873: IFFALSE 43687
43875: GO 43684
43877: POP
43878: POP
// end else
43879: GO 44261
// for j = 1 to x do
43881: LD_ADDR_VAR 0 9
43885: PUSH
43886: DOUBLE
43887: LD_INT 1
43889: DEC
43890: ST_TO_ADDR
43891: LD_VAR 0 13
43895: PUSH
43896: FOR_TO
43897: IFFALSE 44259
// begin InitHc ;
43899: CALL_OW 19
// if not f then
43903: LD_VAR 0 12
43907: NOT
43908: IFFALSE 43997
// begin PrepareHuman ( false , i , skill ) ;
43910: LD_INT 0
43912: PPUSH
43913: LD_VAR 0 8
43917: PPUSH
43918: LD_VAR 0 4
43922: PPUSH
43923: CALL_OW 380
// un := CreateHuman ;
43927: LD_ADDR_VAR 0 14
43931: PUSH
43932: CALL_OW 44
43936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43937: LD_ADDR_VAR 0 7
43941: PUSH
43942: LD_VAR 0 7
43946: PPUSH
43947: LD_INT 1
43949: PPUSH
43950: LD_VAR 0 14
43954: PPUSH
43955: CALL_OW 2
43959: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43960: LD_VAR 0 14
43964: PPUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: CALL_OW 250
43974: PPUSH
43975: LD_VAR 0 1
43979: PPUSH
43980: CALL_OW 251
43984: PPUSH
43985: LD_INT 10
43987: PPUSH
43988: LD_INT 0
43990: PPUSH
43991: CALL_OW 50
// continue ;
43995: GO 43896
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43997: LD_VAR 0 12
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: PPUSH
44006: CALL_OW 313
44010: PUSH
44011: LD_VAR 0 12
44015: PUSH
44016: LD_INT 1
44018: ARRAY
44019: PPUSH
44020: CALL_OW 266
44024: PUSH
44025: LD_INT 32
44027: PUSH
44028: LD_INT 31
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: IN
44035: AND
44036: PUSH
44037: LD_VAR 0 12
44041: PUSH
44042: LD_INT 1
44044: ARRAY
44045: PPUSH
44046: CALL_OW 313
44050: PUSH
44051: LD_INT 6
44053: EQUAL
44054: OR
44055: IFFALSE 44075
// f := Delete ( f , 1 ) ;
44057: LD_ADDR_VAR 0 12
44061: PUSH
44062: LD_VAR 0 12
44066: PPUSH
44067: LD_INT 1
44069: PPUSH
44070: CALL_OW 3
44074: ST_TO_ADDR
// if not f then
44075: LD_VAR 0 12
44079: NOT
44080: IFFALSE 44098
// begin x := x + 2 ;
44082: LD_ADDR_VAR 0 13
44086: PUSH
44087: LD_VAR 0 13
44091: PUSH
44092: LD_INT 2
44094: PLUS
44095: ST_TO_ADDR
// continue ;
44096: GO 43896
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44098: LD_VAR 0 12
44102: PUSH
44103: LD_INT 1
44105: ARRAY
44106: PPUSH
44107: CALL_OW 266
44111: PUSH
44112: LD_INT 5
44114: EQUAL
44115: IFFALSE 44189
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44117: LD_VAR 0 12
44121: PUSH
44122: LD_INT 1
44124: ARRAY
44125: PPUSH
44126: CALL_OW 313
44130: PUSH
44131: LD_INT 3
44133: LESS
44134: IFFALSE 44170
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44136: LD_INT 0
44138: PPUSH
44139: LD_INT 5
44141: PUSH
44142: LD_INT 8
44144: PUSH
44145: LD_INT 9
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: PUSH
44153: LD_VAR 0 17
44157: ARRAY
44158: PPUSH
44159: LD_VAR 0 4
44163: PPUSH
44164: CALL_OW 380
44168: GO 44187
// PrepareHuman ( false , i , skill ) ;
44170: LD_INT 0
44172: PPUSH
44173: LD_VAR 0 8
44177: PPUSH
44178: LD_VAR 0 4
44182: PPUSH
44183: CALL_OW 380
// end else
44187: GO 44206
// PrepareHuman ( false , i , skill ) ;
44189: LD_INT 0
44191: PPUSH
44192: LD_VAR 0 8
44196: PPUSH
44197: LD_VAR 0 4
44201: PPUSH
44202: CALL_OW 380
// un := CreateHuman ;
44206: LD_ADDR_VAR 0 14
44210: PUSH
44211: CALL_OW 44
44215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44216: LD_ADDR_VAR 0 7
44220: PUSH
44221: LD_VAR 0 7
44225: PPUSH
44226: LD_INT 1
44228: PPUSH
44229: LD_VAR 0 14
44233: PPUSH
44234: CALL_OW 2
44238: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44239: LD_VAR 0 14
44243: PPUSH
44244: LD_VAR 0 12
44248: PUSH
44249: LD_INT 1
44251: ARRAY
44252: PPUSH
44253: CALL_OW 52
// end ;
44257: GO 43896
44259: POP
44260: POP
// end ;
44261: GO 43198
44263: POP
44264: POP
// result := result ^ buildings ;
44265: LD_ADDR_VAR 0 7
44269: PUSH
44270: LD_VAR 0 7
44274: PUSH
44275: LD_VAR 0 18
44279: ADD
44280: ST_TO_ADDR
// end else
44281: GO 44424
// begin for i = 1 to personel do
44283: LD_ADDR_VAR 0 8
44287: PUSH
44288: DOUBLE
44289: LD_INT 1
44291: DEC
44292: ST_TO_ADDR
44293: LD_VAR 0 6
44297: PUSH
44298: FOR_TO
44299: IFFALSE 44422
// begin if i > 4 then
44301: LD_VAR 0 8
44305: PUSH
44306: LD_INT 4
44308: GREATER
44309: IFFALSE 44313
// break ;
44311: GO 44422
// x := personel [ i ] ;
44313: LD_ADDR_VAR 0 13
44317: PUSH
44318: LD_VAR 0 6
44322: PUSH
44323: LD_VAR 0 8
44327: ARRAY
44328: ST_TO_ADDR
// if x = - 1 then
44329: LD_VAR 0 13
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: EQUAL
44338: IFFALSE 44342
// continue ;
44340: GO 44298
// PrepareHuman ( false , i , skill ) ;
44342: LD_INT 0
44344: PPUSH
44345: LD_VAR 0 8
44349: PPUSH
44350: LD_VAR 0 4
44354: PPUSH
44355: CALL_OW 380
// un := CreateHuman ;
44359: LD_ADDR_VAR 0 14
44363: PUSH
44364: CALL_OW 44
44368: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44369: LD_VAR 0 14
44373: PPUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL_OW 250
44383: PPUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 251
44393: PPUSH
44394: LD_INT 10
44396: PPUSH
44397: LD_INT 0
44399: PPUSH
44400: CALL_OW 50
// result := result ^ un ;
44404: LD_ADDR_VAR 0 7
44408: PUSH
44409: LD_VAR 0 7
44413: PUSH
44414: LD_VAR 0 14
44418: ADD
44419: ST_TO_ADDR
// end ;
44420: GO 44298
44422: POP
44423: POP
// end ; end ;
44424: LD_VAR 0 7
44428: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44429: LD_INT 0
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
// result := false ;
44447: LD_ADDR_VAR 0 3
44451: PUSH
44452: LD_INT 0
44454: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44455: LD_VAR 0 1
44459: NOT
44460: PUSH
44461: LD_VAR 0 1
44465: PPUSH
44466: CALL_OW 266
44470: PUSH
44471: LD_INT 32
44473: PUSH
44474: LD_INT 33
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: IN
44481: NOT
44482: OR
44483: IFFALSE 44487
// exit ;
44485: GO 45596
// nat := GetNation ( tower ) ;
44487: LD_ADDR_VAR 0 12
44491: PUSH
44492: LD_VAR 0 1
44496: PPUSH
44497: CALL_OW 248
44501: ST_TO_ADDR
// side := GetSide ( tower ) ;
44502: LD_ADDR_VAR 0 16
44506: PUSH
44507: LD_VAR 0 1
44511: PPUSH
44512: CALL_OW 255
44516: ST_TO_ADDR
// x := GetX ( tower ) ;
44517: LD_ADDR_VAR 0 10
44521: PUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: CALL_OW 250
44531: ST_TO_ADDR
// y := GetY ( tower ) ;
44532: LD_ADDR_VAR 0 11
44536: PUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: CALL_OW 251
44546: ST_TO_ADDR
// if not x or not y then
44547: LD_VAR 0 10
44551: NOT
44552: PUSH
44553: LD_VAR 0 11
44557: NOT
44558: OR
44559: IFFALSE 44563
// exit ;
44561: GO 45596
// weapon := 0 ;
44563: LD_ADDR_VAR 0 18
44567: PUSH
44568: LD_INT 0
44570: ST_TO_ADDR
// fac_list := [ ] ;
44571: LD_ADDR_VAR 0 17
44575: PUSH
44576: EMPTY
44577: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44578: LD_ADDR_VAR 0 6
44582: PUSH
44583: LD_VAR 0 1
44587: PPUSH
44588: CALL_OW 274
44592: PPUSH
44593: LD_VAR 0 2
44597: PPUSH
44598: LD_INT 0
44600: PPUSH
44601: CALL 42167 0 3
44605: PPUSH
44606: LD_INT 30
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PPUSH
44616: CALL_OW 72
44620: ST_TO_ADDR
// if not factories then
44621: LD_VAR 0 6
44625: NOT
44626: IFFALSE 44630
// exit ;
44628: GO 45596
// for i in factories do
44630: LD_ADDR_VAR 0 8
44634: PUSH
44635: LD_VAR 0 6
44639: PUSH
44640: FOR_IN
44641: IFFALSE 44666
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44643: LD_ADDR_VAR 0 17
44647: PUSH
44648: LD_VAR 0 17
44652: PUSH
44653: LD_VAR 0 8
44657: PPUSH
44658: CALL_OW 478
44662: UNION
44663: ST_TO_ADDR
44664: GO 44640
44666: POP
44667: POP
// if not fac_list then
44668: LD_VAR 0 17
44672: NOT
44673: IFFALSE 44677
// exit ;
44675: GO 45596
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44677: LD_ADDR_VAR 0 5
44681: PUSH
44682: LD_INT 4
44684: PUSH
44685: LD_INT 5
44687: PUSH
44688: LD_INT 9
44690: PUSH
44691: LD_INT 10
44693: PUSH
44694: LD_INT 6
44696: PUSH
44697: LD_INT 7
44699: PUSH
44700: LD_INT 11
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 27
44714: PUSH
44715: LD_INT 28
44717: PUSH
44718: LD_INT 26
44720: PUSH
44721: LD_INT 30
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 43
44732: PUSH
44733: LD_INT 44
44735: PUSH
44736: LD_INT 46
44738: PUSH
44739: LD_INT 45
44741: PUSH
44742: LD_INT 47
44744: PUSH
44745: LD_INT 49
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: PUSH
44761: LD_VAR 0 12
44765: ARRAY
44766: ST_TO_ADDR
// list := list isect fac_list ;
44767: LD_ADDR_VAR 0 5
44771: PUSH
44772: LD_VAR 0 5
44776: PUSH
44777: LD_VAR 0 17
44781: ISECT
44782: ST_TO_ADDR
// if not list then
44783: LD_VAR 0 5
44787: NOT
44788: IFFALSE 44792
// exit ;
44790: GO 45596
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44792: LD_VAR 0 12
44796: PUSH
44797: LD_INT 3
44799: EQUAL
44800: PUSH
44801: LD_INT 49
44803: PUSH
44804: LD_VAR 0 5
44808: IN
44809: AND
44810: PUSH
44811: LD_INT 31
44813: PPUSH
44814: LD_VAR 0 16
44818: PPUSH
44819: CALL_OW 321
44823: PUSH
44824: LD_INT 2
44826: EQUAL
44827: AND
44828: IFFALSE 44888
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44830: LD_INT 22
44832: PUSH
44833: LD_VAR 0 16
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 35
44844: PUSH
44845: LD_INT 49
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 91
44854: PUSH
44855: LD_VAR 0 1
44859: PUSH
44860: LD_INT 10
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: PPUSH
44873: CALL_OW 69
44877: NOT
44878: IFFALSE 44888
// weapon := ru_time_lapser ;
44880: LD_ADDR_VAR 0 18
44884: PUSH
44885: LD_INT 49
44887: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44888: LD_VAR 0 12
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: IN
44903: PUSH
44904: LD_INT 11
44906: PUSH
44907: LD_VAR 0 5
44911: IN
44912: PUSH
44913: LD_INT 30
44915: PUSH
44916: LD_VAR 0 5
44920: IN
44921: OR
44922: AND
44923: PUSH
44924: LD_INT 6
44926: PPUSH
44927: LD_VAR 0 16
44931: PPUSH
44932: CALL_OW 321
44936: PUSH
44937: LD_INT 2
44939: EQUAL
44940: AND
44941: IFFALSE 45106
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44943: LD_INT 22
44945: PUSH
44946: LD_VAR 0 16
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 35
44960: PUSH
44961: LD_INT 11
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 35
44970: PUSH
44971: LD_INT 30
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 91
44985: PUSH
44986: LD_VAR 0 1
44990: PUSH
44991: LD_INT 18
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: PPUSH
45004: CALL_OW 69
45008: NOT
45009: PUSH
45010: LD_INT 22
45012: PUSH
45013: LD_VAR 0 16
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 30
45027: PUSH
45028: LD_INT 32
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 30
45037: PUSH
45038: LD_INT 33
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 91
45052: PUSH
45053: LD_VAR 0 1
45057: PUSH
45058: LD_INT 12
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: PUSH
45071: EMPTY
45072: LIST
45073: PPUSH
45074: CALL_OW 69
45078: PUSH
45079: LD_INT 2
45081: GREATER
45082: AND
45083: IFFALSE 45106
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45085: LD_ADDR_VAR 0 18
45089: PUSH
45090: LD_INT 11
45092: PUSH
45093: LD_INT 30
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_VAR 0 12
45104: ARRAY
45105: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45106: LD_VAR 0 18
45110: NOT
45111: PUSH
45112: LD_INT 40
45114: PPUSH
45115: LD_VAR 0 16
45119: PPUSH
45120: CALL_OW 321
45124: PUSH
45125: LD_INT 2
45127: EQUAL
45128: AND
45129: PUSH
45130: LD_INT 7
45132: PUSH
45133: LD_VAR 0 5
45137: IN
45138: PUSH
45139: LD_INT 28
45141: PUSH
45142: LD_VAR 0 5
45146: IN
45147: OR
45148: PUSH
45149: LD_INT 45
45151: PUSH
45152: LD_VAR 0 5
45156: IN
45157: OR
45158: AND
45159: IFFALSE 45413
// begin hex := GetHexInfo ( x , y ) ;
45161: LD_ADDR_VAR 0 4
45165: PUSH
45166: LD_VAR 0 10
45170: PPUSH
45171: LD_VAR 0 11
45175: PPUSH
45176: CALL_OW 546
45180: ST_TO_ADDR
// if hex [ 1 ] then
45181: LD_VAR 0 4
45185: PUSH
45186: LD_INT 1
45188: ARRAY
45189: IFFALSE 45193
// exit ;
45191: GO 45596
// height := hex [ 2 ] ;
45193: LD_ADDR_VAR 0 15
45197: PUSH
45198: LD_VAR 0 4
45202: PUSH
45203: LD_INT 2
45205: ARRAY
45206: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45207: LD_ADDR_VAR 0 14
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 3
45220: PUSH
45221: LD_INT 5
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: ST_TO_ADDR
// for i in tmp do
45230: LD_ADDR_VAR 0 8
45234: PUSH
45235: LD_VAR 0 14
45239: PUSH
45240: FOR_IN
45241: IFFALSE 45411
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45243: LD_ADDR_VAR 0 9
45247: PUSH
45248: LD_VAR 0 10
45252: PPUSH
45253: LD_VAR 0 8
45257: PPUSH
45258: LD_INT 5
45260: PPUSH
45261: CALL_OW 272
45265: PUSH
45266: LD_VAR 0 11
45270: PPUSH
45271: LD_VAR 0 8
45275: PPUSH
45276: LD_INT 5
45278: PPUSH
45279: CALL_OW 273
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45288: LD_VAR 0 9
45292: PUSH
45293: LD_INT 1
45295: ARRAY
45296: PPUSH
45297: LD_VAR 0 9
45301: PUSH
45302: LD_INT 2
45304: ARRAY
45305: PPUSH
45306: CALL_OW 488
45310: IFFALSE 45409
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45312: LD_ADDR_VAR 0 4
45316: PUSH
45317: LD_VAR 0 9
45321: PUSH
45322: LD_INT 1
45324: ARRAY
45325: PPUSH
45326: LD_VAR 0 9
45330: PUSH
45331: LD_INT 2
45333: ARRAY
45334: PPUSH
45335: CALL_OW 546
45339: ST_TO_ADDR
// if hex [ 1 ] then
45340: LD_VAR 0 4
45344: PUSH
45345: LD_INT 1
45347: ARRAY
45348: IFFALSE 45352
// continue ;
45350: GO 45240
// h := hex [ 2 ] ;
45352: LD_ADDR_VAR 0 13
45356: PUSH
45357: LD_VAR 0 4
45361: PUSH
45362: LD_INT 2
45364: ARRAY
45365: ST_TO_ADDR
// if h + 7 < height then
45366: LD_VAR 0 13
45370: PUSH
45371: LD_INT 7
45373: PLUS
45374: PUSH
45375: LD_VAR 0 15
45379: LESS
45380: IFFALSE 45409
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45382: LD_ADDR_VAR 0 18
45386: PUSH
45387: LD_INT 7
45389: PUSH
45390: LD_INT 28
45392: PUSH
45393: LD_INT 45
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: LIST
45400: PUSH
45401: LD_VAR 0 12
45405: ARRAY
45406: ST_TO_ADDR
// break ;
45407: GO 45411
// end ; end ; end ;
45409: GO 45240
45411: POP
45412: POP
// end ; if not weapon then
45413: LD_VAR 0 18
45417: NOT
45418: IFFALSE 45478
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45420: LD_ADDR_VAR 0 5
45424: PUSH
45425: LD_VAR 0 5
45429: PUSH
45430: LD_INT 11
45432: PUSH
45433: LD_INT 30
45435: PUSH
45436: LD_INT 49
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: LIST
45443: DIFF
45444: ST_TO_ADDR
// if not list then
45445: LD_VAR 0 5
45449: NOT
45450: IFFALSE 45454
// exit ;
45452: GO 45596
// weapon := list [ rand ( 1 , list ) ] ;
45454: LD_ADDR_VAR 0 18
45458: PUSH
45459: LD_VAR 0 5
45463: PUSH
45464: LD_INT 1
45466: PPUSH
45467: LD_VAR 0 5
45471: PPUSH
45472: CALL_OW 12
45476: ARRAY
45477: ST_TO_ADDR
// end ; if weapon then
45478: LD_VAR 0 18
45482: IFFALSE 45596
// begin tmp := CostOfWeapon ( weapon ) ;
45484: LD_ADDR_VAR 0 14
45488: PUSH
45489: LD_VAR 0 18
45493: PPUSH
45494: CALL_OW 451
45498: ST_TO_ADDR
// j := GetBase ( tower ) ;
45499: LD_ADDR_VAR 0 9
45503: PUSH
45504: LD_VAR 0 1
45508: PPUSH
45509: CALL_OW 274
45513: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45514: LD_VAR 0 9
45518: PPUSH
45519: LD_INT 1
45521: PPUSH
45522: CALL_OW 275
45526: PUSH
45527: LD_VAR 0 14
45531: PUSH
45532: LD_INT 1
45534: ARRAY
45535: GREATEREQUAL
45536: PUSH
45537: LD_VAR 0 9
45541: PPUSH
45542: LD_INT 2
45544: PPUSH
45545: CALL_OW 275
45549: PUSH
45550: LD_VAR 0 14
45554: PUSH
45555: LD_INT 2
45557: ARRAY
45558: GREATEREQUAL
45559: AND
45560: PUSH
45561: LD_VAR 0 9
45565: PPUSH
45566: LD_INT 3
45568: PPUSH
45569: CALL_OW 275
45573: PUSH
45574: LD_VAR 0 14
45578: PUSH
45579: LD_INT 3
45581: ARRAY
45582: GREATEREQUAL
45583: AND
45584: IFFALSE 45596
// result := weapon ;
45586: LD_ADDR_VAR 0 3
45590: PUSH
45591: LD_VAR 0 18
45595: ST_TO_ADDR
// end ; end ;
45596: LD_VAR 0 3
45600: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45601: LD_INT 0
45603: PPUSH
45604: PPUSH
// result := true ;
45605: LD_ADDR_VAR 0 3
45609: PUSH
45610: LD_INT 1
45612: ST_TO_ADDR
// if array1 = array2 then
45613: LD_VAR 0 1
45617: PUSH
45618: LD_VAR 0 2
45622: EQUAL
45623: IFFALSE 45683
// begin for i = 1 to array1 do
45625: LD_ADDR_VAR 0 4
45629: PUSH
45630: DOUBLE
45631: LD_INT 1
45633: DEC
45634: ST_TO_ADDR
45635: LD_VAR 0 1
45639: PUSH
45640: FOR_TO
45641: IFFALSE 45679
// if array1 [ i ] <> array2 [ i ] then
45643: LD_VAR 0 1
45647: PUSH
45648: LD_VAR 0 4
45652: ARRAY
45653: PUSH
45654: LD_VAR 0 2
45658: PUSH
45659: LD_VAR 0 4
45663: ARRAY
45664: NONEQUAL
45665: IFFALSE 45677
// begin result := false ;
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_INT 0
45674: ST_TO_ADDR
// break ;
45675: GO 45679
// end ;
45677: GO 45640
45679: POP
45680: POP
// end else
45681: GO 45691
// result := false ;
45683: LD_ADDR_VAR 0 3
45687: PUSH
45688: LD_INT 0
45690: ST_TO_ADDR
// end ;
45691: LD_VAR 0 3
45695: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45696: LD_INT 0
45698: PPUSH
45699: PPUSH
// if not array1 or not array2 then
45700: LD_VAR 0 1
45704: NOT
45705: PUSH
45706: LD_VAR 0 2
45710: NOT
45711: OR
45712: IFFALSE 45716
// exit ;
45714: GO 45780
// result := true ;
45716: LD_ADDR_VAR 0 3
45720: PUSH
45721: LD_INT 1
45723: ST_TO_ADDR
// for i = 1 to array1 do
45724: LD_ADDR_VAR 0 4
45728: PUSH
45729: DOUBLE
45730: LD_INT 1
45732: DEC
45733: ST_TO_ADDR
45734: LD_VAR 0 1
45738: PUSH
45739: FOR_TO
45740: IFFALSE 45778
// if array1 [ i ] <> array2 [ i ] then
45742: LD_VAR 0 1
45746: PUSH
45747: LD_VAR 0 4
45751: ARRAY
45752: PUSH
45753: LD_VAR 0 2
45757: PUSH
45758: LD_VAR 0 4
45762: ARRAY
45763: NONEQUAL
45764: IFFALSE 45776
// begin result := false ;
45766: LD_ADDR_VAR 0 3
45770: PUSH
45771: LD_INT 0
45773: ST_TO_ADDR
// break ;
45774: GO 45778
// end ;
45776: GO 45739
45778: POP
45779: POP
// end ;
45780: LD_VAR 0 3
45784: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45785: LD_INT 0
45787: PPUSH
45788: PPUSH
45789: PPUSH
// pom := GetBase ( fac ) ;
45790: LD_ADDR_VAR 0 5
45794: PUSH
45795: LD_VAR 0 1
45799: PPUSH
45800: CALL_OW 274
45804: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45805: LD_ADDR_VAR 0 4
45809: PUSH
45810: LD_VAR 0 2
45814: PUSH
45815: LD_INT 1
45817: ARRAY
45818: PPUSH
45819: LD_VAR 0 2
45823: PUSH
45824: LD_INT 2
45826: ARRAY
45827: PPUSH
45828: LD_VAR 0 2
45832: PUSH
45833: LD_INT 3
45835: ARRAY
45836: PPUSH
45837: LD_VAR 0 2
45841: PUSH
45842: LD_INT 4
45844: ARRAY
45845: PPUSH
45846: CALL_OW 449
45850: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45851: LD_ADDR_VAR 0 3
45855: PUSH
45856: LD_VAR 0 5
45860: PPUSH
45861: LD_INT 1
45863: PPUSH
45864: CALL_OW 275
45868: PUSH
45869: LD_VAR 0 4
45873: PUSH
45874: LD_INT 1
45876: ARRAY
45877: GREATEREQUAL
45878: PUSH
45879: LD_VAR 0 5
45883: PPUSH
45884: LD_INT 2
45886: PPUSH
45887: CALL_OW 275
45891: PUSH
45892: LD_VAR 0 4
45896: PUSH
45897: LD_INT 2
45899: ARRAY
45900: GREATEREQUAL
45901: AND
45902: PUSH
45903: LD_VAR 0 5
45907: PPUSH
45908: LD_INT 3
45910: PPUSH
45911: CALL_OW 275
45915: PUSH
45916: LD_VAR 0 4
45920: PUSH
45921: LD_INT 3
45923: ARRAY
45924: GREATEREQUAL
45925: AND
45926: ST_TO_ADDR
// end ;
45927: LD_VAR 0 3
45931: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45932: LD_INT 0
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
// pom := GetBase ( building ) ;
45938: LD_ADDR_VAR 0 3
45942: PUSH
45943: LD_VAR 0 1
45947: PPUSH
45948: CALL_OW 274
45952: ST_TO_ADDR
// if not pom then
45953: LD_VAR 0 3
45957: NOT
45958: IFFALSE 45962
// exit ;
45960: GO 46132
// btype := GetBType ( building ) ;
45962: LD_ADDR_VAR 0 5
45966: PUSH
45967: LD_VAR 0 1
45971: PPUSH
45972: CALL_OW 266
45976: ST_TO_ADDR
// if btype = b_armoury then
45977: LD_VAR 0 5
45981: PUSH
45982: LD_INT 4
45984: EQUAL
45985: IFFALSE 45995
// btype := b_barracks ;
45987: LD_ADDR_VAR 0 5
45991: PUSH
45992: LD_INT 5
45994: ST_TO_ADDR
// if btype = b_depot then
45995: LD_VAR 0 5
45999: PUSH
46000: LD_INT 0
46002: EQUAL
46003: IFFALSE 46013
// btype := b_warehouse ;
46005: LD_ADDR_VAR 0 5
46009: PUSH
46010: LD_INT 1
46012: ST_TO_ADDR
// if btype = b_workshop then
46013: LD_VAR 0 5
46017: PUSH
46018: LD_INT 2
46020: EQUAL
46021: IFFALSE 46031
// btype := b_factory ;
46023: LD_ADDR_VAR 0 5
46027: PUSH
46028: LD_INT 3
46030: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46031: LD_ADDR_VAR 0 4
46035: PUSH
46036: LD_VAR 0 5
46040: PPUSH
46041: LD_VAR 0 1
46045: PPUSH
46046: CALL_OW 248
46050: PPUSH
46051: CALL_OW 450
46055: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46056: LD_ADDR_VAR 0 2
46060: PUSH
46061: LD_VAR 0 3
46065: PPUSH
46066: LD_INT 1
46068: PPUSH
46069: CALL_OW 275
46073: PUSH
46074: LD_VAR 0 4
46078: PUSH
46079: LD_INT 1
46081: ARRAY
46082: GREATEREQUAL
46083: PUSH
46084: LD_VAR 0 3
46088: PPUSH
46089: LD_INT 2
46091: PPUSH
46092: CALL_OW 275
46096: PUSH
46097: LD_VAR 0 4
46101: PUSH
46102: LD_INT 2
46104: ARRAY
46105: GREATEREQUAL
46106: AND
46107: PUSH
46108: LD_VAR 0 3
46112: PPUSH
46113: LD_INT 3
46115: PPUSH
46116: CALL_OW 275
46120: PUSH
46121: LD_VAR 0 4
46125: PUSH
46126: LD_INT 3
46128: ARRAY
46129: GREATEREQUAL
46130: AND
46131: ST_TO_ADDR
// end ;
46132: LD_VAR 0 2
46136: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46137: LD_INT 0
46139: PPUSH
46140: PPUSH
46141: PPUSH
// pom := GetBase ( building ) ;
46142: LD_ADDR_VAR 0 4
46146: PUSH
46147: LD_VAR 0 1
46151: PPUSH
46152: CALL_OW 274
46156: ST_TO_ADDR
// if not pom then
46157: LD_VAR 0 4
46161: NOT
46162: IFFALSE 46166
// exit ;
46164: GO 46267
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46166: LD_ADDR_VAR 0 5
46170: PUSH
46171: LD_VAR 0 2
46175: PPUSH
46176: LD_VAR 0 1
46180: PPUSH
46181: CALL_OW 248
46185: PPUSH
46186: CALL_OW 450
46190: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46191: LD_ADDR_VAR 0 3
46195: PUSH
46196: LD_VAR 0 4
46200: PPUSH
46201: LD_INT 1
46203: PPUSH
46204: CALL_OW 275
46208: PUSH
46209: LD_VAR 0 5
46213: PUSH
46214: LD_INT 1
46216: ARRAY
46217: GREATEREQUAL
46218: PUSH
46219: LD_VAR 0 4
46223: PPUSH
46224: LD_INT 2
46226: PPUSH
46227: CALL_OW 275
46231: PUSH
46232: LD_VAR 0 5
46236: PUSH
46237: LD_INT 2
46239: ARRAY
46240: GREATEREQUAL
46241: AND
46242: PUSH
46243: LD_VAR 0 4
46247: PPUSH
46248: LD_INT 3
46250: PPUSH
46251: CALL_OW 275
46255: PUSH
46256: LD_VAR 0 5
46260: PUSH
46261: LD_INT 3
46263: ARRAY
46264: GREATEREQUAL
46265: AND
46266: ST_TO_ADDR
// end ;
46267: LD_VAR 0 3
46271: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46272: LD_INT 0
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
// result := false ;
46285: LD_ADDR_VAR 0 8
46289: PUSH
46290: LD_INT 0
46292: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46293: LD_VAR 0 5
46297: NOT
46298: PUSH
46299: LD_VAR 0 1
46303: NOT
46304: OR
46305: PUSH
46306: LD_VAR 0 2
46310: NOT
46311: OR
46312: PUSH
46313: LD_VAR 0 3
46317: NOT
46318: OR
46319: IFFALSE 46323
// exit ;
46321: GO 47137
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46323: LD_ADDR_VAR 0 14
46327: PUSH
46328: LD_VAR 0 1
46332: PPUSH
46333: LD_VAR 0 2
46337: PPUSH
46338: LD_VAR 0 3
46342: PPUSH
46343: LD_VAR 0 4
46347: PPUSH
46348: LD_VAR 0 5
46352: PUSH
46353: LD_INT 1
46355: ARRAY
46356: PPUSH
46357: CALL_OW 248
46361: PPUSH
46362: LD_INT 0
46364: PPUSH
46365: CALL 48370 0 6
46369: ST_TO_ADDR
// if not hexes then
46370: LD_VAR 0 14
46374: NOT
46375: IFFALSE 46379
// exit ;
46377: GO 47137
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46379: LD_ADDR_VAR 0 17
46383: PUSH
46384: LD_VAR 0 5
46388: PPUSH
46389: LD_INT 22
46391: PUSH
46392: LD_VAR 0 13
46396: PPUSH
46397: CALL_OW 255
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 30
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 30
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PPUSH
46438: CALL_OW 72
46442: ST_TO_ADDR
// for i = 1 to hexes do
46443: LD_ADDR_VAR 0 9
46447: PUSH
46448: DOUBLE
46449: LD_INT 1
46451: DEC
46452: ST_TO_ADDR
46453: LD_VAR 0 14
46457: PUSH
46458: FOR_TO
46459: IFFALSE 47135
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46461: LD_ADDR_VAR 0 13
46465: PUSH
46466: LD_VAR 0 14
46470: PUSH
46471: LD_VAR 0 9
46475: ARRAY
46476: PUSH
46477: LD_INT 1
46479: ARRAY
46480: PPUSH
46481: LD_VAR 0 14
46485: PUSH
46486: LD_VAR 0 9
46490: ARRAY
46491: PUSH
46492: LD_INT 2
46494: ARRAY
46495: PPUSH
46496: CALL_OW 428
46500: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46501: LD_VAR 0 14
46505: PUSH
46506: LD_VAR 0 9
46510: ARRAY
46511: PUSH
46512: LD_INT 1
46514: ARRAY
46515: PPUSH
46516: LD_VAR 0 14
46520: PUSH
46521: LD_VAR 0 9
46525: ARRAY
46526: PUSH
46527: LD_INT 2
46529: ARRAY
46530: PPUSH
46531: CALL_OW 351
46535: PUSH
46536: LD_VAR 0 14
46540: PUSH
46541: LD_VAR 0 9
46545: ARRAY
46546: PUSH
46547: LD_INT 1
46549: ARRAY
46550: PPUSH
46551: LD_VAR 0 14
46555: PUSH
46556: LD_VAR 0 9
46560: ARRAY
46561: PUSH
46562: LD_INT 2
46564: ARRAY
46565: PPUSH
46566: CALL_OW 488
46570: NOT
46571: OR
46572: PUSH
46573: LD_VAR 0 13
46577: PPUSH
46578: CALL_OW 247
46582: PUSH
46583: LD_INT 3
46585: EQUAL
46586: OR
46587: IFFALSE 46593
// exit ;
46589: POP
46590: POP
46591: GO 47137
// if not tmp then
46593: LD_VAR 0 13
46597: NOT
46598: IFFALSE 46602
// continue ;
46600: GO 46458
// result := true ;
46602: LD_ADDR_VAR 0 8
46606: PUSH
46607: LD_INT 1
46609: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46610: LD_VAR 0 6
46614: PUSH
46615: LD_VAR 0 13
46619: PPUSH
46620: CALL_OW 247
46624: PUSH
46625: LD_INT 2
46627: EQUAL
46628: AND
46629: PUSH
46630: LD_VAR 0 13
46634: PPUSH
46635: CALL_OW 263
46639: PUSH
46640: LD_INT 1
46642: EQUAL
46643: AND
46644: IFFALSE 46808
// begin if IsDrivenBy ( tmp ) then
46646: LD_VAR 0 13
46650: PPUSH
46651: CALL_OW 311
46655: IFFALSE 46659
// continue ;
46657: GO 46458
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46659: LD_VAR 0 6
46663: PPUSH
46664: LD_INT 3
46666: PUSH
46667: LD_INT 60
46669: PUSH
46670: EMPTY
46671: LIST
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 55
46682: PUSH
46683: EMPTY
46684: LIST
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PPUSH
46694: CALL_OW 72
46698: IFFALSE 46806
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46700: LD_ADDR_VAR 0 18
46704: PUSH
46705: LD_VAR 0 6
46709: PPUSH
46710: LD_INT 3
46712: PUSH
46713: LD_INT 60
46715: PUSH
46716: EMPTY
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 3
46725: PUSH
46726: LD_INT 55
46728: PUSH
46729: EMPTY
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PPUSH
46740: CALL_OW 72
46744: PUSH
46745: LD_INT 1
46747: ARRAY
46748: ST_TO_ADDR
// if IsInUnit ( driver ) then
46749: LD_VAR 0 18
46753: PPUSH
46754: CALL_OW 310
46758: IFFALSE 46769
// ComExit ( driver ) ;
46760: LD_VAR 0 18
46764: PPUSH
46765: CALL 72058 0 1
// AddComEnterUnit ( driver , tmp ) ;
46769: LD_VAR 0 18
46773: PPUSH
46774: LD_VAR 0 13
46778: PPUSH
46779: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46783: LD_VAR 0 18
46787: PPUSH
46788: LD_VAR 0 7
46792: PPUSH
46793: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46797: LD_VAR 0 18
46801: PPUSH
46802: CALL_OW 181
// end ; continue ;
46806: GO 46458
// end ; if not cleaners or not tmp in cleaners then
46808: LD_VAR 0 6
46812: NOT
46813: PUSH
46814: LD_VAR 0 13
46818: PUSH
46819: LD_VAR 0 6
46823: IN
46824: NOT
46825: OR
46826: IFFALSE 47133
// begin if dep then
46828: LD_VAR 0 17
46832: IFFALSE 46968
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46834: LD_ADDR_VAR 0 16
46838: PUSH
46839: LD_VAR 0 17
46843: PUSH
46844: LD_INT 1
46846: ARRAY
46847: PPUSH
46848: CALL_OW 250
46852: PPUSH
46853: LD_VAR 0 17
46857: PUSH
46858: LD_INT 1
46860: ARRAY
46861: PPUSH
46862: CALL_OW 254
46866: PPUSH
46867: LD_INT 5
46869: PPUSH
46870: CALL_OW 272
46874: PUSH
46875: LD_VAR 0 17
46879: PUSH
46880: LD_INT 1
46882: ARRAY
46883: PPUSH
46884: CALL_OW 251
46888: PPUSH
46889: LD_VAR 0 17
46893: PUSH
46894: LD_INT 1
46896: ARRAY
46897: PPUSH
46898: CALL_OW 254
46902: PPUSH
46903: LD_INT 5
46905: PPUSH
46906: CALL_OW 273
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46915: LD_VAR 0 16
46919: PUSH
46920: LD_INT 1
46922: ARRAY
46923: PPUSH
46924: LD_VAR 0 16
46928: PUSH
46929: LD_INT 2
46931: ARRAY
46932: PPUSH
46933: CALL_OW 488
46937: IFFALSE 46968
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46939: LD_VAR 0 13
46943: PPUSH
46944: LD_VAR 0 16
46948: PUSH
46949: LD_INT 1
46951: ARRAY
46952: PPUSH
46953: LD_VAR 0 16
46957: PUSH
46958: LD_INT 2
46960: ARRAY
46961: PPUSH
46962: CALL_OW 111
// continue ;
46966: GO 46458
// end ; end ; r := GetDir ( tmp ) ;
46968: LD_ADDR_VAR 0 15
46972: PUSH
46973: LD_VAR 0 13
46977: PPUSH
46978: CALL_OW 254
46982: ST_TO_ADDR
// if r = 5 then
46983: LD_VAR 0 15
46987: PUSH
46988: LD_INT 5
46990: EQUAL
46991: IFFALSE 47001
// r := 0 ;
46993: LD_ADDR_VAR 0 15
46997: PUSH
46998: LD_INT 0
47000: ST_TO_ADDR
// for j = r to 5 do
47001: LD_ADDR_VAR 0 10
47005: PUSH
47006: DOUBLE
47007: LD_VAR 0 15
47011: DEC
47012: ST_TO_ADDR
47013: LD_INT 5
47015: PUSH
47016: FOR_TO
47017: IFFALSE 47131
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47019: LD_ADDR_VAR 0 11
47023: PUSH
47024: LD_VAR 0 13
47028: PPUSH
47029: CALL_OW 250
47033: PPUSH
47034: LD_VAR 0 10
47038: PPUSH
47039: LD_INT 2
47041: PPUSH
47042: CALL_OW 272
47046: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47047: LD_ADDR_VAR 0 12
47051: PUSH
47052: LD_VAR 0 13
47056: PPUSH
47057: CALL_OW 251
47061: PPUSH
47062: LD_VAR 0 10
47066: PPUSH
47067: LD_INT 2
47069: PPUSH
47070: CALL_OW 273
47074: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47075: LD_VAR 0 11
47079: PPUSH
47080: LD_VAR 0 12
47084: PPUSH
47085: CALL_OW 488
47089: PUSH
47090: LD_VAR 0 11
47094: PPUSH
47095: LD_VAR 0 12
47099: PPUSH
47100: CALL_OW 428
47104: NOT
47105: AND
47106: IFFALSE 47129
// begin ComMoveXY ( tmp , _x , _y ) ;
47108: LD_VAR 0 13
47112: PPUSH
47113: LD_VAR 0 11
47117: PPUSH
47118: LD_VAR 0 12
47122: PPUSH
47123: CALL_OW 111
// break ;
47127: GO 47131
// end ; end ;
47129: GO 47016
47131: POP
47132: POP
// end ; end ;
47133: GO 46458
47135: POP
47136: POP
// end ;
47137: LD_VAR 0 8
47141: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47142: LD_INT 0
47144: PPUSH
// result := true ;
47145: LD_ADDR_VAR 0 3
47149: PUSH
47150: LD_INT 1
47152: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47153: LD_VAR 0 2
47157: PUSH
47158: LD_INT 24
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47172
47164: LD_INT 33
47166: DOUBLE
47167: EQUAL
47168: IFTRUE 47172
47170: GO 47197
47172: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47173: LD_ADDR_VAR 0 3
47177: PUSH
47178: LD_INT 32
47180: PPUSH
47181: LD_VAR 0 1
47185: PPUSH
47186: CALL_OW 321
47190: PUSH
47191: LD_INT 2
47193: EQUAL
47194: ST_TO_ADDR
47195: GO 47513
47197: LD_INT 20
47199: DOUBLE
47200: EQUAL
47201: IFTRUE 47205
47203: GO 47230
47205: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47206: LD_ADDR_VAR 0 3
47210: PUSH
47211: LD_INT 6
47213: PPUSH
47214: LD_VAR 0 1
47218: PPUSH
47219: CALL_OW 321
47223: PUSH
47224: LD_INT 2
47226: EQUAL
47227: ST_TO_ADDR
47228: GO 47513
47230: LD_INT 22
47232: DOUBLE
47233: EQUAL
47234: IFTRUE 47244
47236: LD_INT 36
47238: DOUBLE
47239: EQUAL
47240: IFTRUE 47244
47242: GO 47269
47244: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47245: LD_ADDR_VAR 0 3
47249: PUSH
47250: LD_INT 15
47252: PPUSH
47253: LD_VAR 0 1
47257: PPUSH
47258: CALL_OW 321
47262: PUSH
47263: LD_INT 2
47265: EQUAL
47266: ST_TO_ADDR
47267: GO 47513
47269: LD_INT 30
47271: DOUBLE
47272: EQUAL
47273: IFTRUE 47277
47275: GO 47302
47277: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47278: LD_ADDR_VAR 0 3
47282: PUSH
47283: LD_INT 20
47285: PPUSH
47286: LD_VAR 0 1
47290: PPUSH
47291: CALL_OW 321
47295: PUSH
47296: LD_INT 2
47298: EQUAL
47299: ST_TO_ADDR
47300: GO 47513
47302: LD_INT 28
47304: DOUBLE
47305: EQUAL
47306: IFTRUE 47316
47308: LD_INT 21
47310: DOUBLE
47311: EQUAL
47312: IFTRUE 47316
47314: GO 47341
47316: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47317: LD_ADDR_VAR 0 3
47321: PUSH
47322: LD_INT 21
47324: PPUSH
47325: LD_VAR 0 1
47329: PPUSH
47330: CALL_OW 321
47334: PUSH
47335: LD_INT 2
47337: EQUAL
47338: ST_TO_ADDR
47339: GO 47513
47341: LD_INT 16
47343: DOUBLE
47344: EQUAL
47345: IFTRUE 47349
47347: GO 47374
47349: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47350: LD_ADDR_VAR 0 3
47354: PUSH
47355: LD_INT 84
47357: PPUSH
47358: LD_VAR 0 1
47362: PPUSH
47363: CALL_OW 321
47367: PUSH
47368: LD_INT 2
47370: EQUAL
47371: ST_TO_ADDR
47372: GO 47513
47374: LD_INT 19
47376: DOUBLE
47377: EQUAL
47378: IFTRUE 47388
47380: LD_INT 23
47382: DOUBLE
47383: EQUAL
47384: IFTRUE 47388
47386: GO 47413
47388: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47389: LD_ADDR_VAR 0 3
47393: PUSH
47394: LD_INT 83
47396: PPUSH
47397: LD_VAR 0 1
47401: PPUSH
47402: CALL_OW 321
47406: PUSH
47407: LD_INT 2
47409: EQUAL
47410: ST_TO_ADDR
47411: GO 47513
47413: LD_INT 17
47415: DOUBLE
47416: EQUAL
47417: IFTRUE 47421
47419: GO 47446
47421: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47422: LD_ADDR_VAR 0 3
47426: PUSH
47427: LD_INT 39
47429: PPUSH
47430: LD_VAR 0 1
47434: PPUSH
47435: CALL_OW 321
47439: PUSH
47440: LD_INT 2
47442: EQUAL
47443: ST_TO_ADDR
47444: GO 47513
47446: LD_INT 18
47448: DOUBLE
47449: EQUAL
47450: IFTRUE 47454
47452: GO 47479
47454: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47455: LD_ADDR_VAR 0 3
47459: PUSH
47460: LD_INT 40
47462: PPUSH
47463: LD_VAR 0 1
47467: PPUSH
47468: CALL_OW 321
47472: PUSH
47473: LD_INT 2
47475: EQUAL
47476: ST_TO_ADDR
47477: GO 47513
47479: LD_INT 27
47481: DOUBLE
47482: EQUAL
47483: IFTRUE 47487
47485: GO 47512
47487: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47488: LD_ADDR_VAR 0 3
47492: PUSH
47493: LD_INT 35
47495: PPUSH
47496: LD_VAR 0 1
47500: PPUSH
47501: CALL_OW 321
47505: PUSH
47506: LD_INT 2
47508: EQUAL
47509: ST_TO_ADDR
47510: GO 47513
47512: POP
// end ;
47513: LD_VAR 0 3
47517: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47518: LD_INT 0
47520: PPUSH
47521: PPUSH
47522: PPUSH
47523: PPUSH
47524: PPUSH
47525: PPUSH
47526: PPUSH
47527: PPUSH
47528: PPUSH
47529: PPUSH
47530: PPUSH
// result := false ;
47531: LD_ADDR_VAR 0 6
47535: PUSH
47536: LD_INT 0
47538: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47539: LD_VAR 0 1
47543: NOT
47544: PUSH
47545: LD_VAR 0 1
47549: PPUSH
47550: CALL_OW 266
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: IN
47565: NOT
47566: OR
47567: PUSH
47568: LD_VAR 0 2
47572: NOT
47573: OR
47574: PUSH
47575: LD_VAR 0 5
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: LD_INT 4
47594: PUSH
47595: LD_INT 5
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: IN
47606: NOT
47607: OR
47608: PUSH
47609: LD_VAR 0 3
47613: PPUSH
47614: LD_VAR 0 4
47618: PPUSH
47619: CALL_OW 488
47623: NOT
47624: OR
47625: IFFALSE 47629
// exit ;
47627: GO 48365
// side := GetSide ( depot ) ;
47629: LD_ADDR_VAR 0 9
47633: PUSH
47634: LD_VAR 0 1
47638: PPUSH
47639: CALL_OW 255
47643: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47644: LD_VAR 0 9
47648: PPUSH
47649: LD_VAR 0 2
47653: PPUSH
47654: CALL 47142 0 2
47658: NOT
47659: IFFALSE 47663
// exit ;
47661: GO 48365
// pom := GetBase ( depot ) ;
47663: LD_ADDR_VAR 0 10
47667: PUSH
47668: LD_VAR 0 1
47672: PPUSH
47673: CALL_OW 274
47677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47678: LD_ADDR_VAR 0 11
47682: PUSH
47683: LD_VAR 0 2
47687: PPUSH
47688: LD_VAR 0 1
47692: PPUSH
47693: CALL_OW 248
47697: PPUSH
47698: CALL_OW 450
47702: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47703: LD_VAR 0 10
47707: PPUSH
47708: LD_INT 1
47710: PPUSH
47711: CALL_OW 275
47715: PUSH
47716: LD_VAR 0 11
47720: PUSH
47721: LD_INT 1
47723: ARRAY
47724: GREATEREQUAL
47725: PUSH
47726: LD_VAR 0 10
47730: PPUSH
47731: LD_INT 2
47733: PPUSH
47734: CALL_OW 275
47738: PUSH
47739: LD_VAR 0 11
47743: PUSH
47744: LD_INT 2
47746: ARRAY
47747: GREATEREQUAL
47748: AND
47749: PUSH
47750: LD_VAR 0 10
47754: PPUSH
47755: LD_INT 3
47757: PPUSH
47758: CALL_OW 275
47762: PUSH
47763: LD_VAR 0 11
47767: PUSH
47768: LD_INT 3
47770: ARRAY
47771: GREATEREQUAL
47772: AND
47773: NOT
47774: IFFALSE 47778
// exit ;
47776: GO 48365
// if GetBType ( depot ) = b_depot then
47778: LD_VAR 0 1
47782: PPUSH
47783: CALL_OW 266
47787: PUSH
47788: LD_INT 0
47790: EQUAL
47791: IFFALSE 47803
// dist := 28 else
47793: LD_ADDR_VAR 0 14
47797: PUSH
47798: LD_INT 28
47800: ST_TO_ADDR
47801: GO 47811
// dist := 36 ;
47803: LD_ADDR_VAR 0 14
47807: PUSH
47808: LD_INT 36
47810: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47811: LD_VAR 0 1
47815: PPUSH
47816: LD_VAR 0 3
47820: PPUSH
47821: LD_VAR 0 4
47825: PPUSH
47826: CALL_OW 297
47830: PUSH
47831: LD_VAR 0 14
47835: GREATER
47836: IFFALSE 47840
// exit ;
47838: GO 48365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47840: LD_ADDR_VAR 0 12
47844: PUSH
47845: LD_VAR 0 2
47849: PPUSH
47850: LD_VAR 0 3
47854: PPUSH
47855: LD_VAR 0 4
47859: PPUSH
47860: LD_VAR 0 5
47864: PPUSH
47865: LD_VAR 0 1
47869: PPUSH
47870: CALL_OW 248
47874: PPUSH
47875: LD_INT 0
47877: PPUSH
47878: CALL 48370 0 6
47882: ST_TO_ADDR
// if not hexes then
47883: LD_VAR 0 12
47887: NOT
47888: IFFALSE 47892
// exit ;
47890: GO 48365
// hex := GetHexInfo ( x , y ) ;
47892: LD_ADDR_VAR 0 15
47896: PUSH
47897: LD_VAR 0 3
47901: PPUSH
47902: LD_VAR 0 4
47906: PPUSH
47907: CALL_OW 546
47911: ST_TO_ADDR
// if hex [ 1 ] then
47912: LD_VAR 0 15
47916: PUSH
47917: LD_INT 1
47919: ARRAY
47920: IFFALSE 47924
// exit ;
47922: GO 48365
// height := hex [ 2 ] ;
47924: LD_ADDR_VAR 0 13
47928: PUSH
47929: LD_VAR 0 15
47933: PUSH
47934: LD_INT 2
47936: ARRAY
47937: ST_TO_ADDR
// for i = 1 to hexes do
47938: LD_ADDR_VAR 0 7
47942: PUSH
47943: DOUBLE
47944: LD_INT 1
47946: DEC
47947: ST_TO_ADDR
47948: LD_VAR 0 12
47952: PUSH
47953: FOR_TO
47954: IFFALSE 48284
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47956: LD_VAR 0 12
47960: PUSH
47961: LD_VAR 0 7
47965: ARRAY
47966: PUSH
47967: LD_INT 1
47969: ARRAY
47970: PPUSH
47971: LD_VAR 0 12
47975: PUSH
47976: LD_VAR 0 7
47980: ARRAY
47981: PUSH
47982: LD_INT 2
47984: ARRAY
47985: PPUSH
47986: CALL_OW 488
47990: NOT
47991: PUSH
47992: LD_VAR 0 12
47996: PUSH
47997: LD_VAR 0 7
48001: ARRAY
48002: PUSH
48003: LD_INT 1
48005: ARRAY
48006: PPUSH
48007: LD_VAR 0 12
48011: PUSH
48012: LD_VAR 0 7
48016: ARRAY
48017: PUSH
48018: LD_INT 2
48020: ARRAY
48021: PPUSH
48022: CALL_OW 428
48026: PUSH
48027: LD_INT 0
48029: GREATER
48030: OR
48031: PUSH
48032: LD_VAR 0 12
48036: PUSH
48037: LD_VAR 0 7
48041: ARRAY
48042: PUSH
48043: LD_INT 1
48045: ARRAY
48046: PPUSH
48047: LD_VAR 0 12
48051: PUSH
48052: LD_VAR 0 7
48056: ARRAY
48057: PUSH
48058: LD_INT 2
48060: ARRAY
48061: PPUSH
48062: CALL_OW 351
48066: OR
48067: IFFALSE 48073
// exit ;
48069: POP
48070: POP
48071: GO 48365
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48073: LD_ADDR_VAR 0 8
48077: PUSH
48078: LD_VAR 0 12
48082: PUSH
48083: LD_VAR 0 7
48087: ARRAY
48088: PUSH
48089: LD_INT 1
48091: ARRAY
48092: PPUSH
48093: LD_VAR 0 12
48097: PUSH
48098: LD_VAR 0 7
48102: ARRAY
48103: PUSH
48104: LD_INT 2
48106: ARRAY
48107: PPUSH
48108: CALL_OW 546
48112: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48113: LD_VAR 0 8
48117: PUSH
48118: LD_INT 1
48120: ARRAY
48121: PUSH
48122: LD_VAR 0 8
48126: PUSH
48127: LD_INT 2
48129: ARRAY
48130: PUSH
48131: LD_VAR 0 13
48135: PUSH
48136: LD_INT 2
48138: PLUS
48139: GREATER
48140: OR
48141: PUSH
48142: LD_VAR 0 8
48146: PUSH
48147: LD_INT 2
48149: ARRAY
48150: PUSH
48151: LD_VAR 0 13
48155: PUSH
48156: LD_INT 2
48158: MINUS
48159: LESS
48160: OR
48161: PUSH
48162: LD_VAR 0 8
48166: PUSH
48167: LD_INT 3
48169: ARRAY
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 8
48176: PUSH
48177: LD_INT 9
48179: PUSH
48180: LD_INT 10
48182: PUSH
48183: LD_INT 11
48185: PUSH
48186: LD_INT 12
48188: PUSH
48189: LD_INT 13
48191: PUSH
48192: LD_INT 16
48194: PUSH
48195: LD_INT 17
48197: PUSH
48198: LD_INT 18
48200: PUSH
48201: LD_INT 19
48203: PUSH
48204: LD_INT 20
48206: PUSH
48207: LD_INT 21
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: IN
48225: NOT
48226: OR
48227: PUSH
48228: LD_VAR 0 8
48232: PUSH
48233: LD_INT 5
48235: ARRAY
48236: NOT
48237: OR
48238: PUSH
48239: LD_VAR 0 8
48243: PUSH
48244: LD_INT 6
48246: ARRAY
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 7
48256: PUSH
48257: LD_INT 9
48259: PUSH
48260: LD_INT 10
48262: PUSH
48263: LD_INT 11
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: IN
48274: NOT
48275: OR
48276: IFFALSE 48282
// exit ;
48278: POP
48279: POP
48280: GO 48365
// end ;
48282: GO 47953
48284: POP
48285: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48286: LD_VAR 0 9
48290: PPUSH
48291: LD_VAR 0 3
48295: PPUSH
48296: LD_VAR 0 4
48300: PPUSH
48301: LD_INT 20
48303: PPUSH
48304: CALL 40317 0 4
48308: PUSH
48309: LD_INT 4
48311: ARRAY
48312: IFFALSE 48316
// exit ;
48314: GO 48365
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48316: LD_VAR 0 2
48320: PUSH
48321: LD_INT 29
48323: PUSH
48324: LD_INT 30
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: IN
48331: PUSH
48332: LD_VAR 0 3
48336: PPUSH
48337: LD_VAR 0 4
48341: PPUSH
48342: LD_VAR 0 9
48346: PPUSH
48347: CALL_OW 440
48351: NOT
48352: AND
48353: IFFALSE 48357
// exit ;
48355: GO 48365
// result := true ;
48357: LD_ADDR_VAR 0 6
48361: PUSH
48362: LD_INT 1
48364: ST_TO_ADDR
// end ;
48365: LD_VAR 0 6
48369: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48370: LD_INT 0
48372: PPUSH
48373: PPUSH
48374: PPUSH
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
48404: PPUSH
48405: PPUSH
48406: PPUSH
48407: PPUSH
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
48425: PPUSH
48426: PPUSH
48427: PPUSH
48428: PPUSH
48429: PPUSH
// result = [ ] ;
48430: LD_ADDR_VAR 0 7
48434: PUSH
48435: EMPTY
48436: ST_TO_ADDR
// temp_list = [ ] ;
48437: LD_ADDR_VAR 0 9
48441: PUSH
48442: EMPTY
48443: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48444: LD_VAR 0 4
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 3
48460: PUSH
48461: LD_INT 4
48463: PUSH
48464: LD_INT 5
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: IN
48475: NOT
48476: PUSH
48477: LD_VAR 0 1
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: IN
48492: PUSH
48493: LD_VAR 0 5
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 3
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: IN
48512: NOT
48513: AND
48514: OR
48515: IFFALSE 48519
// exit ;
48517: GO 66910
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48519: LD_VAR 0 1
48523: PUSH
48524: LD_INT 6
48526: PUSH
48527: LD_INT 7
48529: PUSH
48530: LD_INT 8
48532: PUSH
48533: LD_INT 13
48535: PUSH
48536: LD_INT 12
48538: PUSH
48539: LD_INT 15
48541: PUSH
48542: LD_INT 11
48544: PUSH
48545: LD_INT 14
48547: PUSH
48548: LD_INT 10
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: IN
48562: IFFALSE 48572
// btype = b_lab ;
48564: LD_ADDR_VAR 0 1
48568: PUSH
48569: LD_INT 6
48571: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48572: LD_VAR 0 6
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: IN
48591: NOT
48592: PUSH
48593: LD_VAR 0 1
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: LD_INT 6
48612: PUSH
48613: LD_INT 36
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: LD_INT 5
48621: PUSH
48622: LD_INT 31
48624: PUSH
48625: LD_INT 32
48627: PUSH
48628: LD_INT 33
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: IN
48644: NOT
48645: PUSH
48646: LD_VAR 0 6
48650: PUSH
48651: LD_INT 1
48653: EQUAL
48654: AND
48655: OR
48656: PUSH
48657: LD_VAR 0 1
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: IN
48672: NOT
48673: PUSH
48674: LD_VAR 0 6
48678: PUSH
48679: LD_INT 2
48681: EQUAL
48682: AND
48683: OR
48684: IFFALSE 48694
// mode = 0 ;
48686: LD_ADDR_VAR 0 6
48690: PUSH
48691: LD_INT 0
48693: ST_TO_ADDR
// case mode of 0 :
48694: LD_VAR 0 6
48698: PUSH
48699: LD_INT 0
48701: DOUBLE
48702: EQUAL
48703: IFTRUE 48707
48705: GO 60160
48707: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48708: LD_ADDR_VAR 0 11
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 3
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48901: LD_ADDR_VAR 0 12
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: NEG
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 3
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49097: LD_ADDR_VAR 0 13
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 3
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: LD_INT 3
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49296: LD_ADDR_VAR 0 14
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49492: LD_ADDR_VAR 0 15
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49685: LD_ADDR_VAR 0 16
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49878: LD_ADDR_VAR 0 17
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50108: LD_ADDR_VAR 0 18
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50338: LD_ADDR_VAR 0 19
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50568: LD_ADDR_VAR 0 20
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50798: LD_ADDR_VAR 0 21
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51028: LD_ADDR_VAR 0 22
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51258: LD_ADDR_VAR 0 23
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51538: LD_ADDR_VAR 0 24
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 3
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51814: LD_ADDR_VAR 0 25
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52088: LD_ADDR_VAR 0 26
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 3
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52364: LD_ADDR_VAR 0 27
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52644: LD_ADDR_VAR 0 28
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 3
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52926: LD_ADDR_VAR 0 29
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53205: LD_ADDR_VAR 0 30
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53483: LD_ADDR_VAR 0 31
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53761: LD_ADDR_VAR 0 32
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 3
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54039: LD_ADDR_VAR 0 33
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 3
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54318: LD_ADDR_VAR 0 34
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 3
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54598: LD_ADDR_VAR 0 35
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54710: LD_ADDR_VAR 0 36
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54822: LD_ADDR_VAR 0 37
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54934: LD_ADDR_VAR 0 38
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55046: LD_ADDR_VAR 0 39
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55158: LD_ADDR_VAR 0 40
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55270: LD_ADDR_VAR 0 41
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55620: LD_ADDR_VAR 0 42
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 3
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55970: LD_ADDR_VAR 0 43
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 3
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56318: LD_ADDR_VAR 0 44
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: LD_INT 3
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56668: LD_ADDR_VAR 0 45
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57018: LD_ADDR_VAR 0 46
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57366: LD_ADDR_VAR 0 47
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57517: LD_ADDR_VAR 0 48
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57664: LD_ADDR_VAR 0 49
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57808: LD_ADDR_VAR 0 50
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57952: LD_ADDR_VAR 0 51
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58099: LD_ADDR_VAR 0 52
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58250: LD_ADDR_VAR 0 53
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58480: LD_ADDR_VAR 0 54
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58710: LD_ADDR_VAR 0 55
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58940: LD_ADDR_VAR 0 56
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 2
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59170: LD_ADDR_VAR 0 57
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 2
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59400: LD_ADDR_VAR 0 58
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59630: LD_ADDR_VAR 0 59
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59718: LD_ADDR_VAR 0 60
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59806: LD_ADDR_VAR 0 61
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59894: LD_ADDR_VAR 0 62
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59982: LD_ADDR_VAR 0 63
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60070: LD_ADDR_VAR 0 64
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: ST_TO_ADDR
// end ; 1 :
60158: GO 66055
60160: LD_INT 1
60162: DOUBLE
60163: EQUAL
60164: IFTRUE 60168
60166: GO 62791
60168: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60169: LD_ADDR_VAR 0 11
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 3
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 3
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60213: LD_ADDR_VAR 0 12
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60254: LD_ADDR_VAR 0 13
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: LIST
60293: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60294: LD_ADDR_VAR 0 14
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: LD_INT 3
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60335: LD_ADDR_VAR 0 15
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: NEG
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60379: LD_ADDR_VAR 0 16
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60425: LD_ADDR_VAR 0 17
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 3
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60469: LD_ADDR_VAR 0 18
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60510: LD_ADDR_VAR 0 19
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60550: LD_ADDR_VAR 0 20
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60591: LD_ADDR_VAR 0 21
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60635: LD_ADDR_VAR 0 22
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60681: LD_ADDR_VAR 0 23
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 3
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 4
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 3
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60725: LD_ADDR_VAR 0 24
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 4
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60766: LD_ADDR_VAR 0 25
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 4
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: LD_INT 4
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60806: LD_ADDR_VAR 0 26
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 4
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 3
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60847: LD_ADDR_VAR 0 27
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 4
60876: NEG
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60891: LD_ADDR_VAR 0 28
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 3
60910: NEG
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 4
60922: NEG
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60937: LD_ADDR_VAR 0 29
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: LD_INT 4
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 5
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 5
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 4
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: LD_INT 6
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 6
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 5
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61092: LD_ADDR_VAR 0 30
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 4
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 4
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 4
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 5
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 5
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 6
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 6
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61235: LD_ADDR_VAR 0 31
61239: PUSH
61240: LD_INT 3
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 4
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: LD_INT 4
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: LD_INT 4
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 5
61302: PUSH
61303: LD_INT 4
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: LD_INT 5
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 4
61322: PUSH
61323: LD_INT 5
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 6
61332: PUSH
61333: LD_INT 5
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 6
61342: PUSH
61343: LD_INT 6
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 5
61352: PUSH
61353: LD_INT 6
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61374: LD_ADDR_VAR 0 32
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: LD_INT 3
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: LD_INT 5
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 5
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: LD_INT 4
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: LD_INT 6
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 6
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61517: LD_ADDR_VAR 0 33
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 4
61569: NEG
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 4
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 5
61603: NEG
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 5
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 5
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 6
61637: NEG
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 6
61648: NEG
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61672: LD_ADDR_VAR 0 34
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: LD_INT 3
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: NEG
61716: PUSH
61717: LD_INT 4
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: LD_INT 4
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 4
61751: NEG
61752: PUSH
61753: LD_INT 5
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 5
61775: NEG
61776: PUSH
61777: LD_INT 5
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 5
61787: NEG
61788: PUSH
61789: LD_INT 6
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 6
61799: NEG
61800: PUSH
61801: LD_INT 5
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 6
61811: NEG
61812: PUSH
61813: LD_INT 6
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61835: LD_ADDR_VAR 0 41
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61879: LD_ADDR_VAR 0 42
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61920: LD_ADDR_VAR 0 43
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: LIST
61959: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61960: LD_ADDR_VAR 0 44
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62001: LD_ADDR_VAR 0 45
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62045: LD_ADDR_VAR 0 46
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: LD_INT 3
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 3
62076: NEG
62077: PUSH
62078: LD_INT 2
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62091: LD_ADDR_VAR 0 47
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62124: LD_ADDR_VAR 0 48
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62155: LD_ADDR_VAR 0 49
62159: PUSH
62160: LD_INT 3
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 3
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62184: LD_ADDR_VAR 0 50
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62213: LD_ADDR_VAR 0 51
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: NEG
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62244: LD_ADDR_VAR 0 52
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: NEG
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62277: LD_ADDR_VAR 0 53
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62321: LD_ADDR_VAR 0 54
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 3
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: LIST
62361: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62362: LD_ADDR_VAR 0 55
62366: PUSH
62367: LD_INT 3
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: LIST
62401: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62402: LD_ADDR_VAR 0 56
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 3
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62443: LD_ADDR_VAR 0 57
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 3
62461: NEG
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: LIST
62486: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62487: LD_ADDR_VAR 0 58
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62533: LD_ADDR_VAR 0 59
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62577: LD_ADDR_VAR 0 60
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62618: LD_ADDR_VAR 0 61
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62658: LD_ADDR_VAR 0 62
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 2
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62699: LD_ADDR_VAR 0 63
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: NEG
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62743: LD_ADDR_VAR 0 64
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: LD_INT 2
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// end ; 2 :
62789: GO 66055
62791: LD_INT 2
62793: DOUBLE
62794: EQUAL
62795: IFTRUE 62799
62797: GO 66054
62799: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62800: LD_ADDR_VAR 0 29
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 4
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 5
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 5
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 4
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 5
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 3
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 4
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 4
62930: PUSH
62931: LD_INT 4
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: LD_INT 4
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 4
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: LD_INT 4
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 3
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: LD_INT 4
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: LD_INT 5
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 5
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 5
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: NEG
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 3
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 4
63139: NEG
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 4
63162: NEG
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: NEG
63186: PUSH
63187: LD_INT 4
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 4
63197: NEG
63198: PUSH
63199: LD_INT 5
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 4
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 3
63221: NEG
63222: PUSH
63223: LD_INT 3
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 4
63233: NEG
63234: PUSH
63235: LD_INT 3
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 5
63245: NEG
63246: PUSH
63247: LD_INT 4
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 5
63257: NEG
63258: PUSH
63259: LD_INT 5
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 3
63269: NEG
63270: PUSH
63271: LD_INT 5
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 5
63281: NEG
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63338: LD_ADDR_VAR 0 30
63342: PUSH
63343: LD_INT 4
63345: PUSH
63346: LD_INT 4
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 4
63355: PUSH
63356: LD_INT 3
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 5
63365: PUSH
63366: LD_INT 4
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 5
63375: PUSH
63376: LD_INT 5
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 4
63385: PUSH
63386: LD_INT 5
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 3
63395: PUSH
63396: LD_INT 4
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 3
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 5
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 3
63425: PUSH
63426: LD_INT 5
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: LD_INT 4
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 4
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: LD_INT 4
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 4
63528: NEG
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 4
63539: NEG
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 3
63551: NEG
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 3
63562: NEG
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: NEG
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 5
63584: NEG
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 5
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 5
63607: NEG
63608: PUSH
63609: LD_INT 2
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 3
63630: NEG
63631: PUSH
63632: LD_INT 3
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 3
63642: NEG
63643: PUSH
63644: LD_INT 4
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 4
63690: NEG
63691: PUSH
63692: LD_INT 3
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 4
63702: NEG
63703: PUSH
63704: LD_INT 4
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: LD_INT 4
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 4
63726: NEG
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 4
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: LD_INT 5
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: LD_INT 4
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 3
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 3
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 4
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: LD_INT 5
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 3
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: LD_INT 5
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63885: LD_ADDR_VAR 0 31
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 4
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: LD_INT 4
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 5
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: LD_INT 5
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 4
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: LD_INT 3
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: LD_INT 5
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 3
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 3
63996: NEG
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: NEG
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 3
64030: NEG
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 4
64041: NEG
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 4
64064: NEG
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: LD_INT 4
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 4
64099: NEG
64100: PUSH
64101: LD_INT 5
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: LD_INT 4
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: NEG
64124: PUSH
64125: LD_INT 3
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 4
64135: NEG
64136: PUSH
64137: LD_INT 3
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 5
64147: NEG
64148: PUSH
64149: LD_INT 4
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 5
64159: NEG
64160: PUSH
64161: LD_INT 5
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 3
64171: NEG
64172: PUSH
64173: LD_INT 5
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 5
64183: NEG
64184: PUSH
64185: LD_INT 3
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: LD_INT 3
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 4
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 3
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: LD_INT 2
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: LD_INT 3
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 1
64262: NEG
64263: PUSH
64264: LD_INT 4
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: LD_INT 2
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 2
64285: NEG
64286: PUSH
64287: LD_INT 4
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 4
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 4
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 5
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 5
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 4
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 3
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 5
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64435: LD_ADDR_VAR 0 32
64439: PUSH
64440: LD_INT 4
64442: NEG
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 4
64453: NEG
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 3
64465: NEG
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 3
64476: NEG
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 4
64487: NEG
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 5
64498: NEG
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 5
64509: NEG
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 5
64521: NEG
64522: PUSH
64523: LD_INT 2
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: NEG
64557: PUSH
64558: LD_INT 4
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: LD_INT 3
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 3
64592: NEG
64593: PUSH
64594: LD_INT 2
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 4
64604: NEG
64605: PUSH
64606: LD_INT 3
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 4
64616: NEG
64617: PUSH
64618: LD_INT 4
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: NEG
64629: PUSH
64630: LD_INT 4
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 4
64640: NEG
64641: PUSH
64642: LD_INT 2
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 4
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: LD_INT 5
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: LD_INT 4
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: LD_INT 3
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: LD_INT 3
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 4
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 5
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 2
64742: NEG
64743: PUSH
64744: LD_INT 5
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 3
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 4
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 4
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 4
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 4
64847: PUSH
64848: LD_INT 4
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 4
64857: PUSH
64858: LD_INT 3
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 5
64867: PUSH
64868: LD_INT 4
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 5
64877: PUSH
64878: LD_INT 5
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 4
64887: PUSH
64888: LD_INT 5
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: PUSH
64898: LD_INT 4
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 3
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 5
64917: PUSH
64918: LD_INT 3
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: LD_INT 5
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64982: LD_ADDR_VAR 0 33
64986: PUSH
64987: LD_INT 4
64989: NEG
64990: PUSH
64991: LD_INT 4
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 4
65001: NEG
65002: PUSH
65003: LD_INT 5
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: LD_INT 4
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: LD_INT 3
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 4
65037: NEG
65038: PUSH
65039: LD_INT 3
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 5
65049: NEG
65050: PUSH
65051: LD_INT 4
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 5
65061: NEG
65062: PUSH
65063: LD_INT 5
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 3
65073: NEG
65074: PUSH
65075: LD_INT 5
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 5
65085: NEG
65086: PUSH
65087: LD_INT 3
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: LD_INT 3
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 4
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 2
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: LD_INT 4
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 2
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: LD_INT 4
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 4
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 5
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 5
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 4
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 3
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 5
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 3
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 3
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 4
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 4
65322: PUSH
65323: LD_INT 4
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 3
65332: PUSH
65333: LD_INT 4
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 3
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 4
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: LD_INT 4
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 4
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 4
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: LD_INT 5
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: LD_INT 5
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: LD_INT 4
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: LD_INT 3
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 2
65454: PUSH
65455: LD_INT 5
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 2
65464: NEG
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65520: LD_ADDR_VAR 0 34
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: LD_INT 5
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 4
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: LD_INT 3
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: LD_INT 3
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 4
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: LD_INT 5
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: NEG
65618: PUSH
65619: LD_INT 5
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 4
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 4
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: LD_INT 1
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: LD_INT 2
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 4
65722: PUSH
65723: LD_INT 4
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 4
65732: PUSH
65733: LD_INT 3
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 5
65742: PUSH
65743: LD_INT 4
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 5
65752: PUSH
65753: LD_INT 5
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 4
65762: PUSH
65763: LD_INT 5
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: LD_INT 4
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: LD_INT 3
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 5
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: LD_INT 5
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 3
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 2
65884: PUSH
65885: LD_INT 4
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 2
65894: NEG
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 4
65905: NEG
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 4
65916: NEG
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 3
65928: NEG
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: NEG
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 4
65950: NEG
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 5
65961: NEG
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 5
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 5
65984: NEG
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 3
65996: NEG
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: ST_TO_ADDR
// end ; end ;
66052: GO 66055
66054: POP
// case btype of b_depot , b_warehouse :
66055: LD_VAR 0 1
66059: PUSH
66060: LD_INT 0
66062: DOUBLE
66063: EQUAL
66064: IFTRUE 66074
66066: LD_INT 1
66068: DOUBLE
66069: EQUAL
66070: IFTRUE 66074
66072: GO 66275
66074: POP
// case nation of nation_american :
66075: LD_VAR 0 5
66079: PUSH
66080: LD_INT 1
66082: DOUBLE
66083: EQUAL
66084: IFTRUE 66088
66086: GO 66144
66088: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66089: LD_ADDR_VAR 0 9
66093: PUSH
66094: LD_VAR 0 11
66098: PUSH
66099: LD_VAR 0 12
66103: PUSH
66104: LD_VAR 0 13
66108: PUSH
66109: LD_VAR 0 14
66113: PUSH
66114: LD_VAR 0 15
66118: PUSH
66119: LD_VAR 0 16
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: PUSH
66132: LD_VAR 0 4
66136: PUSH
66137: LD_INT 1
66139: PLUS
66140: ARRAY
66141: ST_TO_ADDR
66142: GO 66273
66144: LD_INT 2
66146: DOUBLE
66147: EQUAL
66148: IFTRUE 66152
66150: GO 66208
66152: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66153: LD_ADDR_VAR 0 9
66157: PUSH
66158: LD_VAR 0 17
66162: PUSH
66163: LD_VAR 0 18
66167: PUSH
66168: LD_VAR 0 19
66172: PUSH
66173: LD_VAR 0 20
66177: PUSH
66178: LD_VAR 0 21
66182: PUSH
66183: LD_VAR 0 22
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: PUSH
66196: LD_VAR 0 4
66200: PUSH
66201: LD_INT 1
66203: PLUS
66204: ARRAY
66205: ST_TO_ADDR
66206: GO 66273
66208: LD_INT 3
66210: DOUBLE
66211: EQUAL
66212: IFTRUE 66216
66214: GO 66272
66216: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66217: LD_ADDR_VAR 0 9
66221: PUSH
66222: LD_VAR 0 23
66226: PUSH
66227: LD_VAR 0 24
66231: PUSH
66232: LD_VAR 0 25
66236: PUSH
66237: LD_VAR 0 26
66241: PUSH
66242: LD_VAR 0 27
66246: PUSH
66247: LD_VAR 0 28
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: PUSH
66260: LD_VAR 0 4
66264: PUSH
66265: LD_INT 1
66267: PLUS
66268: ARRAY
66269: ST_TO_ADDR
66270: GO 66273
66272: POP
66273: GO 66828
66275: LD_INT 2
66277: DOUBLE
66278: EQUAL
66279: IFTRUE 66289
66281: LD_INT 3
66283: DOUBLE
66284: EQUAL
66285: IFTRUE 66289
66287: GO 66345
66289: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66290: LD_ADDR_VAR 0 9
66294: PUSH
66295: LD_VAR 0 29
66299: PUSH
66300: LD_VAR 0 30
66304: PUSH
66305: LD_VAR 0 31
66309: PUSH
66310: LD_VAR 0 32
66314: PUSH
66315: LD_VAR 0 33
66319: PUSH
66320: LD_VAR 0 34
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: PUSH
66333: LD_VAR 0 4
66337: PUSH
66338: LD_INT 1
66340: PLUS
66341: ARRAY
66342: ST_TO_ADDR
66343: GO 66828
66345: LD_INT 16
66347: DOUBLE
66348: EQUAL
66349: IFTRUE 66407
66351: LD_INT 17
66353: DOUBLE
66354: EQUAL
66355: IFTRUE 66407
66357: LD_INT 18
66359: DOUBLE
66360: EQUAL
66361: IFTRUE 66407
66363: LD_INT 19
66365: DOUBLE
66366: EQUAL
66367: IFTRUE 66407
66369: LD_INT 22
66371: DOUBLE
66372: EQUAL
66373: IFTRUE 66407
66375: LD_INT 20
66377: DOUBLE
66378: EQUAL
66379: IFTRUE 66407
66381: LD_INT 21
66383: DOUBLE
66384: EQUAL
66385: IFTRUE 66407
66387: LD_INT 23
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66407
66393: LD_INT 24
66395: DOUBLE
66396: EQUAL
66397: IFTRUE 66407
66399: LD_INT 25
66401: DOUBLE
66402: EQUAL
66403: IFTRUE 66407
66405: GO 66463
66407: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66408: LD_ADDR_VAR 0 9
66412: PUSH
66413: LD_VAR 0 35
66417: PUSH
66418: LD_VAR 0 36
66422: PUSH
66423: LD_VAR 0 37
66427: PUSH
66428: LD_VAR 0 38
66432: PUSH
66433: LD_VAR 0 39
66437: PUSH
66438: LD_VAR 0 40
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: PUSH
66451: LD_VAR 0 4
66455: PUSH
66456: LD_INT 1
66458: PLUS
66459: ARRAY
66460: ST_TO_ADDR
66461: GO 66828
66463: LD_INT 6
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66519
66469: LD_INT 7
66471: DOUBLE
66472: EQUAL
66473: IFTRUE 66519
66475: LD_INT 8
66477: DOUBLE
66478: EQUAL
66479: IFTRUE 66519
66481: LD_INT 13
66483: DOUBLE
66484: EQUAL
66485: IFTRUE 66519
66487: LD_INT 12
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66519
66493: LD_INT 15
66495: DOUBLE
66496: EQUAL
66497: IFTRUE 66519
66499: LD_INT 11
66501: DOUBLE
66502: EQUAL
66503: IFTRUE 66519
66505: LD_INT 14
66507: DOUBLE
66508: EQUAL
66509: IFTRUE 66519
66511: LD_INT 10
66513: DOUBLE
66514: EQUAL
66515: IFTRUE 66519
66517: GO 66575
66519: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66520: LD_ADDR_VAR 0 9
66524: PUSH
66525: LD_VAR 0 41
66529: PUSH
66530: LD_VAR 0 42
66534: PUSH
66535: LD_VAR 0 43
66539: PUSH
66540: LD_VAR 0 44
66544: PUSH
66545: LD_VAR 0 45
66549: PUSH
66550: LD_VAR 0 46
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: PUSH
66563: LD_VAR 0 4
66567: PUSH
66568: LD_INT 1
66570: PLUS
66571: ARRAY
66572: ST_TO_ADDR
66573: GO 66828
66575: LD_INT 36
66577: DOUBLE
66578: EQUAL
66579: IFTRUE 66583
66581: GO 66639
66583: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66584: LD_ADDR_VAR 0 9
66588: PUSH
66589: LD_VAR 0 47
66593: PUSH
66594: LD_VAR 0 48
66598: PUSH
66599: LD_VAR 0 49
66603: PUSH
66604: LD_VAR 0 50
66608: PUSH
66609: LD_VAR 0 51
66613: PUSH
66614: LD_VAR 0 52
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: PUSH
66627: LD_VAR 0 4
66631: PUSH
66632: LD_INT 1
66634: PLUS
66635: ARRAY
66636: ST_TO_ADDR
66637: GO 66828
66639: LD_INT 4
66641: DOUBLE
66642: EQUAL
66643: IFTRUE 66665
66645: LD_INT 5
66647: DOUBLE
66648: EQUAL
66649: IFTRUE 66665
66651: LD_INT 34
66653: DOUBLE
66654: EQUAL
66655: IFTRUE 66665
66657: LD_INT 37
66659: DOUBLE
66660: EQUAL
66661: IFTRUE 66665
66663: GO 66721
66665: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66666: LD_ADDR_VAR 0 9
66670: PUSH
66671: LD_VAR 0 53
66675: PUSH
66676: LD_VAR 0 54
66680: PUSH
66681: LD_VAR 0 55
66685: PUSH
66686: LD_VAR 0 56
66690: PUSH
66691: LD_VAR 0 57
66695: PUSH
66696: LD_VAR 0 58
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: PUSH
66709: LD_VAR 0 4
66713: PUSH
66714: LD_INT 1
66716: PLUS
66717: ARRAY
66718: ST_TO_ADDR
66719: GO 66828
66721: LD_INT 31
66723: DOUBLE
66724: EQUAL
66725: IFTRUE 66771
66727: LD_INT 32
66729: DOUBLE
66730: EQUAL
66731: IFTRUE 66771
66733: LD_INT 33
66735: DOUBLE
66736: EQUAL
66737: IFTRUE 66771
66739: LD_INT 27
66741: DOUBLE
66742: EQUAL
66743: IFTRUE 66771
66745: LD_INT 26
66747: DOUBLE
66748: EQUAL
66749: IFTRUE 66771
66751: LD_INT 28
66753: DOUBLE
66754: EQUAL
66755: IFTRUE 66771
66757: LD_INT 29
66759: DOUBLE
66760: EQUAL
66761: IFTRUE 66771
66763: LD_INT 30
66765: DOUBLE
66766: EQUAL
66767: IFTRUE 66771
66769: GO 66827
66771: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66772: LD_ADDR_VAR 0 9
66776: PUSH
66777: LD_VAR 0 59
66781: PUSH
66782: LD_VAR 0 60
66786: PUSH
66787: LD_VAR 0 61
66791: PUSH
66792: LD_VAR 0 62
66796: PUSH
66797: LD_VAR 0 63
66801: PUSH
66802: LD_VAR 0 64
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: PUSH
66815: LD_VAR 0 4
66819: PUSH
66820: LD_INT 1
66822: PLUS
66823: ARRAY
66824: ST_TO_ADDR
66825: GO 66828
66827: POP
// temp_list2 = [ ] ;
66828: LD_ADDR_VAR 0 10
66832: PUSH
66833: EMPTY
66834: ST_TO_ADDR
// for i in temp_list do
66835: LD_ADDR_VAR 0 8
66839: PUSH
66840: LD_VAR 0 9
66844: PUSH
66845: FOR_IN
66846: IFFALSE 66898
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66848: LD_ADDR_VAR 0 10
66852: PUSH
66853: LD_VAR 0 10
66857: PUSH
66858: LD_VAR 0 8
66862: PUSH
66863: LD_INT 1
66865: ARRAY
66866: PUSH
66867: LD_VAR 0 2
66871: PLUS
66872: PUSH
66873: LD_VAR 0 8
66877: PUSH
66878: LD_INT 2
66880: ARRAY
66881: PUSH
66882: LD_VAR 0 3
66886: PLUS
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: EMPTY
66893: LIST
66894: ADD
66895: ST_TO_ADDR
66896: GO 66845
66898: POP
66899: POP
// result = temp_list2 ;
66900: LD_ADDR_VAR 0 7
66904: PUSH
66905: LD_VAR 0 10
66909: ST_TO_ADDR
// end ;
66910: LD_VAR 0 7
66914: RET
// export function EnemyInRange ( unit , dist ) ; begin
66915: LD_INT 0
66917: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66918: LD_ADDR_VAR 0 3
66922: PUSH
66923: LD_VAR 0 1
66927: PPUSH
66928: CALL_OW 255
66932: PPUSH
66933: LD_VAR 0 1
66937: PPUSH
66938: CALL_OW 250
66942: PPUSH
66943: LD_VAR 0 1
66947: PPUSH
66948: CALL_OW 251
66952: PPUSH
66953: LD_VAR 0 2
66957: PPUSH
66958: CALL 40317 0 4
66962: PUSH
66963: LD_INT 4
66965: ARRAY
66966: ST_TO_ADDR
// end ;
66967: LD_VAR 0 3
66971: RET
// export function PlayerSeeMe ( unit ) ; begin
66972: LD_INT 0
66974: PPUSH
// result := See ( your_side , unit ) ;
66975: LD_ADDR_VAR 0 2
66979: PUSH
66980: LD_OWVAR 2
66984: PPUSH
66985: LD_VAR 0 1
66989: PPUSH
66990: CALL_OW 292
66994: ST_TO_ADDR
// end ;
66995: LD_VAR 0 2
66999: RET
// export function ReverseDir ( unit ) ; begin
67000: LD_INT 0
67002: PPUSH
// if not unit then
67003: LD_VAR 0 1
67007: NOT
67008: IFFALSE 67012
// exit ;
67010: GO 67035
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67012: LD_ADDR_VAR 0 2
67016: PUSH
67017: LD_VAR 0 1
67021: PPUSH
67022: CALL_OW 254
67026: PUSH
67027: LD_INT 3
67029: PLUS
67030: PUSH
67031: LD_INT 6
67033: MOD
67034: ST_TO_ADDR
// end ;
67035: LD_VAR 0 2
67039: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67040: LD_INT 0
67042: PPUSH
67043: PPUSH
67044: PPUSH
67045: PPUSH
67046: PPUSH
67047: PPUSH
// if not unit or not hexes then
67048: LD_VAR 0 1
67052: NOT
67053: PUSH
67054: LD_VAR 0 2
67058: NOT
67059: OR
67060: IFFALSE 67064
// exit ;
67062: GO 67187
// dist := 9999 ;
67064: LD_ADDR_VAR 0 5
67068: PUSH
67069: LD_INT 9999
67071: ST_TO_ADDR
// for i = 1 to hexes do
67072: LD_ADDR_VAR 0 4
67076: PUSH
67077: DOUBLE
67078: LD_INT 1
67080: DEC
67081: ST_TO_ADDR
67082: LD_VAR 0 2
67086: PUSH
67087: FOR_TO
67088: IFFALSE 67175
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67090: LD_ADDR_VAR 0 6
67094: PUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: LD_VAR 0 2
67104: PUSH
67105: LD_VAR 0 4
67109: ARRAY
67110: PUSH
67111: LD_INT 1
67113: ARRAY
67114: PPUSH
67115: LD_VAR 0 2
67119: PUSH
67120: LD_VAR 0 4
67124: ARRAY
67125: PUSH
67126: LD_INT 2
67128: ARRAY
67129: PPUSH
67130: CALL_OW 297
67134: ST_TO_ADDR
// if tdist < dist then
67135: LD_VAR 0 6
67139: PUSH
67140: LD_VAR 0 5
67144: LESS
67145: IFFALSE 67173
// begin hex := hexes [ i ] ;
67147: LD_ADDR_VAR 0 8
67151: PUSH
67152: LD_VAR 0 2
67156: PUSH
67157: LD_VAR 0 4
67161: ARRAY
67162: ST_TO_ADDR
// dist := tdist ;
67163: LD_ADDR_VAR 0 5
67167: PUSH
67168: LD_VAR 0 6
67172: ST_TO_ADDR
// end ; end ;
67173: GO 67087
67175: POP
67176: POP
// result := hex ;
67177: LD_ADDR_VAR 0 3
67181: PUSH
67182: LD_VAR 0 8
67186: ST_TO_ADDR
// end ;
67187: LD_VAR 0 3
67191: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67192: LD_INT 0
67194: PPUSH
67195: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67196: LD_VAR 0 1
67200: NOT
67201: PUSH
67202: LD_VAR 0 1
67206: PUSH
67207: LD_INT 21
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 23
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PPUSH
67231: CALL_OW 69
67235: IN
67236: NOT
67237: OR
67238: IFFALSE 67242
// exit ;
67240: GO 67289
// for i = 1 to 3 do
67242: LD_ADDR_VAR 0 3
67246: PUSH
67247: DOUBLE
67248: LD_INT 1
67250: DEC
67251: ST_TO_ADDR
67252: LD_INT 3
67254: PUSH
67255: FOR_TO
67256: IFFALSE 67287
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67258: LD_VAR 0 1
67262: PPUSH
67263: CALL_OW 250
67267: PPUSH
67268: LD_VAR 0 1
67272: PPUSH
67273: CALL_OW 251
67277: PPUSH
67278: LD_INT 1
67280: PPUSH
67281: CALL_OW 453
67285: GO 67255
67287: POP
67288: POP
// end ;
67289: LD_VAR 0 2
67293: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67294: LD_INT 0
67296: PPUSH
67297: PPUSH
67298: PPUSH
67299: PPUSH
67300: PPUSH
67301: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67302: LD_VAR 0 1
67306: NOT
67307: PUSH
67308: LD_VAR 0 2
67312: NOT
67313: OR
67314: PUSH
67315: LD_VAR 0 1
67319: PPUSH
67320: CALL_OW 314
67324: OR
67325: IFFALSE 67329
// exit ;
67327: GO 67770
// x := GetX ( enemy_unit ) ;
67329: LD_ADDR_VAR 0 7
67333: PUSH
67334: LD_VAR 0 2
67338: PPUSH
67339: CALL_OW 250
67343: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67344: LD_ADDR_VAR 0 8
67348: PUSH
67349: LD_VAR 0 2
67353: PPUSH
67354: CALL_OW 251
67358: ST_TO_ADDR
// if not x or not y then
67359: LD_VAR 0 7
67363: NOT
67364: PUSH
67365: LD_VAR 0 8
67369: NOT
67370: OR
67371: IFFALSE 67375
// exit ;
67373: GO 67770
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67375: LD_ADDR_VAR 0 6
67379: PUSH
67380: LD_VAR 0 7
67384: PPUSH
67385: LD_INT 0
67387: PPUSH
67388: LD_INT 4
67390: PPUSH
67391: CALL_OW 272
67395: PUSH
67396: LD_VAR 0 8
67400: PPUSH
67401: LD_INT 0
67403: PPUSH
67404: LD_INT 4
67406: PPUSH
67407: CALL_OW 273
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_VAR 0 7
67420: PPUSH
67421: LD_INT 1
67423: PPUSH
67424: LD_INT 4
67426: PPUSH
67427: CALL_OW 272
67431: PUSH
67432: LD_VAR 0 8
67436: PPUSH
67437: LD_INT 1
67439: PPUSH
67440: LD_INT 4
67442: PPUSH
67443: CALL_OW 273
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_VAR 0 7
67456: PPUSH
67457: LD_INT 2
67459: PPUSH
67460: LD_INT 4
67462: PPUSH
67463: CALL_OW 272
67467: PUSH
67468: LD_VAR 0 8
67472: PPUSH
67473: LD_INT 2
67475: PPUSH
67476: LD_INT 4
67478: PPUSH
67479: CALL_OW 273
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_VAR 0 7
67492: PPUSH
67493: LD_INT 3
67495: PPUSH
67496: LD_INT 4
67498: PPUSH
67499: CALL_OW 272
67503: PUSH
67504: LD_VAR 0 8
67508: PPUSH
67509: LD_INT 3
67511: PPUSH
67512: LD_INT 4
67514: PPUSH
67515: CALL_OW 273
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_VAR 0 7
67528: PPUSH
67529: LD_INT 4
67531: PPUSH
67532: LD_INT 4
67534: PPUSH
67535: CALL_OW 272
67539: PUSH
67540: LD_VAR 0 8
67544: PPUSH
67545: LD_INT 4
67547: PPUSH
67548: LD_INT 4
67550: PPUSH
67551: CALL_OW 273
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_VAR 0 7
67564: PPUSH
67565: LD_INT 5
67567: PPUSH
67568: LD_INT 4
67570: PPUSH
67571: CALL_OW 272
67575: PUSH
67576: LD_VAR 0 8
67580: PPUSH
67581: LD_INT 5
67583: PPUSH
67584: LD_INT 4
67586: PPUSH
67587: CALL_OW 273
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: ST_TO_ADDR
// for i = tmp downto 1 do
67604: LD_ADDR_VAR 0 4
67608: PUSH
67609: DOUBLE
67610: LD_VAR 0 6
67614: INC
67615: ST_TO_ADDR
67616: LD_INT 1
67618: PUSH
67619: FOR_DOWNTO
67620: IFFALSE 67721
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67622: LD_VAR 0 6
67626: PUSH
67627: LD_VAR 0 4
67631: ARRAY
67632: PUSH
67633: LD_INT 1
67635: ARRAY
67636: PPUSH
67637: LD_VAR 0 6
67641: PUSH
67642: LD_VAR 0 4
67646: ARRAY
67647: PUSH
67648: LD_INT 2
67650: ARRAY
67651: PPUSH
67652: CALL_OW 488
67656: NOT
67657: PUSH
67658: LD_VAR 0 6
67662: PUSH
67663: LD_VAR 0 4
67667: ARRAY
67668: PUSH
67669: LD_INT 1
67671: ARRAY
67672: PPUSH
67673: LD_VAR 0 6
67677: PUSH
67678: LD_VAR 0 4
67682: ARRAY
67683: PUSH
67684: LD_INT 2
67686: ARRAY
67687: PPUSH
67688: CALL_OW 428
67692: PUSH
67693: LD_INT 0
67695: NONEQUAL
67696: OR
67697: IFFALSE 67719
// tmp := Delete ( tmp , i ) ;
67699: LD_ADDR_VAR 0 6
67703: PUSH
67704: LD_VAR 0 6
67708: PPUSH
67709: LD_VAR 0 4
67713: PPUSH
67714: CALL_OW 3
67718: ST_TO_ADDR
67719: GO 67619
67721: POP
67722: POP
// j := GetClosestHex ( unit , tmp ) ;
67723: LD_ADDR_VAR 0 5
67727: PUSH
67728: LD_VAR 0 1
67732: PPUSH
67733: LD_VAR 0 6
67737: PPUSH
67738: CALL 67040 0 2
67742: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67743: LD_VAR 0 1
67747: PPUSH
67748: LD_VAR 0 5
67752: PUSH
67753: LD_INT 1
67755: ARRAY
67756: PPUSH
67757: LD_VAR 0 5
67761: PUSH
67762: LD_INT 2
67764: ARRAY
67765: PPUSH
67766: CALL_OW 111
// end ;
67770: LD_VAR 0 3
67774: RET
// export function PrepareApemanSoldier ( ) ; begin
67775: LD_INT 0
67777: PPUSH
// uc_nation := 0 ;
67778: LD_ADDR_OWVAR 21
67782: PUSH
67783: LD_INT 0
67785: ST_TO_ADDR
// hc_sex := sex_male ;
67786: LD_ADDR_OWVAR 27
67790: PUSH
67791: LD_INT 1
67793: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67794: LD_ADDR_OWVAR 28
67798: PUSH
67799: LD_INT 15
67801: ST_TO_ADDR
// hc_gallery :=  ;
67802: LD_ADDR_OWVAR 33
67806: PUSH
67807: LD_STRING 
67809: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67810: LD_ADDR_OWVAR 31
67814: PUSH
67815: LD_INT 0
67817: PPUSH
67818: LD_INT 3
67820: PPUSH
67821: CALL_OW 12
67825: PUSH
67826: LD_INT 0
67828: PPUSH
67829: LD_INT 3
67831: PPUSH
67832: CALL_OW 12
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: ST_TO_ADDR
// end ;
67849: LD_VAR 0 1
67853: RET
// export function PrepareApemanEngineer ( ) ; begin
67854: LD_INT 0
67856: PPUSH
// uc_nation := 0 ;
67857: LD_ADDR_OWVAR 21
67861: PUSH
67862: LD_INT 0
67864: ST_TO_ADDR
// hc_sex := sex_male ;
67865: LD_ADDR_OWVAR 27
67869: PUSH
67870: LD_INT 1
67872: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67873: LD_ADDR_OWVAR 28
67877: PUSH
67878: LD_INT 16
67880: ST_TO_ADDR
// hc_gallery :=  ;
67881: LD_ADDR_OWVAR 33
67885: PUSH
67886: LD_STRING 
67888: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67889: LD_ADDR_OWVAR 31
67893: PUSH
67894: LD_INT 0
67896: PPUSH
67897: LD_INT 3
67899: PPUSH
67900: CALL_OW 12
67904: PUSH
67905: LD_INT 0
67907: PPUSH
67908: LD_INT 3
67910: PPUSH
67911: CALL_OW 12
67915: PUSH
67916: LD_INT 0
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: ST_TO_ADDR
// end ;
67928: LD_VAR 0 1
67932: RET
// export function PrepareApeman ( agressivity ) ; begin
67933: LD_INT 0
67935: PPUSH
// uc_side := 0 ;
67936: LD_ADDR_OWVAR 20
67940: PUSH
67941: LD_INT 0
67943: ST_TO_ADDR
// uc_nation := 0 ;
67944: LD_ADDR_OWVAR 21
67948: PUSH
67949: LD_INT 0
67951: ST_TO_ADDR
// hc_sex := sex_male ;
67952: LD_ADDR_OWVAR 27
67956: PUSH
67957: LD_INT 1
67959: ST_TO_ADDR
// hc_class := class_apeman ;
67960: LD_ADDR_OWVAR 28
67964: PUSH
67965: LD_INT 12
67967: ST_TO_ADDR
// hc_gallery :=  ;
67968: LD_ADDR_OWVAR 33
67972: PUSH
67973: LD_STRING 
67975: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67976: LD_ADDR_OWVAR 35
67980: PUSH
67981: LD_VAR 0 1
67985: NEG
67986: PPUSH
67987: LD_VAR 0 1
67991: PPUSH
67992: CALL_OW 12
67996: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67997: LD_ADDR_OWVAR 31
68001: PUSH
68002: LD_INT 0
68004: PPUSH
68005: LD_INT 3
68007: PPUSH
68008: CALL_OW 12
68012: PUSH
68013: LD_INT 0
68015: PPUSH
68016: LD_INT 3
68018: PPUSH
68019: CALL_OW 12
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: ST_TO_ADDR
// end ;
68036: LD_VAR 0 2
68040: RET
// export function PrepareTiger ( agressivity ) ; begin
68041: LD_INT 0
68043: PPUSH
// uc_side := 0 ;
68044: LD_ADDR_OWVAR 20
68048: PUSH
68049: LD_INT 0
68051: ST_TO_ADDR
// uc_nation := 0 ;
68052: LD_ADDR_OWVAR 21
68056: PUSH
68057: LD_INT 0
68059: ST_TO_ADDR
// hc_class := class_tiger ;
68060: LD_ADDR_OWVAR 28
68064: PUSH
68065: LD_INT 14
68067: ST_TO_ADDR
// hc_gallery :=  ;
68068: LD_ADDR_OWVAR 33
68072: PUSH
68073: LD_STRING 
68075: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68076: LD_ADDR_OWVAR 35
68080: PUSH
68081: LD_VAR 0 1
68085: NEG
68086: PPUSH
68087: LD_VAR 0 1
68091: PPUSH
68092: CALL_OW 12
68096: ST_TO_ADDR
// end ;
68097: LD_VAR 0 2
68101: RET
// export function PrepareEnchidna ( ) ; begin
68102: LD_INT 0
68104: PPUSH
// uc_side := 0 ;
68105: LD_ADDR_OWVAR 20
68109: PUSH
68110: LD_INT 0
68112: ST_TO_ADDR
// uc_nation := 0 ;
68113: LD_ADDR_OWVAR 21
68117: PUSH
68118: LD_INT 0
68120: ST_TO_ADDR
// hc_class := class_baggie ;
68121: LD_ADDR_OWVAR 28
68125: PUSH
68126: LD_INT 13
68128: ST_TO_ADDR
// hc_gallery :=  ;
68129: LD_ADDR_OWVAR 33
68133: PUSH
68134: LD_STRING 
68136: ST_TO_ADDR
// end ;
68137: LD_VAR 0 1
68141: RET
// export function PrepareFrog ( ) ; begin
68142: LD_INT 0
68144: PPUSH
// uc_side := 0 ;
68145: LD_ADDR_OWVAR 20
68149: PUSH
68150: LD_INT 0
68152: ST_TO_ADDR
// uc_nation := 0 ;
68153: LD_ADDR_OWVAR 21
68157: PUSH
68158: LD_INT 0
68160: ST_TO_ADDR
// hc_class := class_frog ;
68161: LD_ADDR_OWVAR 28
68165: PUSH
68166: LD_INT 19
68168: ST_TO_ADDR
// hc_gallery :=  ;
68169: LD_ADDR_OWVAR 33
68173: PUSH
68174: LD_STRING 
68176: ST_TO_ADDR
// end ;
68177: LD_VAR 0 1
68181: RET
// export function PrepareFish ( ) ; begin
68182: LD_INT 0
68184: PPUSH
// uc_side := 0 ;
68185: LD_ADDR_OWVAR 20
68189: PUSH
68190: LD_INT 0
68192: ST_TO_ADDR
// uc_nation := 0 ;
68193: LD_ADDR_OWVAR 21
68197: PUSH
68198: LD_INT 0
68200: ST_TO_ADDR
// hc_class := class_fish ;
68201: LD_ADDR_OWVAR 28
68205: PUSH
68206: LD_INT 20
68208: ST_TO_ADDR
// hc_gallery :=  ;
68209: LD_ADDR_OWVAR 33
68213: PUSH
68214: LD_STRING 
68216: ST_TO_ADDR
// end ;
68217: LD_VAR 0 1
68221: RET
// export function PrepareBird ( ) ; begin
68222: LD_INT 0
68224: PPUSH
// uc_side := 0 ;
68225: LD_ADDR_OWVAR 20
68229: PUSH
68230: LD_INT 0
68232: ST_TO_ADDR
// uc_nation := 0 ;
68233: LD_ADDR_OWVAR 21
68237: PUSH
68238: LD_INT 0
68240: ST_TO_ADDR
// hc_class := class_phororhacos ;
68241: LD_ADDR_OWVAR 28
68245: PUSH
68246: LD_INT 18
68248: ST_TO_ADDR
// hc_gallery :=  ;
68249: LD_ADDR_OWVAR 33
68253: PUSH
68254: LD_STRING 
68256: ST_TO_ADDR
// end ;
68257: LD_VAR 0 1
68261: RET
// export function PrepareHorse ( ) ; begin
68262: LD_INT 0
68264: PPUSH
// uc_side := 0 ;
68265: LD_ADDR_OWVAR 20
68269: PUSH
68270: LD_INT 0
68272: ST_TO_ADDR
// uc_nation := 0 ;
68273: LD_ADDR_OWVAR 21
68277: PUSH
68278: LD_INT 0
68280: ST_TO_ADDR
// hc_class := class_horse ;
68281: LD_ADDR_OWVAR 28
68285: PUSH
68286: LD_INT 21
68288: ST_TO_ADDR
// hc_gallery :=  ;
68289: LD_ADDR_OWVAR 33
68293: PUSH
68294: LD_STRING 
68296: ST_TO_ADDR
// end ;
68297: LD_VAR 0 1
68301: RET
// export function PrepareMastodont ( ) ; begin
68302: LD_INT 0
68304: PPUSH
// uc_side := 0 ;
68305: LD_ADDR_OWVAR 20
68309: PUSH
68310: LD_INT 0
68312: ST_TO_ADDR
// uc_nation := 0 ;
68313: LD_ADDR_OWVAR 21
68317: PUSH
68318: LD_INT 0
68320: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68321: LD_ADDR_OWVAR 37
68325: PUSH
68326: LD_INT 31
68328: ST_TO_ADDR
// vc_control := control_rider ;
68329: LD_ADDR_OWVAR 38
68333: PUSH
68334: LD_INT 4
68336: ST_TO_ADDR
// end ;
68337: LD_VAR 0 1
68341: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68342: LD_INT 0
68344: PPUSH
68345: PPUSH
68346: PPUSH
// uc_side = 0 ;
68347: LD_ADDR_OWVAR 20
68351: PUSH
68352: LD_INT 0
68354: ST_TO_ADDR
// uc_nation = 0 ;
68355: LD_ADDR_OWVAR 21
68359: PUSH
68360: LD_INT 0
68362: ST_TO_ADDR
// InitHc_All ( ) ;
68363: CALL_OW 584
// InitVc ;
68367: CALL_OW 20
// if mastodonts then
68371: LD_VAR 0 6
68375: IFFALSE 68442
// for i = 1 to mastodonts do
68377: LD_ADDR_VAR 0 11
68381: PUSH
68382: DOUBLE
68383: LD_INT 1
68385: DEC
68386: ST_TO_ADDR
68387: LD_VAR 0 6
68391: PUSH
68392: FOR_TO
68393: IFFALSE 68440
// begin vc_chassis := 31 ;
68395: LD_ADDR_OWVAR 37
68399: PUSH
68400: LD_INT 31
68402: ST_TO_ADDR
// vc_control := control_rider ;
68403: LD_ADDR_OWVAR 38
68407: PUSH
68408: LD_INT 4
68410: ST_TO_ADDR
// animal := CreateVehicle ;
68411: LD_ADDR_VAR 0 12
68415: PUSH
68416: CALL_OW 45
68420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68421: LD_VAR 0 12
68425: PPUSH
68426: LD_VAR 0 8
68430: PPUSH
68431: LD_INT 0
68433: PPUSH
68434: CALL 70577 0 3
// end ;
68438: GO 68392
68440: POP
68441: POP
// if horses then
68442: LD_VAR 0 5
68446: IFFALSE 68513
// for i = 1 to horses do
68448: LD_ADDR_VAR 0 11
68452: PUSH
68453: DOUBLE
68454: LD_INT 1
68456: DEC
68457: ST_TO_ADDR
68458: LD_VAR 0 5
68462: PUSH
68463: FOR_TO
68464: IFFALSE 68511
// begin hc_class := 21 ;
68466: LD_ADDR_OWVAR 28
68470: PUSH
68471: LD_INT 21
68473: ST_TO_ADDR
// hc_gallery :=  ;
68474: LD_ADDR_OWVAR 33
68478: PUSH
68479: LD_STRING 
68481: ST_TO_ADDR
// animal := CreateHuman ;
68482: LD_ADDR_VAR 0 12
68486: PUSH
68487: CALL_OW 44
68491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68492: LD_VAR 0 12
68496: PPUSH
68497: LD_VAR 0 8
68501: PPUSH
68502: LD_INT 0
68504: PPUSH
68505: CALL 70577 0 3
// end ;
68509: GO 68463
68511: POP
68512: POP
// if birds then
68513: LD_VAR 0 1
68517: IFFALSE 68584
// for i = 1 to birds do
68519: LD_ADDR_VAR 0 11
68523: PUSH
68524: DOUBLE
68525: LD_INT 1
68527: DEC
68528: ST_TO_ADDR
68529: LD_VAR 0 1
68533: PUSH
68534: FOR_TO
68535: IFFALSE 68582
// begin hc_class = 18 ;
68537: LD_ADDR_OWVAR 28
68541: PUSH
68542: LD_INT 18
68544: ST_TO_ADDR
// hc_gallery =  ;
68545: LD_ADDR_OWVAR 33
68549: PUSH
68550: LD_STRING 
68552: ST_TO_ADDR
// animal := CreateHuman ;
68553: LD_ADDR_VAR 0 12
68557: PUSH
68558: CALL_OW 44
68562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68563: LD_VAR 0 12
68567: PPUSH
68568: LD_VAR 0 8
68572: PPUSH
68573: LD_INT 0
68575: PPUSH
68576: CALL 70577 0 3
// end ;
68580: GO 68534
68582: POP
68583: POP
// if tigers then
68584: LD_VAR 0 2
68588: IFFALSE 68672
// for i = 1 to tigers do
68590: LD_ADDR_VAR 0 11
68594: PUSH
68595: DOUBLE
68596: LD_INT 1
68598: DEC
68599: ST_TO_ADDR
68600: LD_VAR 0 2
68604: PUSH
68605: FOR_TO
68606: IFFALSE 68670
// begin hc_class = class_tiger ;
68608: LD_ADDR_OWVAR 28
68612: PUSH
68613: LD_INT 14
68615: ST_TO_ADDR
// hc_gallery =  ;
68616: LD_ADDR_OWVAR 33
68620: PUSH
68621: LD_STRING 
68623: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68624: LD_ADDR_OWVAR 35
68628: PUSH
68629: LD_INT 7
68631: NEG
68632: PPUSH
68633: LD_INT 7
68635: PPUSH
68636: CALL_OW 12
68640: ST_TO_ADDR
// animal := CreateHuman ;
68641: LD_ADDR_VAR 0 12
68645: PUSH
68646: CALL_OW 44
68650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68651: LD_VAR 0 12
68655: PPUSH
68656: LD_VAR 0 8
68660: PPUSH
68661: LD_INT 0
68663: PPUSH
68664: CALL 70577 0 3
// end ;
68668: GO 68605
68670: POP
68671: POP
// if apemans then
68672: LD_VAR 0 3
68676: IFFALSE 68799
// for i = 1 to apemans do
68678: LD_ADDR_VAR 0 11
68682: PUSH
68683: DOUBLE
68684: LD_INT 1
68686: DEC
68687: ST_TO_ADDR
68688: LD_VAR 0 3
68692: PUSH
68693: FOR_TO
68694: IFFALSE 68797
// begin hc_class = class_apeman ;
68696: LD_ADDR_OWVAR 28
68700: PUSH
68701: LD_INT 12
68703: ST_TO_ADDR
// hc_gallery =  ;
68704: LD_ADDR_OWVAR 33
68708: PUSH
68709: LD_STRING 
68711: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68712: LD_ADDR_OWVAR 35
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PPUSH
68721: LD_INT 2
68723: PPUSH
68724: CALL_OW 12
68728: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68729: LD_ADDR_OWVAR 31
68733: PUSH
68734: LD_INT 1
68736: PPUSH
68737: LD_INT 3
68739: PPUSH
68740: CALL_OW 12
68744: PUSH
68745: LD_INT 1
68747: PPUSH
68748: LD_INT 3
68750: PPUSH
68751: CALL_OW 12
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: ST_TO_ADDR
// animal := CreateHuman ;
68768: LD_ADDR_VAR 0 12
68772: PUSH
68773: CALL_OW 44
68777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68778: LD_VAR 0 12
68782: PPUSH
68783: LD_VAR 0 8
68787: PPUSH
68788: LD_INT 0
68790: PPUSH
68791: CALL 70577 0 3
// end ;
68795: GO 68693
68797: POP
68798: POP
// if enchidnas then
68799: LD_VAR 0 4
68803: IFFALSE 68870
// for i = 1 to enchidnas do
68805: LD_ADDR_VAR 0 11
68809: PUSH
68810: DOUBLE
68811: LD_INT 1
68813: DEC
68814: ST_TO_ADDR
68815: LD_VAR 0 4
68819: PUSH
68820: FOR_TO
68821: IFFALSE 68868
// begin hc_class = 13 ;
68823: LD_ADDR_OWVAR 28
68827: PUSH
68828: LD_INT 13
68830: ST_TO_ADDR
// hc_gallery =  ;
68831: LD_ADDR_OWVAR 33
68835: PUSH
68836: LD_STRING 
68838: ST_TO_ADDR
// animal := CreateHuman ;
68839: LD_ADDR_VAR 0 12
68843: PUSH
68844: CALL_OW 44
68848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68849: LD_VAR 0 12
68853: PPUSH
68854: LD_VAR 0 8
68858: PPUSH
68859: LD_INT 0
68861: PPUSH
68862: CALL 70577 0 3
// end ;
68866: GO 68820
68868: POP
68869: POP
// if fishes then
68870: LD_VAR 0 7
68874: IFFALSE 68941
// for i = 1 to fishes do
68876: LD_ADDR_VAR 0 11
68880: PUSH
68881: DOUBLE
68882: LD_INT 1
68884: DEC
68885: ST_TO_ADDR
68886: LD_VAR 0 7
68890: PUSH
68891: FOR_TO
68892: IFFALSE 68939
// begin hc_class = 20 ;
68894: LD_ADDR_OWVAR 28
68898: PUSH
68899: LD_INT 20
68901: ST_TO_ADDR
// hc_gallery =  ;
68902: LD_ADDR_OWVAR 33
68906: PUSH
68907: LD_STRING 
68909: ST_TO_ADDR
// animal := CreateHuman ;
68910: LD_ADDR_VAR 0 12
68914: PUSH
68915: CALL_OW 44
68919: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68920: LD_VAR 0 12
68924: PPUSH
68925: LD_VAR 0 9
68929: PPUSH
68930: LD_INT 0
68932: PPUSH
68933: CALL 70577 0 3
// end ;
68937: GO 68891
68939: POP
68940: POP
// end ;
68941: LD_VAR 0 10
68945: RET
// export function WantHeal ( sci , unit ) ; begin
68946: LD_INT 0
68948: PPUSH
// if GetTaskList ( sci ) > 0 then
68949: LD_VAR 0 1
68953: PPUSH
68954: CALL_OW 437
68958: PUSH
68959: LD_INT 0
68961: GREATER
68962: IFFALSE 69032
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68964: LD_VAR 0 1
68968: PPUSH
68969: CALL_OW 437
68973: PUSH
68974: LD_INT 1
68976: ARRAY
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: PUSH
68982: LD_STRING l
68984: EQUAL
68985: PUSH
68986: LD_VAR 0 1
68990: PPUSH
68991: CALL_OW 437
68995: PUSH
68996: LD_INT 1
68998: ARRAY
68999: PUSH
69000: LD_INT 4
69002: ARRAY
69003: PUSH
69004: LD_VAR 0 2
69008: EQUAL
69009: AND
69010: IFFALSE 69022
// result := true else
69012: LD_ADDR_VAR 0 3
69016: PUSH
69017: LD_INT 1
69019: ST_TO_ADDR
69020: GO 69030
// result := false ;
69022: LD_ADDR_VAR 0 3
69026: PUSH
69027: LD_INT 0
69029: ST_TO_ADDR
// end else
69030: GO 69040
// result := false ;
69032: LD_ADDR_VAR 0 3
69036: PUSH
69037: LD_INT 0
69039: ST_TO_ADDR
// end ;
69040: LD_VAR 0 3
69044: RET
// export function HealTarget ( sci ) ; begin
69045: LD_INT 0
69047: PPUSH
// if not sci then
69048: LD_VAR 0 1
69052: NOT
69053: IFFALSE 69057
// exit ;
69055: GO 69122
// result := 0 ;
69057: LD_ADDR_VAR 0 2
69061: PUSH
69062: LD_INT 0
69064: ST_TO_ADDR
// if GetTaskList ( sci ) then
69065: LD_VAR 0 1
69069: PPUSH
69070: CALL_OW 437
69074: IFFALSE 69122
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69076: LD_VAR 0 1
69080: PPUSH
69081: CALL_OW 437
69085: PUSH
69086: LD_INT 1
69088: ARRAY
69089: PUSH
69090: LD_INT 1
69092: ARRAY
69093: PUSH
69094: LD_STRING l
69096: EQUAL
69097: IFFALSE 69122
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69099: LD_ADDR_VAR 0 2
69103: PUSH
69104: LD_VAR 0 1
69108: PPUSH
69109: CALL_OW 437
69113: PUSH
69114: LD_INT 1
69116: ARRAY
69117: PUSH
69118: LD_INT 4
69120: ARRAY
69121: ST_TO_ADDR
// end ;
69122: LD_VAR 0 2
69126: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69127: LD_INT 0
69129: PPUSH
69130: PPUSH
69131: PPUSH
69132: PPUSH
// if not base_units then
69133: LD_VAR 0 1
69137: NOT
69138: IFFALSE 69142
// exit ;
69140: GO 69229
// result := false ;
69142: LD_ADDR_VAR 0 2
69146: PUSH
69147: LD_INT 0
69149: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69150: LD_ADDR_VAR 0 5
69154: PUSH
69155: LD_VAR 0 1
69159: PPUSH
69160: LD_INT 21
69162: PUSH
69163: LD_INT 3
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PPUSH
69170: CALL_OW 72
69174: ST_TO_ADDR
// if not tmp then
69175: LD_VAR 0 5
69179: NOT
69180: IFFALSE 69184
// exit ;
69182: GO 69229
// for i in tmp do
69184: LD_ADDR_VAR 0 3
69188: PUSH
69189: LD_VAR 0 5
69193: PUSH
69194: FOR_IN
69195: IFFALSE 69227
// begin result := EnemyInRange ( i , 22 ) ;
69197: LD_ADDR_VAR 0 2
69201: PUSH
69202: LD_VAR 0 3
69206: PPUSH
69207: LD_INT 22
69209: PPUSH
69210: CALL 66915 0 2
69214: ST_TO_ADDR
// if result then
69215: LD_VAR 0 2
69219: IFFALSE 69225
// exit ;
69221: POP
69222: POP
69223: GO 69229
// end ;
69225: GO 69194
69227: POP
69228: POP
// end ;
69229: LD_VAR 0 2
69233: RET
// export function FilterByTag ( units , tag ) ; begin
69234: LD_INT 0
69236: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69237: LD_ADDR_VAR 0 3
69241: PUSH
69242: LD_VAR 0 1
69246: PPUSH
69247: LD_INT 120
69249: PUSH
69250: LD_VAR 0 2
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PPUSH
69259: CALL_OW 72
69263: ST_TO_ADDR
// end ;
69264: LD_VAR 0 3
69268: RET
// export function IsDriver ( un ) ; begin
69269: LD_INT 0
69271: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69272: LD_ADDR_VAR 0 2
69276: PUSH
69277: LD_VAR 0 1
69281: PUSH
69282: LD_INT 55
69284: PUSH
69285: EMPTY
69286: LIST
69287: PPUSH
69288: CALL_OW 69
69292: IN
69293: ST_TO_ADDR
// end ;
69294: LD_VAR 0 2
69298: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69299: LD_INT 0
69301: PPUSH
69302: PPUSH
// list := [ ] ;
69303: LD_ADDR_VAR 0 5
69307: PUSH
69308: EMPTY
69309: ST_TO_ADDR
// case d of 0 :
69310: LD_VAR 0 3
69314: PUSH
69315: LD_INT 0
69317: DOUBLE
69318: EQUAL
69319: IFTRUE 69323
69321: GO 69456
69323: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69324: LD_ADDR_VAR 0 5
69328: PUSH
69329: LD_VAR 0 1
69333: PUSH
69334: LD_INT 4
69336: MINUS
69337: PUSH
69338: LD_VAR 0 2
69342: PUSH
69343: LD_INT 4
69345: MINUS
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: LIST
69354: PUSH
69355: LD_VAR 0 1
69359: PUSH
69360: LD_INT 3
69362: MINUS
69363: PUSH
69364: LD_VAR 0 2
69368: PUSH
69369: LD_INT 1
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: LIST
69376: PUSH
69377: LD_VAR 0 1
69381: PUSH
69382: LD_INT 4
69384: PLUS
69385: PUSH
69386: LD_VAR 0 2
69390: PUSH
69391: LD_INT 4
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: PUSH
69399: LD_VAR 0 1
69403: PUSH
69404: LD_INT 3
69406: PLUS
69407: PUSH
69408: LD_VAR 0 2
69412: PUSH
69413: LD_INT 3
69415: PLUS
69416: PUSH
69417: LD_INT 5
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: LIST
69424: PUSH
69425: LD_VAR 0 1
69429: PUSH
69430: LD_VAR 0 2
69434: PUSH
69435: LD_INT 4
69437: PLUS
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: LIST
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: ST_TO_ADDR
// end ; 1 :
69454: GO 70154
69456: LD_INT 1
69458: DOUBLE
69459: EQUAL
69460: IFTRUE 69464
69462: GO 69597
69464: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69465: LD_ADDR_VAR 0 5
69469: PUSH
69470: LD_VAR 0 1
69474: PUSH
69475: LD_VAR 0 2
69479: PUSH
69480: LD_INT 4
69482: MINUS
69483: PUSH
69484: LD_INT 3
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: LIST
69491: PUSH
69492: LD_VAR 0 1
69496: PUSH
69497: LD_INT 3
69499: MINUS
69500: PUSH
69501: LD_VAR 0 2
69505: PUSH
69506: LD_INT 3
69508: MINUS
69509: PUSH
69510: LD_INT 2
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: LIST
69517: PUSH
69518: LD_VAR 0 1
69522: PUSH
69523: LD_INT 4
69525: MINUS
69526: PUSH
69527: LD_VAR 0 2
69531: PUSH
69532: LD_INT 1
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: LIST
69539: PUSH
69540: LD_VAR 0 1
69544: PUSH
69545: LD_VAR 0 2
69549: PUSH
69550: LD_INT 3
69552: PLUS
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: PUSH
69562: LD_VAR 0 1
69566: PUSH
69567: LD_INT 4
69569: PLUS
69570: PUSH
69571: LD_VAR 0 2
69575: PUSH
69576: LD_INT 4
69578: PLUS
69579: PUSH
69580: LD_INT 5
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: LIST
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: ST_TO_ADDR
// end ; 2 :
69595: GO 70154
69597: LD_INT 2
69599: DOUBLE
69600: EQUAL
69601: IFTRUE 69605
69603: GO 69734
69605: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69606: LD_ADDR_VAR 0 5
69610: PUSH
69611: LD_VAR 0 1
69615: PUSH
69616: LD_VAR 0 2
69620: PUSH
69621: LD_INT 3
69623: MINUS
69624: PUSH
69625: LD_INT 3
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: LIST
69632: PUSH
69633: LD_VAR 0 1
69637: PUSH
69638: LD_INT 4
69640: PLUS
69641: PUSH
69642: LD_VAR 0 2
69646: PUSH
69647: LD_INT 4
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: PUSH
69655: LD_VAR 0 1
69659: PUSH
69660: LD_VAR 0 2
69664: PUSH
69665: LD_INT 4
69667: PLUS
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: LIST
69676: PUSH
69677: LD_VAR 0 1
69681: PUSH
69682: LD_INT 3
69684: MINUS
69685: PUSH
69686: LD_VAR 0 2
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: LIST
69698: PUSH
69699: LD_VAR 0 1
69703: PUSH
69704: LD_INT 4
69706: MINUS
69707: PUSH
69708: LD_VAR 0 2
69712: PUSH
69713: LD_INT 4
69715: MINUS
69716: PUSH
69717: LD_INT 2
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: ST_TO_ADDR
// end ; 3 :
69732: GO 70154
69734: LD_INT 3
69736: DOUBLE
69737: EQUAL
69738: IFTRUE 69742
69740: GO 69875
69742: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69743: LD_ADDR_VAR 0 5
69747: PUSH
69748: LD_VAR 0 1
69752: PUSH
69753: LD_INT 3
69755: PLUS
69756: PUSH
69757: LD_VAR 0 2
69761: PUSH
69762: LD_INT 4
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: LIST
69769: PUSH
69770: LD_VAR 0 1
69774: PUSH
69775: LD_INT 4
69777: PLUS
69778: PUSH
69779: LD_VAR 0 2
69783: PUSH
69784: LD_INT 4
69786: PLUS
69787: PUSH
69788: LD_INT 5
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: LIST
69795: PUSH
69796: LD_VAR 0 1
69800: PUSH
69801: LD_INT 4
69803: MINUS
69804: PUSH
69805: LD_VAR 0 2
69809: PUSH
69810: LD_INT 1
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: LIST
69817: PUSH
69818: LD_VAR 0 1
69822: PUSH
69823: LD_VAR 0 2
69827: PUSH
69828: LD_INT 4
69830: MINUS
69831: PUSH
69832: LD_INT 3
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: LIST
69839: PUSH
69840: LD_VAR 0 1
69844: PUSH
69845: LD_INT 3
69847: MINUS
69848: PUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 3
69856: MINUS
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: LIST
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: ST_TO_ADDR
// end ; 4 :
69873: GO 70154
69875: LD_INT 4
69877: DOUBLE
69878: EQUAL
69879: IFTRUE 69883
69881: GO 70016
69883: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69884: LD_ADDR_VAR 0 5
69888: PUSH
69889: LD_VAR 0 1
69893: PUSH
69894: LD_VAR 0 2
69898: PUSH
69899: LD_INT 4
69901: PLUS
69902: PUSH
69903: LD_INT 0
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: PUSH
69911: LD_VAR 0 1
69915: PUSH
69916: LD_INT 3
69918: PLUS
69919: PUSH
69920: LD_VAR 0 2
69924: PUSH
69925: LD_INT 3
69927: PLUS
69928: PUSH
69929: LD_INT 5
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: LIST
69936: PUSH
69937: LD_VAR 0 1
69941: PUSH
69942: LD_INT 4
69944: PLUS
69945: PUSH
69946: LD_VAR 0 2
69950: PUSH
69951: LD_INT 4
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: LIST
69958: PUSH
69959: LD_VAR 0 1
69963: PUSH
69964: LD_VAR 0 2
69968: PUSH
69969: LD_INT 3
69971: MINUS
69972: PUSH
69973: LD_INT 3
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: LIST
69980: PUSH
69981: LD_VAR 0 1
69985: PUSH
69986: LD_INT 4
69988: MINUS
69989: PUSH
69990: LD_VAR 0 2
69994: PUSH
69995: LD_INT 4
69997: MINUS
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: LIST
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: ST_TO_ADDR
// end ; 5 :
70014: GO 70154
70016: LD_INT 5
70018: DOUBLE
70019: EQUAL
70020: IFTRUE 70024
70022: GO 70153
70024: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70025: LD_ADDR_VAR 0 5
70029: PUSH
70030: LD_VAR 0 1
70034: PUSH
70035: LD_INT 4
70037: MINUS
70038: PUSH
70039: LD_VAR 0 2
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: LIST
70051: PUSH
70052: LD_VAR 0 1
70056: PUSH
70057: LD_VAR 0 2
70061: PUSH
70062: LD_INT 4
70064: MINUS
70065: PUSH
70066: LD_INT 3
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: LIST
70073: PUSH
70074: LD_VAR 0 1
70078: PUSH
70079: LD_INT 4
70081: PLUS
70082: PUSH
70083: LD_VAR 0 2
70087: PUSH
70088: LD_INT 4
70090: PLUS
70091: PUSH
70092: LD_INT 5
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: LIST
70099: PUSH
70100: LD_VAR 0 1
70104: PUSH
70105: LD_INT 3
70107: PLUS
70108: PUSH
70109: LD_VAR 0 2
70113: PUSH
70114: LD_INT 4
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: LIST
70121: PUSH
70122: LD_VAR 0 1
70126: PUSH
70127: LD_VAR 0 2
70131: PUSH
70132: LD_INT 3
70134: PLUS
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: ST_TO_ADDR
// end ; end ;
70151: GO 70154
70153: POP
// result := list ;
70154: LD_ADDR_VAR 0 4
70158: PUSH
70159: LD_VAR 0 5
70163: ST_TO_ADDR
// end ;
70164: LD_VAR 0 4
70168: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70169: LD_INT 0
70171: PPUSH
70172: PPUSH
70173: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70174: LD_VAR 0 1
70178: NOT
70179: PUSH
70180: LD_VAR 0 2
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: LD_INT 3
70193: PUSH
70194: LD_INT 4
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: IN
70203: NOT
70204: OR
70205: IFFALSE 70209
// exit ;
70207: GO 70301
// tmp := [ ] ;
70209: LD_ADDR_VAR 0 5
70213: PUSH
70214: EMPTY
70215: ST_TO_ADDR
// for i in units do
70216: LD_ADDR_VAR 0 4
70220: PUSH
70221: LD_VAR 0 1
70225: PUSH
70226: FOR_IN
70227: IFFALSE 70270
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70229: LD_ADDR_VAR 0 5
70233: PUSH
70234: LD_VAR 0 5
70238: PPUSH
70239: LD_VAR 0 5
70243: PUSH
70244: LD_INT 1
70246: PLUS
70247: PPUSH
70248: LD_VAR 0 4
70252: PPUSH
70253: LD_VAR 0 2
70257: PPUSH
70258: CALL_OW 259
70262: PPUSH
70263: CALL_OW 2
70267: ST_TO_ADDR
70268: GO 70226
70270: POP
70271: POP
// if not tmp then
70272: LD_VAR 0 5
70276: NOT
70277: IFFALSE 70281
// exit ;
70279: GO 70301
// result := SortListByListDesc ( units , tmp ) ;
70281: LD_ADDR_VAR 0 3
70285: PUSH
70286: LD_VAR 0 1
70290: PPUSH
70291: LD_VAR 0 5
70295: PPUSH
70296: CALL_OW 77
70300: ST_TO_ADDR
// end ;
70301: LD_VAR 0 3
70305: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70306: LD_INT 0
70308: PPUSH
70309: PPUSH
70310: PPUSH
// result := false ;
70311: LD_ADDR_VAR 0 3
70315: PUSH
70316: LD_INT 0
70318: ST_TO_ADDR
// x := GetX ( building ) ;
70319: LD_ADDR_VAR 0 4
70323: PUSH
70324: LD_VAR 0 2
70328: PPUSH
70329: CALL_OW 250
70333: ST_TO_ADDR
// y := GetY ( building ) ;
70334: LD_ADDR_VAR 0 5
70338: PUSH
70339: LD_VAR 0 2
70343: PPUSH
70344: CALL_OW 251
70348: ST_TO_ADDR
// if not building or not x or not y then
70349: LD_VAR 0 2
70353: NOT
70354: PUSH
70355: LD_VAR 0 4
70359: NOT
70360: OR
70361: PUSH
70362: LD_VAR 0 5
70366: NOT
70367: OR
70368: IFFALSE 70372
// exit ;
70370: GO 70464
// if GetTaskList ( unit ) then
70372: LD_VAR 0 1
70376: PPUSH
70377: CALL_OW 437
70381: IFFALSE 70464
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70383: LD_STRING e
70385: PUSH
70386: LD_VAR 0 1
70390: PPUSH
70391: CALL_OW 437
70395: PUSH
70396: LD_INT 1
70398: ARRAY
70399: PUSH
70400: LD_INT 1
70402: ARRAY
70403: EQUAL
70404: PUSH
70405: LD_VAR 0 4
70409: PUSH
70410: LD_VAR 0 1
70414: PPUSH
70415: CALL_OW 437
70419: PUSH
70420: LD_INT 1
70422: ARRAY
70423: PUSH
70424: LD_INT 2
70426: ARRAY
70427: EQUAL
70428: AND
70429: PUSH
70430: LD_VAR 0 5
70434: PUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: CALL_OW 437
70444: PUSH
70445: LD_INT 1
70447: ARRAY
70448: PUSH
70449: LD_INT 3
70451: ARRAY
70452: EQUAL
70453: AND
70454: IFFALSE 70464
// result := true end ;
70456: LD_ADDR_VAR 0 3
70460: PUSH
70461: LD_INT 1
70463: ST_TO_ADDR
// end ;
70464: LD_VAR 0 3
70468: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70469: LD_INT 0
70471: PPUSH
// result := false ;
70472: LD_ADDR_VAR 0 4
70476: PUSH
70477: LD_INT 0
70479: ST_TO_ADDR
// if GetTaskList ( unit ) then
70480: LD_VAR 0 1
70484: PPUSH
70485: CALL_OW 437
70489: IFFALSE 70572
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70491: LD_STRING M
70493: PUSH
70494: LD_VAR 0 1
70498: PPUSH
70499: CALL_OW 437
70503: PUSH
70504: LD_INT 1
70506: ARRAY
70507: PUSH
70508: LD_INT 1
70510: ARRAY
70511: EQUAL
70512: PUSH
70513: LD_VAR 0 2
70517: PUSH
70518: LD_VAR 0 1
70522: PPUSH
70523: CALL_OW 437
70527: PUSH
70528: LD_INT 1
70530: ARRAY
70531: PUSH
70532: LD_INT 2
70534: ARRAY
70535: EQUAL
70536: AND
70537: PUSH
70538: LD_VAR 0 3
70542: PUSH
70543: LD_VAR 0 1
70547: PPUSH
70548: CALL_OW 437
70552: PUSH
70553: LD_INT 1
70555: ARRAY
70556: PUSH
70557: LD_INT 3
70559: ARRAY
70560: EQUAL
70561: AND
70562: IFFALSE 70572
// result := true ;
70564: LD_ADDR_VAR 0 4
70568: PUSH
70569: LD_INT 1
70571: ST_TO_ADDR
// end ; end ;
70572: LD_VAR 0 4
70576: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70577: LD_INT 0
70579: PPUSH
70580: PPUSH
70581: PPUSH
70582: PPUSH
// if not unit or not area then
70583: LD_VAR 0 1
70587: NOT
70588: PUSH
70589: LD_VAR 0 2
70593: NOT
70594: OR
70595: IFFALSE 70599
// exit ;
70597: GO 70763
// tmp := AreaToList ( area , i ) ;
70599: LD_ADDR_VAR 0 6
70603: PUSH
70604: LD_VAR 0 2
70608: PPUSH
70609: LD_VAR 0 5
70613: PPUSH
70614: CALL_OW 517
70618: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70619: LD_ADDR_VAR 0 5
70623: PUSH
70624: DOUBLE
70625: LD_INT 1
70627: DEC
70628: ST_TO_ADDR
70629: LD_VAR 0 6
70633: PUSH
70634: LD_INT 1
70636: ARRAY
70637: PUSH
70638: FOR_TO
70639: IFFALSE 70761
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70641: LD_ADDR_VAR 0 7
70645: PUSH
70646: LD_VAR 0 6
70650: PUSH
70651: LD_INT 1
70653: ARRAY
70654: PUSH
70655: LD_VAR 0 5
70659: ARRAY
70660: PUSH
70661: LD_VAR 0 6
70665: PUSH
70666: LD_INT 2
70668: ARRAY
70669: PUSH
70670: LD_VAR 0 5
70674: ARRAY
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70680: LD_VAR 0 7
70684: PUSH
70685: LD_INT 1
70687: ARRAY
70688: PPUSH
70689: LD_VAR 0 7
70693: PUSH
70694: LD_INT 2
70696: ARRAY
70697: PPUSH
70698: CALL_OW 428
70702: PUSH
70703: LD_INT 0
70705: EQUAL
70706: IFFALSE 70759
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70708: LD_VAR 0 1
70712: PPUSH
70713: LD_VAR 0 7
70717: PUSH
70718: LD_INT 1
70720: ARRAY
70721: PPUSH
70722: LD_VAR 0 7
70726: PUSH
70727: LD_INT 2
70729: ARRAY
70730: PPUSH
70731: LD_VAR 0 3
70735: PPUSH
70736: CALL_OW 48
// result := IsPlaced ( unit ) ;
70740: LD_ADDR_VAR 0 4
70744: PUSH
70745: LD_VAR 0 1
70749: PPUSH
70750: CALL_OW 305
70754: ST_TO_ADDR
// exit ;
70755: POP
70756: POP
70757: GO 70763
// end ; end ;
70759: GO 70638
70761: POP
70762: POP
// end ;
70763: LD_VAR 0 4
70767: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70768: LD_INT 0
70770: PPUSH
70771: PPUSH
70772: PPUSH
// if not side or side > 8 then
70773: LD_VAR 0 1
70777: NOT
70778: PUSH
70779: LD_VAR 0 1
70783: PUSH
70784: LD_INT 8
70786: GREATER
70787: OR
70788: IFFALSE 70792
// exit ;
70790: GO 70979
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70792: LD_ADDR_VAR 0 4
70796: PUSH
70797: LD_INT 22
70799: PUSH
70800: LD_VAR 0 1
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 21
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PPUSH
70823: CALL_OW 69
70827: ST_TO_ADDR
// if not tmp then
70828: LD_VAR 0 4
70832: NOT
70833: IFFALSE 70837
// exit ;
70835: GO 70979
// enable_addtolog := true ;
70837: LD_ADDR_OWVAR 81
70841: PUSH
70842: LD_INT 1
70844: ST_TO_ADDR
// AddToLog ( [ ) ;
70845: LD_STRING [
70847: PPUSH
70848: CALL_OW 561
// for i in tmp do
70852: LD_ADDR_VAR 0 3
70856: PUSH
70857: LD_VAR 0 4
70861: PUSH
70862: FOR_IN
70863: IFFALSE 70970
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70865: LD_STRING [
70867: PUSH
70868: LD_VAR 0 3
70872: PPUSH
70873: CALL_OW 266
70877: STR
70878: PUSH
70879: LD_STRING , 
70881: STR
70882: PUSH
70883: LD_VAR 0 3
70887: PPUSH
70888: CALL_OW 250
70892: STR
70893: PUSH
70894: LD_STRING , 
70896: STR
70897: PUSH
70898: LD_VAR 0 3
70902: PPUSH
70903: CALL_OW 251
70907: STR
70908: PUSH
70909: LD_STRING , 
70911: STR
70912: PUSH
70913: LD_VAR 0 3
70917: PPUSH
70918: CALL_OW 254
70922: STR
70923: PUSH
70924: LD_STRING , 
70926: STR
70927: PUSH
70928: LD_VAR 0 3
70932: PPUSH
70933: LD_INT 1
70935: PPUSH
70936: CALL_OW 268
70940: STR
70941: PUSH
70942: LD_STRING , 
70944: STR
70945: PUSH
70946: LD_VAR 0 3
70950: PPUSH
70951: LD_INT 2
70953: PPUSH
70954: CALL_OW 268
70958: STR
70959: PUSH
70960: LD_STRING ],
70962: STR
70963: PPUSH
70964: CALL_OW 561
// end ;
70968: GO 70862
70970: POP
70971: POP
// AddToLog ( ]; ) ;
70972: LD_STRING ];
70974: PPUSH
70975: CALL_OW 561
// end ;
70979: LD_VAR 0 2
70983: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70984: LD_INT 0
70986: PPUSH
70987: PPUSH
70988: PPUSH
70989: PPUSH
70990: PPUSH
// if not area or not rate or not max then
70991: LD_VAR 0 1
70995: NOT
70996: PUSH
70997: LD_VAR 0 2
71001: NOT
71002: OR
71003: PUSH
71004: LD_VAR 0 4
71008: NOT
71009: OR
71010: IFFALSE 71014
// exit ;
71012: GO 71203
// while 1 do
71014: LD_INT 1
71016: IFFALSE 71203
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71018: LD_ADDR_VAR 0 9
71022: PUSH
71023: LD_VAR 0 1
71027: PPUSH
71028: LD_INT 1
71030: PPUSH
71031: CALL_OW 287
71035: PUSH
71036: LD_INT 10
71038: MUL
71039: ST_TO_ADDR
// r := rate / 10 ;
71040: LD_ADDR_VAR 0 7
71044: PUSH
71045: LD_VAR 0 2
71049: PUSH
71050: LD_INT 10
71052: DIVREAL
71053: ST_TO_ADDR
// time := 1 1$00 ;
71054: LD_ADDR_VAR 0 8
71058: PUSH
71059: LD_INT 2100
71061: ST_TO_ADDR
// if amount < min then
71062: LD_VAR 0 9
71066: PUSH
71067: LD_VAR 0 3
71071: LESS
71072: IFFALSE 71090
// r := r * 2 else
71074: LD_ADDR_VAR 0 7
71078: PUSH
71079: LD_VAR 0 7
71083: PUSH
71084: LD_INT 2
71086: MUL
71087: ST_TO_ADDR
71088: GO 71116
// if amount > max then
71090: LD_VAR 0 9
71094: PUSH
71095: LD_VAR 0 4
71099: GREATER
71100: IFFALSE 71116
// r := r / 2 ;
71102: LD_ADDR_VAR 0 7
71106: PUSH
71107: LD_VAR 0 7
71111: PUSH
71112: LD_INT 2
71114: DIVREAL
71115: ST_TO_ADDR
// time := time / r ;
71116: LD_ADDR_VAR 0 8
71120: PUSH
71121: LD_VAR 0 8
71125: PUSH
71126: LD_VAR 0 7
71130: DIVREAL
71131: ST_TO_ADDR
// if time < 0 then
71132: LD_VAR 0 8
71136: PUSH
71137: LD_INT 0
71139: LESS
71140: IFFALSE 71157
// time := time * - 1 ;
71142: LD_ADDR_VAR 0 8
71146: PUSH
71147: LD_VAR 0 8
71151: PUSH
71152: LD_INT 1
71154: NEG
71155: MUL
71156: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71157: LD_VAR 0 8
71161: PUSH
71162: LD_INT 35
71164: PPUSH
71165: LD_INT 875
71167: PPUSH
71168: CALL_OW 12
71172: PLUS
71173: PPUSH
71174: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71178: LD_INT 1
71180: PPUSH
71181: LD_INT 5
71183: PPUSH
71184: CALL_OW 12
71188: PPUSH
71189: LD_VAR 0 1
71193: PPUSH
71194: LD_INT 1
71196: PPUSH
71197: CALL_OW 55
// end ;
71201: GO 71014
// end ;
71203: LD_VAR 0 5
71207: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71208: LD_INT 0
71210: PPUSH
71211: PPUSH
71212: PPUSH
71213: PPUSH
71214: PPUSH
71215: PPUSH
71216: PPUSH
71217: PPUSH
// if not turrets or not factories then
71218: LD_VAR 0 1
71222: NOT
71223: PUSH
71224: LD_VAR 0 2
71228: NOT
71229: OR
71230: IFFALSE 71234
// exit ;
71232: GO 71541
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71234: LD_ADDR_VAR 0 10
71238: PUSH
71239: LD_INT 5
71241: PUSH
71242: LD_INT 6
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 2
71251: PUSH
71252: LD_INT 4
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 3
71261: PUSH
71262: LD_INT 5
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 24
71276: PUSH
71277: LD_INT 25
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 23
71286: PUSH
71287: LD_INT 27
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 42
71300: PUSH
71301: LD_INT 43
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 44
71310: PUSH
71311: LD_INT 46
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 45
71320: PUSH
71321: LD_INT 47
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: LIST
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: LIST
71337: ST_TO_ADDR
// result := [ ] ;
71338: LD_ADDR_VAR 0 3
71342: PUSH
71343: EMPTY
71344: ST_TO_ADDR
// for i in turrets do
71345: LD_ADDR_VAR 0 4
71349: PUSH
71350: LD_VAR 0 1
71354: PUSH
71355: FOR_IN
71356: IFFALSE 71539
// begin nat := GetNation ( i ) ;
71358: LD_ADDR_VAR 0 7
71362: PUSH
71363: LD_VAR 0 4
71367: PPUSH
71368: CALL_OW 248
71372: ST_TO_ADDR
// weapon := 0 ;
71373: LD_ADDR_VAR 0 8
71377: PUSH
71378: LD_INT 0
71380: ST_TO_ADDR
// if not nat then
71381: LD_VAR 0 7
71385: NOT
71386: IFFALSE 71390
// continue ;
71388: GO 71355
// for j in list [ nat ] do
71390: LD_ADDR_VAR 0 5
71394: PUSH
71395: LD_VAR 0 10
71399: PUSH
71400: LD_VAR 0 7
71404: ARRAY
71405: PUSH
71406: FOR_IN
71407: IFFALSE 71448
// if GetBWeapon ( i ) = j [ 1 ] then
71409: LD_VAR 0 4
71413: PPUSH
71414: CALL_OW 269
71418: PUSH
71419: LD_VAR 0 5
71423: PUSH
71424: LD_INT 1
71426: ARRAY
71427: EQUAL
71428: IFFALSE 71446
// begin weapon := j [ 2 ] ;
71430: LD_ADDR_VAR 0 8
71434: PUSH
71435: LD_VAR 0 5
71439: PUSH
71440: LD_INT 2
71442: ARRAY
71443: ST_TO_ADDR
// break ;
71444: GO 71448
// end ;
71446: GO 71406
71448: POP
71449: POP
// if not weapon then
71450: LD_VAR 0 8
71454: NOT
71455: IFFALSE 71459
// continue ;
71457: GO 71355
// for k in factories do
71459: LD_ADDR_VAR 0 6
71463: PUSH
71464: LD_VAR 0 2
71468: PUSH
71469: FOR_IN
71470: IFFALSE 71535
// begin weapons := AvailableWeaponList ( k ) ;
71472: LD_ADDR_VAR 0 9
71476: PUSH
71477: LD_VAR 0 6
71481: PPUSH
71482: CALL_OW 478
71486: ST_TO_ADDR
// if not weapons then
71487: LD_VAR 0 9
71491: NOT
71492: IFFALSE 71496
// continue ;
71494: GO 71469
// if weapon in weapons then
71496: LD_VAR 0 8
71500: PUSH
71501: LD_VAR 0 9
71505: IN
71506: IFFALSE 71533
// begin result := [ i , weapon ] ;
71508: LD_ADDR_VAR 0 3
71512: PUSH
71513: LD_VAR 0 4
71517: PUSH
71518: LD_VAR 0 8
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: ST_TO_ADDR
// exit ;
71527: POP
71528: POP
71529: POP
71530: POP
71531: GO 71541
// end ; end ;
71533: GO 71469
71535: POP
71536: POP
// end ;
71537: GO 71355
71539: POP
71540: POP
// end ;
71541: LD_VAR 0 3
71545: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71546: LD_INT 0
71548: PPUSH
// if not side or side > 8 then
71549: LD_VAR 0 3
71553: NOT
71554: PUSH
71555: LD_VAR 0 3
71559: PUSH
71560: LD_INT 8
71562: GREATER
71563: OR
71564: IFFALSE 71568
// exit ;
71566: GO 71627
// if not range then
71568: LD_VAR 0 4
71572: NOT
71573: IFFALSE 71584
// range := - 12 ;
71575: LD_ADDR_VAR 0 4
71579: PUSH
71580: LD_INT 12
71582: NEG
71583: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71584: LD_VAR 0 1
71588: PPUSH
71589: LD_VAR 0 2
71593: PPUSH
71594: LD_VAR 0 3
71598: PPUSH
71599: LD_VAR 0 4
71603: PPUSH
71604: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71608: LD_VAR 0 1
71612: PPUSH
71613: LD_VAR 0 2
71617: PPUSH
71618: LD_VAR 0 3
71622: PPUSH
71623: CALL_OW 331
// end ;
71627: LD_VAR 0 5
71631: RET
// export function Video ( mode ) ; begin
71632: LD_INT 0
71634: PPUSH
// ingame_video = mode ;
71635: LD_ADDR_OWVAR 52
71639: PUSH
71640: LD_VAR 0 1
71644: ST_TO_ADDR
// interface_hidden = mode ;
71645: LD_ADDR_OWVAR 54
71649: PUSH
71650: LD_VAR 0 1
71654: ST_TO_ADDR
// end ;
71655: LD_VAR 0 2
71659: RET
// export function Join ( array , element ) ; begin
71660: LD_INT 0
71662: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71663: LD_ADDR_VAR 0 3
71667: PUSH
71668: LD_VAR 0 1
71672: PPUSH
71673: LD_VAR 0 1
71677: PUSH
71678: LD_INT 1
71680: PLUS
71681: PPUSH
71682: LD_VAR 0 2
71686: PPUSH
71687: CALL_OW 1
71691: ST_TO_ADDR
// end ;
71692: LD_VAR 0 3
71696: RET
// export function JoinUnion ( array , element ) ; begin
71697: LD_INT 0
71699: PPUSH
// result := array union element ;
71700: LD_ADDR_VAR 0 3
71704: PUSH
71705: LD_VAR 0 1
71709: PUSH
71710: LD_VAR 0 2
71714: UNION
71715: ST_TO_ADDR
// end ;
71716: LD_VAR 0 3
71720: RET
// export function GetBehemoths ( side ) ; begin
71721: LD_INT 0
71723: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71724: LD_ADDR_VAR 0 2
71728: PUSH
71729: LD_INT 22
71731: PUSH
71732: LD_VAR 0 1
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 31
71743: PUSH
71744: LD_INT 25
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PPUSH
71755: CALL_OW 69
71759: ST_TO_ADDR
// end ;
71760: LD_VAR 0 2
71764: RET
// export function Shuffle ( array ) ; var i , index ; begin
71765: LD_INT 0
71767: PPUSH
71768: PPUSH
71769: PPUSH
// result := [ ] ;
71770: LD_ADDR_VAR 0 2
71774: PUSH
71775: EMPTY
71776: ST_TO_ADDR
// if not array then
71777: LD_VAR 0 1
71781: NOT
71782: IFFALSE 71786
// exit ;
71784: GO 71885
// Randomize ;
71786: CALL_OW 10
// for i = array downto 1 do
71790: LD_ADDR_VAR 0 3
71794: PUSH
71795: DOUBLE
71796: LD_VAR 0 1
71800: INC
71801: ST_TO_ADDR
71802: LD_INT 1
71804: PUSH
71805: FOR_DOWNTO
71806: IFFALSE 71883
// begin index := rand ( 1 , array ) ;
71808: LD_ADDR_VAR 0 4
71812: PUSH
71813: LD_INT 1
71815: PPUSH
71816: LD_VAR 0 1
71820: PPUSH
71821: CALL_OW 12
71825: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71826: LD_ADDR_VAR 0 2
71830: PUSH
71831: LD_VAR 0 2
71835: PPUSH
71836: LD_VAR 0 2
71840: PUSH
71841: LD_INT 1
71843: PLUS
71844: PPUSH
71845: LD_VAR 0 1
71849: PUSH
71850: LD_VAR 0 4
71854: ARRAY
71855: PPUSH
71856: CALL_OW 2
71860: ST_TO_ADDR
// array := Delete ( array , index ) ;
71861: LD_ADDR_VAR 0 1
71865: PUSH
71866: LD_VAR 0 1
71870: PPUSH
71871: LD_VAR 0 4
71875: PPUSH
71876: CALL_OW 3
71880: ST_TO_ADDR
// end ;
71881: GO 71805
71883: POP
71884: POP
// end ;
71885: LD_VAR 0 2
71889: RET
// export function GetBaseMaterials ( base ) ; begin
71890: LD_INT 0
71892: PPUSH
// result := [ 0 , 0 , 0 ] ;
71893: LD_ADDR_VAR 0 2
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: LD_INT 0
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: LIST
71911: ST_TO_ADDR
// if not base then
71912: LD_VAR 0 1
71916: NOT
71917: IFFALSE 71921
// exit ;
71919: GO 71970
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71921: LD_ADDR_VAR 0 2
71925: PUSH
71926: LD_VAR 0 1
71930: PPUSH
71931: LD_INT 1
71933: PPUSH
71934: CALL_OW 275
71938: PUSH
71939: LD_VAR 0 1
71943: PPUSH
71944: LD_INT 2
71946: PPUSH
71947: CALL_OW 275
71951: PUSH
71952: LD_VAR 0 1
71956: PPUSH
71957: LD_INT 3
71959: PPUSH
71960: CALL_OW 275
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: LIST
71969: ST_TO_ADDR
// end ;
71970: LD_VAR 0 2
71974: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71975: LD_INT 0
71977: PPUSH
71978: PPUSH
// result := array ;
71979: LD_ADDR_VAR 0 3
71983: PUSH
71984: LD_VAR 0 1
71988: ST_TO_ADDR
// if size >= result then
71989: LD_VAR 0 2
71993: PUSH
71994: LD_VAR 0 3
71998: GREATEREQUAL
71999: IFFALSE 72003
// exit ;
72001: GO 72053
// if size then
72003: LD_VAR 0 2
72007: IFFALSE 72053
// for i := array downto size do
72009: LD_ADDR_VAR 0 4
72013: PUSH
72014: DOUBLE
72015: LD_VAR 0 1
72019: INC
72020: ST_TO_ADDR
72021: LD_VAR 0 2
72025: PUSH
72026: FOR_DOWNTO
72027: IFFALSE 72051
// result := Delete ( result , result ) ;
72029: LD_ADDR_VAR 0 3
72033: PUSH
72034: LD_VAR 0 3
72038: PPUSH
72039: LD_VAR 0 3
72043: PPUSH
72044: CALL_OW 3
72048: ST_TO_ADDR
72049: GO 72026
72051: POP
72052: POP
// end ;
72053: LD_VAR 0 3
72057: RET
// export function ComExit ( unit ) ; var tmp ; begin
72058: LD_INT 0
72060: PPUSH
72061: PPUSH
// if not IsInUnit ( unit ) then
72062: LD_VAR 0 1
72066: PPUSH
72067: CALL_OW 310
72071: NOT
72072: IFFALSE 72076
// exit ;
72074: GO 72136
// tmp := IsInUnit ( unit ) ;
72076: LD_ADDR_VAR 0 3
72080: PUSH
72081: LD_VAR 0 1
72085: PPUSH
72086: CALL_OW 310
72090: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72091: LD_VAR 0 3
72095: PPUSH
72096: CALL_OW 247
72100: PUSH
72101: LD_INT 2
72103: EQUAL
72104: IFFALSE 72117
// ComExitVehicle ( unit ) else
72106: LD_VAR 0 1
72110: PPUSH
72111: CALL_OW 121
72115: GO 72126
// ComExitBuilding ( unit ) ;
72117: LD_VAR 0 1
72121: PPUSH
72122: CALL_OW 122
// result := tmp ;
72126: LD_ADDR_VAR 0 2
72130: PUSH
72131: LD_VAR 0 3
72135: ST_TO_ADDR
// end ;
72136: LD_VAR 0 2
72140: RET
// export function ComExitAll ( units ) ; var i ; begin
72141: LD_INT 0
72143: PPUSH
72144: PPUSH
// if not units then
72145: LD_VAR 0 1
72149: NOT
72150: IFFALSE 72154
// exit ;
72152: GO 72180
// for i in units do
72154: LD_ADDR_VAR 0 3
72158: PUSH
72159: LD_VAR 0 1
72163: PUSH
72164: FOR_IN
72165: IFFALSE 72178
// ComExit ( i ) ;
72167: LD_VAR 0 3
72171: PPUSH
72172: CALL 72058 0 1
72176: GO 72164
72178: POP
72179: POP
// end ;
72180: LD_VAR 0 2
72184: RET
// export function ResetHc ; begin
72185: LD_INT 0
72187: PPUSH
// InitHc ;
72188: CALL_OW 19
// hc_importance := 0 ;
72192: LD_ADDR_OWVAR 32
72196: PUSH
72197: LD_INT 0
72199: ST_TO_ADDR
// end ;
72200: LD_VAR 0 1
72204: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72205: LD_INT 0
72207: PPUSH
72208: PPUSH
72209: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72210: LD_ADDR_VAR 0 6
72214: PUSH
72215: LD_VAR 0 1
72219: PUSH
72220: LD_VAR 0 3
72224: PLUS
72225: PUSH
72226: LD_INT 2
72228: DIV
72229: ST_TO_ADDR
// if _x < 0 then
72230: LD_VAR 0 6
72234: PUSH
72235: LD_INT 0
72237: LESS
72238: IFFALSE 72255
// _x := _x * - 1 ;
72240: LD_ADDR_VAR 0 6
72244: PUSH
72245: LD_VAR 0 6
72249: PUSH
72250: LD_INT 1
72252: NEG
72253: MUL
72254: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72255: LD_ADDR_VAR 0 7
72259: PUSH
72260: LD_VAR 0 2
72264: PUSH
72265: LD_VAR 0 4
72269: PLUS
72270: PUSH
72271: LD_INT 2
72273: DIV
72274: ST_TO_ADDR
// if _y < 0 then
72275: LD_VAR 0 7
72279: PUSH
72280: LD_INT 0
72282: LESS
72283: IFFALSE 72300
// _y := _y * - 1 ;
72285: LD_ADDR_VAR 0 7
72289: PUSH
72290: LD_VAR 0 7
72294: PUSH
72295: LD_INT 1
72297: NEG
72298: MUL
72299: ST_TO_ADDR
// result := [ _x , _y ] ;
72300: LD_ADDR_VAR 0 5
72304: PUSH
72305: LD_VAR 0 6
72309: PUSH
72310: LD_VAR 0 7
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: ST_TO_ADDR
// end ;
72319: LD_VAR 0 5
72323: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72324: LD_INT 0
72326: PPUSH
72327: PPUSH
72328: PPUSH
72329: PPUSH
// task := GetTaskList ( unit ) ;
72330: LD_ADDR_VAR 0 7
72334: PUSH
72335: LD_VAR 0 1
72339: PPUSH
72340: CALL_OW 437
72344: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72345: LD_VAR 0 7
72349: NOT
72350: PUSH
72351: LD_VAR 0 1
72355: PPUSH
72356: LD_VAR 0 2
72360: PPUSH
72361: CALL_OW 308
72365: NOT
72366: AND
72367: IFFALSE 72371
// exit ;
72369: GO 72489
// if IsInArea ( unit , area ) then
72371: LD_VAR 0 1
72375: PPUSH
72376: LD_VAR 0 2
72380: PPUSH
72381: CALL_OW 308
72385: IFFALSE 72403
// begin ComMoveToArea ( unit , goAway ) ;
72387: LD_VAR 0 1
72391: PPUSH
72392: LD_VAR 0 3
72396: PPUSH
72397: CALL_OW 113
// exit ;
72401: GO 72489
// end ; if task [ 1 ] [ 1 ] <> M then
72403: LD_VAR 0 7
72407: PUSH
72408: LD_INT 1
72410: ARRAY
72411: PUSH
72412: LD_INT 1
72414: ARRAY
72415: PUSH
72416: LD_STRING M
72418: NONEQUAL
72419: IFFALSE 72423
// exit ;
72421: GO 72489
// x := task [ 1 ] [ 2 ] ;
72423: LD_ADDR_VAR 0 5
72427: PUSH
72428: LD_VAR 0 7
72432: PUSH
72433: LD_INT 1
72435: ARRAY
72436: PUSH
72437: LD_INT 2
72439: ARRAY
72440: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72441: LD_ADDR_VAR 0 6
72445: PUSH
72446: LD_VAR 0 7
72450: PUSH
72451: LD_INT 1
72453: ARRAY
72454: PUSH
72455: LD_INT 3
72457: ARRAY
72458: ST_TO_ADDR
// if InArea ( x , y , area ) then
72459: LD_VAR 0 5
72463: PPUSH
72464: LD_VAR 0 6
72468: PPUSH
72469: LD_VAR 0 2
72473: PPUSH
72474: CALL_OW 309
72478: IFFALSE 72489
// ComStop ( unit ) ;
72480: LD_VAR 0 1
72484: PPUSH
72485: CALL_OW 141
// end ;
72489: LD_VAR 0 4
72493: RET
// export function Abs ( value ) ; begin
72494: LD_INT 0
72496: PPUSH
// result := value ;
72497: LD_ADDR_VAR 0 2
72501: PUSH
72502: LD_VAR 0 1
72506: ST_TO_ADDR
// if value < 0 then
72507: LD_VAR 0 1
72511: PUSH
72512: LD_INT 0
72514: LESS
72515: IFFALSE 72532
// result := value * - 1 ;
72517: LD_ADDR_VAR 0 2
72521: PUSH
72522: LD_VAR 0 1
72526: PUSH
72527: LD_INT 1
72529: NEG
72530: MUL
72531: ST_TO_ADDR
// end ;
72532: LD_VAR 0 2
72536: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72537: LD_INT 0
72539: PPUSH
72540: PPUSH
72541: PPUSH
72542: PPUSH
72543: PPUSH
72544: PPUSH
72545: PPUSH
72546: PPUSH
// if not unit or not building then
72547: LD_VAR 0 1
72551: NOT
72552: PUSH
72553: LD_VAR 0 2
72557: NOT
72558: OR
72559: IFFALSE 72563
// exit ;
72561: GO 72789
// x := GetX ( building ) ;
72563: LD_ADDR_VAR 0 4
72567: PUSH
72568: LD_VAR 0 2
72572: PPUSH
72573: CALL_OW 250
72577: ST_TO_ADDR
// y := GetY ( building ) ;
72578: LD_ADDR_VAR 0 6
72582: PUSH
72583: LD_VAR 0 2
72587: PPUSH
72588: CALL_OW 251
72592: ST_TO_ADDR
// d := GetDir ( building ) ;
72593: LD_ADDR_VAR 0 8
72597: PUSH
72598: LD_VAR 0 2
72602: PPUSH
72603: CALL_OW 254
72607: ST_TO_ADDR
// r := 4 ;
72608: LD_ADDR_VAR 0 9
72612: PUSH
72613: LD_INT 4
72615: ST_TO_ADDR
// for i := 1 to 5 do
72616: LD_ADDR_VAR 0 10
72620: PUSH
72621: DOUBLE
72622: LD_INT 1
72624: DEC
72625: ST_TO_ADDR
72626: LD_INT 5
72628: PUSH
72629: FOR_TO
72630: IFFALSE 72787
// begin _x := ShiftX ( x , d , r + i ) ;
72632: LD_ADDR_VAR 0 5
72636: PUSH
72637: LD_VAR 0 4
72641: PPUSH
72642: LD_VAR 0 8
72646: PPUSH
72647: LD_VAR 0 9
72651: PUSH
72652: LD_VAR 0 10
72656: PLUS
72657: PPUSH
72658: CALL_OW 272
72662: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72663: LD_ADDR_VAR 0 7
72667: PUSH
72668: LD_VAR 0 6
72672: PPUSH
72673: LD_VAR 0 8
72677: PPUSH
72678: LD_VAR 0 9
72682: PUSH
72683: LD_VAR 0 10
72687: PLUS
72688: PPUSH
72689: CALL_OW 273
72693: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72694: LD_VAR 0 5
72698: PPUSH
72699: LD_VAR 0 7
72703: PPUSH
72704: CALL_OW 488
72708: PUSH
72709: LD_VAR 0 5
72713: PPUSH
72714: LD_VAR 0 7
72718: PPUSH
72719: CALL_OW 428
72723: PPUSH
72724: CALL_OW 247
72728: PUSH
72729: LD_INT 3
72731: PUSH
72732: LD_INT 2
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: IN
72739: NOT
72740: AND
72741: IFFALSE 72785
// begin ComMoveXY ( unit , _x , _y ) ;
72743: LD_VAR 0 1
72747: PPUSH
72748: LD_VAR 0 5
72752: PPUSH
72753: LD_VAR 0 7
72757: PPUSH
72758: CALL_OW 111
// result := [ _x , _y ] ;
72762: LD_ADDR_VAR 0 3
72766: PUSH
72767: LD_VAR 0 5
72771: PUSH
72772: LD_VAR 0 7
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: ST_TO_ADDR
// exit ;
72781: POP
72782: POP
72783: GO 72789
// end ; end ;
72785: GO 72629
72787: POP
72788: POP
// end ;
72789: LD_VAR 0 3
72793: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72794: LD_INT 0
72796: PPUSH
72797: PPUSH
72798: PPUSH
// result := 0 ;
72799: LD_ADDR_VAR 0 3
72803: PUSH
72804: LD_INT 0
72806: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72807: LD_VAR 0 1
72811: PUSH
72812: LD_INT 0
72814: LESS
72815: PUSH
72816: LD_VAR 0 1
72820: PUSH
72821: LD_INT 8
72823: GREATER
72824: OR
72825: PUSH
72826: LD_VAR 0 2
72830: PUSH
72831: LD_INT 0
72833: LESS
72834: OR
72835: PUSH
72836: LD_VAR 0 2
72840: PUSH
72841: LD_INT 8
72843: GREATER
72844: OR
72845: IFFALSE 72849
// exit ;
72847: GO 72924
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72849: LD_ADDR_VAR 0 4
72853: PUSH
72854: LD_INT 22
72856: PUSH
72857: LD_VAR 0 2
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PPUSH
72866: CALL_OW 69
72870: PUSH
72871: FOR_IN
72872: IFFALSE 72922
// begin un := UnitShoot ( i ) ;
72874: LD_ADDR_VAR 0 5
72878: PUSH
72879: LD_VAR 0 4
72883: PPUSH
72884: CALL_OW 504
72888: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72889: LD_VAR 0 5
72893: PPUSH
72894: CALL_OW 255
72898: PUSH
72899: LD_VAR 0 1
72903: EQUAL
72904: IFFALSE 72920
// begin result := un ;
72906: LD_ADDR_VAR 0 3
72910: PUSH
72911: LD_VAR 0 5
72915: ST_TO_ADDR
// exit ;
72916: POP
72917: POP
72918: GO 72924
// end ; end ;
72920: GO 72871
72922: POP
72923: POP
// end ;
72924: LD_VAR 0 3
72928: RET
// export function GetCargoBay ( units ) ; begin
72929: LD_INT 0
72931: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72932: LD_ADDR_VAR 0 2
72936: PUSH
72937: LD_VAR 0 1
72941: PPUSH
72942: LD_INT 2
72944: PUSH
72945: LD_INT 34
72947: PUSH
72948: LD_INT 12
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 34
72957: PUSH
72958: LD_INT 51
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 34
72967: PUSH
72968: LD_INT 32
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 34
72977: PUSH
72978: LD_INT 89
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: PPUSH
72992: CALL_OW 72
72996: ST_TO_ADDR
// end ;
72997: LD_VAR 0 2
73001: RET
// export function Negate ( value ) ; begin
73002: LD_INT 0
73004: PPUSH
// result := not value ;
73005: LD_ADDR_VAR 0 2
73009: PUSH
73010: LD_VAR 0 1
73014: NOT
73015: ST_TO_ADDR
// end ;
73016: LD_VAR 0 2
73020: RET
// export function Inc ( value ) ; begin
73021: LD_INT 0
73023: PPUSH
// result := value + 1 ;
73024: LD_ADDR_VAR 0 2
73028: PUSH
73029: LD_VAR 0 1
73033: PUSH
73034: LD_INT 1
73036: PLUS
73037: ST_TO_ADDR
// end ;
73038: LD_VAR 0 2
73042: RET
// export function Dec ( value ) ; begin
73043: LD_INT 0
73045: PPUSH
// result := value - 1 ;
73046: LD_ADDR_VAR 0 2
73050: PUSH
73051: LD_VAR 0 1
73055: PUSH
73056: LD_INT 1
73058: MINUS
73059: ST_TO_ADDR
// end ;
73060: LD_VAR 0 2
73064: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73065: LD_INT 0
73067: PPUSH
73068: PPUSH
73069: PPUSH
73070: PPUSH
73071: PPUSH
73072: PPUSH
73073: PPUSH
73074: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73075: LD_VAR 0 1
73079: PPUSH
73080: LD_VAR 0 2
73084: PPUSH
73085: CALL_OW 488
73089: NOT
73090: PUSH
73091: LD_VAR 0 3
73095: PPUSH
73096: LD_VAR 0 4
73100: PPUSH
73101: CALL_OW 488
73105: NOT
73106: OR
73107: IFFALSE 73120
// begin result := - 1 ;
73109: LD_ADDR_VAR 0 5
73113: PUSH
73114: LD_INT 1
73116: NEG
73117: ST_TO_ADDR
// exit ;
73118: GO 73355
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73120: LD_ADDR_VAR 0 12
73124: PUSH
73125: LD_VAR 0 1
73129: PPUSH
73130: LD_VAR 0 2
73134: PPUSH
73135: LD_VAR 0 3
73139: PPUSH
73140: LD_VAR 0 4
73144: PPUSH
73145: CALL 72205 0 4
73149: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73150: LD_ADDR_VAR 0 11
73154: PUSH
73155: LD_VAR 0 1
73159: PPUSH
73160: LD_VAR 0 2
73164: PPUSH
73165: LD_VAR 0 12
73169: PUSH
73170: LD_INT 1
73172: ARRAY
73173: PPUSH
73174: LD_VAR 0 12
73178: PUSH
73179: LD_INT 2
73181: ARRAY
73182: PPUSH
73183: CALL_OW 298
73187: ST_TO_ADDR
// distance := 9999 ;
73188: LD_ADDR_VAR 0 10
73192: PUSH
73193: LD_INT 9999
73195: ST_TO_ADDR
// for i := 0 to 5 do
73196: LD_ADDR_VAR 0 6
73200: PUSH
73201: DOUBLE
73202: LD_INT 0
73204: DEC
73205: ST_TO_ADDR
73206: LD_INT 5
73208: PUSH
73209: FOR_TO
73210: IFFALSE 73353
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73212: LD_ADDR_VAR 0 7
73216: PUSH
73217: LD_VAR 0 1
73221: PPUSH
73222: LD_VAR 0 6
73226: PPUSH
73227: LD_VAR 0 11
73231: PPUSH
73232: CALL_OW 272
73236: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73237: LD_ADDR_VAR 0 8
73241: PUSH
73242: LD_VAR 0 2
73246: PPUSH
73247: LD_VAR 0 6
73251: PPUSH
73252: LD_VAR 0 11
73256: PPUSH
73257: CALL_OW 273
73261: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73262: LD_VAR 0 7
73266: PPUSH
73267: LD_VAR 0 8
73271: PPUSH
73272: CALL_OW 488
73276: NOT
73277: IFFALSE 73281
// continue ;
73279: GO 73209
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73281: LD_ADDR_VAR 0 9
73285: PUSH
73286: LD_VAR 0 12
73290: PUSH
73291: LD_INT 1
73293: ARRAY
73294: PPUSH
73295: LD_VAR 0 12
73299: PUSH
73300: LD_INT 2
73302: ARRAY
73303: PPUSH
73304: LD_VAR 0 7
73308: PPUSH
73309: LD_VAR 0 8
73313: PPUSH
73314: CALL_OW 298
73318: ST_TO_ADDR
// if tmp < distance then
73319: LD_VAR 0 9
73323: PUSH
73324: LD_VAR 0 10
73328: LESS
73329: IFFALSE 73351
// begin result := i ;
73331: LD_ADDR_VAR 0 5
73335: PUSH
73336: LD_VAR 0 6
73340: ST_TO_ADDR
// distance := tmp ;
73341: LD_ADDR_VAR 0 10
73345: PUSH
73346: LD_VAR 0 9
73350: ST_TO_ADDR
// end ; end ;
73351: GO 73209
73353: POP
73354: POP
// end ;
73355: LD_VAR 0 5
73359: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73360: LD_INT 0
73362: PPUSH
73363: PPUSH
// if not driver or not IsInUnit ( driver ) then
73364: LD_VAR 0 1
73368: NOT
73369: PUSH
73370: LD_VAR 0 1
73374: PPUSH
73375: CALL_OW 310
73379: NOT
73380: OR
73381: IFFALSE 73385
// exit ;
73383: GO 73475
// vehicle := IsInUnit ( driver ) ;
73385: LD_ADDR_VAR 0 3
73389: PUSH
73390: LD_VAR 0 1
73394: PPUSH
73395: CALL_OW 310
73399: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73400: LD_VAR 0 1
73404: PPUSH
73405: LD_STRING \
73407: PUSH
73408: LD_INT 0
73410: PUSH
73411: LD_INT 0
73413: PUSH
73414: LD_INT 0
73416: PUSH
73417: LD_INT 0
73419: PUSH
73420: LD_INT 0
73422: PUSH
73423: LD_INT 0
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: PUSH
73435: LD_STRING E
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: LD_INT 0
73443: PUSH
73444: LD_VAR 0 3
73448: PUSH
73449: LD_INT 0
73451: PUSH
73452: LD_INT 0
73454: PUSH
73455: LD_INT 0
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PPUSH
73471: CALL_OW 446
// end ;
73475: LD_VAR 0 2
73479: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73480: LD_INT 0
73482: PPUSH
73483: PPUSH
// if not driver or not IsInUnit ( driver ) then
73484: LD_VAR 0 1
73488: NOT
73489: PUSH
73490: LD_VAR 0 1
73494: PPUSH
73495: CALL_OW 310
73499: NOT
73500: OR
73501: IFFALSE 73505
// exit ;
73503: GO 73595
// vehicle := IsInUnit ( driver ) ;
73505: LD_ADDR_VAR 0 3
73509: PUSH
73510: LD_VAR 0 1
73514: PPUSH
73515: CALL_OW 310
73519: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73520: LD_VAR 0 1
73524: PPUSH
73525: LD_STRING \
73527: PUSH
73528: LD_INT 0
73530: PUSH
73531: LD_INT 0
73533: PUSH
73534: LD_INT 0
73536: PUSH
73537: LD_INT 0
73539: PUSH
73540: LD_INT 0
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: PUSH
73555: LD_STRING E
73557: PUSH
73558: LD_INT 0
73560: PUSH
73561: LD_INT 0
73563: PUSH
73564: LD_VAR 0 3
73568: PUSH
73569: LD_INT 0
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: LD_INT 0
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PPUSH
73591: CALL_OW 447
// end ;
73595: LD_VAR 0 2
73599: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73600: LD_INT 0
73602: PPUSH
73603: PPUSH
73604: PPUSH
// tmp := [ ] ;
73605: LD_ADDR_VAR 0 5
73609: PUSH
73610: EMPTY
73611: ST_TO_ADDR
// for i in units do
73612: LD_ADDR_VAR 0 4
73616: PUSH
73617: LD_VAR 0 1
73621: PUSH
73622: FOR_IN
73623: IFFALSE 73661
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73625: LD_ADDR_VAR 0 5
73629: PUSH
73630: LD_VAR 0 5
73634: PPUSH
73635: LD_VAR 0 5
73639: PUSH
73640: LD_INT 1
73642: PLUS
73643: PPUSH
73644: LD_VAR 0 4
73648: PPUSH
73649: CALL_OW 256
73653: PPUSH
73654: CALL_OW 2
73658: ST_TO_ADDR
73659: GO 73622
73661: POP
73662: POP
// if not tmp then
73663: LD_VAR 0 5
73667: NOT
73668: IFFALSE 73672
// exit ;
73670: GO 73720
// if asc then
73672: LD_VAR 0 2
73676: IFFALSE 73700
// result := SortListByListAsc ( units , tmp ) else
73678: LD_ADDR_VAR 0 3
73682: PUSH
73683: LD_VAR 0 1
73687: PPUSH
73688: LD_VAR 0 5
73692: PPUSH
73693: CALL_OW 76
73697: ST_TO_ADDR
73698: GO 73720
// result := SortListByListDesc ( units , tmp ) ;
73700: LD_ADDR_VAR 0 3
73704: PUSH
73705: LD_VAR 0 1
73709: PPUSH
73710: LD_VAR 0 5
73714: PPUSH
73715: CALL_OW 77
73719: ST_TO_ADDR
// end ;
73720: LD_VAR 0 3
73724: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73725: LD_INT 0
73727: PPUSH
73728: PPUSH
// task := GetTaskList ( mech ) ;
73729: LD_ADDR_VAR 0 4
73733: PUSH
73734: LD_VAR 0 1
73738: PPUSH
73739: CALL_OW 437
73743: ST_TO_ADDR
// if not task then
73744: LD_VAR 0 4
73748: NOT
73749: IFFALSE 73753
// exit ;
73751: GO 73795
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73753: LD_ADDR_VAR 0 3
73757: PUSH
73758: LD_VAR 0 4
73762: PUSH
73763: LD_INT 1
73765: ARRAY
73766: PUSH
73767: LD_INT 1
73769: ARRAY
73770: PUSH
73771: LD_STRING r
73773: EQUAL
73774: PUSH
73775: LD_VAR 0 4
73779: PUSH
73780: LD_INT 1
73782: ARRAY
73783: PUSH
73784: LD_INT 4
73786: ARRAY
73787: PUSH
73788: LD_VAR 0 2
73792: EQUAL
73793: AND
73794: ST_TO_ADDR
// end ;
73795: LD_VAR 0 3
73799: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73800: LD_INT 0
73802: PPUSH
// SetDir ( unit , d ) ;
73803: LD_VAR 0 1
73807: PPUSH
73808: LD_VAR 0 4
73812: PPUSH
73813: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73817: LD_VAR 0 1
73821: PPUSH
73822: LD_VAR 0 2
73826: PPUSH
73827: LD_VAR 0 3
73831: PPUSH
73832: LD_VAR 0 5
73836: PPUSH
73837: CALL_OW 48
// end ;
73841: LD_VAR 0 6
73845: RET
// export function ToNaturalNumber ( number ) ; begin
73846: LD_INT 0
73848: PPUSH
// result := number div 1 ;
73849: LD_ADDR_VAR 0 2
73853: PUSH
73854: LD_VAR 0 1
73858: PUSH
73859: LD_INT 1
73861: DIV
73862: ST_TO_ADDR
// if number < 0 then
73863: LD_VAR 0 1
73867: PUSH
73868: LD_INT 0
73870: LESS
73871: IFFALSE 73881
// result := 0 ;
73873: LD_ADDR_VAR 0 2
73877: PUSH
73878: LD_INT 0
73880: ST_TO_ADDR
// end ;
73881: LD_VAR 0 2
73885: RET
// export function SortByClass ( units , class ) ; var un ; begin
73886: LD_INT 0
73888: PPUSH
73889: PPUSH
// if not units or not class then
73890: LD_VAR 0 1
73894: NOT
73895: PUSH
73896: LD_VAR 0 2
73900: NOT
73901: OR
73902: IFFALSE 73906
// exit ;
73904: GO 74001
// result := [ ] ;
73906: LD_ADDR_VAR 0 3
73910: PUSH
73911: EMPTY
73912: ST_TO_ADDR
// for un in units do
73913: LD_ADDR_VAR 0 4
73917: PUSH
73918: LD_VAR 0 1
73922: PUSH
73923: FOR_IN
73924: IFFALSE 73999
// if GetClass ( un ) = class then
73926: LD_VAR 0 4
73930: PPUSH
73931: CALL_OW 257
73935: PUSH
73936: LD_VAR 0 2
73940: EQUAL
73941: IFFALSE 73968
// result := Insert ( result , 1 , un ) else
73943: LD_ADDR_VAR 0 3
73947: PUSH
73948: LD_VAR 0 3
73952: PPUSH
73953: LD_INT 1
73955: PPUSH
73956: LD_VAR 0 4
73960: PPUSH
73961: CALL_OW 2
73965: ST_TO_ADDR
73966: GO 73997
// result := Replace ( result , result + 1 , un ) ;
73968: LD_ADDR_VAR 0 3
73972: PUSH
73973: LD_VAR 0 3
73977: PPUSH
73978: LD_VAR 0 3
73982: PUSH
73983: LD_INT 1
73985: PLUS
73986: PPUSH
73987: LD_VAR 0 4
73991: PPUSH
73992: CALL_OW 1
73996: ST_TO_ADDR
73997: GO 73923
73999: POP
74000: POP
// end ;
74001: LD_VAR 0 3
74005: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74006: LD_INT 0
74008: PPUSH
74009: PPUSH
74010: PPUSH
74011: PPUSH
74012: PPUSH
74013: PPUSH
74014: PPUSH
// result := [ ] ;
74015: LD_ADDR_VAR 0 4
74019: PUSH
74020: EMPTY
74021: ST_TO_ADDR
// if x - r < 0 then
74022: LD_VAR 0 1
74026: PUSH
74027: LD_VAR 0 3
74031: MINUS
74032: PUSH
74033: LD_INT 0
74035: LESS
74036: IFFALSE 74048
// min_x := 0 else
74038: LD_ADDR_VAR 0 8
74042: PUSH
74043: LD_INT 0
74045: ST_TO_ADDR
74046: GO 74064
// min_x := x - r ;
74048: LD_ADDR_VAR 0 8
74052: PUSH
74053: LD_VAR 0 1
74057: PUSH
74058: LD_VAR 0 3
74062: MINUS
74063: ST_TO_ADDR
// if y - r < 0 then
74064: LD_VAR 0 2
74068: PUSH
74069: LD_VAR 0 3
74073: MINUS
74074: PUSH
74075: LD_INT 0
74077: LESS
74078: IFFALSE 74090
// min_y := 0 else
74080: LD_ADDR_VAR 0 7
74084: PUSH
74085: LD_INT 0
74087: ST_TO_ADDR
74088: GO 74106
// min_y := y - r ;
74090: LD_ADDR_VAR 0 7
74094: PUSH
74095: LD_VAR 0 2
74099: PUSH
74100: LD_VAR 0 3
74104: MINUS
74105: ST_TO_ADDR
// max_x := x + r ;
74106: LD_ADDR_VAR 0 9
74110: PUSH
74111: LD_VAR 0 1
74115: PUSH
74116: LD_VAR 0 3
74120: PLUS
74121: ST_TO_ADDR
// max_y := y + r ;
74122: LD_ADDR_VAR 0 10
74126: PUSH
74127: LD_VAR 0 2
74131: PUSH
74132: LD_VAR 0 3
74136: PLUS
74137: ST_TO_ADDR
// for _x = min_x to max_x do
74138: LD_ADDR_VAR 0 5
74142: PUSH
74143: DOUBLE
74144: LD_VAR 0 8
74148: DEC
74149: ST_TO_ADDR
74150: LD_VAR 0 9
74154: PUSH
74155: FOR_TO
74156: IFFALSE 74257
// for _y = min_y to max_y do
74158: LD_ADDR_VAR 0 6
74162: PUSH
74163: DOUBLE
74164: LD_VAR 0 7
74168: DEC
74169: ST_TO_ADDR
74170: LD_VAR 0 10
74174: PUSH
74175: FOR_TO
74176: IFFALSE 74253
// begin if not ValidHex ( _x , _y ) then
74178: LD_VAR 0 5
74182: PPUSH
74183: LD_VAR 0 6
74187: PPUSH
74188: CALL_OW 488
74192: NOT
74193: IFFALSE 74197
// continue ;
74195: GO 74175
// if GetResourceTypeXY ( _x , _y ) then
74197: LD_VAR 0 5
74201: PPUSH
74202: LD_VAR 0 6
74206: PPUSH
74207: CALL_OW 283
74211: IFFALSE 74251
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74213: LD_ADDR_VAR 0 4
74217: PUSH
74218: LD_VAR 0 4
74222: PPUSH
74223: LD_VAR 0 4
74227: PUSH
74228: LD_INT 1
74230: PLUS
74231: PPUSH
74232: LD_VAR 0 5
74236: PUSH
74237: LD_VAR 0 6
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PPUSH
74246: CALL_OW 1
74250: ST_TO_ADDR
// end ;
74251: GO 74175
74253: POP
74254: POP
74255: GO 74155
74257: POP
74258: POP
// end ;
74259: LD_VAR 0 4
74263: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74264: LD_INT 0
74266: PPUSH
74267: PPUSH
74268: PPUSH
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
74273: PPUSH
// if not units then
74274: LD_VAR 0 1
74278: NOT
74279: IFFALSE 74283
// exit ;
74281: GO 74807
// result := UnitFilter ( units , [ f_ok ] ) ;
74283: LD_ADDR_VAR 0 3
74287: PUSH
74288: LD_VAR 0 1
74292: PPUSH
74293: LD_INT 50
74295: PUSH
74296: EMPTY
74297: LIST
74298: PPUSH
74299: CALL_OW 72
74303: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74304: LD_ADDR_VAR 0 8
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: LD_INT 1
74316: ARRAY
74317: PPUSH
74318: CALL_OW 255
74322: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74323: LD_ADDR_VAR 0 10
74327: PUSH
74328: LD_INT 29
74330: PUSH
74331: LD_INT 91
74333: PUSH
74334: LD_INT 49
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: LIST
74341: ST_TO_ADDR
// if not result then
74342: LD_VAR 0 3
74346: NOT
74347: IFFALSE 74351
// exit ;
74349: GO 74807
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74351: LD_ADDR_VAR 0 5
74355: PUSH
74356: LD_INT 81
74358: PUSH
74359: LD_VAR 0 8
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: PPUSH
74368: CALL_OW 69
74372: ST_TO_ADDR
// for i in result do
74373: LD_ADDR_VAR 0 4
74377: PUSH
74378: LD_VAR 0 3
74382: PUSH
74383: FOR_IN
74384: IFFALSE 74805
// begin tag := GetTag ( i ) + 1 ;
74386: LD_ADDR_VAR 0 9
74390: PUSH
74391: LD_VAR 0 4
74395: PPUSH
74396: CALL_OW 110
74400: PUSH
74401: LD_INT 1
74403: PLUS
74404: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74405: LD_ADDR_VAR 0 7
74409: PUSH
74410: LD_VAR 0 4
74414: PPUSH
74415: CALL_OW 250
74419: PPUSH
74420: LD_VAR 0 4
74424: PPUSH
74425: CALL_OW 251
74429: PPUSH
74430: LD_INT 6
74432: PPUSH
74433: CALL 74006 0 3
74437: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74438: LD_VAR 0 4
74442: PPUSH
74443: CALL_OW 247
74447: PUSH
74448: LD_INT 2
74450: EQUAL
74451: PUSH
74452: LD_VAR 0 7
74456: AND
74457: PUSH
74458: LD_VAR 0 4
74462: PPUSH
74463: CALL_OW 264
74467: PUSH
74468: LD_VAR 0 10
74472: IN
74473: NOT
74474: AND
74475: IFFALSE 74514
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74477: LD_VAR 0 4
74481: PPUSH
74482: LD_VAR 0 7
74486: PUSH
74487: LD_INT 1
74489: ARRAY
74490: PUSH
74491: LD_INT 1
74493: ARRAY
74494: PPUSH
74495: LD_VAR 0 7
74499: PUSH
74500: LD_INT 1
74502: ARRAY
74503: PUSH
74504: LD_INT 2
74506: ARRAY
74507: PPUSH
74508: CALL_OW 116
74512: GO 74803
// if path > tag then
74514: LD_VAR 0 2
74518: PUSH
74519: LD_VAR 0 9
74523: GREATER
74524: IFFALSE 74732
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74526: LD_ADDR_VAR 0 6
74530: PUSH
74531: LD_VAR 0 5
74535: PPUSH
74536: LD_INT 91
74538: PUSH
74539: LD_VAR 0 4
74543: PUSH
74544: LD_INT 8
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: LIST
74551: PPUSH
74552: CALL_OW 72
74556: ST_TO_ADDR
// if nearEnemy then
74557: LD_VAR 0 6
74561: IFFALSE 74630
// begin if GetWeapon ( i ) = ru_time_lapser then
74563: LD_VAR 0 4
74567: PPUSH
74568: CALL_OW 264
74572: PUSH
74573: LD_INT 49
74575: EQUAL
74576: IFFALSE 74604
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74578: LD_VAR 0 4
74582: PPUSH
74583: LD_VAR 0 6
74587: PPUSH
74588: LD_VAR 0 4
74592: PPUSH
74593: CALL_OW 74
74597: PPUSH
74598: CALL_OW 112
74602: GO 74628
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74604: LD_VAR 0 4
74608: PPUSH
74609: LD_VAR 0 6
74613: PPUSH
74614: LD_VAR 0 4
74618: PPUSH
74619: CALL_OW 74
74623: PPUSH
74624: CALL_OW 115
// end else
74628: GO 74730
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74630: LD_VAR 0 4
74634: PPUSH
74635: LD_VAR 0 2
74639: PUSH
74640: LD_VAR 0 9
74644: ARRAY
74645: PUSH
74646: LD_INT 1
74648: ARRAY
74649: PPUSH
74650: LD_VAR 0 2
74654: PUSH
74655: LD_VAR 0 9
74659: ARRAY
74660: PUSH
74661: LD_INT 2
74663: ARRAY
74664: PPUSH
74665: CALL_OW 297
74669: PUSH
74670: LD_INT 6
74672: GREATER
74673: IFFALSE 74716
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74675: LD_VAR 0 4
74679: PPUSH
74680: LD_VAR 0 2
74684: PUSH
74685: LD_VAR 0 9
74689: ARRAY
74690: PUSH
74691: LD_INT 1
74693: ARRAY
74694: PPUSH
74695: LD_VAR 0 2
74699: PUSH
74700: LD_VAR 0 9
74704: ARRAY
74705: PUSH
74706: LD_INT 2
74708: ARRAY
74709: PPUSH
74710: CALL_OW 114
74714: GO 74730
// SetTag ( i , tag ) ;
74716: LD_VAR 0 4
74720: PPUSH
74721: LD_VAR 0 9
74725: PPUSH
74726: CALL_OW 109
// end else
74730: GO 74803
// if enemy then
74732: LD_VAR 0 5
74736: IFFALSE 74803
// begin if GetWeapon ( i ) = ru_time_lapser then
74738: LD_VAR 0 4
74742: PPUSH
74743: CALL_OW 264
74747: PUSH
74748: LD_INT 49
74750: EQUAL
74751: IFFALSE 74779
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74753: LD_VAR 0 4
74757: PPUSH
74758: LD_VAR 0 5
74762: PPUSH
74763: LD_VAR 0 4
74767: PPUSH
74768: CALL_OW 74
74772: PPUSH
74773: CALL_OW 112
74777: GO 74803
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74779: LD_VAR 0 4
74783: PPUSH
74784: LD_VAR 0 5
74788: PPUSH
74789: LD_VAR 0 4
74793: PPUSH
74794: CALL_OW 74
74798: PPUSH
74799: CALL_OW 115
// end ; end ;
74803: GO 74383
74805: POP
74806: POP
// end ;
74807: LD_VAR 0 3
74811: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74812: LD_INT 0
74814: PPUSH
74815: PPUSH
74816: PPUSH
// if not unit or IsInUnit ( unit ) then
74817: LD_VAR 0 1
74821: NOT
74822: PUSH
74823: LD_VAR 0 1
74827: PPUSH
74828: CALL_OW 310
74832: OR
74833: IFFALSE 74837
// exit ;
74835: GO 74928
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74837: LD_ADDR_VAR 0 4
74841: PUSH
74842: LD_VAR 0 1
74846: PPUSH
74847: CALL_OW 250
74851: PPUSH
74852: LD_VAR 0 2
74856: PPUSH
74857: LD_INT 1
74859: PPUSH
74860: CALL_OW 272
74864: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74865: LD_ADDR_VAR 0 5
74869: PUSH
74870: LD_VAR 0 1
74874: PPUSH
74875: CALL_OW 251
74879: PPUSH
74880: LD_VAR 0 2
74884: PPUSH
74885: LD_INT 1
74887: PPUSH
74888: CALL_OW 273
74892: ST_TO_ADDR
// if ValidHex ( x , y ) then
74893: LD_VAR 0 4
74897: PPUSH
74898: LD_VAR 0 5
74902: PPUSH
74903: CALL_OW 488
74907: IFFALSE 74928
// ComTurnXY ( unit , x , y ) ;
74909: LD_VAR 0 1
74913: PPUSH
74914: LD_VAR 0 4
74918: PPUSH
74919: LD_VAR 0 5
74923: PPUSH
74924: CALL_OW 118
// end ;
74928: LD_VAR 0 3
74932: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74933: LD_INT 0
74935: PPUSH
74936: PPUSH
// result := false ;
74937: LD_ADDR_VAR 0 3
74941: PUSH
74942: LD_INT 0
74944: ST_TO_ADDR
// if not units then
74945: LD_VAR 0 2
74949: NOT
74950: IFFALSE 74954
// exit ;
74952: GO 74999
// for i in units do
74954: LD_ADDR_VAR 0 4
74958: PUSH
74959: LD_VAR 0 2
74963: PUSH
74964: FOR_IN
74965: IFFALSE 74997
// if See ( side , i ) then
74967: LD_VAR 0 1
74971: PPUSH
74972: LD_VAR 0 4
74976: PPUSH
74977: CALL_OW 292
74981: IFFALSE 74995
// begin result := true ;
74983: LD_ADDR_VAR 0 3
74987: PUSH
74988: LD_INT 1
74990: ST_TO_ADDR
// exit ;
74991: POP
74992: POP
74993: GO 74999
// end ;
74995: GO 74964
74997: POP
74998: POP
// end ;
74999: LD_VAR 0 3
75003: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75004: LD_INT 0
75006: PPUSH
75007: PPUSH
75008: PPUSH
75009: PPUSH
// if not unit or not points then
75010: LD_VAR 0 1
75014: NOT
75015: PUSH
75016: LD_VAR 0 2
75020: NOT
75021: OR
75022: IFFALSE 75026
// exit ;
75024: GO 75116
// dist := 99999 ;
75026: LD_ADDR_VAR 0 5
75030: PUSH
75031: LD_INT 99999
75033: ST_TO_ADDR
// for i in points do
75034: LD_ADDR_VAR 0 4
75038: PUSH
75039: LD_VAR 0 2
75043: PUSH
75044: FOR_IN
75045: IFFALSE 75114
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75047: LD_ADDR_VAR 0 6
75051: PUSH
75052: LD_VAR 0 1
75056: PPUSH
75057: LD_VAR 0 4
75061: PUSH
75062: LD_INT 1
75064: ARRAY
75065: PPUSH
75066: LD_VAR 0 4
75070: PUSH
75071: LD_INT 2
75073: ARRAY
75074: PPUSH
75075: CALL_OW 297
75079: ST_TO_ADDR
// if tmpDist < dist then
75080: LD_VAR 0 6
75084: PUSH
75085: LD_VAR 0 5
75089: LESS
75090: IFFALSE 75112
// begin result := i ;
75092: LD_ADDR_VAR 0 3
75096: PUSH
75097: LD_VAR 0 4
75101: ST_TO_ADDR
// dist := tmpDist ;
75102: LD_ADDR_VAR 0 5
75106: PUSH
75107: LD_VAR 0 6
75111: ST_TO_ADDR
// end ; end ;
75112: GO 75044
75114: POP
75115: POP
// end ;
75116: LD_VAR 0 3
75120: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75121: LD_INT 0
75123: PPUSH
// uc_side := side ;
75124: LD_ADDR_OWVAR 20
75128: PUSH
75129: LD_VAR 0 1
75133: ST_TO_ADDR
// uc_nation := 3 ;
75134: LD_ADDR_OWVAR 21
75138: PUSH
75139: LD_INT 3
75141: ST_TO_ADDR
// vc_chassis := 25 ;
75142: LD_ADDR_OWVAR 37
75146: PUSH
75147: LD_INT 25
75149: ST_TO_ADDR
// vc_engine := engine_siberite ;
75150: LD_ADDR_OWVAR 39
75154: PUSH
75155: LD_INT 3
75157: ST_TO_ADDR
// vc_control := control_computer ;
75158: LD_ADDR_OWVAR 38
75162: PUSH
75163: LD_INT 3
75165: ST_TO_ADDR
// vc_weapon := 59 ;
75166: LD_ADDR_OWVAR 40
75170: PUSH
75171: LD_INT 59
75173: ST_TO_ADDR
// result := CreateVehicle ;
75174: LD_ADDR_VAR 0 5
75178: PUSH
75179: CALL_OW 45
75183: ST_TO_ADDR
// SetDir ( result , d ) ;
75184: LD_VAR 0 5
75188: PPUSH
75189: LD_VAR 0 4
75193: PPUSH
75194: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75198: LD_VAR 0 5
75202: PPUSH
75203: LD_VAR 0 2
75207: PPUSH
75208: LD_VAR 0 3
75212: PPUSH
75213: LD_INT 0
75215: PPUSH
75216: CALL_OW 48
// end ;
75220: LD_VAR 0 5
75224: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75225: LD_INT 0
75227: PPUSH
75228: PPUSH
75229: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75230: LD_ADDR_VAR 0 2
75234: PUSH
75235: LD_INT 0
75237: PUSH
75238: LD_INT 0
75240: PUSH
75241: LD_INT 0
75243: PUSH
75244: LD_INT 0
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75253: LD_VAR 0 1
75257: NOT
75258: PUSH
75259: LD_VAR 0 1
75263: PPUSH
75264: CALL_OW 264
75268: PUSH
75269: LD_INT 12
75271: PUSH
75272: LD_INT 51
75274: PUSH
75275: LD_INT 32
75277: PUSH
75278: LD_INT 89
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: IN
75287: NOT
75288: OR
75289: IFFALSE 75293
// exit ;
75291: GO 75391
// for i := 1 to 3 do
75293: LD_ADDR_VAR 0 3
75297: PUSH
75298: DOUBLE
75299: LD_INT 1
75301: DEC
75302: ST_TO_ADDR
75303: LD_INT 3
75305: PUSH
75306: FOR_TO
75307: IFFALSE 75389
// begin tmp := GetCargo ( cargo , i ) ;
75309: LD_ADDR_VAR 0 4
75313: PUSH
75314: LD_VAR 0 1
75318: PPUSH
75319: LD_VAR 0 3
75323: PPUSH
75324: CALL_OW 289
75328: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75329: LD_ADDR_VAR 0 2
75333: PUSH
75334: LD_VAR 0 2
75338: PPUSH
75339: LD_VAR 0 3
75343: PPUSH
75344: LD_VAR 0 4
75348: PPUSH
75349: CALL_OW 1
75353: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75354: LD_ADDR_VAR 0 2
75358: PUSH
75359: LD_VAR 0 2
75363: PPUSH
75364: LD_INT 4
75366: PPUSH
75367: LD_VAR 0 2
75371: PUSH
75372: LD_INT 4
75374: ARRAY
75375: PUSH
75376: LD_VAR 0 4
75380: PLUS
75381: PPUSH
75382: CALL_OW 1
75386: ST_TO_ADDR
// end ;
75387: GO 75306
75389: POP
75390: POP
// end ;
75391: LD_VAR 0 2
75395: RET
// export function Length ( array ) ; begin
75396: LD_INT 0
75398: PPUSH
// result := array + 0 ;
75399: LD_ADDR_VAR 0 2
75403: PUSH
75404: LD_VAR 0 1
75408: PUSH
75409: LD_INT 0
75411: PLUS
75412: ST_TO_ADDR
// end ;
75413: LD_VAR 0 2
75417: RET
// export function PrepareArray ( array ) ; begin
75418: LD_INT 0
75420: PPUSH
// result := array diff 0 ;
75421: LD_ADDR_VAR 0 2
75425: PUSH
75426: LD_VAR 0 1
75430: PUSH
75431: LD_INT 0
75433: DIFF
75434: ST_TO_ADDR
// if not result [ 1 ] then
75435: LD_VAR 0 2
75439: PUSH
75440: LD_INT 1
75442: ARRAY
75443: NOT
75444: IFFALSE 75464
// result := Delete ( result , 1 ) ;
75446: LD_ADDR_VAR 0 2
75450: PUSH
75451: LD_VAR 0 2
75455: PPUSH
75456: LD_INT 1
75458: PPUSH
75459: CALL_OW 3
75463: ST_TO_ADDR
// end ; end_of_file
75464: LD_VAR 0 2
75468: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75469: LD_VAR 0 1
75473: PUSH
75474: LD_INT 200
75476: DOUBLE
75477: GREATEREQUAL
75478: IFFALSE 75486
75480: LD_INT 299
75482: DOUBLE
75483: LESSEQUAL
75484: IFTRUE 75488
75486: GO 75520
75488: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75489: LD_VAR 0 1
75493: PPUSH
75494: LD_VAR 0 2
75498: PPUSH
75499: LD_VAR 0 3
75503: PPUSH
75504: LD_VAR 0 4
75508: PPUSH
75509: LD_VAR 0 5
75513: PPUSH
75514: CALL 14722 0 5
75518: GO 75597
75520: LD_INT 300
75522: DOUBLE
75523: GREATEREQUAL
75524: IFFALSE 75532
75526: LD_INT 399
75528: DOUBLE
75529: LESSEQUAL
75530: IFTRUE 75534
75532: GO 75596
75534: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75535: LD_VAR 0 1
75539: PPUSH
75540: LD_VAR 0 2
75544: PPUSH
75545: LD_VAR 0 3
75549: PPUSH
75550: LD_VAR 0 4
75554: PPUSH
75555: LD_VAR 0 5
75559: PPUSH
75560: LD_VAR 0 6
75564: PPUSH
75565: LD_VAR 0 7
75569: PPUSH
75570: LD_VAR 0 8
75574: PPUSH
75575: LD_VAR 0 9
75579: PPUSH
75580: LD_VAR 0 10
75584: PPUSH
75585: LD_VAR 0 11
75589: PPUSH
75590: CALL 30993 0 11
75594: GO 75597
75596: POP
// end ;
75597: PPOPN 11
75599: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75600: LD_VAR 0 1
75604: PPUSH
75605: LD_VAR 0 2
75609: PPUSH
75610: LD_VAR 0 3
75614: PPUSH
75615: LD_VAR 0 4
75619: PPUSH
75620: LD_VAR 0 5
75624: PPUSH
75625: CALL 14458 0 5
// end ; end_of_file
75629: PPOPN 5
75631: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75632: LD_VAR 0 1
75636: PPUSH
75637: LD_VAR 0 2
75641: PPUSH
75642: LD_VAR 0 3
75646: PPUSH
75647: LD_VAR 0 4
75651: PPUSH
75652: LD_VAR 0 5
75656: PPUSH
75657: LD_VAR 0 6
75661: PPUSH
75662: CALL 18686 0 6
// end ;
75666: PPOPN 6
75668: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75669: LD_INT 0
75671: PPUSH
// begin if not units then
75672: LD_VAR 0 1
75676: NOT
75677: IFFALSE 75681
// exit ;
75679: GO 75681
// end ;
75681: PPOPN 7
75683: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75684: CALL 18657 0 0
// end ;
75688: PPOPN 1
75690: END
