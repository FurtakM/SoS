// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 752 0 2
// PrepareArabian ;
  31: CALL 1369 0 0
// PrepareRussian ;
  35: CALL 3020 0 0
// Action ;
  39: CALL 8440 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: PUSH
 281: LD_EXP 9
 285: NOT
 286: AND
 287: PUSH
 288: LD_EXP 39
 292: NOT
 293: AND
 294: PUSH
 295: LD_EXP 40
 299: NOT
 300: AND
 301: IFFALSE 313
 303: GO 305
 305: DISABLE
// SetAchievement ( ACH_EXT ) ;
 306: LD_STRING ACH_EXT
 308: PPUSH
 309: CALL_OW 543
 313: END
// every 0 0$1 trigger captureCounter >= 6 do
 314: LD_EXP 18
 318: PUSH
 319: LD_INT 6
 321: GREATEREQUAL
 322: IFFALSE 334
 324: GO 326
 326: DISABLE
// SetAchievement ( ACH_KEY ) ;
 327: LD_STRING ACH_KEY
 329: PPUSH
 330: CALL_OW 543
 334: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 335: LD_EXP 19
 339: PUSH
 340: LD_INT 3
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 348: LD_STRING ACH_CHEM
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger debug do var i ;
 356: LD_EXP 1
 360: IFFALSE 444
 362: GO 364
 364: DISABLE
 365: LD_INT 0
 367: PPUSH
// begin enable ;
 368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 369: LD_ADDR_VAR 0 1
 373: PUSH
 374: LD_INT 22
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 3
 386: PUSH
 387: LD_INT 21
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 442
// if GetLives ( i ) < 1000 then
 413: LD_VAR 0 1
 417: PPUSH
 418: CALL_OW 256
 422: PUSH
 423: LD_INT 1000
 425: LESS
 426: IFFALSE 440
// SetLives ( i , 1000 ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_INT 1000
 435: PPUSH
 436: CALL_OW 234
 440: GO 410
 442: POP
 443: POP
// end ; end_of_file
 444: PPOPN 1
 446: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 447: LD_INT 0
 449: PPUSH
// uc_side := side ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_VAR 0 1
 459: ST_TO_ADDR
// uc_nation := nation ;
 460: LD_ADDR_OWVAR 21
 464: PUSH
 465: LD_VAR 0 2
 469: ST_TO_ADDR
// vc_chassis := chassis ;
 470: LD_ADDR_OWVAR 37
 474: PUSH
 475: LD_VAR 0 3
 479: ST_TO_ADDR
// vc_engine := engine ;
 480: LD_ADDR_OWVAR 39
 484: PUSH
 485: LD_VAR 0 4
 489: ST_TO_ADDR
// vc_control := control ;
 490: LD_ADDR_OWVAR 38
 494: PUSH
 495: LD_VAR 0 5
 499: ST_TO_ADDR
// vc_weapon := weapon ;
 500: LD_ADDR_OWVAR 40
 504: PUSH
 505: LD_VAR 0 6
 509: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 510: LD_ADDR_OWVAR 41
 514: PUSH
 515: LD_VAR 0 7
 519: ST_TO_ADDR
// result := CreateVehicle ;
 520: LD_ADDR_VAR 0 8
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// end ;
 530: LD_VAR 0 8
 534: RET
// export function SayX ( units , ident ) ; var i ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// result := false ;
 539: LD_ADDR_VAR 0 3
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// if not units then
 547: LD_VAR 0 1
 551: NOT
 552: IFFALSE 556
// exit ;
 554: GO 610
// for i in units do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: LD_VAR 0 1
 565: PUSH
 566: FOR_IN
 567: IFFALSE 608
// if IsOk ( i ) then
 569: LD_VAR 0 4
 573: PPUSH
 574: CALL_OW 302
 578: IFFALSE 606
// begin Say ( i , ident ) ;
 580: LD_VAR 0 4
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 88
// result := i ;
 594: LD_ADDR_VAR 0 3
 598: PUSH
 599: LD_VAR 0 4
 603: ST_TO_ADDR
// break ;
 604: GO 608
// end ;
 606: GO 566
 608: POP
 609: POP
// end ;
 610: LD_VAR 0 3
 614: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 615: LD_INT 0
 617: PPUSH
 618: PPUSH
// InitUc ;
 619: CALL_OW 18
// InitHc ;
 623: CALL_OW 19
// uc_side := 0 ;
 627: LD_ADDR_OWVAR 20
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// uc_nation := 0 ;
 635: LD_ADDR_OWVAR 21
 639: PUSH
 640: LD_INT 0
 642: ST_TO_ADDR
// for i = 1 to amount do
 643: LD_ADDR_VAR 0 4
 647: PUSH
 648: DOUBLE
 649: LD_INT 1
 651: DEC
 652: ST_TO_ADDR
 653: LD_VAR 0 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 741
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 661: LD_ADDR_OWVAR 29
 665: PUSH
 666: LD_INT 9
 668: PPUSH
 669: LD_INT 12
 671: PPUSH
 672: CALL_OW 12
 676: PUSH
 677: LD_INT 9
 679: PPUSH
 680: LD_INT 12
 682: PPUSH
 683: CALL_OW 12
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 692: LD_ADDR_OWVAR 35
 696: PUSH
 697: LD_INT 1
 699: NEG
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 12
 708: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 12
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 722: CALL_OW 44
 726: PPUSH
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 49
// end ;
 739: GO 658
 741: POP
 742: POP
// InitHc ;
 743: CALL_OW 19
// end ;
 747: LD_VAR 0 3
 751: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
// uc_side := 0 ;
 756: LD_ADDR_OWVAR 20
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// uc_nation := 0 ;
 764: LD_ADDR_OWVAR 21
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// for i := 1 to 3 do
 772: LD_ADDR_VAR 0 4
 776: PUSH
 777: DOUBLE
 778: LD_INT 1
 780: DEC
 781: ST_TO_ADDR
 782: LD_INT 3
 784: PUSH
 785: FOR_TO
 786: IFFALSE 823
// begin hc_class := 21 ;
 788: LD_ADDR_OWVAR 28
 792: PUSH
 793: LD_INT 21
 795: ST_TO_ADDR
// hc_gallery :=  ;
 796: LD_ADDR_OWVAR 33
 800: PUSH
 801: LD_STRING 
 803: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 804: CALL_OW 44
 808: PPUSH
 809: LD_VAR 0 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 785
 823: POP
 824: POP
// for i := 1 to 3 do
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: DOUBLE
 831: LD_INT 1
 833: DEC
 834: ST_TO_ADDR
 835: LD_INT 3
 837: PUSH
 838: FOR_TO
 839: IFFALSE 876
// begin hc_class := 18 ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 18
 848: ST_TO_ADDR
// hc_gallery :=  ;
 849: LD_ADDR_OWVAR 33
 853: PUSH
 854: LD_STRING 
 856: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 857: CALL_OW 44
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// end ;
 874: GO 838
 876: POP
 877: POP
// for i := 1 to 3 do
 878: LD_ADDR_VAR 0 4
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 3
 890: PUSH
 891: FOR_TO
 892: IFFALSE 929
// begin hc_class := 13 ;
 894: LD_ADDR_OWVAR 28
 898: PUSH
 899: LD_INT 13
 901: ST_TO_ADDR
// hc_gallery :=  ;
 902: LD_ADDR_OWVAR 33
 906: PUSH
 907: LD_STRING 
 909: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 910: CALL_OW 44
 914: PPUSH
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 49
// end ;
 927: GO 891
 929: POP
 930: POP
// for i := 1 to 4 do
 931: LD_ADDR_VAR 0 4
 935: PUSH
 936: DOUBLE
 937: LD_INT 1
 939: DEC
 940: ST_TO_ADDR
 941: LD_INT 4
 943: PUSH
 944: FOR_TO
 945: IFFALSE 982
// begin hc_class := class_frog ;
 947: LD_ADDR_OWVAR 28
 951: PUSH
 952: LD_INT 19
 954: ST_TO_ADDR
// hc_gallery :=  ;
 955: LD_ADDR_OWVAR 33
 959: PUSH
 960: LD_STRING 
 962: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 963: CALL_OW 44
 967: PPUSH
 968: LD_VAR 0 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: GO 944
 982: POP
 983: POP
// end ;
 984: LD_VAR 0 3
 988: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
 993: PPUSH
// if not observer or not unit then
 994: LD_VAR 0 1
 998: NOT
 999: PUSH
1000: LD_VAR 0 2
1004: NOT
1005: OR
1006: IFFALSE 1010
// exit ;
1008: GO 1058
// if not See ( GetSide ( observer ) , unit ) then
1010: LD_VAR 0 1
1014: PPUSH
1015: CALL_OW 255
1019: PPUSH
1020: LD_VAR 0 2
1024: PPUSH
1025: CALL_OW 292
1029: NOT
1030: IFFALSE 1034
// exit ;
1032: GO 1058
// result := GetDistUnits ( observer , unit ) < 12 ;
1034: LD_ADDR_VAR 0 3
1038: PUSH
1039: LD_VAR 0 1
1043: PPUSH
1044: LD_VAR 0 2
1048: PPUSH
1049: CALL_OW 296
1053: PUSH
1054: LD_INT 12
1056: LESS
1057: ST_TO_ADDR
// end ;
1058: LD_VAR 0 3
1062: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1063: LD_INT 0
1065: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1066: LD_VAR 0 2
1070: PUSH
1071: LD_INT 1
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: CALL_OW 488
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 2
1102: PUSH
1103: LD_INT 2
1105: ARRAY
1106: PPUSH
1107: CALL_OW 428
1111: PUSH
1112: LD_INT 0
1114: EQUAL
1115: AND
1116: IFFALSE 1150
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1118: LD_VAR 0 1
1122: PPUSH
1123: LD_VAR 0 2
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PPUSH
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 3
1145: PPUSH
1146: CALL_OW 48
// end ;
1150: LD_VAR 0 4
1154: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1155: LD_INT 0
1157: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1182: LD_VAR 0 1
1186: PPUSH
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_VAR 0 3
1196: PPUSH
1197: CALL_OW 331
// end ;
1201: LD_VAR 0 5
1205: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1206: LD_INT 0
1208: PPUSH
// if not units then
1209: LD_VAR 0 1
1213: NOT
1214: IFFALSE 1218
// exit ;
1216: GO 1301
// result := true ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PPUSH
1255: CALL_OW 88
1259: NOT
1260: IFFALSE 1301
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 26
1274: PUSH
1275: LD_INT 2
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 72
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 3
1295: PPUSH
1296: CALL_OW 88
1300: ST_TO_ADDR
// end ;
1301: LD_VAR 0 4
1305: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1306: LD_INT 0
1308: PPUSH
1309: PPUSH
// if not group then
1310: LD_VAR 0 2
1314: NOT
1315: IFFALSE 1319
// exit ;
1317: GO 1364
// for i in group do
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1362
// if See ( side , i ) then
1332: LD_VAR 0 1
1336: PPUSH
1337: LD_VAR 0 4
1341: PPUSH
1342: CALL_OW 292
1346: IFFALSE 1360
// begin result := true ;
1348: LD_ADDR_VAR 0 3
1352: PUSH
1353: LD_INT 1
1355: ST_TO_ADDR
// exit ;
1356: POP
1357: POP
1358: GO 1364
// end ;
1360: GO 1329
1362: POP
1363: POP
// end ; end_of_file
1364: LD_VAR 0 3
1368: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1369: LD_INT 0
1371: PPUSH
1372: PPUSH
// uc_side := 2 ;
1373: LD_ADDR_OWVAR 20
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// uc_nation := 2 ;
1381: LD_ADDR_OWVAR 21
1385: PUSH
1386: LD_INT 2
1388: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 21
1393: PUSH
1394: LD_STRING Heike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 35575 0 3
1412: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 24
1417: PUSH
1418: LD_STRING Ibrahim
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 35575 0 3
1436: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1437: LD_ADDR_EXP 22
1441: PUSH
1442: LD_STRING Givi
1444: PPUSH
1445: LD_EXP 1
1449: NOT
1450: PPUSH
1451: LD_EXP 2
1455: PPUSH
1456: CALL 35575 0 3
1460: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1461: LD_ADDR_EXP 25
1465: PUSH
1466: LD_STRING Kamil
1468: PPUSH
1469: LD_EXP 1
1473: NOT
1474: PPUSH
1475: LD_EXP 2
1479: PPUSH
1480: CALL 35575 0 3
1484: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1485: LD_ADDR_EXP 26
1489: PUSH
1490: LD_STRING Kaia
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_EXP 2
1503: PPUSH
1504: CALL 35575 0 3
1508: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Sophia
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 35575 0 3
1532: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1533: LD_ADDR_EXP 28
1537: PUSH
1538: LD_STRING Markov
1540: PPUSH
1541: LD_EXP 1
1545: NOT
1546: PPUSH
1547: LD_EXP 2
1551: PPUSH
1552: CALL 35575 0 3
1556: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 33
1561: PUSH
1562: LD_STRING Aviradze
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 35575 0 3
1580: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1581: LD_ADDR_EXP 32
1585: PUSH
1586: LD_STRING Kurt
1588: PPUSH
1589: LD_EXP 1
1593: NOT
1594: PPUSH
1595: LD_EXP 2
1599: PPUSH
1600: CALL 35575 0 3
1604: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1605: LD_ADDR_EXP 23
1609: PUSH
1610: LD_STRING Mike
1612: PPUSH
1613: LD_EXP 1
1617: NOT
1618: PPUSH
1619: LD_EXP 2
1623: PPUSH
1624: CALL 35575 0 3
1628: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1629: LD_ADDR_EXP 30
1633: PUSH
1634: LD_STRING Olaf
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: LD_STRING 
1642: PPUSH
1643: CALL 35575 0 3
1647: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1648: LD_ADDR_EXP 34
1652: PUSH
1653: LD_STRING 04_2_others
1655: PPUSH
1656: CALL_OW 31
1660: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING 04_2_apes
1668: PPUSH
1669: CALL_OW 31
1673: ST_TO_ADDR
// if hasFlamethrower then
1674: LD_EXP 3
1678: IFFALSE 1913
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1680: LD_INT 70
1682: PPUSH
1683: LD_INT 2
1685: PPUSH
1686: LD_INT 2
1688: PPUSH
1689: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1693: LD_ADDR_EXP 35
1697: PUSH
1698: LD_INT 13
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 27
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 13
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 25
1746: PUSH
1747: LD_INT 2
1749: PUSH
1750: LD_INT 1000
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: LD_INT 0
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 26
1783: PUSH
1784: LD_INT 2
1786: PUSH
1787: LD_INT 1000
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 13
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: LD_INT 27
1820: PUSH
1821: LD_INT 2
1823: PUSH
1824: LD_INT 1000
1826: PUSH
1827: LD_INT 0
1829: PUSH
1830: LD_INT 0
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 13
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: LD_INT 32
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: LD_INT 1000
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: LD_INT 60
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 20
1875: PUSH
1876: LD_INT 10
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_OWVAR 67
1889: ARRAY
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: ST_TO_ADDR
// end else
1911: GO 2131
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1913: LD_ADDR_EXP 35
1917: PUSH
1918: LD_INT 13
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 25
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 1000
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 13
1957: PUSH
1958: LD_INT 1
1960: PUSH
1961: LD_INT 1
1963: PUSH
1964: LD_INT 27
1966: PUSH
1967: LD_INT 2
1969: PUSH
1970: LD_INT 1000
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 13
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: LD_INT 24
2003: PUSH
2004: LD_INT 2
2006: PUSH
2007: LD_INT 1000
2009: PUSH
2010: LD_INT 0
2012: PUSH
2013: LD_INT 0
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 13
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 27
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 1000
2046: PUSH
2047: LD_INT 0
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 13
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: LD_INT 1000
2083: PUSH
2084: LD_INT 0
2086: PUSH
2087: LD_INT 50
2089: PUSH
2090: LD_INT 30
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 10
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_OWVAR 67
2109: ARRAY
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: ST_TO_ADDR
// end ; uc_side := 5 ;
2131: LD_ADDR_OWVAR 20
2135: PUSH
2136: LD_INT 5
2138: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2139: LD_ADDR_EXP 29
2143: PUSH
2144: LD_STRING Abdul
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: LD_STRING 
2152: PPUSH
2153: CALL 35575 0 3
2157: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2158: LD_ADDR_EXP 31
2162: PUSH
2163: LD_STRING Omar
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: LD_STRING 
2171: PPUSH
2172: CALL 35575 0 3
2176: ST_TO_ADDR
// end ;
2177: LD_VAR 0 1
2181: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2182: LD_INT 0
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
// pfx := 04_1_ ;
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: LD_STRING 04_1_
2196: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2197: LD_INT 10
2199: PPUSH
2200: LD_INT 16
2202: PPUSH
2203: CALL_OW 428
2207: IFFALSE 2232
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2209: LD_INT 10
2211: PPUSH
2212: LD_INT 16
2214: PPUSH
2215: CALL_OW 428
2219: PPUSH
2220: LD_INT 18
2222: PPUSH
2223: LD_INT 18
2225: PPUSH
2226: CALL_OW 111
2230: GO 2242
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2232: LD_INT 1
2234: PPUSH
2235: LD_INT 14
2237: PPUSH
2238: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2242: LD_INT 35
2244: PPUSH
2245: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2249: LD_INT 10
2251: PPUSH
2252: LD_INT 16
2254: PPUSH
2255: CALL_OW 428
2259: NOT
2260: IFFALSE 2242
// tmp := [ ] ;
2262: LD_ADDR_VAR 0 4
2266: PUSH
2267: EMPTY
2268: ST_TO_ADDR
// uc_side := 5 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 5
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2285: LD_ADDR_EXP 33
2289: PUSH
2290: LD_STRING Aviradze_L
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_VAR 0 2
2303: PPUSH
2304: CALL 35575 0 3
2308: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2309: LD_EXP 33
2313: PPUSH
2314: LD_INT 2
2316: PPUSH
2317: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2321: LD_EXP 33
2325: PPUSH
2326: LD_INT 14
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2336: LD_EXP 33
2340: PPUSH
2341: LD_INT 25
2343: PPUSH
2344: LD_INT 19
2346: PPUSH
2347: CALL_OW 111
// AddComHold ( Aviradze ) ;
2351: LD_EXP 33
2355: PPUSH
2356: CALL_OW 200
// tmp := [ Aviradze ] ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_EXP 33
2369: PUSH
2370: EMPTY
2371: LIST
2372: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2373: LD_INT 70
2375: PPUSH
2376: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2380: LD_STRING Ibrahim_L
2382: PPUSH
2383: LD_EXP 1
2387: NOT
2388: PPUSH
2389: LD_VAR 0 2
2393: PPUSH
2394: CALL 35575 0 3
2398: IFFALSE 2498
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2400: LD_ADDR_EXP 24
2404: PUSH
2405: LD_STRING Ibrahim_L
2407: PPUSH
2408: LD_EXP 1
2412: NOT
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 35575 0 3
2423: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2424: LD_EXP 24
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2436: LD_EXP 24
2440: PPUSH
2441: LD_INT 14
2443: PPUSH
2444: LD_INT 0
2446: PPUSH
2447: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2451: LD_EXP 24
2455: PPUSH
2456: LD_INT 25
2458: PPUSH
2459: LD_INT 19
2461: PPUSH
2462: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2475: LD_ADDR_VAR 0 4
2479: PUSH
2480: LD_VAR 0 4
2484: PUSH
2485: LD_EXP 24
2489: ADD
2490: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2491: LD_INT 70
2493: PPUSH
2494: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2498: LD_STRING Kaia_L
2500: PPUSH
2501: LD_EXP 1
2505: NOT
2506: PPUSH
2507: LD_VAR 0 2
2511: PPUSH
2512: CALL 35575 0 3
2516: IFFALSE 2616
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2518: LD_ADDR_EXP 26
2522: PUSH
2523: LD_STRING Kaia_L
2525: PPUSH
2526: LD_EXP 1
2530: NOT
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: CALL 35575 0 3
2541: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2542: LD_EXP 26
2546: PPUSH
2547: LD_INT 2
2549: PPUSH
2550: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2554: LD_EXP 26
2558: PPUSH
2559: LD_INT 14
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2569: LD_EXP 26
2573: PPUSH
2574: LD_INT 25
2576: PPUSH
2577: LD_INT 19
2579: PPUSH
2580: CALL_OW 111
// AddComHold ( Kaia ) ;
2584: LD_EXP 26
2588: PPUSH
2589: CALL_OW 200
// tmp := tmp ^ Kaia ;
2593: LD_ADDR_VAR 0 4
2597: PUSH
2598: LD_VAR 0 4
2602: PUSH
2603: LD_EXP 26
2607: ADD
2608: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2609: LD_INT 70
2611: PPUSH
2612: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2616: LD_STRING Kamil_L
2618: PPUSH
2619: LD_EXP 1
2623: NOT
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: CALL 35575 0 3
2634: IFFALSE 2734
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2636: LD_ADDR_EXP 25
2640: PUSH
2641: LD_STRING Kamil_L
2643: PPUSH
2644: LD_EXP 1
2648: NOT
2649: PPUSH
2650: LD_VAR 0 2
2654: PPUSH
2655: CALL 35575 0 3
2659: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2660: LD_EXP 25
2664: PPUSH
2665: LD_INT 2
2667: PPUSH
2668: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2672: LD_EXP 25
2676: PPUSH
2677: LD_INT 14
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2687: LD_EXP 25
2691: PPUSH
2692: LD_INT 25
2694: PPUSH
2695: LD_INT 19
2697: PPUSH
2698: CALL_OW 111
// AddComHold ( Kamil ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 200
// tmp := tmp ^ Kamil ;
2711: LD_ADDR_VAR 0 4
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_EXP 25
2725: ADD
2726: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2727: LD_INT 70
2729: PPUSH
2730: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2734: LD_STRING Sophia_L
2736: PPUSH
2737: LD_EXP 1
2741: NOT
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: CALL 35575 0 3
2752: IFFALSE 2852
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2754: LD_ADDR_EXP 27
2758: PUSH
2759: LD_STRING Sophia_L
2761: PPUSH
2762: LD_EXP 1
2766: NOT
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: CALL 35575 0 3
2777: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2778: LD_EXP 27
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2790: LD_EXP 27
2794: PPUSH
2795: LD_INT 14
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2805: LD_EXP 27
2809: PPUSH
2810: LD_INT 25
2812: PPUSH
2813: LD_INT 19
2815: PPUSH
2816: CALL_OW 111
// AddComHold ( Sophia ) ;
2820: LD_EXP 27
2824: PPUSH
2825: CALL_OW 200
// tmp := tmp ^ Sophia ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_EXP 27
2843: ADD
2844: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2845: LD_INT 70
2847: PPUSH
2848: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2852: LD_ADDR_VAR 0 5
2856: PUSH
2857: LD_STRING 04_1_others_L
2859: PPUSH
2860: CALL_OW 31
2864: ST_TO_ADDR
// if tmp2 then
2865: LD_VAR 0 5
2869: IFFALSE 2966
// for i in tmp2 do
2871: LD_ADDR_VAR 0 3
2875: PUSH
2876: LD_VAR 0 5
2880: PUSH
2881: FOR_IN
2882: IFFALSE 2964
// begin SetDir ( i , 2 ) ;
2884: LD_VAR 0 3
2888: PPUSH
2889: LD_INT 2
2891: PPUSH
2892: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2896: LD_VAR 0 3
2900: PPUSH
2901: LD_INT 14
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: LD_EXP 34
2920: PPUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 1
2939: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2940: LD_VAR 0 3
2944: PPUSH
2945: LD_INT 17
2947: PPUSH
2948: LD_INT 14
2950: PPUSH
2951: CALL_OW 111
// wait ( 0 0$2 ) ;
2955: LD_INT 70
2957: PPUSH
2958: CALL_OW 67
// end ;
2962: GO 2881
2964: POP
2965: POP
// for i in tmp union tmp2 do
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 4
2975: PUSH
2976: LD_VAR 0 5
2980: UNION
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3013
// begin SetSide ( i , 2 ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_INT 2
2992: PPUSH
2993: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2997: LD_VAR 0 3
3001: PPUSH
3002: LD_EXP 21
3006: PPUSH
3007: CALL_OW 112
// end ;
3011: GO 2982
3013: POP
3014: POP
// end ; end_of_file
3015: LD_VAR 0 1
3019: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3020: LD_INT 0
3022: PPUSH
3023: PPUSH
3024: PPUSH
// uc_side := 3 ;
3025: LD_ADDR_OWVAR 20
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
// uc_nation := 3 ;
3033: LD_ADDR_OWVAR 21
3037: PUSH
3038: LD_INT 3
3040: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3041: LD_ADDR_EXP 37
3045: PUSH
3046: EMPTY
3047: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3048: LD_ADDR_EXP 38
3052: PUSH
3053: EMPTY
3054: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3055: LD_ADDR_EXP 41
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// for i := 1 to 2 do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: DOUBLE
3068: LD_INT 1
3070: DEC
3071: ST_TO_ADDR
3072: LD_INT 2
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3215
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3078: LD_INT 0
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: LD_INT 5
3092: PUSH
3093: LD_INT 6
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_OWVAR 67
3106: ARRAY
3107: PPUSH
3108: CALL_OW 380
// un := CreateHuman ;
3112: LD_ADDR_VAR 0 3
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3122: LD_ADDR_EXP 37
3126: PUSH
3127: LD_EXP 37
3131: PPUSH
3132: LD_EXP 37
3136: PUSH
3137: LD_INT 1
3139: PLUS
3140: PPUSH
3141: LD_VAR 0 3
3145: PPUSH
3146: CALL_OW 1
3150: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3151: LD_VAR 0 3
3155: PPUSH
3156: LD_INT 100
3158: PPUSH
3159: LD_INT 63
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_INT 97
3179: PPUSH
3180: LD_INT 64
3182: PPUSH
3183: CALL_OW 428
3187: PUSH
3188: LD_INT 98
3190: PPUSH
3191: LD_INT 58
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: PPUSH
3209: CALL_OW 120
// end ;
3213: GO 3075
3215: POP
3216: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3217: LD_INT 51
3219: PPUSH
3220: LD_INT 77
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 274
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: LD_INT 120
3238: PPUSH
3239: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3243: LD_INT 10
3245: PPUSH
3246: CALL_OW 274
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: LD_INT 300
3256: PPUSH
3257: CALL_OW 277
// for i := 1 to 2 do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_INT 2
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3393
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 3
3285: PUSH
3286: LD_INT 4
3288: PUSH
3289: LD_INT 5
3291: PUSH
3292: LD_INT 6
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_OWVAR 67
3305: ARRAY
3306: PPUSH
3307: CALL_OW 380
// un := CreateHuman ;
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: CALL_OW 44
3320: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3321: LD_ADDR_EXP 38
3325: PUSH
3326: LD_EXP 38
3330: PPUSH
3331: LD_EXP 38
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 3
3344: PPUSH
3345: CALL_OW 1
3349: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3350: LD_VAR 0 3
3354: PPUSH
3355: LD_INT 198
3357: PPUSH
3358: LD_INT 106
3360: PPUSH
3361: CALL_OW 428
3365: PUSH
3366: LD_INT 205
3368: PPUSH
3369: LD_INT 114
3371: PPUSH
3372: CALL_OW 428
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_VAR 0 2
3385: ARRAY
3386: PPUSH
3387: CALL_OW 52
// end ;
3391: GO 3274
3393: POP
3394: POP
// for i := 1 to 2 do
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_INT 2
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3486
// begin PrepareHuman ( false , 2 , 3 ) ;
3411: LD_INT 0
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 380
// un := CreateHuman ;
3424: LD_ADDR_VAR 0 3
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3434: LD_ADDR_EXP 38
3438: PUSH
3439: LD_EXP 38
3443: PPUSH
3444: LD_EXP 38
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: PPUSH
3453: LD_VAR 0 3
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: LD_INT 204
3470: PPUSH
3471: LD_INT 108
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 50
// end ;
3484: GO 3408
3486: POP
3487: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 4
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 6
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_OWVAR 67
3520: ARRAY
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3669
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 4
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 12
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: PPUSH
3586: CALL_OW 380
// un := CreateHuman ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: CALL_OW 44
3599: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_INT 10
3607: PPUSH
3608: LD_INT 0
3610: PPUSH
3611: CALL 72182 0 3
3615: IFFALSE 3667
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3617: LD_ADDR_EXP 39
3621: PUSH
3622: LD_EXP 39
3626: PPUSH
3627: LD_EXP 39
3631: PUSH
3632: LD_INT 1
3634: PLUS
3635: PPUSH
3636: LD_VAR 0 3
3640: PPUSH
3641: CALL_OW 1
3645: ST_TO_ADDR
// if Prob ( 50 ) then
3646: LD_INT 50
3648: PPUSH
3649: CALL_OW 13
3653: IFFALSE 3667
// ForceSleep ( un , true ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: CALL_OW 585
// end ; end ;
3667: GO 3522
3669: POP
3670: POP
// for i := 1 to 3 do
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: DOUBLE
3677: LD_INT 1
3679: DEC
3680: ST_TO_ADDR
3681: LD_INT 3
3683: PUSH
3684: FOR_TO
3685: IFFALSE 3779
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3687: LD_INT 0
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 4
3698: PUSH
3699: LD_INT 4
3701: PUSH
3702: LD_INT 5
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: PUSH
3711: LD_OWVAR 67
3715: ARRAY
3716: PPUSH
3717: CALL_OW 380
// un := CreateHuman ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: CALL_OW 44
3730: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_INT 11
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL 72182 0 3
3746: IFFALSE 3777
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3748: LD_ADDR_EXP 39
3752: PUSH
3753: LD_EXP 39
3757: PPUSH
3758: LD_EXP 39
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 3
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// end ;
3777: GO 3684
3779: POP
3780: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: DOUBLE
3787: LD_INT 1
3789: DEC
3790: ST_TO_ADDR
3791: LD_INT 5
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: LD_INT 7
3799: PUSH
3800: LD_INT 8
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_OWVAR 67
3813: ARRAY
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3962
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3818: LD_INT 0
3820: PPUSH
3821: LD_INT 1
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 5
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: PPUSH
3855: LD_INT 3
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 5
3863: PUSH
3864: LD_INT 5
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PPUSH
3879: CALL_OW 380
// un := CreateHuman ;
3883: LD_ADDR_VAR 0 3
3887: PUSH
3888: CALL_OW 44
3892: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3893: LD_VAR 0 3
3897: PPUSH
3898: LD_INT 15
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL 72182 0 3
3908: IFFALSE 3960
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3910: LD_ADDR_EXP 40
3914: PUSH
3915: LD_EXP 40
3919: PPUSH
3920: LD_EXP 40
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 1
3938: ST_TO_ADDR
// if Prob ( 50 ) then
3939: LD_INT 50
3941: PPUSH
3942: CALL_OW 13
3946: IFFALSE 3960
// ForceSleep ( un , true ) ;
3948: LD_VAR 0 3
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: CALL_OW 585
// end ; end ;
3960: GO 3815
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 1
3968: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
// uc_side := 3 ;
3974: LD_ADDR_OWVAR 20
3978: PUSH
3979: LD_INT 3
3981: ST_TO_ADDR
// uc_nation := 3 ;
3982: LD_ADDR_OWVAR 21
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// for i := 1 to 6 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 6
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4083
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4006: LD_INT 0
4008: PPUSH
4009: LD_INT 1
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 12
4029: ARRAY
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 380
// un := CreateHuman ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4048: LD_VAR 0 3
4052: PPUSH
4053: LD_INT 54
4055: PPUSH
4056: LD_INT 88
4058: PPUSH
4059: LD_INT 12
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 50
// SetLives ( un , 1 ) ;
4069: LD_VAR 0 3
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL_OW 234
// end ;
4081: GO 4003
4083: POP
4084: POP
// uc_side := 3 ;
4085: LD_ADDR_OWVAR 20
4089: PUSH
4090: LD_INT 3
4092: ST_TO_ADDR
// uc_nation := 0 ;
4093: LD_ADDR_OWVAR 21
4097: PUSH
4098: LD_INT 0
4100: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4101: LD_ADDR_EXP 42
4105: PUSH
4106: EMPTY
4107: ST_TO_ADDR
// apeEngGroup := [ ] ;
4108: LD_ADDR_EXP 43
4112: PUSH
4113: EMPTY
4114: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4115: LD_ADDR_VAR 0 2
4119: PUSH
4120: DOUBLE
4121: LD_INT 1
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 6
4133: PUSH
4134: LD_INT 7
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: LD_OWVAR 67
4147: ARRAY
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4268
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4152: LD_INT 0
4154: PPUSH
4155: LD_INT 15
4157: PPUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: LD_INT 6
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_OWVAR 67
4180: ARRAY
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4196: LD_ADDR_EXP 42
4200: PUSH
4201: LD_EXP 42
4205: PPUSH
4206: LD_EXP 42
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_VAR 0 3
4219: PPUSH
4220: CALL_OW 1
4224: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4225: LD_VAR 0 3
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: CALL_OW 12
4240: PPUSH
4241: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: LD_INT 56
4252: PPUSH
4253: LD_INT 82
4255: PPUSH
4256: LD_INT 6
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 50
// end ;
4266: GO 4149
4268: POP
4269: POP
// for i := 1 to 2 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_INT 1
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 2
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4360
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 16
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4309: LD_ADDR_EXP 43
4313: PUSH
4314: LD_EXP 43
4318: PPUSH
4319: LD_EXP 43
4323: PUSH
4324: LD_INT 1
4326: PLUS
4327: PPUSH
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 1
4337: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 51
4345: PPUSH
4346: LD_INT 77
4348: PPUSH
4349: CALL_OW 428
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4283
4360: POP
4361: POP
// end ;
4362: LD_VAR 0 1
4366: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4367: LD_EXP 42
4371: PPUSH
4372: LD_INT 3
4374: PUSH
4375: LD_INT 24
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 54
4394: PUSH
4395: EMPTY
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 72
4410: PUSH
4411: LD_INT 66
4413: PPUSH
4414: LD_INT 89
4416: PPUSH
4417: CALL_OW 428
4421: PPUSH
4422: CALL_OW 302
4426: AND
4427: IFFALSE 4512
4429: GO 4431
4431: DISABLE
4432: LD_INT 0
4434: PPUSH
// begin enable ;
4435: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4436: LD_ADDR_VAR 0 1
4440: PUSH
4441: LD_EXP 42
4445: PPUSH
4446: LD_INT 3
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: LD_INT 600
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 72
4484: PUSH
4485: FOR_IN
4486: IFFALSE 4510
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: LD_INT 66
4495: PPUSH
4496: LD_INT 89
4498: PPUSH
4499: CALL_OW 428
4503: PPUSH
4504: CALL_OW 120
4508: GO 4485
4510: POP
4511: POP
// end ;
4512: PPOPN 1
4514: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4515: LD_INT 22
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 92
4527: PUSH
4528: LD_INT 54
4530: PUSH
4531: LD_INT 77
4533: PUSH
4534: LD_INT 8
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: IFFALSE 4615
4553: GO 4555
4555: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4556: LD_EXP 43
4560: PPUSH
4561: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4565: LD_EXP 43
4569: PPUSH
4570: LD_INT 22
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 92
4582: PUSH
4583: LD_INT 54
4585: PUSH
4586: LD_INT 77
4588: PUSH
4589: LD_INT 8
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PUSH
4607: LD_INT 1
4609: ARRAY
4610: PPUSH
4611: CALL_OW 175
// end ;
4615: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: CALL_OW 12
4643: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4644: LD_ADDR_VAR 0 5
4648: PUSH
4649: LD_INT 16
4651: PUSH
4652: LD_INT 17
4654: PUSH
4655: LD_INT 19
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 3
4667: ARRAY
4668: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4669: LD_ADDR_VAR 0 7
4673: PUSH
4674: LD_INT 159
4676: PUSH
4677: LD_INT 25
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 137
4686: PUSH
4687: LD_INT 37
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 123
4696: PUSH
4697: LD_INT 55
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 115
4706: PUSH
4707: LD_INT 71
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 106
4716: PUSH
4717: LD_INT 88
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 97
4726: PUSH
4727: LD_INT 114
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 75
4736: PUSH
4737: LD_INT 146
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 206
4755: PUSH
4756: LD_INT 135
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 184
4765: PUSH
4766: LD_INT 111
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 154
4775: PUSH
4776: LD_INT 97
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 122
4785: PUSH
4786: LD_INT 80
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 109
4795: PUSH
4796: LD_INT 78
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 97
4805: PUSH
4806: LD_INT 113
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 75
4815: PUSH
4816: LD_INT 147
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 185
4834: PUSH
4835: LD_INT 72
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 171
4844: PUSH
4845: LD_INT 83
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 161
4854: PUSH
4855: LD_INT 99
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 125
4864: PUSH
4865: LD_INT 82
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 105
4874: PUSH
4875: LD_INT 90
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 96
4884: PUSH
4885: LD_INT 116
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 75
4894: PUSH
4895: LD_INT 147
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_VAR 0 3
4920: ARRAY
4921: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_VAR 0 3
4945: ARRAY
4946: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4947: LD_ADDR_VAR 0 6
4951: PUSH
4952: LD_INT 22
4954: PUSH
4955: LD_INT 20
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: LD_VAR 0 3
4970: ARRAY
4971: ST_TO_ADDR
// for i := 1 to 2 do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: DOUBLE
4978: LD_INT 1
4980: DEC
4981: ST_TO_ADDR
4982: LD_INT 2
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5004
// EraseResourceArea ( i , outerSpawnArea ) ;
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_VAR 0 6
4997: PPUSH
4998: CALL_OW 286
5002: GO 4985
5004: POP
5005: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5006: LD_VAR 0 6
5010: PPUSH
5011: LD_INT 2
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 21
5026: PUSH
5027: LD_INT 2
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 70
5054: IFFALSE 5269
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 21
5073: PUSH
5074: LD_INT 2
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 21
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 21
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 21
5127: PUSH
5128: LD_INT 3
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: PPUSH
5140: CALL_OW 70
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5159
// RemoveUnit ( i ) ;
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 64
5157: GO 5145
5159: POP
5160: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 21
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PPUSH
5176: CALL_OW 70
5180: IFFALSE 5229
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_VAR 0 6
5191: PPUSH
5192: LD_INT 21
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 70
5206: PUSH
5207: FOR_IN
5208: IFFALSE 5227
// ComMoveXY ( i , 113 , 53 ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_INT 113
5217: PPUSH
5218: LD_INT 53
5220: PPUSH
5221: CALL_OW 111
5225: GO 5207
5227: POP
5228: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5229: LD_VAR 0 6
5233: PPUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 21
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 70
5266: NOT
5267: IFFALSE 5056
// case convoyCounter of 1 .. 3 :
5269: LD_EXP 16
5273: PUSH
5274: LD_INT 1
5276: DOUBLE
5277: GREATEREQUAL
5278: IFFALSE 5286
5280: LD_INT 3
5282: DOUBLE
5283: LESSEQUAL
5284: IFTRUE 5288
5286: GO 5923
5288: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_INT 7
5307: PUSH
5308: LD_INT 8
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_OWVAR 67
5321: ARRAY
5322: PUSH
5323: LD_EXP 16
5327: MINUS
5328: PUSH
5329: FOR_TO
5330: IFFALSE 5537
// begin uc_side := 3 ;
5332: LD_ADDR_OWVAR 20
5336: PUSH
5337: LD_INT 3
5339: ST_TO_ADDR
// uc_nation := 3 ;
5340: LD_ADDR_OWVAR 21
5344: PUSH
5345: LD_INT 3
5347: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: LD_INT 1
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 4
5374: PPUSH
5375: CALL_OW 12
5379: ARRAY
5380: PPUSH
5381: LD_INT 4
5383: PUSH
5384: LD_INT 5
5386: PUSH
5387: LD_INT 6
5389: PUSH
5390: LD_INT 7
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PUSH
5399: LD_OWVAR 67
5403: ARRAY
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 8
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , dir ) ;
5419: LD_VAR 0 8
5423: PPUSH
5424: LD_VAR 0 4
5428: PPUSH
5429: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5433: LD_VAR 0 8
5437: PPUSH
5438: LD_VAR 0 5
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL 72182 0 3
5450: IFFALSE 5535
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5452: LD_ADDR_EXP 41
5456: PUSH
5457: LD_EXP 41
5461: PPUSH
5462: LD_EXP 41
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 1
5480: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5481: LD_VAR 0 8
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_VAR 0 7
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 7
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PUSH
5520: LD_INT 2
5522: ARRAY
5523: PPUSH
5524: CALL_OW 111
// wait ( 0 0$2 ) ;
5528: LD_INT 70
5530: PPUSH
5531: CALL_OW 67
// end ; end ;
5535: GO 5329
5537: POP
5538: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_INT 3
5551: PUSH
5552: LD_INT 4
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_OWVAR 67
5571: ARRAY
5572: PUSH
5573: FOR_TO
5574: IFFALSE 5919
// begin uc_side := 3 ;
5576: LD_ADDR_OWVAR 20
5580: PUSH
5581: LD_INT 3
5583: ST_TO_ADDR
// uc_nation := 3 ;
5584: LD_ADDR_OWVAR 21
5588: PUSH
5589: LD_INT 3
5591: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5592: LD_INT 3
5594: PPUSH
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 21
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 23
5606: PUSH
5607: LD_INT 24
5609: PUSH
5610: LD_INT 24
5612: PUSH
5613: LD_INT 24
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: PUSH
5624: LD_OWVAR 67
5628: PPUSH
5629: LD_OWVAR 67
5633: PUSH
5634: LD_INT 2
5636: PLUS
5637: PPUSH
5638: CALL_OW 12
5642: ARRAY
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_INT 42
5652: PUSH
5653: LD_INT 44
5655: PUSH
5656: LD_INT 43
5658: PUSH
5659: LD_INT 44
5661: PUSH
5662: LD_INT 46
5664: PUSH
5665: LD_INT 46
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 1
5678: PPUSH
5679: LD_OWVAR 67
5683: PUSH
5684: LD_INT 2
5686: PLUS
5687: PPUSH
5688: CALL_OW 12
5692: ARRAY
5693: PPUSH
5694: LD_INT 90
5696: PPUSH
5697: CALL 447 0 7
// un := CreateVehicle ;
5701: LD_ADDR_VAR 0 8
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( un , dir ) ;
5711: LD_VAR 0 8
5715: PPUSH
5716: LD_VAR 0 4
5720: PPUSH
5721: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5725: LD_VAR 0 8
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL 72182 0 3
5742: IFFALSE 5917
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5744: LD_ADDR_EXP 41
5748: PUSH
5749: LD_EXP 41
5753: PPUSH
5754: LD_EXP 41
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PPUSH
5763: LD_VAR 0 8
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5773: LD_INT 0
5775: PPUSH
5776: LD_INT 3
5778: PUSH
5779: LD_INT 4
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: LD_INT 6
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PPUSH
5800: CALL_OW 383
// un := CreateHuman ;
5804: LD_ADDR_VAR 0 8
5808: PUSH
5809: CALL_OW 44
5813: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5814: LD_VAR 0 8
5818: PPUSH
5819: LD_EXP 41
5823: PUSH
5824: LD_EXP 41
5828: ARRAY
5829: PPUSH
5830: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5834: LD_ADDR_EXP 41
5838: PUSH
5839: LD_EXP 41
5843: PPUSH
5844: LD_EXP 41
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: PPUSH
5853: LD_VAR 0 8
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_INT 1
5870: PPUSH
5871: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5875: LD_VAR 0 8
5879: PPUSH
5880: LD_VAR 0 7
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: PPUSH
5893: LD_VAR 0 7
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PUSH
5902: LD_INT 2
5904: ARRAY
5905: PPUSH
5906: CALL_OW 111
// wait ( 0 0$3 ) ;
5910: LD_INT 105
5912: PPUSH
5913: CALL_OW 67
// end ; end ;
5917: GO 5573
5919: POP
5920: POP
// end ; 4 .. 7 :
5921: GO 6528
5923: LD_INT 4
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 7
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 6527
5937: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 2
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: LD_INT 4
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PUSH
5966: LD_OWVAR 67
5970: ARRAY
5971: PUSH
5972: FOR_TO
5973: IFFALSE 6153
// begin uc_side := 3 ;
5975: LD_ADDR_OWVAR 20
5979: PUSH
5980: LD_INT 3
5982: ST_TO_ADDR
// uc_nation := 3 ;
5983: LD_ADDR_OWVAR 21
5987: PUSH
5988: LD_INT 3
5990: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5991: LD_INT 0
5993: PPUSH
5994: LD_INT 1
5996: PPUSH
5997: LD_INT 4
5999: PUSH
6000: LD_INT 5
6002: PUSH
6003: LD_INT 6
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_OWVAR 67
6019: ARRAY
6020: PPUSH
6021: CALL_OW 380
// un := CreateHuman ;
6025: LD_ADDR_VAR 0 8
6029: PUSH
6030: CALL_OW 44
6034: ST_TO_ADDR
// SetDir ( un , dir ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL 72182 0 3
6066: IFFALSE 6151
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6068: LD_ADDR_EXP 41
6072: PUSH
6073: LD_EXP 41
6077: PPUSH
6078: LD_EXP 41
6082: PUSH
6083: LD_INT 1
6085: PLUS
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6097: LD_VAR 0 8
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6109: LD_VAR 0 8
6113: PPUSH
6114: LD_VAR 0 7
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 7
6131: PUSH
6132: LD_INT 1
6134: ARRAY
6135: PUSH
6136: LD_INT 2
6138: ARRAY
6139: PPUSH
6140: CALL_OW 111
// wait ( 0 0$2 ) ;
6144: LD_INT 70
6146: PPUSH
6147: CALL_OW 67
// end ; end ;
6151: GO 5972
6153: POP
6154: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_OWVAR 67
6187: ARRAY
6188: PUSH
6189: FOR_TO
6190: IFFALSE 6523
// begin uc_side := 3 ;
6192: LD_ADDR_OWVAR 20
6196: PUSH
6197: LD_INT 3
6199: ST_TO_ADDR
// uc_nation := 3 ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6208: LD_INT 3
6210: PPUSH
6211: LD_INT 3
6213: PPUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 1
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 12
6234: ARRAY
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 42
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: LD_INT 43
6250: PUSH
6251: LD_INT 44
6253: PUSH
6254: LD_INT 44
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 1
6266: PPUSH
6267: LD_OWVAR 67
6271: PUSH
6272: LD_INT 1
6274: PLUS
6275: PPUSH
6276: CALL_OW 12
6280: ARRAY
6281: PPUSH
6282: LD_INT 90
6284: PPUSH
6285: CALL 447 0 7
// un := CreateVehicle ;
6289: LD_ADDR_VAR 0 8
6293: PUSH
6294: CALL_OW 45
6298: ST_TO_ADDR
// SetDir ( un , dir ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_VAR 0 4
6308: PPUSH
6309: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6313: LD_VAR 0 8
6317: PPUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 0
6325: PPUSH
6326: CALL 72182 0 3
6330: IFFALSE 6521
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6332: LD_ADDR_EXP 41
6336: PUSH
6337: LD_EXP 41
6341: PPUSH
6342: LD_EXP 41
6346: PUSH
6347: LD_INT 1
6349: PLUS
6350: PPUSH
6351: LD_VAR 0 8
6355: PPUSH
6356: CALL_OW 1
6360: ST_TO_ADDR
// uc_side := 3 ;
6361: LD_ADDR_OWVAR 20
6365: PUSH
6366: LD_INT 3
6368: ST_TO_ADDR
// uc_nation := 3 ;
6369: LD_ADDR_OWVAR 21
6373: PUSH
6374: LD_INT 3
6376: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6377: LD_INT 0
6379: PPUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: PUSH
6398: LD_OWVAR 67
6402: ARRAY
6403: PPUSH
6404: CALL_OW 383
// un := CreateHuman ;
6408: LD_ADDR_VAR 0 8
6412: PUSH
6413: CALL_OW 44
6417: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6418: LD_VAR 0 8
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_EXP 41
6432: ARRAY
6433: PPUSH
6434: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6438: LD_ADDR_EXP 41
6442: PUSH
6443: LD_EXP 41
6447: PPUSH
6448: LD_EXP 41
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: PPUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: CALL_OW 1
6466: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6467: LD_VAR 0 8
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6479: LD_VAR 0 8
6483: PPUSH
6484: LD_VAR 0 7
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PUSH
6493: LD_INT 1
6495: ARRAY
6496: PPUSH
6497: LD_VAR 0 7
6501: PUSH
6502: LD_INT 1
6504: ARRAY
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: CALL_OW 111
// wait ( 0 0$2 ) ;
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 67
// end ; end ;
6521: GO 6189
6523: POP
6524: POP
// end ; end ;
6525: GO 6528
6527: POP
// repeat wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// for un in ruConvoySquad do
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_EXP 41
6544: PUSH
6545: FOR_IN
6546: IFFALSE 7170
// begin if IsInArea ( un , westSouthOutArea ) then
6548: LD_VAR 0 8
6552: PPUSH
6553: LD_INT 18
6555: PPUSH
6556: CALL_OW 308
6560: IFFALSE 6648
// begin if GetType ( un ) = unit_vehicle then
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 247
6571: PUSH
6572: LD_INT 2
6574: EQUAL
6575: IFFALSE 6607
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6577: LD_ADDR_EXP 41
6581: PUSH
6582: LD_EXP 41
6586: PUSH
6587: LD_VAR 0 8
6591: PPUSH
6592: CALL_OW 311
6596: DIFF
6597: ST_TO_ADDR
// RemoveUnit ( un ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6607: LD_ADDR_EXP 15
6611: PUSH
6612: LD_EXP 15
6616: PUSH
6617: LD_INT 1
6619: PLUS
6620: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6621: LD_ADDR_EXP 41
6625: PUSH
6626: LD_EXP 41
6630: PUSH
6631: LD_VAR 0 8
6635: DIFF
6636: ST_TO_ADDR
// RemoveUnit ( un ) ;
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 64
// break ;
6646: GO 7170
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6648: LD_VAR 0 8
6652: PPUSH
6653: CALL_OW 305
6657: NOT
6658: PUSH
6659: LD_VAR 0 8
6663: PPUSH
6664: CALL_OW 310
6668: NOT
6669: AND
6670: IFFALSE 6688
// ruConvoySquad := ruConvoySquad diff un ;
6672: LD_ADDR_EXP 41
6676: PUSH
6677: LD_EXP 41
6681: PUSH
6682: LD_VAR 0 8
6686: DIFF
6687: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6688: LD_VAR 0 8
6692: PPUSH
6693: CALL_OW 302
6697: PUSH
6698: LD_VAR 0 8
6702: PPUSH
6703: CALL_OW 314
6707: NOT
6708: AND
6709: IFFALSE 7168
// begin tag := GetTag ( un ) ;
6711: LD_ADDR_VAR 0 9
6715: PUSH
6716: LD_VAR 0 8
6720: PPUSH
6721: CALL_OW 110
6725: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 7
6735: PUSH
6736: LD_VAR 0 9
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 9
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ARRAY
6764: PUSH
6765: LD_INT 2
6767: ARRAY
6768: PPUSH
6769: CALL_OW 297
6773: PUSH
6774: LD_INT 6
6776: LESS
6777: IFFALSE 6960
// begin SetTag ( un , tag + 1 ) ;
6779: LD_VAR 0 8
6783: PPUSH
6784: LD_VAR 0 9
6788: PUSH
6789: LD_INT 1
6791: PLUS
6792: PPUSH
6793: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6797: LD_VAR 0 8
6801: PPUSH
6802: CALL_OW 247
6806: PUSH
6807: LD_INT 2
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 8
6815: PPUSH
6816: CALL_OW 257
6820: PUSH
6821: LD_INT 3
6823: EQUAL
6824: OR
6825: IFFALSE 6958
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6827: LD_ADDR_VAR 0 10
6831: PUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 91
6844: PUSH
6845: LD_VAR 0 8
6849: PUSH
6850: LD_INT 8
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// if enemy then
6867: LD_VAR 0 10
6871: IFFALSE 6899
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6873: LD_VAR 0 8
6877: PPUSH
6878: LD_VAR 0 10
6882: PPUSH
6883: LD_VAR 0 8
6887: PPUSH
6888: CALL_OW 74
6892: PPUSH
6893: CALL_OW 115
6897: GO 6958
// begin AddComWait ( un , 0 0$4 ) ;
6899: LD_VAR 0 8
6903: PPUSH
6904: LD_INT 140
6906: PPUSH
6907: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6911: LD_VAR 0 8
6915: PPUSH
6916: LD_VAR 0 7
6920: PUSH
6921: LD_VAR 0 9
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: ARRAY
6930: PUSH
6931: LD_INT 1
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 7
6939: PUSH
6940: LD_VAR 0 9
6944: PUSH
6945: LD_INT 1
6947: PLUS
6948: ARRAY
6949: PUSH
6950: LD_INT 2
6952: ARRAY
6953: PPUSH
6954: CALL_OW 174
// end ; end ; end else
6958: GO 7168
// begin if GetClass ( un ) = 4 then
6960: LD_VAR 0 8
6964: PPUSH
6965: CALL_OW 257
6969: PUSH
6970: LD_INT 4
6972: EQUAL
6973: IFFALSE 7121
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6975: LD_EXP 41
6979: PPUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: LD_INT 1000
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 72
7015: IFFALSE 7073
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_EXP 41
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: LD_INT 1000
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 72
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: CALL_OW 128
7071: GO 7119
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7073: LD_VAR 0 8
7077: PPUSH
7078: LD_EXP 41
7082: PPUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 25
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PPUSH
7105: LD_VAR 0 8
7109: PPUSH
7110: CALL_OW 74
7114: PPUSH
7115: CALL_OW 112
7119: GO 7168
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7121: LD_VAR 0 8
7125: PPUSH
7126: LD_VAR 0 7
7130: PUSH
7131: LD_VAR 0 9
7135: PUSH
7136: LD_INT 1
7138: PLUS
7139: ARRAY
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: LD_VAR 0 7
7149: PUSH
7150: LD_VAR 0 9
7154: PUSH
7155: LD_INT 1
7157: PLUS
7158: ARRAY
7159: PUSH
7160: LD_INT 2
7162: ARRAY
7163: PPUSH
7164: CALL_OW 114
// end ; end ; end ;
7168: GO 6545
7170: POP
7171: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7172: LD_EXP 41
7176: PPUSH
7177: LD_INT 52
7179: PUSH
7180: EMPTY
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 72
7201: NOT
7202: IFFALSE 6528
// end ;
7204: LD_VAR 0 1
7208: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7209: LD_EXP 16
7213: PUSH
7214: LD_INT 3
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: LESS
7225: PUSH
7226: LD_EXP 41
7230: NOT
7231: AND
7232: PUSH
7233: LD_OWVAR 67
7237: PUSH
7238: LD_INT 1
7240: GREATER
7241: AND
7242: IFFALSE 7662
7244: GO 7246
7246: DISABLE
7247: LD_INT 0
7249: PPUSH
7250: PPUSH
7251: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7252: LD_ADDR_VAR 0 1
7256: PUSH
7257: DOUBLE
7258: LD_INT 1
7260: DEC
7261: ST_TO_ADDR
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7583
// begin uc_side := 3 ;
7289: LD_ADDR_OWVAR 20
7293: PUSH
7294: LD_INT 3
7296: ST_TO_ADDR
// uc_nation := 3 ;
7297: LD_ADDR_OWVAR 21
7301: PUSH
7302: LD_INT 3
7304: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7305: LD_INT 3
7307: PPUSH
7308: LD_INT 3
7310: PPUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 24
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: LD_INT 24
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: PPUSH
7342: LD_OWVAR 67
7346: PUSH
7347: LD_INT 2
7349: PLUS
7350: PPUSH
7351: CALL_OW 12
7355: ARRAY
7356: PPUSH
7357: LD_INT 1
7359: PPUSH
7360: LD_INT 1
7362: PPUSH
7363: LD_INT 42
7365: PUSH
7366: LD_INT 44
7368: PUSH
7369: LD_INT 43
7371: PUSH
7372: LD_INT 44
7374: PUSH
7375: LD_INT 46
7377: PUSH
7378: LD_INT 46
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 1
7391: PPUSH
7392: LD_OWVAR 67
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: CALL_OW 12
7405: ARRAY
7406: PPUSH
7407: LD_INT 90
7409: PPUSH
7410: CALL 447 0 7
// un := CreateVehicle ;
7414: LD_ADDR_VAR 0 3
7418: PUSH
7419: CALL_OW 45
7423: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7424: LD_VAR 0 3
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7436: LD_VAR 0 3
7440: PPUSH
7441: LD_INT 23
7443: PPUSH
7444: LD_INT 0
7446: PPUSH
7447: CALL 72182 0 3
7451: IFFALSE 7581
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7453: LD_ADDR_VAR 0 2
7457: PUSH
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_VAR 0 2
7467: PUSH
7468: LD_INT 1
7470: PLUS
7471: PPUSH
7472: LD_VAR 0 3
7476: PPUSH
7477: CALL_OW 1
7481: ST_TO_ADDR
// uc_side := 3 ;
7482: LD_ADDR_OWVAR 20
7486: PUSH
7487: LD_INT 3
7489: ST_TO_ADDR
// uc_nation := 3 ;
7490: LD_ADDR_OWVAR 21
7494: PUSH
7495: LD_INT 3
7497: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7498: LD_INT 0
7500: PPUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 4
7506: PUSH
7507: LD_INT 5
7509: PUSH
7510: LD_INT 6
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: LD_OWVAR 67
7523: ARRAY
7524: PPUSH
7525: CALL_OW 383
// un := CreateHuman ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7539: LD_VAR 0 3
7543: PPUSH
7544: LD_VAR 0 2
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: PPUSH
7555: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_INT 80
7566: PPUSH
7567: LD_INT 139
7569: PPUSH
7570: CALL_OW 111
// wait ( 0 0$3 ) ;
7574: LD_INT 105
7576: PPUSH
7577: CALL_OW 67
// end ; end ;
7581: GO 7286
7583: POP
7584: POP
// for i in tmp do
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_VAR 0 2
7594: PUSH
7595: FOR_IN
7596: IFFALSE 7660
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_INT 101
7605: PPUSH
7606: LD_INT 102
7608: PPUSH
7609: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 110
7620: PPUSH
7621: LD_INT 78
7623: PPUSH
7624: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7628: LD_VAR 0 1
7632: PPUSH
7633: LD_INT 75
7635: PPUSH
7636: LD_INT 101
7638: PPUSH
7639: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_INT 57
7650: PPUSH
7651: LD_INT 83
7653: PPUSH
7654: CALL_OW 174
// end ;
7658: GO 7595
7660: POP
7661: POP
// end ;
7662: PPOPN 3
7664: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7665: LD_EXP 39
7669: PPUSH
7670: LD_INT 3
7672: PUSH
7673: LD_INT 24
7675: PUSH
7676: LD_INT 1000
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PPUSH
7687: CALL_OW 72
7691: PUSH
7692: LD_EXP 40
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: OR
7719: IFFALSE 7818
7721: GO 7723
7723: DISABLE
7724: LD_INT 0
7726: PPUSH
// begin enable ;
7727: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7728: LD_ADDR_VAR 0 1
7732: PUSH
7733: LD_EXP 39
7737: PPUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 24
7743: PUSH
7744: LD_INT 1000
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: PUSH
7760: LD_EXP 40
7764: PPUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 24
7770: PUSH
7771: LD_INT 1000
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 72
7786: UNION
7787: PUSH
7788: FOR_IN
7789: IFFALSE 7816
// if IsSleeping ( i ) then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 555
7800: IFFALSE 7814
// ForceSleep ( i , false ) ;
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL_OW 585
7814: GO 7788
7816: POP
7817: POP
// end ;
7818: PPOPN 1
7820: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7821: LD_EXP 38
7825: PPUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 54
7834: PUSH
7835: EMPTY
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 72
7868: IFFALSE 7963
7870: GO 7872
7872: DISABLE
7873: LD_INT 0
7875: PPUSH
7876: PPUSH
// begin enable ;
7877: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: LD_EXP 38
7887: PPUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 54
7896: PUSH
7897: EMPTY
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: LD_INT 95
7909: PUSH
7910: LD_INT 26
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 72
7930: ST_TO_ADDR
// for i in tmp do
7931: LD_ADDR_VAR 0 1
7935: PUSH
7936: LD_VAR 0 2
7940: PUSH
7941: FOR_IN
7942: IFFALSE 7961
// ComMoveXY ( i , 206 , 110 ) ;
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 206
7951: PPUSH
7952: LD_INT 110
7954: PPUSH
7955: CALL_OW 111
7959: GO 7941
7961: POP
7962: POP
// end ;
7963: PPOPN 2
7965: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7966: LD_INT 26
7968: PPUSH
7969: LD_INT 22
7971: PUSH
7972: LD_INT 2
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: PUSH
7984: LD_INT 26
7986: PPUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 50
8009: PUSH
8010: EMPTY
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 70
8022: AND
8023: IFFALSE 8102
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_INT 26
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 30
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 50
8061: PUSH
8062: EMPTY
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 70
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8100
// if IsInUnit ( i ) then
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 310
8087: IFFALSE 8098
// ComExitBuilding ( i ) ;
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 122
8098: GO 8075
8100: POP
8101: POP
// end ; end_of_file
8102: PPOPN 1
8104: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL 15045 0 1
// if un = Heike then
8114: LD_VAR 0 1
8118: PUSH
8119: LD_EXP 21
8123: EQUAL
8124: IFFALSE 8133
// YouLost ( Heike ) ;
8126: LD_STRING Heike
8128: PPUSH
8129: CALL_OW 104
// if un in apeSoldGroup then
8133: LD_VAR 0 1
8137: PUSH
8138: LD_EXP 42
8142: IN
8143: IFFALSE 8161
// apeSoldGroup := apeSoldGroup diff un ;
8145: LD_ADDR_EXP 42
8149: PUSH
8150: LD_EXP 42
8154: PUSH
8155: LD_VAR 0 1
8159: DIFF
8160: ST_TO_ADDR
// if un in apeEngGroup then
8161: LD_VAR 0 1
8165: PUSH
8166: LD_EXP 43
8170: IN
8171: IFFALSE 8189
// apeEngGroup := apeEngGroup diff un ;
8173: LD_ADDR_EXP 43
8177: PUSH
8178: LD_EXP 43
8182: PUSH
8183: LD_VAR 0 1
8187: DIFF
8188: ST_TO_ADDR
// if un in oilBaseGuard then
8189: LD_VAR 0 1
8193: PUSH
8194: LD_EXP 38
8198: IN
8199: IFFALSE 8217
// oilBaseGuard := oilBaseGuard diff un ;
8201: LD_ADDR_EXP 38
8205: PUSH
8206: LD_EXP 38
8210: PUSH
8211: LD_VAR 0 1
8215: DIFF
8216: ST_TO_ADDR
// if un in ruNorthGroup then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 39
8226: IN
8227: IFFALSE 8245
// ruNorthGroup := ruNorthGroup diff un ;
8229: LD_ADDR_EXP 39
8233: PUSH
8234: LD_EXP 39
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// if un in ruSouthGroup then
8245: LD_VAR 0 1
8249: PUSH
8250: LD_EXP 40
8254: IN
8255: IFFALSE 8273
// ruSouthGroup := ruSouthGroup diff un ;
8257: LD_ADDR_EXP 40
8261: PUSH
8262: LD_EXP 40
8266: PUSH
8267: LD_VAR 0 1
8271: DIFF
8272: ST_TO_ADDR
// if un in ruConvoySquad then
8273: LD_VAR 0 1
8277: PUSH
8278: LD_EXP 41
8282: IN
8283: IFFALSE 8301
// ruConvoySquad := ruConvoySquad diff un ;
8285: LD_ADDR_EXP 41
8289: PUSH
8290: LD_EXP 41
8294: PUSH
8295: LD_VAR 0 1
8299: DIFF
8300: ST_TO_ADDR
// end ;
8301: PPOPN 1
8303: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_VAR 0 2
8313: PPUSH
8314: CALL 15165 0 2
// if GetWeapon ( veh ) = ar_radar then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 30
8330: EQUAL
8331: IFFALSE 8341
// radarConstructed := true ;
8333: LD_ADDR_EXP 13
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 264
8350: PUSH
8351: LD_INT 26
8353: EQUAL
8354: IFFALSE 8364
// flamethrowerBuilt := true ;
8356: LD_ADDR_EXP 20
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// end ;
8364: PPOPN 2
8366: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8367: LD_ADDR_EXP 18
8371: PUSH
8372: LD_EXP 18
8376: PUSH
8377: LD_INT 1
8379: PLUS
8380: ST_TO_ADDR
// if oldId in ruConvoySquad then
8381: LD_VAR 0 2
8385: PUSH
8386: LD_EXP 41
8390: IN
8391: IFFALSE 8409
// ruConvoySquad := ruConvoySquad diff oldId ;
8393: LD_ADDR_EXP 41
8397: PUSH
8398: LD_EXP 41
8402: PUSH
8403: LD_VAR 0 2
8407: DIFF
8408: ST_TO_ADDR
// if newId in ruConvoySquad then
8409: LD_VAR 0 1
8413: PUSH
8414: LD_EXP 41
8418: IN
8419: IFFALSE 8437
// ruConvoySquad := ruConvoySquad diff newId ;
8421: LD_ADDR_EXP 41
8425: PUSH
8426: LD_EXP 41
8430: PUSH
8431: LD_VAR 0 1
8435: DIFF
8436: ST_TO_ADDR
// end ; end_of_file
8437: PPOPN 4
8439: END
// export function Action ; var i , p , un , veh , tmp ; begin
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
// InGameOn ;
8448: CALL_OW 8
// music_nat := 2 ;
8452: LD_ADDR_OWVAR 71
8456: PUSH
8457: LD_INT 2
8459: ST_TO_ADDR
// music_class := music_recon ;
8460: LD_ADDR_OWVAR 72
8464: PUSH
8465: LD_INT 3
8467: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8468: LD_INT 7
8470: PPUSH
8471: LD_INT 6
8473: PPUSH
8474: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8478: LD_INT 7
8480: PPUSH
8481: LD_INT 6
8483: PPUSH
8484: LD_INT 2
8486: PPUSH
8487: LD_INT 30
8489: NEG
8490: PPUSH
8491: CALL 1155 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8495: LD_ADDR_VAR 0 6
8499: PUSH
8500: LD_EXP 21
8504: PUSH
8505: LD_EXP 22
8509: PUSH
8510: LD_EXP 23
8514: PUSH
8515: LD_EXP 24
8519: PUSH
8520: LD_EXP 25
8524: PUSH
8525: LD_EXP 26
8529: PUSH
8530: LD_EXP 28
8534: PUSH
8535: LD_EXP 33
8539: PUSH
8540: LD_EXP 27
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: ST_TO_ADDR
// tmp := tmp diff 0 ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 0
8568: DIFF
8569: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8570: LD_ADDR_VAR 0 6
8574: PUSH
8575: LD_VAR 0 6
8579: PPUSH
8580: LD_INT 3
8582: PPUSH
8583: CALL 71781 0 2
8587: ST_TO_ADDR
// for i in heikeVehicles do
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_EXP 35
8597: PUSH
8598: FOR_IN
8599: IFFALSE 8798
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8601: LD_INT 5
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 5
8611: ARRAY
8612: PPUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 3
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 2
8644: PUSH
8645: LD_INT 4
8647: ARRAY
8648: PPUSH
8649: LD_INT 34
8651: PPUSH
8652: CALL 447 0 7
// veh := CreateVehicle ;
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: CALL_OW 45
8665: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 4
8673: ARRAY
8674: PUSH
8675: LD_INT 51
8677: PUSH
8678: LD_INT 32
8680: PUSH
8681: LD_INT 12
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: IN
8689: IFFALSE 8769
// begin if i [ 7 ] [ 1 ] then
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 7
8698: ARRAY
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: IFFALSE 8730
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8705: LD_VAR 0 5
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_INT 7
8720: ARRAY
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 7
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: IFFALSE 8769
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_VAR 0 2
8756: PUSH
8757: LD_INT 7
8759: ARRAY
8760: PUSH
8761: LD_INT 2
8763: ARRAY
8764: PPUSH
8765: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8769: LD_VAR 0 5
8773: PPUSH
8774: LD_INT 2
8776: PPUSH
8777: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8781: LD_VAR 0 5
8785: PPUSH
8786: LD_INT 4
8788: PPUSH
8789: LD_INT 0
8791: PPUSH
8792: CALL_OW 49
// end ;
8796: GO 8598
8798: POP
8799: POP
// if tmp then
8800: LD_VAR 0 6
8804: IFFALSE 8914
// begin p := 0 ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// for i in tmp do
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_VAR 0 6
8823: PUSH
8824: FOR_IN
8825: IFFALSE 8912
// begin p := p + 1 ;
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: LD_INT 0
8851: PPUSH
8852: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 26
8863: PPUSH
8864: LD_INT 9
8866: PPUSH
8867: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_EXP 35
8880: GREATEREQUAL
8881: PUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: AND
8896: IFFALSE 8910
// SetClass ( i , 1 ) ;
8898: LD_VAR 0 2
8902: PPUSH
8903: LD_INT 1
8905: PPUSH
8906: CALL_OW 336
// end ;
8910: GO 8824
8912: POP
8913: POP
// end ; if heikeSecondSquad then
8914: LD_EXP 34
8918: IFFALSE 9020
// for i in heikeSecondSquad do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_EXP 34
8929: PUSH
8930: FOR_IN
8931: IFFALSE 9018
// begin p := p + 1 ;
8933: LD_ADDR_VAR 0 3
8937: PUSH
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: PLUS
8946: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8947: LD_VAR 0 2
8951: PPUSH
8952: LD_INT 6
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8962: LD_VAR 0 2
8966: PPUSH
8967: LD_INT 26
8969: PPUSH
8970: LD_INT 9
8972: PPUSH
8973: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_EXP 35
8986: GREATEREQUAL
8987: PUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 257
8997: PUSH
8998: LD_INT 3
9000: EQUAL
9001: AND
9002: IFFALSE 9016
// SetClass ( i , 1 ) ;
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 336
// end ;
9016: GO 8930
9018: POP
9019: POP
// if heikeApes then
9020: LD_EXP 36
9024: IFFALSE 9067
// for i in heikeApes do
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_EXP 36
9035: PUSH
9036: FOR_IN
9037: IFFALSE 9065
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 7
9046: PPUSH
9047: LD_INT 0
9049: PPUSH
9050: CALL_OW 49
// ComHold ( i ) ;
9054: LD_VAR 0 2
9058: PPUSH
9059: CALL_OW 140
// end ;
9063: GO 9036
9065: POP
9066: POP
// if Kurt then
9067: LD_EXP 32
9071: IFFALSE 9103
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9073: LD_EXP 32
9077: PPUSH
9078: LD_INT 8
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9088: LD_EXP 32
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 32
9098: PPUSH
9099: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9103: LD_INT 70
9105: PPUSH
9106: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9110: LD_EXP 21
9114: PPUSH
9115: LD_STRING DH-Start-1
9117: PPUSH
9118: CALL_OW 88
// if Givi then
9122: LD_EXP 22
9126: IFFALSE 9389
// begin Say ( Givi , DG-Start-2-5 ) ;
9128: LD_EXP 22
9132: PPUSH
9133: LD_STRING DG-Start-2-5
9135: PPUSH
9136: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_STRING DH-Start-3
9147: PPUSH
9148: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9152: LD_EXP 21
9156: PPUSH
9157: LD_STRING DH-Start-4
9159: PPUSH
9160: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9164: LD_EXP 22
9168: PPUSH
9169: LD_STRING DG-Start-5
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-6
9183: PPUSH
9184: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9188: LD_EXP 22
9192: PPUSH
9193: LD_STRING DG-Start-7
9195: PPUSH
9196: CALL_OW 88
// if Mike then
9200: LD_EXP 23
9204: IFFALSE 9377
// begin Say ( Mike , DM-Start-8 ) ;
9206: LD_EXP 23
9210: PPUSH
9211: LD_STRING DM-Start-8
9213: PPUSH
9214: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9218: LD_EXP 23
9222: PPUSH
9223: LD_STRING DM-Start-9
9225: PPUSH
9226: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9230: LD_EXP 22
9234: PPUSH
9235: LD_STRING DG-Start-10
9237: PPUSH
9238: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9242: LD_EXP 22
9246: PPUSH
9247: LD_STRING DG-Start-11
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Start-12
9261: PPUSH
9262: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9266: LD_EXP 22
9270: PPUSH
9271: LD_STRING DG-Start-13
9273: PPUSH
9274: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9278: LD_EXP 22
9282: PPUSH
9283: LD_STRING DG-Start-14
9285: PPUSH
9286: CALL_OW 88
// if Kaia then
9290: LD_EXP 26
9294: IFFALSE 9377
// begin Say ( Kaia , DK-Start-15 ) ;
9296: LD_EXP 26
9300: PPUSH
9301: LD_STRING DK-Start-15
9303: PPUSH
9304: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9308: LD_EXP 26
9312: PPUSH
9313: LD_STRING DK-Start-16
9315: PPUSH
9316: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9320: LD_EXP 26
9324: PPUSH
9325: LD_STRING DK-Start-17
9327: PPUSH
9328: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9332: LD_INT 10
9334: PPUSH
9335: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9339: LD_EXP 22
9343: PPUSH
9344: LD_EXP 26
9348: PPUSH
9349: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DG-Start-18
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9365: LD_EXP 26
9369: PPUSH
9370: LD_STRING DK-Start-19
9372: PPUSH
9373: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9377: LD_EXP 21
9381: PPUSH
9382: LD_STRING DH-Start-20
9384: PPUSH
9385: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9389: LD_INT 70
9391: PPUSH
9392: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9396: LD_EXP 29
9400: PPUSH
9401: LD_STRING DShar-Start-21
9403: PPUSH
9404: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9408: LD_EXP 21
9412: PPUSH
9413: LD_STRING DH-Start-22
9415: PPUSH
9416: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9420: LD_EXP 29
9424: PPUSH
9425: LD_STRING DShar-Start-23
9427: PPUSH
9428: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9432: LD_EXP 29
9436: PPUSH
9437: LD_STRING DShar-Start-24
9439: PPUSH
9440: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9444: LD_EXP 29
9448: PPUSH
9449: LD_STRING DShar-Start-25
9451: PPUSH
9452: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9456: LD_EXP 29
9460: PPUSH
9461: LD_STRING DShar-Start-26
9463: PPUSH
9464: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9468: LD_EXP 21
9472: PPUSH
9473: LD_STRING DH-Start-27
9475: PPUSH
9476: CALL_OW 88
// if Kaia then
9480: LD_EXP 26
9484: IFFALSE 9526
// begin ComTurnUnit ( Heike , Kaia ) ;
9486: LD_EXP 21
9490: PPUSH
9491: LD_EXP 26
9495: PPUSH
9496: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9500: LD_EXP 26
9504: PPUSH
9505: LD_STRING DK-Start-28
9507: PPUSH
9508: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9512: LD_EXP 21
9516: PPUSH
9517: LD_STRING DH-Start-29
9519: PPUSH
9520: CALL_OW 88
// end else
9524: GO 9538
// Say ( Heike , DH-Start-a-28 ) ;
9526: LD_EXP 21
9530: PPUSH
9531: LD_STRING DH-Start-a-28
9533: PPUSH
9534: CALL_OW 88
// if Givi then
9538: LD_EXP 22
9542: IFFALSE 9777
// begin ComTurnUnit ( Heike , Givi ) ;
9544: LD_EXP 21
9548: PPUSH
9549: LD_EXP 22
9553: PPUSH
9554: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9558: LD_EXP 22
9562: PPUSH
9563: LD_EXP 21
9567: PPUSH
9568: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9572: LD_EXP 21
9576: PPUSH
9577: LD_STRING DH-Start-30
9579: PPUSH
9580: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9584: LD_EXP 21
9588: PPUSH
9589: LD_STRING DH-Start-31
9591: PPUSH
9592: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9596: LD_EXP 22
9600: PPUSH
9601: LD_STRING DG-Start-32
9603: PPUSH
9604: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9608: LD_EXP 21
9612: PPUSH
9613: LD_STRING DH-Start-33
9615: PPUSH
9616: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9620: LD_EXP 22
9624: PPUSH
9625: LD_STRING DG-Start-34
9627: PPUSH
9628: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9632: LD_EXP 22
9636: PPUSH
9637: LD_STRING DG-Start-35
9639: PPUSH
9640: CALL_OW 88
// if Kurt and not dialogue_skipped then
9644: LD_EXP 32
9648: PUSH
9649: LD_OWVAR 59
9653: NOT
9654: AND
9655: IFFALSE 9686
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9657: LD_EXP 32
9661: PPUSH
9662: LD_INT 28
9664: PPUSH
9665: LD_INT 13
9667: PPUSH
9668: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_EXP 21
9681: PPUSH
9682: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9686: LD_EXP 22
9690: PPUSH
9691: LD_STRING DG-Start-36
9693: PPUSH
9694: CALL_OW 88
// if Kurt then
9698: LD_EXP 32
9702: IFFALSE 9775
// begin if not Givi then
9704: LD_EXP 22
9708: NOT
9709: IFFALSE 9725
// Say ( Kurt , DKs-Start-37-a ) else
9711: LD_EXP 32
9715: PPUSH
9716: LD_STRING DKs-Start-37-a
9718: PPUSH
9719: CALL_OW 88
9723: GO 9737
// Say ( Kurt , DKs-Start-37 ) ;
9725: LD_EXP 32
9729: PPUSH
9730: LD_STRING DKs-Start-37
9732: PPUSH
9733: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9737: LD_EXP 32
9741: PPUSH
9742: LD_STRING DKs-Start-38
9744: PPUSH
9745: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9749: LD_EXP 21
9753: PPUSH
9754: LD_EXP 32
9758: PPUSH
9759: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9763: LD_EXP 21
9767: PPUSH
9768: LD_STRING DH-Start-39
9770: PPUSH
9771: CALL_OW 88
// end ; end else
9775: GO 9806
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DArm-Start-a-37
9784: PPUSH
9785: LD_STRING DArf-Start-a-37
9787: PPUSH
9788: CALL 1206 0 3
9792: IFFALSE 9806
// Say ( Heike , DH-Start-39 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Start-39
9801: PPUSH
9802: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9806: LD_INT 44
9808: PPUSH
9809: LD_INT 25
9811: PPUSH
9812: CALL_OW 428
9816: IFFALSE 9833
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9818: LD_INT 44
9820: PPUSH
9821: LD_INT 25
9823: PPUSH
9824: CALL_OW 428
9828: PPUSH
9829: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9833: LD_EXP 30
9837: PPUSH
9838: LD_INT 5
9840: PPUSH
9841: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9845: LD_EXP 30
9849: PPUSH
9850: LD_INT 44
9852: PPUSH
9853: LD_INT 25
9855: PPUSH
9856: LD_INT 0
9858: PPUSH
9859: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9863: LD_EXP 30
9867: PPUSH
9868: LD_INT 29
9870: PPUSH
9871: LD_INT 12
9873: PPUSH
9874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9878: LD_INT 35
9880: PPUSH
9881: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9885: LD_OWVAR 59
9889: PUSH
9890: LD_EXP 21
9894: PPUSH
9895: LD_EXP 30
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: LESS
9908: OR
9909: PUSH
9910: LD_EXP 30
9914: PPUSH
9915: LD_INT 26
9917: PPUSH
9918: LD_INT 9
9920: PPUSH
9921: CALL_OW 297
9925: PUSH
9926: LD_INT 6
9928: LESS
9929: OR
9930: IFFALSE 9878
// Say ( Olaf , DO-Scout-1 ) ;
9932: LD_EXP 30
9936: PPUSH
9937: LD_STRING DO-Scout-1
9939: PPUSH
9940: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9944: LD_EXP 30
9948: PPUSH
9949: LD_EXP 21
9953: PPUSH
9954: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9958: LD_ADDR_VAR 0 2
9962: PUSH
9963: LD_VAR 0 6
9967: PUSH
9968: LD_EXP 34
9972: UNION
9973: PUSH
9974: FOR_IN
9975: IFFALSE 9993
// ComTurnUnit ( i , Olaf ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 30
9986: PPUSH
9987: CALL_OW 119
9991: GO 9974
9993: POP
9994: POP
// wait ( 0 0$0.3 ) ;
9995: LD_INT 10
9997: PPUSH
9998: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10002: LD_EXP 21
10006: PPUSH
10007: LD_EXP 30
10011: PPUSH
10012: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10016: LD_EXP 21
10020: PPUSH
10021: LD_EXP 30
10025: PPUSH
10026: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10030: LD_EXP 21
10034: PPUSH
10035: LD_STRING DH-Scout-2
10037: PPUSH
10038: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10042: LD_EXP 30
10046: PPUSH
10047: LD_STRING DO-Scout-3
10049: PPUSH
10050: CALL_OW 88
// if Mike and Givi then
10054: LD_EXP 23
10058: PUSH
10059: LD_EXP 22
10063: AND
10064: IFFALSE 10080
// Say ( Olaf , DO-Scout-4 ) else
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-4
10073: PPUSH
10074: CALL_OW 88
10078: GO 10180
// begin if Mike then
10080: LD_EXP 23
10084: IFFALSE 10112
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_STRING DO-Scout-a-4
10093: PPUSH
10094: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10098: LD_EXP 21
10102: PPUSH
10103: LD_STRING DH-Scout-a-5
10105: PPUSH
10106: CALL_OW 88
// end else
10110: GO 10180
// if Givi then
10112: LD_EXP 22
10116: IFFALSE 10144
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING DO-Scout-b-4
10125: PPUSH
10126: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING DH-Scout-b-5
10137: PPUSH
10138: CALL_OW 88
// end else
10142: GO 10180
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10144: LD_EXP 30
10148: PPUSH
10149: LD_STRING DO-Scout-f-4
10151: PPUSH
10152: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10156: LD_EXP 21
10160: PPUSH
10161: LD_STRING DH-Scout-f-5
10163: PPUSH
10164: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10168: LD_EXP 30
10172: PPUSH
10173: LD_STRING DO-Scout-f-6
10175: PPUSH
10176: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10180: LD_EXP 21
10184: PPUSH
10185: LD_STRING DH-Scout-5
10187: PPUSH
10188: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10192: LD_EXP 30
10196: PPUSH
10197: LD_STRING DO-Scout-6
10199: PPUSH
10200: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10204: LD_EXP 30
10208: PPUSH
10209: LD_STRING DO-Scout-7
10211: PPUSH
10212: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10216: LD_EXP 21
10220: PPUSH
10221: LD_STRING DH-Scout-8
10223: PPUSH
10224: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10228: LD_EXP 21
10232: PPUSH
10233: LD_STRING DH-Scout-9
10235: PPUSH
10236: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10240: LD_EXP 30
10244: PPUSH
10245: LD_STRING DO-Scout-10
10247: PPUSH
10248: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10252: LD_EXP 30
10256: PPUSH
10257: LD_STRING DO-Scout-12
10259: PPUSH
10260: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10264: LD_EXP 30
10268: PPUSH
10269: LD_STRING DO-Scout-13
10271: PPUSH
10272: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10276: LD_EXP 30
10280: PPUSH
10281: LD_STRING DO-Scout-14
10283: PPUSH
10284: CALL_OW 88
// if Givi then
10288: LD_EXP 22
10292: IFFALSE 10318
// begin Say ( Givi , DG-Scout-15 ) ;
10294: LD_EXP 22
10298: PPUSH
10299: LD_STRING DG-Scout-15
10301: PPUSH
10302: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10306: LD_EXP 26
10310: PPUSH
10311: LD_STRING DK-Scout-16
10313: PPUSH
10314: CALL_OW 88
// end ; if not dialogue_skipped then
10318: LD_OWVAR 59
10322: NOT
10323: IFFALSE 10444
// begin async ;
10325: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-17
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10338: LD_INT 55
10340: PPUSH
10341: LD_INT 77
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 6
10349: NEG
10350: PPUSH
10351: CALL 1155 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10362: LD_INT 55
10364: PPUSH
10365: LD_INT 77
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10379: LD_EXP 30
10383: PPUSH
10384: LD_STRING DO-Scout-18
10386: PPUSH
10387: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10391: LD_INT 204
10393: PPUSH
10394: LD_INT 107
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 12
10402: NEG
10403: PPUSH
10404: CALL 1155 0 4
// wait ( 10 ) ;
10408: LD_INT 10
10410: PPUSH
10411: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10415: LD_INT 204
10417: PPUSH
10418: LD_INT 107
10420: PPUSH
10421: CALL_OW 84
// wait ( 0 0$10 ) ;
10425: LD_INT 350
10427: PPUSH
10428: CALL_OW 67
// sync ;
10432: SYNC
// CenterNowOnUnits ( Heike ) ;
10433: LD_EXP 21
10437: PPUSH
10438: CALL_OW 87
// end else
10442: GO 10478
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10444: LD_INT 55
10446: PPUSH
10447: LD_INT 77
10449: PPUSH
10450: LD_INT 2
10452: PPUSH
10453: LD_INT 6
10455: NEG
10456: PPUSH
10457: CALL 1155 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10461: LD_INT 204
10463: PPUSH
10464: LD_INT 107
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: LD_INT 12
10472: NEG
10473: PPUSH
10474: CALL 1155 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10478: LD_EXP 30
10482: PPUSH
10483: LD_STRING DO-Scout-19
10485: PPUSH
10486: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10490: LD_EXP 30
10494: PPUSH
10495: LD_STRING DO-Scout-20
10497: PPUSH
10498: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10502: LD_EXP 21
10506: PPUSH
10507: LD_STRING DH-Scout-21
10509: PPUSH
10510: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10514: LD_EXP 21
10518: PPUSH
10519: LD_STRING DH-Scout-22
10521: PPUSH
10522: CALL_OW 88
// InGameOff ;
10526: CALL_OW 9
// if heikeSecondSquad then
10530: LD_EXP 34
10534: IFFALSE 10548
// ForceSleep ( heikeSecondSquad , false ) ;
10536: LD_EXP 34
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 585
// if Givi then
10548: LD_EXP 22
10552: IFFALSE 10567
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10554: LD_INT 13
10556: PPUSH
10557: LD_INT 2
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10567: LD_STRING Road
10569: PPUSH
10570: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_INT 22
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 21
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: PUSH
10608: FOR_IN
10609: IFFALSE 10625
// SetSide ( i , 2 ) ;
10611: LD_VAR 0 2
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: CALL_OW 235
10623: GO 10608
10625: POP
10626: POP
// SaveForQuickRestart ;
10627: CALL_OW 22
// music_class := music_auto ;
10631: LD_ADDR_OWVAR 72
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// end ;
10639: LD_VAR 0 1
10643: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10644: LD_INT 2
10646: PPUSH
10647: LD_INT 9
10649: PPUSH
10650: CALL_OW 294
10654: IFFALSE 11019
10656: GO 10658
10658: DISABLE
// begin DialogueOn ;
10659: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10663: LD_INT 111
10665: PPUSH
10666: LD_INT 72
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: LD_INT 20
10674: NEG
10675: PPUSH
10676: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10680: LD_INT 111
10682: PPUSH
10683: LD_INT 72
10685: PPUSH
10686: LD_INT 2
10688: PPUSH
10689: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10693: LD_INT 111
10695: PPUSH
10696: LD_INT 72
10698: PPUSH
10699: CALL_OW 86
// if IsOk ( Kamil ) then
10703: LD_EXP 25
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10829
// begin Say ( Kamil , DKam-Cross-1 ) ;
10714: LD_EXP 25
10718: PPUSH
10719: LD_STRING DKam-Cross-1
10721: PPUSH
10722: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10726: LD_EXP 25
10730: PPUSH
10731: LD_STRING DKam-Cross-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10738: LD_EXP 25
10742: PPUSH
10743: LD_STRING DKam-Cross-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10750: LD_EXP 25
10754: PPUSH
10755: LD_STRING DKam-Cross-4
10757: PPUSH
10758: CALL_OW 88
// if IsOk ( Ibrahim ) then
10762: LD_EXP 24
10766: PPUSH
10767: CALL_OW 302
10771: IFFALSE 10827
// begin if ibrahimJoinedIn04 then
10773: LD_EXP 4
10777: IFFALSE 10791
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10779: LD_EXP 24
10783: PPUSH
10784: LD_STRING DI-Cross-b-5
10786: PPUSH
10787: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10791: LD_EXP 24
10795: PPUSH
10796: LD_STRING DI-Cross-b-6
10798: PPUSH
10799: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10803: LD_EXP 24
10807: PPUSH
10808: LD_STRING DI-Cross-b-7
10810: PPUSH
10811: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10815: LD_EXP 25
10819: PPUSH
10820: LD_STRING DKam-Cross-8
10822: PPUSH
10823: CALL_OW 88
// end ; end else
10827: GO 10987
// if IsOk ( Sophia ) then
10829: LD_EXP 27
10833: PPUSH
10834: CALL_OW 302
10838: IFFALSE 10955
// begin Say ( Sophia , DS-Cross-1 ) ;
10840: LD_EXP 27
10844: PPUSH
10845: LD_STRING DS-Cross-1
10847: PPUSH
10848: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_STRING DS-Cross-2
10859: PPUSH
10860: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10864: LD_EXP 27
10868: PPUSH
10869: LD_STRING DS-Cross-3
10871: PPUSH
10872: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10876: LD_EXP 27
10880: PPUSH
10881: LD_STRING DS-Cross-4
10883: PPUSH
10884: CALL_OW 88
// if IsOk ( Ibrahim ) then
10888: LD_EXP 24
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10953
// begin if ibrahimJoinedIn04 then
10899: LD_EXP 4
10903: IFFALSE 10917
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10905: LD_EXP 24
10909: PPUSH
10910: LD_STRING DI-Cross-b-5
10912: PPUSH
10913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10917: LD_EXP 24
10921: PPUSH
10922: LD_STRING DI-Cross-b-6
10924: PPUSH
10925: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10929: LD_EXP 24
10933: PPUSH
10934: LD_STRING DI-Cross-b-7
10936: PPUSH
10937: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10941: LD_EXP 27
10945: PPUSH
10946: LD_STRING DS-Cross-8
10948: PPUSH
10949: CALL_OW 88
// end ; end else
10953: GO 10987
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10955: LD_EXP 34
10959: PPUSH
10960: LD_INT 50
10962: PUSH
10963: EMPTY
10964: LIST
10965: PPUSH
10966: CALL_OW 72
10970: IFFALSE 10987
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10972: LD_EXP 34
10976: PPUSH
10977: LD_STRING DArm-Cross-c-1
10979: PPUSH
10980: LD_STRING DArf-Cross-c-1
10982: PPUSH
10983: CALL 1206 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10987: LD_INT 85
10989: PPUSH
10990: LD_INT 2
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// DialogueOff ;
11000: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11004: LD_STRING Crane
11006: PPUSH
11007: CALL_OW 337
// spottedCrossRoad := true ;
11011: LD_ADDR_EXP 8
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// end ;
11019: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11020: LD_INT 22
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PUSH
11067: LD_EXP 26
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_EXP 34
11081: OR
11082: AND
11083: IFFALSE 11295
11085: GO 11087
11087: DISABLE
// begin DialogueOn ;
11088: CALL_OW 6
// if Kaia then
11092: LD_EXP 26
11096: IFFALSE 11109
// CenterNowOnUnits ( Kaia ) else
11098: LD_EXP 26
11102: PPUSH
11103: CALL_OW 87
11107: GO 11118
// CenterNowOnUnits ( Heike ) ;
11109: LD_EXP 21
11113: PPUSH
11114: CALL_OW 87
// if IsOk ( Kaia ) then
11118: LD_EXP 26
11122: PPUSH
11123: CALL_OW 302
11127: IFFALSE 11143
// Say ( Kaia , DK-Cam-1 ) else
11129: LD_EXP 26
11133: PPUSH
11134: LD_STRING DK-Cam-1
11136: PPUSH
11137: CALL_OW 88
11141: GO 11158
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11143: LD_EXP 34
11147: PPUSH
11148: LD_STRING DArm-Cam-1
11150: PPUSH
11151: LD_STRING DArf-Cam-1
11153: PPUSH
11154: CALL 1206 0 3
// Say ( Heike , DH-Cam-2 ) ;
11158: LD_EXP 21
11162: PPUSH
11163: LD_STRING DH-Cam-2
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11170: LD_EXP 21
11174: PPUSH
11175: LD_STRING DH-Cam-3
11177: PPUSH
11178: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11182: LD_EXP 21
11186: PPUSH
11187: LD_STRING DH-Cam-4
11189: PPUSH
11190: CALL_OW 88
// if IsOk ( Kaia ) then
11194: LD_EXP 26
11198: PPUSH
11199: CALL_OW 302
11203: IFFALSE 11219
// Say ( Kaia , DK-Cam-5 ) else
11205: LD_EXP 26
11209: PPUSH
11210: LD_STRING DK-Cam-5
11212: PPUSH
11213: CALL_OW 88
11217: GO 11234
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11219: LD_EXP 34
11223: PPUSH
11224: LD_STRING DArm-Cam-5
11226: PPUSH
11227: LD_STRING DArf-Cam-5
11229: PPUSH
11230: CALL 1206 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11234: LD_EXP 30
11238: PPUSH
11239: LD_STRING DO-Cam-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11246: LD_EXP 30
11250: PPUSH
11251: LD_STRING DO-Cam-7
11253: PPUSH
11254: CALL_OW 88
// DialogueOff ;
11258: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11262: LD_STRING Radar
11264: PPUSH
11265: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11269: LD_INT 6
11271: PPUSH
11272: LD_INT 2
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11282: LD_INT 20
11284: PPUSH
11285: LD_INT 2
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// end ;
11295: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11296: LD_INT 22
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: LD_INT 34
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 35
11321: PUSH
11322: LD_INT 30
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: IFFALSE 11354
11344: GO 11346
11346: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11347: LD_STRING RadarDone
11349: PPUSH
11350: CALL_OW 337
11354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11355: LD_INT 22
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 34
11367: PUSH
11368: LD_INT 88
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: IFFALSE 11395
11385: GO 11387
11387: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11388: LD_STRING CraneDone
11390: PPUSH
11391: CALL_OW 337
11395: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11396: LD_EXP 30
11400: PPUSH
11401: CALL_OW 302
11405: PUSH
11406: LD_EXP 33
11410: PPUSH
11411: CALL_OW 302
11415: AND
11416: PUSH
11417: LD_INT 6
11419: PPUSH
11420: LD_INT 2
11422: PPUSH
11423: CALL_OW 321
11427: PUSH
11428: LD_INT 2
11430: EQUAL
11431: AND
11432: PUSH
11433: LD_EXP 33
11437: PPUSH
11438: LD_EXP 21
11442: PPUSH
11443: CALL_OW 296
11447: PUSH
11448: LD_INT 10
11450: LESS
11451: PUSH
11452: LD_EXP 33
11456: PPUSH
11457: CALL_OW 310
11461: OR
11462: AND
11463: IFFALSE 11677
11465: GO 11467
11467: DISABLE
// begin DialogueOn ;
11468: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11472: LD_EXP 33
11476: PPUSH
11477: LD_STRING DA-RC-1
11479: PPUSH
11480: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11484: LD_EXP 33
11488: PPUSH
11489: LD_STRING DA-RC-2
11491: PPUSH
11492: CALL_OW 88
// if IsOk ( Kaia ) then
11496: LD_EXP 26
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 11579
// begin Say ( Kaia , DK-RC-3 ) ;
11507: LD_EXP 26
11511: PPUSH
11512: LD_STRING DK-RC-3
11514: PPUSH
11515: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11519: LD_EXP 33
11523: PPUSH
11524: LD_STRING DA-RC-4
11526: PPUSH
11527: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11531: LD_EXP 26
11535: PPUSH
11536: LD_STRING DK-RC-5
11538: PPUSH
11539: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11543: LD_EXP 33
11547: PPUSH
11548: LD_STRING DA-RC-6
11550: PPUSH
11551: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11555: LD_EXP 26
11559: PPUSH
11560: LD_STRING DK-RC-7
11562: PPUSH
11563: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11567: LD_EXP 33
11571: PPUSH
11572: LD_STRING DA-RC-8
11574: PPUSH
11575: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11579: LD_EXP 21
11583: PPUSH
11584: LD_STRING DH-RC-9
11586: PPUSH
11587: CALL_OW 88
// if IsOk ( Markov ) then
11591: LD_EXP 28
11595: PPUSH
11596: CALL_OW 302
11600: IFFALSE 11628
// begin Say ( Markov , DMar-RC-10 ) ;
11602: LD_EXP 28
11606: PPUSH
11607: LD_STRING DMar-RC-10
11609: PPUSH
11610: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_STRING DMar-RC-11
11621: PPUSH
11622: CALL_OW 88
// end else
11626: GO 11640
// begin Say ( Olaf , DO-RC-a-10 ) ;
11628: LD_EXP 30
11632: PPUSH
11633: LD_STRING DO-RC-a-10
11635: PPUSH
11636: CALL_OW 88
// end ; DialogueOff ;
11640: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11644: LD_STRING RemoteControl
11646: PPUSH
11647: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11651: LD_INT 15
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11664: LD_INT 22
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// end ;
11677: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11678: LD_INT 12
11680: PPUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 70
11695: IFFALSE 12062
11697: GO 11699
11699: DISABLE
11700: LD_INT 0
11702: PPUSH
// begin PrepareWestBase ;
11703: CALL 3969 0 0
// westBaseSpotted := true ;
11707: LD_ADDR_EXP 5
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11715: LD_INT 70
11717: PPUSH
11718: CALL_OW 67
// InGameOn ;
11722: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11726: LD_INT 56
11728: PPUSH
11729: LD_INT 77
11731: PPUSH
11732: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11736: LD_INT 56
11738: PPUSH
11739: LD_INT 77
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: LD_INT 12
11747: NEG
11748: PPUSH
11749: CALL_OW 330
// wait ( 0 0$2 ) ;
11753: LD_INT 70
11755: PPUSH
11756: CALL_OW 67
// DialogueOn ;
11760: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11764: LD_EXP 21
11768: PPUSH
11769: LD_STRING DH-Rbase-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11776: LD_EXP 26
11780: PPUSH
11781: LD_STRING DK-Rbase-2
11783: PPUSH
11784: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11788: LD_EXP 26
11792: PPUSH
11793: LD_STRING DK-Rbase-3
11795: PPUSH
11796: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11800: LD_EXP 26
11804: PPUSH
11805: LD_STRING DK-Rbase-4
11807: PPUSH
11808: CALL_OW 88
// DialogueOff ;
11812: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11816: LD_INT 56
11818: PPUSH
11819: LD_INT 77
11821: PPUSH
11822: LD_INT 2
11824: PPUSH
11825: CALL_OW 331
// InGameOff ;
11829: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11833: LD_INT 35
11835: PPUSH
11836: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11840: LD_EXP 42
11844: NOT
11845: PUSH
11846: LD_EXP 43
11850: NOT
11851: AND
11852: IFFALSE 11833
// wait ( 0 0$2 ) ;
11854: LD_INT 70
11856: PPUSH
11857: CALL_OW 67
// if IsOk ( Kaia ) then
11861: LD_EXP 26
11865: PPUSH
11866: CALL_OW 302
11870: IFFALSE 11985
// begin DialogueOn ;
11872: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11876: LD_INT 56
11878: PPUSH
11879: LD_INT 81
11881: PPUSH
11882: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11886: LD_EXP 26
11890: PPUSH
11891: LD_STRING DK-Rbase-5
11893: PPUSH
11894: CALL_OW 88
// if IsOk ( Givi ) then
11898: LD_EXP 22
11902: PPUSH
11903: CALL_OW 302
11907: IFFALSE 11981
// begin Say ( Givi , DG-Rbase-6 ) ;
11909: LD_EXP 22
11913: PPUSH
11914: LD_STRING DG-Rbase-6
11916: PPUSH
11917: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11921: LD_EXP 22
11925: PPUSH
11926: LD_STRING DG-Rbase-7
11928: PPUSH
11929: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11933: LD_EXP 26
11937: PPUSH
11938: LD_STRING DK-Rbase-8
11940: PPUSH
11941: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Rbase-9
11952: PPUSH
11953: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11957: LD_EXP 22
11961: PPUSH
11962: LD_STRING DG-Rbase-10
11964: PPUSH
11965: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11969: LD_EXP 26
11973: PPUSH
11974: LD_STRING DK-Rbase-11
11976: PPUSH
11977: CALL_OW 88
// end ; DialogueOff ;
11981: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_INT 12
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 3
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 21
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 70
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12039
// SetSide ( i , 2 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 235
12037: GO 12022
12039: POP
12040: POP
// westBaseCaptured := true ;
12041: LD_ADDR_EXP 9
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12049: LD_INT 0
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 324
// end ;
12062: PPOPN 1
12064: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 or tick > 15 15$00 do
12065: LD_EXP 38
12069: NOT
12070: PUSH
12071: LD_INT 10
12073: PPUSH
12074: CALL_OW 255
12078: PUSH
12079: LD_INT 2
12081: EQUAL
12082: OR
12083: PUSH
12084: LD_OWVAR 1
12088: PUSH
12089: LD_INT 31500
12091: GREATER
12092: OR
12093: IFFALSE 12230
12095: GO 12097
12097: DISABLE
// begin DialogueOn ;
12098: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12102: LD_EXP 21
12106: PPUSH
12107: LD_STRING DH-Goal-1
12109: PPUSH
12110: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12114: LD_EXP 29
12118: PPUSH
12119: LD_STRING DShar-Goal-2
12121: PPUSH
12122: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12126: LD_EXP 21
12130: PPUSH
12131: LD_STRING DH-Goal-3
12133: PPUSH
12134: CALL_OW 88
// if reinforcementsAllowed then
12138: LD_EXP 14
12142: IFFALSE 12168
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12144: LD_EXP 29
12148: PPUSH
12149: LD_STRING DShar-Goal-4
12151: PPUSH
12152: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12156: LD_EXP 21
12160: PPUSH
12161: LD_STRING DH-Goal-5
12163: PPUSH
12164: CALL_OW 88
// end ; DialogueOff ;
12168: CALL_OW 7
// eastBaseCaptured := true ;
12172: LD_ADDR_EXP 10
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12180: LD_STRING BaseCaptured
12182: PPUSH
12183: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12187: LD_INT 10
12189: PPUSH
12190: LD_INT 2
12192: PPUSH
12193: CALL_OW 235
// if not reinforcementsAllowed then
12197: LD_EXP 14
12201: NOT
12202: IFFALSE 12206
// exit ;
12204: GO 12230
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12206: LD_INT 21000
12208: PUSH
12209: LD_INT 1050
12211: NEG
12212: PPUSH
12213: LD_INT 1050
12215: PPUSH
12216: CALL_OW 12
12220: PLUS
12221: PPUSH
12222: CALL_OW 67
// PrepareReinforcements ;
12226: CALL 2182 0 0
// end ;
12230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12231: LD_INT 22
12233: PUSH
12234: LD_INT 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 30
12243: PUSH
12244: LD_INT 13
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: IFFALSE 12276
12261: GO 12263
12263: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12264: LD_EXP 22
12268: PPUSH
12269: LD_STRING DG-Lab-1
12271: PPUSH
12272: CALL_OW 88
// end ;
12276: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12277: LD_INT 5
12279: PPUSH
12280: LD_INT 2
12282: PPUSH
12283: CALL_OW 321
12287: PUSH
12288: LD_INT 2
12290: EQUAL
12291: PUSH
12292: LD_EXP 22
12296: PPUSH
12297: CALL_OW 302
12301: AND
12302: IFFALSE 12363
12304: GO 12306
12306: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12307: LD_EXP 22
12311: PPUSH
12312: LD_STRING DG-Stim-1
12314: PPUSH
12315: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12319: LD_EXP 21
12323: PPUSH
12324: LD_STRING DH-Stim-2
12326: PPUSH
12327: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12331: LD_EXP 22
12335: PPUSH
12336: LD_STRING DG-Stim-3
12338: PPUSH
12339: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12343: LD_EXP 21
12347: PPUSH
12348: LD_STRING DH-Stim-4
12350: PPUSH
12351: CALL_OW 88
// drugsResearched := true ;
12355: LD_ADDR_EXP 11
12359: PUSH
12360: LD_INT 1
12362: ST_TO_ADDR
// end ;
12363: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12364: LD_EXP 11
12368: IFFALSE 12680
12370: GO 12372
12372: DISABLE
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12378: LD_ADDR_VAR 0 2
12382: PUSH
12383: LD_EXP 21
12387: PUSH
12388: LD_EXP 22
12392: PUSH
12393: LD_EXP 30
12397: PUSH
12398: LD_EXP 28
12402: PUSH
12403: LD_EXP 26
12407: PUSH
12408: LD_EXP 27
12412: PUSH
12413: LD_EXP 32
12417: PUSH
12418: LD_EXP 25
12422: PUSH
12423: LD_EXP 23
12427: PUSH
12428: LD_EXP 24
12432: PUSH
12433: LD_EXP 33
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12451: LD_ADDR_VAR 0 3
12455: PUSH
12456: LD_STRING H
12458: PUSH
12459: LD_STRING G
12461: PUSH
12462: LD_STRING O
12464: PUSH
12465: LD_STRING Mar
12467: PUSH
12468: LD_STRING K
12470: PUSH
12471: LD_STRING S
12473: PUSH
12474: LD_STRING Ks
12476: PUSH
12477: LD_STRING Kam
12479: PUSH
12480: LD_STRING M
12482: PUSH
12483: LD_STRING I
12485: PUSH
12486: LD_STRING A
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12502: LD_INT 35
12504: PPUSH
12505: CALL_OW 67
// for i := tmp downto 1 do
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: DOUBLE
12515: LD_VAR 0 2
12519: INC
12520: ST_TO_ADDR
12521: LD_INT 1
12523: PUSH
12524: FOR_DOWNTO
12525: IFFALSE 12671
// if GetLives ( tmp [ i ] ) < 250 then
12527: LD_VAR 0 2
12531: PUSH
12532: LD_VAR 0 1
12536: ARRAY
12537: PPUSH
12538: CALL_OW 256
12542: PUSH
12543: LD_INT 250
12545: LESS
12546: IFFALSE 12669
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12548: LD_ADDR_EXP 19
12552: PUSH
12553: LD_EXP 19
12557: PUSH
12558: LD_INT 1
12560: PLUS
12561: ST_TO_ADDR
// DialogueOn ;
12562: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12566: LD_VAR 0 2
12570: PUSH
12571: LD_VAR 0 1
12575: ARRAY
12576: PPUSH
12577: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12581: LD_VAR 0 2
12585: PUSH
12586: LD_VAR 0 1
12590: ARRAY
12591: PPUSH
12592: LD_STRING D
12594: PUSH
12595: LD_VAR 0 3
12599: PUSH
12600: LD_VAR 0 1
12604: ARRAY
12605: STR
12606: PUSH
12607: LD_STRING -Stim-a-1
12609: STR
12610: PPUSH
12611: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12615: LD_ADDR_VAR 0 2
12619: PUSH
12620: LD_VAR 0 2
12624: PPUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: CALL_OW 3
12634: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_VAR 0 1
12649: PPUSH
12650: CALL_OW 3
12654: ST_TO_ADDR
// drugsTested := true ;
12655: LD_ADDR_EXP 6
12659: PUSH
12660: LD_INT 1
12662: ST_TO_ADDR
// DialogueOff ;
12663: CALL_OW 7
// break ;
12667: GO 12671
// end ;
12669: GO 12524
12671: POP
12672: POP
// until not tmp ;
12673: LD_VAR 0 2
12677: NOT
12678: IFFALSE 12502
// end ;
12680: PPOPN 3
12682: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12683: LD_INT 22
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 34
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 69
12711: PUSH
12712: LD_INT 22
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 33
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: AND
12741: IFFALSE 12754
12743: GO 12745
12745: DISABLE
// remoteControlConstructed := true ;
12746: LD_ADDR_EXP 12
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
12754: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12755: LD_EXP 12
12759: IFFALSE 13059
12761: GO 12763
12763: DISABLE
12764: LD_INT 0
12766: PPUSH
12767: PPUSH
12768: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12769: LD_ADDR_VAR 0 2
12773: PUSH
12774: LD_EXP 21
12778: PUSH
12779: LD_EXP 22
12783: PUSH
12784: LD_EXP 30
12788: PUSH
12789: LD_EXP 28
12793: PUSH
12794: LD_EXP 26
12798: PUSH
12799: LD_EXP 27
12803: PUSH
12804: LD_EXP 32
12808: PUSH
12809: LD_EXP 25
12813: PUSH
12814: LD_EXP 23
12818: PUSH
12819: LD_EXP 24
12823: PUSH
12824: LD_EXP 33
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12842: LD_ADDR_VAR 0 3
12846: PUSH
12847: LD_STRING H
12849: PUSH
12850: LD_STRING G
12852: PUSH
12853: LD_STRING O
12855: PUSH
12856: LD_STRING Mar
12858: PUSH
12859: LD_STRING K
12861: PUSH
12862: LD_STRING S
12864: PUSH
12865: LD_STRING Ks
12867: PUSH
12868: LD_STRING Kam
12870: PUSH
12871: LD_STRING M
12873: PUSH
12874: LD_STRING I
12876: PUSH
12877: LD_STRING A
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12893: LD_INT 35
12895: PPUSH
12896: CALL_OW 67
// for i := tmp downto 1 do
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: DOUBLE
12906: LD_VAR 0 2
12910: INC
12911: ST_TO_ADDR
12912: LD_INT 1
12914: PUSH
12915: FOR_DOWNTO
12916: IFFALSE 13050
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12918: LD_VAR 0 2
12922: PUSH
12923: LD_VAR 0 1
12927: ARRAY
12928: PPUSH
12929: CALL_OW 257
12933: PUSH
12934: LD_INT 3
12936: EQUAL
12937: PUSH
12938: LD_VAR 0 2
12942: PUSH
12943: LD_VAR 0 1
12947: ARRAY
12948: PPUSH
12949: CALL_OW 432
12953: AND
12954: IFFALSE 13048
// begin DialogueOn ;
12956: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12960: LD_VAR 0 2
12964: PUSH
12965: LD_VAR 0 1
12969: ARRAY
12970: PPUSH
12971: LD_STRING D
12973: PUSH
12974: LD_VAR 0 3
12978: PUSH
12979: LD_VAR 0 1
12983: ARRAY
12984: STR
12985: PUSH
12986: LD_STRING -RC-a-1
12988: STR
12989: PPUSH
12990: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 2
13003: PPUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 3
13013: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_VAR 0 1
13028: PPUSH
13029: CALL_OW 3
13033: ST_TO_ADDR
// DialogueOff ;
13034: CALL_OW 7
// remoteControlTested := true ;
13038: LD_ADDR_EXP 7
13042: PUSH
13043: LD_INT 1
13045: ST_TO_ADDR
// break ;
13046: GO 13050
// end ;
13048: GO 12915
13050: POP
13051: POP
// until not tmp ;
13052: LD_VAR 0 2
13056: NOT
13057: IFFALSE 12893
// end ;
13059: PPOPN 3
13061: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13062: LD_EXP 7
13066: PUSH
13067: LD_EXP 28
13071: PPUSH
13072: CALL_OW 302
13076: AND
13077: IFFALSE 13106
13079: GO 13081
13081: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13082: LD_EXP 28
13086: PPUSH
13087: LD_STRING DMar-RC-a-2
13089: PPUSH
13090: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13094: LD_EXP 28
13098: PPUSH
13099: LD_STRING DMar-RC-a-3
13101: PPUSH
13102: CALL_OW 88
// end ;
13106: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13107: LD_EXP 14
13111: PUSH
13112: LD_EXP 21
13116: PPUSH
13117: LD_EXP 33
13121: PPUSH
13122: CALL_OW 296
13126: PUSH
13127: LD_INT 8
13129: LESS
13130: AND
13131: PUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 463
13139: NOT
13140: AND
13141: PUSH
13142: LD_EXP 33
13146: PPUSH
13147: CALL_OW 302
13151: AND
13152: PUSH
13153: LD_EXP 21
13157: PPUSH
13158: CALL_OW 302
13162: AND
13163: IFFALSE 13341
13165: GO 13167
13167: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13168: LD_EXP 33
13172: PPUSH
13173: CALL_OW 310
13177: NOT
13178: IFFALSE 13194
// ComTurnUnit ( Aviradze , Heike ) ;
13180: LD_EXP 33
13184: PPUSH
13185: LD_EXP 21
13189: PPUSH
13190: CALL_OW 119
// if not IsInUnit ( Heike ) then
13194: LD_EXP 21
13198: PPUSH
13199: CALL_OW 310
13203: NOT
13204: IFFALSE 13220
// ComTurnUnit ( Heike , Aviradze ) ;
13206: LD_EXP 21
13210: PPUSH
13211: LD_EXP 33
13215: PPUSH
13216: CALL_OW 119
// wait ( 0 0$1 ) ;
13220: LD_INT 35
13222: PPUSH
13223: CALL_OW 67
// DialogueOn ;
13227: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13231: LD_EXP 33
13235: PPUSH
13236: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13240: LD_EXP 21
13244: PPUSH
13245: LD_STRING DH-Beria-1
13247: PPUSH
13248: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13252: LD_EXP 33
13256: PPUSH
13257: LD_STRING DA-Beria-2
13259: PPUSH
13260: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13264: LD_EXP 21
13268: PPUSH
13269: LD_STRING DH-Beria-3
13271: PPUSH
13272: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13276: LD_EXP 33
13280: PPUSH
13281: LD_STRING DA-Beria-4
13283: PPUSH
13284: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13288: LD_EXP 33
13292: PPUSH
13293: LD_STRING DA-Beria-5
13295: PPUSH
13296: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13300: LD_EXP 33
13304: PPUSH
13305: LD_STRING DA-Beria-6
13307: PPUSH
13308: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13312: LD_EXP 21
13316: PPUSH
13317: LD_STRING DA-Beria-7
13319: PPUSH
13320: CALL_OW 88
// DialogueOff ;
13324: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13328: LD_INT 52
13330: PPUSH
13331: LD_INT 2
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 322
// end ;
13341: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13342: LD_EXP 26
13346: PPUSH
13347: CALL_OW 300
13351: PUSH
13352: LD_EXP 26
13356: PPUSH
13357: CALL_OW 256
13361: PUSH
13362: LD_INT 10
13364: LESS
13365: AND
13366: IFFALSE 13403
13368: GO 13370
13370: DISABLE
// begin DialogueOn ;
13371: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13375: LD_EXP 26
13379: PPUSH
13380: LD_STRING DK-Kdeath-1
13382: PPUSH
13383: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13387: LD_EXP 21
13391: PPUSH
13392: LD_STRING DH-Kdeath-2
13394: PPUSH
13395: CALL_OW 88
// DialogueOff ;
13399: CALL_OW 7
// end ;
13403: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13404: LD_INT 2
13406: PPUSH
13407: LD_EXP 39
13411: PPUSH
13412: CALL 1306 0 2
13416: IFFALSE 13433
13418: GO 13420
13420: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING DH-Obj-1
13428: PPUSH
13429: CALL_OW 88
13433: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13434: LD_INT 2
13436: PPUSH
13437: LD_EXP 40
13441: PPUSH
13442: CALL 1306 0 2
13446: IFFALSE 13463
13448: GO 13450
13450: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13451: LD_EXP 21
13455: PPUSH
13456: LD_STRING DH-Obj-a-1
13458: PPUSH
13459: CALL_OW 88
13463: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13464: LD_EXP 10
13468: PUSH
13469: LD_OWVAR 1
13473: PUSH
13474: LD_INT 23100
13476: PUSH
13477: LD_INT 22050
13479: PUSH
13480: LD_INT 21000
13482: PUSH
13483: LD_INT 19950
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: LD_OWVAR 67
13496: ARRAY
13497: GREATEREQUAL
13498: OR
13499: IFFALSE 13525
13501: GO 13503
13503: DISABLE
// begin if eastBaseCaptured then
13504: LD_EXP 10
13508: IFFALSE 13517
// wait ( 2 2$00 ) ;
13510: LD_INT 4200
13512: PPUSH
13513: CALL_OW 67
// convoyStarted := true ;
13517: LD_ADDR_EXP 17
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// end ;
13525: END
// every 0 0$1 trigger convoyStarted do
13526: LD_EXP 17
13530: IFFALSE 13621
13532: GO 13534
13534: DISABLE
// begin DialogueOn ;
13535: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13539: LD_EXP 29
13543: PPUSH
13544: LD_STRING DShar-Convoy-1
13546: PPUSH
13547: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13551: LD_EXP 21
13555: PPUSH
13556: LD_STRING DH-Convoy-2
13558: PPUSH
13559: CALL_OW 88
// DialogueOff ;
13563: CALL_OW 7
// wait ( 0 0$10 ) ;
13567: LD_INT 350
13569: PPUSH
13570: CALL_OW 67
// PrepareConvoy ;
13574: CALL 4616 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13578: LD_INT 5250
13580: PPUSH
13581: LD_INT 11550
13583: PPUSH
13584: CALL_OW 12
13588: PPUSH
13589: CALL_OW 67
// PrepareConvoy ;
13593: CALL 4616 0 0
// convoyCounter := convoyCounter - 1 ;
13597: LD_ADDR_EXP 16
13601: PUSH
13602: LD_EXP 16
13606: PUSH
13607: LD_INT 1
13609: MINUS
13610: ST_TO_ADDR
// until convoyCounter <= 0 ;
13611: LD_EXP 16
13615: PUSH
13616: LD_INT 0
13618: LESSEQUAL
13619: IFFALSE 13578
// end ;
13621: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13622: LD_EXP 15
13626: PUSH
13627: LD_INT 10
13629: GREATEREQUAL
13630: IFFALSE 13647
13632: GO 13634
13634: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13635: LD_EXP 31
13639: PPUSH
13640: LD_STRING DOm-Fail-1
13642: PPUSH
13643: CALL_OW 94
13647: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13648: LD_EXP 39
13652: NOT
13653: PUSH
13654: LD_EXP 40
13658: NOT
13659: AND
13660: IFFALSE 13672
13662: GO 13664
13664: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13665: LD_STRING RaiderDone
13667: PPUSH
13668: CALL_OW 337
13672: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13673: LD_INT 22
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 33
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: PUSH
13702: LD_INT 3
13704: GREATEREQUAL
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 34
13718: PUSH
13719: LD_INT 31
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: PUSH
13735: LD_INT 2
13737: GREATEREQUAL
13738: AND
13739: IFFALSE 13751
13741: GO 13743
13743: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13744: LD_STRING RemoteControlDone
13746: PPUSH
13747: CALL_OW 337
13751: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13752: LD_EXP 16
13756: PUSH
13757: LD_INT 1
13759: LESS
13760: PUSH
13761: LD_EXP 41
13765: PPUSH
13766: LD_INT 52
13768: PUSH
13769: EMPTY
13770: LIST
13771: PUSH
13772: LD_INT 21
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PPUSH
13786: CALL_OW 72
13790: NOT
13791: AND
13792: PUSH
13793: LD_OWVAR 1
13797: PUSH
13798: LD_INT 126000
13800: GREATEREQUAL
13801: OR
13802: IFFALSE 14994
13804: GO 13806
13806: DISABLE
13807: LD_INT 0
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13813: LD_STRING ReinforcementsDone
13815: PPUSH
13816: CALL_OW 337
// music_class := music_victory ;
13820: LD_ADDR_OWVAR 72
13824: PUSH
13825: LD_INT 4
13827: ST_TO_ADDR
// if tick <= 45 45$00 then
13828: LD_OWVAR 1
13832: PUSH
13833: LD_INT 94500
13835: LESSEQUAL
13836: IFFALSE 13845
// SetAchievement ( ACH_HSPEED_5 ) ;
13838: LD_STRING ACH_HSPEED_5
13840: PPUSH
13841: CALL_OW 543
// InGameOn ;
13845: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13849: LD_EXP 21
13853: PPUSH
13854: LD_STRING DH-end-1
13856: PPUSH
13857: CALL_OW 88
// wait ( 0 0$2 ) ;
13861: LD_INT 70
13863: PPUSH
13864: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13868: LD_EXP 29
13872: PPUSH
13873: LD_STRING DShar-end-2
13875: PPUSH
13876: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13880: LD_EXP 39
13884: NOT
13885: PUSH
13886: LD_EXP 40
13890: NOT
13891: AND
13892: IFFALSE 13908
// begin Say ( Heike , DH-end-3 ) ;
13894: LD_EXP 21
13898: PPUSH
13899: LD_STRING DH-end-3
13901: PPUSH
13902: CALL_OW 88
// end else
13906: GO 14012
// begin Say ( Heike , DH-end-a-3 ) ;
13908: LD_EXP 21
13912: PPUSH
13913: LD_STRING DH-end-a-3
13915: PPUSH
13916: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13920: LD_EXP 29
13924: PPUSH
13925: LD_STRING DShar-end-a-4
13927: PPUSH
13928: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13932: LD_EXP 21
13936: PPUSH
13937: LD_STRING DH-end-a-5
13939: PPUSH
13940: CALL_OW 88
// InGameOff ;
13944: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13948: LD_INT 35
13950: PPUSH
13951: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
13955: LD_INT 22
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 50
13967: PUSH
13968: EMPTY
13969: LIST
13970: PUSH
13971: LD_INT 21
13973: PUSH
13974: LD_INT 1
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 0
13993: EQUAL
13994: IFFALSE 13948
// InGameOn ;
13996: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14000: LD_EXP 21
14004: PPUSH
14005: LD_STRING DH-end-a-6
14007: PPUSH
14008: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14012: LD_EXP 29
14016: PPUSH
14017: LD_STRING DShar-end-3
14019: PPUSH
14020: CALL_OW 94
// if not flamethrowerBuilt then
14024: LD_EXP 20
14028: NOT
14029: IFFALSE 14038
// SetAchievement ( ACH_FIRE ) ;
14031: LD_STRING ACH_FIRE
14033: PPUSH
14034: CALL_OW 543
// if drugsTested then
14038: LD_EXP 6
14042: IFFALSE 14056
// AddMedal ( med1 , 1 ) else
14044: LD_STRING med1
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 101
14054: GO 14096
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14056: LD_INT 5
14058: PPUSH
14059: LD_INT 2
14061: PPUSH
14062: CALL_OW 321
14066: PUSH
14067: LD_INT 2
14069: EQUAL
14070: IFFALSE 14085
// AddMedal ( med1 , - 1 ) else
14072: LD_STRING med1
14074: PPUSH
14075: LD_INT 1
14077: NEG
14078: PPUSH
14079: CALL_OW 101
14083: GO 14096
// AddMedal ( med1 , - 2 ) ;
14085: LD_STRING med1
14087: PPUSH
14088: LD_INT 2
14090: NEG
14091: PPUSH
14092: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14096: LD_INT 22
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 33
14108: PUSH
14109: LD_INT 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 3
14127: GREATEREQUAL
14128: PUSH
14129: LD_INT 22
14131: PUSH
14132: LD_INT 2
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 34
14141: PUSH
14142: LD_INT 31
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PPUSH
14153: CALL_OW 69
14157: PUSH
14158: LD_INT 1
14160: GREATEREQUAL
14161: AND
14162: IFFALSE 14176
// AddMedal ( med2 , 1 ) else
14164: LD_STRING med2
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: CALL_OW 101
14174: GO 14187
// AddMedal ( med2 , - 1 ) ;
14176: LD_STRING med2
14178: PPUSH
14179: LD_INT 1
14181: NEG
14182: PPUSH
14183: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14187: LD_EXP 15
14191: PUSH
14192: LD_INT 10
14194: PUSH
14195: LD_INT 8
14197: PUSH
14198: LD_INT 6
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: PUSH
14210: LD_OWVAR 67
14214: ARRAY
14215: LESS
14216: IFFALSE 14230
// AddMedal ( med3 , 1 ) else
14218: LD_STRING med3
14220: PPUSH
14221: LD_INT 1
14223: PPUSH
14224: CALL_OW 101
14228: GO 14241
// AddMedal ( med3 , - 1 ) ;
14230: LD_STRING med3
14232: PPUSH
14233: LD_INT 1
14235: NEG
14236: PPUSH
14237: CALL_OW 101
// GiveMedals ( MAIN ) ;
14241: LD_STRING MAIN
14243: PPUSH
14244: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14248: LD_INT 22
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 1
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: PPUSH
14288: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14292: LD_EXP 15
14296: PPUSH
14297: LD_STRING 05_ConvoySavedCounter
14299: PPUSH
14300: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14304: LD_EXP 13
14308: PPUSH
14309: LD_STRING 05_Radar
14311: PPUSH
14312: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14316: LD_EXP 6
14320: PPUSH
14321: LD_STRING 05_DrugsTested
14323: PPUSH
14324: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14328: LD_INT 22
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 33
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: PUSH
14357: LD_INT 3
14359: GREATEREQUAL
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 34
14373: PUSH
14374: LD_INT 31
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PPUSH
14385: CALL_OW 69
14389: PUSH
14390: LD_INT 2
14392: GREATEREQUAL
14393: AND
14394: PPUSH
14395: LD_STRING 05_RemoteControl
14397: PPUSH
14398: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14402: LD_ADDR_VAR 0 2
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// if tmp then
14436: LD_VAR 0 2
14440: IFFALSE 14559
// begin vehs := [ ] ;
14442: LD_ADDR_VAR 0 4
14446: PUSH
14447: EMPTY
14448: ST_TO_ADDR
// for i in tmp do
14449: LD_ADDR_VAR 0 1
14453: PUSH
14454: LD_VAR 0 2
14458: PUSH
14459: FOR_IN
14460: IFFALSE 14545
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_VAR 0 4
14471: PPUSH
14472: LD_VAR 0 4
14476: PUSH
14477: LD_INT 1
14479: PLUS
14480: PPUSH
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 265
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 262
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 263
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 264
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 248
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 1
14542: ST_TO_ADDR
14543: GO 14459
14545: POP
14546: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14547: LD_VAR 0 4
14551: PPUSH
14552: LD_STRING 05_Vehicles
14554: PPUSH
14555: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_INT 25
14566: PPUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 3
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 70
14581: ST_TO_ADDR
// tmp2 := [ ] ;
14582: LD_ADDR_VAR 0 3
14586: PUSH
14587: EMPTY
14588: ST_TO_ADDR
// if tmp then
14589: LD_VAR 0 2
14593: IFFALSE 14746
// begin for i in tmp do
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_VAR 0 2
14604: PUSH
14605: FOR_IN
14606: IFFALSE 14732
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_VAR 0 3
14617: PPUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 266
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 250
14637: PUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 251
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 254
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 248
14667: PUSH
14668: LD_VAR 0 1
14672: PPUSH
14673: CALL_OW 267
14677: PUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 1
14685: PPUSH
14686: CALL_OW 268
14690: PUSH
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_INT 2
14698: PPUSH
14699: CALL_OW 268
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 269
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL 73277 0 2
14729: ST_TO_ADDR
14730: GO 14605
14732: POP
14733: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14734: LD_VAR 0 3
14738: PPUSH
14739: LD_STRING 05_Buildings
14741: PPUSH
14742: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14746: LD_EXP 21
14750: PPUSH
14751: LD_STRING 05_Heike
14753: PPUSH
14754: CALL_OW 38
// if Aviradze then
14758: LD_EXP 33
14762: IFFALSE 14776
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14764: LD_EXP 33
14768: PPUSH
14769: LD_STRING 05_Aviradze
14771: PPUSH
14772: CALL_OW 38
// if Ibrahim then
14776: LD_EXP 24
14780: IFFALSE 14794
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14782: LD_EXP 24
14786: PPUSH
14787: LD_STRING 05_Ibrahim
14789: PPUSH
14790: CALL_OW 38
// if Kamil then
14794: LD_EXP 25
14798: IFFALSE 14812
// SaveCharacters ( Kamil , 05_Kamil ) ;
14800: LD_EXP 25
14804: PPUSH
14805: LD_STRING 05_Kamil
14807: PPUSH
14808: CALL_OW 38
// if Sophia then
14812: LD_EXP 27
14816: IFFALSE 14830
// SaveCharacters ( Sophia , 05_Sophia ) ;
14818: LD_EXP 27
14822: PPUSH
14823: LD_STRING 05_Sophia
14825: PPUSH
14826: CALL_OW 38
// if Kaia then
14830: LD_EXP 26
14834: IFFALSE 14848
// SaveCharacters ( Kaia , 05_Kaia ) ;
14836: LD_EXP 26
14840: PPUSH
14841: LD_STRING 05_Kaia
14843: PPUSH
14844: CALL_OW 38
// if Givi then
14848: LD_EXP 22
14852: IFFALSE 14866
// SaveCharacters ( Givi , 05_Givi ) ;
14854: LD_EXP 22
14858: PPUSH
14859: LD_STRING 05_Givi
14861: PPUSH
14862: CALL_OW 38
// if Mike then
14866: LD_EXP 23
14870: IFFALSE 14884
// SaveCharacters ( Mike , 05_Mike ) ;
14872: LD_EXP 23
14876: PPUSH
14877: LD_STRING 05_Mike
14879: PPUSH
14880: CALL_OW 38
// if Markov then
14884: LD_EXP 28
14888: IFFALSE 14902
// SaveCharacters ( Markov , 05_Markov ) ;
14890: LD_EXP 28
14894: PPUSH
14895: LD_STRING 05_Markov
14897: PPUSH
14898: CALL_OW 38
// if Kurt then
14902: LD_EXP 32
14906: IFFALSE 14920
// SaveCharacters ( Kurt , 05_Kurt ) ;
14908: LD_EXP 32
14912: PPUSH
14913: LD_STRING 05_Kurt
14915: PPUSH
14916: CALL_OW 38
// if heikeSecondSquad then
14920: LD_EXP 34
14924: IFFALSE 14938
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14926: LD_EXP 34
14930: PPUSH
14931: LD_STRING 05_others
14933: PPUSH
14934: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 2
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 23
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 69
14971: ST_TO_ADDR
// if tmp then
14972: LD_VAR 0 2
14976: IFFALSE 14990
// SaveCharacters ( tmp , 05_apes ) ;
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_STRING 05_apes
14985: PPUSH
14986: CALL_OW 38
// YouWin ;
14990: CALL_OW 103
// end ; end_of_file
14994: PPOPN 4
14996: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14997: LD_EXP 9
15001: PUSH
15002: LD_INT 13
15004: PPUSH
15005: LD_INT 1
15007: PPUSH
15008: CALL_OW 287
15012: PUSH
15013: LD_INT 25
15015: LESS
15016: AND
15017: IFFALSE 15044
15019: GO 15021
15021: DISABLE
// begin enable ;
15022: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15023: LD_INT 1
15025: PPUSH
15026: LD_INT 5
15028: PPUSH
15029: CALL_OW 12
15033: PPUSH
15034: LD_INT 13
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 55
// end ; end_of_file
15044: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15045: LD_INT 0
15047: PPUSH
15048: PPUSH
15049: PPUSH
15050: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 264
15060: PUSH
15061: LD_INT 91
15063: EQUAL
15064: IFFALSE 15136
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15066: LD_INT 68
15068: PPUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 255
15078: PPUSH
15079: CALL_OW 321
15083: PUSH
15084: LD_INT 2
15086: EQUAL
15087: IFFALSE 15099
// eff := 70 else
15089: LD_ADDR_VAR 0 4
15093: PUSH
15094: LD_INT 70
15096: ST_TO_ADDR
15097: GO 15107
// eff := 30 ;
15099: LD_ADDR_VAR 0 4
15103: PUSH
15104: LD_INT 30
15106: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15107: LD_VAR 0 1
15111: PPUSH
15112: CALL_OW 250
15116: PPUSH
15117: LD_VAR 0 1
15121: PPUSH
15122: CALL_OW 251
15126: PPUSH
15127: LD_VAR 0 4
15131: PPUSH
15132: CALL_OW 495
// end ; end ;
15136: LD_VAR 0 2
15140: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15141: LD_INT 0
15143: PPUSH
// end ;
15144: LD_VAR 0 4
15148: RET
// export function SOS_Command ( cmd ) ; begin
15149: LD_INT 0
15151: PPUSH
// end ;
15152: LD_VAR 0 2
15156: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15157: LD_INT 0
15159: PPUSH
// end ;
15160: LD_VAR 0 6
15164: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15165: LD_INT 0
15167: PPUSH
15168: PPUSH
// if not vehicle or not factory then
15169: LD_VAR 0 1
15173: NOT
15174: PUSH
15175: LD_VAR 0 2
15179: NOT
15180: OR
15181: IFFALSE 15185
// exit ;
15183: GO 15416
// if factoryWaypoints >= factory then
15185: LD_EXP 113
15189: PUSH
15190: LD_VAR 0 2
15194: GREATEREQUAL
15195: IFFALSE 15416
// if factoryWaypoints [ factory ] then
15197: LD_EXP 113
15201: PUSH
15202: LD_VAR 0 2
15206: ARRAY
15207: IFFALSE 15416
// begin if GetControl ( vehicle ) = control_manual then
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 263
15218: PUSH
15219: LD_INT 1
15221: EQUAL
15222: IFFALSE 15303
// begin driver := IsDrivenBy ( vehicle ) ;
15224: LD_ADDR_VAR 0 4
15228: PUSH
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 311
15238: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15239: LD_VAR 0 4
15243: PPUSH
15244: LD_EXP 113
15248: PUSH
15249: LD_VAR 0 2
15253: ARRAY
15254: PUSH
15255: LD_INT 3
15257: ARRAY
15258: PPUSH
15259: LD_EXP 113
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: PUSH
15270: LD_INT 4
15272: ARRAY
15273: PPUSH
15274: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15278: LD_VAR 0 4
15282: PPUSH
15283: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15287: LD_VAR 0 4
15291: PPUSH
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL_OW 180
// end else
15301: GO 15416
// if GetControl ( vehicle ) = control_remote then
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 263
15312: PUSH
15313: LD_INT 2
15315: EQUAL
15316: IFFALSE 15377
// begin wait ( 0 0$2 ) ;
15318: LD_INT 70
15320: PPUSH
15321: CALL_OW 67
// if Connect ( vehicle ) then
15325: LD_VAR 0 1
15329: PPUSH
15330: CALL 43883 0 1
15334: IFFALSE 15375
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15336: LD_VAR 0 1
15340: PPUSH
15341: LD_EXP 113
15345: PUSH
15346: LD_VAR 0 2
15350: ARRAY
15351: PUSH
15352: LD_INT 3
15354: ARRAY
15355: PPUSH
15356: LD_EXP 113
15360: PUSH
15361: LD_VAR 0 2
15365: ARRAY
15366: PUSH
15367: LD_INT 4
15369: ARRAY
15370: PPUSH
15371: CALL_OW 171
// end else
15375: GO 15416
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15377: LD_VAR 0 1
15381: PPUSH
15382: LD_EXP 113
15386: PUSH
15387: LD_VAR 0 2
15391: ARRAY
15392: PUSH
15393: LD_INT 3
15395: ARRAY
15396: PPUSH
15397: LD_EXP 113
15401: PUSH
15402: LD_VAR 0 2
15406: ARRAY
15407: PUSH
15408: LD_INT 4
15410: ARRAY
15411: PPUSH
15412: CALL_OW 171
// end ; end ;
15416: LD_VAR 0 3
15420: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15421: LD_INT 0
15423: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15424: LD_VAR 0 1
15428: PUSH
15429: LD_INT 250
15431: EQUAL
15432: PUSH
15433: LD_VAR 0 2
15437: PPUSH
15438: CALL_OW 264
15442: PUSH
15443: LD_INT 81
15445: EQUAL
15446: AND
15447: IFFALSE 15468
// MinerPlaceMine ( unit , x , y ) ;
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_VAR 0 4
15458: PPUSH
15459: LD_VAR 0 5
15463: PPUSH
15464: CALL 18292 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15468: LD_VAR 0 1
15472: PUSH
15473: LD_INT 251
15475: EQUAL
15476: PUSH
15477: LD_VAR 0 2
15481: PPUSH
15482: CALL_OW 264
15486: PUSH
15487: LD_INT 81
15489: EQUAL
15490: AND
15491: IFFALSE 15512
// MinerDetonateMine ( unit , x , y ) ;
15493: LD_VAR 0 2
15497: PPUSH
15498: LD_VAR 0 4
15502: PPUSH
15503: LD_VAR 0 5
15507: PPUSH
15508: CALL 18567 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15512: LD_VAR 0 1
15516: PUSH
15517: LD_INT 252
15519: EQUAL
15520: PUSH
15521: LD_VAR 0 2
15525: PPUSH
15526: CALL_OW 264
15530: PUSH
15531: LD_INT 81
15533: EQUAL
15534: AND
15535: IFFALSE 15556
// MinerCreateMinefield ( unit , x , y ) ;
15537: LD_VAR 0 2
15541: PPUSH
15542: LD_VAR 0 4
15546: PPUSH
15547: LD_VAR 0 5
15551: PPUSH
15552: CALL 18984 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15556: LD_VAR 0 1
15560: PUSH
15561: LD_INT 253
15563: EQUAL
15564: PUSH
15565: LD_VAR 0 2
15569: PPUSH
15570: CALL_OW 257
15574: PUSH
15575: LD_INT 5
15577: EQUAL
15578: AND
15579: IFFALSE 15600
// ComBinocular ( unit , x , y ) ;
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_VAR 0 4
15590: PPUSH
15591: LD_VAR 0 5
15595: PPUSH
15596: CALL 19353 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15600: LD_VAR 0 1
15604: PUSH
15605: LD_INT 254
15607: EQUAL
15608: PUSH
15609: LD_VAR 0 2
15613: PPUSH
15614: CALL_OW 264
15618: PUSH
15619: LD_INT 99
15621: EQUAL
15622: AND
15623: PUSH
15624: LD_VAR 0 3
15628: PPUSH
15629: CALL_OW 263
15633: PUSH
15634: LD_INT 3
15636: EQUAL
15637: AND
15638: IFFALSE 15654
// HackDestroyVehicle ( unit , selectedUnit ) ;
15640: LD_VAR 0 2
15644: PPUSH
15645: LD_VAR 0 3
15649: PPUSH
15650: CALL 17656 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15654: LD_VAR 0 1
15658: PUSH
15659: LD_INT 255
15661: EQUAL
15662: PUSH
15663: LD_VAR 0 2
15667: PPUSH
15668: CALL_OW 264
15672: PUSH
15673: LD_INT 14
15675: PUSH
15676: LD_INT 53
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: IN
15683: AND
15684: PUSH
15685: LD_VAR 0 4
15689: PPUSH
15690: LD_VAR 0 5
15694: PPUSH
15695: CALL_OW 488
15699: AND
15700: IFFALSE 15724
// CutTreeXYR ( unit , x , y , 12 ) ;
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_VAR 0 4
15711: PPUSH
15712: LD_VAR 0 5
15716: PPUSH
15717: LD_INT 12
15719: PPUSH
15720: CALL 15819 0 4
// if cmd = 256 then
15724: LD_VAR 0 1
15728: PUSH
15729: LD_INT 256
15731: EQUAL
15732: IFFALSE 15753
// SetFactoryWaypoint ( unit , x , y ) ;
15734: LD_VAR 0 2
15738: PPUSH
15739: LD_VAR 0 4
15743: PPUSH
15744: LD_VAR 0 5
15748: PPUSH
15749: CALL 34264 0 3
// if cmd = 257 then
15753: LD_VAR 0 1
15757: PUSH
15758: LD_INT 257
15760: EQUAL
15761: IFFALSE 15782
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15763: LD_VAR 0 2
15767: PPUSH
15768: LD_VAR 0 4
15772: PPUSH
15773: LD_VAR 0 5
15777: PPUSH
15778: CALL 34626 0 3
// if cmd = 258 then
15782: LD_VAR 0 1
15786: PUSH
15787: LD_INT 258
15789: EQUAL
15790: IFFALSE 15814
// BurnTreeXYR ( unit , x , y , 8 ) ;
15792: LD_VAR 0 2
15796: PPUSH
15797: LD_VAR 0 4
15801: PPUSH
15802: LD_VAR 0 5
15806: PPUSH
15807: LD_INT 8
15809: PPUSH
15810: CALL 16213 0 4
// end ;
15814: LD_VAR 0 6
15818: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15819: LD_INT 0
15821: PPUSH
15822: PPUSH
15823: PPUSH
15824: PPUSH
15825: PPUSH
15826: PPUSH
15827: PPUSH
15828: PPUSH
15829: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 302
15839: NOT
15840: PUSH
15841: LD_VAR 0 2
15845: PPUSH
15846: LD_VAR 0 3
15850: PPUSH
15851: CALL_OW 488
15855: NOT
15856: OR
15857: PUSH
15858: LD_VAR 0 4
15862: NOT
15863: OR
15864: IFFALSE 15868
// exit ;
15866: GO 16208
// list := [ ] ;
15868: LD_ADDR_VAR 0 13
15872: PUSH
15873: EMPTY
15874: ST_TO_ADDR
// if x - r < 0 then
15875: LD_VAR 0 2
15879: PUSH
15880: LD_VAR 0 4
15884: MINUS
15885: PUSH
15886: LD_INT 0
15888: LESS
15889: IFFALSE 15901
// min_x := 0 else
15891: LD_ADDR_VAR 0 7
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
15899: GO 15917
// min_x := x - r ;
15901: LD_ADDR_VAR 0 7
15905: PUSH
15906: LD_VAR 0 2
15910: PUSH
15911: LD_VAR 0 4
15915: MINUS
15916: ST_TO_ADDR
// if y - r < 0 then
15917: LD_VAR 0 3
15921: PUSH
15922: LD_VAR 0 4
15926: MINUS
15927: PUSH
15928: LD_INT 0
15930: LESS
15931: IFFALSE 15943
// min_y := 0 else
15933: LD_ADDR_VAR 0 8
15937: PUSH
15938: LD_INT 0
15940: ST_TO_ADDR
15941: GO 15959
// min_y := y - r ;
15943: LD_ADDR_VAR 0 8
15947: PUSH
15948: LD_VAR 0 3
15952: PUSH
15953: LD_VAR 0 4
15957: MINUS
15958: ST_TO_ADDR
// max_x := x + r ;
15959: LD_ADDR_VAR 0 9
15963: PUSH
15964: LD_VAR 0 2
15968: PUSH
15969: LD_VAR 0 4
15973: PLUS
15974: ST_TO_ADDR
// max_y := y + r ;
15975: LD_ADDR_VAR 0 10
15979: PUSH
15980: LD_VAR 0 3
15984: PUSH
15985: LD_VAR 0 4
15989: PLUS
15990: ST_TO_ADDR
// for _x = min_x to max_x do
15991: LD_ADDR_VAR 0 11
15995: PUSH
15996: DOUBLE
15997: LD_VAR 0 7
16001: DEC
16002: ST_TO_ADDR
16003: LD_VAR 0 9
16007: PUSH
16008: FOR_TO
16009: IFFALSE 16126
// for _y = min_y to max_y do
16011: LD_ADDR_VAR 0 12
16015: PUSH
16016: DOUBLE
16017: LD_VAR 0 8
16021: DEC
16022: ST_TO_ADDR
16023: LD_VAR 0 10
16027: PUSH
16028: FOR_TO
16029: IFFALSE 16122
// begin if not ValidHex ( _x , _y ) then
16031: LD_VAR 0 11
16035: PPUSH
16036: LD_VAR 0 12
16040: PPUSH
16041: CALL_OW 488
16045: NOT
16046: IFFALSE 16050
// continue ;
16048: GO 16028
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16050: LD_VAR 0 11
16054: PPUSH
16055: LD_VAR 0 12
16059: PPUSH
16060: CALL_OW 351
16064: PUSH
16065: LD_VAR 0 11
16069: PPUSH
16070: LD_VAR 0 12
16074: PPUSH
16075: CALL_OW 554
16079: AND
16080: IFFALSE 16120
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16082: LD_ADDR_VAR 0 13
16086: PUSH
16087: LD_VAR 0 13
16091: PPUSH
16092: LD_VAR 0 13
16096: PUSH
16097: LD_INT 1
16099: PLUS
16100: PPUSH
16101: LD_VAR 0 11
16105: PUSH
16106: LD_VAR 0 12
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PPUSH
16115: CALL_OW 2
16119: ST_TO_ADDR
// end ;
16120: GO 16028
16122: POP
16123: POP
16124: GO 16008
16126: POP
16127: POP
// if not list then
16128: LD_VAR 0 13
16132: NOT
16133: IFFALSE 16137
// exit ;
16135: GO 16208
// for i in list do
16137: LD_ADDR_VAR 0 6
16141: PUSH
16142: LD_VAR 0 13
16146: PUSH
16147: FOR_IN
16148: IFFALSE 16206
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: LD_STRING M
16157: PUSH
16158: LD_VAR 0 6
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: PUSH
16167: LD_VAR 0 6
16171: PUSH
16172: LD_INT 2
16174: ARRAY
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: LD_INT 0
16181: PUSH
16182: LD_INT 0
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: PPUSH
16200: CALL_OW 447
16204: GO 16147
16206: POP
16207: POP
// end ;
16208: LD_VAR 0 5
16212: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16213: LD_INT 0
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 302
16233: NOT
16234: PUSH
16235: LD_VAR 0 2
16239: PPUSH
16240: LD_VAR 0 3
16244: PPUSH
16245: CALL_OW 488
16249: NOT
16250: OR
16251: PUSH
16252: LD_VAR 0 4
16256: NOT
16257: OR
16258: IFFALSE 16262
// exit ;
16260: GO 16610
// list := [ ] ;
16262: LD_ADDR_VAR 0 13
16266: PUSH
16267: EMPTY
16268: ST_TO_ADDR
// if x - r < 0 then
16269: LD_VAR 0 2
16273: PUSH
16274: LD_VAR 0 4
16278: MINUS
16279: PUSH
16280: LD_INT 0
16282: LESS
16283: IFFALSE 16295
// min_x := 0 else
16285: LD_ADDR_VAR 0 7
16289: PUSH
16290: LD_INT 0
16292: ST_TO_ADDR
16293: GO 16311
// min_x := x - r ;
16295: LD_ADDR_VAR 0 7
16299: PUSH
16300: LD_VAR 0 2
16304: PUSH
16305: LD_VAR 0 4
16309: MINUS
16310: ST_TO_ADDR
// if y - r < 0 then
16311: LD_VAR 0 3
16315: PUSH
16316: LD_VAR 0 4
16320: MINUS
16321: PUSH
16322: LD_INT 0
16324: LESS
16325: IFFALSE 16337
// min_y := 0 else
16327: LD_ADDR_VAR 0 8
16331: PUSH
16332: LD_INT 0
16334: ST_TO_ADDR
16335: GO 16353
// min_y := y - r ;
16337: LD_ADDR_VAR 0 8
16341: PUSH
16342: LD_VAR 0 3
16346: PUSH
16347: LD_VAR 0 4
16351: MINUS
16352: ST_TO_ADDR
// max_x := x + r ;
16353: LD_ADDR_VAR 0 9
16357: PUSH
16358: LD_VAR 0 2
16362: PUSH
16363: LD_VAR 0 4
16367: PLUS
16368: ST_TO_ADDR
// max_y := y + r ;
16369: LD_ADDR_VAR 0 10
16373: PUSH
16374: LD_VAR 0 3
16378: PUSH
16379: LD_VAR 0 4
16383: PLUS
16384: ST_TO_ADDR
// for _x = min_x to max_x do
16385: LD_ADDR_VAR 0 11
16389: PUSH
16390: DOUBLE
16391: LD_VAR 0 7
16395: DEC
16396: ST_TO_ADDR
16397: LD_VAR 0 9
16401: PUSH
16402: FOR_TO
16403: IFFALSE 16520
// for _y = min_y to max_y do
16405: LD_ADDR_VAR 0 12
16409: PUSH
16410: DOUBLE
16411: LD_VAR 0 8
16415: DEC
16416: ST_TO_ADDR
16417: LD_VAR 0 10
16421: PUSH
16422: FOR_TO
16423: IFFALSE 16516
// begin if not ValidHex ( _x , _y ) then
16425: LD_VAR 0 11
16429: PPUSH
16430: LD_VAR 0 12
16434: PPUSH
16435: CALL_OW 488
16439: NOT
16440: IFFALSE 16444
// continue ;
16442: GO 16422
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16444: LD_VAR 0 11
16448: PPUSH
16449: LD_VAR 0 12
16453: PPUSH
16454: CALL_OW 351
16458: PUSH
16459: LD_VAR 0 11
16463: PPUSH
16464: LD_VAR 0 12
16468: PPUSH
16469: CALL_OW 554
16473: AND
16474: IFFALSE 16514
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16476: LD_ADDR_VAR 0 13
16480: PUSH
16481: LD_VAR 0 13
16485: PPUSH
16486: LD_VAR 0 13
16490: PUSH
16491: LD_INT 1
16493: PLUS
16494: PPUSH
16495: LD_VAR 0 11
16499: PUSH
16500: LD_VAR 0 12
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PPUSH
16509: CALL_OW 2
16513: ST_TO_ADDR
// end ;
16514: GO 16422
16516: POP
16517: POP
16518: GO 16402
16520: POP
16521: POP
// if not list then
16522: LD_VAR 0 13
16526: NOT
16527: IFFALSE 16531
// exit ;
16529: GO 16610
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
16531: LD_ADDR_VAR 0 13
16535: PUSH
16536: LD_VAR 0 1
16540: PPUSH
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_INT 1
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: CALL 41025 0 4
16556: ST_TO_ADDR
// ComStop ( flame ) ;
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 141
// for i in list do
16566: LD_ADDR_VAR 0 6
16570: PUSH
16571: LD_VAR 0 13
16575: PUSH
16576: FOR_IN
16577: IFFALSE 16608
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
16579: LD_VAR 0 1
16583: PPUSH
16584: LD_VAR 0 6
16588: PUSH
16589: LD_INT 1
16591: ARRAY
16592: PPUSH
16593: LD_VAR 0 6
16597: PUSH
16598: LD_INT 2
16600: ARRAY
16601: PPUSH
16602: CALL_OW 176
16606: GO 16576
16608: POP
16609: POP
// end ;
16610: LD_VAR 0 5
16614: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16615: LD_EXP 44
16619: NOT
16620: IFFALSE 16670
16622: GO 16624
16624: DISABLE
// begin initHack := true ;
16625: LD_ADDR_EXP 44
16629: PUSH
16630: LD_INT 1
16632: ST_TO_ADDR
// hackTanks := [ ] ;
16633: LD_ADDR_EXP 45
16637: PUSH
16638: EMPTY
16639: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16640: LD_ADDR_EXP 46
16644: PUSH
16645: EMPTY
16646: ST_TO_ADDR
// hackLimit := 3 ;
16647: LD_ADDR_EXP 47
16651: PUSH
16652: LD_INT 3
16654: ST_TO_ADDR
// hackDist := 12 ;
16655: LD_ADDR_EXP 48
16659: PUSH
16660: LD_INT 12
16662: ST_TO_ADDR
// hackCounter := [ ] ;
16663: LD_ADDR_EXP 49
16667: PUSH
16668: EMPTY
16669: ST_TO_ADDR
// end ;
16670: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16671: LD_EXP 44
16675: PUSH
16676: LD_INT 34
16678: PUSH
16679: LD_INT 99
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PPUSH
16686: CALL_OW 69
16690: AND
16691: IFFALSE 16944
16693: GO 16695
16695: DISABLE
16696: LD_INT 0
16698: PPUSH
16699: PPUSH
// begin enable ;
16700: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16701: LD_ADDR_VAR 0 1
16705: PUSH
16706: LD_INT 34
16708: PUSH
16709: LD_INT 99
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PPUSH
16716: CALL_OW 69
16720: PUSH
16721: FOR_IN
16722: IFFALSE 16942
// begin if not i in hackTanks then
16724: LD_VAR 0 1
16728: PUSH
16729: LD_EXP 45
16733: IN
16734: NOT
16735: IFFALSE 16818
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16737: LD_ADDR_EXP 45
16741: PUSH
16742: LD_EXP 45
16746: PPUSH
16747: LD_EXP 45
16751: PUSH
16752: LD_INT 1
16754: PLUS
16755: PPUSH
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 1
16765: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16766: LD_ADDR_EXP 46
16770: PUSH
16771: LD_EXP 46
16775: PPUSH
16776: LD_EXP 46
16780: PUSH
16781: LD_INT 1
16783: PLUS
16784: PPUSH
16785: EMPTY
16786: PPUSH
16787: CALL_OW 1
16791: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16792: LD_ADDR_EXP 49
16796: PUSH
16797: LD_EXP 49
16801: PPUSH
16802: LD_EXP 49
16806: PUSH
16807: LD_INT 1
16809: PLUS
16810: PPUSH
16811: EMPTY
16812: PPUSH
16813: CALL_OW 1
16817: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 302
16827: NOT
16828: IFFALSE 16841
// begin HackUnlinkAll ( i ) ;
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL 16947 0 1
// continue ;
16839: GO 16721
// end ; HackCheckCapturedStatus ( i ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL 17390 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16850: LD_ADDR_VAR 0 2
16854: PUSH
16855: LD_INT 81
16857: PUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 255
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 33
16874: PUSH
16875: LD_INT 3
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 91
16884: PUSH
16885: LD_VAR 0 1
16889: PUSH
16890: LD_EXP 48
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 50
16902: PUSH
16903: EMPTY
16904: LIST
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: PPUSH
16912: CALL_OW 69
16916: ST_TO_ADDR
// if not tmp then
16917: LD_VAR 0 2
16921: NOT
16922: IFFALSE 16926
// continue ;
16924: GO 16721
// HackLink ( i , tmp ) ;
16926: LD_VAR 0 1
16930: PPUSH
16931: LD_VAR 0 2
16935: PPUSH
16936: CALL 17083 0 2
// end ;
16940: GO 16721
16942: POP
16943: POP
// end ;
16944: PPOPN 2
16946: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16947: LD_INT 0
16949: PPUSH
16950: PPUSH
16951: PPUSH
// if not hack in hackTanks then
16952: LD_VAR 0 1
16956: PUSH
16957: LD_EXP 45
16961: IN
16962: NOT
16963: IFFALSE 16967
// exit ;
16965: GO 17078
// index := GetElementIndex ( hackTanks , hack ) ;
16967: LD_ADDR_VAR 0 4
16971: PUSH
16972: LD_EXP 45
16976: PPUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL 40322 0 2
16986: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16987: LD_EXP 46
16991: PUSH
16992: LD_VAR 0 4
16996: ARRAY
16997: IFFALSE 17078
// begin for i in hackTanksCaptured [ index ] do
16999: LD_ADDR_VAR 0 3
17003: PUSH
17004: LD_EXP 46
17008: PUSH
17009: LD_VAR 0 4
17013: ARRAY
17014: PUSH
17015: FOR_IN
17016: IFFALSE 17042
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17018: LD_VAR 0 3
17022: PUSH
17023: LD_INT 1
17025: ARRAY
17026: PPUSH
17027: LD_VAR 0 3
17031: PUSH
17032: LD_INT 2
17034: ARRAY
17035: PPUSH
17036: CALL_OW 235
17040: GO 17015
17042: POP
17043: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17044: LD_ADDR_EXP 46
17048: PUSH
17049: LD_EXP 46
17053: PPUSH
17054: LD_VAR 0 4
17058: PPUSH
17059: EMPTY
17060: PPUSH
17061: CALL_OW 1
17065: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_INT 0
17073: PPUSH
17074: CALL_OW 505
// end ; end ;
17078: LD_VAR 0 2
17082: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17083: LD_INT 0
17085: PPUSH
17086: PPUSH
17087: PPUSH
// if not hack in hackTanks or not vehicles then
17088: LD_VAR 0 1
17092: PUSH
17093: LD_EXP 45
17097: IN
17098: NOT
17099: PUSH
17100: LD_VAR 0 2
17104: NOT
17105: OR
17106: IFFALSE 17110
// exit ;
17108: GO 17385
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17110: LD_ADDR_VAR 0 2
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: LD_VAR 0 2
17124: PPUSH
17125: LD_INT 1
17127: PPUSH
17128: LD_INT 1
17130: PPUSH
17131: CALL 40972 0 4
17135: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17136: LD_ADDR_VAR 0 5
17140: PUSH
17141: LD_EXP 45
17145: PPUSH
17146: LD_VAR 0 1
17150: PPUSH
17151: CALL 40322 0 2
17155: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17156: LD_EXP 46
17160: PUSH
17161: LD_VAR 0 5
17165: ARRAY
17166: PUSH
17167: LD_EXP 47
17171: LESS
17172: IFFALSE 17361
// begin for i := 1 to vehicles do
17174: LD_ADDR_VAR 0 4
17178: PUSH
17179: DOUBLE
17180: LD_INT 1
17182: DEC
17183: ST_TO_ADDR
17184: LD_VAR 0 2
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17359
// begin if hackTanksCaptured [ index ] = hackLimit then
17192: LD_EXP 46
17196: PUSH
17197: LD_VAR 0 5
17201: ARRAY
17202: PUSH
17203: LD_EXP 47
17207: EQUAL
17208: IFFALSE 17212
// break ;
17210: GO 17359
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17212: LD_ADDR_EXP 49
17216: PUSH
17217: LD_EXP 49
17221: PPUSH
17222: LD_VAR 0 5
17226: PPUSH
17227: LD_EXP 49
17231: PUSH
17232: LD_VAR 0 5
17236: ARRAY
17237: PUSH
17238: LD_INT 1
17240: PLUS
17241: PPUSH
17242: CALL_OW 1
17246: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17247: LD_ADDR_EXP 46
17251: PUSH
17252: LD_EXP 46
17256: PPUSH
17257: LD_VAR 0 5
17261: PUSH
17262: LD_EXP 46
17266: PUSH
17267: LD_VAR 0 5
17271: ARRAY
17272: PUSH
17273: LD_INT 1
17275: PLUS
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PPUSH
17281: LD_VAR 0 2
17285: PUSH
17286: LD_VAR 0 4
17290: ARRAY
17291: PUSH
17292: LD_VAR 0 2
17296: PUSH
17297: LD_VAR 0 4
17301: ARRAY
17302: PPUSH
17303: CALL_OW 255
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL 40537 0 3
17316: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17317: LD_VAR 0 2
17321: PUSH
17322: LD_VAR 0 4
17326: ARRAY
17327: PPUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 255
17337: PPUSH
17338: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17342: LD_VAR 0 2
17346: PUSH
17347: LD_VAR 0 4
17351: ARRAY
17352: PPUSH
17353: CALL_OW 141
// end ;
17357: GO 17189
17359: POP
17360: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17361: LD_VAR 0 1
17365: PPUSH
17366: LD_EXP 46
17370: PUSH
17371: LD_VAR 0 5
17375: ARRAY
17376: PUSH
17377: LD_INT 0
17379: PLUS
17380: PPUSH
17381: CALL_OW 505
// end ;
17385: LD_VAR 0 3
17389: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17390: LD_INT 0
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
// if not hack in hackTanks then
17396: LD_VAR 0 1
17400: PUSH
17401: LD_EXP 45
17405: IN
17406: NOT
17407: IFFALSE 17411
// exit ;
17409: GO 17651
// index := GetElementIndex ( hackTanks , hack ) ;
17411: LD_ADDR_VAR 0 4
17415: PUSH
17416: LD_EXP 45
17420: PPUSH
17421: LD_VAR 0 1
17425: PPUSH
17426: CALL 40322 0 2
17430: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17431: LD_ADDR_VAR 0 3
17435: PUSH
17436: DOUBLE
17437: LD_EXP 46
17441: PUSH
17442: LD_VAR 0 4
17446: ARRAY
17447: INC
17448: ST_TO_ADDR
17449: LD_INT 1
17451: PUSH
17452: FOR_DOWNTO
17453: IFFALSE 17625
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17455: LD_ADDR_VAR 0 5
17459: PUSH
17460: LD_EXP 46
17464: PUSH
17465: LD_VAR 0 4
17469: ARRAY
17470: PUSH
17471: LD_VAR 0 3
17475: ARRAY
17476: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17477: LD_VAR 0 5
17481: PUSH
17482: LD_INT 1
17484: ARRAY
17485: PPUSH
17486: CALL_OW 302
17490: NOT
17491: PUSH
17492: LD_VAR 0 5
17496: PUSH
17497: LD_INT 1
17499: ARRAY
17500: PPUSH
17501: CALL_OW 255
17505: PUSH
17506: LD_VAR 0 1
17510: PPUSH
17511: CALL_OW 255
17515: NONEQUAL
17516: OR
17517: IFFALSE 17623
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17519: LD_VAR 0 5
17523: PUSH
17524: LD_INT 1
17526: ARRAY
17527: PPUSH
17528: CALL_OW 305
17532: PUSH
17533: LD_VAR 0 5
17537: PUSH
17538: LD_INT 1
17540: ARRAY
17541: PPUSH
17542: CALL_OW 255
17546: PUSH
17547: LD_VAR 0 1
17551: PPUSH
17552: CALL_OW 255
17556: EQUAL
17557: AND
17558: IFFALSE 17582
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17560: LD_VAR 0 5
17564: PUSH
17565: LD_INT 1
17567: ARRAY
17568: PPUSH
17569: LD_VAR 0 5
17573: PUSH
17574: LD_INT 2
17576: ARRAY
17577: PPUSH
17578: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17582: LD_ADDR_EXP 46
17586: PUSH
17587: LD_EXP 46
17591: PPUSH
17592: LD_VAR 0 4
17596: PPUSH
17597: LD_EXP 46
17601: PUSH
17602: LD_VAR 0 4
17606: ARRAY
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: CALL_OW 3
17617: PPUSH
17618: CALL_OW 1
17622: ST_TO_ADDR
// end ; end ;
17623: GO 17452
17625: POP
17626: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17627: LD_VAR 0 1
17631: PPUSH
17632: LD_EXP 46
17636: PUSH
17637: LD_VAR 0 4
17641: ARRAY
17642: PUSH
17643: LD_INT 0
17645: PLUS
17646: PPUSH
17647: CALL_OW 505
// end ;
17651: LD_VAR 0 2
17655: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17656: LD_INT 0
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
// if not hack in hackTanks then
17662: LD_VAR 0 1
17666: PUSH
17667: LD_EXP 45
17671: IN
17672: NOT
17673: IFFALSE 17677
// exit ;
17675: GO 17762
// index := GetElementIndex ( hackTanks , hack ) ;
17677: LD_ADDR_VAR 0 5
17681: PUSH
17682: LD_EXP 45
17686: PPUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL 40322 0 2
17696: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17697: LD_ADDR_VAR 0 4
17701: PUSH
17702: DOUBLE
17703: LD_INT 1
17705: DEC
17706: ST_TO_ADDR
17707: LD_EXP 46
17711: PUSH
17712: LD_VAR 0 5
17716: ARRAY
17717: PUSH
17718: FOR_TO
17719: IFFALSE 17760
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17721: LD_EXP 46
17725: PUSH
17726: LD_VAR 0 5
17730: ARRAY
17731: PUSH
17732: LD_VAR 0 4
17736: ARRAY
17737: PUSH
17738: LD_INT 1
17740: ARRAY
17741: PUSH
17742: LD_VAR 0 2
17746: EQUAL
17747: IFFALSE 17758
// KillUnit ( vehicle ) ;
17749: LD_VAR 0 2
17753: PPUSH
17754: CALL_OW 66
17758: GO 17718
17760: POP
17761: POP
// end ;
17762: LD_VAR 0 3
17766: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17767: LD_EXP 50
17771: NOT
17772: IFFALSE 17807
17774: GO 17776
17776: DISABLE
// begin initMiner := true ;
17777: LD_ADDR_EXP 50
17781: PUSH
17782: LD_INT 1
17784: ST_TO_ADDR
// minersList := [ ] ;
17785: LD_ADDR_EXP 51
17789: PUSH
17790: EMPTY
17791: ST_TO_ADDR
// minerMinesList := [ ] ;
17792: LD_ADDR_EXP 52
17796: PUSH
17797: EMPTY
17798: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17799: LD_ADDR_EXP 53
17803: PUSH
17804: LD_INT 5
17806: ST_TO_ADDR
// end ;
17807: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17808: LD_EXP 50
17812: PUSH
17813: LD_INT 34
17815: PUSH
17816: LD_INT 81
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PPUSH
17823: CALL_OW 69
17827: AND
17828: IFFALSE 18289
17830: GO 17832
17832: DISABLE
17833: LD_INT 0
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
// begin enable ;
17839: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17840: LD_ADDR_VAR 0 1
17844: PUSH
17845: LD_INT 34
17847: PUSH
17848: LD_INT 81
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PPUSH
17855: CALL_OW 69
17859: PUSH
17860: FOR_IN
17861: IFFALSE 17933
// begin if not i in minersList then
17863: LD_VAR 0 1
17867: PUSH
17868: LD_EXP 51
17872: IN
17873: NOT
17874: IFFALSE 17931
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17876: LD_ADDR_EXP 51
17880: PUSH
17881: LD_EXP 51
17885: PPUSH
17886: LD_EXP 51
17890: PUSH
17891: LD_INT 1
17893: PLUS
17894: PPUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 1
17904: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17905: LD_ADDR_EXP 52
17909: PUSH
17910: LD_EXP 52
17914: PPUSH
17915: LD_EXP 52
17919: PUSH
17920: LD_INT 1
17922: PLUS
17923: PPUSH
17924: EMPTY
17925: PPUSH
17926: CALL_OW 1
17930: ST_TO_ADDR
// end end ;
17931: GO 17860
17933: POP
17934: POP
// for i := minerMinesList downto 1 do
17935: LD_ADDR_VAR 0 1
17939: PUSH
17940: DOUBLE
17941: LD_EXP 52
17945: INC
17946: ST_TO_ADDR
17947: LD_INT 1
17949: PUSH
17950: FOR_DOWNTO
17951: IFFALSE 18287
// begin if IsLive ( minersList [ i ] ) then
17953: LD_EXP 51
17957: PUSH
17958: LD_VAR 0 1
17962: ARRAY
17963: PPUSH
17964: CALL_OW 300
17968: IFFALSE 17996
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17970: LD_EXP 51
17974: PUSH
17975: LD_VAR 0 1
17979: ARRAY
17980: PPUSH
17981: LD_EXP 52
17985: PUSH
17986: LD_VAR 0 1
17990: ARRAY
17991: PPUSH
17992: CALL_OW 505
// if not minerMinesList [ i ] then
17996: LD_EXP 52
18000: PUSH
18001: LD_VAR 0 1
18005: ARRAY
18006: NOT
18007: IFFALSE 18011
// continue ;
18009: GO 17950
// for j := minerMinesList [ i ] downto 1 do
18011: LD_ADDR_VAR 0 2
18015: PUSH
18016: DOUBLE
18017: LD_EXP 52
18021: PUSH
18022: LD_VAR 0 1
18026: ARRAY
18027: INC
18028: ST_TO_ADDR
18029: LD_INT 1
18031: PUSH
18032: FOR_DOWNTO
18033: IFFALSE 18283
// begin side := GetSide ( minersList [ i ] ) ;
18035: LD_ADDR_VAR 0 3
18039: PUSH
18040: LD_EXP 51
18044: PUSH
18045: LD_VAR 0 1
18049: ARRAY
18050: PPUSH
18051: CALL_OW 255
18055: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18056: LD_ADDR_VAR 0 4
18060: PUSH
18061: LD_EXP 52
18065: PUSH
18066: LD_VAR 0 1
18070: ARRAY
18071: PUSH
18072: LD_VAR 0 2
18076: ARRAY
18077: PUSH
18078: LD_INT 1
18080: ARRAY
18081: PPUSH
18082: LD_EXP 52
18086: PUSH
18087: LD_VAR 0 1
18091: ARRAY
18092: PUSH
18093: LD_VAR 0 2
18097: ARRAY
18098: PUSH
18099: LD_INT 2
18101: ARRAY
18102: PPUSH
18103: CALL_OW 428
18107: ST_TO_ADDR
// if not tmp then
18108: LD_VAR 0 4
18112: NOT
18113: IFFALSE 18117
// continue ;
18115: GO 18032
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18117: LD_VAR 0 4
18121: PUSH
18122: LD_INT 81
18124: PUSH
18125: LD_VAR 0 3
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: PUSH
18140: LD_EXP 52
18144: PUSH
18145: LD_VAR 0 1
18149: ARRAY
18150: PUSH
18151: LD_VAR 0 2
18155: ARRAY
18156: PUSH
18157: LD_INT 1
18159: ARRAY
18160: PPUSH
18161: LD_EXP 52
18165: PUSH
18166: LD_VAR 0 1
18170: ARRAY
18171: PUSH
18172: LD_VAR 0 2
18176: ARRAY
18177: PUSH
18178: LD_INT 2
18180: ARRAY
18181: PPUSH
18182: CALL_OW 458
18186: AND
18187: IFFALSE 18281
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18189: LD_EXP 52
18193: PUSH
18194: LD_VAR 0 1
18198: ARRAY
18199: PUSH
18200: LD_VAR 0 2
18204: ARRAY
18205: PUSH
18206: LD_INT 1
18208: ARRAY
18209: PPUSH
18210: LD_EXP 52
18214: PUSH
18215: LD_VAR 0 1
18219: ARRAY
18220: PUSH
18221: LD_VAR 0 2
18225: ARRAY
18226: PUSH
18227: LD_INT 2
18229: ARRAY
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18240: LD_ADDR_EXP 52
18244: PUSH
18245: LD_EXP 52
18249: PPUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_EXP 52
18259: PUSH
18260: LD_VAR 0 1
18264: ARRAY
18265: PPUSH
18266: LD_VAR 0 2
18270: PPUSH
18271: CALL_OW 3
18275: PPUSH
18276: CALL_OW 1
18280: ST_TO_ADDR
// end ; end ;
18281: GO 18032
18283: POP
18284: POP
// end ;
18285: GO 17950
18287: POP
18288: POP
// end ;
18289: PPOPN 4
18291: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18292: LD_INT 0
18294: PPUSH
18295: PPUSH
// result := false ;
18296: LD_ADDR_VAR 0 4
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18304: LD_VAR 0 1
18308: PPUSH
18309: CALL_OW 264
18313: PUSH
18314: LD_INT 81
18316: EQUAL
18317: NOT
18318: IFFALSE 18322
// exit ;
18320: GO 18562
// index := GetElementIndex ( minersList , unit ) ;
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_EXP 51
18331: PPUSH
18332: LD_VAR 0 1
18336: PPUSH
18337: CALL 40322 0 2
18341: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18342: LD_EXP 52
18346: PUSH
18347: LD_VAR 0 5
18351: ARRAY
18352: PUSH
18353: LD_EXP 53
18357: GREATEREQUAL
18358: IFFALSE 18362
// exit ;
18360: GO 18562
// ComMoveXY ( unit , x , y ) ;
18362: LD_VAR 0 1
18366: PPUSH
18367: LD_VAR 0 2
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18381: LD_INT 35
18383: PPUSH
18384: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18388: LD_VAR 0 1
18392: PPUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: CALL 72074 0 3
18407: NOT
18408: PUSH
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 314
18418: AND
18419: IFFALSE 18423
// exit ;
18421: GO 18562
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18423: LD_VAR 0 2
18427: PPUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: CALL_OW 428
18437: PUSH
18438: LD_VAR 0 1
18442: EQUAL
18443: PUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 314
18453: NOT
18454: AND
18455: IFFALSE 18381
// PlaySoundXY ( x , y , PlantMine ) ;
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_STRING PlantMine
18469: PPUSH
18470: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18474: LD_VAR 0 2
18478: PPUSH
18479: LD_VAR 0 3
18483: PPUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 255
18493: PPUSH
18494: LD_INT 0
18496: PPUSH
18497: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18501: LD_ADDR_EXP 52
18505: PUSH
18506: LD_EXP 52
18510: PPUSH
18511: LD_VAR 0 5
18515: PUSH
18516: LD_EXP 52
18520: PUSH
18521: LD_VAR 0 5
18525: ARRAY
18526: PUSH
18527: LD_INT 1
18529: PLUS
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PPUSH
18535: LD_VAR 0 2
18539: PUSH
18540: LD_VAR 0 3
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL 40537 0 3
18553: ST_TO_ADDR
// result := true ;
18554: LD_ADDR_VAR 0 4
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// end ;
18562: LD_VAR 0 4
18566: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18567: LD_INT 0
18569: PPUSH
18570: PPUSH
18571: PPUSH
// if not unit in minersList then
18572: LD_VAR 0 1
18576: PUSH
18577: LD_EXP 51
18581: IN
18582: NOT
18583: IFFALSE 18587
// exit ;
18585: GO 18979
// index := GetElementIndex ( minersList , unit ) ;
18587: LD_ADDR_VAR 0 6
18591: PUSH
18592: LD_EXP 51
18596: PPUSH
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL 40322 0 2
18606: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18607: LD_ADDR_VAR 0 5
18611: PUSH
18612: DOUBLE
18613: LD_EXP 52
18617: PUSH
18618: LD_VAR 0 6
18622: ARRAY
18623: INC
18624: ST_TO_ADDR
18625: LD_INT 1
18627: PUSH
18628: FOR_DOWNTO
18629: IFFALSE 18790
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18631: LD_EXP 52
18635: PUSH
18636: LD_VAR 0 6
18640: ARRAY
18641: PUSH
18642: LD_VAR 0 5
18646: ARRAY
18647: PUSH
18648: LD_INT 1
18650: ARRAY
18651: PUSH
18652: LD_VAR 0 2
18656: EQUAL
18657: PUSH
18658: LD_EXP 52
18662: PUSH
18663: LD_VAR 0 6
18667: ARRAY
18668: PUSH
18669: LD_VAR 0 5
18673: ARRAY
18674: PUSH
18675: LD_INT 2
18677: ARRAY
18678: PUSH
18679: LD_VAR 0 3
18683: EQUAL
18684: AND
18685: IFFALSE 18788
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18687: LD_EXP 52
18691: PUSH
18692: LD_VAR 0 6
18696: ARRAY
18697: PUSH
18698: LD_VAR 0 5
18702: ARRAY
18703: PUSH
18704: LD_INT 1
18706: ARRAY
18707: PPUSH
18708: LD_EXP 52
18712: PUSH
18713: LD_VAR 0 6
18717: ARRAY
18718: PUSH
18719: LD_VAR 0 5
18723: ARRAY
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 255
18738: PPUSH
18739: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18743: LD_ADDR_EXP 52
18747: PUSH
18748: LD_EXP 52
18752: PPUSH
18753: LD_VAR 0 6
18757: PPUSH
18758: LD_EXP 52
18762: PUSH
18763: LD_VAR 0 6
18767: ARRAY
18768: PPUSH
18769: LD_VAR 0 5
18773: PPUSH
18774: CALL_OW 3
18778: PPUSH
18779: CALL_OW 1
18783: ST_TO_ADDR
// exit ;
18784: POP
18785: POP
18786: GO 18979
// end ; end ;
18788: GO 18628
18790: POP
18791: POP
// for i := minerMinesList [ index ] downto 1 do
18792: LD_ADDR_VAR 0 5
18796: PUSH
18797: DOUBLE
18798: LD_EXP 52
18802: PUSH
18803: LD_VAR 0 6
18807: ARRAY
18808: INC
18809: ST_TO_ADDR
18810: LD_INT 1
18812: PUSH
18813: FOR_DOWNTO
18814: IFFALSE 18977
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18816: LD_EXP 52
18820: PUSH
18821: LD_VAR 0 6
18825: ARRAY
18826: PUSH
18827: LD_VAR 0 5
18831: ARRAY
18832: PUSH
18833: LD_INT 1
18835: ARRAY
18836: PPUSH
18837: LD_EXP 52
18841: PUSH
18842: LD_VAR 0 6
18846: ARRAY
18847: PUSH
18848: LD_VAR 0 5
18852: ARRAY
18853: PUSH
18854: LD_INT 2
18856: ARRAY
18857: PPUSH
18858: LD_VAR 0 2
18862: PPUSH
18863: LD_VAR 0 3
18867: PPUSH
18868: CALL_OW 298
18872: PUSH
18873: LD_INT 6
18875: LESS
18876: IFFALSE 18975
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18878: LD_EXP 52
18882: PUSH
18883: LD_VAR 0 6
18887: ARRAY
18888: PUSH
18889: LD_VAR 0 5
18893: ARRAY
18894: PUSH
18895: LD_INT 1
18897: ARRAY
18898: PPUSH
18899: LD_EXP 52
18903: PUSH
18904: LD_VAR 0 6
18908: ARRAY
18909: PUSH
18910: LD_VAR 0 5
18914: ARRAY
18915: PUSH
18916: LD_INT 2
18918: ARRAY
18919: PPUSH
18920: LD_VAR 0 1
18924: PPUSH
18925: CALL_OW 255
18929: PPUSH
18930: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18934: LD_ADDR_EXP 52
18938: PUSH
18939: LD_EXP 52
18943: PPUSH
18944: LD_VAR 0 6
18948: PPUSH
18949: LD_EXP 52
18953: PUSH
18954: LD_VAR 0 6
18958: ARRAY
18959: PPUSH
18960: LD_VAR 0 5
18964: PPUSH
18965: CALL_OW 3
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ; end ;
18975: GO 18813
18977: POP
18978: POP
// end ;
18979: LD_VAR 0 4
18983: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18984: LD_INT 0
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18995: LD_VAR 0 1
18999: PPUSH
19000: CALL_OW 264
19004: PUSH
19005: LD_INT 81
19007: EQUAL
19008: NOT
19009: PUSH
19010: LD_VAR 0 1
19014: PUSH
19015: LD_EXP 51
19019: IN
19020: NOT
19021: OR
19022: IFFALSE 19026
// exit ;
19024: GO 19348
// index := GetElementIndex ( minersList , unit ) ;
19026: LD_ADDR_VAR 0 6
19030: PUSH
19031: LD_EXP 51
19035: PPUSH
19036: LD_VAR 0 1
19040: PPUSH
19041: CALL 40322 0 2
19045: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19046: LD_ADDR_VAR 0 8
19050: PUSH
19051: LD_EXP 53
19055: PUSH
19056: LD_EXP 52
19060: PUSH
19061: LD_VAR 0 6
19065: ARRAY
19066: MINUS
19067: ST_TO_ADDR
// if not minesFreeAmount then
19068: LD_VAR 0 8
19072: NOT
19073: IFFALSE 19077
// exit ;
19075: GO 19348
// tmp := [ ] ;
19077: LD_ADDR_VAR 0 7
19081: PUSH
19082: EMPTY
19083: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19084: LD_ADDR_VAR 0 5
19088: PUSH
19089: DOUBLE
19090: LD_INT 1
19092: DEC
19093: ST_TO_ADDR
19094: LD_VAR 0 8
19098: PUSH
19099: FOR_TO
19100: IFFALSE 19295
// begin _d := rand ( 0 , 5 ) ;
19102: LD_ADDR_VAR 0 11
19106: PUSH
19107: LD_INT 0
19109: PPUSH
19110: LD_INT 5
19112: PPUSH
19113: CALL_OW 12
19117: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19118: LD_ADDR_VAR 0 12
19122: PUSH
19123: LD_INT 2
19125: PPUSH
19126: LD_INT 6
19128: PPUSH
19129: CALL_OW 12
19133: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19134: LD_ADDR_VAR 0 9
19138: PUSH
19139: LD_VAR 0 2
19143: PPUSH
19144: LD_VAR 0 11
19148: PPUSH
19149: LD_VAR 0 12
19153: PPUSH
19154: CALL_OW 272
19158: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19159: LD_ADDR_VAR 0 10
19163: PUSH
19164: LD_VAR 0 3
19168: PPUSH
19169: LD_VAR 0 11
19173: PPUSH
19174: LD_VAR 0 12
19178: PPUSH
19179: CALL_OW 273
19183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19184: LD_VAR 0 9
19188: PPUSH
19189: LD_VAR 0 10
19193: PPUSH
19194: CALL_OW 488
19198: PUSH
19199: LD_VAR 0 9
19203: PUSH
19204: LD_VAR 0 10
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_VAR 0 7
19217: IN
19218: NOT
19219: AND
19220: PUSH
19221: LD_VAR 0 9
19225: PPUSH
19226: LD_VAR 0 10
19230: PPUSH
19231: CALL_OW 458
19235: NOT
19236: AND
19237: IFFALSE 19279
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19239: LD_ADDR_VAR 0 7
19243: PUSH
19244: LD_VAR 0 7
19248: PPUSH
19249: LD_VAR 0 7
19253: PUSH
19254: LD_INT 1
19256: PLUS
19257: PPUSH
19258: LD_VAR 0 9
19262: PUSH
19263: LD_VAR 0 10
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PPUSH
19272: CALL_OW 1
19276: ST_TO_ADDR
19277: GO 19293
// i := i - 1 ;
19279: LD_ADDR_VAR 0 5
19283: PUSH
19284: LD_VAR 0 5
19288: PUSH
19289: LD_INT 1
19291: MINUS
19292: ST_TO_ADDR
// end ;
19293: GO 19099
19295: POP
19296: POP
// for i in tmp do
19297: LD_ADDR_VAR 0 5
19301: PUSH
19302: LD_VAR 0 7
19306: PUSH
19307: FOR_IN
19308: IFFALSE 19346
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19310: LD_VAR 0 1
19314: PPUSH
19315: LD_VAR 0 5
19319: PUSH
19320: LD_INT 1
19322: ARRAY
19323: PPUSH
19324: LD_VAR 0 5
19328: PUSH
19329: LD_INT 2
19331: ARRAY
19332: PPUSH
19333: CALL 18292 0 3
19337: NOT
19338: IFFALSE 19344
// exit ;
19340: POP
19341: POP
19342: GO 19348
19344: GO 19307
19346: POP
19347: POP
// end ;
19348: LD_VAR 0 4
19352: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19353: LD_INT 0
19355: PPUSH
19356: PPUSH
19357: PPUSH
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
// if not GetClass ( unit ) = class_sniper then
19362: LD_VAR 0 1
19366: PPUSH
19367: CALL_OW 257
19371: PUSH
19372: LD_INT 5
19374: EQUAL
19375: NOT
19376: IFFALSE 19380
// exit ;
19378: GO 19768
// dist := 8 ;
19380: LD_ADDR_VAR 0 5
19384: PUSH
19385: LD_INT 8
19387: ST_TO_ADDR
// viewRange := 12 ;
19388: LD_ADDR_VAR 0 7
19392: PUSH
19393: LD_INT 12
19395: ST_TO_ADDR
// side := GetSide ( unit ) ;
19396: LD_ADDR_VAR 0 6
19400: PUSH
19401: LD_VAR 0 1
19405: PPUSH
19406: CALL_OW 255
19410: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19411: LD_INT 61
19413: PPUSH
19414: LD_VAR 0 6
19418: PPUSH
19419: CALL_OW 321
19423: PUSH
19424: LD_INT 2
19426: EQUAL
19427: IFFALSE 19437
// viewRange := 16 ;
19429: LD_ADDR_VAR 0 7
19433: PUSH
19434: LD_INT 16
19436: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19437: LD_VAR 0 1
19441: PPUSH
19442: LD_VAR 0 2
19446: PPUSH
19447: LD_VAR 0 3
19451: PPUSH
19452: CALL_OW 297
19456: PUSH
19457: LD_VAR 0 5
19461: GREATER
19462: IFFALSE 19541
// begin ComMoveXY ( unit , x , y ) ;
19464: LD_VAR 0 1
19468: PPUSH
19469: LD_VAR 0 2
19473: PPUSH
19474: LD_VAR 0 3
19478: PPUSH
19479: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19483: LD_INT 35
19485: PPUSH
19486: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19490: LD_VAR 0 1
19494: PPUSH
19495: LD_VAR 0 2
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: CALL 72074 0 3
19509: NOT
19510: IFFALSE 19514
// exit ;
19512: GO 19768
// until GetDistUnitXY ( unit , x , y ) < dist ;
19514: LD_VAR 0 1
19518: PPUSH
19519: LD_VAR 0 2
19523: PPUSH
19524: LD_VAR 0 3
19528: PPUSH
19529: CALL_OW 297
19533: PUSH
19534: LD_VAR 0 5
19538: LESS
19539: IFFALSE 19483
// end ; ComTurnXY ( unit , x , y ) ;
19541: LD_VAR 0 1
19545: PPUSH
19546: LD_VAR 0 2
19550: PPUSH
19551: LD_VAR 0 3
19555: PPUSH
19556: CALL_OW 118
// wait ( 5 ) ;
19560: LD_INT 5
19562: PPUSH
19563: CALL_OW 67
// _d := GetDir ( unit ) ;
19567: LD_ADDR_VAR 0 10
19571: PUSH
19572: LD_VAR 0 1
19576: PPUSH
19577: CALL_OW 254
19581: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19582: LD_ADDR_VAR 0 8
19586: PUSH
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL_OW 250
19596: PPUSH
19597: LD_VAR 0 10
19601: PPUSH
19602: LD_VAR 0 5
19606: PPUSH
19607: CALL_OW 272
19611: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19612: LD_ADDR_VAR 0 9
19616: PUSH
19617: LD_VAR 0 1
19621: PPUSH
19622: CALL_OW 251
19626: PPUSH
19627: LD_VAR 0 10
19631: PPUSH
19632: LD_VAR 0 5
19636: PPUSH
19637: CALL_OW 273
19641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19642: LD_VAR 0 8
19646: PPUSH
19647: LD_VAR 0 9
19651: PPUSH
19652: CALL_OW 488
19656: NOT
19657: IFFALSE 19661
// exit ;
19659: GO 19768
// ComAnimCustom ( unit , 1 ) ;
19661: LD_VAR 0 1
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19673: LD_VAR 0 8
19677: PPUSH
19678: LD_VAR 0 9
19682: PPUSH
19683: LD_VAR 0 6
19687: PPUSH
19688: LD_VAR 0 7
19692: PPUSH
19693: CALL_OW 330
// repeat wait ( 1 ) ;
19697: LD_INT 1
19699: PPUSH
19700: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19704: LD_VAR 0 1
19708: PPUSH
19709: CALL_OW 316
19713: PUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 314
19723: OR
19724: PUSH
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 302
19734: NOT
19735: OR
19736: PUSH
19737: LD_VAR 0 1
19741: PPUSH
19742: CALL_OW 301
19746: OR
19747: IFFALSE 19697
// RemoveSeeing ( _x , _y , side ) ;
19749: LD_VAR 0 8
19753: PPUSH
19754: LD_VAR 0 9
19758: PPUSH
19759: LD_VAR 0 6
19763: PPUSH
19764: CALL_OW 331
// end ; end_of_file
19768: LD_VAR 0 4
19772: RET
// export globalGameSaveCounter ; every 0 0$1 do
19773: GO 19775
19775: DISABLE
// begin enable ;
19776: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19777: LD_STRING updateTimer(
19779: PUSH
19780: LD_OWVAR 1
19784: STR
19785: PUSH
19786: LD_STRING );
19788: STR
19789: PPUSH
19790: CALL_OW 559
// end ;
19794: END
// every 0 0$1 do
19795: GO 19797
19797: DISABLE
// begin globalGameSaveCounter := 0 ;
19798: LD_ADDR_EXP 54
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19806: LD_STRING setGameSaveCounter(0)
19808: PPUSH
19809: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19813: LD_STRING initStreamRollete();
19815: PPUSH
19816: CALL_OW 559
// InitStreamMode ;
19820: CALL 21146 0 0
// DefineStreamItems ( false ) ;
19824: LD_INT 0
19826: PPUSH
19827: CALL 21610 0 1
// end ;
19831: END
// export function SOS_MapStart ( ) ; begin
19832: LD_INT 0
19834: PPUSH
// if streamModeActive then
19835: LD_EXP 55
19839: IFFALSE 19848
// DefineStreamItems ( true ) ;
19841: LD_INT 1
19843: PPUSH
19844: CALL 21610 0 1
// UpdateLuaVariables ( ) ;
19848: CALL 19865 0 0
// UpdateFactoryWaypoints ( ) ;
19852: CALL 34479 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19856: CALL 34736 0 0
// end ;
19860: LD_VAR 0 1
19864: RET
// function UpdateLuaVariables ( ) ; begin
19865: LD_INT 0
19867: PPUSH
// if globalGameSaveCounter then
19868: LD_EXP 54
19872: IFFALSE 19906
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19874: LD_ADDR_EXP 54
19878: PUSH
19879: LD_EXP 54
19883: PPUSH
19884: CALL 74638 0 1
19888: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19889: LD_STRING setGameSaveCounter(
19891: PUSH
19892: LD_EXP 54
19896: STR
19897: PUSH
19898: LD_STRING )
19900: STR
19901: PPUSH
19902: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19906: LD_STRING setGameDifficulty(
19908: PUSH
19909: LD_OWVAR 67
19913: STR
19914: PUSH
19915: LD_STRING )
19917: STR
19918: PPUSH
19919: CALL_OW 559
// end ;
19923: LD_VAR 0 1
19927: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19928: LD_INT 0
19930: PPUSH
// if p2 = stream_mode then
19931: LD_VAR 0 2
19935: PUSH
19936: LD_INT 100
19938: EQUAL
19939: IFFALSE 20942
// begin if not StreamModeActive then
19941: LD_EXP 55
19945: NOT
19946: IFFALSE 19956
// StreamModeActive := true ;
19948: LD_ADDR_EXP 55
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// if p3 = 0 then
19956: LD_VAR 0 3
19960: PUSH
19961: LD_INT 0
19963: EQUAL
19964: IFFALSE 19970
// InitStreamMode ;
19966: CALL 21146 0 0
// if p3 = 1 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 1
19977: EQUAL
19978: IFFALSE 19988
// sRocket := true ;
19980: LD_ADDR_EXP 60
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 2 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 2
19995: EQUAL
19996: IFFALSE 20006
// sSpeed := true ;
19998: LD_ADDR_EXP 59
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 3 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 3
20013: EQUAL
20014: IFFALSE 20024
// sEngine := true ;
20016: LD_ADDR_EXP 61
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// if p3 = 4 then
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 4
20031: EQUAL
20032: IFFALSE 20042
// sSpec := true ;
20034: LD_ADDR_EXP 58
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// if p3 = 5 then
20042: LD_VAR 0 3
20046: PUSH
20047: LD_INT 5
20049: EQUAL
20050: IFFALSE 20060
// sLevel := true ;
20052: LD_ADDR_EXP 62
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// if p3 = 6 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 6
20067: EQUAL
20068: IFFALSE 20078
// sArmoury := true ;
20070: LD_ADDR_EXP 63
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// if p3 = 7 then
20078: LD_VAR 0 3
20082: PUSH
20083: LD_INT 7
20085: EQUAL
20086: IFFALSE 20096
// sRadar := true ;
20088: LD_ADDR_EXP 64
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// if p3 = 8 then
20096: LD_VAR 0 3
20100: PUSH
20101: LD_INT 8
20103: EQUAL
20104: IFFALSE 20114
// sBunker := true ;
20106: LD_ADDR_EXP 65
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if p3 = 9 then
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 9
20121: EQUAL
20122: IFFALSE 20132
// sHack := true ;
20124: LD_ADDR_EXP 66
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// if p3 = 10 then
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 10
20139: EQUAL
20140: IFFALSE 20150
// sFire := true ;
20142: LD_ADDR_EXP 67
20146: PUSH
20147: LD_INT 1
20149: ST_TO_ADDR
// if p3 = 11 then
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 11
20157: EQUAL
20158: IFFALSE 20168
// sRefresh := true ;
20160: LD_ADDR_EXP 68
20164: PUSH
20165: LD_INT 1
20167: ST_TO_ADDR
// if p3 = 12 then
20168: LD_VAR 0 3
20172: PUSH
20173: LD_INT 12
20175: EQUAL
20176: IFFALSE 20186
// sExp := true ;
20178: LD_ADDR_EXP 69
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// if p3 = 13 then
20186: LD_VAR 0 3
20190: PUSH
20191: LD_INT 13
20193: EQUAL
20194: IFFALSE 20204
// sDepot := true ;
20196: LD_ADDR_EXP 70
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// if p3 = 14 then
20204: LD_VAR 0 3
20208: PUSH
20209: LD_INT 14
20211: EQUAL
20212: IFFALSE 20222
// sFlag := true ;
20214: LD_ADDR_EXP 71
20218: PUSH
20219: LD_INT 1
20221: ST_TO_ADDR
// if p3 = 15 then
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 15
20229: EQUAL
20230: IFFALSE 20240
// sKamikadze := true ;
20232: LD_ADDR_EXP 79
20236: PUSH
20237: LD_INT 1
20239: ST_TO_ADDR
// if p3 = 16 then
20240: LD_VAR 0 3
20244: PUSH
20245: LD_INT 16
20247: EQUAL
20248: IFFALSE 20258
// sTroll := true ;
20250: LD_ADDR_EXP 80
20254: PUSH
20255: LD_INT 1
20257: ST_TO_ADDR
// if p3 = 17 then
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 17
20265: EQUAL
20266: IFFALSE 20276
// sSlow := true ;
20268: LD_ADDR_EXP 81
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// if p3 = 18 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 18
20283: EQUAL
20284: IFFALSE 20294
// sLack := true ;
20286: LD_ADDR_EXP 82
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 19 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 19
20301: EQUAL
20302: IFFALSE 20312
// sTank := true ;
20304: LD_ADDR_EXP 84
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 20 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 20
20319: EQUAL
20320: IFFALSE 20330
// sRemote := true ;
20322: LD_ADDR_EXP 85
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 21 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 21
20337: EQUAL
20338: IFFALSE 20348
// sPowell := true ;
20340: LD_ADDR_EXP 86
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 22 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 22
20355: EQUAL
20356: IFFALSE 20366
// sTeleport := true ;
20358: LD_ADDR_EXP 89
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 23 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 23
20373: EQUAL
20374: IFFALSE 20384
// sOilTower := true ;
20376: LD_ADDR_EXP 91
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 24 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 24
20391: EQUAL
20392: IFFALSE 20402
// sShovel := true ;
20394: LD_ADDR_EXP 92
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 25 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 25
20409: EQUAL
20410: IFFALSE 20420
// sSheik := true ;
20412: LD_ADDR_EXP 93
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 26 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 26
20427: EQUAL
20428: IFFALSE 20438
// sEarthquake := true ;
20430: LD_ADDR_EXP 95
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 27 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 27
20445: EQUAL
20446: IFFALSE 20456
// sAI := true ;
20448: LD_ADDR_EXP 96
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 28 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 28
20463: EQUAL
20464: IFFALSE 20474
// sCargo := true ;
20466: LD_ADDR_EXP 99
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 29 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 29
20481: EQUAL
20482: IFFALSE 20492
// sDLaser := true ;
20484: LD_ADDR_EXP 100
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 30 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 30
20499: EQUAL
20500: IFFALSE 20510
// sExchange := true ;
20502: LD_ADDR_EXP 101
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 31 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 31
20517: EQUAL
20518: IFFALSE 20528
// sFac := true ;
20520: LD_ADDR_EXP 102
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 32 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 32
20535: EQUAL
20536: IFFALSE 20546
// sPower := true ;
20538: LD_ADDR_EXP 103
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 33 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 33
20553: EQUAL
20554: IFFALSE 20564
// sRandom := true ;
20556: LD_ADDR_EXP 104
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 34 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 34
20571: EQUAL
20572: IFFALSE 20582
// sShield := true ;
20574: LD_ADDR_EXP 105
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 35 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 35
20589: EQUAL
20590: IFFALSE 20600
// sTime := true ;
20592: LD_ADDR_EXP 106
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 36 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 36
20607: EQUAL
20608: IFFALSE 20618
// sTools := true ;
20610: LD_ADDR_EXP 107
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// if p3 = 101 then
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 101
20625: EQUAL
20626: IFFALSE 20636
// sSold := true ;
20628: LD_ADDR_EXP 72
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// if p3 = 102 then
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 102
20643: EQUAL
20644: IFFALSE 20654
// sDiff := true ;
20646: LD_ADDR_EXP 73
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if p3 = 103 then
20654: LD_VAR 0 3
20658: PUSH
20659: LD_INT 103
20661: EQUAL
20662: IFFALSE 20672
// sFog := true ;
20664: LD_ADDR_EXP 76
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// if p3 = 104 then
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 104
20679: EQUAL
20680: IFFALSE 20690
// sReset := true ;
20682: LD_ADDR_EXP 77
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// if p3 = 105 then
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 105
20697: EQUAL
20698: IFFALSE 20708
// sSun := true ;
20700: LD_ADDR_EXP 78
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// if p3 = 106 then
20708: LD_VAR 0 3
20712: PUSH
20713: LD_INT 106
20715: EQUAL
20716: IFFALSE 20726
// sTiger := true ;
20718: LD_ADDR_EXP 74
20722: PUSH
20723: LD_INT 1
20725: ST_TO_ADDR
// if p3 = 107 then
20726: LD_VAR 0 3
20730: PUSH
20731: LD_INT 107
20733: EQUAL
20734: IFFALSE 20744
// sBomb := true ;
20736: LD_ADDR_EXP 75
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if p3 = 108 then
20744: LD_VAR 0 3
20748: PUSH
20749: LD_INT 108
20751: EQUAL
20752: IFFALSE 20762
// sWound := true ;
20754: LD_ADDR_EXP 83
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if p3 = 109 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 109
20769: EQUAL
20770: IFFALSE 20780
// sBetray := true ;
20772: LD_ADDR_EXP 87
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if p3 = 110 then
20780: LD_VAR 0 3
20784: PUSH
20785: LD_INT 110
20787: EQUAL
20788: IFFALSE 20798
// sContamin := true ;
20790: LD_ADDR_EXP 88
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// if p3 = 111 then
20798: LD_VAR 0 3
20802: PUSH
20803: LD_INT 111
20805: EQUAL
20806: IFFALSE 20816
// sOil := true ;
20808: LD_ADDR_EXP 90
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 112 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 112
20823: EQUAL
20824: IFFALSE 20834
// sStu := true ;
20826: LD_ADDR_EXP 94
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 113 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 113
20841: EQUAL
20842: IFFALSE 20852
// sBazooka := true ;
20844: LD_ADDR_EXP 97
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// if p3 = 114 then
20852: LD_VAR 0 3
20856: PUSH
20857: LD_INT 114
20859: EQUAL
20860: IFFALSE 20870
// sMortar := true ;
20862: LD_ADDR_EXP 98
20866: PUSH
20867: LD_INT 1
20869: ST_TO_ADDR
// if p3 = 115 then
20870: LD_VAR 0 3
20874: PUSH
20875: LD_INT 115
20877: EQUAL
20878: IFFALSE 20888
// sRanger := true ;
20880: LD_ADDR_EXP 108
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// if p3 = 116 then
20888: LD_VAR 0 3
20892: PUSH
20893: LD_INT 116
20895: EQUAL
20896: IFFALSE 20906
// sComputer := true ;
20898: LD_ADDR_EXP 109
20902: PUSH
20903: LD_INT 1
20905: ST_TO_ADDR
// if p3 = 117 then
20906: LD_VAR 0 3
20910: PUSH
20911: LD_INT 117
20913: EQUAL
20914: IFFALSE 20924
// s30 := true ;
20916: LD_ADDR_EXP 110
20920: PUSH
20921: LD_INT 1
20923: ST_TO_ADDR
// if p3 = 118 then
20924: LD_VAR 0 3
20928: PUSH
20929: LD_INT 118
20931: EQUAL
20932: IFFALSE 20942
// s60 := true ;
20934: LD_ADDR_EXP 111
20938: PUSH
20939: LD_INT 1
20941: ST_TO_ADDR
// end ; if p2 = hack_mode then
20942: LD_VAR 0 2
20946: PUSH
20947: LD_INT 101
20949: EQUAL
20950: IFFALSE 21078
// begin case p3 of 1 :
20952: LD_VAR 0 3
20956: PUSH
20957: LD_INT 1
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20972
20965: POP
// hHackUnlimitedResources ; 2 :
20966: CALL 33225 0 0
20970: GO 21078
20972: LD_INT 2
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20987
20980: POP
// hHackSetLevel10 ; 3 :
20981: CALL 33358 0 0
20985: GO 21078
20987: LD_INT 3
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21002
20995: POP
// hHackSetLevel10YourUnits ; 4 :
20996: CALL 33443 0 0
21000: GO 21078
21002: LD_INT 4
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21017
21010: POP
// hHackInvincible ; 5 :
21011: CALL 33891 0 0
21015: GO 21078
21017: LD_INT 5
21019: DOUBLE
21020: EQUAL
21021: IFTRUE 21025
21023: GO 21032
21025: POP
// hHackInvisible ; 6 :
21026: CALL 34002 0 0
21030: GO 21078
21032: LD_INT 6
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21047
21040: POP
// hHackChangeYourSide ; 7 :
21041: CALL 34059 0 0
21045: GO 21078
21047: LD_INT 7
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21062
21055: POP
// hHackChangeUnitSide ; 8 :
21056: CALL 34101 0 0
21060: GO 21078
21062: LD_INT 8
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 21077
21070: POP
// hHackFog ; end ;
21071: CALL 34202 0 0
21075: GO 21078
21077: POP
// end ; if p2 = game_save_mode then
21078: LD_VAR 0 2
21082: PUSH
21083: LD_INT 102
21085: EQUAL
21086: IFFALSE 21141
// begin if p3 = 1 then
21088: LD_VAR 0 3
21092: PUSH
21093: LD_INT 1
21095: EQUAL
21096: IFFALSE 21108
// globalGameSaveCounter := p4 ;
21098: LD_ADDR_EXP 54
21102: PUSH
21103: LD_VAR 0 4
21107: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21108: LD_VAR 0 3
21112: PUSH
21113: LD_INT 2
21115: EQUAL
21116: PUSH
21117: LD_EXP 54
21121: AND
21122: IFFALSE 21141
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21124: LD_STRING setGameSaveCounter(
21126: PUSH
21127: LD_EXP 54
21131: STR
21132: PUSH
21133: LD_STRING )
21135: STR
21136: PPUSH
21137: CALL_OW 559
// end ; end ;
21141: LD_VAR 0 7
21145: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21146: LD_INT 0
21148: PPUSH
// streamModeActive := false ;
21149: LD_ADDR_EXP 55
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// normalCounter := 36 ;
21157: LD_ADDR_EXP 56
21161: PUSH
21162: LD_INT 36
21164: ST_TO_ADDR
// hardcoreCounter := 18 ;
21165: LD_ADDR_EXP 57
21169: PUSH
21170: LD_INT 18
21172: ST_TO_ADDR
// sRocket := false ;
21173: LD_ADDR_EXP 60
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sSpeed := false ;
21181: LD_ADDR_EXP 59
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sEngine := false ;
21189: LD_ADDR_EXP 61
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sSpec := false ;
21197: LD_ADDR_EXP 58
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sLevel := false ;
21205: LD_ADDR_EXP 62
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sArmoury := false ;
21213: LD_ADDR_EXP 63
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sRadar := false ;
21221: LD_ADDR_EXP 64
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sBunker := false ;
21229: LD_ADDR_EXP 65
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sHack := false ;
21237: LD_ADDR_EXP 66
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sFire := false ;
21245: LD_ADDR_EXP 67
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sRefresh := false ;
21253: LD_ADDR_EXP 68
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sExp := false ;
21261: LD_ADDR_EXP 69
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sDepot := false ;
21269: LD_ADDR_EXP 70
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sFlag := false ;
21277: LD_ADDR_EXP 71
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sKamikadze := false ;
21285: LD_ADDR_EXP 79
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sTroll := false ;
21293: LD_ADDR_EXP 80
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sSlow := false ;
21301: LD_ADDR_EXP 81
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sLack := false ;
21309: LD_ADDR_EXP 82
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sTank := false ;
21317: LD_ADDR_EXP 84
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sRemote := false ;
21325: LD_ADDR_EXP 85
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sPowell := false ;
21333: LD_ADDR_EXP 86
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sTeleport := false ;
21341: LD_ADDR_EXP 89
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sOilTower := false ;
21349: LD_ADDR_EXP 91
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sShovel := false ;
21357: LD_ADDR_EXP 92
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sSheik := false ;
21365: LD_ADDR_EXP 93
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sEarthquake := false ;
21373: LD_ADDR_EXP 95
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sAI := false ;
21381: LD_ADDR_EXP 96
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sCargo := false ;
21389: LD_ADDR_EXP 99
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sDLaser := false ;
21397: LD_ADDR_EXP 100
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sExchange := false ;
21405: LD_ADDR_EXP 101
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sFac := false ;
21413: LD_ADDR_EXP 102
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sPower := false ;
21421: LD_ADDR_EXP 103
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sRandom := false ;
21429: LD_ADDR_EXP 104
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sShield := false ;
21437: LD_ADDR_EXP 105
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sTime := false ;
21445: LD_ADDR_EXP 106
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sTools := false ;
21453: LD_ADDR_EXP 107
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sSold := false ;
21461: LD_ADDR_EXP 72
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sDiff := false ;
21469: LD_ADDR_EXP 73
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sFog := false ;
21477: LD_ADDR_EXP 76
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sReset := false ;
21485: LD_ADDR_EXP 77
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sSun := false ;
21493: LD_ADDR_EXP 78
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sTiger := false ;
21501: LD_ADDR_EXP 74
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sBomb := false ;
21509: LD_ADDR_EXP 75
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sWound := false ;
21517: LD_ADDR_EXP 83
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sBetray := false ;
21525: LD_ADDR_EXP 87
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sContamin := false ;
21533: LD_ADDR_EXP 88
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sOil := false ;
21541: LD_ADDR_EXP 90
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sStu := false ;
21549: LD_ADDR_EXP 94
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sBazooka := false ;
21557: LD_ADDR_EXP 97
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sMortar := false ;
21565: LD_ADDR_EXP 98
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sRanger := false ;
21573: LD_ADDR_EXP 108
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sComputer := false ;
21581: LD_ADDR_EXP 109
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// s30 := false ;
21589: LD_ADDR_EXP 110
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// s60 := false ;
21597: LD_ADDR_EXP 111
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// end ;
21605: LD_VAR 0 1
21609: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21610: LD_INT 0
21612: PPUSH
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
21618: PPUSH
// result := [ ] ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: EMPTY
21625: ST_TO_ADDR
// if campaign_id = 1 then
21626: LD_OWVAR 69
21630: PUSH
21631: LD_INT 1
21633: EQUAL
21634: IFFALSE 24800
// begin case mission_number of 1 :
21636: LD_OWVAR 70
21640: PUSH
21641: LD_INT 1
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21725
21649: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 4
21660: PUSH
21661: LD_INT 11
21663: PUSH
21664: LD_INT 12
21666: PUSH
21667: LD_INT 15
21669: PUSH
21670: LD_INT 16
21672: PUSH
21673: LD_INT 22
21675: PUSH
21676: LD_INT 23
21678: PUSH
21679: LD_INT 26
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 101
21695: PUSH
21696: LD_INT 102
21698: PUSH
21699: LD_INT 106
21701: PUSH
21702: LD_INT 116
21704: PUSH
21705: LD_INT 117
21707: PUSH
21708: LD_INT 118
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: ST_TO_ADDR
21723: GO 24798
21725: LD_INT 2
21727: DOUBLE
21728: EQUAL
21729: IFTRUE 21733
21731: GO 21817
21733: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21734: LD_ADDR_VAR 0 2
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: LD_INT 4
21744: PUSH
21745: LD_INT 11
21747: PUSH
21748: LD_INT 12
21750: PUSH
21751: LD_INT 15
21753: PUSH
21754: LD_INT 16
21756: PUSH
21757: LD_INT 22
21759: PUSH
21760: LD_INT 23
21762: PUSH
21763: LD_INT 26
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 101
21779: PUSH
21780: LD_INT 102
21782: PUSH
21783: LD_INT 105
21785: PUSH
21786: LD_INT 106
21788: PUSH
21789: LD_INT 108
21791: PUSH
21792: LD_INT 116
21794: PUSH
21795: LD_INT 117
21797: PUSH
21798: LD_INT 118
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: ST_TO_ADDR
21815: GO 24798
21817: LD_INT 3
21819: DOUBLE
21820: EQUAL
21821: IFTRUE 21825
21823: GO 21913
21825: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21826: LD_ADDR_VAR 0 2
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 4
21836: PUSH
21837: LD_INT 5
21839: PUSH
21840: LD_INT 11
21842: PUSH
21843: LD_INT 12
21845: PUSH
21846: LD_INT 15
21848: PUSH
21849: LD_INT 16
21851: PUSH
21852: LD_INT 22
21854: PUSH
21855: LD_INT 26
21857: PUSH
21858: LD_INT 36
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 101
21875: PUSH
21876: LD_INT 102
21878: PUSH
21879: LD_INT 105
21881: PUSH
21882: LD_INT 106
21884: PUSH
21885: LD_INT 108
21887: PUSH
21888: LD_INT 116
21890: PUSH
21891: LD_INT 117
21893: PUSH
21894: LD_INT 118
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: ST_TO_ADDR
21911: GO 24798
21913: LD_INT 4
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 22017
21921: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_INT 2
21929: PUSH
21930: LD_INT 4
21932: PUSH
21933: LD_INT 5
21935: PUSH
21936: LD_INT 8
21938: PUSH
21939: LD_INT 11
21941: PUSH
21942: LD_INT 12
21944: PUSH
21945: LD_INT 15
21947: PUSH
21948: LD_INT 16
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 23
21956: PUSH
21957: LD_INT 26
21959: PUSH
21960: LD_INT 36
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 101
21979: PUSH
21980: LD_INT 102
21982: PUSH
21983: LD_INT 105
21985: PUSH
21986: LD_INT 106
21988: PUSH
21989: LD_INT 108
21991: PUSH
21992: LD_INT 116
21994: PUSH
21995: LD_INT 117
21997: PUSH
21998: LD_INT 118
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: ST_TO_ADDR
22015: GO 24798
22017: LD_INT 5
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22137
22025: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 4
22036: PUSH
22037: LD_INT 5
22039: PUSH
22040: LD_INT 6
22042: PUSH
22043: LD_INT 8
22045: PUSH
22046: LD_INT 11
22048: PUSH
22049: LD_INT 12
22051: PUSH
22052: LD_INT 15
22054: PUSH
22055: LD_INT 16
22057: PUSH
22058: LD_INT 22
22060: PUSH
22061: LD_INT 23
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 26
22069: PUSH
22070: LD_INT 36
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 101
22091: PUSH
22092: LD_INT 102
22094: PUSH
22095: LD_INT 105
22097: PUSH
22098: LD_INT 106
22100: PUSH
22101: LD_INT 108
22103: PUSH
22104: LD_INT 109
22106: PUSH
22107: LD_INT 112
22109: PUSH
22110: LD_INT 116
22112: PUSH
22113: LD_INT 117
22115: PUSH
22116: LD_INT 118
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: ST_TO_ADDR
22135: GO 24798
22137: LD_INT 6
22139: DOUBLE
22140: EQUAL
22141: IFTRUE 22145
22143: GO 22277
22145: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22146: LD_ADDR_VAR 0 2
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 5
22159: PUSH
22160: LD_INT 6
22162: PUSH
22163: LD_INT 8
22165: PUSH
22166: LD_INT 11
22168: PUSH
22169: LD_INT 12
22171: PUSH
22172: LD_INT 15
22174: PUSH
22175: LD_INT 16
22177: PUSH
22178: LD_INT 20
22180: PUSH
22181: LD_INT 21
22183: PUSH
22184: LD_INT 22
22186: PUSH
22187: LD_INT 23
22189: PUSH
22190: LD_INT 25
22192: PUSH
22193: LD_INT 26
22195: PUSH
22196: LD_INT 30
22198: PUSH
22199: LD_INT 31
22201: PUSH
22202: LD_INT 32
22204: PUSH
22205: LD_INT 36
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 101
22231: PUSH
22232: LD_INT 102
22234: PUSH
22235: LD_INT 105
22237: PUSH
22238: LD_INT 106
22240: PUSH
22241: LD_INT 108
22243: PUSH
22244: LD_INT 109
22246: PUSH
22247: LD_INT 112
22249: PUSH
22250: LD_INT 116
22252: PUSH
22253: LD_INT 117
22255: PUSH
22256: LD_INT 118
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: ST_TO_ADDR
22275: GO 24798
22277: LD_INT 7
22279: DOUBLE
22280: EQUAL
22281: IFTRUE 22285
22283: GO 22397
22285: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22286: LD_ADDR_VAR 0 2
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: LD_INT 5
22299: PUSH
22300: LD_INT 7
22302: PUSH
22303: LD_INT 11
22305: PUSH
22306: LD_INT 12
22308: PUSH
22309: LD_INT 15
22311: PUSH
22312: LD_INT 16
22314: PUSH
22315: LD_INT 20
22317: PUSH
22318: LD_INT 21
22320: PUSH
22321: LD_INT 22
22323: PUSH
22324: LD_INT 23
22326: PUSH
22327: LD_INT 25
22329: PUSH
22330: LD_INT 26
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 101
22351: PUSH
22352: LD_INT 102
22354: PUSH
22355: LD_INT 103
22357: PUSH
22358: LD_INT 105
22360: PUSH
22361: LD_INT 106
22363: PUSH
22364: LD_INT 108
22366: PUSH
22367: LD_INT 112
22369: PUSH
22370: LD_INT 116
22372: PUSH
22373: LD_INT 117
22375: PUSH
22376: LD_INT 118
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: ST_TO_ADDR
22395: GO 24798
22397: LD_INT 8
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22545
22405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22406: LD_ADDR_VAR 0 2
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: LD_INT 4
22416: PUSH
22417: LD_INT 5
22419: PUSH
22420: LD_INT 6
22422: PUSH
22423: LD_INT 7
22425: PUSH
22426: LD_INT 8
22428: PUSH
22429: LD_INT 11
22431: PUSH
22432: LD_INT 12
22434: PUSH
22435: LD_INT 15
22437: PUSH
22438: LD_INT 16
22440: PUSH
22441: LD_INT 20
22443: PUSH
22444: LD_INT 21
22446: PUSH
22447: LD_INT 22
22449: PUSH
22450: LD_INT 23
22452: PUSH
22453: LD_INT 25
22455: PUSH
22456: LD_INT 26
22458: PUSH
22459: LD_INT 30
22461: PUSH
22462: LD_INT 31
22464: PUSH
22465: LD_INT 32
22467: PUSH
22468: LD_INT 36
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 101
22495: PUSH
22496: LD_INT 102
22498: PUSH
22499: LD_INT 103
22501: PUSH
22502: LD_INT 105
22504: PUSH
22505: LD_INT 106
22507: PUSH
22508: LD_INT 108
22510: PUSH
22511: LD_INT 109
22513: PUSH
22514: LD_INT 112
22516: PUSH
22517: LD_INT 116
22519: PUSH
22520: LD_INT 117
22522: PUSH
22523: LD_INT 118
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 24798
22545: LD_INT 9
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22701
22553: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: LD_INT 5
22567: PUSH
22568: LD_INT 6
22570: PUSH
22571: LD_INT 7
22573: PUSH
22574: LD_INT 8
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 15
22585: PUSH
22586: LD_INT 16
22588: PUSH
22589: LD_INT 20
22591: PUSH
22592: LD_INT 21
22594: PUSH
22595: LD_INT 22
22597: PUSH
22598: LD_INT 23
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 26
22606: PUSH
22607: LD_INT 28
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: LD_INT 31
22615: PUSH
22616: LD_INT 32
22618: PUSH
22619: LD_INT 36
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 101
22647: PUSH
22648: LD_INT 102
22650: PUSH
22651: LD_INT 103
22653: PUSH
22654: LD_INT 105
22656: PUSH
22657: LD_INT 106
22659: PUSH
22660: LD_INT 108
22662: PUSH
22663: LD_INT 109
22665: PUSH
22666: LD_INT 112
22668: PUSH
22669: LD_INT 114
22671: PUSH
22672: LD_INT 116
22674: PUSH
22675: LD_INT 117
22677: PUSH
22678: LD_INT 118
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: ST_TO_ADDR
22699: GO 24798
22701: LD_INT 10
22703: DOUBLE
22704: EQUAL
22705: IFTRUE 22709
22707: GO 22905
22709: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22710: LD_ADDR_VAR 0 2
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: LD_INT 4
22720: PUSH
22721: LD_INT 5
22723: PUSH
22724: LD_INT 6
22726: PUSH
22727: LD_INT 7
22729: PUSH
22730: LD_INT 8
22732: PUSH
22733: LD_INT 9
22735: PUSH
22736: LD_INT 10
22738: PUSH
22739: LD_INT 11
22741: PUSH
22742: LD_INT 12
22744: PUSH
22745: LD_INT 13
22747: PUSH
22748: LD_INT 14
22750: PUSH
22751: LD_INT 15
22753: PUSH
22754: LD_INT 16
22756: PUSH
22757: LD_INT 17
22759: PUSH
22760: LD_INT 18
22762: PUSH
22763: LD_INT 19
22765: PUSH
22766: LD_INT 20
22768: PUSH
22769: LD_INT 21
22771: PUSH
22772: LD_INT 22
22774: PUSH
22775: LD_INT 23
22777: PUSH
22778: LD_INT 24
22780: PUSH
22781: LD_INT 25
22783: PUSH
22784: LD_INT 26
22786: PUSH
22787: LD_INT 28
22789: PUSH
22790: LD_INT 30
22792: PUSH
22793: LD_INT 31
22795: PUSH
22796: LD_INT 32
22798: PUSH
22799: LD_INT 36
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 101
22835: PUSH
22836: LD_INT 102
22838: PUSH
22839: LD_INT 103
22841: PUSH
22842: LD_INT 104
22844: PUSH
22845: LD_INT 105
22847: PUSH
22848: LD_INT 106
22850: PUSH
22851: LD_INT 107
22853: PUSH
22854: LD_INT 108
22856: PUSH
22857: LD_INT 109
22859: PUSH
22860: LD_INT 110
22862: PUSH
22863: LD_INT 111
22865: PUSH
22866: LD_INT 112
22868: PUSH
22869: LD_INT 114
22871: PUSH
22872: LD_INT 116
22874: PUSH
22875: LD_INT 117
22877: PUSH
22878: LD_INT 118
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: ST_TO_ADDR
22903: GO 24798
22905: LD_INT 11
22907: DOUBLE
22908: EQUAL
22909: IFTRUE 22913
22911: GO 23117
22913: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22914: LD_ADDR_VAR 0 2
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: LD_INT 3
22924: PUSH
22925: LD_INT 4
22927: PUSH
22928: LD_INT 5
22930: PUSH
22931: LD_INT 6
22933: PUSH
22934: LD_INT 7
22936: PUSH
22937: LD_INT 8
22939: PUSH
22940: LD_INT 9
22942: PUSH
22943: LD_INT 10
22945: PUSH
22946: LD_INT 11
22948: PUSH
22949: LD_INT 12
22951: PUSH
22952: LD_INT 13
22954: PUSH
22955: LD_INT 14
22957: PUSH
22958: LD_INT 15
22960: PUSH
22961: LD_INT 16
22963: PUSH
22964: LD_INT 17
22966: PUSH
22967: LD_INT 18
22969: PUSH
22970: LD_INT 19
22972: PUSH
22973: LD_INT 20
22975: PUSH
22976: LD_INT 21
22978: PUSH
22979: LD_INT 22
22981: PUSH
22982: LD_INT 23
22984: PUSH
22985: LD_INT 24
22987: PUSH
22988: LD_INT 25
22990: PUSH
22991: LD_INT 26
22993: PUSH
22994: LD_INT 28
22996: PUSH
22997: LD_INT 30
22999: PUSH
23000: LD_INT 31
23002: PUSH
23003: LD_INT 32
23005: PUSH
23006: LD_INT 34
23008: PUSH
23009: LD_INT 36
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 101
23047: PUSH
23048: LD_INT 102
23050: PUSH
23051: LD_INT 103
23053: PUSH
23054: LD_INT 104
23056: PUSH
23057: LD_INT 105
23059: PUSH
23060: LD_INT 106
23062: PUSH
23063: LD_INT 107
23065: PUSH
23066: LD_INT 108
23068: PUSH
23069: LD_INT 109
23071: PUSH
23072: LD_INT 110
23074: PUSH
23075: LD_INT 111
23077: PUSH
23078: LD_INT 112
23080: PUSH
23081: LD_INT 114
23083: PUSH
23084: LD_INT 116
23086: PUSH
23087: LD_INT 117
23089: PUSH
23090: LD_INT 118
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: ST_TO_ADDR
23115: GO 24798
23117: LD_INT 12
23119: DOUBLE
23120: EQUAL
23121: IFTRUE 23125
23123: GO 23345
23125: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23126: LD_ADDR_VAR 0 2
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: LD_INT 4
23142: PUSH
23143: LD_INT 5
23145: PUSH
23146: LD_INT 6
23148: PUSH
23149: LD_INT 7
23151: PUSH
23152: LD_INT 8
23154: PUSH
23155: LD_INT 9
23157: PUSH
23158: LD_INT 10
23160: PUSH
23161: LD_INT 11
23163: PUSH
23164: LD_INT 12
23166: PUSH
23167: LD_INT 13
23169: PUSH
23170: LD_INT 14
23172: PUSH
23173: LD_INT 15
23175: PUSH
23176: LD_INT 16
23178: PUSH
23179: LD_INT 17
23181: PUSH
23182: LD_INT 18
23184: PUSH
23185: LD_INT 19
23187: PUSH
23188: LD_INT 20
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 22
23196: PUSH
23197: LD_INT 23
23199: PUSH
23200: LD_INT 24
23202: PUSH
23203: LD_INT 25
23205: PUSH
23206: LD_INT 26
23208: PUSH
23209: LD_INT 27
23211: PUSH
23212: LD_INT 28
23214: PUSH
23215: LD_INT 30
23217: PUSH
23218: LD_INT 31
23220: PUSH
23221: LD_INT 32
23223: PUSH
23224: LD_INT 33
23226: PUSH
23227: LD_INT 34
23229: PUSH
23230: LD_INT 36
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 101
23271: PUSH
23272: LD_INT 102
23274: PUSH
23275: LD_INT 103
23277: PUSH
23278: LD_INT 104
23280: PUSH
23281: LD_INT 105
23283: PUSH
23284: LD_INT 106
23286: PUSH
23287: LD_INT 107
23289: PUSH
23290: LD_INT 108
23292: PUSH
23293: LD_INT 109
23295: PUSH
23296: LD_INT 110
23298: PUSH
23299: LD_INT 111
23301: PUSH
23302: LD_INT 112
23304: PUSH
23305: LD_INT 113
23307: PUSH
23308: LD_INT 114
23310: PUSH
23311: LD_INT 116
23313: PUSH
23314: LD_INT 117
23316: PUSH
23317: LD_INT 118
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
23343: GO 24798
23345: LD_INT 13
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23561
23353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: LD_INT 4
23370: PUSH
23371: LD_INT 5
23373: PUSH
23374: LD_INT 8
23376: PUSH
23377: LD_INT 9
23379: PUSH
23380: LD_INT 10
23382: PUSH
23383: LD_INT 11
23385: PUSH
23386: LD_INT 12
23388: PUSH
23389: LD_INT 14
23391: PUSH
23392: LD_INT 15
23394: PUSH
23395: LD_INT 16
23397: PUSH
23398: LD_INT 17
23400: PUSH
23401: LD_INT 18
23403: PUSH
23404: LD_INT 19
23406: PUSH
23407: LD_INT 20
23409: PUSH
23410: LD_INT 21
23412: PUSH
23413: LD_INT 22
23415: PUSH
23416: LD_INT 23
23418: PUSH
23419: LD_INT 24
23421: PUSH
23422: LD_INT 25
23424: PUSH
23425: LD_INT 26
23427: PUSH
23428: LD_INT 27
23430: PUSH
23431: LD_INT 28
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 33
23445: PUSH
23446: LD_INT 34
23448: PUSH
23449: LD_INT 36
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 101
23487: PUSH
23488: LD_INT 102
23490: PUSH
23491: LD_INT 103
23493: PUSH
23494: LD_INT 104
23496: PUSH
23497: LD_INT 105
23499: PUSH
23500: LD_INT 106
23502: PUSH
23503: LD_INT 107
23505: PUSH
23506: LD_INT 108
23508: PUSH
23509: LD_INT 109
23511: PUSH
23512: LD_INT 110
23514: PUSH
23515: LD_INT 111
23517: PUSH
23518: LD_INT 112
23520: PUSH
23521: LD_INT 113
23523: PUSH
23524: LD_INT 114
23526: PUSH
23527: LD_INT 116
23529: PUSH
23530: LD_INT 117
23532: PUSH
23533: LD_INT 118
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: ST_TO_ADDR
23559: GO 24798
23561: LD_INT 14
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23793
23569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23570: LD_ADDR_VAR 0 2
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: LD_INT 6
23592: PUSH
23593: LD_INT 7
23595: PUSH
23596: LD_INT 8
23598: PUSH
23599: LD_INT 9
23601: PUSH
23602: LD_INT 10
23604: PUSH
23605: LD_INT 11
23607: PUSH
23608: LD_INT 12
23610: PUSH
23611: LD_INT 13
23613: PUSH
23614: LD_INT 14
23616: PUSH
23617: LD_INT 15
23619: PUSH
23620: LD_INT 16
23622: PUSH
23623: LD_INT 17
23625: PUSH
23626: LD_INT 18
23628: PUSH
23629: LD_INT 19
23631: PUSH
23632: LD_INT 20
23634: PUSH
23635: LD_INT 21
23637: PUSH
23638: LD_INT 22
23640: PUSH
23641: LD_INT 23
23643: PUSH
23644: LD_INT 24
23646: PUSH
23647: LD_INT 25
23649: PUSH
23650: LD_INT 26
23652: PUSH
23653: LD_INT 27
23655: PUSH
23656: LD_INT 28
23658: PUSH
23659: LD_INT 29
23661: PUSH
23662: LD_INT 30
23664: PUSH
23665: LD_INT 31
23667: PUSH
23668: LD_INT 32
23670: PUSH
23671: LD_INT 33
23673: PUSH
23674: LD_INT 34
23676: PUSH
23677: LD_INT 36
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 101
23719: PUSH
23720: LD_INT 102
23722: PUSH
23723: LD_INT 103
23725: PUSH
23726: LD_INT 104
23728: PUSH
23729: LD_INT 105
23731: PUSH
23732: LD_INT 106
23734: PUSH
23735: LD_INT 107
23737: PUSH
23738: LD_INT 108
23740: PUSH
23741: LD_INT 109
23743: PUSH
23744: LD_INT 110
23746: PUSH
23747: LD_INT 111
23749: PUSH
23750: LD_INT 112
23752: PUSH
23753: LD_INT 113
23755: PUSH
23756: LD_INT 114
23758: PUSH
23759: LD_INT 116
23761: PUSH
23762: LD_INT 117
23764: PUSH
23765: LD_INT 118
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: ST_TO_ADDR
23791: GO 24798
23793: LD_INT 15
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 24025
23801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23802: LD_ADDR_VAR 0 2
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 3
23815: PUSH
23816: LD_INT 4
23818: PUSH
23819: LD_INT 5
23821: PUSH
23822: LD_INT 6
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: LD_INT 8
23830: PUSH
23831: LD_INT 9
23833: PUSH
23834: LD_INT 10
23836: PUSH
23837: LD_INT 11
23839: PUSH
23840: LD_INT 12
23842: PUSH
23843: LD_INT 13
23845: PUSH
23846: LD_INT 14
23848: PUSH
23849: LD_INT 15
23851: PUSH
23852: LD_INT 16
23854: PUSH
23855: LD_INT 17
23857: PUSH
23858: LD_INT 18
23860: PUSH
23861: LD_INT 19
23863: PUSH
23864: LD_INT 20
23866: PUSH
23867: LD_INT 21
23869: PUSH
23870: LD_INT 22
23872: PUSH
23873: LD_INT 23
23875: PUSH
23876: LD_INT 24
23878: PUSH
23879: LD_INT 25
23881: PUSH
23882: LD_INT 26
23884: PUSH
23885: LD_INT 27
23887: PUSH
23888: LD_INT 28
23890: PUSH
23891: LD_INT 29
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 31
23899: PUSH
23900: LD_INT 32
23902: PUSH
23903: LD_INT 33
23905: PUSH
23906: LD_INT 34
23908: PUSH
23909: LD_INT 36
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 101
23951: PUSH
23952: LD_INT 102
23954: PUSH
23955: LD_INT 103
23957: PUSH
23958: LD_INT 104
23960: PUSH
23961: LD_INT 105
23963: PUSH
23964: LD_INT 106
23966: PUSH
23967: LD_INT 107
23969: PUSH
23970: LD_INT 108
23972: PUSH
23973: LD_INT 109
23975: PUSH
23976: LD_INT 110
23978: PUSH
23979: LD_INT 111
23981: PUSH
23982: LD_INT 112
23984: PUSH
23985: LD_INT 113
23987: PUSH
23988: LD_INT 114
23990: PUSH
23991: LD_INT 116
23993: PUSH
23994: LD_INT 117
23996: PUSH
23997: LD_INT 118
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: ST_TO_ADDR
24023: GO 24798
24025: LD_INT 16
24027: DOUBLE
24028: EQUAL
24029: IFTRUE 24033
24031: GO 24169
24033: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24034: LD_ADDR_VAR 0 2
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: LD_INT 4
24044: PUSH
24045: LD_INT 5
24047: PUSH
24048: LD_INT 7
24050: PUSH
24051: LD_INT 11
24053: PUSH
24054: LD_INT 12
24056: PUSH
24057: LD_INT 15
24059: PUSH
24060: LD_INT 16
24062: PUSH
24063: LD_INT 20
24065: PUSH
24066: LD_INT 21
24068: PUSH
24069: LD_INT 22
24071: PUSH
24072: LD_INT 23
24074: PUSH
24075: LD_INT 25
24077: PUSH
24078: LD_INT 26
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: LD_INT 31
24086: PUSH
24087: LD_INT 32
24089: PUSH
24090: LD_INT 33
24092: PUSH
24093: LD_INT 34
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 101
24119: PUSH
24120: LD_INT 102
24122: PUSH
24123: LD_INT 103
24125: PUSH
24126: LD_INT 106
24128: PUSH
24129: LD_INT 108
24131: PUSH
24132: LD_INT 112
24134: PUSH
24135: LD_INT 113
24137: PUSH
24138: LD_INT 114
24140: PUSH
24141: LD_INT 116
24143: PUSH
24144: LD_INT 117
24146: PUSH
24147: LD_INT 118
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: ST_TO_ADDR
24167: GO 24798
24169: LD_INT 17
24171: DOUBLE
24172: EQUAL
24173: IFTRUE 24177
24175: GO 24401
24177: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24178: LD_ADDR_VAR 0 2
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 3
24191: PUSH
24192: LD_INT 4
24194: PUSH
24195: LD_INT 5
24197: PUSH
24198: LD_INT 6
24200: PUSH
24201: LD_INT 7
24203: PUSH
24204: LD_INT 8
24206: PUSH
24207: LD_INT 9
24209: PUSH
24210: LD_INT 10
24212: PUSH
24213: LD_INT 11
24215: PUSH
24216: LD_INT 12
24218: PUSH
24219: LD_INT 13
24221: PUSH
24222: LD_INT 14
24224: PUSH
24225: LD_INT 15
24227: PUSH
24228: LD_INT 16
24230: PUSH
24231: LD_INT 17
24233: PUSH
24234: LD_INT 18
24236: PUSH
24237: LD_INT 19
24239: PUSH
24240: LD_INT 20
24242: PUSH
24243: LD_INT 21
24245: PUSH
24246: LD_INT 22
24248: PUSH
24249: LD_INT 23
24251: PUSH
24252: LD_INT 24
24254: PUSH
24255: LD_INT 25
24257: PUSH
24258: LD_INT 26
24260: PUSH
24261: LD_INT 27
24263: PUSH
24264: LD_INT 28
24266: PUSH
24267: LD_INT 29
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 31
24275: PUSH
24276: LD_INT 32
24278: PUSH
24279: LD_INT 33
24281: PUSH
24282: LD_INT 34
24284: PUSH
24285: LD_INT 36
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 101
24327: PUSH
24328: LD_INT 102
24330: PUSH
24331: LD_INT 103
24333: PUSH
24334: LD_INT 104
24336: PUSH
24337: LD_INT 105
24339: PUSH
24340: LD_INT 106
24342: PUSH
24343: LD_INT 107
24345: PUSH
24346: LD_INT 108
24348: PUSH
24349: LD_INT 109
24351: PUSH
24352: LD_INT 110
24354: PUSH
24355: LD_INT 111
24357: PUSH
24358: LD_INT 112
24360: PUSH
24361: LD_INT 113
24363: PUSH
24364: LD_INT 114
24366: PUSH
24367: LD_INT 116
24369: PUSH
24370: LD_INT 117
24372: PUSH
24373: LD_INT 118
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: ST_TO_ADDR
24399: GO 24798
24401: LD_INT 18
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24557
24409: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 4
24420: PUSH
24421: LD_INT 5
24423: PUSH
24424: LD_INT 7
24426: PUSH
24427: LD_INT 11
24429: PUSH
24430: LD_INT 12
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 20
24441: PUSH
24442: LD_INT 21
24444: PUSH
24445: LD_INT 22
24447: PUSH
24448: LD_INT 23
24450: PUSH
24451: LD_INT 25
24453: PUSH
24454: LD_INT 26
24456: PUSH
24457: LD_INT 30
24459: PUSH
24460: LD_INT 31
24462: PUSH
24463: LD_INT 32
24465: PUSH
24466: LD_INT 33
24468: PUSH
24469: LD_INT 34
24471: PUSH
24472: LD_INT 35
24474: PUSH
24475: LD_INT 36
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 101
24503: PUSH
24504: LD_INT 102
24506: PUSH
24507: LD_INT 103
24509: PUSH
24510: LD_INT 106
24512: PUSH
24513: LD_INT 108
24515: PUSH
24516: LD_INT 112
24518: PUSH
24519: LD_INT 113
24521: PUSH
24522: LD_INT 114
24524: PUSH
24525: LD_INT 115
24527: PUSH
24528: LD_INT 116
24530: PUSH
24531: LD_INT 117
24533: PUSH
24534: LD_INT 118
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 24798
24557: LD_INT 19
24559: DOUBLE
24560: EQUAL
24561: IFTRUE 24565
24563: GO 24797
24565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24566: LD_ADDR_VAR 0 2
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 3
24579: PUSH
24580: LD_INT 4
24582: PUSH
24583: LD_INT 5
24585: PUSH
24586: LD_INT 6
24588: PUSH
24589: LD_INT 7
24591: PUSH
24592: LD_INT 8
24594: PUSH
24595: LD_INT 9
24597: PUSH
24598: LD_INT 10
24600: PUSH
24601: LD_INT 11
24603: PUSH
24604: LD_INT 12
24606: PUSH
24607: LD_INT 13
24609: PUSH
24610: LD_INT 14
24612: PUSH
24613: LD_INT 15
24615: PUSH
24616: LD_INT 16
24618: PUSH
24619: LD_INT 17
24621: PUSH
24622: LD_INT 18
24624: PUSH
24625: LD_INT 19
24627: PUSH
24628: LD_INT 20
24630: PUSH
24631: LD_INT 21
24633: PUSH
24634: LD_INT 22
24636: PUSH
24637: LD_INT 23
24639: PUSH
24640: LD_INT 24
24642: PUSH
24643: LD_INT 25
24645: PUSH
24646: LD_INT 26
24648: PUSH
24649: LD_INT 27
24651: PUSH
24652: LD_INT 28
24654: PUSH
24655: LD_INT 29
24657: PUSH
24658: LD_INT 30
24660: PUSH
24661: LD_INT 31
24663: PUSH
24664: LD_INT 32
24666: PUSH
24667: LD_INT 33
24669: PUSH
24670: LD_INT 34
24672: PUSH
24673: LD_INT 35
24675: PUSH
24676: LD_INT 36
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 101
24719: PUSH
24720: LD_INT 102
24722: PUSH
24723: LD_INT 103
24725: PUSH
24726: LD_INT 104
24728: PUSH
24729: LD_INT 105
24731: PUSH
24732: LD_INT 106
24734: PUSH
24735: LD_INT 107
24737: PUSH
24738: LD_INT 108
24740: PUSH
24741: LD_INT 109
24743: PUSH
24744: LD_INT 110
24746: PUSH
24747: LD_INT 111
24749: PUSH
24750: LD_INT 112
24752: PUSH
24753: LD_INT 113
24755: PUSH
24756: LD_INT 114
24758: PUSH
24759: LD_INT 115
24761: PUSH
24762: LD_INT 116
24764: PUSH
24765: LD_INT 117
24767: PUSH
24768: LD_INT 118
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: ST_TO_ADDR
24795: GO 24798
24797: POP
// end else
24798: GO 25029
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24800: LD_ADDR_VAR 0 2
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: LD_INT 4
24816: PUSH
24817: LD_INT 5
24819: PUSH
24820: LD_INT 6
24822: PUSH
24823: LD_INT 7
24825: PUSH
24826: LD_INT 8
24828: PUSH
24829: LD_INT 9
24831: PUSH
24832: LD_INT 10
24834: PUSH
24835: LD_INT 11
24837: PUSH
24838: LD_INT 12
24840: PUSH
24841: LD_INT 13
24843: PUSH
24844: LD_INT 14
24846: PUSH
24847: LD_INT 15
24849: PUSH
24850: LD_INT 16
24852: PUSH
24853: LD_INT 17
24855: PUSH
24856: LD_INT 18
24858: PUSH
24859: LD_INT 19
24861: PUSH
24862: LD_INT 20
24864: PUSH
24865: LD_INT 21
24867: PUSH
24868: LD_INT 22
24870: PUSH
24871: LD_INT 23
24873: PUSH
24874: LD_INT 24
24876: PUSH
24877: LD_INT 25
24879: PUSH
24880: LD_INT 26
24882: PUSH
24883: LD_INT 27
24885: PUSH
24886: LD_INT 28
24888: PUSH
24889: LD_INT 29
24891: PUSH
24892: LD_INT 30
24894: PUSH
24895: LD_INT 31
24897: PUSH
24898: LD_INT 32
24900: PUSH
24901: LD_INT 33
24903: PUSH
24904: LD_INT 34
24906: PUSH
24907: LD_INT 35
24909: PUSH
24910: LD_INT 36
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 101
24953: PUSH
24954: LD_INT 102
24956: PUSH
24957: LD_INT 103
24959: PUSH
24960: LD_INT 104
24962: PUSH
24963: LD_INT 105
24965: PUSH
24966: LD_INT 106
24968: PUSH
24969: LD_INT 107
24971: PUSH
24972: LD_INT 108
24974: PUSH
24975: LD_INT 109
24977: PUSH
24978: LD_INT 110
24980: PUSH
24981: LD_INT 111
24983: PUSH
24984: LD_INT 112
24986: PUSH
24987: LD_INT 113
24989: PUSH
24990: LD_INT 114
24992: PUSH
24993: LD_INT 115
24995: PUSH
24996: LD_INT 116
24998: PUSH
24999: LD_INT 117
25001: PUSH
25002: LD_INT 118
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: ST_TO_ADDR
// if result then
25029: LD_VAR 0 2
25033: IFFALSE 25819
// begin normal :=  ;
25035: LD_ADDR_VAR 0 5
25039: PUSH
25040: LD_STRING 
25042: ST_TO_ADDR
// hardcore :=  ;
25043: LD_ADDR_VAR 0 6
25047: PUSH
25048: LD_STRING 
25050: ST_TO_ADDR
// active :=  ;
25051: LD_ADDR_VAR 0 7
25055: PUSH
25056: LD_STRING 
25058: ST_TO_ADDR
// for i = 1 to normalCounter do
25059: LD_ADDR_VAR 0 8
25063: PUSH
25064: DOUBLE
25065: LD_INT 1
25067: DEC
25068: ST_TO_ADDR
25069: LD_EXP 56
25073: PUSH
25074: FOR_TO
25075: IFFALSE 25176
// begin tmp := 0 ;
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_STRING 0
25084: ST_TO_ADDR
// if result [ 1 ] then
25085: LD_VAR 0 2
25089: PUSH
25090: LD_INT 1
25092: ARRAY
25093: IFFALSE 25158
// if result [ 1 ] [ 1 ] = i then
25095: LD_VAR 0 2
25099: PUSH
25100: LD_INT 1
25102: ARRAY
25103: PUSH
25104: LD_INT 1
25106: ARRAY
25107: PUSH
25108: LD_VAR 0 8
25112: EQUAL
25113: IFFALSE 25158
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25115: LD_ADDR_VAR 0 2
25119: PUSH
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_INT 1
25127: PPUSH
25128: LD_VAR 0 2
25132: PUSH
25133: LD_INT 1
25135: ARRAY
25136: PPUSH
25137: LD_INT 1
25139: PPUSH
25140: CALL_OW 3
25144: PPUSH
25145: CALL_OW 1
25149: ST_TO_ADDR
// tmp := 1 ;
25150: LD_ADDR_VAR 0 3
25154: PUSH
25155: LD_STRING 1
25157: ST_TO_ADDR
// end ; normal := normal & tmp ;
25158: LD_ADDR_VAR 0 5
25162: PUSH
25163: LD_VAR 0 5
25167: PUSH
25168: LD_VAR 0 3
25172: STR
25173: ST_TO_ADDR
// end ;
25174: GO 25074
25176: POP
25177: POP
// for i = 1 to hardcoreCounter do
25178: LD_ADDR_VAR 0 8
25182: PUSH
25183: DOUBLE
25184: LD_INT 1
25186: DEC
25187: ST_TO_ADDR
25188: LD_EXP 57
25192: PUSH
25193: FOR_TO
25194: IFFALSE 25299
// begin tmp := 0 ;
25196: LD_ADDR_VAR 0 3
25200: PUSH
25201: LD_STRING 0
25203: ST_TO_ADDR
// if result [ 2 ] then
25204: LD_VAR 0 2
25208: PUSH
25209: LD_INT 2
25211: ARRAY
25212: IFFALSE 25281
// if result [ 2 ] [ 1 ] = 100 + i then
25214: LD_VAR 0 2
25218: PUSH
25219: LD_INT 2
25221: ARRAY
25222: PUSH
25223: LD_INT 1
25225: ARRAY
25226: PUSH
25227: LD_INT 100
25229: PUSH
25230: LD_VAR 0 8
25234: PLUS
25235: EQUAL
25236: IFFALSE 25281
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: LD_VAR 0 2
25247: PPUSH
25248: LD_INT 2
25250: PPUSH
25251: LD_VAR 0 2
25255: PUSH
25256: LD_INT 2
25258: ARRAY
25259: PPUSH
25260: LD_INT 1
25262: PPUSH
25263: CALL_OW 3
25267: PPUSH
25268: CALL_OW 1
25272: ST_TO_ADDR
// tmp := 1 ;
25273: LD_ADDR_VAR 0 3
25277: PUSH
25278: LD_STRING 1
25280: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25281: LD_ADDR_VAR 0 6
25285: PUSH
25286: LD_VAR 0 6
25290: PUSH
25291: LD_VAR 0 3
25295: STR
25296: ST_TO_ADDR
// end ;
25297: GO 25193
25299: POP
25300: POP
// if isGameLoad then
25301: LD_VAR 0 1
25305: IFFALSE 25780
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25307: LD_ADDR_VAR 0 4
25311: PUSH
25312: LD_EXP 60
25316: PUSH
25317: LD_EXP 59
25321: PUSH
25322: LD_EXP 61
25326: PUSH
25327: LD_EXP 58
25331: PUSH
25332: LD_EXP 62
25336: PUSH
25337: LD_EXP 63
25341: PUSH
25342: LD_EXP 64
25346: PUSH
25347: LD_EXP 65
25351: PUSH
25352: LD_EXP 66
25356: PUSH
25357: LD_EXP 67
25361: PUSH
25362: LD_EXP 68
25366: PUSH
25367: LD_EXP 69
25371: PUSH
25372: LD_EXP 70
25376: PUSH
25377: LD_EXP 71
25381: PUSH
25382: LD_EXP 79
25386: PUSH
25387: LD_EXP 80
25391: PUSH
25392: LD_EXP 81
25396: PUSH
25397: LD_EXP 82
25401: PUSH
25402: LD_EXP 84
25406: PUSH
25407: LD_EXP 85
25411: PUSH
25412: LD_EXP 86
25416: PUSH
25417: LD_EXP 89
25421: PUSH
25422: LD_EXP 91
25426: PUSH
25427: LD_EXP 92
25431: PUSH
25432: LD_EXP 93
25436: PUSH
25437: LD_EXP 95
25441: PUSH
25442: LD_EXP 96
25446: PUSH
25447: LD_EXP 99
25451: PUSH
25452: LD_EXP 100
25456: PUSH
25457: LD_EXP 101
25461: PUSH
25462: LD_EXP 102
25466: PUSH
25467: LD_EXP 103
25471: PUSH
25472: LD_EXP 104
25476: PUSH
25477: LD_EXP 105
25481: PUSH
25482: LD_EXP 106
25486: PUSH
25487: LD_EXP 107
25491: PUSH
25492: LD_EXP 72
25496: PUSH
25497: LD_EXP 73
25501: PUSH
25502: LD_EXP 76
25506: PUSH
25507: LD_EXP 77
25511: PUSH
25512: LD_EXP 78
25516: PUSH
25517: LD_EXP 74
25521: PUSH
25522: LD_EXP 75
25526: PUSH
25527: LD_EXP 83
25531: PUSH
25532: LD_EXP 87
25536: PUSH
25537: LD_EXP 88
25541: PUSH
25542: LD_EXP 90
25546: PUSH
25547: LD_EXP 94
25551: PUSH
25552: LD_EXP 97
25556: PUSH
25557: LD_EXP 98
25561: PUSH
25562: LD_EXP 108
25566: PUSH
25567: LD_EXP 109
25571: PUSH
25572: LD_EXP 110
25576: PUSH
25577: LD_EXP 111
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: ST_TO_ADDR
// tmp :=  ;
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: LD_STRING 
25645: ST_TO_ADDR
// for i = 1 to normalCounter do
25646: LD_ADDR_VAR 0 8
25650: PUSH
25651: DOUBLE
25652: LD_INT 1
25654: DEC
25655: ST_TO_ADDR
25656: LD_EXP 56
25660: PUSH
25661: FOR_TO
25662: IFFALSE 25698
// begin if flags [ i ] then
25664: LD_VAR 0 4
25668: PUSH
25669: LD_VAR 0 8
25673: ARRAY
25674: IFFALSE 25696
// tmp := tmp & i & ; ;
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_VAR 0 3
25685: PUSH
25686: LD_VAR 0 8
25690: STR
25691: PUSH
25692: LD_STRING ;
25694: STR
25695: ST_TO_ADDR
// end ;
25696: GO 25661
25698: POP
25699: POP
// for i = 1 to hardcoreCounter do
25700: LD_ADDR_VAR 0 8
25704: PUSH
25705: DOUBLE
25706: LD_INT 1
25708: DEC
25709: ST_TO_ADDR
25710: LD_EXP 57
25714: PUSH
25715: FOR_TO
25716: IFFALSE 25762
// begin if flags [ normalCounter + i ] then
25718: LD_VAR 0 4
25722: PUSH
25723: LD_EXP 56
25727: PUSH
25728: LD_VAR 0 8
25732: PLUS
25733: ARRAY
25734: IFFALSE 25760
// tmp := tmp & ( 100 + i ) & ; ;
25736: LD_ADDR_VAR 0 3
25740: PUSH
25741: LD_VAR 0 3
25745: PUSH
25746: LD_INT 100
25748: PUSH
25749: LD_VAR 0 8
25753: PLUS
25754: STR
25755: PUSH
25756: LD_STRING ;
25758: STR
25759: ST_TO_ADDR
// end ;
25760: GO 25715
25762: POP
25763: POP
// if tmp then
25764: LD_VAR 0 3
25768: IFFALSE 25780
// active := tmp ;
25770: LD_ADDR_VAR 0 7
25774: PUSH
25775: LD_VAR 0 3
25779: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25780: LD_STRING getStreamItemsFromMission("
25782: PUSH
25783: LD_VAR 0 5
25787: STR
25788: PUSH
25789: LD_STRING ","
25791: STR
25792: PUSH
25793: LD_VAR 0 6
25797: STR
25798: PUSH
25799: LD_STRING ","
25801: STR
25802: PUSH
25803: LD_VAR 0 7
25807: STR
25808: PUSH
25809: LD_STRING ")
25811: STR
25812: PPUSH
25813: CALL_OW 559
// end else
25817: GO 25826
// ToLua ( getStreamItemsFromMission("","","") ) ;
25819: LD_STRING getStreamItemsFromMission("","","")
25821: PPUSH
25822: CALL_OW 559
// end ;
25826: LD_VAR 0 2
25830: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25831: LD_EXP 55
25835: PUSH
25836: LD_EXP 60
25840: AND
25841: IFFALSE 25965
25843: GO 25845
25845: DISABLE
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
// begin enable ;
25850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25851: LD_ADDR_VAR 0 2
25855: PUSH
25856: LD_INT 22
25858: PUSH
25859: LD_OWVAR 2
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: LD_INT 34
25873: PUSH
25874: LD_INT 7
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 34
25883: PUSH
25884: LD_INT 45
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 34
25893: PUSH
25894: LD_INT 28
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 34
25903: PUSH
25904: LD_INT 47
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if not tmp then
25927: LD_VAR 0 2
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 25965
// for i in tmp do
25936: LD_ADDR_VAR 0 1
25940: PUSH
25941: LD_VAR 0 2
25945: PUSH
25946: FOR_IN
25947: IFFALSE 25963
// begin SetLives ( i , 0 ) ;
25949: LD_VAR 0 1
25953: PPUSH
25954: LD_INT 0
25956: PPUSH
25957: CALL_OW 234
// end ;
25961: GO 25946
25963: POP
25964: POP
// end ;
25965: PPOPN 2
25967: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25968: LD_EXP 55
25972: PUSH
25973: LD_EXP 61
25977: AND
25978: IFFALSE 26062
25980: GO 25982
25982: DISABLE
25983: LD_INT 0
25985: PPUSH
25986: PPUSH
// begin enable ;
25987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25988: LD_ADDR_VAR 0 2
25992: PUSH
25993: LD_INT 22
25995: PUSH
25996: LD_OWVAR 2
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 32
26007: PUSH
26008: LD_INT 3
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PPUSH
26019: CALL_OW 69
26023: ST_TO_ADDR
// if not tmp then
26024: LD_VAR 0 2
26028: NOT
26029: IFFALSE 26033
// exit ;
26031: GO 26062
// for i in tmp do
26033: LD_ADDR_VAR 0 1
26037: PUSH
26038: LD_VAR 0 2
26042: PUSH
26043: FOR_IN
26044: IFFALSE 26060
// begin SetLives ( i , 0 ) ;
26046: LD_VAR 0 1
26050: PPUSH
26051: LD_INT 0
26053: PPUSH
26054: CALL_OW 234
// end ;
26058: GO 26043
26060: POP
26061: POP
// end ;
26062: PPOPN 2
26064: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26065: LD_EXP 55
26069: PUSH
26070: LD_EXP 58
26074: AND
26075: IFFALSE 26168
26077: GO 26079
26079: DISABLE
26080: LD_INT 0
26082: PPUSH
// begin enable ;
26083: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26084: LD_ADDR_VAR 0 1
26088: PUSH
26089: LD_INT 22
26091: PUSH
26092: LD_OWVAR 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: LD_INT 25
26106: PUSH
26107: LD_INT 5
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 25
26116: PUSH
26117: LD_INT 9
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 25
26126: PUSH
26127: LD_INT 8
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PPUSH
26144: CALL_OW 69
26148: PUSH
26149: FOR_IN
26150: IFFALSE 26166
// begin SetClass ( i , 1 ) ;
26152: LD_VAR 0 1
26156: PPUSH
26157: LD_INT 1
26159: PPUSH
26160: CALL_OW 336
// end ;
26164: GO 26149
26166: POP
26167: POP
// end ;
26168: PPOPN 1
26170: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26171: LD_EXP 55
26175: PUSH
26176: LD_EXP 59
26180: AND
26181: PUSH
26182: LD_OWVAR 65
26186: PUSH
26187: LD_INT 7
26189: LESS
26190: AND
26191: IFFALSE 26205
26193: GO 26195
26195: DISABLE
// begin enable ;
26196: ENABLE
// game_speed := 7 ;
26197: LD_ADDR_OWVAR 65
26201: PUSH
26202: LD_INT 7
26204: ST_TO_ADDR
// end ;
26205: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26206: LD_EXP 55
26210: PUSH
26211: LD_EXP 62
26215: AND
26216: IFFALSE 26418
26218: GO 26220
26220: DISABLE
26221: LD_INT 0
26223: PPUSH
26224: PPUSH
26225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26226: LD_ADDR_VAR 0 3
26230: PUSH
26231: LD_INT 81
26233: PUSH
26234: LD_OWVAR 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 21
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PPUSH
26257: CALL_OW 69
26261: ST_TO_ADDR
// if not tmp then
26262: LD_VAR 0 3
26266: NOT
26267: IFFALSE 26271
// exit ;
26269: GO 26418
// if tmp > 5 then
26271: LD_VAR 0 3
26275: PUSH
26276: LD_INT 5
26278: GREATER
26279: IFFALSE 26291
// k := 5 else
26281: LD_ADDR_VAR 0 2
26285: PUSH
26286: LD_INT 5
26288: ST_TO_ADDR
26289: GO 26301
// k := tmp ;
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_VAR 0 3
26300: ST_TO_ADDR
// for i := 1 to k do
26301: LD_ADDR_VAR 0 1
26305: PUSH
26306: DOUBLE
26307: LD_INT 1
26309: DEC
26310: ST_TO_ADDR
26311: LD_VAR 0 2
26315: PUSH
26316: FOR_TO
26317: IFFALSE 26416
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26319: LD_VAR 0 3
26323: PUSH
26324: LD_VAR 0 1
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 1
26334: PUSH
26335: LD_INT 4
26337: MOD
26338: PUSH
26339: LD_INT 1
26341: PLUS
26342: PPUSH
26343: CALL_OW 259
26347: PUSH
26348: LD_INT 10
26350: LESS
26351: IFFALSE 26414
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26353: LD_VAR 0 3
26357: PUSH
26358: LD_VAR 0 1
26362: ARRAY
26363: PPUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_INT 4
26371: MOD
26372: PUSH
26373: LD_INT 1
26375: PLUS
26376: PPUSH
26377: LD_VAR 0 3
26381: PUSH
26382: LD_VAR 0 1
26386: ARRAY
26387: PPUSH
26388: LD_VAR 0 1
26392: PUSH
26393: LD_INT 4
26395: MOD
26396: PUSH
26397: LD_INT 1
26399: PLUS
26400: PPUSH
26401: CALL_OW 259
26405: PUSH
26406: LD_INT 1
26408: PLUS
26409: PPUSH
26410: CALL_OW 237
26414: GO 26316
26416: POP
26417: POP
// end ;
26418: PPOPN 3
26420: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26421: LD_EXP 55
26425: PUSH
26426: LD_EXP 63
26430: AND
26431: IFFALSE 26451
26433: GO 26435
26435: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26436: LD_INT 4
26438: PPUSH
26439: LD_OWVAR 2
26443: PPUSH
26444: LD_INT 0
26446: PPUSH
26447: CALL_OW 324
26451: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26452: LD_EXP 55
26456: PUSH
26457: LD_EXP 92
26461: AND
26462: IFFALSE 26482
26464: GO 26466
26466: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26467: LD_INT 19
26469: PPUSH
26470: LD_OWVAR 2
26474: PPUSH
26475: LD_INT 0
26477: PPUSH
26478: CALL_OW 324
26482: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26483: LD_EXP 55
26487: PUSH
26488: LD_EXP 64
26492: AND
26493: IFFALSE 26595
26495: GO 26497
26497: DISABLE
26498: LD_INT 0
26500: PPUSH
26501: PPUSH
// begin enable ;
26502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26503: LD_ADDR_VAR 0 2
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_OWVAR 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 34
26525: PUSH
26526: LD_INT 11
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 34
26535: PUSH
26536: LD_INT 30
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 69
26556: ST_TO_ADDR
// if not tmp then
26557: LD_VAR 0 2
26561: NOT
26562: IFFALSE 26566
// exit ;
26564: GO 26595
// for i in tmp do
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: FOR_IN
26577: IFFALSE 26593
// begin SetLives ( i , 0 ) ;
26579: LD_VAR 0 1
26583: PPUSH
26584: LD_INT 0
26586: PPUSH
26587: CALL_OW 234
// end ;
26591: GO 26576
26593: POP
26594: POP
// end ;
26595: PPOPN 2
26597: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26598: LD_EXP 55
26602: PUSH
26603: LD_EXP 65
26607: AND
26608: IFFALSE 26628
26610: GO 26612
26612: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26613: LD_INT 32
26615: PPUSH
26616: LD_OWVAR 2
26620: PPUSH
26621: LD_INT 0
26623: PPUSH
26624: CALL_OW 324
26628: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26629: LD_EXP 55
26633: PUSH
26634: LD_EXP 66
26638: AND
26639: IFFALSE 26820
26641: GO 26643
26643: DISABLE
26644: LD_INT 0
26646: PPUSH
26647: PPUSH
26648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26649: LD_ADDR_VAR 0 2
26653: PUSH
26654: LD_INT 22
26656: PUSH
26657: LD_OWVAR 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 33
26668: PUSH
26669: LD_INT 3
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PPUSH
26680: CALL_OW 69
26684: ST_TO_ADDR
// if not tmp then
26685: LD_VAR 0 2
26689: NOT
26690: IFFALSE 26694
// exit ;
26692: GO 26820
// side := 0 ;
26694: LD_ADDR_VAR 0 3
26698: PUSH
26699: LD_INT 0
26701: ST_TO_ADDR
// for i := 1 to 8 do
26702: LD_ADDR_VAR 0 1
26706: PUSH
26707: DOUBLE
26708: LD_INT 1
26710: DEC
26711: ST_TO_ADDR
26712: LD_INT 8
26714: PUSH
26715: FOR_TO
26716: IFFALSE 26764
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26718: LD_OWVAR 2
26722: PUSH
26723: LD_VAR 0 1
26727: NONEQUAL
26728: PUSH
26729: LD_OWVAR 2
26733: PPUSH
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 81
26743: PUSH
26744: LD_INT 2
26746: EQUAL
26747: AND
26748: IFFALSE 26762
// begin side := i ;
26750: LD_ADDR_VAR 0 3
26754: PUSH
26755: LD_VAR 0 1
26759: ST_TO_ADDR
// break ;
26760: GO 26764
// end ;
26762: GO 26715
26764: POP
26765: POP
// if not side then
26766: LD_VAR 0 3
26770: NOT
26771: IFFALSE 26775
// exit ;
26773: GO 26820
// for i := 1 to tmp do
26775: LD_ADDR_VAR 0 1
26779: PUSH
26780: DOUBLE
26781: LD_INT 1
26783: DEC
26784: ST_TO_ADDR
26785: LD_VAR 0 2
26789: PUSH
26790: FOR_TO
26791: IFFALSE 26818
// if Prob ( 60 ) then
26793: LD_INT 60
26795: PPUSH
26796: CALL_OW 13
26800: IFFALSE 26816
// SetSide ( i , side ) ;
26802: LD_VAR 0 1
26806: PPUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: CALL_OW 235
26816: GO 26790
26818: POP
26819: POP
// end ;
26820: PPOPN 3
26822: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26823: LD_EXP 55
26827: PUSH
26828: LD_EXP 68
26832: AND
26833: IFFALSE 26952
26835: GO 26837
26837: DISABLE
26838: LD_INT 0
26840: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26841: LD_ADDR_VAR 0 1
26845: PUSH
26846: LD_INT 22
26848: PUSH
26849: LD_OWVAR 2
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 21
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 3
26870: PUSH
26871: LD_INT 23
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: PPUSH
26890: CALL_OW 69
26894: PUSH
26895: FOR_IN
26896: IFFALSE 26950
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26898: LD_VAR 0 1
26902: PPUSH
26903: CALL_OW 257
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: LD_INT 4
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: IN
26926: IFFALSE 26948
// SetClass ( un , rand ( 1 , 4 ) ) ;
26928: LD_VAR 0 1
26932: PPUSH
26933: LD_INT 1
26935: PPUSH
26936: LD_INT 4
26938: PPUSH
26939: CALL_OW 12
26943: PPUSH
26944: CALL_OW 336
26948: GO 26895
26950: POP
26951: POP
// end ;
26952: PPOPN 1
26954: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26955: LD_EXP 55
26959: PUSH
26960: LD_EXP 67
26964: AND
26965: IFFALSE 27044
26967: GO 26969
26969: DISABLE
26970: LD_INT 0
26972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26973: LD_ADDR_VAR 0 1
26977: PUSH
26978: LD_INT 22
26980: PUSH
26981: LD_OWVAR 2
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 21
26992: PUSH
26993: LD_INT 3
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PPUSH
27004: CALL_OW 69
27008: ST_TO_ADDR
// if not tmp then
27009: LD_VAR 0 1
27013: NOT
27014: IFFALSE 27018
// exit ;
27016: GO 27044
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27018: LD_VAR 0 1
27022: PUSH
27023: LD_INT 1
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 12
27035: ARRAY
27036: PPUSH
27037: LD_INT 100
27039: PPUSH
27040: CALL_OW 234
// end ;
27044: PPOPN 1
27046: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27047: LD_EXP 55
27051: PUSH
27052: LD_EXP 69
27056: AND
27057: IFFALSE 27155
27059: GO 27061
27061: DISABLE
27062: LD_INT 0
27064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27065: LD_ADDR_VAR 0 1
27069: PUSH
27070: LD_INT 22
27072: PUSH
27073: LD_OWVAR 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL_OW 69
27100: ST_TO_ADDR
// if not tmp then
27101: LD_VAR 0 1
27105: NOT
27106: IFFALSE 27110
// exit ;
27108: GO 27155
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27110: LD_VAR 0 1
27114: PUSH
27115: LD_INT 1
27117: PPUSH
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL_OW 12
27127: ARRAY
27128: PPUSH
27129: LD_INT 1
27131: PPUSH
27132: LD_INT 4
27134: PPUSH
27135: CALL_OW 12
27139: PPUSH
27140: LD_INT 3000
27142: PPUSH
27143: LD_INT 9000
27145: PPUSH
27146: CALL_OW 12
27150: PPUSH
27151: CALL_OW 492
// end ;
27155: PPOPN 1
27157: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27158: LD_EXP 55
27162: PUSH
27163: LD_EXP 70
27167: AND
27168: IFFALSE 27188
27170: GO 27172
27172: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27173: LD_INT 1
27175: PPUSH
27176: LD_OWVAR 2
27180: PPUSH
27181: LD_INT 0
27183: PPUSH
27184: CALL_OW 324
27188: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27189: LD_EXP 55
27193: PUSH
27194: LD_EXP 71
27198: AND
27199: IFFALSE 27282
27201: GO 27203
27203: DISABLE
27204: LD_INT 0
27206: PPUSH
27207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27208: LD_ADDR_VAR 0 2
27212: PUSH
27213: LD_INT 22
27215: PUSH
27216: LD_OWVAR 2
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 21
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PPUSH
27239: CALL_OW 69
27243: ST_TO_ADDR
// if not tmp then
27244: LD_VAR 0 2
27248: NOT
27249: IFFALSE 27253
// exit ;
27251: GO 27282
// for i in tmp do
27253: LD_ADDR_VAR 0 1
27257: PUSH
27258: LD_VAR 0 2
27262: PUSH
27263: FOR_IN
27264: IFFALSE 27280
// SetBLevel ( i , 10 ) ;
27266: LD_VAR 0 1
27270: PPUSH
27271: LD_INT 10
27273: PPUSH
27274: CALL_OW 241
27278: GO 27263
27280: POP
27281: POP
// end ;
27282: PPOPN 2
27284: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27285: LD_EXP 55
27289: PUSH
27290: LD_EXP 72
27294: AND
27295: IFFALSE 27406
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27305: LD_ADDR_VAR 0 3
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 25
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PPUSH
27336: CALL_OW 69
27340: ST_TO_ADDR
// if not tmp then
27341: LD_VAR 0 3
27345: NOT
27346: IFFALSE 27350
// exit ;
27348: GO 27406
// un := tmp [ rand ( 1 , tmp ) ] ;
27350: LD_ADDR_VAR 0 2
27354: PUSH
27355: LD_VAR 0 3
27359: PUSH
27360: LD_INT 1
27362: PPUSH
27363: LD_VAR 0 3
27367: PPUSH
27368: CALL_OW 12
27372: ARRAY
27373: ST_TO_ADDR
// if Crawls ( un ) then
27374: LD_VAR 0 2
27378: PPUSH
27379: CALL_OW 318
27383: IFFALSE 27394
// ComWalk ( un ) ;
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27394: LD_VAR 0 2
27398: PPUSH
27399: LD_INT 5
27401: PPUSH
27402: CALL_OW 336
// end ;
27406: PPOPN 3
27408: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27409: LD_EXP 55
27413: PUSH
27414: LD_EXP 73
27418: AND
27419: PUSH
27420: LD_OWVAR 67
27424: PUSH
27425: LD_INT 4
27427: LESS
27428: AND
27429: IFFALSE 27448
27431: GO 27433
27433: DISABLE
// begin Difficulty := Difficulty + 1 ;
27434: LD_ADDR_OWVAR 67
27438: PUSH
27439: LD_OWVAR 67
27443: PUSH
27444: LD_INT 1
27446: PLUS
27447: ST_TO_ADDR
// end ;
27448: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27449: LD_EXP 55
27453: PUSH
27454: LD_EXP 74
27458: AND
27459: IFFALSE 27562
27461: GO 27463
27463: DISABLE
27464: LD_INT 0
27466: PPUSH
// begin for i := 1 to 5 do
27467: LD_ADDR_VAR 0 1
27471: PUSH
27472: DOUBLE
27473: LD_INT 1
27475: DEC
27476: ST_TO_ADDR
27477: LD_INT 5
27479: PUSH
27480: FOR_TO
27481: IFFALSE 27560
// begin uc_nation := nation_nature ;
27483: LD_ADDR_OWVAR 21
27487: PUSH
27488: LD_INT 0
27490: ST_TO_ADDR
// uc_side := 0 ;
27491: LD_ADDR_OWVAR 20
27495: PUSH
27496: LD_INT 0
27498: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27499: LD_ADDR_OWVAR 29
27503: PUSH
27504: LD_INT 12
27506: PUSH
27507: LD_INT 12
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: ST_TO_ADDR
// hc_agressivity := 20 ;
27514: LD_ADDR_OWVAR 35
27518: PUSH
27519: LD_INT 20
27521: ST_TO_ADDR
// hc_class := class_tiger ;
27522: LD_ADDR_OWVAR 28
27526: PUSH
27527: LD_INT 14
27529: ST_TO_ADDR
// hc_gallery :=  ;
27530: LD_ADDR_OWVAR 33
27534: PUSH
27535: LD_STRING 
27537: ST_TO_ADDR
// hc_name :=  ;
27538: LD_ADDR_OWVAR 26
27542: PUSH
27543: LD_STRING 
27545: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27546: CALL_OW 44
27550: PPUSH
27551: LD_INT 0
27553: PPUSH
27554: CALL_OW 51
// end ;
27558: GO 27480
27560: POP
27561: POP
// end ;
27562: PPOPN 1
27564: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27565: LD_EXP 55
27569: PUSH
27570: LD_EXP 75
27574: AND
27575: IFFALSE 27584
27577: GO 27579
27579: DISABLE
// StreamSibBomb ;
27580: CALL 27585 0 0
27584: END
// export function StreamSibBomb ; var i , x , y ; begin
27585: LD_INT 0
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
// result := false ;
27591: LD_ADDR_VAR 0 1
27595: PUSH
27596: LD_INT 0
27598: ST_TO_ADDR
// for i := 1 to 16 do
27599: LD_ADDR_VAR 0 2
27603: PUSH
27604: DOUBLE
27605: LD_INT 1
27607: DEC
27608: ST_TO_ADDR
27609: LD_INT 16
27611: PUSH
27612: FOR_TO
27613: IFFALSE 27812
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27615: LD_ADDR_VAR 0 3
27619: PUSH
27620: LD_INT 10
27622: PUSH
27623: LD_INT 20
27625: PUSH
27626: LD_INT 30
27628: PUSH
27629: LD_INT 40
27631: PUSH
27632: LD_INT 50
27634: PUSH
27635: LD_INT 60
27637: PUSH
27638: LD_INT 70
27640: PUSH
27641: LD_INT 80
27643: PUSH
27644: LD_INT 90
27646: PUSH
27647: LD_INT 100
27649: PUSH
27650: LD_INT 110
27652: PUSH
27653: LD_INT 120
27655: PUSH
27656: LD_INT 130
27658: PUSH
27659: LD_INT 140
27661: PUSH
27662: LD_INT 150
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: PPUSH
27685: LD_INT 15
27687: PPUSH
27688: CALL_OW 12
27692: ARRAY
27693: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27694: LD_ADDR_VAR 0 4
27698: PUSH
27699: LD_INT 10
27701: PUSH
27702: LD_INT 20
27704: PUSH
27705: LD_INT 30
27707: PUSH
27708: LD_INT 40
27710: PUSH
27711: LD_INT 50
27713: PUSH
27714: LD_INT 60
27716: PUSH
27717: LD_INT 70
27719: PUSH
27720: LD_INT 80
27722: PUSH
27723: LD_INT 90
27725: PUSH
27726: LD_INT 100
27728: PUSH
27729: LD_INT 110
27731: PUSH
27732: LD_INT 120
27734: PUSH
27735: LD_INT 130
27737: PUSH
27738: LD_INT 140
27740: PUSH
27741: LD_INT 150
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: PPUSH
27764: LD_INT 15
27766: PPUSH
27767: CALL_OW 12
27771: ARRAY
27772: ST_TO_ADDR
// if ValidHex ( x , y ) then
27773: LD_VAR 0 3
27777: PPUSH
27778: LD_VAR 0 4
27782: PPUSH
27783: CALL_OW 488
27787: IFFALSE 27810
// begin result := [ x , y ] ;
27789: LD_ADDR_VAR 0 1
27793: PUSH
27794: LD_VAR 0 3
27798: PUSH
27799: LD_VAR 0 4
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// break ;
27808: GO 27812
// end ; end ;
27810: GO 27612
27812: POP
27813: POP
// if result then
27814: LD_VAR 0 1
27818: IFFALSE 27878
// begin ToLua ( playSibBomb() ) ;
27820: LD_STRING playSibBomb()
27822: PPUSH
27823: CALL_OW 559
// wait ( 0 0$14 ) ;
27827: LD_INT 490
27829: PPUSH
27830: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27834: LD_VAR 0 1
27838: PUSH
27839: LD_INT 1
27841: ARRAY
27842: PPUSH
27843: LD_VAR 0 1
27847: PUSH
27848: LD_INT 2
27850: ARRAY
27851: PPUSH
27852: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 1
27863: ARRAY
27864: PPUSH
27865: LD_VAR 0 1
27869: PUSH
27870: LD_INT 2
27872: ARRAY
27873: PPUSH
27874: CALL_OW 429
// end ; end ;
27878: LD_VAR 0 1
27882: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27883: LD_EXP 55
27887: PUSH
27888: LD_EXP 77
27892: AND
27893: IFFALSE 27905
27895: GO 27897
27897: DISABLE
// YouLost (  ) ;
27898: LD_STRING 
27900: PPUSH
27901: CALL_OW 104
27905: END
// every 0 0$1 trigger StreamModeActive and sFog do
27906: LD_EXP 55
27910: PUSH
27911: LD_EXP 76
27915: AND
27916: IFFALSE 27930
27918: GO 27920
27920: DISABLE
// FogOff ( your_side ) ;
27921: LD_OWVAR 2
27925: PPUSH
27926: CALL_OW 344
27930: END
// every 0 0$1 trigger StreamModeActive and sSun do
27931: LD_EXP 55
27935: PUSH
27936: LD_EXP 78
27940: AND
27941: IFFALSE 27969
27943: GO 27945
27945: DISABLE
// begin solar_recharge_percent := 0 ;
27946: LD_ADDR_OWVAR 79
27950: PUSH
27951: LD_INT 0
27953: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27954: LD_INT 10500
27956: PPUSH
27957: CALL_OW 67
// solar_recharge_percent := 100 ;
27961: LD_ADDR_OWVAR 79
27965: PUSH
27966: LD_INT 100
27968: ST_TO_ADDR
// end ;
27969: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27970: LD_EXP 55
27974: PUSH
27975: LD_EXP 79
27979: AND
27980: IFFALSE 28219
27982: GO 27984
27984: DISABLE
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
// begin tmp := [ ] ;
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: EMPTY
27996: ST_TO_ADDR
// for i := 1 to 6 do
27997: LD_ADDR_VAR 0 1
28001: PUSH
28002: DOUBLE
28003: LD_INT 1
28005: DEC
28006: ST_TO_ADDR
28007: LD_INT 6
28009: PUSH
28010: FOR_TO
28011: IFFALSE 28116
// begin uc_nation := nation_nature ;
28013: LD_ADDR_OWVAR 21
28017: PUSH
28018: LD_INT 0
28020: ST_TO_ADDR
// uc_side := 0 ;
28021: LD_ADDR_OWVAR 20
28025: PUSH
28026: LD_INT 0
28028: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28029: LD_ADDR_OWVAR 29
28033: PUSH
28034: LD_INT 12
28036: PUSH
28037: LD_INT 12
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: ST_TO_ADDR
// hc_agressivity := 20 ;
28044: LD_ADDR_OWVAR 35
28048: PUSH
28049: LD_INT 20
28051: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28052: LD_ADDR_OWVAR 28
28056: PUSH
28057: LD_INT 17
28059: ST_TO_ADDR
// hc_gallery :=  ;
28060: LD_ADDR_OWVAR 33
28064: PUSH
28065: LD_STRING 
28067: ST_TO_ADDR
// hc_name :=  ;
28068: LD_ADDR_OWVAR 26
28072: PUSH
28073: LD_STRING 
28075: ST_TO_ADDR
// un := CreateHuman ;
28076: LD_ADDR_VAR 0 2
28080: PUSH
28081: CALL_OW 44
28085: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28086: LD_VAR 0 2
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: CALL_OW 51
// tmp := tmp ^ un ;
28098: LD_ADDR_VAR 0 3
28102: PUSH
28103: LD_VAR 0 3
28107: PUSH
28108: LD_VAR 0 2
28112: ADD
28113: ST_TO_ADDR
// end ;
28114: GO 28010
28116: POP
28117: POP
// repeat wait ( 0 0$1 ) ;
28118: LD_INT 35
28120: PPUSH
28121: CALL_OW 67
// for un in tmp do
28125: LD_ADDR_VAR 0 2
28129: PUSH
28130: LD_VAR 0 3
28134: PUSH
28135: FOR_IN
28136: IFFALSE 28210
// begin if IsDead ( un ) then
28138: LD_VAR 0 2
28142: PPUSH
28143: CALL_OW 301
28147: IFFALSE 28167
// begin tmp := tmp diff un ;
28149: LD_ADDR_VAR 0 3
28153: PUSH
28154: LD_VAR 0 3
28158: PUSH
28159: LD_VAR 0 2
28163: DIFF
28164: ST_TO_ADDR
// continue ;
28165: GO 28135
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28167: LD_VAR 0 2
28171: PPUSH
28172: LD_INT 3
28174: PUSH
28175: LD_INT 22
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PPUSH
28189: CALL_OW 69
28193: PPUSH
28194: LD_VAR 0 2
28198: PPUSH
28199: CALL_OW 74
28203: PPUSH
28204: CALL_OW 115
// end ;
28208: GO 28135
28210: POP
28211: POP
// until not tmp ;
28212: LD_VAR 0 3
28216: NOT
28217: IFFALSE 28118
// end ;
28219: PPOPN 3
28221: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28222: LD_EXP 55
28226: PUSH
28227: LD_EXP 80
28231: AND
28232: IFFALSE 28286
28234: GO 28236
28236: DISABLE
// begin ToLua ( displayTroll(); ) ;
28237: LD_STRING displayTroll();
28239: PPUSH
28240: CALL_OW 559
// wait ( 3 3$00 ) ;
28244: LD_INT 6300
28246: PPUSH
28247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28251: LD_STRING hideTroll();
28253: PPUSH
28254: CALL_OW 559
// wait ( 1 1$00 ) ;
28258: LD_INT 2100
28260: PPUSH
28261: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28265: LD_STRING displayTroll();
28267: PPUSH
28268: CALL_OW 559
// wait ( 1 1$00 ) ;
28272: LD_INT 2100
28274: PPUSH
28275: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28279: LD_STRING hideTroll();
28281: PPUSH
28282: CALL_OW 559
// end ;
28286: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28287: LD_EXP 55
28291: PUSH
28292: LD_EXP 81
28296: AND
28297: IFFALSE 28360
28299: GO 28301
28301: DISABLE
28302: LD_INT 0
28304: PPUSH
// begin p := 0 ;
28305: LD_ADDR_VAR 0 1
28309: PUSH
28310: LD_INT 0
28312: ST_TO_ADDR
// repeat game_speed := 1 ;
28313: LD_ADDR_OWVAR 65
28317: PUSH
28318: LD_INT 1
28320: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28321: LD_INT 35
28323: PPUSH
28324: CALL_OW 67
// p := p + 1 ;
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_VAR 0 1
28337: PUSH
28338: LD_INT 1
28340: PLUS
28341: ST_TO_ADDR
// until p >= 60 ;
28342: LD_VAR 0 1
28346: PUSH
28347: LD_INT 60
28349: GREATEREQUAL
28350: IFFALSE 28313
// game_speed := 4 ;
28352: LD_ADDR_OWVAR 65
28356: PUSH
28357: LD_INT 4
28359: ST_TO_ADDR
// end ;
28360: PPOPN 1
28362: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28363: LD_EXP 55
28367: PUSH
28368: LD_EXP 82
28372: AND
28373: IFFALSE 28519
28375: GO 28377
28377: DISABLE
28378: LD_INT 0
28380: PPUSH
28381: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28382: LD_ADDR_VAR 0 1
28386: PUSH
28387: LD_INT 22
28389: PUSH
28390: LD_OWVAR 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 30
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 30
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 69
28435: ST_TO_ADDR
// if not depot then
28436: LD_VAR 0 1
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 28519
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28445: LD_ADDR_VAR 0 2
28449: PUSH
28450: LD_VAR 0 1
28454: PUSH
28455: LD_INT 1
28457: PPUSH
28458: LD_VAR 0 1
28462: PPUSH
28463: CALL_OW 12
28467: ARRAY
28468: PPUSH
28469: CALL_OW 274
28473: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28474: LD_VAR 0 2
28478: PPUSH
28479: LD_INT 1
28481: PPUSH
28482: LD_INT 0
28484: PPUSH
28485: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 2
28496: PPUSH
28497: LD_INT 0
28499: PPUSH
28500: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 3
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 277
// end ;
28519: PPOPN 2
28521: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28522: LD_EXP 55
28526: PUSH
28527: LD_EXP 83
28531: AND
28532: IFFALSE 28629
28534: GO 28536
28536: DISABLE
28537: LD_INT 0
28539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28540: LD_ADDR_VAR 0 1
28544: PUSH
28545: LD_INT 22
28547: PUSH
28548: LD_OWVAR 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 21
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: LD_INT 23
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: PPUSH
28589: CALL_OW 69
28593: ST_TO_ADDR
// if not tmp then
28594: LD_VAR 0 1
28598: NOT
28599: IFFALSE 28603
// exit ;
28601: GO 28629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28603: LD_VAR 0 1
28607: PUSH
28608: LD_INT 1
28610: PPUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 12
28620: ARRAY
28621: PPUSH
28622: LD_INT 200
28624: PPUSH
28625: CALL_OW 234
// end ;
28629: PPOPN 1
28631: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28632: LD_EXP 55
28636: PUSH
28637: LD_EXP 84
28641: AND
28642: IFFALSE 28721
28644: GO 28646
28646: DISABLE
28647: LD_INT 0
28649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28650: LD_ADDR_VAR 0 1
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_OWVAR 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 21
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 69
28685: ST_TO_ADDR
// if not tmp then
28686: LD_VAR 0 1
28690: NOT
28691: IFFALSE 28695
// exit ;
28693: GO 28721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28695: LD_VAR 0 1
28699: PUSH
28700: LD_INT 1
28702: PPUSH
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 12
28712: ARRAY
28713: PPUSH
28714: LD_INT 60
28716: PPUSH
28717: CALL_OW 234
// end ;
28721: PPOPN 1
28723: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28724: LD_EXP 55
28728: PUSH
28729: LD_EXP 85
28733: AND
28734: IFFALSE 28833
28736: GO 28738
28738: DISABLE
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
// begin enable ;
28743: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28744: LD_ADDR_VAR 0 1
28748: PUSH
28749: LD_INT 22
28751: PUSH
28752: LD_OWVAR 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 61
28763: PUSH
28764: EMPTY
28765: LIST
28766: PUSH
28767: LD_INT 33
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 69
28786: ST_TO_ADDR
// if not tmp then
28787: LD_VAR 0 1
28791: NOT
28792: IFFALSE 28796
// exit ;
28794: GO 28833
// for i in tmp do
28796: LD_ADDR_VAR 0 2
28800: PUSH
28801: LD_VAR 0 1
28805: PUSH
28806: FOR_IN
28807: IFFALSE 28831
// if IsControledBy ( i ) then
28809: LD_VAR 0 2
28813: PPUSH
28814: CALL_OW 312
28818: IFFALSE 28829
// ComUnlink ( i ) ;
28820: LD_VAR 0 2
28824: PPUSH
28825: CALL_OW 136
28829: GO 28806
28831: POP
28832: POP
// end ;
28833: PPOPN 2
28835: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28836: LD_EXP 55
28840: PUSH
28841: LD_EXP 86
28845: AND
28846: IFFALSE 28986
28848: GO 28850
28850: DISABLE
28851: LD_INT 0
28853: PPUSH
28854: PPUSH
// begin ToLua ( displayPowell(); ) ;
28855: LD_STRING displayPowell();
28857: PPUSH
28858: CALL_OW 559
// uc_side := 0 ;
28862: LD_ADDR_OWVAR 20
28866: PUSH
28867: LD_INT 0
28869: ST_TO_ADDR
// uc_nation := 2 ;
28870: LD_ADDR_OWVAR 21
28874: PUSH
28875: LD_INT 2
28877: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28878: LD_ADDR_OWVAR 37
28882: PUSH
28883: LD_INT 14
28885: ST_TO_ADDR
// vc_engine := engine_siberite ;
28886: LD_ADDR_OWVAR 39
28890: PUSH
28891: LD_INT 3
28893: ST_TO_ADDR
// vc_control := control_apeman ;
28894: LD_ADDR_OWVAR 38
28898: PUSH
28899: LD_INT 5
28901: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28902: LD_ADDR_OWVAR 40
28906: PUSH
28907: LD_INT 29
28909: ST_TO_ADDR
// un := CreateVehicle ;
28910: LD_ADDR_VAR 0 2
28914: PUSH
28915: CALL_OW 45
28919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28920: LD_VAR 0 2
28924: PPUSH
28925: LD_INT 1
28927: PPUSH
28928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28932: LD_INT 35
28934: PPUSH
28935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28939: LD_VAR 0 2
28943: PPUSH
28944: LD_INT 22
28946: PUSH
28947: LD_OWVAR 2
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PPUSH
28956: CALL_OW 69
28960: PPUSH
28961: LD_VAR 0 2
28965: PPUSH
28966: CALL_OW 74
28970: PPUSH
28971: CALL_OW 115
// until IsDead ( un ) ;
28975: LD_VAR 0 2
28979: PPUSH
28980: CALL_OW 301
28984: IFFALSE 28932
// end ;
28986: PPOPN 2
28988: END
// every 0 0$1 trigger StreamModeActive and sStu do
28989: LD_EXP 55
28993: PUSH
28994: LD_EXP 94
28998: AND
28999: IFFALSE 29015
29001: GO 29003
29003: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29004: LD_STRING displayStucuk();
29006: PPUSH
29007: CALL_OW 559
// ResetFog ;
29011: CALL_OW 335
// end ;
29015: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29016: LD_EXP 55
29020: PUSH
29021: LD_EXP 87
29025: AND
29026: IFFALSE 29167
29028: GO 29030
29030: DISABLE
29031: LD_INT 0
29033: PPUSH
29034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29035: LD_ADDR_VAR 0 2
29039: PUSH
29040: LD_INT 22
29042: PUSH
29043: LD_OWVAR 2
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 21
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PPUSH
29066: CALL_OW 69
29070: ST_TO_ADDR
// if not tmp then
29071: LD_VAR 0 2
29075: NOT
29076: IFFALSE 29080
// exit ;
29078: GO 29167
// un := tmp [ rand ( 1 , tmp ) ] ;
29080: LD_ADDR_VAR 0 1
29084: PUSH
29085: LD_VAR 0 2
29089: PUSH
29090: LD_INT 1
29092: PPUSH
29093: LD_VAR 0 2
29097: PPUSH
29098: CALL_OW 12
29102: ARRAY
29103: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29104: LD_VAR 0 1
29108: PPUSH
29109: LD_INT 0
29111: PPUSH
29112: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_OWVAR 3
29125: PUSH
29126: LD_VAR 0 1
29130: DIFF
29131: PPUSH
29132: LD_VAR 0 1
29136: PPUSH
29137: CALL_OW 74
29141: PPUSH
29142: CALL_OW 115
// wait ( 0 0$20 ) ;
29146: LD_INT 700
29148: PPUSH
29149: CALL_OW 67
// SetSide ( un , your_side ) ;
29153: LD_VAR 0 1
29157: PPUSH
29158: LD_OWVAR 2
29162: PPUSH
29163: CALL_OW 235
// end ;
29167: PPOPN 2
29169: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29170: LD_EXP 55
29174: PUSH
29175: LD_EXP 88
29179: AND
29180: IFFALSE 29286
29182: GO 29184
29184: DISABLE
29185: LD_INT 0
29187: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29188: LD_ADDR_VAR 0 1
29192: PUSH
29193: LD_INT 22
29195: PUSH
29196: LD_OWVAR 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 30
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 30
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 69
29241: ST_TO_ADDR
// if not depot then
29242: LD_VAR 0 1
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29286
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29251: LD_VAR 0 1
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: PPUSH
29260: CALL_OW 250
29264: PPUSH
29265: LD_VAR 0 1
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PPUSH
29274: CALL_OW 251
29278: PPUSH
29279: LD_INT 70
29281: PPUSH
29282: CALL_OW 495
// end ;
29286: PPOPN 1
29288: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29289: LD_EXP 55
29293: PUSH
29294: LD_EXP 89
29298: AND
29299: IFFALSE 29510
29301: GO 29303
29303: DISABLE
29304: LD_INT 0
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29311: LD_ADDR_VAR 0 5
29315: PUSH
29316: LD_INT 22
29318: PUSH
29319: LD_OWVAR 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 21
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PPUSH
29342: CALL_OW 69
29346: ST_TO_ADDR
// if not tmp then
29347: LD_VAR 0 5
29351: NOT
29352: IFFALSE 29356
// exit ;
29354: GO 29510
// for i in tmp do
29356: LD_ADDR_VAR 0 1
29360: PUSH
29361: LD_VAR 0 5
29365: PUSH
29366: FOR_IN
29367: IFFALSE 29508
// begin d := rand ( 0 , 5 ) ;
29369: LD_ADDR_VAR 0 4
29373: PUSH
29374: LD_INT 0
29376: PPUSH
29377: LD_INT 5
29379: PPUSH
29380: CALL_OW 12
29384: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29385: LD_ADDR_VAR 0 2
29389: PUSH
29390: LD_VAR 0 1
29394: PPUSH
29395: CALL_OW 250
29399: PPUSH
29400: LD_VAR 0 4
29404: PPUSH
29405: LD_INT 3
29407: PPUSH
29408: LD_INT 12
29410: PPUSH
29411: CALL_OW 12
29415: PPUSH
29416: CALL_OW 272
29420: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: LD_VAR 0 1
29430: PPUSH
29431: CALL_OW 251
29435: PPUSH
29436: LD_VAR 0 4
29440: PPUSH
29441: LD_INT 3
29443: PPUSH
29444: LD_INT 12
29446: PPUSH
29447: CALL_OW 12
29451: PPUSH
29452: CALL_OW 273
29456: ST_TO_ADDR
// if ValidHex ( x , y ) then
29457: LD_VAR 0 2
29461: PPUSH
29462: LD_VAR 0 3
29466: PPUSH
29467: CALL_OW 488
29471: IFFALSE 29506
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29473: LD_VAR 0 1
29477: PPUSH
29478: LD_VAR 0 2
29482: PPUSH
29483: LD_VAR 0 3
29487: PPUSH
29488: LD_INT 3
29490: PPUSH
29491: LD_INT 6
29493: PPUSH
29494: CALL_OW 12
29498: PPUSH
29499: LD_INT 1
29501: PPUSH
29502: CALL_OW 483
// end ;
29506: GO 29366
29508: POP
29509: POP
// end ;
29510: PPOPN 5
29512: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29513: LD_EXP 55
29517: PUSH
29518: LD_EXP 90
29522: AND
29523: IFFALSE 29617
29525: GO 29527
29527: DISABLE
29528: LD_INT 0
29530: PPUSH
29531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29532: LD_ADDR_VAR 0 2
29536: PUSH
29537: LD_INT 22
29539: PUSH
29540: LD_OWVAR 2
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 32
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 21
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: PPUSH
29574: CALL_OW 69
29578: ST_TO_ADDR
// if not tmp then
29579: LD_VAR 0 2
29583: NOT
29584: IFFALSE 29588
// exit ;
29586: GO 29617
// for i in tmp do
29588: LD_ADDR_VAR 0 1
29592: PUSH
29593: LD_VAR 0 2
29597: PUSH
29598: FOR_IN
29599: IFFALSE 29615
// SetFuel ( i , 0 ) ;
29601: LD_VAR 0 1
29605: PPUSH
29606: LD_INT 0
29608: PPUSH
29609: CALL_OW 240
29613: GO 29598
29615: POP
29616: POP
// end ;
29617: PPOPN 2
29619: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29620: LD_EXP 55
29624: PUSH
29625: LD_EXP 91
29629: AND
29630: IFFALSE 29696
29632: GO 29634
29634: DISABLE
29635: LD_INT 0
29637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29638: LD_ADDR_VAR 0 1
29642: PUSH
29643: LD_INT 22
29645: PUSH
29646: LD_OWVAR 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 30
29657: PUSH
29658: LD_INT 29
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PPUSH
29669: CALL_OW 69
29673: ST_TO_ADDR
// if not tmp then
29674: LD_VAR 0 1
29678: NOT
29679: IFFALSE 29683
// exit ;
29681: GO 29696
// DestroyUnit ( tmp [ 1 ] ) ;
29683: LD_VAR 0 1
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: CALL_OW 65
// end ;
29696: PPOPN 1
29698: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29699: LD_EXP 55
29703: PUSH
29704: LD_EXP 93
29708: AND
29709: IFFALSE 29838
29711: GO 29713
29713: DISABLE
29714: LD_INT 0
29716: PPUSH
// begin uc_side := 0 ;
29717: LD_ADDR_OWVAR 20
29721: PUSH
29722: LD_INT 0
29724: ST_TO_ADDR
// uc_nation := nation_arabian ;
29725: LD_ADDR_OWVAR 21
29729: PUSH
29730: LD_INT 2
29732: ST_TO_ADDR
// hc_gallery :=  ;
29733: LD_ADDR_OWVAR 33
29737: PUSH
29738: LD_STRING 
29740: ST_TO_ADDR
// hc_name :=  ;
29741: LD_ADDR_OWVAR 26
29745: PUSH
29746: LD_STRING 
29748: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29749: LD_INT 1
29751: PPUSH
29752: LD_INT 11
29754: PPUSH
29755: LD_INT 10
29757: PPUSH
29758: CALL_OW 380
// un := CreateHuman ;
29762: LD_ADDR_VAR 0 1
29766: PUSH
29767: CALL_OW 44
29771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_INT 1
29779: PPUSH
29780: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29784: LD_INT 35
29786: PPUSH
29787: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_INT 22
29798: PUSH
29799: LD_OWVAR 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PPUSH
29808: CALL_OW 69
29812: PPUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 74
29822: PPUSH
29823: CALL_OW 115
// until IsDead ( un ) ;
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 301
29836: IFFALSE 29784
// end ;
29838: PPOPN 1
29840: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29841: LD_EXP 55
29845: PUSH
29846: LD_EXP 95
29850: AND
29851: IFFALSE 29863
29853: GO 29855
29855: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29856: LD_STRING earthquake(getX(game), 0, 32)
29858: PPUSH
29859: CALL_OW 559
29863: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29864: LD_EXP 55
29868: PUSH
29869: LD_EXP 96
29873: AND
29874: IFFALSE 29965
29876: GO 29878
29878: DISABLE
29879: LD_INT 0
29881: PPUSH
// begin enable ;
29882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29883: LD_ADDR_VAR 0 1
29887: PUSH
29888: LD_INT 22
29890: PUSH
29891: LD_OWVAR 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 21
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 33
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 69
29929: ST_TO_ADDR
// if not tmp then
29930: LD_VAR 0 1
29934: NOT
29935: IFFALSE 29939
// exit ;
29937: GO 29965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29939: LD_VAR 0 1
29943: PUSH
29944: LD_INT 1
29946: PPUSH
29947: LD_VAR 0 1
29951: PPUSH
29952: CALL_OW 12
29956: ARRAY
29957: PPUSH
29958: LD_INT 1
29960: PPUSH
29961: CALL_OW 234
// end ;
29965: PPOPN 1
29967: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29968: LD_EXP 55
29972: PUSH
29973: LD_EXP 97
29977: AND
29978: IFFALSE 30119
29980: GO 29982
29982: DISABLE
29983: LD_INT 0
29985: PPUSH
29986: PPUSH
29987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29988: LD_ADDR_VAR 0 3
29992: PUSH
29993: LD_INT 22
29995: PUSH
29996: LD_OWVAR 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 25
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PPUSH
30019: CALL_OW 69
30023: ST_TO_ADDR
// if not tmp then
30024: LD_VAR 0 3
30028: NOT
30029: IFFALSE 30033
// exit ;
30031: GO 30119
// un := tmp [ rand ( 1 , tmp ) ] ;
30033: LD_ADDR_VAR 0 2
30037: PUSH
30038: LD_VAR 0 3
30042: PUSH
30043: LD_INT 1
30045: PPUSH
30046: LD_VAR 0 3
30050: PPUSH
30051: CALL_OW 12
30055: ARRAY
30056: ST_TO_ADDR
// if Crawls ( un ) then
30057: LD_VAR 0 2
30061: PPUSH
30062: CALL_OW 318
30066: IFFALSE 30077
// ComWalk ( un ) ;
30068: LD_VAR 0 2
30072: PPUSH
30073: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30077: LD_VAR 0 2
30081: PPUSH
30082: LD_INT 9
30084: PPUSH
30085: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30089: LD_INT 28
30091: PPUSH
30092: LD_OWVAR 2
30096: PPUSH
30097: LD_INT 2
30099: PPUSH
30100: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30104: LD_INT 29
30106: PPUSH
30107: LD_OWVAR 2
30111: PPUSH
30112: LD_INT 2
30114: PPUSH
30115: CALL_OW 322
// end ;
30119: PPOPN 3
30121: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30122: LD_EXP 55
30126: PUSH
30127: LD_EXP 98
30131: AND
30132: IFFALSE 30243
30134: GO 30136
30136: DISABLE
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
30141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30142: LD_ADDR_VAR 0 3
30146: PUSH
30147: LD_INT 22
30149: PUSH
30150: LD_OWVAR 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 25
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PPUSH
30173: CALL_OW 69
30177: ST_TO_ADDR
// if not tmp then
30178: LD_VAR 0 3
30182: NOT
30183: IFFALSE 30187
// exit ;
30185: GO 30243
// un := tmp [ rand ( 1 , tmp ) ] ;
30187: LD_ADDR_VAR 0 2
30191: PUSH
30192: LD_VAR 0 3
30196: PUSH
30197: LD_INT 1
30199: PPUSH
30200: LD_VAR 0 3
30204: PPUSH
30205: CALL_OW 12
30209: ARRAY
30210: ST_TO_ADDR
// if Crawls ( un ) then
30211: LD_VAR 0 2
30215: PPUSH
30216: CALL_OW 318
30220: IFFALSE 30231
// ComWalk ( un ) ;
30222: LD_VAR 0 2
30226: PPUSH
30227: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30231: LD_VAR 0 2
30235: PPUSH
30236: LD_INT 8
30238: PPUSH
30239: CALL_OW 336
// end ;
30243: PPOPN 3
30245: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30246: LD_EXP 55
30250: PUSH
30251: LD_EXP 99
30255: AND
30256: IFFALSE 30400
30258: GO 30260
30260: DISABLE
30261: LD_INT 0
30263: PPUSH
30264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30265: LD_ADDR_VAR 0 2
30269: PUSH
30270: LD_INT 22
30272: PUSH
30273: LD_OWVAR 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 21
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 34
30297: PUSH
30298: LD_INT 12
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 34
30307: PUSH
30308: LD_INT 51
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 34
30317: PUSH
30318: LD_INT 32
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: PPUSH
30336: CALL_OW 69
30340: ST_TO_ADDR
// if not tmp then
30341: LD_VAR 0 2
30345: NOT
30346: IFFALSE 30350
// exit ;
30348: GO 30400
// for i in tmp do
30350: LD_ADDR_VAR 0 1
30354: PUSH
30355: LD_VAR 0 2
30359: PUSH
30360: FOR_IN
30361: IFFALSE 30398
// if GetCargo ( i , mat_artifact ) = 0 then
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_INT 4
30370: PPUSH
30371: CALL_OW 289
30375: PUSH
30376: LD_INT 0
30378: EQUAL
30379: IFFALSE 30396
// SetCargo ( i , mat_siberit , 100 ) ;
30381: LD_VAR 0 1
30385: PPUSH
30386: LD_INT 3
30388: PPUSH
30389: LD_INT 100
30391: PPUSH
30392: CALL_OW 290
30396: GO 30360
30398: POP
30399: POP
// end ;
30400: PPOPN 2
30402: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30403: LD_EXP 55
30407: PUSH
30408: LD_EXP 100
30412: AND
30413: IFFALSE 30596
30415: GO 30417
30417: DISABLE
30418: LD_INT 0
30420: PPUSH
30421: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30422: LD_ADDR_VAR 0 2
30426: PUSH
30427: LD_INT 22
30429: PUSH
30430: LD_OWVAR 2
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PPUSH
30439: CALL_OW 69
30443: ST_TO_ADDR
// if not tmp then
30444: LD_VAR 0 2
30448: NOT
30449: IFFALSE 30453
// exit ;
30451: GO 30596
// for i := 1 to 2 do
30453: LD_ADDR_VAR 0 1
30457: PUSH
30458: DOUBLE
30459: LD_INT 1
30461: DEC
30462: ST_TO_ADDR
30463: LD_INT 2
30465: PUSH
30466: FOR_TO
30467: IFFALSE 30594
// begin uc_side := your_side ;
30469: LD_ADDR_OWVAR 20
30473: PUSH
30474: LD_OWVAR 2
30478: ST_TO_ADDR
// uc_nation := nation_american ;
30479: LD_ADDR_OWVAR 21
30483: PUSH
30484: LD_INT 1
30486: ST_TO_ADDR
// vc_chassis := us_morphling ;
30487: LD_ADDR_OWVAR 37
30491: PUSH
30492: LD_INT 5
30494: ST_TO_ADDR
// vc_engine := engine_siberite ;
30495: LD_ADDR_OWVAR 39
30499: PUSH
30500: LD_INT 3
30502: ST_TO_ADDR
// vc_control := control_computer ;
30503: LD_ADDR_OWVAR 38
30507: PUSH
30508: LD_INT 3
30510: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30511: LD_ADDR_OWVAR 40
30515: PUSH
30516: LD_INT 10
30518: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30519: LD_VAR 0 2
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PPUSH
30528: CALL_OW 310
30532: NOT
30533: IFFALSE 30580
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30535: CALL_OW 45
30539: PPUSH
30540: LD_VAR 0 2
30544: PUSH
30545: LD_INT 1
30547: ARRAY
30548: PPUSH
30549: CALL_OW 250
30553: PPUSH
30554: LD_VAR 0 2
30558: PUSH
30559: LD_INT 1
30561: ARRAY
30562: PPUSH
30563: CALL_OW 251
30567: PPUSH
30568: LD_INT 12
30570: PPUSH
30571: LD_INT 1
30573: PPUSH
30574: CALL_OW 50
30578: GO 30592
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30580: CALL_OW 45
30584: PPUSH
30585: LD_INT 1
30587: PPUSH
30588: CALL_OW 51
// end ;
30592: GO 30466
30594: POP
30595: POP
// end ;
30596: PPOPN 2
30598: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30599: LD_EXP 55
30603: PUSH
30604: LD_EXP 101
30608: AND
30609: IFFALSE 30831
30611: GO 30613
30613: DISABLE
30614: LD_INT 0
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30622: LD_ADDR_VAR 0 6
30626: PUSH
30627: LD_INT 22
30629: PUSH
30630: LD_OWVAR 2
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 21
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: PUSH
30652: LD_INT 23
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: PPUSH
30671: CALL_OW 69
30675: ST_TO_ADDR
// if not tmp then
30676: LD_VAR 0 6
30680: NOT
30681: IFFALSE 30685
// exit ;
30683: GO 30831
// s1 := rand ( 1 , 4 ) ;
30685: LD_ADDR_VAR 0 2
30689: PUSH
30690: LD_INT 1
30692: PPUSH
30693: LD_INT 4
30695: PPUSH
30696: CALL_OW 12
30700: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30701: LD_ADDR_VAR 0 4
30705: PUSH
30706: LD_VAR 0 6
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: LD_VAR 0 2
30719: PPUSH
30720: CALL_OW 259
30724: ST_TO_ADDR
// if s1 = 1 then
30725: LD_VAR 0 2
30729: PUSH
30730: LD_INT 1
30732: EQUAL
30733: IFFALSE 30753
// s2 := rand ( 2 , 4 ) else
30735: LD_ADDR_VAR 0 3
30739: PUSH
30740: LD_INT 2
30742: PPUSH
30743: LD_INT 4
30745: PPUSH
30746: CALL_OW 12
30750: ST_TO_ADDR
30751: GO 30761
// s2 := 1 ;
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_INT 1
30760: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30761: LD_ADDR_VAR 0 5
30765: PUSH
30766: LD_VAR 0 6
30770: PUSH
30771: LD_INT 1
30773: ARRAY
30774: PPUSH
30775: LD_VAR 0 3
30779: PPUSH
30780: CALL_OW 259
30784: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30785: LD_VAR 0 6
30789: PUSH
30790: LD_INT 1
30792: ARRAY
30793: PPUSH
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_VAR 0 5
30803: PPUSH
30804: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30808: LD_VAR 0 6
30812: PUSH
30813: LD_INT 1
30815: ARRAY
30816: PPUSH
30817: LD_VAR 0 3
30821: PPUSH
30822: LD_VAR 0 4
30826: PPUSH
30827: CALL_OW 237
// end ;
30831: PPOPN 6
30833: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30834: LD_EXP 55
30838: PUSH
30839: LD_EXP 102
30843: AND
30844: IFFALSE 30923
30846: GO 30848
30848: DISABLE
30849: LD_INT 0
30851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30852: LD_ADDR_VAR 0 1
30856: PUSH
30857: LD_INT 22
30859: PUSH
30860: LD_OWVAR 2
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 30
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PPUSH
30883: CALL_OW 69
30887: ST_TO_ADDR
// if not tmp then
30888: LD_VAR 0 1
30892: NOT
30893: IFFALSE 30897
// exit ;
30895: GO 30923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30897: LD_VAR 0 1
30901: PUSH
30902: LD_INT 1
30904: PPUSH
30905: LD_VAR 0 1
30909: PPUSH
30910: CALL_OW 12
30914: ARRAY
30915: PPUSH
30916: LD_INT 1
30918: PPUSH
30919: CALL_OW 234
// end ;
30923: PPOPN 1
30925: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30926: LD_EXP 55
30930: PUSH
30931: LD_EXP 103
30935: AND
30936: IFFALSE 31048
30938: GO 30940
30940: DISABLE
30941: LD_INT 0
30943: PPUSH
30944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30945: LD_ADDR_VAR 0 2
30949: PUSH
30950: LD_INT 22
30952: PUSH
30953: LD_OWVAR 2
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: LD_INT 30
30967: PUSH
30968: LD_INT 27
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 30
30977: PUSH
30978: LD_INT 26
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 30
30987: PUSH
30988: LD_INT 28
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PPUSH
31005: CALL_OW 69
31009: ST_TO_ADDR
// if not tmp then
31010: LD_VAR 0 2
31014: NOT
31015: IFFALSE 31019
// exit ;
31017: GO 31048
// for i in tmp do
31019: LD_ADDR_VAR 0 1
31023: PUSH
31024: LD_VAR 0 2
31028: PUSH
31029: FOR_IN
31030: IFFALSE 31046
// SetLives ( i , 1 ) ;
31032: LD_VAR 0 1
31036: PPUSH
31037: LD_INT 1
31039: PPUSH
31040: CALL_OW 234
31044: GO 31029
31046: POP
31047: POP
// end ;
31048: PPOPN 2
31050: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31051: LD_EXP 55
31055: PUSH
31056: LD_EXP 104
31060: AND
31061: IFFALSE 31348
31063: GO 31065
31065: DISABLE
31066: LD_INT 0
31068: PPUSH
31069: PPUSH
31070: PPUSH
// begin i := rand ( 1 , 7 ) ;
31071: LD_ADDR_VAR 0 1
31075: PUSH
31076: LD_INT 1
31078: PPUSH
31079: LD_INT 7
31081: PPUSH
31082: CALL_OW 12
31086: ST_TO_ADDR
// case i of 1 :
31087: LD_VAR 0 1
31091: PUSH
31092: LD_INT 1
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31110
31100: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31101: LD_STRING earthquake(getX(game), 0, 32)
31103: PPUSH
31104: CALL_OW 559
31108: GO 31348
31110: LD_INT 2
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31132
31118: POP
// begin ToLua ( displayStucuk(); ) ;
31119: LD_STRING displayStucuk();
31121: PPUSH
31122: CALL_OW 559
// ResetFog ;
31126: CALL_OW 335
// end ; 3 :
31130: GO 31348
31132: LD_INT 3
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31244
31140: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31141: LD_ADDR_VAR 0 2
31145: PUSH
31146: LD_INT 22
31148: PUSH
31149: LD_OWVAR 2
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 25
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PPUSH
31172: CALL_OW 69
31176: ST_TO_ADDR
// if not tmp then
31177: LD_VAR 0 2
31181: NOT
31182: IFFALSE 31186
// exit ;
31184: GO 31348
// un := tmp [ rand ( 1 , tmp ) ] ;
31186: LD_ADDR_VAR 0 3
31190: PUSH
31191: LD_VAR 0 2
31195: PUSH
31196: LD_INT 1
31198: PPUSH
31199: LD_VAR 0 2
31203: PPUSH
31204: CALL_OW 12
31208: ARRAY
31209: ST_TO_ADDR
// if Crawls ( un ) then
31210: LD_VAR 0 3
31214: PPUSH
31215: CALL_OW 318
31219: IFFALSE 31230
// ComWalk ( un ) ;
31221: LD_VAR 0 3
31225: PPUSH
31226: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31230: LD_VAR 0 3
31234: PPUSH
31235: LD_INT 8
31237: PPUSH
31238: CALL_OW 336
// end ; 4 :
31242: GO 31348
31244: LD_INT 4
31246: DOUBLE
31247: EQUAL
31248: IFTRUE 31252
31250: GO 31326
31252: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31253: LD_ADDR_VAR 0 2
31257: PUSH
31258: LD_INT 22
31260: PUSH
31261: LD_OWVAR 2
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 30
31272: PUSH
31273: LD_INT 29
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PPUSH
31284: CALL_OW 69
31288: ST_TO_ADDR
// if not tmp then
31289: LD_VAR 0 2
31293: NOT
31294: IFFALSE 31298
// exit ;
31296: GO 31348
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31298: LD_VAR 0 2
31302: PUSH
31303: LD_INT 1
31305: ARRAY
31306: PPUSH
31307: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31311: LD_VAR 0 2
31315: PUSH
31316: LD_INT 1
31318: ARRAY
31319: PPUSH
31320: CALL_OW 65
// end ; 5 .. 7 :
31324: GO 31348
31326: LD_INT 5
31328: DOUBLE
31329: GREATEREQUAL
31330: IFFALSE 31338
31332: LD_INT 7
31334: DOUBLE
31335: LESSEQUAL
31336: IFTRUE 31340
31338: GO 31347
31340: POP
// StreamSibBomb ; end ;
31341: CALL 27585 0 0
31345: GO 31348
31347: POP
// end ;
31348: PPOPN 3
31350: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31351: LD_EXP 55
31355: PUSH
31356: LD_EXP 105
31360: AND
31361: IFFALSE 31517
31363: GO 31365
31365: DISABLE
31366: LD_INT 0
31368: PPUSH
31369: PPUSH
31370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31371: LD_ADDR_VAR 0 2
31375: PUSH
31376: LD_INT 81
31378: PUSH
31379: LD_OWVAR 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 21
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 21
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PPUSH
31420: CALL_OW 69
31424: ST_TO_ADDR
// if not tmp then
31425: LD_VAR 0 2
31429: NOT
31430: IFFALSE 31434
// exit ;
31432: GO 31517
// p := 0 ;
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31442: LD_INT 35
31444: PPUSH
31445: CALL_OW 67
// p := p + 1 ;
31449: LD_ADDR_VAR 0 3
31453: PUSH
31454: LD_VAR 0 3
31458: PUSH
31459: LD_INT 1
31461: PLUS
31462: ST_TO_ADDR
// for i in tmp do
31463: LD_ADDR_VAR 0 1
31467: PUSH
31468: LD_VAR 0 2
31472: PUSH
31473: FOR_IN
31474: IFFALSE 31505
// if GetLives ( i ) < 1000 then
31476: LD_VAR 0 1
31480: PPUSH
31481: CALL_OW 256
31485: PUSH
31486: LD_INT 1000
31488: LESS
31489: IFFALSE 31503
// SetLives ( i , 1000 ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_INT 1000
31498: PPUSH
31499: CALL_OW 234
31503: GO 31473
31505: POP
31506: POP
// until p > 20 ;
31507: LD_VAR 0 3
31511: PUSH
31512: LD_INT 20
31514: GREATER
31515: IFFALSE 31442
// end ;
31517: PPOPN 3
31519: END
// every 0 0$1 trigger StreamModeActive and sTime do
31520: LD_EXP 55
31524: PUSH
31525: LD_EXP 106
31529: AND
31530: IFFALSE 31565
31532: GO 31534
31534: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31535: LD_INT 28
31537: PPUSH
31538: LD_OWVAR 2
31542: PPUSH
31543: LD_INT 2
31545: PPUSH
31546: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31550: LD_INT 30
31552: PPUSH
31553: LD_OWVAR 2
31557: PPUSH
31558: LD_INT 2
31560: PPUSH
31561: CALL_OW 322
// end ;
31565: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31566: LD_EXP 55
31570: PUSH
31571: LD_EXP 107
31575: AND
31576: IFFALSE 31697
31578: GO 31580
31580: DISABLE
31581: LD_INT 0
31583: PPUSH
31584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31585: LD_ADDR_VAR 0 2
31589: PUSH
31590: LD_INT 22
31592: PUSH
31593: LD_OWVAR 2
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 21
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 23
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: PPUSH
31634: CALL_OW 69
31638: ST_TO_ADDR
// if not tmp then
31639: LD_VAR 0 2
31643: NOT
31644: IFFALSE 31648
// exit ;
31646: GO 31697
// for i in tmp do
31648: LD_ADDR_VAR 0 1
31652: PUSH
31653: LD_VAR 0 2
31657: PUSH
31658: FOR_IN
31659: IFFALSE 31695
// begin if Crawls ( i ) then
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL_OW 318
31670: IFFALSE 31681
// ComWalk ( i ) ;
31672: LD_VAR 0 1
31676: PPUSH
31677: CALL_OW 138
// SetClass ( i , 2 ) ;
31681: LD_VAR 0 1
31685: PPUSH
31686: LD_INT 2
31688: PPUSH
31689: CALL_OW 336
// end ;
31693: GO 31658
31695: POP
31696: POP
// end ;
31697: PPOPN 2
31699: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31700: LD_EXP 55
31704: PUSH
31705: LD_EXP 108
31709: AND
31710: IFFALSE 31998
31712: GO 31714
31714: DISABLE
31715: LD_INT 0
31717: PPUSH
31718: PPUSH
31719: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31720: LD_OWVAR 2
31724: PPUSH
31725: LD_INT 9
31727: PPUSH
31728: LD_INT 1
31730: PPUSH
31731: LD_INT 1
31733: PPUSH
31734: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31738: LD_INT 9
31740: PPUSH
31741: LD_OWVAR 2
31745: PPUSH
31746: CALL_OW 343
// uc_side := 9 ;
31750: LD_ADDR_OWVAR 20
31754: PUSH
31755: LD_INT 9
31757: ST_TO_ADDR
// uc_nation := 2 ;
31758: LD_ADDR_OWVAR 21
31762: PUSH
31763: LD_INT 2
31765: ST_TO_ADDR
// hc_name := Dark Warrior ;
31766: LD_ADDR_OWVAR 26
31770: PUSH
31771: LD_STRING Dark Warrior
31773: ST_TO_ADDR
// hc_gallery :=  ;
31774: LD_ADDR_OWVAR 33
31778: PUSH
31779: LD_STRING 
31781: ST_TO_ADDR
// hc_noskilllimit := true ;
31782: LD_ADDR_OWVAR 76
31786: PUSH
31787: LD_INT 1
31789: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31790: LD_ADDR_OWVAR 31
31794: PUSH
31795: LD_INT 30
31797: PUSH
31798: LD_INT 30
31800: PUSH
31801: LD_INT 30
31803: PUSH
31804: LD_INT 30
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: ST_TO_ADDR
// un := CreateHuman ;
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: CALL_OW 44
31822: ST_TO_ADDR
// hc_noskilllimit := false ;
31823: LD_ADDR_OWVAR 76
31827: PUSH
31828: LD_INT 0
31830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31831: LD_VAR 0 3
31835: PPUSH
31836: LD_INT 1
31838: PPUSH
31839: CALL_OW 51
// ToLua ( playRanger() ) ;
31843: LD_STRING playRanger()
31845: PPUSH
31846: CALL_OW 559
// p := 0 ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_INT 0
31857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31858: LD_INT 35
31860: PPUSH
31861: CALL_OW 67
// p := p + 1 ;
31865: LD_ADDR_VAR 0 2
31869: PUSH
31870: LD_VAR 0 2
31874: PUSH
31875: LD_INT 1
31877: PLUS
31878: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31879: LD_VAR 0 3
31883: PPUSH
31884: CALL_OW 256
31888: PUSH
31889: LD_INT 1000
31891: LESS
31892: IFFALSE 31906
// SetLives ( un , 1000 ) ;
31894: LD_VAR 0 3
31898: PPUSH
31899: LD_INT 1000
31901: PPUSH
31902: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31906: LD_VAR 0 3
31910: PPUSH
31911: LD_INT 81
31913: PUSH
31914: LD_OWVAR 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 91
31925: PUSH
31926: LD_VAR 0 3
31930: PUSH
31931: LD_INT 30
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PPUSH
31943: CALL_OW 69
31947: PPUSH
31948: LD_VAR 0 3
31952: PPUSH
31953: CALL_OW 74
31957: PPUSH
31958: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31962: LD_VAR 0 2
31966: PUSH
31967: LD_INT 80
31969: GREATER
31970: PUSH
31971: LD_VAR 0 3
31975: PPUSH
31976: CALL_OW 301
31980: OR
31981: IFFALSE 31858
// if un then
31983: LD_VAR 0 3
31987: IFFALSE 31998
// RemoveUnit ( un ) ;
31989: LD_VAR 0 3
31993: PPUSH
31994: CALL_OW 64
// end ;
31998: PPOPN 3
32000: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32001: LD_EXP 109
32005: IFFALSE 32121
32007: GO 32009
32009: DISABLE
32010: LD_INT 0
32012: PPUSH
32013: PPUSH
32014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32015: LD_ADDR_VAR 0 2
32019: PUSH
32020: LD_INT 81
32022: PUSH
32023: LD_OWVAR 2
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 21
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PPUSH
32046: CALL_OW 69
32050: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32051: LD_STRING playComputer()
32053: PPUSH
32054: CALL_OW 559
// if not tmp then
32058: LD_VAR 0 2
32062: NOT
32063: IFFALSE 32067
// exit ;
32065: GO 32121
// for i in tmp do
32067: LD_ADDR_VAR 0 1
32071: PUSH
32072: LD_VAR 0 2
32076: PUSH
32077: FOR_IN
32078: IFFALSE 32119
// for j := 1 to 4 do
32080: LD_ADDR_VAR 0 3
32084: PUSH
32085: DOUBLE
32086: LD_INT 1
32088: DEC
32089: ST_TO_ADDR
32090: LD_INT 4
32092: PUSH
32093: FOR_TO
32094: IFFALSE 32115
// SetSkill ( i , j , 10 ) ;
32096: LD_VAR 0 1
32100: PPUSH
32101: LD_VAR 0 3
32105: PPUSH
32106: LD_INT 10
32108: PPUSH
32109: CALL_OW 237
32113: GO 32093
32115: POP
32116: POP
32117: GO 32077
32119: POP
32120: POP
// end ;
32121: PPOPN 3
32123: END
// every 0 0$1 trigger s30 do var i , tmp ;
32124: LD_EXP 110
32128: IFFALSE 32197
32130: GO 32132
32132: DISABLE
32133: LD_INT 0
32135: PPUSH
32136: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32137: LD_ADDR_VAR 0 2
32141: PUSH
32142: LD_INT 22
32144: PUSH
32145: LD_OWVAR 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PPUSH
32154: CALL_OW 69
32158: ST_TO_ADDR
// if not tmp then
32159: LD_VAR 0 2
32163: NOT
32164: IFFALSE 32168
// exit ;
32166: GO 32197
// for i in tmp do
32168: LD_ADDR_VAR 0 1
32172: PUSH
32173: LD_VAR 0 2
32177: PUSH
32178: FOR_IN
32179: IFFALSE 32195
// SetLives ( i , 300 ) ;
32181: LD_VAR 0 1
32185: PPUSH
32186: LD_INT 300
32188: PPUSH
32189: CALL_OW 234
32193: GO 32178
32195: POP
32196: POP
// end ;
32197: PPOPN 2
32199: END
// every 0 0$1 trigger s60 do var i , tmp ;
32200: LD_EXP 111
32204: IFFALSE 32273
32206: GO 32208
32208: DISABLE
32209: LD_INT 0
32211: PPUSH
32212: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32213: LD_ADDR_VAR 0 2
32217: PUSH
32218: LD_INT 22
32220: PUSH
32221: LD_OWVAR 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PPUSH
32230: CALL_OW 69
32234: ST_TO_ADDR
// if not tmp then
32235: LD_VAR 0 2
32239: NOT
32240: IFFALSE 32244
// exit ;
32242: GO 32273
// for i in tmp do
32244: LD_ADDR_VAR 0 1
32248: PUSH
32249: LD_VAR 0 2
32253: PUSH
32254: FOR_IN
32255: IFFALSE 32271
// SetLives ( i , 600 ) ;
32257: LD_VAR 0 1
32261: PPUSH
32262: LD_INT 600
32264: PPUSH
32265: CALL_OW 234
32269: GO 32254
32271: POP
32272: POP
// end ;
32273: PPOPN 2
32275: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32276: LD_INT 0
32278: PPUSH
// case cmd of 301 :
32279: LD_VAR 0 1
32283: PUSH
32284: LD_INT 301
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32324
32292: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32293: LD_VAR 0 6
32297: PPUSH
32298: LD_VAR 0 7
32302: PPUSH
32303: LD_VAR 0 8
32307: PPUSH
32308: LD_VAR 0 4
32312: PPUSH
32313: LD_VAR 0 5
32317: PPUSH
32318: CALL 33533 0 5
32322: GO 32445
32324: LD_INT 302
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32369
32332: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32333: LD_VAR 0 6
32337: PPUSH
32338: LD_VAR 0 7
32342: PPUSH
32343: LD_VAR 0 8
32347: PPUSH
32348: LD_VAR 0 9
32352: PPUSH
32353: LD_VAR 0 4
32357: PPUSH
32358: LD_VAR 0 5
32362: PPUSH
32363: CALL 33624 0 6
32367: GO 32445
32369: LD_INT 303
32371: DOUBLE
32372: EQUAL
32373: IFTRUE 32377
32375: GO 32414
32377: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32378: LD_VAR 0 6
32382: PPUSH
32383: LD_VAR 0 7
32387: PPUSH
32388: LD_VAR 0 8
32392: PPUSH
32393: LD_VAR 0 9
32397: PPUSH
32398: LD_VAR 0 4
32402: PPUSH
32403: LD_VAR 0 5
32407: PPUSH
32408: CALL 32450 0 6
32412: GO 32445
32414: LD_INT 304
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32444
32422: POP
// hHackTeleport ( unit , x , y ) ; end ;
32423: LD_VAR 0 2
32427: PPUSH
32428: LD_VAR 0 4
32432: PPUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: CALL 34217 0 3
32442: GO 32445
32444: POP
// end ;
32445: LD_VAR 0 12
32449: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32450: LD_INT 0
32452: PPUSH
32453: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32454: LD_VAR 0 1
32458: PUSH
32459: LD_INT 1
32461: LESS
32462: PUSH
32463: LD_VAR 0 1
32467: PUSH
32468: LD_INT 3
32470: GREATER
32471: OR
32472: PUSH
32473: LD_VAR 0 5
32477: PPUSH
32478: LD_VAR 0 6
32482: PPUSH
32483: CALL_OW 428
32487: OR
32488: IFFALSE 32492
// exit ;
32490: GO 33220
// uc_side := your_side ;
32492: LD_ADDR_OWVAR 20
32496: PUSH
32497: LD_OWVAR 2
32501: ST_TO_ADDR
// uc_nation := nation ;
32502: LD_ADDR_OWVAR 21
32506: PUSH
32507: LD_VAR 0 1
32511: ST_TO_ADDR
// bc_level = 1 ;
32512: LD_ADDR_OWVAR 43
32516: PUSH
32517: LD_INT 1
32519: ST_TO_ADDR
// case btype of 1 :
32520: LD_VAR 0 2
32524: PUSH
32525: LD_INT 1
32527: DOUBLE
32528: EQUAL
32529: IFTRUE 32533
32531: GO 32544
32533: POP
// bc_type := b_depot ; 2 :
32534: LD_ADDR_OWVAR 42
32538: PUSH
32539: LD_INT 0
32541: ST_TO_ADDR
32542: GO 33164
32544: LD_INT 2
32546: DOUBLE
32547: EQUAL
32548: IFTRUE 32552
32550: GO 32563
32552: POP
// bc_type := b_warehouse ; 3 :
32553: LD_ADDR_OWVAR 42
32557: PUSH
32558: LD_INT 1
32560: ST_TO_ADDR
32561: GO 33164
32563: LD_INT 3
32565: DOUBLE
32566: EQUAL
32567: IFTRUE 32571
32569: GO 32582
32571: POP
// bc_type := b_lab ; 4 .. 9 :
32572: LD_ADDR_OWVAR 42
32576: PUSH
32577: LD_INT 6
32579: ST_TO_ADDR
32580: GO 33164
32582: LD_INT 4
32584: DOUBLE
32585: GREATEREQUAL
32586: IFFALSE 32594
32588: LD_INT 9
32590: DOUBLE
32591: LESSEQUAL
32592: IFTRUE 32596
32594: GO 32656
32596: POP
// begin bc_type := b_lab_half ;
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 7
32604: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32605: LD_ADDR_OWVAR 44
32609: PUSH
32610: LD_INT 10
32612: PUSH
32613: LD_INT 11
32615: PUSH
32616: LD_INT 12
32618: PUSH
32619: LD_INT 15
32621: PUSH
32622: LD_INT 14
32624: PUSH
32625: LD_INT 13
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: PUSH
32636: LD_VAR 0 2
32640: PUSH
32641: LD_INT 3
32643: MINUS
32644: ARRAY
32645: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32646: LD_ADDR_OWVAR 45
32650: PUSH
32651: LD_INT 9
32653: ST_TO_ADDR
// end ; 10 .. 13 :
32654: GO 33164
32656: LD_INT 10
32658: DOUBLE
32659: GREATEREQUAL
32660: IFFALSE 32668
32662: LD_INT 13
32664: DOUBLE
32665: LESSEQUAL
32666: IFTRUE 32670
32668: GO 32747
32670: POP
// begin bc_type := b_lab_full ;
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 8
32678: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32679: LD_ADDR_OWVAR 44
32683: PUSH
32684: LD_INT 10
32686: PUSH
32687: LD_INT 12
32689: PUSH
32690: LD_INT 14
32692: PUSH
32693: LD_INT 13
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: PUSH
32702: LD_VAR 0 2
32706: PUSH
32707: LD_INT 9
32709: MINUS
32710: ARRAY
32711: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32712: LD_ADDR_OWVAR 45
32716: PUSH
32717: LD_INT 11
32719: PUSH
32720: LD_INT 15
32722: PUSH
32723: LD_INT 12
32725: PUSH
32726: LD_INT 15
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: LD_VAR 0 2
32739: PUSH
32740: LD_INT 9
32742: MINUS
32743: ARRAY
32744: ST_TO_ADDR
// end ; 14 :
32745: GO 33164
32747: LD_INT 14
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32766
32755: POP
// bc_type := b_workshop ; 15 :
32756: LD_ADDR_OWVAR 42
32760: PUSH
32761: LD_INT 2
32763: ST_TO_ADDR
32764: GO 33164
32766: LD_INT 15
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32785
32774: POP
// bc_type := b_factory ; 16 :
32775: LD_ADDR_OWVAR 42
32779: PUSH
32780: LD_INT 3
32782: ST_TO_ADDR
32783: GO 33164
32785: LD_INT 16
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32793
32791: GO 32804
32793: POP
// bc_type := b_ext_gun ; 17 :
32794: LD_ADDR_OWVAR 42
32798: PUSH
32799: LD_INT 17
32801: ST_TO_ADDR
32802: GO 33164
32804: LD_INT 17
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32840
32812: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32813: LD_ADDR_OWVAR 42
32817: PUSH
32818: LD_INT 19
32820: PUSH
32821: LD_INT 23
32823: PUSH
32824: LD_INT 19
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: PUSH
32832: LD_VAR 0 1
32836: ARRAY
32837: ST_TO_ADDR
32838: GO 33164
32840: LD_INT 18
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32859
32848: POP
// bc_type := b_ext_radar ; 19 :
32849: LD_ADDR_OWVAR 42
32853: PUSH
32854: LD_INT 20
32856: ST_TO_ADDR
32857: GO 33164
32859: LD_INT 19
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32878
32867: POP
// bc_type := b_ext_radio ; 20 :
32868: LD_ADDR_OWVAR 42
32872: PUSH
32873: LD_INT 22
32875: ST_TO_ADDR
32876: GO 33164
32878: LD_INT 20
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32897
32886: POP
// bc_type := b_ext_siberium ; 21 :
32887: LD_ADDR_OWVAR 42
32891: PUSH
32892: LD_INT 21
32894: ST_TO_ADDR
32895: GO 33164
32897: LD_INT 21
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32916
32905: POP
// bc_type := b_ext_computer ; 22 :
32906: LD_ADDR_OWVAR 42
32910: PUSH
32911: LD_INT 24
32913: ST_TO_ADDR
32914: GO 33164
32916: LD_INT 22
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32935
32924: POP
// bc_type := b_ext_track ; 23 :
32925: LD_ADDR_OWVAR 42
32929: PUSH
32930: LD_INT 16
32932: ST_TO_ADDR
32933: GO 33164
32935: LD_INT 23
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32954
32943: POP
// bc_type := b_ext_laser ; 24 :
32944: LD_ADDR_OWVAR 42
32948: PUSH
32949: LD_INT 25
32951: ST_TO_ADDR
32952: GO 33164
32954: LD_INT 24
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32973
32962: POP
// bc_type := b_control_tower ; 25 :
32963: LD_ADDR_OWVAR 42
32967: PUSH
32968: LD_INT 36
32970: ST_TO_ADDR
32971: GO 33164
32973: LD_INT 25
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 32992
32981: POP
// bc_type := b_breastwork ; 26 :
32982: LD_ADDR_OWVAR 42
32986: PUSH
32987: LD_INT 31
32989: ST_TO_ADDR
32990: GO 33164
32992: LD_INT 26
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33011
33000: POP
// bc_type := b_bunker ; 27 :
33001: LD_ADDR_OWVAR 42
33005: PUSH
33006: LD_INT 32
33008: ST_TO_ADDR
33009: GO 33164
33011: LD_INT 27
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33030
33019: POP
// bc_type := b_turret ; 28 :
33020: LD_ADDR_OWVAR 42
33024: PUSH
33025: LD_INT 33
33027: ST_TO_ADDR
33028: GO 33164
33030: LD_INT 28
33032: DOUBLE
33033: EQUAL
33034: IFTRUE 33038
33036: GO 33049
33038: POP
// bc_type := b_armoury ; 29 :
33039: LD_ADDR_OWVAR 42
33043: PUSH
33044: LD_INT 4
33046: ST_TO_ADDR
33047: GO 33164
33049: LD_INT 29
33051: DOUBLE
33052: EQUAL
33053: IFTRUE 33057
33055: GO 33068
33057: POP
// bc_type := b_barracks ; 30 :
33058: LD_ADDR_OWVAR 42
33062: PUSH
33063: LD_INT 5
33065: ST_TO_ADDR
33066: GO 33164
33068: LD_INT 30
33070: DOUBLE
33071: EQUAL
33072: IFTRUE 33076
33074: GO 33087
33076: POP
// bc_type := b_solar_power ; 31 :
33077: LD_ADDR_OWVAR 42
33081: PUSH
33082: LD_INT 27
33084: ST_TO_ADDR
33085: GO 33164
33087: LD_INT 31
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33095
33093: GO 33106
33095: POP
// bc_type := b_oil_power ; 32 :
33096: LD_ADDR_OWVAR 42
33100: PUSH
33101: LD_INT 26
33103: ST_TO_ADDR
33104: GO 33164
33106: LD_INT 32
33108: DOUBLE
33109: EQUAL
33110: IFTRUE 33114
33112: GO 33125
33114: POP
// bc_type := b_siberite_power ; 33 :
33115: LD_ADDR_OWVAR 42
33119: PUSH
33120: LD_INT 28
33122: ST_TO_ADDR
33123: GO 33164
33125: LD_INT 33
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33133
33131: GO 33144
33133: POP
// bc_type := b_oil_mine ; 34 :
33134: LD_ADDR_OWVAR 42
33138: PUSH
33139: LD_INT 29
33141: ST_TO_ADDR
33142: GO 33164
33144: LD_INT 34
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33152
33150: GO 33163
33152: POP
// bc_type := b_siberite_mine ; end ;
33153: LD_ADDR_OWVAR 42
33157: PUSH
33158: LD_INT 30
33160: ST_TO_ADDR
33161: GO 33164
33163: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33164: LD_ADDR_VAR 0 8
33168: PUSH
33169: LD_VAR 0 5
33173: PPUSH
33174: LD_VAR 0 6
33178: PPUSH
33179: LD_VAR 0 3
33183: PPUSH
33184: CALL_OW 47
33188: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33189: LD_OWVAR 42
33193: PUSH
33194: LD_INT 32
33196: PUSH
33197: LD_INT 33
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: IN
33204: IFFALSE 33220
// PlaceWeaponTurret ( b , weapon ) ;
33206: LD_VAR 0 8
33210: PPUSH
33211: LD_VAR 0 4
33215: PPUSH
33216: CALL_OW 431
// end ;
33220: LD_VAR 0 7
33224: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33225: LD_INT 0
33227: PPUSH
33228: PPUSH
33229: PPUSH
33230: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33231: LD_ADDR_VAR 0 4
33235: PUSH
33236: LD_INT 22
33238: PUSH
33239: LD_OWVAR 2
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: LD_INT 30
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 30
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PPUSH
33280: CALL_OW 69
33284: ST_TO_ADDR
// if not tmp then
33285: LD_VAR 0 4
33289: NOT
33290: IFFALSE 33294
// exit ;
33292: GO 33353
// for i in tmp do
33294: LD_ADDR_VAR 0 2
33298: PUSH
33299: LD_VAR 0 4
33303: PUSH
33304: FOR_IN
33305: IFFALSE 33351
// for j = 1 to 3 do
33307: LD_ADDR_VAR 0 3
33311: PUSH
33312: DOUBLE
33313: LD_INT 1
33315: DEC
33316: ST_TO_ADDR
33317: LD_INT 3
33319: PUSH
33320: FOR_TO
33321: IFFALSE 33347
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33323: LD_VAR 0 2
33327: PPUSH
33328: CALL_OW 274
33332: PPUSH
33333: LD_VAR 0 3
33337: PPUSH
33338: LD_INT 99999
33340: PPUSH
33341: CALL_OW 277
33345: GO 33320
33347: POP
33348: POP
33349: GO 33304
33351: POP
33352: POP
// end ;
33353: LD_VAR 0 1
33357: RET
// export function hHackSetLevel10 ; var i , j ; begin
33358: LD_INT 0
33360: PPUSH
33361: PPUSH
33362: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33363: LD_ADDR_VAR 0 2
33367: PUSH
33368: LD_INT 21
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PPUSH
33378: CALL_OW 69
33382: PUSH
33383: FOR_IN
33384: IFFALSE 33436
// if IsSelected ( i ) then
33386: LD_VAR 0 2
33390: PPUSH
33391: CALL_OW 306
33395: IFFALSE 33434
// begin for j := 1 to 4 do
33397: LD_ADDR_VAR 0 3
33401: PUSH
33402: DOUBLE
33403: LD_INT 1
33405: DEC
33406: ST_TO_ADDR
33407: LD_INT 4
33409: PUSH
33410: FOR_TO
33411: IFFALSE 33432
// SetSkill ( i , j , 10 ) ;
33413: LD_VAR 0 2
33417: PPUSH
33418: LD_VAR 0 3
33422: PPUSH
33423: LD_INT 10
33425: PPUSH
33426: CALL_OW 237
33430: GO 33410
33432: POP
33433: POP
// end ;
33434: GO 33383
33436: POP
33437: POP
// end ;
33438: LD_VAR 0 1
33442: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33443: LD_INT 0
33445: PPUSH
33446: PPUSH
33447: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33448: LD_ADDR_VAR 0 2
33452: PUSH
33453: LD_INT 22
33455: PUSH
33456: LD_OWVAR 2
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 21
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PPUSH
33479: CALL_OW 69
33483: PUSH
33484: FOR_IN
33485: IFFALSE 33526
// begin for j := 1 to 4 do
33487: LD_ADDR_VAR 0 3
33491: PUSH
33492: DOUBLE
33493: LD_INT 1
33495: DEC
33496: ST_TO_ADDR
33497: LD_INT 4
33499: PUSH
33500: FOR_TO
33501: IFFALSE 33522
// SetSkill ( i , j , 10 ) ;
33503: LD_VAR 0 2
33507: PPUSH
33508: LD_VAR 0 3
33512: PPUSH
33513: LD_INT 10
33515: PPUSH
33516: CALL_OW 237
33520: GO 33500
33522: POP
33523: POP
// end ;
33524: GO 33484
33526: POP
33527: POP
// end ;
33528: LD_VAR 0 1
33532: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33533: LD_INT 0
33535: PPUSH
// uc_side := your_side ;
33536: LD_ADDR_OWVAR 20
33540: PUSH
33541: LD_OWVAR 2
33545: ST_TO_ADDR
// uc_nation := nation ;
33546: LD_ADDR_OWVAR 21
33550: PUSH
33551: LD_VAR 0 1
33555: ST_TO_ADDR
// InitHc ;
33556: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33560: LD_INT 0
33562: PPUSH
33563: LD_VAR 0 2
33567: PPUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33577: LD_VAR 0 4
33581: PPUSH
33582: LD_VAR 0 5
33586: PPUSH
33587: CALL_OW 428
33591: PUSH
33592: LD_INT 0
33594: EQUAL
33595: IFFALSE 33619
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33597: CALL_OW 44
33601: PPUSH
33602: LD_VAR 0 4
33606: PPUSH
33607: LD_VAR 0 5
33611: PPUSH
33612: LD_INT 1
33614: PPUSH
33615: CALL_OW 48
// end ;
33619: LD_VAR 0 6
33623: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33624: LD_INT 0
33626: PPUSH
33627: PPUSH
// uc_side := your_side ;
33628: LD_ADDR_OWVAR 20
33632: PUSH
33633: LD_OWVAR 2
33637: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33638: LD_VAR 0 1
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 3
33651: PUSH
33652: LD_INT 4
33654: PUSH
33655: LD_INT 5
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: IN
33665: IFFALSE 33677
// uc_nation := nation_american else
33667: LD_ADDR_OWVAR 21
33671: PUSH
33672: LD_INT 1
33674: ST_TO_ADDR
33675: GO 33720
// if chassis in [ 11 , 12 , 13 , 14 ] then
33677: LD_VAR 0 1
33681: PUSH
33682: LD_INT 11
33684: PUSH
33685: LD_INT 12
33687: PUSH
33688: LD_INT 13
33690: PUSH
33691: LD_INT 14
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: IN
33700: IFFALSE 33712
// uc_nation := nation_arabian else
33702: LD_ADDR_OWVAR 21
33706: PUSH
33707: LD_INT 2
33709: ST_TO_ADDR
33710: GO 33720
// uc_nation := nation_russian ;
33712: LD_ADDR_OWVAR 21
33716: PUSH
33717: LD_INT 3
33719: ST_TO_ADDR
// vc_chassis := chassis ;
33720: LD_ADDR_OWVAR 37
33724: PUSH
33725: LD_VAR 0 1
33729: ST_TO_ADDR
// vc_engine := engine ;
33730: LD_ADDR_OWVAR 39
33734: PUSH
33735: LD_VAR 0 2
33739: ST_TO_ADDR
// vc_control := control ;
33740: LD_ADDR_OWVAR 38
33744: PUSH
33745: LD_VAR 0 3
33749: ST_TO_ADDR
// vc_weapon := weapon ;
33750: LD_ADDR_OWVAR 40
33754: PUSH
33755: LD_VAR 0 4
33759: ST_TO_ADDR
// un := CreateVehicle ;
33760: LD_ADDR_VAR 0 8
33764: PUSH
33765: CALL_OW 45
33769: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33770: LD_VAR 0 8
33774: PPUSH
33775: LD_INT 0
33777: PPUSH
33778: LD_INT 5
33780: PPUSH
33781: CALL_OW 12
33785: PPUSH
33786: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33790: LD_VAR 0 8
33794: PPUSH
33795: LD_VAR 0 5
33799: PPUSH
33800: LD_VAR 0 6
33804: PPUSH
33805: LD_INT 1
33807: PPUSH
33808: CALL_OW 48
// end ;
33812: LD_VAR 0 7
33816: RET
// export hInvincible ; every 1 do
33817: GO 33819
33819: DISABLE
// hInvincible := [ ] ;
33820: LD_ADDR_EXP 112
33824: PUSH
33825: EMPTY
33826: ST_TO_ADDR
33827: END
// every 10 do var i ;
33828: GO 33830
33830: DISABLE
33831: LD_INT 0
33833: PPUSH
// begin enable ;
33834: ENABLE
// if not hInvincible then
33835: LD_EXP 112
33839: NOT
33840: IFFALSE 33844
// exit ;
33842: GO 33888
// for i in hInvincible do
33844: LD_ADDR_VAR 0 1
33848: PUSH
33849: LD_EXP 112
33853: PUSH
33854: FOR_IN
33855: IFFALSE 33886
// if GetLives ( i ) < 1000 then
33857: LD_VAR 0 1
33861: PPUSH
33862: CALL_OW 256
33866: PUSH
33867: LD_INT 1000
33869: LESS
33870: IFFALSE 33884
// SetLives ( i , 1000 ) ;
33872: LD_VAR 0 1
33876: PPUSH
33877: LD_INT 1000
33879: PPUSH
33880: CALL_OW 234
33884: GO 33854
33886: POP
33887: POP
// end ;
33888: PPOPN 1
33890: END
// export function hHackInvincible ; var i ; begin
33891: LD_INT 0
33893: PPUSH
33894: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33895: LD_ADDR_VAR 0 2
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: LD_INT 21
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 21
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: PPUSH
33928: CALL_OW 69
33932: PUSH
33933: FOR_IN
33934: IFFALSE 33995
// if IsSelected ( i ) then
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL_OW 306
33945: IFFALSE 33993
// begin if i in hInvincible then
33947: LD_VAR 0 2
33951: PUSH
33952: LD_EXP 112
33956: IN
33957: IFFALSE 33977
// hInvincible := hInvincible diff i else
33959: LD_ADDR_EXP 112
33963: PUSH
33964: LD_EXP 112
33968: PUSH
33969: LD_VAR 0 2
33973: DIFF
33974: ST_TO_ADDR
33975: GO 33993
// hInvincible := hInvincible union i ;
33977: LD_ADDR_EXP 112
33981: PUSH
33982: LD_EXP 112
33986: PUSH
33987: LD_VAR 0 2
33991: UNION
33992: ST_TO_ADDR
// end ;
33993: GO 33933
33995: POP
33996: POP
// end ;
33997: LD_VAR 0 1
34001: RET
// export function hHackInvisible ; var i , j ; begin
34002: LD_INT 0
34004: PPUSH
34005: PPUSH
34006: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34007: LD_ADDR_VAR 0 2
34011: PUSH
34012: LD_INT 21
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PPUSH
34022: CALL_OW 69
34026: PUSH
34027: FOR_IN
34028: IFFALSE 34052
// if IsSelected ( i ) then
34030: LD_VAR 0 2
34034: PPUSH
34035: CALL_OW 306
34039: IFFALSE 34050
// ComForceInvisible ( i ) ;
34041: LD_VAR 0 2
34045: PPUSH
34046: CALL_OW 496
34050: GO 34027
34052: POP
34053: POP
// end ;
34054: LD_VAR 0 1
34058: RET
// export function hHackChangeYourSide ; begin
34059: LD_INT 0
34061: PPUSH
// if your_side = 8 then
34062: LD_OWVAR 2
34066: PUSH
34067: LD_INT 8
34069: EQUAL
34070: IFFALSE 34082
// your_side := 0 else
34072: LD_ADDR_OWVAR 2
34076: PUSH
34077: LD_INT 0
34079: ST_TO_ADDR
34080: GO 34096
// your_side := your_side + 1 ;
34082: LD_ADDR_OWVAR 2
34086: PUSH
34087: LD_OWVAR 2
34091: PUSH
34092: LD_INT 1
34094: PLUS
34095: ST_TO_ADDR
// end ;
34096: LD_VAR 0 1
34100: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34101: LD_INT 0
34103: PPUSH
34104: PPUSH
34105: PPUSH
// for i in all_units do
34106: LD_ADDR_VAR 0 2
34110: PUSH
34111: LD_OWVAR 3
34115: PUSH
34116: FOR_IN
34117: IFFALSE 34195
// if IsSelected ( i ) then
34119: LD_VAR 0 2
34123: PPUSH
34124: CALL_OW 306
34128: IFFALSE 34193
// begin j := GetSide ( i ) ;
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_VAR 0 2
34139: PPUSH
34140: CALL_OW 255
34144: ST_TO_ADDR
// if j = 8 then
34145: LD_VAR 0 3
34149: PUSH
34150: LD_INT 8
34152: EQUAL
34153: IFFALSE 34165
// j := 0 else
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 0
34162: ST_TO_ADDR
34163: GO 34179
// j := j + 1 ;
34165: LD_ADDR_VAR 0 3
34169: PUSH
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 1
34177: PLUS
34178: ST_TO_ADDR
// SetSide ( i , j ) ;
34179: LD_VAR 0 2
34183: PPUSH
34184: LD_VAR 0 3
34188: PPUSH
34189: CALL_OW 235
// end ;
34193: GO 34116
34195: POP
34196: POP
// end ;
34197: LD_VAR 0 1
34201: RET
// export function hHackFog ; begin
34202: LD_INT 0
34204: PPUSH
// FogOff ( true ) ;
34205: LD_INT 1
34207: PPUSH
34208: CALL_OW 344
// end ;
34212: LD_VAR 0 1
34216: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34217: LD_INT 0
34219: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34220: LD_VAR 0 1
34224: PPUSH
34225: LD_VAR 0 2
34229: PPUSH
34230: LD_VAR 0 3
34234: PPUSH
34235: LD_INT 1
34237: PPUSH
34238: LD_INT 1
34240: PPUSH
34241: CALL_OW 483
// CenterOnXY ( x , y ) ;
34245: LD_VAR 0 2
34249: PPUSH
34250: LD_VAR 0 3
34254: PPUSH
34255: CALL_OW 84
// end ;
34259: LD_VAR 0 4
34263: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34268: LD_VAR 0 1
34272: NOT
34273: PUSH
34274: LD_VAR 0 2
34278: PPUSH
34279: LD_VAR 0 3
34283: PPUSH
34284: CALL_OW 488
34288: NOT
34289: OR
34290: PUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL_OW 266
34300: PUSH
34301: LD_INT 3
34303: NONEQUAL
34304: PUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL_OW 247
34314: PUSH
34315: LD_INT 1
34317: EQUAL
34318: NOT
34319: AND
34320: OR
34321: IFFALSE 34325
// exit ;
34323: GO 34474
// if GetType ( factory ) = unit_human then
34325: LD_VAR 0 1
34329: PPUSH
34330: CALL_OW 247
34334: PUSH
34335: LD_INT 1
34337: EQUAL
34338: IFFALSE 34355
// factory := IsInUnit ( factory ) ;
34340: LD_ADDR_VAR 0 1
34344: PUSH
34345: LD_VAR 0 1
34349: PPUSH
34350: CALL_OW 310
34354: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 266
34364: PUSH
34365: LD_INT 3
34367: NONEQUAL
34368: IFFALSE 34372
// exit ;
34370: GO 34474
// if HexInfo ( x , y ) = factory then
34372: LD_VAR 0 2
34376: PPUSH
34377: LD_VAR 0 3
34381: PPUSH
34382: CALL_OW 428
34386: PUSH
34387: LD_VAR 0 1
34391: EQUAL
34392: IFFALSE 34419
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34394: LD_ADDR_EXP 113
34398: PUSH
34399: LD_EXP 113
34403: PPUSH
34404: LD_VAR 0 1
34408: PPUSH
34409: LD_INT 0
34411: PPUSH
34412: CALL_OW 1
34416: ST_TO_ADDR
34417: GO 34470
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34419: LD_ADDR_EXP 113
34423: PUSH
34424: LD_EXP 113
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: LD_VAR 0 1
34438: PPUSH
34439: CALL_OW 255
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_VAR 0 3
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: PPUSH
34465: CALL_OW 1
34469: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34470: CALL 34479 0 0
// end ;
34474: LD_VAR 0 4
34478: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34479: LD_INT 0
34481: PPUSH
34482: PPUSH
34483: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34484: LD_STRING resetFactoryWaypoint();
34486: PPUSH
34487: CALL_OW 559
// if factoryWaypoints then
34491: LD_EXP 113
34495: IFFALSE 34621
// begin list := PrepareArray ( factoryWaypoints ) ;
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_EXP 113
34506: PPUSH
34507: CALL 77035 0 1
34511: ST_TO_ADDR
// for i := 1 to list do
34512: LD_ADDR_VAR 0 2
34516: PUSH
34517: DOUBLE
34518: LD_INT 1
34520: DEC
34521: ST_TO_ADDR
34522: LD_VAR 0 3
34526: PUSH
34527: FOR_TO
34528: IFFALSE 34619
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34530: LD_STRING setFactoryWaypointXY(
34532: PUSH
34533: LD_VAR 0 3
34537: PUSH
34538: LD_VAR 0 2
34542: ARRAY
34543: PUSH
34544: LD_INT 1
34546: ARRAY
34547: STR
34548: PUSH
34549: LD_STRING ,
34551: STR
34552: PUSH
34553: LD_VAR 0 3
34557: PUSH
34558: LD_VAR 0 2
34562: ARRAY
34563: PUSH
34564: LD_INT 2
34566: ARRAY
34567: STR
34568: PUSH
34569: LD_STRING ,
34571: STR
34572: PUSH
34573: LD_VAR 0 3
34577: PUSH
34578: LD_VAR 0 2
34582: ARRAY
34583: PUSH
34584: LD_INT 3
34586: ARRAY
34587: STR
34588: PUSH
34589: LD_STRING ,
34591: STR
34592: PUSH
34593: LD_VAR 0 3
34597: PUSH
34598: LD_VAR 0 2
34602: ARRAY
34603: PUSH
34604: LD_INT 4
34606: ARRAY
34607: STR
34608: PUSH
34609: LD_STRING )
34611: STR
34612: PPUSH
34613: CALL_OW 559
34617: GO 34527
34619: POP
34620: POP
// end ; end ;
34621: LD_VAR 0 1
34625: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34626: LD_INT 0
34628: PPUSH
// if HexInfo ( x , y ) = warehouse then
34629: LD_VAR 0 2
34633: PPUSH
34634: LD_VAR 0 3
34638: PPUSH
34639: CALL_OW 428
34643: PUSH
34644: LD_VAR 0 1
34648: EQUAL
34649: IFFALSE 34676
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34651: LD_ADDR_EXP 114
34655: PUSH
34656: LD_EXP 114
34660: PPUSH
34661: LD_VAR 0 1
34665: PPUSH
34666: LD_INT 0
34668: PPUSH
34669: CALL_OW 1
34673: ST_TO_ADDR
34674: GO 34727
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34676: LD_ADDR_EXP 114
34680: PUSH
34681: LD_EXP 114
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 255
34700: PUSH
34701: LD_VAR 0 1
34705: PUSH
34706: LD_VAR 0 2
34710: PUSH
34711: LD_VAR 0 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: PPUSH
34722: CALL_OW 1
34726: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34727: CALL 34736 0 0
// end ;
34731: LD_VAR 0 4
34735: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34736: LD_INT 0
34738: PPUSH
34739: PPUSH
34740: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34741: LD_STRING resetWarehouseGatheringPoints();
34743: PPUSH
34744: CALL_OW 559
// if warehouseGatheringPoints then
34748: LD_EXP 114
34752: IFFALSE 34878
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_EXP 114
34763: PPUSH
34764: CALL 77035 0 1
34768: ST_TO_ADDR
// for i := 1 to list do
34769: LD_ADDR_VAR 0 2
34773: PUSH
34774: DOUBLE
34775: LD_INT 1
34777: DEC
34778: ST_TO_ADDR
34779: LD_VAR 0 3
34783: PUSH
34784: FOR_TO
34785: IFFALSE 34876
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34787: LD_STRING setWarehouseGatheringPointXY(
34789: PUSH
34790: LD_VAR 0 3
34794: PUSH
34795: LD_VAR 0 2
34799: ARRAY
34800: PUSH
34801: LD_INT 1
34803: ARRAY
34804: STR
34805: PUSH
34806: LD_STRING ,
34808: STR
34809: PUSH
34810: LD_VAR 0 3
34814: PUSH
34815: LD_VAR 0 2
34819: ARRAY
34820: PUSH
34821: LD_INT 2
34823: ARRAY
34824: STR
34825: PUSH
34826: LD_STRING ,
34828: STR
34829: PUSH
34830: LD_VAR 0 3
34834: PUSH
34835: LD_VAR 0 2
34839: ARRAY
34840: PUSH
34841: LD_INT 3
34843: ARRAY
34844: STR
34845: PUSH
34846: LD_STRING ,
34848: STR
34849: PUSH
34850: LD_VAR 0 3
34854: PUSH
34855: LD_VAR 0 2
34859: ARRAY
34860: PUSH
34861: LD_INT 4
34863: ARRAY
34864: STR
34865: PUSH
34866: LD_STRING )
34868: STR
34869: PPUSH
34870: CALL_OW 559
34874: GO 34784
34876: POP
34877: POP
// end ; end ;
34878: LD_VAR 0 1
34882: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34883: LD_EXP 114
34887: IFFALSE 35572
34889: GO 34891
34891: DISABLE
34892: LD_INT 0
34894: PPUSH
34895: PPUSH
34896: PPUSH
34897: PPUSH
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
// begin enable ;
34903: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_EXP 114
34913: PPUSH
34914: CALL 77035 0 1
34918: ST_TO_ADDR
// if not list then
34919: LD_VAR 0 3
34923: NOT
34924: IFFALSE 34928
// exit ;
34926: GO 35572
// for i := 1 to list do
34928: LD_ADDR_VAR 0 1
34932: PUSH
34933: DOUBLE
34934: LD_INT 1
34936: DEC
34937: ST_TO_ADDR
34938: LD_VAR 0 3
34942: PUSH
34943: FOR_TO
34944: IFFALSE 35570
// begin depot := list [ i ] [ 2 ] ;
34946: LD_ADDR_VAR 0 8
34950: PUSH
34951: LD_VAR 0 3
34955: PUSH
34956: LD_VAR 0 1
34960: ARRAY
34961: PUSH
34962: LD_INT 2
34964: ARRAY
34965: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34966: LD_ADDR_VAR 0 5
34970: PUSH
34971: LD_VAR 0 3
34975: PUSH
34976: LD_VAR 0 1
34980: ARRAY
34981: PUSH
34982: LD_INT 1
34984: ARRAY
34985: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34986: LD_VAR 0 8
34990: PPUSH
34991: CALL_OW 301
34995: PUSH
34996: LD_VAR 0 5
35000: PUSH
35001: LD_VAR 0 8
35005: PPUSH
35006: CALL_OW 255
35010: NONEQUAL
35011: OR
35012: IFFALSE 35041
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35014: LD_ADDR_EXP 114
35018: PUSH
35019: LD_EXP 114
35023: PPUSH
35024: LD_VAR 0 8
35028: PPUSH
35029: LD_INT 0
35031: PPUSH
35032: CALL_OW 1
35036: ST_TO_ADDR
// exit ;
35037: POP
35038: POP
35039: GO 35572
// end ; x := list [ i ] [ 3 ] ;
35041: LD_ADDR_VAR 0 6
35045: PUSH
35046: LD_VAR 0 3
35050: PUSH
35051: LD_VAR 0 1
35055: ARRAY
35056: PUSH
35057: LD_INT 3
35059: ARRAY
35060: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35061: LD_ADDR_VAR 0 7
35065: PUSH
35066: LD_VAR 0 3
35070: PUSH
35071: LD_VAR 0 1
35075: ARRAY
35076: PUSH
35077: LD_INT 4
35079: ARRAY
35080: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_VAR 0 6
35090: PPUSH
35091: LD_VAR 0 7
35095: PPUSH
35096: LD_INT 16
35098: PPUSH
35099: CALL 75623 0 3
35103: ST_TO_ADDR
// if not cratesNearbyPoint then
35104: LD_VAR 0 9
35108: NOT
35109: IFFALSE 35115
// exit ;
35111: POP
35112: POP
35113: GO 35572
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35115: LD_ADDR_VAR 0 4
35119: PUSH
35120: LD_INT 22
35122: PUSH
35123: LD_VAR 0 5
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: LD_INT 60
35137: PUSH
35138: EMPTY
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 91
35147: PUSH
35148: LD_VAR 0 8
35152: PUSH
35153: LD_INT 6
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: LD_INT 25
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 25
35176: PUSH
35177: LD_INT 16
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: PPUSH
35195: CALL_OW 69
35199: PUSH
35200: LD_VAR 0 8
35204: PPUSH
35205: CALL_OW 313
35209: PPUSH
35210: LD_INT 3
35212: PUSH
35213: LD_INT 60
35215: PUSH
35216: EMPTY
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: LD_INT 25
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 25
35238: PUSH
35239: LD_INT 16
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PPUSH
35255: CALL_OW 72
35259: UNION
35260: ST_TO_ADDR
// if tmp then
35261: LD_VAR 0 4
35265: IFFALSE 35345
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35267: LD_ADDR_VAR 0 4
35271: PUSH
35272: LD_VAR 0 4
35276: PPUSH
35277: LD_INT 3
35279: PPUSH
35280: CALL 73592 0 2
35284: ST_TO_ADDR
// for j in tmp do
35285: LD_ADDR_VAR 0 2
35289: PUSH
35290: LD_VAR 0 4
35294: PUSH
35295: FOR_IN
35296: IFFALSE 35339
// begin if IsInUnit ( j ) then
35298: LD_VAR 0 2
35302: PPUSH
35303: CALL_OW 310
35307: IFFALSE 35318
// ComExit ( j ) ;
35309: LD_VAR 0 2
35313: PPUSH
35314: CALL 73675 0 1
// AddComCollect ( j , x , y ) ;
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_VAR 0 6
35327: PPUSH
35328: LD_VAR 0 7
35332: PPUSH
35333: CALL_OW 177
// end ;
35337: GO 35295
35339: POP
35340: POP
// exit ;
35341: POP
35342: POP
35343: GO 35572
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35345: LD_ADDR_VAR 0 4
35349: PUSH
35350: LD_INT 22
35352: PUSH
35353: LD_VAR 0 5
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 91
35364: PUSH
35365: LD_VAR 0 8
35369: PUSH
35370: LD_INT 8
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: LD_INT 34
35383: PUSH
35384: LD_INT 12
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 34
35393: PUSH
35394: LD_INT 51
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 34
35403: PUSH
35404: LD_INT 32
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 34
35413: PUSH
35414: LD_INT 89
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: PPUSH
35433: CALL_OW 69
35437: ST_TO_ADDR
// if tmp then
35438: LD_VAR 0 4
35442: IFFALSE 35568
// begin for j in tmp do
35444: LD_ADDR_VAR 0 2
35448: PUSH
35449: LD_VAR 0 4
35453: PUSH
35454: FOR_IN
35455: IFFALSE 35566
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35457: LD_VAR 0 2
35461: PPUSH
35462: CALL_OW 262
35466: PUSH
35467: LD_INT 3
35469: EQUAL
35470: PUSH
35471: LD_VAR 0 2
35475: PPUSH
35476: CALL_OW 261
35480: PUSH
35481: LD_INT 20
35483: GREATER
35484: OR
35485: PUSH
35486: LD_VAR 0 2
35490: PPUSH
35491: CALL_OW 314
35495: NOT
35496: AND
35497: PUSH
35498: LD_VAR 0 2
35502: PPUSH
35503: CALL_OW 263
35507: PUSH
35508: LD_INT 1
35510: NONEQUAL
35511: PUSH
35512: LD_VAR 0 2
35516: PPUSH
35517: CALL_OW 311
35521: OR
35522: AND
35523: IFFALSE 35564
// begin ComCollect ( j , x , y ) ;
35525: LD_VAR 0 2
35529: PPUSH
35530: LD_VAR 0 6
35534: PPUSH
35535: LD_VAR 0 7
35539: PPUSH
35540: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35544: LD_VAR 0 2
35548: PPUSH
35549: LD_VAR 0 8
35553: PPUSH
35554: CALL_OW 172
// exit ;
35558: POP
35559: POP
35560: POP
35561: POP
35562: GO 35572
// end ;
35564: GO 35454
35566: POP
35567: POP
// end ; end ;
35568: GO 34943
35570: POP
35571: POP
// end ; end_of_file end_of_file
35572: PPOPN 9
35574: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35575: LD_INT 0
35577: PPUSH
35578: PPUSH
// if exist_mode then
35579: LD_VAR 0 2
35583: IFFALSE 35608
// unit := CreateCharacter ( prefix & ident ) else
35585: LD_ADDR_VAR 0 5
35589: PUSH
35590: LD_VAR 0 3
35594: PUSH
35595: LD_VAR 0 1
35599: STR
35600: PPUSH
35601: CALL_OW 34
35605: ST_TO_ADDR
35606: GO 35623
// unit := NewCharacter ( ident ) ;
35608: LD_ADDR_VAR 0 5
35612: PUSH
35613: LD_VAR 0 1
35617: PPUSH
35618: CALL_OW 25
35622: ST_TO_ADDR
// result := unit ;
35623: LD_ADDR_VAR 0 4
35627: PUSH
35628: LD_VAR 0 5
35632: ST_TO_ADDR
// end ;
35633: LD_VAR 0 4
35637: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35638: LD_INT 0
35640: PPUSH
35641: PPUSH
// if not side or not nation then
35642: LD_VAR 0 1
35646: NOT
35647: PUSH
35648: LD_VAR 0 2
35652: NOT
35653: OR
35654: IFFALSE 35658
// exit ;
35656: GO 36426
// case nation of nation_american :
35658: LD_VAR 0 2
35662: PUSH
35663: LD_INT 1
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 35885
35671: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35672: LD_ADDR_VAR 0 4
35676: PUSH
35677: LD_INT 35
35679: PUSH
35680: LD_INT 45
35682: PUSH
35683: LD_INT 46
35685: PUSH
35686: LD_INT 47
35688: PUSH
35689: LD_INT 82
35691: PUSH
35692: LD_INT 83
35694: PUSH
35695: LD_INT 84
35697: PUSH
35698: LD_INT 85
35700: PUSH
35701: LD_INT 86
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: LD_INT 6
35712: PUSH
35713: LD_INT 15
35715: PUSH
35716: LD_INT 16
35718: PUSH
35719: LD_INT 7
35721: PUSH
35722: LD_INT 12
35724: PUSH
35725: LD_INT 13
35727: PUSH
35728: LD_INT 10
35730: PUSH
35731: LD_INT 14
35733: PUSH
35734: LD_INT 20
35736: PUSH
35737: LD_INT 21
35739: PUSH
35740: LD_INT 22
35742: PUSH
35743: LD_INT 25
35745: PUSH
35746: LD_INT 32
35748: PUSH
35749: LD_INT 27
35751: PUSH
35752: LD_INT 36
35754: PUSH
35755: LD_INT 69
35757: PUSH
35758: LD_INT 39
35760: PUSH
35761: LD_INT 34
35763: PUSH
35764: LD_INT 40
35766: PUSH
35767: LD_INT 48
35769: PUSH
35770: LD_INT 49
35772: PUSH
35773: LD_INT 50
35775: PUSH
35776: LD_INT 51
35778: PUSH
35779: LD_INT 52
35781: PUSH
35782: LD_INT 53
35784: PUSH
35785: LD_INT 54
35787: PUSH
35788: LD_INT 55
35790: PUSH
35791: LD_INT 56
35793: PUSH
35794: LD_INT 57
35796: PUSH
35797: LD_INT 58
35799: PUSH
35800: LD_INT 59
35802: PUSH
35803: LD_INT 60
35805: PUSH
35806: LD_INT 61
35808: PUSH
35809: LD_INT 62
35811: PUSH
35812: LD_INT 80
35814: PUSH
35815: LD_INT 82
35817: PUSH
35818: LD_INT 83
35820: PUSH
35821: LD_INT 84
35823: PUSH
35824: LD_INT 85
35826: PUSH
35827: LD_INT 86
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: ST_TO_ADDR
35883: GO 36350
35885: LD_INT 2
35887: DOUBLE
35888: EQUAL
35889: IFTRUE 35893
35891: GO 36119
35893: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35894: LD_ADDR_VAR 0 4
35898: PUSH
35899: LD_INT 35
35901: PUSH
35902: LD_INT 45
35904: PUSH
35905: LD_INT 46
35907: PUSH
35908: LD_INT 47
35910: PUSH
35911: LD_INT 82
35913: PUSH
35914: LD_INT 83
35916: PUSH
35917: LD_INT 84
35919: PUSH
35920: LD_INT 85
35922: PUSH
35923: LD_INT 87
35925: PUSH
35926: LD_INT 70
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: LD_INT 11
35934: PUSH
35935: LD_INT 3
35937: PUSH
35938: LD_INT 4
35940: PUSH
35941: LD_INT 5
35943: PUSH
35944: LD_INT 6
35946: PUSH
35947: LD_INT 15
35949: PUSH
35950: LD_INT 18
35952: PUSH
35953: LD_INT 7
35955: PUSH
35956: LD_INT 17
35958: PUSH
35959: LD_INT 8
35961: PUSH
35962: LD_INT 20
35964: PUSH
35965: LD_INT 21
35967: PUSH
35968: LD_INT 22
35970: PUSH
35971: LD_INT 72
35973: PUSH
35974: LD_INT 26
35976: PUSH
35977: LD_INT 69
35979: PUSH
35980: LD_INT 39
35982: PUSH
35983: LD_INT 40
35985: PUSH
35986: LD_INT 41
35988: PUSH
35989: LD_INT 42
35991: PUSH
35992: LD_INT 43
35994: PUSH
35995: LD_INT 48
35997: PUSH
35998: LD_INT 49
36000: PUSH
36001: LD_INT 50
36003: PUSH
36004: LD_INT 51
36006: PUSH
36007: LD_INT 52
36009: PUSH
36010: LD_INT 53
36012: PUSH
36013: LD_INT 54
36015: PUSH
36016: LD_INT 55
36018: PUSH
36019: LD_INT 56
36021: PUSH
36022: LD_INT 60
36024: PUSH
36025: LD_INT 61
36027: PUSH
36028: LD_INT 62
36030: PUSH
36031: LD_INT 66
36033: PUSH
36034: LD_INT 67
36036: PUSH
36037: LD_INT 68
36039: PUSH
36040: LD_INT 81
36042: PUSH
36043: LD_INT 82
36045: PUSH
36046: LD_INT 83
36048: PUSH
36049: LD_INT 84
36051: PUSH
36052: LD_INT 85
36054: PUSH
36055: LD_INT 87
36057: PUSH
36058: LD_INT 88
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: ST_TO_ADDR
36117: GO 36350
36119: LD_INT 3
36121: DOUBLE
36122: EQUAL
36123: IFTRUE 36127
36125: GO 36349
36127: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36128: LD_ADDR_VAR 0 4
36132: PUSH
36133: LD_INT 46
36135: PUSH
36136: LD_INT 47
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 82
36147: PUSH
36148: LD_INT 83
36150: PUSH
36151: LD_INT 84
36153: PUSH
36154: LD_INT 85
36156: PUSH
36157: LD_INT 86
36159: PUSH
36160: LD_INT 11
36162: PUSH
36163: LD_INT 9
36165: PUSH
36166: LD_INT 20
36168: PUSH
36169: LD_INT 19
36171: PUSH
36172: LD_INT 21
36174: PUSH
36175: LD_INT 24
36177: PUSH
36178: LD_INT 22
36180: PUSH
36181: LD_INT 25
36183: PUSH
36184: LD_INT 28
36186: PUSH
36187: LD_INT 29
36189: PUSH
36190: LD_INT 30
36192: PUSH
36193: LD_INT 31
36195: PUSH
36196: LD_INT 37
36198: PUSH
36199: LD_INT 38
36201: PUSH
36202: LD_INT 32
36204: PUSH
36205: LD_INT 27
36207: PUSH
36208: LD_INT 33
36210: PUSH
36211: LD_INT 69
36213: PUSH
36214: LD_INT 39
36216: PUSH
36217: LD_INT 34
36219: PUSH
36220: LD_INT 40
36222: PUSH
36223: LD_INT 71
36225: PUSH
36226: LD_INT 23
36228: PUSH
36229: LD_INT 44
36231: PUSH
36232: LD_INT 48
36234: PUSH
36235: LD_INT 49
36237: PUSH
36238: LD_INT 50
36240: PUSH
36241: LD_INT 51
36243: PUSH
36244: LD_INT 52
36246: PUSH
36247: LD_INT 53
36249: PUSH
36250: LD_INT 54
36252: PUSH
36253: LD_INT 55
36255: PUSH
36256: LD_INT 56
36258: PUSH
36259: LD_INT 57
36261: PUSH
36262: LD_INT 58
36264: PUSH
36265: LD_INT 59
36267: PUSH
36268: LD_INT 63
36270: PUSH
36271: LD_INT 64
36273: PUSH
36274: LD_INT 65
36276: PUSH
36277: LD_INT 82
36279: PUSH
36280: LD_INT 83
36282: PUSH
36283: LD_INT 84
36285: PUSH
36286: LD_INT 85
36288: PUSH
36289: LD_INT 86
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
36347: GO 36350
36349: POP
// if state > - 1 and state < 3 then
36350: LD_VAR 0 3
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: GREATER
36359: PUSH
36360: LD_VAR 0 3
36364: PUSH
36365: LD_INT 3
36367: LESS
36368: AND
36369: IFFALSE 36426
// for i in result do
36371: LD_ADDR_VAR 0 5
36375: PUSH
36376: LD_VAR 0 4
36380: PUSH
36381: FOR_IN
36382: IFFALSE 36424
// if GetTech ( i , side ) <> state then
36384: LD_VAR 0 5
36388: PPUSH
36389: LD_VAR 0 1
36393: PPUSH
36394: CALL_OW 321
36398: PUSH
36399: LD_VAR 0 3
36403: NONEQUAL
36404: IFFALSE 36422
// result := result diff i ;
36406: LD_ADDR_VAR 0 4
36410: PUSH
36411: LD_VAR 0 4
36415: PUSH
36416: LD_VAR 0 5
36420: DIFF
36421: ST_TO_ADDR
36422: GO 36381
36424: POP
36425: POP
// end ;
36426: LD_VAR 0 4
36430: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36431: LD_INT 0
36433: PPUSH
36434: PPUSH
36435: PPUSH
// result := true ;
36436: LD_ADDR_VAR 0 3
36440: PUSH
36441: LD_INT 1
36443: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36444: LD_ADDR_VAR 0 5
36448: PUSH
36449: LD_VAR 0 2
36453: PPUSH
36454: CALL_OW 480
36458: ST_TO_ADDR
// if not tmp then
36459: LD_VAR 0 5
36463: NOT
36464: IFFALSE 36468
// exit ;
36466: GO 36517
// for i in tmp do
36468: LD_ADDR_VAR 0 4
36472: PUSH
36473: LD_VAR 0 5
36477: PUSH
36478: FOR_IN
36479: IFFALSE 36515
// if GetTech ( i , side ) <> state_researched then
36481: LD_VAR 0 4
36485: PPUSH
36486: LD_VAR 0 1
36490: PPUSH
36491: CALL_OW 321
36495: PUSH
36496: LD_INT 2
36498: NONEQUAL
36499: IFFALSE 36513
// begin result := false ;
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_INT 0
36508: ST_TO_ADDR
// exit ;
36509: POP
36510: POP
36511: GO 36517
// end ;
36513: GO 36478
36515: POP
36516: POP
// end ;
36517: LD_VAR 0 3
36521: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36522: LD_INT 0
36524: PPUSH
36525: PPUSH
36526: PPUSH
36527: PPUSH
36528: PPUSH
36529: PPUSH
36530: PPUSH
36531: PPUSH
36532: PPUSH
36533: PPUSH
36534: PPUSH
36535: PPUSH
36536: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36537: LD_VAR 0 1
36541: NOT
36542: PUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 257
36552: PUSH
36553: LD_INT 9
36555: NONEQUAL
36556: OR
36557: IFFALSE 36561
// exit ;
36559: GO 37134
// side := GetSide ( unit ) ;
36561: LD_ADDR_VAR 0 9
36565: PUSH
36566: LD_VAR 0 1
36570: PPUSH
36571: CALL_OW 255
36575: ST_TO_ADDR
// tech_space := tech_spacanom ;
36576: LD_ADDR_VAR 0 12
36580: PUSH
36581: LD_INT 29
36583: ST_TO_ADDR
// tech_time := tech_taurad ;
36584: LD_ADDR_VAR 0 13
36588: PUSH
36589: LD_INT 28
36591: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36592: LD_ADDR_VAR 0 11
36596: PUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL_OW 310
36606: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36607: LD_VAR 0 11
36611: PPUSH
36612: CALL_OW 247
36616: PUSH
36617: LD_INT 2
36619: EQUAL
36620: IFFALSE 36624
// exit ;
36622: GO 37134
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36624: LD_ADDR_VAR 0 8
36628: PUSH
36629: LD_INT 81
36631: PUSH
36632: LD_VAR 0 9
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 3
36643: PUSH
36644: LD_INT 21
36646: PUSH
36647: LD_INT 3
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PPUSH
36662: CALL_OW 69
36666: ST_TO_ADDR
// if not tmp then
36667: LD_VAR 0 8
36671: NOT
36672: IFFALSE 36676
// exit ;
36674: GO 37134
// if in_unit then
36676: LD_VAR 0 11
36680: IFFALSE 36704
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36682: LD_ADDR_VAR 0 10
36686: PUSH
36687: LD_VAR 0 8
36691: PPUSH
36692: LD_VAR 0 11
36696: PPUSH
36697: CALL_OW 74
36701: ST_TO_ADDR
36702: GO 36724
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36704: LD_ADDR_VAR 0 10
36708: PUSH
36709: LD_VAR 0 8
36713: PPUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL_OW 74
36723: ST_TO_ADDR
// if not enemy then
36724: LD_VAR 0 10
36728: NOT
36729: IFFALSE 36733
// exit ;
36731: GO 37134
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36733: LD_VAR 0 11
36737: PUSH
36738: LD_VAR 0 11
36742: PPUSH
36743: LD_VAR 0 10
36747: PPUSH
36748: CALL_OW 296
36752: PUSH
36753: LD_INT 13
36755: GREATER
36756: AND
36757: PUSH
36758: LD_VAR 0 1
36762: PPUSH
36763: LD_VAR 0 10
36767: PPUSH
36768: CALL_OW 296
36772: PUSH
36773: LD_INT 12
36775: GREATER
36776: OR
36777: IFFALSE 36781
// exit ;
36779: GO 37134
// missile := [ 1 ] ;
36781: LD_ADDR_VAR 0 14
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36792: LD_VAR 0 9
36796: PPUSH
36797: LD_VAR 0 12
36801: PPUSH
36802: CALL_OW 325
36806: IFFALSE 36835
// missile := Replace ( missile , missile + 1 , 2 ) ;
36808: LD_ADDR_VAR 0 14
36812: PUSH
36813: LD_VAR 0 14
36817: PPUSH
36818: LD_VAR 0 14
36822: PUSH
36823: LD_INT 1
36825: PLUS
36826: PPUSH
36827: LD_INT 2
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36835: LD_VAR 0 9
36839: PPUSH
36840: LD_VAR 0 13
36844: PPUSH
36845: CALL_OW 325
36849: PUSH
36850: LD_VAR 0 10
36854: PPUSH
36855: CALL_OW 255
36859: PPUSH
36860: LD_VAR 0 13
36864: PPUSH
36865: CALL_OW 325
36869: NOT
36870: AND
36871: IFFALSE 36900
// missile := Replace ( missile , missile + 1 , 3 ) ;
36873: LD_ADDR_VAR 0 14
36877: PUSH
36878: LD_VAR 0 14
36882: PPUSH
36883: LD_VAR 0 14
36887: PUSH
36888: LD_INT 1
36890: PLUS
36891: PPUSH
36892: LD_INT 3
36894: PPUSH
36895: CALL_OW 1
36899: ST_TO_ADDR
// if missile < 2 then
36900: LD_VAR 0 14
36904: PUSH
36905: LD_INT 2
36907: LESS
36908: IFFALSE 36912
// exit ;
36910: GO 37134
// x := GetX ( enemy ) ;
36912: LD_ADDR_VAR 0 4
36916: PUSH
36917: LD_VAR 0 10
36921: PPUSH
36922: CALL_OW 250
36926: ST_TO_ADDR
// y := GetY ( enemy ) ;
36927: LD_ADDR_VAR 0 5
36931: PUSH
36932: LD_VAR 0 10
36936: PPUSH
36937: CALL_OW 251
36941: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36942: LD_ADDR_VAR 0 6
36946: PUSH
36947: LD_VAR 0 4
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PPUSH
36956: LD_INT 1
36958: PPUSH
36959: CALL_OW 12
36963: PLUS
36964: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36965: LD_ADDR_VAR 0 7
36969: PUSH
36970: LD_VAR 0 5
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PPUSH
36979: LD_INT 1
36981: PPUSH
36982: CALL_OW 12
36986: PLUS
36987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36988: LD_VAR 0 6
36992: PPUSH
36993: LD_VAR 0 7
36997: PPUSH
36998: CALL_OW 488
37002: NOT
37003: IFFALSE 37025
// begin _x := x ;
37005: LD_ADDR_VAR 0 6
37009: PUSH
37010: LD_VAR 0 4
37014: ST_TO_ADDR
// _y := y ;
37015: LD_ADDR_VAR 0 7
37019: PUSH
37020: LD_VAR 0 5
37024: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37025: LD_ADDR_VAR 0 3
37029: PUSH
37030: LD_INT 1
37032: PPUSH
37033: LD_VAR 0 14
37037: PPUSH
37038: CALL_OW 12
37042: ST_TO_ADDR
// case i of 1 :
37043: LD_VAR 0 3
37047: PUSH
37048: LD_INT 1
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37056
37054: GO 37073
37056: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_VAR 0 10
37066: PPUSH
37067: CALL_OW 115
37071: GO 37134
37073: LD_INT 2
37075: DOUBLE
37076: EQUAL
37077: IFTRUE 37081
37079: GO 37103
37081: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37082: LD_VAR 0 1
37086: PPUSH
37087: LD_VAR 0 6
37091: PPUSH
37092: LD_VAR 0 7
37096: PPUSH
37097: CALL_OW 153
37101: GO 37134
37103: LD_INT 3
37105: DOUBLE
37106: EQUAL
37107: IFTRUE 37111
37109: GO 37133
37111: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37112: LD_VAR 0 1
37116: PPUSH
37117: LD_VAR 0 6
37121: PPUSH
37122: LD_VAR 0 7
37126: PPUSH
37127: CALL_OW 154
37131: GO 37134
37133: POP
// end ;
37134: LD_VAR 0 2
37138: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37139: LD_INT 0
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
// if not unit or not building then
37147: LD_VAR 0 1
37151: NOT
37152: PUSH
37153: LD_VAR 0 2
37157: NOT
37158: OR
37159: IFFALSE 37163
// exit ;
37161: GO 37321
// x := GetX ( building ) ;
37163: LD_ADDR_VAR 0 5
37167: PUSH
37168: LD_VAR 0 2
37172: PPUSH
37173: CALL_OW 250
37177: ST_TO_ADDR
// y := GetY ( building ) ;
37178: LD_ADDR_VAR 0 6
37182: PUSH
37183: LD_VAR 0 2
37187: PPUSH
37188: CALL_OW 251
37192: ST_TO_ADDR
// for i = 0 to 5 do
37193: LD_ADDR_VAR 0 4
37197: PUSH
37198: DOUBLE
37199: LD_INT 0
37201: DEC
37202: ST_TO_ADDR
37203: LD_INT 5
37205: PUSH
37206: FOR_TO
37207: IFFALSE 37319
// begin _x := ShiftX ( x , i , 3 ) ;
37209: LD_ADDR_VAR 0 7
37213: PUSH
37214: LD_VAR 0 5
37218: PPUSH
37219: LD_VAR 0 4
37223: PPUSH
37224: LD_INT 3
37226: PPUSH
37227: CALL_OW 272
37231: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37232: LD_ADDR_VAR 0 8
37236: PUSH
37237: LD_VAR 0 6
37241: PPUSH
37242: LD_VAR 0 4
37246: PPUSH
37247: LD_INT 3
37249: PPUSH
37250: CALL_OW 273
37254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37255: LD_VAR 0 7
37259: PPUSH
37260: LD_VAR 0 8
37264: PPUSH
37265: CALL_OW 488
37269: NOT
37270: IFFALSE 37274
// continue ;
37272: GO 37206
// if HexInfo ( _x , _y ) = 0 then
37274: LD_VAR 0 7
37278: PPUSH
37279: LD_VAR 0 8
37283: PPUSH
37284: CALL_OW 428
37288: PUSH
37289: LD_INT 0
37291: EQUAL
37292: IFFALSE 37317
// begin ComMoveXY ( unit , _x , _y ) ;
37294: LD_VAR 0 1
37298: PPUSH
37299: LD_VAR 0 7
37303: PPUSH
37304: LD_VAR 0 8
37308: PPUSH
37309: CALL_OW 111
// exit ;
37313: POP
37314: POP
37315: GO 37321
// end ; end ;
37317: GO 37206
37319: POP
37320: POP
// end ;
37321: LD_VAR 0 3
37325: RET
// export function ScanBase ( side , base_area ) ; begin
37326: LD_INT 0
37328: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37329: LD_ADDR_VAR 0 3
37333: PUSH
37334: LD_VAR 0 2
37338: PPUSH
37339: LD_INT 81
37341: PUSH
37342: LD_VAR 0 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PPUSH
37351: CALL_OW 70
37355: ST_TO_ADDR
// end ;
37356: LD_VAR 0 3
37360: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37361: LD_INT 0
37363: PPUSH
37364: PPUSH
37365: PPUSH
37366: PPUSH
// result := false ;
37367: LD_ADDR_VAR 0 2
37371: PUSH
37372: LD_INT 0
37374: ST_TO_ADDR
// side := GetSide ( unit ) ;
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 255
37389: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37390: LD_ADDR_VAR 0 4
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 248
37404: ST_TO_ADDR
// case nat of 1 :
37405: LD_VAR 0 4
37409: PUSH
37410: LD_INT 1
37412: DOUBLE
37413: EQUAL
37414: IFTRUE 37418
37416: GO 37429
37418: POP
// tech := tech_lassight ; 2 :
37419: LD_ADDR_VAR 0 5
37423: PUSH
37424: LD_INT 12
37426: ST_TO_ADDR
37427: GO 37468
37429: LD_INT 2
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37448
37437: POP
// tech := tech_mortar ; 3 :
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_INT 41
37445: ST_TO_ADDR
37446: GO 37468
37448: LD_INT 3
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37456
37454: GO 37467
37456: POP
// tech := tech_bazooka ; end ;
37457: LD_ADDR_VAR 0 5
37461: PUSH
37462: LD_INT 44
37464: ST_TO_ADDR
37465: GO 37468
37467: POP
// if Researched ( side , tech ) then
37468: LD_VAR 0 3
37472: PPUSH
37473: LD_VAR 0 5
37477: PPUSH
37478: CALL_OW 325
37482: IFFALSE 37509
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37484: LD_ADDR_VAR 0 2
37488: PUSH
37489: LD_INT 5
37491: PUSH
37492: LD_INT 8
37494: PUSH
37495: LD_INT 9
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: PUSH
37503: LD_VAR 0 4
37507: ARRAY
37508: ST_TO_ADDR
// end ;
37509: LD_VAR 0 2
37513: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37514: LD_INT 0
37516: PPUSH
37517: PPUSH
37518: PPUSH
// if not mines then
37519: LD_VAR 0 2
37523: NOT
37524: IFFALSE 37528
// exit ;
37526: GO 37672
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37528: LD_ADDR_VAR 0 5
37532: PUSH
37533: LD_INT 81
37535: PUSH
37536: LD_VAR 0 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 3
37547: PUSH
37548: LD_INT 21
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PPUSH
37566: CALL_OW 69
37570: ST_TO_ADDR
// for i in mines do
37571: LD_ADDR_VAR 0 4
37575: PUSH
37576: LD_VAR 0 2
37580: PUSH
37581: FOR_IN
37582: IFFALSE 37670
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37584: LD_VAR 0 4
37588: PUSH
37589: LD_INT 1
37591: ARRAY
37592: PPUSH
37593: LD_VAR 0 4
37597: PUSH
37598: LD_INT 2
37600: ARRAY
37601: PPUSH
37602: CALL_OW 458
37606: NOT
37607: IFFALSE 37611
// continue ;
37609: GO 37581
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37611: LD_VAR 0 4
37615: PUSH
37616: LD_INT 1
37618: ARRAY
37619: PPUSH
37620: LD_VAR 0 4
37624: PUSH
37625: LD_INT 2
37627: ARRAY
37628: PPUSH
37629: CALL_OW 428
37633: PUSH
37634: LD_VAR 0 5
37638: IN
37639: IFFALSE 37668
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37641: LD_VAR 0 4
37645: PUSH
37646: LD_INT 1
37648: ARRAY
37649: PPUSH
37650: LD_VAR 0 4
37654: PUSH
37655: LD_INT 2
37657: ARRAY
37658: PPUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 456
// end ;
37668: GO 37581
37670: POP
37671: POP
// end ;
37672: LD_VAR 0 3
37676: RET
// export function Count ( array ) ; begin
37677: LD_INT 0
37679: PPUSH
// result := array + 0 ;
37680: LD_ADDR_VAR 0 2
37684: PUSH
37685: LD_VAR 0 1
37689: PUSH
37690: LD_INT 0
37692: PLUS
37693: ST_TO_ADDR
// end ;
37694: LD_VAR 0 2
37698: RET
// export function IsEmpty ( building ) ; begin
37699: LD_INT 0
37701: PPUSH
// if not building then
37702: LD_VAR 0 1
37706: NOT
37707: IFFALSE 37711
// exit ;
37709: GO 37754
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37711: LD_ADDR_VAR 0 2
37715: PUSH
37716: LD_VAR 0 1
37720: PUSH
37721: LD_INT 22
37723: PUSH
37724: LD_VAR 0 1
37728: PPUSH
37729: CALL_OW 255
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 58
37740: PUSH
37741: EMPTY
37742: LIST
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PPUSH
37748: CALL_OW 69
37752: IN
37753: ST_TO_ADDR
// end ;
37754: LD_VAR 0 2
37758: RET
// export function IsNotFull ( building ) ; var places ; begin
37759: LD_INT 0
37761: PPUSH
37762: PPUSH
// if not building then
37763: LD_VAR 0 1
37767: NOT
37768: IFFALSE 37772
// exit ;
37770: GO 37800
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37772: LD_ADDR_VAR 0 2
37776: PUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: LD_INT 3
37784: PUSH
37785: LD_INT 62
37787: PUSH
37788: EMPTY
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PPUSH
37795: CALL_OW 72
37799: ST_TO_ADDR
// end ;
37800: LD_VAR 0 2
37804: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37805: LD_INT 0
37807: PPUSH
37808: PPUSH
37809: PPUSH
37810: PPUSH
// tmp := [ ] ;
37811: LD_ADDR_VAR 0 3
37815: PUSH
37816: EMPTY
37817: ST_TO_ADDR
// list := [ ] ;
37818: LD_ADDR_VAR 0 5
37822: PUSH
37823: EMPTY
37824: ST_TO_ADDR
// for i = 16 to 25 do
37825: LD_ADDR_VAR 0 4
37829: PUSH
37830: DOUBLE
37831: LD_INT 16
37833: DEC
37834: ST_TO_ADDR
37835: LD_INT 25
37837: PUSH
37838: FOR_TO
37839: IFFALSE 37912
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37841: LD_ADDR_VAR 0 3
37845: PUSH
37846: LD_VAR 0 3
37850: PUSH
37851: LD_INT 22
37853: PUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 255
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 91
37870: PUSH
37871: LD_VAR 0 1
37875: PUSH
37876: LD_INT 6
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: LD_VAR 0 4
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: PUSH
37901: EMPTY
37902: LIST
37903: PPUSH
37904: CALL_OW 69
37908: ADD
37909: ST_TO_ADDR
37910: GO 37838
37912: POP
37913: POP
// for i = 1 to tmp do
37914: LD_ADDR_VAR 0 4
37918: PUSH
37919: DOUBLE
37920: LD_INT 1
37922: DEC
37923: ST_TO_ADDR
37924: LD_VAR 0 3
37928: PUSH
37929: FOR_TO
37930: IFFALSE 38018
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37932: LD_ADDR_VAR 0 5
37936: PUSH
37937: LD_VAR 0 5
37941: PUSH
37942: LD_VAR 0 3
37946: PUSH
37947: LD_VAR 0 4
37951: ARRAY
37952: PPUSH
37953: CALL_OW 266
37957: PUSH
37958: LD_VAR 0 3
37962: PUSH
37963: LD_VAR 0 4
37967: ARRAY
37968: PPUSH
37969: CALL_OW 250
37973: PUSH
37974: LD_VAR 0 3
37978: PUSH
37979: LD_VAR 0 4
37983: ARRAY
37984: PPUSH
37985: CALL_OW 251
37989: PUSH
37990: LD_VAR 0 3
37994: PUSH
37995: LD_VAR 0 4
37999: ARRAY
38000: PPUSH
38001: CALL_OW 254
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: ADD
38015: ST_TO_ADDR
38016: GO 37929
38018: POP
38019: POP
// result := list ;
38020: LD_ADDR_VAR 0 2
38024: PUSH
38025: LD_VAR 0 5
38029: ST_TO_ADDR
// end ;
38030: LD_VAR 0 2
38034: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38035: LD_INT 0
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
// if not factory then
38044: LD_VAR 0 1
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38646
// if control = control_apeman then
38053: LD_VAR 0 4
38057: PUSH
38058: LD_INT 5
38060: EQUAL
38061: IFFALSE 38170
// begin tmp := UnitsInside ( factory ) ;
38063: LD_ADDR_VAR 0 8
38067: PUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: CALL_OW 313
38077: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38078: LD_VAR 0 8
38082: PPUSH
38083: LD_INT 25
38085: PUSH
38086: LD_INT 12
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PPUSH
38093: CALL_OW 72
38097: NOT
38098: IFFALSE 38108
// control := control_manual ;
38100: LD_ADDR_VAR 0 4
38104: PUSH
38105: LD_INT 1
38107: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38108: LD_ADDR_VAR 0 8
38112: PUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL 37805 0 1
38122: ST_TO_ADDR
// if tmp then
38123: LD_VAR 0 8
38127: IFFALSE 38170
// begin for i in tmp do
38129: LD_ADDR_VAR 0 7
38133: PUSH
38134: LD_VAR 0 8
38138: PUSH
38139: FOR_IN
38140: IFFALSE 38168
// if i [ 1 ] = b_ext_radio then
38142: LD_VAR 0 7
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PUSH
38151: LD_INT 22
38153: EQUAL
38154: IFFALSE 38166
// begin control := control_remote ;
38156: LD_ADDR_VAR 0 4
38160: PUSH
38161: LD_INT 2
38163: ST_TO_ADDR
// break ;
38164: GO 38168
// end ;
38166: GO 38139
38168: POP
38169: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38170: LD_VAR 0 1
38174: PPUSH
38175: LD_VAR 0 2
38179: PPUSH
38180: LD_VAR 0 3
38184: PPUSH
38185: LD_VAR 0 4
38189: PPUSH
38190: LD_VAR 0 5
38194: PPUSH
38195: CALL_OW 448
38199: IFFALSE 38234
// begin result := [ chassis , engine , control , weapon ] ;
38201: LD_ADDR_VAR 0 6
38205: PUSH
38206: LD_VAR 0 2
38210: PUSH
38211: LD_VAR 0 3
38215: PUSH
38216: LD_VAR 0 4
38220: PUSH
38221: LD_VAR 0 5
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: ST_TO_ADDR
// exit ;
38232: GO 38646
// end ; _chassis := AvailableChassisList ( factory ) ;
38234: LD_ADDR_VAR 0 9
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 475
38248: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38249: LD_ADDR_VAR 0 11
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 476
38263: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38264: LD_ADDR_VAR 0 12
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 477
38278: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38279: LD_ADDR_VAR 0 10
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 478
38293: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38294: LD_VAR 0 9
38298: NOT
38299: PUSH
38300: LD_VAR 0 11
38304: NOT
38305: OR
38306: PUSH
38307: LD_VAR 0 12
38311: NOT
38312: OR
38313: PUSH
38314: LD_VAR 0 10
38318: NOT
38319: OR
38320: IFFALSE 38355
// begin result := [ chassis , engine , control , weapon ] ;
38322: LD_ADDR_VAR 0 6
38326: PUSH
38327: LD_VAR 0 2
38331: PUSH
38332: LD_VAR 0 3
38336: PUSH
38337: LD_VAR 0 4
38341: PUSH
38342: LD_VAR 0 5
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: ST_TO_ADDR
// exit ;
38353: GO 38646
// end ; if not chassis in _chassis then
38355: LD_VAR 0 2
38359: PUSH
38360: LD_VAR 0 9
38364: IN
38365: NOT
38366: IFFALSE 38392
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38368: LD_ADDR_VAR 0 2
38372: PUSH
38373: LD_VAR 0 9
38377: PUSH
38378: LD_INT 1
38380: PPUSH
38381: LD_VAR 0 9
38385: PPUSH
38386: CALL_OW 12
38390: ARRAY
38391: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38392: LD_VAR 0 2
38396: PPUSH
38397: LD_VAR 0 3
38401: PPUSH
38402: CALL 38651 0 2
38406: NOT
38407: IFFALSE 38466
// repeat engine := _engine [ 1 ] ;
38409: LD_ADDR_VAR 0 3
38413: PUSH
38414: LD_VAR 0 11
38418: PUSH
38419: LD_INT 1
38421: ARRAY
38422: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38423: LD_ADDR_VAR 0 11
38427: PUSH
38428: LD_VAR 0 11
38432: PPUSH
38433: LD_INT 1
38435: PPUSH
38436: CALL_OW 3
38440: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38441: LD_VAR 0 2
38445: PPUSH
38446: LD_VAR 0 3
38450: PPUSH
38451: CALL 38651 0 2
38455: PUSH
38456: LD_VAR 0 11
38460: PUSH
38461: EMPTY
38462: EQUAL
38463: OR
38464: IFFALSE 38409
// if not control in _control then
38466: LD_VAR 0 4
38470: PUSH
38471: LD_VAR 0 12
38475: IN
38476: NOT
38477: IFFALSE 38503
// control := _control [ rand ( 1 , _control ) ] ;
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: LD_VAR 0 12
38488: PUSH
38489: LD_INT 1
38491: PPUSH
38492: LD_VAR 0 12
38496: PPUSH
38497: CALL_OW 12
38501: ARRAY
38502: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38503: LD_VAR 0 2
38507: PPUSH
38508: LD_VAR 0 5
38512: PPUSH
38513: CALL 38871 0 2
38517: NOT
38518: IFFALSE 38577
// repeat weapon := _weapon [ 1 ] ;
38520: LD_ADDR_VAR 0 5
38524: PUSH
38525: LD_VAR 0 10
38529: PUSH
38530: LD_INT 1
38532: ARRAY
38533: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38534: LD_ADDR_VAR 0 10
38538: PUSH
38539: LD_VAR 0 10
38543: PPUSH
38544: LD_INT 1
38546: PPUSH
38547: CALL_OW 3
38551: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38552: LD_VAR 0 2
38556: PPUSH
38557: LD_VAR 0 5
38561: PPUSH
38562: CALL 38871 0 2
38566: PUSH
38567: LD_VAR 0 10
38571: PUSH
38572: EMPTY
38573: EQUAL
38574: OR
38575: IFFALSE 38520
// result := [ ] ;
38577: LD_ADDR_VAR 0 6
38581: PUSH
38582: EMPTY
38583: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38584: LD_VAR 0 1
38588: PPUSH
38589: LD_VAR 0 2
38593: PPUSH
38594: LD_VAR 0 3
38598: PPUSH
38599: LD_VAR 0 4
38603: PPUSH
38604: LD_VAR 0 5
38608: PPUSH
38609: CALL_OW 448
38613: IFFALSE 38646
// result := [ chassis , engine , control , weapon ] ;
38615: LD_ADDR_VAR 0 6
38619: PUSH
38620: LD_VAR 0 2
38624: PUSH
38625: LD_VAR 0 3
38629: PUSH
38630: LD_VAR 0 4
38634: PUSH
38635: LD_VAR 0 5
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: ST_TO_ADDR
// end ;
38646: LD_VAR 0 6
38650: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38651: LD_INT 0
38653: PPUSH
// if not chassis or not engine then
38654: LD_VAR 0 1
38658: NOT
38659: PUSH
38660: LD_VAR 0 2
38664: NOT
38665: OR
38666: IFFALSE 38670
// exit ;
38668: GO 38866
// case engine of engine_solar :
38670: LD_VAR 0 2
38674: PUSH
38675: LD_INT 2
38677: DOUBLE
38678: EQUAL
38679: IFTRUE 38683
38681: GO 38721
38683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38684: LD_ADDR_VAR 0 3
38688: PUSH
38689: LD_INT 11
38691: PUSH
38692: LD_INT 12
38694: PUSH
38695: LD_INT 13
38697: PUSH
38698: LD_INT 14
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: ST_TO_ADDR
38719: GO 38850
38721: LD_INT 1
38723: DOUBLE
38724: EQUAL
38725: IFTRUE 38729
38727: GO 38791
38729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38730: LD_ADDR_VAR 0 3
38734: PUSH
38735: LD_INT 11
38737: PUSH
38738: LD_INT 12
38740: PUSH
38741: LD_INT 13
38743: PUSH
38744: LD_INT 14
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: LD_INT 3
38755: PUSH
38756: LD_INT 4
38758: PUSH
38759: LD_INT 5
38761: PUSH
38762: LD_INT 21
38764: PUSH
38765: LD_INT 23
38767: PUSH
38768: LD_INT 22
38770: PUSH
38771: LD_INT 24
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: ST_TO_ADDR
38789: GO 38850
38791: LD_INT 3
38793: DOUBLE
38794: EQUAL
38795: IFTRUE 38799
38797: GO 38849
38799: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38800: LD_ADDR_VAR 0 3
38804: PUSH
38805: LD_INT 13
38807: PUSH
38808: LD_INT 14
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: LD_INT 4
38819: PUSH
38820: LD_INT 5
38822: PUSH
38823: LD_INT 21
38825: PUSH
38826: LD_INT 22
38828: PUSH
38829: LD_INT 23
38831: PUSH
38832: LD_INT 24
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
38847: GO 38850
38849: POP
// result := ( chassis in result ) ;
38850: LD_ADDR_VAR 0 3
38854: PUSH
38855: LD_VAR 0 1
38859: PUSH
38860: LD_VAR 0 3
38864: IN
38865: ST_TO_ADDR
// end ;
38866: LD_VAR 0 3
38870: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38871: LD_INT 0
38873: PPUSH
// if not chassis or not weapon then
38874: LD_VAR 0 1
38878: NOT
38879: PUSH
38880: LD_VAR 0 2
38884: NOT
38885: OR
38886: IFFALSE 38890
// exit ;
38888: GO 39950
// case weapon of us_machine_gun :
38890: LD_VAR 0 2
38894: PUSH
38895: LD_INT 2
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38903
38901: GO 38933
38903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38904: LD_ADDR_VAR 0 3
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: LD_INT 4
38920: PUSH
38921: LD_INT 5
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: ST_TO_ADDR
38931: GO 39934
38933: LD_INT 3
38935: DOUBLE
38936: EQUAL
38937: IFTRUE 38941
38939: GO 38971
38941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38942: LD_ADDR_VAR 0 3
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: LD_INT 3
38955: PUSH
38956: LD_INT 4
38958: PUSH
38959: LD_INT 5
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: ST_TO_ADDR
38969: GO 39934
38971: LD_INT 11
38973: DOUBLE
38974: EQUAL
38975: IFTRUE 38979
38977: GO 39009
38979: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38980: LD_ADDR_VAR 0 3
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: LD_INT 4
38996: PUSH
38997: LD_INT 5
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: ST_TO_ADDR
39007: GO 39934
39009: LD_INT 4
39011: DOUBLE
39012: EQUAL
39013: IFTRUE 39017
39015: GO 39043
39017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39018: LD_ADDR_VAR 0 3
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 3
39028: PUSH
39029: LD_INT 4
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: ST_TO_ADDR
39041: GO 39934
39043: LD_INT 5
39045: DOUBLE
39046: EQUAL
39047: IFTRUE 39051
39049: GO 39077
39051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39052: LD_ADDR_VAR 0 3
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 4
39065: PUSH
39066: LD_INT 5
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
39075: GO 39934
39077: LD_INT 9
39079: DOUBLE
39080: EQUAL
39081: IFTRUE 39085
39083: GO 39111
39085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39086: LD_ADDR_VAR 0 3
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 3
39096: PUSH
39097: LD_INT 4
39099: PUSH
39100: LD_INT 5
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
39109: GO 39934
39111: LD_INT 7
39113: DOUBLE
39114: EQUAL
39115: IFTRUE 39119
39117: GO 39145
39119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39120: LD_ADDR_VAR 0 3
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: LD_INT 3
39130: PUSH
39131: LD_INT 4
39133: PUSH
39134: LD_INT 5
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: ST_TO_ADDR
39143: GO 39934
39145: LD_INT 12
39147: DOUBLE
39148: EQUAL
39149: IFTRUE 39153
39151: GO 39179
39153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39154: LD_ADDR_VAR 0 3
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: LD_INT 4
39167: PUSH
39168: LD_INT 5
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: ST_TO_ADDR
39177: GO 39934
39179: LD_INT 13
39181: DOUBLE
39182: EQUAL
39183: IFTRUE 39187
39185: GO 39213
39187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39188: LD_ADDR_VAR 0 3
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: LD_INT 4
39201: PUSH
39202: LD_INT 5
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: ST_TO_ADDR
39211: GO 39934
39213: LD_INT 14
39215: DOUBLE
39216: EQUAL
39217: IFTRUE 39221
39219: GO 39239
39221: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39222: LD_ADDR_VAR 0 3
39226: PUSH
39227: LD_INT 4
39229: PUSH
39230: LD_INT 5
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: ST_TO_ADDR
39237: GO 39934
39239: LD_INT 6
39241: DOUBLE
39242: EQUAL
39243: IFTRUE 39247
39245: GO 39265
39247: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39248: LD_ADDR_VAR 0 3
39252: PUSH
39253: LD_INT 4
39255: PUSH
39256: LD_INT 5
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: ST_TO_ADDR
39263: GO 39934
39265: LD_INT 10
39267: DOUBLE
39268: EQUAL
39269: IFTRUE 39273
39271: GO 39291
39273: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39274: LD_ADDR_VAR 0 3
39278: PUSH
39279: LD_INT 4
39281: PUSH
39282: LD_INT 5
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: ST_TO_ADDR
39289: GO 39934
39291: LD_INT 22
39293: DOUBLE
39294: EQUAL
39295: IFTRUE 39299
39297: GO 39325
39299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39300: LD_ADDR_VAR 0 3
39304: PUSH
39305: LD_INT 11
39307: PUSH
39308: LD_INT 12
39310: PUSH
39311: LD_INT 13
39313: PUSH
39314: LD_INT 14
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: ST_TO_ADDR
39323: GO 39934
39325: LD_INT 23
39327: DOUBLE
39328: EQUAL
39329: IFTRUE 39333
39331: GO 39359
39333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39334: LD_ADDR_VAR 0 3
39338: PUSH
39339: LD_INT 11
39341: PUSH
39342: LD_INT 12
39344: PUSH
39345: LD_INT 13
39347: PUSH
39348: LD_INT 14
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
39357: GO 39934
39359: LD_INT 24
39361: DOUBLE
39362: EQUAL
39363: IFTRUE 39367
39365: GO 39393
39367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39368: LD_ADDR_VAR 0 3
39372: PUSH
39373: LD_INT 11
39375: PUSH
39376: LD_INT 12
39378: PUSH
39379: LD_INT 13
39381: PUSH
39382: LD_INT 14
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: ST_TO_ADDR
39391: GO 39934
39393: LD_INT 30
39395: DOUBLE
39396: EQUAL
39397: IFTRUE 39401
39399: GO 39427
39401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_INT 11
39409: PUSH
39410: LD_INT 12
39412: PUSH
39413: LD_INT 13
39415: PUSH
39416: LD_INT 14
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: ST_TO_ADDR
39425: GO 39934
39427: LD_INT 25
39429: DOUBLE
39430: EQUAL
39431: IFTRUE 39435
39433: GO 39453
39435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39436: LD_ADDR_VAR 0 3
39440: PUSH
39441: LD_INT 13
39443: PUSH
39444: LD_INT 14
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: ST_TO_ADDR
39451: GO 39934
39453: LD_INT 27
39455: DOUBLE
39456: EQUAL
39457: IFTRUE 39461
39459: GO 39479
39461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39462: LD_ADDR_VAR 0 3
39466: PUSH
39467: LD_INT 13
39469: PUSH
39470: LD_INT 14
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: ST_TO_ADDR
39477: GO 39934
39479: LD_INT 92
39481: DOUBLE
39482: EQUAL
39483: IFTRUE 39487
39485: GO 39513
39487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39488: LD_ADDR_VAR 0 3
39492: PUSH
39493: LD_INT 11
39495: PUSH
39496: LD_INT 12
39498: PUSH
39499: LD_INT 13
39501: PUSH
39502: LD_INT 14
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
39511: GO 39934
39513: LD_INT 28
39515: DOUBLE
39516: EQUAL
39517: IFTRUE 39521
39519: GO 39539
39521: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39522: LD_ADDR_VAR 0 3
39526: PUSH
39527: LD_INT 13
39529: PUSH
39530: LD_INT 14
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: ST_TO_ADDR
39537: GO 39934
39539: LD_INT 29
39541: DOUBLE
39542: EQUAL
39543: IFTRUE 39547
39545: GO 39565
39547: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39548: LD_ADDR_VAR 0 3
39552: PUSH
39553: LD_INT 13
39555: PUSH
39556: LD_INT 14
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: ST_TO_ADDR
39563: GO 39934
39565: LD_INT 31
39567: DOUBLE
39568: EQUAL
39569: IFTRUE 39573
39571: GO 39591
39573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39574: LD_ADDR_VAR 0 3
39578: PUSH
39579: LD_INT 13
39581: PUSH
39582: LD_INT 14
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: ST_TO_ADDR
39589: GO 39934
39591: LD_INT 26
39593: DOUBLE
39594: EQUAL
39595: IFTRUE 39599
39597: GO 39617
39599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39600: LD_ADDR_VAR 0 3
39604: PUSH
39605: LD_INT 13
39607: PUSH
39608: LD_INT 14
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: ST_TO_ADDR
39615: GO 39934
39617: LD_INT 42
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39625
39623: GO 39651
39625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39626: LD_ADDR_VAR 0 3
39630: PUSH
39631: LD_INT 21
39633: PUSH
39634: LD_INT 22
39636: PUSH
39637: LD_INT 23
39639: PUSH
39640: LD_INT 24
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: ST_TO_ADDR
39649: GO 39934
39651: LD_INT 43
39653: DOUBLE
39654: EQUAL
39655: IFTRUE 39659
39657: GO 39685
39659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: LD_INT 21
39667: PUSH
39668: LD_INT 22
39670: PUSH
39671: LD_INT 23
39673: PUSH
39674: LD_INT 24
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: ST_TO_ADDR
39683: GO 39934
39685: LD_INT 44
39687: DOUBLE
39688: EQUAL
39689: IFTRUE 39693
39691: GO 39719
39693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39694: LD_ADDR_VAR 0 3
39698: PUSH
39699: LD_INT 21
39701: PUSH
39702: LD_INT 22
39704: PUSH
39705: LD_INT 23
39707: PUSH
39708: LD_INT 24
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: ST_TO_ADDR
39717: GO 39934
39719: LD_INT 45
39721: DOUBLE
39722: EQUAL
39723: IFTRUE 39727
39725: GO 39753
39727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_INT 21
39735: PUSH
39736: LD_INT 22
39738: PUSH
39739: LD_INT 23
39741: PUSH
39742: LD_INT 24
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: ST_TO_ADDR
39751: GO 39934
39753: LD_INT 49
39755: DOUBLE
39756: EQUAL
39757: IFTRUE 39761
39759: GO 39787
39761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39762: LD_ADDR_VAR 0 3
39766: PUSH
39767: LD_INT 21
39769: PUSH
39770: LD_INT 22
39772: PUSH
39773: LD_INT 23
39775: PUSH
39776: LD_INT 24
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: ST_TO_ADDR
39785: GO 39934
39787: LD_INT 51
39789: DOUBLE
39790: EQUAL
39791: IFTRUE 39795
39793: GO 39821
39795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39796: LD_ADDR_VAR 0 3
39800: PUSH
39801: LD_INT 21
39803: PUSH
39804: LD_INT 22
39806: PUSH
39807: LD_INT 23
39809: PUSH
39810: LD_INT 24
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: ST_TO_ADDR
39819: GO 39934
39821: LD_INT 52
39823: DOUBLE
39824: EQUAL
39825: IFTRUE 39829
39827: GO 39855
39829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39830: LD_ADDR_VAR 0 3
39834: PUSH
39835: LD_INT 21
39837: PUSH
39838: LD_INT 22
39840: PUSH
39841: LD_INT 23
39843: PUSH
39844: LD_INT 24
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: ST_TO_ADDR
39853: GO 39934
39855: LD_INT 53
39857: DOUBLE
39858: EQUAL
39859: IFTRUE 39863
39861: GO 39881
39863: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39864: LD_ADDR_VAR 0 3
39868: PUSH
39869: LD_INT 23
39871: PUSH
39872: LD_INT 24
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: ST_TO_ADDR
39879: GO 39934
39881: LD_INT 46
39883: DOUBLE
39884: EQUAL
39885: IFTRUE 39889
39887: GO 39907
39889: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39890: LD_ADDR_VAR 0 3
39894: PUSH
39895: LD_INT 23
39897: PUSH
39898: LD_INT 24
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: ST_TO_ADDR
39905: GO 39934
39907: LD_INT 47
39909: DOUBLE
39910: EQUAL
39911: IFTRUE 39915
39913: GO 39933
39915: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: LD_INT 23
39923: PUSH
39924: LD_INT 24
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: ST_TO_ADDR
39931: GO 39934
39933: POP
// result := ( chassis in result ) ;
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_VAR 0 1
39943: PUSH
39944: LD_VAR 0 3
39948: IN
39949: ST_TO_ADDR
// end ;
39950: LD_VAR 0 3
39954: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39955: LD_INT 0
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
// result := array ;
39964: LD_ADDR_VAR 0 5
39968: PUSH
39969: LD_VAR 0 1
39973: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39974: LD_VAR 0 1
39978: NOT
39979: PUSH
39980: LD_VAR 0 2
39984: NOT
39985: OR
39986: PUSH
39987: LD_VAR 0 3
39991: NOT
39992: OR
39993: PUSH
39994: LD_VAR 0 2
39998: PUSH
39999: LD_VAR 0 1
40003: GREATER
40004: OR
40005: PUSH
40006: LD_VAR 0 3
40010: PUSH
40011: LD_VAR 0 1
40015: GREATER
40016: OR
40017: IFFALSE 40021
// exit ;
40019: GO 40317
// if direction then
40021: LD_VAR 0 4
40025: IFFALSE 40089
// begin d := 1 ;
40027: LD_ADDR_VAR 0 9
40031: PUSH
40032: LD_INT 1
40034: ST_TO_ADDR
// if i_from > i_to then
40035: LD_VAR 0 2
40039: PUSH
40040: LD_VAR 0 3
40044: GREATER
40045: IFFALSE 40071
// length := ( array - i_from ) + i_to else
40047: LD_ADDR_VAR 0 11
40051: PUSH
40052: LD_VAR 0 1
40056: PUSH
40057: LD_VAR 0 2
40061: MINUS
40062: PUSH
40063: LD_VAR 0 3
40067: PLUS
40068: ST_TO_ADDR
40069: GO 40087
// length := i_to - i_from ;
40071: LD_ADDR_VAR 0 11
40075: PUSH
40076: LD_VAR 0 3
40080: PUSH
40081: LD_VAR 0 2
40085: MINUS
40086: ST_TO_ADDR
// end else
40087: GO 40150
// begin d := - 1 ;
40089: LD_ADDR_VAR 0 9
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: ST_TO_ADDR
// if i_from > i_to then
40098: LD_VAR 0 2
40102: PUSH
40103: LD_VAR 0 3
40107: GREATER
40108: IFFALSE 40128
// length := i_from - i_to else
40110: LD_ADDR_VAR 0 11
40114: PUSH
40115: LD_VAR 0 2
40119: PUSH
40120: LD_VAR 0 3
40124: MINUS
40125: ST_TO_ADDR
40126: GO 40150
// length := ( array - i_to ) + i_from ;
40128: LD_ADDR_VAR 0 11
40132: PUSH
40133: LD_VAR 0 1
40137: PUSH
40138: LD_VAR 0 3
40142: MINUS
40143: PUSH
40144: LD_VAR 0 2
40148: PLUS
40149: ST_TO_ADDR
// end ; if not length then
40150: LD_VAR 0 11
40154: NOT
40155: IFFALSE 40159
// exit ;
40157: GO 40317
// tmp := array ;
40159: LD_ADDR_VAR 0 10
40163: PUSH
40164: LD_VAR 0 1
40168: ST_TO_ADDR
// for i = 1 to length do
40169: LD_ADDR_VAR 0 6
40173: PUSH
40174: DOUBLE
40175: LD_INT 1
40177: DEC
40178: ST_TO_ADDR
40179: LD_VAR 0 11
40183: PUSH
40184: FOR_TO
40185: IFFALSE 40305
// begin for j = 1 to array do
40187: LD_ADDR_VAR 0 7
40191: PUSH
40192: DOUBLE
40193: LD_INT 1
40195: DEC
40196: ST_TO_ADDR
40197: LD_VAR 0 1
40201: PUSH
40202: FOR_TO
40203: IFFALSE 40291
// begin k := j + d ;
40205: LD_ADDR_VAR 0 8
40209: PUSH
40210: LD_VAR 0 7
40214: PUSH
40215: LD_VAR 0 9
40219: PLUS
40220: ST_TO_ADDR
// if k > array then
40221: LD_VAR 0 8
40225: PUSH
40226: LD_VAR 0 1
40230: GREATER
40231: IFFALSE 40241
// k := 1 ;
40233: LD_ADDR_VAR 0 8
40237: PUSH
40238: LD_INT 1
40240: ST_TO_ADDR
// if not k then
40241: LD_VAR 0 8
40245: NOT
40246: IFFALSE 40258
// k := array ;
40248: LD_ADDR_VAR 0 8
40252: PUSH
40253: LD_VAR 0 1
40257: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40258: LD_ADDR_VAR 0 10
40262: PUSH
40263: LD_VAR 0 10
40267: PPUSH
40268: LD_VAR 0 8
40272: PPUSH
40273: LD_VAR 0 1
40277: PUSH
40278: LD_VAR 0 7
40282: ARRAY
40283: PPUSH
40284: CALL_OW 1
40288: ST_TO_ADDR
// end ;
40289: GO 40202
40291: POP
40292: POP
// array := tmp ;
40293: LD_ADDR_VAR 0 1
40297: PUSH
40298: LD_VAR 0 10
40302: ST_TO_ADDR
// end ;
40303: GO 40184
40305: POP
40306: POP
// result := array ;
40307: LD_ADDR_VAR 0 5
40311: PUSH
40312: LD_VAR 0 1
40316: ST_TO_ADDR
// end ;
40317: LD_VAR 0 5
40321: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40322: LD_INT 0
40324: PPUSH
40325: PPUSH
// result := 0 ;
40326: LD_ADDR_VAR 0 3
40330: PUSH
40331: LD_INT 0
40333: ST_TO_ADDR
// if not array or not value in array then
40334: LD_VAR 0 1
40338: NOT
40339: PUSH
40340: LD_VAR 0 2
40344: PUSH
40345: LD_VAR 0 1
40349: IN
40350: NOT
40351: OR
40352: IFFALSE 40356
// exit ;
40354: GO 40410
// for i = 1 to array do
40356: LD_ADDR_VAR 0 4
40360: PUSH
40361: DOUBLE
40362: LD_INT 1
40364: DEC
40365: ST_TO_ADDR
40366: LD_VAR 0 1
40370: PUSH
40371: FOR_TO
40372: IFFALSE 40408
// if value = array [ i ] then
40374: LD_VAR 0 2
40378: PUSH
40379: LD_VAR 0 1
40383: PUSH
40384: LD_VAR 0 4
40388: ARRAY
40389: EQUAL
40390: IFFALSE 40406
// begin result := i ;
40392: LD_ADDR_VAR 0 3
40396: PUSH
40397: LD_VAR 0 4
40401: ST_TO_ADDR
// exit ;
40402: POP
40403: POP
40404: GO 40410
// end ;
40406: GO 40371
40408: POP
40409: POP
// end ;
40410: LD_VAR 0 3
40414: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40415: LD_INT 0
40417: PPUSH
// vc_chassis := chassis ;
40418: LD_ADDR_OWVAR 37
40422: PUSH
40423: LD_VAR 0 1
40427: ST_TO_ADDR
// vc_engine := engine ;
40428: LD_ADDR_OWVAR 39
40432: PUSH
40433: LD_VAR 0 2
40437: ST_TO_ADDR
// vc_control := control ;
40438: LD_ADDR_OWVAR 38
40442: PUSH
40443: LD_VAR 0 3
40447: ST_TO_ADDR
// vc_weapon := weapon ;
40448: LD_ADDR_OWVAR 40
40452: PUSH
40453: LD_VAR 0 4
40457: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40458: LD_ADDR_OWVAR 41
40462: PUSH
40463: LD_VAR 0 5
40467: ST_TO_ADDR
// end ;
40468: LD_VAR 0 6
40472: RET
// export function WantPlant ( unit ) ; var task ; begin
40473: LD_INT 0
40475: PPUSH
40476: PPUSH
// result := false ;
40477: LD_ADDR_VAR 0 2
40481: PUSH
40482: LD_INT 0
40484: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40485: LD_ADDR_VAR 0 3
40489: PUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 437
40499: ST_TO_ADDR
// if task then
40500: LD_VAR 0 3
40504: IFFALSE 40532
// if task [ 1 ] [ 1 ] = p then
40506: LD_VAR 0 3
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: PUSH
40515: LD_INT 1
40517: ARRAY
40518: PUSH
40519: LD_STRING p
40521: EQUAL
40522: IFFALSE 40532
// result := true ;
40524: LD_ADDR_VAR 0 2
40528: PUSH
40529: LD_INT 1
40531: ST_TO_ADDR
// end ;
40532: LD_VAR 0 2
40536: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40537: LD_INT 0
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
// if pos < 1 then
40543: LD_VAR 0 2
40547: PUSH
40548: LD_INT 1
40550: LESS
40551: IFFALSE 40555
// exit ;
40553: GO 40858
// if pos = 1 then
40555: LD_VAR 0 2
40559: PUSH
40560: LD_INT 1
40562: EQUAL
40563: IFFALSE 40596
// result := Replace ( arr , pos [ 1 ] , value ) else
40565: LD_ADDR_VAR 0 4
40569: PUSH
40570: LD_VAR 0 1
40574: PPUSH
40575: LD_VAR 0 2
40579: PUSH
40580: LD_INT 1
40582: ARRAY
40583: PPUSH
40584: LD_VAR 0 3
40588: PPUSH
40589: CALL_OW 1
40593: ST_TO_ADDR
40594: GO 40858
// begin tmp := arr ;
40596: LD_ADDR_VAR 0 6
40600: PUSH
40601: LD_VAR 0 1
40605: ST_TO_ADDR
// s_arr := [ tmp ] ;
40606: LD_ADDR_VAR 0 7
40610: PUSH
40611: LD_VAR 0 6
40615: PUSH
40616: EMPTY
40617: LIST
40618: ST_TO_ADDR
// for i = 1 to pos - 1 do
40619: LD_ADDR_VAR 0 5
40623: PUSH
40624: DOUBLE
40625: LD_INT 1
40627: DEC
40628: ST_TO_ADDR
40629: LD_VAR 0 2
40633: PUSH
40634: LD_INT 1
40636: MINUS
40637: PUSH
40638: FOR_TO
40639: IFFALSE 40684
// begin tmp := tmp [ pos [ i ] ] ;
40641: LD_ADDR_VAR 0 6
40645: PUSH
40646: LD_VAR 0 6
40650: PUSH
40651: LD_VAR 0 2
40655: PUSH
40656: LD_VAR 0 5
40660: ARRAY
40661: ARRAY
40662: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40663: LD_ADDR_VAR 0 7
40667: PUSH
40668: LD_VAR 0 7
40672: PUSH
40673: LD_VAR 0 6
40677: PUSH
40678: EMPTY
40679: LIST
40680: ADD
40681: ST_TO_ADDR
// end ;
40682: GO 40638
40684: POP
40685: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40686: LD_ADDR_VAR 0 6
40690: PUSH
40691: LD_VAR 0 6
40695: PPUSH
40696: LD_VAR 0 2
40700: PUSH
40701: LD_VAR 0 2
40705: ARRAY
40706: PPUSH
40707: LD_VAR 0 3
40711: PPUSH
40712: CALL_OW 1
40716: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40717: LD_ADDR_VAR 0 7
40721: PUSH
40722: LD_VAR 0 7
40726: PPUSH
40727: LD_VAR 0 7
40731: PPUSH
40732: LD_VAR 0 6
40736: PPUSH
40737: CALL_OW 1
40741: ST_TO_ADDR
// for i = s_arr downto 2 do
40742: LD_ADDR_VAR 0 5
40746: PUSH
40747: DOUBLE
40748: LD_VAR 0 7
40752: INC
40753: ST_TO_ADDR
40754: LD_INT 2
40756: PUSH
40757: FOR_DOWNTO
40758: IFFALSE 40842
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40760: LD_ADDR_VAR 0 6
40764: PUSH
40765: LD_VAR 0 7
40769: PUSH
40770: LD_VAR 0 5
40774: PUSH
40775: LD_INT 1
40777: MINUS
40778: ARRAY
40779: PPUSH
40780: LD_VAR 0 2
40784: PUSH
40785: LD_VAR 0 5
40789: PUSH
40790: LD_INT 1
40792: MINUS
40793: ARRAY
40794: PPUSH
40795: LD_VAR 0 7
40799: PUSH
40800: LD_VAR 0 5
40804: ARRAY
40805: PPUSH
40806: CALL_OW 1
40810: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40811: LD_ADDR_VAR 0 7
40815: PUSH
40816: LD_VAR 0 7
40820: PPUSH
40821: LD_VAR 0 5
40825: PUSH
40826: LD_INT 1
40828: MINUS
40829: PPUSH
40830: LD_VAR 0 6
40834: PPUSH
40835: CALL_OW 1
40839: ST_TO_ADDR
// end ;
40840: GO 40757
40842: POP
40843: POP
// result := s_arr [ 1 ] ;
40844: LD_ADDR_VAR 0 4
40848: PUSH
40849: LD_VAR 0 7
40853: PUSH
40854: LD_INT 1
40856: ARRAY
40857: ST_TO_ADDR
// end ; end ;
40858: LD_VAR 0 4
40862: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40863: LD_INT 0
40865: PPUSH
40866: PPUSH
// if not list then
40867: LD_VAR 0 1
40871: NOT
40872: IFFALSE 40876
// exit ;
40874: GO 40967
// i := list [ pos1 ] ;
40876: LD_ADDR_VAR 0 5
40880: PUSH
40881: LD_VAR 0 1
40885: PUSH
40886: LD_VAR 0 2
40890: ARRAY
40891: ST_TO_ADDR
// if not i then
40892: LD_VAR 0 5
40896: NOT
40897: IFFALSE 40901
// exit ;
40899: GO 40967
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40901: LD_ADDR_VAR 0 1
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: LD_VAR 0 2
40915: PPUSH
40916: LD_VAR 0 1
40920: PUSH
40921: LD_VAR 0 3
40925: ARRAY
40926: PPUSH
40927: CALL_OW 1
40931: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40932: LD_ADDR_VAR 0 1
40936: PUSH
40937: LD_VAR 0 1
40941: PPUSH
40942: LD_VAR 0 3
40946: PPUSH
40947: LD_VAR 0 5
40951: PPUSH
40952: CALL_OW 1
40956: ST_TO_ADDR
// result := list ;
40957: LD_ADDR_VAR 0 4
40961: PUSH
40962: LD_VAR 0 1
40966: ST_TO_ADDR
// end ;
40967: LD_VAR 0 4
40971: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40972: LD_INT 0
40974: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40975: LD_ADDR_VAR 0 5
40979: PUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: CALL_OW 250
40989: PPUSH
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL_OW 251
40999: PPUSH
41000: LD_VAR 0 2
41004: PPUSH
41005: LD_VAR 0 3
41009: PPUSH
41010: LD_VAR 0 4
41014: PPUSH
41015: CALL 41393 0 5
41019: ST_TO_ADDR
// end ;
41020: LD_VAR 0 5
41024: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41025: LD_INT 0
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
// if not list or not unit then
41031: LD_VAR 0 2
41035: NOT
41036: PUSH
41037: LD_VAR 0 1
41041: NOT
41042: OR
41043: IFFALSE 41047
// exit ;
41045: GO 41388
// result := [ ] ;
41047: LD_ADDR_VAR 0 5
41051: PUSH
41052: EMPTY
41053: ST_TO_ADDR
// for i in list do
41054: LD_ADDR_VAR 0 6
41058: PUSH
41059: LD_VAR 0 2
41063: PUSH
41064: FOR_IN
41065: IFFALSE 41283
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41067: LD_ADDR_VAR 0 8
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: LD_VAR 0 6
41081: PUSH
41082: LD_INT 1
41084: ARRAY
41085: PPUSH
41086: LD_VAR 0 6
41090: PUSH
41091: LD_INT 2
41093: ARRAY
41094: PPUSH
41095: CALL_OW 297
41099: ST_TO_ADDR
// if not Count ( result ) then
41100: LD_VAR 0 5
41104: PPUSH
41105: CALL 37677 0 1
41109: NOT
41110: IFFALSE 41143
// begin result := Join ( result , [ i , tmp ] ) ;
41112: LD_ADDR_VAR 0 5
41116: PUSH
41117: LD_VAR 0 5
41121: PPUSH
41122: LD_VAR 0 6
41126: PUSH
41127: LD_VAR 0 8
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PPUSH
41136: CALL 73277 0 2
41140: ST_TO_ADDR
// continue ;
41141: GO 41064
// end ; if result [ result ] [ 2 ] <= tmp then
41143: LD_VAR 0 5
41147: PUSH
41148: LD_VAR 0 5
41152: ARRAY
41153: PUSH
41154: LD_INT 2
41156: ARRAY
41157: PUSH
41158: LD_VAR 0 8
41162: LESSEQUAL
41163: IFFALSE 41196
// result := Join ( result , [ i , tmp ] ) else
41165: LD_ADDR_VAR 0 5
41169: PUSH
41170: LD_VAR 0 5
41174: PPUSH
41175: LD_VAR 0 6
41179: PUSH
41180: LD_VAR 0 8
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PPUSH
41189: CALL 73277 0 2
41193: ST_TO_ADDR
41194: GO 41281
// begin for j := 1 to Count ( result ) do
41196: LD_ADDR_VAR 0 7
41200: PUSH
41201: DOUBLE
41202: LD_INT 1
41204: DEC
41205: ST_TO_ADDR
41206: LD_VAR 0 5
41210: PPUSH
41211: CALL 37677 0 1
41215: PUSH
41216: FOR_TO
41217: IFFALSE 41279
// begin if tmp < result [ j ] [ 2 ] then
41219: LD_VAR 0 8
41223: PUSH
41224: LD_VAR 0 5
41228: PUSH
41229: LD_VAR 0 7
41233: ARRAY
41234: PUSH
41235: LD_INT 2
41237: ARRAY
41238: LESS
41239: IFFALSE 41277
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41241: LD_ADDR_VAR 0 5
41245: PUSH
41246: LD_VAR 0 5
41250: PPUSH
41251: LD_VAR 0 7
41255: PPUSH
41256: LD_VAR 0 6
41260: PUSH
41261: LD_VAR 0 8
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PPUSH
41270: CALL_OW 2
41274: ST_TO_ADDR
// break ;
41275: GO 41279
// end ; end ;
41277: GO 41216
41279: POP
41280: POP
// end ; end ;
41281: GO 41064
41283: POP
41284: POP
// if result and not asc then
41285: LD_VAR 0 5
41289: PUSH
41290: LD_VAR 0 3
41294: NOT
41295: AND
41296: IFFALSE 41313
// result := ReverseArray ( result ) ;
41298: LD_ADDR_VAR 0 5
41302: PUSH
41303: LD_VAR 0 5
41307: PPUSH
41308: CALL 68553 0 1
41312: ST_TO_ADDR
// tmp := [ ] ;
41313: LD_ADDR_VAR 0 8
41317: PUSH
41318: EMPTY
41319: ST_TO_ADDR
// if mode then
41320: LD_VAR 0 4
41324: IFFALSE 41388
// begin for i := 1 to result do
41326: LD_ADDR_VAR 0 6
41330: PUSH
41331: DOUBLE
41332: LD_INT 1
41334: DEC
41335: ST_TO_ADDR
41336: LD_VAR 0 5
41340: PUSH
41341: FOR_TO
41342: IFFALSE 41376
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41344: LD_ADDR_VAR 0 8
41348: PUSH
41349: LD_VAR 0 8
41353: PPUSH
41354: LD_VAR 0 5
41358: PUSH
41359: LD_VAR 0 6
41363: ARRAY
41364: PUSH
41365: LD_INT 1
41367: ARRAY
41368: PPUSH
41369: CALL 73277 0 2
41373: ST_TO_ADDR
41374: GO 41341
41376: POP
41377: POP
// result := tmp ;
41378: LD_ADDR_VAR 0 5
41382: PUSH
41383: LD_VAR 0 8
41387: ST_TO_ADDR
// end ; end ;
41388: LD_VAR 0 5
41392: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41393: LD_INT 0
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
// if not list then
41399: LD_VAR 0 3
41403: NOT
41404: IFFALSE 41408
// exit ;
41406: GO 41796
// result := [ ] ;
41408: LD_ADDR_VAR 0 6
41412: PUSH
41413: EMPTY
41414: ST_TO_ADDR
// for i in list do
41415: LD_ADDR_VAR 0 7
41419: PUSH
41420: LD_VAR 0 3
41424: PUSH
41425: FOR_IN
41426: IFFALSE 41628
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41428: LD_ADDR_VAR 0 9
41432: PUSH
41433: LD_VAR 0 7
41437: PPUSH
41438: LD_VAR 0 1
41442: PPUSH
41443: LD_VAR 0 2
41447: PPUSH
41448: CALL_OW 297
41452: ST_TO_ADDR
// if not result then
41453: LD_VAR 0 6
41457: NOT
41458: IFFALSE 41484
// result := [ [ i , tmp ] ] else
41460: LD_ADDR_VAR 0 6
41464: PUSH
41465: LD_VAR 0 7
41469: PUSH
41470: LD_VAR 0 9
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: ST_TO_ADDR
41482: GO 41626
// begin if result [ result ] [ 2 ] < tmp then
41484: LD_VAR 0 6
41488: PUSH
41489: LD_VAR 0 6
41493: ARRAY
41494: PUSH
41495: LD_INT 2
41497: ARRAY
41498: PUSH
41499: LD_VAR 0 9
41503: LESS
41504: IFFALSE 41546
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41506: LD_ADDR_VAR 0 6
41510: PUSH
41511: LD_VAR 0 6
41515: PPUSH
41516: LD_VAR 0 6
41520: PUSH
41521: LD_INT 1
41523: PLUS
41524: PPUSH
41525: LD_VAR 0 7
41529: PUSH
41530: LD_VAR 0 9
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PPUSH
41539: CALL_OW 2
41543: ST_TO_ADDR
41544: GO 41626
// for j = 1 to result do
41546: LD_ADDR_VAR 0 8
41550: PUSH
41551: DOUBLE
41552: LD_INT 1
41554: DEC
41555: ST_TO_ADDR
41556: LD_VAR 0 6
41560: PUSH
41561: FOR_TO
41562: IFFALSE 41624
// begin if tmp < result [ j ] [ 2 ] then
41564: LD_VAR 0 9
41568: PUSH
41569: LD_VAR 0 6
41573: PUSH
41574: LD_VAR 0 8
41578: ARRAY
41579: PUSH
41580: LD_INT 2
41582: ARRAY
41583: LESS
41584: IFFALSE 41622
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41586: LD_ADDR_VAR 0 6
41590: PUSH
41591: LD_VAR 0 6
41595: PPUSH
41596: LD_VAR 0 8
41600: PPUSH
41601: LD_VAR 0 7
41605: PUSH
41606: LD_VAR 0 9
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PPUSH
41615: CALL_OW 2
41619: ST_TO_ADDR
// break ;
41620: GO 41624
// end ; end ;
41622: GO 41561
41624: POP
41625: POP
// end ; end ;
41626: GO 41425
41628: POP
41629: POP
// if result and not asc then
41630: LD_VAR 0 6
41634: PUSH
41635: LD_VAR 0 4
41639: NOT
41640: AND
41641: IFFALSE 41716
// begin tmp := result ;
41643: LD_ADDR_VAR 0 9
41647: PUSH
41648: LD_VAR 0 6
41652: ST_TO_ADDR
// for i = tmp downto 1 do
41653: LD_ADDR_VAR 0 7
41657: PUSH
41658: DOUBLE
41659: LD_VAR 0 9
41663: INC
41664: ST_TO_ADDR
41665: LD_INT 1
41667: PUSH
41668: FOR_DOWNTO
41669: IFFALSE 41714
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41671: LD_ADDR_VAR 0 6
41675: PUSH
41676: LD_VAR 0 6
41680: PPUSH
41681: LD_VAR 0 9
41685: PUSH
41686: LD_VAR 0 7
41690: MINUS
41691: PUSH
41692: LD_INT 1
41694: PLUS
41695: PPUSH
41696: LD_VAR 0 9
41700: PUSH
41701: LD_VAR 0 7
41705: ARRAY
41706: PPUSH
41707: CALL_OW 1
41711: ST_TO_ADDR
41712: GO 41668
41714: POP
41715: POP
// end ; tmp := [ ] ;
41716: LD_ADDR_VAR 0 9
41720: PUSH
41721: EMPTY
41722: ST_TO_ADDR
// if mode then
41723: LD_VAR 0 5
41727: IFFALSE 41796
// begin for i = 1 to result do
41729: LD_ADDR_VAR 0 7
41733: PUSH
41734: DOUBLE
41735: LD_INT 1
41737: DEC
41738: ST_TO_ADDR
41739: LD_VAR 0 6
41743: PUSH
41744: FOR_TO
41745: IFFALSE 41784
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41747: LD_ADDR_VAR 0 9
41751: PUSH
41752: LD_VAR 0 9
41756: PPUSH
41757: LD_VAR 0 7
41761: PPUSH
41762: LD_VAR 0 6
41766: PUSH
41767: LD_VAR 0 7
41771: ARRAY
41772: PUSH
41773: LD_INT 1
41775: ARRAY
41776: PPUSH
41777: CALL_OW 1
41781: ST_TO_ADDR
41782: GO 41744
41784: POP
41785: POP
// result := tmp ;
41786: LD_ADDR_VAR 0 6
41790: PUSH
41791: LD_VAR 0 9
41795: ST_TO_ADDR
// end ; end ;
41796: LD_VAR 0 6
41800: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41801: LD_INT 0
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41809: LD_ADDR_VAR 0 5
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: ST_TO_ADDR
// if not x or not y then
41831: LD_VAR 0 2
41835: NOT
41836: PUSH
41837: LD_VAR 0 3
41841: NOT
41842: OR
41843: IFFALSE 41847
// exit ;
41845: GO 43497
// if not range then
41847: LD_VAR 0 4
41851: NOT
41852: IFFALSE 41862
// range := 10 ;
41854: LD_ADDR_VAR 0 4
41858: PUSH
41859: LD_INT 10
41861: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41862: LD_ADDR_VAR 0 8
41866: PUSH
41867: LD_INT 81
41869: PUSH
41870: LD_VAR 0 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 92
41881: PUSH
41882: LD_VAR 0 2
41886: PUSH
41887: LD_VAR 0 3
41891: PUSH
41892: LD_VAR 0 4
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 3
41905: PUSH
41906: LD_INT 21
41908: PUSH
41909: LD_INT 3
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: PPUSH
41925: CALL_OW 69
41929: ST_TO_ADDR
// if not tmp then
41930: LD_VAR 0 8
41934: NOT
41935: IFFALSE 41939
// exit ;
41937: GO 43497
// for i in tmp do
41939: LD_ADDR_VAR 0 6
41943: PUSH
41944: LD_VAR 0 8
41948: PUSH
41949: FOR_IN
41950: IFFALSE 43472
// begin points := [ 0 , 0 , 0 ] ;
41952: LD_ADDR_VAR 0 9
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: ST_TO_ADDR
// bpoints := 1 ;
41971: LD_ADDR_VAR 0 10
41975: PUSH
41976: LD_INT 1
41978: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41979: LD_VAR 0 6
41983: PPUSH
41984: CALL_OW 247
41988: PUSH
41989: LD_INT 1
41991: DOUBLE
41992: EQUAL
41993: IFTRUE 41997
41995: GO 42575
41997: POP
// begin if GetClass ( i ) = 1 then
41998: LD_VAR 0 6
42002: PPUSH
42003: CALL_OW 257
42007: PUSH
42008: LD_INT 1
42010: EQUAL
42011: IFFALSE 42032
// points := [ 10 , 5 , 3 ] ;
42013: LD_ADDR_VAR 0 9
42017: PUSH
42018: LD_INT 10
42020: PUSH
42021: LD_INT 5
42023: PUSH
42024: LD_INT 3
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42032: LD_VAR 0 6
42036: PPUSH
42037: CALL_OW 257
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: LD_INT 3
42047: PUSH
42048: LD_INT 4
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: IN
42056: IFFALSE 42077
// points := [ 3 , 2 , 1 ] ;
42058: LD_ADDR_VAR 0 9
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42077: LD_VAR 0 6
42081: PPUSH
42082: CALL_OW 257
42086: PUSH
42087: LD_INT 5
42089: EQUAL
42090: IFFALSE 42111
// points := [ 130 , 5 , 2 ] ;
42092: LD_ADDR_VAR 0 9
42096: PUSH
42097: LD_INT 130
42099: PUSH
42100: LD_INT 5
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42111: LD_VAR 0 6
42115: PPUSH
42116: CALL_OW 257
42120: PUSH
42121: LD_INT 8
42123: EQUAL
42124: IFFALSE 42145
// points := [ 35 , 35 , 30 ] ;
42126: LD_ADDR_VAR 0 9
42130: PUSH
42131: LD_INT 35
42133: PUSH
42134: LD_INT 35
42136: PUSH
42137: LD_INT 30
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42145: LD_VAR 0 6
42149: PPUSH
42150: CALL_OW 257
42154: PUSH
42155: LD_INT 9
42157: EQUAL
42158: IFFALSE 42179
// points := [ 20 , 55 , 40 ] ;
42160: LD_ADDR_VAR 0 9
42164: PUSH
42165: LD_INT 20
42167: PUSH
42168: LD_INT 55
42170: PUSH
42171: LD_INT 40
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: LIST
42178: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42179: LD_VAR 0 6
42183: PPUSH
42184: CALL_OW 257
42188: PUSH
42189: LD_INT 12
42191: PUSH
42192: LD_INT 16
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: IN
42199: IFFALSE 42220
// points := [ 5 , 3 , 2 ] ;
42201: LD_ADDR_VAR 0 9
42205: PUSH
42206: LD_INT 5
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42220: LD_VAR 0 6
42224: PPUSH
42225: CALL_OW 257
42229: PUSH
42230: LD_INT 17
42232: EQUAL
42233: IFFALSE 42254
// points := [ 100 , 50 , 75 ] ;
42235: LD_ADDR_VAR 0 9
42239: PUSH
42240: LD_INT 100
42242: PUSH
42243: LD_INT 50
42245: PUSH
42246: LD_INT 75
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42254: LD_VAR 0 6
42258: PPUSH
42259: CALL_OW 257
42263: PUSH
42264: LD_INT 15
42266: EQUAL
42267: IFFALSE 42288
// points := [ 10 , 5 , 3 ] ;
42269: LD_ADDR_VAR 0 9
42273: PUSH
42274: LD_INT 10
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42288: LD_VAR 0 6
42292: PPUSH
42293: CALL_OW 257
42297: PUSH
42298: LD_INT 14
42300: EQUAL
42301: IFFALSE 42322
// points := [ 10 , 0 , 0 ] ;
42303: LD_ADDR_VAR 0 9
42307: PUSH
42308: LD_INT 10
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42322: LD_VAR 0 6
42326: PPUSH
42327: CALL_OW 257
42331: PUSH
42332: LD_INT 11
42334: EQUAL
42335: IFFALSE 42356
// points := [ 30 , 10 , 5 ] ;
42337: LD_ADDR_VAR 0 9
42341: PUSH
42342: LD_INT 30
42344: PUSH
42345: LD_INT 10
42347: PUSH
42348: LD_INT 5
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42356: LD_VAR 0 1
42360: PPUSH
42361: LD_INT 5
42363: PPUSH
42364: CALL_OW 321
42368: PUSH
42369: LD_INT 2
42371: EQUAL
42372: IFFALSE 42389
// bpoints := bpoints * 1.8 ;
42374: LD_ADDR_VAR 0 10
42378: PUSH
42379: LD_VAR 0 10
42383: PUSH
42384: LD_REAL  1.80000000000000E+0000
42387: MUL
42388: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42389: LD_VAR 0 6
42393: PPUSH
42394: CALL_OW 257
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 4
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: IN
42417: PUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: LD_INT 51
42425: PPUSH
42426: CALL_OW 321
42430: PUSH
42431: LD_INT 2
42433: EQUAL
42434: AND
42435: IFFALSE 42452
// bpoints := bpoints * 1.2 ;
42437: LD_ADDR_VAR 0 10
42441: PUSH
42442: LD_VAR 0 10
42446: PUSH
42447: LD_REAL  1.20000000000000E+0000
42450: MUL
42451: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42452: LD_VAR 0 6
42456: PPUSH
42457: CALL_OW 257
42461: PUSH
42462: LD_INT 5
42464: PUSH
42465: LD_INT 7
42467: PUSH
42468: LD_INT 9
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: IN
42476: PUSH
42477: LD_VAR 0 1
42481: PPUSH
42482: LD_INT 52
42484: PPUSH
42485: CALL_OW 321
42489: PUSH
42490: LD_INT 2
42492: EQUAL
42493: AND
42494: IFFALSE 42511
// bpoints := bpoints * 1.5 ;
42496: LD_ADDR_VAR 0 10
42500: PUSH
42501: LD_VAR 0 10
42505: PUSH
42506: LD_REAL  1.50000000000000E+0000
42509: MUL
42510: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42511: LD_VAR 0 1
42515: PPUSH
42516: LD_INT 66
42518: PPUSH
42519: CALL_OW 321
42523: PUSH
42524: LD_INT 2
42526: EQUAL
42527: IFFALSE 42544
// bpoints := bpoints * 1.1 ;
42529: LD_ADDR_VAR 0 10
42533: PUSH
42534: LD_VAR 0 10
42538: PUSH
42539: LD_REAL  1.10000000000000E+0000
42542: MUL
42543: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42544: LD_ADDR_VAR 0 10
42548: PUSH
42549: LD_VAR 0 10
42553: PUSH
42554: LD_VAR 0 6
42558: PPUSH
42559: LD_INT 1
42561: PPUSH
42562: CALL_OW 259
42566: PUSH
42567: LD_REAL  1.15000000000000E+0000
42570: MUL
42571: MUL
42572: ST_TO_ADDR
// end ; unit_vehicle :
42573: GO 43401
42575: LD_INT 2
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42583
42581: GO 43389
42583: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42584: LD_VAR 0 6
42588: PPUSH
42589: CALL_OW 264
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 42
42599: PUSH
42600: LD_INT 24
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: IN
42608: IFFALSE 42629
// points := [ 25 , 5 , 3 ] ;
42610: LD_ADDR_VAR 0 9
42614: PUSH
42615: LD_INT 25
42617: PUSH
42618: LD_INT 5
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42629: LD_VAR 0 6
42633: PPUSH
42634: CALL_OW 264
42638: PUSH
42639: LD_INT 4
42641: PUSH
42642: LD_INT 43
42644: PUSH
42645: LD_INT 25
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: LIST
42652: IN
42653: IFFALSE 42674
// points := [ 40 , 15 , 5 ] ;
42655: LD_ADDR_VAR 0 9
42659: PUSH
42660: LD_INT 40
42662: PUSH
42663: LD_INT 15
42665: PUSH
42666: LD_INT 5
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42674: LD_VAR 0 6
42678: PPUSH
42679: CALL_OW 264
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 23
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: IN
42694: IFFALSE 42715
// points := [ 7 , 25 , 8 ] ;
42696: LD_ADDR_VAR 0 9
42700: PUSH
42701: LD_INT 7
42703: PUSH
42704: LD_INT 25
42706: PUSH
42707: LD_INT 8
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: LIST
42714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42715: LD_VAR 0 6
42719: PPUSH
42720: CALL_OW 264
42724: PUSH
42725: LD_INT 5
42727: PUSH
42728: LD_INT 27
42730: PUSH
42731: LD_INT 44
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: IN
42739: IFFALSE 42760
// points := [ 14 , 50 , 16 ] ;
42741: LD_ADDR_VAR 0 9
42745: PUSH
42746: LD_INT 14
42748: PUSH
42749: LD_INT 50
42751: PUSH
42752: LD_INT 16
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42760: LD_VAR 0 6
42764: PPUSH
42765: CALL_OW 264
42769: PUSH
42770: LD_INT 6
42772: PUSH
42773: LD_INT 46
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: IN
42780: IFFALSE 42801
// points := [ 32 , 120 , 70 ] ;
42782: LD_ADDR_VAR 0 9
42786: PUSH
42787: LD_INT 32
42789: PUSH
42790: LD_INT 120
42792: PUSH
42793: LD_INT 70
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42801: LD_VAR 0 6
42805: PPUSH
42806: CALL_OW 264
42810: PUSH
42811: LD_INT 7
42813: PUSH
42814: LD_INT 28
42816: PUSH
42817: LD_INT 45
42819: PUSH
42820: LD_INT 92
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: IN
42829: IFFALSE 42850
// points := [ 35 , 20 , 45 ] ;
42831: LD_ADDR_VAR 0 9
42835: PUSH
42836: LD_INT 35
42838: PUSH
42839: LD_INT 20
42841: PUSH
42842: LD_INT 45
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42850: LD_VAR 0 6
42854: PPUSH
42855: CALL_OW 264
42859: PUSH
42860: LD_INT 47
42862: PUSH
42863: EMPTY
42864: LIST
42865: IN
42866: IFFALSE 42887
// points := [ 67 , 45 , 75 ] ;
42868: LD_ADDR_VAR 0 9
42872: PUSH
42873: LD_INT 67
42875: PUSH
42876: LD_INT 45
42878: PUSH
42879: LD_INT 75
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42887: LD_VAR 0 6
42891: PPUSH
42892: CALL_OW 264
42896: PUSH
42897: LD_INT 26
42899: PUSH
42900: EMPTY
42901: LIST
42902: IN
42903: IFFALSE 42924
// points := [ 120 , 30 , 80 ] ;
42905: LD_ADDR_VAR 0 9
42909: PUSH
42910: LD_INT 120
42912: PUSH
42913: LD_INT 30
42915: PUSH
42916: LD_INT 80
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42924: LD_VAR 0 6
42928: PPUSH
42929: CALL_OW 264
42933: PUSH
42934: LD_INT 22
42936: PUSH
42937: EMPTY
42938: LIST
42939: IN
42940: IFFALSE 42961
// points := [ 40 , 1 , 1 ] ;
42942: LD_ADDR_VAR 0 9
42946: PUSH
42947: LD_INT 40
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42961: LD_VAR 0 6
42965: PPUSH
42966: CALL_OW 264
42970: PUSH
42971: LD_INT 29
42973: PUSH
42974: EMPTY
42975: LIST
42976: IN
42977: IFFALSE 42998
// points := [ 70 , 200 , 400 ] ;
42979: LD_ADDR_VAR 0 9
42983: PUSH
42984: LD_INT 70
42986: PUSH
42987: LD_INT 200
42989: PUSH
42990: LD_INT 400
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42998: LD_VAR 0 6
43002: PPUSH
43003: CALL_OW 264
43007: PUSH
43008: LD_INT 14
43010: PUSH
43011: LD_INT 53
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: IN
43018: IFFALSE 43039
// points := [ 40 , 10 , 20 ] ;
43020: LD_ADDR_VAR 0 9
43024: PUSH
43025: LD_INT 40
43027: PUSH
43028: LD_INT 10
43030: PUSH
43031: LD_INT 20
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43039: LD_VAR 0 6
43043: PPUSH
43044: CALL_OW 264
43048: PUSH
43049: LD_INT 9
43051: PUSH
43052: EMPTY
43053: LIST
43054: IN
43055: IFFALSE 43076
// points := [ 5 , 70 , 20 ] ;
43057: LD_ADDR_VAR 0 9
43061: PUSH
43062: LD_INT 5
43064: PUSH
43065: LD_INT 70
43067: PUSH
43068: LD_INT 20
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43076: LD_VAR 0 6
43080: PPUSH
43081: CALL_OW 264
43085: PUSH
43086: LD_INT 10
43088: PUSH
43089: EMPTY
43090: LIST
43091: IN
43092: IFFALSE 43113
// points := [ 35 , 110 , 70 ] ;
43094: LD_ADDR_VAR 0 9
43098: PUSH
43099: LD_INT 35
43101: PUSH
43102: LD_INT 110
43104: PUSH
43105: LD_INT 70
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43113: LD_VAR 0 6
43117: PPUSH
43118: CALL_OW 265
43122: PUSH
43123: LD_INT 25
43125: EQUAL
43126: IFFALSE 43147
// points := [ 80 , 65 , 100 ] ;
43128: LD_ADDR_VAR 0 9
43132: PUSH
43133: LD_INT 80
43135: PUSH
43136: LD_INT 65
43138: PUSH
43139: LD_INT 100
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43147: LD_VAR 0 6
43151: PPUSH
43152: CALL_OW 263
43156: PUSH
43157: LD_INT 1
43159: EQUAL
43160: IFFALSE 43195
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43162: LD_ADDR_VAR 0 10
43166: PUSH
43167: LD_VAR 0 10
43171: PUSH
43172: LD_VAR 0 6
43176: PPUSH
43177: CALL_OW 311
43181: PPUSH
43182: LD_INT 3
43184: PPUSH
43185: CALL_OW 259
43189: PUSH
43190: LD_INT 4
43192: MUL
43193: MUL
43194: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43195: LD_VAR 0 6
43199: PPUSH
43200: CALL_OW 263
43204: PUSH
43205: LD_INT 2
43207: EQUAL
43208: IFFALSE 43259
// begin j := IsControledBy ( i ) ;
43210: LD_ADDR_VAR 0 7
43214: PUSH
43215: LD_VAR 0 6
43219: PPUSH
43220: CALL_OW 312
43224: ST_TO_ADDR
// if j then
43225: LD_VAR 0 7
43229: IFFALSE 43259
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43231: LD_ADDR_VAR 0 10
43235: PUSH
43236: LD_VAR 0 10
43240: PUSH
43241: LD_VAR 0 7
43245: PPUSH
43246: LD_INT 3
43248: PPUSH
43249: CALL_OW 259
43253: PUSH
43254: LD_INT 3
43256: MUL
43257: MUL
43258: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43259: LD_VAR 0 6
43263: PPUSH
43264: CALL_OW 264
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: LD_INT 6
43274: PUSH
43275: LD_INT 46
43277: PUSH
43278: LD_INT 44
43280: PUSH
43281: LD_INT 47
43283: PUSH
43284: LD_INT 45
43286: PUSH
43287: LD_INT 28
43289: PUSH
43290: LD_INT 7
43292: PUSH
43293: LD_INT 27
43295: PUSH
43296: LD_INT 29
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: IN
43311: PUSH
43312: LD_VAR 0 1
43316: PPUSH
43317: LD_INT 52
43319: PPUSH
43320: CALL_OW 321
43324: PUSH
43325: LD_INT 2
43327: EQUAL
43328: AND
43329: IFFALSE 43346
// bpoints := bpoints * 1.2 ;
43331: LD_ADDR_VAR 0 10
43335: PUSH
43336: LD_VAR 0 10
43340: PUSH
43341: LD_REAL  1.20000000000000E+0000
43344: MUL
43345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43346: LD_VAR 0 6
43350: PPUSH
43351: CALL_OW 264
43355: PUSH
43356: LD_INT 6
43358: PUSH
43359: LD_INT 46
43361: PUSH
43362: LD_INT 47
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: IN
43370: IFFALSE 43387
// bpoints := bpoints * 1.2 ;
43372: LD_ADDR_VAR 0 10
43376: PUSH
43377: LD_VAR 0 10
43381: PUSH
43382: LD_REAL  1.20000000000000E+0000
43385: MUL
43386: ST_TO_ADDR
// end ; unit_building :
43387: GO 43401
43389: LD_INT 3
43391: DOUBLE
43392: EQUAL
43393: IFTRUE 43397
43395: GO 43400
43397: POP
// ; end ;
43398: GO 43401
43400: POP
// for j = 1 to 3 do
43401: LD_ADDR_VAR 0 7
43405: PUSH
43406: DOUBLE
43407: LD_INT 1
43409: DEC
43410: ST_TO_ADDR
43411: LD_INT 3
43413: PUSH
43414: FOR_TO
43415: IFFALSE 43468
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43417: LD_ADDR_VAR 0 5
43421: PUSH
43422: LD_VAR 0 5
43426: PPUSH
43427: LD_VAR 0 7
43431: PPUSH
43432: LD_VAR 0 5
43436: PUSH
43437: LD_VAR 0 7
43441: ARRAY
43442: PUSH
43443: LD_VAR 0 9
43447: PUSH
43448: LD_VAR 0 7
43452: ARRAY
43453: PUSH
43454: LD_VAR 0 10
43458: MUL
43459: PLUS
43460: PPUSH
43461: CALL_OW 1
43465: ST_TO_ADDR
43466: GO 43414
43468: POP
43469: POP
// end ;
43470: GO 41949
43472: POP
43473: POP
// result := Replace ( result , 4 , tmp ) ;
43474: LD_ADDR_VAR 0 5
43478: PUSH
43479: LD_VAR 0 5
43483: PPUSH
43484: LD_INT 4
43486: PPUSH
43487: LD_VAR 0 8
43491: PPUSH
43492: CALL_OW 1
43496: ST_TO_ADDR
// end ;
43497: LD_VAR 0 5
43501: RET
// export function DangerAtRange ( unit , range ) ; begin
43502: LD_INT 0
43504: PPUSH
// if not unit then
43505: LD_VAR 0 1
43509: NOT
43510: IFFALSE 43514
// exit ;
43512: GO 43559
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43514: LD_ADDR_VAR 0 3
43518: PUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: CALL_OW 255
43528: PPUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 250
43538: PPUSH
43539: LD_VAR 0 1
43543: PPUSH
43544: CALL_OW 251
43548: PPUSH
43549: LD_VAR 0 2
43553: PPUSH
43554: CALL 41801 0 4
43558: ST_TO_ADDR
// end ;
43559: LD_VAR 0 3
43563: RET
// export function DangerInArea ( side , area ) ; begin
43564: LD_INT 0
43566: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_VAR 0 2
43576: PPUSH
43577: LD_INT 81
43579: PUSH
43580: LD_VAR 0 1
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PPUSH
43589: CALL_OW 70
43593: ST_TO_ADDR
// end ;
43594: LD_VAR 0 3
43598: RET
// export function IsExtension ( b ) ; begin
43599: LD_INT 0
43601: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43602: LD_ADDR_VAR 0 2
43606: PUSH
43607: LD_VAR 0 1
43611: PUSH
43612: LD_INT 23
43614: PUSH
43615: LD_INT 20
43617: PUSH
43618: LD_INT 22
43620: PUSH
43621: LD_INT 17
43623: PUSH
43624: LD_INT 24
43626: PUSH
43627: LD_INT 21
43629: PUSH
43630: LD_INT 19
43632: PUSH
43633: LD_INT 16
43635: PUSH
43636: LD_INT 25
43638: PUSH
43639: LD_INT 18
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: IN
43654: ST_TO_ADDR
// end ;
43655: LD_VAR 0 2
43659: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43660: LD_INT 0
43662: PPUSH
43663: PPUSH
43664: PPUSH
// result := [ ] ;
43665: LD_ADDR_VAR 0 4
43669: PUSH
43670: EMPTY
43671: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43672: LD_ADDR_VAR 0 5
43676: PUSH
43677: LD_VAR 0 2
43681: PPUSH
43682: LD_INT 21
43684: PUSH
43685: LD_INT 3
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PPUSH
43692: CALL_OW 70
43696: ST_TO_ADDR
// if not tmp then
43697: LD_VAR 0 5
43701: NOT
43702: IFFALSE 43706
// exit ;
43704: GO 43770
// if checkLink then
43706: LD_VAR 0 3
43710: IFFALSE 43760
// begin for i in tmp do
43712: LD_ADDR_VAR 0 6
43716: PUSH
43717: LD_VAR 0 5
43721: PUSH
43722: FOR_IN
43723: IFFALSE 43758
// if GetBase ( i ) <> base then
43725: LD_VAR 0 6
43729: PPUSH
43730: CALL_OW 274
43734: PUSH
43735: LD_VAR 0 1
43739: NONEQUAL
43740: IFFALSE 43756
// ComLinkToBase ( base , i ) ;
43742: LD_VAR 0 1
43746: PPUSH
43747: LD_VAR 0 6
43751: PPUSH
43752: CALL_OW 169
43756: GO 43722
43758: POP
43759: POP
// end ; result := tmp ;
43760: LD_ADDR_VAR 0 4
43764: PUSH
43765: LD_VAR 0 5
43769: ST_TO_ADDR
// end ;
43770: LD_VAR 0 4
43774: RET
// export function ComComplete ( units , b ) ; var i ; begin
43775: LD_INT 0
43777: PPUSH
43778: PPUSH
// if not units then
43779: LD_VAR 0 1
43783: NOT
43784: IFFALSE 43788
// exit ;
43786: GO 43878
// for i in units do
43788: LD_ADDR_VAR 0 4
43792: PUSH
43793: LD_VAR 0 1
43797: PUSH
43798: FOR_IN
43799: IFFALSE 43876
// if BuildingStatus ( b ) = bs_build then
43801: LD_VAR 0 2
43805: PPUSH
43806: CALL_OW 461
43810: PUSH
43811: LD_INT 1
43813: EQUAL
43814: IFFALSE 43874
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43816: LD_VAR 0 4
43820: PPUSH
43821: LD_STRING h
43823: PUSH
43824: LD_VAR 0 2
43828: PPUSH
43829: CALL_OW 250
43833: PUSH
43834: LD_VAR 0 2
43838: PPUSH
43839: CALL_OW 251
43843: PUSH
43844: LD_VAR 0 2
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: PPUSH
43870: CALL_OW 446
43874: GO 43798
43876: POP
43877: POP
// end ;
43878: LD_VAR 0 3
43882: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43883: LD_INT 0
43885: PPUSH
43886: PPUSH
43887: PPUSH
43888: PPUSH
43889: PPUSH
43890: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43891: LD_VAR 0 1
43895: NOT
43896: PUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: CALL_OW 263
43906: PUSH
43907: LD_INT 2
43909: NONEQUAL
43910: OR
43911: IFFALSE 43915
// exit ;
43913: GO 44231
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43915: LD_ADDR_VAR 0 6
43919: PUSH
43920: LD_INT 22
43922: PUSH
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 255
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 30
43942: PUSH
43943: LD_INT 36
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 34
43952: PUSH
43953: LD_INT 31
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PPUSH
43969: CALL_OW 69
43973: ST_TO_ADDR
// if not tmp then
43974: LD_VAR 0 6
43978: NOT
43979: IFFALSE 43983
// exit ;
43981: GO 44231
// result := [ ] ;
43983: LD_ADDR_VAR 0 2
43987: PUSH
43988: EMPTY
43989: ST_TO_ADDR
// for i in tmp do
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: LD_VAR 0 6
43999: PUSH
44000: FOR_IN
44001: IFFALSE 44072
// begin t := UnitsInside ( i ) ;
44003: LD_ADDR_VAR 0 4
44007: PUSH
44008: LD_VAR 0 3
44012: PPUSH
44013: CALL_OW 313
44017: ST_TO_ADDR
// if t then
44018: LD_VAR 0 4
44022: IFFALSE 44070
// for j in t do
44024: LD_ADDR_VAR 0 7
44028: PUSH
44029: LD_VAR 0 4
44033: PUSH
44034: FOR_IN
44035: IFFALSE 44068
// result := Replace ( result , result + 1 , j ) ;
44037: LD_ADDR_VAR 0 2
44041: PUSH
44042: LD_VAR 0 2
44046: PPUSH
44047: LD_VAR 0 2
44051: PUSH
44052: LD_INT 1
44054: PLUS
44055: PPUSH
44056: LD_VAR 0 7
44060: PPUSH
44061: CALL_OW 1
44065: ST_TO_ADDR
44066: GO 44034
44068: POP
44069: POP
// end ;
44070: GO 44000
44072: POP
44073: POP
// if not result then
44074: LD_VAR 0 2
44078: NOT
44079: IFFALSE 44083
// exit ;
44081: GO 44231
// mech := result [ 1 ] ;
44083: LD_ADDR_VAR 0 5
44087: PUSH
44088: LD_VAR 0 2
44092: PUSH
44093: LD_INT 1
44095: ARRAY
44096: ST_TO_ADDR
// if result > 1 then
44097: LD_VAR 0 2
44101: PUSH
44102: LD_INT 1
44104: GREATER
44105: IFFALSE 44217
// begin for i = 2 to result do
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: DOUBLE
44113: LD_INT 2
44115: DEC
44116: ST_TO_ADDR
44117: LD_VAR 0 2
44121: PUSH
44122: FOR_TO
44123: IFFALSE 44215
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44125: LD_ADDR_VAR 0 4
44129: PUSH
44130: LD_VAR 0 2
44134: PUSH
44135: LD_VAR 0 3
44139: ARRAY
44140: PPUSH
44141: LD_INT 3
44143: PPUSH
44144: CALL_OW 259
44148: PUSH
44149: LD_VAR 0 2
44153: PUSH
44154: LD_VAR 0 3
44158: ARRAY
44159: PPUSH
44160: CALL_OW 432
44164: MINUS
44165: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44166: LD_VAR 0 4
44170: PUSH
44171: LD_VAR 0 5
44175: PPUSH
44176: LD_INT 3
44178: PPUSH
44179: CALL_OW 259
44183: PUSH
44184: LD_VAR 0 5
44188: PPUSH
44189: CALL_OW 432
44193: MINUS
44194: GREATEREQUAL
44195: IFFALSE 44213
// mech := result [ i ] ;
44197: LD_ADDR_VAR 0 5
44201: PUSH
44202: LD_VAR 0 2
44206: PUSH
44207: LD_VAR 0 3
44211: ARRAY
44212: ST_TO_ADDR
// end ;
44213: GO 44122
44215: POP
44216: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44217: LD_VAR 0 1
44221: PPUSH
44222: LD_VAR 0 5
44226: PPUSH
44227: CALL_OW 135
// end ;
44231: LD_VAR 0 2
44235: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44236: LD_INT 0
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
// result := [ ] ;
44251: LD_ADDR_VAR 0 7
44255: PUSH
44256: EMPTY
44257: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44258: LD_VAR 0 1
44262: PPUSH
44263: CALL_OW 266
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: IN
44278: NOT
44279: IFFALSE 44283
// exit ;
44281: GO 45917
// if name then
44283: LD_VAR 0 3
44287: IFFALSE 44303
// SetBName ( base_dep , name ) ;
44289: LD_VAR 0 1
44293: PPUSH
44294: LD_VAR 0 3
44298: PPUSH
44299: CALL_OW 500
// base := GetBase ( base_dep ) ;
44303: LD_ADDR_VAR 0 15
44307: PUSH
44308: LD_VAR 0 1
44312: PPUSH
44313: CALL_OW 274
44317: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44318: LD_ADDR_VAR 0 16
44322: PUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL_OW 255
44332: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44333: LD_ADDR_VAR 0 17
44337: PUSH
44338: LD_VAR 0 1
44342: PPUSH
44343: CALL_OW 248
44347: ST_TO_ADDR
// if sources then
44348: LD_VAR 0 5
44352: IFFALSE 44399
// for i = 1 to 3 do
44354: LD_ADDR_VAR 0 8
44358: PUSH
44359: DOUBLE
44360: LD_INT 1
44362: DEC
44363: ST_TO_ADDR
44364: LD_INT 3
44366: PUSH
44367: FOR_TO
44368: IFFALSE 44397
// AddResourceType ( base , i , sources [ i ] ) ;
44370: LD_VAR 0 15
44374: PPUSH
44375: LD_VAR 0 8
44379: PPUSH
44380: LD_VAR 0 5
44384: PUSH
44385: LD_VAR 0 8
44389: ARRAY
44390: PPUSH
44391: CALL_OW 276
44395: GO 44367
44397: POP
44398: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44399: LD_ADDR_VAR 0 18
44403: PUSH
44404: LD_VAR 0 15
44408: PPUSH
44409: LD_VAR 0 2
44413: PPUSH
44414: LD_INT 1
44416: PPUSH
44417: CALL 43660 0 3
44421: ST_TO_ADDR
// InitHc ;
44422: CALL_OW 19
// InitUc ;
44426: CALL_OW 18
// uc_side := side ;
44430: LD_ADDR_OWVAR 20
44434: PUSH
44435: LD_VAR 0 16
44439: ST_TO_ADDR
// uc_nation := nation ;
44440: LD_ADDR_OWVAR 21
44444: PUSH
44445: LD_VAR 0 17
44449: ST_TO_ADDR
// if buildings then
44450: LD_VAR 0 18
44454: IFFALSE 45776
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44456: LD_ADDR_VAR 0 19
44460: PUSH
44461: LD_VAR 0 18
44465: PPUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 30
44471: PUSH
44472: LD_INT 29
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 30
44481: PUSH
44482: LD_INT 30
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 72
44498: ST_TO_ADDR
// if tmp then
44499: LD_VAR 0 19
44503: IFFALSE 44551
// for i in tmp do
44505: LD_ADDR_VAR 0 8
44509: PUSH
44510: LD_VAR 0 19
44514: PUSH
44515: FOR_IN
44516: IFFALSE 44549
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44518: LD_VAR 0 8
44522: PPUSH
44523: CALL_OW 250
44527: PPUSH
44528: LD_VAR 0 8
44532: PPUSH
44533: CALL_OW 251
44537: PPUSH
44538: LD_VAR 0 16
44542: PPUSH
44543: CALL_OW 441
44547: GO 44515
44549: POP
44550: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44551: LD_VAR 0 18
44555: PPUSH
44556: LD_INT 2
44558: PUSH
44559: LD_INT 30
44561: PUSH
44562: LD_INT 32
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 30
44571: PUSH
44572: LD_INT 33
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: PPUSH
44584: CALL_OW 72
44588: IFFALSE 44676
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44590: LD_ADDR_VAR 0 8
44594: PUSH
44595: LD_VAR 0 18
44599: PPUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 30
44605: PUSH
44606: LD_INT 32
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 30
44615: PUSH
44616: LD_INT 33
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: LIST
44627: PPUSH
44628: CALL_OW 72
44632: PUSH
44633: FOR_IN
44634: IFFALSE 44674
// begin if not GetBWeapon ( i ) then
44636: LD_VAR 0 8
44640: PPUSH
44641: CALL_OW 269
44645: NOT
44646: IFFALSE 44672
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44648: LD_VAR 0 8
44652: PPUSH
44653: LD_VAR 0 8
44657: PPUSH
44658: LD_VAR 0 2
44662: PPUSH
44663: CALL 45922 0 2
44667: PPUSH
44668: CALL_OW 431
// end ;
44672: GO 44633
44674: POP
44675: POP
// end ; for i = 1 to personel do
44676: LD_ADDR_VAR 0 8
44680: PUSH
44681: DOUBLE
44682: LD_INT 1
44684: DEC
44685: ST_TO_ADDR
44686: LD_VAR 0 6
44690: PUSH
44691: FOR_TO
44692: IFFALSE 45756
// begin if i > 4 then
44694: LD_VAR 0 8
44698: PUSH
44699: LD_INT 4
44701: GREATER
44702: IFFALSE 44706
// break ;
44704: GO 45756
// case i of 1 :
44706: LD_VAR 0 8
44710: PUSH
44711: LD_INT 1
44713: DOUBLE
44714: EQUAL
44715: IFTRUE 44719
44717: GO 44799
44719: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44720: LD_ADDR_VAR 0 12
44724: PUSH
44725: LD_VAR 0 18
44729: PPUSH
44730: LD_INT 22
44732: PUSH
44733: LD_VAR 0 16
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 58
44744: PUSH
44745: EMPTY
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 30
44753: PUSH
44754: LD_INT 32
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 30
44763: PUSH
44764: LD_INT 4
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 30
44773: PUSH
44774: LD_INT 5
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: PPUSH
44792: CALL_OW 72
44796: ST_TO_ADDR
44797: GO 45021
44799: LD_INT 2
44801: DOUBLE
44802: EQUAL
44803: IFTRUE 44807
44805: GO 44869
44807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44808: LD_ADDR_VAR 0 12
44812: PUSH
44813: LD_VAR 0 18
44817: PPUSH
44818: LD_INT 22
44820: PUSH
44821: LD_VAR 0 16
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: LD_INT 30
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 30
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PPUSH
44862: CALL_OW 72
44866: ST_TO_ADDR
44867: GO 45021
44869: LD_INT 3
44871: DOUBLE
44872: EQUAL
44873: IFTRUE 44877
44875: GO 44939
44877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44878: LD_ADDR_VAR 0 12
44882: PUSH
44883: LD_VAR 0 18
44887: PPUSH
44888: LD_INT 22
44890: PUSH
44891: LD_VAR 0 16
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 30
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 30
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PPUSH
44932: CALL_OW 72
44936: ST_TO_ADDR
44937: GO 45021
44939: LD_INT 4
44941: DOUBLE
44942: EQUAL
44943: IFTRUE 44947
44945: GO 45020
44947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44948: LD_ADDR_VAR 0 12
44952: PUSH
44953: LD_VAR 0 18
44957: PPUSH
44958: LD_INT 22
44960: PUSH
44961: LD_VAR 0 16
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 30
44975: PUSH
44976: LD_INT 6
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 30
44985: PUSH
44986: LD_INT 7
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 30
44995: PUSH
44996: LD_INT 8
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PPUSH
45013: CALL_OW 72
45017: ST_TO_ADDR
45018: GO 45021
45020: POP
// if i = 1 then
45021: LD_VAR 0 8
45025: PUSH
45026: LD_INT 1
45028: EQUAL
45029: IFFALSE 45140
// begin tmp := [ ] ;
45031: LD_ADDR_VAR 0 19
45035: PUSH
45036: EMPTY
45037: ST_TO_ADDR
// for j in f do
45038: LD_ADDR_VAR 0 9
45042: PUSH
45043: LD_VAR 0 12
45047: PUSH
45048: FOR_IN
45049: IFFALSE 45122
// if GetBType ( j ) = b_bunker then
45051: LD_VAR 0 9
45055: PPUSH
45056: CALL_OW 266
45060: PUSH
45061: LD_INT 32
45063: EQUAL
45064: IFFALSE 45091
// tmp := Insert ( tmp , 1 , j ) else
45066: LD_ADDR_VAR 0 19
45070: PUSH
45071: LD_VAR 0 19
45075: PPUSH
45076: LD_INT 1
45078: PPUSH
45079: LD_VAR 0 9
45083: PPUSH
45084: CALL_OW 2
45088: ST_TO_ADDR
45089: GO 45120
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45091: LD_ADDR_VAR 0 19
45095: PUSH
45096: LD_VAR 0 19
45100: PPUSH
45101: LD_VAR 0 19
45105: PUSH
45106: LD_INT 1
45108: PLUS
45109: PPUSH
45110: LD_VAR 0 9
45114: PPUSH
45115: CALL_OW 2
45119: ST_TO_ADDR
45120: GO 45048
45122: POP
45123: POP
// if tmp then
45124: LD_VAR 0 19
45128: IFFALSE 45140
// f := tmp ;
45130: LD_ADDR_VAR 0 12
45134: PUSH
45135: LD_VAR 0 19
45139: ST_TO_ADDR
// end ; x := personel [ i ] ;
45140: LD_ADDR_VAR 0 13
45144: PUSH
45145: LD_VAR 0 6
45149: PUSH
45150: LD_VAR 0 8
45154: ARRAY
45155: ST_TO_ADDR
// if x = - 1 then
45156: LD_VAR 0 13
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: EQUAL
45165: IFFALSE 45374
// begin for j in f do
45167: LD_ADDR_VAR 0 9
45171: PUSH
45172: LD_VAR 0 12
45176: PUSH
45177: FOR_IN
45178: IFFALSE 45370
// repeat InitHc ;
45180: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45184: LD_VAR 0 9
45188: PPUSH
45189: CALL_OW 266
45193: PUSH
45194: LD_INT 5
45196: EQUAL
45197: IFFALSE 45267
// begin if UnitsInside ( j ) < 3 then
45199: LD_VAR 0 9
45203: PPUSH
45204: CALL_OW 313
45208: PUSH
45209: LD_INT 3
45211: LESS
45212: IFFALSE 45248
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45214: LD_INT 0
45216: PPUSH
45217: LD_INT 5
45219: PUSH
45220: LD_INT 8
45222: PUSH
45223: LD_INT 9
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: PUSH
45231: LD_VAR 0 17
45235: ARRAY
45236: PPUSH
45237: LD_VAR 0 4
45241: PPUSH
45242: CALL_OW 380
45246: GO 45265
// PrepareHuman ( false , i , skill ) ;
45248: LD_INT 0
45250: PPUSH
45251: LD_VAR 0 8
45255: PPUSH
45256: LD_VAR 0 4
45260: PPUSH
45261: CALL_OW 380
// end else
45265: GO 45284
// PrepareHuman ( false , i , skill ) ;
45267: LD_INT 0
45269: PPUSH
45270: LD_VAR 0 8
45274: PPUSH
45275: LD_VAR 0 4
45279: PPUSH
45280: CALL_OW 380
// un := CreateHuman ;
45284: LD_ADDR_VAR 0 14
45288: PUSH
45289: CALL_OW 44
45293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45294: LD_ADDR_VAR 0 7
45298: PUSH
45299: LD_VAR 0 7
45303: PPUSH
45304: LD_INT 1
45306: PPUSH
45307: LD_VAR 0 14
45311: PPUSH
45312: CALL_OW 2
45316: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45317: LD_VAR 0 14
45321: PPUSH
45322: LD_VAR 0 9
45326: PPUSH
45327: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45331: LD_VAR 0 9
45335: PPUSH
45336: CALL_OW 313
45340: PUSH
45341: LD_INT 6
45343: EQUAL
45344: PUSH
45345: LD_VAR 0 9
45349: PPUSH
45350: CALL_OW 266
45354: PUSH
45355: LD_INT 32
45357: PUSH
45358: LD_INT 31
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: IN
45365: OR
45366: IFFALSE 45180
45368: GO 45177
45370: POP
45371: POP
// end else
45372: GO 45754
// for j = 1 to x do
45374: LD_ADDR_VAR 0 9
45378: PUSH
45379: DOUBLE
45380: LD_INT 1
45382: DEC
45383: ST_TO_ADDR
45384: LD_VAR 0 13
45388: PUSH
45389: FOR_TO
45390: IFFALSE 45752
// begin InitHc ;
45392: CALL_OW 19
// if not f then
45396: LD_VAR 0 12
45400: NOT
45401: IFFALSE 45490
// begin PrepareHuman ( false , i , skill ) ;
45403: LD_INT 0
45405: PPUSH
45406: LD_VAR 0 8
45410: PPUSH
45411: LD_VAR 0 4
45415: PPUSH
45416: CALL_OW 380
// un := CreateHuman ;
45420: LD_ADDR_VAR 0 14
45424: PUSH
45425: CALL_OW 44
45429: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45430: LD_ADDR_VAR 0 7
45434: PUSH
45435: LD_VAR 0 7
45439: PPUSH
45440: LD_INT 1
45442: PPUSH
45443: LD_VAR 0 14
45447: PPUSH
45448: CALL_OW 2
45452: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45453: LD_VAR 0 14
45457: PPUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: CALL_OW 250
45467: PPUSH
45468: LD_VAR 0 1
45472: PPUSH
45473: CALL_OW 251
45477: PPUSH
45478: LD_INT 10
45480: PPUSH
45481: LD_INT 0
45483: PPUSH
45484: CALL_OW 50
// continue ;
45488: GO 45389
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45490: LD_VAR 0 12
45494: PUSH
45495: LD_INT 1
45497: ARRAY
45498: PPUSH
45499: CALL_OW 313
45503: PUSH
45504: LD_VAR 0 12
45508: PUSH
45509: LD_INT 1
45511: ARRAY
45512: PPUSH
45513: CALL_OW 266
45517: PUSH
45518: LD_INT 32
45520: PUSH
45521: LD_INT 31
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: IN
45528: AND
45529: PUSH
45530: LD_VAR 0 12
45534: PUSH
45535: LD_INT 1
45537: ARRAY
45538: PPUSH
45539: CALL_OW 313
45543: PUSH
45544: LD_INT 6
45546: EQUAL
45547: OR
45548: IFFALSE 45568
// f := Delete ( f , 1 ) ;
45550: LD_ADDR_VAR 0 12
45554: PUSH
45555: LD_VAR 0 12
45559: PPUSH
45560: LD_INT 1
45562: PPUSH
45563: CALL_OW 3
45567: ST_TO_ADDR
// if not f then
45568: LD_VAR 0 12
45572: NOT
45573: IFFALSE 45591
// begin x := x + 2 ;
45575: LD_ADDR_VAR 0 13
45579: PUSH
45580: LD_VAR 0 13
45584: PUSH
45585: LD_INT 2
45587: PLUS
45588: ST_TO_ADDR
// continue ;
45589: GO 45389
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45591: LD_VAR 0 12
45595: PUSH
45596: LD_INT 1
45598: ARRAY
45599: PPUSH
45600: CALL_OW 266
45604: PUSH
45605: LD_INT 5
45607: EQUAL
45608: IFFALSE 45682
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45610: LD_VAR 0 12
45614: PUSH
45615: LD_INT 1
45617: ARRAY
45618: PPUSH
45619: CALL_OW 313
45623: PUSH
45624: LD_INT 3
45626: LESS
45627: IFFALSE 45663
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45629: LD_INT 0
45631: PPUSH
45632: LD_INT 5
45634: PUSH
45635: LD_INT 8
45637: PUSH
45638: LD_INT 9
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: PUSH
45646: LD_VAR 0 17
45650: ARRAY
45651: PPUSH
45652: LD_VAR 0 4
45656: PPUSH
45657: CALL_OW 380
45661: GO 45680
// PrepareHuman ( false , i , skill ) ;
45663: LD_INT 0
45665: PPUSH
45666: LD_VAR 0 8
45670: PPUSH
45671: LD_VAR 0 4
45675: PPUSH
45676: CALL_OW 380
// end else
45680: GO 45699
// PrepareHuman ( false , i , skill ) ;
45682: LD_INT 0
45684: PPUSH
45685: LD_VAR 0 8
45689: PPUSH
45690: LD_VAR 0 4
45694: PPUSH
45695: CALL_OW 380
// un := CreateHuman ;
45699: LD_ADDR_VAR 0 14
45703: PUSH
45704: CALL_OW 44
45708: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45709: LD_ADDR_VAR 0 7
45713: PUSH
45714: LD_VAR 0 7
45718: PPUSH
45719: LD_INT 1
45721: PPUSH
45722: LD_VAR 0 14
45726: PPUSH
45727: CALL_OW 2
45731: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45732: LD_VAR 0 14
45736: PPUSH
45737: LD_VAR 0 12
45741: PUSH
45742: LD_INT 1
45744: ARRAY
45745: PPUSH
45746: CALL_OW 52
// end ;
45750: GO 45389
45752: POP
45753: POP
// end ;
45754: GO 44691
45756: POP
45757: POP
// result := result ^ buildings ;
45758: LD_ADDR_VAR 0 7
45762: PUSH
45763: LD_VAR 0 7
45767: PUSH
45768: LD_VAR 0 18
45772: ADD
45773: ST_TO_ADDR
// end else
45774: GO 45917
// begin for i = 1 to personel do
45776: LD_ADDR_VAR 0 8
45780: PUSH
45781: DOUBLE
45782: LD_INT 1
45784: DEC
45785: ST_TO_ADDR
45786: LD_VAR 0 6
45790: PUSH
45791: FOR_TO
45792: IFFALSE 45915
// begin if i > 4 then
45794: LD_VAR 0 8
45798: PUSH
45799: LD_INT 4
45801: GREATER
45802: IFFALSE 45806
// break ;
45804: GO 45915
// x := personel [ i ] ;
45806: LD_ADDR_VAR 0 13
45810: PUSH
45811: LD_VAR 0 6
45815: PUSH
45816: LD_VAR 0 8
45820: ARRAY
45821: ST_TO_ADDR
// if x = - 1 then
45822: LD_VAR 0 13
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: EQUAL
45831: IFFALSE 45835
// continue ;
45833: GO 45791
// PrepareHuman ( false , i , skill ) ;
45835: LD_INT 0
45837: PPUSH
45838: LD_VAR 0 8
45842: PPUSH
45843: LD_VAR 0 4
45847: PPUSH
45848: CALL_OW 380
// un := CreateHuman ;
45852: LD_ADDR_VAR 0 14
45856: PUSH
45857: CALL_OW 44
45861: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45862: LD_VAR 0 14
45866: PPUSH
45867: LD_VAR 0 1
45871: PPUSH
45872: CALL_OW 250
45876: PPUSH
45877: LD_VAR 0 1
45881: PPUSH
45882: CALL_OW 251
45886: PPUSH
45887: LD_INT 10
45889: PPUSH
45890: LD_INT 0
45892: PPUSH
45893: CALL_OW 50
// result := result ^ un ;
45897: LD_ADDR_VAR 0 7
45901: PUSH
45902: LD_VAR 0 7
45906: PUSH
45907: LD_VAR 0 14
45911: ADD
45912: ST_TO_ADDR
// end ;
45913: GO 45791
45915: POP
45916: POP
// end ; end ;
45917: LD_VAR 0 7
45921: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45922: LD_INT 0
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
// result := false ;
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: LD_INT 0
45947: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45948: LD_VAR 0 1
45952: NOT
45953: PUSH
45954: LD_VAR 0 1
45958: PPUSH
45959: CALL_OW 266
45963: PUSH
45964: LD_INT 32
45966: PUSH
45967: LD_INT 33
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: IN
45974: NOT
45975: OR
45976: IFFALSE 45980
// exit ;
45978: GO 47089
// nat := GetNation ( tower ) ;
45980: LD_ADDR_VAR 0 12
45984: PUSH
45985: LD_VAR 0 1
45989: PPUSH
45990: CALL_OW 248
45994: ST_TO_ADDR
// side := GetSide ( tower ) ;
45995: LD_ADDR_VAR 0 16
45999: PUSH
46000: LD_VAR 0 1
46004: PPUSH
46005: CALL_OW 255
46009: ST_TO_ADDR
// x := GetX ( tower ) ;
46010: LD_ADDR_VAR 0 10
46014: PUSH
46015: LD_VAR 0 1
46019: PPUSH
46020: CALL_OW 250
46024: ST_TO_ADDR
// y := GetY ( tower ) ;
46025: LD_ADDR_VAR 0 11
46029: PUSH
46030: LD_VAR 0 1
46034: PPUSH
46035: CALL_OW 251
46039: ST_TO_ADDR
// if not x or not y then
46040: LD_VAR 0 10
46044: NOT
46045: PUSH
46046: LD_VAR 0 11
46050: NOT
46051: OR
46052: IFFALSE 46056
// exit ;
46054: GO 47089
// weapon := 0 ;
46056: LD_ADDR_VAR 0 18
46060: PUSH
46061: LD_INT 0
46063: ST_TO_ADDR
// fac_list := [ ] ;
46064: LD_ADDR_VAR 0 17
46068: PUSH
46069: EMPTY
46070: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46071: LD_ADDR_VAR 0 6
46075: PUSH
46076: LD_VAR 0 1
46080: PPUSH
46081: CALL_OW 274
46085: PPUSH
46086: LD_VAR 0 2
46090: PPUSH
46091: LD_INT 0
46093: PPUSH
46094: CALL 43660 0 3
46098: PPUSH
46099: LD_INT 30
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PPUSH
46109: CALL_OW 72
46113: ST_TO_ADDR
// if not factories then
46114: LD_VAR 0 6
46118: NOT
46119: IFFALSE 46123
// exit ;
46121: GO 47089
// for i in factories do
46123: LD_ADDR_VAR 0 8
46127: PUSH
46128: LD_VAR 0 6
46132: PUSH
46133: FOR_IN
46134: IFFALSE 46159
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46136: LD_ADDR_VAR 0 17
46140: PUSH
46141: LD_VAR 0 17
46145: PUSH
46146: LD_VAR 0 8
46150: PPUSH
46151: CALL_OW 478
46155: UNION
46156: ST_TO_ADDR
46157: GO 46133
46159: POP
46160: POP
// if not fac_list then
46161: LD_VAR 0 17
46165: NOT
46166: IFFALSE 46170
// exit ;
46168: GO 47089
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46170: LD_ADDR_VAR 0 5
46174: PUSH
46175: LD_INT 4
46177: PUSH
46178: LD_INT 5
46180: PUSH
46181: LD_INT 9
46183: PUSH
46184: LD_INT 10
46186: PUSH
46187: LD_INT 6
46189: PUSH
46190: LD_INT 7
46192: PUSH
46193: LD_INT 11
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 27
46207: PUSH
46208: LD_INT 28
46210: PUSH
46211: LD_INT 26
46213: PUSH
46214: LD_INT 30
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 43
46225: PUSH
46226: LD_INT 44
46228: PUSH
46229: LD_INT 46
46231: PUSH
46232: LD_INT 45
46234: PUSH
46235: LD_INT 47
46237: PUSH
46238: LD_INT 49
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: PUSH
46254: LD_VAR 0 12
46258: ARRAY
46259: ST_TO_ADDR
// list := list isect fac_list ;
46260: LD_ADDR_VAR 0 5
46264: PUSH
46265: LD_VAR 0 5
46269: PUSH
46270: LD_VAR 0 17
46274: ISECT
46275: ST_TO_ADDR
// if not list then
46276: LD_VAR 0 5
46280: NOT
46281: IFFALSE 46285
// exit ;
46283: GO 47089
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46285: LD_VAR 0 12
46289: PUSH
46290: LD_INT 3
46292: EQUAL
46293: PUSH
46294: LD_INT 49
46296: PUSH
46297: LD_VAR 0 5
46301: IN
46302: AND
46303: PUSH
46304: LD_INT 31
46306: PPUSH
46307: LD_VAR 0 16
46311: PPUSH
46312: CALL_OW 321
46316: PUSH
46317: LD_INT 2
46319: EQUAL
46320: AND
46321: IFFALSE 46381
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46323: LD_INT 22
46325: PUSH
46326: LD_VAR 0 16
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 35
46337: PUSH
46338: LD_INT 49
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 91
46347: PUSH
46348: LD_VAR 0 1
46352: PUSH
46353: LD_INT 10
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: PPUSH
46366: CALL_OW 69
46370: NOT
46371: IFFALSE 46381
// weapon := ru_time_lapser ;
46373: LD_ADDR_VAR 0 18
46377: PUSH
46378: LD_INT 49
46380: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46381: LD_VAR 0 12
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: IN
46396: PUSH
46397: LD_INT 11
46399: PUSH
46400: LD_VAR 0 5
46404: IN
46405: PUSH
46406: LD_INT 30
46408: PUSH
46409: LD_VAR 0 5
46413: IN
46414: OR
46415: AND
46416: PUSH
46417: LD_INT 6
46419: PPUSH
46420: LD_VAR 0 16
46424: PPUSH
46425: CALL_OW 321
46429: PUSH
46430: LD_INT 2
46432: EQUAL
46433: AND
46434: IFFALSE 46599
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46436: LD_INT 22
46438: PUSH
46439: LD_VAR 0 16
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 35
46453: PUSH
46454: LD_INT 11
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 35
46463: PUSH
46464: LD_INT 30
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 91
46478: PUSH
46479: LD_VAR 0 1
46483: PUSH
46484: LD_INT 18
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: PPUSH
46497: CALL_OW 69
46501: NOT
46502: PUSH
46503: LD_INT 22
46505: PUSH
46506: LD_VAR 0 16
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 30
46520: PUSH
46521: LD_INT 32
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 30
46530: PUSH
46531: LD_INT 33
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 91
46545: PUSH
46546: LD_VAR 0 1
46550: PUSH
46551: LD_INT 12
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: PUSH
46564: EMPTY
46565: LIST
46566: PPUSH
46567: CALL_OW 69
46571: PUSH
46572: LD_INT 2
46574: GREATER
46575: AND
46576: IFFALSE 46599
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46578: LD_ADDR_VAR 0 18
46582: PUSH
46583: LD_INT 11
46585: PUSH
46586: LD_INT 30
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_VAR 0 12
46597: ARRAY
46598: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46599: LD_VAR 0 18
46603: NOT
46604: PUSH
46605: LD_INT 40
46607: PPUSH
46608: LD_VAR 0 16
46612: PPUSH
46613: CALL_OW 321
46617: PUSH
46618: LD_INT 2
46620: EQUAL
46621: AND
46622: PUSH
46623: LD_INT 7
46625: PUSH
46626: LD_VAR 0 5
46630: IN
46631: PUSH
46632: LD_INT 28
46634: PUSH
46635: LD_VAR 0 5
46639: IN
46640: OR
46641: PUSH
46642: LD_INT 45
46644: PUSH
46645: LD_VAR 0 5
46649: IN
46650: OR
46651: AND
46652: IFFALSE 46906
// begin hex := GetHexInfo ( x , y ) ;
46654: LD_ADDR_VAR 0 4
46658: PUSH
46659: LD_VAR 0 10
46663: PPUSH
46664: LD_VAR 0 11
46668: PPUSH
46669: CALL_OW 546
46673: ST_TO_ADDR
// if hex [ 1 ] then
46674: LD_VAR 0 4
46678: PUSH
46679: LD_INT 1
46681: ARRAY
46682: IFFALSE 46686
// exit ;
46684: GO 47089
// height := hex [ 2 ] ;
46686: LD_ADDR_VAR 0 15
46690: PUSH
46691: LD_VAR 0 4
46695: PUSH
46696: LD_INT 2
46698: ARRAY
46699: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46700: LD_ADDR_VAR 0 14
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: LD_INT 5
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: ST_TO_ADDR
// for i in tmp do
46723: LD_ADDR_VAR 0 8
46727: PUSH
46728: LD_VAR 0 14
46732: PUSH
46733: FOR_IN
46734: IFFALSE 46904
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46736: LD_ADDR_VAR 0 9
46740: PUSH
46741: LD_VAR 0 10
46745: PPUSH
46746: LD_VAR 0 8
46750: PPUSH
46751: LD_INT 5
46753: PPUSH
46754: CALL_OW 272
46758: PUSH
46759: LD_VAR 0 11
46763: PPUSH
46764: LD_VAR 0 8
46768: PPUSH
46769: LD_INT 5
46771: PPUSH
46772: CALL_OW 273
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46781: LD_VAR 0 9
46785: PUSH
46786: LD_INT 1
46788: ARRAY
46789: PPUSH
46790: LD_VAR 0 9
46794: PUSH
46795: LD_INT 2
46797: ARRAY
46798: PPUSH
46799: CALL_OW 488
46803: IFFALSE 46902
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46805: LD_ADDR_VAR 0 4
46809: PUSH
46810: LD_VAR 0 9
46814: PUSH
46815: LD_INT 1
46817: ARRAY
46818: PPUSH
46819: LD_VAR 0 9
46823: PUSH
46824: LD_INT 2
46826: ARRAY
46827: PPUSH
46828: CALL_OW 546
46832: ST_TO_ADDR
// if hex [ 1 ] then
46833: LD_VAR 0 4
46837: PUSH
46838: LD_INT 1
46840: ARRAY
46841: IFFALSE 46845
// continue ;
46843: GO 46733
// h := hex [ 2 ] ;
46845: LD_ADDR_VAR 0 13
46849: PUSH
46850: LD_VAR 0 4
46854: PUSH
46855: LD_INT 2
46857: ARRAY
46858: ST_TO_ADDR
// if h + 7 < height then
46859: LD_VAR 0 13
46863: PUSH
46864: LD_INT 7
46866: PLUS
46867: PUSH
46868: LD_VAR 0 15
46872: LESS
46873: IFFALSE 46902
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46875: LD_ADDR_VAR 0 18
46879: PUSH
46880: LD_INT 7
46882: PUSH
46883: LD_INT 28
46885: PUSH
46886: LD_INT 45
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: PUSH
46894: LD_VAR 0 12
46898: ARRAY
46899: ST_TO_ADDR
// break ;
46900: GO 46904
// end ; end ; end ;
46902: GO 46733
46904: POP
46905: POP
// end ; if not weapon then
46906: LD_VAR 0 18
46910: NOT
46911: IFFALSE 46971
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46913: LD_ADDR_VAR 0 5
46917: PUSH
46918: LD_VAR 0 5
46922: PUSH
46923: LD_INT 11
46925: PUSH
46926: LD_INT 30
46928: PUSH
46929: LD_INT 49
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: LIST
46936: DIFF
46937: ST_TO_ADDR
// if not list then
46938: LD_VAR 0 5
46942: NOT
46943: IFFALSE 46947
// exit ;
46945: GO 47089
// weapon := list [ rand ( 1 , list ) ] ;
46947: LD_ADDR_VAR 0 18
46951: PUSH
46952: LD_VAR 0 5
46956: PUSH
46957: LD_INT 1
46959: PPUSH
46960: LD_VAR 0 5
46964: PPUSH
46965: CALL_OW 12
46969: ARRAY
46970: ST_TO_ADDR
// end ; if weapon then
46971: LD_VAR 0 18
46975: IFFALSE 47089
// begin tmp := CostOfWeapon ( weapon ) ;
46977: LD_ADDR_VAR 0 14
46981: PUSH
46982: LD_VAR 0 18
46986: PPUSH
46987: CALL_OW 451
46991: ST_TO_ADDR
// j := GetBase ( tower ) ;
46992: LD_ADDR_VAR 0 9
46996: PUSH
46997: LD_VAR 0 1
47001: PPUSH
47002: CALL_OW 274
47006: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47007: LD_VAR 0 9
47011: PPUSH
47012: LD_INT 1
47014: PPUSH
47015: CALL_OW 275
47019: PUSH
47020: LD_VAR 0 14
47024: PUSH
47025: LD_INT 1
47027: ARRAY
47028: GREATEREQUAL
47029: PUSH
47030: LD_VAR 0 9
47034: PPUSH
47035: LD_INT 2
47037: PPUSH
47038: CALL_OW 275
47042: PUSH
47043: LD_VAR 0 14
47047: PUSH
47048: LD_INT 2
47050: ARRAY
47051: GREATEREQUAL
47052: AND
47053: PUSH
47054: LD_VAR 0 9
47058: PPUSH
47059: LD_INT 3
47061: PPUSH
47062: CALL_OW 275
47066: PUSH
47067: LD_VAR 0 14
47071: PUSH
47072: LD_INT 3
47074: ARRAY
47075: GREATEREQUAL
47076: AND
47077: IFFALSE 47089
// result := weapon ;
47079: LD_ADDR_VAR 0 3
47083: PUSH
47084: LD_VAR 0 18
47088: ST_TO_ADDR
// end ; end ;
47089: LD_VAR 0 3
47093: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47094: LD_INT 0
47096: PPUSH
47097: PPUSH
// result := true ;
47098: LD_ADDR_VAR 0 3
47102: PUSH
47103: LD_INT 1
47105: ST_TO_ADDR
// if array1 = array2 then
47106: LD_VAR 0 1
47110: PUSH
47111: LD_VAR 0 2
47115: EQUAL
47116: IFFALSE 47176
// begin for i = 1 to array1 do
47118: LD_ADDR_VAR 0 4
47122: PUSH
47123: DOUBLE
47124: LD_INT 1
47126: DEC
47127: ST_TO_ADDR
47128: LD_VAR 0 1
47132: PUSH
47133: FOR_TO
47134: IFFALSE 47172
// if array1 [ i ] <> array2 [ i ] then
47136: LD_VAR 0 1
47140: PUSH
47141: LD_VAR 0 4
47145: ARRAY
47146: PUSH
47147: LD_VAR 0 2
47151: PUSH
47152: LD_VAR 0 4
47156: ARRAY
47157: NONEQUAL
47158: IFFALSE 47170
// begin result := false ;
47160: LD_ADDR_VAR 0 3
47164: PUSH
47165: LD_INT 0
47167: ST_TO_ADDR
// break ;
47168: GO 47172
// end ;
47170: GO 47133
47172: POP
47173: POP
// end else
47174: GO 47184
// result := false ;
47176: LD_ADDR_VAR 0 3
47180: PUSH
47181: LD_INT 0
47183: ST_TO_ADDR
// end ;
47184: LD_VAR 0 3
47188: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47189: LD_INT 0
47191: PPUSH
47192: PPUSH
// if not array1 or not array2 then
47193: LD_VAR 0 1
47197: NOT
47198: PUSH
47199: LD_VAR 0 2
47203: NOT
47204: OR
47205: IFFALSE 47209
// exit ;
47207: GO 47273
// result := true ;
47209: LD_ADDR_VAR 0 3
47213: PUSH
47214: LD_INT 1
47216: ST_TO_ADDR
// for i = 1 to array1 do
47217: LD_ADDR_VAR 0 4
47221: PUSH
47222: DOUBLE
47223: LD_INT 1
47225: DEC
47226: ST_TO_ADDR
47227: LD_VAR 0 1
47231: PUSH
47232: FOR_TO
47233: IFFALSE 47271
// if array1 [ i ] <> array2 [ i ] then
47235: LD_VAR 0 1
47239: PUSH
47240: LD_VAR 0 4
47244: ARRAY
47245: PUSH
47246: LD_VAR 0 2
47250: PUSH
47251: LD_VAR 0 4
47255: ARRAY
47256: NONEQUAL
47257: IFFALSE 47269
// begin result := false ;
47259: LD_ADDR_VAR 0 3
47263: PUSH
47264: LD_INT 0
47266: ST_TO_ADDR
// break ;
47267: GO 47271
// end ;
47269: GO 47232
47271: POP
47272: POP
// end ;
47273: LD_VAR 0 3
47277: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47278: LD_INT 0
47280: PPUSH
47281: PPUSH
47282: PPUSH
// pom := GetBase ( fac ) ;
47283: LD_ADDR_VAR 0 5
47287: PUSH
47288: LD_VAR 0 1
47292: PPUSH
47293: CALL_OW 274
47297: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47298: LD_ADDR_VAR 0 4
47302: PUSH
47303: LD_VAR 0 2
47307: PUSH
47308: LD_INT 1
47310: ARRAY
47311: PPUSH
47312: LD_VAR 0 2
47316: PUSH
47317: LD_INT 2
47319: ARRAY
47320: PPUSH
47321: LD_VAR 0 2
47325: PUSH
47326: LD_INT 3
47328: ARRAY
47329: PPUSH
47330: LD_VAR 0 2
47334: PUSH
47335: LD_INT 4
47337: ARRAY
47338: PPUSH
47339: CALL_OW 449
47343: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47344: LD_ADDR_VAR 0 3
47348: PUSH
47349: LD_VAR 0 5
47353: PPUSH
47354: LD_INT 1
47356: PPUSH
47357: CALL_OW 275
47361: PUSH
47362: LD_VAR 0 4
47366: PUSH
47367: LD_INT 1
47369: ARRAY
47370: GREATEREQUAL
47371: PUSH
47372: LD_VAR 0 5
47376: PPUSH
47377: LD_INT 2
47379: PPUSH
47380: CALL_OW 275
47384: PUSH
47385: LD_VAR 0 4
47389: PUSH
47390: LD_INT 2
47392: ARRAY
47393: GREATEREQUAL
47394: AND
47395: PUSH
47396: LD_VAR 0 5
47400: PPUSH
47401: LD_INT 3
47403: PPUSH
47404: CALL_OW 275
47408: PUSH
47409: LD_VAR 0 4
47413: PUSH
47414: LD_INT 3
47416: ARRAY
47417: GREATEREQUAL
47418: AND
47419: ST_TO_ADDR
// end ;
47420: LD_VAR 0 3
47424: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47425: LD_INT 0
47427: PPUSH
47428: PPUSH
47429: PPUSH
47430: PPUSH
// pom := GetBase ( building ) ;
47431: LD_ADDR_VAR 0 3
47435: PUSH
47436: LD_VAR 0 1
47440: PPUSH
47441: CALL_OW 274
47445: ST_TO_ADDR
// if not pom then
47446: LD_VAR 0 3
47450: NOT
47451: IFFALSE 47455
// exit ;
47453: GO 47625
// btype := GetBType ( building ) ;
47455: LD_ADDR_VAR 0 5
47459: PUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: CALL_OW 266
47469: ST_TO_ADDR
// if btype = b_armoury then
47470: LD_VAR 0 5
47474: PUSH
47475: LD_INT 4
47477: EQUAL
47478: IFFALSE 47488
// btype := b_barracks ;
47480: LD_ADDR_VAR 0 5
47484: PUSH
47485: LD_INT 5
47487: ST_TO_ADDR
// if btype = b_depot then
47488: LD_VAR 0 5
47492: PUSH
47493: LD_INT 0
47495: EQUAL
47496: IFFALSE 47506
// btype := b_warehouse ;
47498: LD_ADDR_VAR 0 5
47502: PUSH
47503: LD_INT 1
47505: ST_TO_ADDR
// if btype = b_workshop then
47506: LD_VAR 0 5
47510: PUSH
47511: LD_INT 2
47513: EQUAL
47514: IFFALSE 47524
// btype := b_factory ;
47516: LD_ADDR_VAR 0 5
47520: PUSH
47521: LD_INT 3
47523: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47524: LD_ADDR_VAR 0 4
47528: PUSH
47529: LD_VAR 0 5
47533: PPUSH
47534: LD_VAR 0 1
47538: PPUSH
47539: CALL_OW 248
47543: PPUSH
47544: CALL_OW 450
47548: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47549: LD_ADDR_VAR 0 2
47553: PUSH
47554: LD_VAR 0 3
47558: PPUSH
47559: LD_INT 1
47561: PPUSH
47562: CALL_OW 275
47566: PUSH
47567: LD_VAR 0 4
47571: PUSH
47572: LD_INT 1
47574: ARRAY
47575: GREATEREQUAL
47576: PUSH
47577: LD_VAR 0 3
47581: PPUSH
47582: LD_INT 2
47584: PPUSH
47585: CALL_OW 275
47589: PUSH
47590: LD_VAR 0 4
47594: PUSH
47595: LD_INT 2
47597: ARRAY
47598: GREATEREQUAL
47599: AND
47600: PUSH
47601: LD_VAR 0 3
47605: PPUSH
47606: LD_INT 3
47608: PPUSH
47609: CALL_OW 275
47613: PUSH
47614: LD_VAR 0 4
47618: PUSH
47619: LD_INT 3
47621: ARRAY
47622: GREATEREQUAL
47623: AND
47624: ST_TO_ADDR
// end ;
47625: LD_VAR 0 2
47629: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47630: LD_INT 0
47632: PPUSH
47633: PPUSH
47634: PPUSH
// pom := GetBase ( building ) ;
47635: LD_ADDR_VAR 0 4
47639: PUSH
47640: LD_VAR 0 1
47644: PPUSH
47645: CALL_OW 274
47649: ST_TO_ADDR
// if not pom then
47650: LD_VAR 0 4
47654: NOT
47655: IFFALSE 47659
// exit ;
47657: GO 47760
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47659: LD_ADDR_VAR 0 5
47663: PUSH
47664: LD_VAR 0 2
47668: PPUSH
47669: LD_VAR 0 1
47673: PPUSH
47674: CALL_OW 248
47678: PPUSH
47679: CALL_OW 450
47683: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: LD_VAR 0 4
47693: PPUSH
47694: LD_INT 1
47696: PPUSH
47697: CALL_OW 275
47701: PUSH
47702: LD_VAR 0 5
47706: PUSH
47707: LD_INT 1
47709: ARRAY
47710: GREATEREQUAL
47711: PUSH
47712: LD_VAR 0 4
47716: PPUSH
47717: LD_INT 2
47719: PPUSH
47720: CALL_OW 275
47724: PUSH
47725: LD_VAR 0 5
47729: PUSH
47730: LD_INT 2
47732: ARRAY
47733: GREATEREQUAL
47734: AND
47735: PUSH
47736: LD_VAR 0 4
47740: PPUSH
47741: LD_INT 3
47743: PPUSH
47744: CALL_OW 275
47748: PUSH
47749: LD_VAR 0 5
47753: PUSH
47754: LD_INT 3
47756: ARRAY
47757: GREATEREQUAL
47758: AND
47759: ST_TO_ADDR
// end ;
47760: LD_VAR 0 3
47764: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47765: LD_INT 0
47767: PPUSH
47768: PPUSH
47769: PPUSH
47770: PPUSH
47771: PPUSH
47772: PPUSH
47773: PPUSH
47774: PPUSH
47775: PPUSH
47776: PPUSH
47777: PPUSH
// result := false ;
47778: LD_ADDR_VAR 0 8
47782: PUSH
47783: LD_INT 0
47785: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47786: LD_VAR 0 5
47790: NOT
47791: PUSH
47792: LD_VAR 0 1
47796: NOT
47797: OR
47798: PUSH
47799: LD_VAR 0 2
47803: NOT
47804: OR
47805: PUSH
47806: LD_VAR 0 3
47810: NOT
47811: OR
47812: IFFALSE 47816
// exit ;
47814: GO 48630
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47816: LD_ADDR_VAR 0 14
47820: PUSH
47821: LD_VAR 0 1
47825: PPUSH
47826: LD_VAR 0 2
47830: PPUSH
47831: LD_VAR 0 3
47835: PPUSH
47836: LD_VAR 0 4
47840: PPUSH
47841: LD_VAR 0 5
47845: PUSH
47846: LD_INT 1
47848: ARRAY
47849: PPUSH
47850: CALL_OW 248
47854: PPUSH
47855: LD_INT 0
47857: PPUSH
47858: CALL 49883 0 6
47862: ST_TO_ADDR
// if not hexes then
47863: LD_VAR 0 14
47867: NOT
47868: IFFALSE 47872
// exit ;
47870: GO 48630
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47872: LD_ADDR_VAR 0 17
47876: PUSH
47877: LD_VAR 0 5
47881: PPUSH
47882: LD_INT 22
47884: PUSH
47885: LD_VAR 0 13
47889: PPUSH
47890: CALL_OW 255
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 30
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 30
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PPUSH
47931: CALL_OW 72
47935: ST_TO_ADDR
// for i = 1 to hexes do
47936: LD_ADDR_VAR 0 9
47940: PUSH
47941: DOUBLE
47942: LD_INT 1
47944: DEC
47945: ST_TO_ADDR
47946: LD_VAR 0 14
47950: PUSH
47951: FOR_TO
47952: IFFALSE 48628
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47954: LD_ADDR_VAR 0 13
47958: PUSH
47959: LD_VAR 0 14
47963: PUSH
47964: LD_VAR 0 9
47968: ARRAY
47969: PUSH
47970: LD_INT 1
47972: ARRAY
47973: PPUSH
47974: LD_VAR 0 14
47978: PUSH
47979: LD_VAR 0 9
47983: ARRAY
47984: PUSH
47985: LD_INT 2
47987: ARRAY
47988: PPUSH
47989: CALL_OW 428
47993: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47994: LD_VAR 0 14
47998: PUSH
47999: LD_VAR 0 9
48003: ARRAY
48004: PUSH
48005: LD_INT 1
48007: ARRAY
48008: PPUSH
48009: LD_VAR 0 14
48013: PUSH
48014: LD_VAR 0 9
48018: ARRAY
48019: PUSH
48020: LD_INT 2
48022: ARRAY
48023: PPUSH
48024: CALL_OW 351
48028: PUSH
48029: LD_VAR 0 14
48033: PUSH
48034: LD_VAR 0 9
48038: ARRAY
48039: PUSH
48040: LD_INT 1
48042: ARRAY
48043: PPUSH
48044: LD_VAR 0 14
48048: PUSH
48049: LD_VAR 0 9
48053: ARRAY
48054: PUSH
48055: LD_INT 2
48057: ARRAY
48058: PPUSH
48059: CALL_OW 488
48063: NOT
48064: OR
48065: PUSH
48066: LD_VAR 0 13
48070: PPUSH
48071: CALL_OW 247
48075: PUSH
48076: LD_INT 3
48078: EQUAL
48079: OR
48080: IFFALSE 48086
// exit ;
48082: POP
48083: POP
48084: GO 48630
// if not tmp then
48086: LD_VAR 0 13
48090: NOT
48091: IFFALSE 48095
// continue ;
48093: GO 47951
// result := true ;
48095: LD_ADDR_VAR 0 8
48099: PUSH
48100: LD_INT 1
48102: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48103: LD_VAR 0 6
48107: PUSH
48108: LD_VAR 0 13
48112: PPUSH
48113: CALL_OW 247
48117: PUSH
48118: LD_INT 2
48120: EQUAL
48121: AND
48122: PUSH
48123: LD_VAR 0 13
48127: PPUSH
48128: CALL_OW 263
48132: PUSH
48133: LD_INT 1
48135: EQUAL
48136: AND
48137: IFFALSE 48301
// begin if IsDrivenBy ( tmp ) then
48139: LD_VAR 0 13
48143: PPUSH
48144: CALL_OW 311
48148: IFFALSE 48152
// continue ;
48150: GO 47951
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48152: LD_VAR 0 6
48156: PPUSH
48157: LD_INT 3
48159: PUSH
48160: LD_INT 60
48162: PUSH
48163: EMPTY
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: LD_INT 55
48175: PUSH
48176: EMPTY
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PPUSH
48187: CALL_OW 72
48191: IFFALSE 48299
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48193: LD_ADDR_VAR 0 18
48197: PUSH
48198: LD_VAR 0 6
48202: PPUSH
48203: LD_INT 3
48205: PUSH
48206: LD_INT 60
48208: PUSH
48209: EMPTY
48210: LIST
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: LD_INT 55
48221: PUSH
48222: EMPTY
48223: LIST
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PPUSH
48233: CALL_OW 72
48237: PUSH
48238: LD_INT 1
48240: ARRAY
48241: ST_TO_ADDR
// if IsInUnit ( driver ) then
48242: LD_VAR 0 18
48246: PPUSH
48247: CALL_OW 310
48251: IFFALSE 48262
// ComExit ( driver ) ;
48253: LD_VAR 0 18
48257: PPUSH
48258: CALL 73675 0 1
// AddComEnterUnit ( driver , tmp ) ;
48262: LD_VAR 0 18
48266: PPUSH
48267: LD_VAR 0 13
48271: PPUSH
48272: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48276: LD_VAR 0 18
48280: PPUSH
48281: LD_VAR 0 7
48285: PPUSH
48286: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48290: LD_VAR 0 18
48294: PPUSH
48295: CALL_OW 181
// end ; continue ;
48299: GO 47951
// end ; if not cleaners or not tmp in cleaners then
48301: LD_VAR 0 6
48305: NOT
48306: PUSH
48307: LD_VAR 0 13
48311: PUSH
48312: LD_VAR 0 6
48316: IN
48317: NOT
48318: OR
48319: IFFALSE 48626
// begin if dep then
48321: LD_VAR 0 17
48325: IFFALSE 48461
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48327: LD_ADDR_VAR 0 16
48331: PUSH
48332: LD_VAR 0 17
48336: PUSH
48337: LD_INT 1
48339: ARRAY
48340: PPUSH
48341: CALL_OW 250
48345: PPUSH
48346: LD_VAR 0 17
48350: PUSH
48351: LD_INT 1
48353: ARRAY
48354: PPUSH
48355: CALL_OW 254
48359: PPUSH
48360: LD_INT 5
48362: PPUSH
48363: CALL_OW 272
48367: PUSH
48368: LD_VAR 0 17
48372: PUSH
48373: LD_INT 1
48375: ARRAY
48376: PPUSH
48377: CALL_OW 251
48381: PPUSH
48382: LD_VAR 0 17
48386: PUSH
48387: LD_INT 1
48389: ARRAY
48390: PPUSH
48391: CALL_OW 254
48395: PPUSH
48396: LD_INT 5
48398: PPUSH
48399: CALL_OW 273
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48408: LD_VAR 0 16
48412: PUSH
48413: LD_INT 1
48415: ARRAY
48416: PPUSH
48417: LD_VAR 0 16
48421: PUSH
48422: LD_INT 2
48424: ARRAY
48425: PPUSH
48426: CALL_OW 488
48430: IFFALSE 48461
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48432: LD_VAR 0 13
48436: PPUSH
48437: LD_VAR 0 16
48441: PUSH
48442: LD_INT 1
48444: ARRAY
48445: PPUSH
48446: LD_VAR 0 16
48450: PUSH
48451: LD_INT 2
48453: ARRAY
48454: PPUSH
48455: CALL_OW 111
// continue ;
48459: GO 47951
// end ; end ; r := GetDir ( tmp ) ;
48461: LD_ADDR_VAR 0 15
48465: PUSH
48466: LD_VAR 0 13
48470: PPUSH
48471: CALL_OW 254
48475: ST_TO_ADDR
// if r = 5 then
48476: LD_VAR 0 15
48480: PUSH
48481: LD_INT 5
48483: EQUAL
48484: IFFALSE 48494
// r := 0 ;
48486: LD_ADDR_VAR 0 15
48490: PUSH
48491: LD_INT 0
48493: ST_TO_ADDR
// for j = r to 5 do
48494: LD_ADDR_VAR 0 10
48498: PUSH
48499: DOUBLE
48500: LD_VAR 0 15
48504: DEC
48505: ST_TO_ADDR
48506: LD_INT 5
48508: PUSH
48509: FOR_TO
48510: IFFALSE 48624
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48512: LD_ADDR_VAR 0 11
48516: PUSH
48517: LD_VAR 0 13
48521: PPUSH
48522: CALL_OW 250
48526: PPUSH
48527: LD_VAR 0 10
48531: PPUSH
48532: LD_INT 2
48534: PPUSH
48535: CALL_OW 272
48539: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48540: LD_ADDR_VAR 0 12
48544: PUSH
48545: LD_VAR 0 13
48549: PPUSH
48550: CALL_OW 251
48554: PPUSH
48555: LD_VAR 0 10
48559: PPUSH
48560: LD_INT 2
48562: PPUSH
48563: CALL_OW 273
48567: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48568: LD_VAR 0 11
48572: PPUSH
48573: LD_VAR 0 12
48577: PPUSH
48578: CALL_OW 488
48582: PUSH
48583: LD_VAR 0 11
48587: PPUSH
48588: LD_VAR 0 12
48592: PPUSH
48593: CALL_OW 428
48597: NOT
48598: AND
48599: IFFALSE 48622
// begin ComMoveXY ( tmp , _x , _y ) ;
48601: LD_VAR 0 13
48605: PPUSH
48606: LD_VAR 0 11
48610: PPUSH
48611: LD_VAR 0 12
48615: PPUSH
48616: CALL_OW 111
// break ;
48620: GO 48624
// end ; end ;
48622: GO 48509
48624: POP
48625: POP
// end ; end ;
48626: GO 47951
48628: POP
48629: POP
// end ;
48630: LD_VAR 0 8
48634: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48635: LD_INT 0
48637: PPUSH
// result := true ;
48638: LD_ADDR_VAR 0 3
48642: PUSH
48643: LD_INT 1
48645: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48646: LD_VAR 0 2
48650: PUSH
48651: LD_INT 24
48653: DOUBLE
48654: EQUAL
48655: IFTRUE 48665
48657: LD_INT 33
48659: DOUBLE
48660: EQUAL
48661: IFTRUE 48665
48663: GO 48690
48665: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48666: LD_ADDR_VAR 0 3
48670: PUSH
48671: LD_INT 32
48673: PPUSH
48674: LD_VAR 0 1
48678: PPUSH
48679: CALL_OW 321
48683: PUSH
48684: LD_INT 2
48686: EQUAL
48687: ST_TO_ADDR
48688: GO 49006
48690: LD_INT 20
48692: DOUBLE
48693: EQUAL
48694: IFTRUE 48698
48696: GO 48723
48698: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48699: LD_ADDR_VAR 0 3
48703: PUSH
48704: LD_INT 6
48706: PPUSH
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL_OW 321
48716: PUSH
48717: LD_INT 2
48719: EQUAL
48720: ST_TO_ADDR
48721: GO 49006
48723: LD_INT 22
48725: DOUBLE
48726: EQUAL
48727: IFTRUE 48737
48729: LD_INT 36
48731: DOUBLE
48732: EQUAL
48733: IFTRUE 48737
48735: GO 48762
48737: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48738: LD_ADDR_VAR 0 3
48742: PUSH
48743: LD_INT 15
48745: PPUSH
48746: LD_VAR 0 1
48750: PPUSH
48751: CALL_OW 321
48755: PUSH
48756: LD_INT 2
48758: EQUAL
48759: ST_TO_ADDR
48760: GO 49006
48762: LD_INT 30
48764: DOUBLE
48765: EQUAL
48766: IFTRUE 48770
48768: GO 48795
48770: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48771: LD_ADDR_VAR 0 3
48775: PUSH
48776: LD_INT 20
48778: PPUSH
48779: LD_VAR 0 1
48783: PPUSH
48784: CALL_OW 321
48788: PUSH
48789: LD_INT 2
48791: EQUAL
48792: ST_TO_ADDR
48793: GO 49006
48795: LD_INT 28
48797: DOUBLE
48798: EQUAL
48799: IFTRUE 48809
48801: LD_INT 21
48803: DOUBLE
48804: EQUAL
48805: IFTRUE 48809
48807: GO 48834
48809: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48810: LD_ADDR_VAR 0 3
48814: PUSH
48815: LD_INT 21
48817: PPUSH
48818: LD_VAR 0 1
48822: PPUSH
48823: CALL_OW 321
48827: PUSH
48828: LD_INT 2
48830: EQUAL
48831: ST_TO_ADDR
48832: GO 49006
48834: LD_INT 16
48836: DOUBLE
48837: EQUAL
48838: IFTRUE 48842
48840: GO 48867
48842: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48843: LD_ADDR_VAR 0 3
48847: PUSH
48848: LD_INT 84
48850: PPUSH
48851: LD_VAR 0 1
48855: PPUSH
48856: CALL_OW 321
48860: PUSH
48861: LD_INT 2
48863: EQUAL
48864: ST_TO_ADDR
48865: GO 49006
48867: LD_INT 19
48869: DOUBLE
48870: EQUAL
48871: IFTRUE 48881
48873: LD_INT 23
48875: DOUBLE
48876: EQUAL
48877: IFTRUE 48881
48879: GO 48906
48881: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48882: LD_ADDR_VAR 0 3
48886: PUSH
48887: LD_INT 83
48889: PPUSH
48890: LD_VAR 0 1
48894: PPUSH
48895: CALL_OW 321
48899: PUSH
48900: LD_INT 2
48902: EQUAL
48903: ST_TO_ADDR
48904: GO 49006
48906: LD_INT 17
48908: DOUBLE
48909: EQUAL
48910: IFTRUE 48914
48912: GO 48939
48914: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48915: LD_ADDR_VAR 0 3
48919: PUSH
48920: LD_INT 39
48922: PPUSH
48923: LD_VAR 0 1
48927: PPUSH
48928: CALL_OW 321
48932: PUSH
48933: LD_INT 2
48935: EQUAL
48936: ST_TO_ADDR
48937: GO 49006
48939: LD_INT 18
48941: DOUBLE
48942: EQUAL
48943: IFTRUE 48947
48945: GO 48972
48947: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48948: LD_ADDR_VAR 0 3
48952: PUSH
48953: LD_INT 40
48955: PPUSH
48956: LD_VAR 0 1
48960: PPUSH
48961: CALL_OW 321
48965: PUSH
48966: LD_INT 2
48968: EQUAL
48969: ST_TO_ADDR
48970: GO 49006
48972: LD_INT 27
48974: DOUBLE
48975: EQUAL
48976: IFTRUE 48980
48978: GO 49005
48980: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48981: LD_ADDR_VAR 0 3
48985: PUSH
48986: LD_INT 35
48988: PPUSH
48989: LD_VAR 0 1
48993: PPUSH
48994: CALL_OW 321
48998: PUSH
48999: LD_INT 2
49001: EQUAL
49002: ST_TO_ADDR
49003: GO 49006
49005: POP
// end ;
49006: LD_VAR 0 3
49010: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49011: LD_INT 0
49013: PPUSH
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
// result := false ;
49024: LD_ADDR_VAR 0 6
49028: PUSH
49029: LD_INT 0
49031: ST_TO_ADDR
// if btype = b_depot then
49032: LD_VAR 0 2
49036: PUSH
49037: LD_INT 0
49039: EQUAL
49040: IFFALSE 49052
// begin result := true ;
49042: LD_ADDR_VAR 0 6
49046: PUSH
49047: LD_INT 1
49049: ST_TO_ADDR
// exit ;
49050: GO 49878
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49052: LD_VAR 0 1
49056: NOT
49057: PUSH
49058: LD_VAR 0 1
49062: PPUSH
49063: CALL_OW 266
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: IN
49078: NOT
49079: OR
49080: PUSH
49081: LD_VAR 0 2
49085: NOT
49086: OR
49087: PUSH
49088: LD_VAR 0 5
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 4
49107: PUSH
49108: LD_INT 5
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: IN
49119: NOT
49120: OR
49121: PUSH
49122: LD_VAR 0 3
49126: PPUSH
49127: LD_VAR 0 4
49131: PPUSH
49132: CALL_OW 488
49136: NOT
49137: OR
49138: IFFALSE 49142
// exit ;
49140: GO 49878
// side := GetSide ( depot ) ;
49142: LD_ADDR_VAR 0 9
49146: PUSH
49147: LD_VAR 0 1
49151: PPUSH
49152: CALL_OW 255
49156: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49157: LD_VAR 0 9
49161: PPUSH
49162: LD_VAR 0 2
49166: PPUSH
49167: CALL 48635 0 2
49171: NOT
49172: IFFALSE 49176
// exit ;
49174: GO 49878
// pom := GetBase ( depot ) ;
49176: LD_ADDR_VAR 0 10
49180: PUSH
49181: LD_VAR 0 1
49185: PPUSH
49186: CALL_OW 274
49190: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49191: LD_ADDR_VAR 0 11
49195: PUSH
49196: LD_VAR 0 2
49200: PPUSH
49201: LD_VAR 0 1
49205: PPUSH
49206: CALL_OW 248
49210: PPUSH
49211: CALL_OW 450
49215: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49216: LD_VAR 0 10
49220: PPUSH
49221: LD_INT 1
49223: PPUSH
49224: CALL_OW 275
49228: PUSH
49229: LD_VAR 0 11
49233: PUSH
49234: LD_INT 1
49236: ARRAY
49237: GREATEREQUAL
49238: PUSH
49239: LD_VAR 0 10
49243: PPUSH
49244: LD_INT 2
49246: PPUSH
49247: CALL_OW 275
49251: PUSH
49252: LD_VAR 0 11
49256: PUSH
49257: LD_INT 2
49259: ARRAY
49260: GREATEREQUAL
49261: AND
49262: PUSH
49263: LD_VAR 0 10
49267: PPUSH
49268: LD_INT 3
49270: PPUSH
49271: CALL_OW 275
49275: PUSH
49276: LD_VAR 0 11
49280: PUSH
49281: LD_INT 3
49283: ARRAY
49284: GREATEREQUAL
49285: AND
49286: NOT
49287: IFFALSE 49291
// exit ;
49289: GO 49878
// if GetBType ( depot ) = b_depot then
49291: LD_VAR 0 1
49295: PPUSH
49296: CALL_OW 266
49300: PUSH
49301: LD_INT 0
49303: EQUAL
49304: IFFALSE 49316
// dist := 28 else
49306: LD_ADDR_VAR 0 14
49310: PUSH
49311: LD_INT 28
49313: ST_TO_ADDR
49314: GO 49324
// dist := 36 ;
49316: LD_ADDR_VAR 0 14
49320: PUSH
49321: LD_INT 36
49323: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49324: LD_VAR 0 1
49328: PPUSH
49329: LD_VAR 0 3
49333: PPUSH
49334: LD_VAR 0 4
49338: PPUSH
49339: CALL_OW 297
49343: PUSH
49344: LD_VAR 0 14
49348: GREATER
49349: IFFALSE 49353
// exit ;
49351: GO 49878
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49353: LD_ADDR_VAR 0 12
49357: PUSH
49358: LD_VAR 0 2
49362: PPUSH
49363: LD_VAR 0 3
49367: PPUSH
49368: LD_VAR 0 4
49372: PPUSH
49373: LD_VAR 0 5
49377: PPUSH
49378: LD_VAR 0 1
49382: PPUSH
49383: CALL_OW 248
49387: PPUSH
49388: LD_INT 0
49390: PPUSH
49391: CALL 49883 0 6
49395: ST_TO_ADDR
// if not hexes then
49396: LD_VAR 0 12
49400: NOT
49401: IFFALSE 49405
// exit ;
49403: GO 49878
// hex := GetHexInfo ( x , y ) ;
49405: LD_ADDR_VAR 0 15
49409: PUSH
49410: LD_VAR 0 3
49414: PPUSH
49415: LD_VAR 0 4
49419: PPUSH
49420: CALL_OW 546
49424: ST_TO_ADDR
// if hex [ 1 ] then
49425: LD_VAR 0 15
49429: PUSH
49430: LD_INT 1
49432: ARRAY
49433: IFFALSE 49437
// exit ;
49435: GO 49878
// height := hex [ 2 ] ;
49437: LD_ADDR_VAR 0 13
49441: PUSH
49442: LD_VAR 0 15
49446: PUSH
49447: LD_INT 2
49449: ARRAY
49450: ST_TO_ADDR
// for i = 1 to hexes do
49451: LD_ADDR_VAR 0 7
49455: PUSH
49456: DOUBLE
49457: LD_INT 1
49459: DEC
49460: ST_TO_ADDR
49461: LD_VAR 0 12
49465: PUSH
49466: FOR_TO
49467: IFFALSE 49797
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49469: LD_VAR 0 12
49473: PUSH
49474: LD_VAR 0 7
49478: ARRAY
49479: PUSH
49480: LD_INT 1
49482: ARRAY
49483: PPUSH
49484: LD_VAR 0 12
49488: PUSH
49489: LD_VAR 0 7
49493: ARRAY
49494: PUSH
49495: LD_INT 2
49497: ARRAY
49498: PPUSH
49499: CALL_OW 488
49503: NOT
49504: PUSH
49505: LD_VAR 0 12
49509: PUSH
49510: LD_VAR 0 7
49514: ARRAY
49515: PUSH
49516: LD_INT 1
49518: ARRAY
49519: PPUSH
49520: LD_VAR 0 12
49524: PUSH
49525: LD_VAR 0 7
49529: ARRAY
49530: PUSH
49531: LD_INT 2
49533: ARRAY
49534: PPUSH
49535: CALL_OW 428
49539: PUSH
49540: LD_INT 0
49542: GREATER
49543: OR
49544: PUSH
49545: LD_VAR 0 12
49549: PUSH
49550: LD_VAR 0 7
49554: ARRAY
49555: PUSH
49556: LD_INT 1
49558: ARRAY
49559: PPUSH
49560: LD_VAR 0 12
49564: PUSH
49565: LD_VAR 0 7
49569: ARRAY
49570: PUSH
49571: LD_INT 2
49573: ARRAY
49574: PPUSH
49575: CALL_OW 351
49579: OR
49580: IFFALSE 49586
// exit ;
49582: POP
49583: POP
49584: GO 49878
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49586: LD_ADDR_VAR 0 8
49590: PUSH
49591: LD_VAR 0 12
49595: PUSH
49596: LD_VAR 0 7
49600: ARRAY
49601: PUSH
49602: LD_INT 1
49604: ARRAY
49605: PPUSH
49606: LD_VAR 0 12
49610: PUSH
49611: LD_VAR 0 7
49615: ARRAY
49616: PUSH
49617: LD_INT 2
49619: ARRAY
49620: PPUSH
49621: CALL_OW 546
49625: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49626: LD_VAR 0 8
49630: PUSH
49631: LD_INT 1
49633: ARRAY
49634: PUSH
49635: LD_VAR 0 8
49639: PUSH
49640: LD_INT 2
49642: ARRAY
49643: PUSH
49644: LD_VAR 0 13
49648: PUSH
49649: LD_INT 2
49651: PLUS
49652: GREATER
49653: OR
49654: PUSH
49655: LD_VAR 0 8
49659: PUSH
49660: LD_INT 2
49662: ARRAY
49663: PUSH
49664: LD_VAR 0 13
49668: PUSH
49669: LD_INT 2
49671: MINUS
49672: LESS
49673: OR
49674: PUSH
49675: LD_VAR 0 8
49679: PUSH
49680: LD_INT 3
49682: ARRAY
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 8
49689: PUSH
49690: LD_INT 9
49692: PUSH
49693: LD_INT 10
49695: PUSH
49696: LD_INT 11
49698: PUSH
49699: LD_INT 12
49701: PUSH
49702: LD_INT 13
49704: PUSH
49705: LD_INT 16
49707: PUSH
49708: LD_INT 17
49710: PUSH
49711: LD_INT 18
49713: PUSH
49714: LD_INT 19
49716: PUSH
49717: LD_INT 20
49719: PUSH
49720: LD_INT 21
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: IN
49738: NOT
49739: OR
49740: PUSH
49741: LD_VAR 0 8
49745: PUSH
49746: LD_INT 5
49748: ARRAY
49749: NOT
49750: OR
49751: PUSH
49752: LD_VAR 0 8
49756: PUSH
49757: LD_INT 6
49759: ARRAY
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 7
49769: PUSH
49770: LD_INT 9
49772: PUSH
49773: LD_INT 10
49775: PUSH
49776: LD_INT 11
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: IN
49787: NOT
49788: OR
49789: IFFALSE 49795
// exit ;
49791: POP
49792: POP
49793: GO 49878
// end ;
49795: GO 49466
49797: POP
49798: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49799: LD_VAR 0 9
49803: PPUSH
49804: LD_VAR 0 3
49808: PPUSH
49809: LD_VAR 0 4
49813: PPUSH
49814: LD_INT 20
49816: PPUSH
49817: CALL 41801 0 4
49821: PUSH
49822: LD_INT 4
49824: ARRAY
49825: IFFALSE 49829
// exit ;
49827: GO 49878
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49829: LD_VAR 0 2
49833: PUSH
49834: LD_INT 29
49836: PUSH
49837: LD_INT 30
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: IN
49844: PUSH
49845: LD_VAR 0 3
49849: PPUSH
49850: LD_VAR 0 4
49854: PPUSH
49855: LD_VAR 0 9
49859: PPUSH
49860: CALL_OW 440
49864: NOT
49865: AND
49866: IFFALSE 49870
// exit ;
49868: GO 49878
// result := true ;
49870: LD_ADDR_VAR 0 6
49874: PUSH
49875: LD_INT 1
49877: ST_TO_ADDR
// end ;
49878: LD_VAR 0 6
49882: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49883: LD_INT 0
49885: PPUSH
49886: PPUSH
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
49904: PPUSH
49905: PPUSH
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
49930: PPUSH
49931: PPUSH
49932: PPUSH
49933: PPUSH
49934: PPUSH
49935: PPUSH
49936: PPUSH
49937: PPUSH
49938: PPUSH
49939: PPUSH
49940: PPUSH
49941: PPUSH
49942: PPUSH
// result = [ ] ;
49943: LD_ADDR_VAR 0 7
49947: PUSH
49948: EMPTY
49949: ST_TO_ADDR
// temp_list = [ ] ;
49950: LD_ADDR_VAR 0 9
49954: PUSH
49955: EMPTY
49956: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49957: LD_VAR 0 4
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: LD_INT 4
49976: PUSH
49977: LD_INT 5
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: IN
49988: NOT
49989: PUSH
49990: LD_VAR 0 1
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: IN
50005: PUSH
50006: LD_VAR 0 5
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: IN
50025: NOT
50026: AND
50027: OR
50028: IFFALSE 50032
// exit ;
50030: GO 68423
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50032: LD_VAR 0 1
50036: PUSH
50037: LD_INT 6
50039: PUSH
50040: LD_INT 7
50042: PUSH
50043: LD_INT 8
50045: PUSH
50046: LD_INT 13
50048: PUSH
50049: LD_INT 12
50051: PUSH
50052: LD_INT 15
50054: PUSH
50055: LD_INT 11
50057: PUSH
50058: LD_INT 14
50060: PUSH
50061: LD_INT 10
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: IN
50075: IFFALSE 50085
// btype = b_lab ;
50077: LD_ADDR_VAR 0 1
50081: PUSH
50082: LD_INT 6
50084: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50085: LD_VAR 0 6
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: IN
50104: NOT
50105: PUSH
50106: LD_VAR 0 1
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: LD_INT 6
50125: PUSH
50126: LD_INT 36
50128: PUSH
50129: LD_INT 4
50131: PUSH
50132: LD_INT 5
50134: PUSH
50135: LD_INT 31
50137: PUSH
50138: LD_INT 32
50140: PUSH
50141: LD_INT 33
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: IN
50157: NOT
50158: PUSH
50159: LD_VAR 0 6
50163: PUSH
50164: LD_INT 1
50166: EQUAL
50167: AND
50168: OR
50169: PUSH
50170: LD_VAR 0 1
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: IN
50185: NOT
50186: PUSH
50187: LD_VAR 0 6
50191: PUSH
50192: LD_INT 2
50194: EQUAL
50195: AND
50196: OR
50197: IFFALSE 50207
// mode = 0 ;
50199: LD_ADDR_VAR 0 6
50203: PUSH
50204: LD_INT 0
50206: ST_TO_ADDR
// case mode of 0 :
50207: LD_VAR 0 6
50211: PUSH
50212: LD_INT 0
50214: DOUBLE
50215: EQUAL
50216: IFTRUE 50220
50218: GO 61673
50220: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50221: LD_ADDR_VAR 0 11
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50414: LD_ADDR_VAR 0 12
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: NEG
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 3
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50610: LD_ADDR_VAR 0 13
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: NEG
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50809: LD_ADDR_VAR 0 14
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51005: LD_ADDR_VAR 0 15
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51198: LD_ADDR_VAR 0 16
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 3
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51391: LD_ADDR_VAR 0 17
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51621: LD_ADDR_VAR 0 18
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51851: LD_ADDR_VAR 0 19
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52081: LD_ADDR_VAR 0 20
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52311: LD_ADDR_VAR 0 21
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52541: LD_ADDR_VAR 0 22
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52771: LD_ADDR_VAR 0 23
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53051: LD_ADDR_VAR 0 24
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53327: LD_ADDR_VAR 0 25
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 2
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53601: LD_ADDR_VAR 0 26
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53877: LD_ADDR_VAR 0 27
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54157: LD_ADDR_VAR 0 28
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54439: LD_ADDR_VAR 0 29
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 3
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54718: LD_ADDR_VAR 0 30
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 3
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54996: LD_ADDR_VAR 0 31
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55274: LD_ADDR_VAR 0 32
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 3
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55552: LD_ADDR_VAR 0 33
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: LD_INT 3
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55831: LD_ADDR_VAR 0 34
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56111: LD_ADDR_VAR 0 35
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56223: LD_ADDR_VAR 0 36
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56335: LD_ADDR_VAR 0 37
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56447: LD_ADDR_VAR 0 38
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56559: LD_ADDR_VAR 0 39
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56671: LD_ADDR_VAR 0 40
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56783: LD_ADDR_VAR 0 41
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 3
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57133: LD_ADDR_VAR 0 42
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 2
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57483: LD_ADDR_VAR 0 43
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57831: LD_ADDR_VAR 0 44
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: LD_INT 3
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58181: LD_ADDR_VAR 0 45
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 3
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 3
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58531: LD_ADDR_VAR 0 46
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58879: LD_ADDR_VAR 0 47
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59030: LD_ADDR_VAR 0 48
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 2
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59177: LD_ADDR_VAR 0 49
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59321: LD_ADDR_VAR 0 50
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59465: LD_ADDR_VAR 0 51
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59612: LD_ADDR_VAR 0 52
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 2
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59763: LD_ADDR_VAR 0 53
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59993: LD_ADDR_VAR 0 54
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60223: LD_ADDR_VAR 0 55
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60453: LD_ADDR_VAR 0 56
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60683: LD_ADDR_VAR 0 57
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: LD_INT 2
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60913: LD_ADDR_VAR 0 58
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61143: LD_ADDR_VAR 0 59
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61231: LD_ADDR_VAR 0 60
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61319: LD_ADDR_VAR 0 61
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61407: LD_ADDR_VAR 0 62
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61495: LD_ADDR_VAR 0 63
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61583: LD_ADDR_VAR 0 64
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: ST_TO_ADDR
// end ; 1 :
61671: GO 67568
61673: LD_INT 1
61675: DOUBLE
61676: EQUAL
61677: IFTRUE 61681
61679: GO 64304
61681: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61682: LD_ADDR_VAR 0 11
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 3
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 3
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: LIST
61725: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61726: LD_ADDR_VAR 0 12
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: LIST
61766: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61767: LD_ADDR_VAR 0 13
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61807: LD_ADDR_VAR 0 14
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: LIST
61847: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61848: LD_ADDR_VAR 0 15
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61892: LD_ADDR_VAR 0 16
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: NEG
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 3
61923: NEG
61924: PUSH
61925: LD_INT 3
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61938: LD_ADDR_VAR 0 17
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 3
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 3
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61982: LD_ADDR_VAR 0 18
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62023: LD_ADDR_VAR 0 19
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: LIST
62062: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62063: LD_ADDR_VAR 0 20
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62104: LD_ADDR_VAR 0 21
62108: PUSH
62109: LD_INT 2
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 3
62122: NEG
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62148: LD_ADDR_VAR 0 22
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: NEG
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 3
62179: NEG
62180: PUSH
62181: LD_INT 3
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62194: LD_ADDR_VAR 0 23
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: LD_INT 3
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: LD_INT 3
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62238: LD_ADDR_VAR 0 24
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 4
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62279: LD_ADDR_VAR 0 25
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: LD_INT 3
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 4
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 3
62306: PUSH
62307: LD_INT 4
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: LIST
62318: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62319: LD_ADDR_VAR 0 26
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 3
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62360: LD_ADDR_VAR 0 27
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 4
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62404: LD_ADDR_VAR 0 28
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 3
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: LD_INT 4
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 4
62435: NEG
62436: PUSH
62437: LD_INT 3
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62450: LD_ADDR_VAR 0 29
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 3
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: LD_INT 4
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 4
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 5
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 5
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 4
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 6
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 6
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: LD_INT 5
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62605: LD_ADDR_VAR 0 30
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 4
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 4
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 5
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 5
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 5
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 6
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 6
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62748: LD_ADDR_VAR 0 31
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 4
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 4
62795: PUSH
62796: LD_INT 4
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 4
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 5
62815: PUSH
62816: LD_INT 4
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 5
62825: PUSH
62826: LD_INT 5
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 4
62835: PUSH
62836: LD_INT 5
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 6
62845: PUSH
62846: LD_INT 5
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 6
62855: PUSH
62856: LD_INT 6
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 5
62865: PUSH
62866: LD_INT 6
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62887: LD_ADDR_VAR 0 32
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: LD_INT 3
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: LD_INT 4
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 4
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 5
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 5
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: LD_INT 4
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 6
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: LD_INT 6
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 5
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63030: LD_ADDR_VAR 0 33
63034: PUSH
63035: LD_INT 2
63037: NEG
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 3
63048: NEG
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 4
63082: NEG
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 4
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 4
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 5
63116: NEG
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 5
63127: NEG
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 5
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 6
63150: NEG
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 6
63161: NEG
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63185: LD_ADDR_VAR 0 34
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 3
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: LD_INT 3
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: LD_INT 4
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 4
63240: NEG
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 4
63252: NEG
63253: PUSH
63254: LD_INT 4
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 4
63264: NEG
63265: PUSH
63266: LD_INT 5
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 5
63276: NEG
63277: PUSH
63278: LD_INT 4
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 5
63288: NEG
63289: PUSH
63290: LD_INT 5
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 5
63300: NEG
63301: PUSH
63302: LD_INT 6
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 6
63312: NEG
63313: PUSH
63314: LD_INT 5
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 6
63324: NEG
63325: PUSH
63326: LD_INT 6
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63348: LD_ADDR_VAR 0 41
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 2
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 3
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63392: LD_ADDR_VAR 0 42
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63433: LD_ADDR_VAR 0 43
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: LD_INT 3
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63473: LD_ADDR_VAR 0 44
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: LD_INT 3
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: LD_INT 2
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63514: LD_ADDR_VAR 0 45
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63558: LD_ADDR_VAR 0 46
63562: PUSH
63563: LD_INT 2
63565: NEG
63566: PUSH
63567: LD_INT 2
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: LD_INT 3
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 3
63589: NEG
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63604: LD_ADDR_VAR 0 47
63608: PUSH
63609: LD_INT 2
63611: NEG
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63637: LD_ADDR_VAR 0 48
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 2
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63668: LD_ADDR_VAR 0 49
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63697: LD_ADDR_VAR 0 50
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 3
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63726: LD_ADDR_VAR 0 51
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63757: LD_ADDR_VAR 0 52
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63790: LD_ADDR_VAR 0 53
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: LD_INT 3
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: LIST
63833: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63834: LD_ADDR_VAR 0 54
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: LIST
63874: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63875: LD_ADDR_VAR 0 55
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63915: LD_ADDR_VAR 0 56
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 3
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: LD_INT 3
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63956: LD_ADDR_VAR 0 57
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 3
63974: NEG
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64000: LD_ADDR_VAR 0 58
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 3
64031: NEG
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64046: LD_ADDR_VAR 0 59
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64090: LD_ADDR_VAR 0 60
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64131: LD_ADDR_VAR 0 61
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64171: LD_ADDR_VAR 0 62
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64212: LD_ADDR_VAR 0 63
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: NEG
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64256: LD_ADDR_VAR 0 64
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: LIST
64301: ST_TO_ADDR
// end ; 2 :
64302: GO 67568
64304: LD_INT 2
64306: DOUBLE
64307: EQUAL
64308: IFTRUE 64312
64310: GO 67567
64312: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64313: LD_ADDR_VAR 0 29
64317: PUSH
64318: LD_INT 4
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 4
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 5
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 5
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 4
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 3
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 3
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 5
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 3
64413: PUSH
64414: LD_INT 3
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 4
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 4
64443: PUSH
64444: LD_INT 4
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: LD_INT 4
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: LD_INT 3
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 2
64473: PUSH
64474: LD_INT 2
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 4
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 4
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: LD_INT 4
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: LD_INT 4
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 5
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 5
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: LD_INT 5
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: NEG
64586: PUSH
64587: LD_INT 3
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 3
64607: NEG
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 2
64619: NEG
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 3
64641: NEG
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 4
64652: NEG
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 4
64663: NEG
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 4
64675: NEG
64676: PUSH
64677: LD_INT 2
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 4
64698: NEG
64699: PUSH
64700: LD_INT 4
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 4
64710: NEG
64711: PUSH
64712: LD_INT 5
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 4
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 4
64746: NEG
64747: PUSH
64748: LD_INT 3
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 5
64758: NEG
64759: PUSH
64760: LD_INT 4
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 5
64770: NEG
64771: PUSH
64772: LD_INT 5
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: LD_INT 5
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 5
64794: NEG
64795: PUSH
64796: LD_INT 3
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64851: LD_ADDR_VAR 0 30
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: LD_INT 4
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: LD_INT 3
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 5
64878: PUSH
64879: LD_INT 4
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 5
64888: PUSH
64889: LD_INT 5
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 4
64898: PUSH
64899: LD_INT 5
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: LD_INT 4
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: LD_INT 3
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 5
64928: PUSH
64929: LD_INT 3
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: PUSH
64939: LD_INT 5
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 3
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: LD_INT 4
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 4
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: LD_INT 3
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 2
65020: PUSH
65021: LD_INT 4
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 4
65041: NEG
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 4
65052: NEG
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: NEG
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 3
65075: NEG
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 4
65086: NEG
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 5
65097: NEG
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 5
65108: NEG
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 5
65120: NEG
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 3
65143: NEG
65144: PUSH
65145: LD_INT 3
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 3
65155: NEG
65156: PUSH
65157: LD_INT 4
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: LD_INT 3
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: LD_INT 2
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: LD_INT 2
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 4
65203: NEG
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 4
65215: NEG
65216: PUSH
65217: LD_INT 4
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 2
65227: NEG
65228: PUSH
65229: LD_INT 4
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 4
65239: NEG
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 4
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: LD_INT 5
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 3
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: LD_INT 4
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: LD_INT 5
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 3
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 5
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65398: LD_ADDR_VAR 0 31
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 4
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: LD_INT 3
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 4
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 5
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 5
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: LD_INT 4
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 3
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: PUSH
65478: LD_INT 5
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 3
65498: NEG
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 3
65509: NEG
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 2
65521: NEG
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 4
65554: NEG
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 4
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 4
65577: NEG
65578: PUSH
65579: LD_INT 2
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 2
65589: NEG
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 4
65600: NEG
65601: PUSH
65602: LD_INT 4
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: NEG
65613: PUSH
65614: LD_INT 5
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: LD_INT 4
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: LD_INT 3
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 4
65648: NEG
65649: PUSH
65650: LD_INT 3
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 5
65660: NEG
65661: PUSH
65662: LD_INT 4
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 5
65672: NEG
65673: PUSH
65674: LD_INT 5
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 3
65684: NEG
65685: PUSH
65686: LD_INT 5
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 5
65696: NEG
65697: PUSH
65698: LD_INT 3
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 4
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: LD_INT 2
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: LD_INT 4
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: LD_INT 2
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: LD_INT 4
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 4
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 4
65820: PUSH
65821: LD_INT 1
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 5
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 5
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 4
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: PUSH
65883: LD_INT 2
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 5
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65948: LD_ADDR_VAR 0 32
65952: PUSH
65953: LD_INT 4
65955: NEG
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 3
65989: NEG
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 5
66011: NEG
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 5
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 5
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 3
66057: NEG
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 3
66069: NEG
66070: PUSH
66071: LD_INT 4
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: LD_INT 3
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: NEG
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 4
66117: NEG
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 4
66129: NEG
66130: PUSH
66131: LD_INT 4
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 2
66141: NEG
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 4
66153: NEG
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 4
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: LD_INT 5
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: LD_INT 4
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: LD_INT 3
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 3
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: LD_INT 4
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: LD_INT 5
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: LD_INT 3
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: LD_INT 5
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 3
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 4
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 4
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: PUSH
66309: LD_INT 1
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 4
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 4
66360: PUSH
66361: LD_INT 4
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 4
66370: PUSH
66371: LD_INT 3
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 5
66380: PUSH
66381: LD_INT 4
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 5
66390: PUSH
66391: LD_INT 5
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 4
66400: PUSH
66401: LD_INT 5
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 4
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 3
66420: PUSH
66421: LD_INT 3
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 5
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: LD_INT 5
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66495: LD_ADDR_VAR 0 33
66499: PUSH
66500: LD_INT 4
66502: NEG
66503: PUSH
66504: LD_INT 4
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 4
66514: NEG
66515: PUSH
66516: LD_INT 5
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 3
66526: NEG
66527: PUSH
66528: LD_INT 4
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: LD_INT 3
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 4
66550: NEG
66551: PUSH
66552: LD_INT 3
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 5
66562: NEG
66563: PUSH
66564: LD_INT 4
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 5
66574: NEG
66575: PUSH
66576: LD_INT 5
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: LD_INT 5
66590: NEG
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 5
66598: NEG
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_INT 3
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: LD_INT 4
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: LD_INT 2
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: NEG
66666: PUSH
66667: LD_INT 3
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: NEG
66678: PUSH
66679: LD_INT 4
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 2
66700: NEG
66701: PUSH
66702: LD_INT 4
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 4
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 4
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 5
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 5
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 4
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 3
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 3
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 5
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 3
66805: PUSH
66806: LD_INT 3
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: PUSH
66816: LD_INT 2
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 4
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 4
66835: PUSH
66836: LD_INT 4
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 3
66845: PUSH
66846: LD_INT 4
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 3
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 2
66865: PUSH
66866: LD_INT 2
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 4
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: LD_INT 4
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 4
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 3
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: LD_INT 4
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: LD_INT 5
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: LD_INT 5
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 1
66945: NEG
66946: PUSH
66947: LD_INT 4
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: LD_INT 5
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 2
66977: NEG
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67033: LD_ADDR_VAR 0 34
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 4
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 5
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: LD_INT 4
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: LD_INT 4
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: LD_INT 5
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 2
67130: NEG
67131: PUSH
67132: LD_INT 5
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 3
67152: PUSH
67153: LD_INT 1
67155: NEG
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 4
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 4
67173: PUSH
67174: LD_INT 1
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 3
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: LD_INT 1
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 2
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 4
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 4
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 5
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 5
67265: PUSH
67266: LD_INT 5
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 4
67275: PUSH
67276: LD_INT 5
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: LD_INT 4
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 5
67305: PUSH
67306: LD_INT 3
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 3
67315: PUSH
67316: LD_INT 5
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 0
67325: PUSH
67326: LD_INT 3
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: LD_INT 3
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: LD_INT 4
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 1
67375: NEG
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: LD_INT 4
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 2
67407: NEG
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 4
67418: NEG
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 4
67429: NEG
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: NEG
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: NEG
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 5
67474: NEG
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 5
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 5
67497: NEG
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 3
67509: NEG
67510: PUSH
67511: LD_INT 2
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// end ; end ;
67565: GO 67568
67567: POP
// case btype of b_depot , b_warehouse :
67568: LD_VAR 0 1
67572: PUSH
67573: LD_INT 0
67575: DOUBLE
67576: EQUAL
67577: IFTRUE 67587
67579: LD_INT 1
67581: DOUBLE
67582: EQUAL
67583: IFTRUE 67587
67585: GO 67788
67587: POP
// case nation of nation_american :
67588: LD_VAR 0 5
67592: PUSH
67593: LD_INT 1
67595: DOUBLE
67596: EQUAL
67597: IFTRUE 67601
67599: GO 67657
67601: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67602: LD_ADDR_VAR 0 9
67606: PUSH
67607: LD_VAR 0 11
67611: PUSH
67612: LD_VAR 0 12
67616: PUSH
67617: LD_VAR 0 13
67621: PUSH
67622: LD_VAR 0 14
67626: PUSH
67627: LD_VAR 0 15
67631: PUSH
67632: LD_VAR 0 16
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: PUSH
67645: LD_VAR 0 4
67649: PUSH
67650: LD_INT 1
67652: PLUS
67653: ARRAY
67654: ST_TO_ADDR
67655: GO 67786
67657: LD_INT 2
67659: DOUBLE
67660: EQUAL
67661: IFTRUE 67665
67663: GO 67721
67665: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67666: LD_ADDR_VAR 0 9
67670: PUSH
67671: LD_VAR 0 17
67675: PUSH
67676: LD_VAR 0 18
67680: PUSH
67681: LD_VAR 0 19
67685: PUSH
67686: LD_VAR 0 20
67690: PUSH
67691: LD_VAR 0 21
67695: PUSH
67696: LD_VAR 0 22
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: PUSH
67709: LD_VAR 0 4
67713: PUSH
67714: LD_INT 1
67716: PLUS
67717: ARRAY
67718: ST_TO_ADDR
67719: GO 67786
67721: LD_INT 3
67723: DOUBLE
67724: EQUAL
67725: IFTRUE 67729
67727: GO 67785
67729: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67730: LD_ADDR_VAR 0 9
67734: PUSH
67735: LD_VAR 0 23
67739: PUSH
67740: LD_VAR 0 24
67744: PUSH
67745: LD_VAR 0 25
67749: PUSH
67750: LD_VAR 0 26
67754: PUSH
67755: LD_VAR 0 27
67759: PUSH
67760: LD_VAR 0 28
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: PUSH
67773: LD_VAR 0 4
67777: PUSH
67778: LD_INT 1
67780: PLUS
67781: ARRAY
67782: ST_TO_ADDR
67783: GO 67786
67785: POP
67786: GO 68341
67788: LD_INT 2
67790: DOUBLE
67791: EQUAL
67792: IFTRUE 67802
67794: LD_INT 3
67796: DOUBLE
67797: EQUAL
67798: IFTRUE 67802
67800: GO 67858
67802: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67803: LD_ADDR_VAR 0 9
67807: PUSH
67808: LD_VAR 0 29
67812: PUSH
67813: LD_VAR 0 30
67817: PUSH
67818: LD_VAR 0 31
67822: PUSH
67823: LD_VAR 0 32
67827: PUSH
67828: LD_VAR 0 33
67832: PUSH
67833: LD_VAR 0 34
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: PUSH
67846: LD_VAR 0 4
67850: PUSH
67851: LD_INT 1
67853: PLUS
67854: ARRAY
67855: ST_TO_ADDR
67856: GO 68341
67858: LD_INT 16
67860: DOUBLE
67861: EQUAL
67862: IFTRUE 67920
67864: LD_INT 17
67866: DOUBLE
67867: EQUAL
67868: IFTRUE 67920
67870: LD_INT 18
67872: DOUBLE
67873: EQUAL
67874: IFTRUE 67920
67876: LD_INT 19
67878: DOUBLE
67879: EQUAL
67880: IFTRUE 67920
67882: LD_INT 22
67884: DOUBLE
67885: EQUAL
67886: IFTRUE 67920
67888: LD_INT 20
67890: DOUBLE
67891: EQUAL
67892: IFTRUE 67920
67894: LD_INT 21
67896: DOUBLE
67897: EQUAL
67898: IFTRUE 67920
67900: LD_INT 23
67902: DOUBLE
67903: EQUAL
67904: IFTRUE 67920
67906: LD_INT 24
67908: DOUBLE
67909: EQUAL
67910: IFTRUE 67920
67912: LD_INT 25
67914: DOUBLE
67915: EQUAL
67916: IFTRUE 67920
67918: GO 67976
67920: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67921: LD_ADDR_VAR 0 9
67925: PUSH
67926: LD_VAR 0 35
67930: PUSH
67931: LD_VAR 0 36
67935: PUSH
67936: LD_VAR 0 37
67940: PUSH
67941: LD_VAR 0 38
67945: PUSH
67946: LD_VAR 0 39
67950: PUSH
67951: LD_VAR 0 40
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: PUSH
67964: LD_VAR 0 4
67968: PUSH
67969: LD_INT 1
67971: PLUS
67972: ARRAY
67973: ST_TO_ADDR
67974: GO 68341
67976: LD_INT 6
67978: DOUBLE
67979: EQUAL
67980: IFTRUE 68032
67982: LD_INT 7
67984: DOUBLE
67985: EQUAL
67986: IFTRUE 68032
67988: LD_INT 8
67990: DOUBLE
67991: EQUAL
67992: IFTRUE 68032
67994: LD_INT 13
67996: DOUBLE
67997: EQUAL
67998: IFTRUE 68032
68000: LD_INT 12
68002: DOUBLE
68003: EQUAL
68004: IFTRUE 68032
68006: LD_INT 15
68008: DOUBLE
68009: EQUAL
68010: IFTRUE 68032
68012: LD_INT 11
68014: DOUBLE
68015: EQUAL
68016: IFTRUE 68032
68018: LD_INT 14
68020: DOUBLE
68021: EQUAL
68022: IFTRUE 68032
68024: LD_INT 10
68026: DOUBLE
68027: EQUAL
68028: IFTRUE 68032
68030: GO 68088
68032: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68033: LD_ADDR_VAR 0 9
68037: PUSH
68038: LD_VAR 0 41
68042: PUSH
68043: LD_VAR 0 42
68047: PUSH
68048: LD_VAR 0 43
68052: PUSH
68053: LD_VAR 0 44
68057: PUSH
68058: LD_VAR 0 45
68062: PUSH
68063: LD_VAR 0 46
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: PUSH
68076: LD_VAR 0 4
68080: PUSH
68081: LD_INT 1
68083: PLUS
68084: ARRAY
68085: ST_TO_ADDR
68086: GO 68341
68088: LD_INT 36
68090: DOUBLE
68091: EQUAL
68092: IFTRUE 68096
68094: GO 68152
68096: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68097: LD_ADDR_VAR 0 9
68101: PUSH
68102: LD_VAR 0 47
68106: PUSH
68107: LD_VAR 0 48
68111: PUSH
68112: LD_VAR 0 49
68116: PUSH
68117: LD_VAR 0 50
68121: PUSH
68122: LD_VAR 0 51
68126: PUSH
68127: LD_VAR 0 52
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: PUSH
68140: LD_VAR 0 4
68144: PUSH
68145: LD_INT 1
68147: PLUS
68148: ARRAY
68149: ST_TO_ADDR
68150: GO 68341
68152: LD_INT 4
68154: DOUBLE
68155: EQUAL
68156: IFTRUE 68178
68158: LD_INT 5
68160: DOUBLE
68161: EQUAL
68162: IFTRUE 68178
68164: LD_INT 34
68166: DOUBLE
68167: EQUAL
68168: IFTRUE 68178
68170: LD_INT 37
68172: DOUBLE
68173: EQUAL
68174: IFTRUE 68178
68176: GO 68234
68178: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68179: LD_ADDR_VAR 0 9
68183: PUSH
68184: LD_VAR 0 53
68188: PUSH
68189: LD_VAR 0 54
68193: PUSH
68194: LD_VAR 0 55
68198: PUSH
68199: LD_VAR 0 56
68203: PUSH
68204: LD_VAR 0 57
68208: PUSH
68209: LD_VAR 0 58
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: PUSH
68222: LD_VAR 0 4
68226: PUSH
68227: LD_INT 1
68229: PLUS
68230: ARRAY
68231: ST_TO_ADDR
68232: GO 68341
68234: LD_INT 31
68236: DOUBLE
68237: EQUAL
68238: IFTRUE 68284
68240: LD_INT 32
68242: DOUBLE
68243: EQUAL
68244: IFTRUE 68284
68246: LD_INT 33
68248: DOUBLE
68249: EQUAL
68250: IFTRUE 68284
68252: LD_INT 27
68254: DOUBLE
68255: EQUAL
68256: IFTRUE 68284
68258: LD_INT 26
68260: DOUBLE
68261: EQUAL
68262: IFTRUE 68284
68264: LD_INT 28
68266: DOUBLE
68267: EQUAL
68268: IFTRUE 68284
68270: LD_INT 29
68272: DOUBLE
68273: EQUAL
68274: IFTRUE 68284
68276: LD_INT 30
68278: DOUBLE
68279: EQUAL
68280: IFTRUE 68284
68282: GO 68340
68284: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68285: LD_ADDR_VAR 0 9
68289: PUSH
68290: LD_VAR 0 59
68294: PUSH
68295: LD_VAR 0 60
68299: PUSH
68300: LD_VAR 0 61
68304: PUSH
68305: LD_VAR 0 62
68309: PUSH
68310: LD_VAR 0 63
68314: PUSH
68315: LD_VAR 0 64
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: PUSH
68328: LD_VAR 0 4
68332: PUSH
68333: LD_INT 1
68335: PLUS
68336: ARRAY
68337: ST_TO_ADDR
68338: GO 68341
68340: POP
// temp_list2 = [ ] ;
68341: LD_ADDR_VAR 0 10
68345: PUSH
68346: EMPTY
68347: ST_TO_ADDR
// for i in temp_list do
68348: LD_ADDR_VAR 0 8
68352: PUSH
68353: LD_VAR 0 9
68357: PUSH
68358: FOR_IN
68359: IFFALSE 68411
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68361: LD_ADDR_VAR 0 10
68365: PUSH
68366: LD_VAR 0 10
68370: PUSH
68371: LD_VAR 0 8
68375: PUSH
68376: LD_INT 1
68378: ARRAY
68379: PUSH
68380: LD_VAR 0 2
68384: PLUS
68385: PUSH
68386: LD_VAR 0 8
68390: PUSH
68391: LD_INT 2
68393: ARRAY
68394: PUSH
68395: LD_VAR 0 3
68399: PLUS
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: EMPTY
68406: LIST
68407: ADD
68408: ST_TO_ADDR
68409: GO 68358
68411: POP
68412: POP
// result = temp_list2 ;
68413: LD_ADDR_VAR 0 7
68417: PUSH
68418: LD_VAR 0 10
68422: ST_TO_ADDR
// end ;
68423: LD_VAR 0 7
68427: RET
// export function EnemyInRange ( unit , dist ) ; begin
68428: LD_INT 0
68430: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68431: LD_ADDR_VAR 0 3
68435: PUSH
68436: LD_VAR 0 1
68440: PPUSH
68441: CALL_OW 255
68445: PPUSH
68446: LD_VAR 0 1
68450: PPUSH
68451: CALL_OW 250
68455: PPUSH
68456: LD_VAR 0 1
68460: PPUSH
68461: CALL_OW 251
68465: PPUSH
68466: LD_VAR 0 2
68470: PPUSH
68471: CALL 41801 0 4
68475: PUSH
68476: LD_INT 4
68478: ARRAY
68479: ST_TO_ADDR
// end ;
68480: LD_VAR 0 3
68484: RET
// export function PlayerSeeMe ( unit ) ; begin
68485: LD_INT 0
68487: PPUSH
// result := See ( your_side , unit ) ;
68488: LD_ADDR_VAR 0 2
68492: PUSH
68493: LD_OWVAR 2
68497: PPUSH
68498: LD_VAR 0 1
68502: PPUSH
68503: CALL_OW 292
68507: ST_TO_ADDR
// end ;
68508: LD_VAR 0 2
68512: RET
// export function ReverseDir ( unit ) ; begin
68513: LD_INT 0
68515: PPUSH
// if not unit then
68516: LD_VAR 0 1
68520: NOT
68521: IFFALSE 68525
// exit ;
68523: GO 68548
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68525: LD_ADDR_VAR 0 2
68529: PUSH
68530: LD_VAR 0 1
68534: PPUSH
68535: CALL_OW 254
68539: PUSH
68540: LD_INT 3
68542: PLUS
68543: PUSH
68544: LD_INT 6
68546: MOD
68547: ST_TO_ADDR
// end ;
68548: LD_VAR 0 2
68552: RET
// export function ReverseArray ( array ) ; var i ; begin
68553: LD_INT 0
68555: PPUSH
68556: PPUSH
// if not array then
68557: LD_VAR 0 1
68561: NOT
68562: IFFALSE 68566
// exit ;
68564: GO 68621
// result := [ ] ;
68566: LD_ADDR_VAR 0 2
68570: PUSH
68571: EMPTY
68572: ST_TO_ADDR
// for i := array downto 1 do
68573: LD_ADDR_VAR 0 3
68577: PUSH
68578: DOUBLE
68579: LD_VAR 0 1
68583: INC
68584: ST_TO_ADDR
68585: LD_INT 1
68587: PUSH
68588: FOR_DOWNTO
68589: IFFALSE 68619
// result := Join ( result , array [ i ] ) ;
68591: LD_ADDR_VAR 0 2
68595: PUSH
68596: LD_VAR 0 2
68600: PPUSH
68601: LD_VAR 0 1
68605: PUSH
68606: LD_VAR 0 3
68610: ARRAY
68611: PPUSH
68612: CALL 73277 0 2
68616: ST_TO_ADDR
68617: GO 68588
68619: POP
68620: POP
// end ;
68621: LD_VAR 0 2
68625: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68626: LD_INT 0
68628: PPUSH
68629: PPUSH
68630: PPUSH
68631: PPUSH
68632: PPUSH
68633: PPUSH
// if not unit or not hexes then
68634: LD_VAR 0 1
68638: NOT
68639: PUSH
68640: LD_VAR 0 2
68644: NOT
68645: OR
68646: IFFALSE 68650
// exit ;
68648: GO 68773
// dist := 9999 ;
68650: LD_ADDR_VAR 0 5
68654: PUSH
68655: LD_INT 9999
68657: ST_TO_ADDR
// for i = 1 to hexes do
68658: LD_ADDR_VAR 0 4
68662: PUSH
68663: DOUBLE
68664: LD_INT 1
68666: DEC
68667: ST_TO_ADDR
68668: LD_VAR 0 2
68672: PUSH
68673: FOR_TO
68674: IFFALSE 68761
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68676: LD_ADDR_VAR 0 6
68680: PUSH
68681: LD_VAR 0 1
68685: PPUSH
68686: LD_VAR 0 2
68690: PUSH
68691: LD_VAR 0 4
68695: ARRAY
68696: PUSH
68697: LD_INT 1
68699: ARRAY
68700: PPUSH
68701: LD_VAR 0 2
68705: PUSH
68706: LD_VAR 0 4
68710: ARRAY
68711: PUSH
68712: LD_INT 2
68714: ARRAY
68715: PPUSH
68716: CALL_OW 297
68720: ST_TO_ADDR
// if tdist < dist then
68721: LD_VAR 0 6
68725: PUSH
68726: LD_VAR 0 5
68730: LESS
68731: IFFALSE 68759
// begin hex := hexes [ i ] ;
68733: LD_ADDR_VAR 0 8
68737: PUSH
68738: LD_VAR 0 2
68742: PUSH
68743: LD_VAR 0 4
68747: ARRAY
68748: ST_TO_ADDR
// dist := tdist ;
68749: LD_ADDR_VAR 0 5
68753: PUSH
68754: LD_VAR 0 6
68758: ST_TO_ADDR
// end ; end ;
68759: GO 68673
68761: POP
68762: POP
// result := hex ;
68763: LD_ADDR_VAR 0 3
68767: PUSH
68768: LD_VAR 0 8
68772: ST_TO_ADDR
// end ;
68773: LD_VAR 0 3
68777: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68778: LD_INT 0
68780: PPUSH
68781: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68782: LD_VAR 0 1
68786: NOT
68787: PUSH
68788: LD_VAR 0 1
68792: PUSH
68793: LD_INT 21
68795: PUSH
68796: LD_INT 2
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 23
68805: PUSH
68806: LD_INT 2
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PPUSH
68817: CALL_OW 69
68821: IN
68822: NOT
68823: OR
68824: IFFALSE 68828
// exit ;
68826: GO 68875
// for i = 1 to 3 do
68828: LD_ADDR_VAR 0 3
68832: PUSH
68833: DOUBLE
68834: LD_INT 1
68836: DEC
68837: ST_TO_ADDR
68838: LD_INT 3
68840: PUSH
68841: FOR_TO
68842: IFFALSE 68873
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68844: LD_VAR 0 1
68848: PPUSH
68849: CALL_OW 250
68853: PPUSH
68854: LD_VAR 0 1
68858: PPUSH
68859: CALL_OW 251
68863: PPUSH
68864: LD_INT 1
68866: PPUSH
68867: CALL_OW 453
68871: GO 68841
68873: POP
68874: POP
// end ;
68875: LD_VAR 0 2
68879: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
68884: PPUSH
68885: PPUSH
68886: PPUSH
68887: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68888: LD_VAR 0 1
68892: NOT
68893: PUSH
68894: LD_VAR 0 2
68898: NOT
68899: OR
68900: PUSH
68901: LD_VAR 0 1
68905: PPUSH
68906: CALL_OW 314
68910: OR
68911: IFFALSE 68915
// exit ;
68913: GO 69382
// if GetLives ( i ) < 250 then
68915: LD_VAR 0 4
68919: PPUSH
68920: CALL_OW 256
68924: PUSH
68925: LD_INT 250
68927: LESS
68928: IFFALSE 68941
// begin ComAutodestruct ( i ) ;
68930: LD_VAR 0 4
68934: PPUSH
68935: CALL 68778 0 1
// exit ;
68939: GO 69382
// end ; x := GetX ( enemy_unit ) ;
68941: LD_ADDR_VAR 0 7
68945: PUSH
68946: LD_VAR 0 2
68950: PPUSH
68951: CALL_OW 250
68955: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68956: LD_ADDR_VAR 0 8
68960: PUSH
68961: LD_VAR 0 2
68965: PPUSH
68966: CALL_OW 251
68970: ST_TO_ADDR
// if not x or not y then
68971: LD_VAR 0 7
68975: NOT
68976: PUSH
68977: LD_VAR 0 8
68981: NOT
68982: OR
68983: IFFALSE 68987
// exit ;
68985: GO 69382
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68987: LD_ADDR_VAR 0 6
68991: PUSH
68992: LD_VAR 0 7
68996: PPUSH
68997: LD_INT 0
68999: PPUSH
69000: LD_INT 4
69002: PPUSH
69003: CALL_OW 272
69007: PUSH
69008: LD_VAR 0 8
69012: PPUSH
69013: LD_INT 0
69015: PPUSH
69016: LD_INT 4
69018: PPUSH
69019: CALL_OW 273
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_VAR 0 7
69032: PPUSH
69033: LD_INT 1
69035: PPUSH
69036: LD_INT 4
69038: PPUSH
69039: CALL_OW 272
69043: PUSH
69044: LD_VAR 0 8
69048: PPUSH
69049: LD_INT 1
69051: PPUSH
69052: LD_INT 4
69054: PPUSH
69055: CALL_OW 273
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_VAR 0 7
69068: PPUSH
69069: LD_INT 2
69071: PPUSH
69072: LD_INT 4
69074: PPUSH
69075: CALL_OW 272
69079: PUSH
69080: LD_VAR 0 8
69084: PPUSH
69085: LD_INT 2
69087: PPUSH
69088: LD_INT 4
69090: PPUSH
69091: CALL_OW 273
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_VAR 0 7
69104: PPUSH
69105: LD_INT 3
69107: PPUSH
69108: LD_INT 4
69110: PPUSH
69111: CALL_OW 272
69115: PUSH
69116: LD_VAR 0 8
69120: PPUSH
69121: LD_INT 3
69123: PPUSH
69124: LD_INT 4
69126: PPUSH
69127: CALL_OW 273
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_VAR 0 7
69140: PPUSH
69141: LD_INT 4
69143: PPUSH
69144: LD_INT 4
69146: PPUSH
69147: CALL_OW 272
69151: PUSH
69152: LD_VAR 0 8
69156: PPUSH
69157: LD_INT 4
69159: PPUSH
69160: LD_INT 4
69162: PPUSH
69163: CALL_OW 273
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_VAR 0 7
69176: PPUSH
69177: LD_INT 5
69179: PPUSH
69180: LD_INT 4
69182: PPUSH
69183: CALL_OW 272
69187: PUSH
69188: LD_VAR 0 8
69192: PPUSH
69193: LD_INT 5
69195: PPUSH
69196: LD_INT 4
69198: PPUSH
69199: CALL_OW 273
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: ST_TO_ADDR
// for i = tmp downto 1 do
69216: LD_ADDR_VAR 0 4
69220: PUSH
69221: DOUBLE
69222: LD_VAR 0 6
69226: INC
69227: ST_TO_ADDR
69228: LD_INT 1
69230: PUSH
69231: FOR_DOWNTO
69232: IFFALSE 69333
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69234: LD_VAR 0 6
69238: PUSH
69239: LD_VAR 0 4
69243: ARRAY
69244: PUSH
69245: LD_INT 1
69247: ARRAY
69248: PPUSH
69249: LD_VAR 0 6
69253: PUSH
69254: LD_VAR 0 4
69258: ARRAY
69259: PUSH
69260: LD_INT 2
69262: ARRAY
69263: PPUSH
69264: CALL_OW 488
69268: NOT
69269: PUSH
69270: LD_VAR 0 6
69274: PUSH
69275: LD_VAR 0 4
69279: ARRAY
69280: PUSH
69281: LD_INT 1
69283: ARRAY
69284: PPUSH
69285: LD_VAR 0 6
69289: PUSH
69290: LD_VAR 0 4
69294: ARRAY
69295: PUSH
69296: LD_INT 2
69298: ARRAY
69299: PPUSH
69300: CALL_OW 428
69304: PUSH
69305: LD_INT 0
69307: NONEQUAL
69308: OR
69309: IFFALSE 69331
// tmp := Delete ( tmp , i ) ;
69311: LD_ADDR_VAR 0 6
69315: PUSH
69316: LD_VAR 0 6
69320: PPUSH
69321: LD_VAR 0 4
69325: PPUSH
69326: CALL_OW 3
69330: ST_TO_ADDR
69331: GO 69231
69333: POP
69334: POP
// j := GetClosestHex ( unit , tmp ) ;
69335: LD_ADDR_VAR 0 5
69339: PUSH
69340: LD_VAR 0 1
69344: PPUSH
69345: LD_VAR 0 6
69349: PPUSH
69350: CALL 68626 0 2
69354: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69355: LD_VAR 0 1
69359: PPUSH
69360: LD_VAR 0 5
69364: PUSH
69365: LD_INT 1
69367: ARRAY
69368: PPUSH
69369: LD_VAR 0 5
69373: PUSH
69374: LD_INT 2
69376: ARRAY
69377: PPUSH
69378: CALL_OW 111
// end ;
69382: LD_VAR 0 3
69386: RET
// export function PrepareApemanSoldier ( ) ; begin
69387: LD_INT 0
69389: PPUSH
// uc_nation := 0 ;
69390: LD_ADDR_OWVAR 21
69394: PUSH
69395: LD_INT 0
69397: ST_TO_ADDR
// hc_sex := sex_male ;
69398: LD_ADDR_OWVAR 27
69402: PUSH
69403: LD_INT 1
69405: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69406: LD_ADDR_OWVAR 28
69410: PUSH
69411: LD_INT 15
69413: ST_TO_ADDR
// hc_gallery :=  ;
69414: LD_ADDR_OWVAR 33
69418: PUSH
69419: LD_STRING 
69421: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69422: LD_ADDR_OWVAR 31
69426: PUSH
69427: LD_INT 0
69429: PPUSH
69430: LD_INT 3
69432: PPUSH
69433: CALL_OW 12
69437: PUSH
69438: LD_INT 0
69440: PPUSH
69441: LD_INT 3
69443: PPUSH
69444: CALL_OW 12
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: ST_TO_ADDR
// end ;
69461: LD_VAR 0 1
69465: RET
// export function PrepareApemanEngineer ( ) ; begin
69466: LD_INT 0
69468: PPUSH
// uc_nation := 0 ;
69469: LD_ADDR_OWVAR 21
69473: PUSH
69474: LD_INT 0
69476: ST_TO_ADDR
// hc_sex := sex_male ;
69477: LD_ADDR_OWVAR 27
69481: PUSH
69482: LD_INT 1
69484: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69485: LD_ADDR_OWVAR 28
69489: PUSH
69490: LD_INT 16
69492: ST_TO_ADDR
// hc_gallery :=  ;
69493: LD_ADDR_OWVAR 33
69497: PUSH
69498: LD_STRING 
69500: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69501: LD_ADDR_OWVAR 31
69505: PUSH
69506: LD_INT 0
69508: PPUSH
69509: LD_INT 3
69511: PPUSH
69512: CALL_OW 12
69516: PUSH
69517: LD_INT 0
69519: PPUSH
69520: LD_INT 3
69522: PPUSH
69523: CALL_OW 12
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: ST_TO_ADDR
// end ;
69540: LD_VAR 0 1
69544: RET
// export function PrepareApeman ( agressivity ) ; begin
69545: LD_INT 0
69547: PPUSH
// uc_side := 0 ;
69548: LD_ADDR_OWVAR 20
69552: PUSH
69553: LD_INT 0
69555: ST_TO_ADDR
// uc_nation := 0 ;
69556: LD_ADDR_OWVAR 21
69560: PUSH
69561: LD_INT 0
69563: ST_TO_ADDR
// hc_sex := sex_male ;
69564: LD_ADDR_OWVAR 27
69568: PUSH
69569: LD_INT 1
69571: ST_TO_ADDR
// hc_class := class_apeman ;
69572: LD_ADDR_OWVAR 28
69576: PUSH
69577: LD_INT 12
69579: ST_TO_ADDR
// hc_gallery :=  ;
69580: LD_ADDR_OWVAR 33
69584: PUSH
69585: LD_STRING 
69587: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69588: LD_ADDR_OWVAR 35
69592: PUSH
69593: LD_VAR 0 1
69597: NEG
69598: PPUSH
69599: LD_VAR 0 1
69603: PPUSH
69604: CALL_OW 12
69608: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69609: LD_ADDR_OWVAR 31
69613: PUSH
69614: LD_INT 0
69616: PPUSH
69617: LD_INT 3
69619: PPUSH
69620: CALL_OW 12
69624: PUSH
69625: LD_INT 0
69627: PPUSH
69628: LD_INT 3
69630: PPUSH
69631: CALL_OW 12
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: ST_TO_ADDR
// end ;
69648: LD_VAR 0 2
69652: RET
// export function PrepareTiger ( agressivity ) ; begin
69653: LD_INT 0
69655: PPUSH
// uc_side := 0 ;
69656: LD_ADDR_OWVAR 20
69660: PUSH
69661: LD_INT 0
69663: ST_TO_ADDR
// uc_nation := 0 ;
69664: LD_ADDR_OWVAR 21
69668: PUSH
69669: LD_INT 0
69671: ST_TO_ADDR
// hc_class := class_tiger ;
69672: LD_ADDR_OWVAR 28
69676: PUSH
69677: LD_INT 14
69679: ST_TO_ADDR
// hc_gallery :=  ;
69680: LD_ADDR_OWVAR 33
69684: PUSH
69685: LD_STRING 
69687: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69688: LD_ADDR_OWVAR 35
69692: PUSH
69693: LD_VAR 0 1
69697: NEG
69698: PPUSH
69699: LD_VAR 0 1
69703: PPUSH
69704: CALL_OW 12
69708: ST_TO_ADDR
// end ;
69709: LD_VAR 0 2
69713: RET
// export function PrepareEnchidna ( ) ; begin
69714: LD_INT 0
69716: PPUSH
// uc_side := 0 ;
69717: LD_ADDR_OWVAR 20
69721: PUSH
69722: LD_INT 0
69724: ST_TO_ADDR
// uc_nation := 0 ;
69725: LD_ADDR_OWVAR 21
69729: PUSH
69730: LD_INT 0
69732: ST_TO_ADDR
// hc_class := class_baggie ;
69733: LD_ADDR_OWVAR 28
69737: PUSH
69738: LD_INT 13
69740: ST_TO_ADDR
// hc_gallery :=  ;
69741: LD_ADDR_OWVAR 33
69745: PUSH
69746: LD_STRING 
69748: ST_TO_ADDR
// end ;
69749: LD_VAR 0 1
69753: RET
// export function PrepareFrog ( ) ; begin
69754: LD_INT 0
69756: PPUSH
// uc_side := 0 ;
69757: LD_ADDR_OWVAR 20
69761: PUSH
69762: LD_INT 0
69764: ST_TO_ADDR
// uc_nation := 0 ;
69765: LD_ADDR_OWVAR 21
69769: PUSH
69770: LD_INT 0
69772: ST_TO_ADDR
// hc_class := class_frog ;
69773: LD_ADDR_OWVAR 28
69777: PUSH
69778: LD_INT 19
69780: ST_TO_ADDR
// hc_gallery :=  ;
69781: LD_ADDR_OWVAR 33
69785: PUSH
69786: LD_STRING 
69788: ST_TO_ADDR
// end ;
69789: LD_VAR 0 1
69793: RET
// export function PrepareFish ( ) ; begin
69794: LD_INT 0
69796: PPUSH
// uc_side := 0 ;
69797: LD_ADDR_OWVAR 20
69801: PUSH
69802: LD_INT 0
69804: ST_TO_ADDR
// uc_nation := 0 ;
69805: LD_ADDR_OWVAR 21
69809: PUSH
69810: LD_INT 0
69812: ST_TO_ADDR
// hc_class := class_fish ;
69813: LD_ADDR_OWVAR 28
69817: PUSH
69818: LD_INT 20
69820: ST_TO_ADDR
// hc_gallery :=  ;
69821: LD_ADDR_OWVAR 33
69825: PUSH
69826: LD_STRING 
69828: ST_TO_ADDR
// end ;
69829: LD_VAR 0 1
69833: RET
// export function PrepareBird ( ) ; begin
69834: LD_INT 0
69836: PPUSH
// uc_side := 0 ;
69837: LD_ADDR_OWVAR 20
69841: PUSH
69842: LD_INT 0
69844: ST_TO_ADDR
// uc_nation := 0 ;
69845: LD_ADDR_OWVAR 21
69849: PUSH
69850: LD_INT 0
69852: ST_TO_ADDR
// hc_class := class_phororhacos ;
69853: LD_ADDR_OWVAR 28
69857: PUSH
69858: LD_INT 18
69860: ST_TO_ADDR
// hc_gallery :=  ;
69861: LD_ADDR_OWVAR 33
69865: PUSH
69866: LD_STRING 
69868: ST_TO_ADDR
// end ;
69869: LD_VAR 0 1
69873: RET
// export function PrepareHorse ( ) ; begin
69874: LD_INT 0
69876: PPUSH
// uc_side := 0 ;
69877: LD_ADDR_OWVAR 20
69881: PUSH
69882: LD_INT 0
69884: ST_TO_ADDR
// uc_nation := 0 ;
69885: LD_ADDR_OWVAR 21
69889: PUSH
69890: LD_INT 0
69892: ST_TO_ADDR
// hc_class := class_horse ;
69893: LD_ADDR_OWVAR 28
69897: PUSH
69898: LD_INT 21
69900: ST_TO_ADDR
// hc_gallery :=  ;
69901: LD_ADDR_OWVAR 33
69905: PUSH
69906: LD_STRING 
69908: ST_TO_ADDR
// end ;
69909: LD_VAR 0 1
69913: RET
// export function PrepareMastodont ( ) ; begin
69914: LD_INT 0
69916: PPUSH
// uc_side := 0 ;
69917: LD_ADDR_OWVAR 20
69921: PUSH
69922: LD_INT 0
69924: ST_TO_ADDR
// uc_nation := 0 ;
69925: LD_ADDR_OWVAR 21
69929: PUSH
69930: LD_INT 0
69932: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69933: LD_ADDR_OWVAR 37
69937: PUSH
69938: LD_INT 31
69940: ST_TO_ADDR
// vc_control := control_rider ;
69941: LD_ADDR_OWVAR 38
69945: PUSH
69946: LD_INT 4
69948: ST_TO_ADDR
// end ;
69949: LD_VAR 0 1
69953: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69954: LD_INT 0
69956: PPUSH
69957: PPUSH
69958: PPUSH
// uc_side = 0 ;
69959: LD_ADDR_OWVAR 20
69963: PUSH
69964: LD_INT 0
69966: ST_TO_ADDR
// uc_nation = 0 ;
69967: LD_ADDR_OWVAR 21
69971: PUSH
69972: LD_INT 0
69974: ST_TO_ADDR
// InitHc_All ( ) ;
69975: CALL_OW 584
// InitVc ;
69979: CALL_OW 20
// if mastodonts then
69983: LD_VAR 0 6
69987: IFFALSE 70054
// for i = 1 to mastodonts do
69989: LD_ADDR_VAR 0 11
69993: PUSH
69994: DOUBLE
69995: LD_INT 1
69997: DEC
69998: ST_TO_ADDR
69999: LD_VAR 0 6
70003: PUSH
70004: FOR_TO
70005: IFFALSE 70052
// begin vc_chassis := 31 ;
70007: LD_ADDR_OWVAR 37
70011: PUSH
70012: LD_INT 31
70014: ST_TO_ADDR
// vc_control := control_rider ;
70015: LD_ADDR_OWVAR 38
70019: PUSH
70020: LD_INT 4
70022: ST_TO_ADDR
// animal := CreateVehicle ;
70023: LD_ADDR_VAR 0 12
70027: PUSH
70028: CALL_OW 45
70032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70033: LD_VAR 0 12
70037: PPUSH
70038: LD_VAR 0 8
70042: PPUSH
70043: LD_INT 0
70045: PPUSH
70046: CALL 72182 0 3
// end ;
70050: GO 70004
70052: POP
70053: POP
// if horses then
70054: LD_VAR 0 5
70058: IFFALSE 70125
// for i = 1 to horses do
70060: LD_ADDR_VAR 0 11
70064: PUSH
70065: DOUBLE
70066: LD_INT 1
70068: DEC
70069: ST_TO_ADDR
70070: LD_VAR 0 5
70074: PUSH
70075: FOR_TO
70076: IFFALSE 70123
// begin hc_class := 21 ;
70078: LD_ADDR_OWVAR 28
70082: PUSH
70083: LD_INT 21
70085: ST_TO_ADDR
// hc_gallery :=  ;
70086: LD_ADDR_OWVAR 33
70090: PUSH
70091: LD_STRING 
70093: ST_TO_ADDR
// animal := CreateHuman ;
70094: LD_ADDR_VAR 0 12
70098: PUSH
70099: CALL_OW 44
70103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70104: LD_VAR 0 12
70108: PPUSH
70109: LD_VAR 0 8
70113: PPUSH
70114: LD_INT 0
70116: PPUSH
70117: CALL 72182 0 3
// end ;
70121: GO 70075
70123: POP
70124: POP
// if birds then
70125: LD_VAR 0 1
70129: IFFALSE 70196
// for i = 1 to birds do
70131: LD_ADDR_VAR 0 11
70135: PUSH
70136: DOUBLE
70137: LD_INT 1
70139: DEC
70140: ST_TO_ADDR
70141: LD_VAR 0 1
70145: PUSH
70146: FOR_TO
70147: IFFALSE 70194
// begin hc_class := 18 ;
70149: LD_ADDR_OWVAR 28
70153: PUSH
70154: LD_INT 18
70156: ST_TO_ADDR
// hc_gallery =  ;
70157: LD_ADDR_OWVAR 33
70161: PUSH
70162: LD_STRING 
70164: ST_TO_ADDR
// animal := CreateHuman ;
70165: LD_ADDR_VAR 0 12
70169: PUSH
70170: CALL_OW 44
70174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70175: LD_VAR 0 12
70179: PPUSH
70180: LD_VAR 0 8
70184: PPUSH
70185: LD_INT 0
70187: PPUSH
70188: CALL 72182 0 3
// end ;
70192: GO 70146
70194: POP
70195: POP
// if tigers then
70196: LD_VAR 0 2
70200: IFFALSE 70284
// for i = 1 to tigers do
70202: LD_ADDR_VAR 0 11
70206: PUSH
70207: DOUBLE
70208: LD_INT 1
70210: DEC
70211: ST_TO_ADDR
70212: LD_VAR 0 2
70216: PUSH
70217: FOR_TO
70218: IFFALSE 70282
// begin hc_class = class_tiger ;
70220: LD_ADDR_OWVAR 28
70224: PUSH
70225: LD_INT 14
70227: ST_TO_ADDR
// hc_gallery =  ;
70228: LD_ADDR_OWVAR 33
70232: PUSH
70233: LD_STRING 
70235: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70236: LD_ADDR_OWVAR 35
70240: PUSH
70241: LD_INT 7
70243: NEG
70244: PPUSH
70245: LD_INT 7
70247: PPUSH
70248: CALL_OW 12
70252: ST_TO_ADDR
// animal := CreateHuman ;
70253: LD_ADDR_VAR 0 12
70257: PUSH
70258: CALL_OW 44
70262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70263: LD_VAR 0 12
70267: PPUSH
70268: LD_VAR 0 8
70272: PPUSH
70273: LD_INT 0
70275: PPUSH
70276: CALL 72182 0 3
// end ;
70280: GO 70217
70282: POP
70283: POP
// if apemans then
70284: LD_VAR 0 3
70288: IFFALSE 70411
// for i = 1 to apemans do
70290: LD_ADDR_VAR 0 11
70294: PUSH
70295: DOUBLE
70296: LD_INT 1
70298: DEC
70299: ST_TO_ADDR
70300: LD_VAR 0 3
70304: PUSH
70305: FOR_TO
70306: IFFALSE 70409
// begin hc_class = class_apeman ;
70308: LD_ADDR_OWVAR 28
70312: PUSH
70313: LD_INT 12
70315: ST_TO_ADDR
// hc_gallery =  ;
70316: LD_ADDR_OWVAR 33
70320: PUSH
70321: LD_STRING 
70323: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70324: LD_ADDR_OWVAR 35
70328: PUSH
70329: LD_INT 2
70331: NEG
70332: PPUSH
70333: LD_INT 2
70335: PPUSH
70336: CALL_OW 12
70340: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70341: LD_ADDR_OWVAR 31
70345: PUSH
70346: LD_INT 1
70348: PPUSH
70349: LD_INT 3
70351: PPUSH
70352: CALL_OW 12
70356: PUSH
70357: LD_INT 1
70359: PPUSH
70360: LD_INT 3
70362: PPUSH
70363: CALL_OW 12
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: LD_INT 0
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: ST_TO_ADDR
// animal := CreateHuman ;
70380: LD_ADDR_VAR 0 12
70384: PUSH
70385: CALL_OW 44
70389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70390: LD_VAR 0 12
70394: PPUSH
70395: LD_VAR 0 8
70399: PPUSH
70400: LD_INT 0
70402: PPUSH
70403: CALL 72182 0 3
// end ;
70407: GO 70305
70409: POP
70410: POP
// if enchidnas then
70411: LD_VAR 0 4
70415: IFFALSE 70482
// for i = 1 to enchidnas do
70417: LD_ADDR_VAR 0 11
70421: PUSH
70422: DOUBLE
70423: LD_INT 1
70425: DEC
70426: ST_TO_ADDR
70427: LD_VAR 0 4
70431: PUSH
70432: FOR_TO
70433: IFFALSE 70480
// begin hc_class = 13 ;
70435: LD_ADDR_OWVAR 28
70439: PUSH
70440: LD_INT 13
70442: ST_TO_ADDR
// hc_gallery =  ;
70443: LD_ADDR_OWVAR 33
70447: PUSH
70448: LD_STRING 
70450: ST_TO_ADDR
// animal := CreateHuman ;
70451: LD_ADDR_VAR 0 12
70455: PUSH
70456: CALL_OW 44
70460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70461: LD_VAR 0 12
70465: PPUSH
70466: LD_VAR 0 8
70470: PPUSH
70471: LD_INT 0
70473: PPUSH
70474: CALL 72182 0 3
// end ;
70478: GO 70432
70480: POP
70481: POP
// if fishes then
70482: LD_VAR 0 7
70486: IFFALSE 70553
// for i = 1 to fishes do
70488: LD_ADDR_VAR 0 11
70492: PUSH
70493: DOUBLE
70494: LD_INT 1
70496: DEC
70497: ST_TO_ADDR
70498: LD_VAR 0 7
70502: PUSH
70503: FOR_TO
70504: IFFALSE 70551
// begin hc_class = 20 ;
70506: LD_ADDR_OWVAR 28
70510: PUSH
70511: LD_INT 20
70513: ST_TO_ADDR
// hc_gallery =  ;
70514: LD_ADDR_OWVAR 33
70518: PUSH
70519: LD_STRING 
70521: ST_TO_ADDR
// animal := CreateHuman ;
70522: LD_ADDR_VAR 0 12
70526: PUSH
70527: CALL_OW 44
70531: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70532: LD_VAR 0 12
70536: PPUSH
70537: LD_VAR 0 9
70541: PPUSH
70542: LD_INT 0
70544: PPUSH
70545: CALL 72182 0 3
// end ;
70549: GO 70503
70551: POP
70552: POP
// end ;
70553: LD_VAR 0 10
70557: RET
// export function WantHeal ( sci , unit ) ; begin
70558: LD_INT 0
70560: PPUSH
// if GetTaskList ( sci ) > 0 then
70561: LD_VAR 0 1
70565: PPUSH
70566: CALL_OW 437
70570: PUSH
70571: LD_INT 0
70573: GREATER
70574: IFFALSE 70644
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70576: LD_VAR 0 1
70580: PPUSH
70581: CALL_OW 437
70585: PUSH
70586: LD_INT 1
70588: ARRAY
70589: PUSH
70590: LD_INT 1
70592: ARRAY
70593: PUSH
70594: LD_STRING l
70596: EQUAL
70597: PUSH
70598: LD_VAR 0 1
70602: PPUSH
70603: CALL_OW 437
70607: PUSH
70608: LD_INT 1
70610: ARRAY
70611: PUSH
70612: LD_INT 4
70614: ARRAY
70615: PUSH
70616: LD_VAR 0 2
70620: EQUAL
70621: AND
70622: IFFALSE 70634
// result := true else
70624: LD_ADDR_VAR 0 3
70628: PUSH
70629: LD_INT 1
70631: ST_TO_ADDR
70632: GO 70642
// result := false ;
70634: LD_ADDR_VAR 0 3
70638: PUSH
70639: LD_INT 0
70641: ST_TO_ADDR
// end else
70642: GO 70652
// result := false ;
70644: LD_ADDR_VAR 0 3
70648: PUSH
70649: LD_INT 0
70651: ST_TO_ADDR
// end ;
70652: LD_VAR 0 3
70656: RET
// export function HealTarget ( sci ) ; begin
70657: LD_INT 0
70659: PPUSH
// if not sci then
70660: LD_VAR 0 1
70664: NOT
70665: IFFALSE 70669
// exit ;
70667: GO 70734
// result := 0 ;
70669: LD_ADDR_VAR 0 2
70673: PUSH
70674: LD_INT 0
70676: ST_TO_ADDR
// if GetTaskList ( sci ) then
70677: LD_VAR 0 1
70681: PPUSH
70682: CALL_OW 437
70686: IFFALSE 70734
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70688: LD_VAR 0 1
70692: PPUSH
70693: CALL_OW 437
70697: PUSH
70698: LD_INT 1
70700: ARRAY
70701: PUSH
70702: LD_INT 1
70704: ARRAY
70705: PUSH
70706: LD_STRING l
70708: EQUAL
70709: IFFALSE 70734
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70711: LD_ADDR_VAR 0 2
70715: PUSH
70716: LD_VAR 0 1
70720: PPUSH
70721: CALL_OW 437
70725: PUSH
70726: LD_INT 1
70728: ARRAY
70729: PUSH
70730: LD_INT 4
70732: ARRAY
70733: ST_TO_ADDR
// end ;
70734: LD_VAR 0 2
70738: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70739: LD_INT 0
70741: PPUSH
70742: PPUSH
70743: PPUSH
70744: PPUSH
// if not base_units then
70745: LD_VAR 0 1
70749: NOT
70750: IFFALSE 70754
// exit ;
70752: GO 70841
// result := false ;
70754: LD_ADDR_VAR 0 2
70758: PUSH
70759: LD_INT 0
70761: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70762: LD_ADDR_VAR 0 5
70766: PUSH
70767: LD_VAR 0 1
70771: PPUSH
70772: LD_INT 21
70774: PUSH
70775: LD_INT 3
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PPUSH
70782: CALL_OW 72
70786: ST_TO_ADDR
// if not tmp then
70787: LD_VAR 0 5
70791: NOT
70792: IFFALSE 70796
// exit ;
70794: GO 70841
// for i in tmp do
70796: LD_ADDR_VAR 0 3
70800: PUSH
70801: LD_VAR 0 5
70805: PUSH
70806: FOR_IN
70807: IFFALSE 70839
// begin result := EnemyInRange ( i , 22 ) ;
70809: LD_ADDR_VAR 0 2
70813: PUSH
70814: LD_VAR 0 3
70818: PPUSH
70819: LD_INT 22
70821: PPUSH
70822: CALL 68428 0 2
70826: ST_TO_ADDR
// if result then
70827: LD_VAR 0 2
70831: IFFALSE 70837
// exit ;
70833: POP
70834: POP
70835: GO 70841
// end ;
70837: GO 70806
70839: POP
70840: POP
// end ;
70841: LD_VAR 0 2
70845: RET
// export function FilterByTag ( units , tag ) ; begin
70846: LD_INT 0
70848: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70849: LD_ADDR_VAR 0 3
70853: PUSH
70854: LD_VAR 0 1
70858: PPUSH
70859: LD_INT 120
70861: PUSH
70862: LD_VAR 0 2
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PPUSH
70871: CALL_OW 72
70875: ST_TO_ADDR
// end ;
70876: LD_VAR 0 3
70880: RET
// export function IsDriver ( un ) ; begin
70881: LD_INT 0
70883: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70884: LD_ADDR_VAR 0 2
70888: PUSH
70889: LD_VAR 0 1
70893: PUSH
70894: LD_INT 55
70896: PUSH
70897: EMPTY
70898: LIST
70899: PPUSH
70900: CALL_OW 69
70904: IN
70905: ST_TO_ADDR
// end ;
70906: LD_VAR 0 2
70910: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70911: LD_INT 0
70913: PPUSH
70914: PPUSH
// list := [ ] ;
70915: LD_ADDR_VAR 0 5
70919: PUSH
70920: EMPTY
70921: ST_TO_ADDR
// case d of 0 :
70922: LD_VAR 0 3
70926: PUSH
70927: LD_INT 0
70929: DOUBLE
70930: EQUAL
70931: IFTRUE 70935
70933: GO 71068
70935: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70936: LD_ADDR_VAR 0 5
70940: PUSH
70941: LD_VAR 0 1
70945: PUSH
70946: LD_INT 4
70948: MINUS
70949: PUSH
70950: LD_VAR 0 2
70954: PUSH
70955: LD_INT 4
70957: MINUS
70958: PUSH
70959: LD_INT 2
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: LIST
70966: PUSH
70967: LD_VAR 0 1
70971: PUSH
70972: LD_INT 3
70974: MINUS
70975: PUSH
70976: LD_VAR 0 2
70980: PUSH
70981: LD_INT 1
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: LIST
70988: PUSH
70989: LD_VAR 0 1
70993: PUSH
70994: LD_INT 4
70996: PLUS
70997: PUSH
70998: LD_VAR 0 2
71002: PUSH
71003: LD_INT 4
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: LIST
71010: PUSH
71011: LD_VAR 0 1
71015: PUSH
71016: LD_INT 3
71018: PLUS
71019: PUSH
71020: LD_VAR 0 2
71024: PUSH
71025: LD_INT 3
71027: PLUS
71028: PUSH
71029: LD_INT 5
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: LIST
71036: PUSH
71037: LD_VAR 0 1
71041: PUSH
71042: LD_VAR 0 2
71046: PUSH
71047: LD_INT 4
71049: PLUS
71050: PUSH
71051: LD_INT 0
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: ST_TO_ADDR
// end ; 1 :
71066: GO 71766
71068: LD_INT 1
71070: DOUBLE
71071: EQUAL
71072: IFTRUE 71076
71074: GO 71209
71076: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71077: LD_ADDR_VAR 0 5
71081: PUSH
71082: LD_VAR 0 1
71086: PUSH
71087: LD_VAR 0 2
71091: PUSH
71092: LD_INT 4
71094: MINUS
71095: PUSH
71096: LD_INT 3
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: LIST
71103: PUSH
71104: LD_VAR 0 1
71108: PUSH
71109: LD_INT 3
71111: MINUS
71112: PUSH
71113: LD_VAR 0 2
71117: PUSH
71118: LD_INT 3
71120: MINUS
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: LIST
71129: PUSH
71130: LD_VAR 0 1
71134: PUSH
71135: LD_INT 4
71137: MINUS
71138: PUSH
71139: LD_VAR 0 2
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: LIST
71151: PUSH
71152: LD_VAR 0 1
71156: PUSH
71157: LD_VAR 0 2
71161: PUSH
71162: LD_INT 3
71164: PLUS
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: LIST
71173: PUSH
71174: LD_VAR 0 1
71178: PUSH
71179: LD_INT 4
71181: PLUS
71182: PUSH
71183: LD_VAR 0 2
71187: PUSH
71188: LD_INT 4
71190: PLUS
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: LIST
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: ST_TO_ADDR
// end ; 2 :
71207: GO 71766
71209: LD_INT 2
71211: DOUBLE
71212: EQUAL
71213: IFTRUE 71217
71215: GO 71346
71217: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71218: LD_ADDR_VAR 0 5
71222: PUSH
71223: LD_VAR 0 1
71227: PUSH
71228: LD_VAR 0 2
71232: PUSH
71233: LD_INT 3
71235: MINUS
71236: PUSH
71237: LD_INT 3
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: LIST
71244: PUSH
71245: LD_VAR 0 1
71249: PUSH
71250: LD_INT 4
71252: PLUS
71253: PUSH
71254: LD_VAR 0 2
71258: PUSH
71259: LD_INT 4
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: LIST
71266: PUSH
71267: LD_VAR 0 1
71271: PUSH
71272: LD_VAR 0 2
71276: PUSH
71277: LD_INT 4
71279: PLUS
71280: PUSH
71281: LD_INT 0
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: LIST
71288: PUSH
71289: LD_VAR 0 1
71293: PUSH
71294: LD_INT 3
71296: MINUS
71297: PUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_INT 1
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: LIST
71310: PUSH
71311: LD_VAR 0 1
71315: PUSH
71316: LD_INT 4
71318: MINUS
71319: PUSH
71320: LD_VAR 0 2
71324: PUSH
71325: LD_INT 4
71327: MINUS
71328: PUSH
71329: LD_INT 2
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: LIST
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: ST_TO_ADDR
// end ; 3 :
71344: GO 71766
71346: LD_INT 3
71348: DOUBLE
71349: EQUAL
71350: IFTRUE 71354
71352: GO 71487
71354: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71355: LD_ADDR_VAR 0 5
71359: PUSH
71360: LD_VAR 0 1
71364: PUSH
71365: LD_INT 3
71367: PLUS
71368: PUSH
71369: LD_VAR 0 2
71373: PUSH
71374: LD_INT 4
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: LIST
71381: PUSH
71382: LD_VAR 0 1
71386: PUSH
71387: LD_INT 4
71389: PLUS
71390: PUSH
71391: LD_VAR 0 2
71395: PUSH
71396: LD_INT 4
71398: PLUS
71399: PUSH
71400: LD_INT 5
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: PUSH
71408: LD_VAR 0 1
71412: PUSH
71413: LD_INT 4
71415: MINUS
71416: PUSH
71417: LD_VAR 0 2
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: LIST
71429: PUSH
71430: LD_VAR 0 1
71434: PUSH
71435: LD_VAR 0 2
71439: PUSH
71440: LD_INT 4
71442: MINUS
71443: PUSH
71444: LD_INT 3
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: LIST
71451: PUSH
71452: LD_VAR 0 1
71456: PUSH
71457: LD_INT 3
71459: MINUS
71460: PUSH
71461: LD_VAR 0 2
71465: PUSH
71466: LD_INT 3
71468: MINUS
71469: PUSH
71470: LD_INT 2
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: ST_TO_ADDR
// end ; 4 :
71485: GO 71766
71487: LD_INT 4
71489: DOUBLE
71490: EQUAL
71491: IFTRUE 71495
71493: GO 71628
71495: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71496: LD_ADDR_VAR 0 5
71500: PUSH
71501: LD_VAR 0 1
71505: PUSH
71506: LD_VAR 0 2
71510: PUSH
71511: LD_INT 4
71513: PLUS
71514: PUSH
71515: LD_INT 0
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: PUSH
71523: LD_VAR 0 1
71527: PUSH
71528: LD_INT 3
71530: PLUS
71531: PUSH
71532: LD_VAR 0 2
71536: PUSH
71537: LD_INT 3
71539: PLUS
71540: PUSH
71541: LD_INT 5
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: LIST
71548: PUSH
71549: LD_VAR 0 1
71553: PUSH
71554: LD_INT 4
71556: PLUS
71557: PUSH
71558: LD_VAR 0 2
71562: PUSH
71563: LD_INT 4
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: LIST
71570: PUSH
71571: LD_VAR 0 1
71575: PUSH
71576: LD_VAR 0 2
71580: PUSH
71581: LD_INT 3
71583: MINUS
71584: PUSH
71585: LD_INT 3
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: LIST
71592: PUSH
71593: LD_VAR 0 1
71597: PUSH
71598: LD_INT 4
71600: MINUS
71601: PUSH
71602: LD_VAR 0 2
71606: PUSH
71607: LD_INT 4
71609: MINUS
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: LIST
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: ST_TO_ADDR
// end ; 5 :
71626: GO 71766
71628: LD_INT 5
71630: DOUBLE
71631: EQUAL
71632: IFTRUE 71636
71634: GO 71765
71636: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71637: LD_ADDR_VAR 0 5
71641: PUSH
71642: LD_VAR 0 1
71646: PUSH
71647: LD_INT 4
71649: MINUS
71650: PUSH
71651: LD_VAR 0 2
71655: PUSH
71656: LD_INT 1
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: LIST
71663: PUSH
71664: LD_VAR 0 1
71668: PUSH
71669: LD_VAR 0 2
71673: PUSH
71674: LD_INT 4
71676: MINUS
71677: PUSH
71678: LD_INT 3
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: LIST
71685: PUSH
71686: LD_VAR 0 1
71690: PUSH
71691: LD_INT 4
71693: PLUS
71694: PUSH
71695: LD_VAR 0 2
71699: PUSH
71700: LD_INT 4
71702: PLUS
71703: PUSH
71704: LD_INT 5
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: LIST
71711: PUSH
71712: LD_VAR 0 1
71716: PUSH
71717: LD_INT 3
71719: PLUS
71720: PUSH
71721: LD_VAR 0 2
71725: PUSH
71726: LD_INT 4
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: PUSH
71734: LD_VAR 0 1
71738: PUSH
71739: LD_VAR 0 2
71743: PUSH
71744: LD_INT 3
71746: PLUS
71747: PUSH
71748: LD_INT 0
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: LIST
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: ST_TO_ADDR
// end ; end ;
71763: GO 71766
71765: POP
// result := list ;
71766: LD_ADDR_VAR 0 4
71770: PUSH
71771: LD_VAR 0 5
71775: ST_TO_ADDR
// end ;
71776: LD_VAR 0 4
71780: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71781: LD_INT 0
71783: PPUSH
71784: PPUSH
71785: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71786: LD_VAR 0 1
71790: NOT
71791: PUSH
71792: LD_VAR 0 2
71796: PUSH
71797: LD_INT 1
71799: PUSH
71800: LD_INT 2
71802: PUSH
71803: LD_INT 3
71805: PUSH
71806: LD_INT 4
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: IN
71815: NOT
71816: OR
71817: IFFALSE 71821
// exit ;
71819: GO 71904
// tmp := [ ] ;
71821: LD_ADDR_VAR 0 5
71825: PUSH
71826: EMPTY
71827: ST_TO_ADDR
// for i in units do
71828: LD_ADDR_VAR 0 4
71832: PUSH
71833: LD_VAR 0 1
71837: PUSH
71838: FOR_IN
71839: IFFALSE 71873
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71841: LD_ADDR_VAR 0 5
71845: PUSH
71846: LD_VAR 0 5
71850: PPUSH
71851: LD_VAR 0 4
71855: PPUSH
71856: LD_VAR 0 2
71860: PPUSH
71861: CALL_OW 259
71865: PPUSH
71866: CALL 73277 0 2
71870: ST_TO_ADDR
71871: GO 71838
71873: POP
71874: POP
// if not tmp then
71875: LD_VAR 0 5
71879: NOT
71880: IFFALSE 71884
// exit ;
71882: GO 71904
// result := SortListByListDesc ( units , tmp ) ;
71884: LD_ADDR_VAR 0 3
71888: PUSH
71889: LD_VAR 0 1
71893: PPUSH
71894: LD_VAR 0 5
71898: PPUSH
71899: CALL_OW 77
71903: ST_TO_ADDR
// end ;
71904: LD_VAR 0 3
71908: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71909: LD_INT 0
71911: PPUSH
71912: PPUSH
71913: PPUSH
// result := false ;
71914: LD_ADDR_VAR 0 3
71918: PUSH
71919: LD_INT 0
71921: ST_TO_ADDR
// if not building then
71922: LD_VAR 0 2
71926: NOT
71927: IFFALSE 71931
// exit ;
71929: GO 72069
// x := GetX ( building ) ;
71931: LD_ADDR_VAR 0 4
71935: PUSH
71936: LD_VAR 0 2
71940: PPUSH
71941: CALL_OW 250
71945: ST_TO_ADDR
// y := GetY ( building ) ;
71946: LD_ADDR_VAR 0 5
71950: PUSH
71951: LD_VAR 0 2
71955: PPUSH
71956: CALL_OW 251
71960: ST_TO_ADDR
// if not x or not y then
71961: LD_VAR 0 4
71965: NOT
71966: PUSH
71967: LD_VAR 0 5
71971: NOT
71972: OR
71973: IFFALSE 71977
// exit ;
71975: GO 72069
// if GetTaskList ( unit ) then
71977: LD_VAR 0 1
71981: PPUSH
71982: CALL_OW 437
71986: IFFALSE 72069
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71988: LD_STRING e
71990: PUSH
71991: LD_VAR 0 1
71995: PPUSH
71996: CALL_OW 437
72000: PUSH
72001: LD_INT 1
72003: ARRAY
72004: PUSH
72005: LD_INT 1
72007: ARRAY
72008: EQUAL
72009: PUSH
72010: LD_VAR 0 4
72014: PUSH
72015: LD_VAR 0 1
72019: PPUSH
72020: CALL_OW 437
72024: PUSH
72025: LD_INT 1
72027: ARRAY
72028: PUSH
72029: LD_INT 2
72031: ARRAY
72032: EQUAL
72033: AND
72034: PUSH
72035: LD_VAR 0 5
72039: PUSH
72040: LD_VAR 0 1
72044: PPUSH
72045: CALL_OW 437
72049: PUSH
72050: LD_INT 1
72052: ARRAY
72053: PUSH
72054: LD_INT 3
72056: ARRAY
72057: EQUAL
72058: AND
72059: IFFALSE 72069
// result := true end ;
72061: LD_ADDR_VAR 0 3
72065: PUSH
72066: LD_INT 1
72068: ST_TO_ADDR
// end ;
72069: LD_VAR 0 3
72073: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72074: LD_INT 0
72076: PPUSH
// result := false ;
72077: LD_ADDR_VAR 0 4
72081: PUSH
72082: LD_INT 0
72084: ST_TO_ADDR
// if GetTaskList ( unit ) then
72085: LD_VAR 0 1
72089: PPUSH
72090: CALL_OW 437
72094: IFFALSE 72177
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72096: LD_STRING M
72098: PUSH
72099: LD_VAR 0 1
72103: PPUSH
72104: CALL_OW 437
72108: PUSH
72109: LD_INT 1
72111: ARRAY
72112: PUSH
72113: LD_INT 1
72115: ARRAY
72116: EQUAL
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_VAR 0 1
72127: PPUSH
72128: CALL_OW 437
72132: PUSH
72133: LD_INT 1
72135: ARRAY
72136: PUSH
72137: LD_INT 2
72139: ARRAY
72140: EQUAL
72141: AND
72142: PUSH
72143: LD_VAR 0 3
72147: PUSH
72148: LD_VAR 0 1
72152: PPUSH
72153: CALL_OW 437
72157: PUSH
72158: LD_INT 1
72160: ARRAY
72161: PUSH
72162: LD_INT 3
72164: ARRAY
72165: EQUAL
72166: AND
72167: IFFALSE 72177
// result := true ;
72169: LD_ADDR_VAR 0 4
72173: PUSH
72174: LD_INT 1
72176: ST_TO_ADDR
// end ; end ;
72177: LD_VAR 0 4
72181: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72182: LD_INT 0
72184: PPUSH
72185: PPUSH
72186: PPUSH
72187: PPUSH
// if not unit or not area then
72188: LD_VAR 0 1
72192: NOT
72193: PUSH
72194: LD_VAR 0 2
72198: NOT
72199: OR
72200: IFFALSE 72204
// exit ;
72202: GO 72380
// tmp := AreaToList ( area , i ) ;
72204: LD_ADDR_VAR 0 6
72208: PUSH
72209: LD_VAR 0 2
72213: PPUSH
72214: LD_VAR 0 5
72218: PPUSH
72219: CALL_OW 517
72223: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72224: LD_ADDR_VAR 0 5
72228: PUSH
72229: DOUBLE
72230: LD_INT 1
72232: DEC
72233: ST_TO_ADDR
72234: LD_VAR 0 6
72238: PUSH
72239: LD_INT 1
72241: ARRAY
72242: PUSH
72243: FOR_TO
72244: IFFALSE 72378
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72246: LD_ADDR_VAR 0 7
72250: PUSH
72251: LD_VAR 0 6
72255: PUSH
72256: LD_INT 1
72258: ARRAY
72259: PUSH
72260: LD_VAR 0 5
72264: ARRAY
72265: PUSH
72266: LD_VAR 0 6
72270: PUSH
72271: LD_INT 2
72273: ARRAY
72274: PUSH
72275: LD_VAR 0 5
72279: ARRAY
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72285: LD_INT 92
72287: PUSH
72288: LD_VAR 0 7
72292: PUSH
72293: LD_INT 1
72295: ARRAY
72296: PUSH
72297: LD_VAR 0 7
72301: PUSH
72302: LD_INT 2
72304: ARRAY
72305: PUSH
72306: LD_INT 2
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: PPUSH
72315: CALL_OW 69
72319: PUSH
72320: LD_INT 0
72322: EQUAL
72323: IFFALSE 72376
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72325: LD_VAR 0 1
72329: PPUSH
72330: LD_VAR 0 7
72334: PUSH
72335: LD_INT 1
72337: ARRAY
72338: PPUSH
72339: LD_VAR 0 7
72343: PUSH
72344: LD_INT 2
72346: ARRAY
72347: PPUSH
72348: LD_VAR 0 3
72352: PPUSH
72353: CALL_OW 48
// result := IsPlaced ( unit ) ;
72357: LD_ADDR_VAR 0 4
72361: PUSH
72362: LD_VAR 0 1
72366: PPUSH
72367: CALL_OW 305
72371: ST_TO_ADDR
// exit ;
72372: POP
72373: POP
72374: GO 72380
// end ; end ;
72376: GO 72243
72378: POP
72379: POP
// end ;
72380: LD_VAR 0 4
72384: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72385: LD_INT 0
72387: PPUSH
72388: PPUSH
72389: PPUSH
// if not side or side > 8 then
72390: LD_VAR 0 1
72394: NOT
72395: PUSH
72396: LD_VAR 0 1
72400: PUSH
72401: LD_INT 8
72403: GREATER
72404: OR
72405: IFFALSE 72409
// exit ;
72407: GO 72596
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72409: LD_ADDR_VAR 0 4
72413: PUSH
72414: LD_INT 22
72416: PUSH
72417: LD_VAR 0 1
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 21
72428: PUSH
72429: LD_INT 3
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PPUSH
72440: CALL_OW 69
72444: ST_TO_ADDR
// if not tmp then
72445: LD_VAR 0 4
72449: NOT
72450: IFFALSE 72454
// exit ;
72452: GO 72596
// enable_addtolog := true ;
72454: LD_ADDR_OWVAR 81
72458: PUSH
72459: LD_INT 1
72461: ST_TO_ADDR
// AddToLog ( [ ) ;
72462: LD_STRING [
72464: PPUSH
72465: CALL_OW 561
// for i in tmp do
72469: LD_ADDR_VAR 0 3
72473: PUSH
72474: LD_VAR 0 4
72478: PUSH
72479: FOR_IN
72480: IFFALSE 72587
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72482: LD_STRING [
72484: PUSH
72485: LD_VAR 0 3
72489: PPUSH
72490: CALL_OW 266
72494: STR
72495: PUSH
72496: LD_STRING , 
72498: STR
72499: PUSH
72500: LD_VAR 0 3
72504: PPUSH
72505: CALL_OW 250
72509: STR
72510: PUSH
72511: LD_STRING , 
72513: STR
72514: PUSH
72515: LD_VAR 0 3
72519: PPUSH
72520: CALL_OW 251
72524: STR
72525: PUSH
72526: LD_STRING , 
72528: STR
72529: PUSH
72530: LD_VAR 0 3
72534: PPUSH
72535: CALL_OW 254
72539: STR
72540: PUSH
72541: LD_STRING , 
72543: STR
72544: PUSH
72545: LD_VAR 0 3
72549: PPUSH
72550: LD_INT 1
72552: PPUSH
72553: CALL_OW 268
72557: STR
72558: PUSH
72559: LD_STRING , 
72561: STR
72562: PUSH
72563: LD_VAR 0 3
72567: PPUSH
72568: LD_INT 2
72570: PPUSH
72571: CALL_OW 268
72575: STR
72576: PUSH
72577: LD_STRING ],
72579: STR
72580: PPUSH
72581: CALL_OW 561
// end ;
72585: GO 72479
72587: POP
72588: POP
// AddToLog ( ]; ) ;
72589: LD_STRING ];
72591: PPUSH
72592: CALL_OW 561
// end ;
72596: LD_VAR 0 2
72600: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72601: LD_INT 0
72603: PPUSH
72604: PPUSH
72605: PPUSH
72606: PPUSH
72607: PPUSH
// if not area or not rate or not max then
72608: LD_VAR 0 1
72612: NOT
72613: PUSH
72614: LD_VAR 0 2
72618: NOT
72619: OR
72620: PUSH
72621: LD_VAR 0 4
72625: NOT
72626: OR
72627: IFFALSE 72631
// exit ;
72629: GO 72820
// while 1 do
72631: LD_INT 1
72633: IFFALSE 72820
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72635: LD_ADDR_VAR 0 9
72639: PUSH
72640: LD_VAR 0 1
72644: PPUSH
72645: LD_INT 1
72647: PPUSH
72648: CALL_OW 287
72652: PUSH
72653: LD_INT 10
72655: MUL
72656: ST_TO_ADDR
// r := rate / 10 ;
72657: LD_ADDR_VAR 0 7
72661: PUSH
72662: LD_VAR 0 2
72666: PUSH
72667: LD_INT 10
72669: DIVREAL
72670: ST_TO_ADDR
// time := 1 1$00 ;
72671: LD_ADDR_VAR 0 8
72675: PUSH
72676: LD_INT 2100
72678: ST_TO_ADDR
// if amount < min then
72679: LD_VAR 0 9
72683: PUSH
72684: LD_VAR 0 3
72688: LESS
72689: IFFALSE 72707
// r := r * 2 else
72691: LD_ADDR_VAR 0 7
72695: PUSH
72696: LD_VAR 0 7
72700: PUSH
72701: LD_INT 2
72703: MUL
72704: ST_TO_ADDR
72705: GO 72733
// if amount > max then
72707: LD_VAR 0 9
72711: PUSH
72712: LD_VAR 0 4
72716: GREATER
72717: IFFALSE 72733
// r := r / 2 ;
72719: LD_ADDR_VAR 0 7
72723: PUSH
72724: LD_VAR 0 7
72728: PUSH
72729: LD_INT 2
72731: DIVREAL
72732: ST_TO_ADDR
// time := time / r ;
72733: LD_ADDR_VAR 0 8
72737: PUSH
72738: LD_VAR 0 8
72742: PUSH
72743: LD_VAR 0 7
72747: DIVREAL
72748: ST_TO_ADDR
// if time < 0 then
72749: LD_VAR 0 8
72753: PUSH
72754: LD_INT 0
72756: LESS
72757: IFFALSE 72774
// time := time * - 1 ;
72759: LD_ADDR_VAR 0 8
72763: PUSH
72764: LD_VAR 0 8
72768: PUSH
72769: LD_INT 1
72771: NEG
72772: MUL
72773: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72774: LD_VAR 0 8
72778: PUSH
72779: LD_INT 35
72781: PPUSH
72782: LD_INT 875
72784: PPUSH
72785: CALL_OW 12
72789: PLUS
72790: PPUSH
72791: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72795: LD_INT 1
72797: PPUSH
72798: LD_INT 5
72800: PPUSH
72801: CALL_OW 12
72805: PPUSH
72806: LD_VAR 0 1
72810: PPUSH
72811: LD_INT 1
72813: PPUSH
72814: CALL_OW 55
// end ;
72818: GO 72631
// end ;
72820: LD_VAR 0 5
72824: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72825: LD_INT 0
72827: PPUSH
72828: PPUSH
72829: PPUSH
72830: PPUSH
72831: PPUSH
72832: PPUSH
72833: PPUSH
72834: PPUSH
// if not turrets or not factories then
72835: LD_VAR 0 1
72839: NOT
72840: PUSH
72841: LD_VAR 0 2
72845: NOT
72846: OR
72847: IFFALSE 72851
// exit ;
72849: GO 73158
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72851: LD_ADDR_VAR 0 10
72855: PUSH
72856: LD_INT 5
72858: PUSH
72859: LD_INT 6
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 2
72868: PUSH
72869: LD_INT 4
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 3
72878: PUSH
72879: LD_INT 5
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 24
72893: PUSH
72894: LD_INT 25
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 23
72903: PUSH
72904: LD_INT 27
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 42
72917: PUSH
72918: LD_INT 43
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_INT 44
72927: PUSH
72928: LD_INT 46
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 45
72937: PUSH
72938: LD_INT 47
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: LIST
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: LIST
72954: ST_TO_ADDR
// result := [ ] ;
72955: LD_ADDR_VAR 0 3
72959: PUSH
72960: EMPTY
72961: ST_TO_ADDR
// for i in turrets do
72962: LD_ADDR_VAR 0 4
72966: PUSH
72967: LD_VAR 0 1
72971: PUSH
72972: FOR_IN
72973: IFFALSE 73156
// begin nat := GetNation ( i ) ;
72975: LD_ADDR_VAR 0 7
72979: PUSH
72980: LD_VAR 0 4
72984: PPUSH
72985: CALL_OW 248
72989: ST_TO_ADDR
// weapon := 0 ;
72990: LD_ADDR_VAR 0 8
72994: PUSH
72995: LD_INT 0
72997: ST_TO_ADDR
// if not nat then
72998: LD_VAR 0 7
73002: NOT
73003: IFFALSE 73007
// continue ;
73005: GO 72972
// for j in list [ nat ] do
73007: LD_ADDR_VAR 0 5
73011: PUSH
73012: LD_VAR 0 10
73016: PUSH
73017: LD_VAR 0 7
73021: ARRAY
73022: PUSH
73023: FOR_IN
73024: IFFALSE 73065
// if GetBWeapon ( i ) = j [ 1 ] then
73026: LD_VAR 0 4
73030: PPUSH
73031: CALL_OW 269
73035: PUSH
73036: LD_VAR 0 5
73040: PUSH
73041: LD_INT 1
73043: ARRAY
73044: EQUAL
73045: IFFALSE 73063
// begin weapon := j [ 2 ] ;
73047: LD_ADDR_VAR 0 8
73051: PUSH
73052: LD_VAR 0 5
73056: PUSH
73057: LD_INT 2
73059: ARRAY
73060: ST_TO_ADDR
// break ;
73061: GO 73065
// end ;
73063: GO 73023
73065: POP
73066: POP
// if not weapon then
73067: LD_VAR 0 8
73071: NOT
73072: IFFALSE 73076
// continue ;
73074: GO 72972
// for k in factories do
73076: LD_ADDR_VAR 0 6
73080: PUSH
73081: LD_VAR 0 2
73085: PUSH
73086: FOR_IN
73087: IFFALSE 73152
// begin weapons := AvailableWeaponList ( k ) ;
73089: LD_ADDR_VAR 0 9
73093: PUSH
73094: LD_VAR 0 6
73098: PPUSH
73099: CALL_OW 478
73103: ST_TO_ADDR
// if not weapons then
73104: LD_VAR 0 9
73108: NOT
73109: IFFALSE 73113
// continue ;
73111: GO 73086
// if weapon in weapons then
73113: LD_VAR 0 8
73117: PUSH
73118: LD_VAR 0 9
73122: IN
73123: IFFALSE 73150
// begin result := [ i , weapon ] ;
73125: LD_ADDR_VAR 0 3
73129: PUSH
73130: LD_VAR 0 4
73134: PUSH
73135: LD_VAR 0 8
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: ST_TO_ADDR
// exit ;
73144: POP
73145: POP
73146: POP
73147: POP
73148: GO 73158
// end ; end ;
73150: GO 73086
73152: POP
73153: POP
// end ;
73154: GO 72972
73156: POP
73157: POP
// end ;
73158: LD_VAR 0 3
73162: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73163: LD_INT 0
73165: PPUSH
// if not side or side > 8 then
73166: LD_VAR 0 3
73170: NOT
73171: PUSH
73172: LD_VAR 0 3
73176: PUSH
73177: LD_INT 8
73179: GREATER
73180: OR
73181: IFFALSE 73185
// exit ;
73183: GO 73244
// if not range then
73185: LD_VAR 0 4
73189: NOT
73190: IFFALSE 73201
// range := - 12 ;
73192: LD_ADDR_VAR 0 4
73196: PUSH
73197: LD_INT 12
73199: NEG
73200: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73201: LD_VAR 0 1
73205: PPUSH
73206: LD_VAR 0 2
73210: PPUSH
73211: LD_VAR 0 3
73215: PPUSH
73216: LD_VAR 0 4
73220: PPUSH
73221: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73225: LD_VAR 0 1
73229: PPUSH
73230: LD_VAR 0 2
73234: PPUSH
73235: LD_VAR 0 3
73239: PPUSH
73240: CALL_OW 331
// end ;
73244: LD_VAR 0 5
73248: RET
// export function Video ( mode ) ; begin
73249: LD_INT 0
73251: PPUSH
// ingame_video = mode ;
73252: LD_ADDR_OWVAR 52
73256: PUSH
73257: LD_VAR 0 1
73261: ST_TO_ADDR
// interface_hidden = mode ;
73262: LD_ADDR_OWVAR 54
73266: PUSH
73267: LD_VAR 0 1
73271: ST_TO_ADDR
// end ;
73272: LD_VAR 0 2
73276: RET
// export function Join ( array , element ) ; begin
73277: LD_INT 0
73279: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73280: LD_ADDR_VAR 0 3
73284: PUSH
73285: LD_VAR 0 1
73289: PPUSH
73290: LD_VAR 0 1
73294: PUSH
73295: LD_INT 1
73297: PLUS
73298: PPUSH
73299: LD_VAR 0 2
73303: PPUSH
73304: CALL_OW 1
73308: ST_TO_ADDR
// end ;
73309: LD_VAR 0 3
73313: RET
// export function JoinUnion ( array , element ) ; begin
73314: LD_INT 0
73316: PPUSH
// result := array union element ;
73317: LD_ADDR_VAR 0 3
73321: PUSH
73322: LD_VAR 0 1
73326: PUSH
73327: LD_VAR 0 2
73331: UNION
73332: ST_TO_ADDR
// end ;
73333: LD_VAR 0 3
73337: RET
// export function GetBehemoths ( side ) ; begin
73338: LD_INT 0
73340: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73341: LD_ADDR_VAR 0 2
73345: PUSH
73346: LD_INT 22
73348: PUSH
73349: LD_VAR 0 1
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 31
73360: PUSH
73361: LD_INT 25
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PPUSH
73372: CALL_OW 69
73376: ST_TO_ADDR
// end ;
73377: LD_VAR 0 2
73381: RET
// export function Shuffle ( array ) ; var i , index ; begin
73382: LD_INT 0
73384: PPUSH
73385: PPUSH
73386: PPUSH
// result := [ ] ;
73387: LD_ADDR_VAR 0 2
73391: PUSH
73392: EMPTY
73393: ST_TO_ADDR
// if not array then
73394: LD_VAR 0 1
73398: NOT
73399: IFFALSE 73403
// exit ;
73401: GO 73502
// Randomize ;
73403: CALL_OW 10
// for i = array downto 1 do
73407: LD_ADDR_VAR 0 3
73411: PUSH
73412: DOUBLE
73413: LD_VAR 0 1
73417: INC
73418: ST_TO_ADDR
73419: LD_INT 1
73421: PUSH
73422: FOR_DOWNTO
73423: IFFALSE 73500
// begin index := rand ( 1 , array ) ;
73425: LD_ADDR_VAR 0 4
73429: PUSH
73430: LD_INT 1
73432: PPUSH
73433: LD_VAR 0 1
73437: PPUSH
73438: CALL_OW 12
73442: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73443: LD_ADDR_VAR 0 2
73447: PUSH
73448: LD_VAR 0 2
73452: PPUSH
73453: LD_VAR 0 2
73457: PUSH
73458: LD_INT 1
73460: PLUS
73461: PPUSH
73462: LD_VAR 0 1
73466: PUSH
73467: LD_VAR 0 4
73471: ARRAY
73472: PPUSH
73473: CALL_OW 2
73477: ST_TO_ADDR
// array := Delete ( array , index ) ;
73478: LD_ADDR_VAR 0 1
73482: PUSH
73483: LD_VAR 0 1
73487: PPUSH
73488: LD_VAR 0 4
73492: PPUSH
73493: CALL_OW 3
73497: ST_TO_ADDR
// end ;
73498: GO 73422
73500: POP
73501: POP
// end ;
73502: LD_VAR 0 2
73506: RET
// export function GetBaseMaterials ( base ) ; begin
73507: LD_INT 0
73509: PPUSH
// result := [ 0 , 0 , 0 ] ;
73510: LD_ADDR_VAR 0 2
73514: PUSH
73515: LD_INT 0
73517: PUSH
73518: LD_INT 0
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: LIST
73528: ST_TO_ADDR
// if not base then
73529: LD_VAR 0 1
73533: NOT
73534: IFFALSE 73538
// exit ;
73536: GO 73587
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73538: LD_ADDR_VAR 0 2
73542: PUSH
73543: LD_VAR 0 1
73547: PPUSH
73548: LD_INT 1
73550: PPUSH
73551: CALL_OW 275
73555: PUSH
73556: LD_VAR 0 1
73560: PPUSH
73561: LD_INT 2
73563: PPUSH
73564: CALL_OW 275
73568: PUSH
73569: LD_VAR 0 1
73573: PPUSH
73574: LD_INT 3
73576: PPUSH
73577: CALL_OW 275
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: LIST
73586: ST_TO_ADDR
// end ;
73587: LD_VAR 0 2
73591: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73592: LD_INT 0
73594: PPUSH
73595: PPUSH
// result := array ;
73596: LD_ADDR_VAR 0 3
73600: PUSH
73601: LD_VAR 0 1
73605: ST_TO_ADDR
// if size >= result then
73606: LD_VAR 0 2
73610: PUSH
73611: LD_VAR 0 3
73615: GREATEREQUAL
73616: IFFALSE 73620
// exit ;
73618: GO 73670
// if size then
73620: LD_VAR 0 2
73624: IFFALSE 73670
// for i := array downto size do
73626: LD_ADDR_VAR 0 4
73630: PUSH
73631: DOUBLE
73632: LD_VAR 0 1
73636: INC
73637: ST_TO_ADDR
73638: LD_VAR 0 2
73642: PUSH
73643: FOR_DOWNTO
73644: IFFALSE 73668
// result := Delete ( result , result ) ;
73646: LD_ADDR_VAR 0 3
73650: PUSH
73651: LD_VAR 0 3
73655: PPUSH
73656: LD_VAR 0 3
73660: PPUSH
73661: CALL_OW 3
73665: ST_TO_ADDR
73666: GO 73643
73668: POP
73669: POP
// end ;
73670: LD_VAR 0 3
73674: RET
// export function ComExit ( unit ) ; var tmp ; begin
73675: LD_INT 0
73677: PPUSH
73678: PPUSH
// if not IsInUnit ( unit ) then
73679: LD_VAR 0 1
73683: PPUSH
73684: CALL_OW 310
73688: NOT
73689: IFFALSE 73693
// exit ;
73691: GO 73753
// tmp := IsInUnit ( unit ) ;
73693: LD_ADDR_VAR 0 3
73697: PUSH
73698: LD_VAR 0 1
73702: PPUSH
73703: CALL_OW 310
73707: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73708: LD_VAR 0 3
73712: PPUSH
73713: CALL_OW 247
73717: PUSH
73718: LD_INT 2
73720: EQUAL
73721: IFFALSE 73734
// ComExitVehicle ( unit ) else
73723: LD_VAR 0 1
73727: PPUSH
73728: CALL_OW 121
73732: GO 73743
// ComExitBuilding ( unit ) ;
73734: LD_VAR 0 1
73738: PPUSH
73739: CALL_OW 122
// result := tmp ;
73743: LD_ADDR_VAR 0 2
73747: PUSH
73748: LD_VAR 0 3
73752: ST_TO_ADDR
// end ;
73753: LD_VAR 0 2
73757: RET
// export function ComExitAll ( units ) ; var i ; begin
73758: LD_INT 0
73760: PPUSH
73761: PPUSH
// if not units then
73762: LD_VAR 0 1
73766: NOT
73767: IFFALSE 73771
// exit ;
73769: GO 73797
// for i in units do
73771: LD_ADDR_VAR 0 3
73775: PUSH
73776: LD_VAR 0 1
73780: PUSH
73781: FOR_IN
73782: IFFALSE 73795
// ComExit ( i ) ;
73784: LD_VAR 0 3
73788: PPUSH
73789: CALL 73675 0 1
73793: GO 73781
73795: POP
73796: POP
// end ;
73797: LD_VAR 0 2
73801: RET
// export function ResetHc ; begin
73802: LD_INT 0
73804: PPUSH
// InitHc ;
73805: CALL_OW 19
// hc_importance := 0 ;
73809: LD_ADDR_OWVAR 32
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// end ;
73817: LD_VAR 0 1
73821: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73822: LD_INT 0
73824: PPUSH
73825: PPUSH
73826: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73827: LD_ADDR_VAR 0 6
73831: PUSH
73832: LD_VAR 0 1
73836: PUSH
73837: LD_VAR 0 3
73841: PLUS
73842: PUSH
73843: LD_INT 2
73845: DIV
73846: ST_TO_ADDR
// if _x < 0 then
73847: LD_VAR 0 6
73851: PUSH
73852: LD_INT 0
73854: LESS
73855: IFFALSE 73872
// _x := _x * - 1 ;
73857: LD_ADDR_VAR 0 6
73861: PUSH
73862: LD_VAR 0 6
73866: PUSH
73867: LD_INT 1
73869: NEG
73870: MUL
73871: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73872: LD_ADDR_VAR 0 7
73876: PUSH
73877: LD_VAR 0 2
73881: PUSH
73882: LD_VAR 0 4
73886: PLUS
73887: PUSH
73888: LD_INT 2
73890: DIV
73891: ST_TO_ADDR
// if _y < 0 then
73892: LD_VAR 0 7
73896: PUSH
73897: LD_INT 0
73899: LESS
73900: IFFALSE 73917
// _y := _y * - 1 ;
73902: LD_ADDR_VAR 0 7
73906: PUSH
73907: LD_VAR 0 7
73911: PUSH
73912: LD_INT 1
73914: NEG
73915: MUL
73916: ST_TO_ADDR
// result := [ _x , _y ] ;
73917: LD_ADDR_VAR 0 5
73921: PUSH
73922: LD_VAR 0 6
73926: PUSH
73927: LD_VAR 0 7
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: ST_TO_ADDR
// end ;
73936: LD_VAR 0 5
73940: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73941: LD_INT 0
73943: PPUSH
73944: PPUSH
73945: PPUSH
73946: PPUSH
// task := GetTaskList ( unit ) ;
73947: LD_ADDR_VAR 0 7
73951: PUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: CALL_OW 437
73961: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73962: LD_VAR 0 7
73966: NOT
73967: PUSH
73968: LD_VAR 0 1
73972: PPUSH
73973: LD_VAR 0 2
73977: PPUSH
73978: CALL_OW 308
73982: NOT
73983: AND
73984: IFFALSE 73988
// exit ;
73986: GO 74106
// if IsInArea ( unit , area ) then
73988: LD_VAR 0 1
73992: PPUSH
73993: LD_VAR 0 2
73997: PPUSH
73998: CALL_OW 308
74002: IFFALSE 74020
// begin ComMoveToArea ( unit , goAway ) ;
74004: LD_VAR 0 1
74008: PPUSH
74009: LD_VAR 0 3
74013: PPUSH
74014: CALL_OW 113
// exit ;
74018: GO 74106
// end ; if task [ 1 ] [ 1 ] <> M then
74020: LD_VAR 0 7
74024: PUSH
74025: LD_INT 1
74027: ARRAY
74028: PUSH
74029: LD_INT 1
74031: ARRAY
74032: PUSH
74033: LD_STRING M
74035: NONEQUAL
74036: IFFALSE 74040
// exit ;
74038: GO 74106
// x := task [ 1 ] [ 2 ] ;
74040: LD_ADDR_VAR 0 5
74044: PUSH
74045: LD_VAR 0 7
74049: PUSH
74050: LD_INT 1
74052: ARRAY
74053: PUSH
74054: LD_INT 2
74056: ARRAY
74057: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74058: LD_ADDR_VAR 0 6
74062: PUSH
74063: LD_VAR 0 7
74067: PUSH
74068: LD_INT 1
74070: ARRAY
74071: PUSH
74072: LD_INT 3
74074: ARRAY
74075: ST_TO_ADDR
// if InArea ( x , y , area ) then
74076: LD_VAR 0 5
74080: PPUSH
74081: LD_VAR 0 6
74085: PPUSH
74086: LD_VAR 0 2
74090: PPUSH
74091: CALL_OW 309
74095: IFFALSE 74106
// ComStop ( unit ) ;
74097: LD_VAR 0 1
74101: PPUSH
74102: CALL_OW 141
// end ;
74106: LD_VAR 0 4
74110: RET
// export function Abs ( value ) ; begin
74111: LD_INT 0
74113: PPUSH
// result := value ;
74114: LD_ADDR_VAR 0 2
74118: PUSH
74119: LD_VAR 0 1
74123: ST_TO_ADDR
// if value < 0 then
74124: LD_VAR 0 1
74128: PUSH
74129: LD_INT 0
74131: LESS
74132: IFFALSE 74149
// result := value * - 1 ;
74134: LD_ADDR_VAR 0 2
74138: PUSH
74139: LD_VAR 0 1
74143: PUSH
74144: LD_INT 1
74146: NEG
74147: MUL
74148: ST_TO_ADDR
// end ;
74149: LD_VAR 0 2
74153: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74154: LD_INT 0
74156: PPUSH
74157: PPUSH
74158: PPUSH
74159: PPUSH
74160: PPUSH
74161: PPUSH
74162: PPUSH
74163: PPUSH
// if not unit or not building then
74164: LD_VAR 0 1
74168: NOT
74169: PUSH
74170: LD_VAR 0 2
74174: NOT
74175: OR
74176: IFFALSE 74180
// exit ;
74178: GO 74406
// x := GetX ( building ) ;
74180: LD_ADDR_VAR 0 4
74184: PUSH
74185: LD_VAR 0 2
74189: PPUSH
74190: CALL_OW 250
74194: ST_TO_ADDR
// y := GetY ( building ) ;
74195: LD_ADDR_VAR 0 6
74199: PUSH
74200: LD_VAR 0 2
74204: PPUSH
74205: CALL_OW 251
74209: ST_TO_ADDR
// d := GetDir ( building ) ;
74210: LD_ADDR_VAR 0 8
74214: PUSH
74215: LD_VAR 0 2
74219: PPUSH
74220: CALL_OW 254
74224: ST_TO_ADDR
// r := 4 ;
74225: LD_ADDR_VAR 0 9
74229: PUSH
74230: LD_INT 4
74232: ST_TO_ADDR
// for i := 1 to 5 do
74233: LD_ADDR_VAR 0 10
74237: PUSH
74238: DOUBLE
74239: LD_INT 1
74241: DEC
74242: ST_TO_ADDR
74243: LD_INT 5
74245: PUSH
74246: FOR_TO
74247: IFFALSE 74404
// begin _x := ShiftX ( x , d , r + i ) ;
74249: LD_ADDR_VAR 0 5
74253: PUSH
74254: LD_VAR 0 4
74258: PPUSH
74259: LD_VAR 0 8
74263: PPUSH
74264: LD_VAR 0 9
74268: PUSH
74269: LD_VAR 0 10
74273: PLUS
74274: PPUSH
74275: CALL_OW 272
74279: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74280: LD_ADDR_VAR 0 7
74284: PUSH
74285: LD_VAR 0 6
74289: PPUSH
74290: LD_VAR 0 8
74294: PPUSH
74295: LD_VAR 0 9
74299: PUSH
74300: LD_VAR 0 10
74304: PLUS
74305: PPUSH
74306: CALL_OW 273
74310: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74311: LD_VAR 0 5
74315: PPUSH
74316: LD_VAR 0 7
74320: PPUSH
74321: CALL_OW 488
74325: PUSH
74326: LD_VAR 0 5
74330: PPUSH
74331: LD_VAR 0 7
74335: PPUSH
74336: CALL_OW 428
74340: PPUSH
74341: CALL_OW 247
74345: PUSH
74346: LD_INT 3
74348: PUSH
74349: LD_INT 2
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: IN
74356: NOT
74357: AND
74358: IFFALSE 74402
// begin ComMoveXY ( unit , _x , _y ) ;
74360: LD_VAR 0 1
74364: PPUSH
74365: LD_VAR 0 5
74369: PPUSH
74370: LD_VAR 0 7
74374: PPUSH
74375: CALL_OW 111
// result := [ _x , _y ] ;
74379: LD_ADDR_VAR 0 3
74383: PUSH
74384: LD_VAR 0 5
74388: PUSH
74389: LD_VAR 0 7
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: ST_TO_ADDR
// exit ;
74398: POP
74399: POP
74400: GO 74406
// end ; end ;
74402: GO 74246
74404: POP
74405: POP
// end ;
74406: LD_VAR 0 3
74410: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74411: LD_INT 0
74413: PPUSH
74414: PPUSH
74415: PPUSH
// result := 0 ;
74416: LD_ADDR_VAR 0 3
74420: PUSH
74421: LD_INT 0
74423: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74424: LD_VAR 0 1
74428: PUSH
74429: LD_INT 0
74431: LESS
74432: PUSH
74433: LD_VAR 0 1
74437: PUSH
74438: LD_INT 8
74440: GREATER
74441: OR
74442: PUSH
74443: LD_VAR 0 2
74447: PUSH
74448: LD_INT 0
74450: LESS
74451: OR
74452: PUSH
74453: LD_VAR 0 2
74457: PUSH
74458: LD_INT 8
74460: GREATER
74461: OR
74462: IFFALSE 74466
// exit ;
74464: GO 74541
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74466: LD_ADDR_VAR 0 4
74470: PUSH
74471: LD_INT 22
74473: PUSH
74474: LD_VAR 0 2
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PPUSH
74483: CALL_OW 69
74487: PUSH
74488: FOR_IN
74489: IFFALSE 74539
// begin un := UnitShoot ( i ) ;
74491: LD_ADDR_VAR 0 5
74495: PUSH
74496: LD_VAR 0 4
74500: PPUSH
74501: CALL_OW 504
74505: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74506: LD_VAR 0 5
74510: PPUSH
74511: CALL_OW 255
74515: PUSH
74516: LD_VAR 0 1
74520: EQUAL
74521: IFFALSE 74537
// begin result := un ;
74523: LD_ADDR_VAR 0 3
74527: PUSH
74528: LD_VAR 0 5
74532: ST_TO_ADDR
// exit ;
74533: POP
74534: POP
74535: GO 74541
// end ; end ;
74537: GO 74488
74539: POP
74540: POP
// end ;
74541: LD_VAR 0 3
74545: RET
// export function GetCargoBay ( units ) ; begin
74546: LD_INT 0
74548: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74549: LD_ADDR_VAR 0 2
74553: PUSH
74554: LD_VAR 0 1
74558: PPUSH
74559: LD_INT 2
74561: PUSH
74562: LD_INT 34
74564: PUSH
74565: LD_INT 12
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: PUSH
74572: LD_INT 34
74574: PUSH
74575: LD_INT 51
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: PUSH
74582: LD_INT 34
74584: PUSH
74585: LD_INT 32
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 34
74594: PUSH
74595: LD_INT 89
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: PPUSH
74609: CALL_OW 72
74613: ST_TO_ADDR
// end ;
74614: LD_VAR 0 2
74618: RET
// export function Negate ( value ) ; begin
74619: LD_INT 0
74621: PPUSH
// result := not value ;
74622: LD_ADDR_VAR 0 2
74626: PUSH
74627: LD_VAR 0 1
74631: NOT
74632: ST_TO_ADDR
// end ;
74633: LD_VAR 0 2
74637: RET
// export function Inc ( value ) ; begin
74638: LD_INT 0
74640: PPUSH
// result := value + 1 ;
74641: LD_ADDR_VAR 0 2
74645: PUSH
74646: LD_VAR 0 1
74650: PUSH
74651: LD_INT 1
74653: PLUS
74654: ST_TO_ADDR
// end ;
74655: LD_VAR 0 2
74659: RET
// export function Dec ( value ) ; begin
74660: LD_INT 0
74662: PPUSH
// result := value - 1 ;
74663: LD_ADDR_VAR 0 2
74667: PUSH
74668: LD_VAR 0 1
74672: PUSH
74673: LD_INT 1
74675: MINUS
74676: ST_TO_ADDR
// end ;
74677: LD_VAR 0 2
74681: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74682: LD_INT 0
74684: PPUSH
74685: PPUSH
74686: PPUSH
74687: PPUSH
74688: PPUSH
74689: PPUSH
74690: PPUSH
74691: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74692: LD_VAR 0 1
74696: PPUSH
74697: LD_VAR 0 2
74701: PPUSH
74702: CALL_OW 488
74706: NOT
74707: PUSH
74708: LD_VAR 0 3
74712: PPUSH
74713: LD_VAR 0 4
74717: PPUSH
74718: CALL_OW 488
74722: NOT
74723: OR
74724: IFFALSE 74737
// begin result := - 1 ;
74726: LD_ADDR_VAR 0 5
74730: PUSH
74731: LD_INT 1
74733: NEG
74734: ST_TO_ADDR
// exit ;
74735: GO 74972
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74737: LD_ADDR_VAR 0 12
74741: PUSH
74742: LD_VAR 0 1
74746: PPUSH
74747: LD_VAR 0 2
74751: PPUSH
74752: LD_VAR 0 3
74756: PPUSH
74757: LD_VAR 0 4
74761: PPUSH
74762: CALL 73822 0 4
74766: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74767: LD_ADDR_VAR 0 11
74771: PUSH
74772: LD_VAR 0 1
74776: PPUSH
74777: LD_VAR 0 2
74781: PPUSH
74782: LD_VAR 0 12
74786: PUSH
74787: LD_INT 1
74789: ARRAY
74790: PPUSH
74791: LD_VAR 0 12
74795: PUSH
74796: LD_INT 2
74798: ARRAY
74799: PPUSH
74800: CALL_OW 298
74804: ST_TO_ADDR
// distance := 9999 ;
74805: LD_ADDR_VAR 0 10
74809: PUSH
74810: LD_INT 9999
74812: ST_TO_ADDR
// for i := 0 to 5 do
74813: LD_ADDR_VAR 0 6
74817: PUSH
74818: DOUBLE
74819: LD_INT 0
74821: DEC
74822: ST_TO_ADDR
74823: LD_INT 5
74825: PUSH
74826: FOR_TO
74827: IFFALSE 74970
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74829: LD_ADDR_VAR 0 7
74833: PUSH
74834: LD_VAR 0 1
74838: PPUSH
74839: LD_VAR 0 6
74843: PPUSH
74844: LD_VAR 0 11
74848: PPUSH
74849: CALL_OW 272
74853: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74854: LD_ADDR_VAR 0 8
74858: PUSH
74859: LD_VAR 0 2
74863: PPUSH
74864: LD_VAR 0 6
74868: PPUSH
74869: LD_VAR 0 11
74873: PPUSH
74874: CALL_OW 273
74878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74879: LD_VAR 0 7
74883: PPUSH
74884: LD_VAR 0 8
74888: PPUSH
74889: CALL_OW 488
74893: NOT
74894: IFFALSE 74898
// continue ;
74896: GO 74826
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74898: LD_ADDR_VAR 0 9
74902: PUSH
74903: LD_VAR 0 12
74907: PUSH
74908: LD_INT 1
74910: ARRAY
74911: PPUSH
74912: LD_VAR 0 12
74916: PUSH
74917: LD_INT 2
74919: ARRAY
74920: PPUSH
74921: LD_VAR 0 7
74925: PPUSH
74926: LD_VAR 0 8
74930: PPUSH
74931: CALL_OW 298
74935: ST_TO_ADDR
// if tmp < distance then
74936: LD_VAR 0 9
74940: PUSH
74941: LD_VAR 0 10
74945: LESS
74946: IFFALSE 74968
// begin result := i ;
74948: LD_ADDR_VAR 0 5
74952: PUSH
74953: LD_VAR 0 6
74957: ST_TO_ADDR
// distance := tmp ;
74958: LD_ADDR_VAR 0 10
74962: PUSH
74963: LD_VAR 0 9
74967: ST_TO_ADDR
// end ; end ;
74968: GO 74826
74970: POP
74971: POP
// end ;
74972: LD_VAR 0 5
74976: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74977: LD_INT 0
74979: PPUSH
74980: PPUSH
// if not driver or not IsInUnit ( driver ) then
74981: LD_VAR 0 1
74985: NOT
74986: PUSH
74987: LD_VAR 0 1
74991: PPUSH
74992: CALL_OW 310
74996: NOT
74997: OR
74998: IFFALSE 75002
// exit ;
75000: GO 75092
// vehicle := IsInUnit ( driver ) ;
75002: LD_ADDR_VAR 0 3
75006: PUSH
75007: LD_VAR 0 1
75011: PPUSH
75012: CALL_OW 310
75016: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75017: LD_VAR 0 1
75021: PPUSH
75022: LD_STRING \
75024: PUSH
75025: LD_INT 0
75027: PUSH
75028: LD_INT 0
75030: PUSH
75031: LD_INT 0
75033: PUSH
75034: LD_INT 0
75036: PUSH
75037: LD_INT 0
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: PUSH
75052: LD_STRING E
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: LD_INT 0
75060: PUSH
75061: LD_VAR 0 3
75065: PUSH
75066: LD_INT 0
75068: PUSH
75069: LD_INT 0
75071: PUSH
75072: LD_INT 0
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PPUSH
75088: CALL_OW 446
// end ;
75092: LD_VAR 0 2
75096: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75097: LD_INT 0
75099: PPUSH
75100: PPUSH
// if not driver or not IsInUnit ( driver ) then
75101: LD_VAR 0 1
75105: NOT
75106: PUSH
75107: LD_VAR 0 1
75111: PPUSH
75112: CALL_OW 310
75116: NOT
75117: OR
75118: IFFALSE 75122
// exit ;
75120: GO 75212
// vehicle := IsInUnit ( driver ) ;
75122: LD_ADDR_VAR 0 3
75126: PUSH
75127: LD_VAR 0 1
75131: PPUSH
75132: CALL_OW 310
75136: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75137: LD_VAR 0 1
75141: PPUSH
75142: LD_STRING \
75144: PUSH
75145: LD_INT 0
75147: PUSH
75148: LD_INT 0
75150: PUSH
75151: LD_INT 0
75153: PUSH
75154: LD_INT 0
75156: PUSH
75157: LD_INT 0
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: PUSH
75172: LD_STRING E
75174: PUSH
75175: LD_INT 0
75177: PUSH
75178: LD_INT 0
75180: PUSH
75181: LD_VAR 0 3
75185: PUSH
75186: LD_INT 0
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: LD_INT 0
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PPUSH
75208: CALL_OW 447
// end ;
75212: LD_VAR 0 2
75216: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75217: LD_INT 0
75219: PPUSH
75220: PPUSH
75221: PPUSH
// tmp := [ ] ;
75222: LD_ADDR_VAR 0 5
75226: PUSH
75227: EMPTY
75228: ST_TO_ADDR
// for i in units do
75229: LD_ADDR_VAR 0 4
75233: PUSH
75234: LD_VAR 0 1
75238: PUSH
75239: FOR_IN
75240: IFFALSE 75278
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75242: LD_ADDR_VAR 0 5
75246: PUSH
75247: LD_VAR 0 5
75251: PPUSH
75252: LD_VAR 0 5
75256: PUSH
75257: LD_INT 1
75259: PLUS
75260: PPUSH
75261: LD_VAR 0 4
75265: PPUSH
75266: CALL_OW 256
75270: PPUSH
75271: CALL_OW 2
75275: ST_TO_ADDR
75276: GO 75239
75278: POP
75279: POP
// if not tmp then
75280: LD_VAR 0 5
75284: NOT
75285: IFFALSE 75289
// exit ;
75287: GO 75337
// if asc then
75289: LD_VAR 0 2
75293: IFFALSE 75317
// result := SortListByListAsc ( units , tmp ) else
75295: LD_ADDR_VAR 0 3
75299: PUSH
75300: LD_VAR 0 1
75304: PPUSH
75305: LD_VAR 0 5
75309: PPUSH
75310: CALL_OW 76
75314: ST_TO_ADDR
75315: GO 75337
// result := SortListByListDesc ( units , tmp ) ;
75317: LD_ADDR_VAR 0 3
75321: PUSH
75322: LD_VAR 0 1
75326: PPUSH
75327: LD_VAR 0 5
75331: PPUSH
75332: CALL_OW 77
75336: ST_TO_ADDR
// end ;
75337: LD_VAR 0 3
75341: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75342: LD_INT 0
75344: PPUSH
75345: PPUSH
// task := GetTaskList ( mech ) ;
75346: LD_ADDR_VAR 0 4
75350: PUSH
75351: LD_VAR 0 1
75355: PPUSH
75356: CALL_OW 437
75360: ST_TO_ADDR
// if not task then
75361: LD_VAR 0 4
75365: NOT
75366: IFFALSE 75370
// exit ;
75368: GO 75412
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75370: LD_ADDR_VAR 0 3
75374: PUSH
75375: LD_VAR 0 4
75379: PUSH
75380: LD_INT 1
75382: ARRAY
75383: PUSH
75384: LD_INT 1
75386: ARRAY
75387: PUSH
75388: LD_STRING r
75390: EQUAL
75391: PUSH
75392: LD_VAR 0 4
75396: PUSH
75397: LD_INT 1
75399: ARRAY
75400: PUSH
75401: LD_INT 4
75403: ARRAY
75404: PUSH
75405: LD_VAR 0 2
75409: EQUAL
75410: AND
75411: ST_TO_ADDR
// end ;
75412: LD_VAR 0 3
75416: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75417: LD_INT 0
75419: PPUSH
// SetDir ( unit , d ) ;
75420: LD_VAR 0 1
75424: PPUSH
75425: LD_VAR 0 4
75429: PPUSH
75430: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75434: LD_VAR 0 1
75438: PPUSH
75439: LD_VAR 0 2
75443: PPUSH
75444: LD_VAR 0 3
75448: PPUSH
75449: LD_VAR 0 5
75453: PPUSH
75454: CALL_OW 48
// end ;
75458: LD_VAR 0 6
75462: RET
// export function ToNaturalNumber ( number ) ; begin
75463: LD_INT 0
75465: PPUSH
// result := number div 1 ;
75466: LD_ADDR_VAR 0 2
75470: PUSH
75471: LD_VAR 0 1
75475: PUSH
75476: LD_INT 1
75478: DIV
75479: ST_TO_ADDR
// if number < 0 then
75480: LD_VAR 0 1
75484: PUSH
75485: LD_INT 0
75487: LESS
75488: IFFALSE 75498
// result := 0 ;
75490: LD_ADDR_VAR 0 2
75494: PUSH
75495: LD_INT 0
75497: ST_TO_ADDR
// end ;
75498: LD_VAR 0 2
75502: RET
// export function SortByClass ( units , class ) ; var un ; begin
75503: LD_INT 0
75505: PPUSH
75506: PPUSH
// if not units or not class then
75507: LD_VAR 0 1
75511: NOT
75512: PUSH
75513: LD_VAR 0 2
75517: NOT
75518: OR
75519: IFFALSE 75523
// exit ;
75521: GO 75618
// result := [ ] ;
75523: LD_ADDR_VAR 0 3
75527: PUSH
75528: EMPTY
75529: ST_TO_ADDR
// for un in units do
75530: LD_ADDR_VAR 0 4
75534: PUSH
75535: LD_VAR 0 1
75539: PUSH
75540: FOR_IN
75541: IFFALSE 75616
// if GetClass ( un ) = class then
75543: LD_VAR 0 4
75547: PPUSH
75548: CALL_OW 257
75552: PUSH
75553: LD_VAR 0 2
75557: EQUAL
75558: IFFALSE 75585
// result := Insert ( result , 1 , un ) else
75560: LD_ADDR_VAR 0 3
75564: PUSH
75565: LD_VAR 0 3
75569: PPUSH
75570: LD_INT 1
75572: PPUSH
75573: LD_VAR 0 4
75577: PPUSH
75578: CALL_OW 2
75582: ST_TO_ADDR
75583: GO 75614
// result := Replace ( result , result + 1 , un ) ;
75585: LD_ADDR_VAR 0 3
75589: PUSH
75590: LD_VAR 0 3
75594: PPUSH
75595: LD_VAR 0 3
75599: PUSH
75600: LD_INT 1
75602: PLUS
75603: PPUSH
75604: LD_VAR 0 4
75608: PPUSH
75609: CALL_OW 1
75613: ST_TO_ADDR
75614: GO 75540
75616: POP
75617: POP
// end ;
75618: LD_VAR 0 3
75622: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75623: LD_INT 0
75625: PPUSH
75626: PPUSH
75627: PPUSH
75628: PPUSH
75629: PPUSH
75630: PPUSH
75631: PPUSH
// result := [ ] ;
75632: LD_ADDR_VAR 0 4
75636: PUSH
75637: EMPTY
75638: ST_TO_ADDR
// if x - r < 0 then
75639: LD_VAR 0 1
75643: PUSH
75644: LD_VAR 0 3
75648: MINUS
75649: PUSH
75650: LD_INT 0
75652: LESS
75653: IFFALSE 75665
// min_x := 0 else
75655: LD_ADDR_VAR 0 8
75659: PUSH
75660: LD_INT 0
75662: ST_TO_ADDR
75663: GO 75681
// min_x := x - r ;
75665: LD_ADDR_VAR 0 8
75669: PUSH
75670: LD_VAR 0 1
75674: PUSH
75675: LD_VAR 0 3
75679: MINUS
75680: ST_TO_ADDR
// if y - r < 0 then
75681: LD_VAR 0 2
75685: PUSH
75686: LD_VAR 0 3
75690: MINUS
75691: PUSH
75692: LD_INT 0
75694: LESS
75695: IFFALSE 75707
// min_y := 0 else
75697: LD_ADDR_VAR 0 7
75701: PUSH
75702: LD_INT 0
75704: ST_TO_ADDR
75705: GO 75723
// min_y := y - r ;
75707: LD_ADDR_VAR 0 7
75711: PUSH
75712: LD_VAR 0 2
75716: PUSH
75717: LD_VAR 0 3
75721: MINUS
75722: ST_TO_ADDR
// max_x := x + r ;
75723: LD_ADDR_VAR 0 9
75727: PUSH
75728: LD_VAR 0 1
75732: PUSH
75733: LD_VAR 0 3
75737: PLUS
75738: ST_TO_ADDR
// max_y := y + r ;
75739: LD_ADDR_VAR 0 10
75743: PUSH
75744: LD_VAR 0 2
75748: PUSH
75749: LD_VAR 0 3
75753: PLUS
75754: ST_TO_ADDR
// for _x = min_x to max_x do
75755: LD_ADDR_VAR 0 5
75759: PUSH
75760: DOUBLE
75761: LD_VAR 0 8
75765: DEC
75766: ST_TO_ADDR
75767: LD_VAR 0 9
75771: PUSH
75772: FOR_TO
75773: IFFALSE 75874
// for _y = min_y to max_y do
75775: LD_ADDR_VAR 0 6
75779: PUSH
75780: DOUBLE
75781: LD_VAR 0 7
75785: DEC
75786: ST_TO_ADDR
75787: LD_VAR 0 10
75791: PUSH
75792: FOR_TO
75793: IFFALSE 75870
// begin if not ValidHex ( _x , _y ) then
75795: LD_VAR 0 5
75799: PPUSH
75800: LD_VAR 0 6
75804: PPUSH
75805: CALL_OW 488
75809: NOT
75810: IFFALSE 75814
// continue ;
75812: GO 75792
// if GetResourceTypeXY ( _x , _y ) then
75814: LD_VAR 0 5
75818: PPUSH
75819: LD_VAR 0 6
75823: PPUSH
75824: CALL_OW 283
75828: IFFALSE 75868
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75830: LD_ADDR_VAR 0 4
75834: PUSH
75835: LD_VAR 0 4
75839: PPUSH
75840: LD_VAR 0 4
75844: PUSH
75845: LD_INT 1
75847: PLUS
75848: PPUSH
75849: LD_VAR 0 5
75853: PUSH
75854: LD_VAR 0 6
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PPUSH
75863: CALL_OW 1
75867: ST_TO_ADDR
// end ;
75868: GO 75792
75870: POP
75871: POP
75872: GO 75772
75874: POP
75875: POP
// end ;
75876: LD_VAR 0 4
75880: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75881: LD_INT 0
75883: PPUSH
75884: PPUSH
75885: PPUSH
75886: PPUSH
75887: PPUSH
75888: PPUSH
75889: PPUSH
75890: PPUSH
// if not units then
75891: LD_VAR 0 1
75895: NOT
75896: IFFALSE 75900
// exit ;
75898: GO 76424
// result := UnitFilter ( units , [ f_ok ] ) ;
75900: LD_ADDR_VAR 0 3
75904: PUSH
75905: LD_VAR 0 1
75909: PPUSH
75910: LD_INT 50
75912: PUSH
75913: EMPTY
75914: LIST
75915: PPUSH
75916: CALL_OW 72
75920: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75921: LD_ADDR_VAR 0 8
75925: PUSH
75926: LD_VAR 0 1
75930: PUSH
75931: LD_INT 1
75933: ARRAY
75934: PPUSH
75935: CALL_OW 255
75939: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75940: LD_ADDR_VAR 0 10
75944: PUSH
75945: LD_INT 29
75947: PUSH
75948: LD_INT 91
75950: PUSH
75951: LD_INT 49
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: LIST
75958: ST_TO_ADDR
// if not result then
75959: LD_VAR 0 3
75963: NOT
75964: IFFALSE 75968
// exit ;
75966: GO 76424
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75968: LD_ADDR_VAR 0 5
75972: PUSH
75973: LD_INT 81
75975: PUSH
75976: LD_VAR 0 8
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PPUSH
75985: CALL_OW 69
75989: ST_TO_ADDR
// for i in result do
75990: LD_ADDR_VAR 0 4
75994: PUSH
75995: LD_VAR 0 3
75999: PUSH
76000: FOR_IN
76001: IFFALSE 76422
// begin tag := GetTag ( i ) + 1 ;
76003: LD_ADDR_VAR 0 9
76007: PUSH
76008: LD_VAR 0 4
76012: PPUSH
76013: CALL_OW 110
76017: PUSH
76018: LD_INT 1
76020: PLUS
76021: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76022: LD_ADDR_VAR 0 7
76026: PUSH
76027: LD_VAR 0 4
76031: PPUSH
76032: CALL_OW 250
76036: PPUSH
76037: LD_VAR 0 4
76041: PPUSH
76042: CALL_OW 251
76046: PPUSH
76047: LD_INT 6
76049: PPUSH
76050: CALL 75623 0 3
76054: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76055: LD_VAR 0 4
76059: PPUSH
76060: CALL_OW 247
76064: PUSH
76065: LD_INT 2
76067: EQUAL
76068: PUSH
76069: LD_VAR 0 7
76073: AND
76074: PUSH
76075: LD_VAR 0 4
76079: PPUSH
76080: CALL_OW 264
76084: PUSH
76085: LD_VAR 0 10
76089: IN
76090: NOT
76091: AND
76092: IFFALSE 76131
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76094: LD_VAR 0 4
76098: PPUSH
76099: LD_VAR 0 7
76103: PUSH
76104: LD_INT 1
76106: ARRAY
76107: PUSH
76108: LD_INT 1
76110: ARRAY
76111: PPUSH
76112: LD_VAR 0 7
76116: PUSH
76117: LD_INT 1
76119: ARRAY
76120: PUSH
76121: LD_INT 2
76123: ARRAY
76124: PPUSH
76125: CALL_OW 116
76129: GO 76420
// if path > tag then
76131: LD_VAR 0 2
76135: PUSH
76136: LD_VAR 0 9
76140: GREATER
76141: IFFALSE 76349
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76143: LD_ADDR_VAR 0 6
76147: PUSH
76148: LD_VAR 0 5
76152: PPUSH
76153: LD_INT 91
76155: PUSH
76156: LD_VAR 0 4
76160: PUSH
76161: LD_INT 8
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: LIST
76168: PPUSH
76169: CALL_OW 72
76173: ST_TO_ADDR
// if nearEnemy then
76174: LD_VAR 0 6
76178: IFFALSE 76247
// begin if GetWeapon ( i ) = ru_time_lapser then
76180: LD_VAR 0 4
76184: PPUSH
76185: CALL_OW 264
76189: PUSH
76190: LD_INT 49
76192: EQUAL
76193: IFFALSE 76221
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76195: LD_VAR 0 4
76199: PPUSH
76200: LD_VAR 0 6
76204: PPUSH
76205: LD_VAR 0 4
76209: PPUSH
76210: CALL_OW 74
76214: PPUSH
76215: CALL_OW 112
76219: GO 76245
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76221: LD_VAR 0 4
76225: PPUSH
76226: LD_VAR 0 6
76230: PPUSH
76231: LD_VAR 0 4
76235: PPUSH
76236: CALL_OW 74
76240: PPUSH
76241: CALL 77349 0 2
// end else
76245: GO 76347
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76247: LD_VAR 0 4
76251: PPUSH
76252: LD_VAR 0 2
76256: PUSH
76257: LD_VAR 0 9
76261: ARRAY
76262: PUSH
76263: LD_INT 1
76265: ARRAY
76266: PPUSH
76267: LD_VAR 0 2
76271: PUSH
76272: LD_VAR 0 9
76276: ARRAY
76277: PUSH
76278: LD_INT 2
76280: ARRAY
76281: PPUSH
76282: CALL_OW 297
76286: PUSH
76287: LD_INT 6
76289: GREATER
76290: IFFALSE 76333
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76292: LD_VAR 0 4
76296: PPUSH
76297: LD_VAR 0 2
76301: PUSH
76302: LD_VAR 0 9
76306: ARRAY
76307: PUSH
76308: LD_INT 1
76310: ARRAY
76311: PPUSH
76312: LD_VAR 0 2
76316: PUSH
76317: LD_VAR 0 9
76321: ARRAY
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: PPUSH
76327: CALL_OW 114
76331: GO 76347
// SetTag ( i , tag ) ;
76333: LD_VAR 0 4
76337: PPUSH
76338: LD_VAR 0 9
76342: PPUSH
76343: CALL_OW 109
// end else
76347: GO 76420
// if enemy then
76349: LD_VAR 0 5
76353: IFFALSE 76420
// begin if GetWeapon ( i ) = ru_time_lapser then
76355: LD_VAR 0 4
76359: PPUSH
76360: CALL_OW 264
76364: PUSH
76365: LD_INT 49
76367: EQUAL
76368: IFFALSE 76396
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76370: LD_VAR 0 4
76374: PPUSH
76375: LD_VAR 0 5
76379: PPUSH
76380: LD_VAR 0 4
76384: PPUSH
76385: CALL_OW 74
76389: PPUSH
76390: CALL_OW 112
76394: GO 76420
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76396: LD_VAR 0 4
76400: PPUSH
76401: LD_VAR 0 5
76405: PPUSH
76406: LD_VAR 0 4
76410: PPUSH
76411: CALL_OW 74
76415: PPUSH
76416: CALL 77349 0 2
// end ; end ;
76420: GO 76000
76422: POP
76423: POP
// end ;
76424: LD_VAR 0 3
76428: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76429: LD_INT 0
76431: PPUSH
76432: PPUSH
76433: PPUSH
// if not unit or IsInUnit ( unit ) then
76434: LD_VAR 0 1
76438: NOT
76439: PUSH
76440: LD_VAR 0 1
76444: PPUSH
76445: CALL_OW 310
76449: OR
76450: IFFALSE 76454
// exit ;
76452: GO 76545
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76454: LD_ADDR_VAR 0 4
76458: PUSH
76459: LD_VAR 0 1
76463: PPUSH
76464: CALL_OW 250
76468: PPUSH
76469: LD_VAR 0 2
76473: PPUSH
76474: LD_INT 1
76476: PPUSH
76477: CALL_OW 272
76481: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76482: LD_ADDR_VAR 0 5
76486: PUSH
76487: LD_VAR 0 1
76491: PPUSH
76492: CALL_OW 251
76496: PPUSH
76497: LD_VAR 0 2
76501: PPUSH
76502: LD_INT 1
76504: PPUSH
76505: CALL_OW 273
76509: ST_TO_ADDR
// if ValidHex ( x , y ) then
76510: LD_VAR 0 4
76514: PPUSH
76515: LD_VAR 0 5
76519: PPUSH
76520: CALL_OW 488
76524: IFFALSE 76545
// ComTurnXY ( unit , x , y ) ;
76526: LD_VAR 0 1
76530: PPUSH
76531: LD_VAR 0 4
76535: PPUSH
76536: LD_VAR 0 5
76540: PPUSH
76541: CALL_OW 118
// end ;
76545: LD_VAR 0 3
76549: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76550: LD_INT 0
76552: PPUSH
76553: PPUSH
// result := false ;
76554: LD_ADDR_VAR 0 3
76558: PUSH
76559: LD_INT 0
76561: ST_TO_ADDR
// if not units then
76562: LD_VAR 0 2
76566: NOT
76567: IFFALSE 76571
// exit ;
76569: GO 76616
// for i in units do
76571: LD_ADDR_VAR 0 4
76575: PUSH
76576: LD_VAR 0 2
76580: PUSH
76581: FOR_IN
76582: IFFALSE 76614
// if See ( side , i ) then
76584: LD_VAR 0 1
76588: PPUSH
76589: LD_VAR 0 4
76593: PPUSH
76594: CALL_OW 292
76598: IFFALSE 76612
// begin result := true ;
76600: LD_ADDR_VAR 0 3
76604: PUSH
76605: LD_INT 1
76607: ST_TO_ADDR
// exit ;
76608: POP
76609: POP
76610: GO 76616
// end ;
76612: GO 76581
76614: POP
76615: POP
// end ;
76616: LD_VAR 0 3
76620: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76621: LD_INT 0
76623: PPUSH
76624: PPUSH
76625: PPUSH
76626: PPUSH
// if not unit or not points then
76627: LD_VAR 0 1
76631: NOT
76632: PUSH
76633: LD_VAR 0 2
76637: NOT
76638: OR
76639: IFFALSE 76643
// exit ;
76641: GO 76733
// dist := 99999 ;
76643: LD_ADDR_VAR 0 5
76647: PUSH
76648: LD_INT 99999
76650: ST_TO_ADDR
// for i in points do
76651: LD_ADDR_VAR 0 4
76655: PUSH
76656: LD_VAR 0 2
76660: PUSH
76661: FOR_IN
76662: IFFALSE 76731
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76664: LD_ADDR_VAR 0 6
76668: PUSH
76669: LD_VAR 0 1
76673: PPUSH
76674: LD_VAR 0 4
76678: PUSH
76679: LD_INT 1
76681: ARRAY
76682: PPUSH
76683: LD_VAR 0 4
76687: PUSH
76688: LD_INT 2
76690: ARRAY
76691: PPUSH
76692: CALL_OW 297
76696: ST_TO_ADDR
// if tmpDist < dist then
76697: LD_VAR 0 6
76701: PUSH
76702: LD_VAR 0 5
76706: LESS
76707: IFFALSE 76729
// begin result := i ;
76709: LD_ADDR_VAR 0 3
76713: PUSH
76714: LD_VAR 0 4
76718: ST_TO_ADDR
// dist := tmpDist ;
76719: LD_ADDR_VAR 0 5
76723: PUSH
76724: LD_VAR 0 6
76728: ST_TO_ADDR
// end ; end ;
76729: GO 76661
76731: POP
76732: POP
// end ;
76733: LD_VAR 0 3
76737: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76738: LD_INT 0
76740: PPUSH
// uc_side := side ;
76741: LD_ADDR_OWVAR 20
76745: PUSH
76746: LD_VAR 0 1
76750: ST_TO_ADDR
// uc_nation := 3 ;
76751: LD_ADDR_OWVAR 21
76755: PUSH
76756: LD_INT 3
76758: ST_TO_ADDR
// vc_chassis := 25 ;
76759: LD_ADDR_OWVAR 37
76763: PUSH
76764: LD_INT 25
76766: ST_TO_ADDR
// vc_engine := engine_siberite ;
76767: LD_ADDR_OWVAR 39
76771: PUSH
76772: LD_INT 3
76774: ST_TO_ADDR
// vc_control := control_computer ;
76775: LD_ADDR_OWVAR 38
76779: PUSH
76780: LD_INT 3
76782: ST_TO_ADDR
// vc_weapon := 59 ;
76783: LD_ADDR_OWVAR 40
76787: PUSH
76788: LD_INT 59
76790: ST_TO_ADDR
// result := CreateVehicle ;
76791: LD_ADDR_VAR 0 5
76795: PUSH
76796: CALL_OW 45
76800: ST_TO_ADDR
// SetDir ( result , d ) ;
76801: LD_VAR 0 5
76805: PPUSH
76806: LD_VAR 0 4
76810: PPUSH
76811: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76815: LD_VAR 0 5
76819: PPUSH
76820: LD_VAR 0 2
76824: PPUSH
76825: LD_VAR 0 3
76829: PPUSH
76830: LD_INT 0
76832: PPUSH
76833: CALL_OW 48
// end ;
76837: LD_VAR 0 5
76841: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76842: LD_INT 0
76844: PPUSH
76845: PPUSH
76846: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76847: LD_ADDR_VAR 0 2
76851: PUSH
76852: LD_INT 0
76854: PUSH
76855: LD_INT 0
76857: PUSH
76858: LD_INT 0
76860: PUSH
76861: LD_INT 0
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76870: LD_VAR 0 1
76874: NOT
76875: PUSH
76876: LD_VAR 0 1
76880: PPUSH
76881: CALL_OW 264
76885: PUSH
76886: LD_INT 12
76888: PUSH
76889: LD_INT 51
76891: PUSH
76892: LD_INT 32
76894: PUSH
76895: LD_INT 89
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: LIST
76902: LIST
76903: IN
76904: NOT
76905: OR
76906: IFFALSE 76910
// exit ;
76908: GO 77008
// for i := 1 to 3 do
76910: LD_ADDR_VAR 0 3
76914: PUSH
76915: DOUBLE
76916: LD_INT 1
76918: DEC
76919: ST_TO_ADDR
76920: LD_INT 3
76922: PUSH
76923: FOR_TO
76924: IFFALSE 77006
// begin tmp := GetCargo ( cargo , i ) ;
76926: LD_ADDR_VAR 0 4
76930: PUSH
76931: LD_VAR 0 1
76935: PPUSH
76936: LD_VAR 0 3
76940: PPUSH
76941: CALL_OW 289
76945: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76946: LD_ADDR_VAR 0 2
76950: PUSH
76951: LD_VAR 0 2
76955: PPUSH
76956: LD_VAR 0 3
76960: PPUSH
76961: LD_VAR 0 4
76965: PPUSH
76966: CALL_OW 1
76970: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76971: LD_ADDR_VAR 0 2
76975: PUSH
76976: LD_VAR 0 2
76980: PPUSH
76981: LD_INT 4
76983: PPUSH
76984: LD_VAR 0 2
76988: PUSH
76989: LD_INT 4
76991: ARRAY
76992: PUSH
76993: LD_VAR 0 4
76997: PLUS
76998: PPUSH
76999: CALL_OW 1
77003: ST_TO_ADDR
// end ;
77004: GO 76923
77006: POP
77007: POP
// end ;
77008: LD_VAR 0 2
77012: RET
// export function Length ( array ) ; begin
77013: LD_INT 0
77015: PPUSH
// result := array + 0 ;
77016: LD_ADDR_VAR 0 2
77020: PUSH
77021: LD_VAR 0 1
77025: PUSH
77026: LD_INT 0
77028: PLUS
77029: ST_TO_ADDR
// end ;
77030: LD_VAR 0 2
77034: RET
// export function PrepareArray ( array ) ; begin
77035: LD_INT 0
77037: PPUSH
// result := array diff 0 ;
77038: LD_ADDR_VAR 0 2
77042: PUSH
77043: LD_VAR 0 1
77047: PUSH
77048: LD_INT 0
77050: DIFF
77051: ST_TO_ADDR
// if not result [ 1 ] then
77052: LD_VAR 0 2
77056: PUSH
77057: LD_INT 1
77059: ARRAY
77060: NOT
77061: IFFALSE 77081
// result := Delete ( result , 1 ) ;
77063: LD_ADDR_VAR 0 2
77067: PUSH
77068: LD_VAR 0 2
77072: PPUSH
77073: LD_INT 1
77075: PPUSH
77076: CALL_OW 3
77080: ST_TO_ADDR
// end ;
77081: LD_VAR 0 2
77085: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77086: LD_INT 0
77088: PPUSH
77089: PPUSH
77090: PPUSH
77091: PPUSH
// sibRocketRange := 25 ;
77092: LD_ADDR_VAR 0 6
77096: PUSH
77097: LD_INT 25
77099: ST_TO_ADDR
// result := false ;
77100: LD_ADDR_VAR 0 4
77104: PUSH
77105: LD_INT 0
77107: ST_TO_ADDR
// for i := 0 to 5 do
77108: LD_ADDR_VAR 0 5
77112: PUSH
77113: DOUBLE
77114: LD_INT 0
77116: DEC
77117: ST_TO_ADDR
77118: LD_INT 5
77120: PUSH
77121: FOR_TO
77122: IFFALSE 77189
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77124: LD_VAR 0 1
77128: PPUSH
77129: LD_VAR 0 5
77133: PPUSH
77134: LD_VAR 0 6
77138: PPUSH
77139: CALL_OW 272
77143: PPUSH
77144: LD_VAR 0 2
77148: PPUSH
77149: LD_VAR 0 5
77153: PPUSH
77154: LD_VAR 0 6
77158: PPUSH
77159: CALL_OW 273
77163: PPUSH
77164: LD_VAR 0 3
77168: PPUSH
77169: CALL_OW 309
77173: IFFALSE 77187
// begin result := true ;
77175: LD_ADDR_VAR 0 4
77179: PUSH
77180: LD_INT 1
77182: ST_TO_ADDR
// exit ;
77183: POP
77184: POP
77185: GO 77191
// end ;
77187: GO 77121
77189: POP
77190: POP
// end ;
77191: LD_VAR 0 4
77195: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77196: LD_INT 0
77198: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77199: LD_VAR 0 1
77203: PPUSH
77204: LD_VAR 0 2
77208: PPUSH
77209: LD_INT 0
77211: PPUSH
77212: LD_INT 0
77214: PPUSH
77215: LD_INT 1
77217: PPUSH
77218: LD_INT 0
77220: PPUSH
77221: CALL_OW 587
// end ;
77225: LD_VAR 0 3
77229: RET
// export function CenterOnNow ( unit ) ; begin
77230: LD_INT 0
77232: PPUSH
// result := IsInUnit ( unit ) ;
77233: LD_ADDR_VAR 0 2
77237: PUSH
77238: LD_VAR 0 1
77242: PPUSH
77243: CALL_OW 310
77247: ST_TO_ADDR
// if not result then
77248: LD_VAR 0 2
77252: NOT
77253: IFFALSE 77265
// result := unit ;
77255: LD_ADDR_VAR 0 2
77259: PUSH
77260: LD_VAR 0 1
77264: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77265: LD_VAR 0 1
77269: PPUSH
77270: CALL_OW 87
// end ;
77274: LD_VAR 0 2
77278: RET
// export function ComMoveHex ( unit , hex ) ; begin
77279: LD_INT 0
77281: PPUSH
// if not hex then
77282: LD_VAR 0 2
77286: NOT
77287: IFFALSE 77291
// exit ;
77289: GO 77344
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77291: LD_VAR 0 2
77295: PUSH
77296: LD_INT 1
77298: ARRAY
77299: PPUSH
77300: LD_VAR 0 2
77304: PUSH
77305: LD_INT 2
77307: ARRAY
77308: PPUSH
77309: CALL_OW 428
77313: IFFALSE 77317
// exit ;
77315: GO 77344
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77317: LD_VAR 0 1
77321: PPUSH
77322: LD_VAR 0 2
77326: PUSH
77327: LD_INT 1
77329: ARRAY
77330: PPUSH
77331: LD_VAR 0 2
77335: PUSH
77336: LD_INT 2
77338: ARRAY
77339: PPUSH
77340: CALL_OW 111
// end ;
77344: LD_VAR 0 3
77348: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77349: LD_INT 0
77351: PPUSH
77352: PPUSH
77353: PPUSH
// if not unit or not enemy then
77354: LD_VAR 0 1
77358: NOT
77359: PUSH
77360: LD_VAR 0 2
77364: NOT
77365: OR
77366: IFFALSE 77370
// exit ;
77368: GO 77494
// x := GetX ( enemy ) ;
77370: LD_ADDR_VAR 0 4
77374: PUSH
77375: LD_VAR 0 2
77379: PPUSH
77380: CALL_OW 250
77384: ST_TO_ADDR
// y := GetY ( enemy ) ;
77385: LD_ADDR_VAR 0 5
77389: PUSH
77390: LD_VAR 0 2
77394: PPUSH
77395: CALL_OW 251
77399: ST_TO_ADDR
// if ValidHex ( x , y ) then
77400: LD_VAR 0 4
77404: PPUSH
77405: LD_VAR 0 5
77409: PPUSH
77410: CALL_OW 488
77414: IFFALSE 77494
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
77416: LD_VAR 0 2
77420: PPUSH
77421: CALL_OW 247
77425: PUSH
77426: LD_INT 3
77428: PUSH
77429: LD_INT 2
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: IN
77436: PUSH
77437: LD_VAR 0 1
77441: PPUSH
77442: CALL_OW 255
77446: PPUSH
77447: LD_VAR 0 2
77451: PPUSH
77452: CALL_OW 292
77456: AND
77457: IFFALSE 77475
// ComAttackUnit ( unit , enemy ) else
77459: LD_VAR 0 1
77463: PPUSH
77464: LD_VAR 0 2
77468: PPUSH
77469: CALL_OW 115
77473: GO 77494
// ComAgressiveMove ( unit , x , y ) ;
77475: LD_VAR 0 1
77479: PPUSH
77480: LD_VAR 0 4
77484: PPUSH
77485: LD_VAR 0 5
77489: PPUSH
77490: CALL_OW 114
// end ;
77494: LD_VAR 0 3
77498: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
77499: LD_INT 0
77501: PPUSH
77502: PPUSH
77503: PPUSH
// list := AreaToList ( area , 0 ) ;
77504: LD_ADDR_VAR 0 5
77508: PUSH
77509: LD_VAR 0 1
77513: PPUSH
77514: LD_INT 0
77516: PPUSH
77517: CALL_OW 517
77521: ST_TO_ADDR
// if not list then
77522: LD_VAR 0 5
77526: NOT
77527: IFFALSE 77531
// exit ;
77529: GO 77661
// if all then
77531: LD_VAR 0 2
77535: IFFALSE 77623
// begin for i := 1 to list [ 1 ] do
77537: LD_ADDR_VAR 0 4
77541: PUSH
77542: DOUBLE
77543: LD_INT 1
77545: DEC
77546: ST_TO_ADDR
77547: LD_VAR 0 5
77551: PUSH
77552: LD_INT 1
77554: ARRAY
77555: PUSH
77556: FOR_TO
77557: IFFALSE 77619
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
77559: LD_ADDR_VAR 0 3
77563: PUSH
77564: LD_VAR 0 3
77568: PPUSH
77569: LD_VAR 0 3
77573: PUSH
77574: LD_INT 1
77576: PLUS
77577: PPUSH
77578: LD_VAR 0 5
77582: PUSH
77583: LD_INT 1
77585: ARRAY
77586: PUSH
77587: LD_VAR 0 4
77591: ARRAY
77592: PUSH
77593: LD_VAR 0 5
77597: PUSH
77598: LD_INT 2
77600: ARRAY
77601: PUSH
77602: LD_VAR 0 4
77606: ARRAY
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PPUSH
77612: CALL_OW 1
77616: ST_TO_ADDR
77617: GO 77556
77619: POP
77620: POP
// exit ;
77621: GO 77661
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
77623: LD_ADDR_VAR 0 3
77627: PUSH
77628: LD_VAR 0 5
77632: PUSH
77633: LD_INT 1
77635: ARRAY
77636: PUSH
77637: LD_INT 1
77639: ARRAY
77640: PUSH
77641: LD_VAR 0 5
77645: PUSH
77646: LD_INT 2
77648: ARRAY
77649: PUSH
77650: LD_INT 1
77652: ARRAY
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: PUSH
77658: EMPTY
77659: LIST
77660: ST_TO_ADDR
// end ;
77661: LD_VAR 0 3
77665: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
77666: LD_INT 0
77668: PPUSH
77669: PPUSH
// list := AreaToList ( area , 0 ) ;
77670: LD_ADDR_VAR 0 4
77674: PUSH
77675: LD_VAR 0 1
77679: PPUSH
77680: LD_INT 0
77682: PPUSH
77683: CALL_OW 517
77687: ST_TO_ADDR
// if not list then
77688: LD_VAR 0 4
77692: NOT
77693: IFFALSE 77697
// exit ;
77695: GO 77738
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
77697: LD_ADDR_VAR 0 3
77701: PUSH
77702: LD_VAR 0 4
77706: PUSH
77707: LD_INT 1
77709: ARRAY
77710: PUSH
77711: LD_INT 1
77713: ARRAY
77714: PUSH
77715: LD_VAR 0 4
77719: PUSH
77720: LD_INT 2
77722: ARRAY
77723: PUSH
77724: LD_INT 1
77726: ARRAY
77727: PUSH
77728: LD_VAR 0 2
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: ST_TO_ADDR
// end ; end_of_file
77738: LD_VAR 0 3
77742: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77743: LD_VAR 0 1
77747: PUSH
77748: LD_INT 200
77750: DOUBLE
77751: GREATEREQUAL
77752: IFFALSE 77760
77754: LD_INT 299
77756: DOUBLE
77757: LESSEQUAL
77758: IFTRUE 77762
77760: GO 77794
77762: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77763: LD_VAR 0 1
77767: PPUSH
77768: LD_VAR 0 2
77772: PPUSH
77773: LD_VAR 0 3
77777: PPUSH
77778: LD_VAR 0 4
77782: PPUSH
77783: LD_VAR 0 5
77787: PPUSH
77788: CALL 15421 0 5
77792: GO 77871
77794: LD_INT 300
77796: DOUBLE
77797: GREATEREQUAL
77798: IFFALSE 77806
77800: LD_INT 399
77802: DOUBLE
77803: LESSEQUAL
77804: IFTRUE 77808
77806: GO 77870
77808: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77809: LD_VAR 0 1
77813: PPUSH
77814: LD_VAR 0 2
77818: PPUSH
77819: LD_VAR 0 3
77823: PPUSH
77824: LD_VAR 0 4
77828: PPUSH
77829: LD_VAR 0 5
77833: PPUSH
77834: LD_VAR 0 6
77838: PPUSH
77839: LD_VAR 0 7
77843: PPUSH
77844: LD_VAR 0 8
77848: PPUSH
77849: LD_VAR 0 9
77853: PPUSH
77854: LD_VAR 0 10
77858: PPUSH
77859: LD_VAR 0 11
77863: PPUSH
77864: CALL 32276 0 11
77868: GO 77871
77870: POP
// end ;
77871: PPOPN 11
77873: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77874: LD_VAR 0 1
77878: PPUSH
77879: LD_VAR 0 2
77883: PPUSH
77884: LD_VAR 0 3
77888: PPUSH
77889: LD_VAR 0 4
77893: PPUSH
77894: LD_VAR 0 5
77898: PPUSH
77899: CALL 15157 0 5
// end ; end_of_file
77903: PPOPN 5
77905: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77906: LD_VAR 0 1
77910: PPUSH
77911: LD_VAR 0 2
77915: PPUSH
77916: LD_VAR 0 3
77920: PPUSH
77921: LD_VAR 0 4
77925: PPUSH
77926: LD_VAR 0 5
77930: PPUSH
77931: LD_VAR 0 6
77935: PPUSH
77936: CALL 19928 0 6
// end ;
77940: PPOPN 6
77942: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77943: LD_INT 0
77945: PPUSH
// begin if not units then
77946: LD_VAR 0 1
77950: NOT
77951: IFFALSE 77955
// exit ;
77953: GO 77955
// end ;
77955: PPOPN 7
77957: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77958: CALL 19832 0 0
// end ;
77962: PPOPN 1
77964: END
