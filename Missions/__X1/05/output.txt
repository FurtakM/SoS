// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 732 0 2
// PrepareArabian ;
  31: CALL 1425 0 0
// PrepareRussian ;
  35: CALL 3023 0 0
// Action ;
  39: CALL 7638 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// end ;
 250: LD_VAR 0 1
 254: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 255: LD_EXP 10
 259: NOT
 260: PUSH
 261: LD_EXP 9
 265: NOT
 266: AND
 267: PUSH
 268: LD_EXP 39
 272: NOT
 273: AND
 274: PUSH
 275: LD_EXP 40
 279: NOT
 280: AND
 281: IFFALSE 293
 283: GO 285
 285: DISABLE
// SetAchievement ( ACH_EXT ) ;
 286: LD_STRING ACH_EXT
 288: PPUSH
 289: CALL_OW 543
 293: END
// every 0 0$1 trigger captureCounter >= 6 do
 294: LD_EXP 18
 298: PUSH
 299: LD_INT 6
 301: GREATEREQUAL
 302: IFFALSE 314
 304: GO 306
 306: DISABLE
// SetAchievement ( ACH_KEY ) ;
 307: LD_STRING ACH_KEY
 309: PPUSH
 310: CALL_OW 543
 314: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 3
 322: GREATEREQUAL
 323: IFFALSE 335
 325: GO 327
 327: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 328: LD_STRING ACH_CHEM
 330: PPUSH
 331: CALL_OW 543
 335: END
// every 0 0$1 trigger debug do var i ;
 336: LD_EXP 1
 340: IFFALSE 424
 342: GO 344
 344: DISABLE
 345: LD_INT 0
 347: PPUSH
// begin enable ;
 348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 349: LD_ADDR_VAR 0 1
 353: PUSH
 354: LD_INT 22
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 21
 369: PUSH
 370: LD_INT 3
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PPUSH
 385: CALL_OW 69
 389: PUSH
 390: FOR_IN
 391: IFFALSE 422
// if GetLives ( i ) < 1000 then
 393: LD_VAR 0 1
 397: PPUSH
 398: CALL_OW 256
 402: PUSH
 403: LD_INT 1000
 405: LESS
 406: IFFALSE 420
// SetLives ( i , 1000 ) ;
 408: LD_VAR 0 1
 412: PPUSH
 413: LD_INT 1000
 415: PPUSH
 416: CALL_OW 234
 420: GO 390
 422: POP
 423: POP
// end ; end_of_file
 424: PPOPN 1
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 1
 679: NEG
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i := 1 to 3 do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 3
 764: PUSH
 765: FOR_TO
 766: IFFALSE 803
// begin hc_class := 21 ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 21
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_VAR 0 1
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// end ;
 801: GO 765
 803: POP
 804: POP
// for i := 1 to 3 do
 805: LD_ADDR_VAR 0 4
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_INT 3
 817: PUSH
 818: FOR_TO
 819: IFFALSE 856
// begin hc_class := 18 ;
 821: LD_ADDR_OWVAR 28
 825: PUSH
 826: LD_INT 18
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 837: CALL_OW 44
 841: PPUSH
 842: LD_VAR 0 1
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// end ;
 854: GO 818
 856: POP
 857: POP
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 4
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 909
// begin hc_class := 13 ;
 874: LD_ADDR_OWVAR 28
 878: PUSH
 879: LD_INT 13
 881: ST_TO_ADDR
// hc_gallery :=  ;
 882: LD_ADDR_OWVAR 33
 886: PUSH
 887: LD_STRING 
 889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 890: CALL_OW 44
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// end ;
 907: GO 871
 909: POP
 910: POP
// for i := 1 to 4 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_INT 1
 919: DEC
 920: ST_TO_ADDR
 921: LD_INT 4
 923: PUSH
 924: FOR_TO
 925: IFFALSE 962
// begin hc_class := class_frog ;
 927: LD_ADDR_OWVAR 28
 931: PUSH
 932: LD_INT 19
 934: ST_TO_ADDR
// hc_gallery :=  ;
 935: LD_ADDR_OWVAR 33
 939: PUSH
 940: LD_STRING 
 942: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 943: CALL_OW 44
 947: PPUSH
 948: LD_VAR 0 2
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 924
 962: POP
 963: POP
// end ;
 964: LD_VAR 0 3
 968: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
 973: PPUSH
// if not observer or not unit then
 974: LD_VAR 0 1
 978: NOT
 979: PUSH
 980: LD_VAR 0 2
 984: NOT
 985: OR
 986: IFFALSE 990
// exit ;
 988: GO 1038
// if not See ( GetSide ( observer ) , unit ) then
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 255
 999: PPUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL_OW 292
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1038
// result := GetDistUnits ( observer , unit ) < 12 ;
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: LD_VAR 0 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL_OW 296
1033: PUSH
1034: LD_INT 12
1036: LESS
1037: ST_TO_ADDR
// end ;
1038: LD_VAR 0 3
1042: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1043: LD_INT 0
1045: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 2
1059: PUSH
1060: LD_INT 2
1062: ARRAY
1063: PPUSH
1064: CALL_OW 488
1068: PUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 2
1085: ARRAY
1086: PPUSH
1087: CALL_OW 428
1091: PUSH
1092: LD_INT 0
1094: EQUAL
1095: AND
1096: IFFALSE 1130
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PPUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_INT 2
1119: ARRAY
1120: PPUSH
1121: LD_VAR 0 3
1125: PPUSH
1126: CALL_OW 48
// end ;
1130: LD_VAR 0 4
1134: RET
// export function ReverseArray ( array ) ; var i ; begin
1135: LD_INT 0
1137: PPUSH
1138: PPUSH
// if not array then
1139: LD_VAR 0 1
1143: NOT
1144: IFFALSE 1148
// exit ;
1146: GO 1206
// result := [ ] ;
1148: LD_ADDR_VAR 0 2
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to array do
1155: LD_ADDR_VAR 0 3
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_VAR 0 1
1169: PUSH
1170: FOR_TO
1171: IFFALSE 1204
// result := Insert ( result , 1 , array [ i ] ) ;
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: LD_VAR 0 2
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_VAR 0 3
1195: ARRAY
1196: PPUSH
1197: CALL_OW 2
1201: ST_TO_ADDR
1202: GO 1170
1204: POP
1205: POP
// end ;
1206: LD_VAR 0 2
1210: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1211: LD_INT 0
1213: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1214: LD_VAR 0 1
1218: PPUSH
1219: LD_VAR 0 2
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1238: LD_VAR 0 1
1242: PPUSH
1243: LD_VAR 0 2
1247: PPUSH
1248: LD_VAR 0 3
1252: PPUSH
1253: CALL_OW 331
// end ;
1257: LD_VAR 0 5
1261: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1262: LD_INT 0
1264: PPUSH
// if not units then
1265: LD_VAR 0 1
1269: NOT
1270: IFFALSE 1274
// exit ;
1272: GO 1357
// result := true ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1282: LD_VAR 0 1
1286: PPUSH
1287: LD_INT 26
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 72
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 88
1315: NOT
1316: IFFALSE 1357
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: LD_VAR 0 1
1327: PPUSH
1328: LD_INT 26
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: CALL_OW 72
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: LD_VAR 0 3
1351: PPUSH
1352: CALL_OW 88
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 4
1361: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
// if not group then
1366: LD_VAR 0 2
1370: NOT
1371: IFFALSE 1375
// exit ;
1373: GO 1420
// for i in group do
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_VAR 0 2
1384: PUSH
1385: FOR_IN
1386: IFFALSE 1418
// if See ( side , i ) then
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_VAR 0 4
1397: PPUSH
1398: CALL_OW 292
1402: IFFALSE 1416
// begin result := true ;
1404: LD_ADDR_VAR 0 3
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// exit ;
1412: POP
1413: POP
1414: GO 1420
// end ;
1416: GO 1385
1418: POP
1419: POP
// end ; end_of_file
1420: LD_VAR 0 3
1424: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1425: LD_INT 0
1427: PPUSH
1428: PPUSH
// uc_side := 2 ;
1429: LD_ADDR_OWVAR 20
1433: PUSH
1434: LD_INT 2
1436: ST_TO_ADDR
// uc_nation := 2 ;
1437: LD_ADDR_OWVAR 21
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1445: LD_ADDR_EXP 21
1449: PUSH
1450: LD_STRING Heike
1452: PPUSH
1453: LD_EXP 1
1457: NOT
1458: PPUSH
1459: LD_EXP 2
1463: PPUSH
1464: CALL 28310 0 3
1468: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1469: LD_ADDR_EXP 24
1473: PUSH
1474: LD_STRING Ibrahim
1476: PPUSH
1477: LD_EXP 1
1481: NOT
1482: PPUSH
1483: LD_EXP 2
1487: PPUSH
1488: CALL 28310 0 3
1492: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1493: LD_ADDR_EXP 22
1497: PUSH
1498: LD_STRING Givi
1500: PPUSH
1501: LD_EXP 1
1505: NOT
1506: PPUSH
1507: LD_EXP 2
1511: PPUSH
1512: CALL 28310 0 3
1516: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1517: LD_ADDR_EXP 25
1521: PUSH
1522: LD_STRING Kamil
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 2
1535: PPUSH
1536: CALL 28310 0 3
1540: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1541: LD_ADDR_EXP 26
1545: PUSH
1546: LD_STRING Kaia
1548: PPUSH
1549: LD_EXP 1
1553: NOT
1554: PPUSH
1555: LD_EXP 2
1559: PPUSH
1560: CALL 28310 0 3
1564: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1565: LD_ADDR_EXP 27
1569: PUSH
1570: LD_STRING Sophia
1572: PPUSH
1573: LD_EXP 1
1577: NOT
1578: PPUSH
1579: LD_EXP 2
1583: PPUSH
1584: CALL 28310 0 3
1588: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1589: LD_ADDR_EXP 28
1593: PUSH
1594: LD_STRING Markov
1596: PPUSH
1597: LD_EXP 1
1601: NOT
1602: PPUSH
1603: LD_EXP 2
1607: PPUSH
1608: CALL 28310 0 3
1612: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1613: LD_ADDR_EXP 33
1617: PUSH
1618: LD_STRING Aviradze
1620: PPUSH
1621: LD_EXP 1
1625: NOT
1626: PPUSH
1627: LD_EXP 2
1631: PPUSH
1632: CALL 28310 0 3
1636: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1637: LD_ADDR_EXP 32
1641: PUSH
1642: LD_STRING Kurt
1644: PPUSH
1645: LD_EXP 1
1649: NOT
1650: PPUSH
1651: LD_EXP 2
1655: PPUSH
1656: CALL 28310 0 3
1660: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1661: LD_ADDR_EXP 23
1665: PUSH
1666: LD_STRING Mike
1668: PPUSH
1669: LD_EXP 1
1673: NOT
1674: PPUSH
1675: LD_EXP 2
1679: PPUSH
1680: CALL 28310 0 3
1684: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1685: LD_ADDR_EXP 30
1689: PUSH
1690: LD_STRING Olaf
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: LD_STRING 
1698: PPUSH
1699: CALL 28310 0 3
1703: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1704: LD_ADDR_EXP 34
1708: PUSH
1709: LD_STRING 04_2_others
1711: PPUSH
1712: CALL_OW 31
1716: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1717: LD_ADDR_EXP 36
1721: PUSH
1722: LD_STRING 04_2_apes
1724: PPUSH
1725: CALL_OW 31
1729: ST_TO_ADDR
// if hasFlamethrower then
1730: LD_EXP 3
1734: IFFALSE 1965
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1736: LD_INT 70
1738: PPUSH
1739: LD_INT 2
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1749: LD_ADDR_EXP 35
1753: PUSH
1754: LD_INT 13
1756: PUSH
1757: LD_INT 1
1759: PUSH
1760: LD_INT 1
1762: PUSH
1763: LD_INT 27
1765: PUSH
1766: LD_INT 2
1768: PUSH
1769: LD_INT 1000
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: LD_INT 0
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 13
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_INT 1
1799: PUSH
1800: LD_INT 25
1802: PUSH
1803: LD_INT 2
1805: PUSH
1806: LD_INT 1000
1808: PUSH
1809: LD_INT 0
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 13
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: LD_INT 1
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 2
1842: PUSH
1843: LD_INT 1000
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 13
1867: PUSH
1868: LD_INT 1
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: LD_INT 27
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 1000
1882: PUSH
1883: LD_INT 0
1885: PUSH
1886: LD_INT 0
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 13
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 32
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 1000
1919: PUSH
1920: LD_INT 0
1922: PUSH
1923: LD_INT 60
1925: PUSH
1926: LD_INT 40
1928: PUSH
1929: LD_INT 20
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_OWVAR 67
1941: ARRAY
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// end else
1963: GO 2179
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1965: LD_ADDR_EXP 35
1969: PUSH
1970: LD_INT 13
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 25
1981: PUSH
1982: LD_INT 2
1984: PUSH
1985: LD_INT 1000
1987: PUSH
1988: LD_INT 0
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 13
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: LD_INT 27
2018: PUSH
2019: LD_INT 2
2021: PUSH
2022: LD_INT 1000
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: LD_INT 0
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 13
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: LD_INT 1
2052: PUSH
2053: LD_INT 24
2055: PUSH
2056: LD_INT 2
2058: PUSH
2059: LD_INT 1000
2061: PUSH
2062: LD_INT 0
2064: PUSH
2065: LD_INT 0
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 13
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 27
2092: PUSH
2093: LD_INT 2
2095: PUSH
2096: LD_INT 1000
2098: PUSH
2099: LD_INT 0
2101: PUSH
2102: LD_INT 0
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 13
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: LD_INT 32
2129: PUSH
2130: LD_INT 2
2132: PUSH
2133: LD_INT 1000
2135: PUSH
2136: LD_INT 0
2138: PUSH
2139: LD_INT 50
2141: PUSH
2142: LD_INT 30
2144: PUSH
2145: LD_INT 20
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_OWVAR 67
2157: ARRAY
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: ST_TO_ADDR
// end ; uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2187: LD_ADDR_EXP 29
2191: PUSH
2192: LD_STRING Abdul
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: LD_STRING 
2200: PPUSH
2201: CALL 28310 0 3
2205: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2206: LD_ADDR_EXP 31
2210: PUSH
2211: LD_STRING Omar
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: LD_STRING 
2219: PPUSH
2220: CALL 28310 0 3
2224: ST_TO_ADDR
// end ;
2225: LD_VAR 0 1
2229: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
// pfx := 04_1_ ;
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: LD_STRING 04_1_
2244: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2245: LD_INT 35
2247: PPUSH
2248: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2252: LD_INT 3
2254: PPUSH
2255: LD_INT 2
2257: PPUSH
2258: CALL_OW 428
2262: NOT
2263: IFFALSE 2245
// tmp := [ ] ;
2265: LD_ADDR_VAR 0 4
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// uc_side := 5 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 5
2279: ST_TO_ADDR
// uc_nation := 2 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 2
2287: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2288: LD_ADDR_EXP 33
2292: PUSH
2293: LD_STRING Aviradze_L
2295: PPUSH
2296: LD_EXP 1
2300: NOT
2301: PPUSH
2302: LD_VAR 0 2
2306: PPUSH
2307: CALL 28310 0 3
2311: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2312: LD_EXP 33
2316: PPUSH
2317: LD_INT 2
2319: PPUSH
2320: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2324: LD_EXP 33
2328: PPUSH
2329: LD_INT 14
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2339: LD_EXP 33
2343: PPUSH
2344: LD_INT 8
2346: PPUSH
2347: LD_INT 6
2349: PPUSH
2350: CALL_OW 111
// AddComHold ( Aviradze ) ;
2354: LD_EXP 33
2358: PPUSH
2359: CALL_OW 200
// tmp := [ Aviradze ] ;
2363: LD_ADDR_VAR 0 4
2367: PUSH
2368: LD_EXP 33
2372: PUSH
2373: EMPTY
2374: LIST
2375: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2376: LD_INT 70
2378: PPUSH
2379: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2383: LD_STRING Ibrahim_L
2385: PPUSH
2386: LD_EXP 1
2390: NOT
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL 28310 0 3
2401: IFFALSE 2501
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2403: LD_ADDR_EXP 24
2407: PUSH
2408: LD_STRING Ibrahim_L
2410: PPUSH
2411: LD_EXP 1
2415: NOT
2416: PPUSH
2417: LD_VAR 0 2
2421: PPUSH
2422: CALL 28310 0 3
2426: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2427: LD_EXP 24
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2439: LD_EXP 24
2443: PPUSH
2444: LD_INT 14
2446: PPUSH
2447: LD_INT 0
2449: PPUSH
2450: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2454: LD_EXP 24
2458: PPUSH
2459: LD_INT 8
2461: PPUSH
2462: LD_INT 7
2464: PPUSH
2465: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2469: LD_EXP 24
2473: PPUSH
2474: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_EXP 24
2492: ADD
2493: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2494: LD_INT 70
2496: PPUSH
2497: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2501: LD_STRING Kaia_L
2503: PPUSH
2504: LD_EXP 1
2508: NOT
2509: PPUSH
2510: LD_VAR 0 2
2514: PPUSH
2515: CALL 28310 0 3
2519: IFFALSE 2619
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2521: LD_ADDR_EXP 26
2525: PUSH
2526: LD_STRING Kaia_L
2528: PPUSH
2529: LD_EXP 1
2533: NOT
2534: PPUSH
2535: LD_VAR 0 2
2539: PPUSH
2540: CALL 28310 0 3
2544: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2545: LD_EXP 26
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2557: LD_EXP 26
2561: PPUSH
2562: LD_INT 14
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2572: LD_EXP 26
2576: PPUSH
2577: LD_INT 8
2579: PPUSH
2580: LD_INT 7
2582: PPUSH
2583: CALL_OW 111
// AddComHold ( Kaia ) ;
2587: LD_EXP 26
2591: PPUSH
2592: CALL_OW 200
// tmp := tmp ^ Kaia ;
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_EXP 26
2610: ADD
2611: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2612: LD_INT 70
2614: PPUSH
2615: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2619: LD_STRING Kamil_L
2621: PPUSH
2622: LD_EXP 1
2626: NOT
2627: PPUSH
2628: LD_VAR 0 2
2632: PPUSH
2633: CALL 28310 0 3
2637: IFFALSE 2737
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2639: LD_ADDR_EXP 25
2643: PUSH
2644: LD_STRING Kamil_L
2646: PPUSH
2647: LD_EXP 1
2651: NOT
2652: PPUSH
2653: LD_VAR 0 2
2657: PPUSH
2658: CALL 28310 0 3
2662: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2663: LD_EXP 25
2667: PPUSH
2668: LD_INT 2
2670: PPUSH
2671: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2675: LD_EXP 25
2679: PPUSH
2680: LD_INT 14
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2690: LD_EXP 25
2694: PPUSH
2695: LD_INT 8
2697: PPUSH
2698: LD_INT 7
2700: PPUSH
2701: CALL_OW 111
// AddComHold ( Kamil ) ;
2705: LD_EXP 25
2709: PPUSH
2710: CALL_OW 200
// tmp := tmp ^ Kamil ;
2714: LD_ADDR_VAR 0 4
2718: PUSH
2719: LD_VAR 0 4
2723: PUSH
2724: LD_EXP 25
2728: ADD
2729: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2730: LD_INT 70
2732: PPUSH
2733: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2737: LD_STRING Sophia_L
2739: PPUSH
2740: LD_EXP 1
2744: NOT
2745: PPUSH
2746: LD_VAR 0 2
2750: PPUSH
2751: CALL 28310 0 3
2755: IFFALSE 2855
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2757: LD_ADDR_EXP 27
2761: PUSH
2762: LD_STRING Sophia_L
2764: PPUSH
2765: LD_EXP 1
2769: NOT
2770: PPUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL 28310 0 3
2780: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2781: LD_EXP 27
2785: PPUSH
2786: LD_INT 2
2788: PPUSH
2789: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2793: LD_EXP 27
2797: PPUSH
2798: LD_INT 14
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2808: LD_EXP 27
2812: PPUSH
2813: LD_INT 9
2815: PPUSH
2816: LD_INT 6
2818: PPUSH
2819: CALL_OW 111
// AddComHold ( Sophia ) ;
2823: LD_EXP 27
2827: PPUSH
2828: CALL_OW 200
// tmp := tmp ^ Sophia ;
2832: LD_ADDR_VAR 0 4
2836: PUSH
2837: LD_VAR 0 4
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2848: LD_INT 70
2850: PPUSH
2851: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2855: LD_ADDR_VAR 0 5
2859: PUSH
2860: LD_STRING 04_1_others_L
2862: PPUSH
2863: CALL_OW 31
2867: ST_TO_ADDR
// if tmp2 then
2868: LD_VAR 0 5
2872: IFFALSE 2969
// for i in tmp2 do
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_VAR 0 5
2883: PUSH
2884: FOR_IN
2885: IFFALSE 2967
// begin SetDir ( i , 2 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 2
2894: PPUSH
2895: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2899: LD_VAR 0 3
2903: PPUSH
2904: LD_INT 14
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2914: LD_ADDR_EXP 34
2918: PUSH
2919: LD_EXP 34
2923: PPUSH
2924: LD_EXP 34
2928: PUSH
2929: LD_INT 1
2931: PLUS
2932: PPUSH
2933: LD_VAR 0 3
2937: PPUSH
2938: CALL_OW 1
2942: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 17
2950: PPUSH
2951: LD_INT 14
2953: PPUSH
2954: CALL_OW 111
// wait ( 0 0$2 ) ;
2958: LD_INT 70
2960: PPUSH
2961: CALL_OW 67
// end ;
2965: GO 2884
2967: POP
2968: POP
// for i in tmp union tmp2 do
2969: LD_ADDR_VAR 0 3
2973: PUSH
2974: LD_VAR 0 4
2978: PUSH
2979: LD_VAR 0 5
2983: UNION
2984: PUSH
2985: FOR_IN
2986: IFFALSE 3016
// begin SetSide ( i , 2 ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 2
2995: PPUSH
2996: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_EXP 21
3009: PPUSH
3010: CALL_OW 112
// end ;
3014: GO 2985
3016: POP
3017: POP
// end ; end_of_file
3018: LD_VAR 0 1
3022: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3023: LD_INT 0
3025: PPUSH
3026: PPUSH
3027: PPUSH
// uc_side := 3 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// uc_nation := 3 ;
3036: LD_ADDR_OWVAR 21
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3044: LD_ADDR_EXP 37
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3051: LD_ADDR_EXP 38
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3058: LD_ADDR_EXP 41
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// for i := 1 to 2 do
3065: LD_ADDR_VAR 0 2
3069: PUSH
3070: DOUBLE
3071: LD_INT 1
3073: DEC
3074: ST_TO_ADDR
3075: LD_INT 2
3077: PUSH
3078: FOR_TO
3079: IFFALSE 3214
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3081: LD_INT 0
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 3
3089: PUSH
3090: LD_INT 4
3092: PUSH
3093: LD_INT 5
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_OWVAR 67
3105: ARRAY
3106: PPUSH
3107: CALL_OW 380
// un := CreateHuman ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: CALL_OW 44
3120: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3121: LD_ADDR_EXP 37
3125: PUSH
3126: LD_EXP 37
3130: PPUSH
3131: LD_EXP 37
3135: PUSH
3136: LD_INT 1
3138: PLUS
3139: PPUSH
3140: LD_VAR 0 3
3144: PPUSH
3145: CALL_OW 1
3149: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3150: LD_VAR 0 3
3154: PPUSH
3155: LD_INT 100
3157: PPUSH
3158: LD_INT 63
3160: PPUSH
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 0
3166: PPUSH
3167: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3171: LD_VAR 0 3
3175: PPUSH
3176: LD_INT 97
3178: PPUSH
3179: LD_INT 64
3181: PPUSH
3182: CALL_OW 428
3186: PUSH
3187: LD_INT 98
3189: PPUSH
3190: LD_INT 58
3192: PPUSH
3193: CALL_OW 428
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_VAR 0 2
3206: ARRAY
3207: PPUSH
3208: CALL_OW 120
// end ;
3212: GO 3078
3214: POP
3215: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3216: LD_INT 51
3218: PPUSH
3219: LD_INT 77
3221: PPUSH
3222: CALL_OW 428
3226: PPUSH
3227: CALL_OW 274
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 120
3237: PPUSH
3238: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3242: LD_INT 10
3244: PPUSH
3245: CALL_OW 274
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: LD_INT 300
3255: PPUSH
3256: CALL_OW 277
// for i := 1 to 2 do
3260: LD_ADDR_VAR 0 2
3264: PUSH
3265: DOUBLE
3266: LD_INT 1
3268: DEC
3269: ST_TO_ADDR
3270: LD_INT 2
3272: PUSH
3273: FOR_TO
3274: IFFALSE 3388
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3276: LD_INT 0
3278: PPUSH
3279: LD_INT 1
3281: PPUSH
3282: LD_INT 3
3284: PUSH
3285: LD_INT 4
3287: PUSH
3288: LD_INT 5
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: PUSH
3296: LD_OWVAR 67
3300: ARRAY
3301: PPUSH
3302: CALL_OW 380
// un := CreateHuman ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: CALL_OW 44
3315: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3316: LD_ADDR_EXP 38
3320: PUSH
3321: LD_EXP 38
3325: PPUSH
3326: LD_EXP 38
3330: PUSH
3331: LD_INT 1
3333: PLUS
3334: PPUSH
3335: LD_VAR 0 3
3339: PPUSH
3340: CALL_OW 1
3344: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3345: LD_VAR 0 3
3349: PPUSH
3350: LD_INT 198
3352: PPUSH
3353: LD_INT 106
3355: PPUSH
3356: CALL_OW 428
3360: PUSH
3361: LD_INT 205
3363: PPUSH
3364: LD_INT 114
3366: PPUSH
3367: CALL_OW 428
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: PPUSH
3382: CALL_OW 52
// end ;
3386: GO 3273
3388: POP
3389: POP
// for i := 1 to 2 do
3390: LD_ADDR_VAR 0 2
3394: PUSH
3395: DOUBLE
3396: LD_INT 1
3398: DEC
3399: ST_TO_ADDR
3400: LD_INT 2
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3481
// begin PrepareHuman ( false , 2 , 3 ) ;
3406: LD_INT 0
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: LD_INT 3
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3429: LD_ADDR_EXP 38
3433: PUSH
3434: LD_EXP 38
3438: PPUSH
3439: LD_EXP 38
3443: PUSH
3444: LD_INT 1
3446: PLUS
3447: PPUSH
3448: LD_VAR 0 3
3452: PPUSH
3453: CALL_OW 1
3457: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_INT 204
3465: PPUSH
3466: LD_INT 108
3468: PPUSH
3469: LD_INT 2
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: CALL_OW 50
// end ;
3479: GO 3403
3481: POP
3482: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3483: LD_ADDR_VAR 0 2
3487: PUSH
3488: DOUBLE
3489: LD_INT 1
3491: DEC
3492: ST_TO_ADDR
3493: LD_INT 4
3495: PUSH
3496: LD_INT 5
3498: PUSH
3499: LD_INT 6
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_OWVAR 67
3511: ARRAY
3512: PUSH
3513: FOR_TO
3514: IFFALSE 3635
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3516: LD_INT 0
3518: PPUSH
3519: LD_INT 1
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: LD_INT 2
3527: PUSH
3528: LD_INT 4
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_INT 5
3546: PPUSH
3547: CALL_OW 12
3551: ARRAY
3552: PPUSH
3553: LD_INT 3
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: LD_INT 5
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_OWVAR 67
3571: ARRAY
3572: PPUSH
3573: CALL_OW 380
// un := CreateHuman ;
3577: LD_ADDR_VAR 0 3
3581: PUSH
3582: CALL_OW 44
3586: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3587: LD_VAR 0 3
3591: PPUSH
3592: LD_INT 11
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL 63094 0 3
3602: IFFALSE 3633
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3604: LD_ADDR_EXP 39
3608: PUSH
3609: LD_EXP 39
3613: PPUSH
3614: LD_EXP 39
3618: PUSH
3619: LD_INT 1
3621: PLUS
3622: PPUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: CALL_OW 1
3632: ST_TO_ADDR
// end ;
3633: GO 3513
3635: POP
3636: POP
// for i := 1 to 3 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 3
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3741
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3653: LD_INT 0
3655: PPUSH
3656: LD_INT 1
3658: PPUSH
3659: LD_INT 3
3661: PUSH
3662: LD_INT 4
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_OWVAR 67
3677: ARRAY
3678: PPUSH
3679: CALL_OW 380
// un := CreateHuman ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 44
3692: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_INT 11
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL 63094 0 3
3708: IFFALSE 3739
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3710: LD_ADDR_EXP 39
3714: PUSH
3715: LD_EXP 39
3719: PPUSH
3720: LD_EXP 39
3724: PUSH
3725: LD_INT 1
3727: PLUS
3728: PPUSH
3729: LD_VAR 0 3
3733: PPUSH
3734: CALL_OW 1
3738: ST_TO_ADDR
// end ;
3739: GO 3650
3741: POP
3742: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 5
3755: PUSH
3756: LD_INT 6
3758: PUSH
3759: LD_INT 7
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_OWVAR 67
3771: ARRAY
3772: PUSH
3773: FOR_TO
3774: IFFALSE 3895
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 4
3790: PUSH
3791: LD_INT 1
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 1
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL_OW 12
3811: ARRAY
3812: PPUSH
3813: LD_INT 3
3815: PUSH
3816: LD_INT 4
3818: PUSH
3819: LD_INT 5
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PUSH
3827: LD_OWVAR 67
3831: ARRAY
3832: PPUSH
3833: CALL_OW 380
// un := CreateHuman ;
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3847: LD_VAR 0 3
3851: PPUSH
3852: LD_INT 15
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: CALL 63094 0 3
3862: IFFALSE 3893
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3864: LD_ADDR_EXP 40
3868: PUSH
3869: LD_EXP 40
3873: PPUSH
3874: LD_EXP 40
3878: PUSH
3879: LD_INT 1
3881: PLUS
3882: PPUSH
3883: LD_VAR 0 3
3887: PPUSH
3888: CALL_OW 1
3892: ST_TO_ADDR
// end ;
3893: GO 3773
3895: POP
3896: POP
// end ;
3897: LD_VAR 0 1
3901: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3902: LD_INT 0
3904: PPUSH
3905: PPUSH
3906: PPUSH
// uc_side := 3 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 3
3914: ST_TO_ADDR
// uc_nation := 3 ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// for i := 1 to 6 do
3923: LD_ADDR_VAR 0 2
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_INT 6
3935: PUSH
3936: FOR_TO
3937: IFFALSE 4016
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3939: LD_INT 0
3941: PPUSH
3942: LD_INT 1
3944: PUSH
3945: LD_INT 4
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 2
3957: PPUSH
3958: CALL_OW 12
3962: ARRAY
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 380
// un := CreateHuman ;
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 54
3988: PPUSH
3989: LD_INT 88
3991: PPUSH
3992: LD_INT 12
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL_OW 50
// SetLives ( un , 1 ) ;
4002: LD_VAR 0 3
4006: PPUSH
4007: LD_INT 1
4009: PPUSH
4010: CALL_OW 234
// end ;
4014: GO 3936
4016: POP
4017: POP
// uc_side := 3 ;
4018: LD_ADDR_OWVAR 20
4022: PUSH
4023: LD_INT 3
4025: ST_TO_ADDR
// uc_nation := 0 ;
4026: LD_ADDR_OWVAR 21
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4034: LD_ADDR_EXP 42
4038: PUSH
4039: EMPTY
4040: ST_TO_ADDR
// apeEngGroup := [ ] ;
4041: LD_ADDR_EXP 43
4045: PUSH
4046: EMPTY
4047: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4048: LD_ADDR_VAR 0 2
4052: PUSH
4053: DOUBLE
4054: LD_INT 1
4056: DEC
4057: ST_TO_ADDR
4058: LD_INT 4
4060: PUSH
4061: LD_INT 5
4063: PUSH
4064: LD_INT 6
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_OWVAR 67
4076: ARRAY
4077: PUSH
4078: FOR_TO
4079: IFFALSE 4193
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4081: LD_INT 0
4083: PPUSH
4084: LD_INT 15
4086: PPUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 4
4092: PUSH
4093: LD_INT 5
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PUSH
4101: LD_OWVAR 67
4105: ARRAY
4106: PPUSH
4107: CALL_OW 380
// un := CreateHuman ;
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: CALL_OW 44
4120: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4121: LD_ADDR_EXP 42
4125: PUSH
4126: LD_EXP 42
4130: PPUSH
4131: LD_EXP 42
4135: PUSH
4136: LD_INT 1
4138: PLUS
4139: PPUSH
4140: LD_VAR 0 3
4144: PPUSH
4145: CALL_OW 1
4149: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: LD_INT 5
4160: PPUSH
4161: CALL_OW 12
4165: PPUSH
4166: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4170: LD_VAR 0 3
4174: PPUSH
4175: LD_INT 56
4177: PPUSH
4178: LD_INT 82
4180: PPUSH
4181: LD_INT 6
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: CALL_OW 50
// end ;
4191: GO 4078
4193: POP
4194: POP
// for i := 1 to 2 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 2
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4285
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4211: LD_INT 0
4213: PPUSH
4214: LD_INT 16
4216: PPUSH
4217: LD_INT 4
4219: PPUSH
4220: CALL_OW 380
// un := CreateHuman ;
4224: LD_ADDR_VAR 0 3
4228: PUSH
4229: CALL_OW 44
4233: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4234: LD_ADDR_EXP 43
4238: PUSH
4239: LD_EXP 43
4243: PPUSH
4244: LD_EXP 43
4248: PUSH
4249: LD_INT 1
4251: PLUS
4252: PPUSH
4253: LD_VAR 0 3
4257: PPUSH
4258: CALL_OW 1
4262: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4263: LD_VAR 0 3
4267: PPUSH
4268: LD_INT 51
4270: PPUSH
4271: LD_INT 77
4273: PPUSH
4274: CALL_OW 428
4278: PPUSH
4279: CALL_OW 52
// end ;
4283: GO 4208
4285: POP
4286: POP
// end ;
4287: LD_VAR 0 1
4291: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4292: LD_EXP 42
4296: PPUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 24
4302: PUSH
4303: LD_INT 600
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: LD_INT 54
4319: PUSH
4320: EMPTY
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PPUSH
4331: CALL_OW 72
4335: PUSH
4336: LD_INT 66
4338: PPUSH
4339: LD_INT 89
4341: PPUSH
4342: CALL_OW 428
4346: PPUSH
4347: CALL_OW 302
4351: AND
4352: IFFALSE 4437
4354: GO 4356
4356: DISABLE
4357: LD_INT 0
4359: PPUSH
// begin enable ;
4360: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: LD_EXP 42
4370: PPUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 24
4376: PUSH
4377: LD_INT 600
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 3
4390: PUSH
4391: LD_INT 54
4393: PUSH
4394: EMPTY
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PPUSH
4405: CALL_OW 72
4409: PUSH
4410: FOR_IN
4411: IFFALSE 4435
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 66
4420: PPUSH
4421: LD_INT 89
4423: PPUSH
4424: CALL_OW 428
4428: PPUSH
4429: CALL_OW 120
4433: GO 4410
4435: POP
4436: POP
// end ;
4437: PPOPN 1
4439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4440: LD_INT 22
4442: PUSH
4443: LD_INT 2
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 92
4452: PUSH
4453: LD_INT 54
4455: PUSH
4456: LD_INT 77
4458: PUSH
4459: LD_INT 8
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PPUSH
4472: CALL_OW 69
4476: IFFALSE 4540
4478: GO 4480
4480: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4481: LD_EXP 43
4485: PPUSH
4486: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4490: LD_EXP 43
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 2
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 92
4507: PUSH
4508: LD_INT 54
4510: PUSH
4511: LD_INT 77
4513: PUSH
4514: LD_INT 8
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PPUSH
4527: CALL_OW 69
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 175
// end ;
4540: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4552: LD_ADDR_VAR 0 3
4556: PUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 3
4562: PPUSH
4563: CALL_OW 12
4567: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4568: LD_ADDR_VAR 0 5
4572: PUSH
4573: LD_INT 16
4575: PUSH
4576: LD_INT 17
4578: PUSH
4579: LD_INT 19
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PUSH
4587: LD_VAR 0 3
4591: ARRAY
4592: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4593: LD_ADDR_VAR 0 7
4597: PUSH
4598: LD_INT 159
4600: PUSH
4601: LD_INT 25
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 137
4610: PUSH
4611: LD_INT 37
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 123
4620: PUSH
4621: LD_INT 55
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 115
4630: PUSH
4631: LD_INT 71
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 106
4640: PUSH
4641: LD_INT 88
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 97
4650: PUSH
4651: LD_INT 114
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 75
4660: PUSH
4661: LD_INT 146
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 206
4679: PUSH
4680: LD_INT 135
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 184
4689: PUSH
4690: LD_INT 111
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 154
4699: PUSH
4700: LD_INT 97
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 122
4709: PUSH
4710: LD_INT 80
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 109
4719: PUSH
4720: LD_INT 78
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 97
4729: PUSH
4730: LD_INT 113
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 75
4739: PUSH
4740: LD_INT 147
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 185
4758: PUSH
4759: LD_INT 72
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 171
4768: PUSH
4769: LD_INT 83
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 161
4778: PUSH
4779: LD_INT 99
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 125
4788: PUSH
4789: LD_INT 82
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 105
4798: PUSH
4799: LD_INT 90
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 96
4808: PUSH
4809: LD_INT 116
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 75
4818: PUSH
4819: LD_INT 147
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_VAR 0 3
4844: ARRAY
4845: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4846: LD_ADDR_VAR 0 4
4850: PUSH
4851: LD_INT 4
4853: PUSH
4854: LD_INT 5
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: LD_VAR 0 3
4869: ARRAY
4870: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4871: LD_ADDR_VAR 0 6
4875: PUSH
4876: LD_INT 22
4878: PUSH
4879: LD_INT 20
4881: PUSH
4882: LD_INT 21
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: LD_VAR 0 3
4894: ARRAY
4895: ST_TO_ADDR
// for i := 1 to 2 do
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: DOUBLE
4902: LD_INT 1
4904: DEC
4905: ST_TO_ADDR
4906: LD_INT 2
4908: PUSH
4909: FOR_TO
4910: IFFALSE 4928
// EraseResourceArea ( i , outerSpawnArea ) ;
4912: LD_VAR 0 2
4916: PPUSH
4917: LD_VAR 0 6
4921: PPUSH
4922: CALL_OW 286
4926: GO 4909
4928: POP
4929: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4930: LD_VAR 0 6
4934: PPUSH
4935: LD_INT 2
4937: PUSH
4938: LD_INT 21
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 21
4950: PUSH
4951: LD_INT 2
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: IFFALSE 5193
// repeat wait ( 0 0$1 ) ;
4980: LD_INT 35
4982: PPUSH
4983: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4987: LD_VAR 0 6
4991: PPUSH
4992: LD_INT 2
4994: PUSH
4995: LD_INT 21
4997: PUSH
4998: LD_INT 2
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 21
5007: PUSH
5008: LD_INT 3
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: PPUSH
5020: CALL_OW 70
5024: IFFALSE 5085
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5026: LD_ADDR_VAR 0 2
5030: PUSH
5031: LD_VAR 0 6
5035: PPUSH
5036: LD_INT 2
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 2
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 21
5051: PUSH
5052: LD_INT 3
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 70
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5083
// RemoveUnit ( i ) ;
5072: LD_VAR 0 2
5076: PPUSH
5077: CALL_OW 64
5081: GO 5069
5083: POP
5084: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5085: LD_VAR 0 6
5089: PPUSH
5090: LD_INT 21
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PPUSH
5100: CALL_OW 70
5104: IFFALSE 5153
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5106: LD_ADDR_VAR 0 2
5110: PUSH
5111: LD_VAR 0 6
5115: PPUSH
5116: LD_INT 21
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PPUSH
5126: CALL_OW 70
5130: PUSH
5131: FOR_IN
5132: IFFALSE 5151
// ComMoveXY ( i , 113 , 53 ) ;
5134: LD_VAR 0 2
5138: PPUSH
5139: LD_INT 113
5141: PPUSH
5142: LD_INT 53
5144: PPUSH
5145: CALL_OW 111
5149: GO 5131
5151: POP
5152: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5153: LD_VAR 0 6
5157: PPUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 21
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 70
5190: NOT
5191: IFFALSE 4980
// case convoyCounter of 1 .. 3 :
5193: LD_EXP 16
5197: PUSH
5198: LD_INT 1
5200: DOUBLE
5201: GREATEREQUAL
5202: IFFALSE 5210
5204: LD_INT 3
5206: DOUBLE
5207: LESSEQUAL
5208: IFTRUE 5212
5210: GO 5807
5212: POP
// begin uc_side := 3 ;
5213: LD_ADDR_OWVAR 20
5217: PUSH
5218: LD_INT 3
5220: ST_TO_ADDR
// uc_nation := 3 ;
5221: LD_ADDR_OWVAR 21
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5229: LD_ADDR_VAR 0 2
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_INT 5
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: LD_INT 7
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PUSH
5253: LD_OWVAR 67
5257: ARRAY
5258: PUSH
5259: LD_EXP 16
5263: MINUS
5264: PUSH
5265: FOR_TO
5266: IFFALSE 5453
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5268: LD_INT 0
5270: PPUSH
5271: LD_INT 1
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: LD_INT 1
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 1
5291: PPUSH
5292: LD_INT 4
5294: PPUSH
5295: CALL_OW 12
5299: ARRAY
5300: PPUSH
5301: LD_INT 4
5303: PUSH
5304: LD_INT 5
5306: PUSH
5307: LD_INT 6
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: CALL_OW 380
// un := CreateHuman ;
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: CALL_OW 44
5334: ST_TO_ADDR
// SetDir ( un , dir ) ;
5335: LD_VAR 0 8
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5349: LD_VAR 0 8
5353: PPUSH
5354: LD_VAR 0 5
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL 63094 0 3
5366: IFFALSE 5451
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5368: LD_ADDR_EXP 41
5372: PUSH
5373: LD_EXP 41
5377: PPUSH
5378: LD_EXP 41
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 8
5391: PPUSH
5392: CALL_OW 1
5396: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5397: LD_VAR 0 8
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5409: LD_VAR 0 8
5413: PPUSH
5414: LD_VAR 0 7
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: PPUSH
5427: LD_VAR 0 7
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PUSH
5436: LD_INT 2
5438: ARRAY
5439: PPUSH
5440: CALL_OW 111
// wait ( 0 0$2 ) ;
5444: LD_INT 70
5446: PPUSH
5447: CALL_OW 67
// end ; end ;
5451: GO 5265
5453: POP
5454: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 3
5467: PUSH
5468: LD_INT 4
5470: PUSH
5471: LD_INT 4
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: PUSH
5479: LD_OWVAR 67
5483: ARRAY
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5803
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5488: LD_INT 3
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: LD_INT 21
5496: PUSH
5497: LD_INT 22
5499: PUSH
5500: LD_INT 23
5502: PUSH
5503: LD_INT 24
5505: PUSH
5506: LD_INT 24
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PUSH
5516: LD_OWVAR 67
5520: PPUSH
5521: LD_OWVAR 67
5525: PUSH
5526: LD_INT 2
5528: PLUS
5529: PPUSH
5530: CALL_OW 12
5534: ARRAY
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: LD_INT 42
5544: PUSH
5545: LD_INT 44
5547: PUSH
5548: LD_INT 43
5550: PUSH
5551: LD_INT 44
5553: PUSH
5554: LD_INT 46
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_OWVAR 67
5571: PUSH
5572: LD_INT 2
5574: PLUS
5575: PPUSH
5576: CALL_OW 12
5580: ARRAY
5581: PPUSH
5582: LD_INT 90
5584: PPUSH
5585: CALL 427 0 7
// un := CreateVehicle ;
5589: LD_ADDR_VAR 0 8
5593: PUSH
5594: CALL_OW 45
5598: ST_TO_ADDR
// SetDir ( un , dir ) ;
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 4
5608: PPUSH
5609: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5613: LD_VAR 0 8
5617: PPUSH
5618: LD_VAR 0 5
5622: PPUSH
5623: LD_INT 0
5625: PPUSH
5626: CALL 63094 0 3
5630: IFFALSE 5801
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5632: LD_ADDR_EXP 41
5636: PUSH
5637: LD_EXP 41
5641: PPUSH
5642: LD_EXP 41
5646: PUSH
5647: LD_INT 1
5649: PLUS
5650: PPUSH
5651: LD_VAR 0 8
5655: PPUSH
5656: CALL_OW 1
5660: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5661: LD_INT 0
5663: PPUSH
5664: LD_INT 3
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: LD_INT 5
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: LIST
5677: PUSH
5678: LD_OWVAR 67
5682: ARRAY
5683: PPUSH
5684: CALL_OW 383
// un := CreateHuman ;
5688: LD_ADDR_VAR 0 8
5692: PUSH
5693: CALL_OW 44
5697: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5698: LD_VAR 0 8
5702: PPUSH
5703: LD_EXP 41
5707: PUSH
5708: LD_EXP 41
5712: ARRAY
5713: PPUSH
5714: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5718: LD_ADDR_EXP 41
5722: PUSH
5723: LD_EXP 41
5727: PPUSH
5728: LD_EXP 41
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_VAR 0 8
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5747: LD_VAR 0 8
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5759: LD_VAR 0 8
5763: PPUSH
5764: LD_VAR 0 7
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: LD_VAR 0 7
5781: PUSH
5782: LD_INT 1
5784: ARRAY
5785: PUSH
5786: LD_INT 2
5788: ARRAY
5789: PPUSH
5790: CALL_OW 111
// wait ( 0 0$3 ) ;
5794: LD_INT 105
5796: PPUSH
5797: CALL_OW 67
// end ; end ;
5801: GO 5485
5803: POP
5804: POP
// end ; 4 .. 7 :
5805: GO 6360
5807: LD_INT 4
5809: DOUBLE
5810: GREATEREQUAL
5811: IFFALSE 5819
5813: LD_INT 7
5815: DOUBLE
5816: LESSEQUAL
5817: IFTRUE 5821
5819: GO 6359
5821: POP
// begin uc_side := 3 ;
5822: LD_ADDR_OWVAR 20
5826: PUSH
5827: LD_INT 3
5829: ST_TO_ADDR
// uc_nation := 3 ;
5830: LD_ADDR_OWVAR 21
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5838: LD_ADDR_VAR 0 2
5842: PUSH
5843: DOUBLE
5844: LD_INT 1
5846: DEC
5847: ST_TO_ADDR
5848: LD_INT 2
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 4
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: PUSH
5862: LD_OWVAR 67
5866: ARRAY
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6029
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_INT 4
5879: PUSH
5880: LD_INT 5
5882: PUSH
5883: LD_INT 6
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: LD_OWVAR 67
5895: ARRAY
5896: PPUSH
5897: CALL_OW 380
// un := CreateHuman ;
5901: LD_ADDR_VAR 0 8
5905: PUSH
5906: CALL_OW 44
5910: ST_TO_ADDR
// SetDir ( un , dir ) ;
5911: LD_VAR 0 8
5915: PPUSH
5916: LD_VAR 0 4
5920: PPUSH
5921: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5925: LD_VAR 0 8
5929: PPUSH
5930: LD_VAR 0 5
5934: PPUSH
5935: LD_INT 0
5937: PPUSH
5938: CALL 63094 0 3
5942: IFFALSE 6027
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5944: LD_ADDR_EXP 41
5948: PUSH
5949: LD_EXP 41
5953: PPUSH
5954: LD_EXP 41
5958: PUSH
5959: LD_INT 1
5961: PLUS
5962: PPUSH
5963: LD_VAR 0 8
5967: PPUSH
5968: CALL_OW 1
5972: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5973: LD_VAR 0 8
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5985: LD_VAR 0 8
5989: PPUSH
5990: LD_VAR 0 7
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_VAR 0 7
6007: PUSH
6008: LD_INT 1
6010: ARRAY
6011: PUSH
6012: LD_INT 2
6014: ARRAY
6015: PPUSH
6016: CALL_OW 111
// wait ( 0 0$2 ) ;
6020: LD_INT 70
6022: PPUSH
6023: CALL_OW 67
// end ; end ;
6027: GO 5868
6029: POP
6030: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_INT 2
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_OWVAR 67
6059: ARRAY
6060: PUSH
6061: FOR_TO
6062: IFFALSE 6355
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6064: LD_INT 3
6066: PPUSH
6067: LD_INT 3
6069: PPUSH
6070: LD_INT 21
6072: PUSH
6073: LD_INT 22
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 1
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL_OW 12
6090: ARRAY
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: LD_INT 1
6097: PPUSH
6098: LD_INT 42
6100: PUSH
6101: LD_INT 44
6103: PUSH
6104: LD_INT 43
6106: PUSH
6107: LD_INT 44
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 1
6118: PPUSH
6119: LD_OWVAR 67
6123: PUSH
6124: LD_INT 1
6126: PLUS
6127: PPUSH
6128: CALL_OW 12
6132: ARRAY
6133: PPUSH
6134: LD_INT 90
6136: PPUSH
6137: CALL 427 0 7
// un := CreateVehicle ;
6141: LD_ADDR_VAR 0 8
6145: PUSH
6146: CALL_OW 45
6150: ST_TO_ADDR
// SetDir ( un , dir ) ;
6151: LD_VAR 0 8
6155: PPUSH
6156: LD_VAR 0 4
6160: PPUSH
6161: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6165: LD_VAR 0 8
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: LD_INT 0
6177: PPUSH
6178: CALL 63094 0 3
6182: IFFALSE 6353
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6184: LD_ADDR_EXP 41
6188: PUSH
6189: LD_EXP 41
6193: PPUSH
6194: LD_EXP 41
6198: PUSH
6199: LD_INT 1
6201: PLUS
6202: PPUSH
6203: LD_VAR 0 8
6207: PPUSH
6208: CALL_OW 1
6212: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6213: LD_INT 0
6215: PPUSH
6216: LD_INT 3
6218: PUSH
6219: LD_INT 4
6221: PUSH
6222: LD_INT 5
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_OWVAR 67
6234: ARRAY
6235: PPUSH
6236: CALL_OW 383
// un := CreateHuman ;
6240: LD_ADDR_VAR 0 8
6244: PUSH
6245: CALL_OW 44
6249: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6250: LD_VAR 0 8
6254: PPUSH
6255: LD_EXP 41
6259: PUSH
6260: LD_EXP 41
6264: ARRAY
6265: PPUSH
6266: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6270: LD_ADDR_EXP 41
6274: PUSH
6275: LD_EXP 41
6279: PPUSH
6280: LD_EXP 41
6284: PUSH
6285: LD_INT 1
6287: PLUS
6288: PPUSH
6289: LD_VAR 0 8
6293: PPUSH
6294: CALL_OW 1
6298: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_INT 1
6306: PPUSH
6307: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6311: LD_VAR 0 8
6315: PPUSH
6316: LD_VAR 0 7
6320: PUSH
6321: LD_INT 1
6323: ARRAY
6324: PUSH
6325: LD_INT 1
6327: ARRAY
6328: PPUSH
6329: LD_VAR 0 7
6333: PUSH
6334: LD_INT 1
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 111
// wait ( 0 0$2 ) ;
6346: LD_INT 70
6348: PPUSH
6349: CALL_OW 67
// end ; end ;
6353: GO 6061
6355: POP
6356: POP
// end ; end ;
6357: GO 6360
6359: POP
// repeat wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// for un in ruConvoySquad do
6367: LD_ADDR_VAR 0 8
6371: PUSH
6372: LD_EXP 41
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6873
// begin if IsInArea ( un , westSouthOutArea ) then
6380: LD_VAR 0 8
6384: PPUSH
6385: LD_INT 18
6387: PPUSH
6388: CALL_OW 308
6392: IFFALSE 6471
// begin if GetType ( un ) = unit_vehicle then
6394: LD_VAR 0 8
6398: PPUSH
6399: CALL_OW 247
6403: PUSH
6404: LD_INT 2
6406: EQUAL
6407: IFFALSE 6430
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6409: LD_ADDR_EXP 41
6413: PUSH
6414: LD_EXP 41
6418: PUSH
6419: LD_VAR 0 8
6423: PPUSH
6424: CALL_OW 311
6428: DIFF
6429: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
6430: LD_ADDR_EXP 15
6434: PUSH
6435: LD_EXP 15
6439: PUSH
6440: LD_INT 1
6442: PLUS
6443: ST_TO_ADDR
// RemoveUnit ( un ) ;
6444: LD_VAR 0 8
6448: PPUSH
6449: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
6453: LD_ADDR_EXP 41
6457: PUSH
6458: LD_EXP 41
6462: PUSH
6463: LD_VAR 0 8
6467: DIFF
6468: ST_TO_ADDR
// break ;
6469: GO 6873
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6471: LD_VAR 0 8
6475: PPUSH
6476: CALL_OW 305
6480: NOT
6481: PUSH
6482: LD_VAR 0 8
6486: PPUSH
6487: CALL_OW 310
6491: NOT
6492: AND
6493: IFFALSE 6511
// ruConvoySquad := ruConvoySquad diff un ;
6495: LD_ADDR_EXP 41
6499: PUSH
6500: LD_EXP 41
6504: PUSH
6505: LD_VAR 0 8
6509: DIFF
6510: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6511: LD_VAR 0 8
6515: PPUSH
6516: CALL_OW 302
6520: PUSH
6521: LD_VAR 0 8
6525: PPUSH
6526: CALL_OW 314
6530: NOT
6531: AND
6532: IFFALSE 6871
// begin tag := GetTag ( un ) ;
6534: LD_ADDR_VAR 0 9
6538: PUSH
6539: LD_VAR 0 8
6543: PPUSH
6544: CALL_OW 110
6548: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6549: LD_VAR 0 8
6553: PPUSH
6554: LD_VAR 0 7
6558: PUSH
6559: LD_VAR 0 9
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ARRAY
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: LD_VAR 0 7
6577: PUSH
6578: LD_VAR 0 9
6582: PUSH
6583: LD_INT 1
6585: PLUS
6586: ARRAY
6587: PUSH
6588: LD_INT 2
6590: ARRAY
6591: PPUSH
6592: CALL_OW 297
6596: PUSH
6597: LD_INT 6
6599: LESS
6600: IFFALSE 6711
// begin SetTag ( un , tag + 1 ) ;
6602: LD_VAR 0 8
6606: PPUSH
6607: LD_VAR 0 9
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PPUSH
6616: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6620: LD_VAR 0 8
6624: PPUSH
6625: CALL_OW 247
6629: PUSH
6630: LD_INT 2
6632: EQUAL
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 257
6643: PUSH
6644: LD_INT 3
6646: EQUAL
6647: OR
6648: IFFALSE 6709
// begin AddComWait ( un , 0 0$4 ) ;
6650: LD_VAR 0 8
6654: PPUSH
6655: LD_INT 140
6657: PPUSH
6658: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6662: LD_VAR 0 8
6666: PPUSH
6667: LD_VAR 0 7
6671: PUSH
6672: LD_VAR 0 9
6676: PUSH
6677: LD_INT 1
6679: PLUS
6680: ARRAY
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 7
6690: PUSH
6691: LD_VAR 0 9
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ARRAY
6700: PUSH
6701: LD_INT 2
6703: ARRAY
6704: PPUSH
6705: CALL_OW 174
// end ; end else
6709: GO 6871
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6711: LD_VAR 0 8
6715: PPUSH
6716: CALL_OW 257
6720: PUSH
6721: LD_INT 4
6723: EQUAL
6724: PUSH
6725: LD_EXP 41
6729: PPUSH
6730: LD_INT 21
6732: PUSH
6733: LD_INT 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: LD_INT 24
6745: PUSH
6746: LD_INT 1000
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 72
6765: AND
6766: IFFALSE 6824
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6768: LD_VAR 0 8
6772: PPUSH
6773: LD_EXP 41
6777: PPUSH
6778: LD_INT 21
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 3
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 1000
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 72
6813: PUSH
6814: LD_INT 1
6816: ARRAY
6817: PPUSH
6818: CALL_OW 128
6822: GO 6871
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6824: LD_VAR 0 8
6828: PPUSH
6829: LD_VAR 0 7
6833: PUSH
6834: LD_VAR 0 9
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PUSH
6844: LD_INT 1
6846: ARRAY
6847: PPUSH
6848: LD_VAR 0 7
6852: PUSH
6853: LD_VAR 0 9
6857: PUSH
6858: LD_INT 1
6860: PLUS
6861: ARRAY
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: CALL_OW 114
// end ; end ; end ;
6871: GO 6377
6873: POP
6874: POP
// until not UnitFilter ( ruConvoySquad , [ f_type , unit_human ] ) ;
6875: LD_EXP 41
6879: PPUSH
6880: LD_INT 21
6882: PUSH
6883: LD_INT 1
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PPUSH
6890: CALL_OW 72
6894: NOT
6895: IFFALSE 6360
// end ;
6897: LD_VAR 0 1
6901: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6902: LD_EXP 16
6906: PUSH
6907: LD_INT 3
6909: PPUSH
6910: LD_INT 5
6912: PPUSH
6913: CALL_OW 12
6917: LESS
6918: PUSH
6919: LD_EXP 41
6923: NOT
6924: AND
6925: PUSH
6926: LD_OWVAR 67
6930: PUSH
6931: LD_INT 1
6933: GREATER
6934: AND
6935: IFFALSE 7323
6937: GO 6939
6939: DISABLE
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// begin uc_side := 3 ;
6945: LD_ADDR_OWVAR 20
6949: PUSH
6950: LD_INT 3
6952: ST_TO_ADDR
// uc_nation := 3 ;
6953: LD_ADDR_OWVAR 21
6957: PUSH
6958: LD_INT 3
6960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: DOUBLE
6967: LD_INT 1
6969: DEC
6970: ST_TO_ADDR
6971: LD_INT 2
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 4
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PUSH
6985: LD_OWVAR 67
6989: ARRAY
6990: PUSH
6991: FOR_TO
6992: IFFALSE 7244
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
6994: LD_INT 3
6996: PPUSH
6997: LD_INT 3
6999: PPUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_INT 23
7008: PUSH
7009: LD_INT 24
7011: PUSH
7012: LD_INT 24
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_OWVAR 67
7026: PPUSH
7027: LD_OWVAR 67
7031: PUSH
7032: LD_INT 2
7034: PLUS
7035: PPUSH
7036: CALL_OW 12
7040: ARRAY
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 42
7050: PUSH
7051: LD_INT 44
7053: PUSH
7054: LD_INT 43
7056: PUSH
7057: LD_INT 44
7059: PUSH
7060: LD_INT 46
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 1
7072: PPUSH
7073: LD_OWVAR 67
7077: PUSH
7078: LD_INT 2
7080: PLUS
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: LD_INT 90
7090: PPUSH
7091: CALL 427 0 7
// un := CreateVehicle ;
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: CALL_OW 45
7104: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7105: LD_VAR 0 3
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7117: LD_VAR 0 3
7121: PPUSH
7122: LD_INT 23
7124: PPUSH
7125: LD_INT 0
7127: PPUSH
7128: CALL 63094 0 3
7132: IFFALSE 7242
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_VAR 0 2
7143: PPUSH
7144: LD_VAR 0 2
7148: PUSH
7149: LD_INT 1
7151: PLUS
7152: PPUSH
7153: LD_VAR 0 3
7157: PPUSH
7158: CALL_OW 1
7162: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7163: LD_INT 0
7165: PPUSH
7166: LD_INT 3
7168: PUSH
7169: LD_INT 4
7171: PUSH
7172: LD_INT 5
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_OWVAR 67
7184: ARRAY
7185: PPUSH
7186: CALL_OW 383
// un := CreateHuman ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: CALL_OW 44
7199: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7200: LD_VAR 0 3
7204: PPUSH
7205: LD_VAR 0 2
7209: PUSH
7210: LD_VAR 0 2
7214: ARRAY
7215: PPUSH
7216: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7220: LD_VAR 0 3
7224: PPUSH
7225: LD_INT 80
7227: PPUSH
7228: LD_INT 139
7230: PPUSH
7231: CALL_OW 111
// wait ( 0 0$3 ) ;
7235: LD_INT 105
7237: PPUSH
7238: CALL_OW 67
// end ; end ;
7242: GO 6991
7244: POP
7245: POP
// for i in tmp do
7246: LD_ADDR_VAR 0 1
7250: PUSH
7251: LD_VAR 0 2
7255: PUSH
7256: FOR_IN
7257: IFFALSE 7321
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_INT 101
7266: PPUSH
7267: LD_INT 102
7269: PPUSH
7270: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7274: LD_VAR 0 1
7278: PPUSH
7279: LD_INT 110
7281: PPUSH
7282: LD_INT 78
7284: PPUSH
7285: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 75
7296: PPUSH
7297: LD_INT 101
7299: PPUSH
7300: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7304: LD_VAR 0 1
7308: PPUSH
7309: LD_INT 57
7311: PPUSH
7312: LD_INT 83
7314: PPUSH
7315: CALL_OW 174
// end ;
7319: GO 7256
7321: POP
7322: POP
// end ; end_of_file
7323: PPOPN 3
7325: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7326: LD_VAR 0 1
7330: PUSH
7331: LD_EXP 21
7335: EQUAL
7336: IFFALSE 7345
// YouLost ( Heike ) ;
7338: LD_STRING Heike
7340: PPUSH
7341: CALL_OW 104
// if un in apeSoldGroup then
7345: LD_VAR 0 1
7349: PUSH
7350: LD_EXP 42
7354: IN
7355: IFFALSE 7373
// apeSoldGroup := apeSoldGroup diff un ;
7357: LD_ADDR_EXP 42
7361: PUSH
7362: LD_EXP 42
7366: PUSH
7367: LD_VAR 0 1
7371: DIFF
7372: ST_TO_ADDR
// if un in apeEngGroup then
7373: LD_VAR 0 1
7377: PUSH
7378: LD_EXP 43
7382: IN
7383: IFFALSE 7401
// apeEngGroup := apeEngGroup diff un ;
7385: LD_ADDR_EXP 43
7389: PUSH
7390: LD_EXP 43
7394: PUSH
7395: LD_VAR 0 1
7399: DIFF
7400: ST_TO_ADDR
// if un in oilBaseGuard then
7401: LD_VAR 0 1
7405: PUSH
7406: LD_EXP 38
7410: IN
7411: IFFALSE 7429
// oilBaseGuard := oilBaseGuard diff un ;
7413: LD_ADDR_EXP 38
7417: PUSH
7418: LD_EXP 38
7422: PUSH
7423: LD_VAR 0 1
7427: DIFF
7428: ST_TO_ADDR
// if un in ruNorthGroup then
7429: LD_VAR 0 1
7433: PUSH
7434: LD_EXP 39
7438: IN
7439: IFFALSE 7457
// ruNorthGroup := ruNorthGroup diff un ;
7441: LD_ADDR_EXP 39
7445: PUSH
7446: LD_EXP 39
7450: PUSH
7451: LD_VAR 0 1
7455: DIFF
7456: ST_TO_ADDR
// if un in ruSouthGroup then
7457: LD_VAR 0 1
7461: PUSH
7462: LD_EXP 40
7466: IN
7467: IFFALSE 7485
// ruSouthGroup := ruSouthGroup diff un ;
7469: LD_ADDR_EXP 40
7473: PUSH
7474: LD_EXP 40
7478: PUSH
7479: LD_VAR 0 1
7483: DIFF
7484: ST_TO_ADDR
// if un in ruConvoySquad then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_EXP 41
7494: IN
7495: IFFALSE 7513
// ruConvoySquad := ruConvoySquad diff un ;
7497: LD_ADDR_EXP 41
7501: PUSH
7502: LD_EXP 41
7506: PUSH
7507: LD_VAR 0 1
7511: DIFF
7512: ST_TO_ADDR
// end ;
7513: PPOPN 1
7515: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 264
7525: PUSH
7526: LD_INT 30
7528: EQUAL
7529: IFFALSE 7539
// radarConstructed := true ;
7531: LD_ADDR_EXP 13
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 264
7548: PUSH
7549: LD_INT 26
7551: EQUAL
7552: IFFALSE 7562
// flamethrowerBuilt := true ;
7554: LD_ADDR_EXP 20
7558: PUSH
7559: LD_INT 1
7561: ST_TO_ADDR
// end ;
7562: PPOPN 2
7564: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7565: LD_ADDR_EXP 18
7569: PUSH
7570: LD_EXP 18
7574: PUSH
7575: LD_INT 1
7577: PLUS
7578: ST_TO_ADDR
// if oldId in ruConvoySquad then
7579: LD_VAR 0 2
7583: PUSH
7584: LD_EXP 41
7588: IN
7589: IFFALSE 7607
// ruConvoySquad := ruConvoySquad diff oldId ;
7591: LD_ADDR_EXP 41
7595: PUSH
7596: LD_EXP 41
7600: PUSH
7601: LD_VAR 0 2
7605: DIFF
7606: ST_TO_ADDR
// if newId in ruConvoySquad then
7607: LD_VAR 0 1
7611: PUSH
7612: LD_EXP 41
7616: IN
7617: IFFALSE 7635
// ruConvoySquad := ruConvoySquad diff newId ;
7619: LD_ADDR_EXP 41
7623: PUSH
7624: LD_EXP 41
7628: PUSH
7629: LD_VAR 0 1
7633: DIFF
7634: ST_TO_ADDR
// end ; end_of_file
7635: PPOPN 4
7637: END
// export function Action ; var i , un , veh , tmp ; begin
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
7642: PPUSH
7643: PPUSH
7644: PPUSH
// InGameOn ;
7645: CALL_OW 8
// music_nat := 2 ;
7649: LD_ADDR_OWVAR 71
7653: PUSH
7654: LD_INT 2
7656: ST_TO_ADDR
// music_class := 0 ;
7657: LD_ADDR_OWVAR 72
7661: PUSH
7662: LD_INT 0
7664: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7665: LD_INT 7
7667: PPUSH
7668: LD_INT 6
7670: PPUSH
7671: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7675: LD_INT 7
7677: PPUSH
7678: LD_INT 6
7680: PPUSH
7681: LD_INT 2
7683: PPUSH
7684: LD_INT 20
7686: NEG
7687: PPUSH
7688: CALL 1211 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: LD_EXP 21
7701: PUSH
7702: LD_EXP 22
7706: PUSH
7707: LD_EXP 23
7711: PUSH
7712: LD_EXP 24
7716: PUSH
7717: LD_EXP 25
7721: PUSH
7722: LD_EXP 26
7726: PUSH
7727: LD_EXP 27
7731: PUSH
7732: LD_EXP 28
7736: PUSH
7737: LD_EXP 33
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: ST_TO_ADDR
// tmp := tmp diff 0 ;
7753: LD_ADDR_VAR 0 5
7757: PUSH
7758: LD_VAR 0 5
7762: PUSH
7763: LD_INT 0
7765: DIFF
7766: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7767: LD_ADDR_VAR 0 5
7771: PUSH
7772: LD_VAR 0 5
7776: PPUSH
7777: LD_INT 3
7779: PPUSH
7780: CALL 62805 0 2
7784: ST_TO_ADDR
// for i in heikeVehicles do
7785: LD_ADDR_VAR 0 2
7789: PUSH
7790: LD_EXP 35
7794: PUSH
7795: FOR_IN
7796: IFFALSE 7995
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7798: LD_INT 5
7800: PPUSH
7801: LD_VAR 0 2
7805: PUSH
7806: LD_INT 5
7808: ARRAY
7809: PPUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_VAR 0 2
7823: PUSH
7824: LD_INT 2
7826: ARRAY
7827: PPUSH
7828: LD_VAR 0 2
7832: PUSH
7833: LD_INT 3
7835: ARRAY
7836: PPUSH
7837: LD_VAR 0 2
7841: PUSH
7842: LD_INT 4
7844: ARRAY
7845: PPUSH
7846: LD_INT 34
7848: PPUSH
7849: CALL 427 0 7
// veh := CreateVehicle ;
7853: LD_ADDR_VAR 0 4
7857: PUSH
7858: CALL_OW 45
7862: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7863: LD_VAR 0 2
7867: PUSH
7868: LD_INT 4
7870: ARRAY
7871: PUSH
7872: LD_INT 51
7874: PUSH
7875: LD_INT 32
7877: PUSH
7878: LD_INT 12
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: IN
7886: IFFALSE 7966
// begin if i [ 7 ] [ 1 ] then
7888: LD_VAR 0 2
7892: PUSH
7893: LD_INT 7
7895: ARRAY
7896: PUSH
7897: LD_INT 1
7899: ARRAY
7900: IFFALSE 7927
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7902: LD_VAR 0 4
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: LD_VAR 0 2
7914: PUSH
7915: LD_INT 7
7917: ARRAY
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7927: LD_VAR 0 2
7931: PUSH
7932: LD_INT 7
7934: ARRAY
7935: PUSH
7936: LD_INT 2
7938: ARRAY
7939: IFFALSE 7966
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7941: LD_VAR 0 4
7945: PPUSH
7946: LD_INT 2
7948: PPUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_INT 7
7956: ARRAY
7957: PUSH
7958: LD_INT 2
7960: ARRAY
7961: PPUSH
7962: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
7966: LD_VAR 0 4
7970: PPUSH
7971: LD_INT 2
7973: PPUSH
7974: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
7978: LD_VAR 0 4
7982: PPUSH
7983: LD_INT 4
7985: PPUSH
7986: LD_INT 0
7988: PPUSH
7989: CALL_OW 49
// end ;
7993: GO 7795
7995: POP
7996: POP
// if tmp then
7997: LD_VAR 0 5
8001: IFFALSE 8056
// for i in tmp union heikeApes do
8003: LD_ADDR_VAR 0 2
8007: PUSH
8008: LD_VAR 0 5
8012: PUSH
8013: LD_EXP 36
8017: UNION
8018: PUSH
8019: FOR_IN
8020: IFFALSE 8054
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
8022: LD_VAR 0 2
8026: PPUSH
8027: LD_INT 5
8029: PPUSH
8030: LD_INT 0
8032: PPUSH
8033: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8037: LD_VAR 0 2
8041: PPUSH
8042: LD_INT 26
8044: PPUSH
8045: LD_INT 9
8047: PPUSH
8048: CALL_OW 118
// end ;
8052: GO 8019
8054: POP
8055: POP
// if heikeSecondSquad then
8056: LD_EXP 34
8060: IFFALSE 8109
// for i in heikeSecondSquad do
8062: LD_ADDR_VAR 0 2
8066: PUSH
8067: LD_EXP 34
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8107
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8075: LD_VAR 0 2
8079: PPUSH
8080: LD_INT 6
8082: PPUSH
8083: LD_INT 0
8085: PPUSH
8086: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_INT 26
8097: PPUSH
8098: LD_INT 9
8100: PPUSH
8101: CALL_OW 118
// end ;
8105: GO 8072
8107: POP
8108: POP
// if heikeApes then
8109: LD_EXP 36
8113: IFFALSE 8156
// for i in heikeApes do
8115: LD_ADDR_VAR 0 2
8119: PUSH
8120: LD_EXP 36
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8154
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8128: LD_VAR 0 2
8132: PPUSH
8133: LD_INT 7
8135: PPUSH
8136: LD_INT 0
8138: PPUSH
8139: CALL_OW 49
// ComHold ( i ) ;
8143: LD_VAR 0 2
8147: PPUSH
8148: CALL_OW 140
// end ;
8152: GO 8125
8154: POP
8155: POP
// if Kurt then
8156: LD_EXP 32
8160: IFFALSE 8192
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8162: LD_EXP 32
8166: PPUSH
8167: LD_INT 8
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8177: LD_EXP 32
8181: PPUSH
8182: LD_INT 42
8184: PPUSH
8185: LD_INT 32
8187: PPUSH
8188: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8192: LD_EXP 21
8196: PPUSH
8197: LD_STRING DH-Start-1
8199: PPUSH
8200: CALL_OW 88
// if Givi then
8204: LD_EXP 22
8208: IFFALSE 8471
// begin Say ( Givi , DG-Start-2-5 ) ;
8210: LD_EXP 22
8214: PPUSH
8215: LD_STRING DG-Start-2-5
8217: PPUSH
8218: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8222: LD_EXP 21
8226: PPUSH
8227: LD_STRING DH-Start-3
8229: PPUSH
8230: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8234: LD_EXP 21
8238: PPUSH
8239: LD_STRING DH-Start-4
8241: PPUSH
8242: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8246: LD_EXP 22
8250: PPUSH
8251: LD_STRING DG-Start-5
8253: PPUSH
8254: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8258: LD_EXP 21
8262: PPUSH
8263: LD_STRING DH-Start-6
8265: PPUSH
8266: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8270: LD_EXP 22
8274: PPUSH
8275: LD_STRING DG-Start-7
8277: PPUSH
8278: CALL_OW 88
// if Mike then
8282: LD_EXP 23
8286: IFFALSE 8459
// begin Say ( Mike , DM-Start-8 ) ;
8288: LD_EXP 23
8292: PPUSH
8293: LD_STRING DM-Start-8
8295: PPUSH
8296: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8300: LD_EXP 23
8304: PPUSH
8305: LD_STRING DM-Start-9
8307: PPUSH
8308: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8312: LD_EXP 22
8316: PPUSH
8317: LD_STRING DG-Start-10
8319: PPUSH
8320: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8324: LD_EXP 22
8328: PPUSH
8329: LD_STRING DG-Start-11
8331: PPUSH
8332: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8336: LD_EXP 21
8340: PPUSH
8341: LD_STRING DH-Start-12
8343: PPUSH
8344: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8348: LD_EXP 22
8352: PPUSH
8353: LD_STRING DG-Start-13
8355: PPUSH
8356: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8360: LD_EXP 22
8364: PPUSH
8365: LD_STRING DG-Start-14
8367: PPUSH
8368: CALL_OW 88
// if Kaia then
8372: LD_EXP 26
8376: IFFALSE 8459
// begin Say ( Kaia , DK-Start-15 ) ;
8378: LD_EXP 26
8382: PPUSH
8383: LD_STRING DK-Start-15
8385: PPUSH
8386: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8390: LD_EXP 26
8394: PPUSH
8395: LD_STRING DK-Start-16
8397: PPUSH
8398: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8402: LD_EXP 26
8406: PPUSH
8407: LD_STRING DK-Start-17
8409: PPUSH
8410: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8414: LD_INT 10
8416: PPUSH
8417: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8421: LD_EXP 22
8425: PPUSH
8426: LD_EXP 26
8430: PPUSH
8431: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8435: LD_EXP 22
8439: PPUSH
8440: LD_STRING DG-Start-18
8442: PPUSH
8443: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8447: LD_EXP 26
8451: PPUSH
8452: LD_STRING DK-Start-19
8454: PPUSH
8455: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8459: LD_EXP 21
8463: PPUSH
8464: LD_STRING DH-Start-20
8466: PPUSH
8467: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8471: LD_INT 70
8473: PPUSH
8474: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8478: LD_EXP 29
8482: PPUSH
8483: LD_STRING DShar-Start-21
8485: PPUSH
8486: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8490: LD_EXP 21
8494: PPUSH
8495: LD_STRING DH-Start-22
8497: PPUSH
8498: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8502: LD_EXP 29
8506: PPUSH
8507: LD_STRING DShar-Start-23
8509: PPUSH
8510: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8514: LD_EXP 29
8518: PPUSH
8519: LD_STRING DShar-Start-24
8521: PPUSH
8522: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8526: LD_EXP 29
8530: PPUSH
8531: LD_STRING DShar-Start-25
8533: PPUSH
8534: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8538: LD_EXP 29
8542: PPUSH
8543: LD_STRING DShar-Start-26
8545: PPUSH
8546: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8550: LD_EXP 21
8554: PPUSH
8555: LD_STRING DH-Start-27
8557: PPUSH
8558: CALL_OW 88
// if Kaia then
8562: LD_EXP 26
8566: IFFALSE 8608
// begin ComTurnUnit ( Heike , Kaia ) ;
8568: LD_EXP 21
8572: PPUSH
8573: LD_EXP 26
8577: PPUSH
8578: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8582: LD_EXP 26
8586: PPUSH
8587: LD_STRING DK-Start-28
8589: PPUSH
8590: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8594: LD_EXP 21
8598: PPUSH
8599: LD_STRING DH-Start-29
8601: PPUSH
8602: CALL_OW 88
// end else
8606: GO 8620
// Say ( Heike , DH-Start-a-28 ) ;
8608: LD_EXP 21
8612: PPUSH
8613: LD_STRING DH-Start-a-28
8615: PPUSH
8616: CALL_OW 88
// if Givi then
8620: LD_EXP 22
8624: IFFALSE 8859
// begin ComTurnUnit ( Heike , Givi ) ;
8626: LD_EXP 21
8630: PPUSH
8631: LD_EXP 22
8635: PPUSH
8636: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8640: LD_EXP 22
8644: PPUSH
8645: LD_EXP 21
8649: PPUSH
8650: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8654: LD_EXP 21
8658: PPUSH
8659: LD_STRING DH-Start-30
8661: PPUSH
8662: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8666: LD_EXP 21
8670: PPUSH
8671: LD_STRING DH-Start-31
8673: PPUSH
8674: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8678: LD_EXP 22
8682: PPUSH
8683: LD_STRING DG-Start-32
8685: PPUSH
8686: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8690: LD_EXP 21
8694: PPUSH
8695: LD_STRING DH-Start-33
8697: PPUSH
8698: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8702: LD_EXP 22
8706: PPUSH
8707: LD_STRING DG-Start-34
8709: PPUSH
8710: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8714: LD_EXP 22
8718: PPUSH
8719: LD_STRING DG-Start-35
8721: PPUSH
8722: CALL_OW 88
// if Kurt and not dialogue_skipped then
8726: LD_EXP 32
8730: PUSH
8731: LD_OWVAR 59
8735: NOT
8736: AND
8737: IFFALSE 8768
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8739: LD_EXP 32
8743: PPUSH
8744: LD_INT 28
8746: PPUSH
8747: LD_INT 13
8749: PPUSH
8750: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8754: LD_EXP 32
8758: PPUSH
8759: LD_EXP 21
8763: PPUSH
8764: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8768: LD_EXP 22
8772: PPUSH
8773: LD_STRING DG-Start-36
8775: PPUSH
8776: CALL_OW 88
// if Kurt then
8780: LD_EXP 32
8784: IFFALSE 8857
// begin if not Givi then
8786: LD_EXP 22
8790: NOT
8791: IFFALSE 8807
// Say ( Kurt , DKs-Start-37-a ) else
8793: LD_EXP 32
8797: PPUSH
8798: LD_STRING DKs-Start-37-a
8800: PPUSH
8801: CALL_OW 88
8805: GO 8819
// Say ( Kurt , DKs-Start-37 ) ;
8807: LD_EXP 32
8811: PPUSH
8812: LD_STRING DKs-Start-37
8814: PPUSH
8815: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8819: LD_EXP 32
8823: PPUSH
8824: LD_STRING DKs-Start-38
8826: PPUSH
8827: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8831: LD_EXP 21
8835: PPUSH
8836: LD_EXP 32
8840: PPUSH
8841: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8845: LD_EXP 21
8849: PPUSH
8850: LD_STRING DH-Start-39
8852: PPUSH
8853: CALL_OW 88
// end ; end else
8857: GO 8888
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8859: LD_EXP 34
8863: PPUSH
8864: LD_STRING DArm-Start-a-37
8866: PPUSH
8867: LD_STRING DArf-Start-a-37
8869: PPUSH
8870: CALL 1262 0 3
8874: IFFALSE 8888
// Say ( Heike , DH-Start-39 ) ;
8876: LD_EXP 21
8880: PPUSH
8881: LD_STRING DH-Start-39
8883: PPUSH
8884: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8888: LD_INT 44
8890: PPUSH
8891: LD_INT 25
8893: PPUSH
8894: CALL_OW 428
8898: IFFALSE 8915
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8900: LD_INT 44
8902: PPUSH
8903: LD_INT 25
8905: PPUSH
8906: CALL_OW 428
8910: PPUSH
8911: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8915: LD_EXP 30
8919: PPUSH
8920: LD_INT 5
8922: PPUSH
8923: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8927: LD_EXP 30
8931: PPUSH
8932: LD_INT 44
8934: PPUSH
8935: LD_INT 25
8937: PPUSH
8938: LD_INT 0
8940: PPUSH
8941: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8945: LD_EXP 30
8949: PPUSH
8950: LD_INT 29
8952: PPUSH
8953: LD_INT 12
8955: PPUSH
8956: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8960: LD_INT 35
8962: PPUSH
8963: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
8967: LD_OWVAR 59
8971: PUSH
8972: LD_EXP 21
8976: PPUSH
8977: LD_EXP 30
8981: PPUSH
8982: CALL_OW 296
8986: PUSH
8987: LD_INT 8
8989: LESS
8990: OR
8991: PUSH
8992: LD_EXP 30
8996: PPUSH
8997: LD_INT 26
8999: PPUSH
9000: LD_INT 9
9002: PPUSH
9003: CALL_OW 297
9007: PUSH
9008: LD_INT 6
9010: LESS
9011: OR
9012: IFFALSE 8960
// Say ( Olaf , DO-Scout-1 ) ;
9014: LD_EXP 30
9018: PPUSH
9019: LD_STRING DO-Scout-1
9021: PPUSH
9022: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9026: LD_EXP 30
9030: PPUSH
9031: LD_EXP 21
9035: PPUSH
9036: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9040: LD_ADDR_VAR 0 2
9044: PUSH
9045: LD_VAR 0 5
9049: PUSH
9050: LD_EXP 34
9054: UNION
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9075
// ComTurnUnit ( i , Olaf ) ;
9059: LD_VAR 0 2
9063: PPUSH
9064: LD_EXP 30
9068: PPUSH
9069: CALL_OW 119
9073: GO 9056
9075: POP
9076: POP
// wait ( 0 0$0.3 ) ;
9077: LD_INT 10
9079: PPUSH
9080: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9084: LD_EXP 21
9088: PPUSH
9089: LD_EXP 30
9093: PPUSH
9094: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9098: LD_EXP 21
9102: PPUSH
9103: LD_EXP 30
9107: PPUSH
9108: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9112: LD_EXP 21
9116: PPUSH
9117: LD_STRING DH-Scout-2
9119: PPUSH
9120: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9124: LD_EXP 30
9128: PPUSH
9129: LD_STRING DO-Scout-3
9131: PPUSH
9132: CALL_OW 88
// if Mike and Givi then
9136: LD_EXP 23
9140: PUSH
9141: LD_EXP 22
9145: AND
9146: IFFALSE 9162
// Say ( Olaf , DO-Scout-4 ) else
9148: LD_EXP 30
9152: PPUSH
9153: LD_STRING DO-Scout-4
9155: PPUSH
9156: CALL_OW 88
9160: GO 9262
// begin if Mike then
9162: LD_EXP 23
9166: IFFALSE 9194
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9168: LD_EXP 30
9172: PPUSH
9173: LD_STRING DO-Scout-a-4
9175: PPUSH
9176: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9180: LD_EXP 21
9184: PPUSH
9185: LD_STRING DH-Scout-a-5
9187: PPUSH
9188: CALL_OW 88
// end else
9192: GO 9262
// if Givi then
9194: LD_EXP 22
9198: IFFALSE 9226
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9200: LD_EXP 30
9204: PPUSH
9205: LD_STRING DO-Scout-b-4
9207: PPUSH
9208: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9212: LD_EXP 21
9216: PPUSH
9217: LD_STRING DH-Scout-b-5
9219: PPUSH
9220: CALL_OW 88
// end else
9224: GO 9262
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9226: LD_EXP 30
9230: PPUSH
9231: LD_STRING DO-Scout-f-4
9233: PPUSH
9234: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9238: LD_EXP 21
9242: PPUSH
9243: LD_STRING DH-Scout-f-5
9245: PPUSH
9246: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9250: LD_EXP 30
9254: PPUSH
9255: LD_STRING DO-Scout-f-6
9257: PPUSH
9258: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9262: LD_EXP 21
9266: PPUSH
9267: LD_STRING DH-Scout-5
9269: PPUSH
9270: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9274: LD_EXP 30
9278: PPUSH
9279: LD_STRING DO-Scout-6
9281: PPUSH
9282: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9286: LD_EXP 30
9290: PPUSH
9291: LD_STRING DO-Scout-7
9293: PPUSH
9294: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9298: LD_EXP 21
9302: PPUSH
9303: LD_STRING DH-Scout-8
9305: PPUSH
9306: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9310: LD_EXP 21
9314: PPUSH
9315: LD_STRING DH-Scout-9
9317: PPUSH
9318: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9322: LD_EXP 30
9326: PPUSH
9327: LD_STRING DO-Scout-10
9329: PPUSH
9330: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9334: LD_EXP 30
9338: PPUSH
9339: LD_STRING DO-Scout-12
9341: PPUSH
9342: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9346: LD_EXP 30
9350: PPUSH
9351: LD_STRING DO-Scout-13
9353: PPUSH
9354: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9358: LD_EXP 30
9362: PPUSH
9363: LD_STRING DO-Scout-14
9365: PPUSH
9366: CALL_OW 88
// if Givi then
9370: LD_EXP 22
9374: IFFALSE 9400
// begin Say ( Givi , DG-Scout-15 ) ;
9376: LD_EXP 22
9380: PPUSH
9381: LD_STRING DG-Scout-15
9383: PPUSH
9384: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9388: LD_EXP 26
9392: PPUSH
9393: LD_STRING DK-Scout-16
9395: PPUSH
9396: CALL_OW 88
// end ; if not dialogue_skipped then
9400: LD_OWVAR 59
9404: NOT
9405: IFFALSE 9526
// begin async ;
9407: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9408: LD_EXP 30
9412: PPUSH
9413: LD_STRING DO-Scout-17
9415: PPUSH
9416: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9420: LD_INT 55
9422: PPUSH
9423: LD_INT 77
9425: PPUSH
9426: LD_INT 2
9428: PPUSH
9429: LD_INT 6
9431: NEG
9432: PPUSH
9433: CALL 1211 0 4
// wait ( 10 ) ;
9437: LD_INT 10
9439: PPUSH
9440: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9444: LD_INT 55
9446: PPUSH
9447: LD_INT 77
9449: PPUSH
9450: CALL_OW 84
// wait ( 0 0$5 ) ;
9454: LD_INT 175
9456: PPUSH
9457: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9461: LD_EXP 30
9465: PPUSH
9466: LD_STRING DO-Scout-18
9468: PPUSH
9469: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9473: LD_INT 204
9475: PPUSH
9476: LD_INT 107
9478: PPUSH
9479: LD_INT 2
9481: PPUSH
9482: LD_INT 12
9484: NEG
9485: PPUSH
9486: CALL 1211 0 4
// wait ( 10 ) ;
9490: LD_INT 10
9492: PPUSH
9493: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9497: LD_INT 204
9499: PPUSH
9500: LD_INT 107
9502: PPUSH
9503: CALL_OW 84
// wait ( 0 0$5 ) ;
9507: LD_INT 175
9509: PPUSH
9510: CALL_OW 67
// sync ;
9514: SYNC
// CenterNowOnUnits ( Heike ) ;
9515: LD_EXP 21
9519: PPUSH
9520: CALL_OW 87
// end else
9524: GO 9560
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9526: LD_INT 55
9528: PPUSH
9529: LD_INT 77
9531: PPUSH
9532: LD_INT 2
9534: PPUSH
9535: LD_INT 6
9537: NEG
9538: PPUSH
9539: CALL 1211 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9543: LD_INT 204
9545: PPUSH
9546: LD_INT 107
9548: PPUSH
9549: LD_INT 2
9551: PPUSH
9552: LD_INT 12
9554: NEG
9555: PPUSH
9556: CALL 1211 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
9560: LD_EXP 30
9564: PPUSH
9565: LD_STRING DO-Scout-19
9567: PPUSH
9568: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9572: LD_EXP 30
9576: PPUSH
9577: LD_STRING DO-Scout-20
9579: PPUSH
9580: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9584: LD_EXP 21
9588: PPUSH
9589: LD_STRING DH-Scout-21
9591: PPUSH
9592: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9596: LD_EXP 21
9600: PPUSH
9601: LD_STRING DH-Scout-22
9603: PPUSH
9604: CALL_OW 88
// InGameOff ;
9608: CALL_OW 9
// if Givi then
9612: LD_EXP 22
9616: IFFALSE 9631
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9618: LD_INT 13
9620: PPUSH
9621: LD_INT 2
9623: PPUSH
9624: LD_INT 1
9626: PPUSH
9627: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9631: LD_STRING Road
9633: PPUSH
9634: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9638: LD_ADDR_VAR 0 2
9642: PUSH
9643: LD_INT 22
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 21
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 69
9671: PUSH
9672: FOR_IN
9673: IFFALSE 9689
// SetSide ( i , 2 ) ;
9675: LD_VAR 0 2
9679: PPUSH
9680: LD_INT 2
9682: PPUSH
9683: CALL_OW 235
9687: GO 9672
9689: POP
9690: POP
// SaveForQuickRestart ;
9691: CALL_OW 22
// end ;
9695: LD_VAR 0 1
9699: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9700: LD_INT 2
9702: PPUSH
9703: LD_INT 9
9705: PPUSH
9706: CALL_OW 294
9710: IFFALSE 10077
9712: GO 9714
9714: DISABLE
// begin DialogueOn ;
9715: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9719: LD_INT 111
9721: PPUSH
9722: LD_INT 72
9724: PPUSH
9725: LD_INT 2
9727: PPUSH
9728: LD_INT 20
9730: NEG
9731: PPUSH
9732: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9736: LD_INT 111
9738: PPUSH
9739: LD_INT 72
9741: PPUSH
9742: LD_INT 2
9744: PPUSH
9745: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9749: LD_INT 111
9751: PPUSH
9752: LD_INT 72
9754: PPUSH
9755: CALL_OW 86
// if IsOk ( Kamil ) then
9759: LD_EXP 25
9763: PPUSH
9764: CALL_OW 302
9768: IFFALSE 9885
// begin Say ( Kamil , DKam-Cross-1 ) ;
9770: LD_EXP 25
9774: PPUSH
9775: LD_STRING DKam-Cross-1
9777: PPUSH
9778: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9782: LD_EXP 25
9786: PPUSH
9787: LD_STRING DKam-Cross-2
9789: PPUSH
9790: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9794: LD_EXP 25
9798: PPUSH
9799: LD_STRING DKam-Cross-3
9801: PPUSH
9802: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9806: LD_EXP 25
9810: PPUSH
9811: LD_STRING DKam-Cross-4
9813: PPUSH
9814: CALL_OW 88
// if IsOk ( Ibrahim ) then
9818: LD_EXP 24
9822: PPUSH
9823: CALL_OW 302
9827: IFFALSE 9883
// begin if ibrahimJoinedIn04 then
9829: LD_EXP 4
9833: IFFALSE 9847
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9835: LD_EXP 24
9839: PPUSH
9840: LD_STRING DI-Cross-b-5
9842: PPUSH
9843: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9847: LD_EXP 24
9851: PPUSH
9852: LD_STRING DI-Cross-b-6
9854: PPUSH
9855: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9859: LD_EXP 24
9863: PPUSH
9864: LD_STRING DI-Cross-b-7
9866: PPUSH
9867: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9871: LD_EXP 25
9875: PPUSH
9876: LD_STRING DKam-Cross-8
9878: PPUSH
9879: CALL_OW 88
// end ; end else
9883: GO 10043
// if IsOk ( Sophia ) then
9885: LD_EXP 27
9889: PPUSH
9890: CALL_OW 302
9894: IFFALSE 10011
// begin Say ( Sophia , DS-Cross-1 ) ;
9896: LD_EXP 27
9900: PPUSH
9901: LD_STRING DS-Cross-1
9903: PPUSH
9904: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9908: LD_EXP 27
9912: PPUSH
9913: LD_STRING DS-Cross-2
9915: PPUSH
9916: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9920: LD_EXP 27
9924: PPUSH
9925: LD_STRING DS-Cross-3
9927: PPUSH
9928: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9932: LD_EXP 27
9936: PPUSH
9937: LD_STRING DS-Cross-4
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Ibrahim ) then
9944: LD_EXP 24
9948: PPUSH
9949: CALL_OW 302
9953: IFFALSE 10009
// begin if ibrahimJoinedIn04 then
9955: LD_EXP 4
9959: IFFALSE 9973
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9961: LD_EXP 24
9965: PPUSH
9966: LD_STRING DI-Cross-b-5
9968: PPUSH
9969: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9973: LD_EXP 24
9977: PPUSH
9978: LD_STRING DI-Cross-b-6
9980: PPUSH
9981: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9985: LD_EXP 24
9989: PPUSH
9990: LD_STRING DI-Cross-b-7
9992: PPUSH
9993: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
9997: LD_EXP 27
10001: PPUSH
10002: LD_STRING DS-Cross-8
10004: PPUSH
10005: CALL_OW 88
// end ; end else
10009: GO 10043
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10011: LD_EXP 34
10015: PPUSH
10016: LD_INT 50
10018: PUSH
10019: EMPTY
10020: LIST
10021: PPUSH
10022: CALL_OW 72
10026: IFFALSE 10043
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10028: LD_EXP 34
10032: PPUSH
10033: LD_STRING DArm-Cross-c-1
10035: PPUSH
10036: LD_STRING DArf-Cross-c-1
10038: PPUSH
10039: CALL 1262 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10043: LD_EXP 56
10047: PPUSH
10048: LD_INT 2
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 322
// DialogueOff ;
10058: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10062: LD_STRING Crane
10064: PPUSH
10065: CALL_OW 337
// spottedCrossRoad := true ;
10069: LD_ADDR_EXP 8
10073: PUSH
10074: LD_INT 1
10076: ST_TO_ADDR
// end ;
10077: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10078: LD_INT 22
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 2
10090: PUSH
10091: LD_INT 30
10093: PUSH
10094: LD_INT 0
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 30
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: PUSH
10125: LD_EXP 26
10129: PPUSH
10130: CALL_OW 302
10134: PUSH
10135: LD_EXP 34
10139: OR
10140: AND
10141: IFFALSE 10353
10143: GO 10145
10145: DISABLE
// begin DialogueOn ;
10146: CALL_OW 6
// if Kaia then
10150: LD_EXP 26
10154: IFFALSE 10167
// CenterNowOnUnits ( Kaia ) else
10156: LD_EXP 26
10160: PPUSH
10161: CALL_OW 87
10165: GO 10176
// CenterNowOnUnits ( Heike ) ;
10167: LD_EXP 21
10171: PPUSH
10172: CALL_OW 87
// if IsOk ( Kaia ) then
10176: LD_EXP 26
10180: PPUSH
10181: CALL_OW 302
10185: IFFALSE 10201
// Say ( Kaia , DK-Cam-1 ) else
10187: LD_EXP 26
10191: PPUSH
10192: LD_STRING DK-Cam-1
10194: PPUSH
10195: CALL_OW 88
10199: GO 10216
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10201: LD_EXP 34
10205: PPUSH
10206: LD_STRING DArm-Cam-1
10208: PPUSH
10209: LD_STRING DArf-Cam-1
10211: PPUSH
10212: CALL 1262 0 3
// Say ( Heike , DH-Cam-2 ) ;
10216: LD_EXP 21
10220: PPUSH
10221: LD_STRING DH-Cam-2
10223: PPUSH
10224: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10228: LD_EXP 21
10232: PPUSH
10233: LD_STRING DH-Cam-3
10235: PPUSH
10236: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10240: LD_EXP 21
10244: PPUSH
10245: LD_STRING DH-Cam-4
10247: PPUSH
10248: CALL_OW 88
// if IsOk ( Kaia ) then
10252: LD_EXP 26
10256: PPUSH
10257: CALL_OW 302
10261: IFFALSE 10277
// Say ( Kaia , DK-Cam-5 ) else
10263: LD_EXP 26
10267: PPUSH
10268: LD_STRING DK-Cam-5
10270: PPUSH
10271: CALL_OW 88
10275: GO 10292
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10277: LD_EXP 34
10281: PPUSH
10282: LD_STRING DArm-Cam-5
10284: PPUSH
10285: LD_STRING DArf-Cam-5
10287: PPUSH
10288: CALL 1262 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10292: LD_EXP 30
10296: PPUSH
10297: LD_STRING DO-Cam-6
10299: PPUSH
10300: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10304: LD_EXP 30
10308: PPUSH
10309: LD_STRING DO-Cam-7
10311: PPUSH
10312: CALL_OW 88
// DialogueOff ;
10316: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10320: LD_STRING Radar
10322: PPUSH
10323: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10327: LD_INT 6
10329: PPUSH
10330: LD_INT 2
10332: PPUSH
10333: LD_INT 1
10335: PPUSH
10336: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10340: LD_INT 20
10342: PPUSH
10343: LD_INT 2
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: CALL_OW 324
// end ;
10353: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10354: LD_INT 22
10356: PUSH
10357: LD_INT 2
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 34
10369: PUSH
10370: LD_INT 30
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 35
10379: PUSH
10380: LD_INT 30
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PPUSH
10396: CALL_OW 69
10400: IFFALSE 10412
10402: GO 10404
10404: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10405: LD_STRING RadarDone
10407: PPUSH
10408: CALL_OW 337
10412: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10413: LD_INT 22
10415: PUSH
10416: LD_INT 2
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 34
10425: PUSH
10426: LD_EXP 50
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: IFFALSE 10455
10445: GO 10447
10447: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10448: LD_STRING CraneDone
10450: PPUSH
10451: CALL_OW 337
10455: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10456: LD_EXP 30
10460: PPUSH
10461: CALL_OW 302
10465: PUSH
10466: LD_EXP 33
10470: PPUSH
10471: CALL_OW 302
10475: AND
10476: PUSH
10477: LD_INT 6
10479: PPUSH
10480: LD_INT 2
10482: PPUSH
10483: CALL_OW 321
10487: PUSH
10488: LD_INT 2
10490: EQUAL
10491: AND
10492: PUSH
10493: LD_EXP 33
10497: PPUSH
10498: LD_EXP 21
10502: PPUSH
10503: CALL_OW 296
10507: PUSH
10508: LD_INT 10
10510: LESS
10511: PUSH
10512: LD_EXP 33
10516: PPUSH
10517: CALL_OW 310
10521: OR
10522: AND
10523: IFFALSE 10737
10525: GO 10527
10527: DISABLE
// begin DialogueOn ;
10528: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10532: LD_EXP 33
10536: PPUSH
10537: LD_STRING DA-RC-1
10539: PPUSH
10540: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10544: LD_EXP 33
10548: PPUSH
10549: LD_STRING DA-RC-2
10551: PPUSH
10552: CALL_OW 88
// if IsOk ( Kaia ) then
10556: LD_EXP 26
10560: PPUSH
10561: CALL_OW 302
10565: IFFALSE 10639
// begin Say ( Kaia , DK-RC-3 ) ;
10567: LD_EXP 26
10571: PPUSH
10572: LD_STRING DK-RC-3
10574: PPUSH
10575: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10579: LD_EXP 33
10583: PPUSH
10584: LD_STRING DA-RC-4
10586: PPUSH
10587: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10591: LD_EXP 26
10595: PPUSH
10596: LD_STRING DK-RC-5
10598: PPUSH
10599: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10603: LD_EXP 33
10607: PPUSH
10608: LD_STRING DA-RC-6
10610: PPUSH
10611: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10615: LD_EXP 26
10619: PPUSH
10620: LD_STRING DK-RC-7
10622: PPUSH
10623: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10627: LD_EXP 33
10631: PPUSH
10632: LD_STRING DA-RC-8
10634: PPUSH
10635: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10639: LD_EXP 21
10643: PPUSH
10644: LD_STRING DH-RC-9
10646: PPUSH
10647: CALL_OW 88
// if IsOk ( Markov ) then
10651: LD_EXP 28
10655: PPUSH
10656: CALL_OW 302
10660: IFFALSE 10688
// begin Say ( Markov , DMar-RC-10 ) ;
10662: LD_EXP 28
10666: PPUSH
10667: LD_STRING DMar-RC-10
10669: PPUSH
10670: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10674: LD_EXP 28
10678: PPUSH
10679: LD_STRING DMar-RC-11
10681: PPUSH
10682: CALL_OW 88
// end else
10686: GO 10700
// begin Say ( Olaf , DO-RC-a-10 ) ;
10688: LD_EXP 30
10692: PPUSH
10693: LD_STRING DO-RC-a-10
10695: PPUSH
10696: CALL_OW 88
// end ; DialogueOff ;
10700: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10704: LD_STRING RemoteControl
10706: PPUSH
10707: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10711: LD_INT 15
10713: PPUSH
10714: LD_INT 2
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10724: LD_INT 22
10726: PPUSH
10727: LD_INT 2
10729: PPUSH
10730: LD_INT 1
10732: PPUSH
10733: CALL_OW 324
// end ;
10737: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10738: LD_INT 12
10740: PPUSH
10741: LD_INT 22
10743: PUSH
10744: LD_INT 2
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 70
10755: IFFALSE 11122
10757: GO 10759
10759: DISABLE
10760: LD_INT 0
10762: PPUSH
// begin PrepareWestBase ;
10763: CALL 3902 0 0
// westBaseSpotted := true ;
10767: LD_ADDR_EXP 5
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10775: LD_INT 70
10777: PPUSH
10778: CALL_OW 67
// InGameOn ;
10782: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10786: LD_INT 56
10788: PPUSH
10789: LD_INT 77
10791: PPUSH
10792: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10796: LD_INT 56
10798: PPUSH
10799: LD_INT 77
10801: PPUSH
10802: LD_INT 2
10804: PPUSH
10805: LD_INT 12
10807: NEG
10808: PPUSH
10809: CALL_OW 330
// wait ( 0 0$2 ) ;
10813: LD_INT 70
10815: PPUSH
10816: CALL_OW 67
// DialogueOn ;
10820: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10824: LD_EXP 21
10828: PPUSH
10829: LD_STRING DH-Rbase-1
10831: PPUSH
10832: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10836: LD_EXP 26
10840: PPUSH
10841: LD_STRING DK-Rbase-2
10843: PPUSH
10844: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10848: LD_EXP 26
10852: PPUSH
10853: LD_STRING DK-Rbase-3
10855: PPUSH
10856: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10860: LD_EXP 26
10864: PPUSH
10865: LD_STRING DK-Rbase-4
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10876: LD_INT 56
10878: PPUSH
10879: LD_INT 77
10881: PPUSH
10882: LD_INT 2
10884: PPUSH
10885: CALL_OW 331
// InGameOff ;
10889: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10893: LD_INT 35
10895: PPUSH
10896: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10900: LD_EXP 42
10904: NOT
10905: PUSH
10906: LD_EXP 43
10910: NOT
10911: AND
10912: IFFALSE 10893
// wait ( 0 0$2 ) ;
10914: LD_INT 70
10916: PPUSH
10917: CALL_OW 67
// if IsOk ( Kaia ) then
10921: LD_EXP 26
10925: PPUSH
10926: CALL_OW 302
10930: IFFALSE 11045
// begin DialogueOn ;
10932: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10936: LD_INT 56
10938: PPUSH
10939: LD_INT 81
10941: PPUSH
10942: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
10946: LD_EXP 26
10950: PPUSH
10951: LD_STRING DK-Rbase-5
10953: PPUSH
10954: CALL_OW 88
// if IsOk ( Givi ) then
10958: LD_EXP 22
10962: PPUSH
10963: CALL_OW 302
10967: IFFALSE 11041
// begin Say ( Givi , DG-Rbase-6 ) ;
10969: LD_EXP 22
10973: PPUSH
10974: LD_STRING DG-Rbase-6
10976: PPUSH
10977: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
10981: LD_EXP 22
10985: PPUSH
10986: LD_STRING DG-Rbase-7
10988: PPUSH
10989: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
10993: LD_EXP 26
10997: PPUSH
10998: LD_STRING DK-Rbase-8
11000: PPUSH
11001: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11005: LD_EXP 22
11009: PPUSH
11010: LD_STRING DG-Rbase-9
11012: PPUSH
11013: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11017: LD_EXP 22
11021: PPUSH
11022: LD_STRING DG-Rbase-10
11024: PPUSH
11025: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11029: LD_EXP 26
11033: PPUSH
11034: LD_STRING DK-Rbase-11
11036: PPUSH
11037: CALL_OW 88
// end ; DialogueOff ;
11041: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: LD_INT 12
11052: PPUSH
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 70
11081: PUSH
11082: FOR_IN
11083: IFFALSE 11099
// SetSide ( i , 2 ) ;
11085: LD_VAR 0 1
11089: PPUSH
11090: LD_INT 2
11092: PPUSH
11093: CALL_OW 235
11097: GO 11082
11099: POP
11100: POP
// westBaseCaptured := true ;
11101: LD_ADDR_EXP 9
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11109: LD_INT 0
11111: PPUSH
11112: LD_INT 2
11114: PPUSH
11115: LD_INT 1
11117: PPUSH
11118: CALL_OW 324
// end ;
11122: PPOPN 1
11124: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11125: LD_EXP 38
11129: NOT
11130: PUSH
11131: LD_INT 10
11133: PPUSH
11134: CALL_OW 255
11138: PUSH
11139: LD_INT 2
11141: EQUAL
11142: OR
11143: IFFALSE 11280
11145: GO 11147
11147: DISABLE
// begin DialogueOn ;
11148: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11152: LD_EXP 21
11156: PPUSH
11157: LD_STRING DH-Goal-1
11159: PPUSH
11160: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11164: LD_EXP 29
11168: PPUSH
11169: LD_STRING DShar-Goal-2
11171: PPUSH
11172: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11176: LD_EXP 21
11180: PPUSH
11181: LD_STRING DH-Goal-3
11183: PPUSH
11184: CALL_OW 88
// if reinforcementsAllowed then
11188: LD_EXP 14
11192: IFFALSE 11218
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11194: LD_EXP 29
11198: PPUSH
11199: LD_STRING DShar-Goal-4
11201: PPUSH
11202: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11206: LD_EXP 21
11210: PPUSH
11211: LD_STRING DH-Goal-5
11213: PPUSH
11214: CALL_OW 88
// end ; DialogueOff ;
11218: CALL_OW 7
// eastBaseCaptured := true ;
11222: LD_ADDR_EXP 10
11226: PUSH
11227: LD_INT 1
11229: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11230: LD_STRING BaseCaptured
11232: PPUSH
11233: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11237: LD_INT 10
11239: PPUSH
11240: LD_INT 2
11242: PPUSH
11243: CALL_OW 235
// if not reinforcementsAllowed then
11247: LD_EXP 14
11251: NOT
11252: IFFALSE 11256
// exit ;
11254: GO 11280
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11256: LD_INT 21000
11258: PUSH
11259: LD_INT 1050
11261: NEG
11262: PPUSH
11263: LD_INT 1050
11265: PPUSH
11266: CALL_OW 12
11270: PLUS
11271: PPUSH
11272: CALL_OW 67
// PrepareReinforcements ;
11276: CALL 2230 0 0
// end ;
11280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11281: LD_INT 22
11283: PUSH
11284: LD_INT 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 30
11293: PUSH
11294: LD_INT 13
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PPUSH
11305: CALL_OW 69
11309: IFFALSE 11326
11311: GO 11313
11313: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11314: LD_EXP 22
11318: PPUSH
11319: LD_STRING DG-Lab-1
11321: PPUSH
11322: CALL_OW 88
// end ;
11326: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11327: LD_INT 5
11329: PPUSH
11330: LD_INT 2
11332: PPUSH
11333: CALL_OW 321
11337: PUSH
11338: LD_INT 2
11340: EQUAL
11341: PUSH
11342: LD_EXP 22
11346: PPUSH
11347: CALL_OW 302
11351: AND
11352: IFFALSE 11413
11354: GO 11356
11356: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11357: LD_EXP 22
11361: PPUSH
11362: LD_STRING DG-Stim-1
11364: PPUSH
11365: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11369: LD_EXP 21
11373: PPUSH
11374: LD_STRING DH-Stim-2
11376: PPUSH
11377: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11381: LD_EXP 22
11385: PPUSH
11386: LD_STRING DG-Stim-3
11388: PPUSH
11389: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11393: LD_EXP 21
11397: PPUSH
11398: LD_STRING DH-Stim-4
11400: PPUSH
11401: CALL_OW 88
// drugsResearched := true ;
11405: LD_ADDR_EXP 11
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// end ;
11413: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11414: LD_EXP 11
11418: IFFALSE 11730
11420: GO 11422
11422: DISABLE
11423: LD_INT 0
11425: PPUSH
11426: PPUSH
11427: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: LD_EXP 21
11437: PUSH
11438: LD_EXP 22
11442: PUSH
11443: LD_EXP 30
11447: PUSH
11448: LD_EXP 28
11452: PUSH
11453: LD_EXP 26
11457: PUSH
11458: LD_EXP 27
11462: PUSH
11463: LD_EXP 32
11467: PUSH
11468: LD_EXP 25
11472: PUSH
11473: LD_EXP 23
11477: PUSH
11478: LD_EXP 24
11482: PUSH
11483: LD_EXP 33
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11501: LD_ADDR_VAR 0 3
11505: PUSH
11506: LD_STRING H
11508: PUSH
11509: LD_STRING G
11511: PUSH
11512: LD_STRING O
11514: PUSH
11515: LD_STRING Mar
11517: PUSH
11518: LD_STRING K
11520: PUSH
11521: LD_STRING S
11523: PUSH
11524: LD_STRING Ks
11526: PUSH
11527: LD_STRING Kam
11529: PUSH
11530: LD_STRING M
11532: PUSH
11533: LD_STRING I
11535: PUSH
11536: LD_STRING A
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11552: LD_INT 35
11554: PPUSH
11555: CALL_OW 67
// for i := tmp downto 1 do
11559: LD_ADDR_VAR 0 1
11563: PUSH
11564: DOUBLE
11565: LD_VAR 0 2
11569: INC
11570: ST_TO_ADDR
11571: LD_INT 1
11573: PUSH
11574: FOR_DOWNTO
11575: IFFALSE 11721
// if GetLives ( tmp [ i ] ) < 250 then
11577: LD_VAR 0 2
11581: PUSH
11582: LD_VAR 0 1
11586: ARRAY
11587: PPUSH
11588: CALL_OW 256
11592: PUSH
11593: LD_INT 250
11595: LESS
11596: IFFALSE 11719
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11598: LD_ADDR_EXP 19
11602: PUSH
11603: LD_EXP 19
11607: PUSH
11608: LD_INT 1
11610: PLUS
11611: ST_TO_ADDR
// DialogueOn ;
11612: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11616: LD_VAR 0 2
11620: PUSH
11621: LD_VAR 0 1
11625: ARRAY
11626: PPUSH
11627: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11631: LD_VAR 0 2
11635: PUSH
11636: LD_VAR 0 1
11640: ARRAY
11641: PPUSH
11642: LD_STRING D
11644: PUSH
11645: LD_VAR 0 3
11649: PUSH
11650: LD_VAR 0 1
11654: ARRAY
11655: STR
11656: PUSH
11657: LD_STRING -Stim-a-1
11659: STR
11660: PPUSH
11661: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_VAR 0 2
11674: PPUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 3
11684: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11685: LD_ADDR_VAR 0 3
11689: PUSH
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 3
11704: ST_TO_ADDR
// drugsTested := true ;
11705: LD_ADDR_EXP 6
11709: PUSH
11710: LD_INT 1
11712: ST_TO_ADDR
// DialogueOff ;
11713: CALL_OW 7
// break ;
11717: GO 11721
// end ;
11719: GO 11574
11721: POP
11722: POP
// until not tmp ;
11723: LD_VAR 0 2
11727: NOT
11728: IFFALSE 11552
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11733: LD_INT 22
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 34
11745: PUSH
11746: LD_INT 31
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL_OW 69
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 33
11774: PUSH
11775: LD_INT 2
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL_OW 69
11790: AND
11791: IFFALSE 11804
11793: GO 11795
11795: DISABLE
// remoteControlConstructed := true ;
11796: LD_ADDR_EXP 12
11800: PUSH
11801: LD_INT 1
11803: ST_TO_ADDR
11804: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11805: LD_EXP 12
11809: IFFALSE 12109
11811: GO 11813
11813: DISABLE
11814: LD_INT 0
11816: PPUSH
11817: PPUSH
11818: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11819: LD_ADDR_VAR 0 2
11823: PUSH
11824: LD_EXP 21
11828: PUSH
11829: LD_EXP 22
11833: PUSH
11834: LD_EXP 30
11838: PUSH
11839: LD_EXP 28
11843: PUSH
11844: LD_EXP 26
11848: PUSH
11849: LD_EXP 27
11853: PUSH
11854: LD_EXP 32
11858: PUSH
11859: LD_EXP 25
11863: PUSH
11864: LD_EXP 23
11868: PUSH
11869: LD_EXP 24
11873: PUSH
11874: LD_EXP 33
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11892: LD_ADDR_VAR 0 3
11896: PUSH
11897: LD_STRING H
11899: PUSH
11900: LD_STRING G
11902: PUSH
11903: LD_STRING O
11905: PUSH
11906: LD_STRING Mar
11908: PUSH
11909: LD_STRING K
11911: PUSH
11912: LD_STRING S
11914: PUSH
11915: LD_STRING Ks
11917: PUSH
11918: LD_STRING Kam
11920: PUSH
11921: LD_STRING M
11923: PUSH
11924: LD_STRING I
11926: PUSH
11927: LD_STRING A
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11943: LD_INT 35
11945: PPUSH
11946: CALL_OW 67
// for i := tmp downto 1 do
11950: LD_ADDR_VAR 0 1
11954: PUSH
11955: DOUBLE
11956: LD_VAR 0 2
11960: INC
11961: ST_TO_ADDR
11962: LD_INT 1
11964: PUSH
11965: FOR_DOWNTO
11966: IFFALSE 12100
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
11968: LD_VAR 0 2
11972: PUSH
11973: LD_VAR 0 1
11977: ARRAY
11978: PPUSH
11979: CALL_OW 257
11983: PUSH
11984: LD_INT 3
11986: EQUAL
11987: PUSH
11988: LD_VAR 0 2
11992: PUSH
11993: LD_VAR 0 1
11997: ARRAY
11998: PPUSH
11999: CALL_OW 432
12003: AND
12004: IFFALSE 12098
// begin DialogueOn ;
12006: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12010: LD_VAR 0 2
12014: PUSH
12015: LD_VAR 0 1
12019: ARRAY
12020: PPUSH
12021: LD_STRING D
12023: PUSH
12024: LD_VAR 0 3
12028: PUSH
12029: LD_VAR 0 1
12033: ARRAY
12034: STR
12035: PUSH
12036: LD_STRING -RC-a-1
12038: STR
12039: PPUSH
12040: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12044: LD_ADDR_VAR 0 2
12048: PUSH
12049: LD_VAR 0 2
12053: PPUSH
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 3
12063: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12064: LD_ADDR_VAR 0 3
12068: PUSH
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_VAR 0 1
12078: PPUSH
12079: CALL_OW 3
12083: ST_TO_ADDR
// DialogueOff ;
12084: CALL_OW 7
// remoteControlTested := true ;
12088: LD_ADDR_EXP 7
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// break ;
12096: GO 12100
// end ;
12098: GO 11965
12100: POP
12101: POP
// until not tmp ;
12102: LD_VAR 0 2
12106: NOT
12107: IFFALSE 11943
// end ;
12109: PPOPN 3
12111: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12112: LD_EXP 7
12116: PUSH
12117: LD_EXP 28
12121: PPUSH
12122: CALL_OW 302
12126: AND
12127: IFFALSE 12156
12129: GO 12131
12131: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12132: LD_EXP 28
12136: PPUSH
12137: LD_STRING DMar-RC-a-2
12139: PPUSH
12140: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12144: LD_EXP 28
12148: PPUSH
12149: LD_STRING DMar-RC-a-3
12151: PPUSH
12152: CALL_OW 88
// end ;
12156: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12157: LD_EXP 14
12161: PUSH
12162: LD_EXP 21
12166: PPUSH
12167: LD_EXP 33
12171: PPUSH
12172: CALL_OW 296
12176: PUSH
12177: LD_INT 8
12179: LESS
12180: AND
12181: PUSH
12182: LD_INT 2
12184: PPUSH
12185: CALL_OW 463
12189: NOT
12190: AND
12191: PUSH
12192: LD_EXP 33
12196: PPUSH
12197: CALL_OW 302
12201: AND
12202: PUSH
12203: LD_EXP 21
12207: PPUSH
12208: CALL_OW 302
12212: AND
12213: IFFALSE 12391
12215: GO 12217
12217: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12218: LD_EXP 33
12222: PPUSH
12223: CALL_OW 310
12227: NOT
12228: IFFALSE 12244
// ComTurnUnit ( Aviradze , Heike ) ;
12230: LD_EXP 33
12234: PPUSH
12235: LD_EXP 21
12239: PPUSH
12240: CALL_OW 119
// if not IsInUnit ( Heike ) then
12244: LD_EXP 21
12248: PPUSH
12249: CALL_OW 310
12253: NOT
12254: IFFALSE 12270
// ComTurnUnit ( Heike , Aviradze ) ;
12256: LD_EXP 21
12260: PPUSH
12261: LD_EXP 33
12265: PPUSH
12266: CALL_OW 119
// wait ( 0 0$1 ) ;
12270: LD_INT 35
12272: PPUSH
12273: CALL_OW 67
// DialogueOn ;
12277: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12281: LD_EXP 33
12285: PPUSH
12286: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12290: LD_EXP 21
12294: PPUSH
12295: LD_STRING DH-Beria-1
12297: PPUSH
12298: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12302: LD_EXP 33
12306: PPUSH
12307: LD_STRING DA-Beria-2
12309: PPUSH
12310: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12314: LD_EXP 21
12318: PPUSH
12319: LD_STRING DH-Beria-3
12321: PPUSH
12322: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12326: LD_EXP 33
12330: PPUSH
12331: LD_STRING DA-Beria-4
12333: PPUSH
12334: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12338: LD_EXP 33
12342: PPUSH
12343: LD_STRING DA-Beria-5
12345: PPUSH
12346: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12350: LD_EXP 33
12354: PPUSH
12355: LD_STRING DA-Beria-6
12357: PPUSH
12358: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12362: LD_EXP 21
12366: PPUSH
12367: LD_STRING DA-Beria-7
12369: PPUSH
12370: CALL_OW 88
// DialogueOff ;
12374: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12378: LD_INT 52
12380: PPUSH
12381: LD_INT 2
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: CALL_OW 322
// end ;
12391: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12392: LD_EXP 26
12396: PPUSH
12397: CALL_OW 300
12401: PUSH
12402: LD_EXP 26
12406: PPUSH
12407: CALL_OW 256
12411: PUSH
12412: LD_INT 10
12414: LESS
12415: AND
12416: IFFALSE 12453
12418: GO 12420
12420: DISABLE
// begin DialogueOn ;
12421: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12425: LD_EXP 26
12429: PPUSH
12430: LD_STRING DK-Kdeath-1
12432: PPUSH
12433: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12437: LD_EXP 21
12441: PPUSH
12442: LD_STRING DH-Kdeath-2
12444: PPUSH
12445: CALL_OW 88
// DialogueOff ;
12449: CALL_OW 7
// end ;
12453: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12454: LD_INT 2
12456: PPUSH
12457: LD_EXP 39
12461: PPUSH
12462: CALL 1362 0 2
12466: IFFALSE 12483
12468: GO 12470
12470: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12471: LD_EXP 21
12475: PPUSH
12476: LD_STRING DH-Obj-1
12478: PPUSH
12479: CALL_OW 88
12483: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12484: LD_INT 2
12486: PPUSH
12487: LD_EXP 40
12491: PPUSH
12492: CALL 1362 0 2
12496: IFFALSE 12513
12498: GO 12500
12500: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12501: LD_EXP 21
12505: PPUSH
12506: LD_STRING DH-Obj-a-1
12508: PPUSH
12509: CALL_OW 88
12513: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12514: LD_EXP 10
12518: PUSH
12519: LD_OWVAR 1
12523: PUSH
12524: LD_INT 14700
12526: PUSH
12527: LD_INT 13650
12529: PUSH
12530: LD_INT 12600
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: LD_OWVAR 67
12542: ARRAY
12543: GREATEREQUAL
12544: OR
12545: IFFALSE 12573
12547: GO 12549
12549: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12550: LD_INT 4200
12552: PPUSH
12553: LD_INT 5250
12555: PPUSH
12556: CALL_OW 12
12560: PPUSH
12561: CALL_OW 67
// convoyStarted := true ;
12565: LD_ADDR_EXP 17
12569: PUSH
12570: LD_INT 1
12572: ST_TO_ADDR
// end ;
12573: END
// every 0 0$1 trigger convoyStarted do
12574: LD_EXP 17
12578: IFFALSE 12662
12580: GO 12582
12582: DISABLE
// begin DialogueOn ;
12583: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12587: LD_EXP 29
12591: PPUSH
12592: LD_STRING DShar-Convoy-1
12594: PPUSH
12595: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12599: LD_EXP 21
12603: PPUSH
12604: LD_STRING DH-Convoy-2
12606: PPUSH
12607: CALL_OW 88
// DialogueOff ;
12611: CALL_OW 7
// PrepareConvoy ;
12615: CALL 4541 0 0
// repeat wait ( rand ( 5 5$30 , 8 8$30 ) ) ;
12619: LD_INT 11550
12621: PPUSH
12622: LD_INT 17850
12624: PPUSH
12625: CALL_OW 12
12629: PPUSH
12630: CALL_OW 67
// PrepareConvoy ;
12634: CALL 4541 0 0
// convoyCounter := convoyCounter - 1 ;
12638: LD_ADDR_EXP 16
12642: PUSH
12643: LD_EXP 16
12647: PUSH
12648: LD_INT 1
12650: MINUS
12651: ST_TO_ADDR
// until convoyCounter <= 0 ;
12652: LD_EXP 16
12656: PUSH
12657: LD_INT 0
12659: LESSEQUAL
12660: IFFALSE 12619
// end ;
12662: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12663: LD_EXP 15
12667: PUSH
12668: LD_INT 10
12670: GREATEREQUAL
12671: IFFALSE 12688
12673: GO 12675
12675: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12676: LD_EXP 31
12680: PPUSH
12681: LD_STRING DOm-Fail-1
12683: PPUSH
12684: CALL_OW 94
12688: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12689: LD_EXP 39
12693: NOT
12694: PUSH
12695: LD_EXP 40
12699: NOT
12700: AND
12701: IFFALSE 12713
12703: GO 12705
12705: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12706: LD_STRING RaiderDone
12708: PPUSH
12709: CALL_OW 337
12713: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12714: LD_INT 22
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 33
12726: PUSH
12727: LD_INT 2
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: PUSH
12743: LD_INT 3
12745: GREATEREQUAL
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 34
12759: PUSH
12760: LD_INT 31
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: PUSH
12776: LD_INT 2
12778: GREATEREQUAL
12779: AND
12780: IFFALSE 12792
12782: GO 12784
12784: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12785: LD_STRING RemoteControlDone
12787: PPUSH
12788: CALL_OW 337
12792: END
// every 0 0$1 trigger convoyCounter = 0 and not UnitFilter ( ruConvoySquad , [ f_type , unit_human ] ) do var tmp ;
12793: LD_EXP 16
12797: PUSH
12798: LD_INT 0
12800: EQUAL
12801: PUSH
12802: LD_EXP 41
12806: PPUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 72
12821: NOT
12822: AND
12823: IFFALSE 13640
12825: GO 12827
12827: DISABLE
12828: LD_INT 0
12830: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12831: LD_STRING ReinforcementsDone
12833: PPUSH
12834: CALL_OW 337
// music_class := music_victory ;
12838: LD_ADDR_OWVAR 72
12842: PUSH
12843: LD_INT 4
12845: ST_TO_ADDR
// InGameOn ;
12846: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12850: LD_EXP 21
12854: PPUSH
12855: LD_STRING DH-end-1
12857: PPUSH
12858: CALL_OW 88
// wait ( 0 0$2 ) ;
12862: LD_INT 70
12864: PPUSH
12865: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12869: LD_EXP 29
12873: PPUSH
12874: LD_STRING DShar-end-2
12876: PPUSH
12877: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12881: LD_EXP 39
12885: NOT
12886: PUSH
12887: LD_EXP 40
12891: NOT
12892: AND
12893: IFFALSE 12909
// begin Say ( Heike , DH-end-3 ) ;
12895: LD_EXP 21
12899: PPUSH
12900: LD_STRING DH-end-3
12902: PPUSH
12903: CALL_OW 88
// end else
12907: GO 13006
// begin Say ( Heike , DH-end-a-3 ) ;
12909: LD_EXP 21
12913: PPUSH
12914: LD_STRING DH-end-a-3
12916: PPUSH
12917: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12921: LD_EXP 29
12925: PPUSH
12926: LD_STRING DShar-end-a-4
12928: PPUSH
12929: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
12933: LD_EXP 21
12937: PPUSH
12938: LD_STRING DH-end-a-5
12940: PPUSH
12941: CALL_OW 88
// InGameOff ;
12945: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12949: LD_INT 35
12951: PPUSH
12952: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12956: LD_INT 22
12958: PUSH
12959: LD_INT 3
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 21
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PPUSH
12980: CALL_OW 69
12984: PUSH
12985: LD_INT 0
12987: EQUAL
12988: IFFALSE 12949
// InGameOn ;
12990: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
12994: LD_EXP 21
12998: PPUSH
12999: LD_STRING DH-end-a-6
13001: PPUSH
13002: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13006: LD_EXP 29
13010: PPUSH
13011: LD_STRING DShar-end-3
13013: PPUSH
13014: CALL_OW 94
// if not flamethrowerBuilt then
13018: LD_EXP 20
13022: NOT
13023: IFFALSE 13032
// SetAchievement ( ACH_FIRE ) ;
13025: LD_STRING ACH_FIRE
13027: PPUSH
13028: CALL_OW 543
// if drugsTested then
13032: LD_EXP 6
13036: IFFALSE 13050
// AddMedal ( med1 , 1 ) else
13038: LD_STRING med1
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: CALL_OW 101
13048: GO 13090
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13050: LD_INT 5
13052: PPUSH
13053: LD_INT 2
13055: PPUSH
13056: CALL_OW 321
13060: PUSH
13061: LD_INT 2
13063: EQUAL
13064: IFFALSE 13079
// AddMedal ( med1 , - 1 ) else
13066: LD_STRING med1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
13077: GO 13090
// AddMedal ( med1 , - 2 ) ;
13079: LD_STRING med1
13081: PPUSH
13082: LD_INT 2
13084: NEG
13085: PPUSH
13086: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
13090: LD_INT 22
13092: PUSH
13093: LD_INT 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 33
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PPUSH
13114: CALL_OW 69
13118: PUSH
13119: LD_INT 3
13121: GREATEREQUAL
13122: PUSH
13123: LD_INT 22
13125: PUSH
13126: LD_INT 2
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 34
13135: PUSH
13136: LD_INT 31
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PPUSH
13147: CALL_OW 69
13151: PUSH
13152: LD_INT 2
13154: GREATEREQUAL
13155: AND
13156: IFFALSE 13170
// AddMedal ( med2 , 1 ) else
13158: LD_STRING med2
13160: PPUSH
13161: LD_INT 1
13163: PPUSH
13164: CALL_OW 101
13168: GO 13181
// AddMedal ( med2 , - 1 ) ;
13170: LD_STRING med2
13172: PPUSH
13173: LD_INT 1
13175: NEG
13176: PPUSH
13177: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13181: LD_EXP 15
13185: PUSH
13186: LD_INT 10
13188: PUSH
13189: LD_INT 8
13191: PUSH
13192: LD_INT 6
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: LD_OWVAR 67
13204: ARRAY
13205: LESS
13206: IFFALSE 13220
// AddMedal ( med3 , 1 ) else
13208: LD_STRING med3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 101
13218: GO 13231
// AddMedal ( med3 , - 1 ) ;
13220: LD_STRING med3
13222: PPUSH
13223: LD_INT 1
13225: NEG
13226: PPUSH
13227: CALL_OW 101
// GiveMedals ( MAIN ) ;
13231: LD_STRING MAIN
13233: PPUSH
13234: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13238: LD_INT 22
13240: PUSH
13241: LD_INT 2
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 23
13250: PUSH
13251: LD_INT 2
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 1
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: PPUSH
13278: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13282: LD_EXP 15
13286: PPUSH
13287: LD_STRING 05_ConvoySavedCounter
13289: PPUSH
13290: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13294: LD_EXP 13
13298: PPUSH
13299: LD_STRING 05_Radar
13301: PPUSH
13302: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13306: LD_EXP 6
13310: PPUSH
13311: LD_STRING 05_DrugsTested
13313: PPUSH
13314: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13318: LD_INT 22
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 33
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 69
13346: PUSH
13347: LD_INT 3
13349: GREATEREQUAL
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 34
13363: PUSH
13364: LD_INT 31
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: PUSH
13380: LD_INT 2
13382: GREATEREQUAL
13383: AND
13384: PPUSH
13385: LD_STRING 05_RemoteControl
13387: PPUSH
13388: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13392: LD_EXP 21
13396: PPUSH
13397: LD_STRING 05_Heike
13399: PPUSH
13400: CALL_OW 38
// if Aviradze then
13404: LD_EXP 33
13408: IFFALSE 13422
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13410: LD_EXP 33
13414: PPUSH
13415: LD_STRING 05_Aviradze
13417: PPUSH
13418: CALL_OW 38
// if Ibrahim then
13422: LD_EXP 24
13426: IFFALSE 13440
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13428: LD_EXP 24
13432: PPUSH
13433: LD_STRING 05_Ibrahim
13435: PPUSH
13436: CALL_OW 38
// if Kamil then
13440: LD_EXP 25
13444: IFFALSE 13458
// SaveCharacters ( Kamil , 05_Kamil ) ;
13446: LD_EXP 25
13450: PPUSH
13451: LD_STRING 05_Kamil
13453: PPUSH
13454: CALL_OW 38
// if Sophia then
13458: LD_EXP 27
13462: IFFALSE 13476
// SaveCharacters ( Sophia , 05_Sophia ) ;
13464: LD_EXP 27
13468: PPUSH
13469: LD_STRING 05_Sophia
13471: PPUSH
13472: CALL_OW 38
// if Kaia then
13476: LD_EXP 26
13480: IFFALSE 13494
// SaveCharacters ( Kaia , 05_Kaia ) ;
13482: LD_EXP 26
13486: PPUSH
13487: LD_STRING 05_Kaia
13489: PPUSH
13490: CALL_OW 38
// if Givi then
13494: LD_EXP 22
13498: IFFALSE 13512
// SaveCharacters ( Givi , 05_Givi ) ;
13500: LD_EXP 22
13504: PPUSH
13505: LD_STRING 05_Givi
13507: PPUSH
13508: CALL_OW 38
// if Mike then
13512: LD_EXP 23
13516: IFFALSE 13530
// SaveCharacters ( Mike , 05_Mike ) ;
13518: LD_EXP 23
13522: PPUSH
13523: LD_STRING 05_Mike
13525: PPUSH
13526: CALL_OW 38
// if Markov then
13530: LD_EXP 28
13534: IFFALSE 13548
// SaveCharacters ( Markov , 05_Markov ) ;
13536: LD_EXP 28
13540: PPUSH
13541: LD_STRING 05_Markov
13543: PPUSH
13544: CALL_OW 38
// if Kurt then
13548: LD_EXP 32
13552: IFFALSE 13566
// SaveCharacters ( Kurt , 05_Kurt ) ;
13554: LD_EXP 32
13558: PPUSH
13559: LD_STRING 05_Kurt
13561: PPUSH
13562: CALL_OW 38
// if heikeSecondSquad then
13566: LD_EXP 34
13570: IFFALSE 13584
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13572: LD_EXP 34
13576: PPUSH
13577: LD_STRING 05_others
13579: PPUSH
13580: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13584: LD_ADDR_VAR 0 1
13588: PUSH
13589: LD_INT 22
13591: PUSH
13592: LD_INT 2
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 23
13601: PUSH
13602: LD_INT 0
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: ST_TO_ADDR
// if tmp then
13618: LD_VAR 0 1
13622: IFFALSE 13636
// SaveCharacters ( tmp , 05_apes ) ;
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_STRING 05_apes
13631: PPUSH
13632: CALL_OW 38
// YouWin ;
13636: CALL_OW 103
// end ; end_of_file
13640: PPOPN 1
13642: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13643: LD_EXP 9
13647: PUSH
13648: LD_INT 13
13650: PPUSH
13651: LD_INT 1
13653: PPUSH
13654: CALL_OW 287
13658: PUSH
13659: LD_INT 25
13661: LESS
13662: AND
13663: IFFALSE 13690
13665: GO 13667
13667: DISABLE
// begin enable ;
13668: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13669: LD_INT 1
13671: PPUSH
13672: LD_INT 5
13674: PPUSH
13675: CALL_OW 12
13679: PPUSH
13680: LD_INT 13
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: CALL_OW 55
// end ; end_of_file
13690: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13691: LD_INT 0
13693: PPUSH
// ar_crane := 88 ;
13694: LD_ADDR_EXP 50
13698: PUSH
13699: LD_INT 88
13701: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13702: LD_ADDR_EXP 45
13706: PUSH
13707: LD_INT 89
13709: ST_TO_ADDR
// us_hack := 99 ;
13710: LD_ADDR_EXP 46
13714: PUSH
13715: LD_INT 99
13717: ST_TO_ADDR
// us_artillery := 97 ;
13718: LD_ADDR_EXP 47
13722: PUSH
13723: LD_INT 97
13725: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13726: LD_ADDR_EXP 48
13730: PUSH
13731: LD_INT 91
13733: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13734: LD_ADDR_EXP 49
13738: PUSH
13739: LD_INT 92
13741: ST_TO_ADDR
// ru_radar := 98 ;
13742: LD_ADDR_EXP 44
13746: PUSH
13747: LD_INT 98
13749: ST_TO_ADDR
// tech_Artillery := 80 ;
13750: LD_ADDR_EXP 51
13754: PUSH
13755: LD_INT 80
13757: ST_TO_ADDR
// tech_RadMat := 81 ;
13758: LD_ADDR_EXP 52
13762: PUSH
13763: LD_INT 81
13765: ST_TO_ADDR
// tech_BasicTools := 82 ;
13766: LD_ADDR_EXP 53
13770: PUSH
13771: LD_INT 82
13773: ST_TO_ADDR
// tech_Cargo := 83 ;
13774: LD_ADDR_EXP 54
13778: PUSH
13779: LD_INT 83
13781: ST_TO_ADDR
// tech_Track := 84 ;
13782: LD_ADDR_EXP 55
13786: PUSH
13787: LD_INT 84
13789: ST_TO_ADDR
// tech_Crane := 85 ;
13790: LD_ADDR_EXP 56
13794: PUSH
13795: LD_INT 85
13797: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13798: LD_ADDR_EXP 57
13802: PUSH
13803: LD_INT 86
13805: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13806: LD_ADDR_EXP 58
13810: PUSH
13811: LD_INT 87
13813: ST_TO_ADDR
// end ;
13814: LD_VAR 0 1
13818: RET
// every 1 do
13819: GO 13821
13821: DISABLE
// InitGlobalVariables ; end_of_file
13822: CALL 13691 0 0
13826: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13827: LD_INT 0
13829: PPUSH
13830: PPUSH
13831: PPUSH
13832: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 264
13842: PUSH
13843: LD_EXP 48
13847: EQUAL
13848: IFFALSE 13920
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13850: LD_INT 68
13852: PPUSH
13853: LD_VAR 0 1
13857: PPUSH
13858: CALL_OW 255
13862: PPUSH
13863: CALL_OW 321
13867: PUSH
13868: LD_INT 2
13870: EQUAL
13871: IFFALSE 13883
// eff := 70 else
13873: LD_ADDR_VAR 0 4
13877: PUSH
13878: LD_INT 70
13880: ST_TO_ADDR
13881: GO 13891
// eff := 30 ;
13883: LD_ADDR_VAR 0 4
13887: PUSH
13888: LD_INT 30
13890: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 250
13900: PPUSH
13901: LD_VAR 0 1
13905: PPUSH
13906: CALL_OW 251
13910: PPUSH
13911: LD_VAR 0 4
13915: PPUSH
13916: CALL_OW 495
// end ; end ;
13920: LD_VAR 0 2
13924: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13925: LD_INT 0
13927: PPUSH
// end ;
13928: LD_VAR 0 4
13932: RET
// export function SOS_Command ( cmd ) ; begin
13933: LD_INT 0
13935: PPUSH
// end ;
13936: LD_VAR 0 2
13940: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13941: LD_INT 0
13943: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13944: LD_VAR 0 1
13948: PUSH
13949: LD_INT 254
13951: EQUAL
13952: PUSH
13953: LD_VAR 0 2
13957: PPUSH
13958: CALL_OW 264
13962: PUSH
13963: LD_EXP 46
13967: EQUAL
13968: AND
13969: PUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: CALL_OW 263
13979: PUSH
13980: LD_INT 3
13982: EQUAL
13983: AND
13984: IFFALSE 14000
// HackDestroyVehicle ( unit , selectedUnit ) ;
13986: LD_VAR 0 2
13990: PPUSH
13991: LD_VAR 0 3
13995: PPUSH
13996: CALL 15509 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14000: LD_VAR 0 1
14004: PUSH
14005: LD_INT 255
14007: EQUAL
14008: PUSH
14009: LD_VAR 0 2
14013: PPUSH
14014: CALL_OW 264
14018: PUSH
14019: LD_INT 14
14021: PUSH
14022: LD_INT 53
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: IN
14029: AND
14030: PUSH
14031: LD_VAR 0 4
14035: PPUSH
14036: LD_VAR 0 5
14040: PPUSH
14041: CALL_OW 488
14045: AND
14046: IFFALSE 14070
// CutTreeXYR ( unit , x , y , 12 ) ;
14048: LD_VAR 0 2
14052: PPUSH
14053: LD_VAR 0 4
14057: PPUSH
14058: LD_VAR 0 5
14062: PPUSH
14063: LD_INT 12
14065: PPUSH
14066: CALL 14075 0 4
// end ;
14070: LD_VAR 0 6
14074: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14075: LD_INT 0
14077: PPUSH
14078: PPUSH
14079: PPUSH
14080: PPUSH
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14086: LD_VAR 0 1
14090: NOT
14091: PUSH
14092: LD_VAR 0 2
14096: PPUSH
14097: LD_VAR 0 3
14101: PPUSH
14102: CALL_OW 488
14106: NOT
14107: OR
14108: PUSH
14109: LD_VAR 0 4
14113: NOT
14114: OR
14115: IFFALSE 14119
// exit ;
14117: GO 14459
// list := [ ] ;
14119: LD_ADDR_VAR 0 13
14123: PUSH
14124: EMPTY
14125: ST_TO_ADDR
// if x - r < 0 then
14126: LD_VAR 0 2
14130: PUSH
14131: LD_VAR 0 4
14135: MINUS
14136: PUSH
14137: LD_INT 0
14139: LESS
14140: IFFALSE 14152
// min_x := 0 else
14142: LD_ADDR_VAR 0 7
14146: PUSH
14147: LD_INT 0
14149: ST_TO_ADDR
14150: GO 14168
// min_x := x - r ;
14152: LD_ADDR_VAR 0 7
14156: PUSH
14157: LD_VAR 0 2
14161: PUSH
14162: LD_VAR 0 4
14166: MINUS
14167: ST_TO_ADDR
// if y - r < 0 then
14168: LD_VAR 0 3
14172: PUSH
14173: LD_VAR 0 4
14177: MINUS
14178: PUSH
14179: LD_INT 0
14181: LESS
14182: IFFALSE 14194
// min_y := 0 else
14184: LD_ADDR_VAR 0 8
14188: PUSH
14189: LD_INT 0
14191: ST_TO_ADDR
14192: GO 14210
// min_y := y - r ;
14194: LD_ADDR_VAR 0 8
14198: PUSH
14199: LD_VAR 0 3
14203: PUSH
14204: LD_VAR 0 4
14208: MINUS
14209: ST_TO_ADDR
// max_x := x + r ;
14210: LD_ADDR_VAR 0 9
14214: PUSH
14215: LD_VAR 0 2
14219: PUSH
14220: LD_VAR 0 4
14224: PLUS
14225: ST_TO_ADDR
// max_y := y + r ;
14226: LD_ADDR_VAR 0 10
14230: PUSH
14231: LD_VAR 0 3
14235: PUSH
14236: LD_VAR 0 4
14240: PLUS
14241: ST_TO_ADDR
// for _x = min_x to max_x do
14242: LD_ADDR_VAR 0 11
14246: PUSH
14247: DOUBLE
14248: LD_VAR 0 7
14252: DEC
14253: ST_TO_ADDR
14254: LD_VAR 0 9
14258: PUSH
14259: FOR_TO
14260: IFFALSE 14377
// for _y = min_y to max_y do
14262: LD_ADDR_VAR 0 12
14266: PUSH
14267: DOUBLE
14268: LD_VAR 0 8
14272: DEC
14273: ST_TO_ADDR
14274: LD_VAR 0 10
14278: PUSH
14279: FOR_TO
14280: IFFALSE 14373
// begin if not ValidHex ( _x , _y ) then
14282: LD_VAR 0 11
14286: PPUSH
14287: LD_VAR 0 12
14291: PPUSH
14292: CALL_OW 488
14296: NOT
14297: IFFALSE 14301
// continue ;
14299: GO 14279
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14301: LD_VAR 0 11
14305: PPUSH
14306: LD_VAR 0 12
14310: PPUSH
14311: CALL_OW 351
14315: PUSH
14316: LD_VAR 0 11
14320: PPUSH
14321: LD_VAR 0 12
14325: PPUSH
14326: CALL_OW 554
14330: AND
14331: IFFALSE 14371
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14333: LD_ADDR_VAR 0 13
14337: PUSH
14338: LD_VAR 0 13
14342: PPUSH
14343: LD_VAR 0 13
14347: PUSH
14348: LD_INT 1
14350: PLUS
14351: PPUSH
14352: LD_VAR 0 11
14356: PUSH
14357: LD_VAR 0 12
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 2
14370: ST_TO_ADDR
// end ;
14371: GO 14279
14373: POP
14374: POP
14375: GO 14259
14377: POP
14378: POP
// if not list then
14379: LD_VAR 0 13
14383: NOT
14384: IFFALSE 14388
// exit ;
14386: GO 14459
// for i in list do
14388: LD_ADDR_VAR 0 6
14392: PUSH
14393: LD_VAR 0 13
14397: PUSH
14398: FOR_IN
14399: IFFALSE 14457
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14401: LD_VAR 0 1
14405: PPUSH
14406: LD_STRING M
14408: PUSH
14409: LD_VAR 0 6
14413: PUSH
14414: LD_INT 1
14416: ARRAY
14417: PUSH
14418: LD_VAR 0 6
14422: PUSH
14423: LD_INT 2
14425: ARRAY
14426: PUSH
14427: LD_INT 0
14429: PUSH
14430: LD_INT 0
14432: PUSH
14433: LD_INT 0
14435: PUSH
14436: LD_INT 0
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: PPUSH
14451: CALL_OW 447
14455: GO 14398
14457: POP
14458: POP
// end ;
14459: LD_VAR 0 5
14463: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14464: LD_EXP 59
14468: NOT
14469: IFFALSE 14519
14471: GO 14473
14473: DISABLE
// begin initHack := true ;
14474: LD_ADDR_EXP 59
14478: PUSH
14479: LD_INT 1
14481: ST_TO_ADDR
// hackTanks := [ ] ;
14482: LD_ADDR_EXP 60
14486: PUSH
14487: EMPTY
14488: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14489: LD_ADDR_EXP 61
14493: PUSH
14494: EMPTY
14495: ST_TO_ADDR
// hackLimit := 3 ;
14496: LD_ADDR_EXP 62
14500: PUSH
14501: LD_INT 3
14503: ST_TO_ADDR
// hackDist := 12 ;
14504: LD_ADDR_EXP 63
14508: PUSH
14509: LD_INT 12
14511: ST_TO_ADDR
// hackCounter := [ ] ;
14512: LD_ADDR_EXP 64
14516: PUSH
14517: EMPTY
14518: ST_TO_ADDR
// end ;
14519: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14520: LD_EXP 59
14524: PUSH
14525: LD_INT 34
14527: PUSH
14528: LD_EXP 46
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: AND
14542: IFFALSE 14797
14544: GO 14546
14546: DISABLE
14547: LD_INT 0
14549: PPUSH
14550: PPUSH
// begin enable ;
14551: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14552: LD_ADDR_VAR 0 1
14556: PUSH
14557: LD_INT 34
14559: PUSH
14560: LD_EXP 46
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PPUSH
14569: CALL_OW 69
14573: PUSH
14574: FOR_IN
14575: IFFALSE 14795
// begin if not i in hackTanks then
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 60
14586: IN
14587: NOT
14588: IFFALSE 14671
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14590: LD_ADDR_EXP 60
14594: PUSH
14595: LD_EXP 60
14599: PPUSH
14600: LD_EXP 60
14604: PUSH
14605: LD_INT 1
14607: PLUS
14608: PPUSH
14609: LD_VAR 0 1
14613: PPUSH
14614: CALL_OW 1
14618: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14619: LD_ADDR_EXP 61
14623: PUSH
14624: LD_EXP 61
14628: PPUSH
14629: LD_EXP 61
14633: PUSH
14634: LD_INT 1
14636: PLUS
14637: PPUSH
14638: EMPTY
14639: PPUSH
14640: CALL_OW 1
14644: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14645: LD_ADDR_EXP 64
14649: PUSH
14650: LD_EXP 64
14654: PPUSH
14655: LD_EXP 64
14659: PUSH
14660: LD_INT 1
14662: PLUS
14663: PPUSH
14664: EMPTY
14665: PPUSH
14666: CALL_OW 1
14670: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 302
14680: NOT
14681: IFFALSE 14694
// begin HackUnlinkAll ( i ) ;
14683: LD_VAR 0 1
14687: PPUSH
14688: CALL 14800 0 1
// continue ;
14692: GO 14574
// end ; HackCheckCapturedStatus ( i ) ;
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL 15243 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14703: LD_ADDR_VAR 0 2
14707: PUSH
14708: LD_INT 81
14710: PUSH
14711: LD_VAR 0 1
14715: PPUSH
14716: CALL_OW 255
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 33
14727: PUSH
14728: LD_INT 3
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 91
14737: PUSH
14738: LD_VAR 0 1
14742: PUSH
14743: LD_EXP 63
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 50
14755: PUSH
14756: EMPTY
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: ST_TO_ADDR
// if not tmp then
14770: LD_VAR 0 2
14774: NOT
14775: IFFALSE 14779
// continue ;
14777: GO 14574
// HackLink ( i , tmp ) ;
14779: LD_VAR 0 1
14783: PPUSH
14784: LD_VAR 0 2
14788: PPUSH
14789: CALL 14936 0 2
// end ;
14793: GO 14574
14795: POP
14796: POP
// end ;
14797: PPOPN 2
14799: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14800: LD_INT 0
14802: PPUSH
14803: PPUSH
14804: PPUSH
// if not hack in hackTanks then
14805: LD_VAR 0 1
14809: PUSH
14810: LD_EXP 60
14814: IN
14815: NOT
14816: IFFALSE 14820
// exit ;
14818: GO 14931
// index := GetElementIndex ( hackTanks , hack ) ;
14820: LD_ADDR_VAR 0 4
14824: PUSH
14825: LD_EXP 60
14829: PPUSH
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL 33041 0 2
14839: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14840: LD_EXP 61
14844: PUSH
14845: LD_VAR 0 4
14849: ARRAY
14850: IFFALSE 14931
// begin for i in hackTanksCaptured [ index ] do
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_EXP 61
14861: PUSH
14862: LD_VAR 0 4
14866: ARRAY
14867: PUSH
14868: FOR_IN
14869: IFFALSE 14895
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14871: LD_VAR 0 3
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PPUSH
14880: LD_VAR 0 3
14884: PUSH
14885: LD_INT 2
14887: ARRAY
14888: PPUSH
14889: CALL_OW 235
14893: GO 14868
14895: POP
14896: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14897: LD_ADDR_EXP 61
14901: PUSH
14902: LD_EXP 61
14906: PPUSH
14907: LD_VAR 0 4
14911: PPUSH
14912: EMPTY
14913: PPUSH
14914: CALL_OW 1
14918: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14919: LD_VAR 0 1
14923: PPUSH
14924: LD_INT 0
14926: PPUSH
14927: CALL_OW 505
// end ; end ;
14931: LD_VAR 0 2
14935: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14936: LD_INT 0
14938: PPUSH
14939: PPUSH
14940: PPUSH
// if not hack in hackTanks or not vehicles then
14941: LD_VAR 0 1
14945: PUSH
14946: LD_EXP 60
14950: IN
14951: NOT
14952: PUSH
14953: LD_VAR 0 2
14957: NOT
14958: OR
14959: IFFALSE 14963
// exit ;
14961: GO 15238
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14963: LD_ADDR_VAR 0 2
14967: PUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: LD_VAR 0 2
14977: PPUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: CALL 33691 0 4
14988: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14989: LD_ADDR_VAR 0 5
14993: PUSH
14994: LD_EXP 60
14998: PPUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL 33041 0 2
15008: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15009: LD_EXP 61
15013: PUSH
15014: LD_VAR 0 5
15018: ARRAY
15019: PUSH
15020: LD_EXP 62
15024: LESS
15025: IFFALSE 15214
// begin for i := 1 to vehicles do
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: DOUBLE
15033: LD_INT 1
15035: DEC
15036: ST_TO_ADDR
15037: LD_VAR 0 2
15041: PUSH
15042: FOR_TO
15043: IFFALSE 15212
// begin if hackTanksCaptured [ index ] = hackLimit then
15045: LD_EXP 61
15049: PUSH
15050: LD_VAR 0 5
15054: ARRAY
15055: PUSH
15056: LD_EXP 62
15060: EQUAL
15061: IFFALSE 15065
// break ;
15063: GO 15212
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15065: LD_ADDR_EXP 64
15069: PUSH
15070: LD_EXP 64
15074: PPUSH
15075: LD_VAR 0 5
15079: PPUSH
15080: LD_EXP 64
15084: PUSH
15085: LD_VAR 0 5
15089: ARRAY
15090: PUSH
15091: LD_INT 1
15093: PLUS
15094: PPUSH
15095: CALL_OW 1
15099: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15100: LD_ADDR_EXP 61
15104: PUSH
15105: LD_EXP 61
15109: PPUSH
15110: LD_VAR 0 5
15114: PUSH
15115: LD_EXP 61
15119: PUSH
15120: LD_VAR 0 5
15124: ARRAY
15125: PUSH
15126: LD_INT 1
15128: PLUS
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PPUSH
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_VAR 0 2
15149: PUSH
15150: LD_VAR 0 4
15154: ARRAY
15155: PPUSH
15156: CALL_OW 255
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL 33256 0 3
15169: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15170: LD_VAR 0 2
15174: PUSH
15175: LD_VAR 0 4
15179: ARRAY
15180: PPUSH
15181: LD_VAR 0 1
15185: PPUSH
15186: CALL_OW 255
15190: PPUSH
15191: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15195: LD_VAR 0 2
15199: PUSH
15200: LD_VAR 0 4
15204: ARRAY
15205: PPUSH
15206: CALL_OW 141
// end ;
15210: GO 15042
15212: POP
15213: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_EXP 61
15223: PUSH
15224: LD_VAR 0 5
15228: ARRAY
15229: PUSH
15230: LD_INT 0
15232: PLUS
15233: PPUSH
15234: CALL_OW 505
// end ;
15238: LD_VAR 0 3
15242: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15243: LD_INT 0
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
// if not hack in hackTanks then
15249: LD_VAR 0 1
15253: PUSH
15254: LD_EXP 60
15258: IN
15259: NOT
15260: IFFALSE 15264
// exit ;
15262: GO 15504
// index := GetElementIndex ( hackTanks , hack ) ;
15264: LD_ADDR_VAR 0 4
15268: PUSH
15269: LD_EXP 60
15273: PPUSH
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL 33041 0 2
15283: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15284: LD_ADDR_VAR 0 3
15288: PUSH
15289: DOUBLE
15290: LD_EXP 61
15294: PUSH
15295: LD_VAR 0 4
15299: ARRAY
15300: INC
15301: ST_TO_ADDR
15302: LD_INT 1
15304: PUSH
15305: FOR_DOWNTO
15306: IFFALSE 15478
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15308: LD_ADDR_VAR 0 5
15312: PUSH
15313: LD_EXP 61
15317: PUSH
15318: LD_VAR 0 4
15322: ARRAY
15323: PUSH
15324: LD_VAR 0 3
15328: ARRAY
15329: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15330: LD_VAR 0 5
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: CALL_OW 302
15343: NOT
15344: PUSH
15345: LD_VAR 0 5
15349: PUSH
15350: LD_INT 1
15352: ARRAY
15353: PPUSH
15354: CALL_OW 255
15358: PUSH
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 255
15368: NONEQUAL
15369: OR
15370: IFFALSE 15476
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15372: LD_VAR 0 5
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: CALL_OW 305
15385: PUSH
15386: LD_VAR 0 5
15390: PUSH
15391: LD_INT 1
15393: ARRAY
15394: PPUSH
15395: CALL_OW 255
15399: PUSH
15400: LD_VAR 0 1
15404: PPUSH
15405: CALL_OW 255
15409: EQUAL
15410: AND
15411: IFFALSE 15435
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15413: LD_VAR 0 5
15417: PUSH
15418: LD_INT 1
15420: ARRAY
15421: PPUSH
15422: LD_VAR 0 5
15426: PUSH
15427: LD_INT 2
15429: ARRAY
15430: PPUSH
15431: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15435: LD_ADDR_EXP 61
15439: PUSH
15440: LD_EXP 61
15444: PPUSH
15445: LD_VAR 0 4
15449: PPUSH
15450: LD_EXP 61
15454: PUSH
15455: LD_VAR 0 4
15459: ARRAY
15460: PPUSH
15461: LD_VAR 0 3
15465: PPUSH
15466: CALL_OW 3
15470: PPUSH
15471: CALL_OW 1
15475: ST_TO_ADDR
// end ; end ;
15476: GO 15305
15478: POP
15479: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_EXP 61
15489: PUSH
15490: LD_VAR 0 4
15494: ARRAY
15495: PUSH
15496: LD_INT 0
15498: PLUS
15499: PPUSH
15500: CALL_OW 505
// end ;
15504: LD_VAR 0 2
15508: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15509: LD_INT 0
15511: PPUSH
15512: PPUSH
15513: PPUSH
15514: PPUSH
// if not hack in hackTanks then
15515: LD_VAR 0 1
15519: PUSH
15520: LD_EXP 60
15524: IN
15525: NOT
15526: IFFALSE 15530
// exit ;
15528: GO 15615
// index := GetElementIndex ( hackTanks , hack ) ;
15530: LD_ADDR_VAR 0 5
15534: PUSH
15535: LD_EXP 60
15539: PPUSH
15540: LD_VAR 0 1
15544: PPUSH
15545: CALL 33041 0 2
15549: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15550: LD_ADDR_VAR 0 4
15554: PUSH
15555: DOUBLE
15556: LD_INT 1
15558: DEC
15559: ST_TO_ADDR
15560: LD_EXP 61
15564: PUSH
15565: LD_VAR 0 5
15569: ARRAY
15570: PUSH
15571: FOR_TO
15572: IFFALSE 15613
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15574: LD_EXP 61
15578: PUSH
15579: LD_VAR 0 5
15583: ARRAY
15584: PUSH
15585: LD_VAR 0 4
15589: ARRAY
15590: PUSH
15591: LD_INT 1
15593: ARRAY
15594: PUSH
15595: LD_VAR 0 2
15599: EQUAL
15600: IFFALSE 15611
// KillUnit ( vehicle ) ;
15602: LD_VAR 0 2
15606: PPUSH
15607: CALL_OW 66
15611: GO 15571
15613: POP
15614: POP
// end ; end_of_file
15615: LD_VAR 0 3
15619: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
15620: LD_VAR 0 1
15624: PPUSH
15625: LD_VAR 0 2
15629: PPUSH
15630: LD_VAR 0 3
15634: PPUSH
15635: LD_VAR 0 4
15639: PPUSH
15640: LD_VAR 0 5
15644: PPUSH
15645: CALL 13941 0 5
// end ;
15649: PPOPN 5
15651: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15652: LD_VAR 0 2
15656: PUSH
15657: LD_INT 100
15659: EQUAL
15660: IFFALSE 16609
// begin if not StreamModeActive then
15662: LD_EXP 65
15666: NOT
15667: IFFALSE 15677
// StreamModeActive := true ;
15669: LD_ADDR_EXP 65
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// if p3 = 0 then
15677: LD_VAR 0 3
15681: PUSH
15682: LD_INT 0
15684: EQUAL
15685: IFFALSE 15691
// InitStreamMode ;
15687: CALL 16842 0 0
// if p3 = 1 then
15691: LD_VAR 0 3
15695: PUSH
15696: LD_INT 1
15698: EQUAL
15699: IFFALSE 15709
// sRocket := true ;
15701: LD_ADDR_EXP 70
15705: PUSH
15706: LD_INT 1
15708: ST_TO_ADDR
// if p3 = 2 then
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 2
15716: EQUAL
15717: IFFALSE 15727
// sSpeed := true ;
15719: LD_ADDR_EXP 69
15723: PUSH
15724: LD_INT 1
15726: ST_TO_ADDR
// if p3 = 3 then
15727: LD_VAR 0 3
15731: PUSH
15732: LD_INT 3
15734: EQUAL
15735: IFFALSE 15745
// sEngine := true ;
15737: LD_ADDR_EXP 71
15741: PUSH
15742: LD_INT 1
15744: ST_TO_ADDR
// if p3 = 4 then
15745: LD_VAR 0 3
15749: PUSH
15750: LD_INT 4
15752: EQUAL
15753: IFFALSE 15763
// sSpec := true ;
15755: LD_ADDR_EXP 68
15759: PUSH
15760: LD_INT 1
15762: ST_TO_ADDR
// if p3 = 5 then
15763: LD_VAR 0 3
15767: PUSH
15768: LD_INT 5
15770: EQUAL
15771: IFFALSE 15781
// sLevel := true ;
15773: LD_ADDR_EXP 72
15777: PUSH
15778: LD_INT 1
15780: ST_TO_ADDR
// if p3 = 6 then
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 6
15788: EQUAL
15789: IFFALSE 15799
// sArmoury := true ;
15791: LD_ADDR_EXP 73
15795: PUSH
15796: LD_INT 1
15798: ST_TO_ADDR
// if p3 = 7 then
15799: LD_VAR 0 3
15803: PUSH
15804: LD_INT 7
15806: EQUAL
15807: IFFALSE 15817
// sRadar := true ;
15809: LD_ADDR_EXP 74
15813: PUSH
15814: LD_INT 1
15816: ST_TO_ADDR
// if p3 = 8 then
15817: LD_VAR 0 3
15821: PUSH
15822: LD_INT 8
15824: EQUAL
15825: IFFALSE 15835
// sBunker := true ;
15827: LD_ADDR_EXP 75
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if p3 = 9 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 9
15842: EQUAL
15843: IFFALSE 15853
// sHack := true ;
15845: LD_ADDR_EXP 76
15849: PUSH
15850: LD_INT 1
15852: ST_TO_ADDR
// if p3 = 10 then
15853: LD_VAR 0 3
15857: PUSH
15858: LD_INT 10
15860: EQUAL
15861: IFFALSE 15871
// sFire := true ;
15863: LD_ADDR_EXP 77
15867: PUSH
15868: LD_INT 1
15870: ST_TO_ADDR
// if p3 = 11 then
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 11
15878: EQUAL
15879: IFFALSE 15889
// sRefresh := true ;
15881: LD_ADDR_EXP 78
15885: PUSH
15886: LD_INT 1
15888: ST_TO_ADDR
// if p3 = 12 then
15889: LD_VAR 0 3
15893: PUSH
15894: LD_INT 12
15896: EQUAL
15897: IFFALSE 15907
// sExp := true ;
15899: LD_ADDR_EXP 79
15903: PUSH
15904: LD_INT 1
15906: ST_TO_ADDR
// if p3 = 13 then
15907: LD_VAR 0 3
15911: PUSH
15912: LD_INT 13
15914: EQUAL
15915: IFFALSE 15925
// sDepot := true ;
15917: LD_ADDR_EXP 80
15921: PUSH
15922: LD_INT 1
15924: ST_TO_ADDR
// if p3 = 14 then
15925: LD_VAR 0 3
15929: PUSH
15930: LD_INT 14
15932: EQUAL
15933: IFFALSE 15943
// sFlag := true ;
15935: LD_ADDR_EXP 81
15939: PUSH
15940: LD_INT 1
15942: ST_TO_ADDR
// if p3 = 15 then
15943: LD_VAR 0 3
15947: PUSH
15948: LD_INT 15
15950: EQUAL
15951: IFFALSE 15961
// sKamikadze := true ;
15953: LD_ADDR_EXP 89
15957: PUSH
15958: LD_INT 1
15960: ST_TO_ADDR
// if p3 = 16 then
15961: LD_VAR 0 3
15965: PUSH
15966: LD_INT 16
15968: EQUAL
15969: IFFALSE 15979
// sTroll := true ;
15971: LD_ADDR_EXP 90
15975: PUSH
15976: LD_INT 1
15978: ST_TO_ADDR
// if p3 = 17 then
15979: LD_VAR 0 3
15983: PUSH
15984: LD_INT 17
15986: EQUAL
15987: IFFALSE 15997
// sSlow := true ;
15989: LD_ADDR_EXP 91
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// if p3 = 18 then
15997: LD_VAR 0 3
16001: PUSH
16002: LD_INT 18
16004: EQUAL
16005: IFFALSE 16015
// sLack := true ;
16007: LD_ADDR_EXP 92
16011: PUSH
16012: LD_INT 1
16014: ST_TO_ADDR
// if p3 = 19 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_INT 19
16022: EQUAL
16023: IFFALSE 16033
// sTank := true ;
16025: LD_ADDR_EXP 94
16029: PUSH
16030: LD_INT 1
16032: ST_TO_ADDR
// if p3 = 20 then
16033: LD_VAR 0 3
16037: PUSH
16038: LD_INT 20
16040: EQUAL
16041: IFFALSE 16051
// sRemote := true ;
16043: LD_ADDR_EXP 95
16047: PUSH
16048: LD_INT 1
16050: ST_TO_ADDR
// if p3 = 21 then
16051: LD_VAR 0 3
16055: PUSH
16056: LD_INT 21
16058: EQUAL
16059: IFFALSE 16069
// sPowell := true ;
16061: LD_ADDR_EXP 96
16065: PUSH
16066: LD_INT 1
16068: ST_TO_ADDR
// if p3 = 22 then
16069: LD_VAR 0 3
16073: PUSH
16074: LD_INT 22
16076: EQUAL
16077: IFFALSE 16087
// sTeleport := true ;
16079: LD_ADDR_EXP 99
16083: PUSH
16084: LD_INT 1
16086: ST_TO_ADDR
// if p3 = 23 then
16087: LD_VAR 0 3
16091: PUSH
16092: LD_INT 23
16094: EQUAL
16095: IFFALSE 16105
// sOilTower := true ;
16097: LD_ADDR_EXP 101
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// if p3 = 24 then
16105: LD_VAR 0 3
16109: PUSH
16110: LD_INT 24
16112: EQUAL
16113: IFFALSE 16123
// sShovel := true ;
16115: LD_ADDR_EXP 102
16119: PUSH
16120: LD_INT 1
16122: ST_TO_ADDR
// if p3 = 25 then
16123: LD_VAR 0 3
16127: PUSH
16128: LD_INT 25
16130: EQUAL
16131: IFFALSE 16141
// sSheik := true ;
16133: LD_ADDR_EXP 103
16137: PUSH
16138: LD_INT 1
16140: ST_TO_ADDR
// if p3 = 26 then
16141: LD_VAR 0 3
16145: PUSH
16146: LD_INT 26
16148: EQUAL
16149: IFFALSE 16159
// sEarthquake := true ;
16151: LD_ADDR_EXP 105
16155: PUSH
16156: LD_INT 1
16158: ST_TO_ADDR
// if p3 = 27 then
16159: LD_VAR 0 3
16163: PUSH
16164: LD_INT 27
16166: EQUAL
16167: IFFALSE 16177
// sAI := true ;
16169: LD_ADDR_EXP 106
16173: PUSH
16174: LD_INT 1
16176: ST_TO_ADDR
// if p3 = 28 then
16177: LD_VAR 0 3
16181: PUSH
16182: LD_INT 28
16184: EQUAL
16185: IFFALSE 16195
// sCargo := true ;
16187: LD_ADDR_EXP 109
16191: PUSH
16192: LD_INT 1
16194: ST_TO_ADDR
// if p3 = 29 then
16195: LD_VAR 0 3
16199: PUSH
16200: LD_INT 29
16202: EQUAL
16203: IFFALSE 16213
// sDLaser := true ;
16205: LD_ADDR_EXP 110
16209: PUSH
16210: LD_INT 1
16212: ST_TO_ADDR
// if p3 = 30 then
16213: LD_VAR 0 3
16217: PUSH
16218: LD_INT 30
16220: EQUAL
16221: IFFALSE 16231
// sExchange := true ;
16223: LD_ADDR_EXP 111
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// if p3 = 31 then
16231: LD_VAR 0 3
16235: PUSH
16236: LD_INT 31
16238: EQUAL
16239: IFFALSE 16249
// sFac := true ;
16241: LD_ADDR_EXP 112
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// if p3 = 32 then
16249: LD_VAR 0 3
16253: PUSH
16254: LD_INT 32
16256: EQUAL
16257: IFFALSE 16267
// sPower := true ;
16259: LD_ADDR_EXP 113
16263: PUSH
16264: LD_INT 1
16266: ST_TO_ADDR
// if p3 = 33 then
16267: LD_VAR 0 3
16271: PUSH
16272: LD_INT 33
16274: EQUAL
16275: IFFALSE 16285
// sRandom := true ;
16277: LD_ADDR_EXP 114
16281: PUSH
16282: LD_INT 1
16284: ST_TO_ADDR
// if p3 = 34 then
16285: LD_VAR 0 3
16289: PUSH
16290: LD_INT 34
16292: EQUAL
16293: IFFALSE 16303
// sShield := true ;
16295: LD_ADDR_EXP 115
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// if p3 = 35 then
16303: LD_VAR 0 3
16307: PUSH
16308: LD_INT 35
16310: EQUAL
16311: IFFALSE 16321
// sTime := true ;
16313: LD_ADDR_EXP 116
16317: PUSH
16318: LD_INT 1
16320: ST_TO_ADDR
// if p3 = 36 then
16321: LD_VAR 0 3
16325: PUSH
16326: LD_INT 36
16328: EQUAL
16329: IFFALSE 16339
// sTools := true ;
16331: LD_ADDR_EXP 117
16335: PUSH
16336: LD_INT 1
16338: ST_TO_ADDR
// if p3 = 101 then
16339: LD_VAR 0 3
16343: PUSH
16344: LD_INT 101
16346: EQUAL
16347: IFFALSE 16357
// sSold := true ;
16349: LD_ADDR_EXP 82
16353: PUSH
16354: LD_INT 1
16356: ST_TO_ADDR
// if p3 = 102 then
16357: LD_VAR 0 3
16361: PUSH
16362: LD_INT 102
16364: EQUAL
16365: IFFALSE 16375
// sDiff := true ;
16367: LD_ADDR_EXP 83
16371: PUSH
16372: LD_INT 1
16374: ST_TO_ADDR
// if p3 = 103 then
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 103
16382: EQUAL
16383: IFFALSE 16393
// sFog := true ;
16385: LD_ADDR_EXP 86
16389: PUSH
16390: LD_INT 1
16392: ST_TO_ADDR
// if p3 = 104 then
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 104
16400: EQUAL
16401: IFFALSE 16411
// sReset := true ;
16403: LD_ADDR_EXP 87
16407: PUSH
16408: LD_INT 1
16410: ST_TO_ADDR
// if p3 = 105 then
16411: LD_VAR 0 3
16415: PUSH
16416: LD_INT 105
16418: EQUAL
16419: IFFALSE 16429
// sSun := true ;
16421: LD_ADDR_EXP 88
16425: PUSH
16426: LD_INT 1
16428: ST_TO_ADDR
// if p3 = 106 then
16429: LD_VAR 0 3
16433: PUSH
16434: LD_INT 106
16436: EQUAL
16437: IFFALSE 16447
// sTiger := true ;
16439: LD_ADDR_EXP 84
16443: PUSH
16444: LD_INT 1
16446: ST_TO_ADDR
// if p3 = 107 then
16447: LD_VAR 0 3
16451: PUSH
16452: LD_INT 107
16454: EQUAL
16455: IFFALSE 16465
// sBomb := true ;
16457: LD_ADDR_EXP 85
16461: PUSH
16462: LD_INT 1
16464: ST_TO_ADDR
// if p3 = 108 then
16465: LD_VAR 0 3
16469: PUSH
16470: LD_INT 108
16472: EQUAL
16473: IFFALSE 16483
// sWound := true ;
16475: LD_ADDR_EXP 93
16479: PUSH
16480: LD_INT 1
16482: ST_TO_ADDR
// if p3 = 109 then
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 109
16490: EQUAL
16491: IFFALSE 16501
// sBetray := true ;
16493: LD_ADDR_EXP 97
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// if p3 = 110 then
16501: LD_VAR 0 3
16505: PUSH
16506: LD_INT 110
16508: EQUAL
16509: IFFALSE 16519
// sContamin := true ;
16511: LD_ADDR_EXP 98
16515: PUSH
16516: LD_INT 1
16518: ST_TO_ADDR
// if p3 = 111 then
16519: LD_VAR 0 3
16523: PUSH
16524: LD_INT 111
16526: EQUAL
16527: IFFALSE 16537
// sOil := true ;
16529: LD_ADDR_EXP 100
16533: PUSH
16534: LD_INT 1
16536: ST_TO_ADDR
// if p3 = 112 then
16537: LD_VAR 0 3
16541: PUSH
16542: LD_INT 112
16544: EQUAL
16545: IFFALSE 16555
// sStu := true ;
16547: LD_ADDR_EXP 104
16551: PUSH
16552: LD_INT 1
16554: ST_TO_ADDR
// if p3 = 113 then
16555: LD_VAR 0 3
16559: PUSH
16560: LD_INT 113
16562: EQUAL
16563: IFFALSE 16573
// sBazooka := true ;
16565: LD_ADDR_EXP 107
16569: PUSH
16570: LD_INT 1
16572: ST_TO_ADDR
// if p3 = 114 then
16573: LD_VAR 0 3
16577: PUSH
16578: LD_INT 114
16580: EQUAL
16581: IFFALSE 16591
// sMortar := true ;
16583: LD_ADDR_EXP 108
16587: PUSH
16588: LD_INT 1
16590: ST_TO_ADDR
// if p3 = 115 then
16591: LD_VAR 0 3
16595: PUSH
16596: LD_INT 115
16598: EQUAL
16599: IFFALSE 16609
// sRanger := true ;
16601: LD_ADDR_EXP 118
16605: PUSH
16606: LD_INT 1
16608: ST_TO_ADDR
// end ; if p2 = 101 then
16609: LD_VAR 0 2
16613: PUSH
16614: LD_INT 101
16616: EQUAL
16617: IFFALSE 16820
// begin case p3 of 1 :
16619: LD_VAR 0 3
16623: PUSH
16624: LD_INT 1
16626: DOUBLE
16627: EQUAL
16628: IFTRUE 16632
16630: GO 16639
16632: POP
// hHackUnlimitedResources ; 2 :
16633: CALL 26914 0 0
16637: GO 16820
16639: LD_INT 2
16641: DOUBLE
16642: EQUAL
16643: IFTRUE 16647
16645: GO 16654
16647: POP
// hHackSetLevel10 ; 3 :
16648: CALL 27047 0 0
16652: GO 16820
16654: LD_INT 3
16656: DOUBLE
16657: EQUAL
16658: IFTRUE 16662
16660: GO 16669
16662: POP
// hHackSetLevel10YourUnits ; 4 :
16663: CALL 27132 0 0
16667: GO 16820
16669: LD_INT 4
16671: DOUBLE
16672: EQUAL
16673: IFTRUE 16677
16675: GO 16699
16677: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
16678: LD_VAR 0 4
16682: PPUSH
16683: LD_VAR 0 5
16687: PPUSH
16688: LD_VAR 0 6
16692: PPUSH
16693: CALL 27222 0 3
16697: GO 16820
16699: LD_INT 5
16701: DOUBLE
16702: EQUAL
16703: IFTRUE 16707
16705: GO 16714
16707: POP
// hHackSpawnVehicle ; 6 :
16708: CALL 27283 0 0
16712: GO 16820
16714: LD_INT 6
16716: DOUBLE
16717: EQUAL
16718: IFTRUE 16722
16720: GO 16729
16722: POP
// hHackInvincible ; 7 :
16723: CALL 27829 0 0
16727: GO 16820
16729: LD_INT 7
16731: DOUBLE
16732: EQUAL
16733: IFTRUE 16737
16735: GO 16744
16737: POP
// hHackInvisible ; 8 :
16738: CALL 27940 0 0
16742: GO 16820
16744: LD_INT 8
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16759
16752: POP
// hHackChangeYourSide ; 9 :
16753: CALL 27997 0 0
16757: GO 16820
16759: LD_INT 9
16761: DOUBLE
16762: EQUAL
16763: IFTRUE 16767
16765: GO 16774
16767: POP
// hHackChangeUnitSide ; 10 :
16768: CALL 28039 0 0
16772: GO 16820
16774: LD_INT 10
16776: DOUBLE
16777: EQUAL
16778: IFTRUE 16782
16780: GO 16789
16782: POP
// hHackFog ; 11 :
16783: CALL 28140 0 0
16787: GO 16820
16789: LD_INT 11
16791: DOUBLE
16792: EQUAL
16793: IFTRUE 16797
16795: GO 16804
16797: POP
// hHackApeman ; 12 :
16798: CALL 28155 0 0
16802: GO 16820
16804: LD_INT 12
16806: DOUBLE
16807: EQUAL
16808: IFTRUE 16812
16810: GO 16819
16812: POP
// hHackBoom ; end ;
16813: CALL 28240 0 0
16817: GO 16820
16819: POP
// end ; end ;
16820: PPOPN 6
16822: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16823: GO 16825
16825: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16826: LD_STRING initStreamRollete();
16828: PPUSH
16829: CALL_OW 559
// InitStreamMode ;
16833: CALL 16842 0 0
// DefineStreamItems ( ) ;
16837: CALL 17282 0 0
// end ;
16841: END
// function InitStreamMode ; begin
16842: LD_INT 0
16844: PPUSH
// streamModeActive := false ;
16845: LD_ADDR_EXP 65
16849: PUSH
16850: LD_INT 0
16852: ST_TO_ADDR
// normalCounter := 36 ;
16853: LD_ADDR_EXP 66
16857: PUSH
16858: LD_INT 36
16860: ST_TO_ADDR
// hardcoreCounter := 16 ;
16861: LD_ADDR_EXP 67
16865: PUSH
16866: LD_INT 16
16868: ST_TO_ADDR
// sRocket := false ;
16869: LD_ADDR_EXP 70
16873: PUSH
16874: LD_INT 0
16876: ST_TO_ADDR
// sSpeed := false ;
16877: LD_ADDR_EXP 69
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
// sEngine := false ;
16885: LD_ADDR_EXP 71
16889: PUSH
16890: LD_INT 0
16892: ST_TO_ADDR
// sSpec := false ;
16893: LD_ADDR_EXP 68
16897: PUSH
16898: LD_INT 0
16900: ST_TO_ADDR
// sLevel := false ;
16901: LD_ADDR_EXP 72
16905: PUSH
16906: LD_INT 0
16908: ST_TO_ADDR
// sArmoury := false ;
16909: LD_ADDR_EXP 73
16913: PUSH
16914: LD_INT 0
16916: ST_TO_ADDR
// sRadar := false ;
16917: LD_ADDR_EXP 74
16921: PUSH
16922: LD_INT 0
16924: ST_TO_ADDR
// sBunker := false ;
16925: LD_ADDR_EXP 75
16929: PUSH
16930: LD_INT 0
16932: ST_TO_ADDR
// sHack := false ;
16933: LD_ADDR_EXP 76
16937: PUSH
16938: LD_INT 0
16940: ST_TO_ADDR
// sFire := false ;
16941: LD_ADDR_EXP 77
16945: PUSH
16946: LD_INT 0
16948: ST_TO_ADDR
// sRefresh := false ;
16949: LD_ADDR_EXP 78
16953: PUSH
16954: LD_INT 0
16956: ST_TO_ADDR
// sExp := false ;
16957: LD_ADDR_EXP 79
16961: PUSH
16962: LD_INT 0
16964: ST_TO_ADDR
// sDepot := false ;
16965: LD_ADDR_EXP 80
16969: PUSH
16970: LD_INT 0
16972: ST_TO_ADDR
// sFlag := false ;
16973: LD_ADDR_EXP 81
16977: PUSH
16978: LD_INT 0
16980: ST_TO_ADDR
// sKamikadze := false ;
16981: LD_ADDR_EXP 89
16985: PUSH
16986: LD_INT 0
16988: ST_TO_ADDR
// sTroll := false ;
16989: LD_ADDR_EXP 90
16993: PUSH
16994: LD_INT 0
16996: ST_TO_ADDR
// sSlow := false ;
16997: LD_ADDR_EXP 91
17001: PUSH
17002: LD_INT 0
17004: ST_TO_ADDR
// sLack := false ;
17005: LD_ADDR_EXP 92
17009: PUSH
17010: LD_INT 0
17012: ST_TO_ADDR
// sTank := false ;
17013: LD_ADDR_EXP 94
17017: PUSH
17018: LD_INT 0
17020: ST_TO_ADDR
// sRemote := false ;
17021: LD_ADDR_EXP 95
17025: PUSH
17026: LD_INT 0
17028: ST_TO_ADDR
// sPowell := false ;
17029: LD_ADDR_EXP 96
17033: PUSH
17034: LD_INT 0
17036: ST_TO_ADDR
// sTeleport := false ;
17037: LD_ADDR_EXP 99
17041: PUSH
17042: LD_INT 0
17044: ST_TO_ADDR
// sOilTower := false ;
17045: LD_ADDR_EXP 101
17049: PUSH
17050: LD_INT 0
17052: ST_TO_ADDR
// sShovel := false ;
17053: LD_ADDR_EXP 102
17057: PUSH
17058: LD_INT 0
17060: ST_TO_ADDR
// sSheik := false ;
17061: LD_ADDR_EXP 103
17065: PUSH
17066: LD_INT 0
17068: ST_TO_ADDR
// sEarthquake := false ;
17069: LD_ADDR_EXP 105
17073: PUSH
17074: LD_INT 0
17076: ST_TO_ADDR
// sAI := false ;
17077: LD_ADDR_EXP 106
17081: PUSH
17082: LD_INT 0
17084: ST_TO_ADDR
// sCargo := false ;
17085: LD_ADDR_EXP 109
17089: PUSH
17090: LD_INT 0
17092: ST_TO_ADDR
// sDLaser := false ;
17093: LD_ADDR_EXP 110
17097: PUSH
17098: LD_INT 0
17100: ST_TO_ADDR
// sExchange := false ;
17101: LD_ADDR_EXP 111
17105: PUSH
17106: LD_INT 0
17108: ST_TO_ADDR
// sFac := false ;
17109: LD_ADDR_EXP 112
17113: PUSH
17114: LD_INT 0
17116: ST_TO_ADDR
// sPower := false ;
17117: LD_ADDR_EXP 113
17121: PUSH
17122: LD_INT 0
17124: ST_TO_ADDR
// sRandom := false ;
17125: LD_ADDR_EXP 114
17129: PUSH
17130: LD_INT 0
17132: ST_TO_ADDR
// sShield := false ;
17133: LD_ADDR_EXP 115
17137: PUSH
17138: LD_INT 0
17140: ST_TO_ADDR
// sTime := false ;
17141: LD_ADDR_EXP 116
17145: PUSH
17146: LD_INT 0
17148: ST_TO_ADDR
// sTools := false ;
17149: LD_ADDR_EXP 117
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// sSold := false ;
17157: LD_ADDR_EXP 82
17161: PUSH
17162: LD_INT 0
17164: ST_TO_ADDR
// sDiff := false ;
17165: LD_ADDR_EXP 83
17169: PUSH
17170: LD_INT 0
17172: ST_TO_ADDR
// sFog := false ;
17173: LD_ADDR_EXP 86
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// sReset := false ;
17181: LD_ADDR_EXP 87
17185: PUSH
17186: LD_INT 0
17188: ST_TO_ADDR
// sSun := false ;
17189: LD_ADDR_EXP 88
17193: PUSH
17194: LD_INT 0
17196: ST_TO_ADDR
// sTiger := false ;
17197: LD_ADDR_EXP 84
17201: PUSH
17202: LD_INT 0
17204: ST_TO_ADDR
// sBomb := false ;
17205: LD_ADDR_EXP 85
17209: PUSH
17210: LD_INT 0
17212: ST_TO_ADDR
// sWound := false ;
17213: LD_ADDR_EXP 93
17217: PUSH
17218: LD_INT 0
17220: ST_TO_ADDR
// sBetray := false ;
17221: LD_ADDR_EXP 97
17225: PUSH
17226: LD_INT 0
17228: ST_TO_ADDR
// sContamin := false ;
17229: LD_ADDR_EXP 98
17233: PUSH
17234: LD_INT 0
17236: ST_TO_ADDR
// sOil := false ;
17237: LD_ADDR_EXP 100
17241: PUSH
17242: LD_INT 0
17244: ST_TO_ADDR
// sStu := false ;
17245: LD_ADDR_EXP 104
17249: PUSH
17250: LD_INT 0
17252: ST_TO_ADDR
// sBazooka := false ;
17253: LD_ADDR_EXP 107
17257: PUSH
17258: LD_INT 0
17260: ST_TO_ADDR
// sMortar := false ;
17261: LD_ADDR_EXP 108
17265: PUSH
17266: LD_INT 0
17268: ST_TO_ADDR
// sRanger := false ;
17269: LD_ADDR_EXP 118
17273: PUSH
17274: LD_INT 0
17276: ST_TO_ADDR
// end ;
17277: LD_VAR 0 1
17281: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17282: LD_INT 0
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
// result := [ ] ;
17289: LD_ADDR_VAR 0 1
17293: PUSH
17294: EMPTY
17295: ST_TO_ADDR
// if campaign_id = 1 then
17296: LD_OWVAR 69
17300: PUSH
17301: LD_INT 1
17303: EQUAL
17304: IFFALSE 20242
// begin case mission_number of 1 :
17306: LD_OWVAR 70
17310: PUSH
17311: LD_INT 1
17313: DOUBLE
17314: EQUAL
17315: IFTRUE 17319
17317: GO 17383
17319: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17320: LD_ADDR_VAR 0 1
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: LD_INT 4
17330: PUSH
17331: LD_INT 11
17333: PUSH
17334: LD_INT 12
17336: PUSH
17337: LD_INT 15
17339: PUSH
17340: LD_INT 16
17342: PUSH
17343: LD_INT 22
17345: PUSH
17346: LD_INT 23
17348: PUSH
17349: LD_INT 26
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 101
17365: PUSH
17366: LD_INT 102
17368: PUSH
17369: LD_INT 106
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: ST_TO_ADDR
17381: GO 20240
17383: LD_INT 2
17385: DOUBLE
17386: EQUAL
17387: IFTRUE 17391
17389: GO 17463
17391: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17392: LD_ADDR_VAR 0 1
17396: PUSH
17397: LD_INT 2
17399: PUSH
17400: LD_INT 4
17402: PUSH
17403: LD_INT 11
17405: PUSH
17406: LD_INT 12
17408: PUSH
17409: LD_INT 15
17411: PUSH
17412: LD_INT 16
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 23
17420: PUSH
17421: LD_INT 26
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 101
17437: PUSH
17438: LD_INT 102
17440: PUSH
17441: LD_INT 105
17443: PUSH
17444: LD_INT 106
17446: PUSH
17447: LD_INT 108
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: ST_TO_ADDR
17461: GO 20240
17463: LD_INT 3
17465: DOUBLE
17466: EQUAL
17467: IFTRUE 17471
17469: GO 17547
17471: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17472: LD_ADDR_VAR 0 1
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 4
17482: PUSH
17483: LD_INT 5
17485: PUSH
17486: LD_INT 11
17488: PUSH
17489: LD_INT 12
17491: PUSH
17492: LD_INT 15
17494: PUSH
17495: LD_INT 16
17497: PUSH
17498: LD_INT 22
17500: PUSH
17501: LD_INT 26
17503: PUSH
17504: LD_INT 36
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 101
17521: PUSH
17522: LD_INT 102
17524: PUSH
17525: LD_INT 105
17527: PUSH
17528: LD_INT 106
17530: PUSH
17531: LD_INT 108
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: ST_TO_ADDR
17545: GO 20240
17547: LD_INT 4
17549: DOUBLE
17550: EQUAL
17551: IFTRUE 17555
17553: GO 17639
17555: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17556: LD_ADDR_VAR 0 1
17560: PUSH
17561: LD_INT 2
17563: PUSH
17564: LD_INT 4
17566: PUSH
17567: LD_INT 5
17569: PUSH
17570: LD_INT 8
17572: PUSH
17573: LD_INT 11
17575: PUSH
17576: LD_INT 12
17578: PUSH
17579: LD_INT 15
17581: PUSH
17582: LD_INT 16
17584: PUSH
17585: LD_INT 22
17587: PUSH
17588: LD_INT 23
17590: PUSH
17591: LD_INT 26
17593: PUSH
17594: LD_INT 36
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 101
17613: PUSH
17614: LD_INT 102
17616: PUSH
17617: LD_INT 105
17619: PUSH
17620: LD_INT 106
17622: PUSH
17623: LD_INT 108
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: ST_TO_ADDR
17637: GO 20240
17639: LD_INT 5
17641: DOUBLE
17642: EQUAL
17643: IFTRUE 17647
17645: GO 17747
17647: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17648: LD_ADDR_VAR 0 1
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 4
17658: PUSH
17659: LD_INT 5
17661: PUSH
17662: LD_INT 6
17664: PUSH
17665: LD_INT 8
17667: PUSH
17668: LD_INT 11
17670: PUSH
17671: LD_INT 12
17673: PUSH
17674: LD_INT 15
17676: PUSH
17677: LD_INT 16
17679: PUSH
17680: LD_INT 22
17682: PUSH
17683: LD_INT 23
17685: PUSH
17686: LD_INT 25
17688: PUSH
17689: LD_INT 26
17691: PUSH
17692: LD_INT 36
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 101
17713: PUSH
17714: LD_INT 102
17716: PUSH
17717: LD_INT 105
17719: PUSH
17720: LD_INT 106
17722: PUSH
17723: LD_INT 108
17725: PUSH
17726: LD_INT 109
17728: PUSH
17729: LD_INT 112
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: ST_TO_ADDR
17745: GO 20240
17747: LD_INT 6
17749: DOUBLE
17750: EQUAL
17751: IFTRUE 17755
17753: GO 17875
17755: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17756: LD_ADDR_VAR 0 1
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 4
17766: PUSH
17767: LD_INT 5
17769: PUSH
17770: LD_INT 6
17772: PUSH
17773: LD_INT 8
17775: PUSH
17776: LD_INT 11
17778: PUSH
17779: LD_INT 12
17781: PUSH
17782: LD_INT 15
17784: PUSH
17785: LD_INT 16
17787: PUSH
17788: LD_INT 20
17790: PUSH
17791: LD_INT 21
17793: PUSH
17794: LD_INT 22
17796: PUSH
17797: LD_INT 23
17799: PUSH
17800: LD_INT 25
17802: PUSH
17803: LD_INT 26
17805: PUSH
17806: LD_INT 30
17808: PUSH
17809: LD_INT 31
17811: PUSH
17812: LD_INT 32
17814: PUSH
17815: LD_INT 36
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 101
17841: PUSH
17842: LD_INT 102
17844: PUSH
17845: LD_INT 105
17847: PUSH
17848: LD_INT 106
17850: PUSH
17851: LD_INT 108
17853: PUSH
17854: LD_INT 109
17856: PUSH
17857: LD_INT 112
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: ST_TO_ADDR
17873: GO 20240
17875: LD_INT 7
17877: DOUBLE
17878: EQUAL
17879: IFTRUE 17883
17881: GO 17983
17883: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17884: LD_ADDR_VAR 0 1
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: LD_INT 4
17894: PUSH
17895: LD_INT 5
17897: PUSH
17898: LD_INT 7
17900: PUSH
17901: LD_INT 11
17903: PUSH
17904: LD_INT 12
17906: PUSH
17907: LD_INT 15
17909: PUSH
17910: LD_INT 16
17912: PUSH
17913: LD_INT 20
17915: PUSH
17916: LD_INT 21
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_INT 23
17924: PUSH
17925: LD_INT 25
17927: PUSH
17928: LD_INT 26
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 101
17949: PUSH
17950: LD_INT 102
17952: PUSH
17953: LD_INT 103
17955: PUSH
17956: LD_INT 105
17958: PUSH
17959: LD_INT 106
17961: PUSH
17962: LD_INT 108
17964: PUSH
17965: LD_INT 112
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: ST_TO_ADDR
17981: GO 20240
17983: LD_INT 8
17985: DOUBLE
17986: EQUAL
17987: IFTRUE 17991
17989: GO 18119
17991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: LD_INT 4
18002: PUSH
18003: LD_INT 5
18005: PUSH
18006: LD_INT 6
18008: PUSH
18009: LD_INT 7
18011: PUSH
18012: LD_INT 8
18014: PUSH
18015: LD_INT 11
18017: PUSH
18018: LD_INT 12
18020: PUSH
18021: LD_INT 15
18023: PUSH
18024: LD_INT 16
18026: PUSH
18027: LD_INT 20
18029: PUSH
18030: LD_INT 21
18032: PUSH
18033: LD_INT 22
18035: PUSH
18036: LD_INT 23
18038: PUSH
18039: LD_INT 25
18041: PUSH
18042: LD_INT 26
18044: PUSH
18045: LD_INT 30
18047: PUSH
18048: LD_INT 31
18050: PUSH
18051: LD_INT 32
18053: PUSH
18054: LD_INT 36
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 101
18081: PUSH
18082: LD_INT 102
18084: PUSH
18085: LD_INT 103
18087: PUSH
18088: LD_INT 105
18090: PUSH
18091: LD_INT 106
18093: PUSH
18094: LD_INT 108
18096: PUSH
18097: LD_INT 109
18099: PUSH
18100: LD_INT 112
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: ST_TO_ADDR
18117: GO 20240
18119: LD_INT 9
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 18263
18127: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18128: LD_ADDR_VAR 0 1
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: LD_INT 4
18138: PUSH
18139: LD_INT 5
18141: PUSH
18142: LD_INT 6
18144: PUSH
18145: LD_INT 7
18147: PUSH
18148: LD_INT 8
18150: PUSH
18151: LD_INT 11
18153: PUSH
18154: LD_INT 12
18156: PUSH
18157: LD_INT 15
18159: PUSH
18160: LD_INT 16
18162: PUSH
18163: LD_INT 20
18165: PUSH
18166: LD_INT 21
18168: PUSH
18169: LD_INT 22
18171: PUSH
18172: LD_INT 23
18174: PUSH
18175: LD_INT 25
18177: PUSH
18178: LD_INT 26
18180: PUSH
18181: LD_INT 28
18183: PUSH
18184: LD_INT 30
18186: PUSH
18187: LD_INT 31
18189: PUSH
18190: LD_INT 32
18192: PUSH
18193: LD_INT 36
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 101
18221: PUSH
18222: LD_INT 102
18224: PUSH
18225: LD_INT 103
18227: PUSH
18228: LD_INT 105
18230: PUSH
18231: LD_INT 106
18233: PUSH
18234: LD_INT 108
18236: PUSH
18237: LD_INT 109
18239: PUSH
18240: LD_INT 112
18242: PUSH
18243: LD_INT 114
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: ST_TO_ADDR
18261: GO 20240
18263: LD_INT 10
18265: DOUBLE
18266: EQUAL
18267: IFTRUE 18271
18269: GO 18455
18271: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18272: LD_ADDR_VAR 0 1
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: LD_INT 4
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: LD_INT 6
18288: PUSH
18289: LD_INT 7
18291: PUSH
18292: LD_INT 8
18294: PUSH
18295: LD_INT 9
18297: PUSH
18298: LD_INT 10
18300: PUSH
18301: LD_INT 11
18303: PUSH
18304: LD_INT 12
18306: PUSH
18307: LD_INT 13
18309: PUSH
18310: LD_INT 14
18312: PUSH
18313: LD_INT 15
18315: PUSH
18316: LD_INT 16
18318: PUSH
18319: LD_INT 17
18321: PUSH
18322: LD_INT 18
18324: PUSH
18325: LD_INT 19
18327: PUSH
18328: LD_INT 20
18330: PUSH
18331: LD_INT 21
18333: PUSH
18334: LD_INT 22
18336: PUSH
18337: LD_INT 23
18339: PUSH
18340: LD_INT 24
18342: PUSH
18343: LD_INT 25
18345: PUSH
18346: LD_INT 26
18348: PUSH
18349: LD_INT 28
18351: PUSH
18352: LD_INT 30
18354: PUSH
18355: LD_INT 31
18357: PUSH
18358: LD_INT 32
18360: PUSH
18361: LD_INT 36
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 101
18397: PUSH
18398: LD_INT 102
18400: PUSH
18401: LD_INT 103
18403: PUSH
18404: LD_INT 104
18406: PUSH
18407: LD_INT 105
18409: PUSH
18410: LD_INT 106
18412: PUSH
18413: LD_INT 107
18415: PUSH
18416: LD_INT 108
18418: PUSH
18419: LD_INT 109
18421: PUSH
18422: LD_INT 110
18424: PUSH
18425: LD_INT 111
18427: PUSH
18428: LD_INT 112
18430: PUSH
18431: LD_INT 114
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: ST_TO_ADDR
18453: GO 20240
18455: LD_INT 11
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18655
18463: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18464: LD_ADDR_VAR 0 1
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: LD_INT 3
18474: PUSH
18475: LD_INT 4
18477: PUSH
18478: LD_INT 5
18480: PUSH
18481: LD_INT 6
18483: PUSH
18484: LD_INT 7
18486: PUSH
18487: LD_INT 8
18489: PUSH
18490: LD_INT 9
18492: PUSH
18493: LD_INT 10
18495: PUSH
18496: LD_INT 11
18498: PUSH
18499: LD_INT 12
18501: PUSH
18502: LD_INT 13
18504: PUSH
18505: LD_INT 14
18507: PUSH
18508: LD_INT 15
18510: PUSH
18511: LD_INT 16
18513: PUSH
18514: LD_INT 17
18516: PUSH
18517: LD_INT 18
18519: PUSH
18520: LD_INT 19
18522: PUSH
18523: LD_INT 20
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_INT 23
18534: PUSH
18535: LD_INT 24
18537: PUSH
18538: LD_INT 25
18540: PUSH
18541: LD_INT 26
18543: PUSH
18544: LD_INT 28
18546: PUSH
18547: LD_INT 30
18549: PUSH
18550: LD_INT 31
18552: PUSH
18553: LD_INT 32
18555: PUSH
18556: LD_INT 34
18558: PUSH
18559: LD_INT 36
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 101
18597: PUSH
18598: LD_INT 102
18600: PUSH
18601: LD_INT 103
18603: PUSH
18604: LD_INT 104
18606: PUSH
18607: LD_INT 105
18609: PUSH
18610: LD_INT 106
18612: PUSH
18613: LD_INT 107
18615: PUSH
18616: LD_INT 108
18618: PUSH
18619: LD_INT 109
18621: PUSH
18622: LD_INT 110
18624: PUSH
18625: LD_INT 111
18627: PUSH
18628: LD_INT 112
18630: PUSH
18631: LD_INT 114
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: ST_TO_ADDR
18653: GO 20240
18655: LD_INT 12
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18871
18663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: LD_INT 3
18677: PUSH
18678: LD_INT 4
18680: PUSH
18681: LD_INT 5
18683: PUSH
18684: LD_INT 6
18686: PUSH
18687: LD_INT 7
18689: PUSH
18690: LD_INT 8
18692: PUSH
18693: LD_INT 9
18695: PUSH
18696: LD_INT 10
18698: PUSH
18699: LD_INT 11
18701: PUSH
18702: LD_INT 12
18704: PUSH
18705: LD_INT 13
18707: PUSH
18708: LD_INT 14
18710: PUSH
18711: LD_INT 15
18713: PUSH
18714: LD_INT 16
18716: PUSH
18717: LD_INT 17
18719: PUSH
18720: LD_INT 18
18722: PUSH
18723: LD_INT 19
18725: PUSH
18726: LD_INT 20
18728: PUSH
18729: LD_INT 21
18731: PUSH
18732: LD_INT 22
18734: PUSH
18735: LD_INT 23
18737: PUSH
18738: LD_INT 24
18740: PUSH
18741: LD_INT 25
18743: PUSH
18744: LD_INT 26
18746: PUSH
18747: LD_INT 27
18749: PUSH
18750: LD_INT 28
18752: PUSH
18753: LD_INT 30
18755: PUSH
18756: LD_INT 31
18758: PUSH
18759: LD_INT 32
18761: PUSH
18762: LD_INT 33
18764: PUSH
18765: LD_INT 34
18767: PUSH
18768: LD_INT 36
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 101
18809: PUSH
18810: LD_INT 102
18812: PUSH
18813: LD_INT 103
18815: PUSH
18816: LD_INT 104
18818: PUSH
18819: LD_INT 105
18821: PUSH
18822: LD_INT 106
18824: PUSH
18825: LD_INT 107
18827: PUSH
18828: LD_INT 108
18830: PUSH
18831: LD_INT 109
18833: PUSH
18834: LD_INT 110
18836: PUSH
18837: LD_INT 111
18839: PUSH
18840: LD_INT 112
18842: PUSH
18843: LD_INT 113
18845: PUSH
18846: LD_INT 114
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: ST_TO_ADDR
18869: GO 20240
18871: LD_INT 13
18873: DOUBLE
18874: EQUAL
18875: IFTRUE 18879
18877: GO 19075
18879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18880: LD_ADDR_VAR 0 1
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: LD_INT 3
18893: PUSH
18894: LD_INT 4
18896: PUSH
18897: LD_INT 5
18899: PUSH
18900: LD_INT 8
18902: PUSH
18903: LD_INT 9
18905: PUSH
18906: LD_INT 10
18908: PUSH
18909: LD_INT 11
18911: PUSH
18912: LD_INT 12
18914: PUSH
18915: LD_INT 14
18917: PUSH
18918: LD_INT 15
18920: PUSH
18921: LD_INT 16
18923: PUSH
18924: LD_INT 17
18926: PUSH
18927: LD_INT 18
18929: PUSH
18930: LD_INT 19
18932: PUSH
18933: LD_INT 20
18935: PUSH
18936: LD_INT 21
18938: PUSH
18939: LD_INT 22
18941: PUSH
18942: LD_INT 23
18944: PUSH
18945: LD_INT 24
18947: PUSH
18948: LD_INT 25
18950: PUSH
18951: LD_INT 26
18953: PUSH
18954: LD_INT 27
18956: PUSH
18957: LD_INT 28
18959: PUSH
18960: LD_INT 30
18962: PUSH
18963: LD_INT 31
18965: PUSH
18966: LD_INT 32
18968: PUSH
18969: LD_INT 33
18971: PUSH
18972: LD_INT 34
18974: PUSH
18975: LD_INT 36
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 101
19013: PUSH
19014: LD_INT 102
19016: PUSH
19017: LD_INT 103
19019: PUSH
19020: LD_INT 104
19022: PUSH
19023: LD_INT 105
19025: PUSH
19026: LD_INT 106
19028: PUSH
19029: LD_INT 107
19031: PUSH
19032: LD_INT 108
19034: PUSH
19035: LD_INT 109
19037: PUSH
19038: LD_INT 110
19040: PUSH
19041: LD_INT 111
19043: PUSH
19044: LD_INT 112
19046: PUSH
19047: LD_INT 113
19049: PUSH
19050: LD_INT 114
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: ST_TO_ADDR
19073: GO 20240
19075: LD_INT 14
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19295
19083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: LD_INT 3
19097: PUSH
19098: LD_INT 4
19100: PUSH
19101: LD_INT 5
19103: PUSH
19104: LD_INT 6
19106: PUSH
19107: LD_INT 7
19109: PUSH
19110: LD_INT 8
19112: PUSH
19113: LD_INT 9
19115: PUSH
19116: LD_INT 10
19118: PUSH
19119: LD_INT 11
19121: PUSH
19122: LD_INT 12
19124: PUSH
19125: LD_INT 13
19127: PUSH
19128: LD_INT 14
19130: PUSH
19131: LD_INT 15
19133: PUSH
19134: LD_INT 16
19136: PUSH
19137: LD_INT 17
19139: PUSH
19140: LD_INT 18
19142: PUSH
19143: LD_INT 19
19145: PUSH
19146: LD_INT 20
19148: PUSH
19149: LD_INT 21
19151: PUSH
19152: LD_INT 22
19154: PUSH
19155: LD_INT 23
19157: PUSH
19158: LD_INT 24
19160: PUSH
19161: LD_INT 25
19163: PUSH
19164: LD_INT 26
19166: PUSH
19167: LD_INT 27
19169: PUSH
19170: LD_INT 28
19172: PUSH
19173: LD_INT 29
19175: PUSH
19176: LD_INT 30
19178: PUSH
19179: LD_INT 31
19181: PUSH
19182: LD_INT 32
19184: PUSH
19185: LD_INT 33
19187: PUSH
19188: LD_INT 34
19190: PUSH
19191: LD_INT 36
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 101
19233: PUSH
19234: LD_INT 102
19236: PUSH
19237: LD_INT 103
19239: PUSH
19240: LD_INT 104
19242: PUSH
19243: LD_INT 105
19245: PUSH
19246: LD_INT 106
19248: PUSH
19249: LD_INT 107
19251: PUSH
19252: LD_INT 108
19254: PUSH
19255: LD_INT 109
19257: PUSH
19258: LD_INT 110
19260: PUSH
19261: LD_INT 111
19263: PUSH
19264: LD_INT 112
19266: PUSH
19267: LD_INT 113
19269: PUSH
19270: LD_INT 114
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: ST_TO_ADDR
19293: GO 20240
19295: LD_INT 15
19297: DOUBLE
19298: EQUAL
19299: IFTRUE 19303
19301: GO 19515
19303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19304: LD_ADDR_VAR 0 1
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 3
19317: PUSH
19318: LD_INT 4
19320: PUSH
19321: LD_INT 5
19323: PUSH
19324: LD_INT 6
19326: PUSH
19327: LD_INT 7
19329: PUSH
19330: LD_INT 8
19332: PUSH
19333: LD_INT 9
19335: PUSH
19336: LD_INT 10
19338: PUSH
19339: LD_INT 11
19341: PUSH
19342: LD_INT 12
19344: PUSH
19345: LD_INT 13
19347: PUSH
19348: LD_INT 14
19350: PUSH
19351: LD_INT 15
19353: PUSH
19354: LD_INT 16
19356: PUSH
19357: LD_INT 17
19359: PUSH
19360: LD_INT 18
19362: PUSH
19363: LD_INT 19
19365: PUSH
19366: LD_INT 20
19368: PUSH
19369: LD_INT 21
19371: PUSH
19372: LD_INT 22
19374: PUSH
19375: LD_INT 23
19377: PUSH
19378: LD_INT 24
19380: PUSH
19381: LD_INT 25
19383: PUSH
19384: LD_INT 26
19386: PUSH
19387: LD_INT 27
19389: PUSH
19390: LD_INT 28
19392: PUSH
19393: LD_INT 29
19395: PUSH
19396: LD_INT 30
19398: PUSH
19399: LD_INT 31
19401: PUSH
19402: LD_INT 32
19404: PUSH
19405: LD_INT 33
19407: PUSH
19408: LD_INT 34
19410: PUSH
19411: LD_INT 36
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 101
19453: PUSH
19454: LD_INT 102
19456: PUSH
19457: LD_INT 103
19459: PUSH
19460: LD_INT 104
19462: PUSH
19463: LD_INT 105
19465: PUSH
19466: LD_INT 106
19468: PUSH
19469: LD_INT 107
19471: PUSH
19472: LD_INT 108
19474: PUSH
19475: LD_INT 109
19477: PUSH
19478: LD_INT 110
19480: PUSH
19481: LD_INT 111
19483: PUSH
19484: LD_INT 112
19486: PUSH
19487: LD_INT 113
19489: PUSH
19490: LD_INT 114
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: ST_TO_ADDR
19513: GO 20240
19515: LD_INT 16
19517: DOUBLE
19518: EQUAL
19519: IFTRUE 19523
19521: GO 19647
19523: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19524: LD_ADDR_VAR 0 1
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: LD_INT 4
19534: PUSH
19535: LD_INT 5
19537: PUSH
19538: LD_INT 7
19540: PUSH
19541: LD_INT 11
19543: PUSH
19544: LD_INT 12
19546: PUSH
19547: LD_INT 15
19549: PUSH
19550: LD_INT 16
19552: PUSH
19553: LD_INT 20
19555: PUSH
19556: LD_INT 21
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 23
19564: PUSH
19565: LD_INT 25
19567: PUSH
19568: LD_INT 26
19570: PUSH
19571: LD_INT 30
19573: PUSH
19574: LD_INT 31
19576: PUSH
19577: LD_INT 32
19579: PUSH
19580: LD_INT 33
19582: PUSH
19583: LD_INT 34
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 101
19609: PUSH
19610: LD_INT 102
19612: PUSH
19613: LD_INT 103
19615: PUSH
19616: LD_INT 106
19618: PUSH
19619: LD_INT 108
19621: PUSH
19622: LD_INT 112
19624: PUSH
19625: LD_INT 113
19627: PUSH
19628: LD_INT 114
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: ST_TO_ADDR
19645: GO 20240
19647: LD_INT 17
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19867
19655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19656: LD_ADDR_VAR 0 1
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: LD_INT 4
19672: PUSH
19673: LD_INT 5
19675: PUSH
19676: LD_INT 6
19678: PUSH
19679: LD_INT 7
19681: PUSH
19682: LD_INT 8
19684: PUSH
19685: LD_INT 9
19687: PUSH
19688: LD_INT 10
19690: PUSH
19691: LD_INT 11
19693: PUSH
19694: LD_INT 12
19696: PUSH
19697: LD_INT 13
19699: PUSH
19700: LD_INT 14
19702: PUSH
19703: LD_INT 15
19705: PUSH
19706: LD_INT 16
19708: PUSH
19709: LD_INT 17
19711: PUSH
19712: LD_INT 18
19714: PUSH
19715: LD_INT 19
19717: PUSH
19718: LD_INT 20
19720: PUSH
19721: LD_INT 21
19723: PUSH
19724: LD_INT 22
19726: PUSH
19727: LD_INT 23
19729: PUSH
19730: LD_INT 24
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 26
19738: PUSH
19739: LD_INT 27
19741: PUSH
19742: LD_INT 28
19744: PUSH
19745: LD_INT 29
19747: PUSH
19748: LD_INT 30
19750: PUSH
19751: LD_INT 31
19753: PUSH
19754: LD_INT 32
19756: PUSH
19757: LD_INT 33
19759: PUSH
19760: LD_INT 34
19762: PUSH
19763: LD_INT 36
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 101
19805: PUSH
19806: LD_INT 102
19808: PUSH
19809: LD_INT 103
19811: PUSH
19812: LD_INT 104
19814: PUSH
19815: LD_INT 105
19817: PUSH
19818: LD_INT 106
19820: PUSH
19821: LD_INT 107
19823: PUSH
19824: LD_INT 108
19826: PUSH
19827: LD_INT 109
19829: PUSH
19830: LD_INT 110
19832: PUSH
19833: LD_INT 111
19835: PUSH
19836: LD_INT 112
19838: PUSH
19839: LD_INT 113
19841: PUSH
19842: LD_INT 114
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: ST_TO_ADDR
19865: GO 20240
19867: LD_INT 18
19869: DOUBLE
19870: EQUAL
19871: IFTRUE 19875
19873: GO 20011
19875: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19876: LD_ADDR_VAR 0 1
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: LD_INT 4
19886: PUSH
19887: LD_INT 5
19889: PUSH
19890: LD_INT 7
19892: PUSH
19893: LD_INT 11
19895: PUSH
19896: LD_INT 12
19898: PUSH
19899: LD_INT 15
19901: PUSH
19902: LD_INT 16
19904: PUSH
19905: LD_INT 20
19907: PUSH
19908: LD_INT 21
19910: PUSH
19911: LD_INT 22
19913: PUSH
19914: LD_INT 23
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 26
19922: PUSH
19923: LD_INT 30
19925: PUSH
19926: LD_INT 31
19928: PUSH
19929: LD_INT 32
19931: PUSH
19932: LD_INT 33
19934: PUSH
19935: LD_INT 34
19937: PUSH
19938: LD_INT 35
19940: PUSH
19941: LD_INT 36
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 101
19969: PUSH
19970: LD_INT 102
19972: PUSH
19973: LD_INT 103
19975: PUSH
19976: LD_INT 106
19978: PUSH
19979: LD_INT 108
19981: PUSH
19982: LD_INT 112
19984: PUSH
19985: LD_INT 113
19987: PUSH
19988: LD_INT 114
19990: PUSH
19991: LD_INT 115
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: ST_TO_ADDR
20009: GO 20240
20011: LD_INT 19
20013: DOUBLE
20014: EQUAL
20015: IFTRUE 20019
20017: GO 20239
20019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20020: LD_ADDR_VAR 0 1
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: LD_INT 3
20033: PUSH
20034: LD_INT 4
20036: PUSH
20037: LD_INT 5
20039: PUSH
20040: LD_INT 6
20042: PUSH
20043: LD_INT 7
20045: PUSH
20046: LD_INT 8
20048: PUSH
20049: LD_INT 9
20051: PUSH
20052: LD_INT 10
20054: PUSH
20055: LD_INT 11
20057: PUSH
20058: LD_INT 12
20060: PUSH
20061: LD_INT 13
20063: PUSH
20064: LD_INT 14
20066: PUSH
20067: LD_INT 15
20069: PUSH
20070: LD_INT 16
20072: PUSH
20073: LD_INT 17
20075: PUSH
20076: LD_INT 18
20078: PUSH
20079: LD_INT 19
20081: PUSH
20082: LD_INT 20
20084: PUSH
20085: LD_INT 21
20087: PUSH
20088: LD_INT 22
20090: PUSH
20091: LD_INT 23
20093: PUSH
20094: LD_INT 24
20096: PUSH
20097: LD_INT 25
20099: PUSH
20100: LD_INT 26
20102: PUSH
20103: LD_INT 27
20105: PUSH
20106: LD_INT 28
20108: PUSH
20109: LD_INT 29
20111: PUSH
20112: LD_INT 30
20114: PUSH
20115: LD_INT 31
20117: PUSH
20118: LD_INT 32
20120: PUSH
20121: LD_INT 33
20123: PUSH
20124: LD_INT 34
20126: PUSH
20127: LD_INT 35
20129: PUSH
20130: LD_INT 36
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 101
20173: PUSH
20174: LD_INT 102
20176: PUSH
20177: LD_INT 103
20179: PUSH
20180: LD_INT 104
20182: PUSH
20183: LD_INT 105
20185: PUSH
20186: LD_INT 106
20188: PUSH
20189: LD_INT 107
20191: PUSH
20192: LD_INT 108
20194: PUSH
20195: LD_INT 109
20197: PUSH
20198: LD_INT 110
20200: PUSH
20201: LD_INT 111
20203: PUSH
20204: LD_INT 112
20206: PUSH
20207: LD_INT 113
20209: PUSH
20210: LD_INT 114
20212: PUSH
20213: LD_INT 115
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: ST_TO_ADDR
20237: GO 20240
20239: POP
// end else
20240: GO 20459
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: LD_INT 3
20255: PUSH
20256: LD_INT 4
20258: PUSH
20259: LD_INT 5
20261: PUSH
20262: LD_INT 6
20264: PUSH
20265: LD_INT 7
20267: PUSH
20268: LD_INT 8
20270: PUSH
20271: LD_INT 9
20273: PUSH
20274: LD_INT 10
20276: PUSH
20277: LD_INT 11
20279: PUSH
20280: LD_INT 12
20282: PUSH
20283: LD_INT 13
20285: PUSH
20286: LD_INT 14
20288: PUSH
20289: LD_INT 15
20291: PUSH
20292: LD_INT 16
20294: PUSH
20295: LD_INT 17
20297: PUSH
20298: LD_INT 18
20300: PUSH
20301: LD_INT 19
20303: PUSH
20304: LD_INT 20
20306: PUSH
20307: LD_INT 21
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_INT 23
20315: PUSH
20316: LD_INT 24
20318: PUSH
20319: LD_INT 25
20321: PUSH
20322: LD_INT 26
20324: PUSH
20325: LD_INT 27
20327: PUSH
20328: LD_INT 28
20330: PUSH
20331: LD_INT 29
20333: PUSH
20334: LD_INT 30
20336: PUSH
20337: LD_INT 31
20339: PUSH
20340: LD_INT 32
20342: PUSH
20343: LD_INT 33
20345: PUSH
20346: LD_INT 34
20348: PUSH
20349: LD_INT 35
20351: PUSH
20352: LD_INT 36
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 101
20395: PUSH
20396: LD_INT 102
20398: PUSH
20399: LD_INT 103
20401: PUSH
20402: LD_INT 104
20404: PUSH
20405: LD_INT 105
20407: PUSH
20408: LD_INT 106
20410: PUSH
20411: LD_INT 107
20413: PUSH
20414: LD_INT 108
20416: PUSH
20417: LD_INT 109
20419: PUSH
20420: LD_INT 110
20422: PUSH
20423: LD_INT 111
20425: PUSH
20426: LD_INT 112
20428: PUSH
20429: LD_INT 113
20431: PUSH
20432: LD_INT 114
20434: PUSH
20435: LD_INT 115
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: ST_TO_ADDR
// if result then
20459: LD_VAR 0 1
20463: IFFALSE 20752
// begin normal :=  ;
20465: LD_ADDR_VAR 0 3
20469: PUSH
20470: LD_STRING 
20472: ST_TO_ADDR
// hardcore :=  ;
20473: LD_ADDR_VAR 0 4
20477: PUSH
20478: LD_STRING 
20480: ST_TO_ADDR
// for i = 1 to normalCounter do
20481: LD_ADDR_VAR 0 5
20485: PUSH
20486: DOUBLE
20487: LD_INT 1
20489: DEC
20490: ST_TO_ADDR
20491: LD_EXP 66
20495: PUSH
20496: FOR_TO
20497: IFFALSE 20598
// begin tmp := 0 ;
20499: LD_ADDR_VAR 0 2
20503: PUSH
20504: LD_STRING 0
20506: ST_TO_ADDR
// if result [ 1 ] then
20507: LD_VAR 0 1
20511: PUSH
20512: LD_INT 1
20514: ARRAY
20515: IFFALSE 20580
// if result [ 1 ] [ 1 ] = i then
20517: LD_VAR 0 1
20521: PUSH
20522: LD_INT 1
20524: ARRAY
20525: PUSH
20526: LD_INT 1
20528: ARRAY
20529: PUSH
20530: LD_VAR 0 5
20534: EQUAL
20535: IFFALSE 20580
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20537: LD_ADDR_VAR 0 1
20541: PUSH
20542: LD_VAR 0 1
20546: PPUSH
20547: LD_INT 1
20549: PPUSH
20550: LD_VAR 0 1
20554: PUSH
20555: LD_INT 1
20557: ARRAY
20558: PPUSH
20559: LD_INT 1
20561: PPUSH
20562: CALL_OW 3
20566: PPUSH
20567: CALL_OW 1
20571: ST_TO_ADDR
// tmp := 1 ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_STRING 1
20579: ST_TO_ADDR
// end ; normal := normal & tmp ;
20580: LD_ADDR_VAR 0 3
20584: PUSH
20585: LD_VAR 0 3
20589: PUSH
20590: LD_VAR 0 2
20594: STR
20595: ST_TO_ADDR
// end ;
20596: GO 20496
20598: POP
20599: POP
// for i = 1 to hardcoreCounter do
20600: LD_ADDR_VAR 0 5
20604: PUSH
20605: DOUBLE
20606: LD_INT 1
20608: DEC
20609: ST_TO_ADDR
20610: LD_EXP 67
20614: PUSH
20615: FOR_TO
20616: IFFALSE 20721
// begin tmp := 0 ;
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_STRING 0
20625: ST_TO_ADDR
// if result [ 2 ] then
20626: LD_VAR 0 1
20630: PUSH
20631: LD_INT 2
20633: ARRAY
20634: IFFALSE 20703
// if result [ 2 ] [ 1 ] = 100 + i then
20636: LD_VAR 0 1
20640: PUSH
20641: LD_INT 2
20643: ARRAY
20644: PUSH
20645: LD_INT 1
20647: ARRAY
20648: PUSH
20649: LD_INT 100
20651: PUSH
20652: LD_VAR 0 5
20656: PLUS
20657: EQUAL
20658: IFFALSE 20703
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20660: LD_ADDR_VAR 0 1
20664: PUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: LD_INT 2
20672: PPUSH
20673: LD_VAR 0 1
20677: PUSH
20678: LD_INT 2
20680: ARRAY
20681: PPUSH
20682: LD_INT 1
20684: PPUSH
20685: CALL_OW 3
20689: PPUSH
20690: CALL_OW 1
20694: ST_TO_ADDR
// tmp := 1 ;
20695: LD_ADDR_VAR 0 2
20699: PUSH
20700: LD_STRING 1
20702: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: LD_VAR 0 4
20712: PUSH
20713: LD_VAR 0 2
20717: STR
20718: ST_TO_ADDR
// end ;
20719: GO 20615
20721: POP
20722: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20723: LD_STRING getStreamItemsFromMission("
20725: PUSH
20726: LD_VAR 0 3
20730: STR
20731: PUSH
20732: LD_STRING ","
20734: STR
20735: PUSH
20736: LD_VAR 0 4
20740: STR
20741: PUSH
20742: LD_STRING ")
20744: STR
20745: PPUSH
20746: CALL_OW 559
// end else
20750: GO 20759
// ToLua ( getStreamItemsFromMission("","") ) ;
20752: LD_STRING getStreamItemsFromMission("","")
20754: PPUSH
20755: CALL_OW 559
// end ;
20759: LD_VAR 0 1
20763: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20764: LD_EXP 65
20768: PUSH
20769: LD_EXP 70
20773: AND
20774: IFFALSE 20898
20776: GO 20778
20778: DISABLE
20779: LD_INT 0
20781: PPUSH
20782: PPUSH
// begin enable ;
20783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20784: LD_ADDR_VAR 0 2
20788: PUSH
20789: LD_INT 22
20791: PUSH
20792: LD_OWVAR 2
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 34
20806: PUSH
20807: LD_INT 7
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 34
20816: PUSH
20817: LD_INT 45
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 34
20826: PUSH
20827: LD_INT 28
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 34
20836: PUSH
20837: LD_INT 47
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: ST_TO_ADDR
// if not tmp then
20860: LD_VAR 0 2
20864: NOT
20865: IFFALSE 20869
// exit ;
20867: GO 20898
// for i in tmp do
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_VAR 0 2
20878: PUSH
20879: FOR_IN
20880: IFFALSE 20896
// begin SetLives ( i , 0 ) ;
20882: LD_VAR 0 1
20886: PPUSH
20887: LD_INT 0
20889: PPUSH
20890: CALL_OW 234
// end ;
20894: GO 20879
20896: POP
20897: POP
// end ;
20898: PPOPN 2
20900: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20901: LD_EXP 65
20905: PUSH
20906: LD_EXP 71
20910: AND
20911: IFFALSE 20995
20913: GO 20915
20915: DISABLE
20916: LD_INT 0
20918: PPUSH
20919: PPUSH
// begin enable ;
20920: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20921: LD_ADDR_VAR 0 2
20925: PUSH
20926: LD_INT 22
20928: PUSH
20929: LD_OWVAR 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 32
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PPUSH
20952: CALL_OW 69
20956: ST_TO_ADDR
// if not tmp then
20957: LD_VAR 0 2
20961: NOT
20962: IFFALSE 20966
// exit ;
20964: GO 20995
// for i in tmp do
20966: LD_ADDR_VAR 0 1
20970: PUSH
20971: LD_VAR 0 2
20975: PUSH
20976: FOR_IN
20977: IFFALSE 20993
// begin SetLives ( i , 0 ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 0
20986: PPUSH
20987: CALL_OW 234
// end ;
20991: GO 20976
20993: POP
20994: POP
// end ;
20995: PPOPN 2
20997: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20998: LD_EXP 65
21002: PUSH
21003: LD_EXP 68
21007: AND
21008: IFFALSE 21101
21010: GO 21012
21012: DISABLE
21013: LD_INT 0
21015: PPUSH
// begin enable ;
21016: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21017: LD_ADDR_VAR 0 1
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_OWVAR 2
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: LD_INT 25
21039: PUSH
21040: LD_INT 5
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 25
21049: PUSH
21050: LD_INT 9
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 25
21059: PUSH
21060: LD_INT 8
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: PUSH
21082: FOR_IN
21083: IFFALSE 21099
// begin SetClass ( i , 1 ) ;
21085: LD_VAR 0 1
21089: PPUSH
21090: LD_INT 1
21092: PPUSH
21093: CALL_OW 336
// end ;
21097: GO 21082
21099: POP
21100: POP
// end ;
21101: PPOPN 1
21103: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21104: LD_EXP 65
21108: PUSH
21109: LD_EXP 69
21113: AND
21114: PUSH
21115: LD_OWVAR 65
21119: PUSH
21120: LD_INT 7
21122: LESS
21123: AND
21124: IFFALSE 21138
21126: GO 21128
21128: DISABLE
// begin enable ;
21129: ENABLE
// game_speed := 7 ;
21130: LD_ADDR_OWVAR 65
21134: PUSH
21135: LD_INT 7
21137: ST_TO_ADDR
// end ;
21138: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21139: LD_EXP 65
21143: PUSH
21144: LD_EXP 72
21148: AND
21149: IFFALSE 21351
21151: GO 21153
21153: DISABLE
21154: LD_INT 0
21156: PPUSH
21157: PPUSH
21158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 81
21166: PUSH
21167: LD_OWVAR 2
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 21
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PPUSH
21190: CALL_OW 69
21194: ST_TO_ADDR
// if not tmp then
21195: LD_VAR 0 3
21199: NOT
21200: IFFALSE 21204
// exit ;
21202: GO 21351
// if tmp > 5 then
21204: LD_VAR 0 3
21208: PUSH
21209: LD_INT 5
21211: GREATER
21212: IFFALSE 21224
// k := 5 else
21214: LD_ADDR_VAR 0 2
21218: PUSH
21219: LD_INT 5
21221: ST_TO_ADDR
21222: GO 21234
// k := tmp ;
21224: LD_ADDR_VAR 0 2
21228: PUSH
21229: LD_VAR 0 3
21233: ST_TO_ADDR
// for i := 1 to k do
21234: LD_ADDR_VAR 0 1
21238: PUSH
21239: DOUBLE
21240: LD_INT 1
21242: DEC
21243: ST_TO_ADDR
21244: LD_VAR 0 2
21248: PUSH
21249: FOR_TO
21250: IFFALSE 21349
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21252: LD_VAR 0 3
21256: PUSH
21257: LD_VAR 0 1
21261: ARRAY
21262: PPUSH
21263: LD_VAR 0 1
21267: PUSH
21268: LD_INT 4
21270: MOD
21271: PUSH
21272: LD_INT 1
21274: PLUS
21275: PPUSH
21276: CALL_OW 259
21280: PUSH
21281: LD_INT 10
21283: LESS
21284: IFFALSE 21347
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21286: LD_VAR 0 3
21290: PUSH
21291: LD_VAR 0 1
21295: ARRAY
21296: PPUSH
21297: LD_VAR 0 1
21301: PUSH
21302: LD_INT 4
21304: MOD
21305: PUSH
21306: LD_INT 1
21308: PLUS
21309: PPUSH
21310: LD_VAR 0 3
21314: PUSH
21315: LD_VAR 0 1
21319: ARRAY
21320: PPUSH
21321: LD_VAR 0 1
21325: PUSH
21326: LD_INT 4
21328: MOD
21329: PUSH
21330: LD_INT 1
21332: PLUS
21333: PPUSH
21334: CALL_OW 259
21338: PUSH
21339: LD_INT 1
21341: PLUS
21342: PPUSH
21343: CALL_OW 237
21347: GO 21249
21349: POP
21350: POP
// end ;
21351: PPOPN 3
21353: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21354: LD_EXP 65
21358: PUSH
21359: LD_EXP 73
21363: AND
21364: IFFALSE 21384
21366: GO 21368
21368: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21369: LD_INT 4
21371: PPUSH
21372: LD_OWVAR 2
21376: PPUSH
21377: LD_INT 0
21379: PPUSH
21380: CALL_OW 324
21384: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21385: LD_EXP 65
21389: PUSH
21390: LD_EXP 102
21394: AND
21395: IFFALSE 21415
21397: GO 21399
21399: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21400: LD_INT 19
21402: PPUSH
21403: LD_OWVAR 2
21407: PPUSH
21408: LD_INT 0
21410: PPUSH
21411: CALL_OW 324
21415: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21416: LD_EXP 65
21420: PUSH
21421: LD_EXP 74
21425: AND
21426: IFFALSE 21528
21428: GO 21430
21430: DISABLE
21431: LD_INT 0
21433: PPUSH
21434: PPUSH
// begin enable ;
21435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21436: LD_ADDR_VAR 0 2
21440: PUSH
21441: LD_INT 22
21443: PUSH
21444: LD_OWVAR 2
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: LD_INT 34
21458: PUSH
21459: LD_INT 11
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 34
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PPUSH
21485: CALL_OW 69
21489: ST_TO_ADDR
// if not tmp then
21490: LD_VAR 0 2
21494: NOT
21495: IFFALSE 21499
// exit ;
21497: GO 21528
// for i in tmp do
21499: LD_ADDR_VAR 0 1
21503: PUSH
21504: LD_VAR 0 2
21508: PUSH
21509: FOR_IN
21510: IFFALSE 21526
// begin SetLives ( i , 0 ) ;
21512: LD_VAR 0 1
21516: PPUSH
21517: LD_INT 0
21519: PPUSH
21520: CALL_OW 234
// end ;
21524: GO 21509
21526: POP
21527: POP
// end ;
21528: PPOPN 2
21530: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21531: LD_EXP 65
21535: PUSH
21536: LD_EXP 75
21540: AND
21541: IFFALSE 21561
21543: GO 21545
21545: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21546: LD_INT 32
21548: PPUSH
21549: LD_OWVAR 2
21553: PPUSH
21554: LD_INT 0
21556: PPUSH
21557: CALL_OW 324
21561: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21562: LD_EXP 65
21566: PUSH
21567: LD_EXP 76
21571: AND
21572: IFFALSE 21753
21574: GO 21576
21576: DISABLE
21577: LD_INT 0
21579: PPUSH
21580: PPUSH
21581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21582: LD_ADDR_VAR 0 2
21586: PUSH
21587: LD_INT 22
21589: PUSH
21590: LD_OWVAR 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 33
21601: PUSH
21602: LD_INT 3
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PPUSH
21613: CALL_OW 69
21617: ST_TO_ADDR
// if not tmp then
21618: LD_VAR 0 2
21622: NOT
21623: IFFALSE 21627
// exit ;
21625: GO 21753
// side := 0 ;
21627: LD_ADDR_VAR 0 3
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
// for i := 1 to 8 do
21635: LD_ADDR_VAR 0 1
21639: PUSH
21640: DOUBLE
21641: LD_INT 1
21643: DEC
21644: ST_TO_ADDR
21645: LD_INT 8
21647: PUSH
21648: FOR_TO
21649: IFFALSE 21697
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21651: LD_OWVAR 2
21655: PUSH
21656: LD_VAR 0 1
21660: NONEQUAL
21661: PUSH
21662: LD_OWVAR 2
21666: PPUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 81
21676: PUSH
21677: LD_INT 2
21679: EQUAL
21680: AND
21681: IFFALSE 21695
// begin side := i ;
21683: LD_ADDR_VAR 0 3
21687: PUSH
21688: LD_VAR 0 1
21692: ST_TO_ADDR
// break ;
21693: GO 21697
// end ;
21695: GO 21648
21697: POP
21698: POP
// if not side then
21699: LD_VAR 0 3
21703: NOT
21704: IFFALSE 21708
// exit ;
21706: GO 21753
// for i := 1 to tmp do
21708: LD_ADDR_VAR 0 1
21712: PUSH
21713: DOUBLE
21714: LD_INT 1
21716: DEC
21717: ST_TO_ADDR
21718: LD_VAR 0 2
21722: PUSH
21723: FOR_TO
21724: IFFALSE 21751
// if Prob ( 60 ) then
21726: LD_INT 60
21728: PPUSH
21729: CALL_OW 13
21733: IFFALSE 21749
// SetSide ( i , side ) ;
21735: LD_VAR 0 1
21739: PPUSH
21740: LD_VAR 0 3
21744: PPUSH
21745: CALL_OW 235
21749: GO 21723
21751: POP
21752: POP
// end ;
21753: PPOPN 3
21755: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21756: LD_EXP 65
21760: PUSH
21761: LD_EXP 78
21765: AND
21766: IFFALSE 21885
21768: GO 21770
21770: DISABLE
21771: LD_INT 0
21773: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: LD_INT 22
21781: PUSH
21782: LD_OWVAR 2
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 21
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 3
21803: PUSH
21804: LD_INT 23
21806: PUSH
21807: LD_INT 0
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: PUSH
21828: FOR_IN
21829: IFFALSE 21883
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21831: LD_VAR 0 1
21835: PPUSH
21836: CALL_OW 257
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: LD_INT 4
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: IN
21859: IFFALSE 21881
// SetClass ( un , rand ( 1 , 4 ) ) ;
21861: LD_VAR 0 1
21865: PPUSH
21866: LD_INT 1
21868: PPUSH
21869: LD_INT 4
21871: PPUSH
21872: CALL_OW 12
21876: PPUSH
21877: CALL_OW 336
21881: GO 21828
21883: POP
21884: POP
// end ;
21885: PPOPN 1
21887: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21888: LD_EXP 65
21892: PUSH
21893: LD_EXP 77
21897: AND
21898: IFFALSE 21977
21900: GO 21902
21902: DISABLE
21903: LD_INT 0
21905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21906: LD_ADDR_VAR 0 1
21910: PUSH
21911: LD_INT 22
21913: PUSH
21914: LD_OWVAR 2
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 21
21925: PUSH
21926: LD_INT 3
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PPUSH
21937: CALL_OW 69
21941: ST_TO_ADDR
// if not tmp then
21942: LD_VAR 0 1
21946: NOT
21947: IFFALSE 21951
// exit ;
21949: GO 21977
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21951: LD_VAR 0 1
21955: PUSH
21956: LD_INT 1
21958: PPUSH
21959: LD_VAR 0 1
21963: PPUSH
21964: CALL_OW 12
21968: ARRAY
21969: PPUSH
21970: LD_INT 100
21972: PPUSH
21973: CALL_OW 234
// end ;
21977: PPOPN 1
21979: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21980: LD_EXP 65
21984: PUSH
21985: LD_EXP 79
21989: AND
21990: IFFALSE 22088
21992: GO 21994
21994: DISABLE
21995: LD_INT 0
21997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21998: LD_ADDR_VAR 0 1
22002: PUSH
22003: LD_INT 22
22005: PUSH
22006: LD_OWVAR 2
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 21
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PPUSH
22029: CALL_OW 69
22033: ST_TO_ADDR
// if not tmp then
22034: LD_VAR 0 1
22038: NOT
22039: IFFALSE 22043
// exit ;
22041: GO 22088
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22043: LD_VAR 0 1
22047: PUSH
22048: LD_INT 1
22050: PPUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 12
22060: ARRAY
22061: PPUSH
22062: LD_INT 1
22064: PPUSH
22065: LD_INT 4
22067: PPUSH
22068: CALL_OW 12
22072: PPUSH
22073: LD_INT 3000
22075: PPUSH
22076: LD_INT 9000
22078: PPUSH
22079: CALL_OW 12
22083: PPUSH
22084: CALL_OW 492
// end ;
22088: PPOPN 1
22090: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22091: LD_EXP 65
22095: PUSH
22096: LD_EXP 80
22100: AND
22101: IFFALSE 22121
22103: GO 22105
22105: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22106: LD_INT 1
22108: PPUSH
22109: LD_OWVAR 2
22113: PPUSH
22114: LD_INT 0
22116: PPUSH
22117: CALL_OW 324
22121: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22122: LD_EXP 65
22126: PUSH
22127: LD_EXP 81
22131: AND
22132: IFFALSE 22215
22134: GO 22136
22136: DISABLE
22137: LD_INT 0
22139: PPUSH
22140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22141: LD_ADDR_VAR 0 2
22145: PUSH
22146: LD_INT 22
22148: PUSH
22149: LD_OWVAR 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 21
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PPUSH
22172: CALL_OW 69
22176: ST_TO_ADDR
// if not tmp then
22177: LD_VAR 0 2
22181: NOT
22182: IFFALSE 22186
// exit ;
22184: GO 22215
// for i in tmp do
22186: LD_ADDR_VAR 0 1
22190: PUSH
22191: LD_VAR 0 2
22195: PUSH
22196: FOR_IN
22197: IFFALSE 22213
// SetBLevel ( i , 10 ) ;
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_INT 10
22206: PPUSH
22207: CALL_OW 241
22211: GO 22196
22213: POP
22214: POP
// end ;
22215: PPOPN 2
22217: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22218: LD_EXP 65
22222: PUSH
22223: LD_EXP 82
22227: AND
22228: IFFALSE 22339
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
22236: PPUSH
22237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22238: LD_ADDR_VAR 0 3
22242: PUSH
22243: LD_INT 22
22245: PUSH
22246: LD_OWVAR 2
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 25
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PPUSH
22269: CALL_OW 69
22273: ST_TO_ADDR
// if not tmp then
22274: LD_VAR 0 3
22278: NOT
22279: IFFALSE 22283
// exit ;
22281: GO 22339
// un := tmp [ rand ( 1 , tmp ) ] ;
22283: LD_ADDR_VAR 0 2
22287: PUSH
22288: LD_VAR 0 3
22292: PUSH
22293: LD_INT 1
22295: PPUSH
22296: LD_VAR 0 3
22300: PPUSH
22301: CALL_OW 12
22305: ARRAY
22306: ST_TO_ADDR
// if Crawls ( un ) then
22307: LD_VAR 0 2
22311: PPUSH
22312: CALL_OW 318
22316: IFFALSE 22327
// ComWalk ( un ) ;
22318: LD_VAR 0 2
22322: PPUSH
22323: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22327: LD_VAR 0 2
22331: PPUSH
22332: LD_INT 5
22334: PPUSH
22335: CALL_OW 336
// end ;
22339: PPOPN 3
22341: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22342: LD_EXP 65
22346: PUSH
22347: LD_EXP 83
22351: AND
22352: PUSH
22353: LD_OWVAR 67
22357: PUSH
22358: LD_INT 3
22360: LESS
22361: AND
22362: IFFALSE 22381
22364: GO 22366
22366: DISABLE
// Difficulty := Difficulty + 1 ;
22367: LD_ADDR_OWVAR 67
22371: PUSH
22372: LD_OWVAR 67
22376: PUSH
22377: LD_INT 1
22379: PLUS
22380: ST_TO_ADDR
22381: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22382: LD_EXP 65
22386: PUSH
22387: LD_EXP 84
22391: AND
22392: IFFALSE 22495
22394: GO 22396
22396: DISABLE
22397: LD_INT 0
22399: PPUSH
// begin for i := 1 to 5 do
22400: LD_ADDR_VAR 0 1
22404: PUSH
22405: DOUBLE
22406: LD_INT 1
22408: DEC
22409: ST_TO_ADDR
22410: LD_INT 5
22412: PUSH
22413: FOR_TO
22414: IFFALSE 22493
// begin uc_nation := nation_nature ;
22416: LD_ADDR_OWVAR 21
22420: PUSH
22421: LD_INT 0
22423: ST_TO_ADDR
// uc_side := 0 ;
22424: LD_ADDR_OWVAR 20
22428: PUSH
22429: LD_INT 0
22431: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22432: LD_ADDR_OWVAR 29
22436: PUSH
22437: LD_INT 12
22439: PUSH
22440: LD_INT 12
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: ST_TO_ADDR
// hc_agressivity := 20 ;
22447: LD_ADDR_OWVAR 35
22451: PUSH
22452: LD_INT 20
22454: ST_TO_ADDR
// hc_class := class_tiger ;
22455: LD_ADDR_OWVAR 28
22459: PUSH
22460: LD_INT 14
22462: ST_TO_ADDR
// hc_gallery :=  ;
22463: LD_ADDR_OWVAR 33
22467: PUSH
22468: LD_STRING 
22470: ST_TO_ADDR
// hc_name :=  ;
22471: LD_ADDR_OWVAR 26
22475: PUSH
22476: LD_STRING 
22478: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22479: CALL_OW 44
22483: PPUSH
22484: LD_INT 0
22486: PPUSH
22487: CALL_OW 51
// end ;
22491: GO 22413
22493: POP
22494: POP
// end ;
22495: PPOPN 1
22497: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22498: LD_EXP 65
22502: PUSH
22503: LD_EXP 85
22507: AND
22508: IFFALSE 22517
22510: GO 22512
22512: DISABLE
// StreamSibBomb ;
22513: CALL 22518 0 0
22517: END
// export function StreamSibBomb ; var i , x , y ; begin
22518: LD_INT 0
22520: PPUSH
22521: PPUSH
22522: PPUSH
22523: PPUSH
// result := false ;
22524: LD_ADDR_VAR 0 1
22528: PUSH
22529: LD_INT 0
22531: ST_TO_ADDR
// for i := 1 to 16 do
22532: LD_ADDR_VAR 0 2
22536: PUSH
22537: DOUBLE
22538: LD_INT 1
22540: DEC
22541: ST_TO_ADDR
22542: LD_INT 16
22544: PUSH
22545: FOR_TO
22546: IFFALSE 22745
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22548: LD_ADDR_VAR 0 3
22552: PUSH
22553: LD_INT 10
22555: PUSH
22556: LD_INT 20
22558: PUSH
22559: LD_INT 30
22561: PUSH
22562: LD_INT 40
22564: PUSH
22565: LD_INT 50
22567: PUSH
22568: LD_INT 60
22570: PUSH
22571: LD_INT 70
22573: PUSH
22574: LD_INT 80
22576: PUSH
22577: LD_INT 90
22579: PUSH
22580: LD_INT 100
22582: PUSH
22583: LD_INT 110
22585: PUSH
22586: LD_INT 120
22588: PUSH
22589: LD_INT 130
22591: PUSH
22592: LD_INT 140
22594: PUSH
22595: LD_INT 150
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PPUSH
22618: LD_INT 15
22620: PPUSH
22621: CALL_OW 12
22625: ARRAY
22626: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22627: LD_ADDR_VAR 0 4
22631: PUSH
22632: LD_INT 10
22634: PUSH
22635: LD_INT 20
22637: PUSH
22638: LD_INT 30
22640: PUSH
22641: LD_INT 40
22643: PUSH
22644: LD_INT 50
22646: PUSH
22647: LD_INT 60
22649: PUSH
22650: LD_INT 70
22652: PUSH
22653: LD_INT 80
22655: PUSH
22656: LD_INT 90
22658: PUSH
22659: LD_INT 100
22661: PUSH
22662: LD_INT 110
22664: PUSH
22665: LD_INT 120
22667: PUSH
22668: LD_INT 130
22670: PUSH
22671: LD_INT 140
22673: PUSH
22674: LD_INT 150
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: PPUSH
22697: LD_INT 15
22699: PPUSH
22700: CALL_OW 12
22704: ARRAY
22705: ST_TO_ADDR
// if ValidHex ( x , y ) then
22706: LD_VAR 0 3
22710: PPUSH
22711: LD_VAR 0 4
22715: PPUSH
22716: CALL_OW 488
22720: IFFALSE 22743
// begin result := [ x , y ] ;
22722: LD_ADDR_VAR 0 1
22726: PUSH
22727: LD_VAR 0 3
22731: PUSH
22732: LD_VAR 0 4
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: ST_TO_ADDR
// break ;
22741: GO 22745
// end ; end ;
22743: GO 22545
22745: POP
22746: POP
// if result then
22747: LD_VAR 0 1
22751: IFFALSE 22811
// begin ToLua ( playSibBomb() ) ;
22753: LD_STRING playSibBomb()
22755: PPUSH
22756: CALL_OW 559
// wait ( 0 0$14 ) ;
22760: LD_INT 490
22762: PPUSH
22763: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22767: LD_VAR 0 1
22771: PUSH
22772: LD_INT 1
22774: ARRAY
22775: PPUSH
22776: LD_VAR 0 1
22780: PUSH
22781: LD_INT 2
22783: ARRAY
22784: PPUSH
22785: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22789: LD_VAR 0 1
22793: PUSH
22794: LD_INT 1
22796: ARRAY
22797: PPUSH
22798: LD_VAR 0 1
22802: PUSH
22803: LD_INT 2
22805: ARRAY
22806: PPUSH
22807: CALL_OW 429
// end ; end ;
22811: LD_VAR 0 1
22815: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22816: LD_EXP 65
22820: PUSH
22821: LD_EXP 87
22825: AND
22826: IFFALSE 22838
22828: GO 22830
22830: DISABLE
// YouLost (  ) ;
22831: LD_STRING 
22833: PPUSH
22834: CALL_OW 104
22838: END
// every 0 0$1 trigger StreamModeActive and sFog do
22839: LD_EXP 65
22843: PUSH
22844: LD_EXP 86
22848: AND
22849: IFFALSE 22863
22851: GO 22853
22853: DISABLE
// FogOff ( your_side ) ;
22854: LD_OWVAR 2
22858: PPUSH
22859: CALL_OW 344
22863: END
// every 0 0$1 trigger StreamModeActive and sSun do
22864: LD_EXP 65
22868: PUSH
22869: LD_EXP 88
22873: AND
22874: IFFALSE 22902
22876: GO 22878
22878: DISABLE
// begin solar_recharge_percent := 0 ;
22879: LD_ADDR_OWVAR 79
22883: PUSH
22884: LD_INT 0
22886: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22887: LD_INT 10500
22889: PPUSH
22890: CALL_OW 67
// solar_recharge_percent := 100 ;
22894: LD_ADDR_OWVAR 79
22898: PUSH
22899: LD_INT 100
22901: ST_TO_ADDR
// end ;
22902: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22903: LD_EXP 65
22907: PUSH
22908: LD_EXP 89
22912: AND
22913: IFFALSE 23152
22915: GO 22917
22917: DISABLE
22918: LD_INT 0
22920: PPUSH
22921: PPUSH
22922: PPUSH
// begin tmp := [ ] ;
22923: LD_ADDR_VAR 0 3
22927: PUSH
22928: EMPTY
22929: ST_TO_ADDR
// for i := 1 to 6 do
22930: LD_ADDR_VAR 0 1
22934: PUSH
22935: DOUBLE
22936: LD_INT 1
22938: DEC
22939: ST_TO_ADDR
22940: LD_INT 6
22942: PUSH
22943: FOR_TO
22944: IFFALSE 23049
// begin uc_nation := nation_nature ;
22946: LD_ADDR_OWVAR 21
22950: PUSH
22951: LD_INT 0
22953: ST_TO_ADDR
// uc_side := 0 ;
22954: LD_ADDR_OWVAR 20
22958: PUSH
22959: LD_INT 0
22961: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22962: LD_ADDR_OWVAR 29
22966: PUSH
22967: LD_INT 12
22969: PUSH
22970: LD_INT 12
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: ST_TO_ADDR
// hc_agressivity := 20 ;
22977: LD_ADDR_OWVAR 35
22981: PUSH
22982: LD_INT 20
22984: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22985: LD_ADDR_OWVAR 28
22989: PUSH
22990: LD_INT 17
22992: ST_TO_ADDR
// hc_gallery :=  ;
22993: LD_ADDR_OWVAR 33
22997: PUSH
22998: LD_STRING 
23000: ST_TO_ADDR
// hc_name :=  ;
23001: LD_ADDR_OWVAR 26
23005: PUSH
23006: LD_STRING 
23008: ST_TO_ADDR
// un := CreateHuman ;
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: CALL_OW 44
23018: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23019: LD_VAR 0 2
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: CALL_OW 51
// tmp := tmp ^ un ;
23031: LD_ADDR_VAR 0 3
23035: PUSH
23036: LD_VAR 0 3
23040: PUSH
23041: LD_VAR 0 2
23045: ADD
23046: ST_TO_ADDR
// end ;
23047: GO 22943
23049: POP
23050: POP
// repeat wait ( 0 0$1 ) ;
23051: LD_INT 35
23053: PPUSH
23054: CALL_OW 67
// for un in tmp do
23058: LD_ADDR_VAR 0 2
23062: PUSH
23063: LD_VAR 0 3
23067: PUSH
23068: FOR_IN
23069: IFFALSE 23143
// begin if IsDead ( un ) then
23071: LD_VAR 0 2
23075: PPUSH
23076: CALL_OW 301
23080: IFFALSE 23100
// begin tmp := tmp diff un ;
23082: LD_ADDR_VAR 0 3
23086: PUSH
23087: LD_VAR 0 3
23091: PUSH
23092: LD_VAR 0 2
23096: DIFF
23097: ST_TO_ADDR
// continue ;
23098: GO 23068
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23100: LD_VAR 0 2
23104: PPUSH
23105: LD_INT 3
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PPUSH
23122: CALL_OW 69
23126: PPUSH
23127: LD_VAR 0 2
23131: PPUSH
23132: CALL_OW 74
23136: PPUSH
23137: CALL_OW 115
// end ;
23141: GO 23068
23143: POP
23144: POP
// until not tmp ;
23145: LD_VAR 0 3
23149: NOT
23150: IFFALSE 23051
// end ;
23152: PPOPN 3
23154: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23155: LD_EXP 65
23159: PUSH
23160: LD_EXP 90
23164: AND
23165: IFFALSE 23219
23167: GO 23169
23169: DISABLE
// begin ToLua ( displayTroll(); ) ;
23170: LD_STRING displayTroll();
23172: PPUSH
23173: CALL_OW 559
// wait ( 3 3$00 ) ;
23177: LD_INT 6300
23179: PPUSH
23180: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23184: LD_STRING hideTroll();
23186: PPUSH
23187: CALL_OW 559
// wait ( 1 1$00 ) ;
23191: LD_INT 2100
23193: PPUSH
23194: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23198: LD_STRING displayTroll();
23200: PPUSH
23201: CALL_OW 559
// wait ( 1 1$00 ) ;
23205: LD_INT 2100
23207: PPUSH
23208: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23212: LD_STRING hideTroll();
23214: PPUSH
23215: CALL_OW 559
// end ;
23219: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23220: LD_EXP 65
23224: PUSH
23225: LD_EXP 91
23229: AND
23230: IFFALSE 23293
23232: GO 23234
23234: DISABLE
23235: LD_INT 0
23237: PPUSH
// begin p := 0 ;
23238: LD_ADDR_VAR 0 1
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
// repeat game_speed := 1 ;
23246: LD_ADDR_OWVAR 65
23250: PUSH
23251: LD_INT 1
23253: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23254: LD_INT 35
23256: PPUSH
23257: CALL_OW 67
// p := p + 1 ;
23261: LD_ADDR_VAR 0 1
23265: PUSH
23266: LD_VAR 0 1
23270: PUSH
23271: LD_INT 1
23273: PLUS
23274: ST_TO_ADDR
// until p >= 60 ;
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 60
23282: GREATEREQUAL
23283: IFFALSE 23246
// game_speed := 4 ;
23285: LD_ADDR_OWVAR 65
23289: PUSH
23290: LD_INT 4
23292: ST_TO_ADDR
// end ;
23293: PPOPN 1
23295: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23296: LD_EXP 65
23300: PUSH
23301: LD_EXP 92
23305: AND
23306: IFFALSE 23452
23308: GO 23310
23310: DISABLE
23311: LD_INT 0
23313: PPUSH
23314: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23315: LD_ADDR_VAR 0 1
23319: PUSH
23320: LD_INT 22
23322: PUSH
23323: LD_OWVAR 2
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 30
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 69
23368: ST_TO_ADDR
// if not depot then
23369: LD_VAR 0 1
23373: NOT
23374: IFFALSE 23378
// exit ;
23376: GO 23452
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23378: LD_ADDR_VAR 0 2
23382: PUSH
23383: LD_VAR 0 1
23387: PUSH
23388: LD_INT 1
23390: PPUSH
23391: LD_VAR 0 1
23395: PPUSH
23396: CALL_OW 12
23400: ARRAY
23401: PPUSH
23402: CALL_OW 274
23406: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_INT 1
23414: PPUSH
23415: LD_INT 0
23417: PPUSH
23418: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23422: LD_VAR 0 2
23426: PPUSH
23427: LD_INT 2
23429: PPUSH
23430: LD_INT 0
23432: PPUSH
23433: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23437: LD_VAR 0 2
23441: PPUSH
23442: LD_INT 3
23444: PPUSH
23445: LD_INT 0
23447: PPUSH
23448: CALL_OW 277
// end ;
23452: PPOPN 2
23454: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23455: LD_EXP 65
23459: PUSH
23460: LD_EXP 93
23464: AND
23465: IFFALSE 23562
23467: GO 23469
23469: DISABLE
23470: LD_INT 0
23472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23473: LD_ADDR_VAR 0 1
23477: PUSH
23478: LD_INT 22
23480: PUSH
23481: LD_OWVAR 2
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 3
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: PPUSH
23522: CALL_OW 69
23526: ST_TO_ADDR
// if not tmp then
23527: LD_VAR 0 1
23531: NOT
23532: IFFALSE 23536
// exit ;
23534: GO 23562
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23536: LD_VAR 0 1
23540: PUSH
23541: LD_INT 1
23543: PPUSH
23544: LD_VAR 0 1
23548: PPUSH
23549: CALL_OW 12
23553: ARRAY
23554: PPUSH
23555: LD_INT 200
23557: PPUSH
23558: CALL_OW 234
// end ;
23562: PPOPN 1
23564: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23565: LD_EXP 65
23569: PUSH
23570: LD_EXP 94
23574: AND
23575: IFFALSE 23654
23577: GO 23579
23579: DISABLE
23580: LD_INT 0
23582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23583: LD_ADDR_VAR 0 1
23587: PUSH
23588: LD_INT 22
23590: PUSH
23591: LD_OWVAR 2
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 21
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PPUSH
23614: CALL_OW 69
23618: ST_TO_ADDR
// if not tmp then
23619: LD_VAR 0 1
23623: NOT
23624: IFFALSE 23628
// exit ;
23626: GO 23654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23628: LD_VAR 0 1
23632: PUSH
23633: LD_INT 1
23635: PPUSH
23636: LD_VAR 0 1
23640: PPUSH
23641: CALL_OW 12
23645: ARRAY
23646: PPUSH
23647: LD_INT 60
23649: PPUSH
23650: CALL_OW 234
// end ;
23654: PPOPN 1
23656: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23657: LD_EXP 65
23661: PUSH
23662: LD_EXP 95
23666: AND
23667: IFFALSE 23766
23669: GO 23671
23671: DISABLE
23672: LD_INT 0
23674: PPUSH
23675: PPUSH
// begin enable ;
23676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23677: LD_ADDR_VAR 0 1
23681: PUSH
23682: LD_INT 22
23684: PUSH
23685: LD_OWVAR 2
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 61
23696: PUSH
23697: EMPTY
23698: LIST
23699: PUSH
23700: LD_INT 33
23702: PUSH
23703: LD_INT 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: PPUSH
23715: CALL_OW 69
23719: ST_TO_ADDR
// if not tmp then
23720: LD_VAR 0 1
23724: NOT
23725: IFFALSE 23729
// exit ;
23727: GO 23766
// for i in tmp do
23729: LD_ADDR_VAR 0 2
23733: PUSH
23734: LD_VAR 0 1
23738: PUSH
23739: FOR_IN
23740: IFFALSE 23764
// if IsControledBy ( i ) then
23742: LD_VAR 0 2
23746: PPUSH
23747: CALL_OW 312
23751: IFFALSE 23762
// ComUnlink ( i ) ;
23753: LD_VAR 0 2
23757: PPUSH
23758: CALL_OW 136
23762: GO 23739
23764: POP
23765: POP
// end ;
23766: PPOPN 2
23768: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23769: LD_EXP 65
23773: PUSH
23774: LD_EXP 96
23778: AND
23779: IFFALSE 23919
23781: GO 23783
23783: DISABLE
23784: LD_INT 0
23786: PPUSH
23787: PPUSH
// begin ToLua ( displayPowell(); ) ;
23788: LD_STRING displayPowell();
23790: PPUSH
23791: CALL_OW 559
// uc_side := 0 ;
23795: LD_ADDR_OWVAR 20
23799: PUSH
23800: LD_INT 0
23802: ST_TO_ADDR
// uc_nation := 2 ;
23803: LD_ADDR_OWVAR 21
23807: PUSH
23808: LD_INT 2
23810: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23811: LD_ADDR_OWVAR 37
23815: PUSH
23816: LD_INT 14
23818: ST_TO_ADDR
// vc_engine := engine_siberite ;
23819: LD_ADDR_OWVAR 39
23823: PUSH
23824: LD_INT 3
23826: ST_TO_ADDR
// vc_control := control_apeman ;
23827: LD_ADDR_OWVAR 38
23831: PUSH
23832: LD_INT 5
23834: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23835: LD_ADDR_OWVAR 40
23839: PUSH
23840: LD_INT 29
23842: ST_TO_ADDR
// un := CreateVehicle ;
23843: LD_ADDR_VAR 0 2
23847: PUSH
23848: CALL_OW 45
23852: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23853: LD_VAR 0 2
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23865: LD_INT 35
23867: PPUSH
23868: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23872: LD_VAR 0 2
23876: PPUSH
23877: LD_INT 22
23879: PUSH
23880: LD_OWVAR 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PPUSH
23889: CALL_OW 69
23893: PPUSH
23894: LD_VAR 0 2
23898: PPUSH
23899: CALL_OW 74
23903: PPUSH
23904: CALL_OW 115
// until IsDead ( un ) ;
23908: LD_VAR 0 2
23912: PPUSH
23913: CALL_OW 301
23917: IFFALSE 23865
// end ;
23919: PPOPN 2
23921: END
// every 0 0$1 trigger StreamModeActive and sStu do
23922: LD_EXP 65
23926: PUSH
23927: LD_EXP 104
23931: AND
23932: IFFALSE 23948
23934: GO 23936
23936: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23937: LD_STRING displayStucuk();
23939: PPUSH
23940: CALL_OW 559
// ResetFog ;
23944: CALL_OW 335
// end ;
23948: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23949: LD_EXP 65
23953: PUSH
23954: LD_EXP 97
23958: AND
23959: IFFALSE 24100
23961: GO 23963
23963: DISABLE
23964: LD_INT 0
23966: PPUSH
23967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23968: LD_ADDR_VAR 0 2
23972: PUSH
23973: LD_INT 22
23975: PUSH
23976: LD_OWVAR 2
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 21
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PPUSH
23999: CALL_OW 69
24003: ST_TO_ADDR
// if not tmp then
24004: LD_VAR 0 2
24008: NOT
24009: IFFALSE 24013
// exit ;
24011: GO 24100
// un := tmp [ rand ( 1 , tmp ) ] ;
24013: LD_ADDR_VAR 0 1
24017: PUSH
24018: LD_VAR 0 2
24022: PUSH
24023: LD_INT 1
24025: PPUSH
24026: LD_VAR 0 2
24030: PPUSH
24031: CALL_OW 12
24035: ARRAY
24036: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24037: LD_VAR 0 1
24041: PPUSH
24042: LD_INT 0
24044: PPUSH
24045: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24049: LD_VAR 0 1
24053: PPUSH
24054: LD_OWVAR 3
24058: PUSH
24059: LD_VAR 0 1
24063: DIFF
24064: PPUSH
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL_OW 74
24074: PPUSH
24075: CALL_OW 115
// wait ( 0 0$20 ) ;
24079: LD_INT 700
24081: PPUSH
24082: CALL_OW 67
// SetSide ( un , your_side ) ;
24086: LD_VAR 0 1
24090: PPUSH
24091: LD_OWVAR 2
24095: PPUSH
24096: CALL_OW 235
// end ;
24100: PPOPN 2
24102: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24103: LD_EXP 65
24107: PUSH
24108: LD_EXP 98
24112: AND
24113: IFFALSE 24219
24115: GO 24117
24117: DISABLE
24118: LD_INT 0
24120: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24121: LD_ADDR_VAR 0 1
24125: PUSH
24126: LD_INT 22
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: LD_INT 30
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 30
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PPUSH
24170: CALL_OW 69
24174: ST_TO_ADDR
// if not depot then
24175: LD_VAR 0 1
24179: NOT
24180: IFFALSE 24184
// exit ;
24182: GO 24219
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24184: LD_VAR 0 1
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: PPUSH
24193: CALL_OW 250
24197: PPUSH
24198: LD_VAR 0 1
24202: PUSH
24203: LD_INT 1
24205: ARRAY
24206: PPUSH
24207: CALL_OW 251
24211: PPUSH
24212: LD_INT 70
24214: PPUSH
24215: CALL_OW 495
// end ;
24219: PPOPN 1
24221: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24222: LD_EXP 65
24226: PUSH
24227: LD_EXP 99
24231: AND
24232: IFFALSE 24443
24234: GO 24236
24236: DISABLE
24237: LD_INT 0
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24244: LD_ADDR_VAR 0 5
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_OWVAR 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 21
24263: PUSH
24264: LD_INT 1
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 69
24279: ST_TO_ADDR
// if not tmp then
24280: LD_VAR 0 5
24284: NOT
24285: IFFALSE 24289
// exit ;
24287: GO 24443
// for i in tmp do
24289: LD_ADDR_VAR 0 1
24293: PUSH
24294: LD_VAR 0 5
24298: PUSH
24299: FOR_IN
24300: IFFALSE 24441
// begin d := rand ( 0 , 5 ) ;
24302: LD_ADDR_VAR 0 4
24306: PUSH
24307: LD_INT 0
24309: PPUSH
24310: LD_INT 5
24312: PPUSH
24313: CALL_OW 12
24317: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24318: LD_ADDR_VAR 0 2
24322: PUSH
24323: LD_VAR 0 1
24327: PPUSH
24328: CALL_OW 250
24332: PPUSH
24333: LD_VAR 0 4
24337: PPUSH
24338: LD_INT 3
24340: PPUSH
24341: LD_INT 12
24343: PPUSH
24344: CALL_OW 12
24348: PPUSH
24349: CALL_OW 272
24353: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24354: LD_ADDR_VAR 0 3
24358: PUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 251
24368: PPUSH
24369: LD_VAR 0 4
24373: PPUSH
24374: LD_INT 3
24376: PPUSH
24377: LD_INT 12
24379: PPUSH
24380: CALL_OW 12
24384: PPUSH
24385: CALL_OW 273
24389: ST_TO_ADDR
// if ValidHex ( x , y ) then
24390: LD_VAR 0 2
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: CALL_OW 488
24404: IFFALSE 24439
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24406: LD_VAR 0 1
24410: PPUSH
24411: LD_VAR 0 2
24415: PPUSH
24416: LD_VAR 0 3
24420: PPUSH
24421: LD_INT 3
24423: PPUSH
24424: LD_INT 6
24426: PPUSH
24427: CALL_OW 12
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 483
// end ;
24439: GO 24299
24441: POP
24442: POP
// end ;
24443: PPOPN 5
24445: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24446: LD_EXP 65
24450: PUSH
24451: LD_EXP 100
24455: AND
24456: IFFALSE 24550
24458: GO 24460
24460: DISABLE
24461: LD_INT 0
24463: PPUSH
24464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: LD_INT 22
24472: PUSH
24473: LD_OWVAR 2
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 32
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 21
24494: PUSH
24495: LD_INT 2
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: PPUSH
24507: CALL_OW 69
24511: ST_TO_ADDR
// if not tmp then
24512: LD_VAR 0 2
24516: NOT
24517: IFFALSE 24521
// exit ;
24519: GO 24550
// for i in tmp do
24521: LD_ADDR_VAR 0 1
24525: PUSH
24526: LD_VAR 0 2
24530: PUSH
24531: FOR_IN
24532: IFFALSE 24548
// SetFuel ( i , 0 ) ;
24534: LD_VAR 0 1
24538: PPUSH
24539: LD_INT 0
24541: PPUSH
24542: CALL_OW 240
24546: GO 24531
24548: POP
24549: POP
// end ;
24550: PPOPN 2
24552: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24553: LD_EXP 65
24557: PUSH
24558: LD_EXP 101
24562: AND
24563: IFFALSE 24629
24565: GO 24567
24567: DISABLE
24568: LD_INT 0
24570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24571: LD_ADDR_VAR 0 1
24575: PUSH
24576: LD_INT 22
24578: PUSH
24579: LD_OWVAR 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 30
24590: PUSH
24591: LD_INT 29
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 69
24606: ST_TO_ADDR
// if not tmp then
24607: LD_VAR 0 1
24611: NOT
24612: IFFALSE 24616
// exit ;
24614: GO 24629
// DestroyUnit ( tmp [ 1 ] ) ;
24616: LD_VAR 0 1
24620: PUSH
24621: LD_INT 1
24623: ARRAY
24624: PPUSH
24625: CALL_OW 65
// end ;
24629: PPOPN 1
24631: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24632: LD_EXP 65
24636: PUSH
24637: LD_EXP 103
24641: AND
24642: IFFALSE 24771
24644: GO 24646
24646: DISABLE
24647: LD_INT 0
24649: PPUSH
// begin uc_side := 0 ;
24650: LD_ADDR_OWVAR 20
24654: PUSH
24655: LD_INT 0
24657: ST_TO_ADDR
// uc_nation := nation_arabian ;
24658: LD_ADDR_OWVAR 21
24662: PUSH
24663: LD_INT 2
24665: ST_TO_ADDR
// hc_gallery :=  ;
24666: LD_ADDR_OWVAR 33
24670: PUSH
24671: LD_STRING 
24673: ST_TO_ADDR
// hc_name :=  ;
24674: LD_ADDR_OWVAR 26
24678: PUSH
24679: LD_STRING 
24681: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24682: LD_INT 1
24684: PPUSH
24685: LD_INT 11
24687: PPUSH
24688: LD_INT 10
24690: PPUSH
24691: CALL_OW 380
// un := CreateHuman ;
24695: LD_ADDR_VAR 0 1
24699: PUSH
24700: CALL_OW 44
24704: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24717: LD_INT 35
24719: PPUSH
24720: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24724: LD_VAR 0 1
24728: PPUSH
24729: LD_INT 22
24731: PUSH
24732: LD_OWVAR 2
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PPUSH
24741: CALL_OW 69
24745: PPUSH
24746: LD_VAR 0 1
24750: PPUSH
24751: CALL_OW 74
24755: PPUSH
24756: CALL_OW 115
// until IsDead ( un ) ;
24760: LD_VAR 0 1
24764: PPUSH
24765: CALL_OW 301
24769: IFFALSE 24717
// end ;
24771: PPOPN 1
24773: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24774: LD_EXP 65
24778: PUSH
24779: LD_EXP 105
24783: AND
24784: IFFALSE 24796
24786: GO 24788
24788: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24789: LD_STRING earthquake(getX(game), 0, 32)
24791: PPUSH
24792: CALL_OW 559
24796: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24797: LD_EXP 65
24801: PUSH
24802: LD_EXP 106
24806: AND
24807: IFFALSE 24898
24809: GO 24811
24811: DISABLE
24812: LD_INT 0
24814: PPUSH
// begin enable ;
24815: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24816: LD_ADDR_VAR 0 1
24820: PUSH
24821: LD_INT 22
24823: PUSH
24824: LD_OWVAR 2
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 21
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 33
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: PPUSH
24858: CALL_OW 69
24862: ST_TO_ADDR
// if not tmp then
24863: LD_VAR 0 1
24867: NOT
24868: IFFALSE 24872
// exit ;
24870: GO 24898
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24872: LD_VAR 0 1
24876: PUSH
24877: LD_INT 1
24879: PPUSH
24880: LD_VAR 0 1
24884: PPUSH
24885: CALL_OW 12
24889: ARRAY
24890: PPUSH
24891: LD_INT 1
24893: PPUSH
24894: CALL_OW 234
// end ;
24898: PPOPN 1
24900: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24901: LD_EXP 65
24905: PUSH
24906: LD_EXP 107
24910: AND
24911: IFFALSE 25052
24913: GO 24915
24915: DISABLE
24916: LD_INT 0
24918: PPUSH
24919: PPUSH
24920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_INT 22
24928: PUSH
24929: LD_OWVAR 2
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 25
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PPUSH
24952: CALL_OW 69
24956: ST_TO_ADDR
// if not tmp then
24957: LD_VAR 0 3
24961: NOT
24962: IFFALSE 24966
// exit ;
24964: GO 25052
// un := tmp [ rand ( 1 , tmp ) ] ;
24966: LD_ADDR_VAR 0 2
24970: PUSH
24971: LD_VAR 0 3
24975: PUSH
24976: LD_INT 1
24978: PPUSH
24979: LD_VAR 0 3
24983: PPUSH
24984: CALL_OW 12
24988: ARRAY
24989: ST_TO_ADDR
// if Crawls ( un ) then
24990: LD_VAR 0 2
24994: PPUSH
24995: CALL_OW 318
24999: IFFALSE 25010
// ComWalk ( un ) ;
25001: LD_VAR 0 2
25005: PPUSH
25006: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25010: LD_VAR 0 2
25014: PPUSH
25015: LD_INT 9
25017: PPUSH
25018: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25022: LD_INT 28
25024: PPUSH
25025: LD_OWVAR 2
25029: PPUSH
25030: LD_INT 2
25032: PPUSH
25033: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25037: LD_INT 29
25039: PPUSH
25040: LD_OWVAR 2
25044: PPUSH
25045: LD_INT 2
25047: PPUSH
25048: CALL_OW 322
// end ;
25052: PPOPN 3
25054: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25055: LD_EXP 65
25059: PUSH
25060: LD_EXP 108
25064: AND
25065: IFFALSE 25176
25067: GO 25069
25069: DISABLE
25070: LD_INT 0
25072: PPUSH
25073: PPUSH
25074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25075: LD_ADDR_VAR 0 3
25079: PUSH
25080: LD_INT 22
25082: PUSH
25083: LD_OWVAR 2
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 25
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PPUSH
25106: CALL_OW 69
25110: ST_TO_ADDR
// if not tmp then
25111: LD_VAR 0 3
25115: NOT
25116: IFFALSE 25120
// exit ;
25118: GO 25176
// un := tmp [ rand ( 1 , tmp ) ] ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_VAR 0 3
25129: PUSH
25130: LD_INT 1
25132: PPUSH
25133: LD_VAR 0 3
25137: PPUSH
25138: CALL_OW 12
25142: ARRAY
25143: ST_TO_ADDR
// if Crawls ( un ) then
25144: LD_VAR 0 2
25148: PPUSH
25149: CALL_OW 318
25153: IFFALSE 25164
// ComWalk ( un ) ;
25155: LD_VAR 0 2
25159: PPUSH
25160: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25164: LD_VAR 0 2
25168: PPUSH
25169: LD_INT 8
25171: PPUSH
25172: CALL_OW 336
// end ;
25176: PPOPN 3
25178: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25179: LD_EXP 65
25183: PUSH
25184: LD_EXP 109
25188: AND
25189: IFFALSE 25333
25191: GO 25193
25193: DISABLE
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25198: LD_ADDR_VAR 0 2
25202: PUSH
25203: LD_INT 22
25205: PUSH
25206: LD_OWVAR 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: LD_INT 34
25230: PUSH
25231: LD_INT 12
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 34
25240: PUSH
25241: LD_INT 51
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 32
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: PPUSH
25269: CALL_OW 69
25273: ST_TO_ADDR
// if not tmp then
25274: LD_VAR 0 2
25278: NOT
25279: IFFALSE 25283
// exit ;
25281: GO 25333
// for i in tmp do
25283: LD_ADDR_VAR 0 1
25287: PUSH
25288: LD_VAR 0 2
25292: PUSH
25293: FOR_IN
25294: IFFALSE 25331
// if GetCargo ( i , mat_artifact ) = 0 then
25296: LD_VAR 0 1
25300: PPUSH
25301: LD_INT 4
25303: PPUSH
25304: CALL_OW 289
25308: PUSH
25309: LD_INT 0
25311: EQUAL
25312: IFFALSE 25329
// SetCargo ( i , mat_siberit , 100 ) ;
25314: LD_VAR 0 1
25318: PPUSH
25319: LD_INT 3
25321: PPUSH
25322: LD_INT 100
25324: PPUSH
25325: CALL_OW 290
25329: GO 25293
25331: POP
25332: POP
// end ;
25333: PPOPN 2
25335: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25336: LD_EXP 65
25340: PUSH
25341: LD_EXP 110
25345: AND
25346: IFFALSE 25529
25348: GO 25350
25350: DISABLE
25351: LD_INT 0
25353: PPUSH
25354: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25355: LD_ADDR_VAR 0 2
25359: PUSH
25360: LD_INT 22
25362: PUSH
25363: LD_OWVAR 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: ST_TO_ADDR
// if not tmp then
25377: LD_VAR 0 2
25381: NOT
25382: IFFALSE 25386
// exit ;
25384: GO 25529
// for i := 1 to 2 do
25386: LD_ADDR_VAR 0 1
25390: PUSH
25391: DOUBLE
25392: LD_INT 1
25394: DEC
25395: ST_TO_ADDR
25396: LD_INT 2
25398: PUSH
25399: FOR_TO
25400: IFFALSE 25527
// begin uc_side := your_side ;
25402: LD_ADDR_OWVAR 20
25406: PUSH
25407: LD_OWVAR 2
25411: ST_TO_ADDR
// uc_nation := nation_american ;
25412: LD_ADDR_OWVAR 21
25416: PUSH
25417: LD_INT 1
25419: ST_TO_ADDR
// vc_chassis := us_morphling ;
25420: LD_ADDR_OWVAR 37
25424: PUSH
25425: LD_INT 5
25427: ST_TO_ADDR
// vc_engine := engine_siberite ;
25428: LD_ADDR_OWVAR 39
25432: PUSH
25433: LD_INT 3
25435: ST_TO_ADDR
// vc_control := control_computer ;
25436: LD_ADDR_OWVAR 38
25440: PUSH
25441: LD_INT 3
25443: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25444: LD_ADDR_OWVAR 40
25448: PUSH
25449: LD_INT 10
25451: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25452: LD_VAR 0 2
25456: PUSH
25457: LD_INT 1
25459: ARRAY
25460: PPUSH
25461: CALL_OW 310
25465: NOT
25466: IFFALSE 25513
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25468: CALL_OW 45
25472: PPUSH
25473: LD_VAR 0 2
25477: PUSH
25478: LD_INT 1
25480: ARRAY
25481: PPUSH
25482: CALL_OW 250
25486: PPUSH
25487: LD_VAR 0 2
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PPUSH
25496: CALL_OW 251
25500: PPUSH
25501: LD_INT 12
25503: PPUSH
25504: LD_INT 1
25506: PPUSH
25507: CALL_OW 50
25511: GO 25525
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25513: CALL_OW 45
25517: PPUSH
25518: LD_INT 1
25520: PPUSH
25521: CALL_OW 51
// end ;
25525: GO 25399
25527: POP
25528: POP
// end ;
25529: PPOPN 2
25531: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25532: LD_EXP 65
25536: PUSH
25537: LD_EXP 111
25541: AND
25542: IFFALSE 25764
25544: GO 25546
25546: DISABLE
25547: LD_INT 0
25549: PPUSH
25550: PPUSH
25551: PPUSH
25552: PPUSH
25553: PPUSH
25554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25555: LD_ADDR_VAR 0 6
25559: PUSH
25560: LD_INT 22
25562: PUSH
25563: LD_OWVAR 2
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 21
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 3
25584: PUSH
25585: LD_INT 23
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: PPUSH
25604: CALL_OW 69
25608: ST_TO_ADDR
// if not tmp then
25609: LD_VAR 0 6
25613: NOT
25614: IFFALSE 25618
// exit ;
25616: GO 25764
// s1 := rand ( 1 , 4 ) ;
25618: LD_ADDR_VAR 0 2
25622: PUSH
25623: LD_INT 1
25625: PPUSH
25626: LD_INT 4
25628: PPUSH
25629: CALL_OW 12
25633: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25634: LD_ADDR_VAR 0 4
25638: PUSH
25639: LD_VAR 0 6
25643: PUSH
25644: LD_INT 1
25646: ARRAY
25647: PPUSH
25648: LD_VAR 0 2
25652: PPUSH
25653: CALL_OW 259
25657: ST_TO_ADDR
// if s1 = 1 then
25658: LD_VAR 0 2
25662: PUSH
25663: LD_INT 1
25665: EQUAL
25666: IFFALSE 25686
// s2 := rand ( 2 , 4 ) else
25668: LD_ADDR_VAR 0 3
25672: PUSH
25673: LD_INT 2
25675: PPUSH
25676: LD_INT 4
25678: PPUSH
25679: CALL_OW 12
25683: ST_TO_ADDR
25684: GO 25694
// s2 := 1 ;
25686: LD_ADDR_VAR 0 3
25690: PUSH
25691: LD_INT 1
25693: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25694: LD_ADDR_VAR 0 5
25698: PUSH
25699: LD_VAR 0 6
25703: PUSH
25704: LD_INT 1
25706: ARRAY
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: CALL_OW 259
25717: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25718: LD_VAR 0 6
25722: PUSH
25723: LD_INT 1
25725: ARRAY
25726: PPUSH
25727: LD_VAR 0 2
25731: PPUSH
25732: LD_VAR 0 5
25736: PPUSH
25737: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25741: LD_VAR 0 6
25745: PUSH
25746: LD_INT 1
25748: ARRAY
25749: PPUSH
25750: LD_VAR 0 3
25754: PPUSH
25755: LD_VAR 0 4
25759: PPUSH
25760: CALL_OW 237
// end ;
25764: PPOPN 6
25766: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25767: LD_EXP 65
25771: PUSH
25772: LD_EXP 112
25776: AND
25777: IFFALSE 25856
25779: GO 25781
25781: DISABLE
25782: LD_INT 0
25784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25785: LD_ADDR_VAR 0 1
25789: PUSH
25790: LD_INT 22
25792: PUSH
25793: LD_OWVAR 2
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 30
25804: PUSH
25805: LD_INT 3
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PPUSH
25816: CALL_OW 69
25820: ST_TO_ADDR
// if not tmp then
25821: LD_VAR 0 1
25825: NOT
25826: IFFALSE 25830
// exit ;
25828: GO 25856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25830: LD_VAR 0 1
25834: PUSH
25835: LD_INT 1
25837: PPUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL_OW 12
25847: ARRAY
25848: PPUSH
25849: LD_INT 1
25851: PPUSH
25852: CALL_OW 234
// end ;
25856: PPOPN 1
25858: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25859: LD_EXP 65
25863: PUSH
25864: LD_EXP 113
25868: AND
25869: IFFALSE 25981
25871: GO 25873
25873: DISABLE
25874: LD_INT 0
25876: PPUSH
25877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25878: LD_ADDR_VAR 0 2
25882: PUSH
25883: LD_INT 22
25885: PUSH
25886: LD_OWVAR 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: LD_INT 30
25900: PUSH
25901: LD_INT 27
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 30
25910: PUSH
25911: LD_INT 26
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 30
25920: PUSH
25921: LD_INT 28
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PPUSH
25938: CALL_OW 69
25942: ST_TO_ADDR
// if not tmp then
25943: LD_VAR 0 2
25947: NOT
25948: IFFALSE 25952
// exit ;
25950: GO 25981
// for i in tmp do
25952: LD_ADDR_VAR 0 1
25956: PUSH
25957: LD_VAR 0 2
25961: PUSH
25962: FOR_IN
25963: IFFALSE 25979
// SetLives ( i , 1 ) ;
25965: LD_VAR 0 1
25969: PPUSH
25970: LD_INT 1
25972: PPUSH
25973: CALL_OW 234
25977: GO 25962
25979: POP
25980: POP
// end ;
25981: PPOPN 2
25983: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25984: LD_EXP 65
25988: PUSH
25989: LD_EXP 114
25993: AND
25994: IFFALSE 26268
25996: GO 25998
25998: DISABLE
25999: LD_INT 0
26001: PPUSH
26002: PPUSH
26003: PPUSH
// begin i := rand ( 1 , 7 ) ;
26004: LD_ADDR_VAR 0 1
26008: PUSH
26009: LD_INT 1
26011: PPUSH
26012: LD_INT 7
26014: PPUSH
26015: CALL_OW 12
26019: ST_TO_ADDR
// case i of 1 :
26020: LD_VAR 0 1
26024: PUSH
26025: LD_INT 1
26027: DOUBLE
26028: EQUAL
26029: IFTRUE 26033
26031: GO 26043
26033: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26034: LD_STRING earthquake(getX(game), 0, 32)
26036: PPUSH
26037: CALL_OW 559
26041: GO 26268
26043: LD_INT 2
26045: DOUBLE
26046: EQUAL
26047: IFTRUE 26051
26049: GO 26065
26051: POP
// begin ToLua ( displayStucuk(); ) ;
26052: LD_STRING displayStucuk();
26054: PPUSH
26055: CALL_OW 559
// ResetFog ;
26059: CALL_OW 335
// end ; 3 :
26063: GO 26268
26065: LD_INT 3
26067: DOUBLE
26068: EQUAL
26069: IFTRUE 26073
26071: GO 26177
26073: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26074: LD_ADDR_VAR 0 2
26078: PUSH
26079: LD_INT 22
26081: PUSH
26082: LD_OWVAR 2
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 25
26093: PUSH
26094: LD_INT 1
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: ST_TO_ADDR
// if not tmp then
26110: LD_VAR 0 2
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26268
// un := tmp [ rand ( 1 , tmp ) ] ;
26119: LD_ADDR_VAR 0 3
26123: PUSH
26124: LD_VAR 0 2
26128: PUSH
26129: LD_INT 1
26131: PPUSH
26132: LD_VAR 0 2
26136: PPUSH
26137: CALL_OW 12
26141: ARRAY
26142: ST_TO_ADDR
// if Crawls ( un ) then
26143: LD_VAR 0 3
26147: PPUSH
26148: CALL_OW 318
26152: IFFALSE 26163
// ComWalk ( un ) ;
26154: LD_VAR 0 3
26158: PPUSH
26159: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26163: LD_VAR 0 3
26167: PPUSH
26168: LD_INT 8
26170: PPUSH
26171: CALL_OW 336
// end ; 4 :
26175: GO 26268
26177: LD_INT 4
26179: DOUBLE
26180: EQUAL
26181: IFTRUE 26185
26183: GO 26246
26185: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26186: LD_ADDR_VAR 0 2
26190: PUSH
26191: LD_INT 22
26193: PUSH
26194: LD_OWVAR 2
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 30
26205: PUSH
26206: LD_INT 29
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PPUSH
26217: CALL_OW 69
26221: ST_TO_ADDR
// if not tmp then
26222: LD_VAR 0 2
26226: NOT
26227: IFFALSE 26231
// exit ;
26229: GO 26268
// DestroyUnit ( tmp [ 1 ] ) ;
26231: LD_VAR 0 2
26235: PUSH
26236: LD_INT 1
26238: ARRAY
26239: PPUSH
26240: CALL_OW 65
// end ; 5 .. 7 :
26244: GO 26268
26246: LD_INT 5
26248: DOUBLE
26249: GREATEREQUAL
26250: IFFALSE 26258
26252: LD_INT 7
26254: DOUBLE
26255: LESSEQUAL
26256: IFTRUE 26260
26258: GO 26267
26260: POP
// StreamSibBomb ; end ;
26261: CALL 22518 0 0
26265: GO 26268
26267: POP
// end ;
26268: PPOPN 3
26270: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26271: LD_EXP 65
26275: PUSH
26276: LD_EXP 115
26280: AND
26281: IFFALSE 26437
26283: GO 26285
26285: DISABLE
26286: LD_INT 0
26288: PPUSH
26289: PPUSH
26290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_INT 81
26298: PUSH
26299: LD_OWVAR 2
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: LD_INT 21
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 21
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PPUSH
26340: CALL_OW 69
26344: ST_TO_ADDR
// if not tmp then
26345: LD_VAR 0 2
26349: NOT
26350: IFFALSE 26354
// exit ;
26352: GO 26437
// p := 0 ;
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: LD_INT 0
26361: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26362: LD_INT 35
26364: PPUSH
26365: CALL_OW 67
// p := p + 1 ;
26369: LD_ADDR_VAR 0 3
26373: PUSH
26374: LD_VAR 0 3
26378: PUSH
26379: LD_INT 1
26381: PLUS
26382: ST_TO_ADDR
// for i in tmp do
26383: LD_ADDR_VAR 0 1
26387: PUSH
26388: LD_VAR 0 2
26392: PUSH
26393: FOR_IN
26394: IFFALSE 26425
// if GetLives ( i ) < 1000 then
26396: LD_VAR 0 1
26400: PPUSH
26401: CALL_OW 256
26405: PUSH
26406: LD_INT 1000
26408: LESS
26409: IFFALSE 26423
// SetLives ( i , 1000 ) ;
26411: LD_VAR 0 1
26415: PPUSH
26416: LD_INT 1000
26418: PPUSH
26419: CALL_OW 234
26423: GO 26393
26425: POP
26426: POP
// until p > 20 ;
26427: LD_VAR 0 3
26431: PUSH
26432: LD_INT 20
26434: GREATER
26435: IFFALSE 26362
// end ;
26437: PPOPN 3
26439: END
// every 0 0$1 trigger StreamModeActive and sTime do
26440: LD_EXP 65
26444: PUSH
26445: LD_EXP 116
26449: AND
26450: IFFALSE 26485
26452: GO 26454
26454: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26455: LD_INT 28
26457: PPUSH
26458: LD_OWVAR 2
26462: PPUSH
26463: LD_INT 2
26465: PPUSH
26466: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26470: LD_INT 30
26472: PPUSH
26473: LD_OWVAR 2
26477: PPUSH
26478: LD_INT 2
26480: PPUSH
26481: CALL_OW 322
// end ;
26485: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26486: LD_EXP 65
26490: PUSH
26491: LD_EXP 117
26495: AND
26496: IFFALSE 26617
26498: GO 26500
26500: DISABLE
26501: LD_INT 0
26503: PPUSH
26504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26505: LD_ADDR_VAR 0 2
26509: PUSH
26510: LD_INT 22
26512: PUSH
26513: LD_OWVAR 2
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 21
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 3
26534: PUSH
26535: LD_INT 23
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: PPUSH
26554: CALL_OW 69
26558: ST_TO_ADDR
// if not tmp then
26559: LD_VAR 0 2
26563: NOT
26564: IFFALSE 26568
// exit ;
26566: GO 26617
// for i in tmp do
26568: LD_ADDR_VAR 0 1
26572: PUSH
26573: LD_VAR 0 2
26577: PUSH
26578: FOR_IN
26579: IFFALSE 26615
// begin if Crawls ( i ) then
26581: LD_VAR 0 1
26585: PPUSH
26586: CALL_OW 318
26590: IFFALSE 26601
// ComWalk ( i ) ;
26592: LD_VAR 0 1
26596: PPUSH
26597: CALL_OW 138
// SetClass ( i , 2 ) ;
26601: LD_VAR 0 1
26605: PPUSH
26606: LD_INT 2
26608: PPUSH
26609: CALL_OW 336
// end ;
26613: GO 26578
26615: POP
26616: POP
// end ;
26617: PPOPN 2
26619: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26620: LD_EXP 65
26624: PUSH
26625: LD_EXP 118
26629: AND
26630: IFFALSE 26911
26632: GO 26634
26634: DISABLE
26635: LD_INT 0
26637: PPUSH
26638: PPUSH
26639: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26640: LD_OWVAR 2
26644: PPUSH
26645: LD_INT 9
26647: PPUSH
26648: LD_INT 1
26650: PPUSH
26651: LD_INT 1
26653: PPUSH
26654: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26658: LD_INT 9
26660: PPUSH
26661: LD_OWVAR 2
26665: PPUSH
26666: CALL_OW 343
// uc_side := 9 ;
26670: LD_ADDR_OWVAR 20
26674: PUSH
26675: LD_INT 9
26677: ST_TO_ADDR
// uc_nation := 2 ;
26678: LD_ADDR_OWVAR 21
26682: PUSH
26683: LD_INT 2
26685: ST_TO_ADDR
// hc_name := Dark Warrior ;
26686: LD_ADDR_OWVAR 26
26690: PUSH
26691: LD_STRING Dark Warrior
26693: ST_TO_ADDR
// hc_gallery :=  ;
26694: LD_ADDR_OWVAR 33
26698: PUSH
26699: LD_STRING 
26701: ST_TO_ADDR
// hc_noskilllimit := true ;
26702: LD_ADDR_OWVAR 76
26706: PUSH
26707: LD_INT 1
26709: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26710: LD_ADDR_OWVAR 31
26714: PUSH
26715: LD_INT 30
26717: PUSH
26718: LD_INT 30
26720: PUSH
26721: LD_INT 30
26723: PUSH
26724: LD_INT 30
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: ST_TO_ADDR
// un := CreateHuman ;
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: CALL_OW 44
26742: ST_TO_ADDR
// hc_noskilllimit := false ;
26743: LD_ADDR_OWVAR 76
26747: PUSH
26748: LD_INT 0
26750: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26751: LD_VAR 0 3
26755: PPUSH
26756: LD_INT 1
26758: PPUSH
26759: CALL_OW 51
// p := 0 ;
26763: LD_ADDR_VAR 0 2
26767: PUSH
26768: LD_INT 0
26770: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26771: LD_INT 35
26773: PPUSH
26774: CALL_OW 67
// p := p + 1 ;
26778: LD_ADDR_VAR 0 2
26782: PUSH
26783: LD_VAR 0 2
26787: PUSH
26788: LD_INT 1
26790: PLUS
26791: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26792: LD_VAR 0 3
26796: PPUSH
26797: CALL_OW 256
26801: PUSH
26802: LD_INT 1000
26804: LESS
26805: IFFALSE 26819
// SetLives ( un , 1000 ) ;
26807: LD_VAR 0 3
26811: PPUSH
26812: LD_INT 1000
26814: PPUSH
26815: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26819: LD_VAR 0 3
26823: PPUSH
26824: LD_INT 81
26826: PUSH
26827: LD_OWVAR 2
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 91
26838: PUSH
26839: LD_VAR 0 3
26843: PUSH
26844: LD_INT 30
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PPUSH
26856: CALL_OW 69
26860: PPUSH
26861: LD_VAR 0 3
26865: PPUSH
26866: CALL_OW 74
26870: PPUSH
26871: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26875: LD_VAR 0 2
26879: PUSH
26880: LD_INT 60
26882: GREATER
26883: PUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: CALL_OW 301
26893: OR
26894: IFFALSE 26771
// if un then
26896: LD_VAR 0 3
26900: IFFALSE 26911
// RemoveUnit ( un ) ;
26902: LD_VAR 0 3
26906: PPUSH
26907: CALL_OW 64
// end ;
26911: PPOPN 3
26913: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26914: LD_INT 0
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26920: LD_ADDR_VAR 0 4
26924: PUSH
26925: LD_INT 22
26927: PUSH
26928: LD_OWVAR 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 30
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 30
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 69
26973: ST_TO_ADDR
// if not tmp then
26974: LD_VAR 0 4
26978: NOT
26979: IFFALSE 26983
// exit ;
26981: GO 27042
// for i in tmp do
26983: LD_ADDR_VAR 0 2
26987: PUSH
26988: LD_VAR 0 4
26992: PUSH
26993: FOR_IN
26994: IFFALSE 27040
// for j = 1 to 3 do
26996: LD_ADDR_VAR 0 3
27000: PUSH
27001: DOUBLE
27002: LD_INT 1
27004: DEC
27005: ST_TO_ADDR
27006: LD_INT 3
27008: PUSH
27009: FOR_TO
27010: IFFALSE 27036
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27012: LD_VAR 0 2
27016: PPUSH
27017: CALL_OW 274
27021: PPUSH
27022: LD_VAR 0 3
27026: PPUSH
27027: LD_INT 99999
27029: PPUSH
27030: CALL_OW 277
27034: GO 27009
27036: POP
27037: POP
27038: GO 26993
27040: POP
27041: POP
// end ;
27042: LD_VAR 0 1
27046: RET
// export function hHackSetLevel10 ; var i , j ; begin
27047: LD_INT 0
27049: PPUSH
27050: PPUSH
27051: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27052: LD_ADDR_VAR 0 2
27056: PUSH
27057: LD_INT 21
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PPUSH
27067: CALL_OW 69
27071: PUSH
27072: FOR_IN
27073: IFFALSE 27125
// if IsSelected ( i ) then
27075: LD_VAR 0 2
27079: PPUSH
27080: CALL_OW 306
27084: IFFALSE 27123
// begin for j := 1 to 4 do
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: DOUBLE
27092: LD_INT 1
27094: DEC
27095: ST_TO_ADDR
27096: LD_INT 4
27098: PUSH
27099: FOR_TO
27100: IFFALSE 27121
// SetSkill ( i , j , 10 ) ;
27102: LD_VAR 0 2
27106: PPUSH
27107: LD_VAR 0 3
27111: PPUSH
27112: LD_INT 10
27114: PPUSH
27115: CALL_OW 237
27119: GO 27099
27121: POP
27122: POP
// end ;
27123: GO 27072
27125: POP
27126: POP
// end ;
27127: LD_VAR 0 1
27131: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27132: LD_INT 0
27134: PPUSH
27135: PPUSH
27136: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27137: LD_ADDR_VAR 0 2
27141: PUSH
27142: LD_INT 22
27144: PUSH
27145: LD_OWVAR 2
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 21
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PPUSH
27168: CALL_OW 69
27172: PUSH
27173: FOR_IN
27174: IFFALSE 27215
// begin for j := 1 to 4 do
27176: LD_ADDR_VAR 0 3
27180: PUSH
27181: DOUBLE
27182: LD_INT 1
27184: DEC
27185: ST_TO_ADDR
27186: LD_INT 4
27188: PUSH
27189: FOR_TO
27190: IFFALSE 27211
// SetSkill ( i , j , 10 ) ;
27192: LD_VAR 0 2
27196: PPUSH
27197: LD_VAR 0 3
27201: PPUSH
27202: LD_INT 10
27204: PPUSH
27205: CALL_OW 237
27209: GO 27189
27211: POP
27212: POP
// end ;
27213: GO 27173
27215: POP
27216: POP
// end ;
27217: LD_VAR 0 1
27221: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
27222: LD_INT 0
27224: PPUSH
// uc_side := your_side ;
27225: LD_ADDR_OWVAR 20
27229: PUSH
27230: LD_OWVAR 2
27234: ST_TO_ADDR
// uc_nation := nation ;
27235: LD_ADDR_OWVAR 21
27239: PUSH
27240: LD_VAR 0 1
27244: ST_TO_ADDR
// InitHc ;
27245: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27249: LD_INT 0
27251: PPUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: LD_VAR 0 3
27261: PPUSH
27262: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
27266: CALL_OW 44
27270: PPUSH
27271: LD_INT 1
27273: PPUSH
27274: CALL_OW 51
// end ;
27278: LD_VAR 0 4
27282: RET
// export function hHackSpawnVehicle ; begin
27283: LD_INT 0
27285: PPUSH
// uc_side := your_side ;
27286: LD_ADDR_OWVAR 20
27290: PUSH
27291: LD_OWVAR 2
27295: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
27296: LD_ADDR_OWVAR 21
27300: PUSH
27301: LD_INT 1
27303: PPUSH
27304: LD_INT 3
27306: PPUSH
27307: CALL_OW 12
27311: ST_TO_ADDR
// InitVc ;
27312: CALL_OW 20
// case uc_nation of 1 :
27316: LD_OWVAR 21
27320: PUSH
27321: LD_INT 1
27323: DOUBLE
27324: EQUAL
27325: IFTRUE 27329
27327: GO 27473
27329: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
27330: LD_ADDR_OWVAR 37
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: LD_INT 3
27343: PUSH
27344: LD_INT 4
27346: PUSH
27347: LD_INT 5
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PPUSH
27360: LD_INT 5
27362: PPUSH
27363: CALL_OW 12
27367: ARRAY
27368: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27369: LD_ADDR_OWVAR 39
27373: PUSH
27374: LD_INT 1
27376: PPUSH
27377: LD_INT 3
27379: PPUSH
27380: CALL_OW 12
27384: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
27385: LD_ADDR_OWVAR 38
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: PPUSH
27407: LD_INT 3
27409: PPUSH
27410: CALL_OW 12
27414: ARRAY
27415: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
27416: LD_ADDR_OWVAR 40
27420: PUSH
27421: LD_INT 2
27423: PUSH
27424: LD_INT 4
27426: PUSH
27427: LD_INT 5
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: LD_INT 7
27435: PUSH
27436: LD_INT 8
27438: PUSH
27439: LD_INT 9
27441: PUSH
27442: LD_INT 10
27444: PUSH
27445: LD_INT 6
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: PPUSH
27462: LD_INT 9
27464: PPUSH
27465: CALL_OW 12
27469: ARRAY
27470: ST_TO_ADDR
// end ; 2 :
27471: GO 27738
27473: LD_INT 2
27475: DOUBLE
27476: EQUAL
27477: IFTRUE 27481
27479: GO 27605
27481: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
27482: LD_ADDR_OWVAR 37
27486: PUSH
27487: LD_INT 11
27489: PUSH
27490: LD_INT 12
27492: PUSH
27493: LD_INT 13
27495: PUSH
27496: LD_INT 14
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PPUSH
27508: LD_INT 4
27510: PPUSH
27511: CALL_OW 12
27515: ARRAY
27516: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27517: LD_ADDR_OWVAR 39
27521: PUSH
27522: LD_INT 1
27524: PPUSH
27525: LD_INT 3
27527: PPUSH
27528: CALL_OW 12
27532: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
27533: LD_ADDR_OWVAR 38
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: LD_INT 5
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PPUSH
27555: LD_INT 3
27557: PPUSH
27558: CALL_OW 12
27562: ARRAY
27563: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
27564: LD_ADDR_OWVAR 40
27568: PUSH
27569: LD_INT 24
27571: PUSH
27572: LD_INT 26
27574: PUSH
27575: LD_INT 27
27577: PUSH
27578: LD_INT 28
27580: PUSH
27581: LD_INT 29
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: PPUSH
27594: LD_INT 5
27596: PPUSH
27597: CALL_OW 12
27601: ARRAY
27602: ST_TO_ADDR
// end ; 3 :
27603: GO 27738
27605: LD_INT 3
27607: DOUBLE
27608: EQUAL
27609: IFTRUE 27613
27611: GO 27737
27613: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
27614: LD_ADDR_OWVAR 37
27618: PUSH
27619: LD_INT 21
27621: PUSH
27622: LD_INT 23
27624: PUSH
27625: LD_INT 22
27627: PUSH
27628: LD_INT 24
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: PPUSH
27640: LD_INT 4
27642: PPUSH
27643: CALL_OW 12
27647: ARRAY
27648: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27649: LD_ADDR_OWVAR 39
27653: PUSH
27654: LD_INT 1
27656: PPUSH
27657: LD_INT 3
27659: PPUSH
27660: CALL_OW 12
27664: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
27665: LD_ADDR_OWVAR 38
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: LD_INT 3
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PPUSH
27683: LD_INT 2
27685: PPUSH
27686: CALL_OW 12
27690: ARRAY
27691: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
27692: LD_ADDR_OWVAR 40
27696: PUSH
27697: LD_INT 42
27699: PUSH
27700: LD_INT 43
27702: PUSH
27703: LD_INT 44
27705: PUSH
27706: LD_INT 46
27708: PUSH
27709: LD_INT 48
27711: PUSH
27712: LD_INT 47
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: PPUSH
27726: LD_INT 6
27728: PPUSH
27729: CALL_OW 12
27733: ARRAY
27734: ST_TO_ADDR
// end ; end ;
27735: GO 27738
27737: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27738: CALL_OW 45
27742: PPUSH
27743: LD_INT 1
27745: PPUSH
27746: CALL_OW 51
// end ;
27750: LD_VAR 0 1
27754: RET
// export hInvincible ; every 1 do
27755: GO 27757
27757: DISABLE
// hInvincible := [ ] ;
27758: LD_ADDR_EXP 119
27762: PUSH
27763: EMPTY
27764: ST_TO_ADDR
27765: END
// every 10 do var i ;
27766: GO 27768
27768: DISABLE
27769: LD_INT 0
27771: PPUSH
// begin enable ;
27772: ENABLE
// if not hInvincible then
27773: LD_EXP 119
27777: NOT
27778: IFFALSE 27782
// exit ;
27780: GO 27826
// for i in hInvincible do
27782: LD_ADDR_VAR 0 1
27786: PUSH
27787: LD_EXP 119
27791: PUSH
27792: FOR_IN
27793: IFFALSE 27824
// if GetLives ( i ) < 1000 then
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 256
27804: PUSH
27805: LD_INT 1000
27807: LESS
27808: IFFALSE 27822
// SetLives ( i , 1000 ) ;
27810: LD_VAR 0 1
27814: PPUSH
27815: LD_INT 1000
27817: PPUSH
27818: CALL_OW 234
27822: GO 27792
27824: POP
27825: POP
// end ;
27826: PPOPN 1
27828: END
// export function hHackInvincible ; var i ; begin
27829: LD_INT 0
27831: PPUSH
27832: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27833: LD_ADDR_VAR 0 2
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 21
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 21
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: PPUSH
27866: CALL_OW 69
27870: PUSH
27871: FOR_IN
27872: IFFALSE 27933
// if IsSelected ( i ) then
27874: LD_VAR 0 2
27878: PPUSH
27879: CALL_OW 306
27883: IFFALSE 27931
// begin if i in hInvincible then
27885: LD_VAR 0 2
27889: PUSH
27890: LD_EXP 119
27894: IN
27895: IFFALSE 27915
// hInvincible := hInvincible diff i else
27897: LD_ADDR_EXP 119
27901: PUSH
27902: LD_EXP 119
27906: PUSH
27907: LD_VAR 0 2
27911: DIFF
27912: ST_TO_ADDR
27913: GO 27931
// hInvincible := hInvincible union i ;
27915: LD_ADDR_EXP 119
27919: PUSH
27920: LD_EXP 119
27924: PUSH
27925: LD_VAR 0 2
27929: UNION
27930: ST_TO_ADDR
// end ;
27931: GO 27871
27933: POP
27934: POP
// end ;
27935: LD_VAR 0 1
27939: RET
// export function hHackInvisible ; var i , j ; begin
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
27944: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27945: LD_ADDR_VAR 0 2
27949: PUSH
27950: LD_INT 21
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PPUSH
27960: CALL_OW 69
27964: PUSH
27965: FOR_IN
27966: IFFALSE 27990
// if IsSelected ( i ) then
27968: LD_VAR 0 2
27972: PPUSH
27973: CALL_OW 306
27977: IFFALSE 27988
// ComForceInvisible ( i ) ;
27979: LD_VAR 0 2
27983: PPUSH
27984: CALL_OW 496
27988: GO 27965
27990: POP
27991: POP
// end ;
27992: LD_VAR 0 1
27996: RET
// export function hHackChangeYourSide ; begin
27997: LD_INT 0
27999: PPUSH
// if your_side = 8 then
28000: LD_OWVAR 2
28004: PUSH
28005: LD_INT 8
28007: EQUAL
28008: IFFALSE 28020
// your_side := 0 else
28010: LD_ADDR_OWVAR 2
28014: PUSH
28015: LD_INT 0
28017: ST_TO_ADDR
28018: GO 28034
// your_side := your_side + 1 ;
28020: LD_ADDR_OWVAR 2
28024: PUSH
28025: LD_OWVAR 2
28029: PUSH
28030: LD_INT 1
28032: PLUS
28033: ST_TO_ADDR
// end ;
28034: LD_VAR 0 1
28038: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28039: LD_INT 0
28041: PPUSH
28042: PPUSH
28043: PPUSH
// for i in all_units do
28044: LD_ADDR_VAR 0 2
28048: PUSH
28049: LD_OWVAR 3
28053: PUSH
28054: FOR_IN
28055: IFFALSE 28133
// if IsSelected ( i ) then
28057: LD_VAR 0 2
28061: PPUSH
28062: CALL_OW 306
28066: IFFALSE 28131
// begin j := GetSide ( i ) ;
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_VAR 0 2
28077: PPUSH
28078: CALL_OW 255
28082: ST_TO_ADDR
// if j = 8 then
28083: LD_VAR 0 3
28087: PUSH
28088: LD_INT 8
28090: EQUAL
28091: IFFALSE 28103
// j := 0 else
28093: LD_ADDR_VAR 0 3
28097: PUSH
28098: LD_INT 0
28100: ST_TO_ADDR
28101: GO 28117
// j := j + 1 ;
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_VAR 0 3
28112: PUSH
28113: LD_INT 1
28115: PLUS
28116: ST_TO_ADDR
// SetSide ( i , j ) ;
28117: LD_VAR 0 2
28121: PPUSH
28122: LD_VAR 0 3
28126: PPUSH
28127: CALL_OW 235
// end ;
28131: GO 28054
28133: POP
28134: POP
// end ;
28135: LD_VAR 0 1
28139: RET
// export function hHackFog ; begin
28140: LD_INT 0
28142: PPUSH
// FogOff ( true ) ;
28143: LD_INT 1
28145: PPUSH
28146: CALL_OW 344
// end ;
28150: LD_VAR 0 1
28154: RET
// export function hHackApeman ; begin
28155: LD_INT 0
28157: PPUSH
// uc_side := your_side ;
28158: LD_ADDR_OWVAR 20
28162: PUSH
28163: LD_OWVAR 2
28167: ST_TO_ADDR
// uc_nation := 0 ;
28168: LD_ADDR_OWVAR 21
28172: PUSH
28173: LD_INT 0
28175: ST_TO_ADDR
// hc_name :=  ;
28176: LD_ADDR_OWVAR 26
28180: PUSH
28181: LD_STRING 
28183: ST_TO_ADDR
// hc_gallery :=  ;
28184: LD_ADDR_OWVAR 33
28188: PUSH
28189: LD_STRING 
28191: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
28192: LD_ADDR_OWVAR 31
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// hc_class := class_apeman ;
28215: LD_ADDR_OWVAR 28
28219: PUSH
28220: LD_INT 12
28222: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
28223: CALL_OW 44
28227: PPUSH
28228: LD_INT 1
28230: PPUSH
28231: CALL_OW 51
// end ;
28235: LD_VAR 0 1
28239: RET
// export function hHackBoom ; begin
28240: LD_INT 0
28242: PPUSH
// uc_side := your_side ;
28243: LD_ADDR_OWVAR 20
28247: PUSH
28248: LD_OWVAR 2
28252: ST_TO_ADDR
// uc_nation := 1 ;
28253: LD_ADDR_OWVAR 21
28257: PUSH
28258: LD_INT 1
28260: ST_TO_ADDR
// vc_chassis := us_morphling ;
28261: LD_ADDR_OWVAR 37
28265: PUSH
28266: LD_INT 5
28268: ST_TO_ADDR
// vc_engine := engine_siberite ;
28269: LD_ADDR_OWVAR 39
28273: PUSH
28274: LD_INT 3
28276: ST_TO_ADDR
// vc_control := control_computer ;
28277: LD_ADDR_OWVAR 38
28281: PUSH
28282: LD_INT 3
28284: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
28285: LD_ADDR_OWVAR 40
28289: PUSH
28290: LD_INT 8
28292: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28293: CALL_OW 45
28297: PPUSH
28298: LD_INT 1
28300: PPUSH
28301: CALL_OW 51
// end ; end_of_file end_of_file
28305: LD_VAR 0 1
28309: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28310: LD_INT 0
28312: PPUSH
28313: PPUSH
// if exist_mode then
28314: LD_VAR 0 2
28318: IFFALSE 28343
// unit := CreateCharacter ( prefix & ident ) else
28320: LD_ADDR_VAR 0 5
28324: PUSH
28325: LD_VAR 0 3
28329: PUSH
28330: LD_VAR 0 1
28334: STR
28335: PPUSH
28336: CALL_OW 34
28340: ST_TO_ADDR
28341: GO 28358
// unit := NewCharacter ( ident ) ;
28343: LD_ADDR_VAR 0 5
28347: PUSH
28348: LD_VAR 0 1
28352: PPUSH
28353: CALL_OW 25
28357: ST_TO_ADDR
// result := unit ;
28358: LD_ADDR_VAR 0 4
28362: PUSH
28363: LD_VAR 0 5
28367: ST_TO_ADDR
// end ;
28368: LD_VAR 0 4
28372: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28373: LD_INT 0
28375: PPUSH
28376: PPUSH
// if not side or not nation then
28377: LD_VAR 0 1
28381: NOT
28382: PUSH
28383: LD_VAR 0 2
28387: NOT
28388: OR
28389: IFFALSE 28393
// exit ;
28391: GO 29157
// case nation of nation_american :
28393: LD_VAR 0 2
28397: PUSH
28398: LD_INT 1
28400: DOUBLE
28401: EQUAL
28402: IFTRUE 28406
28404: GO 28620
28406: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28407: LD_ADDR_VAR 0 4
28411: PUSH
28412: LD_INT 35
28414: PUSH
28415: LD_INT 45
28417: PUSH
28418: LD_INT 46
28420: PUSH
28421: LD_INT 47
28423: PUSH
28424: LD_INT 82
28426: PUSH
28427: LD_INT 83
28429: PUSH
28430: LD_INT 84
28432: PUSH
28433: LD_INT 85
28435: PUSH
28436: LD_INT 86
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: LD_INT 6
28447: PUSH
28448: LD_INT 15
28450: PUSH
28451: LD_INT 16
28453: PUSH
28454: LD_INT 7
28456: PUSH
28457: LD_INT 12
28459: PUSH
28460: LD_INT 13
28462: PUSH
28463: LD_INT 10
28465: PUSH
28466: LD_INT 14
28468: PUSH
28469: LD_INT 20
28471: PUSH
28472: LD_INT 21
28474: PUSH
28475: LD_INT 22
28477: PUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 32
28483: PUSH
28484: LD_INT 27
28486: PUSH
28487: LD_INT 36
28489: PUSH
28490: LD_INT 69
28492: PUSH
28493: LD_INT 39
28495: PUSH
28496: LD_INT 34
28498: PUSH
28499: LD_INT 40
28501: PUSH
28502: LD_INT 48
28504: PUSH
28505: LD_INT 49
28507: PUSH
28508: LD_INT 50
28510: PUSH
28511: LD_INT 51
28513: PUSH
28514: LD_INT 52
28516: PUSH
28517: LD_INT 53
28519: PUSH
28520: LD_INT 54
28522: PUSH
28523: LD_INT 55
28525: PUSH
28526: LD_INT 56
28528: PUSH
28529: LD_INT 57
28531: PUSH
28532: LD_INT 58
28534: PUSH
28535: LD_INT 59
28537: PUSH
28538: LD_INT 60
28540: PUSH
28541: LD_INT 61
28543: PUSH
28544: LD_INT 62
28546: PUSH
28547: LD_INT 80
28549: PUSH
28550: LD_INT 82
28552: PUSH
28553: LD_INT 83
28555: PUSH
28556: LD_INT 84
28558: PUSH
28559: LD_INT 85
28561: PUSH
28562: LD_INT 86
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: ST_TO_ADDR
28618: GO 29081
28620: LD_INT 2
28622: DOUBLE
28623: EQUAL
28624: IFTRUE 28628
28626: GO 28850
28628: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28629: LD_ADDR_VAR 0 4
28633: PUSH
28634: LD_INT 35
28636: PUSH
28637: LD_INT 45
28639: PUSH
28640: LD_INT 46
28642: PUSH
28643: LD_INT 47
28645: PUSH
28646: LD_INT 82
28648: PUSH
28649: LD_INT 83
28651: PUSH
28652: LD_INT 84
28654: PUSH
28655: LD_INT 85
28657: PUSH
28658: LD_INT 87
28660: PUSH
28661: LD_INT 70
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: LD_INT 11
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: LD_INT 4
28675: PUSH
28676: LD_INT 5
28678: PUSH
28679: LD_INT 6
28681: PUSH
28682: LD_INT 15
28684: PUSH
28685: LD_INT 18
28687: PUSH
28688: LD_INT 7
28690: PUSH
28691: LD_INT 17
28693: PUSH
28694: LD_INT 8
28696: PUSH
28697: LD_INT 20
28699: PUSH
28700: LD_INT 21
28702: PUSH
28703: LD_INT 22
28705: PUSH
28706: LD_INT 72
28708: PUSH
28709: LD_INT 26
28711: PUSH
28712: LD_INT 69
28714: PUSH
28715: LD_INT 39
28717: PUSH
28718: LD_INT 40
28720: PUSH
28721: LD_INT 41
28723: PUSH
28724: LD_INT 42
28726: PUSH
28727: LD_INT 43
28729: PUSH
28730: LD_INT 48
28732: PUSH
28733: LD_INT 49
28735: PUSH
28736: LD_INT 50
28738: PUSH
28739: LD_INT 51
28741: PUSH
28742: LD_INT 52
28744: PUSH
28745: LD_INT 53
28747: PUSH
28748: LD_INT 54
28750: PUSH
28751: LD_INT 55
28753: PUSH
28754: LD_INT 56
28756: PUSH
28757: LD_INT 60
28759: PUSH
28760: LD_INT 61
28762: PUSH
28763: LD_INT 62
28765: PUSH
28766: LD_INT 66
28768: PUSH
28769: LD_INT 67
28771: PUSH
28772: LD_INT 68
28774: PUSH
28775: LD_INT 81
28777: PUSH
28778: LD_INT 82
28780: PUSH
28781: LD_INT 83
28783: PUSH
28784: LD_INT 84
28786: PUSH
28787: LD_INT 85
28789: PUSH
28790: LD_INT 87
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: ST_TO_ADDR
28848: GO 29081
28850: LD_INT 3
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28858
28856: GO 29080
28858: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28859: LD_ADDR_VAR 0 4
28863: PUSH
28864: LD_INT 46
28866: PUSH
28867: LD_INT 47
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: LD_INT 82
28878: PUSH
28879: LD_INT 83
28881: PUSH
28882: LD_INT 84
28884: PUSH
28885: LD_INT 85
28887: PUSH
28888: LD_INT 86
28890: PUSH
28891: LD_INT 11
28893: PUSH
28894: LD_INT 9
28896: PUSH
28897: LD_INT 20
28899: PUSH
28900: LD_INT 19
28902: PUSH
28903: LD_INT 21
28905: PUSH
28906: LD_INT 24
28908: PUSH
28909: LD_INT 22
28911: PUSH
28912: LD_INT 25
28914: PUSH
28915: LD_INT 28
28917: PUSH
28918: LD_INT 29
28920: PUSH
28921: LD_INT 30
28923: PUSH
28924: LD_INT 31
28926: PUSH
28927: LD_INT 37
28929: PUSH
28930: LD_INT 38
28932: PUSH
28933: LD_INT 32
28935: PUSH
28936: LD_INT 27
28938: PUSH
28939: LD_INT 33
28941: PUSH
28942: LD_INT 69
28944: PUSH
28945: LD_INT 39
28947: PUSH
28948: LD_INT 34
28950: PUSH
28951: LD_INT 40
28953: PUSH
28954: LD_INT 71
28956: PUSH
28957: LD_INT 23
28959: PUSH
28960: LD_INT 44
28962: PUSH
28963: LD_INT 48
28965: PUSH
28966: LD_INT 49
28968: PUSH
28969: LD_INT 50
28971: PUSH
28972: LD_INT 51
28974: PUSH
28975: LD_INT 52
28977: PUSH
28978: LD_INT 53
28980: PUSH
28981: LD_INT 54
28983: PUSH
28984: LD_INT 55
28986: PUSH
28987: LD_INT 56
28989: PUSH
28990: LD_INT 57
28992: PUSH
28993: LD_INT 58
28995: PUSH
28996: LD_INT 59
28998: PUSH
28999: LD_INT 63
29001: PUSH
29002: LD_INT 64
29004: PUSH
29005: LD_INT 65
29007: PUSH
29008: LD_INT 82
29010: PUSH
29011: LD_INT 83
29013: PUSH
29014: LD_INT 84
29016: PUSH
29017: LD_INT 85
29019: PUSH
29020: LD_INT 86
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: ST_TO_ADDR
29078: GO 29081
29080: POP
// if state > - 1 and state < 3 then
29081: LD_VAR 0 3
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: GREATER
29090: PUSH
29091: LD_VAR 0 3
29095: PUSH
29096: LD_INT 3
29098: LESS
29099: AND
29100: IFFALSE 29157
// for i in result do
29102: LD_ADDR_VAR 0 5
29106: PUSH
29107: LD_VAR 0 4
29111: PUSH
29112: FOR_IN
29113: IFFALSE 29155
// if GetTech ( i , side ) <> state then
29115: LD_VAR 0 5
29119: PPUSH
29120: LD_VAR 0 1
29124: PPUSH
29125: CALL_OW 321
29129: PUSH
29130: LD_VAR 0 3
29134: NONEQUAL
29135: IFFALSE 29153
// result := result diff i ;
29137: LD_ADDR_VAR 0 4
29141: PUSH
29142: LD_VAR 0 4
29146: PUSH
29147: LD_VAR 0 5
29151: DIFF
29152: ST_TO_ADDR
29153: GO 29112
29155: POP
29156: POP
// end ;
29157: LD_VAR 0 4
29161: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29162: LD_INT 0
29164: PPUSH
29165: PPUSH
29166: PPUSH
// result := true ;
29167: LD_ADDR_VAR 0 3
29171: PUSH
29172: LD_INT 1
29174: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29175: LD_ADDR_VAR 0 5
29179: PUSH
29180: LD_VAR 0 2
29184: PPUSH
29185: CALL_OW 480
29189: ST_TO_ADDR
// if not tmp then
29190: LD_VAR 0 5
29194: NOT
29195: IFFALSE 29199
// exit ;
29197: GO 29248
// for i in tmp do
29199: LD_ADDR_VAR 0 4
29203: PUSH
29204: LD_VAR 0 5
29208: PUSH
29209: FOR_IN
29210: IFFALSE 29246
// if GetTech ( i , side ) <> state_researched then
29212: LD_VAR 0 4
29216: PPUSH
29217: LD_VAR 0 1
29221: PPUSH
29222: CALL_OW 321
29226: PUSH
29227: LD_INT 2
29229: NONEQUAL
29230: IFFALSE 29244
// begin result := false ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_INT 0
29239: ST_TO_ADDR
// exit ;
29240: POP
29241: POP
29242: GO 29248
// end ;
29244: GO 29209
29246: POP
29247: POP
// end ;
29248: LD_VAR 0 3
29252: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29253: LD_INT 0
29255: PPUSH
29256: PPUSH
29257: PPUSH
29258: PPUSH
29259: PPUSH
29260: PPUSH
29261: PPUSH
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29268: LD_VAR 0 1
29272: NOT
29273: PUSH
29274: LD_VAR 0 1
29278: PPUSH
29279: CALL_OW 257
29283: PUSH
29284: LD_INT 9
29286: NONEQUAL
29287: OR
29288: IFFALSE 29292
// exit ;
29290: GO 29865
// side := GetSide ( unit ) ;
29292: LD_ADDR_VAR 0 9
29296: PUSH
29297: LD_VAR 0 1
29301: PPUSH
29302: CALL_OW 255
29306: ST_TO_ADDR
// tech_space := tech_spacanom ;
29307: LD_ADDR_VAR 0 12
29311: PUSH
29312: LD_INT 29
29314: ST_TO_ADDR
// tech_time := tech_taurad ;
29315: LD_ADDR_VAR 0 13
29319: PUSH
29320: LD_INT 28
29322: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29323: LD_ADDR_VAR 0 11
29327: PUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 310
29337: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29338: LD_VAR 0 11
29342: PPUSH
29343: CALL_OW 247
29347: PUSH
29348: LD_INT 2
29350: EQUAL
29351: IFFALSE 29355
// exit ;
29353: GO 29865
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29355: LD_ADDR_VAR 0 8
29359: PUSH
29360: LD_INT 81
29362: PUSH
29363: LD_VAR 0 9
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: LD_INT 21
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PPUSH
29393: CALL_OW 69
29397: ST_TO_ADDR
// if not tmp then
29398: LD_VAR 0 8
29402: NOT
29403: IFFALSE 29407
// exit ;
29405: GO 29865
// if in_unit then
29407: LD_VAR 0 11
29411: IFFALSE 29435
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29413: LD_ADDR_VAR 0 10
29417: PUSH
29418: LD_VAR 0 8
29422: PPUSH
29423: LD_VAR 0 11
29427: PPUSH
29428: CALL_OW 74
29432: ST_TO_ADDR
29433: GO 29455
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29435: LD_ADDR_VAR 0 10
29439: PUSH
29440: LD_VAR 0 8
29444: PPUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 74
29454: ST_TO_ADDR
// if not enemy then
29455: LD_VAR 0 10
29459: NOT
29460: IFFALSE 29464
// exit ;
29462: GO 29865
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29464: LD_VAR 0 11
29468: PUSH
29469: LD_VAR 0 11
29473: PPUSH
29474: LD_VAR 0 10
29478: PPUSH
29479: CALL_OW 296
29483: PUSH
29484: LD_INT 13
29486: GREATER
29487: AND
29488: PUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: LD_VAR 0 10
29498: PPUSH
29499: CALL_OW 296
29503: PUSH
29504: LD_INT 12
29506: GREATER
29507: OR
29508: IFFALSE 29512
// exit ;
29510: GO 29865
// missile := [ 1 ] ;
29512: LD_ADDR_VAR 0 14
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29523: LD_VAR 0 9
29527: PPUSH
29528: LD_VAR 0 12
29532: PPUSH
29533: CALL_OW 325
29537: IFFALSE 29566
// missile := Insert ( missile , missile + 1 , 2 ) ;
29539: LD_ADDR_VAR 0 14
29543: PUSH
29544: LD_VAR 0 14
29548: PPUSH
29549: LD_VAR 0 14
29553: PUSH
29554: LD_INT 1
29556: PLUS
29557: PPUSH
29558: LD_INT 2
29560: PPUSH
29561: CALL_OW 2
29565: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29566: LD_VAR 0 9
29570: PPUSH
29571: LD_VAR 0 13
29575: PPUSH
29576: CALL_OW 325
29580: PUSH
29581: LD_VAR 0 10
29585: PPUSH
29586: CALL_OW 255
29590: PPUSH
29591: LD_VAR 0 13
29595: PPUSH
29596: CALL_OW 325
29600: NOT
29601: AND
29602: IFFALSE 29631
// missile := Insert ( missile , missile + 1 , 3 ) ;
29604: LD_ADDR_VAR 0 14
29608: PUSH
29609: LD_VAR 0 14
29613: PPUSH
29614: LD_VAR 0 14
29618: PUSH
29619: LD_INT 1
29621: PLUS
29622: PPUSH
29623: LD_INT 3
29625: PPUSH
29626: CALL_OW 2
29630: ST_TO_ADDR
// if missile < 2 then
29631: LD_VAR 0 14
29635: PUSH
29636: LD_INT 2
29638: LESS
29639: IFFALSE 29643
// exit ;
29641: GO 29865
// x := GetX ( enemy ) ;
29643: LD_ADDR_VAR 0 4
29647: PUSH
29648: LD_VAR 0 10
29652: PPUSH
29653: CALL_OW 250
29657: ST_TO_ADDR
// y := GetY ( enemy ) ;
29658: LD_ADDR_VAR 0 5
29662: PUSH
29663: LD_VAR 0 10
29667: PPUSH
29668: CALL_OW 251
29672: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29673: LD_ADDR_VAR 0 6
29677: PUSH
29678: LD_VAR 0 4
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PPUSH
29687: LD_INT 1
29689: PPUSH
29690: CALL_OW 12
29694: PLUS
29695: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29696: LD_ADDR_VAR 0 7
29700: PUSH
29701: LD_VAR 0 5
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PPUSH
29710: LD_INT 1
29712: PPUSH
29713: CALL_OW 12
29717: PLUS
29718: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29719: LD_VAR 0 6
29723: PPUSH
29724: LD_VAR 0 7
29728: PPUSH
29729: CALL_OW 488
29733: NOT
29734: IFFALSE 29756
// begin _x := x ;
29736: LD_ADDR_VAR 0 6
29740: PUSH
29741: LD_VAR 0 4
29745: ST_TO_ADDR
// _y := y ;
29746: LD_ADDR_VAR 0 7
29750: PUSH
29751: LD_VAR 0 5
29755: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: LD_INT 1
29763: PPUSH
29764: LD_VAR 0 14
29768: PPUSH
29769: CALL_OW 12
29773: ST_TO_ADDR
// case i of 1 :
29774: LD_VAR 0 3
29778: PUSH
29779: LD_INT 1
29781: DOUBLE
29782: EQUAL
29783: IFTRUE 29787
29785: GO 29804
29787: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29788: LD_VAR 0 1
29792: PPUSH
29793: LD_VAR 0 10
29797: PPUSH
29798: CALL_OW 115
29802: GO 29865
29804: LD_INT 2
29806: DOUBLE
29807: EQUAL
29808: IFTRUE 29812
29810: GO 29834
29812: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29813: LD_VAR 0 1
29817: PPUSH
29818: LD_VAR 0 6
29822: PPUSH
29823: LD_VAR 0 7
29827: PPUSH
29828: CALL_OW 153
29832: GO 29865
29834: LD_INT 3
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29864
29842: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29843: LD_VAR 0 1
29847: PPUSH
29848: LD_VAR 0 6
29852: PPUSH
29853: LD_VAR 0 7
29857: PPUSH
29858: CALL_OW 154
29862: GO 29865
29864: POP
// end ;
29865: LD_VAR 0 2
29869: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
// if not unit or not building then
29878: LD_VAR 0 1
29882: NOT
29883: PUSH
29884: LD_VAR 0 2
29888: NOT
29889: OR
29890: IFFALSE 29894
// exit ;
29892: GO 30052
// x := GetX ( building ) ;
29894: LD_ADDR_VAR 0 5
29898: PUSH
29899: LD_VAR 0 2
29903: PPUSH
29904: CALL_OW 250
29908: ST_TO_ADDR
// y := GetY ( building ) ;
29909: LD_ADDR_VAR 0 6
29913: PUSH
29914: LD_VAR 0 2
29918: PPUSH
29919: CALL_OW 251
29923: ST_TO_ADDR
// for i = 0 to 5 do
29924: LD_ADDR_VAR 0 4
29928: PUSH
29929: DOUBLE
29930: LD_INT 0
29932: DEC
29933: ST_TO_ADDR
29934: LD_INT 5
29936: PUSH
29937: FOR_TO
29938: IFFALSE 30050
// begin _x := ShiftX ( x , i , 3 ) ;
29940: LD_ADDR_VAR 0 7
29944: PUSH
29945: LD_VAR 0 5
29949: PPUSH
29950: LD_VAR 0 4
29954: PPUSH
29955: LD_INT 3
29957: PPUSH
29958: CALL_OW 272
29962: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29963: LD_ADDR_VAR 0 8
29967: PUSH
29968: LD_VAR 0 6
29972: PPUSH
29973: LD_VAR 0 4
29977: PPUSH
29978: LD_INT 3
29980: PPUSH
29981: CALL_OW 273
29985: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29986: LD_VAR 0 7
29990: PPUSH
29991: LD_VAR 0 8
29995: PPUSH
29996: CALL_OW 488
30000: NOT
30001: IFFALSE 30005
// continue ;
30003: GO 29937
// if HexInfo ( _x , _y ) = 0 then
30005: LD_VAR 0 7
30009: PPUSH
30010: LD_VAR 0 8
30014: PPUSH
30015: CALL_OW 428
30019: PUSH
30020: LD_INT 0
30022: EQUAL
30023: IFFALSE 30048
// begin ComMoveXY ( unit , _x , _y ) ;
30025: LD_VAR 0 1
30029: PPUSH
30030: LD_VAR 0 7
30034: PPUSH
30035: LD_VAR 0 8
30039: PPUSH
30040: CALL_OW 111
// exit ;
30044: POP
30045: POP
30046: GO 30052
// end ; end ;
30048: GO 29937
30050: POP
30051: POP
// end ;
30052: LD_VAR 0 3
30056: RET
// export function ScanBase ( side , base_area ) ; begin
30057: LD_INT 0
30059: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30060: LD_ADDR_VAR 0 3
30064: PUSH
30065: LD_VAR 0 2
30069: PPUSH
30070: LD_INT 81
30072: PUSH
30073: LD_VAR 0 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PPUSH
30082: CALL_OW 70
30086: ST_TO_ADDR
// end ;
30087: LD_VAR 0 3
30091: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30092: LD_INT 0
30094: PPUSH
30095: PPUSH
30096: PPUSH
30097: PPUSH
// result := false ;
30098: LD_ADDR_VAR 0 2
30102: PUSH
30103: LD_INT 0
30105: ST_TO_ADDR
// side := GetSide ( unit ) ;
30106: LD_ADDR_VAR 0 3
30110: PUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 255
30120: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30121: LD_ADDR_VAR 0 4
30125: PUSH
30126: LD_VAR 0 1
30130: PPUSH
30131: CALL_OW 248
30135: ST_TO_ADDR
// case nat of 1 :
30136: LD_VAR 0 4
30140: PUSH
30141: LD_INT 1
30143: DOUBLE
30144: EQUAL
30145: IFTRUE 30149
30147: GO 30160
30149: POP
// tech := tech_lassight ; 2 :
30150: LD_ADDR_VAR 0 5
30154: PUSH
30155: LD_INT 12
30157: ST_TO_ADDR
30158: GO 30199
30160: LD_INT 2
30162: DOUBLE
30163: EQUAL
30164: IFTRUE 30168
30166: GO 30179
30168: POP
// tech := tech_mortar ; 3 :
30169: LD_ADDR_VAR 0 5
30173: PUSH
30174: LD_INT 41
30176: ST_TO_ADDR
30177: GO 30199
30179: LD_INT 3
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30198
30187: POP
// tech := tech_bazooka ; end ;
30188: LD_ADDR_VAR 0 5
30192: PUSH
30193: LD_INT 44
30195: ST_TO_ADDR
30196: GO 30199
30198: POP
// if Researched ( side , tech ) then
30199: LD_VAR 0 3
30203: PPUSH
30204: LD_VAR 0 5
30208: PPUSH
30209: CALL_OW 325
30213: IFFALSE 30240
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30215: LD_ADDR_VAR 0 2
30219: PUSH
30220: LD_INT 5
30222: PUSH
30223: LD_INT 8
30225: PUSH
30226: LD_INT 9
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: PUSH
30234: LD_VAR 0 4
30238: ARRAY
30239: ST_TO_ADDR
// end ;
30240: LD_VAR 0 2
30244: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30245: LD_INT 0
30247: PPUSH
30248: PPUSH
30249: PPUSH
// if not mines then
30250: LD_VAR 0 2
30254: NOT
30255: IFFALSE 30259
// exit ;
30257: GO 30403
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30259: LD_ADDR_VAR 0 5
30263: PUSH
30264: LD_INT 81
30266: PUSH
30267: LD_VAR 0 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: LD_INT 21
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PPUSH
30297: CALL_OW 69
30301: ST_TO_ADDR
// for i in mines do
30302: LD_ADDR_VAR 0 4
30306: PUSH
30307: LD_VAR 0 2
30311: PUSH
30312: FOR_IN
30313: IFFALSE 30401
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30315: LD_VAR 0 4
30319: PUSH
30320: LD_INT 1
30322: ARRAY
30323: PPUSH
30324: LD_VAR 0 4
30328: PUSH
30329: LD_INT 2
30331: ARRAY
30332: PPUSH
30333: CALL_OW 458
30337: NOT
30338: IFFALSE 30342
// continue ;
30340: GO 30312
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30342: LD_VAR 0 4
30346: PUSH
30347: LD_INT 1
30349: ARRAY
30350: PPUSH
30351: LD_VAR 0 4
30355: PUSH
30356: LD_INT 2
30358: ARRAY
30359: PPUSH
30360: CALL_OW 428
30364: PUSH
30365: LD_VAR 0 5
30369: IN
30370: IFFALSE 30399
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30372: LD_VAR 0 4
30376: PUSH
30377: LD_INT 1
30379: ARRAY
30380: PPUSH
30381: LD_VAR 0 4
30385: PUSH
30386: LD_INT 2
30388: ARRAY
30389: PPUSH
30390: LD_VAR 0 1
30394: PPUSH
30395: CALL_OW 456
// end ;
30399: GO 30312
30401: POP
30402: POP
// end ;
30403: LD_VAR 0 3
30407: RET
// export function Count ( array ) ; var i ; begin
30408: LD_INT 0
30410: PPUSH
30411: PPUSH
// result := 0 ;
30412: LD_ADDR_VAR 0 2
30416: PUSH
30417: LD_INT 0
30419: ST_TO_ADDR
// for i in array do
30420: LD_ADDR_VAR 0 3
30424: PUSH
30425: LD_VAR 0 1
30429: PUSH
30430: FOR_IN
30431: IFFALSE 30455
// if i then
30433: LD_VAR 0 3
30437: IFFALSE 30453
// result := result + 1 ;
30439: LD_ADDR_VAR 0 2
30443: PUSH
30444: LD_VAR 0 2
30448: PUSH
30449: LD_INT 1
30451: PLUS
30452: ST_TO_ADDR
30453: GO 30430
30455: POP
30456: POP
// end ;
30457: LD_VAR 0 2
30461: RET
// export function IsEmpty ( building ) ; begin
30462: LD_INT 0
30464: PPUSH
// if not building then
30465: LD_VAR 0 1
30469: NOT
30470: IFFALSE 30474
// exit ;
30472: GO 30517
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30474: LD_ADDR_VAR 0 2
30478: PUSH
30479: LD_VAR 0 1
30483: PUSH
30484: LD_INT 22
30486: PUSH
30487: LD_VAR 0 1
30491: PPUSH
30492: CALL_OW 255
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 58
30503: PUSH
30504: EMPTY
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PPUSH
30511: CALL_OW 69
30515: IN
30516: ST_TO_ADDR
// end ;
30517: LD_VAR 0 2
30521: RET
// export function IsNotFull ( building ) ; begin
30522: LD_INT 0
30524: PPUSH
// if not building then
30525: LD_VAR 0 1
30529: NOT
30530: IFFALSE 30534
// exit ;
30532: GO 30553
// result := UnitsInside ( building ) < 6 ;
30534: LD_ADDR_VAR 0 2
30538: PUSH
30539: LD_VAR 0 1
30543: PPUSH
30544: CALL_OW 313
30548: PUSH
30549: LD_INT 6
30551: LESS
30552: ST_TO_ADDR
// end ;
30553: LD_VAR 0 2
30557: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
30562: PPUSH
30563: PPUSH
// tmp := [ ] ;
30564: LD_ADDR_VAR 0 3
30568: PUSH
30569: EMPTY
30570: ST_TO_ADDR
// list := [ ] ;
30571: LD_ADDR_VAR 0 5
30575: PUSH
30576: EMPTY
30577: ST_TO_ADDR
// for i = 16 to 25 do
30578: LD_ADDR_VAR 0 4
30582: PUSH
30583: DOUBLE
30584: LD_INT 16
30586: DEC
30587: ST_TO_ADDR
30588: LD_INT 25
30590: PUSH
30591: FOR_TO
30592: IFFALSE 30665
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30594: LD_ADDR_VAR 0 3
30598: PUSH
30599: LD_VAR 0 3
30603: PUSH
30604: LD_INT 22
30606: PUSH
30607: LD_VAR 0 1
30611: PPUSH
30612: CALL_OW 255
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 91
30623: PUSH
30624: LD_VAR 0 1
30628: PUSH
30629: LD_INT 6
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 30
30639: PUSH
30640: LD_VAR 0 4
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: PPUSH
30657: CALL_OW 69
30661: ADD
30662: ST_TO_ADDR
30663: GO 30591
30665: POP
30666: POP
// for i = 1 to tmp do
30667: LD_ADDR_VAR 0 4
30671: PUSH
30672: DOUBLE
30673: LD_INT 1
30675: DEC
30676: ST_TO_ADDR
30677: LD_VAR 0 3
30681: PUSH
30682: FOR_TO
30683: IFFALSE 30771
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 5
30694: PUSH
30695: LD_VAR 0 3
30699: PUSH
30700: LD_VAR 0 4
30704: ARRAY
30705: PPUSH
30706: CALL_OW 266
30710: PUSH
30711: LD_VAR 0 3
30715: PUSH
30716: LD_VAR 0 4
30720: ARRAY
30721: PPUSH
30722: CALL_OW 250
30726: PUSH
30727: LD_VAR 0 3
30731: PUSH
30732: LD_VAR 0 4
30736: ARRAY
30737: PPUSH
30738: CALL_OW 251
30742: PUSH
30743: LD_VAR 0 3
30747: PUSH
30748: LD_VAR 0 4
30752: ARRAY
30753: PPUSH
30754: CALL_OW 254
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: PUSH
30765: EMPTY
30766: LIST
30767: ADD
30768: ST_TO_ADDR
30769: GO 30682
30771: POP
30772: POP
// result := list ;
30773: LD_ADDR_VAR 0 2
30777: PUSH
30778: LD_VAR 0 5
30782: ST_TO_ADDR
// end ;
30783: LD_VAR 0 2
30787: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30788: LD_INT 0
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
// if not factory then
30797: LD_VAR 0 1
30801: NOT
30802: IFFALSE 30806
// exit ;
30804: GO 31399
// if control = control_apeman then
30806: LD_VAR 0 4
30810: PUSH
30811: LD_INT 5
30813: EQUAL
30814: IFFALSE 30923
// begin tmp := UnitsInside ( factory ) ;
30816: LD_ADDR_VAR 0 8
30820: PUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 313
30830: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30831: LD_VAR 0 8
30835: PPUSH
30836: LD_INT 25
30838: PUSH
30839: LD_INT 12
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PPUSH
30846: CALL_OW 72
30850: NOT
30851: IFFALSE 30861
// control := control_manual ;
30853: LD_ADDR_VAR 0 4
30857: PUSH
30858: LD_INT 1
30860: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30861: LD_ADDR_VAR 0 8
30865: PUSH
30866: LD_VAR 0 1
30870: PPUSH
30871: CALL 30558 0 1
30875: ST_TO_ADDR
// if tmp then
30876: LD_VAR 0 8
30880: IFFALSE 30923
// begin for i in tmp do
30882: LD_ADDR_VAR 0 7
30886: PUSH
30887: LD_VAR 0 8
30891: PUSH
30892: FOR_IN
30893: IFFALSE 30921
// if i [ 1 ] = b_ext_radio then
30895: LD_VAR 0 7
30899: PUSH
30900: LD_INT 1
30902: ARRAY
30903: PUSH
30904: LD_INT 22
30906: EQUAL
30907: IFFALSE 30919
// begin control := control_remote ;
30909: LD_ADDR_VAR 0 4
30913: PUSH
30914: LD_INT 2
30916: ST_TO_ADDR
// break ;
30917: GO 30921
// end ;
30919: GO 30892
30921: POP
30922: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30923: LD_VAR 0 1
30927: PPUSH
30928: LD_VAR 0 2
30932: PPUSH
30933: LD_VAR 0 3
30937: PPUSH
30938: LD_VAR 0 4
30942: PPUSH
30943: LD_VAR 0 5
30947: PPUSH
30948: CALL_OW 448
30952: IFFALSE 30987
// begin result := [ chassis , engine , control , weapon ] ;
30954: LD_ADDR_VAR 0 6
30958: PUSH
30959: LD_VAR 0 2
30963: PUSH
30964: LD_VAR 0 3
30968: PUSH
30969: LD_VAR 0 4
30973: PUSH
30974: LD_VAR 0 5
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: ST_TO_ADDR
// exit ;
30985: GO 31399
// end ; _chassis := AvailableChassisList ( factory ) ;
30987: LD_ADDR_VAR 0 9
30991: PUSH
30992: LD_VAR 0 1
30996: PPUSH
30997: CALL_OW 475
31001: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31002: LD_ADDR_VAR 0 11
31006: PUSH
31007: LD_VAR 0 1
31011: PPUSH
31012: CALL_OW 476
31016: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31017: LD_ADDR_VAR 0 12
31021: PUSH
31022: LD_VAR 0 1
31026: PPUSH
31027: CALL_OW 477
31031: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31032: LD_ADDR_VAR 0 10
31036: PUSH
31037: LD_VAR 0 1
31041: PPUSH
31042: CALL_OW 478
31046: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31047: LD_VAR 0 9
31051: NOT
31052: PUSH
31053: LD_VAR 0 11
31057: NOT
31058: OR
31059: PUSH
31060: LD_VAR 0 12
31064: NOT
31065: OR
31066: PUSH
31067: LD_VAR 0 10
31071: NOT
31072: OR
31073: IFFALSE 31108
// begin result := [ chassis , engine , control , weapon ] ;
31075: LD_ADDR_VAR 0 6
31079: PUSH
31080: LD_VAR 0 2
31084: PUSH
31085: LD_VAR 0 3
31089: PUSH
31090: LD_VAR 0 4
31094: PUSH
31095: LD_VAR 0 5
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: ST_TO_ADDR
// exit ;
31106: GO 31399
// end ; if not chassis in _chassis then
31108: LD_VAR 0 2
31112: PUSH
31113: LD_VAR 0 9
31117: IN
31118: NOT
31119: IFFALSE 31145
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31121: LD_ADDR_VAR 0 2
31125: PUSH
31126: LD_VAR 0 9
31130: PUSH
31131: LD_INT 1
31133: PPUSH
31134: LD_VAR 0 9
31138: PPUSH
31139: CALL_OW 12
31143: ARRAY
31144: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31145: LD_VAR 0 2
31149: PPUSH
31150: LD_VAR 0 3
31154: PPUSH
31155: CALL 31404 0 2
31159: NOT
31160: IFFALSE 31219
// repeat engine := _engine [ 1 ] ;
31162: LD_ADDR_VAR 0 3
31166: PUSH
31167: LD_VAR 0 11
31171: PUSH
31172: LD_INT 1
31174: ARRAY
31175: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31176: LD_ADDR_VAR 0 11
31180: PUSH
31181: LD_VAR 0 11
31185: PPUSH
31186: LD_INT 1
31188: PPUSH
31189: CALL_OW 3
31193: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31194: LD_VAR 0 2
31198: PPUSH
31199: LD_VAR 0 3
31203: PPUSH
31204: CALL 31404 0 2
31208: PUSH
31209: LD_VAR 0 11
31213: PUSH
31214: EMPTY
31215: EQUAL
31216: OR
31217: IFFALSE 31162
// if not control in _control then
31219: LD_VAR 0 4
31223: PUSH
31224: LD_VAR 0 12
31228: IN
31229: NOT
31230: IFFALSE 31256
// control := _control [ rand ( 1 , _control ) ] ;
31232: LD_ADDR_VAR 0 4
31236: PUSH
31237: LD_VAR 0 12
31241: PUSH
31242: LD_INT 1
31244: PPUSH
31245: LD_VAR 0 12
31249: PPUSH
31250: CALL_OW 12
31254: ARRAY
31255: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31256: LD_VAR 0 2
31260: PPUSH
31261: LD_VAR 0 5
31265: PPUSH
31266: CALL 31624 0 2
31270: NOT
31271: IFFALSE 31330
// repeat weapon := _weapon [ 1 ] ;
31273: LD_ADDR_VAR 0 5
31277: PUSH
31278: LD_VAR 0 10
31282: PUSH
31283: LD_INT 1
31285: ARRAY
31286: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31287: LD_ADDR_VAR 0 10
31291: PUSH
31292: LD_VAR 0 10
31296: PPUSH
31297: LD_INT 1
31299: PPUSH
31300: CALL_OW 3
31304: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31305: LD_VAR 0 2
31309: PPUSH
31310: LD_VAR 0 5
31314: PPUSH
31315: CALL 31624 0 2
31319: PUSH
31320: LD_VAR 0 10
31324: PUSH
31325: EMPTY
31326: EQUAL
31327: OR
31328: IFFALSE 31273
// result := [ ] ;
31330: LD_ADDR_VAR 0 6
31334: PUSH
31335: EMPTY
31336: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31337: LD_VAR 0 1
31341: PPUSH
31342: LD_VAR 0 2
31346: PPUSH
31347: LD_VAR 0 3
31351: PPUSH
31352: LD_VAR 0 4
31356: PPUSH
31357: LD_VAR 0 5
31361: PPUSH
31362: CALL_OW 448
31366: IFFALSE 31399
// result := [ chassis , engine , control , weapon ] ;
31368: LD_ADDR_VAR 0 6
31372: PUSH
31373: LD_VAR 0 2
31377: PUSH
31378: LD_VAR 0 3
31382: PUSH
31383: LD_VAR 0 4
31387: PUSH
31388: LD_VAR 0 5
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// end ;
31399: LD_VAR 0 6
31403: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31404: LD_INT 0
31406: PPUSH
// if not chassis or not engine then
31407: LD_VAR 0 1
31411: NOT
31412: PUSH
31413: LD_VAR 0 2
31417: NOT
31418: OR
31419: IFFALSE 31423
// exit ;
31421: GO 31619
// case engine of engine_solar :
31423: LD_VAR 0 2
31427: PUSH
31428: LD_INT 2
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31474
31436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 11
31444: PUSH
31445: LD_INT 12
31447: PUSH
31448: LD_INT 13
31450: PUSH
31451: LD_INT 14
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
31472: GO 31603
31474: LD_INT 1
31476: DOUBLE
31477: EQUAL
31478: IFTRUE 31482
31480: GO 31544
31482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: LD_INT 11
31490: PUSH
31491: LD_INT 12
31493: PUSH
31494: LD_INT 13
31496: PUSH
31497: LD_INT 14
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: LD_INT 4
31511: PUSH
31512: LD_INT 5
31514: PUSH
31515: LD_INT 21
31517: PUSH
31518: LD_INT 23
31520: PUSH
31521: LD_INT 22
31523: PUSH
31524: LD_INT 24
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
31542: GO 31603
31544: LD_INT 3
31546: DOUBLE
31547: EQUAL
31548: IFTRUE 31552
31550: GO 31602
31552: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31553: LD_ADDR_VAR 0 3
31557: PUSH
31558: LD_INT 13
31560: PUSH
31561: LD_INT 14
31563: PUSH
31564: LD_INT 2
31566: PUSH
31567: LD_INT 3
31569: PUSH
31570: LD_INT 4
31572: PUSH
31573: LD_INT 5
31575: PUSH
31576: LD_INT 21
31578: PUSH
31579: LD_INT 22
31581: PUSH
31582: LD_INT 23
31584: PUSH
31585: LD_INT 24
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
31600: GO 31603
31602: POP
// result := ( chassis in result ) ;
31603: LD_ADDR_VAR 0 3
31607: PUSH
31608: LD_VAR 0 1
31612: PUSH
31613: LD_VAR 0 3
31617: IN
31618: ST_TO_ADDR
// end ;
31619: LD_VAR 0 3
31623: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31624: LD_INT 0
31626: PPUSH
// if not chassis or not weapon then
31627: LD_VAR 0 1
31631: NOT
31632: PUSH
31633: LD_VAR 0 2
31637: NOT
31638: OR
31639: IFFALSE 31643
// exit ;
31641: GO 32669
// case weapon of us_machine_gun :
31643: LD_VAR 0 2
31647: PUSH
31648: LD_INT 2
31650: DOUBLE
31651: EQUAL
31652: IFTRUE 31656
31654: GO 31686
31656: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31657: LD_ADDR_VAR 0 3
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: LD_INT 3
31670: PUSH
31671: LD_INT 4
31673: PUSH
31674: LD_INT 5
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
31684: GO 32653
31686: LD_INT 3
31688: DOUBLE
31689: EQUAL
31690: IFTRUE 31694
31692: GO 31724
31694: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31695: LD_ADDR_VAR 0 3
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 3
31708: PUSH
31709: LD_INT 4
31711: PUSH
31712: LD_INT 5
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: ST_TO_ADDR
31722: GO 32653
31724: LD_INT 11
31726: DOUBLE
31727: EQUAL
31728: IFTRUE 31732
31730: GO 31762
31732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31733: LD_ADDR_VAR 0 3
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 4
31749: PUSH
31750: LD_INT 5
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: ST_TO_ADDR
31760: GO 32653
31762: LD_INT 4
31764: DOUBLE
31765: EQUAL
31766: IFTRUE 31770
31768: GO 31796
31770: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31771: LD_ADDR_VAR 0 3
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: LD_INT 5
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: ST_TO_ADDR
31794: GO 32653
31796: LD_INT 5
31798: DOUBLE
31799: EQUAL
31800: IFTRUE 31804
31802: GO 31830
31804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31805: LD_ADDR_VAR 0 3
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: LD_INT 4
31818: PUSH
31819: LD_INT 5
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: ST_TO_ADDR
31828: GO 32653
31830: LD_INT 9
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31864
31838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: LD_INT 4
31852: PUSH
31853: LD_INT 5
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
31862: GO 32653
31864: LD_INT 7
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 31898
31872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: LD_INT 4
31886: PUSH
31887: LD_INT 5
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
31896: GO 32653
31898: LD_INT 12
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31932
31906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: LD_INT 4
31920: PUSH
31921: LD_INT 5
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: ST_TO_ADDR
31930: GO 32653
31932: LD_INT 13
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31940
31938: GO 31966
31940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: LD_INT 4
31954: PUSH
31955: LD_INT 5
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
31964: GO 32653
31966: LD_INT 14
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 31992
31974: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_INT 4
31982: PUSH
31983: LD_INT 5
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: ST_TO_ADDR
31990: GO 32653
31992: LD_INT 6
31994: DOUBLE
31995: EQUAL
31996: IFTRUE 32000
31998: GO 32018
32000: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32001: LD_ADDR_VAR 0 3
32005: PUSH
32006: LD_INT 4
32008: PUSH
32009: LD_INT 5
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: ST_TO_ADDR
32016: GO 32653
32018: LD_INT 10
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32044
32026: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32027: LD_ADDR_VAR 0 3
32031: PUSH
32032: LD_INT 4
32034: PUSH
32035: LD_INT 5
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: ST_TO_ADDR
32042: GO 32653
32044: LD_INT 22
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32078
32052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32053: LD_ADDR_VAR 0 3
32057: PUSH
32058: LD_INT 11
32060: PUSH
32061: LD_INT 12
32063: PUSH
32064: LD_INT 13
32066: PUSH
32067: LD_INT 14
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
32076: GO 32653
32078: LD_INT 23
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32112
32086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32087: LD_ADDR_VAR 0 3
32091: PUSH
32092: LD_INT 11
32094: PUSH
32095: LD_INT 12
32097: PUSH
32098: LD_INT 13
32100: PUSH
32101: LD_INT 14
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
32110: GO 32653
32112: LD_INT 24
32114: DOUBLE
32115: EQUAL
32116: IFTRUE 32120
32118: GO 32146
32120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32121: LD_ADDR_VAR 0 3
32125: PUSH
32126: LD_INT 11
32128: PUSH
32129: LD_INT 12
32131: PUSH
32132: LD_INT 13
32134: PUSH
32135: LD_INT 14
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
32144: GO 32653
32146: LD_INT 30
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32180
32154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32155: LD_ADDR_VAR 0 3
32159: PUSH
32160: LD_INT 11
32162: PUSH
32163: LD_INT 12
32165: PUSH
32166: LD_INT 13
32168: PUSH
32169: LD_INT 14
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
32178: GO 32653
32180: LD_INT 25
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32206
32188: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32189: LD_ADDR_VAR 0 3
32193: PUSH
32194: LD_INT 13
32196: PUSH
32197: LD_INT 14
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: ST_TO_ADDR
32204: GO 32653
32206: LD_INT 27
32208: DOUBLE
32209: EQUAL
32210: IFTRUE 32214
32212: GO 32232
32214: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32215: LD_ADDR_VAR 0 3
32219: PUSH
32220: LD_INT 13
32222: PUSH
32223: LD_INT 14
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: ST_TO_ADDR
32230: GO 32653
32232: LD_INT 28
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32240
32238: GO 32258
32240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32241: LD_ADDR_VAR 0 3
32245: PUSH
32246: LD_INT 13
32248: PUSH
32249: LD_INT 14
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: ST_TO_ADDR
32256: GO 32653
32258: LD_INT 29
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32284
32266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32267: LD_ADDR_VAR 0 3
32271: PUSH
32272: LD_INT 13
32274: PUSH
32275: LD_INT 14
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: ST_TO_ADDR
32282: GO 32653
32284: LD_INT 31
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32310
32292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32293: LD_ADDR_VAR 0 3
32297: PUSH
32298: LD_INT 13
32300: PUSH
32301: LD_INT 14
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: ST_TO_ADDR
32308: GO 32653
32310: LD_INT 26
32312: DOUBLE
32313: EQUAL
32314: IFTRUE 32318
32316: GO 32336
32318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32319: LD_ADDR_VAR 0 3
32323: PUSH
32324: LD_INT 13
32326: PUSH
32327: LD_INT 14
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: ST_TO_ADDR
32334: GO 32653
32336: LD_INT 42
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32370
32344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: LD_INT 21
32352: PUSH
32353: LD_INT 22
32355: PUSH
32356: LD_INT 23
32358: PUSH
32359: LD_INT 24
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: ST_TO_ADDR
32368: GO 32653
32370: LD_INT 43
32372: DOUBLE
32373: EQUAL
32374: IFTRUE 32378
32376: GO 32404
32378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32379: LD_ADDR_VAR 0 3
32383: PUSH
32384: LD_INT 21
32386: PUSH
32387: LD_INT 22
32389: PUSH
32390: LD_INT 23
32392: PUSH
32393: LD_INT 24
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: ST_TO_ADDR
32402: GO 32653
32404: LD_INT 44
32406: DOUBLE
32407: EQUAL
32408: IFTRUE 32412
32410: GO 32438
32412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_INT 21
32420: PUSH
32421: LD_INT 22
32423: PUSH
32424: LD_INT 23
32426: PUSH
32427: LD_INT 24
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: ST_TO_ADDR
32436: GO 32653
32438: LD_INT 45
32440: DOUBLE
32441: EQUAL
32442: IFTRUE 32446
32444: GO 32472
32446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_INT 21
32454: PUSH
32455: LD_INT 22
32457: PUSH
32458: LD_INT 23
32460: PUSH
32461: LD_INT 24
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: ST_TO_ADDR
32470: GO 32653
32472: LD_INT 49
32474: DOUBLE
32475: EQUAL
32476: IFTRUE 32480
32478: GO 32506
32480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32481: LD_ADDR_VAR 0 3
32485: PUSH
32486: LD_INT 21
32488: PUSH
32489: LD_INT 22
32491: PUSH
32492: LD_INT 23
32494: PUSH
32495: LD_INT 24
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: ST_TO_ADDR
32504: GO 32653
32506: LD_INT 51
32508: DOUBLE
32509: EQUAL
32510: IFTRUE 32514
32512: GO 32540
32514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32515: LD_ADDR_VAR 0 3
32519: PUSH
32520: LD_INT 21
32522: PUSH
32523: LD_INT 22
32525: PUSH
32526: LD_INT 23
32528: PUSH
32529: LD_INT 24
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
32538: GO 32653
32540: LD_INT 52
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32548
32546: GO 32574
32548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32549: LD_ADDR_VAR 0 3
32553: PUSH
32554: LD_INT 21
32556: PUSH
32557: LD_INT 22
32559: PUSH
32560: LD_INT 23
32562: PUSH
32563: LD_INT 24
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
32572: GO 32653
32574: LD_INT 53
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32600
32582: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_INT 23
32590: PUSH
32591: LD_INT 24
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: ST_TO_ADDR
32598: GO 32653
32600: LD_INT 46
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32608
32606: GO 32626
32608: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32609: LD_ADDR_VAR 0 3
32613: PUSH
32614: LD_INT 23
32616: PUSH
32617: LD_INT 24
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: ST_TO_ADDR
32624: GO 32653
32626: LD_INT 47
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32634
32632: GO 32652
32634: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32635: LD_ADDR_VAR 0 3
32639: PUSH
32640: LD_INT 23
32642: PUSH
32643: LD_INT 24
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: ST_TO_ADDR
32650: GO 32653
32652: POP
// result := ( chassis in result ) ;
32653: LD_ADDR_VAR 0 3
32657: PUSH
32658: LD_VAR 0 1
32662: PUSH
32663: LD_VAR 0 3
32667: IN
32668: ST_TO_ADDR
// end ;
32669: LD_VAR 0 3
32673: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32674: LD_INT 0
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
// result := array ;
32683: LD_ADDR_VAR 0 5
32687: PUSH
32688: LD_VAR 0 1
32692: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32693: LD_VAR 0 1
32697: NOT
32698: PUSH
32699: LD_VAR 0 2
32703: NOT
32704: OR
32705: PUSH
32706: LD_VAR 0 3
32710: NOT
32711: OR
32712: PUSH
32713: LD_VAR 0 2
32717: PUSH
32718: LD_VAR 0 1
32722: GREATER
32723: OR
32724: PUSH
32725: LD_VAR 0 3
32729: PUSH
32730: LD_VAR 0 1
32734: GREATER
32735: OR
32736: IFFALSE 32740
// exit ;
32738: GO 33036
// if direction then
32740: LD_VAR 0 4
32744: IFFALSE 32808
// begin d := 1 ;
32746: LD_ADDR_VAR 0 9
32750: PUSH
32751: LD_INT 1
32753: ST_TO_ADDR
// if i_from > i_to then
32754: LD_VAR 0 2
32758: PUSH
32759: LD_VAR 0 3
32763: GREATER
32764: IFFALSE 32790
// length := ( array - i_from ) + i_to else
32766: LD_ADDR_VAR 0 11
32770: PUSH
32771: LD_VAR 0 1
32775: PUSH
32776: LD_VAR 0 2
32780: MINUS
32781: PUSH
32782: LD_VAR 0 3
32786: PLUS
32787: ST_TO_ADDR
32788: GO 32806
// length := i_to - i_from ;
32790: LD_ADDR_VAR 0 11
32794: PUSH
32795: LD_VAR 0 3
32799: PUSH
32800: LD_VAR 0 2
32804: MINUS
32805: ST_TO_ADDR
// end else
32806: GO 32869
// begin d := - 1 ;
32808: LD_ADDR_VAR 0 9
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: ST_TO_ADDR
// if i_from > i_to then
32817: LD_VAR 0 2
32821: PUSH
32822: LD_VAR 0 3
32826: GREATER
32827: IFFALSE 32847
// length := i_from - i_to else
32829: LD_ADDR_VAR 0 11
32833: PUSH
32834: LD_VAR 0 2
32838: PUSH
32839: LD_VAR 0 3
32843: MINUS
32844: ST_TO_ADDR
32845: GO 32869
// length := ( array - i_to ) + i_from ;
32847: LD_ADDR_VAR 0 11
32851: PUSH
32852: LD_VAR 0 1
32856: PUSH
32857: LD_VAR 0 3
32861: MINUS
32862: PUSH
32863: LD_VAR 0 2
32867: PLUS
32868: ST_TO_ADDR
// end ; if not length then
32869: LD_VAR 0 11
32873: NOT
32874: IFFALSE 32878
// exit ;
32876: GO 33036
// tmp := array ;
32878: LD_ADDR_VAR 0 10
32882: PUSH
32883: LD_VAR 0 1
32887: ST_TO_ADDR
// for i = 1 to length do
32888: LD_ADDR_VAR 0 6
32892: PUSH
32893: DOUBLE
32894: LD_INT 1
32896: DEC
32897: ST_TO_ADDR
32898: LD_VAR 0 11
32902: PUSH
32903: FOR_TO
32904: IFFALSE 33024
// begin for j = 1 to array do
32906: LD_ADDR_VAR 0 7
32910: PUSH
32911: DOUBLE
32912: LD_INT 1
32914: DEC
32915: ST_TO_ADDR
32916: LD_VAR 0 1
32920: PUSH
32921: FOR_TO
32922: IFFALSE 33010
// begin k := j + d ;
32924: LD_ADDR_VAR 0 8
32928: PUSH
32929: LD_VAR 0 7
32933: PUSH
32934: LD_VAR 0 9
32938: PLUS
32939: ST_TO_ADDR
// if k > array then
32940: LD_VAR 0 8
32944: PUSH
32945: LD_VAR 0 1
32949: GREATER
32950: IFFALSE 32960
// k := 1 ;
32952: LD_ADDR_VAR 0 8
32956: PUSH
32957: LD_INT 1
32959: ST_TO_ADDR
// if not k then
32960: LD_VAR 0 8
32964: NOT
32965: IFFALSE 32977
// k := array ;
32967: LD_ADDR_VAR 0 8
32971: PUSH
32972: LD_VAR 0 1
32976: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32977: LD_ADDR_VAR 0 10
32981: PUSH
32982: LD_VAR 0 10
32986: PPUSH
32987: LD_VAR 0 8
32991: PPUSH
32992: LD_VAR 0 1
32996: PUSH
32997: LD_VAR 0 7
33001: ARRAY
33002: PPUSH
33003: CALL_OW 1
33007: ST_TO_ADDR
// end ;
33008: GO 32921
33010: POP
33011: POP
// array := tmp ;
33012: LD_ADDR_VAR 0 1
33016: PUSH
33017: LD_VAR 0 10
33021: ST_TO_ADDR
// end ;
33022: GO 32903
33024: POP
33025: POP
// result := array ;
33026: LD_ADDR_VAR 0 5
33030: PUSH
33031: LD_VAR 0 1
33035: ST_TO_ADDR
// end ;
33036: LD_VAR 0 5
33040: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33041: LD_INT 0
33043: PPUSH
33044: PPUSH
// result := 0 ;
33045: LD_ADDR_VAR 0 3
33049: PUSH
33050: LD_INT 0
33052: ST_TO_ADDR
// if not array or not value in array then
33053: LD_VAR 0 1
33057: NOT
33058: PUSH
33059: LD_VAR 0 2
33063: PUSH
33064: LD_VAR 0 1
33068: IN
33069: NOT
33070: OR
33071: IFFALSE 33075
// exit ;
33073: GO 33129
// for i = 1 to array do
33075: LD_ADDR_VAR 0 4
33079: PUSH
33080: DOUBLE
33081: LD_INT 1
33083: DEC
33084: ST_TO_ADDR
33085: LD_VAR 0 1
33089: PUSH
33090: FOR_TO
33091: IFFALSE 33127
// if value = array [ i ] then
33093: LD_VAR 0 2
33097: PUSH
33098: LD_VAR 0 1
33102: PUSH
33103: LD_VAR 0 4
33107: ARRAY
33108: EQUAL
33109: IFFALSE 33125
// begin result := i ;
33111: LD_ADDR_VAR 0 3
33115: PUSH
33116: LD_VAR 0 4
33120: ST_TO_ADDR
// exit ;
33121: POP
33122: POP
33123: GO 33129
// end ;
33125: GO 33090
33127: POP
33128: POP
// end ;
33129: LD_VAR 0 3
33133: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33134: LD_INT 0
33136: PPUSH
// vc_chassis := chassis ;
33137: LD_ADDR_OWVAR 37
33141: PUSH
33142: LD_VAR 0 1
33146: ST_TO_ADDR
// vc_engine := engine ;
33147: LD_ADDR_OWVAR 39
33151: PUSH
33152: LD_VAR 0 2
33156: ST_TO_ADDR
// vc_control := control ;
33157: LD_ADDR_OWVAR 38
33161: PUSH
33162: LD_VAR 0 3
33166: ST_TO_ADDR
// vc_weapon := weapon ;
33167: LD_ADDR_OWVAR 40
33171: PUSH
33172: LD_VAR 0 4
33176: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33177: LD_ADDR_OWVAR 41
33181: PUSH
33182: LD_VAR 0 5
33186: ST_TO_ADDR
// end ;
33187: LD_VAR 0 6
33191: RET
// export function WantPlant ( unit ) ; var task ; begin
33192: LD_INT 0
33194: PPUSH
33195: PPUSH
// result := false ;
33196: LD_ADDR_VAR 0 2
33200: PUSH
33201: LD_INT 0
33203: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33204: LD_ADDR_VAR 0 3
33208: PUSH
33209: LD_VAR 0 1
33213: PPUSH
33214: CALL_OW 437
33218: ST_TO_ADDR
// if task then
33219: LD_VAR 0 3
33223: IFFALSE 33251
// if task [ 1 ] [ 1 ] = p then
33225: LD_VAR 0 3
33229: PUSH
33230: LD_INT 1
33232: ARRAY
33233: PUSH
33234: LD_INT 1
33236: ARRAY
33237: PUSH
33238: LD_STRING p
33240: EQUAL
33241: IFFALSE 33251
// result := true ;
33243: LD_ADDR_VAR 0 2
33247: PUSH
33248: LD_INT 1
33250: ST_TO_ADDR
// end ;
33251: LD_VAR 0 2
33255: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33256: LD_INT 0
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
// if pos < 1 then
33262: LD_VAR 0 2
33266: PUSH
33267: LD_INT 1
33269: LESS
33270: IFFALSE 33274
// exit ;
33272: GO 33577
// if pos = 1 then
33274: LD_VAR 0 2
33278: PUSH
33279: LD_INT 1
33281: EQUAL
33282: IFFALSE 33315
// result := Replace ( arr , pos [ 1 ] , value ) else
33284: LD_ADDR_VAR 0 4
33288: PUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: LD_VAR 0 2
33298: PUSH
33299: LD_INT 1
33301: ARRAY
33302: PPUSH
33303: LD_VAR 0 3
33307: PPUSH
33308: CALL_OW 1
33312: ST_TO_ADDR
33313: GO 33577
// begin tmp := arr ;
33315: LD_ADDR_VAR 0 6
33319: PUSH
33320: LD_VAR 0 1
33324: ST_TO_ADDR
// s_arr := [ tmp ] ;
33325: LD_ADDR_VAR 0 7
33329: PUSH
33330: LD_VAR 0 6
33334: PUSH
33335: EMPTY
33336: LIST
33337: ST_TO_ADDR
// for i = 1 to pos - 1 do
33338: LD_ADDR_VAR 0 5
33342: PUSH
33343: DOUBLE
33344: LD_INT 1
33346: DEC
33347: ST_TO_ADDR
33348: LD_VAR 0 2
33352: PUSH
33353: LD_INT 1
33355: MINUS
33356: PUSH
33357: FOR_TO
33358: IFFALSE 33403
// begin tmp := tmp [ pos [ i ] ] ;
33360: LD_ADDR_VAR 0 6
33364: PUSH
33365: LD_VAR 0 6
33369: PUSH
33370: LD_VAR 0 2
33374: PUSH
33375: LD_VAR 0 5
33379: ARRAY
33380: ARRAY
33381: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33382: LD_ADDR_VAR 0 7
33386: PUSH
33387: LD_VAR 0 7
33391: PUSH
33392: LD_VAR 0 6
33396: PUSH
33397: EMPTY
33398: LIST
33399: ADD
33400: ST_TO_ADDR
// end ;
33401: GO 33357
33403: POP
33404: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33405: LD_ADDR_VAR 0 6
33409: PUSH
33410: LD_VAR 0 6
33414: PPUSH
33415: LD_VAR 0 2
33419: PUSH
33420: LD_VAR 0 2
33424: ARRAY
33425: PPUSH
33426: LD_VAR 0 3
33430: PPUSH
33431: CALL_OW 1
33435: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33436: LD_ADDR_VAR 0 7
33440: PUSH
33441: LD_VAR 0 7
33445: PPUSH
33446: LD_VAR 0 7
33450: PPUSH
33451: LD_VAR 0 6
33455: PPUSH
33456: CALL_OW 1
33460: ST_TO_ADDR
// for i = s_arr downto 2 do
33461: LD_ADDR_VAR 0 5
33465: PUSH
33466: DOUBLE
33467: LD_VAR 0 7
33471: INC
33472: ST_TO_ADDR
33473: LD_INT 2
33475: PUSH
33476: FOR_DOWNTO
33477: IFFALSE 33561
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33479: LD_ADDR_VAR 0 6
33483: PUSH
33484: LD_VAR 0 7
33488: PUSH
33489: LD_VAR 0 5
33493: PUSH
33494: LD_INT 1
33496: MINUS
33497: ARRAY
33498: PPUSH
33499: LD_VAR 0 2
33503: PUSH
33504: LD_VAR 0 5
33508: PUSH
33509: LD_INT 1
33511: MINUS
33512: ARRAY
33513: PPUSH
33514: LD_VAR 0 7
33518: PUSH
33519: LD_VAR 0 5
33523: ARRAY
33524: PPUSH
33525: CALL_OW 1
33529: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33530: LD_ADDR_VAR 0 7
33534: PUSH
33535: LD_VAR 0 7
33539: PPUSH
33540: LD_VAR 0 5
33544: PUSH
33545: LD_INT 1
33547: MINUS
33548: PPUSH
33549: LD_VAR 0 6
33553: PPUSH
33554: CALL_OW 1
33558: ST_TO_ADDR
// end ;
33559: GO 33476
33561: POP
33562: POP
// result := s_arr [ 1 ] ;
33563: LD_ADDR_VAR 0 4
33567: PUSH
33568: LD_VAR 0 7
33572: PUSH
33573: LD_INT 1
33575: ARRAY
33576: ST_TO_ADDR
// end ; end ;
33577: LD_VAR 0 4
33581: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33582: LD_INT 0
33584: PPUSH
33585: PPUSH
// if not list then
33586: LD_VAR 0 1
33590: NOT
33591: IFFALSE 33595
// exit ;
33593: GO 33686
// i := list [ pos1 ] ;
33595: LD_ADDR_VAR 0 5
33599: PUSH
33600: LD_VAR 0 1
33604: PUSH
33605: LD_VAR 0 2
33609: ARRAY
33610: ST_TO_ADDR
// if not i then
33611: LD_VAR 0 5
33615: NOT
33616: IFFALSE 33620
// exit ;
33618: GO 33686
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33620: LD_ADDR_VAR 0 1
33624: PUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: LD_VAR 0 2
33634: PPUSH
33635: LD_VAR 0 1
33639: PUSH
33640: LD_VAR 0 3
33644: ARRAY
33645: PPUSH
33646: CALL_OW 1
33650: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33651: LD_ADDR_VAR 0 1
33655: PUSH
33656: LD_VAR 0 1
33660: PPUSH
33661: LD_VAR 0 3
33665: PPUSH
33666: LD_VAR 0 5
33670: PPUSH
33671: CALL_OW 1
33675: ST_TO_ADDR
// result := list ;
33676: LD_ADDR_VAR 0 4
33680: PUSH
33681: LD_VAR 0 1
33685: ST_TO_ADDR
// end ;
33686: LD_VAR 0 4
33690: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33691: LD_INT 0
33693: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33694: LD_ADDR_VAR 0 5
33698: PUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: CALL_OW 250
33708: PPUSH
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL_OW 251
33718: PPUSH
33719: LD_VAR 0 2
33723: PPUSH
33724: LD_VAR 0 3
33728: PPUSH
33729: LD_VAR 0 4
33733: PPUSH
33734: CALL 33744 0 5
33738: ST_TO_ADDR
// end ;
33739: LD_VAR 0 5
33743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
// if not list then
33750: LD_VAR 0 3
33754: NOT
33755: IFFALSE 33759
// exit ;
33757: GO 34147
// result := [ ] ;
33759: LD_ADDR_VAR 0 6
33763: PUSH
33764: EMPTY
33765: ST_TO_ADDR
// for i in list do
33766: LD_ADDR_VAR 0 7
33770: PUSH
33771: LD_VAR 0 3
33775: PUSH
33776: FOR_IN
33777: IFFALSE 33979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33779: LD_ADDR_VAR 0 9
33783: PUSH
33784: LD_VAR 0 7
33788: PPUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: LD_VAR 0 2
33798: PPUSH
33799: CALL_OW 297
33803: ST_TO_ADDR
// if not result then
33804: LD_VAR 0 6
33808: NOT
33809: IFFALSE 33835
// result := [ [ i , tmp ] ] else
33811: LD_ADDR_VAR 0 6
33815: PUSH
33816: LD_VAR 0 7
33820: PUSH
33821: LD_VAR 0 9
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: ST_TO_ADDR
33833: GO 33977
// begin if result [ result ] [ 2 ] < tmp then
33835: LD_VAR 0 6
33839: PUSH
33840: LD_VAR 0 6
33844: ARRAY
33845: PUSH
33846: LD_INT 2
33848: ARRAY
33849: PUSH
33850: LD_VAR 0 9
33854: LESS
33855: IFFALSE 33897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33857: LD_ADDR_VAR 0 6
33861: PUSH
33862: LD_VAR 0 6
33866: PPUSH
33867: LD_VAR 0 6
33871: PUSH
33872: LD_INT 1
33874: PLUS
33875: PPUSH
33876: LD_VAR 0 7
33880: PUSH
33881: LD_VAR 0 9
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PPUSH
33890: CALL_OW 2
33894: ST_TO_ADDR
33895: GO 33977
// for j = 1 to result do
33897: LD_ADDR_VAR 0 8
33901: PUSH
33902: DOUBLE
33903: LD_INT 1
33905: DEC
33906: ST_TO_ADDR
33907: LD_VAR 0 6
33911: PUSH
33912: FOR_TO
33913: IFFALSE 33975
// begin if tmp < result [ j ] [ 2 ] then
33915: LD_VAR 0 9
33919: PUSH
33920: LD_VAR 0 6
33924: PUSH
33925: LD_VAR 0 8
33929: ARRAY
33930: PUSH
33931: LD_INT 2
33933: ARRAY
33934: LESS
33935: IFFALSE 33973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33937: LD_ADDR_VAR 0 6
33941: PUSH
33942: LD_VAR 0 6
33946: PPUSH
33947: LD_VAR 0 8
33951: PPUSH
33952: LD_VAR 0 7
33956: PUSH
33957: LD_VAR 0 9
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PPUSH
33966: CALL_OW 2
33970: ST_TO_ADDR
// break ;
33971: GO 33975
// end ; end ;
33973: GO 33912
33975: POP
33976: POP
// end ; end ;
33977: GO 33776
33979: POP
33980: POP
// if result and not asc then
33981: LD_VAR 0 6
33985: PUSH
33986: LD_VAR 0 4
33990: NOT
33991: AND
33992: IFFALSE 34067
// begin tmp := result ;
33994: LD_ADDR_VAR 0 9
33998: PUSH
33999: LD_VAR 0 6
34003: ST_TO_ADDR
// for i = tmp downto 1 do
34004: LD_ADDR_VAR 0 7
34008: PUSH
34009: DOUBLE
34010: LD_VAR 0 9
34014: INC
34015: ST_TO_ADDR
34016: LD_INT 1
34018: PUSH
34019: FOR_DOWNTO
34020: IFFALSE 34065
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34022: LD_ADDR_VAR 0 6
34026: PUSH
34027: LD_VAR 0 6
34031: PPUSH
34032: LD_VAR 0 9
34036: PUSH
34037: LD_VAR 0 7
34041: MINUS
34042: PUSH
34043: LD_INT 1
34045: PLUS
34046: PPUSH
34047: LD_VAR 0 9
34051: PUSH
34052: LD_VAR 0 7
34056: ARRAY
34057: PPUSH
34058: CALL_OW 1
34062: ST_TO_ADDR
34063: GO 34019
34065: POP
34066: POP
// end ; tmp := [ ] ;
34067: LD_ADDR_VAR 0 9
34071: PUSH
34072: EMPTY
34073: ST_TO_ADDR
// if mode then
34074: LD_VAR 0 5
34078: IFFALSE 34147
// begin for i = 1 to result do
34080: LD_ADDR_VAR 0 7
34084: PUSH
34085: DOUBLE
34086: LD_INT 1
34088: DEC
34089: ST_TO_ADDR
34090: LD_VAR 0 6
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34135
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34098: LD_ADDR_VAR 0 9
34102: PUSH
34103: LD_VAR 0 9
34107: PPUSH
34108: LD_VAR 0 7
34112: PPUSH
34113: LD_VAR 0 6
34117: PUSH
34118: LD_VAR 0 7
34122: ARRAY
34123: PUSH
34124: LD_INT 1
34126: ARRAY
34127: PPUSH
34128: CALL_OW 1
34132: ST_TO_ADDR
34133: GO 34095
34135: POP
34136: POP
// result := tmp ;
34137: LD_ADDR_VAR 0 6
34141: PUSH
34142: LD_VAR 0 9
34146: ST_TO_ADDR
// end ; end ;
34147: LD_VAR 0 6
34151: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34152: LD_INT 0
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
34159: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34160: LD_ADDR_VAR 0 5
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: EMPTY
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: ST_TO_ADDR
// if not x or not y then
34182: LD_VAR 0 2
34186: NOT
34187: PUSH
34188: LD_VAR 0 3
34192: NOT
34193: OR
34194: IFFALSE 34198
// exit ;
34196: GO 35844
// if not range then
34198: LD_VAR 0 4
34202: NOT
34203: IFFALSE 34213
// range := 10 ;
34205: LD_ADDR_VAR 0 4
34209: PUSH
34210: LD_INT 10
34212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34213: LD_ADDR_VAR 0 8
34217: PUSH
34218: LD_INT 81
34220: PUSH
34221: LD_VAR 0 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 92
34232: PUSH
34233: LD_VAR 0 2
34237: PUSH
34238: LD_VAR 0 3
34242: PUSH
34243: LD_VAR 0 4
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 3
34256: PUSH
34257: LD_INT 21
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: PPUSH
34276: CALL_OW 69
34280: ST_TO_ADDR
// if not tmp then
34281: LD_VAR 0 8
34285: NOT
34286: IFFALSE 34290
// exit ;
34288: GO 35844
// for i in tmp do
34290: LD_ADDR_VAR 0 6
34294: PUSH
34295: LD_VAR 0 8
34299: PUSH
34300: FOR_IN
34301: IFFALSE 35819
// begin points := [ 0 , 0 , 0 ] ;
34303: LD_ADDR_VAR 0 9
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: ST_TO_ADDR
// bpoints := 1 ;
34322: LD_ADDR_VAR 0 10
34326: PUSH
34327: LD_INT 1
34329: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34330: LD_VAR 0 6
34334: PPUSH
34335: CALL_OW 247
34339: PUSH
34340: LD_INT 1
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34348
34346: GO 34926
34348: POP
// begin if GetClass ( i ) = 1 then
34349: LD_VAR 0 6
34353: PPUSH
34354: CALL_OW 257
34358: PUSH
34359: LD_INT 1
34361: EQUAL
34362: IFFALSE 34383
// points := [ 10 , 5 , 3 ] ;
34364: LD_ADDR_VAR 0 9
34368: PUSH
34369: LD_INT 10
34371: PUSH
34372: LD_INT 5
34374: PUSH
34375: LD_INT 3
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34383: LD_VAR 0 6
34387: PPUSH
34388: CALL_OW 257
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: LD_INT 3
34398: PUSH
34399: LD_INT 4
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: IN
34407: IFFALSE 34428
// points := [ 3 , 2 , 1 ] ;
34409: LD_ADDR_VAR 0 9
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34428: LD_VAR 0 6
34432: PPUSH
34433: CALL_OW 257
34437: PUSH
34438: LD_INT 5
34440: EQUAL
34441: IFFALSE 34462
// points := [ 130 , 5 , 2 ] ;
34443: LD_ADDR_VAR 0 9
34447: PUSH
34448: LD_INT 130
34450: PUSH
34451: LD_INT 5
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34462: LD_VAR 0 6
34466: PPUSH
34467: CALL_OW 257
34471: PUSH
34472: LD_INT 8
34474: EQUAL
34475: IFFALSE 34496
// points := [ 35 , 35 , 30 ] ;
34477: LD_ADDR_VAR 0 9
34481: PUSH
34482: LD_INT 35
34484: PUSH
34485: LD_INT 35
34487: PUSH
34488: LD_INT 30
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34496: LD_VAR 0 6
34500: PPUSH
34501: CALL_OW 257
34505: PUSH
34506: LD_INT 9
34508: EQUAL
34509: IFFALSE 34530
// points := [ 20 , 55 , 40 ] ;
34511: LD_ADDR_VAR 0 9
34515: PUSH
34516: LD_INT 20
34518: PUSH
34519: LD_INT 55
34521: PUSH
34522: LD_INT 40
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34530: LD_VAR 0 6
34534: PPUSH
34535: CALL_OW 257
34539: PUSH
34540: LD_INT 12
34542: PUSH
34543: LD_INT 16
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: IN
34550: IFFALSE 34571
// points := [ 5 , 3 , 2 ] ;
34552: LD_ADDR_VAR 0 9
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: LD_INT 3
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34571: LD_VAR 0 6
34575: PPUSH
34576: CALL_OW 257
34580: PUSH
34581: LD_INT 17
34583: EQUAL
34584: IFFALSE 34605
// points := [ 100 , 50 , 75 ] ;
34586: LD_ADDR_VAR 0 9
34590: PUSH
34591: LD_INT 100
34593: PUSH
34594: LD_INT 50
34596: PUSH
34597: LD_INT 75
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34605: LD_VAR 0 6
34609: PPUSH
34610: CALL_OW 257
34614: PUSH
34615: LD_INT 15
34617: EQUAL
34618: IFFALSE 34639
// points := [ 10 , 5 , 3 ] ;
34620: LD_ADDR_VAR 0 9
34624: PUSH
34625: LD_INT 10
34627: PUSH
34628: LD_INT 5
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34639: LD_VAR 0 6
34643: PPUSH
34644: CALL_OW 257
34648: PUSH
34649: LD_INT 14
34651: EQUAL
34652: IFFALSE 34673
// points := [ 10 , 0 , 0 ] ;
34654: LD_ADDR_VAR 0 9
34658: PUSH
34659: LD_INT 10
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34673: LD_VAR 0 6
34677: PPUSH
34678: CALL_OW 257
34682: PUSH
34683: LD_INT 11
34685: EQUAL
34686: IFFALSE 34707
// points := [ 30 , 10 , 5 ] ;
34688: LD_ADDR_VAR 0 9
34692: PUSH
34693: LD_INT 30
34695: PUSH
34696: LD_INT 10
34698: PUSH
34699: LD_INT 5
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34707: LD_VAR 0 1
34711: PPUSH
34712: LD_INT 5
34714: PPUSH
34715: CALL_OW 321
34719: PUSH
34720: LD_INT 2
34722: EQUAL
34723: IFFALSE 34740
// bpoints := bpoints * 1.8 ;
34725: LD_ADDR_VAR 0 10
34729: PUSH
34730: LD_VAR 0 10
34734: PUSH
34735: LD_REAL  1.80000000000000E+0000
34738: MUL
34739: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34740: LD_VAR 0 6
34744: PPUSH
34745: CALL_OW 257
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: LD_INT 3
34758: PUSH
34759: LD_INT 4
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: IN
34768: PUSH
34769: LD_VAR 0 1
34773: PPUSH
34774: LD_INT 51
34776: PPUSH
34777: CALL_OW 321
34781: PUSH
34782: LD_INT 2
34784: EQUAL
34785: AND
34786: IFFALSE 34803
// bpoints := bpoints * 1.2 ;
34788: LD_ADDR_VAR 0 10
34792: PUSH
34793: LD_VAR 0 10
34797: PUSH
34798: LD_REAL  1.20000000000000E+0000
34801: MUL
34802: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34803: LD_VAR 0 6
34807: PPUSH
34808: CALL_OW 257
34812: PUSH
34813: LD_INT 5
34815: PUSH
34816: LD_INT 7
34818: PUSH
34819: LD_INT 9
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: IN
34827: PUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: LD_INT 52
34835: PPUSH
34836: CALL_OW 321
34840: PUSH
34841: LD_INT 2
34843: EQUAL
34844: AND
34845: IFFALSE 34862
// bpoints := bpoints * 1.5 ;
34847: LD_ADDR_VAR 0 10
34851: PUSH
34852: LD_VAR 0 10
34856: PUSH
34857: LD_REAL  1.50000000000000E+0000
34860: MUL
34861: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34862: LD_VAR 0 1
34866: PPUSH
34867: LD_INT 66
34869: PPUSH
34870: CALL_OW 321
34874: PUSH
34875: LD_INT 2
34877: EQUAL
34878: IFFALSE 34895
// bpoints := bpoints * 1.1 ;
34880: LD_ADDR_VAR 0 10
34884: PUSH
34885: LD_VAR 0 10
34889: PUSH
34890: LD_REAL  1.10000000000000E+0000
34893: MUL
34894: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34895: LD_ADDR_VAR 0 10
34899: PUSH
34900: LD_VAR 0 10
34904: PUSH
34905: LD_VAR 0 6
34909: PPUSH
34910: LD_INT 1
34912: PPUSH
34913: CALL_OW 259
34917: PUSH
34918: LD_REAL  1.15000000000000E+0000
34921: MUL
34922: MUL
34923: ST_TO_ADDR
// end ; unit_vehicle :
34924: GO 35748
34926: LD_INT 2
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 35736
34934: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34935: LD_VAR 0 6
34939: PPUSH
34940: CALL_OW 264
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 42
34950: PUSH
34951: LD_INT 24
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: IN
34959: IFFALSE 34980
// points := [ 25 , 5 , 3 ] ;
34961: LD_ADDR_VAR 0 9
34965: PUSH
34966: LD_INT 25
34968: PUSH
34969: LD_INT 5
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34980: LD_VAR 0 6
34984: PPUSH
34985: CALL_OW 264
34989: PUSH
34990: LD_INT 4
34992: PUSH
34993: LD_INT 43
34995: PUSH
34996: LD_INT 25
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: IN
35004: IFFALSE 35025
// points := [ 40 , 15 , 5 ] ;
35006: LD_ADDR_VAR 0 9
35010: PUSH
35011: LD_INT 40
35013: PUSH
35014: LD_INT 15
35016: PUSH
35017: LD_INT 5
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35025: LD_VAR 0 6
35029: PPUSH
35030: CALL_OW 264
35034: PUSH
35035: LD_INT 3
35037: PUSH
35038: LD_INT 23
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: IN
35045: IFFALSE 35066
// points := [ 7 , 25 , 8 ] ;
35047: LD_ADDR_VAR 0 9
35051: PUSH
35052: LD_INT 7
35054: PUSH
35055: LD_INT 25
35057: PUSH
35058: LD_INT 8
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35066: LD_VAR 0 6
35070: PPUSH
35071: CALL_OW 264
35075: PUSH
35076: LD_INT 5
35078: PUSH
35079: LD_INT 27
35081: PUSH
35082: LD_INT 44
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: IN
35090: IFFALSE 35111
// points := [ 14 , 50 , 16 ] ;
35092: LD_ADDR_VAR 0 9
35096: PUSH
35097: LD_INT 14
35099: PUSH
35100: LD_INT 50
35102: PUSH
35103: LD_INT 16
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35111: LD_VAR 0 6
35115: PPUSH
35116: CALL_OW 264
35120: PUSH
35121: LD_INT 6
35123: PUSH
35124: LD_INT 46
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: IN
35131: IFFALSE 35152
// points := [ 32 , 120 , 70 ] ;
35133: LD_ADDR_VAR 0 9
35137: PUSH
35138: LD_INT 32
35140: PUSH
35141: LD_INT 120
35143: PUSH
35144: LD_INT 70
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35152: LD_VAR 0 6
35156: PPUSH
35157: CALL_OW 264
35161: PUSH
35162: LD_INT 7
35164: PUSH
35165: LD_INT 28
35167: PUSH
35168: LD_INT 45
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: IN
35176: IFFALSE 35197
// points := [ 35 , 20 , 45 ] ;
35178: LD_ADDR_VAR 0 9
35182: PUSH
35183: LD_INT 35
35185: PUSH
35186: LD_INT 20
35188: PUSH
35189: LD_INT 45
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: LIST
35196: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35197: LD_VAR 0 6
35201: PPUSH
35202: CALL_OW 264
35206: PUSH
35207: LD_INT 47
35209: PUSH
35210: EMPTY
35211: LIST
35212: IN
35213: IFFALSE 35234
// points := [ 67 , 45 , 75 ] ;
35215: LD_ADDR_VAR 0 9
35219: PUSH
35220: LD_INT 67
35222: PUSH
35223: LD_INT 45
35225: PUSH
35226: LD_INT 75
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35234: LD_VAR 0 6
35238: PPUSH
35239: CALL_OW 264
35243: PUSH
35244: LD_INT 26
35246: PUSH
35247: EMPTY
35248: LIST
35249: IN
35250: IFFALSE 35271
// points := [ 120 , 30 , 80 ] ;
35252: LD_ADDR_VAR 0 9
35256: PUSH
35257: LD_INT 120
35259: PUSH
35260: LD_INT 30
35262: PUSH
35263: LD_INT 80
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35271: LD_VAR 0 6
35275: PPUSH
35276: CALL_OW 264
35280: PUSH
35281: LD_INT 22
35283: PUSH
35284: EMPTY
35285: LIST
35286: IN
35287: IFFALSE 35308
// points := [ 40 , 1 , 1 ] ;
35289: LD_ADDR_VAR 0 9
35293: PUSH
35294: LD_INT 40
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35308: LD_VAR 0 6
35312: PPUSH
35313: CALL_OW 264
35317: PUSH
35318: LD_INT 29
35320: PUSH
35321: EMPTY
35322: LIST
35323: IN
35324: IFFALSE 35345
// points := [ 70 , 200 , 400 ] ;
35326: LD_ADDR_VAR 0 9
35330: PUSH
35331: LD_INT 70
35333: PUSH
35334: LD_INT 200
35336: PUSH
35337: LD_INT 400
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35345: LD_VAR 0 6
35349: PPUSH
35350: CALL_OW 264
35354: PUSH
35355: LD_INT 14
35357: PUSH
35358: LD_INT 53
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: IN
35365: IFFALSE 35386
// points := [ 40 , 10 , 20 ] ;
35367: LD_ADDR_VAR 0 9
35371: PUSH
35372: LD_INT 40
35374: PUSH
35375: LD_INT 10
35377: PUSH
35378: LD_INT 20
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35386: LD_VAR 0 6
35390: PPUSH
35391: CALL_OW 264
35395: PUSH
35396: LD_INT 9
35398: PUSH
35399: EMPTY
35400: LIST
35401: IN
35402: IFFALSE 35423
// points := [ 5 , 70 , 20 ] ;
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_INT 5
35411: PUSH
35412: LD_INT 70
35414: PUSH
35415: LD_INT 20
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35423: LD_VAR 0 6
35427: PPUSH
35428: CALL_OW 264
35432: PUSH
35433: LD_INT 10
35435: PUSH
35436: EMPTY
35437: LIST
35438: IN
35439: IFFALSE 35460
// points := [ 35 , 110 , 70 ] ;
35441: LD_ADDR_VAR 0 9
35445: PUSH
35446: LD_INT 35
35448: PUSH
35449: LD_INT 110
35451: PUSH
35452: LD_INT 70
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35460: LD_VAR 0 6
35464: PPUSH
35465: CALL_OW 265
35469: PUSH
35470: LD_INT 25
35472: EQUAL
35473: IFFALSE 35494
// points := [ 80 , 65 , 100 ] ;
35475: LD_ADDR_VAR 0 9
35479: PUSH
35480: LD_INT 80
35482: PUSH
35483: LD_INT 65
35485: PUSH
35486: LD_INT 100
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35494: LD_VAR 0 6
35498: PPUSH
35499: CALL_OW 263
35503: PUSH
35504: LD_INT 1
35506: EQUAL
35507: IFFALSE 35542
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35509: LD_ADDR_VAR 0 10
35513: PUSH
35514: LD_VAR 0 10
35518: PUSH
35519: LD_VAR 0 6
35523: PPUSH
35524: CALL_OW 311
35528: PPUSH
35529: LD_INT 3
35531: PPUSH
35532: CALL_OW 259
35536: PUSH
35537: LD_INT 4
35539: MUL
35540: MUL
35541: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35542: LD_VAR 0 6
35546: PPUSH
35547: CALL_OW 263
35551: PUSH
35552: LD_INT 2
35554: EQUAL
35555: IFFALSE 35606
// begin j := IsControledBy ( i ) ;
35557: LD_ADDR_VAR 0 7
35561: PUSH
35562: LD_VAR 0 6
35566: PPUSH
35567: CALL_OW 312
35571: ST_TO_ADDR
// if j then
35572: LD_VAR 0 7
35576: IFFALSE 35606
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35578: LD_ADDR_VAR 0 10
35582: PUSH
35583: LD_VAR 0 10
35587: PUSH
35588: LD_VAR 0 7
35592: PPUSH
35593: LD_INT 3
35595: PPUSH
35596: CALL_OW 259
35600: PUSH
35601: LD_INT 3
35603: MUL
35604: MUL
35605: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35606: LD_VAR 0 6
35610: PPUSH
35611: CALL_OW 264
35615: PUSH
35616: LD_INT 5
35618: PUSH
35619: LD_INT 6
35621: PUSH
35622: LD_INT 46
35624: PUSH
35625: LD_INT 44
35627: PUSH
35628: LD_INT 47
35630: PUSH
35631: LD_INT 45
35633: PUSH
35634: LD_INT 28
35636: PUSH
35637: LD_INT 7
35639: PUSH
35640: LD_INT 27
35642: PUSH
35643: LD_INT 29
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: IN
35658: PUSH
35659: LD_VAR 0 1
35663: PPUSH
35664: LD_INT 52
35666: PPUSH
35667: CALL_OW 321
35671: PUSH
35672: LD_INT 2
35674: EQUAL
35675: AND
35676: IFFALSE 35693
// bpoints := bpoints * 1.2 ;
35678: LD_ADDR_VAR 0 10
35682: PUSH
35683: LD_VAR 0 10
35687: PUSH
35688: LD_REAL  1.20000000000000E+0000
35691: MUL
35692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35693: LD_VAR 0 6
35697: PPUSH
35698: CALL_OW 264
35702: PUSH
35703: LD_INT 6
35705: PUSH
35706: LD_INT 46
35708: PUSH
35709: LD_INT 47
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: IN
35717: IFFALSE 35734
// bpoints := bpoints * 1.2 ;
35719: LD_ADDR_VAR 0 10
35723: PUSH
35724: LD_VAR 0 10
35728: PUSH
35729: LD_REAL  1.20000000000000E+0000
35732: MUL
35733: ST_TO_ADDR
// end ; unit_building :
35734: GO 35748
35736: LD_INT 3
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35744
35742: GO 35747
35744: POP
// ; end ;
35745: GO 35748
35747: POP
// for j = 1 to 3 do
35748: LD_ADDR_VAR 0 7
35752: PUSH
35753: DOUBLE
35754: LD_INT 1
35756: DEC
35757: ST_TO_ADDR
35758: LD_INT 3
35760: PUSH
35761: FOR_TO
35762: IFFALSE 35815
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35764: LD_ADDR_VAR 0 5
35768: PUSH
35769: LD_VAR 0 5
35773: PPUSH
35774: LD_VAR 0 7
35778: PPUSH
35779: LD_VAR 0 5
35783: PUSH
35784: LD_VAR 0 7
35788: ARRAY
35789: PUSH
35790: LD_VAR 0 9
35794: PUSH
35795: LD_VAR 0 7
35799: ARRAY
35800: PUSH
35801: LD_VAR 0 10
35805: MUL
35806: PLUS
35807: PPUSH
35808: CALL_OW 1
35812: ST_TO_ADDR
35813: GO 35761
35815: POP
35816: POP
// end ;
35817: GO 34300
35819: POP
35820: POP
// result := Replace ( result , 4 , tmp ) ;
35821: LD_ADDR_VAR 0 5
35825: PUSH
35826: LD_VAR 0 5
35830: PPUSH
35831: LD_INT 4
35833: PPUSH
35834: LD_VAR 0 8
35838: PPUSH
35839: CALL_OW 1
35843: ST_TO_ADDR
// end ;
35844: LD_VAR 0 5
35848: RET
// export function DangerAtRange ( unit , range ) ; begin
35849: LD_INT 0
35851: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35852: LD_ADDR_VAR 0 3
35856: PUSH
35857: LD_VAR 0 1
35861: PPUSH
35862: CALL_OW 255
35866: PPUSH
35867: LD_VAR 0 1
35871: PPUSH
35872: CALL_OW 250
35876: PPUSH
35877: LD_VAR 0 1
35881: PPUSH
35882: CALL_OW 251
35886: PPUSH
35887: LD_VAR 0 2
35891: PPUSH
35892: CALL 34152 0 4
35896: ST_TO_ADDR
// end ;
35897: LD_VAR 0 3
35901: RET
// export function DangerInArea ( side , area ) ; begin
35902: LD_INT 0
35904: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35905: LD_ADDR_VAR 0 3
35909: PUSH
35910: LD_VAR 0 2
35914: PPUSH
35915: LD_INT 81
35917: PUSH
35918: LD_VAR 0 1
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL_OW 70
35931: ST_TO_ADDR
// end ;
35932: LD_VAR 0 3
35936: RET
// export function IsExtension ( b ) ; begin
35937: LD_INT 0
35939: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35940: LD_ADDR_VAR 0 2
35944: PUSH
35945: LD_VAR 0 1
35949: PUSH
35950: LD_INT 23
35952: PUSH
35953: LD_INT 20
35955: PUSH
35956: LD_INT 22
35958: PUSH
35959: LD_INT 17
35961: PUSH
35962: LD_INT 24
35964: PUSH
35965: LD_INT 21
35967: PUSH
35968: LD_INT 19
35970: PUSH
35971: LD_INT 16
35973: PUSH
35974: LD_INT 25
35976: PUSH
35977: LD_INT 18
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: IN
35992: ST_TO_ADDR
// end ;
35993: LD_VAR 0 2
35997: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
35998: LD_INT 0
36000: PPUSH
36001: PPUSH
36002: PPUSH
// result := [ ] ;
36003: LD_ADDR_VAR 0 3
36007: PUSH
36008: EMPTY
36009: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36010: LD_ADDR_VAR 0 4
36014: PUSH
36015: LD_VAR 0 2
36019: PPUSH
36020: LD_INT 21
36022: PUSH
36023: LD_INT 3
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PPUSH
36030: CALL_OW 70
36034: ST_TO_ADDR
// if not tmp then
36035: LD_VAR 0 4
36039: NOT
36040: IFFALSE 36044
// exit ;
36042: GO 36102
// for i in tmp do
36044: LD_ADDR_VAR 0 5
36048: PUSH
36049: LD_VAR 0 4
36053: PUSH
36054: FOR_IN
36055: IFFALSE 36090
// if GetBase ( i ) <> base then
36057: LD_VAR 0 5
36061: PPUSH
36062: CALL_OW 274
36066: PUSH
36067: LD_VAR 0 1
36071: NONEQUAL
36072: IFFALSE 36088
// ComLinkToBase ( base , i ) ;
36074: LD_VAR 0 1
36078: PPUSH
36079: LD_VAR 0 5
36083: PPUSH
36084: CALL_OW 169
36088: GO 36054
36090: POP
36091: POP
// result := tmp ;
36092: LD_ADDR_VAR 0 3
36096: PUSH
36097: LD_VAR 0 4
36101: ST_TO_ADDR
// end ;
36102: LD_VAR 0 3
36106: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36107: LD_INT 0
36109: PPUSH
36110: PPUSH
// if BuildingStatus ( b ) = bs_build then
36111: LD_VAR 0 2
36115: PPUSH
36116: CALL_OW 461
36120: PUSH
36121: LD_INT 1
36123: EQUAL
36124: IFFALSE 36184
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36126: LD_VAR 0 1
36130: PPUSH
36131: LD_STRING h
36133: PUSH
36134: LD_VAR 0 2
36138: PPUSH
36139: CALL_OW 250
36143: PUSH
36144: LD_VAR 0 2
36148: PPUSH
36149: CALL_OW 251
36153: PUSH
36154: LD_VAR 0 2
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: PUSH
36177: EMPTY
36178: LIST
36179: PPUSH
36180: CALL_OW 446
// end ;
36184: LD_VAR 0 3
36188: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36197: LD_VAR 0 1
36201: NOT
36202: PUSH
36203: LD_VAR 0 1
36207: PPUSH
36208: CALL_OW 263
36212: PUSH
36213: LD_INT 2
36215: EQUAL
36216: NOT
36217: OR
36218: IFFALSE 36222
// exit ;
36220: GO 36538
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36222: LD_ADDR_VAR 0 6
36226: PUSH
36227: LD_INT 22
36229: PUSH
36230: LD_VAR 0 1
36234: PPUSH
36235: CALL_OW 255
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 2
36246: PUSH
36247: LD_INT 30
36249: PUSH
36250: LD_INT 36
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 34
36259: PUSH
36260: LD_INT 31
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PPUSH
36276: CALL_OW 69
36280: ST_TO_ADDR
// if not tmp then
36281: LD_VAR 0 6
36285: NOT
36286: IFFALSE 36290
// exit ;
36288: GO 36538
// result := [ ] ;
36290: LD_ADDR_VAR 0 2
36294: PUSH
36295: EMPTY
36296: ST_TO_ADDR
// for i in tmp do
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_VAR 0 6
36306: PUSH
36307: FOR_IN
36308: IFFALSE 36379
// begin t := UnitsInside ( i ) ;
36310: LD_ADDR_VAR 0 4
36314: PUSH
36315: LD_VAR 0 3
36319: PPUSH
36320: CALL_OW 313
36324: ST_TO_ADDR
// if t then
36325: LD_VAR 0 4
36329: IFFALSE 36377
// for j in t do
36331: LD_ADDR_VAR 0 7
36335: PUSH
36336: LD_VAR 0 4
36340: PUSH
36341: FOR_IN
36342: IFFALSE 36375
// result := Insert ( result , result + 1 , j ) ;
36344: LD_ADDR_VAR 0 2
36348: PUSH
36349: LD_VAR 0 2
36353: PPUSH
36354: LD_VAR 0 2
36358: PUSH
36359: LD_INT 1
36361: PLUS
36362: PPUSH
36363: LD_VAR 0 7
36367: PPUSH
36368: CALL_OW 2
36372: ST_TO_ADDR
36373: GO 36341
36375: POP
36376: POP
// end ;
36377: GO 36307
36379: POP
36380: POP
// if not result then
36381: LD_VAR 0 2
36385: NOT
36386: IFFALSE 36390
// exit ;
36388: GO 36538
// mech := result [ 1 ] ;
36390: LD_ADDR_VAR 0 5
36394: PUSH
36395: LD_VAR 0 2
36399: PUSH
36400: LD_INT 1
36402: ARRAY
36403: ST_TO_ADDR
// if result > 1 then
36404: LD_VAR 0 2
36408: PUSH
36409: LD_INT 1
36411: GREATER
36412: IFFALSE 36524
// for i = 2 to result do
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: DOUBLE
36420: LD_INT 2
36422: DEC
36423: ST_TO_ADDR
36424: LD_VAR 0 2
36428: PUSH
36429: FOR_TO
36430: IFFALSE 36522
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36432: LD_ADDR_VAR 0 4
36436: PUSH
36437: LD_VAR 0 2
36441: PUSH
36442: LD_VAR 0 3
36446: ARRAY
36447: PPUSH
36448: LD_INT 3
36450: PPUSH
36451: CALL_OW 259
36455: PUSH
36456: LD_VAR 0 2
36460: PUSH
36461: LD_VAR 0 3
36465: ARRAY
36466: PPUSH
36467: CALL_OW 432
36471: MINUS
36472: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36473: LD_VAR 0 4
36477: PUSH
36478: LD_VAR 0 5
36482: PPUSH
36483: LD_INT 3
36485: PPUSH
36486: CALL_OW 259
36490: PUSH
36491: LD_VAR 0 5
36495: PPUSH
36496: CALL_OW 432
36500: MINUS
36501: GREATEREQUAL
36502: IFFALSE 36520
// mech := result [ i ] ;
36504: LD_ADDR_VAR 0 5
36508: PUSH
36509: LD_VAR 0 2
36513: PUSH
36514: LD_VAR 0 3
36518: ARRAY
36519: ST_TO_ADDR
// end ;
36520: GO 36429
36522: POP
36523: POP
// ComLinkTo ( vehicle , mech ) ;
36524: LD_VAR 0 1
36528: PPUSH
36529: LD_VAR 0 5
36533: PPUSH
36534: CALL_OW 135
// end ;
36538: LD_VAR 0 2
36542: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36543: LD_INT 0
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
// result := [ ] ;
36558: LD_ADDR_VAR 0 7
36562: PUSH
36563: EMPTY
36564: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36565: LD_VAR 0 1
36569: PPUSH
36570: CALL_OW 266
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: IN
36585: NOT
36586: IFFALSE 36590
// exit ;
36588: GO 38221
// if name then
36590: LD_VAR 0 3
36594: IFFALSE 36610
// SetBName ( base_dep , name ) ;
36596: LD_VAR 0 1
36600: PPUSH
36601: LD_VAR 0 3
36605: PPUSH
36606: CALL_OW 500
// base := GetBase ( base_dep ) ;
36610: LD_ADDR_VAR 0 15
36614: PUSH
36615: LD_VAR 0 1
36619: PPUSH
36620: CALL_OW 274
36624: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36625: LD_ADDR_VAR 0 16
36629: PUSH
36630: LD_VAR 0 1
36634: PPUSH
36635: CALL_OW 255
36639: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36640: LD_ADDR_VAR 0 17
36644: PUSH
36645: LD_VAR 0 1
36649: PPUSH
36650: CALL_OW 248
36654: ST_TO_ADDR
// if sources then
36655: LD_VAR 0 5
36659: IFFALSE 36706
// for i = 1 to 3 do
36661: LD_ADDR_VAR 0 8
36665: PUSH
36666: DOUBLE
36667: LD_INT 1
36669: DEC
36670: ST_TO_ADDR
36671: LD_INT 3
36673: PUSH
36674: FOR_TO
36675: IFFALSE 36704
// AddResourceType ( base , i , sources [ i ] ) ;
36677: LD_VAR 0 15
36681: PPUSH
36682: LD_VAR 0 8
36686: PPUSH
36687: LD_VAR 0 5
36691: PUSH
36692: LD_VAR 0 8
36696: ARRAY
36697: PPUSH
36698: CALL_OW 276
36702: GO 36674
36704: POP
36705: POP
// buildings := GetBaseBuildings ( base , area ) ;
36706: LD_ADDR_VAR 0 18
36710: PUSH
36711: LD_VAR 0 15
36715: PPUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: CALL 35998 0 2
36725: ST_TO_ADDR
// InitHc ;
36726: CALL_OW 19
// InitUc ;
36730: CALL_OW 18
// uc_side := side ;
36734: LD_ADDR_OWVAR 20
36738: PUSH
36739: LD_VAR 0 16
36743: ST_TO_ADDR
// uc_nation := nation ;
36744: LD_ADDR_OWVAR 21
36748: PUSH
36749: LD_VAR 0 17
36753: ST_TO_ADDR
// if buildings then
36754: LD_VAR 0 18
36758: IFFALSE 38080
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36760: LD_ADDR_VAR 0 19
36764: PUSH
36765: LD_VAR 0 18
36769: PPUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 30
36775: PUSH
36776: LD_INT 29
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 30
36785: PUSH
36786: LD_INT 30
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: PPUSH
36798: CALL_OW 72
36802: ST_TO_ADDR
// if tmp then
36803: LD_VAR 0 19
36807: IFFALSE 36855
// for i in tmp do
36809: LD_ADDR_VAR 0 8
36813: PUSH
36814: LD_VAR 0 19
36818: PUSH
36819: FOR_IN
36820: IFFALSE 36853
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36822: LD_VAR 0 8
36826: PPUSH
36827: CALL_OW 250
36831: PPUSH
36832: LD_VAR 0 8
36836: PPUSH
36837: CALL_OW 251
36841: PPUSH
36842: LD_VAR 0 16
36846: PPUSH
36847: CALL_OW 441
36851: GO 36819
36853: POP
36854: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36855: LD_VAR 0 18
36859: PPUSH
36860: LD_INT 2
36862: PUSH
36863: LD_INT 30
36865: PUSH
36866: LD_INT 32
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 30
36875: PUSH
36876: LD_INT 33
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: PPUSH
36888: CALL_OW 72
36892: IFFALSE 36980
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36894: LD_ADDR_VAR 0 8
36898: PUSH
36899: LD_VAR 0 18
36903: PPUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 30
36909: PUSH
36910: LD_INT 32
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 30
36919: PUSH
36920: LD_INT 33
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: PPUSH
36932: CALL_OW 72
36936: PUSH
36937: FOR_IN
36938: IFFALSE 36978
// begin if not GetBWeapon ( i ) then
36940: LD_VAR 0 8
36944: PPUSH
36945: CALL_OW 269
36949: NOT
36950: IFFALSE 36976
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36952: LD_VAR 0 8
36956: PPUSH
36957: LD_VAR 0 8
36961: PPUSH
36962: LD_VAR 0 2
36966: PPUSH
36967: CALL 38226 0 2
36971: PPUSH
36972: CALL_OW 431
// end ;
36976: GO 36937
36978: POP
36979: POP
// end ; for i = 1 to personel do
36980: LD_ADDR_VAR 0 8
36984: PUSH
36985: DOUBLE
36986: LD_INT 1
36988: DEC
36989: ST_TO_ADDR
36990: LD_VAR 0 6
36994: PUSH
36995: FOR_TO
36996: IFFALSE 38060
// begin if i > 4 then
36998: LD_VAR 0 8
37002: PUSH
37003: LD_INT 4
37005: GREATER
37006: IFFALSE 37010
// break ;
37008: GO 38060
// case i of 1 :
37010: LD_VAR 0 8
37014: PUSH
37015: LD_INT 1
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37023
37021: GO 37103
37023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37024: LD_ADDR_VAR 0 12
37028: PUSH
37029: LD_VAR 0 18
37033: PPUSH
37034: LD_INT 22
37036: PUSH
37037: LD_VAR 0 16
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 58
37048: PUSH
37049: EMPTY
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: PUSH
37055: LD_INT 30
37057: PUSH
37058: LD_INT 32
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 30
37067: PUSH
37068: LD_INT 4
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 30
37077: PUSH
37078: LD_INT 5
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: PPUSH
37096: CALL_OW 72
37100: ST_TO_ADDR
37101: GO 37325
37103: LD_INT 2
37105: DOUBLE
37106: EQUAL
37107: IFTRUE 37111
37109: GO 37173
37111: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37112: LD_ADDR_VAR 0 12
37116: PUSH
37117: LD_VAR 0 18
37121: PPUSH
37122: LD_INT 22
37124: PUSH
37125: LD_VAR 0 16
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 30
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 30
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PPUSH
37166: CALL_OW 72
37170: ST_TO_ADDR
37171: GO 37325
37173: LD_INT 3
37175: DOUBLE
37176: EQUAL
37177: IFTRUE 37181
37179: GO 37243
37181: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37182: LD_ADDR_VAR 0 12
37186: PUSH
37187: LD_VAR 0 18
37191: PPUSH
37192: LD_INT 22
37194: PUSH
37195: LD_VAR 0 16
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: LD_INT 30
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 30
37219: PUSH
37220: LD_INT 3
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PPUSH
37236: CALL_OW 72
37240: ST_TO_ADDR
37241: GO 37325
37243: LD_INT 4
37245: DOUBLE
37246: EQUAL
37247: IFTRUE 37251
37249: GO 37324
37251: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37252: LD_ADDR_VAR 0 12
37256: PUSH
37257: LD_VAR 0 18
37261: PPUSH
37262: LD_INT 22
37264: PUSH
37265: LD_VAR 0 16
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 30
37279: PUSH
37280: LD_INT 6
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 30
37289: PUSH
37290: LD_INT 7
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 30
37299: PUSH
37300: LD_INT 8
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PPUSH
37317: CALL_OW 72
37321: ST_TO_ADDR
37322: GO 37325
37324: POP
// if i = 1 then
37325: LD_VAR 0 8
37329: PUSH
37330: LD_INT 1
37332: EQUAL
37333: IFFALSE 37444
// begin tmp := [ ] ;
37335: LD_ADDR_VAR 0 19
37339: PUSH
37340: EMPTY
37341: ST_TO_ADDR
// for j in f do
37342: LD_ADDR_VAR 0 9
37346: PUSH
37347: LD_VAR 0 12
37351: PUSH
37352: FOR_IN
37353: IFFALSE 37426
// if GetBType ( j ) = b_bunker then
37355: LD_VAR 0 9
37359: PPUSH
37360: CALL_OW 266
37364: PUSH
37365: LD_INT 32
37367: EQUAL
37368: IFFALSE 37395
// tmp := Insert ( tmp , 1 , j ) else
37370: LD_ADDR_VAR 0 19
37374: PUSH
37375: LD_VAR 0 19
37379: PPUSH
37380: LD_INT 1
37382: PPUSH
37383: LD_VAR 0 9
37387: PPUSH
37388: CALL_OW 2
37392: ST_TO_ADDR
37393: GO 37424
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37395: LD_ADDR_VAR 0 19
37399: PUSH
37400: LD_VAR 0 19
37404: PPUSH
37405: LD_VAR 0 19
37409: PUSH
37410: LD_INT 1
37412: PLUS
37413: PPUSH
37414: LD_VAR 0 9
37418: PPUSH
37419: CALL_OW 2
37423: ST_TO_ADDR
37424: GO 37352
37426: POP
37427: POP
// if tmp then
37428: LD_VAR 0 19
37432: IFFALSE 37444
// f := tmp ;
37434: LD_ADDR_VAR 0 12
37438: PUSH
37439: LD_VAR 0 19
37443: ST_TO_ADDR
// end ; x := personel [ i ] ;
37444: LD_ADDR_VAR 0 13
37448: PUSH
37449: LD_VAR 0 6
37453: PUSH
37454: LD_VAR 0 8
37458: ARRAY
37459: ST_TO_ADDR
// if x = - 1 then
37460: LD_VAR 0 13
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: EQUAL
37469: IFFALSE 37678
// begin for j in f do
37471: LD_ADDR_VAR 0 9
37475: PUSH
37476: LD_VAR 0 12
37480: PUSH
37481: FOR_IN
37482: IFFALSE 37674
// repeat InitHc ;
37484: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37488: LD_VAR 0 9
37492: PPUSH
37493: CALL_OW 266
37497: PUSH
37498: LD_INT 5
37500: EQUAL
37501: IFFALSE 37571
// begin if UnitsInside ( j ) < 3 then
37503: LD_VAR 0 9
37507: PPUSH
37508: CALL_OW 313
37512: PUSH
37513: LD_INT 3
37515: LESS
37516: IFFALSE 37552
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37518: LD_INT 0
37520: PPUSH
37521: LD_INT 5
37523: PUSH
37524: LD_INT 8
37526: PUSH
37527: LD_INT 9
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: PUSH
37535: LD_VAR 0 17
37539: ARRAY
37540: PPUSH
37541: LD_VAR 0 4
37545: PPUSH
37546: CALL_OW 380
37550: GO 37569
// PrepareHuman ( false , i , skill ) ;
37552: LD_INT 0
37554: PPUSH
37555: LD_VAR 0 8
37559: PPUSH
37560: LD_VAR 0 4
37564: PPUSH
37565: CALL_OW 380
// end else
37569: GO 37588
// PrepareHuman ( false , i , skill ) ;
37571: LD_INT 0
37573: PPUSH
37574: LD_VAR 0 8
37578: PPUSH
37579: LD_VAR 0 4
37583: PPUSH
37584: CALL_OW 380
// un := CreateHuman ;
37588: LD_ADDR_VAR 0 14
37592: PUSH
37593: CALL_OW 44
37597: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37598: LD_ADDR_VAR 0 7
37602: PUSH
37603: LD_VAR 0 7
37607: PPUSH
37608: LD_INT 1
37610: PPUSH
37611: LD_VAR 0 14
37615: PPUSH
37616: CALL_OW 2
37620: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37621: LD_VAR 0 14
37625: PPUSH
37626: LD_VAR 0 9
37630: PPUSH
37631: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37635: LD_VAR 0 9
37639: PPUSH
37640: CALL_OW 313
37644: PUSH
37645: LD_INT 6
37647: EQUAL
37648: PUSH
37649: LD_VAR 0 9
37653: PPUSH
37654: CALL_OW 266
37658: PUSH
37659: LD_INT 32
37661: PUSH
37662: LD_INT 31
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: IN
37669: OR
37670: IFFALSE 37484
37672: GO 37481
37674: POP
37675: POP
// end else
37676: GO 38058
// for j = 1 to x do
37678: LD_ADDR_VAR 0 9
37682: PUSH
37683: DOUBLE
37684: LD_INT 1
37686: DEC
37687: ST_TO_ADDR
37688: LD_VAR 0 13
37692: PUSH
37693: FOR_TO
37694: IFFALSE 38056
// begin InitHc ;
37696: CALL_OW 19
// if not f then
37700: LD_VAR 0 12
37704: NOT
37705: IFFALSE 37794
// begin PrepareHuman ( false , i , skill ) ;
37707: LD_INT 0
37709: PPUSH
37710: LD_VAR 0 8
37714: PPUSH
37715: LD_VAR 0 4
37719: PPUSH
37720: CALL_OW 380
// un := CreateHuman ;
37724: LD_ADDR_VAR 0 14
37728: PUSH
37729: CALL_OW 44
37733: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37734: LD_ADDR_VAR 0 7
37738: PUSH
37739: LD_VAR 0 7
37743: PPUSH
37744: LD_INT 1
37746: PPUSH
37747: LD_VAR 0 14
37751: PPUSH
37752: CALL_OW 2
37756: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37757: LD_VAR 0 14
37761: PPUSH
37762: LD_VAR 0 1
37766: PPUSH
37767: CALL_OW 250
37771: PPUSH
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 251
37781: PPUSH
37782: LD_INT 10
37784: PPUSH
37785: LD_INT 0
37787: PPUSH
37788: CALL_OW 50
// continue ;
37792: GO 37693
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37794: LD_VAR 0 12
37798: PUSH
37799: LD_INT 1
37801: ARRAY
37802: PPUSH
37803: CALL_OW 313
37807: PUSH
37808: LD_VAR 0 12
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: PPUSH
37817: CALL_OW 266
37821: PUSH
37822: LD_INT 32
37824: PUSH
37825: LD_INT 31
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: IN
37832: AND
37833: PUSH
37834: LD_VAR 0 12
37838: PUSH
37839: LD_INT 1
37841: ARRAY
37842: PPUSH
37843: CALL_OW 313
37847: PUSH
37848: LD_INT 6
37850: EQUAL
37851: OR
37852: IFFALSE 37872
// f := Delete ( f , 1 ) ;
37854: LD_ADDR_VAR 0 12
37858: PUSH
37859: LD_VAR 0 12
37863: PPUSH
37864: LD_INT 1
37866: PPUSH
37867: CALL_OW 3
37871: ST_TO_ADDR
// if not f then
37872: LD_VAR 0 12
37876: NOT
37877: IFFALSE 37895
// begin x := x + 2 ;
37879: LD_ADDR_VAR 0 13
37883: PUSH
37884: LD_VAR 0 13
37888: PUSH
37889: LD_INT 2
37891: PLUS
37892: ST_TO_ADDR
// continue ;
37893: GO 37693
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37895: LD_VAR 0 12
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PPUSH
37904: CALL_OW 266
37908: PUSH
37909: LD_INT 5
37911: EQUAL
37912: IFFALSE 37986
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37914: LD_VAR 0 12
37918: PUSH
37919: LD_INT 1
37921: ARRAY
37922: PPUSH
37923: CALL_OW 313
37927: PUSH
37928: LD_INT 3
37930: LESS
37931: IFFALSE 37967
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37933: LD_INT 0
37935: PPUSH
37936: LD_INT 5
37938: PUSH
37939: LD_INT 8
37941: PUSH
37942: LD_INT 9
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: PUSH
37950: LD_VAR 0 17
37954: ARRAY
37955: PPUSH
37956: LD_VAR 0 4
37960: PPUSH
37961: CALL_OW 380
37965: GO 37984
// PrepareHuman ( false , i , skill ) ;
37967: LD_INT 0
37969: PPUSH
37970: LD_VAR 0 8
37974: PPUSH
37975: LD_VAR 0 4
37979: PPUSH
37980: CALL_OW 380
// end else
37984: GO 38003
// PrepareHuman ( false , i , skill ) ;
37986: LD_INT 0
37988: PPUSH
37989: LD_VAR 0 8
37993: PPUSH
37994: LD_VAR 0 4
37998: PPUSH
37999: CALL_OW 380
// un := CreateHuman ;
38003: LD_ADDR_VAR 0 14
38007: PUSH
38008: CALL_OW 44
38012: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38013: LD_ADDR_VAR 0 7
38017: PUSH
38018: LD_VAR 0 7
38022: PPUSH
38023: LD_INT 1
38025: PPUSH
38026: LD_VAR 0 14
38030: PPUSH
38031: CALL_OW 2
38035: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38036: LD_VAR 0 14
38040: PPUSH
38041: LD_VAR 0 12
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PPUSH
38050: CALL_OW 52
// end ;
38054: GO 37693
38056: POP
38057: POP
// end ;
38058: GO 36995
38060: POP
38061: POP
// result := result ^ buildings ;
38062: LD_ADDR_VAR 0 7
38066: PUSH
38067: LD_VAR 0 7
38071: PUSH
38072: LD_VAR 0 18
38076: ADD
38077: ST_TO_ADDR
// end else
38078: GO 38221
// begin for i = 1 to personel do
38080: LD_ADDR_VAR 0 8
38084: PUSH
38085: DOUBLE
38086: LD_INT 1
38088: DEC
38089: ST_TO_ADDR
38090: LD_VAR 0 6
38094: PUSH
38095: FOR_TO
38096: IFFALSE 38219
// begin if i > 4 then
38098: LD_VAR 0 8
38102: PUSH
38103: LD_INT 4
38105: GREATER
38106: IFFALSE 38110
// break ;
38108: GO 38219
// x := personel [ i ] ;
38110: LD_ADDR_VAR 0 13
38114: PUSH
38115: LD_VAR 0 6
38119: PUSH
38120: LD_VAR 0 8
38124: ARRAY
38125: ST_TO_ADDR
// if x = - 1 then
38126: LD_VAR 0 13
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: EQUAL
38135: IFFALSE 38139
// continue ;
38137: GO 38095
// PrepareHuman ( false , i , skill ) ;
38139: LD_INT 0
38141: PPUSH
38142: LD_VAR 0 8
38146: PPUSH
38147: LD_VAR 0 4
38151: PPUSH
38152: CALL_OW 380
// un := CreateHuman ;
38156: LD_ADDR_VAR 0 14
38160: PUSH
38161: CALL_OW 44
38165: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38166: LD_VAR 0 14
38170: PPUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: CALL_OW 250
38180: PPUSH
38181: LD_VAR 0 1
38185: PPUSH
38186: CALL_OW 251
38190: PPUSH
38191: LD_INT 10
38193: PPUSH
38194: LD_INT 0
38196: PPUSH
38197: CALL_OW 50
// result := result ^ un ;
38201: LD_ADDR_VAR 0 7
38205: PUSH
38206: LD_VAR 0 7
38210: PUSH
38211: LD_VAR 0 14
38215: ADD
38216: ST_TO_ADDR
// end ;
38217: GO 38095
38219: POP
38220: POP
// end ; end ;
38221: LD_VAR 0 7
38225: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38226: LD_INT 0
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
// result := false ;
38244: LD_ADDR_VAR 0 3
38248: PUSH
38249: LD_INT 0
38251: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38252: LD_VAR 0 1
38256: NOT
38257: PUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 266
38267: PUSH
38268: LD_INT 32
38270: PUSH
38271: LD_INT 33
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: IN
38278: NOT
38279: OR
38280: IFFALSE 38284
// exit ;
38282: GO 39420
// nat := GetNation ( tower ) ;
38284: LD_ADDR_VAR 0 12
38288: PUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 248
38298: ST_TO_ADDR
// side := GetSide ( tower ) ;
38299: LD_ADDR_VAR 0 16
38303: PUSH
38304: LD_VAR 0 1
38308: PPUSH
38309: CALL_OW 255
38313: ST_TO_ADDR
// x := GetX ( tower ) ;
38314: LD_ADDR_VAR 0 10
38318: PUSH
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL_OW 250
38328: ST_TO_ADDR
// y := GetY ( tower ) ;
38329: LD_ADDR_VAR 0 11
38333: PUSH
38334: LD_VAR 0 1
38338: PPUSH
38339: CALL_OW 251
38343: ST_TO_ADDR
// if not x or not y then
38344: LD_VAR 0 10
38348: NOT
38349: PUSH
38350: LD_VAR 0 11
38354: NOT
38355: OR
38356: IFFALSE 38360
// exit ;
38358: GO 39420
// weapon := 0 ;
38360: LD_ADDR_VAR 0 18
38364: PUSH
38365: LD_INT 0
38367: ST_TO_ADDR
// fac_list := [ ] ;
38368: LD_ADDR_VAR 0 17
38372: PUSH
38373: EMPTY
38374: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38375: LD_ADDR_VAR 0 6
38379: PUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL_OW 274
38389: PPUSH
38390: LD_VAR 0 2
38394: PPUSH
38395: CALL 35998 0 2
38399: PPUSH
38400: LD_INT 30
38402: PUSH
38403: LD_INT 3
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PPUSH
38410: CALL_OW 72
38414: ST_TO_ADDR
// if not factories then
38415: LD_VAR 0 6
38419: NOT
38420: IFFALSE 38424
// exit ;
38422: GO 39420
// for i in factories do
38424: LD_ADDR_VAR 0 8
38428: PUSH
38429: LD_VAR 0 6
38433: PUSH
38434: FOR_IN
38435: IFFALSE 38460
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38437: LD_ADDR_VAR 0 17
38441: PUSH
38442: LD_VAR 0 17
38446: PUSH
38447: LD_VAR 0 8
38451: PPUSH
38452: CALL_OW 478
38456: UNION
38457: ST_TO_ADDR
38458: GO 38434
38460: POP
38461: POP
// if not fac_list then
38462: LD_VAR 0 17
38466: NOT
38467: IFFALSE 38471
// exit ;
38469: GO 39420
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38471: LD_ADDR_VAR 0 5
38475: PUSH
38476: LD_INT 4
38478: PUSH
38479: LD_INT 5
38481: PUSH
38482: LD_INT 9
38484: PUSH
38485: LD_INT 10
38487: PUSH
38488: LD_INT 6
38490: PUSH
38491: LD_INT 7
38493: PUSH
38494: LD_INT 11
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 27
38508: PUSH
38509: LD_INT 28
38511: PUSH
38512: LD_INT 26
38514: PUSH
38515: LD_INT 30
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 43
38526: PUSH
38527: LD_INT 44
38529: PUSH
38530: LD_INT 46
38532: PUSH
38533: LD_INT 45
38535: PUSH
38536: LD_INT 47
38538: PUSH
38539: LD_INT 49
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: LIST
38554: PUSH
38555: LD_VAR 0 12
38559: ARRAY
38560: ST_TO_ADDR
// for i in list do
38561: LD_ADDR_VAR 0 8
38565: PUSH
38566: LD_VAR 0 5
38570: PUSH
38571: FOR_IN
38572: IFFALSE 38605
// if not i in fac_list then
38574: LD_VAR 0 8
38578: PUSH
38579: LD_VAR 0 17
38583: IN
38584: NOT
38585: IFFALSE 38603
// list := list diff i ;
38587: LD_ADDR_VAR 0 5
38591: PUSH
38592: LD_VAR 0 5
38596: PUSH
38597: LD_VAR 0 8
38601: DIFF
38602: ST_TO_ADDR
38603: GO 38571
38605: POP
38606: POP
// if not list then
38607: LD_VAR 0 5
38611: NOT
38612: IFFALSE 38616
// exit ;
38614: GO 39420
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38616: LD_VAR 0 12
38620: PUSH
38621: LD_INT 3
38623: EQUAL
38624: PUSH
38625: LD_INT 49
38627: PUSH
38628: LD_VAR 0 5
38632: IN
38633: AND
38634: PUSH
38635: LD_INT 31
38637: PPUSH
38638: LD_VAR 0 16
38642: PPUSH
38643: CALL_OW 321
38647: PUSH
38648: LD_INT 2
38650: EQUAL
38651: AND
38652: IFFALSE 38712
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38654: LD_INT 22
38656: PUSH
38657: LD_VAR 0 16
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 35
38668: PUSH
38669: LD_INT 49
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 91
38678: PUSH
38679: LD_VAR 0 1
38683: PUSH
38684: LD_INT 10
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PPUSH
38697: CALL_OW 69
38701: NOT
38702: IFFALSE 38712
// weapon := ru_time_lapser ;
38704: LD_ADDR_VAR 0 18
38708: PUSH
38709: LD_INT 49
38711: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38712: LD_VAR 0 12
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: IN
38727: PUSH
38728: LD_INT 11
38730: PUSH
38731: LD_VAR 0 5
38735: IN
38736: PUSH
38737: LD_INT 30
38739: PUSH
38740: LD_VAR 0 5
38744: IN
38745: OR
38746: AND
38747: PUSH
38748: LD_INT 6
38750: PPUSH
38751: LD_VAR 0 16
38755: PPUSH
38756: CALL_OW 321
38760: PUSH
38761: LD_INT 2
38763: EQUAL
38764: AND
38765: IFFALSE 38930
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38767: LD_INT 22
38769: PUSH
38770: LD_VAR 0 16
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 35
38784: PUSH
38785: LD_INT 11
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 35
38794: PUSH
38795: LD_INT 30
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 91
38809: PUSH
38810: LD_VAR 0 1
38814: PUSH
38815: LD_INT 18
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: PPUSH
38828: CALL_OW 69
38832: NOT
38833: PUSH
38834: LD_INT 22
38836: PUSH
38837: LD_VAR 0 16
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 30
38851: PUSH
38852: LD_INT 32
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 30
38861: PUSH
38862: LD_INT 33
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 91
38876: PUSH
38877: LD_VAR 0 1
38881: PUSH
38882: LD_INT 12
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: LIST
38894: PUSH
38895: EMPTY
38896: LIST
38897: PPUSH
38898: CALL_OW 69
38902: PUSH
38903: LD_INT 2
38905: GREATER
38906: AND
38907: IFFALSE 38930
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38909: LD_ADDR_VAR 0 18
38913: PUSH
38914: LD_INT 11
38916: PUSH
38917: LD_INT 30
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_VAR 0 12
38928: ARRAY
38929: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38930: LD_VAR 0 18
38934: NOT
38935: PUSH
38936: LD_INT 40
38938: PPUSH
38939: LD_VAR 0 16
38943: PPUSH
38944: CALL_OW 321
38948: PUSH
38949: LD_INT 2
38951: EQUAL
38952: AND
38953: PUSH
38954: LD_INT 7
38956: PUSH
38957: LD_VAR 0 5
38961: IN
38962: PUSH
38963: LD_INT 28
38965: PUSH
38966: LD_VAR 0 5
38970: IN
38971: OR
38972: PUSH
38973: LD_INT 45
38975: PUSH
38976: LD_VAR 0 5
38980: IN
38981: OR
38982: AND
38983: IFFALSE 39237
// begin hex := GetHexInfo ( x , y ) ;
38985: LD_ADDR_VAR 0 4
38989: PUSH
38990: LD_VAR 0 10
38994: PPUSH
38995: LD_VAR 0 11
38999: PPUSH
39000: CALL_OW 546
39004: ST_TO_ADDR
// if hex [ 1 ] then
39005: LD_VAR 0 4
39009: PUSH
39010: LD_INT 1
39012: ARRAY
39013: IFFALSE 39017
// exit ;
39015: GO 39420
// height := hex [ 2 ] ;
39017: LD_ADDR_VAR 0 15
39021: PUSH
39022: LD_VAR 0 4
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39031: LD_ADDR_VAR 0 14
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: LD_INT 5
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: ST_TO_ADDR
// for i in tmp do
39054: LD_ADDR_VAR 0 8
39058: PUSH
39059: LD_VAR 0 14
39063: PUSH
39064: FOR_IN
39065: IFFALSE 39235
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39067: LD_ADDR_VAR 0 9
39071: PUSH
39072: LD_VAR 0 10
39076: PPUSH
39077: LD_VAR 0 8
39081: PPUSH
39082: LD_INT 5
39084: PPUSH
39085: CALL_OW 272
39089: PUSH
39090: LD_VAR 0 11
39094: PPUSH
39095: LD_VAR 0 8
39099: PPUSH
39100: LD_INT 5
39102: PPUSH
39103: CALL_OW 273
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39112: LD_VAR 0 9
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: PPUSH
39121: LD_VAR 0 9
39125: PUSH
39126: LD_INT 2
39128: ARRAY
39129: PPUSH
39130: CALL_OW 488
39134: IFFALSE 39233
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39136: LD_ADDR_VAR 0 4
39140: PUSH
39141: LD_VAR 0 9
39145: PUSH
39146: LD_INT 1
39148: ARRAY
39149: PPUSH
39150: LD_VAR 0 9
39154: PUSH
39155: LD_INT 2
39157: ARRAY
39158: PPUSH
39159: CALL_OW 546
39163: ST_TO_ADDR
// if hex [ 1 ] then
39164: LD_VAR 0 4
39168: PUSH
39169: LD_INT 1
39171: ARRAY
39172: IFFALSE 39176
// continue ;
39174: GO 39064
// h := hex [ 2 ] ;
39176: LD_ADDR_VAR 0 13
39180: PUSH
39181: LD_VAR 0 4
39185: PUSH
39186: LD_INT 2
39188: ARRAY
39189: ST_TO_ADDR
// if h + 7 < height then
39190: LD_VAR 0 13
39194: PUSH
39195: LD_INT 7
39197: PLUS
39198: PUSH
39199: LD_VAR 0 15
39203: LESS
39204: IFFALSE 39233
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39206: LD_ADDR_VAR 0 18
39210: PUSH
39211: LD_INT 7
39213: PUSH
39214: LD_INT 28
39216: PUSH
39217: LD_INT 45
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: PUSH
39225: LD_VAR 0 12
39229: ARRAY
39230: ST_TO_ADDR
// break ;
39231: GO 39235
// end ; end ; end ;
39233: GO 39064
39235: POP
39236: POP
// end ; if not weapon then
39237: LD_VAR 0 18
39241: NOT
39242: IFFALSE 39302
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39244: LD_ADDR_VAR 0 5
39248: PUSH
39249: LD_VAR 0 5
39253: PUSH
39254: LD_INT 11
39256: PUSH
39257: LD_INT 30
39259: PUSH
39260: LD_INT 49
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: DIFF
39268: ST_TO_ADDR
// if not list then
39269: LD_VAR 0 5
39273: NOT
39274: IFFALSE 39278
// exit ;
39276: GO 39420
// weapon := list [ rand ( 1 , list ) ] ;
39278: LD_ADDR_VAR 0 18
39282: PUSH
39283: LD_VAR 0 5
39287: PUSH
39288: LD_INT 1
39290: PPUSH
39291: LD_VAR 0 5
39295: PPUSH
39296: CALL_OW 12
39300: ARRAY
39301: ST_TO_ADDR
// end ; if weapon then
39302: LD_VAR 0 18
39306: IFFALSE 39420
// begin tmp := CostOfWeapon ( weapon ) ;
39308: LD_ADDR_VAR 0 14
39312: PUSH
39313: LD_VAR 0 18
39317: PPUSH
39318: CALL_OW 451
39322: ST_TO_ADDR
// j := GetBase ( tower ) ;
39323: LD_ADDR_VAR 0 9
39327: PUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: CALL_OW 274
39337: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39338: LD_VAR 0 9
39342: PPUSH
39343: LD_INT 1
39345: PPUSH
39346: CALL_OW 275
39350: PUSH
39351: LD_VAR 0 14
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: GREATEREQUAL
39360: PUSH
39361: LD_VAR 0 9
39365: PPUSH
39366: LD_INT 2
39368: PPUSH
39369: CALL_OW 275
39373: PUSH
39374: LD_VAR 0 14
39378: PUSH
39379: LD_INT 2
39381: ARRAY
39382: GREATEREQUAL
39383: AND
39384: PUSH
39385: LD_VAR 0 9
39389: PPUSH
39390: LD_INT 3
39392: PPUSH
39393: CALL_OW 275
39397: PUSH
39398: LD_VAR 0 14
39402: PUSH
39403: LD_INT 3
39405: ARRAY
39406: GREATEREQUAL
39407: AND
39408: IFFALSE 39420
// result := weapon ;
39410: LD_ADDR_VAR 0 3
39414: PUSH
39415: LD_VAR 0 18
39419: ST_TO_ADDR
// end ; end ;
39420: LD_VAR 0 3
39424: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39425: LD_INT 0
39427: PPUSH
39428: PPUSH
// result := true ;
39429: LD_ADDR_VAR 0 3
39433: PUSH
39434: LD_INT 1
39436: ST_TO_ADDR
// if array1 = array2 then
39437: LD_VAR 0 1
39441: PUSH
39442: LD_VAR 0 2
39446: EQUAL
39447: IFFALSE 39507
// begin for i = 1 to array1 do
39449: LD_ADDR_VAR 0 4
39453: PUSH
39454: DOUBLE
39455: LD_INT 1
39457: DEC
39458: ST_TO_ADDR
39459: LD_VAR 0 1
39463: PUSH
39464: FOR_TO
39465: IFFALSE 39503
// if array1 [ i ] <> array2 [ i ] then
39467: LD_VAR 0 1
39471: PUSH
39472: LD_VAR 0 4
39476: ARRAY
39477: PUSH
39478: LD_VAR 0 2
39482: PUSH
39483: LD_VAR 0 4
39487: ARRAY
39488: NONEQUAL
39489: IFFALSE 39501
// begin result := false ;
39491: LD_ADDR_VAR 0 3
39495: PUSH
39496: LD_INT 0
39498: ST_TO_ADDR
// break ;
39499: GO 39503
// end ;
39501: GO 39464
39503: POP
39504: POP
// end else
39505: GO 39515
// result := false ;
39507: LD_ADDR_VAR 0 3
39511: PUSH
39512: LD_INT 0
39514: ST_TO_ADDR
// end ;
39515: LD_VAR 0 3
39519: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39520: LD_INT 0
39522: PPUSH
39523: PPUSH
39524: PPUSH
// pom := GetBase ( fac ) ;
39525: LD_ADDR_VAR 0 5
39529: PUSH
39530: LD_VAR 0 1
39534: PPUSH
39535: CALL_OW 274
39539: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39540: LD_ADDR_VAR 0 4
39544: PUSH
39545: LD_VAR 0 2
39549: PUSH
39550: LD_INT 1
39552: ARRAY
39553: PPUSH
39554: LD_VAR 0 2
39558: PUSH
39559: LD_INT 2
39561: ARRAY
39562: PPUSH
39563: LD_VAR 0 2
39567: PUSH
39568: LD_INT 3
39570: ARRAY
39571: PPUSH
39572: LD_VAR 0 2
39576: PUSH
39577: LD_INT 4
39579: ARRAY
39580: PPUSH
39581: CALL_OW 449
39585: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39586: LD_ADDR_VAR 0 3
39590: PUSH
39591: LD_VAR 0 5
39595: PPUSH
39596: LD_INT 1
39598: PPUSH
39599: CALL_OW 275
39603: PUSH
39604: LD_VAR 0 4
39608: PUSH
39609: LD_INT 1
39611: ARRAY
39612: GREATEREQUAL
39613: PUSH
39614: LD_VAR 0 5
39618: PPUSH
39619: LD_INT 2
39621: PPUSH
39622: CALL_OW 275
39626: PUSH
39627: LD_VAR 0 4
39631: PUSH
39632: LD_INT 2
39634: ARRAY
39635: GREATEREQUAL
39636: AND
39637: PUSH
39638: LD_VAR 0 5
39642: PPUSH
39643: LD_INT 3
39645: PPUSH
39646: CALL_OW 275
39650: PUSH
39651: LD_VAR 0 4
39655: PUSH
39656: LD_INT 3
39658: ARRAY
39659: GREATEREQUAL
39660: AND
39661: ST_TO_ADDR
// end ;
39662: LD_VAR 0 3
39666: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39667: LD_INT 0
39669: PPUSH
39670: PPUSH
39671: PPUSH
39672: PPUSH
// pom := GetBase ( building ) ;
39673: LD_ADDR_VAR 0 3
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 274
39687: ST_TO_ADDR
// if not pom then
39688: LD_VAR 0 3
39692: NOT
39693: IFFALSE 39697
// exit ;
39695: GO 39867
// btype := GetBType ( building ) ;
39697: LD_ADDR_VAR 0 5
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 266
39711: ST_TO_ADDR
// if btype = b_armoury then
39712: LD_VAR 0 5
39716: PUSH
39717: LD_INT 4
39719: EQUAL
39720: IFFALSE 39730
// btype := b_barracks ;
39722: LD_ADDR_VAR 0 5
39726: PUSH
39727: LD_INT 5
39729: ST_TO_ADDR
// if btype = b_depot then
39730: LD_VAR 0 5
39734: PUSH
39735: LD_INT 0
39737: EQUAL
39738: IFFALSE 39748
// btype := b_warehouse ;
39740: LD_ADDR_VAR 0 5
39744: PUSH
39745: LD_INT 1
39747: ST_TO_ADDR
// if btype = b_workshop then
39748: LD_VAR 0 5
39752: PUSH
39753: LD_INT 2
39755: EQUAL
39756: IFFALSE 39766
// btype := b_factory ;
39758: LD_ADDR_VAR 0 5
39762: PUSH
39763: LD_INT 3
39765: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39766: LD_ADDR_VAR 0 4
39770: PUSH
39771: LD_VAR 0 5
39775: PPUSH
39776: LD_VAR 0 1
39780: PPUSH
39781: CALL_OW 248
39785: PPUSH
39786: CALL_OW 450
39790: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39791: LD_ADDR_VAR 0 2
39795: PUSH
39796: LD_VAR 0 3
39800: PPUSH
39801: LD_INT 1
39803: PPUSH
39804: CALL_OW 275
39808: PUSH
39809: LD_VAR 0 4
39813: PUSH
39814: LD_INT 1
39816: ARRAY
39817: GREATEREQUAL
39818: PUSH
39819: LD_VAR 0 3
39823: PPUSH
39824: LD_INT 2
39826: PPUSH
39827: CALL_OW 275
39831: PUSH
39832: LD_VAR 0 4
39836: PUSH
39837: LD_INT 2
39839: ARRAY
39840: GREATEREQUAL
39841: AND
39842: PUSH
39843: LD_VAR 0 3
39847: PPUSH
39848: LD_INT 3
39850: PPUSH
39851: CALL_OW 275
39855: PUSH
39856: LD_VAR 0 4
39860: PUSH
39861: LD_INT 3
39863: ARRAY
39864: GREATEREQUAL
39865: AND
39866: ST_TO_ADDR
// end ;
39867: LD_VAR 0 2
39871: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39872: LD_INT 0
39874: PPUSH
39875: PPUSH
39876: PPUSH
// pom := GetBase ( building ) ;
39877: LD_ADDR_VAR 0 4
39881: PUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 274
39891: ST_TO_ADDR
// if not pom then
39892: LD_VAR 0 4
39896: NOT
39897: IFFALSE 39901
// exit ;
39899: GO 40002
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39901: LD_ADDR_VAR 0 5
39905: PUSH
39906: LD_VAR 0 2
39910: PPUSH
39911: LD_VAR 0 1
39915: PPUSH
39916: CALL_OW 248
39920: PPUSH
39921: CALL_OW 450
39925: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39926: LD_ADDR_VAR 0 3
39930: PUSH
39931: LD_VAR 0 4
39935: PPUSH
39936: LD_INT 1
39938: PPUSH
39939: CALL_OW 275
39943: PUSH
39944: LD_VAR 0 5
39948: PUSH
39949: LD_INT 1
39951: ARRAY
39952: GREATEREQUAL
39953: PUSH
39954: LD_VAR 0 4
39958: PPUSH
39959: LD_INT 2
39961: PPUSH
39962: CALL_OW 275
39966: PUSH
39967: LD_VAR 0 5
39971: PUSH
39972: LD_INT 2
39974: ARRAY
39975: GREATEREQUAL
39976: AND
39977: PUSH
39978: LD_VAR 0 4
39982: PPUSH
39983: LD_INT 3
39985: PPUSH
39986: CALL_OW 275
39990: PUSH
39991: LD_VAR 0 5
39995: PUSH
39996: LD_INT 3
39998: ARRAY
39999: GREATEREQUAL
40000: AND
40001: ST_TO_ADDR
// end ;
40002: LD_VAR 0 3
40006: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40007: LD_INT 0
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
// result := false ;
40019: LD_ADDR_VAR 0 6
40023: PUSH
40024: LD_INT 0
40026: ST_TO_ADDR
// if not base or not btype or not x or not y then
40027: LD_VAR 0 1
40031: NOT
40032: PUSH
40033: LD_VAR 0 2
40037: NOT
40038: OR
40039: PUSH
40040: LD_VAR 0 3
40044: NOT
40045: OR
40046: PUSH
40047: LD_VAR 0 4
40051: NOT
40052: OR
40053: IFFALSE 40057
// exit ;
40055: GO 40666
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40057: LD_ADDR_VAR 0 12
40061: PUSH
40062: LD_VAR 0 2
40066: PPUSH
40067: LD_VAR 0 3
40071: PPUSH
40072: LD_VAR 0 4
40076: PPUSH
40077: LD_VAR 0 5
40081: PPUSH
40082: LD_VAR 0 1
40086: PUSH
40087: LD_INT 1
40089: ARRAY
40090: PPUSH
40091: CALL_OW 248
40095: PPUSH
40096: LD_INT 0
40098: PPUSH
40099: CALL 41503 0 6
40103: ST_TO_ADDR
// if not hexes then
40104: LD_VAR 0 12
40108: NOT
40109: IFFALSE 40113
// exit ;
40111: GO 40666
// for i = 1 to hexes do
40113: LD_ADDR_VAR 0 7
40117: PUSH
40118: DOUBLE
40119: LD_INT 1
40121: DEC
40122: ST_TO_ADDR
40123: LD_VAR 0 12
40127: PUSH
40128: FOR_TO
40129: IFFALSE 40664
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40131: LD_ADDR_VAR 0 11
40135: PUSH
40136: LD_VAR 0 12
40140: PUSH
40141: LD_VAR 0 7
40145: ARRAY
40146: PUSH
40147: LD_INT 1
40149: ARRAY
40150: PPUSH
40151: LD_VAR 0 12
40155: PUSH
40156: LD_VAR 0 7
40160: ARRAY
40161: PUSH
40162: LD_INT 2
40164: ARRAY
40165: PPUSH
40166: CALL_OW 428
40170: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40171: LD_VAR 0 12
40175: PUSH
40176: LD_VAR 0 7
40180: ARRAY
40181: PUSH
40182: LD_INT 1
40184: ARRAY
40185: PPUSH
40186: LD_VAR 0 12
40190: PUSH
40191: LD_VAR 0 7
40195: ARRAY
40196: PUSH
40197: LD_INT 2
40199: ARRAY
40200: PPUSH
40201: CALL_OW 351
40205: PUSH
40206: LD_VAR 0 12
40210: PUSH
40211: LD_VAR 0 7
40215: ARRAY
40216: PUSH
40217: LD_INT 1
40219: ARRAY
40220: PPUSH
40221: LD_VAR 0 12
40225: PUSH
40226: LD_VAR 0 7
40230: ARRAY
40231: PUSH
40232: LD_INT 2
40234: ARRAY
40235: PPUSH
40236: CALL_OW 488
40240: NOT
40241: OR
40242: PUSH
40243: LD_VAR 0 11
40247: PPUSH
40248: CALL_OW 247
40252: PUSH
40253: LD_INT 3
40255: EQUAL
40256: OR
40257: IFFALSE 40263
// exit ;
40259: POP
40260: POP
40261: GO 40666
// if not tmp or not tmp in base then
40263: LD_VAR 0 11
40267: NOT
40268: PUSH
40269: LD_VAR 0 11
40273: PUSH
40274: LD_VAR 0 1
40278: IN
40279: NOT
40280: OR
40281: IFFALSE 40285
// continue ;
40283: GO 40128
// result := true ;
40285: LD_ADDR_VAR 0 6
40289: PUSH
40290: LD_INT 1
40292: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40293: LD_ADDR_VAR 0 15
40297: PUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_INT 22
40305: PUSH
40306: LD_VAR 0 11
40310: PPUSH
40311: CALL_OW 255
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 30
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 30
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PPUSH
40352: CALL_OW 72
40356: ST_TO_ADDR
// if dep then
40357: LD_VAR 0 15
40361: IFFALSE 40497
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40363: LD_ADDR_VAR 0 14
40367: PUSH
40368: LD_VAR 0 15
40372: PUSH
40373: LD_INT 1
40375: ARRAY
40376: PPUSH
40377: CALL_OW 250
40381: PPUSH
40382: LD_VAR 0 15
40386: PUSH
40387: LD_INT 1
40389: ARRAY
40390: PPUSH
40391: CALL_OW 254
40395: PPUSH
40396: LD_INT 5
40398: PPUSH
40399: CALL_OW 272
40403: PUSH
40404: LD_VAR 0 15
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: PPUSH
40413: CALL_OW 251
40417: PPUSH
40418: LD_VAR 0 15
40422: PUSH
40423: LD_INT 1
40425: ARRAY
40426: PPUSH
40427: CALL_OW 254
40431: PPUSH
40432: LD_INT 5
40434: PPUSH
40435: CALL_OW 273
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40444: LD_VAR 0 14
40448: PUSH
40449: LD_INT 1
40451: ARRAY
40452: PPUSH
40453: LD_VAR 0 14
40457: PUSH
40458: LD_INT 2
40460: ARRAY
40461: PPUSH
40462: CALL_OW 488
40466: IFFALSE 40497
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40468: LD_VAR 0 11
40472: PPUSH
40473: LD_VAR 0 14
40477: PUSH
40478: LD_INT 1
40480: ARRAY
40481: PPUSH
40482: LD_VAR 0 14
40486: PUSH
40487: LD_INT 2
40489: ARRAY
40490: PPUSH
40491: CALL_OW 111
// continue ;
40495: GO 40128
// end ; end ; r := GetDir ( tmp ) ;
40497: LD_ADDR_VAR 0 13
40501: PUSH
40502: LD_VAR 0 11
40506: PPUSH
40507: CALL_OW 254
40511: ST_TO_ADDR
// if r = 5 then
40512: LD_VAR 0 13
40516: PUSH
40517: LD_INT 5
40519: EQUAL
40520: IFFALSE 40530
// r := 0 ;
40522: LD_ADDR_VAR 0 13
40526: PUSH
40527: LD_INT 0
40529: ST_TO_ADDR
// for j = r to 5 do
40530: LD_ADDR_VAR 0 8
40534: PUSH
40535: DOUBLE
40536: LD_VAR 0 13
40540: DEC
40541: ST_TO_ADDR
40542: LD_INT 5
40544: PUSH
40545: FOR_TO
40546: IFFALSE 40660
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40548: LD_ADDR_VAR 0 9
40552: PUSH
40553: LD_VAR 0 11
40557: PPUSH
40558: CALL_OW 250
40562: PPUSH
40563: LD_VAR 0 8
40567: PPUSH
40568: LD_INT 2
40570: PPUSH
40571: CALL_OW 272
40575: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40576: LD_ADDR_VAR 0 10
40580: PUSH
40581: LD_VAR 0 11
40585: PPUSH
40586: CALL_OW 251
40590: PPUSH
40591: LD_VAR 0 8
40595: PPUSH
40596: LD_INT 2
40598: PPUSH
40599: CALL_OW 273
40603: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40604: LD_VAR 0 9
40608: PPUSH
40609: LD_VAR 0 10
40613: PPUSH
40614: CALL_OW 488
40618: PUSH
40619: LD_VAR 0 9
40623: PPUSH
40624: LD_VAR 0 10
40628: PPUSH
40629: CALL_OW 428
40633: NOT
40634: AND
40635: IFFALSE 40658
// begin ComMoveXY ( tmp , _x , _y ) ;
40637: LD_VAR 0 11
40641: PPUSH
40642: LD_VAR 0 9
40646: PPUSH
40647: LD_VAR 0 10
40651: PPUSH
40652: CALL_OW 111
// break ;
40656: GO 40660
// end ; end ;
40658: GO 40545
40660: POP
40661: POP
// end ;
40662: GO 40128
40664: POP
40665: POP
// end ;
40666: LD_VAR 0 6
40670: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40671: LD_INT 0
40673: PPUSH
40674: PPUSH
40675: PPUSH
40676: PPUSH
40677: PPUSH
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
// result := false ;
40683: LD_ADDR_VAR 0 6
40687: PUSH
40688: LD_INT 0
40690: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40691: LD_VAR 0 1
40695: NOT
40696: PUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: CALL_OW 266
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: IN
40717: NOT
40718: OR
40719: PUSH
40720: LD_VAR 0 2
40724: NOT
40725: OR
40726: PUSH
40727: LD_VAR 0 5
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: LD_INT 4
40746: PUSH
40747: LD_INT 5
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: IN
40758: NOT
40759: OR
40760: PUSH
40761: LD_VAR 0 3
40765: PPUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: CALL_OW 488
40775: NOT
40776: OR
40777: IFFALSE 40781
// exit ;
40779: GO 41498
// pom := GetBase ( depot ) ;
40781: LD_ADDR_VAR 0 10
40785: PUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: CALL_OW 274
40795: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40796: LD_ADDR_VAR 0 11
40800: PUSH
40801: LD_VAR 0 2
40805: PPUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: CALL_OW 248
40815: PPUSH
40816: CALL_OW 450
40820: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40821: LD_VAR 0 10
40825: PPUSH
40826: LD_INT 1
40828: PPUSH
40829: CALL_OW 275
40833: PUSH
40834: LD_VAR 0 11
40838: PUSH
40839: LD_INT 1
40841: ARRAY
40842: GREATEREQUAL
40843: PUSH
40844: LD_VAR 0 10
40848: PPUSH
40849: LD_INT 2
40851: PPUSH
40852: CALL_OW 275
40856: PUSH
40857: LD_VAR 0 11
40861: PUSH
40862: LD_INT 2
40864: ARRAY
40865: GREATEREQUAL
40866: AND
40867: PUSH
40868: LD_VAR 0 10
40872: PPUSH
40873: LD_INT 3
40875: PPUSH
40876: CALL_OW 275
40880: PUSH
40881: LD_VAR 0 11
40885: PUSH
40886: LD_INT 3
40888: ARRAY
40889: GREATEREQUAL
40890: AND
40891: NOT
40892: IFFALSE 40896
// exit ;
40894: GO 41498
// if GetBType ( depot ) = b_depot then
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL_OW 266
40905: PUSH
40906: LD_INT 0
40908: EQUAL
40909: IFFALSE 40921
// dist := 28 else
40911: LD_ADDR_VAR 0 14
40915: PUSH
40916: LD_INT 28
40918: ST_TO_ADDR
40919: GO 40929
// dist := 36 ;
40921: LD_ADDR_VAR 0 14
40925: PUSH
40926: LD_INT 36
40928: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40929: LD_VAR 0 1
40933: PPUSH
40934: LD_VAR 0 3
40938: PPUSH
40939: LD_VAR 0 4
40943: PPUSH
40944: CALL_OW 297
40948: PUSH
40949: LD_VAR 0 14
40953: GREATER
40954: IFFALSE 40958
// exit ;
40956: GO 41498
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40958: LD_ADDR_VAR 0 12
40962: PUSH
40963: LD_VAR 0 2
40967: PPUSH
40968: LD_VAR 0 3
40972: PPUSH
40973: LD_VAR 0 4
40977: PPUSH
40978: LD_VAR 0 5
40982: PPUSH
40983: LD_VAR 0 1
40987: PPUSH
40988: CALL_OW 248
40992: PPUSH
40993: LD_INT 0
40995: PPUSH
40996: CALL 41503 0 6
41000: ST_TO_ADDR
// if not hexes then
41001: LD_VAR 0 12
41005: NOT
41006: IFFALSE 41010
// exit ;
41008: GO 41498
// hex := GetHexInfo ( x , y ) ;
41010: LD_ADDR_VAR 0 15
41014: PUSH
41015: LD_VAR 0 3
41019: PPUSH
41020: LD_VAR 0 4
41024: PPUSH
41025: CALL_OW 546
41029: ST_TO_ADDR
// if hex [ 1 ] then
41030: LD_VAR 0 15
41034: PUSH
41035: LD_INT 1
41037: ARRAY
41038: IFFALSE 41042
// exit ;
41040: GO 41498
// height := hex [ 2 ] ;
41042: LD_ADDR_VAR 0 13
41046: PUSH
41047: LD_VAR 0 15
41051: PUSH
41052: LD_INT 2
41054: ARRAY
41055: ST_TO_ADDR
// for i = 1 to hexes do
41056: LD_ADDR_VAR 0 7
41060: PUSH
41061: DOUBLE
41062: LD_INT 1
41064: DEC
41065: ST_TO_ADDR
41066: LD_VAR 0 12
41070: PUSH
41071: FOR_TO
41072: IFFALSE 41402
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41074: LD_VAR 0 12
41078: PUSH
41079: LD_VAR 0 7
41083: ARRAY
41084: PUSH
41085: LD_INT 1
41087: ARRAY
41088: PPUSH
41089: LD_VAR 0 12
41093: PUSH
41094: LD_VAR 0 7
41098: ARRAY
41099: PUSH
41100: LD_INT 2
41102: ARRAY
41103: PPUSH
41104: CALL_OW 488
41108: NOT
41109: PUSH
41110: LD_VAR 0 12
41114: PUSH
41115: LD_VAR 0 7
41119: ARRAY
41120: PUSH
41121: LD_INT 1
41123: ARRAY
41124: PPUSH
41125: LD_VAR 0 12
41129: PUSH
41130: LD_VAR 0 7
41134: ARRAY
41135: PUSH
41136: LD_INT 2
41138: ARRAY
41139: PPUSH
41140: CALL_OW 428
41144: PUSH
41145: LD_INT 0
41147: GREATER
41148: OR
41149: PUSH
41150: LD_VAR 0 12
41154: PUSH
41155: LD_VAR 0 7
41159: ARRAY
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PPUSH
41165: LD_VAR 0 12
41169: PUSH
41170: LD_VAR 0 7
41174: ARRAY
41175: PUSH
41176: LD_INT 2
41178: ARRAY
41179: PPUSH
41180: CALL_OW 351
41184: OR
41185: IFFALSE 41191
// exit ;
41187: POP
41188: POP
41189: GO 41498
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41191: LD_ADDR_VAR 0 8
41195: PUSH
41196: LD_VAR 0 12
41200: PUSH
41201: LD_VAR 0 7
41205: ARRAY
41206: PUSH
41207: LD_INT 1
41209: ARRAY
41210: PPUSH
41211: LD_VAR 0 12
41215: PUSH
41216: LD_VAR 0 7
41220: ARRAY
41221: PUSH
41222: LD_INT 2
41224: ARRAY
41225: PPUSH
41226: CALL_OW 546
41230: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41231: LD_VAR 0 8
41235: PUSH
41236: LD_INT 1
41238: ARRAY
41239: PUSH
41240: LD_VAR 0 8
41244: PUSH
41245: LD_INT 2
41247: ARRAY
41248: PUSH
41249: LD_VAR 0 13
41253: PUSH
41254: LD_INT 2
41256: PLUS
41257: GREATER
41258: OR
41259: PUSH
41260: LD_VAR 0 8
41264: PUSH
41265: LD_INT 2
41267: ARRAY
41268: PUSH
41269: LD_VAR 0 13
41273: PUSH
41274: LD_INT 2
41276: MINUS
41277: LESS
41278: OR
41279: PUSH
41280: LD_VAR 0 8
41284: PUSH
41285: LD_INT 3
41287: ARRAY
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 8
41294: PUSH
41295: LD_INT 9
41297: PUSH
41298: LD_INT 10
41300: PUSH
41301: LD_INT 11
41303: PUSH
41304: LD_INT 12
41306: PUSH
41307: LD_INT 13
41309: PUSH
41310: LD_INT 16
41312: PUSH
41313: LD_INT 17
41315: PUSH
41316: LD_INT 18
41318: PUSH
41319: LD_INT 19
41321: PUSH
41322: LD_INT 20
41324: PUSH
41325: LD_INT 21
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: IN
41343: NOT
41344: OR
41345: PUSH
41346: LD_VAR 0 8
41350: PUSH
41351: LD_INT 5
41353: ARRAY
41354: NOT
41355: OR
41356: PUSH
41357: LD_VAR 0 8
41361: PUSH
41362: LD_INT 6
41364: ARRAY
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: LD_INT 7
41374: PUSH
41375: LD_INT 9
41377: PUSH
41378: LD_INT 10
41380: PUSH
41381: LD_INT 11
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: IN
41392: NOT
41393: OR
41394: IFFALSE 41400
// exit ;
41396: POP
41397: POP
41398: GO 41498
// end ;
41400: GO 41071
41402: POP
41403: POP
// side := GetSide ( depot ) ;
41404: LD_ADDR_VAR 0 9
41408: PUSH
41409: LD_VAR 0 1
41413: PPUSH
41414: CALL_OW 255
41418: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41419: LD_VAR 0 9
41423: PPUSH
41424: LD_VAR 0 3
41428: PPUSH
41429: LD_VAR 0 4
41433: PPUSH
41434: LD_INT 20
41436: PPUSH
41437: CALL 34152 0 4
41441: PUSH
41442: LD_INT 4
41444: ARRAY
41445: IFFALSE 41449
// exit ;
41447: GO 41498
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41449: LD_VAR 0 2
41453: PUSH
41454: LD_INT 29
41456: PUSH
41457: LD_INT 30
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: IN
41464: PUSH
41465: LD_VAR 0 3
41469: PPUSH
41470: LD_VAR 0 4
41474: PPUSH
41475: LD_VAR 0 9
41479: PPUSH
41480: CALL_OW 440
41484: NOT
41485: AND
41486: IFFALSE 41490
// exit ;
41488: GO 41498
// result := true ;
41490: LD_ADDR_VAR 0 6
41494: PUSH
41495: LD_INT 1
41497: ST_TO_ADDR
// end ;
41498: LD_VAR 0 6
41502: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
41546: PPUSH
41547: PPUSH
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
41552: PPUSH
41553: PPUSH
41554: PPUSH
41555: PPUSH
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
// result = [ ] ;
41563: LD_ADDR_VAR 0 7
41567: PUSH
41568: EMPTY
41569: ST_TO_ADDR
// temp_list = [ ] ;
41570: LD_ADDR_VAR 0 9
41574: PUSH
41575: EMPTY
41576: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41577: LD_VAR 0 4
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: LD_INT 4
41596: PUSH
41597: LD_INT 5
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: IN
41608: NOT
41609: PUSH
41610: LD_VAR 0 1
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: IN
41625: PUSH
41626: LD_VAR 0 5
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: IN
41645: NOT
41646: AND
41647: OR
41648: IFFALSE 41652
// exit ;
41650: GO 60043
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41652: LD_VAR 0 1
41656: PUSH
41657: LD_INT 6
41659: PUSH
41660: LD_INT 7
41662: PUSH
41663: LD_INT 8
41665: PUSH
41666: LD_INT 13
41668: PUSH
41669: LD_INT 12
41671: PUSH
41672: LD_INT 15
41674: PUSH
41675: LD_INT 11
41677: PUSH
41678: LD_INT 14
41680: PUSH
41681: LD_INT 10
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: IN
41695: IFFALSE 41705
// btype = b_lab ;
41697: LD_ADDR_VAR 0 1
41701: PUSH
41702: LD_INT 6
41704: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41705: LD_VAR 0 6
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: IN
41724: NOT
41725: PUSH
41726: LD_VAR 0 1
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: LD_INT 6
41745: PUSH
41746: LD_INT 36
41748: PUSH
41749: LD_INT 4
41751: PUSH
41752: LD_INT 5
41754: PUSH
41755: LD_INT 31
41757: PUSH
41758: LD_INT 32
41760: PUSH
41761: LD_INT 33
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: IN
41777: NOT
41778: PUSH
41779: LD_VAR 0 6
41783: PUSH
41784: LD_INT 1
41786: EQUAL
41787: AND
41788: OR
41789: PUSH
41790: LD_VAR 0 1
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: IN
41805: NOT
41806: PUSH
41807: LD_VAR 0 6
41811: PUSH
41812: LD_INT 2
41814: EQUAL
41815: AND
41816: OR
41817: IFFALSE 41827
// mode = 0 ;
41819: LD_ADDR_VAR 0 6
41823: PUSH
41824: LD_INT 0
41826: ST_TO_ADDR
// case mode of 0 :
41827: LD_VAR 0 6
41831: PUSH
41832: LD_INT 0
41834: DOUBLE
41835: EQUAL
41836: IFTRUE 41840
41838: GO 53293
41840: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41841: LD_ADDR_VAR 0 11
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 3
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 3
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42034: LD_ADDR_VAR 0 12
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 3
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42230: LD_ADDR_VAR 0 13
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: LD_INT 3
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42429: LD_ADDR_VAR 0 14
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 3
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 3
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42625: LD_ADDR_VAR 0 15
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42818: LD_ADDR_VAR 0 16
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43011: LD_ADDR_VAR 0 17
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43241: LD_ADDR_VAR 0 18
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43471: LD_ADDR_VAR 0 19
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 2
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43701: LD_ADDR_VAR 0 20
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43931: LD_ADDR_VAR 0 21
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44161: LD_ADDR_VAR 0 22
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44391: LD_ADDR_VAR 0 23
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44671: LD_ADDR_VAR 0 24
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44947: LD_ADDR_VAR 0 25
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 3
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45221: LD_ADDR_VAR 0 26
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 3
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 3
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45497: LD_ADDR_VAR 0 27
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 3
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 3
45742: NEG
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45777: LD_ADDR_VAR 0 28
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46059: LD_ADDR_VAR 0 29
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 3
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 3
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 3
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46338: LD_ADDR_VAR 0 30
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46616: LD_ADDR_VAR 0 31
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 3
46859: NEG
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46894: LD_ADDR_VAR 0 32
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47172: LD_ADDR_VAR 0 33
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: NEG
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47451: LD_ADDR_VAR 0 34
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47731: LD_ADDR_VAR 0 35
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47843: LD_ADDR_VAR 0 36
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47955: LD_ADDR_VAR 0 37
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48067: LD_ADDR_VAR 0 38
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48179: LD_ADDR_VAR 0 39
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48291: LD_ADDR_VAR 0 40
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48403: LD_ADDR_VAR 0 41
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 3
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 3
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 3
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 3
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: LD_INT 3
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48753: LD_ADDR_VAR 0 42
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 3
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 3
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 3
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49103: LD_ADDR_VAR 0 43
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 3
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 3
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49451: LD_ADDR_VAR 0 44
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 3
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 3
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49801: LD_ADDR_VAR 0 45
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 3
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: LD_INT 3
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50151: LD_ADDR_VAR 0 46
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 3
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 3
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50499: LD_ADDR_VAR 0 47
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50650: LD_ADDR_VAR 0 48
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50797: LD_ADDR_VAR 0 49
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50941: LD_ADDR_VAR 0 50
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51085: LD_ADDR_VAR 0 51
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51232: LD_ADDR_VAR 0 52
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51383: LD_ADDR_VAR 0 53
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51613: LD_ADDR_VAR 0 54
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51843: LD_ADDR_VAR 0 55
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52073: LD_ADDR_VAR 0 56
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52303: LD_ADDR_VAR 0 57
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52533: LD_ADDR_VAR 0 58
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52763: LD_ADDR_VAR 0 59
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52851: LD_ADDR_VAR 0 60
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52939: LD_ADDR_VAR 0 61
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53027: LD_ADDR_VAR 0 62
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53115: LD_ADDR_VAR 0 63
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53203: LD_ADDR_VAR 0 64
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: ST_TO_ADDR
// end ; 1 :
53291: GO 59188
53293: LD_INT 1
53295: DOUBLE
53296: EQUAL
53297: IFTRUE 53301
53299: GO 55924
53301: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53302: LD_ADDR_VAR 0 11
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53346: LD_ADDR_VAR 0 12
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: LIST
53386: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53387: LD_ADDR_VAR 0 13
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53427: LD_ADDR_VAR 0 14
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: LIST
53467: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53468: LD_ADDR_VAR 0 15
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53512: LD_ADDR_VAR 0 16
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: LIST
53557: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53558: LD_ADDR_VAR 0 17
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53602: LD_ADDR_VAR 0 18
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53643: LD_ADDR_VAR 0 19
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53683: LD_ADDR_VAR 0 20
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53724: LD_ADDR_VAR 0 21
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53768: LD_ADDR_VAR 0 22
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: LD_INT 3
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53814: LD_ADDR_VAR 0 23
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53858: LD_ADDR_VAR 0 24
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 4
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53899: LD_ADDR_VAR 0 25
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 4
53916: PUSH
53917: LD_INT 3
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: LD_INT 4
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53939: LD_ADDR_VAR 0 26
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 4
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53980: LD_ADDR_VAR 0 27
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 4
54009: NEG
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54024: LD_ADDR_VAR 0 28
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: LD_INT 3
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: LD_INT 4
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 4
54055: NEG
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54070: LD_ADDR_VAR 0 29
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 4
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 4
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 5
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 4
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 6
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 6
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 5
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54225: LD_ADDR_VAR 0 30
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 4
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 4
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 5
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 5
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 5
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 6
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 6
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54368: LD_ADDR_VAR 0 31
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: PUSH
54386: LD_INT 3
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 4
54405: PUSH
54406: LD_INT 3
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 4
54415: PUSH
54416: LD_INT 4
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: LD_INT 4
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 5
54435: PUSH
54436: LD_INT 4
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: LD_INT 5
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 4
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 6
54465: PUSH
54466: LD_INT 5
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 6
54475: PUSH
54476: LD_INT 6
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 5
54485: PUSH
54486: LD_INT 6
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54507: LD_ADDR_VAR 0 32
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 3
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 4
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 4
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 5
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 5
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 4
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 6
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 6
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 5
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54650: LD_ADDR_VAR 0 33
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 4
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 4
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 4
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 5
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 5
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 5
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 6
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 6
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54805: LD_ADDR_VAR 0 34
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 3
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 3
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 4
54860: NEG
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 4
54872: NEG
54873: PUSH
54874: LD_INT 4
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 4
54884: NEG
54885: PUSH
54886: LD_INT 5
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 5
54896: NEG
54897: PUSH
54898: LD_INT 4
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 5
54908: NEG
54909: PUSH
54910: LD_INT 5
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 5
54920: NEG
54921: PUSH
54922: LD_INT 6
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 6
54932: NEG
54933: PUSH
54934: LD_INT 5
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 6
54944: NEG
54945: PUSH
54946: LD_INT 6
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54968: LD_ADDR_VAR 0 41
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55012: LD_ADDR_VAR 0 42
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55053: LD_ADDR_VAR 0 43
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 3
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55093: LD_ADDR_VAR 0 44
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55134: LD_ADDR_VAR 0 45
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: NEG
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55178: LD_ADDR_VAR 0 46
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 3
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55224: LD_ADDR_VAR 0 47
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 3
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55257: LD_ADDR_VAR 0 48
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55288: LD_ADDR_VAR 0 49
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55317: LD_ADDR_VAR 0 50
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 3
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55346: LD_ADDR_VAR 0 51
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55377: LD_ADDR_VAR 0 52
55381: PUSH
55382: LD_INT 3
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55410: LD_ADDR_VAR 0 53
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 3
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55454: LD_ADDR_VAR 0 54
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55495: LD_ADDR_VAR 0 55
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55535: LD_ADDR_VAR 0 56
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55576: LD_ADDR_VAR 0 57
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55620: LD_ADDR_VAR 0 58
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55666: LD_ADDR_VAR 0 59
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55710: LD_ADDR_VAR 0 60
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55751: LD_ADDR_VAR 0 61
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: LIST
55790: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55791: LD_ADDR_VAR 0 62
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55832: LD_ADDR_VAR 0 63
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55876: LD_ADDR_VAR 0 64
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// end ; 2 :
55922: GO 59188
55924: LD_INT 2
55926: DOUBLE
55927: EQUAL
55928: IFTRUE 55932
55930: GO 59187
55932: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55933: LD_ADDR_VAR 0 29
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 5
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 5
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 4
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 5
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 4
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 4
56063: PUSH
56064: LD_INT 4
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: LD_INT 4
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 4
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 4
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 4
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 5
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 5
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 5
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 4
56272: NEG
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 4
56283: NEG
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 4
56318: NEG
56319: PUSH
56320: LD_INT 4
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 4
56330: NEG
56331: PUSH
56332: LD_INT 5
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: NEG
56343: PUSH
56344: LD_INT 4
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: LD_INT 3
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 4
56366: NEG
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 5
56378: NEG
56379: PUSH
56380: LD_INT 4
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 5
56390: NEG
56391: PUSH
56392: LD_INT 5
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: NEG
56403: PUSH
56404: LD_INT 5
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 5
56414: NEG
56415: PUSH
56416: LD_INT 3
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56471: LD_ADDR_VAR 0 30
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 4
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 5
56498: PUSH
56499: LD_INT 4
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 5
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 4
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 5
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 4
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 4
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 4
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 4
56661: NEG
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 4
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 3
56684: NEG
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 4
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 5
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 5
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 5
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: LD_INT 4
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 4
56823: NEG
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 4
56835: NEG
56836: PUSH
56837: LD_INT 4
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: LD_INT 4
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 4
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 5
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 4
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 4
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 5
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 5
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57018: LD_ADDR_VAR 0 31
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 4
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 4
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 5
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 5
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 4
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 5
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 4
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 4
57220: NEG
57221: PUSH
57222: LD_INT 4
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 4
57232: NEG
57233: PUSH
57234: LD_INT 5
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: LD_INT 4
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 4
57268: NEG
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 5
57280: NEG
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 5
57292: NEG
57293: PUSH
57294: LD_INT 5
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: LD_INT 5
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 5
57316: NEG
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 4
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 4
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: LD_INT 4
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 4
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 4
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 5
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 5
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 4
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 5
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57568: LD_ADDR_VAR 0 32
57572: PUSH
57573: LD_INT 4
57575: NEG
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 4
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 5
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 5
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 5
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 3
57725: NEG
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 4
57737: NEG
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 4
57749: NEG
57750: PUSH
57751: LD_INT 4
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: LD_INT 4
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 4
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: LD_INT 4
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 5
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 4
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 4
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 5
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 3
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 5
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 4
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 4
57980: PUSH
57981: LD_INT 4
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 4
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: LD_INT 4
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 5
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 4
58020: PUSH
58021: LD_INT 5
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: LD_INT 4
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 5
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: LD_INT 5
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58115: LD_ADDR_VAR 0 33
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: LD_INT 4
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 4
58134: NEG
58135: PUSH
58136: LD_INT 5
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: LD_INT 4
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: NEG
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 5
58182: NEG
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 5
58194: NEG
58195: PUSH
58196: LD_INT 5
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: LD_INT 5
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 5
58218: NEG
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 4
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 4
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 4
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 5
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 5
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 4
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: PUSH
58456: LD_INT 4
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 4
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 4
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 4
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 5
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 5
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: LD_INT 5
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58653: LD_ADDR_VAR 0 34
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 4
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 5
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 4
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 4
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 5
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 5
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 4
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 4
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 4
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 4
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 5
58875: PUSH
58876: LD_INT 4
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 5
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 4
58895: PUSH
58896: LD_INT 5
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: LD_INT 4
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 3
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 5
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: LD_INT 5
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 4
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 4
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: LD_INT 4
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 4
59038: NEG
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: NEG
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 4
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 5
59094: NEG
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 5
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 5
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: ST_TO_ADDR
// end ; end ;
59185: GO 59188
59187: POP
// case btype of b_depot , b_warehouse :
59188: LD_VAR 0 1
59192: PUSH
59193: LD_INT 0
59195: DOUBLE
59196: EQUAL
59197: IFTRUE 59207
59199: LD_INT 1
59201: DOUBLE
59202: EQUAL
59203: IFTRUE 59207
59205: GO 59408
59207: POP
// case nation of nation_american :
59208: LD_VAR 0 5
59212: PUSH
59213: LD_INT 1
59215: DOUBLE
59216: EQUAL
59217: IFTRUE 59221
59219: GO 59277
59221: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59222: LD_ADDR_VAR 0 9
59226: PUSH
59227: LD_VAR 0 11
59231: PUSH
59232: LD_VAR 0 12
59236: PUSH
59237: LD_VAR 0 13
59241: PUSH
59242: LD_VAR 0 14
59246: PUSH
59247: LD_VAR 0 15
59251: PUSH
59252: LD_VAR 0 16
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: PUSH
59265: LD_VAR 0 4
59269: PUSH
59270: LD_INT 1
59272: PLUS
59273: ARRAY
59274: ST_TO_ADDR
59275: GO 59406
59277: LD_INT 2
59279: DOUBLE
59280: EQUAL
59281: IFTRUE 59285
59283: GO 59341
59285: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59286: LD_ADDR_VAR 0 9
59290: PUSH
59291: LD_VAR 0 17
59295: PUSH
59296: LD_VAR 0 18
59300: PUSH
59301: LD_VAR 0 19
59305: PUSH
59306: LD_VAR 0 20
59310: PUSH
59311: LD_VAR 0 21
59315: PUSH
59316: LD_VAR 0 22
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: PUSH
59329: LD_VAR 0 4
59333: PUSH
59334: LD_INT 1
59336: PLUS
59337: ARRAY
59338: ST_TO_ADDR
59339: GO 59406
59341: LD_INT 3
59343: DOUBLE
59344: EQUAL
59345: IFTRUE 59349
59347: GO 59405
59349: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59350: LD_ADDR_VAR 0 9
59354: PUSH
59355: LD_VAR 0 23
59359: PUSH
59360: LD_VAR 0 24
59364: PUSH
59365: LD_VAR 0 25
59369: PUSH
59370: LD_VAR 0 26
59374: PUSH
59375: LD_VAR 0 27
59379: PUSH
59380: LD_VAR 0 28
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: PUSH
59393: LD_VAR 0 4
59397: PUSH
59398: LD_INT 1
59400: PLUS
59401: ARRAY
59402: ST_TO_ADDR
59403: GO 59406
59405: POP
59406: GO 59961
59408: LD_INT 2
59410: DOUBLE
59411: EQUAL
59412: IFTRUE 59422
59414: LD_INT 3
59416: DOUBLE
59417: EQUAL
59418: IFTRUE 59422
59420: GO 59478
59422: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59423: LD_ADDR_VAR 0 9
59427: PUSH
59428: LD_VAR 0 29
59432: PUSH
59433: LD_VAR 0 30
59437: PUSH
59438: LD_VAR 0 31
59442: PUSH
59443: LD_VAR 0 32
59447: PUSH
59448: LD_VAR 0 33
59452: PUSH
59453: LD_VAR 0 34
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: PUSH
59466: LD_VAR 0 4
59470: PUSH
59471: LD_INT 1
59473: PLUS
59474: ARRAY
59475: ST_TO_ADDR
59476: GO 59961
59478: LD_INT 16
59480: DOUBLE
59481: EQUAL
59482: IFTRUE 59540
59484: LD_INT 17
59486: DOUBLE
59487: EQUAL
59488: IFTRUE 59540
59490: LD_INT 18
59492: DOUBLE
59493: EQUAL
59494: IFTRUE 59540
59496: LD_INT 19
59498: DOUBLE
59499: EQUAL
59500: IFTRUE 59540
59502: LD_INT 22
59504: DOUBLE
59505: EQUAL
59506: IFTRUE 59540
59508: LD_INT 20
59510: DOUBLE
59511: EQUAL
59512: IFTRUE 59540
59514: LD_INT 21
59516: DOUBLE
59517: EQUAL
59518: IFTRUE 59540
59520: LD_INT 23
59522: DOUBLE
59523: EQUAL
59524: IFTRUE 59540
59526: LD_INT 24
59528: DOUBLE
59529: EQUAL
59530: IFTRUE 59540
59532: LD_INT 25
59534: DOUBLE
59535: EQUAL
59536: IFTRUE 59540
59538: GO 59596
59540: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59541: LD_ADDR_VAR 0 9
59545: PUSH
59546: LD_VAR 0 35
59550: PUSH
59551: LD_VAR 0 36
59555: PUSH
59556: LD_VAR 0 37
59560: PUSH
59561: LD_VAR 0 38
59565: PUSH
59566: LD_VAR 0 39
59570: PUSH
59571: LD_VAR 0 40
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: PUSH
59584: LD_VAR 0 4
59588: PUSH
59589: LD_INT 1
59591: PLUS
59592: ARRAY
59593: ST_TO_ADDR
59594: GO 59961
59596: LD_INT 6
59598: DOUBLE
59599: EQUAL
59600: IFTRUE 59652
59602: LD_INT 7
59604: DOUBLE
59605: EQUAL
59606: IFTRUE 59652
59608: LD_INT 8
59610: DOUBLE
59611: EQUAL
59612: IFTRUE 59652
59614: LD_INT 13
59616: DOUBLE
59617: EQUAL
59618: IFTRUE 59652
59620: LD_INT 12
59622: DOUBLE
59623: EQUAL
59624: IFTRUE 59652
59626: LD_INT 15
59628: DOUBLE
59629: EQUAL
59630: IFTRUE 59652
59632: LD_INT 11
59634: DOUBLE
59635: EQUAL
59636: IFTRUE 59652
59638: LD_INT 14
59640: DOUBLE
59641: EQUAL
59642: IFTRUE 59652
59644: LD_INT 10
59646: DOUBLE
59647: EQUAL
59648: IFTRUE 59652
59650: GO 59708
59652: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
59653: LD_ADDR_VAR 0 9
59657: PUSH
59658: LD_VAR 0 41
59662: PUSH
59663: LD_VAR 0 42
59667: PUSH
59668: LD_VAR 0 43
59672: PUSH
59673: LD_VAR 0 44
59677: PUSH
59678: LD_VAR 0 45
59682: PUSH
59683: LD_VAR 0 46
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: PUSH
59696: LD_VAR 0 4
59700: PUSH
59701: LD_INT 1
59703: PLUS
59704: ARRAY
59705: ST_TO_ADDR
59706: GO 59961
59708: LD_INT 36
59710: DOUBLE
59711: EQUAL
59712: IFTRUE 59716
59714: GO 59772
59716: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59717: LD_ADDR_VAR 0 9
59721: PUSH
59722: LD_VAR 0 47
59726: PUSH
59727: LD_VAR 0 48
59731: PUSH
59732: LD_VAR 0 49
59736: PUSH
59737: LD_VAR 0 50
59741: PUSH
59742: LD_VAR 0 51
59746: PUSH
59747: LD_VAR 0 52
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: PUSH
59760: LD_VAR 0 4
59764: PUSH
59765: LD_INT 1
59767: PLUS
59768: ARRAY
59769: ST_TO_ADDR
59770: GO 59961
59772: LD_INT 4
59774: DOUBLE
59775: EQUAL
59776: IFTRUE 59798
59778: LD_INT 5
59780: DOUBLE
59781: EQUAL
59782: IFTRUE 59798
59784: LD_INT 34
59786: DOUBLE
59787: EQUAL
59788: IFTRUE 59798
59790: LD_INT 37
59792: DOUBLE
59793: EQUAL
59794: IFTRUE 59798
59796: GO 59854
59798: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59799: LD_ADDR_VAR 0 9
59803: PUSH
59804: LD_VAR 0 53
59808: PUSH
59809: LD_VAR 0 54
59813: PUSH
59814: LD_VAR 0 55
59818: PUSH
59819: LD_VAR 0 56
59823: PUSH
59824: LD_VAR 0 57
59828: PUSH
59829: LD_VAR 0 58
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: PUSH
59842: LD_VAR 0 4
59846: PUSH
59847: LD_INT 1
59849: PLUS
59850: ARRAY
59851: ST_TO_ADDR
59852: GO 59961
59854: LD_INT 31
59856: DOUBLE
59857: EQUAL
59858: IFTRUE 59904
59860: LD_INT 32
59862: DOUBLE
59863: EQUAL
59864: IFTRUE 59904
59866: LD_INT 33
59868: DOUBLE
59869: EQUAL
59870: IFTRUE 59904
59872: LD_INT 27
59874: DOUBLE
59875: EQUAL
59876: IFTRUE 59904
59878: LD_INT 26
59880: DOUBLE
59881: EQUAL
59882: IFTRUE 59904
59884: LD_INT 28
59886: DOUBLE
59887: EQUAL
59888: IFTRUE 59904
59890: LD_INT 29
59892: DOUBLE
59893: EQUAL
59894: IFTRUE 59904
59896: LD_INT 30
59898: DOUBLE
59899: EQUAL
59900: IFTRUE 59904
59902: GO 59960
59904: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
59905: LD_ADDR_VAR 0 9
59909: PUSH
59910: LD_VAR 0 59
59914: PUSH
59915: LD_VAR 0 60
59919: PUSH
59920: LD_VAR 0 61
59924: PUSH
59925: LD_VAR 0 62
59929: PUSH
59930: LD_VAR 0 63
59934: PUSH
59935: LD_VAR 0 64
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: PUSH
59948: LD_VAR 0 4
59952: PUSH
59953: LD_INT 1
59955: PLUS
59956: ARRAY
59957: ST_TO_ADDR
59958: GO 59961
59960: POP
// temp_list2 = [ ] ;
59961: LD_ADDR_VAR 0 10
59965: PUSH
59966: EMPTY
59967: ST_TO_ADDR
// for i in temp_list do
59968: LD_ADDR_VAR 0 8
59972: PUSH
59973: LD_VAR 0 9
59977: PUSH
59978: FOR_IN
59979: IFFALSE 60031
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59981: LD_ADDR_VAR 0 10
59985: PUSH
59986: LD_VAR 0 10
59990: PUSH
59991: LD_VAR 0 8
59995: PUSH
59996: LD_INT 1
59998: ARRAY
59999: PUSH
60000: LD_VAR 0 2
60004: PLUS
60005: PUSH
60006: LD_VAR 0 8
60010: PUSH
60011: LD_INT 2
60013: ARRAY
60014: PUSH
60015: LD_VAR 0 3
60019: PLUS
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: ADD
60028: ST_TO_ADDR
60029: GO 59978
60031: POP
60032: POP
// result = temp_list2 ;
60033: LD_ADDR_VAR 0 7
60037: PUSH
60038: LD_VAR 0 10
60042: ST_TO_ADDR
// end ;
60043: LD_VAR 0 7
60047: RET
// export function EnemyInRange ( unit , dist ) ; begin
60048: LD_INT 0
60050: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60051: LD_ADDR_VAR 0 3
60055: PUSH
60056: LD_VAR 0 1
60060: PPUSH
60061: CALL_OW 255
60065: PPUSH
60066: LD_VAR 0 1
60070: PPUSH
60071: CALL_OW 250
60075: PPUSH
60076: LD_VAR 0 1
60080: PPUSH
60081: CALL_OW 251
60085: PPUSH
60086: LD_VAR 0 2
60090: PPUSH
60091: CALL 34152 0 4
60095: PUSH
60096: LD_INT 4
60098: ARRAY
60099: ST_TO_ADDR
// end ;
60100: LD_VAR 0 3
60104: RET
// export function PlayerSeeMe ( unit ) ; begin
60105: LD_INT 0
60107: PPUSH
// result := See ( your_side , unit ) ;
60108: LD_ADDR_VAR 0 2
60112: PUSH
60113: LD_OWVAR 2
60117: PPUSH
60118: LD_VAR 0 1
60122: PPUSH
60123: CALL_OW 292
60127: ST_TO_ADDR
// end ;
60128: LD_VAR 0 2
60132: RET
// export function ReverseDir ( unit ) ; begin
60133: LD_INT 0
60135: PPUSH
// if not unit then
60136: LD_VAR 0 1
60140: NOT
60141: IFFALSE 60145
// exit ;
60143: GO 60168
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60145: LD_ADDR_VAR 0 2
60149: PUSH
60150: LD_VAR 0 1
60154: PPUSH
60155: CALL_OW 254
60159: PUSH
60160: LD_INT 3
60162: PLUS
60163: PUSH
60164: LD_INT 6
60166: MOD
60167: ST_TO_ADDR
// end ;
60168: LD_VAR 0 2
60172: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60173: LD_INT 0
60175: PPUSH
60176: PPUSH
60177: PPUSH
60178: PPUSH
60179: PPUSH
// if not hexes then
60180: LD_VAR 0 2
60184: NOT
60185: IFFALSE 60189
// exit ;
60187: GO 60337
// dist := 9999 ;
60189: LD_ADDR_VAR 0 5
60193: PUSH
60194: LD_INT 9999
60196: ST_TO_ADDR
// for i = 1 to hexes do
60197: LD_ADDR_VAR 0 4
60201: PUSH
60202: DOUBLE
60203: LD_INT 1
60205: DEC
60206: ST_TO_ADDR
60207: LD_VAR 0 2
60211: PUSH
60212: FOR_TO
60213: IFFALSE 60325
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60215: LD_VAR 0 1
60219: PPUSH
60220: LD_VAR 0 2
60224: PUSH
60225: LD_VAR 0 4
60229: ARRAY
60230: PUSH
60231: LD_INT 1
60233: ARRAY
60234: PPUSH
60235: LD_VAR 0 2
60239: PUSH
60240: LD_VAR 0 4
60244: ARRAY
60245: PUSH
60246: LD_INT 2
60248: ARRAY
60249: PPUSH
60250: CALL_OW 297
60254: PUSH
60255: LD_VAR 0 5
60259: LESS
60260: IFFALSE 60323
// begin hex := hexes [ i ] ;
60262: LD_ADDR_VAR 0 7
60266: PUSH
60267: LD_VAR 0 2
60271: PUSH
60272: LD_VAR 0 4
60276: ARRAY
60277: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60278: LD_ADDR_VAR 0 5
60282: PUSH
60283: LD_VAR 0 1
60287: PPUSH
60288: LD_VAR 0 2
60292: PUSH
60293: LD_VAR 0 4
60297: ARRAY
60298: PUSH
60299: LD_INT 1
60301: ARRAY
60302: PPUSH
60303: LD_VAR 0 2
60307: PUSH
60308: LD_VAR 0 4
60312: ARRAY
60313: PUSH
60314: LD_INT 2
60316: ARRAY
60317: PPUSH
60318: CALL_OW 297
60322: ST_TO_ADDR
// end ; end ;
60323: GO 60212
60325: POP
60326: POP
// result := hex ;
60327: LD_ADDR_VAR 0 3
60331: PUSH
60332: LD_VAR 0 7
60336: ST_TO_ADDR
// end ;
60337: LD_VAR 0 3
60341: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60342: LD_INT 0
60344: PPUSH
60345: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60346: LD_VAR 0 1
60350: NOT
60351: PUSH
60352: LD_VAR 0 1
60356: PUSH
60357: LD_INT 21
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 23
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PPUSH
60381: CALL_OW 69
60385: IN
60386: NOT
60387: OR
60388: IFFALSE 60392
// exit ;
60390: GO 60439
// for i = 1 to 3 do
60392: LD_ADDR_VAR 0 3
60396: PUSH
60397: DOUBLE
60398: LD_INT 1
60400: DEC
60401: ST_TO_ADDR
60402: LD_INT 3
60404: PUSH
60405: FOR_TO
60406: IFFALSE 60437
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60408: LD_VAR 0 1
60412: PPUSH
60413: CALL_OW 250
60417: PPUSH
60418: LD_VAR 0 1
60422: PPUSH
60423: CALL_OW 251
60427: PPUSH
60428: LD_INT 1
60430: PPUSH
60431: CALL_OW 453
60435: GO 60405
60437: POP
60438: POP
// end ;
60439: LD_VAR 0 2
60443: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60444: LD_INT 0
60446: PPUSH
60447: PPUSH
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60452: LD_VAR 0 1
60456: NOT
60457: PUSH
60458: LD_VAR 0 2
60462: NOT
60463: OR
60464: PUSH
60465: LD_VAR 0 1
60469: PPUSH
60470: CALL_OW 314
60474: OR
60475: IFFALSE 60479
// exit ;
60477: GO 60920
// x := GetX ( enemy_unit ) ;
60479: LD_ADDR_VAR 0 7
60483: PUSH
60484: LD_VAR 0 2
60488: PPUSH
60489: CALL_OW 250
60493: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60494: LD_ADDR_VAR 0 8
60498: PUSH
60499: LD_VAR 0 2
60503: PPUSH
60504: CALL_OW 251
60508: ST_TO_ADDR
// if not x or not y then
60509: LD_VAR 0 7
60513: NOT
60514: PUSH
60515: LD_VAR 0 8
60519: NOT
60520: OR
60521: IFFALSE 60525
// exit ;
60523: GO 60920
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60525: LD_ADDR_VAR 0 6
60529: PUSH
60530: LD_VAR 0 7
60534: PPUSH
60535: LD_INT 0
60537: PPUSH
60538: LD_INT 4
60540: PPUSH
60541: CALL_OW 272
60545: PUSH
60546: LD_VAR 0 8
60550: PPUSH
60551: LD_INT 0
60553: PPUSH
60554: LD_INT 4
60556: PPUSH
60557: CALL_OW 273
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_VAR 0 7
60570: PPUSH
60571: LD_INT 1
60573: PPUSH
60574: LD_INT 4
60576: PPUSH
60577: CALL_OW 272
60581: PUSH
60582: LD_VAR 0 8
60586: PPUSH
60587: LD_INT 1
60589: PPUSH
60590: LD_INT 4
60592: PPUSH
60593: CALL_OW 273
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_VAR 0 7
60606: PPUSH
60607: LD_INT 2
60609: PPUSH
60610: LD_INT 4
60612: PPUSH
60613: CALL_OW 272
60617: PUSH
60618: LD_VAR 0 8
60622: PPUSH
60623: LD_INT 2
60625: PPUSH
60626: LD_INT 4
60628: PPUSH
60629: CALL_OW 273
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_VAR 0 7
60642: PPUSH
60643: LD_INT 3
60645: PPUSH
60646: LD_INT 4
60648: PPUSH
60649: CALL_OW 272
60653: PUSH
60654: LD_VAR 0 8
60658: PPUSH
60659: LD_INT 3
60661: PPUSH
60662: LD_INT 4
60664: PPUSH
60665: CALL_OW 273
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_VAR 0 7
60678: PPUSH
60679: LD_INT 4
60681: PPUSH
60682: LD_INT 4
60684: PPUSH
60685: CALL_OW 272
60689: PUSH
60690: LD_VAR 0 8
60694: PPUSH
60695: LD_INT 4
60697: PPUSH
60698: LD_INT 4
60700: PPUSH
60701: CALL_OW 273
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_VAR 0 7
60714: PPUSH
60715: LD_INT 5
60717: PPUSH
60718: LD_INT 4
60720: PPUSH
60721: CALL_OW 272
60725: PUSH
60726: LD_VAR 0 8
60730: PPUSH
60731: LD_INT 5
60733: PPUSH
60734: LD_INT 4
60736: PPUSH
60737: CALL_OW 273
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: ST_TO_ADDR
// for i = tmp downto 1 do
60754: LD_ADDR_VAR 0 4
60758: PUSH
60759: DOUBLE
60760: LD_VAR 0 6
60764: INC
60765: ST_TO_ADDR
60766: LD_INT 1
60768: PUSH
60769: FOR_DOWNTO
60770: IFFALSE 60871
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60772: LD_VAR 0 6
60776: PUSH
60777: LD_VAR 0 4
60781: ARRAY
60782: PUSH
60783: LD_INT 1
60785: ARRAY
60786: PPUSH
60787: LD_VAR 0 6
60791: PUSH
60792: LD_VAR 0 4
60796: ARRAY
60797: PUSH
60798: LD_INT 2
60800: ARRAY
60801: PPUSH
60802: CALL_OW 488
60806: NOT
60807: PUSH
60808: LD_VAR 0 6
60812: PUSH
60813: LD_VAR 0 4
60817: ARRAY
60818: PUSH
60819: LD_INT 1
60821: ARRAY
60822: PPUSH
60823: LD_VAR 0 6
60827: PUSH
60828: LD_VAR 0 4
60832: ARRAY
60833: PUSH
60834: LD_INT 2
60836: ARRAY
60837: PPUSH
60838: CALL_OW 428
60842: PUSH
60843: LD_INT 0
60845: NONEQUAL
60846: OR
60847: IFFALSE 60869
// tmp := Delete ( tmp , i ) ;
60849: LD_ADDR_VAR 0 6
60853: PUSH
60854: LD_VAR 0 6
60858: PPUSH
60859: LD_VAR 0 4
60863: PPUSH
60864: CALL_OW 3
60868: ST_TO_ADDR
60869: GO 60769
60871: POP
60872: POP
// j := GetClosestHex ( unit , tmp ) ;
60873: LD_ADDR_VAR 0 5
60877: PUSH
60878: LD_VAR 0 1
60882: PPUSH
60883: LD_VAR 0 6
60887: PPUSH
60888: CALL 60173 0 2
60892: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60893: LD_VAR 0 1
60897: PPUSH
60898: LD_VAR 0 5
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PPUSH
60907: LD_VAR 0 5
60911: PUSH
60912: LD_INT 2
60914: ARRAY
60915: PPUSH
60916: CALL_OW 111
// end ;
60920: LD_VAR 0 3
60924: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60925: LD_INT 0
60927: PPUSH
60928: PPUSH
60929: PPUSH
// uc_side = 0 ;
60930: LD_ADDR_OWVAR 20
60934: PUSH
60935: LD_INT 0
60937: ST_TO_ADDR
// uc_nation = 0 ;
60938: LD_ADDR_OWVAR 21
60942: PUSH
60943: LD_INT 0
60945: ST_TO_ADDR
// InitHc ;
60946: CALL_OW 19
// InitVc ;
60950: CALL_OW 20
// if mastodonts then
60954: LD_VAR 0 6
60958: IFFALSE 61025
// for i = 1 to mastodonts do
60960: LD_ADDR_VAR 0 11
60964: PUSH
60965: DOUBLE
60966: LD_INT 1
60968: DEC
60969: ST_TO_ADDR
60970: LD_VAR 0 6
60974: PUSH
60975: FOR_TO
60976: IFFALSE 61023
// begin vc_chassis := 31 ;
60978: LD_ADDR_OWVAR 37
60982: PUSH
60983: LD_INT 31
60985: ST_TO_ADDR
// vc_control := control_rider ;
60986: LD_ADDR_OWVAR 38
60990: PUSH
60991: LD_INT 4
60993: ST_TO_ADDR
// animal := CreateVehicle ;
60994: LD_ADDR_VAR 0 12
60998: PUSH
60999: CALL_OW 45
61003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61004: LD_VAR 0 12
61008: PPUSH
61009: LD_VAR 0 8
61013: PPUSH
61014: LD_INT 0
61016: PPUSH
61017: CALL 63094 0 3
// end ;
61021: GO 60975
61023: POP
61024: POP
// if horses then
61025: LD_VAR 0 5
61029: IFFALSE 61096
// for i = 1 to horses do
61031: LD_ADDR_VAR 0 11
61035: PUSH
61036: DOUBLE
61037: LD_INT 1
61039: DEC
61040: ST_TO_ADDR
61041: LD_VAR 0 5
61045: PUSH
61046: FOR_TO
61047: IFFALSE 61094
// begin hc_class := 21 ;
61049: LD_ADDR_OWVAR 28
61053: PUSH
61054: LD_INT 21
61056: ST_TO_ADDR
// hc_gallery :=  ;
61057: LD_ADDR_OWVAR 33
61061: PUSH
61062: LD_STRING 
61064: ST_TO_ADDR
// animal := CreateHuman ;
61065: LD_ADDR_VAR 0 12
61069: PUSH
61070: CALL_OW 44
61074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61075: LD_VAR 0 12
61079: PPUSH
61080: LD_VAR 0 8
61084: PPUSH
61085: LD_INT 0
61087: PPUSH
61088: CALL 63094 0 3
// end ;
61092: GO 61046
61094: POP
61095: POP
// if birds then
61096: LD_VAR 0 1
61100: IFFALSE 61167
// for i = 1 to birds do
61102: LD_ADDR_VAR 0 11
61106: PUSH
61107: DOUBLE
61108: LD_INT 1
61110: DEC
61111: ST_TO_ADDR
61112: LD_VAR 0 1
61116: PUSH
61117: FOR_TO
61118: IFFALSE 61165
// begin hc_class = 18 ;
61120: LD_ADDR_OWVAR 28
61124: PUSH
61125: LD_INT 18
61127: ST_TO_ADDR
// hc_gallery =  ;
61128: LD_ADDR_OWVAR 33
61132: PUSH
61133: LD_STRING 
61135: ST_TO_ADDR
// animal := CreateHuman ;
61136: LD_ADDR_VAR 0 12
61140: PUSH
61141: CALL_OW 44
61145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61146: LD_VAR 0 12
61150: PPUSH
61151: LD_VAR 0 8
61155: PPUSH
61156: LD_INT 0
61158: PPUSH
61159: CALL 63094 0 3
// end ;
61163: GO 61117
61165: POP
61166: POP
// if tigers then
61167: LD_VAR 0 2
61171: IFFALSE 61255
// for i = 1 to tigers do
61173: LD_ADDR_VAR 0 11
61177: PUSH
61178: DOUBLE
61179: LD_INT 1
61181: DEC
61182: ST_TO_ADDR
61183: LD_VAR 0 2
61187: PUSH
61188: FOR_TO
61189: IFFALSE 61253
// begin hc_class = class_tiger ;
61191: LD_ADDR_OWVAR 28
61195: PUSH
61196: LD_INT 14
61198: ST_TO_ADDR
// hc_gallery =  ;
61199: LD_ADDR_OWVAR 33
61203: PUSH
61204: LD_STRING 
61206: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61207: LD_ADDR_OWVAR 35
61211: PUSH
61212: LD_INT 7
61214: NEG
61215: PPUSH
61216: LD_INT 7
61218: PPUSH
61219: CALL_OW 12
61223: ST_TO_ADDR
// animal := CreateHuman ;
61224: LD_ADDR_VAR 0 12
61228: PUSH
61229: CALL_OW 44
61233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61234: LD_VAR 0 12
61238: PPUSH
61239: LD_VAR 0 8
61243: PPUSH
61244: LD_INT 0
61246: PPUSH
61247: CALL 63094 0 3
// end ;
61251: GO 61188
61253: POP
61254: POP
// if apemans then
61255: LD_VAR 0 3
61259: IFFALSE 61382
// for i = 1 to apemans do
61261: LD_ADDR_VAR 0 11
61265: PUSH
61266: DOUBLE
61267: LD_INT 1
61269: DEC
61270: ST_TO_ADDR
61271: LD_VAR 0 3
61275: PUSH
61276: FOR_TO
61277: IFFALSE 61380
// begin hc_class = class_apeman ;
61279: LD_ADDR_OWVAR 28
61283: PUSH
61284: LD_INT 12
61286: ST_TO_ADDR
// hc_gallery =  ;
61287: LD_ADDR_OWVAR 33
61291: PUSH
61292: LD_STRING 
61294: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61295: LD_ADDR_OWVAR 35
61299: PUSH
61300: LD_INT 5
61302: NEG
61303: PPUSH
61304: LD_INT 5
61306: PPUSH
61307: CALL_OW 12
61311: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61312: LD_ADDR_OWVAR 31
61316: PUSH
61317: LD_INT 1
61319: PPUSH
61320: LD_INT 3
61322: PPUSH
61323: CALL_OW 12
61327: PUSH
61328: LD_INT 1
61330: PPUSH
61331: LD_INT 3
61333: PPUSH
61334: CALL_OW 12
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: ST_TO_ADDR
// animal := CreateHuman ;
61351: LD_ADDR_VAR 0 12
61355: PUSH
61356: CALL_OW 44
61360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61361: LD_VAR 0 12
61365: PPUSH
61366: LD_VAR 0 8
61370: PPUSH
61371: LD_INT 0
61373: PPUSH
61374: CALL 63094 0 3
// end ;
61378: GO 61276
61380: POP
61381: POP
// if enchidnas then
61382: LD_VAR 0 4
61386: IFFALSE 61453
// for i = 1 to enchidnas do
61388: LD_ADDR_VAR 0 11
61392: PUSH
61393: DOUBLE
61394: LD_INT 1
61396: DEC
61397: ST_TO_ADDR
61398: LD_VAR 0 4
61402: PUSH
61403: FOR_TO
61404: IFFALSE 61451
// begin hc_class = 13 ;
61406: LD_ADDR_OWVAR 28
61410: PUSH
61411: LD_INT 13
61413: ST_TO_ADDR
// hc_gallery =  ;
61414: LD_ADDR_OWVAR 33
61418: PUSH
61419: LD_STRING 
61421: ST_TO_ADDR
// animal := CreateHuman ;
61422: LD_ADDR_VAR 0 12
61426: PUSH
61427: CALL_OW 44
61431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61432: LD_VAR 0 12
61436: PPUSH
61437: LD_VAR 0 8
61441: PPUSH
61442: LD_INT 0
61444: PPUSH
61445: CALL 63094 0 3
// end ;
61449: GO 61403
61451: POP
61452: POP
// if fishes then
61453: LD_VAR 0 7
61457: IFFALSE 61524
// for i = 1 to fishes do
61459: LD_ADDR_VAR 0 11
61463: PUSH
61464: DOUBLE
61465: LD_INT 1
61467: DEC
61468: ST_TO_ADDR
61469: LD_VAR 0 7
61473: PUSH
61474: FOR_TO
61475: IFFALSE 61522
// begin hc_class = 20 ;
61477: LD_ADDR_OWVAR 28
61481: PUSH
61482: LD_INT 20
61484: ST_TO_ADDR
// hc_gallery =  ;
61485: LD_ADDR_OWVAR 33
61489: PUSH
61490: LD_STRING 
61492: ST_TO_ADDR
// animal := CreateHuman ;
61493: LD_ADDR_VAR 0 12
61497: PUSH
61498: CALL_OW 44
61502: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61503: LD_VAR 0 12
61507: PPUSH
61508: LD_VAR 0 9
61512: PPUSH
61513: LD_INT 0
61515: PPUSH
61516: CALL 63094 0 3
// end ;
61520: GO 61474
61522: POP
61523: POP
// end ;
61524: LD_VAR 0 10
61528: RET
// export function WantHeal ( sci , unit ) ; begin
61529: LD_INT 0
61531: PPUSH
// if GetTaskList ( sci ) > 0 then
61532: LD_VAR 0 1
61536: PPUSH
61537: CALL_OW 437
61541: PUSH
61542: LD_INT 0
61544: GREATER
61545: IFFALSE 61615
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61547: LD_VAR 0 1
61551: PPUSH
61552: CALL_OW 437
61556: PUSH
61557: LD_INT 1
61559: ARRAY
61560: PUSH
61561: LD_INT 1
61563: ARRAY
61564: PUSH
61565: LD_STRING l
61567: EQUAL
61568: PUSH
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL_OW 437
61578: PUSH
61579: LD_INT 1
61581: ARRAY
61582: PUSH
61583: LD_INT 4
61585: ARRAY
61586: PUSH
61587: LD_VAR 0 2
61591: EQUAL
61592: AND
61593: IFFALSE 61605
// result := true else
61595: LD_ADDR_VAR 0 3
61599: PUSH
61600: LD_INT 1
61602: ST_TO_ADDR
61603: GO 61613
// result := false ;
61605: LD_ADDR_VAR 0 3
61609: PUSH
61610: LD_INT 0
61612: ST_TO_ADDR
// end else
61613: GO 61623
// result := false ;
61615: LD_ADDR_VAR 0 3
61619: PUSH
61620: LD_INT 0
61622: ST_TO_ADDR
// end ;
61623: LD_VAR 0 3
61627: RET
// export function HealTarget ( sci ) ; begin
61628: LD_INT 0
61630: PPUSH
// if not sci then
61631: LD_VAR 0 1
61635: NOT
61636: IFFALSE 61640
// exit ;
61638: GO 61705
// result := 0 ;
61640: LD_ADDR_VAR 0 2
61644: PUSH
61645: LD_INT 0
61647: ST_TO_ADDR
// if GetTaskList ( sci ) then
61648: LD_VAR 0 1
61652: PPUSH
61653: CALL_OW 437
61657: IFFALSE 61705
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61659: LD_VAR 0 1
61663: PPUSH
61664: CALL_OW 437
61668: PUSH
61669: LD_INT 1
61671: ARRAY
61672: PUSH
61673: LD_INT 1
61675: ARRAY
61676: PUSH
61677: LD_STRING l
61679: EQUAL
61680: IFFALSE 61705
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61682: LD_ADDR_VAR 0 2
61686: PUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: CALL_OW 437
61696: PUSH
61697: LD_INT 1
61699: ARRAY
61700: PUSH
61701: LD_INT 4
61703: ARRAY
61704: ST_TO_ADDR
// end ;
61705: LD_VAR 0 2
61709: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61710: LD_INT 0
61712: PPUSH
61713: PPUSH
61714: PPUSH
61715: PPUSH
// if not base_units then
61716: LD_VAR 0 1
61720: NOT
61721: IFFALSE 61725
// exit ;
61723: GO 61812
// result := false ;
61725: LD_ADDR_VAR 0 2
61729: PUSH
61730: LD_INT 0
61732: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61733: LD_ADDR_VAR 0 5
61737: PUSH
61738: LD_VAR 0 1
61742: PPUSH
61743: LD_INT 21
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PPUSH
61753: CALL_OW 72
61757: ST_TO_ADDR
// if not tmp then
61758: LD_VAR 0 5
61762: NOT
61763: IFFALSE 61767
// exit ;
61765: GO 61812
// for i in tmp do
61767: LD_ADDR_VAR 0 3
61771: PUSH
61772: LD_VAR 0 5
61776: PUSH
61777: FOR_IN
61778: IFFALSE 61810
// begin result := EnemyInRange ( i , 22 ) ;
61780: LD_ADDR_VAR 0 2
61784: PUSH
61785: LD_VAR 0 3
61789: PPUSH
61790: LD_INT 22
61792: PPUSH
61793: CALL 60048 0 2
61797: ST_TO_ADDR
// if result then
61798: LD_VAR 0 2
61802: IFFALSE 61808
// exit ;
61804: POP
61805: POP
61806: GO 61812
// end ;
61808: GO 61777
61810: POP
61811: POP
// end ;
61812: LD_VAR 0 2
61816: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61817: LD_INT 0
61819: PPUSH
61820: PPUSH
// if not units then
61821: LD_VAR 0 1
61825: NOT
61826: IFFALSE 61830
// exit ;
61828: GO 61900
// result := [ ] ;
61830: LD_ADDR_VAR 0 3
61834: PUSH
61835: EMPTY
61836: ST_TO_ADDR
// for i in units do
61837: LD_ADDR_VAR 0 4
61841: PUSH
61842: LD_VAR 0 1
61846: PUSH
61847: FOR_IN
61848: IFFALSE 61898
// if GetTag ( i ) = tag then
61850: LD_VAR 0 4
61854: PPUSH
61855: CALL_OW 110
61859: PUSH
61860: LD_VAR 0 2
61864: EQUAL
61865: IFFALSE 61896
// result := Insert ( result , result + 1 , i ) ;
61867: LD_ADDR_VAR 0 3
61871: PUSH
61872: LD_VAR 0 3
61876: PPUSH
61877: LD_VAR 0 3
61881: PUSH
61882: LD_INT 1
61884: PLUS
61885: PPUSH
61886: LD_VAR 0 4
61890: PPUSH
61891: CALL_OW 2
61895: ST_TO_ADDR
61896: GO 61847
61898: POP
61899: POP
// end ;
61900: LD_VAR 0 3
61904: RET
// export function IsDriver ( un ) ; begin
61905: LD_INT 0
61907: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61908: LD_ADDR_VAR 0 2
61912: PUSH
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 55
61920: PUSH
61921: EMPTY
61922: LIST
61923: PPUSH
61924: CALL_OW 69
61928: IN
61929: ST_TO_ADDR
// end ;
61930: LD_VAR 0 2
61934: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61935: LD_INT 0
61937: PPUSH
61938: PPUSH
// list := [ ] ;
61939: LD_ADDR_VAR 0 5
61943: PUSH
61944: EMPTY
61945: ST_TO_ADDR
// case d of 0 :
61946: LD_VAR 0 3
61950: PUSH
61951: LD_INT 0
61953: DOUBLE
61954: EQUAL
61955: IFTRUE 61959
61957: GO 62092
61959: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61960: LD_ADDR_VAR 0 5
61964: PUSH
61965: LD_VAR 0 1
61969: PUSH
61970: LD_INT 4
61972: MINUS
61973: PUSH
61974: LD_VAR 0 2
61978: PUSH
61979: LD_INT 4
61981: MINUS
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: PUSH
61991: LD_VAR 0 1
61995: PUSH
61996: LD_INT 3
61998: MINUS
61999: PUSH
62000: LD_VAR 0 2
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: PUSH
62013: LD_VAR 0 1
62017: PUSH
62018: LD_INT 4
62020: PLUS
62021: PUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_INT 4
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: PUSH
62035: LD_VAR 0 1
62039: PUSH
62040: LD_INT 3
62042: PLUS
62043: PUSH
62044: LD_VAR 0 2
62048: PUSH
62049: LD_INT 3
62051: PLUS
62052: PUSH
62053: LD_INT 5
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: PUSH
62061: LD_VAR 0 1
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 4
62073: PLUS
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: ST_TO_ADDR
// end ; 1 :
62090: GO 62790
62092: LD_INT 1
62094: DOUBLE
62095: EQUAL
62096: IFTRUE 62100
62098: GO 62233
62100: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62101: LD_ADDR_VAR 0 5
62105: PUSH
62106: LD_VAR 0 1
62110: PUSH
62111: LD_VAR 0 2
62115: PUSH
62116: LD_INT 4
62118: MINUS
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: PUSH
62128: LD_VAR 0 1
62132: PUSH
62133: LD_INT 3
62135: MINUS
62136: PUSH
62137: LD_VAR 0 2
62141: PUSH
62142: LD_INT 3
62144: MINUS
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: PUSH
62154: LD_VAR 0 1
62158: PUSH
62159: LD_INT 4
62161: MINUS
62162: PUSH
62163: LD_VAR 0 2
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: PUSH
62176: LD_VAR 0 1
62180: PUSH
62181: LD_VAR 0 2
62185: PUSH
62186: LD_INT 3
62188: PLUS
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: LD_INT 4
62205: PLUS
62206: PUSH
62207: LD_VAR 0 2
62211: PUSH
62212: LD_INT 4
62214: PLUS
62215: PUSH
62216: LD_INT 5
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// end ; 2 :
62231: GO 62790
62233: LD_INT 2
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62241
62239: GO 62370
62241: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62242: LD_ADDR_VAR 0 5
62246: PUSH
62247: LD_VAR 0 1
62251: PUSH
62252: LD_VAR 0 2
62256: PUSH
62257: LD_INT 3
62259: MINUS
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: PUSH
62269: LD_VAR 0 1
62273: PUSH
62274: LD_INT 4
62276: PLUS
62277: PUSH
62278: LD_VAR 0 2
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: LD_VAR 0 2
62300: PUSH
62301: LD_INT 4
62303: PLUS
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: PUSH
62313: LD_VAR 0 1
62317: PUSH
62318: LD_INT 3
62320: MINUS
62321: PUSH
62322: LD_VAR 0 2
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 1
62339: PUSH
62340: LD_INT 4
62342: MINUS
62343: PUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_INT 4
62351: MINUS
62352: PUSH
62353: LD_INT 2
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: ST_TO_ADDR
// end ; 3 :
62368: GO 62790
62370: LD_INT 3
62372: DOUBLE
62373: EQUAL
62374: IFTRUE 62378
62376: GO 62511
62378: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62379: LD_ADDR_VAR 0 5
62383: PUSH
62384: LD_VAR 0 1
62388: PUSH
62389: LD_INT 3
62391: PLUS
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: LD_INT 4
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: LIST
62405: PUSH
62406: LD_VAR 0 1
62410: PUSH
62411: LD_INT 4
62413: PLUS
62414: PUSH
62415: LD_VAR 0 2
62419: PUSH
62420: LD_INT 4
62422: PLUS
62423: PUSH
62424: LD_INT 5
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: PUSH
62432: LD_VAR 0 1
62436: PUSH
62437: LD_INT 4
62439: MINUS
62440: PUSH
62441: LD_VAR 0 2
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: PUSH
62454: LD_VAR 0 1
62458: PUSH
62459: LD_VAR 0 2
62463: PUSH
62464: LD_INT 4
62466: MINUS
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_INT 3
62483: MINUS
62484: PUSH
62485: LD_VAR 0 2
62489: PUSH
62490: LD_INT 3
62492: MINUS
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: ST_TO_ADDR
// end ; 4 :
62509: GO 62790
62511: LD_INT 4
62513: DOUBLE
62514: EQUAL
62515: IFTRUE 62519
62517: GO 62652
62519: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62520: LD_ADDR_VAR 0 5
62524: PUSH
62525: LD_VAR 0 1
62529: PUSH
62530: LD_VAR 0 2
62534: PUSH
62535: LD_INT 4
62537: PLUS
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: PUSH
62547: LD_VAR 0 1
62551: PUSH
62552: LD_INT 3
62554: PLUS
62555: PUSH
62556: LD_VAR 0 2
62560: PUSH
62561: LD_INT 3
62563: PLUS
62564: PUSH
62565: LD_INT 5
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: PUSH
62573: LD_VAR 0 1
62577: PUSH
62578: LD_INT 4
62580: PLUS
62581: PUSH
62582: LD_VAR 0 2
62586: PUSH
62587: LD_INT 4
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: PUSH
62595: LD_VAR 0 1
62599: PUSH
62600: LD_VAR 0 2
62604: PUSH
62605: LD_INT 3
62607: MINUS
62608: PUSH
62609: LD_INT 3
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: PUSH
62617: LD_VAR 0 1
62621: PUSH
62622: LD_INT 4
62624: MINUS
62625: PUSH
62626: LD_VAR 0 2
62630: PUSH
62631: LD_INT 4
62633: MINUS
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// end ; 5 :
62650: GO 62790
62652: LD_INT 5
62654: DOUBLE
62655: EQUAL
62656: IFTRUE 62660
62658: GO 62789
62660: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62661: LD_ADDR_VAR 0 5
62665: PUSH
62666: LD_VAR 0 1
62670: PUSH
62671: LD_INT 4
62673: MINUS
62674: PUSH
62675: LD_VAR 0 2
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: PUSH
62688: LD_VAR 0 1
62692: PUSH
62693: LD_VAR 0 2
62697: PUSH
62698: LD_INT 4
62700: MINUS
62701: PUSH
62702: LD_INT 3
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: PUSH
62710: LD_VAR 0 1
62714: PUSH
62715: LD_INT 4
62717: PLUS
62718: PUSH
62719: LD_VAR 0 2
62723: PUSH
62724: LD_INT 4
62726: PLUS
62727: PUSH
62728: LD_INT 5
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: PUSH
62736: LD_VAR 0 1
62740: PUSH
62741: LD_INT 3
62743: PLUS
62744: PUSH
62745: LD_VAR 0 2
62749: PUSH
62750: LD_INT 4
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: LIST
62757: PUSH
62758: LD_VAR 0 1
62762: PUSH
62763: LD_VAR 0 2
62767: PUSH
62768: LD_INT 3
62770: PLUS
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: ST_TO_ADDR
// end ; end ;
62787: GO 62790
62789: POP
// result := list ;
62790: LD_ADDR_VAR 0 4
62794: PUSH
62795: LD_VAR 0 5
62799: ST_TO_ADDR
// end ;
62800: LD_VAR 0 4
62804: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62805: LD_INT 0
62807: PPUSH
62808: PPUSH
62809: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62810: LD_VAR 0 1
62814: NOT
62815: PUSH
62816: LD_VAR 0 2
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: LD_INT 4
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: IN
62839: NOT
62840: OR
62841: IFFALSE 62845
// exit ;
62843: GO 62937
// tmp := [ ] ;
62845: LD_ADDR_VAR 0 5
62849: PUSH
62850: EMPTY
62851: ST_TO_ADDR
// for i in units do
62852: LD_ADDR_VAR 0 4
62856: PUSH
62857: LD_VAR 0 1
62861: PUSH
62862: FOR_IN
62863: IFFALSE 62906
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62865: LD_ADDR_VAR 0 5
62869: PUSH
62870: LD_VAR 0 5
62874: PPUSH
62875: LD_VAR 0 5
62879: PUSH
62880: LD_INT 1
62882: PLUS
62883: PPUSH
62884: LD_VAR 0 4
62888: PPUSH
62889: LD_VAR 0 2
62893: PPUSH
62894: CALL_OW 259
62898: PPUSH
62899: CALL_OW 2
62903: ST_TO_ADDR
62904: GO 62862
62906: POP
62907: POP
// if not tmp then
62908: LD_VAR 0 5
62912: NOT
62913: IFFALSE 62917
// exit ;
62915: GO 62937
// result := SortListByListDesc ( units , tmp ) ;
62917: LD_ADDR_VAR 0 3
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: LD_VAR 0 5
62931: PPUSH
62932: CALL_OW 77
62936: ST_TO_ADDR
// end ;
62937: LD_VAR 0 3
62941: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62942: LD_INT 0
62944: PPUSH
62945: PPUSH
62946: PPUSH
// x := GetX ( building ) ;
62947: LD_ADDR_VAR 0 4
62951: PUSH
62952: LD_VAR 0 2
62956: PPUSH
62957: CALL_OW 250
62961: ST_TO_ADDR
// y := GetY ( building ) ;
62962: LD_ADDR_VAR 0 5
62966: PUSH
62967: LD_VAR 0 2
62971: PPUSH
62972: CALL_OW 251
62976: ST_TO_ADDR
// if GetTaskList ( unit ) then
62977: LD_VAR 0 1
62981: PPUSH
62982: CALL_OW 437
62986: IFFALSE 63081
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62988: LD_STRING e
62990: PUSH
62991: LD_VAR 0 1
62995: PPUSH
62996: CALL_OW 437
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PUSH
63005: LD_INT 1
63007: ARRAY
63008: EQUAL
63009: PUSH
63010: LD_VAR 0 4
63014: PUSH
63015: LD_VAR 0 1
63019: PPUSH
63020: CALL_OW 437
63024: PUSH
63025: LD_INT 1
63027: ARRAY
63028: PUSH
63029: LD_INT 2
63031: ARRAY
63032: EQUAL
63033: AND
63034: PUSH
63035: LD_VAR 0 5
63039: PUSH
63040: LD_VAR 0 1
63044: PPUSH
63045: CALL_OW 437
63049: PUSH
63050: LD_INT 1
63052: ARRAY
63053: PUSH
63054: LD_INT 3
63056: ARRAY
63057: EQUAL
63058: AND
63059: IFFALSE 63071
// result := true else
63061: LD_ADDR_VAR 0 3
63065: PUSH
63066: LD_INT 1
63068: ST_TO_ADDR
63069: GO 63079
// result := false ;
63071: LD_ADDR_VAR 0 3
63075: PUSH
63076: LD_INT 0
63078: ST_TO_ADDR
// end else
63079: GO 63089
// result := false ;
63081: LD_ADDR_VAR 0 3
63085: PUSH
63086: LD_INT 0
63088: ST_TO_ADDR
// end ;
63089: LD_VAR 0 3
63093: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63094: LD_INT 0
63096: PPUSH
63097: PPUSH
63098: PPUSH
63099: PPUSH
// if not unit or not area then
63100: LD_VAR 0 1
63104: NOT
63105: PUSH
63106: LD_VAR 0 2
63110: NOT
63111: OR
63112: IFFALSE 63116
// exit ;
63114: GO 63280
// tmp := AreaToList ( area , i ) ;
63116: LD_ADDR_VAR 0 6
63120: PUSH
63121: LD_VAR 0 2
63125: PPUSH
63126: LD_VAR 0 5
63130: PPUSH
63131: CALL_OW 517
63135: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63136: LD_ADDR_VAR 0 5
63140: PUSH
63141: DOUBLE
63142: LD_INT 1
63144: DEC
63145: ST_TO_ADDR
63146: LD_VAR 0 6
63150: PUSH
63151: LD_INT 1
63153: ARRAY
63154: PUSH
63155: FOR_TO
63156: IFFALSE 63278
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63158: LD_ADDR_VAR 0 7
63162: PUSH
63163: LD_VAR 0 6
63167: PUSH
63168: LD_INT 1
63170: ARRAY
63171: PUSH
63172: LD_VAR 0 5
63176: ARRAY
63177: PUSH
63178: LD_VAR 0 6
63182: PUSH
63183: LD_INT 2
63185: ARRAY
63186: PUSH
63187: LD_VAR 0 5
63191: ARRAY
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63197: LD_VAR 0 7
63201: PUSH
63202: LD_INT 1
63204: ARRAY
63205: PPUSH
63206: LD_VAR 0 7
63210: PUSH
63211: LD_INT 2
63213: ARRAY
63214: PPUSH
63215: CALL_OW 428
63219: PUSH
63220: LD_INT 0
63222: EQUAL
63223: IFFALSE 63276
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63225: LD_VAR 0 1
63229: PPUSH
63230: LD_VAR 0 7
63234: PUSH
63235: LD_INT 1
63237: ARRAY
63238: PPUSH
63239: LD_VAR 0 7
63243: PUSH
63244: LD_INT 2
63246: ARRAY
63247: PPUSH
63248: LD_VAR 0 3
63252: PPUSH
63253: CALL_OW 48
// result := IsPlaced ( unit ) ;
63257: LD_ADDR_VAR 0 4
63261: PUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: CALL_OW 305
63271: ST_TO_ADDR
// exit ;
63272: POP
63273: POP
63274: GO 63280
// end ; end ;
63276: GO 63155
63278: POP
63279: POP
// end ;
63280: LD_VAR 0 4
63284: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63285: LD_INT 0
63287: PPUSH
63288: PPUSH
63289: PPUSH
// if not side or side > 8 then
63290: LD_VAR 0 1
63294: NOT
63295: PUSH
63296: LD_VAR 0 1
63300: PUSH
63301: LD_INT 8
63303: GREATER
63304: OR
63305: IFFALSE 63309
// exit ;
63307: GO 63496
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63309: LD_ADDR_VAR 0 4
63313: PUSH
63314: LD_INT 22
63316: PUSH
63317: LD_VAR 0 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 21
63328: PUSH
63329: LD_INT 3
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PPUSH
63340: CALL_OW 69
63344: ST_TO_ADDR
// if not tmp then
63345: LD_VAR 0 4
63349: NOT
63350: IFFALSE 63354
// exit ;
63352: GO 63496
// enable_addtolog := true ;
63354: LD_ADDR_OWVAR 81
63358: PUSH
63359: LD_INT 1
63361: ST_TO_ADDR
// AddToLog ( [ ) ;
63362: LD_STRING [
63364: PPUSH
63365: CALL_OW 561
// for i in tmp do
63369: LD_ADDR_VAR 0 3
63373: PUSH
63374: LD_VAR 0 4
63378: PUSH
63379: FOR_IN
63380: IFFALSE 63487
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63382: LD_STRING [
63384: PUSH
63385: LD_VAR 0 3
63389: PPUSH
63390: CALL_OW 266
63394: STR
63395: PUSH
63396: LD_STRING , 
63398: STR
63399: PUSH
63400: LD_VAR 0 3
63404: PPUSH
63405: CALL_OW 250
63409: STR
63410: PUSH
63411: LD_STRING , 
63413: STR
63414: PUSH
63415: LD_VAR 0 3
63419: PPUSH
63420: CALL_OW 251
63424: STR
63425: PUSH
63426: LD_STRING , 
63428: STR
63429: PUSH
63430: LD_VAR 0 3
63434: PPUSH
63435: CALL_OW 254
63439: STR
63440: PUSH
63441: LD_STRING , 
63443: STR
63444: PUSH
63445: LD_VAR 0 3
63449: PPUSH
63450: LD_INT 1
63452: PPUSH
63453: CALL_OW 268
63457: STR
63458: PUSH
63459: LD_STRING , 
63461: STR
63462: PUSH
63463: LD_VAR 0 3
63467: PPUSH
63468: LD_INT 2
63470: PPUSH
63471: CALL_OW 268
63475: STR
63476: PUSH
63477: LD_STRING ],
63479: STR
63480: PPUSH
63481: CALL_OW 561
// end ;
63485: GO 63379
63487: POP
63488: POP
// AddToLog ( ]; ) ;
63489: LD_STRING ];
63491: PPUSH
63492: CALL_OW 561
// end ;
63496: LD_VAR 0 2
63500: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63501: LD_INT 0
63503: PPUSH
63504: PPUSH
63505: PPUSH
63506: PPUSH
63507: PPUSH
// if not area or not rate or not max then
63508: LD_VAR 0 1
63512: NOT
63513: PUSH
63514: LD_VAR 0 2
63518: NOT
63519: OR
63520: PUSH
63521: LD_VAR 0 4
63525: NOT
63526: OR
63527: IFFALSE 63531
// exit ;
63529: GO 63723
// while 1 do
63531: LD_INT 1
63533: IFFALSE 63723
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63535: LD_ADDR_VAR 0 9
63539: PUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: LD_INT 1
63547: PPUSH
63548: CALL_OW 287
63552: PUSH
63553: LD_INT 10
63555: MUL
63556: ST_TO_ADDR
// r := rate / 10 ;
63557: LD_ADDR_VAR 0 7
63561: PUSH
63562: LD_VAR 0 2
63566: PUSH
63567: LD_INT 10
63569: DIVREAL
63570: ST_TO_ADDR
// time := 1 1$00 ;
63571: LD_ADDR_VAR 0 8
63575: PUSH
63576: LD_INT 2100
63578: ST_TO_ADDR
// if amount < min then
63579: LD_VAR 0 9
63583: PUSH
63584: LD_VAR 0 3
63588: LESS
63589: IFFALSE 63607
// r := r * 2 else
63591: LD_ADDR_VAR 0 7
63595: PUSH
63596: LD_VAR 0 7
63600: PUSH
63601: LD_INT 2
63603: MUL
63604: ST_TO_ADDR
63605: GO 63633
// if amount > max then
63607: LD_VAR 0 9
63611: PUSH
63612: LD_VAR 0 4
63616: GREATER
63617: IFFALSE 63633
// r := r / 2 ;
63619: LD_ADDR_VAR 0 7
63623: PUSH
63624: LD_VAR 0 7
63628: PUSH
63629: LD_INT 2
63631: DIVREAL
63632: ST_TO_ADDR
// time := time / r ;
63633: LD_ADDR_VAR 0 8
63637: PUSH
63638: LD_VAR 0 8
63642: PUSH
63643: LD_VAR 0 7
63647: DIVREAL
63648: ST_TO_ADDR
// if time < 0 then
63649: LD_VAR 0 8
63653: PUSH
63654: LD_INT 0
63656: LESS
63657: IFFALSE 63674
// time := time * - 1 ;
63659: LD_ADDR_VAR 0 8
63663: PUSH
63664: LD_VAR 0 8
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: MUL
63673: ST_TO_ADDR
// wait ( time ) ;
63674: LD_VAR 0 8
63678: PPUSH
63679: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63683: LD_INT 35
63685: PPUSH
63686: LD_INT 875
63688: PPUSH
63689: CALL_OW 12
63693: PPUSH
63694: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63698: LD_INT 1
63700: PPUSH
63701: LD_INT 5
63703: PPUSH
63704: CALL_OW 12
63708: PPUSH
63709: LD_VAR 0 1
63713: PPUSH
63714: LD_INT 1
63716: PPUSH
63717: CALL_OW 55
// end ;
63721: GO 63531
// end ;
63723: LD_VAR 0 5
63727: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63728: LD_INT 0
63730: PPUSH
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
63735: PPUSH
63736: PPUSH
63737: PPUSH
// if not turrets or not factories then
63738: LD_VAR 0 1
63742: NOT
63743: PUSH
63744: LD_VAR 0 2
63748: NOT
63749: OR
63750: IFFALSE 63754
// exit ;
63752: GO 64061
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63754: LD_ADDR_VAR 0 10
63758: PUSH
63759: LD_INT 5
63761: PUSH
63762: LD_INT 6
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 4
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: LD_INT 5
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 24
63796: PUSH
63797: LD_INT 25
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 23
63806: PUSH
63807: LD_INT 27
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 42
63820: PUSH
63821: LD_INT 43
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 44
63830: PUSH
63831: LD_INT 46
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 45
63840: PUSH
63841: LD_INT 47
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: ST_TO_ADDR
// result := [ ] ;
63858: LD_ADDR_VAR 0 3
63862: PUSH
63863: EMPTY
63864: ST_TO_ADDR
// for i in turrets do
63865: LD_ADDR_VAR 0 4
63869: PUSH
63870: LD_VAR 0 1
63874: PUSH
63875: FOR_IN
63876: IFFALSE 64059
// begin nat := GetNation ( i ) ;
63878: LD_ADDR_VAR 0 7
63882: PUSH
63883: LD_VAR 0 4
63887: PPUSH
63888: CALL_OW 248
63892: ST_TO_ADDR
// weapon := 0 ;
63893: LD_ADDR_VAR 0 8
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// if not nat then
63901: LD_VAR 0 7
63905: NOT
63906: IFFALSE 63910
// continue ;
63908: GO 63875
// for j in list [ nat ] do
63910: LD_ADDR_VAR 0 5
63914: PUSH
63915: LD_VAR 0 10
63919: PUSH
63920: LD_VAR 0 7
63924: ARRAY
63925: PUSH
63926: FOR_IN
63927: IFFALSE 63968
// if GetBWeapon ( i ) = j [ 1 ] then
63929: LD_VAR 0 4
63933: PPUSH
63934: CALL_OW 269
63938: PUSH
63939: LD_VAR 0 5
63943: PUSH
63944: LD_INT 1
63946: ARRAY
63947: EQUAL
63948: IFFALSE 63966
// begin weapon := j [ 2 ] ;
63950: LD_ADDR_VAR 0 8
63954: PUSH
63955: LD_VAR 0 5
63959: PUSH
63960: LD_INT 2
63962: ARRAY
63963: ST_TO_ADDR
// break ;
63964: GO 63968
// end ;
63966: GO 63926
63968: POP
63969: POP
// if not weapon then
63970: LD_VAR 0 8
63974: NOT
63975: IFFALSE 63979
// continue ;
63977: GO 63875
// for k in factories do
63979: LD_ADDR_VAR 0 6
63983: PUSH
63984: LD_VAR 0 2
63988: PUSH
63989: FOR_IN
63990: IFFALSE 64055
// begin weapons := AvailableWeaponList ( k ) ;
63992: LD_ADDR_VAR 0 9
63996: PUSH
63997: LD_VAR 0 6
64001: PPUSH
64002: CALL_OW 478
64006: ST_TO_ADDR
// if not weapons then
64007: LD_VAR 0 9
64011: NOT
64012: IFFALSE 64016
// continue ;
64014: GO 63989
// if weapon in weapons then
64016: LD_VAR 0 8
64020: PUSH
64021: LD_VAR 0 9
64025: IN
64026: IFFALSE 64053
// begin result := [ i , weapon ] ;
64028: LD_ADDR_VAR 0 3
64032: PUSH
64033: LD_VAR 0 4
64037: PUSH
64038: LD_VAR 0 8
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// exit ;
64047: POP
64048: POP
64049: POP
64050: POP
64051: GO 64061
// end ; end ;
64053: GO 63989
64055: POP
64056: POP
// end ;
64057: GO 63875
64059: POP
64060: POP
// end ;
64061: LD_VAR 0 3
64065: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64066: LD_INT 0
64068: PPUSH
// if not side or side > 8 then
64069: LD_VAR 0 3
64073: NOT
64074: PUSH
64075: LD_VAR 0 3
64079: PUSH
64080: LD_INT 8
64082: GREATER
64083: OR
64084: IFFALSE 64088
// exit ;
64086: GO 64147
// if not range then
64088: LD_VAR 0 4
64092: NOT
64093: IFFALSE 64104
// range := - 12 ;
64095: LD_ADDR_VAR 0 4
64099: PUSH
64100: LD_INT 12
64102: NEG
64103: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64104: LD_VAR 0 1
64108: PPUSH
64109: LD_VAR 0 2
64113: PPUSH
64114: LD_VAR 0 3
64118: PPUSH
64119: LD_VAR 0 4
64123: PPUSH
64124: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64128: LD_VAR 0 1
64132: PPUSH
64133: LD_VAR 0 2
64137: PPUSH
64138: LD_VAR 0 3
64142: PPUSH
64143: CALL_OW 331
// end ;
64147: LD_VAR 0 5
64151: RET
// export function Video ( mode ) ; begin
64152: LD_INT 0
64154: PPUSH
// ingame_video = mode ;
64155: LD_ADDR_OWVAR 52
64159: PUSH
64160: LD_VAR 0 1
64164: ST_TO_ADDR
// interface_hidden = mode ;
64165: LD_ADDR_OWVAR 54
64169: PUSH
64170: LD_VAR 0 1
64174: ST_TO_ADDR
// end ;
64175: LD_VAR 0 2
64179: RET
// export function Join ( array , element ) ; begin
64180: LD_INT 0
64182: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64183: LD_ADDR_VAR 0 3
64187: PUSH
64188: LD_VAR 0 1
64192: PPUSH
64193: LD_VAR 0 1
64197: PUSH
64198: LD_INT 1
64200: PLUS
64201: PPUSH
64202: LD_VAR 0 2
64206: PPUSH
64207: CALL_OW 1
64211: ST_TO_ADDR
// end ;
64212: LD_VAR 0 3
64216: RET
// export function JoinUnion ( array , element ) ; begin
64217: LD_INT 0
64219: PPUSH
// result := array union element ;
64220: LD_ADDR_VAR 0 3
64224: PUSH
64225: LD_VAR 0 1
64229: PUSH
64230: LD_VAR 0 2
64234: UNION
64235: ST_TO_ADDR
// end ;
64236: LD_VAR 0 3
64240: RET
// export function GetBehemoths ( side ) ; begin
64241: LD_INT 0
64243: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64244: LD_ADDR_VAR 0 2
64248: PUSH
64249: LD_INT 22
64251: PUSH
64252: LD_VAR 0 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 31
64263: PUSH
64264: LD_INT 25
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PPUSH
64275: CALL_OW 69
64279: ST_TO_ADDR
// end ;
64280: LD_VAR 0 2
64284: RET
// export function Shuffle ( array ) ; var i , index ; begin
64285: LD_INT 0
64287: PPUSH
64288: PPUSH
64289: PPUSH
// result := [ ] ;
64290: LD_ADDR_VAR 0 2
64294: PUSH
64295: EMPTY
64296: ST_TO_ADDR
// if not array then
64297: LD_VAR 0 1
64301: NOT
64302: IFFALSE 64306
// exit ;
64304: GO 64405
// Randomize ;
64306: CALL_OW 10
// for i = array downto 1 do
64310: LD_ADDR_VAR 0 3
64314: PUSH
64315: DOUBLE
64316: LD_VAR 0 1
64320: INC
64321: ST_TO_ADDR
64322: LD_INT 1
64324: PUSH
64325: FOR_DOWNTO
64326: IFFALSE 64403
// begin index := rand ( 1 , array ) ;
64328: LD_ADDR_VAR 0 4
64332: PUSH
64333: LD_INT 1
64335: PPUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: CALL_OW 12
64345: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64346: LD_ADDR_VAR 0 2
64350: PUSH
64351: LD_VAR 0 2
64355: PPUSH
64356: LD_VAR 0 2
64360: PUSH
64361: LD_INT 1
64363: PLUS
64364: PPUSH
64365: LD_VAR 0 1
64369: PUSH
64370: LD_VAR 0 4
64374: ARRAY
64375: PPUSH
64376: CALL_OW 2
64380: ST_TO_ADDR
// array := Delete ( array , index ) ;
64381: LD_ADDR_VAR 0 1
64385: PUSH
64386: LD_VAR 0 1
64390: PPUSH
64391: LD_VAR 0 4
64395: PPUSH
64396: CALL_OW 3
64400: ST_TO_ADDR
// end ;
64401: GO 64325
64403: POP
64404: POP
// end ;
64405: LD_VAR 0 2
64409: RET
// export function GetBaseMaterials ( base ) ; begin
64410: LD_INT 0
64412: PPUSH
// result := [ 0 , 0 , 0 ] ;
64413: LD_ADDR_VAR 0 2
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: ST_TO_ADDR
// if not base then
64432: LD_VAR 0 1
64436: NOT
64437: IFFALSE 64441
// exit ;
64439: GO 64490
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64441: LD_ADDR_VAR 0 2
64445: PUSH
64446: LD_VAR 0 1
64450: PPUSH
64451: LD_INT 1
64453: PPUSH
64454: CALL_OW 275
64458: PUSH
64459: LD_VAR 0 1
64463: PPUSH
64464: LD_INT 2
64466: PPUSH
64467: CALL_OW 275
64471: PUSH
64472: LD_VAR 0 1
64476: PPUSH
64477: LD_INT 3
64479: PPUSH
64480: CALL_OW 275
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// end ;
64490: LD_VAR 0 2
64494: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64495: LD_INT 0
64497: PPUSH
64498: PPUSH
// result := array ;
64499: LD_ADDR_VAR 0 3
64503: PUSH
64504: LD_VAR 0 1
64508: ST_TO_ADDR
// if size > 0 then
64509: LD_VAR 0 2
64513: PUSH
64514: LD_INT 0
64516: GREATER
64517: IFFALSE 64563
// for i := array downto size do
64519: LD_ADDR_VAR 0 4
64523: PUSH
64524: DOUBLE
64525: LD_VAR 0 1
64529: INC
64530: ST_TO_ADDR
64531: LD_VAR 0 2
64535: PUSH
64536: FOR_DOWNTO
64537: IFFALSE 64561
// result := Delete ( result , result ) ;
64539: LD_ADDR_VAR 0 3
64543: PUSH
64544: LD_VAR 0 3
64548: PPUSH
64549: LD_VAR 0 3
64553: PPUSH
64554: CALL_OW 3
64558: ST_TO_ADDR
64559: GO 64536
64561: POP
64562: POP
// end ;
64563: LD_VAR 0 3
64567: RET
// export function ComExit ( unit ) ; var tmp ; begin
64568: LD_INT 0
64570: PPUSH
64571: PPUSH
// if not IsInUnit ( unit ) then
64572: LD_VAR 0 1
64576: PPUSH
64577: CALL_OW 310
64581: NOT
64582: IFFALSE 64586
// exit ;
64584: GO 64646
// tmp := IsInUnit ( unit ) ;
64586: LD_ADDR_VAR 0 3
64590: PUSH
64591: LD_VAR 0 1
64595: PPUSH
64596: CALL_OW 310
64600: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64601: LD_VAR 0 3
64605: PPUSH
64606: CALL_OW 247
64610: PUSH
64611: LD_INT 2
64613: EQUAL
64614: IFFALSE 64627
// ComExitVehicle ( unit ) else
64616: LD_VAR 0 1
64620: PPUSH
64621: CALL_OW 121
64625: GO 64636
// ComExitBuilding ( unit ) ;
64627: LD_VAR 0 1
64631: PPUSH
64632: CALL_OW 122
// result := tmp ;
64636: LD_ADDR_VAR 0 2
64640: PUSH
64641: LD_VAR 0 3
64645: ST_TO_ADDR
// end ;
64646: LD_VAR 0 2
64650: RET
// export function ResetHc ; begin
64651: LD_INT 0
64653: PPUSH
// InitHc ;
64654: CALL_OW 19
// hc_importance := 0 ;
64658: LD_ADDR_OWVAR 32
64662: PUSH
64663: LD_INT 0
64665: ST_TO_ADDR
// end ;
64666: LD_VAR 0 1
64670: RET
