// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8248 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 34611 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 34611 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 34611 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 34611 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 34611 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34611 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 34611 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 34611 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 34611 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 34611 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 34611 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 34611 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 34611 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 34611 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 34611 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 34611 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 34611 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 34611 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 34611 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 34611 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 34611 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 34611 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 70968 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 70968 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 70968 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 70968 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 70968 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 70968 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 70968 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 70968 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ;
7765: PPOPN 1
7767: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7768: LD_EXP 38
7772: PPUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 54
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 95
7794: PUSH
7795: LD_INT 26
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 72
7815: IFFALSE 7910
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
// begin enable ;
7824: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_EXP 38
7834: PPUSH
7835: LD_INT 1
7837: PUSH
7838: LD_INT 3
7840: PUSH
7841: LD_INT 54
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 95
7856: PUSH
7857: LD_INT 26
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: ST_TO_ADDR
// for i in tmp do
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_VAR 0 2
7887: PUSH
7888: FOR_IN
7889: IFFALSE 7908
// ComMoveXY ( i , 206 , 110 ) ;
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 206
7898: PPUSH
7899: LD_INT 110
7901: PPUSH
7902: CALL_OW 111
7906: GO 7888
7908: POP
7909: POP
// end ; end_of_file
7910: PPOPN 2
7912: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL 14673 0 1
// if un = Heike then
7922: LD_VAR 0 1
7926: PUSH
7927: LD_EXP 21
7931: EQUAL
7932: IFFALSE 7941
// YouLost ( Heike ) ;
7934: LD_STRING Heike
7936: PPUSH
7937: CALL_OW 104
// if un in apeSoldGroup then
7941: LD_VAR 0 1
7945: PUSH
7946: LD_EXP 42
7950: IN
7951: IFFALSE 7969
// apeSoldGroup := apeSoldGroup diff un ;
7953: LD_ADDR_EXP 42
7957: PUSH
7958: LD_EXP 42
7962: PUSH
7963: LD_VAR 0 1
7967: DIFF
7968: ST_TO_ADDR
// if un in apeEngGroup then
7969: LD_VAR 0 1
7973: PUSH
7974: LD_EXP 43
7978: IN
7979: IFFALSE 7997
// apeEngGroup := apeEngGroup diff un ;
7981: LD_ADDR_EXP 43
7985: PUSH
7986: LD_EXP 43
7990: PUSH
7991: LD_VAR 0 1
7995: DIFF
7996: ST_TO_ADDR
// if un in oilBaseGuard then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 38
8006: IN
8007: IFFALSE 8025
// oilBaseGuard := oilBaseGuard diff un ;
8009: LD_ADDR_EXP 38
8013: PUSH
8014: LD_EXP 38
8018: PUSH
8019: LD_VAR 0 1
8023: DIFF
8024: ST_TO_ADDR
// if un in ruNorthGroup then
8025: LD_VAR 0 1
8029: PUSH
8030: LD_EXP 39
8034: IN
8035: IFFALSE 8053
// ruNorthGroup := ruNorthGroup diff un ;
8037: LD_ADDR_EXP 39
8041: PUSH
8042: LD_EXP 39
8046: PUSH
8047: LD_VAR 0 1
8051: DIFF
8052: ST_TO_ADDR
// if un in ruSouthGroup then
8053: LD_VAR 0 1
8057: PUSH
8058: LD_EXP 40
8062: IN
8063: IFFALSE 8081
// ruSouthGroup := ruSouthGroup diff un ;
8065: LD_ADDR_EXP 40
8069: PUSH
8070: LD_EXP 40
8074: PUSH
8075: LD_VAR 0 1
8079: DIFF
8080: ST_TO_ADDR
// if un in ruConvoySquad then
8081: LD_VAR 0 1
8085: PUSH
8086: LD_EXP 41
8090: IN
8091: IFFALSE 8109
// ruConvoySquad := ruConvoySquad diff un ;
8093: LD_ADDR_EXP 41
8097: PUSH
8098: LD_EXP 41
8102: PUSH
8103: LD_VAR 0 1
8107: DIFF
8108: ST_TO_ADDR
// end ;
8109: PPOPN 1
8111: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_VAR 0 2
8121: PPUSH
8122: CALL 14793 0 2
// if GetWeapon ( veh ) = ar_radar then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 264
8135: PUSH
8136: LD_INT 30
8138: EQUAL
8139: IFFALSE 8149
// radarConstructed := true ;
8141: LD_ADDR_EXP 13
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 264
8158: PUSH
8159: LD_INT 26
8161: EQUAL
8162: IFFALSE 8172
// flamethrowerBuilt := true ;
8164: LD_ADDR_EXP 20
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// end ;
8172: PPOPN 2
8174: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8175: LD_ADDR_EXP 18
8179: PUSH
8180: LD_EXP 18
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: ST_TO_ADDR
// if oldId in ruConvoySquad then
8189: LD_VAR 0 2
8193: PUSH
8194: LD_EXP 41
8198: IN
8199: IFFALSE 8217
// ruConvoySquad := ruConvoySquad diff oldId ;
8201: LD_ADDR_EXP 41
8205: PUSH
8206: LD_EXP 41
8210: PUSH
8211: LD_VAR 0 2
8215: DIFF
8216: ST_TO_ADDR
// if newId in ruConvoySquad then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 41
8226: IN
8227: IFFALSE 8245
// ruConvoySquad := ruConvoySquad diff newId ;
8229: LD_ADDR_EXP 41
8233: PUSH
8234: LD_EXP 41
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// end ; end_of_file
8245: PPOPN 4
8247: END
// export function Action ; var i , p , un , veh , tmp ; begin
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
// InGameOn ;
8256: CALL_OW 8
// music_nat := 2 ;
8260: LD_ADDR_OWVAR 71
8264: PUSH
8265: LD_INT 2
8267: ST_TO_ADDR
// music_class := music_recon ;
8268: LD_ADDR_OWVAR 72
8272: PUSH
8273: LD_INT 3
8275: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8276: LD_INT 7
8278: PPUSH
8279: LD_INT 6
8281: PPUSH
8282: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8286: LD_INT 7
8288: PPUSH
8289: LD_INT 6
8291: PPUSH
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 30
8297: NEG
8298: PPUSH
8299: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8303: LD_ADDR_VAR 0 6
8307: PUSH
8308: LD_EXP 21
8312: PUSH
8313: LD_EXP 22
8317: PUSH
8318: LD_EXP 23
8322: PUSH
8323: LD_EXP 24
8327: PUSH
8328: LD_EXP 25
8332: PUSH
8333: LD_EXP 26
8337: PUSH
8338: LD_EXP 28
8342: PUSH
8343: LD_EXP 33
8347: PUSH
8348: LD_EXP 27
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: ST_TO_ADDR
// tmp := tmp diff 0 ;
8364: LD_ADDR_VAR 0 6
8368: PUSH
8369: LD_VAR 0 6
8373: PUSH
8374: LD_INT 0
8376: DIFF
8377: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8378: LD_ADDR_VAR 0 6
8382: PUSH
8383: LD_VAR 0 6
8387: PPUSH
8388: LD_INT 3
8390: PPUSH
8391: CALL 70569 0 2
8395: ST_TO_ADDR
// for i in heikeVehicles do
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_EXP 35
8405: PUSH
8406: FOR_IN
8407: IFFALSE 8606
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8409: LD_INT 5
8411: PPUSH
8412: LD_VAR 0 2
8416: PUSH
8417: LD_INT 5
8419: ARRAY
8420: PPUSH
8421: LD_VAR 0 2
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 2
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PPUSH
8439: LD_VAR 0 2
8443: PUSH
8444: LD_INT 3
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 2
8452: PUSH
8453: LD_INT 4
8455: ARRAY
8456: PPUSH
8457: LD_INT 34
8459: PPUSH
8460: CALL 439 0 7
// veh := CreateVehicle ;
8464: LD_ADDR_VAR 0 5
8468: PUSH
8469: CALL_OW 45
8473: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8474: LD_VAR 0 2
8478: PUSH
8479: LD_INT 4
8481: ARRAY
8482: PUSH
8483: LD_INT 51
8485: PUSH
8486: LD_INT 32
8488: PUSH
8489: LD_INT 12
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: IN
8497: IFFALSE 8577
// begin if i [ 7 ] [ 1 ] then
8499: LD_VAR 0 2
8503: PUSH
8504: LD_INT 7
8506: ARRAY
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: IFFALSE 8538
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8513: LD_VAR 0 5
8517: PPUSH
8518: LD_INT 1
8520: PPUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 7
8528: ARRAY
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: PPUSH
8534: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8538: LD_VAR 0 2
8542: PUSH
8543: LD_INT 7
8545: ARRAY
8546: PUSH
8547: LD_INT 2
8549: ARRAY
8550: IFFALSE 8577
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_INT 2
8559: PPUSH
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 7
8567: ARRAY
8568: PUSH
8569: LD_INT 2
8571: ARRAY
8572: PPUSH
8573: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8577: LD_VAR 0 5
8581: PPUSH
8582: LD_INT 2
8584: PPUSH
8585: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8589: LD_VAR 0 5
8593: PPUSH
8594: LD_INT 4
8596: PPUSH
8597: LD_INT 0
8599: PPUSH
8600: CALL_OW 49
// end ;
8604: GO 8406
8606: POP
8607: POP
// if tmp then
8608: LD_VAR 0 6
8612: IFFALSE 8722
// begin p := 0 ;
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// for i in tmp do
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_VAR 0 6
8631: PUSH
8632: FOR_IN
8633: IFFALSE 8720
// begin p := p + 1 ;
8635: LD_ADDR_VAR 0 3
8639: PUSH
8640: LD_VAR 0 3
8644: PUSH
8645: LD_INT 1
8647: PLUS
8648: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8664: LD_VAR 0 2
8668: PPUSH
8669: LD_INT 26
8671: PPUSH
8672: LD_INT 9
8674: PPUSH
8675: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8679: LD_VAR 0 3
8683: PUSH
8684: LD_EXP 35
8688: GREATEREQUAL
8689: PUSH
8690: LD_VAR 0 2
8694: PPUSH
8695: CALL_OW 257
8699: PUSH
8700: LD_INT 3
8702: EQUAL
8703: AND
8704: IFFALSE 8718
// SetClass ( i , 1 ) ;
8706: LD_VAR 0 2
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: CALL_OW 336
// end ;
8718: GO 8632
8720: POP
8721: POP
// end ; if heikeSecondSquad then
8722: LD_EXP 34
8726: IFFALSE 8840
// for i in heikeSecondSquad do
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_EXP 34
8737: PUSH
8738: FOR_IN
8739: IFFALSE 8838
// begin p := p + 1 ;
8741: LD_ADDR_VAR 0 3
8745: PUSH
8746: LD_VAR 0 3
8750: PUSH
8751: LD_INT 1
8753: PLUS
8754: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8755: LD_VAR 0 2
8759: PPUSH
8760: LD_INT 6
8762: PPUSH
8763: LD_INT 0
8765: PPUSH
8766: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8770: LD_VAR 0 2
8774: PPUSH
8775: LD_INT 26
8777: PPUSH
8778: LD_INT 9
8780: PPUSH
8781: CALL_OW 118
// ForceSleep ( i , true ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 1
8792: PPUSH
8793: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8797: LD_VAR 0 3
8801: PUSH
8802: LD_EXP 35
8806: GREATEREQUAL
8807: PUSH
8808: LD_VAR 0 2
8812: PPUSH
8813: CALL_OW 257
8817: PUSH
8818: LD_INT 3
8820: EQUAL
8821: AND
8822: IFFALSE 8836
// SetClass ( i , 1 ) ;
8824: LD_VAR 0 2
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: CALL_OW 336
// end ;
8836: GO 8738
8838: POP
8839: POP
// if heikeApes then
8840: LD_EXP 36
8844: IFFALSE 8887
// for i in heikeApes do
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_EXP 36
8855: PUSH
8856: FOR_IN
8857: IFFALSE 8885
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8859: LD_VAR 0 2
8863: PPUSH
8864: LD_INT 7
8866: PPUSH
8867: LD_INT 0
8869: PPUSH
8870: CALL_OW 49
// ComHold ( i ) ;
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 140
// end ;
8883: GO 8856
8885: POP
8886: POP
// if Kurt then
8887: LD_EXP 32
8891: IFFALSE 8923
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8893: LD_EXP 32
8897: PPUSH
8898: LD_INT 8
8900: PPUSH
8901: LD_INT 0
8903: PPUSH
8904: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8908: LD_EXP 32
8912: PPUSH
8913: LD_INT 42
8915: PPUSH
8916: LD_INT 32
8918: PPUSH
8919: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8923: LD_INT 70
8925: PPUSH
8926: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8930: LD_EXP 21
8934: PPUSH
8935: LD_STRING DH-Start-1
8937: PPUSH
8938: CALL_OW 88
// if Givi then
8942: LD_EXP 22
8946: IFFALSE 9209
// begin Say ( Givi , DG-Start-2-5 ) ;
8948: LD_EXP 22
8952: PPUSH
8953: LD_STRING DG-Start-2-5
8955: PPUSH
8956: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8960: LD_EXP 21
8964: PPUSH
8965: LD_STRING DH-Start-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8972: LD_EXP 21
8976: PPUSH
8977: LD_STRING DH-Start-4
8979: PPUSH
8980: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8984: LD_EXP 22
8988: PPUSH
8989: LD_STRING DG-Start-5
8991: PPUSH
8992: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8996: LD_EXP 21
9000: PPUSH
9001: LD_STRING DH-Start-6
9003: PPUSH
9004: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9008: LD_EXP 22
9012: PPUSH
9013: LD_STRING DG-Start-7
9015: PPUSH
9016: CALL_OW 88
// if Mike then
9020: LD_EXP 23
9024: IFFALSE 9197
// begin Say ( Mike , DM-Start-8 ) ;
9026: LD_EXP 23
9030: PPUSH
9031: LD_STRING DM-Start-8
9033: PPUSH
9034: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9038: LD_EXP 23
9042: PPUSH
9043: LD_STRING DM-Start-9
9045: PPUSH
9046: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9050: LD_EXP 22
9054: PPUSH
9055: LD_STRING DG-Start-10
9057: PPUSH
9058: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9062: LD_EXP 22
9066: PPUSH
9067: LD_STRING DG-Start-11
9069: PPUSH
9070: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9074: LD_EXP 21
9078: PPUSH
9079: LD_STRING DH-Start-12
9081: PPUSH
9082: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9086: LD_EXP 22
9090: PPUSH
9091: LD_STRING DG-Start-13
9093: PPUSH
9094: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9098: LD_EXP 22
9102: PPUSH
9103: LD_STRING DG-Start-14
9105: PPUSH
9106: CALL_OW 88
// if Kaia then
9110: LD_EXP 26
9114: IFFALSE 9197
// begin Say ( Kaia , DK-Start-15 ) ;
9116: LD_EXP 26
9120: PPUSH
9121: LD_STRING DK-Start-15
9123: PPUSH
9124: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9128: LD_EXP 26
9132: PPUSH
9133: LD_STRING DK-Start-16
9135: PPUSH
9136: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9140: LD_EXP 26
9144: PPUSH
9145: LD_STRING DK-Start-17
9147: PPUSH
9148: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9152: LD_INT 10
9154: PPUSH
9155: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9159: LD_EXP 22
9163: PPUSH
9164: LD_EXP 26
9168: PPUSH
9169: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9173: LD_EXP 22
9177: PPUSH
9178: LD_STRING DG-Start-18
9180: PPUSH
9181: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9185: LD_EXP 26
9189: PPUSH
9190: LD_STRING DK-Start-19
9192: PPUSH
9193: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9197: LD_EXP 21
9201: PPUSH
9202: LD_STRING DH-Start-20
9204: PPUSH
9205: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9209: LD_INT 70
9211: PPUSH
9212: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9216: LD_EXP 29
9220: PPUSH
9221: LD_STRING DShar-Start-21
9223: PPUSH
9224: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9228: LD_EXP 21
9232: PPUSH
9233: LD_STRING DH-Start-22
9235: PPUSH
9236: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9240: LD_EXP 29
9244: PPUSH
9245: LD_STRING DShar-Start-23
9247: PPUSH
9248: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9252: LD_EXP 29
9256: PPUSH
9257: LD_STRING DShar-Start-24
9259: PPUSH
9260: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9264: LD_EXP 29
9268: PPUSH
9269: LD_STRING DShar-Start-25
9271: PPUSH
9272: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9276: LD_EXP 29
9280: PPUSH
9281: LD_STRING DShar-Start-26
9283: PPUSH
9284: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9288: LD_EXP 21
9292: PPUSH
9293: LD_STRING DH-Start-27
9295: PPUSH
9296: CALL_OW 88
// if Kaia then
9300: LD_EXP 26
9304: IFFALSE 9346
// begin ComTurnUnit ( Heike , Kaia ) ;
9306: LD_EXP 21
9310: PPUSH
9311: LD_EXP 26
9315: PPUSH
9316: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9320: LD_EXP 26
9324: PPUSH
9325: LD_STRING DK-Start-28
9327: PPUSH
9328: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9332: LD_EXP 21
9336: PPUSH
9337: LD_STRING DH-Start-29
9339: PPUSH
9340: CALL_OW 88
// end else
9344: GO 9358
// Say ( Heike , DH-Start-a-28 ) ;
9346: LD_EXP 21
9350: PPUSH
9351: LD_STRING DH-Start-a-28
9353: PPUSH
9354: CALL_OW 88
// if Givi then
9358: LD_EXP 22
9362: IFFALSE 9597
// begin ComTurnUnit ( Heike , Givi ) ;
9364: LD_EXP 21
9368: PPUSH
9369: LD_EXP 22
9373: PPUSH
9374: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9378: LD_EXP 22
9382: PPUSH
9383: LD_EXP 21
9387: PPUSH
9388: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9392: LD_EXP 21
9396: PPUSH
9397: LD_STRING DH-Start-30
9399: PPUSH
9400: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9404: LD_EXP 21
9408: PPUSH
9409: LD_STRING DH-Start-31
9411: PPUSH
9412: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9416: LD_EXP 22
9420: PPUSH
9421: LD_STRING DG-Start-32
9423: PPUSH
9424: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9428: LD_EXP 21
9432: PPUSH
9433: LD_STRING DH-Start-33
9435: PPUSH
9436: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9440: LD_EXP 22
9444: PPUSH
9445: LD_STRING DG-Start-34
9447: PPUSH
9448: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9452: LD_EXP 22
9456: PPUSH
9457: LD_STRING DG-Start-35
9459: PPUSH
9460: CALL_OW 88
// if Kurt and not dialogue_skipped then
9464: LD_EXP 32
9468: PUSH
9469: LD_OWVAR 59
9473: NOT
9474: AND
9475: IFFALSE 9506
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9477: LD_EXP 32
9481: PPUSH
9482: LD_INT 28
9484: PPUSH
9485: LD_INT 13
9487: PPUSH
9488: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9492: LD_EXP 32
9496: PPUSH
9497: LD_EXP 21
9501: PPUSH
9502: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9506: LD_EXP 22
9510: PPUSH
9511: LD_STRING DG-Start-36
9513: PPUSH
9514: CALL_OW 88
// if Kurt then
9518: LD_EXP 32
9522: IFFALSE 9595
// begin if not Givi then
9524: LD_EXP 22
9528: NOT
9529: IFFALSE 9545
// Say ( Kurt , DKs-Start-37-a ) else
9531: LD_EXP 32
9535: PPUSH
9536: LD_STRING DKs-Start-37-a
9538: PPUSH
9539: CALL_OW 88
9543: GO 9557
// Say ( Kurt , DKs-Start-37 ) ;
9545: LD_EXP 32
9549: PPUSH
9550: LD_STRING DKs-Start-37
9552: PPUSH
9553: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9557: LD_EXP 32
9561: PPUSH
9562: LD_STRING DKs-Start-38
9564: PPUSH
9565: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9569: LD_EXP 21
9573: PPUSH
9574: LD_EXP 32
9578: PPUSH
9579: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9583: LD_EXP 21
9587: PPUSH
9588: LD_STRING DH-Start-39
9590: PPUSH
9591: CALL_OW 88
// end ; end else
9595: GO 9626
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9597: LD_EXP 34
9601: PPUSH
9602: LD_STRING DArm-Start-a-37
9604: PPUSH
9605: LD_STRING DArf-Start-a-37
9607: PPUSH
9608: CALL 1198 0 3
9612: IFFALSE 9626
// Say ( Heike , DH-Start-39 ) ;
9614: LD_EXP 21
9618: PPUSH
9619: LD_STRING DH-Start-39
9621: PPUSH
9622: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9626: LD_INT 44
9628: PPUSH
9629: LD_INT 25
9631: PPUSH
9632: CALL_OW 428
9636: IFFALSE 9653
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9638: LD_INT 44
9640: PPUSH
9641: LD_INT 25
9643: PPUSH
9644: CALL_OW 428
9648: PPUSH
9649: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9653: LD_EXP 30
9657: PPUSH
9658: LD_INT 5
9660: PPUSH
9661: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9665: LD_EXP 30
9669: PPUSH
9670: LD_INT 44
9672: PPUSH
9673: LD_INT 25
9675: PPUSH
9676: LD_INT 0
9678: PPUSH
9679: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9683: LD_EXP 30
9687: PPUSH
9688: LD_INT 29
9690: PPUSH
9691: LD_INT 12
9693: PPUSH
9694: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9698: LD_INT 35
9700: PPUSH
9701: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9705: LD_OWVAR 59
9709: PUSH
9710: LD_EXP 21
9714: PPUSH
9715: LD_EXP 30
9719: PPUSH
9720: CALL_OW 296
9724: PUSH
9725: LD_INT 8
9727: LESS
9728: OR
9729: PUSH
9730: LD_EXP 30
9734: PPUSH
9735: LD_INT 26
9737: PPUSH
9738: LD_INT 9
9740: PPUSH
9741: CALL_OW 297
9745: PUSH
9746: LD_INT 6
9748: LESS
9749: OR
9750: IFFALSE 9698
// Say ( Olaf , DO-Scout-1 ) ;
9752: LD_EXP 30
9756: PPUSH
9757: LD_STRING DO-Scout-1
9759: PPUSH
9760: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9764: LD_EXP 30
9768: PPUSH
9769: LD_EXP 21
9773: PPUSH
9774: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_VAR 0 6
9787: PUSH
9788: LD_EXP 34
9792: UNION
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9813
// ComTurnUnit ( i , Olaf ) ;
9797: LD_VAR 0 2
9801: PPUSH
9802: LD_EXP 30
9806: PPUSH
9807: CALL_OW 119
9811: GO 9794
9813: POP
9814: POP
// wait ( 0 0$0.3 ) ;
9815: LD_INT 10
9817: PPUSH
9818: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9822: LD_EXP 21
9826: PPUSH
9827: LD_EXP 30
9831: PPUSH
9832: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9836: LD_EXP 21
9840: PPUSH
9841: LD_EXP 30
9845: PPUSH
9846: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9850: LD_EXP 21
9854: PPUSH
9855: LD_STRING DH-Scout-2
9857: PPUSH
9858: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9862: LD_EXP 30
9866: PPUSH
9867: LD_STRING DO-Scout-3
9869: PPUSH
9870: CALL_OW 88
// if Mike and Givi then
9874: LD_EXP 23
9878: PUSH
9879: LD_EXP 22
9883: AND
9884: IFFALSE 9900
// Say ( Olaf , DO-Scout-4 ) else
9886: LD_EXP 30
9890: PPUSH
9891: LD_STRING DO-Scout-4
9893: PPUSH
9894: CALL_OW 88
9898: GO 10000
// begin if Mike then
9900: LD_EXP 23
9904: IFFALSE 9932
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9906: LD_EXP 30
9910: PPUSH
9911: LD_STRING DO-Scout-a-4
9913: PPUSH
9914: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9918: LD_EXP 21
9922: PPUSH
9923: LD_STRING DH-Scout-a-5
9925: PPUSH
9926: CALL_OW 88
// end else
9930: GO 10000
// if Givi then
9932: LD_EXP 22
9936: IFFALSE 9964
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9938: LD_EXP 30
9942: PPUSH
9943: LD_STRING DO-Scout-b-4
9945: PPUSH
9946: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9950: LD_EXP 21
9954: PPUSH
9955: LD_STRING DH-Scout-b-5
9957: PPUSH
9958: CALL_OW 88
// end else
9962: GO 10000
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9964: LD_EXP 30
9968: PPUSH
9969: LD_STRING DO-Scout-f-4
9971: PPUSH
9972: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9976: LD_EXP 21
9980: PPUSH
9981: LD_STRING DH-Scout-f-5
9983: PPUSH
9984: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9988: LD_EXP 30
9992: PPUSH
9993: LD_STRING DO-Scout-f-6
9995: PPUSH
9996: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10000: LD_EXP 21
10004: PPUSH
10005: LD_STRING DH-Scout-5
10007: PPUSH
10008: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10012: LD_EXP 30
10016: PPUSH
10017: LD_STRING DO-Scout-6
10019: PPUSH
10020: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10024: LD_EXP 30
10028: PPUSH
10029: LD_STRING DO-Scout-7
10031: PPUSH
10032: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10036: LD_EXP 21
10040: PPUSH
10041: LD_STRING DH-Scout-8
10043: PPUSH
10044: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10048: LD_EXP 21
10052: PPUSH
10053: LD_STRING DH-Scout-9
10055: PPUSH
10056: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10060: LD_EXP 30
10064: PPUSH
10065: LD_STRING DO-Scout-10
10067: PPUSH
10068: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10072: LD_EXP 30
10076: PPUSH
10077: LD_STRING DO-Scout-12
10079: PPUSH
10080: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10084: LD_EXP 30
10088: PPUSH
10089: LD_STRING DO-Scout-13
10091: PPUSH
10092: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10096: LD_EXP 30
10100: PPUSH
10101: LD_STRING DO-Scout-14
10103: PPUSH
10104: CALL_OW 88
// if Givi then
10108: LD_EXP 22
10112: IFFALSE 10138
// begin Say ( Givi , DG-Scout-15 ) ;
10114: LD_EXP 22
10118: PPUSH
10119: LD_STRING DG-Scout-15
10121: PPUSH
10122: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10126: LD_EXP 26
10130: PPUSH
10131: LD_STRING DK-Scout-16
10133: PPUSH
10134: CALL_OW 88
// end ; if not dialogue_skipped then
10138: LD_OWVAR 59
10142: NOT
10143: IFFALSE 10264
// begin async ;
10145: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DO-Scout-17
10153: PPUSH
10154: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10158: LD_INT 55
10160: PPUSH
10161: LD_INT 77
10163: PPUSH
10164: LD_INT 2
10166: PPUSH
10167: LD_INT 6
10169: NEG
10170: PPUSH
10171: CALL 1147 0 4
// wait ( 10 ) ;
10175: LD_INT 10
10177: PPUSH
10178: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10182: LD_INT 55
10184: PPUSH
10185: LD_INT 77
10187: PPUSH
10188: CALL_OW 84
// wait ( 0 0$10 ) ;
10192: LD_INT 350
10194: PPUSH
10195: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10199: LD_EXP 30
10203: PPUSH
10204: LD_STRING DO-Scout-18
10206: PPUSH
10207: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10211: LD_INT 204
10213: PPUSH
10214: LD_INT 107
10216: PPUSH
10217: LD_INT 2
10219: PPUSH
10220: LD_INT 12
10222: NEG
10223: PPUSH
10224: CALL 1147 0 4
// wait ( 10 ) ;
10228: LD_INT 10
10230: PPUSH
10231: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10235: LD_INT 204
10237: PPUSH
10238: LD_INT 107
10240: PPUSH
10241: CALL_OW 84
// wait ( 0 0$10 ) ;
10245: LD_INT 350
10247: PPUSH
10248: CALL_OW 67
// sync ;
10252: SYNC
// CenterNowOnUnits ( Heike ) ;
10253: LD_EXP 21
10257: PPUSH
10258: CALL_OW 87
// end else
10262: GO 10298
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10264: LD_INT 55
10266: PPUSH
10267: LD_INT 77
10269: PPUSH
10270: LD_INT 2
10272: PPUSH
10273: LD_INT 6
10275: NEG
10276: PPUSH
10277: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10281: LD_INT 204
10283: PPUSH
10284: LD_INT 107
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 12
10292: NEG
10293: PPUSH
10294: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10298: LD_EXP 30
10302: PPUSH
10303: LD_STRING DO-Scout-19
10305: PPUSH
10306: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10310: LD_EXP 30
10314: PPUSH
10315: LD_STRING DO-Scout-20
10317: PPUSH
10318: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10322: LD_EXP 21
10326: PPUSH
10327: LD_STRING DH-Scout-21
10329: PPUSH
10330: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10334: LD_EXP 21
10338: PPUSH
10339: LD_STRING DH-Scout-22
10341: PPUSH
10342: CALL_OW 88
// InGameOff ;
10346: CALL_OW 9
// if heikeSecondSquad then
10350: LD_EXP 34
10354: IFFALSE 10368
// ForceSleep ( heikeSecondSquad , false ) ;
10356: LD_EXP 34
10360: PPUSH
10361: LD_INT 0
10363: PPUSH
10364: CALL_OW 585
// if Givi then
10368: LD_EXP 22
10372: IFFALSE 10387
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10374: LD_INT 13
10376: PPUSH
10377: LD_INT 2
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10387: LD_STRING Road
10389: PPUSH
10390: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10394: LD_ADDR_VAR 0 2
10398: PUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 5
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 21
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10445
// SetSide ( i , 2 ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: LD_INT 2
10438: PPUSH
10439: CALL_OW 235
10443: GO 10428
10445: POP
10446: POP
// SaveForQuickRestart ;
10447: CALL_OW 22
// music_class := music_auto ;
10451: LD_ADDR_OWVAR 72
10455: PUSH
10456: LD_INT 0
10458: ST_TO_ADDR
// end ;
10459: LD_VAR 0 1
10463: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10464: LD_INT 2
10466: PPUSH
10467: LD_INT 9
10469: PPUSH
10470: CALL_OW 294
10474: IFFALSE 10839
10476: GO 10478
10478: DISABLE
// begin DialogueOn ;
10479: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10483: LD_INT 111
10485: PPUSH
10486: LD_INT 72
10488: PPUSH
10489: LD_INT 2
10491: PPUSH
10492: LD_INT 20
10494: NEG
10495: PPUSH
10496: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10500: LD_INT 111
10502: PPUSH
10503: LD_INT 72
10505: PPUSH
10506: LD_INT 2
10508: PPUSH
10509: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10513: LD_INT 111
10515: PPUSH
10516: LD_INT 72
10518: PPUSH
10519: CALL_OW 86
// if IsOk ( Kamil ) then
10523: LD_EXP 25
10527: PPUSH
10528: CALL_OW 302
10532: IFFALSE 10649
// begin Say ( Kamil , DKam-Cross-1 ) ;
10534: LD_EXP 25
10538: PPUSH
10539: LD_STRING DKam-Cross-1
10541: PPUSH
10542: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10546: LD_EXP 25
10550: PPUSH
10551: LD_STRING DKam-Cross-2
10553: PPUSH
10554: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10558: LD_EXP 25
10562: PPUSH
10563: LD_STRING DKam-Cross-3
10565: PPUSH
10566: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10570: LD_EXP 25
10574: PPUSH
10575: LD_STRING DKam-Cross-4
10577: PPUSH
10578: CALL_OW 88
// if IsOk ( Ibrahim ) then
10582: LD_EXP 24
10586: PPUSH
10587: CALL_OW 302
10591: IFFALSE 10647
// begin if ibrahimJoinedIn04 then
10593: LD_EXP 4
10597: IFFALSE 10611
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10599: LD_EXP 24
10603: PPUSH
10604: LD_STRING DI-Cross-b-5
10606: PPUSH
10607: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10611: LD_EXP 24
10615: PPUSH
10616: LD_STRING DI-Cross-b-6
10618: PPUSH
10619: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10623: LD_EXP 24
10627: PPUSH
10628: LD_STRING DI-Cross-b-7
10630: PPUSH
10631: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10635: LD_EXP 25
10639: PPUSH
10640: LD_STRING DKam-Cross-8
10642: PPUSH
10643: CALL_OW 88
// end ; end else
10647: GO 10807
// if IsOk ( Sophia ) then
10649: LD_EXP 27
10653: PPUSH
10654: CALL_OW 302
10658: IFFALSE 10775
// begin Say ( Sophia , DS-Cross-1 ) ;
10660: LD_EXP 27
10664: PPUSH
10665: LD_STRING DS-Cross-1
10667: PPUSH
10668: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10672: LD_EXP 27
10676: PPUSH
10677: LD_STRING DS-Cross-2
10679: PPUSH
10680: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10684: LD_EXP 27
10688: PPUSH
10689: LD_STRING DS-Cross-3
10691: PPUSH
10692: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10696: LD_EXP 27
10700: PPUSH
10701: LD_STRING DS-Cross-4
10703: PPUSH
10704: CALL_OW 88
// if IsOk ( Ibrahim ) then
10708: LD_EXP 24
10712: PPUSH
10713: CALL_OW 302
10717: IFFALSE 10773
// begin if ibrahimJoinedIn04 then
10719: LD_EXP 4
10723: IFFALSE 10737
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10725: LD_EXP 24
10729: PPUSH
10730: LD_STRING DI-Cross-b-5
10732: PPUSH
10733: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10737: LD_EXP 24
10741: PPUSH
10742: LD_STRING DI-Cross-b-6
10744: PPUSH
10745: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10749: LD_EXP 24
10753: PPUSH
10754: LD_STRING DI-Cross-b-7
10756: PPUSH
10757: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10761: LD_EXP 27
10765: PPUSH
10766: LD_STRING DS-Cross-8
10768: PPUSH
10769: CALL_OW 88
// end ; end else
10773: GO 10807
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10775: LD_EXP 34
10779: PPUSH
10780: LD_INT 50
10782: PUSH
10783: EMPTY
10784: LIST
10785: PPUSH
10786: CALL_OW 72
10790: IFFALSE 10807
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10792: LD_EXP 34
10796: PPUSH
10797: LD_STRING DArm-Cross-c-1
10799: PPUSH
10800: LD_STRING DArf-Cross-c-1
10802: PPUSH
10803: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10807: LD_INT 85
10809: PPUSH
10810: LD_INT 2
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 322
// DialogueOff ;
10820: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10824: LD_STRING Crane
10826: PPUSH
10827: CALL_OW 337
// spottedCrossRoad := true ;
10831: LD_ADDR_EXP 8
10835: PUSH
10836: LD_INT 1
10838: ST_TO_ADDR
// end ;
10839: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10840: LD_INT 22
10842: PUSH
10843: LD_INT 2
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 2
10852: PUSH
10853: LD_INT 30
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 30
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PPUSH
10882: CALL_OW 69
10886: PUSH
10887: LD_EXP 26
10891: PPUSH
10892: CALL_OW 302
10896: PUSH
10897: LD_EXP 34
10901: OR
10902: AND
10903: IFFALSE 11115
10905: GO 10907
10907: DISABLE
// begin DialogueOn ;
10908: CALL_OW 6
// if Kaia then
10912: LD_EXP 26
10916: IFFALSE 10929
// CenterNowOnUnits ( Kaia ) else
10918: LD_EXP 26
10922: PPUSH
10923: CALL_OW 87
10927: GO 10938
// CenterNowOnUnits ( Heike ) ;
10929: LD_EXP 21
10933: PPUSH
10934: CALL_OW 87
// if IsOk ( Kaia ) then
10938: LD_EXP 26
10942: PPUSH
10943: CALL_OW 302
10947: IFFALSE 10963
// Say ( Kaia , DK-Cam-1 ) else
10949: LD_EXP 26
10953: PPUSH
10954: LD_STRING DK-Cam-1
10956: PPUSH
10957: CALL_OW 88
10961: GO 10978
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10963: LD_EXP 34
10967: PPUSH
10968: LD_STRING DArm-Cam-1
10970: PPUSH
10971: LD_STRING DArf-Cam-1
10973: PPUSH
10974: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
10978: LD_EXP 21
10982: PPUSH
10983: LD_STRING DH-Cam-2
10985: PPUSH
10986: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10990: LD_EXP 21
10994: PPUSH
10995: LD_STRING DH-Cam-3
10997: PPUSH
10998: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11002: LD_EXP 21
11006: PPUSH
11007: LD_STRING DH-Cam-4
11009: PPUSH
11010: CALL_OW 88
// if IsOk ( Kaia ) then
11014: LD_EXP 26
11018: PPUSH
11019: CALL_OW 302
11023: IFFALSE 11039
// Say ( Kaia , DK-Cam-5 ) else
11025: LD_EXP 26
11029: PPUSH
11030: LD_STRING DK-Cam-5
11032: PPUSH
11033: CALL_OW 88
11037: GO 11054
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11039: LD_EXP 34
11043: PPUSH
11044: LD_STRING DArm-Cam-5
11046: PPUSH
11047: LD_STRING DArf-Cam-5
11049: PPUSH
11050: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11054: LD_EXP 30
11058: PPUSH
11059: LD_STRING DO-Cam-6
11061: PPUSH
11062: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11066: LD_EXP 30
11070: PPUSH
11071: LD_STRING DO-Cam-7
11073: PPUSH
11074: CALL_OW 88
// DialogueOff ;
11078: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11082: LD_STRING Radar
11084: PPUSH
11085: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11089: LD_INT 6
11091: PPUSH
11092: LD_INT 2
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11102: LD_INT 20
11104: PPUSH
11105: LD_INT 2
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 324
// end ;
11115: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11116: LD_INT 22
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 34
11131: PUSH
11132: LD_INT 30
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 35
11141: PUSH
11142: LD_INT 30
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: IFFALSE 11174
11164: GO 11166
11166: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11167: LD_STRING RadarDone
11169: PPUSH
11170: CALL_OW 337
11174: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11175: LD_INT 22
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 34
11187: PUSH
11188: LD_INT 88
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 69
11203: IFFALSE 11215
11205: GO 11207
11207: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11208: LD_STRING CraneDone
11210: PPUSH
11211: CALL_OW 337
11215: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11216: LD_EXP 30
11220: PPUSH
11221: CALL_OW 302
11225: PUSH
11226: LD_EXP 33
11230: PPUSH
11231: CALL_OW 302
11235: AND
11236: PUSH
11237: LD_INT 6
11239: PPUSH
11240: LD_INT 2
11242: PPUSH
11243: CALL_OW 321
11247: PUSH
11248: LD_INT 2
11250: EQUAL
11251: AND
11252: PUSH
11253: LD_EXP 33
11257: PPUSH
11258: LD_EXP 21
11262: PPUSH
11263: CALL_OW 296
11267: PUSH
11268: LD_INT 10
11270: LESS
11271: PUSH
11272: LD_EXP 33
11276: PPUSH
11277: CALL_OW 310
11281: OR
11282: AND
11283: IFFALSE 11497
11285: GO 11287
11287: DISABLE
// begin DialogueOn ;
11288: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_STRING DA-RC-1
11299: PPUSH
11300: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11304: LD_EXP 33
11308: PPUSH
11309: LD_STRING DA-RC-2
11311: PPUSH
11312: CALL_OW 88
// if IsOk ( Kaia ) then
11316: LD_EXP 26
11320: PPUSH
11321: CALL_OW 302
11325: IFFALSE 11399
// begin Say ( Kaia , DK-RC-3 ) ;
11327: LD_EXP 26
11331: PPUSH
11332: LD_STRING DK-RC-3
11334: PPUSH
11335: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11339: LD_EXP 33
11343: PPUSH
11344: LD_STRING DA-RC-4
11346: PPUSH
11347: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11351: LD_EXP 26
11355: PPUSH
11356: LD_STRING DK-RC-5
11358: PPUSH
11359: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11363: LD_EXP 33
11367: PPUSH
11368: LD_STRING DA-RC-6
11370: PPUSH
11371: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11375: LD_EXP 26
11379: PPUSH
11380: LD_STRING DK-RC-7
11382: PPUSH
11383: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11387: LD_EXP 33
11391: PPUSH
11392: LD_STRING DA-RC-8
11394: PPUSH
11395: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11399: LD_EXP 21
11403: PPUSH
11404: LD_STRING DH-RC-9
11406: PPUSH
11407: CALL_OW 88
// if IsOk ( Markov ) then
11411: LD_EXP 28
11415: PPUSH
11416: CALL_OW 302
11420: IFFALSE 11448
// begin Say ( Markov , DMar-RC-10 ) ;
11422: LD_EXP 28
11426: PPUSH
11427: LD_STRING DMar-RC-10
11429: PPUSH
11430: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11434: LD_EXP 28
11438: PPUSH
11439: LD_STRING DMar-RC-11
11441: PPUSH
11442: CALL_OW 88
// end else
11446: GO 11460
// begin Say ( Olaf , DO-RC-a-10 ) ;
11448: LD_EXP 30
11452: PPUSH
11453: LD_STRING DO-RC-a-10
11455: PPUSH
11456: CALL_OW 88
// end ; DialogueOff ;
11460: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11464: LD_STRING RemoteControl
11466: PPUSH
11467: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11471: LD_INT 15
11473: PPUSH
11474: LD_INT 2
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11484: LD_INT 22
11486: PPUSH
11487: LD_INT 2
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 324
// end ;
11497: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11498: LD_INT 12
11500: PPUSH
11501: LD_INT 22
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 70
11515: IFFALSE 11882
11517: GO 11519
11519: DISABLE
11520: LD_INT 0
11522: PPUSH
// begin PrepareWestBase ;
11523: CALL 3916 0 0
// westBaseSpotted := true ;
11527: LD_ADDR_EXP 5
11531: PUSH
11532: LD_INT 1
11534: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11535: LD_INT 70
11537: PPUSH
11538: CALL_OW 67
// InGameOn ;
11542: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11546: LD_INT 56
11548: PPUSH
11549: LD_INT 77
11551: PPUSH
11552: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11556: LD_INT 56
11558: PPUSH
11559: LD_INT 77
11561: PPUSH
11562: LD_INT 2
11564: PPUSH
11565: LD_INT 12
11567: NEG
11568: PPUSH
11569: CALL_OW 330
// wait ( 0 0$2 ) ;
11573: LD_INT 70
11575: PPUSH
11576: CALL_OW 67
// DialogueOn ;
11580: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11584: LD_EXP 21
11588: PPUSH
11589: LD_STRING DH-Rbase-1
11591: PPUSH
11592: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11596: LD_EXP 26
11600: PPUSH
11601: LD_STRING DK-Rbase-2
11603: PPUSH
11604: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11608: LD_EXP 26
11612: PPUSH
11613: LD_STRING DK-Rbase-3
11615: PPUSH
11616: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11620: LD_EXP 26
11624: PPUSH
11625: LD_STRING DK-Rbase-4
11627: PPUSH
11628: CALL_OW 88
// DialogueOff ;
11632: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11636: LD_INT 56
11638: PPUSH
11639: LD_INT 77
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: CALL_OW 331
// InGameOff ;
11649: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11653: LD_INT 35
11655: PPUSH
11656: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11660: LD_EXP 42
11664: NOT
11665: PUSH
11666: LD_EXP 43
11670: NOT
11671: AND
11672: IFFALSE 11653
// wait ( 0 0$2 ) ;
11674: LD_INT 70
11676: PPUSH
11677: CALL_OW 67
// if IsOk ( Kaia ) then
11681: LD_EXP 26
11685: PPUSH
11686: CALL_OW 302
11690: IFFALSE 11805
// begin DialogueOn ;
11692: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11696: LD_INT 56
11698: PPUSH
11699: LD_INT 81
11701: PPUSH
11702: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11706: LD_EXP 26
11710: PPUSH
11711: LD_STRING DK-Rbase-5
11713: PPUSH
11714: CALL_OW 88
// if IsOk ( Givi ) then
11718: LD_EXP 22
11722: PPUSH
11723: CALL_OW 302
11727: IFFALSE 11801
// begin Say ( Givi , DG-Rbase-6 ) ;
11729: LD_EXP 22
11733: PPUSH
11734: LD_STRING DG-Rbase-6
11736: PPUSH
11737: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11741: LD_EXP 22
11745: PPUSH
11746: LD_STRING DG-Rbase-7
11748: PPUSH
11749: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11753: LD_EXP 26
11757: PPUSH
11758: LD_STRING DK-Rbase-8
11760: PPUSH
11761: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11765: LD_EXP 22
11769: PPUSH
11770: LD_STRING DG-Rbase-9
11772: PPUSH
11773: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11777: LD_EXP 22
11781: PPUSH
11782: LD_STRING DG-Rbase-10
11784: PPUSH
11785: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11789: LD_EXP 26
11793: PPUSH
11794: LD_STRING DK-Rbase-11
11796: PPUSH
11797: CALL_OW 88
// end ; DialogueOff ;
11801: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11805: LD_ADDR_VAR 0 1
11809: PUSH
11810: LD_INT 12
11812: PPUSH
11813: LD_INT 22
11815: PUSH
11816: LD_INT 3
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 3
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 70
11841: PUSH
11842: FOR_IN
11843: IFFALSE 11859
// SetSide ( i , 2 ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: LD_INT 2
11852: PPUSH
11853: CALL_OW 235
11857: GO 11842
11859: POP
11860: POP
// westBaseCaptured := true ;
11861: LD_ADDR_EXP 9
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11869: LD_INT 0
11871: PPUSH
11872: LD_INT 2
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: CALL_OW 324
// end ;
11882: PPOPN 1
11884: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11885: LD_EXP 38
11889: NOT
11890: PUSH
11891: LD_INT 10
11893: PPUSH
11894: CALL_OW 255
11898: PUSH
11899: LD_INT 2
11901: EQUAL
11902: OR
11903: IFFALSE 12040
11905: GO 11907
11907: DISABLE
// begin DialogueOn ;
11908: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11912: LD_EXP 21
11916: PPUSH
11917: LD_STRING DH-Goal-1
11919: PPUSH
11920: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11924: LD_EXP 29
11928: PPUSH
11929: LD_STRING DShar-Goal-2
11931: PPUSH
11932: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11936: LD_EXP 21
11940: PPUSH
11941: LD_STRING DH-Goal-3
11943: PPUSH
11944: CALL_OW 88
// if reinforcementsAllowed then
11948: LD_EXP 14
11952: IFFALSE 11978
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11954: LD_EXP 29
11958: PPUSH
11959: LD_STRING DShar-Goal-4
11961: PPUSH
11962: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11966: LD_EXP 21
11970: PPUSH
11971: LD_STRING DH-Goal-5
11973: PPUSH
11974: CALL_OW 88
// end ; DialogueOff ;
11978: CALL_OW 7
// eastBaseCaptured := true ;
11982: LD_ADDR_EXP 10
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11990: LD_STRING BaseCaptured
11992: PPUSH
11993: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11997: LD_INT 10
11999: PPUSH
12000: LD_INT 2
12002: PPUSH
12003: CALL_OW 235
// if not reinforcementsAllowed then
12007: LD_EXP 14
12011: NOT
12012: IFFALSE 12016
// exit ;
12014: GO 12040
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12016: LD_INT 21000
12018: PUSH
12019: LD_INT 1050
12021: NEG
12022: PPUSH
12023: LD_INT 1050
12025: PPUSH
12026: CALL_OW 12
12030: PLUS
12031: PPUSH
12032: CALL_OW 67
// PrepareReinforcements ;
12036: CALL 2174 0 0
// end ;
12040: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12041: LD_INT 22
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 30
12053: PUSH
12054: LD_INT 13
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 69
12069: IFFALSE 12086
12071: GO 12073
12073: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12074: LD_EXP 22
12078: PPUSH
12079: LD_STRING DG-Lab-1
12081: PPUSH
12082: CALL_OW 88
// end ;
12086: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12087: LD_INT 5
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 321
12097: PUSH
12098: LD_INT 2
12100: EQUAL
12101: PUSH
12102: LD_EXP 22
12106: PPUSH
12107: CALL_OW 302
12111: AND
12112: IFFALSE 12173
12114: GO 12116
12116: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12117: LD_EXP 22
12121: PPUSH
12122: LD_STRING DG-Stim-1
12124: PPUSH
12125: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12129: LD_EXP 21
12133: PPUSH
12134: LD_STRING DH-Stim-2
12136: PPUSH
12137: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12141: LD_EXP 22
12145: PPUSH
12146: LD_STRING DG-Stim-3
12148: PPUSH
12149: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12153: LD_EXP 21
12157: PPUSH
12158: LD_STRING DH-Stim-4
12160: PPUSH
12161: CALL_OW 88
// drugsResearched := true ;
12165: LD_ADDR_EXP 11
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// end ;
12173: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12174: LD_EXP 11
12178: IFFALSE 12490
12180: GO 12182
12182: DISABLE
12183: LD_INT 0
12185: PPUSH
12186: PPUSH
12187: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: LD_EXP 21
12197: PUSH
12198: LD_EXP 22
12202: PUSH
12203: LD_EXP 30
12207: PUSH
12208: LD_EXP 28
12212: PUSH
12213: LD_EXP 26
12217: PUSH
12218: LD_EXP 27
12222: PUSH
12223: LD_EXP 32
12227: PUSH
12228: LD_EXP 25
12232: PUSH
12233: LD_EXP 23
12237: PUSH
12238: LD_EXP 24
12242: PUSH
12243: LD_EXP 33
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12261: LD_ADDR_VAR 0 3
12265: PUSH
12266: LD_STRING H
12268: PUSH
12269: LD_STRING G
12271: PUSH
12272: LD_STRING O
12274: PUSH
12275: LD_STRING Mar
12277: PUSH
12278: LD_STRING K
12280: PUSH
12281: LD_STRING S
12283: PUSH
12284: LD_STRING Ks
12286: PUSH
12287: LD_STRING Kam
12289: PUSH
12290: LD_STRING M
12292: PUSH
12293: LD_STRING I
12295: PUSH
12296: LD_STRING A
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12312: LD_INT 35
12314: PPUSH
12315: CALL_OW 67
// for i := tmp downto 1 do
12319: LD_ADDR_VAR 0 1
12323: PUSH
12324: DOUBLE
12325: LD_VAR 0 2
12329: INC
12330: ST_TO_ADDR
12331: LD_INT 1
12333: PUSH
12334: FOR_DOWNTO
12335: IFFALSE 12481
// if GetLives ( tmp [ i ] ) < 250 then
12337: LD_VAR 0 2
12341: PUSH
12342: LD_VAR 0 1
12346: ARRAY
12347: PPUSH
12348: CALL_OW 256
12352: PUSH
12353: LD_INT 250
12355: LESS
12356: IFFALSE 12479
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12358: LD_ADDR_EXP 19
12362: PUSH
12363: LD_EXP 19
12367: PUSH
12368: LD_INT 1
12370: PLUS
12371: ST_TO_ADDR
// DialogueOn ;
12372: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12376: LD_VAR 0 2
12380: PUSH
12381: LD_VAR 0 1
12385: ARRAY
12386: PPUSH
12387: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12391: LD_VAR 0 2
12395: PUSH
12396: LD_VAR 0 1
12400: ARRAY
12401: PPUSH
12402: LD_STRING D
12404: PUSH
12405: LD_VAR 0 3
12409: PUSH
12410: LD_VAR 0 1
12414: ARRAY
12415: STR
12416: PUSH
12417: LD_STRING -Stim-a-1
12419: STR
12420: PPUSH
12421: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: LD_VAR 0 2
12434: PPUSH
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 3
12444: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12445: LD_ADDR_VAR 0 3
12449: PUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 3
12464: ST_TO_ADDR
// drugsTested := true ;
12465: LD_ADDR_EXP 6
12469: PUSH
12470: LD_INT 1
12472: ST_TO_ADDR
// DialogueOff ;
12473: CALL_OW 7
// break ;
12477: GO 12481
// end ;
12479: GO 12334
12481: POP
12482: POP
// until not tmp ;
12483: LD_VAR 0 2
12487: NOT
12488: IFFALSE 12312
// end ;
12490: PPOPN 3
12492: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12493: LD_INT 22
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 34
12505: PUSH
12506: LD_INT 31
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 69
12521: PUSH
12522: LD_INT 22
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 33
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: AND
12551: IFFALSE 12564
12553: GO 12555
12555: DISABLE
// remoteControlConstructed := true ;
12556: LD_ADDR_EXP 12
12560: PUSH
12561: LD_INT 1
12563: ST_TO_ADDR
12564: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12565: LD_EXP 12
12569: IFFALSE 12869
12571: GO 12573
12573: DISABLE
12574: LD_INT 0
12576: PPUSH
12577: PPUSH
12578: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: LD_EXP 21
12588: PUSH
12589: LD_EXP 22
12593: PUSH
12594: LD_EXP 30
12598: PUSH
12599: LD_EXP 28
12603: PUSH
12604: LD_EXP 26
12608: PUSH
12609: LD_EXP 27
12613: PUSH
12614: LD_EXP 32
12618: PUSH
12619: LD_EXP 25
12623: PUSH
12624: LD_EXP 23
12628: PUSH
12629: LD_EXP 24
12633: PUSH
12634: LD_EXP 33
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_STRING H
12659: PUSH
12660: LD_STRING G
12662: PUSH
12663: LD_STRING O
12665: PUSH
12666: LD_STRING Mar
12668: PUSH
12669: LD_STRING K
12671: PUSH
12672: LD_STRING S
12674: PUSH
12675: LD_STRING Ks
12677: PUSH
12678: LD_STRING Kam
12680: PUSH
12681: LD_STRING M
12683: PUSH
12684: LD_STRING I
12686: PUSH
12687: LD_STRING A
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12703: LD_INT 35
12705: PPUSH
12706: CALL_OW 67
// for i := tmp downto 1 do
12710: LD_ADDR_VAR 0 1
12714: PUSH
12715: DOUBLE
12716: LD_VAR 0 2
12720: INC
12721: ST_TO_ADDR
12722: LD_INT 1
12724: PUSH
12725: FOR_DOWNTO
12726: IFFALSE 12860
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12728: LD_VAR 0 2
12732: PUSH
12733: LD_VAR 0 1
12737: ARRAY
12738: PPUSH
12739: CALL_OW 257
12743: PUSH
12744: LD_INT 3
12746: EQUAL
12747: PUSH
12748: LD_VAR 0 2
12752: PUSH
12753: LD_VAR 0 1
12757: ARRAY
12758: PPUSH
12759: CALL_OW 432
12763: AND
12764: IFFALSE 12858
// begin DialogueOn ;
12766: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12770: LD_VAR 0 2
12774: PUSH
12775: LD_VAR 0 1
12779: ARRAY
12780: PPUSH
12781: LD_STRING D
12783: PUSH
12784: LD_VAR 0 3
12788: PUSH
12789: LD_VAR 0 1
12793: ARRAY
12794: STR
12795: PUSH
12796: LD_STRING -RC-a-1
12798: STR
12799: PPUSH
12800: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12804: LD_ADDR_VAR 0 2
12808: PUSH
12809: LD_VAR 0 2
12813: PPUSH
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 3
12823: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_VAR 0 1
12838: PPUSH
12839: CALL_OW 3
12843: ST_TO_ADDR
// DialogueOff ;
12844: CALL_OW 7
// remoteControlTested := true ;
12848: LD_ADDR_EXP 7
12852: PUSH
12853: LD_INT 1
12855: ST_TO_ADDR
// break ;
12856: GO 12860
// end ;
12858: GO 12725
12860: POP
12861: POP
// until not tmp ;
12862: LD_VAR 0 2
12866: NOT
12867: IFFALSE 12703
// end ;
12869: PPOPN 3
12871: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12872: LD_EXP 7
12876: PUSH
12877: LD_EXP 28
12881: PPUSH
12882: CALL_OW 302
12886: AND
12887: IFFALSE 12916
12889: GO 12891
12891: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12892: LD_EXP 28
12896: PPUSH
12897: LD_STRING DMar-RC-a-2
12899: PPUSH
12900: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12904: LD_EXP 28
12908: PPUSH
12909: LD_STRING DMar-RC-a-3
12911: PPUSH
12912: CALL_OW 88
// end ;
12916: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12917: LD_EXP 14
12921: PUSH
12922: LD_EXP 21
12926: PPUSH
12927: LD_EXP 33
12931: PPUSH
12932: CALL_OW 296
12936: PUSH
12937: LD_INT 8
12939: LESS
12940: AND
12941: PUSH
12942: LD_INT 2
12944: PPUSH
12945: CALL_OW 463
12949: NOT
12950: AND
12951: PUSH
12952: LD_EXP 33
12956: PPUSH
12957: CALL_OW 302
12961: AND
12962: PUSH
12963: LD_EXP 21
12967: PPUSH
12968: CALL_OW 302
12972: AND
12973: IFFALSE 13151
12975: GO 12977
12977: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12978: LD_EXP 33
12982: PPUSH
12983: CALL_OW 310
12987: NOT
12988: IFFALSE 13004
// ComTurnUnit ( Aviradze , Heike ) ;
12990: LD_EXP 33
12994: PPUSH
12995: LD_EXP 21
12999: PPUSH
13000: CALL_OW 119
// if not IsInUnit ( Heike ) then
13004: LD_EXP 21
13008: PPUSH
13009: CALL_OW 310
13013: NOT
13014: IFFALSE 13030
// ComTurnUnit ( Heike , Aviradze ) ;
13016: LD_EXP 21
13020: PPUSH
13021: LD_EXP 33
13025: PPUSH
13026: CALL_OW 119
// wait ( 0 0$1 ) ;
13030: LD_INT 35
13032: PPUSH
13033: CALL_OW 67
// DialogueOn ;
13037: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13041: LD_EXP 33
13045: PPUSH
13046: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13050: LD_EXP 21
13054: PPUSH
13055: LD_STRING DH-Beria-1
13057: PPUSH
13058: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13062: LD_EXP 33
13066: PPUSH
13067: LD_STRING DA-Beria-2
13069: PPUSH
13070: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13074: LD_EXP 21
13078: PPUSH
13079: LD_STRING DH-Beria-3
13081: PPUSH
13082: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13086: LD_EXP 33
13090: PPUSH
13091: LD_STRING DA-Beria-4
13093: PPUSH
13094: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13098: LD_EXP 33
13102: PPUSH
13103: LD_STRING DA-Beria-5
13105: PPUSH
13106: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13110: LD_EXP 33
13114: PPUSH
13115: LD_STRING DA-Beria-6
13117: PPUSH
13118: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13122: LD_EXP 21
13126: PPUSH
13127: LD_STRING DA-Beria-7
13129: PPUSH
13130: CALL_OW 88
// DialogueOff ;
13134: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13138: LD_INT 52
13140: PPUSH
13141: LD_INT 2
13143: PPUSH
13144: LD_INT 1
13146: PPUSH
13147: CALL_OW 322
// end ;
13151: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13152: LD_EXP 26
13156: PPUSH
13157: CALL_OW 300
13161: PUSH
13162: LD_EXP 26
13166: PPUSH
13167: CALL_OW 256
13171: PUSH
13172: LD_INT 10
13174: LESS
13175: AND
13176: IFFALSE 13213
13178: GO 13180
13180: DISABLE
// begin DialogueOn ;
13181: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13185: LD_EXP 26
13189: PPUSH
13190: LD_STRING DK-Kdeath-1
13192: PPUSH
13193: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13197: LD_EXP 21
13201: PPUSH
13202: LD_STRING DH-Kdeath-2
13204: PPUSH
13205: CALL_OW 88
// DialogueOff ;
13209: CALL_OW 7
// end ;
13213: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13214: LD_INT 2
13216: PPUSH
13217: LD_EXP 39
13221: PPUSH
13222: CALL 1298 0 2
13226: IFFALSE 13243
13228: GO 13230
13230: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13231: LD_EXP 21
13235: PPUSH
13236: LD_STRING DH-Obj-1
13238: PPUSH
13239: CALL_OW 88
13243: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13244: LD_INT 2
13246: PPUSH
13247: LD_EXP 40
13251: PPUSH
13252: CALL 1298 0 2
13256: IFFALSE 13273
13258: GO 13260
13260: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13261: LD_EXP 21
13265: PPUSH
13266: LD_STRING DH-Obj-a-1
13268: PPUSH
13269: CALL_OW 88
13273: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13274: LD_EXP 10
13278: PUSH
13279: LD_OWVAR 1
13283: PUSH
13284: LD_INT 23100
13286: PUSH
13287: LD_INT 22050
13289: PUSH
13290: LD_INT 21000
13292: PUSH
13293: LD_INT 19950
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: LD_OWVAR 67
13306: ARRAY
13307: GREATEREQUAL
13308: OR
13309: IFFALSE 13335
13311: GO 13313
13313: DISABLE
// begin if eastBaseCaptured then
13314: LD_EXP 10
13318: IFFALSE 13327
// wait ( 2 2$00 ) ;
13320: LD_INT 4200
13322: PPUSH
13323: CALL_OW 67
// convoyStarted := true ;
13327: LD_ADDR_EXP 17
13331: PUSH
13332: LD_INT 1
13334: ST_TO_ADDR
// end ;
13335: END
// every 0 0$1 trigger convoyStarted do
13336: LD_EXP 17
13340: IFFALSE 13431
13342: GO 13344
13344: DISABLE
// begin DialogueOn ;
13345: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13349: LD_EXP 29
13353: PPUSH
13354: LD_STRING DShar-Convoy-1
13356: PPUSH
13357: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13361: LD_EXP 21
13365: PPUSH
13366: LD_STRING DH-Convoy-2
13368: PPUSH
13369: CALL_OW 88
// DialogueOff ;
13373: CALL_OW 7
// wait ( 0 0$10 ) ;
13377: LD_INT 350
13379: PPUSH
13380: CALL_OW 67
// PrepareConvoy ;
13384: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13388: LD_INT 5250
13390: PPUSH
13391: LD_INT 11550
13393: PPUSH
13394: CALL_OW 12
13398: PPUSH
13399: CALL_OW 67
// PrepareConvoy ;
13403: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13407: LD_ADDR_EXP 16
13411: PUSH
13412: LD_EXP 16
13416: PUSH
13417: LD_INT 1
13419: MINUS
13420: ST_TO_ADDR
// until convoyCounter <= 0 ;
13421: LD_EXP 16
13425: PUSH
13426: LD_INT 0
13428: LESSEQUAL
13429: IFFALSE 13388
// end ;
13431: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13432: LD_EXP 15
13436: PUSH
13437: LD_INT 10
13439: GREATEREQUAL
13440: IFFALSE 13457
13442: GO 13444
13444: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13445: LD_EXP 31
13449: PPUSH
13450: LD_STRING DOm-Fail-1
13452: PPUSH
13453: CALL_OW 94
13457: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13458: LD_EXP 39
13462: NOT
13463: PUSH
13464: LD_EXP 40
13468: NOT
13469: AND
13470: IFFALSE 13482
13472: GO 13474
13474: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13475: LD_STRING RaiderDone
13477: PPUSH
13478: CALL_OW 337
13482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13483: LD_INT 22
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 33
13495: PUSH
13496: LD_INT 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: PUSH
13512: LD_INT 3
13514: GREATEREQUAL
13515: PUSH
13516: LD_INT 22
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 34
13528: PUSH
13529: LD_INT 31
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 69
13544: PUSH
13545: LD_INT 2
13547: GREATEREQUAL
13548: AND
13549: IFFALSE 13561
13551: GO 13553
13553: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13554: LD_STRING RemoteControlDone
13556: PPUSH
13557: CALL_OW 337
13561: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 ;
13562: LD_EXP 16
13566: PUSH
13567: LD_INT 1
13569: LESS
13570: PUSH
13571: LD_EXP 41
13575: PPUSH
13576: LD_INT 52
13578: PUSH
13579: EMPTY
13580: LIST
13581: PUSH
13582: LD_INT 21
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 72
13600: NOT
13601: AND
13602: PUSH
13603: LD_OWVAR 1
13607: PUSH
13608: LD_INT 126000
13610: GREATEREQUAL
13611: OR
13612: IFFALSE 14622
13614: GO 13616
13616: DISABLE
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
13621: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13622: LD_STRING ReinforcementsDone
13624: PPUSH
13625: CALL_OW 337
// music_class := music_victory ;
13629: LD_ADDR_OWVAR 72
13633: PUSH
13634: LD_INT 4
13636: ST_TO_ADDR
// InGameOn ;
13637: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13641: LD_EXP 21
13645: PPUSH
13646: LD_STRING DH-end-1
13648: PPUSH
13649: CALL_OW 88
// wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13660: LD_EXP 29
13664: PPUSH
13665: LD_STRING DShar-end-2
13667: PPUSH
13668: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13672: LD_EXP 39
13676: NOT
13677: PUSH
13678: LD_EXP 40
13682: NOT
13683: AND
13684: IFFALSE 13700
// begin Say ( Heike , DH-end-3 ) ;
13686: LD_EXP 21
13690: PPUSH
13691: LD_STRING DH-end-3
13693: PPUSH
13694: CALL_OW 88
// end else
13698: GO 13797
// begin Say ( Heike , DH-end-a-3 ) ;
13700: LD_EXP 21
13704: PPUSH
13705: LD_STRING DH-end-a-3
13707: PPUSH
13708: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13712: LD_EXP 29
13716: PPUSH
13717: LD_STRING DShar-end-a-4
13719: PPUSH
13720: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13724: LD_EXP 21
13728: PPUSH
13729: LD_STRING DH-end-a-5
13731: PPUSH
13732: CALL_OW 88
// InGameOff ;
13736: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13740: LD_INT 35
13742: PPUSH
13743: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13747: LD_INT 22
13749: PUSH
13750: LD_INT 3
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PPUSH
13771: CALL_OW 69
13775: PUSH
13776: LD_INT 0
13778: EQUAL
13779: IFFALSE 13740
// InGameOn ;
13781: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13785: LD_EXP 21
13789: PPUSH
13790: LD_STRING DH-end-a-6
13792: PPUSH
13793: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13797: LD_EXP 29
13801: PPUSH
13802: LD_STRING DShar-end-3
13804: PPUSH
13805: CALL_OW 94
// if not flamethrowerBuilt then
13809: LD_EXP 20
13813: NOT
13814: IFFALSE 13823
// SetAchievement ( ACH_FIRE ) ;
13816: LD_STRING ACH_FIRE
13818: PPUSH
13819: CALL_OW 543
// if drugsTested then
13823: LD_EXP 6
13827: IFFALSE 13841
// AddMedal ( med1 , 1 ) else
13829: LD_STRING med1
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL_OW 101
13839: GO 13881
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13841: LD_INT 5
13843: PPUSH
13844: LD_INT 2
13846: PPUSH
13847: CALL_OW 321
13851: PUSH
13852: LD_INT 2
13854: EQUAL
13855: IFFALSE 13870
// AddMedal ( med1 , - 1 ) else
13857: LD_STRING med1
13859: PPUSH
13860: LD_INT 1
13862: NEG
13863: PPUSH
13864: CALL_OW 101
13868: GO 13881
// AddMedal ( med1 , - 2 ) ;
13870: LD_STRING med1
13872: PPUSH
13873: LD_INT 2
13875: NEG
13876: PPUSH
13877: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13881: LD_INT 22
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 33
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PPUSH
13905: CALL_OW 69
13909: PUSH
13910: LD_INT 3
13912: GREATEREQUAL
13913: PUSH
13914: LD_INT 22
13916: PUSH
13917: LD_INT 2
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 34
13926: PUSH
13927: LD_INT 31
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: PUSH
13943: LD_INT 1
13945: GREATEREQUAL
13946: AND
13947: IFFALSE 13961
// AddMedal ( med2 , 1 ) else
13949: LD_STRING med2
13951: PPUSH
13952: LD_INT 1
13954: PPUSH
13955: CALL_OW 101
13959: GO 13972
// AddMedal ( med2 , - 1 ) ;
13961: LD_STRING med2
13963: PPUSH
13964: LD_INT 1
13966: NEG
13967: PPUSH
13968: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13972: LD_EXP 15
13976: PUSH
13977: LD_INT 10
13979: PUSH
13980: LD_INT 8
13982: PUSH
13983: LD_INT 6
13985: PUSH
13986: LD_INT 5
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_OWVAR 67
13999: ARRAY
14000: LESS
14001: IFFALSE 14015
// AddMedal ( med3 , 1 ) else
14003: LD_STRING med3
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL_OW 101
14013: GO 14026
// AddMedal ( med3 , - 1 ) ;
14015: LD_STRING med3
14017: PPUSH
14018: LD_INT 1
14020: NEG
14021: PPUSH
14022: CALL_OW 101
// GiveMedals ( MAIN ) ;
14026: LD_STRING MAIN
14028: PPUSH
14029: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14033: LD_INT 22
14035: PUSH
14036: LD_INT 2
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 23
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 21
14055: PUSH
14056: LD_INT 1
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: PPUSH
14068: CALL_OW 69
14072: PPUSH
14073: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14077: LD_EXP 15
14081: PPUSH
14082: LD_STRING 05_ConvoySavedCounter
14084: PPUSH
14085: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14089: LD_EXP 13
14093: PPUSH
14094: LD_STRING 05_Radar
14096: PPUSH
14097: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14101: LD_EXP 6
14105: PPUSH
14106: LD_STRING 05_DrugsTested
14108: PPUSH
14109: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14113: LD_INT 22
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 33
14125: PUSH
14126: LD_INT 2
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PPUSH
14137: CALL_OW 69
14141: PUSH
14142: LD_INT 3
14144: GREATEREQUAL
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_INT 2
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 34
14158: PUSH
14159: LD_INT 31
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 69
14174: PUSH
14175: LD_INT 2
14177: GREATEREQUAL
14178: AND
14179: PPUSH
14180: LD_STRING 05_RemoteControl
14182: PPUSH
14183: CALL_OW 39
// tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14187: LD_ADDR_VAR 0 2
14191: PUSH
14192: LD_INT 25
14194: PPUSH
14195: LD_INT 21
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 70
14209: ST_TO_ADDR
// tmp2 := [ ] ;
14210: LD_ADDR_VAR 0 3
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// if tmp then
14217: LD_VAR 0 2
14221: IFFALSE 14374
// begin for i in tmp do
14223: LD_ADDR_VAR 0 1
14227: PUSH
14228: LD_VAR 0 2
14232: PUSH
14233: FOR_IN
14234: IFFALSE 14360
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: LD_VAR 0 1
14250: PPUSH
14251: CALL_OW 266
14255: PUSH
14256: LD_VAR 0 1
14260: PPUSH
14261: CALL_OW 250
14265: PUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 251
14275: PUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 254
14285: PUSH
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 248
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 267
14305: PUSH
14306: LD_VAR 0 1
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: CALL_OW 268
14318: PUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: LD_INT 2
14326: PPUSH
14327: CALL_OW 268
14331: PUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 269
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: PPUSH
14353: CALL 72051 0 2
14357: ST_TO_ADDR
14358: GO 14233
14360: POP
14361: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14362: LD_VAR 0 3
14366: PPUSH
14367: LD_STRING 05_Buildings
14369: PPUSH
14370: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14374: LD_EXP 21
14378: PPUSH
14379: LD_STRING 05_Heike
14381: PPUSH
14382: CALL_OW 38
// if Aviradze then
14386: LD_EXP 33
14390: IFFALSE 14404
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14392: LD_EXP 33
14396: PPUSH
14397: LD_STRING 05_Aviradze
14399: PPUSH
14400: CALL_OW 38
// if Ibrahim then
14404: LD_EXP 24
14408: IFFALSE 14422
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14410: LD_EXP 24
14414: PPUSH
14415: LD_STRING 05_Ibrahim
14417: PPUSH
14418: CALL_OW 38
// if Kamil then
14422: LD_EXP 25
14426: IFFALSE 14440
// SaveCharacters ( Kamil , 05_Kamil ) ;
14428: LD_EXP 25
14432: PPUSH
14433: LD_STRING 05_Kamil
14435: PPUSH
14436: CALL_OW 38
// if Sophia then
14440: LD_EXP 27
14444: IFFALSE 14458
// SaveCharacters ( Sophia , 05_Sophia ) ;
14446: LD_EXP 27
14450: PPUSH
14451: LD_STRING 05_Sophia
14453: PPUSH
14454: CALL_OW 38
// if Kaia then
14458: LD_EXP 26
14462: IFFALSE 14476
// SaveCharacters ( Kaia , 05_Kaia ) ;
14464: LD_EXP 26
14468: PPUSH
14469: LD_STRING 05_Kaia
14471: PPUSH
14472: CALL_OW 38
// if Givi then
14476: LD_EXP 22
14480: IFFALSE 14494
// SaveCharacters ( Givi , 05_Givi ) ;
14482: LD_EXP 22
14486: PPUSH
14487: LD_STRING 05_Givi
14489: PPUSH
14490: CALL_OW 38
// if Mike then
14494: LD_EXP 23
14498: IFFALSE 14512
// SaveCharacters ( Mike , 05_Mike ) ;
14500: LD_EXP 23
14504: PPUSH
14505: LD_STRING 05_Mike
14507: PPUSH
14508: CALL_OW 38
// if Markov then
14512: LD_EXP 28
14516: IFFALSE 14530
// SaveCharacters ( Markov , 05_Markov ) ;
14518: LD_EXP 28
14522: PPUSH
14523: LD_STRING 05_Markov
14525: PPUSH
14526: CALL_OW 38
// if Kurt then
14530: LD_EXP 32
14534: IFFALSE 14548
// SaveCharacters ( Kurt , 05_Kurt ) ;
14536: LD_EXP 32
14540: PPUSH
14541: LD_STRING 05_Kurt
14543: PPUSH
14544: CALL_OW 38
// if heikeSecondSquad then
14548: LD_EXP 34
14552: IFFALSE 14566
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14554: LD_EXP 34
14558: PPUSH
14559: LD_STRING 05_others
14561: PPUSH
14562: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14566: LD_ADDR_VAR 0 2
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 23
14583: PUSH
14584: LD_INT 0
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: CALL_OW 69
14599: ST_TO_ADDR
// if tmp then
14600: LD_VAR 0 2
14604: IFFALSE 14618
// SaveCharacters ( tmp , 05_apes ) ;
14606: LD_VAR 0 2
14610: PPUSH
14611: LD_STRING 05_apes
14613: PPUSH
14614: CALL_OW 38
// YouWin ;
14618: CALL_OW 103
// end ; end_of_file
14622: PPOPN 3
14624: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14625: LD_EXP 9
14629: PUSH
14630: LD_INT 13
14632: PPUSH
14633: LD_INT 1
14635: PPUSH
14636: CALL_OW 287
14640: PUSH
14641: LD_INT 25
14643: LESS
14644: AND
14645: IFFALSE 14672
14647: GO 14649
14649: DISABLE
// begin enable ;
14650: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14651: LD_INT 1
14653: PPUSH
14654: LD_INT 5
14656: PPUSH
14657: CALL_OW 12
14661: PPUSH
14662: LD_INT 13
14664: PPUSH
14665: LD_INT 1
14667: PPUSH
14668: CALL_OW 55
// end ; end_of_file
14672: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14673: LD_INT 0
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14679: LD_VAR 0 1
14683: PPUSH
14684: CALL_OW 264
14688: PUSH
14689: LD_INT 91
14691: EQUAL
14692: IFFALSE 14764
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14694: LD_INT 68
14696: PPUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: CALL_OW 255
14706: PPUSH
14707: CALL_OW 321
14711: PUSH
14712: LD_INT 2
14714: EQUAL
14715: IFFALSE 14727
// eff := 70 else
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_INT 70
14724: ST_TO_ADDR
14725: GO 14735
// eff := 30 ;
14727: LD_ADDR_VAR 0 4
14731: PUSH
14732: LD_INT 30
14734: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 250
14744: PPUSH
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 251
14754: PPUSH
14755: LD_VAR 0 4
14759: PPUSH
14760: CALL_OW 495
// end ; end ;
14764: LD_VAR 0 2
14768: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14769: LD_INT 0
14771: PPUSH
// end ;
14772: LD_VAR 0 4
14776: RET
// export function SOS_Command ( cmd ) ; begin
14777: LD_INT 0
14779: PPUSH
// end ;
14780: LD_VAR 0 2
14784: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14785: LD_INT 0
14787: PPUSH
// end ;
14788: LD_VAR 0 6
14792: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14793: LD_INT 0
14795: PPUSH
14796: PPUSH
// if not vehicle or not factory then
14797: LD_VAR 0 1
14801: NOT
14802: PUSH
14803: LD_VAR 0 2
14807: NOT
14808: OR
14809: IFFALSE 14813
// exit ;
14811: GO 15044
// if factoryWaypoints >= factory then
14813: LD_EXP 112
14817: PUSH
14818: LD_VAR 0 2
14822: GREATEREQUAL
14823: IFFALSE 15044
// if factoryWaypoints [ factory ] then
14825: LD_EXP 112
14829: PUSH
14830: LD_VAR 0 2
14834: ARRAY
14835: IFFALSE 15044
// begin if GetControl ( vehicle ) = control_manual then
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 263
14846: PUSH
14847: LD_INT 1
14849: EQUAL
14850: IFFALSE 14931
// begin driver := IsDrivenBy ( vehicle ) ;
14852: LD_ADDR_VAR 0 4
14856: PUSH
14857: LD_VAR 0 1
14861: PPUSH
14862: CALL_OW 311
14866: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14867: LD_VAR 0 4
14871: PPUSH
14872: LD_EXP 112
14876: PUSH
14877: LD_VAR 0 2
14881: ARRAY
14882: PUSH
14883: LD_INT 3
14885: ARRAY
14886: PPUSH
14887: LD_EXP 112
14891: PUSH
14892: LD_VAR 0 2
14896: ARRAY
14897: PUSH
14898: LD_INT 4
14900: ARRAY
14901: PPUSH
14902: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14906: LD_VAR 0 4
14910: PPUSH
14911: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14915: LD_VAR 0 4
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 180
// end else
14929: GO 15044
// if GetControl ( vehicle ) = control_remote then
14931: LD_VAR 0 1
14935: PPUSH
14936: CALL_OW 263
14940: PUSH
14941: LD_INT 2
14943: EQUAL
14944: IFFALSE 15005
// begin wait ( 0 0$2 ) ;
14946: LD_INT 70
14948: PPUSH
14949: CALL_OW 67
// if Connect ( vehicle ) then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL 42717 0 1
14962: IFFALSE 15003
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14964: LD_VAR 0 1
14968: PPUSH
14969: LD_EXP 112
14973: PUSH
14974: LD_VAR 0 2
14978: ARRAY
14979: PUSH
14980: LD_INT 3
14982: ARRAY
14983: PPUSH
14984: LD_EXP 112
14988: PUSH
14989: LD_VAR 0 2
14993: ARRAY
14994: PUSH
14995: LD_INT 4
14997: ARRAY
14998: PPUSH
14999: CALL_OW 171
// end else
15003: GO 15044
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: LD_EXP 112
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: PUSH
15021: LD_INT 3
15023: ARRAY
15024: PPUSH
15025: LD_EXP 112
15029: PUSH
15030: LD_VAR 0 2
15034: ARRAY
15035: PUSH
15036: LD_INT 4
15038: ARRAY
15039: PPUSH
15040: CALL_OW 171
// end ; end ;
15044: LD_VAR 0 3
15048: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15049: LD_INT 0
15051: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15052: LD_VAR 0 1
15056: PUSH
15057: LD_INT 250
15059: EQUAL
15060: PUSH
15061: LD_VAR 0 2
15065: PPUSH
15066: CALL_OW 264
15070: PUSH
15071: LD_INT 81
15073: EQUAL
15074: AND
15075: IFFALSE 15096
// MinerPlaceMine ( unit , x , y ) ;
15077: LD_VAR 0 2
15081: PPUSH
15082: LD_VAR 0 4
15086: PPUSH
15087: LD_VAR 0 5
15091: PPUSH
15092: CALL 17481 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15096: LD_VAR 0 1
15100: PUSH
15101: LD_INT 251
15103: EQUAL
15104: PUSH
15105: LD_VAR 0 2
15109: PPUSH
15110: CALL_OW 264
15114: PUSH
15115: LD_INT 81
15117: EQUAL
15118: AND
15119: IFFALSE 15140
// MinerDetonateMine ( unit , x , y ) ;
15121: LD_VAR 0 2
15125: PPUSH
15126: LD_VAR 0 4
15130: PPUSH
15131: LD_VAR 0 5
15135: PPUSH
15136: CALL 17756 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15140: LD_VAR 0 1
15144: PUSH
15145: LD_INT 252
15147: EQUAL
15148: PUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: CALL_OW 264
15158: PUSH
15159: LD_INT 81
15161: EQUAL
15162: AND
15163: IFFALSE 15184
// MinerCreateMinefield ( unit , x , y ) ;
15165: LD_VAR 0 2
15169: PPUSH
15170: LD_VAR 0 4
15174: PPUSH
15175: LD_VAR 0 5
15179: PPUSH
15180: CALL 18173 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15184: LD_VAR 0 1
15188: PUSH
15189: LD_INT 253
15191: EQUAL
15192: PUSH
15193: LD_VAR 0 2
15197: PPUSH
15198: CALL_OW 257
15202: PUSH
15203: LD_INT 5
15205: EQUAL
15206: AND
15207: IFFALSE 15228
// ComBinocular ( unit , x , y ) ;
15209: LD_VAR 0 2
15213: PPUSH
15214: LD_VAR 0 4
15218: PPUSH
15219: LD_VAR 0 5
15223: PPUSH
15224: CALL 18542 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15228: LD_VAR 0 1
15232: PUSH
15233: LD_INT 254
15235: EQUAL
15236: PUSH
15237: LD_VAR 0 2
15241: PPUSH
15242: CALL_OW 264
15246: PUSH
15247: LD_INT 99
15249: EQUAL
15250: AND
15251: PUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: CALL_OW 263
15261: PUSH
15262: LD_INT 3
15264: EQUAL
15265: AND
15266: IFFALSE 15282
// HackDestroyVehicle ( unit , selectedUnit ) ;
15268: LD_VAR 0 2
15272: PPUSH
15273: LD_VAR 0 3
15277: PPUSH
15278: CALL 16845 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15282: LD_VAR 0 1
15286: PUSH
15287: LD_INT 255
15289: EQUAL
15290: PUSH
15291: LD_VAR 0 2
15295: PPUSH
15296: CALL_OW 264
15300: PUSH
15301: LD_INT 14
15303: PUSH
15304: LD_INT 53
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: IN
15311: AND
15312: PUSH
15313: LD_VAR 0 4
15317: PPUSH
15318: LD_VAR 0 5
15322: PPUSH
15323: CALL_OW 488
15327: AND
15328: IFFALSE 15352
// CutTreeXYR ( unit , x , y , 12 ) ;
15330: LD_VAR 0 2
15334: PPUSH
15335: LD_VAR 0 4
15339: PPUSH
15340: LD_VAR 0 5
15344: PPUSH
15345: LD_INT 12
15347: PPUSH
15348: CALL 15415 0 4
// if cmd = 256 then
15352: LD_VAR 0 1
15356: PUSH
15357: LD_INT 256
15359: EQUAL
15360: IFFALSE 15381
// SetFactoryWaypoint ( unit , x , y ) ;
15362: LD_VAR 0 2
15366: PPUSH
15367: LD_VAR 0 4
15371: PPUSH
15372: LD_VAR 0 5
15376: PPUSH
15377: CALL 33300 0 3
// if cmd = 257 then
15381: LD_VAR 0 1
15385: PUSH
15386: LD_INT 257
15388: EQUAL
15389: IFFALSE 15410
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15391: LD_VAR 0 2
15395: PPUSH
15396: LD_VAR 0 4
15400: PPUSH
15401: LD_VAR 0 5
15405: PPUSH
15406: CALL 33662 0 3
// end ;
15410: LD_VAR 0 6
15414: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15415: LD_INT 0
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15426: LD_VAR 0 1
15430: NOT
15431: PUSH
15432: LD_VAR 0 2
15436: PPUSH
15437: LD_VAR 0 3
15441: PPUSH
15442: CALL_OW 488
15446: NOT
15447: OR
15448: PUSH
15449: LD_VAR 0 4
15453: NOT
15454: OR
15455: IFFALSE 15459
// exit ;
15457: GO 15799
// list := [ ] ;
15459: LD_ADDR_VAR 0 13
15463: PUSH
15464: EMPTY
15465: ST_TO_ADDR
// if x - r < 0 then
15466: LD_VAR 0 2
15470: PUSH
15471: LD_VAR 0 4
15475: MINUS
15476: PUSH
15477: LD_INT 0
15479: LESS
15480: IFFALSE 15492
// min_x := 0 else
15482: LD_ADDR_VAR 0 7
15486: PUSH
15487: LD_INT 0
15489: ST_TO_ADDR
15490: GO 15508
// min_x := x - r ;
15492: LD_ADDR_VAR 0 7
15496: PUSH
15497: LD_VAR 0 2
15501: PUSH
15502: LD_VAR 0 4
15506: MINUS
15507: ST_TO_ADDR
// if y - r < 0 then
15508: LD_VAR 0 3
15512: PUSH
15513: LD_VAR 0 4
15517: MINUS
15518: PUSH
15519: LD_INT 0
15521: LESS
15522: IFFALSE 15534
// min_y := 0 else
15524: LD_ADDR_VAR 0 8
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
15532: GO 15550
// min_y := y - r ;
15534: LD_ADDR_VAR 0 8
15538: PUSH
15539: LD_VAR 0 3
15543: PUSH
15544: LD_VAR 0 4
15548: MINUS
15549: ST_TO_ADDR
// max_x := x + r ;
15550: LD_ADDR_VAR 0 9
15554: PUSH
15555: LD_VAR 0 2
15559: PUSH
15560: LD_VAR 0 4
15564: PLUS
15565: ST_TO_ADDR
// max_y := y + r ;
15566: LD_ADDR_VAR 0 10
15570: PUSH
15571: LD_VAR 0 3
15575: PUSH
15576: LD_VAR 0 4
15580: PLUS
15581: ST_TO_ADDR
// for _x = min_x to max_x do
15582: LD_ADDR_VAR 0 11
15586: PUSH
15587: DOUBLE
15588: LD_VAR 0 7
15592: DEC
15593: ST_TO_ADDR
15594: LD_VAR 0 9
15598: PUSH
15599: FOR_TO
15600: IFFALSE 15717
// for _y = min_y to max_y do
15602: LD_ADDR_VAR 0 12
15606: PUSH
15607: DOUBLE
15608: LD_VAR 0 8
15612: DEC
15613: ST_TO_ADDR
15614: LD_VAR 0 10
15618: PUSH
15619: FOR_TO
15620: IFFALSE 15713
// begin if not ValidHex ( _x , _y ) then
15622: LD_VAR 0 11
15626: PPUSH
15627: LD_VAR 0 12
15631: PPUSH
15632: CALL_OW 488
15636: NOT
15637: IFFALSE 15641
// continue ;
15639: GO 15619
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15641: LD_VAR 0 11
15645: PPUSH
15646: LD_VAR 0 12
15650: PPUSH
15651: CALL_OW 351
15655: PUSH
15656: LD_VAR 0 11
15660: PPUSH
15661: LD_VAR 0 12
15665: PPUSH
15666: CALL_OW 554
15670: AND
15671: IFFALSE 15711
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15673: LD_ADDR_VAR 0 13
15677: PUSH
15678: LD_VAR 0 13
15682: PPUSH
15683: LD_VAR 0 13
15687: PUSH
15688: LD_INT 1
15690: PLUS
15691: PPUSH
15692: LD_VAR 0 11
15696: PUSH
15697: LD_VAR 0 12
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 2
15710: ST_TO_ADDR
// end ;
15711: GO 15619
15713: POP
15714: POP
15715: GO 15599
15717: POP
15718: POP
// if not list then
15719: LD_VAR 0 13
15723: NOT
15724: IFFALSE 15728
// exit ;
15726: GO 15799
// for i in list do
15728: LD_ADDR_VAR 0 6
15732: PUSH
15733: LD_VAR 0 13
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15797
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_STRING M
15748: PUSH
15749: LD_VAR 0 6
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PUSH
15758: LD_VAR 0 6
15762: PUSH
15763: LD_INT 2
15765: ARRAY
15766: PUSH
15767: LD_INT 0
15769: PUSH
15770: LD_INT 0
15772: PUSH
15773: LD_INT 0
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: PUSH
15788: EMPTY
15789: LIST
15790: PPUSH
15791: CALL_OW 447
15795: GO 15738
15797: POP
15798: POP
// end ;
15799: LD_VAR 0 5
15803: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15804: LD_EXP 44
15808: NOT
15809: IFFALSE 15859
15811: GO 15813
15813: DISABLE
// begin initHack := true ;
15814: LD_ADDR_EXP 44
15818: PUSH
15819: LD_INT 1
15821: ST_TO_ADDR
// hackTanks := [ ] ;
15822: LD_ADDR_EXP 45
15826: PUSH
15827: EMPTY
15828: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15829: LD_ADDR_EXP 46
15833: PUSH
15834: EMPTY
15835: ST_TO_ADDR
// hackLimit := 3 ;
15836: LD_ADDR_EXP 47
15840: PUSH
15841: LD_INT 3
15843: ST_TO_ADDR
// hackDist := 12 ;
15844: LD_ADDR_EXP 48
15848: PUSH
15849: LD_INT 12
15851: ST_TO_ADDR
// hackCounter := [ ] ;
15852: LD_ADDR_EXP 49
15856: PUSH
15857: EMPTY
15858: ST_TO_ADDR
// end ;
15859: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15860: LD_EXP 44
15864: PUSH
15865: LD_INT 34
15867: PUSH
15868: LD_INT 99
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 69
15879: AND
15880: IFFALSE 16133
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
15888: PPUSH
// begin enable ;
15889: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15890: LD_ADDR_VAR 0 1
15894: PUSH
15895: LD_INT 34
15897: PUSH
15898: LD_INT 99
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 69
15909: PUSH
15910: FOR_IN
15911: IFFALSE 16131
// begin if not i in hackTanks then
15913: LD_VAR 0 1
15917: PUSH
15918: LD_EXP 45
15922: IN
15923: NOT
15924: IFFALSE 16007
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15926: LD_ADDR_EXP 45
15930: PUSH
15931: LD_EXP 45
15935: PPUSH
15936: LD_EXP 45
15940: PUSH
15941: LD_INT 1
15943: PLUS
15944: PPUSH
15945: LD_VAR 0 1
15949: PPUSH
15950: CALL_OW 1
15954: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15955: LD_ADDR_EXP 46
15959: PUSH
15960: LD_EXP 46
15964: PPUSH
15965: LD_EXP 46
15969: PUSH
15970: LD_INT 1
15972: PLUS
15973: PPUSH
15974: EMPTY
15975: PPUSH
15976: CALL_OW 1
15980: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15981: LD_ADDR_EXP 49
15985: PUSH
15986: LD_EXP 49
15990: PPUSH
15991: LD_EXP 49
15995: PUSH
15996: LD_INT 1
15998: PLUS
15999: PPUSH
16000: EMPTY
16001: PPUSH
16002: CALL_OW 1
16006: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16007: LD_VAR 0 1
16011: PPUSH
16012: CALL_OW 302
16016: NOT
16017: IFFALSE 16030
// begin HackUnlinkAll ( i ) ;
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL 16136 0 1
// continue ;
16028: GO 15910
// end ; HackCheckCapturedStatus ( i ) ;
16030: LD_VAR 0 1
16034: PPUSH
16035: CALL 16579 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16039: LD_ADDR_VAR 0 2
16043: PUSH
16044: LD_INT 81
16046: PUSH
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 33
16063: PUSH
16064: LD_INT 3
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 91
16073: PUSH
16074: LD_VAR 0 1
16078: PUSH
16079: LD_EXP 48
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 50
16091: PUSH
16092: EMPTY
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 69
16105: ST_TO_ADDR
// if not tmp then
16106: LD_VAR 0 2
16110: NOT
16111: IFFALSE 16115
// continue ;
16113: GO 15910
// HackLink ( i , tmp ) ;
16115: LD_VAR 0 1
16119: PPUSH
16120: LD_VAR 0 2
16124: PPUSH
16125: CALL 16272 0 2
// end ;
16129: GO 15910
16131: POP
16132: POP
// end ;
16133: PPOPN 2
16135: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16136: LD_INT 0
16138: PPUSH
16139: PPUSH
16140: PPUSH
// if not hack in hackTanks then
16141: LD_VAR 0 1
16145: PUSH
16146: LD_EXP 45
16150: IN
16151: NOT
16152: IFFALSE 16156
// exit ;
16154: GO 16267
// index := GetElementIndex ( hackTanks , hack ) ;
16156: LD_ADDR_VAR 0 4
16160: PUSH
16161: LD_EXP 45
16165: PPUSH
16166: LD_VAR 0 1
16170: PPUSH
16171: CALL 39533 0 2
16175: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16176: LD_EXP 46
16180: PUSH
16181: LD_VAR 0 4
16185: ARRAY
16186: IFFALSE 16267
// begin for i in hackTanksCaptured [ index ] do
16188: LD_ADDR_VAR 0 3
16192: PUSH
16193: LD_EXP 46
16197: PUSH
16198: LD_VAR 0 4
16202: ARRAY
16203: PUSH
16204: FOR_IN
16205: IFFALSE 16231
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16207: LD_VAR 0 3
16211: PUSH
16212: LD_INT 1
16214: ARRAY
16215: PPUSH
16216: LD_VAR 0 3
16220: PUSH
16221: LD_INT 2
16223: ARRAY
16224: PPUSH
16225: CALL_OW 235
16229: GO 16204
16231: POP
16232: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16233: LD_ADDR_EXP 46
16237: PUSH
16238: LD_EXP 46
16242: PPUSH
16243: LD_VAR 0 4
16247: PPUSH
16248: EMPTY
16249: PPUSH
16250: CALL_OW 1
16254: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_INT 0
16262: PPUSH
16263: CALL_OW 505
// end ; end ;
16267: LD_VAR 0 2
16271: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16272: LD_INT 0
16274: PPUSH
16275: PPUSH
16276: PPUSH
// if not hack in hackTanks or not vehicles then
16277: LD_VAR 0 1
16281: PUSH
16282: LD_EXP 45
16286: IN
16287: NOT
16288: PUSH
16289: LD_VAR 0 2
16293: NOT
16294: OR
16295: IFFALSE 16299
// exit ;
16297: GO 16574
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL 40183 0 4
16324: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16325: LD_ADDR_VAR 0 5
16329: PUSH
16330: LD_EXP 45
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL 39533 0 2
16344: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16345: LD_EXP 46
16349: PUSH
16350: LD_VAR 0 5
16354: ARRAY
16355: PUSH
16356: LD_EXP 47
16360: LESS
16361: IFFALSE 16550
// begin for i := 1 to vehicles do
16363: LD_ADDR_VAR 0 4
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_VAR 0 2
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16548
// begin if hackTanksCaptured [ index ] = hackLimit then
16381: LD_EXP 46
16385: PUSH
16386: LD_VAR 0 5
16390: ARRAY
16391: PUSH
16392: LD_EXP 47
16396: EQUAL
16397: IFFALSE 16401
// break ;
16399: GO 16548
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16401: LD_ADDR_EXP 49
16405: PUSH
16406: LD_EXP 49
16410: PPUSH
16411: LD_VAR 0 5
16415: PPUSH
16416: LD_EXP 49
16420: PUSH
16421: LD_VAR 0 5
16425: ARRAY
16426: PUSH
16427: LD_INT 1
16429: PLUS
16430: PPUSH
16431: CALL_OW 1
16435: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16436: LD_ADDR_EXP 46
16440: PUSH
16441: LD_EXP 46
16445: PPUSH
16446: LD_VAR 0 5
16450: PUSH
16451: LD_EXP 46
16455: PUSH
16456: LD_VAR 0 5
16460: ARRAY
16461: PUSH
16462: LD_INT 1
16464: PLUS
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PPUSH
16470: LD_VAR 0 2
16474: PUSH
16475: LD_VAR 0 4
16479: ARRAY
16480: PUSH
16481: LD_VAR 0 2
16485: PUSH
16486: LD_VAR 0 4
16490: ARRAY
16491: PPUSH
16492: CALL_OW 255
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL 39748 0 3
16505: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16506: LD_VAR 0 2
16510: PUSH
16511: LD_VAR 0 4
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 255
16526: PPUSH
16527: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16531: LD_VAR 0 2
16535: PUSH
16536: LD_VAR 0 4
16540: ARRAY
16541: PPUSH
16542: CALL_OW 141
// end ;
16546: GO 16378
16548: POP
16549: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16550: LD_VAR 0 1
16554: PPUSH
16555: LD_EXP 46
16559: PUSH
16560: LD_VAR 0 5
16564: ARRAY
16565: PUSH
16566: LD_INT 0
16568: PLUS
16569: PPUSH
16570: CALL_OW 505
// end ;
16574: LD_VAR 0 3
16578: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16579: LD_INT 0
16581: PPUSH
16582: PPUSH
16583: PPUSH
16584: PPUSH
// if not hack in hackTanks then
16585: LD_VAR 0 1
16589: PUSH
16590: LD_EXP 45
16594: IN
16595: NOT
16596: IFFALSE 16600
// exit ;
16598: GO 16840
// index := GetElementIndex ( hackTanks , hack ) ;
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_EXP 45
16609: PPUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: CALL 39533 0 2
16619: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: DOUBLE
16626: LD_EXP 46
16630: PUSH
16631: LD_VAR 0 4
16635: ARRAY
16636: INC
16637: ST_TO_ADDR
16638: LD_INT 1
16640: PUSH
16641: FOR_DOWNTO
16642: IFFALSE 16814
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16644: LD_ADDR_VAR 0 5
16648: PUSH
16649: LD_EXP 46
16653: PUSH
16654: LD_VAR 0 4
16658: ARRAY
16659: PUSH
16660: LD_VAR 0 3
16664: ARRAY
16665: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16666: LD_VAR 0 5
16670: PUSH
16671: LD_INT 1
16673: ARRAY
16674: PPUSH
16675: CALL_OW 302
16679: NOT
16680: PUSH
16681: LD_VAR 0 5
16685: PUSH
16686: LD_INT 1
16688: ARRAY
16689: PPUSH
16690: CALL_OW 255
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 255
16704: NONEQUAL
16705: OR
16706: IFFALSE 16812
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16708: LD_VAR 0 5
16712: PUSH
16713: LD_INT 1
16715: ARRAY
16716: PPUSH
16717: CALL_OW 305
16721: PUSH
16722: LD_VAR 0 5
16726: PUSH
16727: LD_INT 1
16729: ARRAY
16730: PPUSH
16731: CALL_OW 255
16735: PUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL_OW 255
16745: EQUAL
16746: AND
16747: IFFALSE 16771
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16749: LD_VAR 0 5
16753: PUSH
16754: LD_INT 1
16756: ARRAY
16757: PPUSH
16758: LD_VAR 0 5
16762: PUSH
16763: LD_INT 2
16765: ARRAY
16766: PPUSH
16767: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16771: LD_ADDR_EXP 46
16775: PUSH
16776: LD_EXP 46
16780: PPUSH
16781: LD_VAR 0 4
16785: PPUSH
16786: LD_EXP 46
16790: PUSH
16791: LD_VAR 0 4
16795: ARRAY
16796: PPUSH
16797: LD_VAR 0 3
16801: PPUSH
16802: CALL_OW 3
16806: PPUSH
16807: CALL_OW 1
16811: ST_TO_ADDR
// end ; end ;
16812: GO 16641
16814: POP
16815: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16816: LD_VAR 0 1
16820: PPUSH
16821: LD_EXP 46
16825: PUSH
16826: LD_VAR 0 4
16830: ARRAY
16831: PUSH
16832: LD_INT 0
16834: PLUS
16835: PPUSH
16836: CALL_OW 505
// end ;
16840: LD_VAR 0 2
16844: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
// if not hack in hackTanks then
16851: LD_VAR 0 1
16855: PUSH
16856: LD_EXP 45
16860: IN
16861: NOT
16862: IFFALSE 16866
// exit ;
16864: GO 16951
// index := GetElementIndex ( hackTanks , hack ) ;
16866: LD_ADDR_VAR 0 5
16870: PUSH
16871: LD_EXP 45
16875: PPUSH
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL 39533 0 2
16885: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16886: LD_ADDR_VAR 0 4
16890: PUSH
16891: DOUBLE
16892: LD_INT 1
16894: DEC
16895: ST_TO_ADDR
16896: LD_EXP 46
16900: PUSH
16901: LD_VAR 0 5
16905: ARRAY
16906: PUSH
16907: FOR_TO
16908: IFFALSE 16949
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16910: LD_EXP 46
16914: PUSH
16915: LD_VAR 0 5
16919: ARRAY
16920: PUSH
16921: LD_VAR 0 4
16925: ARRAY
16926: PUSH
16927: LD_INT 1
16929: ARRAY
16930: PUSH
16931: LD_VAR 0 2
16935: EQUAL
16936: IFFALSE 16947
// KillUnit ( vehicle ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: CALL_OW 66
16947: GO 16907
16949: POP
16950: POP
// end ;
16951: LD_VAR 0 3
16955: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16956: LD_EXP 50
16960: NOT
16961: IFFALSE 16996
16963: GO 16965
16965: DISABLE
// begin initMiner := true ;
16966: LD_ADDR_EXP 50
16970: PUSH
16971: LD_INT 1
16973: ST_TO_ADDR
// minersList := [ ] ;
16974: LD_ADDR_EXP 51
16978: PUSH
16979: EMPTY
16980: ST_TO_ADDR
// minerMinesList := [ ] ;
16981: LD_ADDR_EXP 52
16985: PUSH
16986: EMPTY
16987: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16988: LD_ADDR_EXP 53
16992: PUSH
16993: LD_INT 5
16995: ST_TO_ADDR
// end ;
16996: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16997: LD_EXP 50
17001: PUSH
17002: LD_INT 34
17004: PUSH
17005: LD_INT 81
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PPUSH
17012: CALL_OW 69
17016: AND
17017: IFFALSE 17478
17019: GO 17021
17021: DISABLE
17022: LD_INT 0
17024: PPUSH
17025: PPUSH
17026: PPUSH
17027: PPUSH
// begin enable ;
17028: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17029: LD_ADDR_VAR 0 1
17033: PUSH
17034: LD_INT 34
17036: PUSH
17037: LD_INT 81
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: PUSH
17049: FOR_IN
17050: IFFALSE 17122
// begin if not i in minersList then
17052: LD_VAR 0 1
17056: PUSH
17057: LD_EXP 51
17061: IN
17062: NOT
17063: IFFALSE 17120
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17065: LD_ADDR_EXP 51
17069: PUSH
17070: LD_EXP 51
17074: PPUSH
17075: LD_EXP 51
17079: PUSH
17080: LD_INT 1
17082: PLUS
17083: PPUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 1
17093: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17094: LD_ADDR_EXP 52
17098: PUSH
17099: LD_EXP 52
17103: PPUSH
17104: LD_EXP 52
17108: PUSH
17109: LD_INT 1
17111: PLUS
17112: PPUSH
17113: EMPTY
17114: PPUSH
17115: CALL_OW 1
17119: ST_TO_ADDR
// end end ;
17120: GO 17049
17122: POP
17123: POP
// for i := minerMinesList downto 1 do
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: DOUBLE
17130: LD_EXP 52
17134: INC
17135: ST_TO_ADDR
17136: LD_INT 1
17138: PUSH
17139: FOR_DOWNTO
17140: IFFALSE 17476
// begin if IsLive ( minersList [ i ] ) then
17142: LD_EXP 51
17146: PUSH
17147: LD_VAR 0 1
17151: ARRAY
17152: PPUSH
17153: CALL_OW 300
17157: IFFALSE 17185
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17159: LD_EXP 51
17163: PUSH
17164: LD_VAR 0 1
17168: ARRAY
17169: PPUSH
17170: LD_EXP 52
17174: PUSH
17175: LD_VAR 0 1
17179: ARRAY
17180: PPUSH
17181: CALL_OW 505
// if not minerMinesList [ i ] then
17185: LD_EXP 52
17189: PUSH
17190: LD_VAR 0 1
17194: ARRAY
17195: NOT
17196: IFFALSE 17200
// continue ;
17198: GO 17139
// for j := minerMinesList [ i ] downto 1 do
17200: LD_ADDR_VAR 0 2
17204: PUSH
17205: DOUBLE
17206: LD_EXP 52
17210: PUSH
17211: LD_VAR 0 1
17215: ARRAY
17216: INC
17217: ST_TO_ADDR
17218: LD_INT 1
17220: PUSH
17221: FOR_DOWNTO
17222: IFFALSE 17472
// begin side := GetSide ( minersList [ i ] ) ;
17224: LD_ADDR_VAR 0 3
17228: PUSH
17229: LD_EXP 51
17233: PUSH
17234: LD_VAR 0 1
17238: ARRAY
17239: PPUSH
17240: CALL_OW 255
17244: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17245: LD_ADDR_VAR 0 4
17249: PUSH
17250: LD_EXP 52
17254: PUSH
17255: LD_VAR 0 1
17259: ARRAY
17260: PUSH
17261: LD_VAR 0 2
17265: ARRAY
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PPUSH
17271: LD_EXP 52
17275: PUSH
17276: LD_VAR 0 1
17280: ARRAY
17281: PUSH
17282: LD_VAR 0 2
17286: ARRAY
17287: PUSH
17288: LD_INT 2
17290: ARRAY
17291: PPUSH
17292: CALL_OW 428
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 4
17301: NOT
17302: IFFALSE 17306
// continue ;
17304: GO 17221
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17306: LD_VAR 0 4
17310: PUSH
17311: LD_INT 81
17313: PUSH
17314: LD_VAR 0 3
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: IN
17328: PUSH
17329: LD_EXP 52
17333: PUSH
17334: LD_VAR 0 1
17338: ARRAY
17339: PUSH
17340: LD_VAR 0 2
17344: ARRAY
17345: PUSH
17346: LD_INT 1
17348: ARRAY
17349: PPUSH
17350: LD_EXP 52
17354: PUSH
17355: LD_VAR 0 1
17359: ARRAY
17360: PUSH
17361: LD_VAR 0 2
17365: ARRAY
17366: PUSH
17367: LD_INT 2
17369: ARRAY
17370: PPUSH
17371: CALL_OW 458
17375: AND
17376: IFFALSE 17470
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17378: LD_EXP 52
17382: PUSH
17383: LD_VAR 0 1
17387: ARRAY
17388: PUSH
17389: LD_VAR 0 2
17393: ARRAY
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: PPUSH
17399: LD_EXP 52
17403: PUSH
17404: LD_VAR 0 1
17408: ARRAY
17409: PUSH
17410: LD_VAR 0 2
17414: ARRAY
17415: PUSH
17416: LD_INT 2
17418: ARRAY
17419: PPUSH
17420: LD_VAR 0 3
17424: PPUSH
17425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17429: LD_ADDR_EXP 52
17433: PUSH
17434: LD_EXP 52
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: LD_EXP 52
17448: PUSH
17449: LD_VAR 0 1
17453: ARRAY
17454: PPUSH
17455: LD_VAR 0 2
17459: PPUSH
17460: CALL_OW 3
17464: PPUSH
17465: CALL_OW 1
17469: ST_TO_ADDR
// end ; end ;
17470: GO 17221
17472: POP
17473: POP
// end ;
17474: GO 17139
17476: POP
17477: POP
// end ;
17478: PPOPN 4
17480: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17481: LD_INT 0
17483: PPUSH
17484: PPUSH
// result := false ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_INT 0
17492: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 264
17502: PUSH
17503: LD_INT 81
17505: EQUAL
17506: NOT
17507: IFFALSE 17511
// exit ;
17509: GO 17751
// index := GetElementIndex ( minersList , unit ) ;
17511: LD_ADDR_VAR 0 5
17515: PUSH
17516: LD_EXP 51
17520: PPUSH
17521: LD_VAR 0 1
17525: PPUSH
17526: CALL 39533 0 2
17530: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17531: LD_EXP 52
17535: PUSH
17536: LD_VAR 0 5
17540: ARRAY
17541: PUSH
17542: LD_EXP 53
17546: GREATEREQUAL
17547: IFFALSE 17551
// exit ;
17549: GO 17751
// ComMoveXY ( unit , x , y ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_VAR 0 2
17560: PPUSH
17561: LD_VAR 0 3
17565: PPUSH
17566: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17570: LD_INT 35
17572: PPUSH
17573: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17577: LD_VAR 0 1
17581: PPUSH
17582: LD_VAR 0 2
17586: PPUSH
17587: LD_VAR 0 3
17591: PPUSH
17592: CALL 70860 0 3
17596: NOT
17597: PUSH
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 314
17607: AND
17608: IFFALSE 17612
// exit ;
17610: GO 17751
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17612: LD_VAR 0 2
17616: PPUSH
17617: LD_VAR 0 3
17621: PPUSH
17622: CALL_OW 428
17626: PUSH
17627: LD_VAR 0 1
17631: EQUAL
17632: PUSH
17633: LD_VAR 0 1
17637: PPUSH
17638: CALL_OW 314
17642: NOT
17643: AND
17644: IFFALSE 17570
// PlaySoundXY ( x , y , PlantMine ) ;
17646: LD_VAR 0 2
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_STRING PlantMine
17658: PPUSH
17659: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 255
17682: PPUSH
17683: LD_INT 0
17685: PPUSH
17686: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17690: LD_ADDR_EXP 52
17694: PUSH
17695: LD_EXP 52
17699: PPUSH
17700: LD_VAR 0 5
17704: PUSH
17705: LD_EXP 52
17709: PUSH
17710: LD_VAR 0 5
17714: ARRAY
17715: PUSH
17716: LD_INT 1
17718: PLUS
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PPUSH
17724: LD_VAR 0 2
17728: PUSH
17729: LD_VAR 0 3
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL 39748 0 3
17742: ST_TO_ADDR
// result := true ;
17743: LD_ADDR_VAR 0 4
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
// end ;
17751: LD_VAR 0 4
17755: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
17760: PPUSH
// if not unit in minersList then
17761: LD_VAR 0 1
17765: PUSH
17766: LD_EXP 51
17770: IN
17771: NOT
17772: IFFALSE 17776
// exit ;
17774: GO 18168
// index := GetElementIndex ( minersList , unit ) ;
17776: LD_ADDR_VAR 0 6
17780: PUSH
17781: LD_EXP 51
17785: PPUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL 39533 0 2
17795: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17796: LD_ADDR_VAR 0 5
17800: PUSH
17801: DOUBLE
17802: LD_EXP 52
17806: PUSH
17807: LD_VAR 0 6
17811: ARRAY
17812: INC
17813: ST_TO_ADDR
17814: LD_INT 1
17816: PUSH
17817: FOR_DOWNTO
17818: IFFALSE 17979
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17820: LD_EXP 52
17824: PUSH
17825: LD_VAR 0 6
17829: ARRAY
17830: PUSH
17831: LD_VAR 0 5
17835: ARRAY
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PUSH
17841: LD_VAR 0 2
17845: EQUAL
17846: PUSH
17847: LD_EXP 52
17851: PUSH
17852: LD_VAR 0 6
17856: ARRAY
17857: PUSH
17858: LD_VAR 0 5
17862: ARRAY
17863: PUSH
17864: LD_INT 2
17866: ARRAY
17867: PUSH
17868: LD_VAR 0 3
17872: EQUAL
17873: AND
17874: IFFALSE 17977
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17876: LD_EXP 52
17880: PUSH
17881: LD_VAR 0 6
17885: ARRAY
17886: PUSH
17887: LD_VAR 0 5
17891: ARRAY
17892: PUSH
17893: LD_INT 1
17895: ARRAY
17896: PPUSH
17897: LD_EXP 52
17901: PUSH
17902: LD_VAR 0 6
17906: ARRAY
17907: PUSH
17908: LD_VAR 0 5
17912: ARRAY
17913: PUSH
17914: LD_INT 2
17916: ARRAY
17917: PPUSH
17918: LD_VAR 0 1
17922: PPUSH
17923: CALL_OW 255
17927: PPUSH
17928: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17932: LD_ADDR_EXP 52
17936: PUSH
17937: LD_EXP 52
17941: PPUSH
17942: LD_VAR 0 6
17946: PPUSH
17947: LD_EXP 52
17951: PUSH
17952: LD_VAR 0 6
17956: ARRAY
17957: PPUSH
17958: LD_VAR 0 5
17962: PPUSH
17963: CALL_OW 3
17967: PPUSH
17968: CALL_OW 1
17972: ST_TO_ADDR
// exit ;
17973: POP
17974: POP
17975: GO 18168
// end ; end ;
17977: GO 17817
17979: POP
17980: POP
// for i := minerMinesList [ index ] downto 1 do
17981: LD_ADDR_VAR 0 5
17985: PUSH
17986: DOUBLE
17987: LD_EXP 52
17991: PUSH
17992: LD_VAR 0 6
17996: ARRAY
17997: INC
17998: ST_TO_ADDR
17999: LD_INT 1
18001: PUSH
18002: FOR_DOWNTO
18003: IFFALSE 18166
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18005: LD_EXP 52
18009: PUSH
18010: LD_VAR 0 6
18014: ARRAY
18015: PUSH
18016: LD_VAR 0 5
18020: ARRAY
18021: PUSH
18022: LD_INT 1
18024: ARRAY
18025: PPUSH
18026: LD_EXP 52
18030: PUSH
18031: LD_VAR 0 6
18035: ARRAY
18036: PUSH
18037: LD_VAR 0 5
18041: ARRAY
18042: PUSH
18043: LD_INT 2
18045: ARRAY
18046: PPUSH
18047: LD_VAR 0 2
18051: PPUSH
18052: LD_VAR 0 3
18056: PPUSH
18057: CALL_OW 298
18061: PUSH
18062: LD_INT 6
18064: LESS
18065: IFFALSE 18164
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18067: LD_EXP 52
18071: PUSH
18072: LD_VAR 0 6
18076: ARRAY
18077: PUSH
18078: LD_VAR 0 5
18082: ARRAY
18083: PUSH
18084: LD_INT 1
18086: ARRAY
18087: PPUSH
18088: LD_EXP 52
18092: PUSH
18093: LD_VAR 0 6
18097: ARRAY
18098: PUSH
18099: LD_VAR 0 5
18103: ARRAY
18104: PUSH
18105: LD_INT 2
18107: ARRAY
18108: PPUSH
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 255
18118: PPUSH
18119: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18123: LD_ADDR_EXP 52
18127: PUSH
18128: LD_EXP 52
18132: PPUSH
18133: LD_VAR 0 6
18137: PPUSH
18138: LD_EXP 52
18142: PUSH
18143: LD_VAR 0 6
18147: ARRAY
18148: PPUSH
18149: LD_VAR 0 5
18153: PPUSH
18154: CALL_OW 3
18158: PPUSH
18159: CALL_OW 1
18163: ST_TO_ADDR
// end ; end ;
18164: GO 18002
18166: POP
18167: POP
// end ;
18168: LD_VAR 0 4
18172: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18173: LD_INT 0
18175: PPUSH
18176: PPUSH
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
18181: PPUSH
18182: PPUSH
18183: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 264
18193: PUSH
18194: LD_INT 81
18196: EQUAL
18197: NOT
18198: PUSH
18199: LD_VAR 0 1
18203: PUSH
18204: LD_EXP 51
18208: IN
18209: NOT
18210: OR
18211: IFFALSE 18215
// exit ;
18213: GO 18537
// index := GetElementIndex ( minersList , unit ) ;
18215: LD_ADDR_VAR 0 6
18219: PUSH
18220: LD_EXP 51
18224: PPUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL 39533 0 2
18234: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18235: LD_ADDR_VAR 0 8
18239: PUSH
18240: LD_EXP 53
18244: PUSH
18245: LD_EXP 52
18249: PUSH
18250: LD_VAR 0 6
18254: ARRAY
18255: MINUS
18256: ST_TO_ADDR
// if not minesFreeAmount then
18257: LD_VAR 0 8
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18537
// tmp := [ ] ;
18266: LD_ADDR_VAR 0 7
18270: PUSH
18271: EMPTY
18272: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18273: LD_ADDR_VAR 0 5
18277: PUSH
18278: DOUBLE
18279: LD_INT 1
18281: DEC
18282: ST_TO_ADDR
18283: LD_VAR 0 8
18287: PUSH
18288: FOR_TO
18289: IFFALSE 18484
// begin _d := rand ( 0 , 5 ) ;
18291: LD_ADDR_VAR 0 11
18295: PUSH
18296: LD_INT 0
18298: PPUSH
18299: LD_INT 5
18301: PPUSH
18302: CALL_OW 12
18306: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18307: LD_ADDR_VAR 0 12
18311: PUSH
18312: LD_INT 2
18314: PPUSH
18315: LD_INT 6
18317: PPUSH
18318: CALL_OW 12
18322: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18323: LD_ADDR_VAR 0 9
18327: PUSH
18328: LD_VAR 0 2
18332: PPUSH
18333: LD_VAR 0 11
18337: PPUSH
18338: LD_VAR 0 12
18342: PPUSH
18343: CALL_OW 272
18347: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18348: LD_ADDR_VAR 0 10
18352: PUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: LD_VAR 0 11
18362: PPUSH
18363: LD_VAR 0 12
18367: PPUSH
18368: CALL_OW 273
18372: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18373: LD_VAR 0 9
18377: PPUSH
18378: LD_VAR 0 10
18382: PPUSH
18383: CALL_OW 488
18387: PUSH
18388: LD_VAR 0 9
18392: PUSH
18393: LD_VAR 0 10
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_VAR 0 7
18406: IN
18407: NOT
18408: AND
18409: PUSH
18410: LD_VAR 0 9
18414: PPUSH
18415: LD_VAR 0 10
18419: PPUSH
18420: CALL_OW 458
18424: NOT
18425: AND
18426: IFFALSE 18468
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18428: LD_ADDR_VAR 0 7
18432: PUSH
18433: LD_VAR 0 7
18437: PPUSH
18438: LD_VAR 0 7
18442: PUSH
18443: LD_INT 1
18445: PLUS
18446: PPUSH
18447: LD_VAR 0 9
18451: PUSH
18452: LD_VAR 0 10
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL_OW 1
18465: ST_TO_ADDR
18466: GO 18482
// i := i - 1 ;
18468: LD_ADDR_VAR 0 5
18472: PUSH
18473: LD_VAR 0 5
18477: PUSH
18478: LD_INT 1
18480: MINUS
18481: ST_TO_ADDR
// end ;
18482: GO 18288
18484: POP
18485: POP
// for i in tmp do
18486: LD_ADDR_VAR 0 5
18490: PUSH
18491: LD_VAR 0 7
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18535
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_VAR 0 5
18508: PUSH
18509: LD_INT 1
18511: ARRAY
18512: PPUSH
18513: LD_VAR 0 5
18517: PUSH
18518: LD_INT 2
18520: ARRAY
18521: PPUSH
18522: CALL 17481 0 3
18526: NOT
18527: IFFALSE 18533
// exit ;
18529: POP
18530: POP
18531: GO 18537
18533: GO 18496
18535: POP
18536: POP
// end ;
18537: LD_VAR 0 4
18541: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18542: LD_INT 0
18544: PPUSH
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
// if not GetClass ( unit ) = class_sniper then
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL_OW 257
18560: PUSH
18561: LD_INT 5
18563: EQUAL
18564: NOT
18565: IFFALSE 18569
// exit ;
18567: GO 18957
// dist := 8 ;
18569: LD_ADDR_VAR 0 5
18573: PUSH
18574: LD_INT 8
18576: ST_TO_ADDR
// viewRange := 12 ;
18577: LD_ADDR_VAR 0 7
18581: PUSH
18582: LD_INT 12
18584: ST_TO_ADDR
// side := GetSide ( unit ) ;
18585: LD_ADDR_VAR 0 6
18589: PUSH
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 255
18599: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18600: LD_INT 61
18602: PPUSH
18603: LD_VAR 0 6
18607: PPUSH
18608: CALL_OW 321
18612: PUSH
18613: LD_INT 2
18615: EQUAL
18616: IFFALSE 18626
// viewRange := 16 ;
18618: LD_ADDR_VAR 0 7
18622: PUSH
18623: LD_INT 16
18625: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18626: LD_VAR 0 1
18630: PPUSH
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_VAR 0 3
18640: PPUSH
18641: CALL_OW 297
18645: PUSH
18646: LD_VAR 0 5
18650: GREATER
18651: IFFALSE 18730
// begin ComMoveXY ( unit , x , y ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: LD_VAR 0 2
18662: PPUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18672: LD_INT 35
18674: PPUSH
18675: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18679: LD_VAR 0 1
18683: PPUSH
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_VAR 0 3
18693: PPUSH
18694: CALL 70860 0 3
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 18957
// until GetDistUnitXY ( unit , x , y ) < dist ;
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_VAR 0 2
18712: PPUSH
18713: LD_VAR 0 3
18717: PPUSH
18718: CALL_OW 297
18722: PUSH
18723: LD_VAR 0 5
18727: LESS
18728: IFFALSE 18672
// end ; ComTurnXY ( unit , x , y ) ;
18730: LD_VAR 0 1
18734: PPUSH
18735: LD_VAR 0 2
18739: PPUSH
18740: LD_VAR 0 3
18744: PPUSH
18745: CALL_OW 118
// wait ( 5 ) ;
18749: LD_INT 5
18751: PPUSH
18752: CALL_OW 67
// _d := GetDir ( unit ) ;
18756: LD_ADDR_VAR 0 10
18760: PUSH
18761: LD_VAR 0 1
18765: PPUSH
18766: CALL_OW 254
18770: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18771: LD_ADDR_VAR 0 8
18775: PUSH
18776: LD_VAR 0 1
18780: PPUSH
18781: CALL_OW 250
18785: PPUSH
18786: LD_VAR 0 10
18790: PPUSH
18791: LD_VAR 0 5
18795: PPUSH
18796: CALL_OW 272
18800: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18801: LD_ADDR_VAR 0 9
18805: PUSH
18806: LD_VAR 0 1
18810: PPUSH
18811: CALL_OW 251
18815: PPUSH
18816: LD_VAR 0 10
18820: PPUSH
18821: LD_VAR 0 5
18825: PPUSH
18826: CALL_OW 273
18830: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18831: LD_VAR 0 8
18835: PPUSH
18836: LD_VAR 0 9
18840: PPUSH
18841: CALL_OW 488
18845: NOT
18846: IFFALSE 18850
// exit ;
18848: GO 18957
// ComAnimCustom ( unit , 1 ) ;
18850: LD_VAR 0 1
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18862: LD_VAR 0 8
18866: PPUSH
18867: LD_VAR 0 9
18871: PPUSH
18872: LD_VAR 0 6
18876: PPUSH
18877: LD_VAR 0 7
18881: PPUSH
18882: CALL_OW 330
// repeat wait ( 1 ) ;
18886: LD_INT 1
18888: PPUSH
18889: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: CALL_OW 316
18902: PUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 314
18912: OR
18913: PUSH
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 302
18923: NOT
18924: OR
18925: PUSH
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 301
18935: OR
18936: IFFALSE 18886
// RemoveSeeing ( _x , _y , side ) ;
18938: LD_VAR 0 8
18942: PPUSH
18943: LD_VAR 0 9
18947: PPUSH
18948: LD_VAR 0 6
18952: PPUSH
18953: CALL_OW 331
// end ; end_of_file
18957: LD_VAR 0 4
18961: RET
// every 0 0$1 do
18962: GO 18964
18964: DISABLE
// begin enable ;
18965: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18966: LD_STRING updateTimer(
18968: PUSH
18969: LD_OWVAR 1
18973: STR
18974: PUSH
18975: LD_STRING );
18977: STR
18978: PPUSH
18979: CALL_OW 559
// end ;
18983: END
// export function SOS_MapStart ( ) ; begin
18984: LD_INT 0
18986: PPUSH
// if streamModeActive then
18987: LD_EXP 54
18991: IFFALSE 19000
// DefineStreamItems ( true ) ;
18993: LD_INT 1
18995: PPUSH
18996: CALL 20654 0 1
// UpdateFactoryWaypoints ( ) ;
19000: CALL 33515 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19004: CALL 33772 0 0
// end ;
19008: LD_VAR 0 1
19012: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19013: LD_INT 0
19015: PPUSH
// if p2 = hack_mode then
19016: LD_VAR 0 2
19020: PUSH
19021: LD_INT 100
19023: EQUAL
19024: IFFALSE 20027
// begin if not StreamModeActive then
19026: LD_EXP 54
19030: NOT
19031: IFFALSE 19041
// StreamModeActive := true ;
19033: LD_ADDR_EXP 54
19037: PUSH
19038: LD_INT 1
19040: ST_TO_ADDR
// if p3 = 0 then
19041: LD_VAR 0 3
19045: PUSH
19046: LD_INT 0
19048: EQUAL
19049: IFFALSE 19055
// InitStreamMode ;
19051: CALL 20190 0 0
// if p3 = 1 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 1
19062: EQUAL
19063: IFFALSE 19073
// sRocket := true ;
19065: LD_ADDR_EXP 59
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// if p3 = 2 then
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 2
19080: EQUAL
19081: IFFALSE 19091
// sSpeed := true ;
19083: LD_ADDR_EXP 58
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
// if p3 = 3 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 3
19098: EQUAL
19099: IFFALSE 19109
// sEngine := true ;
19101: LD_ADDR_EXP 60
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// if p3 = 4 then
19109: LD_VAR 0 3
19113: PUSH
19114: LD_INT 4
19116: EQUAL
19117: IFFALSE 19127
// sSpec := true ;
19119: LD_ADDR_EXP 57
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if p3 = 5 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 5
19134: EQUAL
19135: IFFALSE 19145
// sLevel := true ;
19137: LD_ADDR_EXP 61
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 6 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 6
19152: EQUAL
19153: IFFALSE 19163
// sArmoury := true ;
19155: LD_ADDR_EXP 62
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 7 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 7
19170: EQUAL
19171: IFFALSE 19181
// sRadar := true ;
19173: LD_ADDR_EXP 63
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 8 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 8
19188: EQUAL
19189: IFFALSE 19199
// sBunker := true ;
19191: LD_ADDR_EXP 64
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 9 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 9
19206: EQUAL
19207: IFFALSE 19217
// sHack := true ;
19209: LD_ADDR_EXP 65
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 10 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 10
19224: EQUAL
19225: IFFALSE 19235
// sFire := true ;
19227: LD_ADDR_EXP 66
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 11 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 11
19242: EQUAL
19243: IFFALSE 19253
// sRefresh := true ;
19245: LD_ADDR_EXP 67
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 12 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 12
19260: EQUAL
19261: IFFALSE 19271
// sExp := true ;
19263: LD_ADDR_EXP 68
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 13 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 13
19278: EQUAL
19279: IFFALSE 19289
// sDepot := true ;
19281: LD_ADDR_EXP 69
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 14 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 14
19296: EQUAL
19297: IFFALSE 19307
// sFlag := true ;
19299: LD_ADDR_EXP 70
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 15 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 15
19314: EQUAL
19315: IFFALSE 19325
// sKamikadze := true ;
19317: LD_ADDR_EXP 78
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 16 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 16
19332: EQUAL
19333: IFFALSE 19343
// sTroll := true ;
19335: LD_ADDR_EXP 79
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 17 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 17
19350: EQUAL
19351: IFFALSE 19361
// sSlow := true ;
19353: LD_ADDR_EXP 80
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 18 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 18
19368: EQUAL
19369: IFFALSE 19379
// sLack := true ;
19371: LD_ADDR_EXP 81
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 19 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 19
19386: EQUAL
19387: IFFALSE 19397
// sTank := true ;
19389: LD_ADDR_EXP 83
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 20 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 20
19404: EQUAL
19405: IFFALSE 19415
// sRemote := true ;
19407: LD_ADDR_EXP 84
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 21 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 21
19422: EQUAL
19423: IFFALSE 19433
// sPowell := true ;
19425: LD_ADDR_EXP 85
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 22 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 22
19440: EQUAL
19441: IFFALSE 19451
// sTeleport := true ;
19443: LD_ADDR_EXP 88
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 23 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 23
19458: EQUAL
19459: IFFALSE 19469
// sOilTower := true ;
19461: LD_ADDR_EXP 90
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 24 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 24
19476: EQUAL
19477: IFFALSE 19487
// sShovel := true ;
19479: LD_ADDR_EXP 91
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 25 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 25
19494: EQUAL
19495: IFFALSE 19505
// sSheik := true ;
19497: LD_ADDR_EXP 92
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 26 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 26
19512: EQUAL
19513: IFFALSE 19523
// sEarthquake := true ;
19515: LD_ADDR_EXP 94
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 27 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 27
19530: EQUAL
19531: IFFALSE 19541
// sAI := true ;
19533: LD_ADDR_EXP 95
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 28 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 28
19548: EQUAL
19549: IFFALSE 19559
// sCargo := true ;
19551: LD_ADDR_EXP 98
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 29 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 29
19566: EQUAL
19567: IFFALSE 19577
// sDLaser := true ;
19569: LD_ADDR_EXP 99
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 30 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 30
19584: EQUAL
19585: IFFALSE 19595
// sExchange := true ;
19587: LD_ADDR_EXP 100
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 31 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 31
19602: EQUAL
19603: IFFALSE 19613
// sFac := true ;
19605: LD_ADDR_EXP 101
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 32 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 32
19620: EQUAL
19621: IFFALSE 19631
// sPower := true ;
19623: LD_ADDR_EXP 102
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 33 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 33
19638: EQUAL
19639: IFFALSE 19649
// sRandom := true ;
19641: LD_ADDR_EXP 103
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 34 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 34
19656: EQUAL
19657: IFFALSE 19667
// sShield := true ;
19659: LD_ADDR_EXP 104
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 35 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 35
19674: EQUAL
19675: IFFALSE 19685
// sTime := true ;
19677: LD_ADDR_EXP 105
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 36 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 36
19692: EQUAL
19693: IFFALSE 19703
// sTools := true ;
19695: LD_ADDR_EXP 106
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 101 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 101
19710: EQUAL
19711: IFFALSE 19721
// sSold := true ;
19713: LD_ADDR_EXP 71
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 102 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 102
19728: EQUAL
19729: IFFALSE 19739
// sDiff := true ;
19731: LD_ADDR_EXP 72
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 103 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 103
19746: EQUAL
19747: IFFALSE 19757
// sFog := true ;
19749: LD_ADDR_EXP 75
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 104 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 104
19764: EQUAL
19765: IFFALSE 19775
// sReset := true ;
19767: LD_ADDR_EXP 76
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 105 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 105
19782: EQUAL
19783: IFFALSE 19793
// sSun := true ;
19785: LD_ADDR_EXP 77
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 106 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 106
19800: EQUAL
19801: IFFALSE 19811
// sTiger := true ;
19803: LD_ADDR_EXP 73
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 107 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 107
19818: EQUAL
19819: IFFALSE 19829
// sBomb := true ;
19821: LD_ADDR_EXP 74
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 108 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 108
19836: EQUAL
19837: IFFALSE 19847
// sWound := true ;
19839: LD_ADDR_EXP 82
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 109 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 109
19854: EQUAL
19855: IFFALSE 19865
// sBetray := true ;
19857: LD_ADDR_EXP 86
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 110 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 110
19872: EQUAL
19873: IFFALSE 19883
// sContamin := true ;
19875: LD_ADDR_EXP 87
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 111 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 111
19890: EQUAL
19891: IFFALSE 19901
// sOil := true ;
19893: LD_ADDR_EXP 89
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 112 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 112
19908: EQUAL
19909: IFFALSE 19919
// sStu := true ;
19911: LD_ADDR_EXP 93
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 113 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 113
19926: EQUAL
19927: IFFALSE 19937
// sBazooka := true ;
19929: LD_ADDR_EXP 96
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 114 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 114
19944: EQUAL
19945: IFFALSE 19955
// sMortar := true ;
19947: LD_ADDR_EXP 97
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 115 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 115
19962: EQUAL
19963: IFFALSE 19973
// sRanger := true ;
19965: LD_ADDR_EXP 107
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 116 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 116
19980: EQUAL
19981: IFFALSE 19991
// sComputer := true ;
19983: LD_ADDR_EXP 108
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 117 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 117
19998: EQUAL
19999: IFFALSE 20009
// s30 := true ;
20001: LD_ADDR_EXP 109
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 118 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 118
20016: EQUAL
20017: IFFALSE 20027
// s60 := true ;
20019: LD_ADDR_EXP 110
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// end ; if p2 = stream_mode then
20027: LD_VAR 0 2
20031: PUSH
20032: LD_INT 101
20034: EQUAL
20035: IFFALSE 20163
// begin case p3 of 1 :
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 1
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20057
20050: POP
// hHackUnlimitedResources ; 2 :
20051: CALL 32261 0 0
20055: GO 20163
20057: LD_INT 2
20059: DOUBLE
20060: EQUAL
20061: IFTRUE 20065
20063: GO 20072
20065: POP
// hHackSetLevel10 ; 3 :
20066: CALL 32394 0 0
20070: GO 20163
20072: LD_INT 3
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20087
20080: POP
// hHackSetLevel10YourUnits ; 4 :
20081: CALL 32479 0 0
20085: GO 20163
20087: LD_INT 4
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20102
20095: POP
// hHackInvincible ; 5 :
20096: CALL 32927 0 0
20100: GO 20163
20102: LD_INT 5
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20117
20110: POP
// hHackInvisible ; 6 :
20111: CALL 33038 0 0
20115: GO 20163
20117: LD_INT 6
20119: DOUBLE
20120: EQUAL
20121: IFTRUE 20125
20123: GO 20132
20125: POP
// hHackChangeYourSide ; 7 :
20126: CALL 33095 0 0
20130: GO 20163
20132: LD_INT 7
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20147
20140: POP
// hHackChangeUnitSide ; 8 :
20141: CALL 33137 0 0
20145: GO 20163
20147: LD_INT 8
20149: DOUBLE
20150: EQUAL
20151: IFTRUE 20155
20153: GO 20162
20155: POP
// hHackFog ; end ;
20156: CALL 33238 0 0
20160: GO 20163
20162: POP
// end ; end ;
20163: LD_VAR 0 7
20167: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20168: GO 20170
20170: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20171: LD_STRING initStreamRollete();
20173: PPUSH
20174: CALL_OW 559
// InitStreamMode ;
20178: CALL 20190 0 0
// DefineStreamItems ( false ) ;
20182: LD_INT 0
20184: PPUSH
20185: CALL 20654 0 1
// end ;
20189: END
// function InitStreamMode ; begin
20190: LD_INT 0
20192: PPUSH
// streamModeActive := false ;
20193: LD_ADDR_EXP 54
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// normalCounter := 36 ;
20201: LD_ADDR_EXP 55
20205: PUSH
20206: LD_INT 36
20208: ST_TO_ADDR
// hardcoreCounter := 18 ;
20209: LD_ADDR_EXP 56
20213: PUSH
20214: LD_INT 18
20216: ST_TO_ADDR
// sRocket := false ;
20217: LD_ADDR_EXP 59
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sSpeed := false ;
20225: LD_ADDR_EXP 58
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sEngine := false ;
20233: LD_ADDR_EXP 60
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sSpec := false ;
20241: LD_ADDR_EXP 57
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sLevel := false ;
20249: LD_ADDR_EXP 61
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sArmoury := false ;
20257: LD_ADDR_EXP 62
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sRadar := false ;
20265: LD_ADDR_EXP 63
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sBunker := false ;
20273: LD_ADDR_EXP 64
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sHack := false ;
20281: LD_ADDR_EXP 65
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sFire := false ;
20289: LD_ADDR_EXP 66
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sRefresh := false ;
20297: LD_ADDR_EXP 67
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sExp := false ;
20305: LD_ADDR_EXP 68
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sDepot := false ;
20313: LD_ADDR_EXP 69
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sFlag := false ;
20321: LD_ADDR_EXP 70
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sKamikadze := false ;
20329: LD_ADDR_EXP 78
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sTroll := false ;
20337: LD_ADDR_EXP 79
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sSlow := false ;
20345: LD_ADDR_EXP 80
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sLack := false ;
20353: LD_ADDR_EXP 81
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sTank := false ;
20361: LD_ADDR_EXP 83
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sRemote := false ;
20369: LD_ADDR_EXP 84
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sPowell := false ;
20377: LD_ADDR_EXP 85
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sTeleport := false ;
20385: LD_ADDR_EXP 88
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sOilTower := false ;
20393: LD_ADDR_EXP 90
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sShovel := false ;
20401: LD_ADDR_EXP 91
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sSheik := false ;
20409: LD_ADDR_EXP 92
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sEarthquake := false ;
20417: LD_ADDR_EXP 94
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sAI := false ;
20425: LD_ADDR_EXP 95
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sCargo := false ;
20433: LD_ADDR_EXP 98
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sDLaser := false ;
20441: LD_ADDR_EXP 99
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sExchange := false ;
20449: LD_ADDR_EXP 100
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sFac := false ;
20457: LD_ADDR_EXP 101
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sPower := false ;
20465: LD_ADDR_EXP 102
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sRandom := false ;
20473: LD_ADDR_EXP 103
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sShield := false ;
20481: LD_ADDR_EXP 104
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sTime := false ;
20489: LD_ADDR_EXP 105
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sTools := false ;
20497: LD_ADDR_EXP 106
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sSold := false ;
20505: LD_ADDR_EXP 71
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sDiff := false ;
20513: LD_ADDR_EXP 72
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sFog := false ;
20521: LD_ADDR_EXP 75
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sReset := false ;
20529: LD_ADDR_EXP 76
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sSun := false ;
20537: LD_ADDR_EXP 77
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sTiger := false ;
20545: LD_ADDR_EXP 73
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sBomb := false ;
20553: LD_ADDR_EXP 74
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sWound := false ;
20561: LD_ADDR_EXP 82
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sBetray := false ;
20569: LD_ADDR_EXP 86
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sContamin := false ;
20577: LD_ADDR_EXP 87
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sOil := false ;
20585: LD_ADDR_EXP 89
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sStu := false ;
20593: LD_ADDR_EXP 93
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sBazooka := false ;
20601: LD_ADDR_EXP 96
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sMortar := false ;
20609: LD_ADDR_EXP 97
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sRanger := false ;
20617: LD_ADDR_EXP 107
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sComputer := false ;
20625: LD_ADDR_EXP 108
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// s30 := false ;
20633: LD_ADDR_EXP 109
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// s60 := false ;
20641: LD_ADDR_EXP 110
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// end ;
20649: LD_VAR 0 1
20653: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20654: LD_INT 0
20656: PPUSH
20657: PPUSH
20658: PPUSH
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
// result := [ ] ;
20663: LD_ADDR_VAR 0 2
20667: PUSH
20668: EMPTY
20669: ST_TO_ADDR
// if campaign_id = 1 then
20670: LD_OWVAR 69
20674: PUSH
20675: LD_INT 1
20677: EQUAL
20678: IFFALSE 23844
// begin case mission_number of 1 :
20680: LD_OWVAR 70
20684: PUSH
20685: LD_INT 1
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20769
20693: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20694: LD_ADDR_VAR 0 2
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: LD_INT 4
20704: PUSH
20705: LD_INT 11
20707: PUSH
20708: LD_INT 12
20710: PUSH
20711: LD_INT 15
20713: PUSH
20714: LD_INT 16
20716: PUSH
20717: LD_INT 22
20719: PUSH
20720: LD_INT 23
20722: PUSH
20723: LD_INT 26
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 101
20739: PUSH
20740: LD_INT 102
20742: PUSH
20743: LD_INT 106
20745: PUSH
20746: LD_INT 116
20748: PUSH
20749: LD_INT 117
20751: PUSH
20752: LD_INT 118
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: ST_TO_ADDR
20767: GO 23842
20769: LD_INT 2
20771: DOUBLE
20772: EQUAL
20773: IFTRUE 20777
20775: GO 20861
20777: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20778: LD_ADDR_VAR 0 2
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 4
20788: PUSH
20789: LD_INT 11
20791: PUSH
20792: LD_INT 12
20794: PUSH
20795: LD_INT 15
20797: PUSH
20798: LD_INT 16
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 23
20806: PUSH
20807: LD_INT 26
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 101
20823: PUSH
20824: LD_INT 102
20826: PUSH
20827: LD_INT 105
20829: PUSH
20830: LD_INT 106
20832: PUSH
20833: LD_INT 108
20835: PUSH
20836: LD_INT 116
20838: PUSH
20839: LD_INT 117
20841: PUSH
20842: LD_INT 118
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: ST_TO_ADDR
20859: GO 23842
20861: LD_INT 3
20863: DOUBLE
20864: EQUAL
20865: IFTRUE 20869
20867: GO 20957
20869: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 4
20880: PUSH
20881: LD_INT 5
20883: PUSH
20884: LD_INT 11
20886: PUSH
20887: LD_INT 12
20889: PUSH
20890: LD_INT 15
20892: PUSH
20893: LD_INT 16
20895: PUSH
20896: LD_INT 22
20898: PUSH
20899: LD_INT 26
20901: PUSH
20902: LD_INT 36
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 101
20919: PUSH
20920: LD_INT 102
20922: PUSH
20923: LD_INT 105
20925: PUSH
20926: LD_INT 106
20928: PUSH
20929: LD_INT 108
20931: PUSH
20932: LD_INT 116
20934: PUSH
20935: LD_INT 117
20937: PUSH
20938: LD_INT 118
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: ST_TO_ADDR
20955: GO 23842
20957: LD_INT 4
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 21061
20965: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20966: LD_ADDR_VAR 0 2
20970: PUSH
20971: LD_INT 2
20973: PUSH
20974: LD_INT 4
20976: PUSH
20977: LD_INT 5
20979: PUSH
20980: LD_INT 8
20982: PUSH
20983: LD_INT 11
20985: PUSH
20986: LD_INT 12
20988: PUSH
20989: LD_INT 15
20991: PUSH
20992: LD_INT 16
20994: PUSH
20995: LD_INT 22
20997: PUSH
20998: LD_INT 23
21000: PUSH
21001: LD_INT 26
21003: PUSH
21004: LD_INT 36
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 101
21023: PUSH
21024: LD_INT 102
21026: PUSH
21027: LD_INT 105
21029: PUSH
21030: LD_INT 106
21032: PUSH
21033: LD_INT 108
21035: PUSH
21036: LD_INT 116
21038: PUSH
21039: LD_INT 117
21041: PUSH
21042: LD_INT 118
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: ST_TO_ADDR
21059: GO 23842
21061: LD_INT 5
21063: DOUBLE
21064: EQUAL
21065: IFTRUE 21069
21067: GO 21181
21069: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21070: LD_ADDR_VAR 0 2
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: LD_INT 4
21080: PUSH
21081: LD_INT 5
21083: PUSH
21084: LD_INT 6
21086: PUSH
21087: LD_INT 8
21089: PUSH
21090: LD_INT 11
21092: PUSH
21093: LD_INT 12
21095: PUSH
21096: LD_INT 15
21098: PUSH
21099: LD_INT 16
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_INT 23
21107: PUSH
21108: LD_INT 25
21110: PUSH
21111: LD_INT 26
21113: PUSH
21114: LD_INT 36
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 101
21135: PUSH
21136: LD_INT 102
21138: PUSH
21139: LD_INT 105
21141: PUSH
21142: LD_INT 106
21144: PUSH
21145: LD_INT 108
21147: PUSH
21148: LD_INT 109
21150: PUSH
21151: LD_INT 112
21153: PUSH
21154: LD_INT 116
21156: PUSH
21157: LD_INT 117
21159: PUSH
21160: LD_INT 118
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: ST_TO_ADDR
21179: GO 23842
21181: LD_INT 6
21183: DOUBLE
21184: EQUAL
21185: IFTRUE 21189
21187: GO 21321
21189: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21190: LD_ADDR_VAR 0 2
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 4
21200: PUSH
21201: LD_INT 5
21203: PUSH
21204: LD_INT 6
21206: PUSH
21207: LD_INT 8
21209: PUSH
21210: LD_INT 11
21212: PUSH
21213: LD_INT 12
21215: PUSH
21216: LD_INT 15
21218: PUSH
21219: LD_INT 16
21221: PUSH
21222: LD_INT 20
21224: PUSH
21225: LD_INT 21
21227: PUSH
21228: LD_INT 22
21230: PUSH
21231: LD_INT 23
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 26
21239: PUSH
21240: LD_INT 30
21242: PUSH
21243: LD_INT 31
21245: PUSH
21246: LD_INT 32
21248: PUSH
21249: LD_INT 36
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 101
21275: PUSH
21276: LD_INT 102
21278: PUSH
21279: LD_INT 105
21281: PUSH
21282: LD_INT 106
21284: PUSH
21285: LD_INT 108
21287: PUSH
21288: LD_INT 109
21290: PUSH
21291: LD_INT 112
21293: PUSH
21294: LD_INT 116
21296: PUSH
21297: LD_INT 117
21299: PUSH
21300: LD_INT 118
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: ST_TO_ADDR
21319: GO 23842
21321: LD_INT 7
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21441
21329: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21330: LD_ADDR_VAR 0 2
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 4
21340: PUSH
21341: LD_INT 5
21343: PUSH
21344: LD_INT 7
21346: PUSH
21347: LD_INT 11
21349: PUSH
21350: LD_INT 12
21352: PUSH
21353: LD_INT 15
21355: PUSH
21356: LD_INT 16
21358: PUSH
21359: LD_INT 20
21361: PUSH
21362: LD_INT 21
21364: PUSH
21365: LD_INT 22
21367: PUSH
21368: LD_INT 23
21370: PUSH
21371: LD_INT 25
21373: PUSH
21374: LD_INT 26
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 101
21395: PUSH
21396: LD_INT 102
21398: PUSH
21399: LD_INT 103
21401: PUSH
21402: LD_INT 105
21404: PUSH
21405: LD_INT 106
21407: PUSH
21408: LD_INT 108
21410: PUSH
21411: LD_INT 112
21413: PUSH
21414: LD_INT 116
21416: PUSH
21417: LD_INT 117
21419: PUSH
21420: LD_INT 118
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: ST_TO_ADDR
21439: GO 23842
21441: LD_INT 8
21443: DOUBLE
21444: EQUAL
21445: IFTRUE 21449
21447: GO 21589
21449: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: LD_INT 4
21460: PUSH
21461: LD_INT 5
21463: PUSH
21464: LD_INT 6
21466: PUSH
21467: LD_INT 7
21469: PUSH
21470: LD_INT 8
21472: PUSH
21473: LD_INT 11
21475: PUSH
21476: LD_INT 12
21478: PUSH
21479: LD_INT 15
21481: PUSH
21482: LD_INT 16
21484: PUSH
21485: LD_INT 20
21487: PUSH
21488: LD_INT 21
21490: PUSH
21491: LD_INT 22
21493: PUSH
21494: LD_INT 23
21496: PUSH
21497: LD_INT 25
21499: PUSH
21500: LD_INT 26
21502: PUSH
21503: LD_INT 30
21505: PUSH
21506: LD_INT 31
21508: PUSH
21509: LD_INT 32
21511: PUSH
21512: LD_INT 36
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 101
21539: PUSH
21540: LD_INT 102
21542: PUSH
21543: LD_INT 103
21545: PUSH
21546: LD_INT 105
21548: PUSH
21549: LD_INT 106
21551: PUSH
21552: LD_INT 108
21554: PUSH
21555: LD_INT 109
21557: PUSH
21558: LD_INT 112
21560: PUSH
21561: LD_INT 116
21563: PUSH
21564: LD_INT 117
21566: PUSH
21567: LD_INT 118
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: ST_TO_ADDR
21587: GO 23842
21589: LD_INT 9
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21745
21597: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 4
21608: PUSH
21609: LD_INT 5
21611: PUSH
21612: LD_INT 6
21614: PUSH
21615: LD_INT 7
21617: PUSH
21618: LD_INT 8
21620: PUSH
21621: LD_INT 11
21623: PUSH
21624: LD_INT 12
21626: PUSH
21627: LD_INT 15
21629: PUSH
21630: LD_INT 16
21632: PUSH
21633: LD_INT 20
21635: PUSH
21636: LD_INT 21
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_INT 23
21644: PUSH
21645: LD_INT 25
21647: PUSH
21648: LD_INT 26
21650: PUSH
21651: LD_INT 28
21653: PUSH
21654: LD_INT 30
21656: PUSH
21657: LD_INT 31
21659: PUSH
21660: LD_INT 32
21662: PUSH
21663: LD_INT 36
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 101
21691: PUSH
21692: LD_INT 102
21694: PUSH
21695: LD_INT 103
21697: PUSH
21698: LD_INT 105
21700: PUSH
21701: LD_INT 106
21703: PUSH
21704: LD_INT 108
21706: PUSH
21707: LD_INT 109
21709: PUSH
21710: LD_INT 112
21712: PUSH
21713: LD_INT 114
21715: PUSH
21716: LD_INT 116
21718: PUSH
21719: LD_INT 117
21721: PUSH
21722: LD_INT 118
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: ST_TO_ADDR
21743: GO 23842
21745: LD_INT 10
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21949
21753: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21754: LD_ADDR_VAR 0 2
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 4
21764: PUSH
21765: LD_INT 5
21767: PUSH
21768: LD_INT 6
21770: PUSH
21771: LD_INT 7
21773: PUSH
21774: LD_INT 8
21776: PUSH
21777: LD_INT 9
21779: PUSH
21780: LD_INT 10
21782: PUSH
21783: LD_INT 11
21785: PUSH
21786: LD_INT 12
21788: PUSH
21789: LD_INT 13
21791: PUSH
21792: LD_INT 14
21794: PUSH
21795: LD_INT 15
21797: PUSH
21798: LD_INT 16
21800: PUSH
21801: LD_INT 17
21803: PUSH
21804: LD_INT 18
21806: PUSH
21807: LD_INT 19
21809: PUSH
21810: LD_INT 20
21812: PUSH
21813: LD_INT 21
21815: PUSH
21816: LD_INT 22
21818: PUSH
21819: LD_INT 23
21821: PUSH
21822: LD_INT 24
21824: PUSH
21825: LD_INT 25
21827: PUSH
21828: LD_INT 26
21830: PUSH
21831: LD_INT 28
21833: PUSH
21834: LD_INT 30
21836: PUSH
21837: LD_INT 31
21839: PUSH
21840: LD_INT 32
21842: PUSH
21843: LD_INT 36
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 101
21879: PUSH
21880: LD_INT 102
21882: PUSH
21883: LD_INT 103
21885: PUSH
21886: LD_INT 104
21888: PUSH
21889: LD_INT 105
21891: PUSH
21892: LD_INT 106
21894: PUSH
21895: LD_INT 107
21897: PUSH
21898: LD_INT 108
21900: PUSH
21901: LD_INT 109
21903: PUSH
21904: LD_INT 110
21906: PUSH
21907: LD_INT 111
21909: PUSH
21910: LD_INT 112
21912: PUSH
21913: LD_INT 114
21915: PUSH
21916: LD_INT 116
21918: PUSH
21919: LD_INT 117
21921: PUSH
21922: LD_INT 118
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: ST_TO_ADDR
21947: GO 23842
21949: LD_INT 11
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21957
21955: GO 22161
21957: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: LD_INT 4
21971: PUSH
21972: LD_INT 5
21974: PUSH
21975: LD_INT 6
21977: PUSH
21978: LD_INT 7
21980: PUSH
21981: LD_INT 8
21983: PUSH
21984: LD_INT 9
21986: PUSH
21987: LD_INT 10
21989: PUSH
21990: LD_INT 11
21992: PUSH
21993: LD_INT 12
21995: PUSH
21996: LD_INT 13
21998: PUSH
21999: LD_INT 14
22001: PUSH
22002: LD_INT 15
22004: PUSH
22005: LD_INT 16
22007: PUSH
22008: LD_INT 17
22010: PUSH
22011: LD_INT 18
22013: PUSH
22014: LD_INT 19
22016: PUSH
22017: LD_INT 20
22019: PUSH
22020: LD_INT 21
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_INT 23
22028: PUSH
22029: LD_INT 24
22031: PUSH
22032: LD_INT 25
22034: PUSH
22035: LD_INT 26
22037: PUSH
22038: LD_INT 28
22040: PUSH
22041: LD_INT 30
22043: PUSH
22044: LD_INT 31
22046: PUSH
22047: LD_INT 32
22049: PUSH
22050: LD_INT 34
22052: PUSH
22053: LD_INT 36
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 101
22091: PUSH
22092: LD_INT 102
22094: PUSH
22095: LD_INT 103
22097: PUSH
22098: LD_INT 104
22100: PUSH
22101: LD_INT 105
22103: PUSH
22104: LD_INT 106
22106: PUSH
22107: LD_INT 107
22109: PUSH
22110: LD_INT 108
22112: PUSH
22113: LD_INT 109
22115: PUSH
22116: LD_INT 110
22118: PUSH
22119: LD_INT 111
22121: PUSH
22122: LD_INT 112
22124: PUSH
22125: LD_INT 114
22127: PUSH
22128: LD_INT 116
22130: PUSH
22131: LD_INT 117
22133: PUSH
22134: LD_INT 118
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: ST_TO_ADDR
22159: GO 23842
22161: LD_INT 12
22163: DOUBLE
22164: EQUAL
22165: IFTRUE 22169
22167: GO 22389
22169: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22170: LD_ADDR_VAR 0 2
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: LD_INT 3
22183: PUSH
22184: LD_INT 4
22186: PUSH
22187: LD_INT 5
22189: PUSH
22190: LD_INT 6
22192: PUSH
22193: LD_INT 7
22195: PUSH
22196: LD_INT 8
22198: PUSH
22199: LD_INT 9
22201: PUSH
22202: LD_INT 10
22204: PUSH
22205: LD_INT 11
22207: PUSH
22208: LD_INT 12
22210: PUSH
22211: LD_INT 13
22213: PUSH
22214: LD_INT 14
22216: PUSH
22217: LD_INT 15
22219: PUSH
22220: LD_INT 16
22222: PUSH
22223: LD_INT 17
22225: PUSH
22226: LD_INT 18
22228: PUSH
22229: LD_INT 19
22231: PUSH
22232: LD_INT 20
22234: PUSH
22235: LD_INT 21
22237: PUSH
22238: LD_INT 22
22240: PUSH
22241: LD_INT 23
22243: PUSH
22244: LD_INT 24
22246: PUSH
22247: LD_INT 25
22249: PUSH
22250: LD_INT 26
22252: PUSH
22253: LD_INT 27
22255: PUSH
22256: LD_INT 28
22258: PUSH
22259: LD_INT 30
22261: PUSH
22262: LD_INT 31
22264: PUSH
22265: LD_INT 32
22267: PUSH
22268: LD_INT 33
22270: PUSH
22271: LD_INT 34
22273: PUSH
22274: LD_INT 36
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 101
22315: PUSH
22316: LD_INT 102
22318: PUSH
22319: LD_INT 103
22321: PUSH
22322: LD_INT 104
22324: PUSH
22325: LD_INT 105
22327: PUSH
22328: LD_INT 106
22330: PUSH
22331: LD_INT 107
22333: PUSH
22334: LD_INT 108
22336: PUSH
22337: LD_INT 109
22339: PUSH
22340: LD_INT 110
22342: PUSH
22343: LD_INT 111
22345: PUSH
22346: LD_INT 112
22348: PUSH
22349: LD_INT 113
22351: PUSH
22352: LD_INT 114
22354: PUSH
22355: LD_INT 116
22357: PUSH
22358: LD_INT 117
22360: PUSH
22361: LD_INT 118
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: ST_TO_ADDR
22387: GO 23842
22389: LD_INT 13
22391: DOUBLE
22392: EQUAL
22393: IFTRUE 22397
22395: GO 22605
22397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22398: LD_ADDR_VAR 0 2
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 3
22411: PUSH
22412: LD_INT 4
22414: PUSH
22415: LD_INT 5
22417: PUSH
22418: LD_INT 8
22420: PUSH
22421: LD_INT 9
22423: PUSH
22424: LD_INT 10
22426: PUSH
22427: LD_INT 11
22429: PUSH
22430: LD_INT 12
22432: PUSH
22433: LD_INT 14
22435: PUSH
22436: LD_INT 15
22438: PUSH
22439: LD_INT 16
22441: PUSH
22442: LD_INT 17
22444: PUSH
22445: LD_INT 18
22447: PUSH
22448: LD_INT 19
22450: PUSH
22451: LD_INT 20
22453: PUSH
22454: LD_INT 21
22456: PUSH
22457: LD_INT 22
22459: PUSH
22460: LD_INT 23
22462: PUSH
22463: LD_INT 24
22465: PUSH
22466: LD_INT 25
22468: PUSH
22469: LD_INT 26
22471: PUSH
22472: LD_INT 27
22474: PUSH
22475: LD_INT 28
22477: PUSH
22478: LD_INT 30
22480: PUSH
22481: LD_INT 31
22483: PUSH
22484: LD_INT 32
22486: PUSH
22487: LD_INT 33
22489: PUSH
22490: LD_INT 34
22492: PUSH
22493: LD_INT 36
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 101
22531: PUSH
22532: LD_INT 102
22534: PUSH
22535: LD_INT 103
22537: PUSH
22538: LD_INT 104
22540: PUSH
22541: LD_INT 105
22543: PUSH
22544: LD_INT 106
22546: PUSH
22547: LD_INT 107
22549: PUSH
22550: LD_INT 108
22552: PUSH
22553: LD_INT 109
22555: PUSH
22556: LD_INT 110
22558: PUSH
22559: LD_INT 111
22561: PUSH
22562: LD_INT 112
22564: PUSH
22565: LD_INT 113
22567: PUSH
22568: LD_INT 114
22570: PUSH
22571: LD_INT 116
22573: PUSH
22574: LD_INT 117
22576: PUSH
22577: LD_INT 118
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: ST_TO_ADDR
22603: GO 23842
22605: LD_INT 14
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22837
22613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22614: LD_ADDR_VAR 0 2
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 3
22627: PUSH
22628: LD_INT 4
22630: PUSH
22631: LD_INT 5
22633: PUSH
22634: LD_INT 6
22636: PUSH
22637: LD_INT 7
22639: PUSH
22640: LD_INT 8
22642: PUSH
22643: LD_INT 9
22645: PUSH
22646: LD_INT 10
22648: PUSH
22649: LD_INT 11
22651: PUSH
22652: LD_INT 12
22654: PUSH
22655: LD_INT 13
22657: PUSH
22658: LD_INT 14
22660: PUSH
22661: LD_INT 15
22663: PUSH
22664: LD_INT 16
22666: PUSH
22667: LD_INT 17
22669: PUSH
22670: LD_INT 18
22672: PUSH
22673: LD_INT 19
22675: PUSH
22676: LD_INT 20
22678: PUSH
22679: LD_INT 21
22681: PUSH
22682: LD_INT 22
22684: PUSH
22685: LD_INT 23
22687: PUSH
22688: LD_INT 24
22690: PUSH
22691: LD_INT 25
22693: PUSH
22694: LD_INT 26
22696: PUSH
22697: LD_INT 27
22699: PUSH
22700: LD_INT 28
22702: PUSH
22703: LD_INT 29
22705: PUSH
22706: LD_INT 30
22708: PUSH
22709: LD_INT 31
22711: PUSH
22712: LD_INT 32
22714: PUSH
22715: LD_INT 33
22717: PUSH
22718: LD_INT 34
22720: PUSH
22721: LD_INT 36
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 101
22763: PUSH
22764: LD_INT 102
22766: PUSH
22767: LD_INT 103
22769: PUSH
22770: LD_INT 104
22772: PUSH
22773: LD_INT 105
22775: PUSH
22776: LD_INT 106
22778: PUSH
22779: LD_INT 107
22781: PUSH
22782: LD_INT 108
22784: PUSH
22785: LD_INT 109
22787: PUSH
22788: LD_INT 110
22790: PUSH
22791: LD_INT 111
22793: PUSH
22794: LD_INT 112
22796: PUSH
22797: LD_INT 113
22799: PUSH
22800: LD_INT 114
22802: PUSH
22803: LD_INT 116
22805: PUSH
22806: LD_INT 117
22808: PUSH
22809: LD_INT 118
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: ST_TO_ADDR
22835: GO 23842
22837: LD_INT 15
22839: DOUBLE
22840: EQUAL
22841: IFTRUE 22845
22843: GO 23069
22845: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22846: LD_ADDR_VAR 0 2
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 3
22859: PUSH
22860: LD_INT 4
22862: PUSH
22863: LD_INT 5
22865: PUSH
22866: LD_INT 6
22868: PUSH
22869: LD_INT 7
22871: PUSH
22872: LD_INT 8
22874: PUSH
22875: LD_INT 9
22877: PUSH
22878: LD_INT 10
22880: PUSH
22881: LD_INT 11
22883: PUSH
22884: LD_INT 12
22886: PUSH
22887: LD_INT 13
22889: PUSH
22890: LD_INT 14
22892: PUSH
22893: LD_INT 15
22895: PUSH
22896: LD_INT 16
22898: PUSH
22899: LD_INT 17
22901: PUSH
22902: LD_INT 18
22904: PUSH
22905: LD_INT 19
22907: PUSH
22908: LD_INT 20
22910: PUSH
22911: LD_INT 21
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_INT 23
22919: PUSH
22920: LD_INT 24
22922: PUSH
22923: LD_INT 25
22925: PUSH
22926: LD_INT 26
22928: PUSH
22929: LD_INT 27
22931: PUSH
22932: LD_INT 28
22934: PUSH
22935: LD_INT 29
22937: PUSH
22938: LD_INT 30
22940: PUSH
22941: LD_INT 31
22943: PUSH
22944: LD_INT 32
22946: PUSH
22947: LD_INT 33
22949: PUSH
22950: LD_INT 34
22952: PUSH
22953: LD_INT 36
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 101
22995: PUSH
22996: LD_INT 102
22998: PUSH
22999: LD_INT 103
23001: PUSH
23002: LD_INT 104
23004: PUSH
23005: LD_INT 105
23007: PUSH
23008: LD_INT 106
23010: PUSH
23011: LD_INT 107
23013: PUSH
23014: LD_INT 108
23016: PUSH
23017: LD_INT 109
23019: PUSH
23020: LD_INT 110
23022: PUSH
23023: LD_INT 111
23025: PUSH
23026: LD_INT 112
23028: PUSH
23029: LD_INT 113
23031: PUSH
23032: LD_INT 114
23034: PUSH
23035: LD_INT 116
23037: PUSH
23038: LD_INT 117
23040: PUSH
23041: LD_INT 118
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: ST_TO_ADDR
23067: GO 23842
23069: LD_INT 16
23071: DOUBLE
23072: EQUAL
23073: IFTRUE 23077
23075: GO 23213
23077: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: LD_INT 4
23088: PUSH
23089: LD_INT 5
23091: PUSH
23092: LD_INT 7
23094: PUSH
23095: LD_INT 11
23097: PUSH
23098: LD_INT 12
23100: PUSH
23101: LD_INT 15
23103: PUSH
23104: LD_INT 16
23106: PUSH
23107: LD_INT 20
23109: PUSH
23110: LD_INT 21
23112: PUSH
23113: LD_INT 22
23115: PUSH
23116: LD_INT 23
23118: PUSH
23119: LD_INT 25
23121: PUSH
23122: LD_INT 26
23124: PUSH
23125: LD_INT 30
23127: PUSH
23128: LD_INT 31
23130: PUSH
23131: LD_INT 32
23133: PUSH
23134: LD_INT 33
23136: PUSH
23137: LD_INT 34
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 101
23163: PUSH
23164: LD_INT 102
23166: PUSH
23167: LD_INT 103
23169: PUSH
23170: LD_INT 106
23172: PUSH
23173: LD_INT 108
23175: PUSH
23176: LD_INT 112
23178: PUSH
23179: LD_INT 113
23181: PUSH
23182: LD_INT 114
23184: PUSH
23185: LD_INT 116
23187: PUSH
23188: LD_INT 117
23190: PUSH
23191: LD_INT 118
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: ST_TO_ADDR
23211: GO 23842
23213: LD_INT 17
23215: DOUBLE
23216: EQUAL
23217: IFTRUE 23221
23219: GO 23445
23221: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: LD_INT 3
23235: PUSH
23236: LD_INT 4
23238: PUSH
23239: LD_INT 5
23241: PUSH
23242: LD_INT 6
23244: PUSH
23245: LD_INT 7
23247: PUSH
23248: LD_INT 8
23250: PUSH
23251: LD_INT 9
23253: PUSH
23254: LD_INT 10
23256: PUSH
23257: LD_INT 11
23259: PUSH
23260: LD_INT 12
23262: PUSH
23263: LD_INT 13
23265: PUSH
23266: LD_INT 14
23268: PUSH
23269: LD_INT 15
23271: PUSH
23272: LD_INT 16
23274: PUSH
23275: LD_INT 17
23277: PUSH
23278: LD_INT 18
23280: PUSH
23281: LD_INT 19
23283: PUSH
23284: LD_INT 20
23286: PUSH
23287: LD_INT 21
23289: PUSH
23290: LD_INT 22
23292: PUSH
23293: LD_INT 23
23295: PUSH
23296: LD_INT 24
23298: PUSH
23299: LD_INT 25
23301: PUSH
23302: LD_INT 26
23304: PUSH
23305: LD_INT 27
23307: PUSH
23308: LD_INT 28
23310: PUSH
23311: LD_INT 29
23313: PUSH
23314: LD_INT 30
23316: PUSH
23317: LD_INT 31
23319: PUSH
23320: LD_INT 32
23322: PUSH
23323: LD_INT 33
23325: PUSH
23326: LD_INT 34
23328: PUSH
23329: LD_INT 36
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 101
23371: PUSH
23372: LD_INT 102
23374: PUSH
23375: LD_INT 103
23377: PUSH
23378: LD_INT 104
23380: PUSH
23381: LD_INT 105
23383: PUSH
23384: LD_INT 106
23386: PUSH
23387: LD_INT 107
23389: PUSH
23390: LD_INT 108
23392: PUSH
23393: LD_INT 109
23395: PUSH
23396: LD_INT 110
23398: PUSH
23399: LD_INT 111
23401: PUSH
23402: LD_INT 112
23404: PUSH
23405: LD_INT 113
23407: PUSH
23408: LD_INT 114
23410: PUSH
23411: LD_INT 116
23413: PUSH
23414: LD_INT 117
23416: PUSH
23417: LD_INT 118
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: ST_TO_ADDR
23443: GO 23842
23445: LD_INT 18
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23601
23453: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23454: LD_ADDR_VAR 0 2
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 4
23464: PUSH
23465: LD_INT 5
23467: PUSH
23468: LD_INT 7
23470: PUSH
23471: LD_INT 11
23473: PUSH
23474: LD_INT 12
23476: PUSH
23477: LD_INT 15
23479: PUSH
23480: LD_INT 16
23482: PUSH
23483: LD_INT 20
23485: PUSH
23486: LD_INT 21
23488: PUSH
23489: LD_INT 22
23491: PUSH
23492: LD_INT 23
23494: PUSH
23495: LD_INT 25
23497: PUSH
23498: LD_INT 26
23500: PUSH
23501: LD_INT 30
23503: PUSH
23504: LD_INT 31
23506: PUSH
23507: LD_INT 32
23509: PUSH
23510: LD_INT 33
23512: PUSH
23513: LD_INT 34
23515: PUSH
23516: LD_INT 35
23518: PUSH
23519: LD_INT 36
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 101
23547: PUSH
23548: LD_INT 102
23550: PUSH
23551: LD_INT 103
23553: PUSH
23554: LD_INT 106
23556: PUSH
23557: LD_INT 108
23559: PUSH
23560: LD_INT 112
23562: PUSH
23563: LD_INT 113
23565: PUSH
23566: LD_INT 114
23568: PUSH
23569: LD_INT 115
23571: PUSH
23572: LD_INT 116
23574: PUSH
23575: LD_INT 117
23577: PUSH
23578: LD_INT 118
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: ST_TO_ADDR
23599: GO 23842
23601: LD_INT 19
23603: DOUBLE
23604: EQUAL
23605: IFTRUE 23609
23607: GO 23841
23609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23610: LD_ADDR_VAR 0 2
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: LD_INT 3
23623: PUSH
23624: LD_INT 4
23626: PUSH
23627: LD_INT 5
23629: PUSH
23630: LD_INT 6
23632: PUSH
23633: LD_INT 7
23635: PUSH
23636: LD_INT 8
23638: PUSH
23639: LD_INT 9
23641: PUSH
23642: LD_INT 10
23644: PUSH
23645: LD_INT 11
23647: PUSH
23648: LD_INT 12
23650: PUSH
23651: LD_INT 13
23653: PUSH
23654: LD_INT 14
23656: PUSH
23657: LD_INT 15
23659: PUSH
23660: LD_INT 16
23662: PUSH
23663: LD_INT 17
23665: PUSH
23666: LD_INT 18
23668: PUSH
23669: LD_INT 19
23671: PUSH
23672: LD_INT 20
23674: PUSH
23675: LD_INT 21
23677: PUSH
23678: LD_INT 22
23680: PUSH
23681: LD_INT 23
23683: PUSH
23684: LD_INT 24
23686: PUSH
23687: LD_INT 25
23689: PUSH
23690: LD_INT 26
23692: PUSH
23693: LD_INT 27
23695: PUSH
23696: LD_INT 28
23698: PUSH
23699: LD_INT 29
23701: PUSH
23702: LD_INT 30
23704: PUSH
23705: LD_INT 31
23707: PUSH
23708: LD_INT 32
23710: PUSH
23711: LD_INT 33
23713: PUSH
23714: LD_INT 34
23716: PUSH
23717: LD_INT 35
23719: PUSH
23720: LD_INT 36
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 101
23763: PUSH
23764: LD_INT 102
23766: PUSH
23767: LD_INT 103
23769: PUSH
23770: LD_INT 104
23772: PUSH
23773: LD_INT 105
23775: PUSH
23776: LD_INT 106
23778: PUSH
23779: LD_INT 107
23781: PUSH
23782: LD_INT 108
23784: PUSH
23785: LD_INT 109
23787: PUSH
23788: LD_INT 110
23790: PUSH
23791: LD_INT 111
23793: PUSH
23794: LD_INT 112
23796: PUSH
23797: LD_INT 113
23799: PUSH
23800: LD_INT 114
23802: PUSH
23803: LD_INT 115
23805: PUSH
23806: LD_INT 116
23808: PUSH
23809: LD_INT 117
23811: PUSH
23812: LD_INT 118
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: ST_TO_ADDR
23839: GO 23842
23841: POP
// end else
23842: GO 24073
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23844: LD_ADDR_VAR 0 2
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: LD_INT 3
23857: PUSH
23858: LD_INT 4
23860: PUSH
23861: LD_INT 5
23863: PUSH
23864: LD_INT 6
23866: PUSH
23867: LD_INT 7
23869: PUSH
23870: LD_INT 8
23872: PUSH
23873: LD_INT 9
23875: PUSH
23876: LD_INT 10
23878: PUSH
23879: LD_INT 11
23881: PUSH
23882: LD_INT 12
23884: PUSH
23885: LD_INT 13
23887: PUSH
23888: LD_INT 14
23890: PUSH
23891: LD_INT 15
23893: PUSH
23894: LD_INT 16
23896: PUSH
23897: LD_INT 17
23899: PUSH
23900: LD_INT 18
23902: PUSH
23903: LD_INT 19
23905: PUSH
23906: LD_INT 20
23908: PUSH
23909: LD_INT 21
23911: PUSH
23912: LD_INT 22
23914: PUSH
23915: LD_INT 23
23917: PUSH
23918: LD_INT 24
23920: PUSH
23921: LD_INT 25
23923: PUSH
23924: LD_INT 26
23926: PUSH
23927: LD_INT 27
23929: PUSH
23930: LD_INT 28
23932: PUSH
23933: LD_INT 29
23935: PUSH
23936: LD_INT 30
23938: PUSH
23939: LD_INT 31
23941: PUSH
23942: LD_INT 32
23944: PUSH
23945: LD_INT 33
23947: PUSH
23948: LD_INT 34
23950: PUSH
23951: LD_INT 35
23953: PUSH
23954: LD_INT 36
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 101
23997: PUSH
23998: LD_INT 102
24000: PUSH
24001: LD_INT 103
24003: PUSH
24004: LD_INT 104
24006: PUSH
24007: LD_INT 105
24009: PUSH
24010: LD_INT 106
24012: PUSH
24013: LD_INT 107
24015: PUSH
24016: LD_INT 108
24018: PUSH
24019: LD_INT 109
24021: PUSH
24022: LD_INT 110
24024: PUSH
24025: LD_INT 111
24027: PUSH
24028: LD_INT 112
24030: PUSH
24031: LD_INT 113
24033: PUSH
24034: LD_INT 114
24036: PUSH
24037: LD_INT 115
24039: PUSH
24040: LD_INT 116
24042: PUSH
24043: LD_INT 117
24045: PUSH
24046: LD_INT 118
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: ST_TO_ADDR
// if result then
24073: LD_VAR 0 2
24077: IFFALSE 24863
// begin normal :=  ;
24079: LD_ADDR_VAR 0 5
24083: PUSH
24084: LD_STRING 
24086: ST_TO_ADDR
// hardcore :=  ;
24087: LD_ADDR_VAR 0 6
24091: PUSH
24092: LD_STRING 
24094: ST_TO_ADDR
// active :=  ;
24095: LD_ADDR_VAR 0 7
24099: PUSH
24100: LD_STRING 
24102: ST_TO_ADDR
// for i = 1 to normalCounter do
24103: LD_ADDR_VAR 0 8
24107: PUSH
24108: DOUBLE
24109: LD_INT 1
24111: DEC
24112: ST_TO_ADDR
24113: LD_EXP 55
24117: PUSH
24118: FOR_TO
24119: IFFALSE 24220
// begin tmp := 0 ;
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_STRING 0
24128: ST_TO_ADDR
// if result [ 1 ] then
24129: LD_VAR 0 2
24133: PUSH
24134: LD_INT 1
24136: ARRAY
24137: IFFALSE 24202
// if result [ 1 ] [ 1 ] = i then
24139: LD_VAR 0 2
24143: PUSH
24144: LD_INT 1
24146: ARRAY
24147: PUSH
24148: LD_INT 1
24150: ARRAY
24151: PUSH
24152: LD_VAR 0 8
24156: EQUAL
24157: IFFALSE 24202
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24159: LD_ADDR_VAR 0 2
24163: PUSH
24164: LD_VAR 0 2
24168: PPUSH
24169: LD_INT 1
24171: PPUSH
24172: LD_VAR 0 2
24176: PUSH
24177: LD_INT 1
24179: ARRAY
24180: PPUSH
24181: LD_INT 1
24183: PPUSH
24184: CALL_OW 3
24188: PPUSH
24189: CALL_OW 1
24193: ST_TO_ADDR
// tmp := 1 ;
24194: LD_ADDR_VAR 0 3
24198: PUSH
24199: LD_STRING 1
24201: ST_TO_ADDR
// end ; normal := normal & tmp ;
24202: LD_ADDR_VAR 0 5
24206: PUSH
24207: LD_VAR 0 5
24211: PUSH
24212: LD_VAR 0 3
24216: STR
24217: ST_TO_ADDR
// end ;
24218: GO 24118
24220: POP
24221: POP
// for i = 1 to hardcoreCounter do
24222: LD_ADDR_VAR 0 8
24226: PUSH
24227: DOUBLE
24228: LD_INT 1
24230: DEC
24231: ST_TO_ADDR
24232: LD_EXP 56
24236: PUSH
24237: FOR_TO
24238: IFFALSE 24343
// begin tmp := 0 ;
24240: LD_ADDR_VAR 0 3
24244: PUSH
24245: LD_STRING 0
24247: ST_TO_ADDR
// if result [ 2 ] then
24248: LD_VAR 0 2
24252: PUSH
24253: LD_INT 2
24255: ARRAY
24256: IFFALSE 24325
// if result [ 2 ] [ 1 ] = 100 + i then
24258: LD_VAR 0 2
24262: PUSH
24263: LD_INT 2
24265: ARRAY
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: PUSH
24271: LD_INT 100
24273: PUSH
24274: LD_VAR 0 8
24278: PLUS
24279: EQUAL
24280: IFFALSE 24325
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24282: LD_ADDR_VAR 0 2
24286: PUSH
24287: LD_VAR 0 2
24291: PPUSH
24292: LD_INT 2
24294: PPUSH
24295: LD_VAR 0 2
24299: PUSH
24300: LD_INT 2
24302: ARRAY
24303: PPUSH
24304: LD_INT 1
24306: PPUSH
24307: CALL_OW 3
24311: PPUSH
24312: CALL_OW 1
24316: ST_TO_ADDR
// tmp := 1 ;
24317: LD_ADDR_VAR 0 3
24321: PUSH
24322: LD_STRING 1
24324: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24325: LD_ADDR_VAR 0 6
24329: PUSH
24330: LD_VAR 0 6
24334: PUSH
24335: LD_VAR 0 3
24339: STR
24340: ST_TO_ADDR
// end ;
24341: GO 24237
24343: POP
24344: POP
// if isGameLoad then
24345: LD_VAR 0 1
24349: IFFALSE 24824
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24351: LD_ADDR_VAR 0 4
24355: PUSH
24356: LD_EXP 59
24360: PUSH
24361: LD_EXP 58
24365: PUSH
24366: LD_EXP 60
24370: PUSH
24371: LD_EXP 57
24375: PUSH
24376: LD_EXP 61
24380: PUSH
24381: LD_EXP 62
24385: PUSH
24386: LD_EXP 63
24390: PUSH
24391: LD_EXP 64
24395: PUSH
24396: LD_EXP 65
24400: PUSH
24401: LD_EXP 66
24405: PUSH
24406: LD_EXP 67
24410: PUSH
24411: LD_EXP 68
24415: PUSH
24416: LD_EXP 69
24420: PUSH
24421: LD_EXP 70
24425: PUSH
24426: LD_EXP 78
24430: PUSH
24431: LD_EXP 79
24435: PUSH
24436: LD_EXP 80
24440: PUSH
24441: LD_EXP 81
24445: PUSH
24446: LD_EXP 83
24450: PUSH
24451: LD_EXP 84
24455: PUSH
24456: LD_EXP 85
24460: PUSH
24461: LD_EXP 88
24465: PUSH
24466: LD_EXP 90
24470: PUSH
24471: LD_EXP 91
24475: PUSH
24476: LD_EXP 92
24480: PUSH
24481: LD_EXP 94
24485: PUSH
24486: LD_EXP 95
24490: PUSH
24491: LD_EXP 98
24495: PUSH
24496: LD_EXP 99
24500: PUSH
24501: LD_EXP 100
24505: PUSH
24506: LD_EXP 101
24510: PUSH
24511: LD_EXP 102
24515: PUSH
24516: LD_EXP 103
24520: PUSH
24521: LD_EXP 104
24525: PUSH
24526: LD_EXP 105
24530: PUSH
24531: LD_EXP 106
24535: PUSH
24536: LD_EXP 71
24540: PUSH
24541: LD_EXP 72
24545: PUSH
24546: LD_EXP 75
24550: PUSH
24551: LD_EXP 76
24555: PUSH
24556: LD_EXP 77
24560: PUSH
24561: LD_EXP 73
24565: PUSH
24566: LD_EXP 74
24570: PUSH
24571: LD_EXP 82
24575: PUSH
24576: LD_EXP 86
24580: PUSH
24581: LD_EXP 87
24585: PUSH
24586: LD_EXP 89
24590: PUSH
24591: LD_EXP 93
24595: PUSH
24596: LD_EXP 96
24600: PUSH
24601: LD_EXP 97
24605: PUSH
24606: LD_EXP 107
24610: PUSH
24611: LD_EXP 108
24615: PUSH
24616: LD_EXP 109
24620: PUSH
24621: LD_EXP 110
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: ST_TO_ADDR
// tmp :=  ;
24682: LD_ADDR_VAR 0 3
24686: PUSH
24687: LD_STRING 
24689: ST_TO_ADDR
// for i = 1 to normalCounter do
24690: LD_ADDR_VAR 0 8
24694: PUSH
24695: DOUBLE
24696: LD_INT 1
24698: DEC
24699: ST_TO_ADDR
24700: LD_EXP 55
24704: PUSH
24705: FOR_TO
24706: IFFALSE 24742
// begin if flags [ i ] then
24708: LD_VAR 0 4
24712: PUSH
24713: LD_VAR 0 8
24717: ARRAY
24718: IFFALSE 24740
// tmp := tmp & i & ; ;
24720: LD_ADDR_VAR 0 3
24724: PUSH
24725: LD_VAR 0 3
24729: PUSH
24730: LD_VAR 0 8
24734: STR
24735: PUSH
24736: LD_STRING ;
24738: STR
24739: ST_TO_ADDR
// end ;
24740: GO 24705
24742: POP
24743: POP
// for i = 1 to hardcoreCounter do
24744: LD_ADDR_VAR 0 8
24748: PUSH
24749: DOUBLE
24750: LD_INT 1
24752: DEC
24753: ST_TO_ADDR
24754: LD_EXP 56
24758: PUSH
24759: FOR_TO
24760: IFFALSE 24806
// begin if flags [ normalCounter + i ] then
24762: LD_VAR 0 4
24766: PUSH
24767: LD_EXP 55
24771: PUSH
24772: LD_VAR 0 8
24776: PLUS
24777: ARRAY
24778: IFFALSE 24804
// tmp := tmp & ( 100 + i ) & ; ;
24780: LD_ADDR_VAR 0 3
24784: PUSH
24785: LD_VAR 0 3
24789: PUSH
24790: LD_INT 100
24792: PUSH
24793: LD_VAR 0 8
24797: PLUS
24798: STR
24799: PUSH
24800: LD_STRING ;
24802: STR
24803: ST_TO_ADDR
// end ;
24804: GO 24759
24806: POP
24807: POP
// if tmp then
24808: LD_VAR 0 3
24812: IFFALSE 24824
// active := tmp ;
24814: LD_ADDR_VAR 0 7
24818: PUSH
24819: LD_VAR 0 3
24823: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24824: LD_STRING getStreamItemsFromMission("
24826: PUSH
24827: LD_VAR 0 5
24831: STR
24832: PUSH
24833: LD_STRING ","
24835: STR
24836: PUSH
24837: LD_VAR 0 6
24841: STR
24842: PUSH
24843: LD_STRING ","
24845: STR
24846: PUSH
24847: LD_VAR 0 7
24851: STR
24852: PUSH
24853: LD_STRING ")
24855: STR
24856: PPUSH
24857: CALL_OW 559
// end else
24861: GO 24870
// ToLua ( getStreamItemsFromMission("","","") ) ;
24863: LD_STRING getStreamItemsFromMission("","","")
24865: PPUSH
24866: CALL_OW 559
// end ;
24870: LD_VAR 0 2
24874: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24875: LD_EXP 54
24879: PUSH
24880: LD_EXP 59
24884: AND
24885: IFFALSE 25009
24887: GO 24889
24889: DISABLE
24890: LD_INT 0
24892: PPUSH
24893: PPUSH
// begin enable ;
24894: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24895: LD_ADDR_VAR 0 2
24899: PUSH
24900: LD_INT 22
24902: PUSH
24903: LD_OWVAR 2
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: PUSH
24915: LD_INT 34
24917: PUSH
24918: LD_INT 7
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 34
24927: PUSH
24928: LD_INT 45
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 34
24937: PUSH
24938: LD_INT 28
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 34
24947: PUSH
24948: LD_INT 47
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PPUSH
24966: CALL_OW 69
24970: ST_TO_ADDR
// if not tmp then
24971: LD_VAR 0 2
24975: NOT
24976: IFFALSE 24980
// exit ;
24978: GO 25009
// for i in tmp do
24980: LD_ADDR_VAR 0 1
24984: PUSH
24985: LD_VAR 0 2
24989: PUSH
24990: FOR_IN
24991: IFFALSE 25007
// begin SetLives ( i , 0 ) ;
24993: LD_VAR 0 1
24997: PPUSH
24998: LD_INT 0
25000: PPUSH
25001: CALL_OW 234
// end ;
25005: GO 24990
25007: POP
25008: POP
// end ;
25009: PPOPN 2
25011: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25012: LD_EXP 54
25016: PUSH
25017: LD_EXP 60
25021: AND
25022: IFFALSE 25106
25024: GO 25026
25026: DISABLE
25027: LD_INT 0
25029: PPUSH
25030: PPUSH
// begin enable ;
25031: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25032: LD_ADDR_VAR 0 2
25036: PUSH
25037: LD_INT 22
25039: PUSH
25040: LD_OWVAR 2
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 32
25051: PUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 69
25067: ST_TO_ADDR
// if not tmp then
25068: LD_VAR 0 2
25072: NOT
25073: IFFALSE 25077
// exit ;
25075: GO 25106
// for i in tmp do
25077: LD_ADDR_VAR 0 1
25081: PUSH
25082: LD_VAR 0 2
25086: PUSH
25087: FOR_IN
25088: IFFALSE 25104
// begin SetLives ( i , 0 ) ;
25090: LD_VAR 0 1
25094: PPUSH
25095: LD_INT 0
25097: PPUSH
25098: CALL_OW 234
// end ;
25102: GO 25087
25104: POP
25105: POP
// end ;
25106: PPOPN 2
25108: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25109: LD_EXP 54
25113: PUSH
25114: LD_EXP 57
25118: AND
25119: IFFALSE 25212
25121: GO 25123
25123: DISABLE
25124: LD_INT 0
25126: PPUSH
// begin enable ;
25127: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_OWVAR 2
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: LD_INT 25
25150: PUSH
25151: LD_INT 5
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 25
25160: PUSH
25161: LD_INT 9
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 25
25170: PUSH
25171: LD_INT 8
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PPUSH
25188: CALL_OW 69
25192: PUSH
25193: FOR_IN
25194: IFFALSE 25210
// begin SetClass ( i , 1 ) ;
25196: LD_VAR 0 1
25200: PPUSH
25201: LD_INT 1
25203: PPUSH
25204: CALL_OW 336
// end ;
25208: GO 25193
25210: POP
25211: POP
// end ;
25212: PPOPN 1
25214: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25215: LD_EXP 54
25219: PUSH
25220: LD_EXP 58
25224: AND
25225: PUSH
25226: LD_OWVAR 65
25230: PUSH
25231: LD_INT 7
25233: LESS
25234: AND
25235: IFFALSE 25249
25237: GO 25239
25239: DISABLE
// begin enable ;
25240: ENABLE
// game_speed := 7 ;
25241: LD_ADDR_OWVAR 65
25245: PUSH
25246: LD_INT 7
25248: ST_TO_ADDR
// end ;
25249: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25250: LD_EXP 54
25254: PUSH
25255: LD_EXP 61
25259: AND
25260: IFFALSE 25462
25262: GO 25264
25264: DISABLE
25265: LD_INT 0
25267: PPUSH
25268: PPUSH
25269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25270: LD_ADDR_VAR 0 3
25274: PUSH
25275: LD_INT 81
25277: PUSH
25278: LD_OWVAR 2
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 21
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PPUSH
25301: CALL_OW 69
25305: ST_TO_ADDR
// if not tmp then
25306: LD_VAR 0 3
25310: NOT
25311: IFFALSE 25315
// exit ;
25313: GO 25462
// if tmp > 5 then
25315: LD_VAR 0 3
25319: PUSH
25320: LD_INT 5
25322: GREATER
25323: IFFALSE 25335
// k := 5 else
25325: LD_ADDR_VAR 0 2
25329: PUSH
25330: LD_INT 5
25332: ST_TO_ADDR
25333: GO 25345
// k := tmp ;
25335: LD_ADDR_VAR 0 2
25339: PUSH
25340: LD_VAR 0 3
25344: ST_TO_ADDR
// for i := 1 to k do
25345: LD_ADDR_VAR 0 1
25349: PUSH
25350: DOUBLE
25351: LD_INT 1
25353: DEC
25354: ST_TO_ADDR
25355: LD_VAR 0 2
25359: PUSH
25360: FOR_TO
25361: IFFALSE 25460
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25363: LD_VAR 0 3
25367: PUSH
25368: LD_VAR 0 1
25372: ARRAY
25373: PPUSH
25374: LD_VAR 0 1
25378: PUSH
25379: LD_INT 4
25381: MOD
25382: PUSH
25383: LD_INT 1
25385: PLUS
25386: PPUSH
25387: CALL_OW 259
25391: PUSH
25392: LD_INT 10
25394: LESS
25395: IFFALSE 25458
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25397: LD_VAR 0 3
25401: PUSH
25402: LD_VAR 0 1
25406: ARRAY
25407: PPUSH
25408: LD_VAR 0 1
25412: PUSH
25413: LD_INT 4
25415: MOD
25416: PUSH
25417: LD_INT 1
25419: PLUS
25420: PPUSH
25421: LD_VAR 0 3
25425: PUSH
25426: LD_VAR 0 1
25430: ARRAY
25431: PPUSH
25432: LD_VAR 0 1
25436: PUSH
25437: LD_INT 4
25439: MOD
25440: PUSH
25441: LD_INT 1
25443: PLUS
25444: PPUSH
25445: CALL_OW 259
25449: PUSH
25450: LD_INT 1
25452: PLUS
25453: PPUSH
25454: CALL_OW 237
25458: GO 25360
25460: POP
25461: POP
// end ;
25462: PPOPN 3
25464: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25465: LD_EXP 54
25469: PUSH
25470: LD_EXP 62
25474: AND
25475: IFFALSE 25495
25477: GO 25479
25479: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25480: LD_INT 4
25482: PPUSH
25483: LD_OWVAR 2
25487: PPUSH
25488: LD_INT 0
25490: PPUSH
25491: CALL_OW 324
25495: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25496: LD_EXP 54
25500: PUSH
25501: LD_EXP 91
25505: AND
25506: IFFALSE 25526
25508: GO 25510
25510: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25511: LD_INT 19
25513: PPUSH
25514: LD_OWVAR 2
25518: PPUSH
25519: LD_INT 0
25521: PPUSH
25522: CALL_OW 324
25526: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25527: LD_EXP 54
25531: PUSH
25532: LD_EXP 63
25536: AND
25537: IFFALSE 25639
25539: GO 25541
25541: DISABLE
25542: LD_INT 0
25544: PPUSH
25545: PPUSH
// begin enable ;
25546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25547: LD_ADDR_VAR 0 2
25551: PUSH
25552: LD_INT 22
25554: PUSH
25555: LD_OWVAR 2
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: LD_INT 34
25569: PUSH
25570: LD_INT 11
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 34
25579: PUSH
25580: LD_INT 30
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PPUSH
25596: CALL_OW 69
25600: ST_TO_ADDR
// if not tmp then
25601: LD_VAR 0 2
25605: NOT
25606: IFFALSE 25610
// exit ;
25608: GO 25639
// for i in tmp do
25610: LD_ADDR_VAR 0 1
25614: PUSH
25615: LD_VAR 0 2
25619: PUSH
25620: FOR_IN
25621: IFFALSE 25637
// begin SetLives ( i , 0 ) ;
25623: LD_VAR 0 1
25627: PPUSH
25628: LD_INT 0
25630: PPUSH
25631: CALL_OW 234
// end ;
25635: GO 25620
25637: POP
25638: POP
// end ;
25639: PPOPN 2
25641: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25642: LD_EXP 54
25646: PUSH
25647: LD_EXP 64
25651: AND
25652: IFFALSE 25672
25654: GO 25656
25656: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25657: LD_INT 32
25659: PPUSH
25660: LD_OWVAR 2
25664: PPUSH
25665: LD_INT 0
25667: PPUSH
25668: CALL_OW 324
25672: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25673: LD_EXP 54
25677: PUSH
25678: LD_EXP 65
25682: AND
25683: IFFALSE 25864
25685: GO 25687
25687: DISABLE
25688: LD_INT 0
25690: PPUSH
25691: PPUSH
25692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25693: LD_ADDR_VAR 0 2
25697: PUSH
25698: LD_INT 22
25700: PUSH
25701: LD_OWVAR 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 33
25712: PUSH
25713: LD_INT 3
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 69
25728: ST_TO_ADDR
// if not tmp then
25729: LD_VAR 0 2
25733: NOT
25734: IFFALSE 25738
// exit ;
25736: GO 25864
// side := 0 ;
25738: LD_ADDR_VAR 0 3
25742: PUSH
25743: LD_INT 0
25745: ST_TO_ADDR
// for i := 1 to 8 do
25746: LD_ADDR_VAR 0 1
25750: PUSH
25751: DOUBLE
25752: LD_INT 1
25754: DEC
25755: ST_TO_ADDR
25756: LD_INT 8
25758: PUSH
25759: FOR_TO
25760: IFFALSE 25808
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25762: LD_OWVAR 2
25766: PUSH
25767: LD_VAR 0 1
25771: NONEQUAL
25772: PUSH
25773: LD_OWVAR 2
25777: PPUSH
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL_OW 81
25787: PUSH
25788: LD_INT 2
25790: EQUAL
25791: AND
25792: IFFALSE 25806
// begin side := i ;
25794: LD_ADDR_VAR 0 3
25798: PUSH
25799: LD_VAR 0 1
25803: ST_TO_ADDR
// break ;
25804: GO 25808
// end ;
25806: GO 25759
25808: POP
25809: POP
// if not side then
25810: LD_VAR 0 3
25814: NOT
25815: IFFALSE 25819
// exit ;
25817: GO 25864
// for i := 1 to tmp do
25819: LD_ADDR_VAR 0 1
25823: PUSH
25824: DOUBLE
25825: LD_INT 1
25827: DEC
25828: ST_TO_ADDR
25829: LD_VAR 0 2
25833: PUSH
25834: FOR_TO
25835: IFFALSE 25862
// if Prob ( 60 ) then
25837: LD_INT 60
25839: PPUSH
25840: CALL_OW 13
25844: IFFALSE 25860
// SetSide ( i , side ) ;
25846: LD_VAR 0 1
25850: PPUSH
25851: LD_VAR 0 3
25855: PPUSH
25856: CALL_OW 235
25860: GO 25834
25862: POP
25863: POP
// end ;
25864: PPOPN 3
25866: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25867: LD_EXP 54
25871: PUSH
25872: LD_EXP 67
25876: AND
25877: IFFALSE 25996
25879: GO 25881
25881: DISABLE
25882: LD_INT 0
25884: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25885: LD_ADDR_VAR 0 1
25889: PUSH
25890: LD_INT 22
25892: PUSH
25893: LD_OWVAR 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 21
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 23
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: PUSH
25939: FOR_IN
25940: IFFALSE 25994
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 257
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: LD_INT 3
25960: PUSH
25961: LD_INT 4
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: IN
25970: IFFALSE 25992
// SetClass ( un , rand ( 1 , 4 ) ) ;
25972: LD_VAR 0 1
25976: PPUSH
25977: LD_INT 1
25979: PPUSH
25980: LD_INT 4
25982: PPUSH
25983: CALL_OW 12
25987: PPUSH
25988: CALL_OW 336
25992: GO 25939
25994: POP
25995: POP
// end ;
25996: PPOPN 1
25998: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25999: LD_EXP 54
26003: PUSH
26004: LD_EXP 66
26008: AND
26009: IFFALSE 26088
26011: GO 26013
26013: DISABLE
26014: LD_INT 0
26016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26017: LD_ADDR_VAR 0 1
26021: PUSH
26022: LD_INT 22
26024: PUSH
26025: LD_OWVAR 2
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 21
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PPUSH
26048: CALL_OW 69
26052: ST_TO_ADDR
// if not tmp then
26053: LD_VAR 0 1
26057: NOT
26058: IFFALSE 26062
// exit ;
26060: GO 26088
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26062: LD_VAR 0 1
26066: PUSH
26067: LD_INT 1
26069: PPUSH
26070: LD_VAR 0 1
26074: PPUSH
26075: CALL_OW 12
26079: ARRAY
26080: PPUSH
26081: LD_INT 100
26083: PPUSH
26084: CALL_OW 234
// end ;
26088: PPOPN 1
26090: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26091: LD_EXP 54
26095: PUSH
26096: LD_EXP 68
26100: AND
26101: IFFALSE 26199
26103: GO 26105
26105: DISABLE
26106: LD_INT 0
26108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26109: LD_ADDR_VAR 0 1
26113: PUSH
26114: LD_INT 22
26116: PUSH
26117: LD_OWVAR 2
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 21
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PPUSH
26140: CALL_OW 69
26144: ST_TO_ADDR
// if not tmp then
26145: LD_VAR 0 1
26149: NOT
26150: IFFALSE 26154
// exit ;
26152: GO 26199
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26154: LD_VAR 0 1
26158: PUSH
26159: LD_INT 1
26161: PPUSH
26162: LD_VAR 0 1
26166: PPUSH
26167: CALL_OW 12
26171: ARRAY
26172: PPUSH
26173: LD_INT 1
26175: PPUSH
26176: LD_INT 4
26178: PPUSH
26179: CALL_OW 12
26183: PPUSH
26184: LD_INT 3000
26186: PPUSH
26187: LD_INT 9000
26189: PPUSH
26190: CALL_OW 12
26194: PPUSH
26195: CALL_OW 492
// end ;
26199: PPOPN 1
26201: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26202: LD_EXP 54
26206: PUSH
26207: LD_EXP 69
26211: AND
26212: IFFALSE 26232
26214: GO 26216
26216: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26217: LD_INT 1
26219: PPUSH
26220: LD_OWVAR 2
26224: PPUSH
26225: LD_INT 0
26227: PPUSH
26228: CALL_OW 324
26232: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26233: LD_EXP 54
26237: PUSH
26238: LD_EXP 70
26242: AND
26243: IFFALSE 26326
26245: GO 26247
26247: DISABLE
26248: LD_INT 0
26250: PPUSH
26251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26252: LD_ADDR_VAR 0 2
26256: PUSH
26257: LD_INT 22
26259: PUSH
26260: LD_OWVAR 2
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 21
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PPUSH
26283: CALL_OW 69
26287: ST_TO_ADDR
// if not tmp then
26288: LD_VAR 0 2
26292: NOT
26293: IFFALSE 26297
// exit ;
26295: GO 26326
// for i in tmp do
26297: LD_ADDR_VAR 0 1
26301: PUSH
26302: LD_VAR 0 2
26306: PUSH
26307: FOR_IN
26308: IFFALSE 26324
// SetBLevel ( i , 10 ) ;
26310: LD_VAR 0 1
26314: PPUSH
26315: LD_INT 10
26317: PPUSH
26318: CALL_OW 241
26322: GO 26307
26324: POP
26325: POP
// end ;
26326: PPOPN 2
26328: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26329: LD_EXP 54
26333: PUSH
26334: LD_EXP 71
26338: AND
26339: IFFALSE 26450
26341: GO 26343
26343: DISABLE
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
26348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26349: LD_ADDR_VAR 0 3
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 25
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 3
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26450
// un := tmp [ rand ( 1 , tmp ) ] ;
26394: LD_ADDR_VAR 0 2
26398: PUSH
26399: LD_VAR 0 3
26403: PUSH
26404: LD_INT 1
26406: PPUSH
26407: LD_VAR 0 3
26411: PPUSH
26412: CALL_OW 12
26416: ARRAY
26417: ST_TO_ADDR
// if Crawls ( un ) then
26418: LD_VAR 0 2
26422: PPUSH
26423: CALL_OW 318
26427: IFFALSE 26438
// ComWalk ( un ) ;
26429: LD_VAR 0 2
26433: PPUSH
26434: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26438: LD_VAR 0 2
26442: PPUSH
26443: LD_INT 5
26445: PPUSH
26446: CALL_OW 336
// end ;
26450: PPOPN 3
26452: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26453: LD_EXP 54
26457: PUSH
26458: LD_EXP 72
26462: AND
26463: PUSH
26464: LD_OWVAR 67
26468: PUSH
26469: LD_INT 4
26471: LESS
26472: AND
26473: IFFALSE 26492
26475: GO 26477
26477: DISABLE
// begin Difficulty := Difficulty + 1 ;
26478: LD_ADDR_OWVAR 67
26482: PUSH
26483: LD_OWVAR 67
26487: PUSH
26488: LD_INT 1
26490: PLUS
26491: ST_TO_ADDR
// end ;
26492: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26493: LD_EXP 54
26497: PUSH
26498: LD_EXP 73
26502: AND
26503: IFFALSE 26606
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
// begin for i := 1 to 5 do
26511: LD_ADDR_VAR 0 1
26515: PUSH
26516: DOUBLE
26517: LD_INT 1
26519: DEC
26520: ST_TO_ADDR
26521: LD_INT 5
26523: PUSH
26524: FOR_TO
26525: IFFALSE 26604
// begin uc_nation := nation_nature ;
26527: LD_ADDR_OWVAR 21
26531: PUSH
26532: LD_INT 0
26534: ST_TO_ADDR
// uc_side := 0 ;
26535: LD_ADDR_OWVAR 20
26539: PUSH
26540: LD_INT 0
26542: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26543: LD_ADDR_OWVAR 29
26547: PUSH
26548: LD_INT 12
26550: PUSH
26551: LD_INT 12
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: ST_TO_ADDR
// hc_agressivity := 20 ;
26558: LD_ADDR_OWVAR 35
26562: PUSH
26563: LD_INT 20
26565: ST_TO_ADDR
// hc_class := class_tiger ;
26566: LD_ADDR_OWVAR 28
26570: PUSH
26571: LD_INT 14
26573: ST_TO_ADDR
// hc_gallery :=  ;
26574: LD_ADDR_OWVAR 33
26578: PUSH
26579: LD_STRING 
26581: ST_TO_ADDR
// hc_name :=  ;
26582: LD_ADDR_OWVAR 26
26586: PUSH
26587: LD_STRING 
26589: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26590: CALL_OW 44
26594: PPUSH
26595: LD_INT 0
26597: PPUSH
26598: CALL_OW 51
// end ;
26602: GO 26524
26604: POP
26605: POP
// end ;
26606: PPOPN 1
26608: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26609: LD_EXP 54
26613: PUSH
26614: LD_EXP 74
26618: AND
26619: IFFALSE 26628
26621: GO 26623
26623: DISABLE
// StreamSibBomb ;
26624: CALL 26629 0 0
26628: END
// export function StreamSibBomb ; var i , x , y ; begin
26629: LD_INT 0
26631: PPUSH
26632: PPUSH
26633: PPUSH
26634: PPUSH
// result := false ;
26635: LD_ADDR_VAR 0 1
26639: PUSH
26640: LD_INT 0
26642: ST_TO_ADDR
// for i := 1 to 16 do
26643: LD_ADDR_VAR 0 2
26647: PUSH
26648: DOUBLE
26649: LD_INT 1
26651: DEC
26652: ST_TO_ADDR
26653: LD_INT 16
26655: PUSH
26656: FOR_TO
26657: IFFALSE 26856
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26659: LD_ADDR_VAR 0 3
26663: PUSH
26664: LD_INT 10
26666: PUSH
26667: LD_INT 20
26669: PUSH
26670: LD_INT 30
26672: PUSH
26673: LD_INT 40
26675: PUSH
26676: LD_INT 50
26678: PUSH
26679: LD_INT 60
26681: PUSH
26682: LD_INT 70
26684: PUSH
26685: LD_INT 80
26687: PUSH
26688: LD_INT 90
26690: PUSH
26691: LD_INT 100
26693: PUSH
26694: LD_INT 110
26696: PUSH
26697: LD_INT 120
26699: PUSH
26700: LD_INT 130
26702: PUSH
26703: LD_INT 140
26705: PUSH
26706: LD_INT 150
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PPUSH
26729: LD_INT 15
26731: PPUSH
26732: CALL_OW 12
26736: ARRAY
26737: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26738: LD_ADDR_VAR 0 4
26742: PUSH
26743: LD_INT 10
26745: PUSH
26746: LD_INT 20
26748: PUSH
26749: LD_INT 30
26751: PUSH
26752: LD_INT 40
26754: PUSH
26755: LD_INT 50
26757: PUSH
26758: LD_INT 60
26760: PUSH
26761: LD_INT 70
26763: PUSH
26764: LD_INT 80
26766: PUSH
26767: LD_INT 90
26769: PUSH
26770: LD_INT 100
26772: PUSH
26773: LD_INT 110
26775: PUSH
26776: LD_INT 120
26778: PUSH
26779: LD_INT 130
26781: PUSH
26782: LD_INT 140
26784: PUSH
26785: LD_INT 150
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_INT 15
26810: PPUSH
26811: CALL_OW 12
26815: ARRAY
26816: ST_TO_ADDR
// if ValidHex ( x , y ) then
26817: LD_VAR 0 3
26821: PPUSH
26822: LD_VAR 0 4
26826: PPUSH
26827: CALL_OW 488
26831: IFFALSE 26854
// begin result := [ x , y ] ;
26833: LD_ADDR_VAR 0 1
26837: PUSH
26838: LD_VAR 0 3
26842: PUSH
26843: LD_VAR 0 4
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: ST_TO_ADDR
// break ;
26852: GO 26856
// end ; end ;
26854: GO 26656
26856: POP
26857: POP
// if result then
26858: LD_VAR 0 1
26862: IFFALSE 26922
// begin ToLua ( playSibBomb() ) ;
26864: LD_STRING playSibBomb()
26866: PPUSH
26867: CALL_OW 559
// wait ( 0 0$14 ) ;
26871: LD_INT 490
26873: PPUSH
26874: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26878: LD_VAR 0 1
26882: PUSH
26883: LD_INT 1
26885: ARRAY
26886: PPUSH
26887: LD_VAR 0 1
26891: PUSH
26892: LD_INT 2
26894: ARRAY
26895: PPUSH
26896: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26900: LD_VAR 0 1
26904: PUSH
26905: LD_INT 1
26907: ARRAY
26908: PPUSH
26909: LD_VAR 0 1
26913: PUSH
26914: LD_INT 2
26916: ARRAY
26917: PPUSH
26918: CALL_OW 429
// end ; end ;
26922: LD_VAR 0 1
26926: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26927: LD_EXP 54
26931: PUSH
26932: LD_EXP 76
26936: AND
26937: IFFALSE 26949
26939: GO 26941
26941: DISABLE
// YouLost (  ) ;
26942: LD_STRING 
26944: PPUSH
26945: CALL_OW 104
26949: END
// every 0 0$1 trigger StreamModeActive and sFog do
26950: LD_EXP 54
26954: PUSH
26955: LD_EXP 75
26959: AND
26960: IFFALSE 26974
26962: GO 26964
26964: DISABLE
// FogOff ( your_side ) ;
26965: LD_OWVAR 2
26969: PPUSH
26970: CALL_OW 344
26974: END
// every 0 0$1 trigger StreamModeActive and sSun do
26975: LD_EXP 54
26979: PUSH
26980: LD_EXP 77
26984: AND
26985: IFFALSE 27013
26987: GO 26989
26989: DISABLE
// begin solar_recharge_percent := 0 ;
26990: LD_ADDR_OWVAR 79
26994: PUSH
26995: LD_INT 0
26997: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26998: LD_INT 10500
27000: PPUSH
27001: CALL_OW 67
// solar_recharge_percent := 100 ;
27005: LD_ADDR_OWVAR 79
27009: PUSH
27010: LD_INT 100
27012: ST_TO_ADDR
// end ;
27013: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27014: LD_EXP 54
27018: PUSH
27019: LD_EXP 78
27023: AND
27024: IFFALSE 27263
27026: GO 27028
27028: DISABLE
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
// begin tmp := [ ] ;
27034: LD_ADDR_VAR 0 3
27038: PUSH
27039: EMPTY
27040: ST_TO_ADDR
// for i := 1 to 6 do
27041: LD_ADDR_VAR 0 1
27045: PUSH
27046: DOUBLE
27047: LD_INT 1
27049: DEC
27050: ST_TO_ADDR
27051: LD_INT 6
27053: PUSH
27054: FOR_TO
27055: IFFALSE 27160
// begin uc_nation := nation_nature ;
27057: LD_ADDR_OWVAR 21
27061: PUSH
27062: LD_INT 0
27064: ST_TO_ADDR
// uc_side := 0 ;
27065: LD_ADDR_OWVAR 20
27069: PUSH
27070: LD_INT 0
27072: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27073: LD_ADDR_OWVAR 29
27077: PUSH
27078: LD_INT 12
27080: PUSH
27081: LD_INT 12
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: ST_TO_ADDR
// hc_agressivity := 20 ;
27088: LD_ADDR_OWVAR 35
27092: PUSH
27093: LD_INT 20
27095: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27096: LD_ADDR_OWVAR 28
27100: PUSH
27101: LD_INT 17
27103: ST_TO_ADDR
// hc_gallery :=  ;
27104: LD_ADDR_OWVAR 33
27108: PUSH
27109: LD_STRING 
27111: ST_TO_ADDR
// hc_name :=  ;
27112: LD_ADDR_OWVAR 26
27116: PUSH
27117: LD_STRING 
27119: ST_TO_ADDR
// un := CreateHuman ;
27120: LD_ADDR_VAR 0 2
27124: PUSH
27125: CALL_OW 44
27129: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27130: LD_VAR 0 2
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: CALL_OW 51
// tmp := tmp ^ un ;
27142: LD_ADDR_VAR 0 3
27146: PUSH
27147: LD_VAR 0 3
27151: PUSH
27152: LD_VAR 0 2
27156: ADD
27157: ST_TO_ADDR
// end ;
27158: GO 27054
27160: POP
27161: POP
// repeat wait ( 0 0$1 ) ;
27162: LD_INT 35
27164: PPUSH
27165: CALL_OW 67
// for un in tmp do
27169: LD_ADDR_VAR 0 2
27173: PUSH
27174: LD_VAR 0 3
27178: PUSH
27179: FOR_IN
27180: IFFALSE 27254
// begin if IsDead ( un ) then
27182: LD_VAR 0 2
27186: PPUSH
27187: CALL_OW 301
27191: IFFALSE 27211
// begin tmp := tmp diff un ;
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_VAR 0 3
27202: PUSH
27203: LD_VAR 0 2
27207: DIFF
27208: ST_TO_ADDR
// continue ;
27209: GO 27179
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27211: LD_VAR 0 2
27215: PPUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 22
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PPUSH
27233: CALL_OW 69
27237: PPUSH
27238: LD_VAR 0 2
27242: PPUSH
27243: CALL_OW 74
27247: PPUSH
27248: CALL_OW 115
// end ;
27252: GO 27179
27254: POP
27255: POP
// until not tmp ;
27256: LD_VAR 0 3
27260: NOT
27261: IFFALSE 27162
// end ;
27263: PPOPN 3
27265: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27266: LD_EXP 54
27270: PUSH
27271: LD_EXP 79
27275: AND
27276: IFFALSE 27330
27278: GO 27280
27280: DISABLE
// begin ToLua ( displayTroll(); ) ;
27281: LD_STRING displayTroll();
27283: PPUSH
27284: CALL_OW 559
// wait ( 3 3$00 ) ;
27288: LD_INT 6300
27290: PPUSH
27291: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27295: LD_STRING hideTroll();
27297: PPUSH
27298: CALL_OW 559
// wait ( 1 1$00 ) ;
27302: LD_INT 2100
27304: PPUSH
27305: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27309: LD_STRING displayTroll();
27311: PPUSH
27312: CALL_OW 559
// wait ( 1 1$00 ) ;
27316: LD_INT 2100
27318: PPUSH
27319: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27323: LD_STRING hideTroll();
27325: PPUSH
27326: CALL_OW 559
// end ;
27330: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27331: LD_EXP 54
27335: PUSH
27336: LD_EXP 80
27340: AND
27341: IFFALSE 27404
27343: GO 27345
27345: DISABLE
27346: LD_INT 0
27348: PPUSH
// begin p := 0 ;
27349: LD_ADDR_VAR 0 1
27353: PUSH
27354: LD_INT 0
27356: ST_TO_ADDR
// repeat game_speed := 1 ;
27357: LD_ADDR_OWVAR 65
27361: PUSH
27362: LD_INT 1
27364: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27365: LD_INT 35
27367: PPUSH
27368: CALL_OW 67
// p := p + 1 ;
27372: LD_ADDR_VAR 0 1
27376: PUSH
27377: LD_VAR 0 1
27381: PUSH
27382: LD_INT 1
27384: PLUS
27385: ST_TO_ADDR
// until p >= 60 ;
27386: LD_VAR 0 1
27390: PUSH
27391: LD_INT 60
27393: GREATEREQUAL
27394: IFFALSE 27357
// game_speed := 4 ;
27396: LD_ADDR_OWVAR 65
27400: PUSH
27401: LD_INT 4
27403: ST_TO_ADDR
// end ;
27404: PPOPN 1
27406: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27407: LD_EXP 54
27411: PUSH
27412: LD_EXP 81
27416: AND
27417: IFFALSE 27563
27419: GO 27421
27421: DISABLE
27422: LD_INT 0
27424: PPUSH
27425: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: LD_INT 30
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 30
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 69
27479: ST_TO_ADDR
// if not depot then
27480: LD_VAR 0 1
27484: NOT
27485: IFFALSE 27489
// exit ;
27487: GO 27563
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27489: LD_ADDR_VAR 0 2
27493: PUSH
27494: LD_VAR 0 1
27498: PUSH
27499: LD_INT 1
27501: PPUSH
27502: LD_VAR 0 1
27506: PPUSH
27507: CALL_OW 12
27511: ARRAY
27512: PPUSH
27513: CALL_OW 274
27517: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_INT 1
27525: PPUSH
27526: LD_INT 0
27528: PPUSH
27529: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27533: LD_VAR 0 2
27537: PPUSH
27538: LD_INT 2
27540: PPUSH
27541: LD_INT 0
27543: PPUSH
27544: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27548: LD_VAR 0 2
27552: PPUSH
27553: LD_INT 3
27555: PPUSH
27556: LD_INT 0
27558: PPUSH
27559: CALL_OW 277
// end ;
27563: PPOPN 2
27565: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27566: LD_EXP 54
27570: PUSH
27571: LD_EXP 82
27575: AND
27576: IFFALSE 27673
27578: GO 27580
27580: DISABLE
27581: LD_INT 0
27583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27584: LD_ADDR_VAR 0 1
27588: PUSH
27589: LD_INT 22
27591: PUSH
27592: LD_OWVAR 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 21
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 3
27613: PUSH
27614: LD_INT 23
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: PPUSH
27633: CALL_OW 69
27637: ST_TO_ADDR
// if not tmp then
27638: LD_VAR 0 1
27642: NOT
27643: IFFALSE 27647
// exit ;
27645: GO 27673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27647: LD_VAR 0 1
27651: PUSH
27652: LD_INT 1
27654: PPUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL_OW 12
27664: ARRAY
27665: PPUSH
27666: LD_INT 200
27668: PPUSH
27669: CALL_OW 234
// end ;
27673: PPOPN 1
27675: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27676: LD_EXP 54
27680: PUSH
27681: LD_EXP 83
27685: AND
27686: IFFALSE 27765
27688: GO 27690
27690: DISABLE
27691: LD_INT 0
27693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27694: LD_ADDR_VAR 0 1
27698: PUSH
27699: LD_INT 22
27701: PUSH
27702: LD_OWVAR 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 21
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PPUSH
27725: CALL_OW 69
27729: ST_TO_ADDR
// if not tmp then
27730: LD_VAR 0 1
27734: NOT
27735: IFFALSE 27739
// exit ;
27737: GO 27765
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27739: LD_VAR 0 1
27743: PUSH
27744: LD_INT 1
27746: PPUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 12
27756: ARRAY
27757: PPUSH
27758: LD_INT 60
27760: PPUSH
27761: CALL_OW 234
// end ;
27765: PPOPN 1
27767: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27768: LD_EXP 54
27772: PUSH
27773: LD_EXP 84
27777: AND
27778: IFFALSE 27877
27780: GO 27782
27782: DISABLE
27783: LD_INT 0
27785: PPUSH
27786: PPUSH
// begin enable ;
27787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27788: LD_ADDR_VAR 0 1
27792: PUSH
27793: LD_INT 22
27795: PUSH
27796: LD_OWVAR 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 61
27807: PUSH
27808: EMPTY
27809: LIST
27810: PUSH
27811: LD_INT 33
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: ST_TO_ADDR
// if not tmp then
27831: LD_VAR 0 1
27835: NOT
27836: IFFALSE 27840
// exit ;
27838: GO 27877
// for i in tmp do
27840: LD_ADDR_VAR 0 2
27844: PUSH
27845: LD_VAR 0 1
27849: PUSH
27850: FOR_IN
27851: IFFALSE 27875
// if IsControledBy ( i ) then
27853: LD_VAR 0 2
27857: PPUSH
27858: CALL_OW 312
27862: IFFALSE 27873
// ComUnlink ( i ) ;
27864: LD_VAR 0 2
27868: PPUSH
27869: CALL_OW 136
27873: GO 27850
27875: POP
27876: POP
// end ;
27877: PPOPN 2
27879: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27880: LD_EXP 54
27884: PUSH
27885: LD_EXP 85
27889: AND
27890: IFFALSE 28030
27892: GO 27894
27894: DISABLE
27895: LD_INT 0
27897: PPUSH
27898: PPUSH
// begin ToLua ( displayPowell(); ) ;
27899: LD_STRING displayPowell();
27901: PPUSH
27902: CALL_OW 559
// uc_side := 0 ;
27906: LD_ADDR_OWVAR 20
27910: PUSH
27911: LD_INT 0
27913: ST_TO_ADDR
// uc_nation := 2 ;
27914: LD_ADDR_OWVAR 21
27918: PUSH
27919: LD_INT 2
27921: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27922: LD_ADDR_OWVAR 37
27926: PUSH
27927: LD_INT 14
27929: ST_TO_ADDR
// vc_engine := engine_siberite ;
27930: LD_ADDR_OWVAR 39
27934: PUSH
27935: LD_INT 3
27937: ST_TO_ADDR
// vc_control := control_apeman ;
27938: LD_ADDR_OWVAR 38
27942: PUSH
27943: LD_INT 5
27945: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27946: LD_ADDR_OWVAR 40
27950: PUSH
27951: LD_INT 29
27953: ST_TO_ADDR
// un := CreateVehicle ;
27954: LD_ADDR_VAR 0 2
27958: PUSH
27959: CALL_OW 45
27963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27964: LD_VAR 0 2
27968: PPUSH
27969: LD_INT 1
27971: PPUSH
27972: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27976: LD_INT 35
27978: PPUSH
27979: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27983: LD_VAR 0 2
27987: PPUSH
27988: LD_INT 22
27990: PUSH
27991: LD_OWVAR 2
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PPUSH
28000: CALL_OW 69
28004: PPUSH
28005: LD_VAR 0 2
28009: PPUSH
28010: CALL_OW 74
28014: PPUSH
28015: CALL_OW 115
// until IsDead ( un ) ;
28019: LD_VAR 0 2
28023: PPUSH
28024: CALL_OW 301
28028: IFFALSE 27976
// end ;
28030: PPOPN 2
28032: END
// every 0 0$1 trigger StreamModeActive and sStu do
28033: LD_EXP 54
28037: PUSH
28038: LD_EXP 93
28042: AND
28043: IFFALSE 28059
28045: GO 28047
28047: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28048: LD_STRING displayStucuk();
28050: PPUSH
28051: CALL_OW 559
// ResetFog ;
28055: CALL_OW 335
// end ;
28059: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28060: LD_EXP 54
28064: PUSH
28065: LD_EXP 86
28069: AND
28070: IFFALSE 28211
28072: GO 28074
28074: DISABLE
28075: LD_INT 0
28077: PPUSH
28078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28079: LD_ADDR_VAR 0 2
28083: PUSH
28084: LD_INT 22
28086: PUSH
28087: LD_OWVAR 2
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 21
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PPUSH
28110: CALL_OW 69
28114: ST_TO_ADDR
// if not tmp then
28115: LD_VAR 0 2
28119: NOT
28120: IFFALSE 28124
// exit ;
28122: GO 28211
// un := tmp [ rand ( 1 , tmp ) ] ;
28124: LD_ADDR_VAR 0 1
28128: PUSH
28129: LD_VAR 0 2
28133: PUSH
28134: LD_INT 1
28136: PPUSH
28137: LD_VAR 0 2
28141: PPUSH
28142: CALL_OW 12
28146: ARRAY
28147: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28148: LD_VAR 0 1
28152: PPUSH
28153: LD_INT 0
28155: PPUSH
28156: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28160: LD_VAR 0 1
28164: PPUSH
28165: LD_OWVAR 3
28169: PUSH
28170: LD_VAR 0 1
28174: DIFF
28175: PPUSH
28176: LD_VAR 0 1
28180: PPUSH
28181: CALL_OW 74
28185: PPUSH
28186: CALL_OW 115
// wait ( 0 0$20 ) ;
28190: LD_INT 700
28192: PPUSH
28193: CALL_OW 67
// SetSide ( un , your_side ) ;
28197: LD_VAR 0 1
28201: PPUSH
28202: LD_OWVAR 2
28206: PPUSH
28207: CALL_OW 235
// end ;
28211: PPOPN 2
28213: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28214: LD_EXP 54
28218: PUSH
28219: LD_EXP 87
28223: AND
28224: IFFALSE 28330
28226: GO 28228
28228: DISABLE
28229: LD_INT 0
28231: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28232: LD_ADDR_VAR 0 1
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: LD_OWVAR 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 30
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 69
28285: ST_TO_ADDR
// if not depot then
28286: LD_VAR 0 1
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 28330
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28295: LD_VAR 0 1
28299: PUSH
28300: LD_INT 1
28302: ARRAY
28303: PPUSH
28304: CALL_OW 250
28308: PPUSH
28309: LD_VAR 0 1
28313: PUSH
28314: LD_INT 1
28316: ARRAY
28317: PPUSH
28318: CALL_OW 251
28322: PPUSH
28323: LD_INT 70
28325: PPUSH
28326: CALL_OW 495
// end ;
28330: PPOPN 1
28332: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28333: LD_EXP 54
28337: PUSH
28338: LD_EXP 88
28342: AND
28343: IFFALSE 28554
28345: GO 28347
28347: DISABLE
28348: LD_INT 0
28350: PPUSH
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28355: LD_ADDR_VAR 0 5
28359: PUSH
28360: LD_INT 22
28362: PUSH
28363: LD_OWVAR 2
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 21
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PPUSH
28386: CALL_OW 69
28390: ST_TO_ADDR
// if not tmp then
28391: LD_VAR 0 5
28395: NOT
28396: IFFALSE 28400
// exit ;
28398: GO 28554
// for i in tmp do
28400: LD_ADDR_VAR 0 1
28404: PUSH
28405: LD_VAR 0 5
28409: PUSH
28410: FOR_IN
28411: IFFALSE 28552
// begin d := rand ( 0 , 5 ) ;
28413: LD_ADDR_VAR 0 4
28417: PUSH
28418: LD_INT 0
28420: PPUSH
28421: LD_INT 5
28423: PPUSH
28424: CALL_OW 12
28428: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28429: LD_ADDR_VAR 0 2
28433: PUSH
28434: LD_VAR 0 1
28438: PPUSH
28439: CALL_OW 250
28443: PPUSH
28444: LD_VAR 0 4
28448: PPUSH
28449: LD_INT 3
28451: PPUSH
28452: LD_INT 12
28454: PPUSH
28455: CALL_OW 12
28459: PPUSH
28460: CALL_OW 272
28464: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28465: LD_ADDR_VAR 0 3
28469: PUSH
28470: LD_VAR 0 1
28474: PPUSH
28475: CALL_OW 251
28479: PPUSH
28480: LD_VAR 0 4
28484: PPUSH
28485: LD_INT 3
28487: PPUSH
28488: LD_INT 12
28490: PPUSH
28491: CALL_OW 12
28495: PPUSH
28496: CALL_OW 273
28500: ST_TO_ADDR
// if ValidHex ( x , y ) then
28501: LD_VAR 0 2
28505: PPUSH
28506: LD_VAR 0 3
28510: PPUSH
28511: CALL_OW 488
28515: IFFALSE 28550
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28517: LD_VAR 0 1
28521: PPUSH
28522: LD_VAR 0 2
28526: PPUSH
28527: LD_VAR 0 3
28531: PPUSH
28532: LD_INT 3
28534: PPUSH
28535: LD_INT 6
28537: PPUSH
28538: CALL_OW 12
28542: PPUSH
28543: LD_INT 1
28545: PPUSH
28546: CALL_OW 483
// end ;
28550: GO 28410
28552: POP
28553: POP
// end ;
28554: PPOPN 5
28556: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28557: LD_EXP 54
28561: PUSH
28562: LD_EXP 89
28566: AND
28567: IFFALSE 28661
28569: GO 28571
28571: DISABLE
28572: LD_INT 0
28574: PPUSH
28575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28576: LD_ADDR_VAR 0 2
28580: PUSH
28581: LD_INT 22
28583: PUSH
28584: LD_OWVAR 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 32
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 21
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: PPUSH
28618: CALL_OW 69
28622: ST_TO_ADDR
// if not tmp then
28623: LD_VAR 0 2
28627: NOT
28628: IFFALSE 28632
// exit ;
28630: GO 28661
// for i in tmp do
28632: LD_ADDR_VAR 0 1
28636: PUSH
28637: LD_VAR 0 2
28641: PUSH
28642: FOR_IN
28643: IFFALSE 28659
// SetFuel ( i , 0 ) ;
28645: LD_VAR 0 1
28649: PPUSH
28650: LD_INT 0
28652: PPUSH
28653: CALL_OW 240
28657: GO 28642
28659: POP
28660: POP
// end ;
28661: PPOPN 2
28663: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28664: LD_EXP 54
28668: PUSH
28669: LD_EXP 90
28673: AND
28674: IFFALSE 28740
28676: GO 28678
28678: DISABLE
28679: LD_INT 0
28681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28682: LD_ADDR_VAR 0 1
28686: PUSH
28687: LD_INT 22
28689: PUSH
28690: LD_OWVAR 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 29
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 69
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 1
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28740
// DestroyUnit ( tmp [ 1 ] ) ;
28727: LD_VAR 0 1
28731: PUSH
28732: LD_INT 1
28734: ARRAY
28735: PPUSH
28736: CALL_OW 65
// end ;
28740: PPOPN 1
28742: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28743: LD_EXP 54
28747: PUSH
28748: LD_EXP 92
28752: AND
28753: IFFALSE 28882
28755: GO 28757
28757: DISABLE
28758: LD_INT 0
28760: PPUSH
// begin uc_side := 0 ;
28761: LD_ADDR_OWVAR 20
28765: PUSH
28766: LD_INT 0
28768: ST_TO_ADDR
// uc_nation := nation_arabian ;
28769: LD_ADDR_OWVAR 21
28773: PUSH
28774: LD_INT 2
28776: ST_TO_ADDR
// hc_gallery :=  ;
28777: LD_ADDR_OWVAR 33
28781: PUSH
28782: LD_STRING 
28784: ST_TO_ADDR
// hc_name :=  ;
28785: LD_ADDR_OWVAR 26
28789: PUSH
28790: LD_STRING 
28792: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28793: LD_INT 1
28795: PPUSH
28796: LD_INT 11
28798: PPUSH
28799: LD_INT 10
28801: PPUSH
28802: CALL_OW 380
// un := CreateHuman ;
28806: LD_ADDR_VAR 0 1
28810: PUSH
28811: CALL_OW 44
28815: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28816: LD_VAR 0 1
28820: PPUSH
28821: LD_INT 1
28823: PPUSH
28824: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28828: LD_INT 35
28830: PPUSH
28831: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28835: LD_VAR 0 1
28839: PPUSH
28840: LD_INT 22
28842: PUSH
28843: LD_OWVAR 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: PPUSH
28857: LD_VAR 0 1
28861: PPUSH
28862: CALL_OW 74
28866: PPUSH
28867: CALL_OW 115
// until IsDead ( un ) ;
28871: LD_VAR 0 1
28875: PPUSH
28876: CALL_OW 301
28880: IFFALSE 28828
// end ;
28882: PPOPN 1
28884: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28885: LD_EXP 54
28889: PUSH
28890: LD_EXP 94
28894: AND
28895: IFFALSE 28907
28897: GO 28899
28899: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28900: LD_STRING earthquake(getX(game), 0, 32)
28902: PPUSH
28903: CALL_OW 559
28907: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28908: LD_EXP 54
28912: PUSH
28913: LD_EXP 95
28917: AND
28918: IFFALSE 29009
28920: GO 28922
28922: DISABLE
28923: LD_INT 0
28925: PPUSH
// begin enable ;
28926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28927: LD_ADDR_VAR 0 1
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 21
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 33
28956: PUSH
28957: LD_INT 3
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: PPUSH
28969: CALL_OW 69
28973: ST_TO_ADDR
// if not tmp then
28974: LD_VAR 0 1
28978: NOT
28979: IFFALSE 28983
// exit ;
28981: GO 29009
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28983: LD_VAR 0 1
28987: PUSH
28988: LD_INT 1
28990: PPUSH
28991: LD_VAR 0 1
28995: PPUSH
28996: CALL_OW 12
29000: ARRAY
29001: PPUSH
29002: LD_INT 1
29004: PPUSH
29005: CALL_OW 234
// end ;
29009: PPOPN 1
29011: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29012: LD_EXP 54
29016: PUSH
29017: LD_EXP 96
29021: AND
29022: IFFALSE 29163
29024: GO 29026
29026: DISABLE
29027: LD_INT 0
29029: PPUSH
29030: PPUSH
29031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_INT 22
29039: PUSH
29040: LD_OWVAR 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 25
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PPUSH
29063: CALL_OW 69
29067: ST_TO_ADDR
// if not tmp then
29068: LD_VAR 0 3
29072: NOT
29073: IFFALSE 29077
// exit ;
29075: GO 29163
// un := tmp [ rand ( 1 , tmp ) ] ;
29077: LD_ADDR_VAR 0 2
29081: PUSH
29082: LD_VAR 0 3
29086: PUSH
29087: LD_INT 1
29089: PPUSH
29090: LD_VAR 0 3
29094: PPUSH
29095: CALL_OW 12
29099: ARRAY
29100: ST_TO_ADDR
// if Crawls ( un ) then
29101: LD_VAR 0 2
29105: PPUSH
29106: CALL_OW 318
29110: IFFALSE 29121
// ComWalk ( un ) ;
29112: LD_VAR 0 2
29116: PPUSH
29117: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29121: LD_VAR 0 2
29125: PPUSH
29126: LD_INT 9
29128: PPUSH
29129: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29133: LD_INT 28
29135: PPUSH
29136: LD_OWVAR 2
29140: PPUSH
29141: LD_INT 2
29143: PPUSH
29144: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29148: LD_INT 29
29150: PPUSH
29151: LD_OWVAR 2
29155: PPUSH
29156: LD_INT 2
29158: PPUSH
29159: CALL_OW 322
// end ;
29163: PPOPN 3
29165: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29166: LD_EXP 54
29170: PUSH
29171: LD_EXP 97
29175: AND
29176: IFFALSE 29287
29178: GO 29180
29180: DISABLE
29181: LD_INT 0
29183: PPUSH
29184: PPUSH
29185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29186: LD_ADDR_VAR 0 3
29190: PUSH
29191: LD_INT 22
29193: PUSH
29194: LD_OWVAR 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 25
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PPUSH
29217: CALL_OW 69
29221: ST_TO_ADDR
// if not tmp then
29222: LD_VAR 0 3
29226: NOT
29227: IFFALSE 29231
// exit ;
29229: GO 29287
// un := tmp [ rand ( 1 , tmp ) ] ;
29231: LD_ADDR_VAR 0 2
29235: PUSH
29236: LD_VAR 0 3
29240: PUSH
29241: LD_INT 1
29243: PPUSH
29244: LD_VAR 0 3
29248: PPUSH
29249: CALL_OW 12
29253: ARRAY
29254: ST_TO_ADDR
// if Crawls ( un ) then
29255: LD_VAR 0 2
29259: PPUSH
29260: CALL_OW 318
29264: IFFALSE 29275
// ComWalk ( un ) ;
29266: LD_VAR 0 2
29270: PPUSH
29271: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29275: LD_VAR 0 2
29279: PPUSH
29280: LD_INT 8
29282: PPUSH
29283: CALL_OW 336
// end ;
29287: PPOPN 3
29289: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29290: LD_EXP 54
29294: PUSH
29295: LD_EXP 98
29299: AND
29300: IFFALSE 29444
29302: GO 29304
29304: DISABLE
29305: LD_INT 0
29307: PPUSH
29308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29309: LD_ADDR_VAR 0 2
29313: PUSH
29314: LD_INT 22
29316: PUSH
29317: LD_OWVAR 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 21
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: LD_INT 34
29341: PUSH
29342: LD_INT 12
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 34
29351: PUSH
29352: LD_INT 51
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 34
29361: PUSH
29362: LD_INT 32
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: PPUSH
29380: CALL_OW 69
29384: ST_TO_ADDR
// if not tmp then
29385: LD_VAR 0 2
29389: NOT
29390: IFFALSE 29394
// exit ;
29392: GO 29444
// for i in tmp do
29394: LD_ADDR_VAR 0 1
29398: PUSH
29399: LD_VAR 0 2
29403: PUSH
29404: FOR_IN
29405: IFFALSE 29442
// if GetCargo ( i , mat_artifact ) = 0 then
29407: LD_VAR 0 1
29411: PPUSH
29412: LD_INT 4
29414: PPUSH
29415: CALL_OW 289
29419: PUSH
29420: LD_INT 0
29422: EQUAL
29423: IFFALSE 29440
// SetCargo ( i , mat_siberit , 100 ) ;
29425: LD_VAR 0 1
29429: PPUSH
29430: LD_INT 3
29432: PPUSH
29433: LD_INT 100
29435: PPUSH
29436: CALL_OW 290
29440: GO 29404
29442: POP
29443: POP
// end ;
29444: PPOPN 2
29446: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29447: LD_EXP 54
29451: PUSH
29452: LD_EXP 99
29456: AND
29457: IFFALSE 29640
29459: GO 29461
29461: DISABLE
29462: LD_INT 0
29464: PPUSH
29465: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29466: LD_ADDR_VAR 0 2
29470: PUSH
29471: LD_INT 22
29473: PUSH
29474: LD_OWVAR 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PPUSH
29483: CALL_OW 69
29487: ST_TO_ADDR
// if not tmp then
29488: LD_VAR 0 2
29492: NOT
29493: IFFALSE 29497
// exit ;
29495: GO 29640
// for i := 1 to 2 do
29497: LD_ADDR_VAR 0 1
29501: PUSH
29502: DOUBLE
29503: LD_INT 1
29505: DEC
29506: ST_TO_ADDR
29507: LD_INT 2
29509: PUSH
29510: FOR_TO
29511: IFFALSE 29638
// begin uc_side := your_side ;
29513: LD_ADDR_OWVAR 20
29517: PUSH
29518: LD_OWVAR 2
29522: ST_TO_ADDR
// uc_nation := nation_american ;
29523: LD_ADDR_OWVAR 21
29527: PUSH
29528: LD_INT 1
29530: ST_TO_ADDR
// vc_chassis := us_morphling ;
29531: LD_ADDR_OWVAR 37
29535: PUSH
29536: LD_INT 5
29538: ST_TO_ADDR
// vc_engine := engine_siberite ;
29539: LD_ADDR_OWVAR 39
29543: PUSH
29544: LD_INT 3
29546: ST_TO_ADDR
// vc_control := control_computer ;
29547: LD_ADDR_OWVAR 38
29551: PUSH
29552: LD_INT 3
29554: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29555: LD_ADDR_OWVAR 40
29559: PUSH
29560: LD_INT 10
29562: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29563: LD_VAR 0 2
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: PPUSH
29572: CALL_OW 310
29576: NOT
29577: IFFALSE 29624
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29579: CALL_OW 45
29583: PPUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_INT 1
29591: ARRAY
29592: PPUSH
29593: CALL_OW 250
29597: PPUSH
29598: LD_VAR 0 2
29602: PUSH
29603: LD_INT 1
29605: ARRAY
29606: PPUSH
29607: CALL_OW 251
29611: PPUSH
29612: LD_INT 12
29614: PPUSH
29615: LD_INT 1
29617: PPUSH
29618: CALL_OW 50
29622: GO 29636
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29624: CALL_OW 45
29628: PPUSH
29629: LD_INT 1
29631: PPUSH
29632: CALL_OW 51
// end ;
29636: GO 29510
29638: POP
29639: POP
// end ;
29640: PPOPN 2
29642: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29643: LD_EXP 54
29647: PUSH
29648: LD_EXP 100
29652: AND
29653: IFFALSE 29875
29655: GO 29657
29657: DISABLE
29658: LD_INT 0
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29666: LD_ADDR_VAR 0 6
29670: PUSH
29671: LD_INT 22
29673: PUSH
29674: LD_OWVAR 2
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 21
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 3
29695: PUSH
29696: LD_INT 23
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: PPUSH
29715: CALL_OW 69
29719: ST_TO_ADDR
// if not tmp then
29720: LD_VAR 0 6
29724: NOT
29725: IFFALSE 29729
// exit ;
29727: GO 29875
// s1 := rand ( 1 , 4 ) ;
29729: LD_ADDR_VAR 0 2
29733: PUSH
29734: LD_INT 1
29736: PPUSH
29737: LD_INT 4
29739: PPUSH
29740: CALL_OW 12
29744: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29745: LD_ADDR_VAR 0 4
29749: PUSH
29750: LD_VAR 0 6
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PPUSH
29759: LD_VAR 0 2
29763: PPUSH
29764: CALL_OW 259
29768: ST_TO_ADDR
// if s1 = 1 then
29769: LD_VAR 0 2
29773: PUSH
29774: LD_INT 1
29776: EQUAL
29777: IFFALSE 29797
// s2 := rand ( 2 , 4 ) else
29779: LD_ADDR_VAR 0 3
29783: PUSH
29784: LD_INT 2
29786: PPUSH
29787: LD_INT 4
29789: PPUSH
29790: CALL_OW 12
29794: ST_TO_ADDR
29795: GO 29805
// s2 := 1 ;
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_INT 1
29804: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29805: LD_ADDR_VAR 0 5
29809: PUSH
29810: LD_VAR 0 6
29814: PUSH
29815: LD_INT 1
29817: ARRAY
29818: PPUSH
29819: LD_VAR 0 3
29823: PPUSH
29824: CALL_OW 259
29828: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29829: LD_VAR 0 6
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: PPUSH
29838: LD_VAR 0 2
29842: PPUSH
29843: LD_VAR 0 5
29847: PPUSH
29848: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29852: LD_VAR 0 6
29856: PUSH
29857: LD_INT 1
29859: ARRAY
29860: PPUSH
29861: LD_VAR 0 3
29865: PPUSH
29866: LD_VAR 0 4
29870: PPUSH
29871: CALL_OW 237
// end ;
29875: PPOPN 6
29877: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29878: LD_EXP 54
29882: PUSH
29883: LD_EXP 101
29887: AND
29888: IFFALSE 29967
29890: GO 29892
29892: DISABLE
29893: LD_INT 0
29895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29896: LD_ADDR_VAR 0 1
29900: PUSH
29901: LD_INT 22
29903: PUSH
29904: LD_OWVAR 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 30
29915: PUSH
29916: LD_INT 3
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 69
29931: ST_TO_ADDR
// if not tmp then
29932: LD_VAR 0 1
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 29967
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29941: LD_VAR 0 1
29945: PUSH
29946: LD_INT 1
29948: PPUSH
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL_OW 12
29958: ARRAY
29959: PPUSH
29960: LD_INT 1
29962: PPUSH
29963: CALL_OW 234
// end ;
29967: PPOPN 1
29969: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29970: LD_EXP 54
29974: PUSH
29975: LD_EXP 102
29979: AND
29980: IFFALSE 30092
29982: GO 29984
29984: DISABLE
29985: LD_INT 0
29987: PPUSH
29988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29989: LD_ADDR_VAR 0 2
29993: PUSH
29994: LD_INT 22
29996: PUSH
29997: LD_OWVAR 2
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 30
30011: PUSH
30012: LD_INT 27
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 30
30021: PUSH
30022: LD_INT 26
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 30
30031: PUSH
30032: LD_INT 28
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 69
30053: ST_TO_ADDR
// if not tmp then
30054: LD_VAR 0 2
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30092
// for i in tmp do
30063: LD_ADDR_VAR 0 1
30067: PUSH
30068: LD_VAR 0 2
30072: PUSH
30073: FOR_IN
30074: IFFALSE 30090
// SetLives ( i , 1 ) ;
30076: LD_VAR 0 1
30080: PPUSH
30081: LD_INT 1
30083: PPUSH
30084: CALL_OW 234
30088: GO 30073
30090: POP
30091: POP
// end ;
30092: PPOPN 2
30094: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30095: LD_EXP 54
30099: PUSH
30100: LD_EXP 103
30104: AND
30105: IFFALSE 30392
30107: GO 30109
30109: DISABLE
30110: LD_INT 0
30112: PPUSH
30113: PPUSH
30114: PPUSH
// begin i := rand ( 1 , 7 ) ;
30115: LD_ADDR_VAR 0 1
30119: PUSH
30120: LD_INT 1
30122: PPUSH
30123: LD_INT 7
30125: PPUSH
30126: CALL_OW 12
30130: ST_TO_ADDR
// case i of 1 :
30131: LD_VAR 0 1
30135: PUSH
30136: LD_INT 1
30138: DOUBLE
30139: EQUAL
30140: IFTRUE 30144
30142: GO 30154
30144: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30145: LD_STRING earthquake(getX(game), 0, 32)
30147: PPUSH
30148: CALL_OW 559
30152: GO 30392
30154: LD_INT 2
30156: DOUBLE
30157: EQUAL
30158: IFTRUE 30162
30160: GO 30176
30162: POP
// begin ToLua ( displayStucuk(); ) ;
30163: LD_STRING displayStucuk();
30165: PPUSH
30166: CALL_OW 559
// ResetFog ;
30170: CALL_OW 335
// end ; 3 :
30174: GO 30392
30176: LD_INT 3
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30288
30184: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30185: LD_ADDR_VAR 0 2
30189: PUSH
30190: LD_INT 22
30192: PUSH
30193: LD_OWVAR 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 25
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PPUSH
30216: CALL_OW 69
30220: ST_TO_ADDR
// if not tmp then
30221: LD_VAR 0 2
30225: NOT
30226: IFFALSE 30230
// exit ;
30228: GO 30392
// un := tmp [ rand ( 1 , tmp ) ] ;
30230: LD_ADDR_VAR 0 3
30234: PUSH
30235: LD_VAR 0 2
30239: PUSH
30240: LD_INT 1
30242: PPUSH
30243: LD_VAR 0 2
30247: PPUSH
30248: CALL_OW 12
30252: ARRAY
30253: ST_TO_ADDR
// if Crawls ( un ) then
30254: LD_VAR 0 3
30258: PPUSH
30259: CALL_OW 318
30263: IFFALSE 30274
// ComWalk ( un ) ;
30265: LD_VAR 0 3
30269: PPUSH
30270: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30274: LD_VAR 0 3
30278: PPUSH
30279: LD_INT 8
30281: PPUSH
30282: CALL_OW 336
// end ; 4 :
30286: GO 30392
30288: LD_INT 4
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30370
30296: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30297: LD_ADDR_VAR 0 2
30301: PUSH
30302: LD_INT 22
30304: PUSH
30305: LD_OWVAR 2
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 30
30316: PUSH
30317: LD_INT 29
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PPUSH
30328: CALL_OW 69
30332: ST_TO_ADDR
// if not tmp then
30333: LD_VAR 0 2
30337: NOT
30338: IFFALSE 30342
// exit ;
30340: GO 30392
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30342: LD_VAR 0 2
30346: PUSH
30347: LD_INT 1
30349: ARRAY
30350: PPUSH
30351: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30355: LD_VAR 0 2
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: PPUSH
30364: CALL_OW 65
// end ; 5 .. 7 :
30368: GO 30392
30370: LD_INT 5
30372: DOUBLE
30373: GREATEREQUAL
30374: IFFALSE 30382
30376: LD_INT 7
30378: DOUBLE
30379: LESSEQUAL
30380: IFTRUE 30384
30382: GO 30391
30384: POP
// StreamSibBomb ; end ;
30385: CALL 26629 0 0
30389: GO 30392
30391: POP
// end ;
30392: PPOPN 3
30394: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30395: LD_EXP 54
30399: PUSH
30400: LD_EXP 104
30404: AND
30405: IFFALSE 30561
30407: GO 30409
30409: DISABLE
30410: LD_INT 0
30412: PPUSH
30413: PPUSH
30414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30415: LD_ADDR_VAR 0 2
30419: PUSH
30420: LD_INT 81
30422: PUSH
30423: LD_OWVAR 2
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 2
30434: PUSH
30435: LD_INT 21
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 21
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: LIST
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PPUSH
30464: CALL_OW 69
30468: ST_TO_ADDR
// if not tmp then
30469: LD_VAR 0 2
30473: NOT
30474: IFFALSE 30478
// exit ;
30476: GO 30561
// p := 0 ;
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: LD_INT 0
30485: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30486: LD_INT 35
30488: PPUSH
30489: CALL_OW 67
// p := p + 1 ;
30493: LD_ADDR_VAR 0 3
30497: PUSH
30498: LD_VAR 0 3
30502: PUSH
30503: LD_INT 1
30505: PLUS
30506: ST_TO_ADDR
// for i in tmp do
30507: LD_ADDR_VAR 0 1
30511: PUSH
30512: LD_VAR 0 2
30516: PUSH
30517: FOR_IN
30518: IFFALSE 30549
// if GetLives ( i ) < 1000 then
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 256
30529: PUSH
30530: LD_INT 1000
30532: LESS
30533: IFFALSE 30547
// SetLives ( i , 1000 ) ;
30535: LD_VAR 0 1
30539: PPUSH
30540: LD_INT 1000
30542: PPUSH
30543: CALL_OW 234
30547: GO 30517
30549: POP
30550: POP
// until p > 20 ;
30551: LD_VAR 0 3
30555: PUSH
30556: LD_INT 20
30558: GREATER
30559: IFFALSE 30486
// end ;
30561: PPOPN 3
30563: END
// every 0 0$1 trigger StreamModeActive and sTime do
30564: LD_EXP 54
30568: PUSH
30569: LD_EXP 105
30573: AND
30574: IFFALSE 30609
30576: GO 30578
30578: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30579: LD_INT 28
30581: PPUSH
30582: LD_OWVAR 2
30586: PPUSH
30587: LD_INT 2
30589: PPUSH
30590: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30594: LD_INT 30
30596: PPUSH
30597: LD_OWVAR 2
30601: PPUSH
30602: LD_INT 2
30604: PPUSH
30605: CALL_OW 322
// end ;
30609: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30610: LD_EXP 54
30614: PUSH
30615: LD_EXP 106
30619: AND
30620: IFFALSE 30741
30622: GO 30624
30624: DISABLE
30625: LD_INT 0
30627: PPUSH
30628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30629: LD_ADDR_VAR 0 2
30633: PUSH
30634: LD_INT 22
30636: PUSH
30637: LD_OWVAR 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 21
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: LD_INT 23
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: PPUSH
30678: CALL_OW 69
30682: ST_TO_ADDR
// if not tmp then
30683: LD_VAR 0 2
30687: NOT
30688: IFFALSE 30692
// exit ;
30690: GO 30741
// for i in tmp do
30692: LD_ADDR_VAR 0 1
30696: PUSH
30697: LD_VAR 0 2
30701: PUSH
30702: FOR_IN
30703: IFFALSE 30739
// begin if Crawls ( i ) then
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 318
30714: IFFALSE 30725
// ComWalk ( i ) ;
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 138
// SetClass ( i , 2 ) ;
30725: LD_VAR 0 1
30729: PPUSH
30730: LD_INT 2
30732: PPUSH
30733: CALL_OW 336
// end ;
30737: GO 30702
30739: POP
30740: POP
// end ;
30741: PPOPN 2
30743: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30744: LD_EXP 54
30748: PUSH
30749: LD_EXP 107
30753: AND
30754: IFFALSE 31042
30756: GO 30758
30758: DISABLE
30759: LD_INT 0
30761: PPUSH
30762: PPUSH
30763: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30764: LD_OWVAR 2
30768: PPUSH
30769: LD_INT 9
30771: PPUSH
30772: LD_INT 1
30774: PPUSH
30775: LD_INT 1
30777: PPUSH
30778: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30782: LD_INT 9
30784: PPUSH
30785: LD_OWVAR 2
30789: PPUSH
30790: CALL_OW 343
// uc_side := 9 ;
30794: LD_ADDR_OWVAR 20
30798: PUSH
30799: LD_INT 9
30801: ST_TO_ADDR
// uc_nation := 2 ;
30802: LD_ADDR_OWVAR 21
30806: PUSH
30807: LD_INT 2
30809: ST_TO_ADDR
// hc_name := Dark Warrior ;
30810: LD_ADDR_OWVAR 26
30814: PUSH
30815: LD_STRING Dark Warrior
30817: ST_TO_ADDR
// hc_gallery :=  ;
30818: LD_ADDR_OWVAR 33
30822: PUSH
30823: LD_STRING 
30825: ST_TO_ADDR
// hc_noskilllimit := true ;
30826: LD_ADDR_OWVAR 76
30830: PUSH
30831: LD_INT 1
30833: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30834: LD_ADDR_OWVAR 31
30838: PUSH
30839: LD_INT 30
30841: PUSH
30842: LD_INT 30
30844: PUSH
30845: LD_INT 30
30847: PUSH
30848: LD_INT 30
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// un := CreateHuman ;
30857: LD_ADDR_VAR 0 3
30861: PUSH
30862: CALL_OW 44
30866: ST_TO_ADDR
// hc_noskilllimit := false ;
30867: LD_ADDR_OWVAR 76
30871: PUSH
30872: LD_INT 0
30874: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30875: LD_VAR 0 3
30879: PPUSH
30880: LD_INT 1
30882: PPUSH
30883: CALL_OW 51
// ToLua ( playRanger() ) ;
30887: LD_STRING playRanger()
30889: PPUSH
30890: CALL_OW 559
// p := 0 ;
30894: LD_ADDR_VAR 0 2
30898: PUSH
30899: LD_INT 0
30901: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30902: LD_INT 35
30904: PPUSH
30905: CALL_OW 67
// p := p + 1 ;
30909: LD_ADDR_VAR 0 2
30913: PUSH
30914: LD_VAR 0 2
30918: PUSH
30919: LD_INT 1
30921: PLUS
30922: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30923: LD_VAR 0 3
30927: PPUSH
30928: CALL_OW 256
30932: PUSH
30933: LD_INT 1000
30935: LESS
30936: IFFALSE 30950
// SetLives ( un , 1000 ) ;
30938: LD_VAR 0 3
30942: PPUSH
30943: LD_INT 1000
30945: PPUSH
30946: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30950: LD_VAR 0 3
30954: PPUSH
30955: LD_INT 81
30957: PUSH
30958: LD_OWVAR 2
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 91
30969: PUSH
30970: LD_VAR 0 3
30974: PUSH
30975: LD_INT 30
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PPUSH
30987: CALL_OW 69
30991: PPUSH
30992: LD_VAR 0 3
30996: PPUSH
30997: CALL_OW 74
31001: PPUSH
31002: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31006: LD_VAR 0 2
31010: PUSH
31011: LD_INT 80
31013: GREATER
31014: PUSH
31015: LD_VAR 0 3
31019: PPUSH
31020: CALL_OW 301
31024: OR
31025: IFFALSE 30902
// if un then
31027: LD_VAR 0 3
31031: IFFALSE 31042
// RemoveUnit ( un ) ;
31033: LD_VAR 0 3
31037: PPUSH
31038: CALL_OW 64
// end ;
31042: PPOPN 3
31044: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31045: LD_EXP 108
31049: IFFALSE 31165
31051: GO 31053
31053: DISABLE
31054: LD_INT 0
31056: PPUSH
31057: PPUSH
31058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31059: LD_ADDR_VAR 0 2
31063: PUSH
31064: LD_INT 81
31066: PUSH
31067: LD_OWVAR 2
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 21
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 69
31094: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31095: LD_STRING playComputer()
31097: PPUSH
31098: CALL_OW 559
// if not tmp then
31102: LD_VAR 0 2
31106: NOT
31107: IFFALSE 31111
// exit ;
31109: GO 31165
// for i in tmp do
31111: LD_ADDR_VAR 0 1
31115: PUSH
31116: LD_VAR 0 2
31120: PUSH
31121: FOR_IN
31122: IFFALSE 31163
// for j := 1 to 4 do
31124: LD_ADDR_VAR 0 3
31128: PUSH
31129: DOUBLE
31130: LD_INT 1
31132: DEC
31133: ST_TO_ADDR
31134: LD_INT 4
31136: PUSH
31137: FOR_TO
31138: IFFALSE 31159
// SetSkill ( i , j , 10 ) ;
31140: LD_VAR 0 1
31144: PPUSH
31145: LD_VAR 0 3
31149: PPUSH
31150: LD_INT 10
31152: PPUSH
31153: CALL_OW 237
31157: GO 31137
31159: POP
31160: POP
31161: GO 31121
31163: POP
31164: POP
// end ;
31165: PPOPN 3
31167: END
// every 0 0$1 trigger s30 do var i , tmp ;
31168: LD_EXP 109
31172: IFFALSE 31241
31174: GO 31176
31176: DISABLE
31177: LD_INT 0
31179: PPUSH
31180: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31181: LD_ADDR_VAR 0 2
31185: PUSH
31186: LD_INT 22
31188: PUSH
31189: LD_OWVAR 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PPUSH
31198: CALL_OW 69
31202: ST_TO_ADDR
// if not tmp then
31203: LD_VAR 0 2
31207: NOT
31208: IFFALSE 31212
// exit ;
31210: GO 31241
// for i in tmp do
31212: LD_ADDR_VAR 0 1
31216: PUSH
31217: LD_VAR 0 2
31221: PUSH
31222: FOR_IN
31223: IFFALSE 31239
// SetLives ( i , 300 ) ;
31225: LD_VAR 0 1
31229: PPUSH
31230: LD_INT 300
31232: PPUSH
31233: CALL_OW 234
31237: GO 31222
31239: POP
31240: POP
// end ;
31241: PPOPN 2
31243: END
// every 0 0$1 trigger s60 do var i , tmp ;
31244: LD_EXP 110
31248: IFFALSE 31317
31250: GO 31252
31252: DISABLE
31253: LD_INT 0
31255: PPUSH
31256: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31257: LD_ADDR_VAR 0 2
31261: PUSH
31262: LD_INT 22
31264: PUSH
31265: LD_OWVAR 2
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PPUSH
31274: CALL_OW 69
31278: ST_TO_ADDR
// if not tmp then
31279: LD_VAR 0 2
31283: NOT
31284: IFFALSE 31288
// exit ;
31286: GO 31317
// for i in tmp do
31288: LD_ADDR_VAR 0 1
31292: PUSH
31293: LD_VAR 0 2
31297: PUSH
31298: FOR_IN
31299: IFFALSE 31315
// SetLives ( i , 600 ) ;
31301: LD_VAR 0 1
31305: PPUSH
31306: LD_INT 600
31308: PPUSH
31309: CALL_OW 234
31313: GO 31298
31315: POP
31316: POP
// end ;
31317: PPOPN 2
31319: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31320: LD_INT 0
31322: PPUSH
// case cmd of 301 :
31323: LD_VAR 0 1
31327: PUSH
31328: LD_INT 301
31330: DOUBLE
31331: EQUAL
31332: IFTRUE 31336
31334: GO 31368
31336: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31337: LD_VAR 0 6
31341: PPUSH
31342: LD_VAR 0 7
31346: PPUSH
31347: LD_VAR 0 8
31351: PPUSH
31352: LD_VAR 0 4
31356: PPUSH
31357: LD_VAR 0 5
31361: PPUSH
31362: CALL 32569 0 5
31366: GO 31489
31368: LD_INT 302
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31413
31376: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31377: LD_VAR 0 6
31381: PPUSH
31382: LD_VAR 0 7
31386: PPUSH
31387: LD_VAR 0 8
31391: PPUSH
31392: LD_VAR 0 9
31396: PPUSH
31397: LD_VAR 0 4
31401: PPUSH
31402: LD_VAR 0 5
31406: PPUSH
31407: CALL 32660 0 6
31411: GO 31489
31413: LD_INT 303
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31458
31421: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31422: LD_VAR 0 6
31426: PPUSH
31427: LD_VAR 0 7
31431: PPUSH
31432: LD_VAR 0 8
31436: PPUSH
31437: LD_VAR 0 9
31441: PPUSH
31442: LD_VAR 0 4
31446: PPUSH
31447: LD_VAR 0 5
31451: PPUSH
31452: CALL 31494 0 6
31456: GO 31489
31458: LD_INT 304
31460: DOUBLE
31461: EQUAL
31462: IFTRUE 31466
31464: GO 31488
31466: POP
// hHackTeleport ( unit , x , y ) ; end ;
31467: LD_VAR 0 2
31471: PPUSH
31472: LD_VAR 0 4
31476: PPUSH
31477: LD_VAR 0 5
31481: PPUSH
31482: CALL 33253 0 3
31486: GO 31489
31488: POP
// end ;
31489: LD_VAR 0 12
31493: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31494: LD_INT 0
31496: PPUSH
31497: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31498: LD_VAR 0 1
31502: PUSH
31503: LD_INT 1
31505: LESS
31506: PUSH
31507: LD_VAR 0 1
31511: PUSH
31512: LD_INT 3
31514: GREATER
31515: OR
31516: PUSH
31517: LD_VAR 0 5
31521: PPUSH
31522: LD_VAR 0 6
31526: PPUSH
31527: CALL_OW 428
31531: OR
31532: IFFALSE 31536
// exit ;
31534: GO 32256
// uc_side := your_side ;
31536: LD_ADDR_OWVAR 20
31540: PUSH
31541: LD_OWVAR 2
31545: ST_TO_ADDR
// uc_nation := nation ;
31546: LD_ADDR_OWVAR 21
31550: PUSH
31551: LD_VAR 0 1
31555: ST_TO_ADDR
// bc_level = 1 ;
31556: LD_ADDR_OWVAR 43
31560: PUSH
31561: LD_INT 1
31563: ST_TO_ADDR
// case btype of 1 :
31564: LD_VAR 0 2
31568: PUSH
31569: LD_INT 1
31571: DOUBLE
31572: EQUAL
31573: IFTRUE 31577
31575: GO 31588
31577: POP
// bc_type := b_depot ; 2 :
31578: LD_ADDR_OWVAR 42
31582: PUSH
31583: LD_INT 0
31585: ST_TO_ADDR
31586: GO 32200
31588: LD_INT 2
31590: DOUBLE
31591: EQUAL
31592: IFTRUE 31596
31594: GO 31607
31596: POP
// bc_type := b_warehouse ; 3 :
31597: LD_ADDR_OWVAR 42
31601: PUSH
31602: LD_INT 1
31604: ST_TO_ADDR
31605: GO 32200
31607: LD_INT 3
31609: DOUBLE
31610: EQUAL
31611: IFTRUE 31615
31613: GO 31626
31615: POP
// bc_type := b_lab ; 4 .. 9 :
31616: LD_ADDR_OWVAR 42
31620: PUSH
31621: LD_INT 6
31623: ST_TO_ADDR
31624: GO 32200
31626: LD_INT 4
31628: DOUBLE
31629: GREATEREQUAL
31630: IFFALSE 31638
31632: LD_INT 9
31634: DOUBLE
31635: LESSEQUAL
31636: IFTRUE 31640
31638: GO 31692
31640: POP
// begin bc_type := b_lab_half ;
31641: LD_ADDR_OWVAR 42
31645: PUSH
31646: LD_INT 7
31648: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31649: LD_ADDR_OWVAR 44
31653: PUSH
31654: LD_INT 10
31656: PUSH
31657: LD_INT 11
31659: PUSH
31660: LD_INT 12
31662: PUSH
31663: LD_INT 15
31665: PUSH
31666: LD_INT 14
31668: PUSH
31669: LD_INT 13
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: PUSH
31680: LD_VAR 0 2
31684: PUSH
31685: LD_INT 3
31687: MINUS
31688: ARRAY
31689: ST_TO_ADDR
// end ; 10 .. 13 :
31690: GO 32200
31692: LD_INT 10
31694: DOUBLE
31695: GREATEREQUAL
31696: IFFALSE 31704
31698: LD_INT 13
31700: DOUBLE
31701: LESSEQUAL
31702: IFTRUE 31706
31704: GO 31783
31706: POP
// begin bc_type := b_lab_full ;
31707: LD_ADDR_OWVAR 42
31711: PUSH
31712: LD_INT 8
31714: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31715: LD_ADDR_OWVAR 44
31719: PUSH
31720: LD_INT 10
31722: PUSH
31723: LD_INT 12
31725: PUSH
31726: LD_INT 14
31728: PUSH
31729: LD_INT 13
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: PUSH
31738: LD_VAR 0 2
31742: PUSH
31743: LD_INT 9
31745: MINUS
31746: ARRAY
31747: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31748: LD_ADDR_OWVAR 45
31752: PUSH
31753: LD_INT 11
31755: PUSH
31756: LD_INT 15
31758: PUSH
31759: LD_INT 12
31761: PUSH
31762: LD_INT 15
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: PUSH
31771: LD_VAR 0 2
31775: PUSH
31776: LD_INT 9
31778: MINUS
31779: ARRAY
31780: ST_TO_ADDR
// end ; 14 :
31781: GO 32200
31783: LD_INT 14
31785: DOUBLE
31786: EQUAL
31787: IFTRUE 31791
31789: GO 31802
31791: POP
// bc_type := b_workshop ; 15 :
31792: LD_ADDR_OWVAR 42
31796: PUSH
31797: LD_INT 2
31799: ST_TO_ADDR
31800: GO 32200
31802: LD_INT 15
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31810
31808: GO 31821
31810: POP
// bc_type := b_factory ; 16 :
31811: LD_ADDR_OWVAR 42
31815: PUSH
31816: LD_INT 3
31818: ST_TO_ADDR
31819: GO 32200
31821: LD_INT 16
31823: DOUBLE
31824: EQUAL
31825: IFTRUE 31829
31827: GO 31840
31829: POP
// bc_type := b_ext_gun ; 17 :
31830: LD_ADDR_OWVAR 42
31834: PUSH
31835: LD_INT 17
31837: ST_TO_ADDR
31838: GO 32200
31840: LD_INT 17
31842: DOUBLE
31843: EQUAL
31844: IFTRUE 31848
31846: GO 31876
31848: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31849: LD_ADDR_OWVAR 42
31853: PUSH
31854: LD_INT 19
31856: PUSH
31857: LD_INT 23
31859: PUSH
31860: LD_INT 19
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: PUSH
31868: LD_VAR 0 1
31872: ARRAY
31873: ST_TO_ADDR
31874: GO 32200
31876: LD_INT 18
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31884
31882: GO 31895
31884: POP
// bc_type := b_ext_radar ; 19 :
31885: LD_ADDR_OWVAR 42
31889: PUSH
31890: LD_INT 20
31892: ST_TO_ADDR
31893: GO 32200
31895: LD_INT 19
31897: DOUBLE
31898: EQUAL
31899: IFTRUE 31903
31901: GO 31914
31903: POP
// bc_type := b_ext_radio ; 20 :
31904: LD_ADDR_OWVAR 42
31908: PUSH
31909: LD_INT 22
31911: ST_TO_ADDR
31912: GO 32200
31914: LD_INT 20
31916: DOUBLE
31917: EQUAL
31918: IFTRUE 31922
31920: GO 31933
31922: POP
// bc_type := b_ext_siberium ; 21 :
31923: LD_ADDR_OWVAR 42
31927: PUSH
31928: LD_INT 21
31930: ST_TO_ADDR
31931: GO 32200
31933: LD_INT 21
31935: DOUBLE
31936: EQUAL
31937: IFTRUE 31941
31939: GO 31952
31941: POP
// bc_type := b_ext_computer ; 22 :
31942: LD_ADDR_OWVAR 42
31946: PUSH
31947: LD_INT 24
31949: ST_TO_ADDR
31950: GO 32200
31952: LD_INT 22
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31971
31960: POP
// bc_type := b_ext_track ; 23 :
31961: LD_ADDR_OWVAR 42
31965: PUSH
31966: LD_INT 16
31968: ST_TO_ADDR
31969: GO 32200
31971: LD_INT 23
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31979
31977: GO 31990
31979: POP
// bc_type := b_ext_laser ; 24 :
31980: LD_ADDR_OWVAR 42
31984: PUSH
31985: LD_INT 25
31987: ST_TO_ADDR
31988: GO 32200
31990: LD_INT 24
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32009
31998: POP
// bc_type := b_control_tower ; 25 :
31999: LD_ADDR_OWVAR 42
32003: PUSH
32004: LD_INT 36
32006: ST_TO_ADDR
32007: GO 32200
32009: LD_INT 25
32011: DOUBLE
32012: EQUAL
32013: IFTRUE 32017
32015: GO 32028
32017: POP
// bc_type := b_breastwork ; 26 :
32018: LD_ADDR_OWVAR 42
32022: PUSH
32023: LD_INT 31
32025: ST_TO_ADDR
32026: GO 32200
32028: LD_INT 26
32030: DOUBLE
32031: EQUAL
32032: IFTRUE 32036
32034: GO 32047
32036: POP
// bc_type := b_bunker ; 27 :
32037: LD_ADDR_OWVAR 42
32041: PUSH
32042: LD_INT 32
32044: ST_TO_ADDR
32045: GO 32200
32047: LD_INT 27
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32066
32055: POP
// bc_type := b_turret ; 28 :
32056: LD_ADDR_OWVAR 42
32060: PUSH
32061: LD_INT 33
32063: ST_TO_ADDR
32064: GO 32200
32066: LD_INT 28
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32085
32074: POP
// bc_type := b_armoury ; 29 :
32075: LD_ADDR_OWVAR 42
32079: PUSH
32080: LD_INT 4
32082: ST_TO_ADDR
32083: GO 32200
32085: LD_INT 29
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32104
32093: POP
// bc_type := b_barracks ; 30 :
32094: LD_ADDR_OWVAR 42
32098: PUSH
32099: LD_INT 5
32101: ST_TO_ADDR
32102: GO 32200
32104: LD_INT 30
32106: DOUBLE
32107: EQUAL
32108: IFTRUE 32112
32110: GO 32123
32112: POP
// bc_type := b_solar_power ; 31 :
32113: LD_ADDR_OWVAR 42
32117: PUSH
32118: LD_INT 27
32120: ST_TO_ADDR
32121: GO 32200
32123: LD_INT 31
32125: DOUBLE
32126: EQUAL
32127: IFTRUE 32131
32129: GO 32142
32131: POP
// bc_type := b_oil_power ; 32 :
32132: LD_ADDR_OWVAR 42
32136: PUSH
32137: LD_INT 26
32139: ST_TO_ADDR
32140: GO 32200
32142: LD_INT 32
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32161
32150: POP
// bc_type := b_siberite_power ; 33 :
32151: LD_ADDR_OWVAR 42
32155: PUSH
32156: LD_INT 28
32158: ST_TO_ADDR
32159: GO 32200
32161: LD_INT 33
32163: DOUBLE
32164: EQUAL
32165: IFTRUE 32169
32167: GO 32180
32169: POP
// bc_type := b_oil_mine ; 34 :
32170: LD_ADDR_OWVAR 42
32174: PUSH
32175: LD_INT 29
32177: ST_TO_ADDR
32178: GO 32200
32180: LD_INT 34
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32199
32188: POP
// bc_type := b_siberite_mine ; end ;
32189: LD_ADDR_OWVAR 42
32193: PUSH
32194: LD_INT 30
32196: ST_TO_ADDR
32197: GO 32200
32199: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32200: LD_ADDR_VAR 0 8
32204: PUSH
32205: LD_VAR 0 5
32209: PPUSH
32210: LD_VAR 0 6
32214: PPUSH
32215: LD_VAR 0 3
32219: PPUSH
32220: CALL_OW 47
32224: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32225: LD_OWVAR 42
32229: PUSH
32230: LD_INT 32
32232: PUSH
32233: LD_INT 33
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: IN
32240: IFFALSE 32256
// PlaceWeaponTurret ( b , weapon ) ;
32242: LD_VAR 0 8
32246: PPUSH
32247: LD_VAR 0 4
32251: PPUSH
32252: CALL_OW 431
// end ;
32256: LD_VAR 0 7
32260: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32261: LD_INT 0
32263: PPUSH
32264: PPUSH
32265: PPUSH
32266: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32267: LD_ADDR_VAR 0 4
32271: PUSH
32272: LD_INT 22
32274: PUSH
32275: LD_OWVAR 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 30
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 30
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PPUSH
32316: CALL_OW 69
32320: ST_TO_ADDR
// if not tmp then
32321: LD_VAR 0 4
32325: NOT
32326: IFFALSE 32330
// exit ;
32328: GO 32389
// for i in tmp do
32330: LD_ADDR_VAR 0 2
32334: PUSH
32335: LD_VAR 0 4
32339: PUSH
32340: FOR_IN
32341: IFFALSE 32387
// for j = 1 to 3 do
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: DOUBLE
32349: LD_INT 1
32351: DEC
32352: ST_TO_ADDR
32353: LD_INT 3
32355: PUSH
32356: FOR_TO
32357: IFFALSE 32383
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32359: LD_VAR 0 2
32363: PPUSH
32364: CALL_OW 274
32368: PPUSH
32369: LD_VAR 0 3
32373: PPUSH
32374: LD_INT 99999
32376: PPUSH
32377: CALL_OW 277
32381: GO 32356
32383: POP
32384: POP
32385: GO 32340
32387: POP
32388: POP
// end ;
32389: LD_VAR 0 1
32393: RET
// export function hHackSetLevel10 ; var i , j ; begin
32394: LD_INT 0
32396: PPUSH
32397: PPUSH
32398: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32399: LD_ADDR_VAR 0 2
32403: PUSH
32404: LD_INT 21
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PPUSH
32414: CALL_OW 69
32418: PUSH
32419: FOR_IN
32420: IFFALSE 32472
// if IsSelected ( i ) then
32422: LD_VAR 0 2
32426: PPUSH
32427: CALL_OW 306
32431: IFFALSE 32470
// begin for j := 1 to 4 do
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: DOUBLE
32439: LD_INT 1
32441: DEC
32442: ST_TO_ADDR
32443: LD_INT 4
32445: PUSH
32446: FOR_TO
32447: IFFALSE 32468
// SetSkill ( i , j , 10 ) ;
32449: LD_VAR 0 2
32453: PPUSH
32454: LD_VAR 0 3
32458: PPUSH
32459: LD_INT 10
32461: PPUSH
32462: CALL_OW 237
32466: GO 32446
32468: POP
32469: POP
// end ;
32470: GO 32419
32472: POP
32473: POP
// end ;
32474: LD_VAR 0 1
32478: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32479: LD_INT 0
32481: PPUSH
32482: PPUSH
32483: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32484: LD_ADDR_VAR 0 2
32488: PUSH
32489: LD_INT 22
32491: PUSH
32492: LD_OWVAR 2
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 21
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PPUSH
32515: CALL_OW 69
32519: PUSH
32520: FOR_IN
32521: IFFALSE 32562
// begin for j := 1 to 4 do
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: DOUBLE
32529: LD_INT 1
32531: DEC
32532: ST_TO_ADDR
32533: LD_INT 4
32535: PUSH
32536: FOR_TO
32537: IFFALSE 32558
// SetSkill ( i , j , 10 ) ;
32539: LD_VAR 0 2
32543: PPUSH
32544: LD_VAR 0 3
32548: PPUSH
32549: LD_INT 10
32551: PPUSH
32552: CALL_OW 237
32556: GO 32536
32558: POP
32559: POP
// end ;
32560: GO 32520
32562: POP
32563: POP
// end ;
32564: LD_VAR 0 1
32568: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32569: LD_INT 0
32571: PPUSH
// uc_side := your_side ;
32572: LD_ADDR_OWVAR 20
32576: PUSH
32577: LD_OWVAR 2
32581: ST_TO_ADDR
// uc_nation := nation ;
32582: LD_ADDR_OWVAR 21
32586: PUSH
32587: LD_VAR 0 1
32591: ST_TO_ADDR
// InitHc ;
32592: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32596: LD_INT 0
32598: PPUSH
32599: LD_VAR 0 2
32603: PPUSH
32604: LD_VAR 0 3
32608: PPUSH
32609: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32613: LD_VAR 0 4
32617: PPUSH
32618: LD_VAR 0 5
32622: PPUSH
32623: CALL_OW 428
32627: PUSH
32628: LD_INT 0
32630: EQUAL
32631: IFFALSE 32655
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32633: CALL_OW 44
32637: PPUSH
32638: LD_VAR 0 4
32642: PPUSH
32643: LD_VAR 0 5
32647: PPUSH
32648: LD_INT 1
32650: PPUSH
32651: CALL_OW 48
// end ;
32655: LD_VAR 0 6
32659: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
// uc_side := your_side ;
32664: LD_ADDR_OWVAR 20
32668: PUSH
32669: LD_OWVAR 2
32673: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32674: LD_VAR 0 1
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: LD_INT 4
32690: PUSH
32691: LD_INT 5
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: IN
32701: IFFALSE 32713
// uc_nation := nation_american else
32703: LD_ADDR_OWVAR 21
32707: PUSH
32708: LD_INT 1
32710: ST_TO_ADDR
32711: GO 32756
// if chassis in [ 11 , 12 , 13 , 14 ] then
32713: LD_VAR 0 1
32717: PUSH
32718: LD_INT 11
32720: PUSH
32721: LD_INT 12
32723: PUSH
32724: LD_INT 13
32726: PUSH
32727: LD_INT 14
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: IN
32736: IFFALSE 32748
// uc_nation := nation_arabian else
32738: LD_ADDR_OWVAR 21
32742: PUSH
32743: LD_INT 2
32745: ST_TO_ADDR
32746: GO 32756
// uc_nation := nation_russian ;
32748: LD_ADDR_OWVAR 21
32752: PUSH
32753: LD_INT 3
32755: ST_TO_ADDR
// vc_chassis := chassis ;
32756: LD_ADDR_OWVAR 37
32760: PUSH
32761: LD_VAR 0 1
32765: ST_TO_ADDR
// vc_engine := engine ;
32766: LD_ADDR_OWVAR 39
32770: PUSH
32771: LD_VAR 0 2
32775: ST_TO_ADDR
// vc_control := control ;
32776: LD_ADDR_OWVAR 38
32780: PUSH
32781: LD_VAR 0 3
32785: ST_TO_ADDR
// vc_weapon := weapon ;
32786: LD_ADDR_OWVAR 40
32790: PUSH
32791: LD_VAR 0 4
32795: ST_TO_ADDR
// un := CreateVehicle ;
32796: LD_ADDR_VAR 0 8
32800: PUSH
32801: CALL_OW 45
32805: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32806: LD_VAR 0 8
32810: PPUSH
32811: LD_INT 0
32813: PPUSH
32814: LD_INT 5
32816: PPUSH
32817: CALL_OW 12
32821: PPUSH
32822: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32826: LD_VAR 0 8
32830: PPUSH
32831: LD_VAR 0 5
32835: PPUSH
32836: LD_VAR 0 6
32840: PPUSH
32841: LD_INT 1
32843: PPUSH
32844: CALL_OW 48
// end ;
32848: LD_VAR 0 7
32852: RET
// export hInvincible ; every 1 do
32853: GO 32855
32855: DISABLE
// hInvincible := [ ] ;
32856: LD_ADDR_EXP 111
32860: PUSH
32861: EMPTY
32862: ST_TO_ADDR
32863: END
// every 10 do var i ;
32864: GO 32866
32866: DISABLE
32867: LD_INT 0
32869: PPUSH
// begin enable ;
32870: ENABLE
// if not hInvincible then
32871: LD_EXP 111
32875: NOT
32876: IFFALSE 32880
// exit ;
32878: GO 32924
// for i in hInvincible do
32880: LD_ADDR_VAR 0 1
32884: PUSH
32885: LD_EXP 111
32889: PUSH
32890: FOR_IN
32891: IFFALSE 32922
// if GetLives ( i ) < 1000 then
32893: LD_VAR 0 1
32897: PPUSH
32898: CALL_OW 256
32902: PUSH
32903: LD_INT 1000
32905: LESS
32906: IFFALSE 32920
// SetLives ( i , 1000 ) ;
32908: LD_VAR 0 1
32912: PPUSH
32913: LD_INT 1000
32915: PPUSH
32916: CALL_OW 234
32920: GO 32890
32922: POP
32923: POP
// end ;
32924: PPOPN 1
32926: END
// export function hHackInvincible ; var i ; begin
32927: LD_INT 0
32929: PPUSH
32930: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32931: LD_ADDR_VAR 0 2
32935: PUSH
32936: LD_INT 2
32938: PUSH
32939: LD_INT 21
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 21
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: PPUSH
32964: CALL_OW 69
32968: PUSH
32969: FOR_IN
32970: IFFALSE 33031
// if IsSelected ( i ) then
32972: LD_VAR 0 2
32976: PPUSH
32977: CALL_OW 306
32981: IFFALSE 33029
// begin if i in hInvincible then
32983: LD_VAR 0 2
32987: PUSH
32988: LD_EXP 111
32992: IN
32993: IFFALSE 33013
// hInvincible := hInvincible diff i else
32995: LD_ADDR_EXP 111
32999: PUSH
33000: LD_EXP 111
33004: PUSH
33005: LD_VAR 0 2
33009: DIFF
33010: ST_TO_ADDR
33011: GO 33029
// hInvincible := hInvincible union i ;
33013: LD_ADDR_EXP 111
33017: PUSH
33018: LD_EXP 111
33022: PUSH
33023: LD_VAR 0 2
33027: UNION
33028: ST_TO_ADDR
// end ;
33029: GO 32969
33031: POP
33032: POP
// end ;
33033: LD_VAR 0 1
33037: RET
// export function hHackInvisible ; var i , j ; begin
33038: LD_INT 0
33040: PPUSH
33041: PPUSH
33042: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33043: LD_ADDR_VAR 0 2
33047: PUSH
33048: LD_INT 21
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PPUSH
33058: CALL_OW 69
33062: PUSH
33063: FOR_IN
33064: IFFALSE 33088
// if IsSelected ( i ) then
33066: LD_VAR 0 2
33070: PPUSH
33071: CALL_OW 306
33075: IFFALSE 33086
// ComForceInvisible ( i ) ;
33077: LD_VAR 0 2
33081: PPUSH
33082: CALL_OW 496
33086: GO 33063
33088: POP
33089: POP
// end ;
33090: LD_VAR 0 1
33094: RET
// export function hHackChangeYourSide ; begin
33095: LD_INT 0
33097: PPUSH
// if your_side = 8 then
33098: LD_OWVAR 2
33102: PUSH
33103: LD_INT 8
33105: EQUAL
33106: IFFALSE 33118
// your_side := 0 else
33108: LD_ADDR_OWVAR 2
33112: PUSH
33113: LD_INT 0
33115: ST_TO_ADDR
33116: GO 33132
// your_side := your_side + 1 ;
33118: LD_ADDR_OWVAR 2
33122: PUSH
33123: LD_OWVAR 2
33127: PUSH
33128: LD_INT 1
33130: PLUS
33131: ST_TO_ADDR
// end ;
33132: LD_VAR 0 1
33136: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33137: LD_INT 0
33139: PPUSH
33140: PPUSH
33141: PPUSH
// for i in all_units do
33142: LD_ADDR_VAR 0 2
33146: PUSH
33147: LD_OWVAR 3
33151: PUSH
33152: FOR_IN
33153: IFFALSE 33231
// if IsSelected ( i ) then
33155: LD_VAR 0 2
33159: PPUSH
33160: CALL_OW 306
33164: IFFALSE 33229
// begin j := GetSide ( i ) ;
33166: LD_ADDR_VAR 0 3
33170: PUSH
33171: LD_VAR 0 2
33175: PPUSH
33176: CALL_OW 255
33180: ST_TO_ADDR
// if j = 8 then
33181: LD_VAR 0 3
33185: PUSH
33186: LD_INT 8
33188: EQUAL
33189: IFFALSE 33201
// j := 0 else
33191: LD_ADDR_VAR 0 3
33195: PUSH
33196: LD_INT 0
33198: ST_TO_ADDR
33199: GO 33215
// j := j + 1 ;
33201: LD_ADDR_VAR 0 3
33205: PUSH
33206: LD_VAR 0 3
33210: PUSH
33211: LD_INT 1
33213: PLUS
33214: ST_TO_ADDR
// SetSide ( i , j ) ;
33215: LD_VAR 0 2
33219: PPUSH
33220: LD_VAR 0 3
33224: PPUSH
33225: CALL_OW 235
// end ;
33229: GO 33152
33231: POP
33232: POP
// end ;
33233: LD_VAR 0 1
33237: RET
// export function hHackFog ; begin
33238: LD_INT 0
33240: PPUSH
// FogOff ( true ) ;
33241: LD_INT 1
33243: PPUSH
33244: CALL_OW 344
// end ;
33248: LD_VAR 0 1
33252: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33253: LD_INT 0
33255: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33256: LD_VAR 0 1
33260: PPUSH
33261: LD_VAR 0 2
33265: PPUSH
33266: LD_VAR 0 3
33270: PPUSH
33271: LD_INT 1
33273: PPUSH
33274: LD_INT 1
33276: PPUSH
33277: CALL_OW 483
// CenterOnXY ( x , y ) ;
33281: LD_VAR 0 2
33285: PPUSH
33286: LD_VAR 0 3
33290: PPUSH
33291: CALL_OW 84
// end ;
33295: LD_VAR 0 4
33299: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33300: LD_INT 0
33302: PPUSH
33303: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33304: LD_VAR 0 1
33308: NOT
33309: PUSH
33310: LD_VAR 0 2
33314: PPUSH
33315: LD_VAR 0 3
33319: PPUSH
33320: CALL_OW 488
33324: NOT
33325: OR
33326: PUSH
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 266
33336: PUSH
33337: LD_INT 3
33339: NONEQUAL
33340: PUSH
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 247
33350: PUSH
33351: LD_INT 1
33353: EQUAL
33354: NOT
33355: AND
33356: OR
33357: IFFALSE 33361
// exit ;
33359: GO 33510
// if GetType ( factory ) = unit_human then
33361: LD_VAR 0 1
33365: PPUSH
33366: CALL_OW 247
33370: PUSH
33371: LD_INT 1
33373: EQUAL
33374: IFFALSE 33391
// factory := IsInUnit ( factory ) ;
33376: LD_ADDR_VAR 0 1
33380: PUSH
33381: LD_VAR 0 1
33385: PPUSH
33386: CALL_OW 310
33390: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33391: LD_VAR 0 1
33395: PPUSH
33396: CALL_OW 266
33400: PUSH
33401: LD_INT 3
33403: NONEQUAL
33404: IFFALSE 33408
// exit ;
33406: GO 33510
// if HexInfo ( x , y ) = factory then
33408: LD_VAR 0 2
33412: PPUSH
33413: LD_VAR 0 3
33417: PPUSH
33418: CALL_OW 428
33422: PUSH
33423: LD_VAR 0 1
33427: EQUAL
33428: IFFALSE 33455
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33430: LD_ADDR_EXP 112
33434: PUSH
33435: LD_EXP 112
33439: PPUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: LD_INT 0
33447: PPUSH
33448: CALL_OW 1
33452: ST_TO_ADDR
33453: GO 33506
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33455: LD_ADDR_EXP 112
33459: PUSH
33460: LD_EXP 112
33464: PPUSH
33465: LD_VAR 0 1
33469: PPUSH
33470: LD_VAR 0 1
33474: PPUSH
33475: CALL_OW 255
33479: PUSH
33480: LD_VAR 0 1
33484: PUSH
33485: LD_VAR 0 2
33489: PUSH
33490: LD_VAR 0 3
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: PPUSH
33501: CALL_OW 1
33505: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33506: CALL 33515 0 0
// end ;
33510: LD_VAR 0 4
33514: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33515: LD_INT 0
33517: PPUSH
33518: PPUSH
33519: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33520: LD_STRING resetFactoryWaypoint();
33522: PPUSH
33523: CALL_OW 559
// if factoryWaypoints then
33527: LD_EXP 112
33531: IFFALSE 33657
// begin list := PrepareArray ( factoryWaypoints ) ;
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_EXP 112
33542: PPUSH
33543: CALL 75809 0 1
33547: ST_TO_ADDR
// for i := 1 to list do
33548: LD_ADDR_VAR 0 2
33552: PUSH
33553: DOUBLE
33554: LD_INT 1
33556: DEC
33557: ST_TO_ADDR
33558: LD_VAR 0 3
33562: PUSH
33563: FOR_TO
33564: IFFALSE 33655
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33566: LD_STRING setFactoryWaypointXY(
33568: PUSH
33569: LD_VAR 0 3
33573: PUSH
33574: LD_VAR 0 2
33578: ARRAY
33579: PUSH
33580: LD_INT 1
33582: ARRAY
33583: STR
33584: PUSH
33585: LD_STRING ,
33587: STR
33588: PUSH
33589: LD_VAR 0 3
33593: PUSH
33594: LD_VAR 0 2
33598: ARRAY
33599: PUSH
33600: LD_INT 2
33602: ARRAY
33603: STR
33604: PUSH
33605: LD_STRING ,
33607: STR
33608: PUSH
33609: LD_VAR 0 3
33613: PUSH
33614: LD_VAR 0 2
33618: ARRAY
33619: PUSH
33620: LD_INT 3
33622: ARRAY
33623: STR
33624: PUSH
33625: LD_STRING ,
33627: STR
33628: PUSH
33629: LD_VAR 0 3
33633: PUSH
33634: LD_VAR 0 2
33638: ARRAY
33639: PUSH
33640: LD_INT 4
33642: ARRAY
33643: STR
33644: PUSH
33645: LD_STRING )
33647: STR
33648: PPUSH
33649: CALL_OW 559
33653: GO 33563
33655: POP
33656: POP
// end ; end ;
33657: LD_VAR 0 1
33661: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33662: LD_INT 0
33664: PPUSH
// if HexInfo ( x , y ) = warehouse then
33665: LD_VAR 0 2
33669: PPUSH
33670: LD_VAR 0 3
33674: PPUSH
33675: CALL_OW 428
33679: PUSH
33680: LD_VAR 0 1
33684: EQUAL
33685: IFFALSE 33712
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33687: LD_ADDR_EXP 113
33691: PUSH
33692: LD_EXP 113
33696: PPUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: LD_INT 0
33704: PPUSH
33705: CALL_OW 1
33709: ST_TO_ADDR
33710: GO 33763
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33712: LD_ADDR_EXP 113
33716: PUSH
33717: LD_EXP 113
33721: PPUSH
33722: LD_VAR 0 1
33726: PPUSH
33727: LD_VAR 0 1
33731: PPUSH
33732: CALL_OW 255
33736: PUSH
33737: LD_VAR 0 1
33741: PUSH
33742: LD_VAR 0 2
33746: PUSH
33747: LD_VAR 0 3
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: PPUSH
33758: CALL_OW 1
33762: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33763: CALL 33772 0 0
// end ;
33767: LD_VAR 0 4
33771: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33772: LD_INT 0
33774: PPUSH
33775: PPUSH
33776: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33777: LD_STRING resetWarehouseGatheringPoints();
33779: PPUSH
33780: CALL_OW 559
// if warehouseGatheringPoints then
33784: LD_EXP 113
33788: IFFALSE 33914
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33790: LD_ADDR_VAR 0 3
33794: PUSH
33795: LD_EXP 113
33799: PPUSH
33800: CALL 75809 0 1
33804: ST_TO_ADDR
// for i := 1 to list do
33805: LD_ADDR_VAR 0 2
33809: PUSH
33810: DOUBLE
33811: LD_INT 1
33813: DEC
33814: ST_TO_ADDR
33815: LD_VAR 0 3
33819: PUSH
33820: FOR_TO
33821: IFFALSE 33912
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33823: LD_STRING setWarehouseGatheringPointXY(
33825: PUSH
33826: LD_VAR 0 3
33830: PUSH
33831: LD_VAR 0 2
33835: ARRAY
33836: PUSH
33837: LD_INT 1
33839: ARRAY
33840: STR
33841: PUSH
33842: LD_STRING ,
33844: STR
33845: PUSH
33846: LD_VAR 0 3
33850: PUSH
33851: LD_VAR 0 2
33855: ARRAY
33856: PUSH
33857: LD_INT 2
33859: ARRAY
33860: STR
33861: PUSH
33862: LD_STRING ,
33864: STR
33865: PUSH
33866: LD_VAR 0 3
33870: PUSH
33871: LD_VAR 0 2
33875: ARRAY
33876: PUSH
33877: LD_INT 3
33879: ARRAY
33880: STR
33881: PUSH
33882: LD_STRING ,
33884: STR
33885: PUSH
33886: LD_VAR 0 3
33890: PUSH
33891: LD_VAR 0 2
33895: ARRAY
33896: PUSH
33897: LD_INT 4
33899: ARRAY
33900: STR
33901: PUSH
33902: LD_STRING )
33904: STR
33905: PPUSH
33906: CALL_OW 559
33910: GO 33820
33912: POP
33913: POP
// end ; end ;
33914: LD_VAR 0 1
33918: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33919: LD_EXP 113
33923: IFFALSE 34608
33925: GO 33927
33927: DISABLE
33928: LD_INT 0
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
33935: PPUSH
33936: PPUSH
33937: PPUSH
33938: PPUSH
// begin enable ;
33939: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_EXP 113
33949: PPUSH
33950: CALL 75809 0 1
33954: ST_TO_ADDR
// if not list then
33955: LD_VAR 0 3
33959: NOT
33960: IFFALSE 33964
// exit ;
33962: GO 34608
// for i := 1 to list do
33964: LD_ADDR_VAR 0 1
33968: PUSH
33969: DOUBLE
33970: LD_INT 1
33972: DEC
33973: ST_TO_ADDR
33974: LD_VAR 0 3
33978: PUSH
33979: FOR_TO
33980: IFFALSE 34606
// begin depot := list [ i ] [ 2 ] ;
33982: LD_ADDR_VAR 0 8
33986: PUSH
33987: LD_VAR 0 3
33991: PUSH
33992: LD_VAR 0 1
33996: ARRAY
33997: PUSH
33998: LD_INT 2
34000: ARRAY
34001: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34002: LD_ADDR_VAR 0 5
34006: PUSH
34007: LD_VAR 0 3
34011: PUSH
34012: LD_VAR 0 1
34016: ARRAY
34017: PUSH
34018: LD_INT 1
34020: ARRAY
34021: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34022: LD_VAR 0 8
34026: PPUSH
34027: CALL_OW 301
34031: PUSH
34032: LD_VAR 0 5
34036: PUSH
34037: LD_VAR 0 8
34041: PPUSH
34042: CALL_OW 255
34046: NONEQUAL
34047: OR
34048: IFFALSE 34077
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34050: LD_ADDR_EXP 113
34054: PUSH
34055: LD_EXP 113
34059: PPUSH
34060: LD_VAR 0 8
34064: PPUSH
34065: LD_INT 0
34067: PPUSH
34068: CALL_OW 1
34072: ST_TO_ADDR
// exit ;
34073: POP
34074: POP
34075: GO 34608
// end ; x := list [ i ] [ 3 ] ;
34077: LD_ADDR_VAR 0 6
34081: PUSH
34082: LD_VAR 0 3
34086: PUSH
34087: LD_VAR 0 1
34091: ARRAY
34092: PUSH
34093: LD_INT 3
34095: ARRAY
34096: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34097: LD_ADDR_VAR 0 7
34101: PUSH
34102: LD_VAR 0 3
34106: PUSH
34107: LD_VAR 0 1
34111: ARRAY
34112: PUSH
34113: LD_INT 4
34115: ARRAY
34116: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34117: LD_ADDR_VAR 0 9
34121: PUSH
34122: LD_VAR 0 6
34126: PPUSH
34127: LD_VAR 0 7
34131: PPUSH
34132: LD_INT 16
34134: PPUSH
34135: CALL 74397 0 3
34139: ST_TO_ADDR
// if not cratesNearbyPoint then
34140: LD_VAR 0 9
34144: NOT
34145: IFFALSE 34151
// exit ;
34147: POP
34148: POP
34149: GO 34608
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34151: LD_ADDR_VAR 0 4
34155: PUSH
34156: LD_INT 22
34158: PUSH
34159: LD_VAR 0 5
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 60
34173: PUSH
34174: EMPTY
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 91
34183: PUSH
34184: LD_VAR 0 8
34188: PUSH
34189: LD_INT 6
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: LD_INT 25
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 25
34212: PUSH
34213: LD_INT 16
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: PPUSH
34231: CALL_OW 69
34235: PUSH
34236: LD_VAR 0 8
34240: PPUSH
34241: CALL_OW 313
34245: PPUSH
34246: LD_INT 3
34248: PUSH
34249: LD_INT 60
34251: PUSH
34252: EMPTY
34253: LIST
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 25
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 25
34274: PUSH
34275: LD_INT 16
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PPUSH
34291: CALL_OW 72
34295: UNION
34296: ST_TO_ADDR
// if tmp then
34297: LD_VAR 0 4
34301: IFFALSE 34381
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34303: LD_ADDR_VAR 0 4
34307: PUSH
34308: LD_VAR 0 4
34312: PPUSH
34313: LD_INT 3
34315: PPUSH
34316: CALL 72366 0 2
34320: ST_TO_ADDR
// for j in tmp do
34321: LD_ADDR_VAR 0 2
34325: PUSH
34326: LD_VAR 0 4
34330: PUSH
34331: FOR_IN
34332: IFFALSE 34375
// begin if IsInUnit ( j ) then
34334: LD_VAR 0 2
34338: PPUSH
34339: CALL_OW 310
34343: IFFALSE 34354
// ComExit ( j ) ;
34345: LD_VAR 0 2
34349: PPUSH
34350: CALL 72449 0 1
// AddComCollect ( j , x , y ) ;
34354: LD_VAR 0 2
34358: PPUSH
34359: LD_VAR 0 6
34363: PPUSH
34364: LD_VAR 0 7
34368: PPUSH
34369: CALL_OW 177
// end ;
34373: GO 34331
34375: POP
34376: POP
// exit ;
34377: POP
34378: POP
34379: GO 34608
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34381: LD_ADDR_VAR 0 4
34385: PUSH
34386: LD_INT 22
34388: PUSH
34389: LD_VAR 0 5
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 91
34400: PUSH
34401: LD_VAR 0 8
34405: PUSH
34406: LD_INT 8
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: LD_INT 34
34419: PUSH
34420: LD_INT 12
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 34
34429: PUSH
34430: LD_INT 51
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 34
34439: PUSH
34440: LD_INT 32
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 34
34449: PUSH
34450: LD_INT 89
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: PPUSH
34469: CALL_OW 69
34473: ST_TO_ADDR
// if tmp then
34474: LD_VAR 0 4
34478: IFFALSE 34604
// begin for j in tmp do
34480: LD_ADDR_VAR 0 2
34484: PUSH
34485: LD_VAR 0 4
34489: PUSH
34490: FOR_IN
34491: IFFALSE 34602
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34493: LD_VAR 0 2
34497: PPUSH
34498: CALL_OW 262
34502: PUSH
34503: LD_INT 3
34505: EQUAL
34506: PUSH
34507: LD_VAR 0 2
34511: PPUSH
34512: CALL_OW 261
34516: PUSH
34517: LD_INT 20
34519: GREATER
34520: OR
34521: PUSH
34522: LD_VAR 0 2
34526: PPUSH
34527: CALL_OW 314
34531: NOT
34532: AND
34533: PUSH
34534: LD_VAR 0 2
34538: PPUSH
34539: CALL_OW 263
34543: PUSH
34544: LD_INT 1
34546: NONEQUAL
34547: PUSH
34548: LD_VAR 0 2
34552: PPUSH
34553: CALL_OW 311
34557: OR
34558: AND
34559: IFFALSE 34600
// begin ComCollect ( j , x , y ) ;
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_VAR 0 6
34570: PPUSH
34571: LD_VAR 0 7
34575: PPUSH
34576: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34580: LD_VAR 0 2
34584: PPUSH
34585: LD_VAR 0 8
34589: PPUSH
34590: CALL_OW 172
// exit ;
34594: POP
34595: POP
34596: POP
34597: POP
34598: GO 34608
// end ;
34600: GO 34490
34602: POP
34603: POP
// end ; end ;
34604: GO 33979
34606: POP
34607: POP
// end ; end_of_file end_of_file
34608: PPOPN 9
34610: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34611: LD_INT 0
34613: PPUSH
34614: PPUSH
// if exist_mode then
34615: LD_VAR 0 2
34619: IFFALSE 34644
// unit := CreateCharacter ( prefix & ident ) else
34621: LD_ADDR_VAR 0 5
34625: PUSH
34626: LD_VAR 0 3
34630: PUSH
34631: LD_VAR 0 1
34635: STR
34636: PPUSH
34637: CALL_OW 34
34641: ST_TO_ADDR
34642: GO 34659
// unit := NewCharacter ( ident ) ;
34644: LD_ADDR_VAR 0 5
34648: PUSH
34649: LD_VAR 0 1
34653: PPUSH
34654: CALL_OW 25
34658: ST_TO_ADDR
// result := unit ;
34659: LD_ADDR_VAR 0 4
34663: PUSH
34664: LD_VAR 0 5
34668: ST_TO_ADDR
// end ;
34669: LD_VAR 0 4
34673: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34674: LD_INT 0
34676: PPUSH
34677: PPUSH
// if not side or not nation then
34678: LD_VAR 0 1
34682: NOT
34683: PUSH
34684: LD_VAR 0 2
34688: NOT
34689: OR
34690: IFFALSE 34694
// exit ;
34692: GO 35462
// case nation of nation_american :
34694: LD_VAR 0 2
34698: PUSH
34699: LD_INT 1
34701: DOUBLE
34702: EQUAL
34703: IFTRUE 34707
34705: GO 34921
34707: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34708: LD_ADDR_VAR 0 4
34712: PUSH
34713: LD_INT 35
34715: PUSH
34716: LD_INT 45
34718: PUSH
34719: LD_INT 46
34721: PUSH
34722: LD_INT 47
34724: PUSH
34725: LD_INT 82
34727: PUSH
34728: LD_INT 83
34730: PUSH
34731: LD_INT 84
34733: PUSH
34734: LD_INT 85
34736: PUSH
34737: LD_INT 86
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 6
34748: PUSH
34749: LD_INT 15
34751: PUSH
34752: LD_INT 16
34754: PUSH
34755: LD_INT 7
34757: PUSH
34758: LD_INT 12
34760: PUSH
34761: LD_INT 13
34763: PUSH
34764: LD_INT 10
34766: PUSH
34767: LD_INT 14
34769: PUSH
34770: LD_INT 20
34772: PUSH
34773: LD_INT 21
34775: PUSH
34776: LD_INT 22
34778: PUSH
34779: LD_INT 25
34781: PUSH
34782: LD_INT 32
34784: PUSH
34785: LD_INT 27
34787: PUSH
34788: LD_INT 36
34790: PUSH
34791: LD_INT 69
34793: PUSH
34794: LD_INT 39
34796: PUSH
34797: LD_INT 34
34799: PUSH
34800: LD_INT 40
34802: PUSH
34803: LD_INT 48
34805: PUSH
34806: LD_INT 49
34808: PUSH
34809: LD_INT 50
34811: PUSH
34812: LD_INT 51
34814: PUSH
34815: LD_INT 52
34817: PUSH
34818: LD_INT 53
34820: PUSH
34821: LD_INT 54
34823: PUSH
34824: LD_INT 55
34826: PUSH
34827: LD_INT 56
34829: PUSH
34830: LD_INT 57
34832: PUSH
34833: LD_INT 58
34835: PUSH
34836: LD_INT 59
34838: PUSH
34839: LD_INT 60
34841: PUSH
34842: LD_INT 61
34844: PUSH
34845: LD_INT 62
34847: PUSH
34848: LD_INT 80
34850: PUSH
34851: LD_INT 82
34853: PUSH
34854: LD_INT 83
34856: PUSH
34857: LD_INT 84
34859: PUSH
34860: LD_INT 85
34862: PUSH
34863: LD_INT 86
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: ST_TO_ADDR
34919: GO 35386
34921: LD_INT 2
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34929
34927: GO 35155
34929: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34930: LD_ADDR_VAR 0 4
34934: PUSH
34935: LD_INT 35
34937: PUSH
34938: LD_INT 45
34940: PUSH
34941: LD_INT 46
34943: PUSH
34944: LD_INT 47
34946: PUSH
34947: LD_INT 82
34949: PUSH
34950: LD_INT 83
34952: PUSH
34953: LD_INT 84
34955: PUSH
34956: LD_INT 85
34958: PUSH
34959: LD_INT 87
34961: PUSH
34962: LD_INT 70
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: LD_INT 11
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: LD_INT 4
34976: PUSH
34977: LD_INT 5
34979: PUSH
34980: LD_INT 6
34982: PUSH
34983: LD_INT 15
34985: PUSH
34986: LD_INT 18
34988: PUSH
34989: LD_INT 7
34991: PUSH
34992: LD_INT 17
34994: PUSH
34995: LD_INT 8
34997: PUSH
34998: LD_INT 20
35000: PUSH
35001: LD_INT 21
35003: PUSH
35004: LD_INT 22
35006: PUSH
35007: LD_INT 72
35009: PUSH
35010: LD_INT 26
35012: PUSH
35013: LD_INT 69
35015: PUSH
35016: LD_INT 39
35018: PUSH
35019: LD_INT 40
35021: PUSH
35022: LD_INT 41
35024: PUSH
35025: LD_INT 42
35027: PUSH
35028: LD_INT 43
35030: PUSH
35031: LD_INT 48
35033: PUSH
35034: LD_INT 49
35036: PUSH
35037: LD_INT 50
35039: PUSH
35040: LD_INT 51
35042: PUSH
35043: LD_INT 52
35045: PUSH
35046: LD_INT 53
35048: PUSH
35049: LD_INT 54
35051: PUSH
35052: LD_INT 55
35054: PUSH
35055: LD_INT 56
35057: PUSH
35058: LD_INT 60
35060: PUSH
35061: LD_INT 61
35063: PUSH
35064: LD_INT 62
35066: PUSH
35067: LD_INT 66
35069: PUSH
35070: LD_INT 67
35072: PUSH
35073: LD_INT 68
35075: PUSH
35076: LD_INT 81
35078: PUSH
35079: LD_INT 82
35081: PUSH
35082: LD_INT 83
35084: PUSH
35085: LD_INT 84
35087: PUSH
35088: LD_INT 85
35090: PUSH
35091: LD_INT 87
35093: PUSH
35094: LD_INT 88
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: ST_TO_ADDR
35153: GO 35386
35155: LD_INT 3
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35163
35161: GO 35385
35163: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35164: LD_ADDR_VAR 0 4
35168: PUSH
35169: LD_INT 46
35171: PUSH
35172: LD_INT 47
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: LD_INT 82
35183: PUSH
35184: LD_INT 83
35186: PUSH
35187: LD_INT 84
35189: PUSH
35190: LD_INT 85
35192: PUSH
35193: LD_INT 86
35195: PUSH
35196: LD_INT 11
35198: PUSH
35199: LD_INT 9
35201: PUSH
35202: LD_INT 20
35204: PUSH
35205: LD_INT 19
35207: PUSH
35208: LD_INT 21
35210: PUSH
35211: LD_INT 24
35213: PUSH
35214: LD_INT 22
35216: PUSH
35217: LD_INT 25
35219: PUSH
35220: LD_INT 28
35222: PUSH
35223: LD_INT 29
35225: PUSH
35226: LD_INT 30
35228: PUSH
35229: LD_INT 31
35231: PUSH
35232: LD_INT 37
35234: PUSH
35235: LD_INT 38
35237: PUSH
35238: LD_INT 32
35240: PUSH
35241: LD_INT 27
35243: PUSH
35244: LD_INT 33
35246: PUSH
35247: LD_INT 69
35249: PUSH
35250: LD_INT 39
35252: PUSH
35253: LD_INT 34
35255: PUSH
35256: LD_INT 40
35258: PUSH
35259: LD_INT 71
35261: PUSH
35262: LD_INT 23
35264: PUSH
35265: LD_INT 44
35267: PUSH
35268: LD_INT 48
35270: PUSH
35271: LD_INT 49
35273: PUSH
35274: LD_INT 50
35276: PUSH
35277: LD_INT 51
35279: PUSH
35280: LD_INT 52
35282: PUSH
35283: LD_INT 53
35285: PUSH
35286: LD_INT 54
35288: PUSH
35289: LD_INT 55
35291: PUSH
35292: LD_INT 56
35294: PUSH
35295: LD_INT 57
35297: PUSH
35298: LD_INT 58
35300: PUSH
35301: LD_INT 59
35303: PUSH
35304: LD_INT 63
35306: PUSH
35307: LD_INT 64
35309: PUSH
35310: LD_INT 65
35312: PUSH
35313: LD_INT 82
35315: PUSH
35316: LD_INT 83
35318: PUSH
35319: LD_INT 84
35321: PUSH
35322: LD_INT 85
35324: PUSH
35325: LD_INT 86
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
35383: GO 35386
35385: POP
// if state > - 1 and state < 3 then
35386: LD_VAR 0 3
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: GREATER
35395: PUSH
35396: LD_VAR 0 3
35400: PUSH
35401: LD_INT 3
35403: LESS
35404: AND
35405: IFFALSE 35462
// for i in result do
35407: LD_ADDR_VAR 0 5
35411: PUSH
35412: LD_VAR 0 4
35416: PUSH
35417: FOR_IN
35418: IFFALSE 35460
// if GetTech ( i , side ) <> state then
35420: LD_VAR 0 5
35424: PPUSH
35425: LD_VAR 0 1
35429: PPUSH
35430: CALL_OW 321
35434: PUSH
35435: LD_VAR 0 3
35439: NONEQUAL
35440: IFFALSE 35458
// result := result diff i ;
35442: LD_ADDR_VAR 0 4
35446: PUSH
35447: LD_VAR 0 4
35451: PUSH
35452: LD_VAR 0 5
35456: DIFF
35457: ST_TO_ADDR
35458: GO 35417
35460: POP
35461: POP
// end ;
35462: LD_VAR 0 4
35466: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
35471: PPUSH
// result := true ;
35472: LD_ADDR_VAR 0 3
35476: PUSH
35477: LD_INT 1
35479: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35480: LD_ADDR_VAR 0 5
35484: PUSH
35485: LD_VAR 0 2
35489: PPUSH
35490: CALL_OW 480
35494: ST_TO_ADDR
// if not tmp then
35495: LD_VAR 0 5
35499: NOT
35500: IFFALSE 35504
// exit ;
35502: GO 35553
// for i in tmp do
35504: LD_ADDR_VAR 0 4
35508: PUSH
35509: LD_VAR 0 5
35513: PUSH
35514: FOR_IN
35515: IFFALSE 35551
// if GetTech ( i , side ) <> state_researched then
35517: LD_VAR 0 4
35521: PPUSH
35522: LD_VAR 0 1
35526: PPUSH
35527: CALL_OW 321
35531: PUSH
35532: LD_INT 2
35534: NONEQUAL
35535: IFFALSE 35549
// begin result := false ;
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 0
35544: ST_TO_ADDR
// exit ;
35545: POP
35546: POP
35547: GO 35553
// end ;
35549: GO 35514
35551: POP
35552: POP
// end ;
35553: LD_VAR 0 3
35557: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35558: LD_INT 0
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
35567: PPUSH
35568: PPUSH
35569: PPUSH
35570: PPUSH
35571: PPUSH
35572: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35573: LD_VAR 0 1
35577: NOT
35578: PUSH
35579: LD_VAR 0 1
35583: PPUSH
35584: CALL_OW 257
35588: PUSH
35589: LD_INT 9
35591: NONEQUAL
35592: OR
35593: IFFALSE 35597
// exit ;
35595: GO 36170
// side := GetSide ( unit ) ;
35597: LD_ADDR_VAR 0 9
35601: PUSH
35602: LD_VAR 0 1
35606: PPUSH
35607: CALL_OW 255
35611: ST_TO_ADDR
// tech_space := tech_spacanom ;
35612: LD_ADDR_VAR 0 12
35616: PUSH
35617: LD_INT 29
35619: ST_TO_ADDR
// tech_time := tech_taurad ;
35620: LD_ADDR_VAR 0 13
35624: PUSH
35625: LD_INT 28
35627: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35628: LD_ADDR_VAR 0 11
35632: PUSH
35633: LD_VAR 0 1
35637: PPUSH
35638: CALL_OW 310
35642: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35643: LD_VAR 0 11
35647: PPUSH
35648: CALL_OW 247
35652: PUSH
35653: LD_INT 2
35655: EQUAL
35656: IFFALSE 35660
// exit ;
35658: GO 36170
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35660: LD_ADDR_VAR 0 8
35664: PUSH
35665: LD_INT 81
35667: PUSH
35668: LD_VAR 0 9
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: LD_INT 21
35682: PUSH
35683: LD_INT 3
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PPUSH
35698: CALL_OW 69
35702: ST_TO_ADDR
// if not tmp then
35703: LD_VAR 0 8
35707: NOT
35708: IFFALSE 35712
// exit ;
35710: GO 36170
// if in_unit then
35712: LD_VAR 0 11
35716: IFFALSE 35740
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35718: LD_ADDR_VAR 0 10
35722: PUSH
35723: LD_VAR 0 8
35727: PPUSH
35728: LD_VAR 0 11
35732: PPUSH
35733: CALL_OW 74
35737: ST_TO_ADDR
35738: GO 35760
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35740: LD_ADDR_VAR 0 10
35744: PUSH
35745: LD_VAR 0 8
35749: PPUSH
35750: LD_VAR 0 1
35754: PPUSH
35755: CALL_OW 74
35759: ST_TO_ADDR
// if not enemy then
35760: LD_VAR 0 10
35764: NOT
35765: IFFALSE 35769
// exit ;
35767: GO 36170
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35769: LD_VAR 0 11
35773: PUSH
35774: LD_VAR 0 11
35778: PPUSH
35779: LD_VAR 0 10
35783: PPUSH
35784: CALL_OW 296
35788: PUSH
35789: LD_INT 13
35791: GREATER
35792: AND
35793: PUSH
35794: LD_VAR 0 1
35798: PPUSH
35799: LD_VAR 0 10
35803: PPUSH
35804: CALL_OW 296
35808: PUSH
35809: LD_INT 12
35811: GREATER
35812: OR
35813: IFFALSE 35817
// exit ;
35815: GO 36170
// missile := [ 1 ] ;
35817: LD_ADDR_VAR 0 14
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35828: LD_VAR 0 9
35832: PPUSH
35833: LD_VAR 0 12
35837: PPUSH
35838: CALL_OW 325
35842: IFFALSE 35871
// missile := Replace ( missile , missile + 1 , 2 ) ;
35844: LD_ADDR_VAR 0 14
35848: PUSH
35849: LD_VAR 0 14
35853: PPUSH
35854: LD_VAR 0 14
35858: PUSH
35859: LD_INT 1
35861: PLUS
35862: PPUSH
35863: LD_INT 2
35865: PPUSH
35866: CALL_OW 1
35870: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35871: LD_VAR 0 9
35875: PPUSH
35876: LD_VAR 0 13
35880: PPUSH
35881: CALL_OW 325
35885: PUSH
35886: LD_VAR 0 10
35890: PPUSH
35891: CALL_OW 255
35895: PPUSH
35896: LD_VAR 0 13
35900: PPUSH
35901: CALL_OW 325
35905: NOT
35906: AND
35907: IFFALSE 35936
// missile := Replace ( missile , missile + 1 , 3 ) ;
35909: LD_ADDR_VAR 0 14
35913: PUSH
35914: LD_VAR 0 14
35918: PPUSH
35919: LD_VAR 0 14
35923: PUSH
35924: LD_INT 1
35926: PLUS
35927: PPUSH
35928: LD_INT 3
35930: PPUSH
35931: CALL_OW 1
35935: ST_TO_ADDR
// if missile < 2 then
35936: LD_VAR 0 14
35940: PUSH
35941: LD_INT 2
35943: LESS
35944: IFFALSE 35948
// exit ;
35946: GO 36170
// x := GetX ( enemy ) ;
35948: LD_ADDR_VAR 0 4
35952: PUSH
35953: LD_VAR 0 10
35957: PPUSH
35958: CALL_OW 250
35962: ST_TO_ADDR
// y := GetY ( enemy ) ;
35963: LD_ADDR_VAR 0 5
35967: PUSH
35968: LD_VAR 0 10
35972: PPUSH
35973: CALL_OW 251
35977: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35978: LD_ADDR_VAR 0 6
35982: PUSH
35983: LD_VAR 0 4
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PPUSH
35992: LD_INT 1
35994: PPUSH
35995: CALL_OW 12
35999: PLUS
36000: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36001: LD_ADDR_VAR 0 7
36005: PUSH
36006: LD_VAR 0 5
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PPUSH
36015: LD_INT 1
36017: PPUSH
36018: CALL_OW 12
36022: PLUS
36023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36024: LD_VAR 0 6
36028: PPUSH
36029: LD_VAR 0 7
36033: PPUSH
36034: CALL_OW 488
36038: NOT
36039: IFFALSE 36061
// begin _x := x ;
36041: LD_ADDR_VAR 0 6
36045: PUSH
36046: LD_VAR 0 4
36050: ST_TO_ADDR
// _y := y ;
36051: LD_ADDR_VAR 0 7
36055: PUSH
36056: LD_VAR 0 5
36060: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36061: LD_ADDR_VAR 0 3
36065: PUSH
36066: LD_INT 1
36068: PPUSH
36069: LD_VAR 0 14
36073: PPUSH
36074: CALL_OW 12
36078: ST_TO_ADDR
// case i of 1 :
36079: LD_VAR 0 3
36083: PUSH
36084: LD_INT 1
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36109
36092: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36093: LD_VAR 0 1
36097: PPUSH
36098: LD_VAR 0 10
36102: PPUSH
36103: CALL_OW 115
36107: GO 36170
36109: LD_INT 2
36111: DOUBLE
36112: EQUAL
36113: IFTRUE 36117
36115: GO 36139
36117: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36118: LD_VAR 0 1
36122: PPUSH
36123: LD_VAR 0 6
36127: PPUSH
36128: LD_VAR 0 7
36132: PPUSH
36133: CALL_OW 153
36137: GO 36170
36139: LD_INT 3
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36169
36147: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36148: LD_VAR 0 1
36152: PPUSH
36153: LD_VAR 0 6
36157: PPUSH
36158: LD_VAR 0 7
36162: PPUSH
36163: CALL_OW 154
36167: GO 36170
36169: POP
// end ;
36170: LD_VAR 0 2
36174: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36175: LD_INT 0
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
// if not unit or not building then
36183: LD_VAR 0 1
36187: NOT
36188: PUSH
36189: LD_VAR 0 2
36193: NOT
36194: OR
36195: IFFALSE 36199
// exit ;
36197: GO 36357
// x := GetX ( building ) ;
36199: LD_ADDR_VAR 0 5
36203: PUSH
36204: LD_VAR 0 2
36208: PPUSH
36209: CALL_OW 250
36213: ST_TO_ADDR
// y := GetY ( building ) ;
36214: LD_ADDR_VAR 0 6
36218: PUSH
36219: LD_VAR 0 2
36223: PPUSH
36224: CALL_OW 251
36228: ST_TO_ADDR
// for i = 0 to 5 do
36229: LD_ADDR_VAR 0 4
36233: PUSH
36234: DOUBLE
36235: LD_INT 0
36237: DEC
36238: ST_TO_ADDR
36239: LD_INT 5
36241: PUSH
36242: FOR_TO
36243: IFFALSE 36355
// begin _x := ShiftX ( x , i , 3 ) ;
36245: LD_ADDR_VAR 0 7
36249: PUSH
36250: LD_VAR 0 5
36254: PPUSH
36255: LD_VAR 0 4
36259: PPUSH
36260: LD_INT 3
36262: PPUSH
36263: CALL_OW 272
36267: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36268: LD_ADDR_VAR 0 8
36272: PUSH
36273: LD_VAR 0 6
36277: PPUSH
36278: LD_VAR 0 4
36282: PPUSH
36283: LD_INT 3
36285: PPUSH
36286: CALL_OW 273
36290: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36291: LD_VAR 0 7
36295: PPUSH
36296: LD_VAR 0 8
36300: PPUSH
36301: CALL_OW 488
36305: NOT
36306: IFFALSE 36310
// continue ;
36308: GO 36242
// if HexInfo ( _x , _y ) = 0 then
36310: LD_VAR 0 7
36314: PPUSH
36315: LD_VAR 0 8
36319: PPUSH
36320: CALL_OW 428
36324: PUSH
36325: LD_INT 0
36327: EQUAL
36328: IFFALSE 36353
// begin ComMoveXY ( unit , _x , _y ) ;
36330: LD_VAR 0 1
36334: PPUSH
36335: LD_VAR 0 7
36339: PPUSH
36340: LD_VAR 0 8
36344: PPUSH
36345: CALL_OW 111
// exit ;
36349: POP
36350: POP
36351: GO 36357
// end ; end ;
36353: GO 36242
36355: POP
36356: POP
// end ;
36357: LD_VAR 0 3
36361: RET
// export function ScanBase ( side , base_area ) ; begin
36362: LD_INT 0
36364: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36365: LD_ADDR_VAR 0 3
36369: PUSH
36370: LD_VAR 0 2
36374: PPUSH
36375: LD_INT 81
36377: PUSH
36378: LD_VAR 0 1
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PPUSH
36387: CALL_OW 70
36391: ST_TO_ADDR
// end ;
36392: LD_VAR 0 3
36396: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36397: LD_INT 0
36399: PPUSH
36400: PPUSH
36401: PPUSH
36402: PPUSH
// result := false ;
36403: LD_ADDR_VAR 0 2
36407: PUSH
36408: LD_INT 0
36410: ST_TO_ADDR
// side := GetSide ( unit ) ;
36411: LD_ADDR_VAR 0 3
36415: PUSH
36416: LD_VAR 0 1
36420: PPUSH
36421: CALL_OW 255
36425: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36426: LD_ADDR_VAR 0 4
36430: PUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 248
36440: ST_TO_ADDR
// case nat of 1 :
36441: LD_VAR 0 4
36445: PUSH
36446: LD_INT 1
36448: DOUBLE
36449: EQUAL
36450: IFTRUE 36454
36452: GO 36465
36454: POP
// tech := tech_lassight ; 2 :
36455: LD_ADDR_VAR 0 5
36459: PUSH
36460: LD_INT 12
36462: ST_TO_ADDR
36463: GO 36504
36465: LD_INT 2
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 36484
36473: POP
// tech := tech_mortar ; 3 :
36474: LD_ADDR_VAR 0 5
36478: PUSH
36479: LD_INT 41
36481: ST_TO_ADDR
36482: GO 36504
36484: LD_INT 3
36486: DOUBLE
36487: EQUAL
36488: IFTRUE 36492
36490: GO 36503
36492: POP
// tech := tech_bazooka ; end ;
36493: LD_ADDR_VAR 0 5
36497: PUSH
36498: LD_INT 44
36500: ST_TO_ADDR
36501: GO 36504
36503: POP
// if Researched ( side , tech ) then
36504: LD_VAR 0 3
36508: PPUSH
36509: LD_VAR 0 5
36513: PPUSH
36514: CALL_OW 325
36518: IFFALSE 36545
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36520: LD_ADDR_VAR 0 2
36524: PUSH
36525: LD_INT 5
36527: PUSH
36528: LD_INT 8
36530: PUSH
36531: LD_INT 9
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: PUSH
36539: LD_VAR 0 4
36543: ARRAY
36544: ST_TO_ADDR
// end ;
36545: LD_VAR 0 2
36549: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36550: LD_INT 0
36552: PPUSH
36553: PPUSH
36554: PPUSH
// if not mines then
36555: LD_VAR 0 2
36559: NOT
36560: IFFALSE 36564
// exit ;
36562: GO 36708
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36564: LD_ADDR_VAR 0 5
36568: PUSH
36569: LD_INT 81
36571: PUSH
36572: LD_VAR 0 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 3
36583: PUSH
36584: LD_INT 21
36586: PUSH
36587: LD_INT 3
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PPUSH
36602: CALL_OW 69
36606: ST_TO_ADDR
// for i in mines do
36607: LD_ADDR_VAR 0 4
36611: PUSH
36612: LD_VAR 0 2
36616: PUSH
36617: FOR_IN
36618: IFFALSE 36706
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36620: LD_VAR 0 4
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: PPUSH
36629: LD_VAR 0 4
36633: PUSH
36634: LD_INT 2
36636: ARRAY
36637: PPUSH
36638: CALL_OW 458
36642: NOT
36643: IFFALSE 36647
// continue ;
36645: GO 36617
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36647: LD_VAR 0 4
36651: PUSH
36652: LD_INT 1
36654: ARRAY
36655: PPUSH
36656: LD_VAR 0 4
36660: PUSH
36661: LD_INT 2
36663: ARRAY
36664: PPUSH
36665: CALL_OW 428
36669: PUSH
36670: LD_VAR 0 5
36674: IN
36675: IFFALSE 36704
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36677: LD_VAR 0 4
36681: PUSH
36682: LD_INT 1
36684: ARRAY
36685: PPUSH
36686: LD_VAR 0 4
36690: PUSH
36691: LD_INT 2
36693: ARRAY
36694: PPUSH
36695: LD_VAR 0 1
36699: PPUSH
36700: CALL_OW 456
// end ;
36704: GO 36617
36706: POP
36707: POP
// end ;
36708: LD_VAR 0 3
36712: RET
// export function Count ( array ) ; var i ; begin
36713: LD_INT 0
36715: PPUSH
36716: PPUSH
// result := 0 ;
36717: LD_ADDR_VAR 0 2
36721: PUSH
36722: LD_INT 0
36724: ST_TO_ADDR
// for i in array do
36725: LD_ADDR_VAR 0 3
36729: PUSH
36730: LD_VAR 0 1
36734: PUSH
36735: FOR_IN
36736: IFFALSE 36760
// if i then
36738: LD_VAR 0 3
36742: IFFALSE 36758
// result := result + 1 ;
36744: LD_ADDR_VAR 0 2
36748: PUSH
36749: LD_VAR 0 2
36753: PUSH
36754: LD_INT 1
36756: PLUS
36757: ST_TO_ADDR
36758: GO 36735
36760: POP
36761: POP
// end ;
36762: LD_VAR 0 2
36766: RET
// export function IsEmpty ( building ) ; begin
36767: LD_INT 0
36769: PPUSH
// if not building then
36770: LD_VAR 0 1
36774: NOT
36775: IFFALSE 36779
// exit ;
36777: GO 36822
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36779: LD_ADDR_VAR 0 2
36783: PUSH
36784: LD_VAR 0 1
36788: PUSH
36789: LD_INT 22
36791: PUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 255
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 58
36808: PUSH
36809: EMPTY
36810: LIST
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PPUSH
36816: CALL_OW 69
36820: IN
36821: ST_TO_ADDR
// end ;
36822: LD_VAR 0 2
36826: RET
// export function IsNotFull ( building ) ; var places ; begin
36827: LD_INT 0
36829: PPUSH
36830: PPUSH
// if not building then
36831: LD_VAR 0 1
36835: NOT
36836: IFFALSE 36840
// exit ;
36838: GO 37011
// result := false ;
36840: LD_ADDR_VAR 0 2
36844: PUSH
36845: LD_INT 0
36847: ST_TO_ADDR
// places := 0 ;
36848: LD_ADDR_VAR 0 3
36852: PUSH
36853: LD_INT 0
36855: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 266
36865: PUSH
36866: LD_INT 0
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36928
36872: LD_INT 1
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36928
36878: LD_INT 6
36880: DOUBLE
36881: EQUAL
36882: IFTRUE 36928
36884: LD_INT 7
36886: DOUBLE
36887: EQUAL
36888: IFTRUE 36928
36890: LD_INT 8
36892: DOUBLE
36893: EQUAL
36894: IFTRUE 36928
36896: LD_INT 4
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36928
36902: LD_INT 5
36904: DOUBLE
36905: EQUAL
36906: IFTRUE 36928
36908: LD_INT 2
36910: DOUBLE
36911: EQUAL
36912: IFTRUE 36928
36914: LD_INT 3
36916: DOUBLE
36917: EQUAL
36918: IFTRUE 36928
36920: LD_INT 35
36922: DOUBLE
36923: EQUAL
36924: IFTRUE 36928
36926: GO 36939
36928: POP
// places := 6 ; b_bunker , b_breastwork :
36929: LD_ADDR_VAR 0 3
36933: PUSH
36934: LD_INT 6
36936: ST_TO_ADDR
36937: GO 36984
36939: LD_INT 32
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36953
36945: LD_INT 31
36947: DOUBLE
36948: EQUAL
36949: IFTRUE 36953
36951: GO 36964
36953: POP
// places := 1 ; b_control_tower :
36954: LD_ADDR_VAR 0 3
36958: PUSH
36959: LD_INT 1
36961: ST_TO_ADDR
36962: GO 36984
36964: LD_INT 36
36966: DOUBLE
36967: EQUAL
36968: IFTRUE 36972
36970: GO 36983
36972: POP
// places := 3 ; end ;
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_INT 3
36980: ST_TO_ADDR
36981: GO 36984
36983: POP
// if places then
36984: LD_VAR 0 3
36988: IFFALSE 37011
// result := UnitsInside ( building ) < places ;
36990: LD_ADDR_VAR 0 2
36994: PUSH
36995: LD_VAR 0 1
36999: PPUSH
37000: CALL_OW 313
37004: PUSH
37005: LD_VAR 0 3
37009: LESS
37010: ST_TO_ADDR
// end ;
37011: LD_VAR 0 2
37015: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37016: LD_INT 0
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
// tmp := [ ] ;
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: EMPTY
37028: ST_TO_ADDR
// list := [ ] ;
37029: LD_ADDR_VAR 0 5
37033: PUSH
37034: EMPTY
37035: ST_TO_ADDR
// for i = 16 to 25 do
37036: LD_ADDR_VAR 0 4
37040: PUSH
37041: DOUBLE
37042: LD_INT 16
37044: DEC
37045: ST_TO_ADDR
37046: LD_INT 25
37048: PUSH
37049: FOR_TO
37050: IFFALSE 37123
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: LD_VAR 0 3
37061: PUSH
37062: LD_INT 22
37064: PUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL_OW 255
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 91
37081: PUSH
37082: LD_VAR 0 1
37086: PUSH
37087: LD_INT 6
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 30
37097: PUSH
37098: LD_VAR 0 4
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: PUSH
37112: EMPTY
37113: LIST
37114: PPUSH
37115: CALL_OW 69
37119: ADD
37120: ST_TO_ADDR
37121: GO 37049
37123: POP
37124: POP
// for i = 1 to tmp do
37125: LD_ADDR_VAR 0 4
37129: PUSH
37130: DOUBLE
37131: LD_INT 1
37133: DEC
37134: ST_TO_ADDR
37135: LD_VAR 0 3
37139: PUSH
37140: FOR_TO
37141: IFFALSE 37229
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37143: LD_ADDR_VAR 0 5
37147: PUSH
37148: LD_VAR 0 5
37152: PUSH
37153: LD_VAR 0 3
37157: PUSH
37158: LD_VAR 0 4
37162: ARRAY
37163: PPUSH
37164: CALL_OW 266
37168: PUSH
37169: LD_VAR 0 3
37173: PUSH
37174: LD_VAR 0 4
37178: ARRAY
37179: PPUSH
37180: CALL_OW 250
37184: PUSH
37185: LD_VAR 0 3
37189: PUSH
37190: LD_VAR 0 4
37194: ARRAY
37195: PPUSH
37196: CALL_OW 251
37200: PUSH
37201: LD_VAR 0 3
37205: PUSH
37206: LD_VAR 0 4
37210: ARRAY
37211: PPUSH
37212: CALL_OW 254
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: ADD
37226: ST_TO_ADDR
37227: GO 37140
37229: POP
37230: POP
// result := list ;
37231: LD_ADDR_VAR 0 2
37235: PUSH
37236: LD_VAR 0 5
37240: ST_TO_ADDR
// end ;
37241: LD_VAR 0 2
37245: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37246: LD_INT 0
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
// if not factory then
37255: LD_VAR 0 1
37259: NOT
37260: IFFALSE 37264
// exit ;
37262: GO 37857
// if control = control_apeman then
37264: LD_VAR 0 4
37268: PUSH
37269: LD_INT 5
37271: EQUAL
37272: IFFALSE 37381
// begin tmp := UnitsInside ( factory ) ;
37274: LD_ADDR_VAR 0 8
37278: PUSH
37279: LD_VAR 0 1
37283: PPUSH
37284: CALL_OW 313
37288: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37289: LD_VAR 0 8
37293: PPUSH
37294: LD_INT 25
37296: PUSH
37297: LD_INT 12
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PPUSH
37304: CALL_OW 72
37308: NOT
37309: IFFALSE 37319
// control := control_manual ;
37311: LD_ADDR_VAR 0 4
37315: PUSH
37316: LD_INT 1
37318: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37319: LD_ADDR_VAR 0 8
37323: PUSH
37324: LD_VAR 0 1
37328: PPUSH
37329: CALL 37016 0 1
37333: ST_TO_ADDR
// if tmp then
37334: LD_VAR 0 8
37338: IFFALSE 37381
// begin for i in tmp do
37340: LD_ADDR_VAR 0 7
37344: PUSH
37345: LD_VAR 0 8
37349: PUSH
37350: FOR_IN
37351: IFFALSE 37379
// if i [ 1 ] = b_ext_radio then
37353: LD_VAR 0 7
37357: PUSH
37358: LD_INT 1
37360: ARRAY
37361: PUSH
37362: LD_INT 22
37364: EQUAL
37365: IFFALSE 37377
// begin control := control_remote ;
37367: LD_ADDR_VAR 0 4
37371: PUSH
37372: LD_INT 2
37374: ST_TO_ADDR
// break ;
37375: GO 37379
// end ;
37377: GO 37350
37379: POP
37380: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37381: LD_VAR 0 1
37385: PPUSH
37386: LD_VAR 0 2
37390: PPUSH
37391: LD_VAR 0 3
37395: PPUSH
37396: LD_VAR 0 4
37400: PPUSH
37401: LD_VAR 0 5
37405: PPUSH
37406: CALL_OW 448
37410: IFFALSE 37445
// begin result := [ chassis , engine , control , weapon ] ;
37412: LD_ADDR_VAR 0 6
37416: PUSH
37417: LD_VAR 0 2
37421: PUSH
37422: LD_VAR 0 3
37426: PUSH
37427: LD_VAR 0 4
37431: PUSH
37432: LD_VAR 0 5
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// exit ;
37443: GO 37857
// end ; _chassis := AvailableChassisList ( factory ) ;
37445: LD_ADDR_VAR 0 9
37449: PUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 475
37459: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37460: LD_ADDR_VAR 0 11
37464: PUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: CALL_OW 476
37474: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37475: LD_ADDR_VAR 0 12
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 477
37489: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37490: LD_ADDR_VAR 0 10
37494: PUSH
37495: LD_VAR 0 1
37499: PPUSH
37500: CALL_OW 478
37504: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37505: LD_VAR 0 9
37509: NOT
37510: PUSH
37511: LD_VAR 0 11
37515: NOT
37516: OR
37517: PUSH
37518: LD_VAR 0 12
37522: NOT
37523: OR
37524: PUSH
37525: LD_VAR 0 10
37529: NOT
37530: OR
37531: IFFALSE 37566
// begin result := [ chassis , engine , control , weapon ] ;
37533: LD_ADDR_VAR 0 6
37537: PUSH
37538: LD_VAR 0 2
37542: PUSH
37543: LD_VAR 0 3
37547: PUSH
37548: LD_VAR 0 4
37552: PUSH
37553: LD_VAR 0 5
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: ST_TO_ADDR
// exit ;
37564: GO 37857
// end ; if not chassis in _chassis then
37566: LD_VAR 0 2
37570: PUSH
37571: LD_VAR 0 9
37575: IN
37576: NOT
37577: IFFALSE 37603
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37579: LD_ADDR_VAR 0 2
37583: PUSH
37584: LD_VAR 0 9
37588: PUSH
37589: LD_INT 1
37591: PPUSH
37592: LD_VAR 0 9
37596: PPUSH
37597: CALL_OW 12
37601: ARRAY
37602: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37603: LD_VAR 0 2
37607: PPUSH
37608: LD_VAR 0 3
37612: PPUSH
37613: CALL 37862 0 2
37617: NOT
37618: IFFALSE 37677
// repeat engine := _engine [ 1 ] ;
37620: LD_ADDR_VAR 0 3
37624: PUSH
37625: LD_VAR 0 11
37629: PUSH
37630: LD_INT 1
37632: ARRAY
37633: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37634: LD_ADDR_VAR 0 11
37638: PUSH
37639: LD_VAR 0 11
37643: PPUSH
37644: LD_INT 1
37646: PPUSH
37647: CALL_OW 3
37651: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37652: LD_VAR 0 2
37656: PPUSH
37657: LD_VAR 0 3
37661: PPUSH
37662: CALL 37862 0 2
37666: PUSH
37667: LD_VAR 0 11
37671: PUSH
37672: EMPTY
37673: EQUAL
37674: OR
37675: IFFALSE 37620
// if not control in _control then
37677: LD_VAR 0 4
37681: PUSH
37682: LD_VAR 0 12
37686: IN
37687: NOT
37688: IFFALSE 37714
// control := _control [ rand ( 1 , _control ) ] ;
37690: LD_ADDR_VAR 0 4
37694: PUSH
37695: LD_VAR 0 12
37699: PUSH
37700: LD_INT 1
37702: PPUSH
37703: LD_VAR 0 12
37707: PPUSH
37708: CALL_OW 12
37712: ARRAY
37713: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37714: LD_VAR 0 2
37718: PPUSH
37719: LD_VAR 0 5
37723: PPUSH
37724: CALL 38082 0 2
37728: NOT
37729: IFFALSE 37788
// repeat weapon := _weapon [ 1 ] ;
37731: LD_ADDR_VAR 0 5
37735: PUSH
37736: LD_VAR 0 10
37740: PUSH
37741: LD_INT 1
37743: ARRAY
37744: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37745: LD_ADDR_VAR 0 10
37749: PUSH
37750: LD_VAR 0 10
37754: PPUSH
37755: LD_INT 1
37757: PPUSH
37758: CALL_OW 3
37762: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37763: LD_VAR 0 2
37767: PPUSH
37768: LD_VAR 0 5
37772: PPUSH
37773: CALL 38082 0 2
37777: PUSH
37778: LD_VAR 0 10
37782: PUSH
37783: EMPTY
37784: EQUAL
37785: OR
37786: IFFALSE 37731
// result := [ ] ;
37788: LD_ADDR_VAR 0 6
37792: PUSH
37793: EMPTY
37794: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37795: LD_VAR 0 1
37799: PPUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: LD_VAR 0 3
37809: PPUSH
37810: LD_VAR 0 4
37814: PPUSH
37815: LD_VAR 0 5
37819: PPUSH
37820: CALL_OW 448
37824: IFFALSE 37857
// result := [ chassis , engine , control , weapon ] ;
37826: LD_ADDR_VAR 0 6
37830: PUSH
37831: LD_VAR 0 2
37835: PUSH
37836: LD_VAR 0 3
37840: PUSH
37841: LD_VAR 0 4
37845: PUSH
37846: LD_VAR 0 5
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// end ;
37857: LD_VAR 0 6
37861: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37862: LD_INT 0
37864: PPUSH
// if not chassis or not engine then
37865: LD_VAR 0 1
37869: NOT
37870: PUSH
37871: LD_VAR 0 2
37875: NOT
37876: OR
37877: IFFALSE 37881
// exit ;
37879: GO 38077
// case engine of engine_solar :
37881: LD_VAR 0 2
37885: PUSH
37886: LD_INT 2
37888: DOUBLE
37889: EQUAL
37890: IFTRUE 37894
37892: GO 37932
37894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37895: LD_ADDR_VAR 0 3
37899: PUSH
37900: LD_INT 11
37902: PUSH
37903: LD_INT 12
37905: PUSH
37906: LD_INT 13
37908: PUSH
37909: LD_INT 14
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
37930: GO 38061
37932: LD_INT 1
37934: DOUBLE
37935: EQUAL
37936: IFTRUE 37940
37938: GO 38002
37940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37941: LD_ADDR_VAR 0 3
37945: PUSH
37946: LD_INT 11
37948: PUSH
37949: LD_INT 12
37951: PUSH
37952: LD_INT 13
37954: PUSH
37955: LD_INT 14
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: LD_INT 4
37969: PUSH
37970: LD_INT 5
37972: PUSH
37973: LD_INT 21
37975: PUSH
37976: LD_INT 23
37978: PUSH
37979: LD_INT 22
37981: PUSH
37982: LD_INT 24
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: ST_TO_ADDR
38000: GO 38061
38002: LD_INT 3
38004: DOUBLE
38005: EQUAL
38006: IFTRUE 38010
38008: GO 38060
38010: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38011: LD_ADDR_VAR 0 3
38015: PUSH
38016: LD_INT 13
38018: PUSH
38019: LD_INT 14
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: LD_INT 4
38030: PUSH
38031: LD_INT 5
38033: PUSH
38034: LD_INT 21
38036: PUSH
38037: LD_INT 22
38039: PUSH
38040: LD_INT 23
38042: PUSH
38043: LD_INT 24
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: ST_TO_ADDR
38058: GO 38061
38060: POP
// result := ( chassis in result ) ;
38061: LD_ADDR_VAR 0 3
38065: PUSH
38066: LD_VAR 0 1
38070: PUSH
38071: LD_VAR 0 3
38075: IN
38076: ST_TO_ADDR
// end ;
38077: LD_VAR 0 3
38081: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38082: LD_INT 0
38084: PPUSH
// if not chassis or not weapon then
38085: LD_VAR 0 1
38089: NOT
38090: PUSH
38091: LD_VAR 0 2
38095: NOT
38096: OR
38097: IFFALSE 38101
// exit ;
38099: GO 39161
// case weapon of us_machine_gun :
38101: LD_VAR 0 2
38105: PUSH
38106: LD_INT 2
38108: DOUBLE
38109: EQUAL
38110: IFTRUE 38114
38112: GO 38144
38114: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38115: LD_ADDR_VAR 0 3
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: LD_INT 3
38128: PUSH
38129: LD_INT 4
38131: PUSH
38132: LD_INT 5
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: ST_TO_ADDR
38142: GO 39145
38144: LD_INT 3
38146: DOUBLE
38147: EQUAL
38148: IFTRUE 38152
38150: GO 38182
38152: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38153: LD_ADDR_VAR 0 3
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 4
38169: PUSH
38170: LD_INT 5
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: ST_TO_ADDR
38180: GO 39145
38182: LD_INT 11
38184: DOUBLE
38185: EQUAL
38186: IFTRUE 38190
38188: GO 38220
38190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38191: LD_ADDR_VAR 0 3
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 2
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: LD_INT 4
38207: PUSH
38208: LD_INT 5
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: ST_TO_ADDR
38218: GO 39145
38220: LD_INT 4
38222: DOUBLE
38223: EQUAL
38224: IFTRUE 38228
38226: GO 38254
38228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38229: LD_ADDR_VAR 0 3
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: LD_INT 4
38242: PUSH
38243: LD_INT 5
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: ST_TO_ADDR
38252: GO 39145
38254: LD_INT 5
38256: DOUBLE
38257: EQUAL
38258: IFTRUE 38262
38260: GO 38288
38262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: LD_INT 4
38276: PUSH
38277: LD_INT 5
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
38286: GO 39145
38288: LD_INT 9
38290: DOUBLE
38291: EQUAL
38292: IFTRUE 38296
38294: GO 38322
38296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38297: LD_ADDR_VAR 0 3
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: LD_INT 4
38310: PUSH
38311: LD_INT 5
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
38320: GO 39145
38322: LD_INT 7
38324: DOUBLE
38325: EQUAL
38326: IFTRUE 38330
38328: GO 38356
38330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38331: LD_ADDR_VAR 0 3
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: LD_INT 4
38344: PUSH
38345: LD_INT 5
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: ST_TO_ADDR
38354: GO 39145
38356: LD_INT 12
38358: DOUBLE
38359: EQUAL
38360: IFTRUE 38364
38362: GO 38390
38364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 4
38378: PUSH
38379: LD_INT 5
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: ST_TO_ADDR
38388: GO 39145
38390: LD_INT 13
38392: DOUBLE
38393: EQUAL
38394: IFTRUE 38398
38396: GO 38424
38398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38399: LD_ADDR_VAR 0 3
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: LD_INT 4
38412: PUSH
38413: LD_INT 5
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
38422: GO 39145
38424: LD_INT 14
38426: DOUBLE
38427: EQUAL
38428: IFTRUE 38432
38430: GO 38450
38432: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38433: LD_ADDR_VAR 0 3
38437: PUSH
38438: LD_INT 4
38440: PUSH
38441: LD_INT 5
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: ST_TO_ADDR
38448: GO 39145
38450: LD_INT 6
38452: DOUBLE
38453: EQUAL
38454: IFTRUE 38458
38456: GO 38476
38458: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38459: LD_ADDR_VAR 0 3
38463: PUSH
38464: LD_INT 4
38466: PUSH
38467: LD_INT 5
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: ST_TO_ADDR
38474: GO 39145
38476: LD_INT 10
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38484
38482: GO 38502
38484: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_INT 4
38492: PUSH
38493: LD_INT 5
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: ST_TO_ADDR
38500: GO 39145
38502: LD_INT 22
38504: DOUBLE
38505: EQUAL
38506: IFTRUE 38510
38508: GO 38536
38510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_INT 11
38518: PUSH
38519: LD_INT 12
38521: PUSH
38522: LD_INT 13
38524: PUSH
38525: LD_INT 14
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: ST_TO_ADDR
38534: GO 39145
38536: LD_INT 23
38538: DOUBLE
38539: EQUAL
38540: IFTRUE 38544
38542: GO 38570
38544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38545: LD_ADDR_VAR 0 3
38549: PUSH
38550: LD_INT 11
38552: PUSH
38553: LD_INT 12
38555: PUSH
38556: LD_INT 13
38558: PUSH
38559: LD_INT 14
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: ST_TO_ADDR
38568: GO 39145
38570: LD_INT 24
38572: DOUBLE
38573: EQUAL
38574: IFTRUE 38578
38576: GO 38604
38578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38579: LD_ADDR_VAR 0 3
38583: PUSH
38584: LD_INT 11
38586: PUSH
38587: LD_INT 12
38589: PUSH
38590: LD_INT 13
38592: PUSH
38593: LD_INT 14
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
38602: GO 39145
38604: LD_INT 30
38606: DOUBLE
38607: EQUAL
38608: IFTRUE 38612
38610: GO 38638
38612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38613: LD_ADDR_VAR 0 3
38617: PUSH
38618: LD_INT 11
38620: PUSH
38621: LD_INT 12
38623: PUSH
38624: LD_INT 13
38626: PUSH
38627: LD_INT 14
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: ST_TO_ADDR
38636: GO 39145
38638: LD_INT 25
38640: DOUBLE
38641: EQUAL
38642: IFTRUE 38646
38644: GO 38664
38646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38647: LD_ADDR_VAR 0 3
38651: PUSH
38652: LD_INT 13
38654: PUSH
38655: LD_INT 14
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: ST_TO_ADDR
38662: GO 39145
38664: LD_INT 27
38666: DOUBLE
38667: EQUAL
38668: IFTRUE 38672
38670: GO 38690
38672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38673: LD_ADDR_VAR 0 3
38677: PUSH
38678: LD_INT 13
38680: PUSH
38681: LD_INT 14
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: ST_TO_ADDR
38688: GO 39145
38690: LD_INT 92
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38698
38696: GO 38724
38698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38699: LD_ADDR_VAR 0 3
38703: PUSH
38704: LD_INT 11
38706: PUSH
38707: LD_INT 12
38709: PUSH
38710: LD_INT 13
38712: PUSH
38713: LD_INT 14
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: ST_TO_ADDR
38722: GO 39145
38724: LD_INT 28
38726: DOUBLE
38727: EQUAL
38728: IFTRUE 38732
38730: GO 38750
38732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38733: LD_ADDR_VAR 0 3
38737: PUSH
38738: LD_INT 13
38740: PUSH
38741: LD_INT 14
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: ST_TO_ADDR
38748: GO 39145
38750: LD_INT 29
38752: DOUBLE
38753: EQUAL
38754: IFTRUE 38758
38756: GO 38776
38758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38759: LD_ADDR_VAR 0 3
38763: PUSH
38764: LD_INT 13
38766: PUSH
38767: LD_INT 14
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: ST_TO_ADDR
38774: GO 39145
38776: LD_INT 31
38778: DOUBLE
38779: EQUAL
38780: IFTRUE 38784
38782: GO 38802
38784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38785: LD_ADDR_VAR 0 3
38789: PUSH
38790: LD_INT 13
38792: PUSH
38793: LD_INT 14
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: ST_TO_ADDR
38800: GO 39145
38802: LD_INT 26
38804: DOUBLE
38805: EQUAL
38806: IFTRUE 38810
38808: GO 38828
38810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38811: LD_ADDR_VAR 0 3
38815: PUSH
38816: LD_INT 13
38818: PUSH
38819: LD_INT 14
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: ST_TO_ADDR
38826: GO 39145
38828: LD_INT 42
38830: DOUBLE
38831: EQUAL
38832: IFTRUE 38836
38834: GO 38862
38836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38837: LD_ADDR_VAR 0 3
38841: PUSH
38842: LD_INT 21
38844: PUSH
38845: LD_INT 22
38847: PUSH
38848: LD_INT 23
38850: PUSH
38851: LD_INT 24
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
38860: GO 39145
38862: LD_INT 43
38864: DOUBLE
38865: EQUAL
38866: IFTRUE 38870
38868: GO 38896
38870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38871: LD_ADDR_VAR 0 3
38875: PUSH
38876: LD_INT 21
38878: PUSH
38879: LD_INT 22
38881: PUSH
38882: LD_INT 23
38884: PUSH
38885: LD_INT 24
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: ST_TO_ADDR
38894: GO 39145
38896: LD_INT 44
38898: DOUBLE
38899: EQUAL
38900: IFTRUE 38904
38902: GO 38930
38904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38905: LD_ADDR_VAR 0 3
38909: PUSH
38910: LD_INT 21
38912: PUSH
38913: LD_INT 22
38915: PUSH
38916: LD_INT 23
38918: PUSH
38919: LD_INT 24
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: ST_TO_ADDR
38928: GO 39145
38930: LD_INT 45
38932: DOUBLE
38933: EQUAL
38934: IFTRUE 38938
38936: GO 38964
38938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38939: LD_ADDR_VAR 0 3
38943: PUSH
38944: LD_INT 21
38946: PUSH
38947: LD_INT 22
38949: PUSH
38950: LD_INT 23
38952: PUSH
38953: LD_INT 24
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
38962: GO 39145
38964: LD_INT 49
38966: DOUBLE
38967: EQUAL
38968: IFTRUE 38972
38970: GO 38998
38972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38973: LD_ADDR_VAR 0 3
38977: PUSH
38978: LD_INT 21
38980: PUSH
38981: LD_INT 22
38983: PUSH
38984: LD_INT 23
38986: PUSH
38987: LD_INT 24
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: ST_TO_ADDR
38996: GO 39145
38998: LD_INT 51
39000: DOUBLE
39001: EQUAL
39002: IFTRUE 39006
39004: GO 39032
39006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39007: LD_ADDR_VAR 0 3
39011: PUSH
39012: LD_INT 21
39014: PUSH
39015: LD_INT 22
39017: PUSH
39018: LD_INT 23
39020: PUSH
39021: LD_INT 24
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
39030: GO 39145
39032: LD_INT 52
39034: DOUBLE
39035: EQUAL
39036: IFTRUE 39040
39038: GO 39066
39040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39041: LD_ADDR_VAR 0 3
39045: PUSH
39046: LD_INT 21
39048: PUSH
39049: LD_INT 22
39051: PUSH
39052: LD_INT 23
39054: PUSH
39055: LD_INT 24
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: ST_TO_ADDR
39064: GO 39145
39066: LD_INT 53
39068: DOUBLE
39069: EQUAL
39070: IFTRUE 39074
39072: GO 39092
39074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39075: LD_ADDR_VAR 0 3
39079: PUSH
39080: LD_INT 23
39082: PUSH
39083: LD_INT 24
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: ST_TO_ADDR
39090: GO 39145
39092: LD_INT 46
39094: DOUBLE
39095: EQUAL
39096: IFTRUE 39100
39098: GO 39118
39100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39101: LD_ADDR_VAR 0 3
39105: PUSH
39106: LD_INT 23
39108: PUSH
39109: LD_INT 24
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: ST_TO_ADDR
39116: GO 39145
39118: LD_INT 47
39120: DOUBLE
39121: EQUAL
39122: IFTRUE 39126
39124: GO 39144
39126: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39127: LD_ADDR_VAR 0 3
39131: PUSH
39132: LD_INT 23
39134: PUSH
39135: LD_INT 24
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: ST_TO_ADDR
39142: GO 39145
39144: POP
// result := ( chassis in result ) ;
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_VAR 0 1
39154: PUSH
39155: LD_VAR 0 3
39159: IN
39160: ST_TO_ADDR
// end ;
39161: LD_VAR 0 3
39165: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39166: LD_INT 0
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
// result := array ;
39175: LD_ADDR_VAR 0 5
39179: PUSH
39180: LD_VAR 0 1
39184: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39185: LD_VAR 0 1
39189: NOT
39190: PUSH
39191: LD_VAR 0 2
39195: NOT
39196: OR
39197: PUSH
39198: LD_VAR 0 3
39202: NOT
39203: OR
39204: PUSH
39205: LD_VAR 0 2
39209: PUSH
39210: LD_VAR 0 1
39214: GREATER
39215: OR
39216: PUSH
39217: LD_VAR 0 3
39221: PUSH
39222: LD_VAR 0 1
39226: GREATER
39227: OR
39228: IFFALSE 39232
// exit ;
39230: GO 39528
// if direction then
39232: LD_VAR 0 4
39236: IFFALSE 39300
// begin d := 1 ;
39238: LD_ADDR_VAR 0 9
39242: PUSH
39243: LD_INT 1
39245: ST_TO_ADDR
// if i_from > i_to then
39246: LD_VAR 0 2
39250: PUSH
39251: LD_VAR 0 3
39255: GREATER
39256: IFFALSE 39282
// length := ( array - i_from ) + i_to else
39258: LD_ADDR_VAR 0 11
39262: PUSH
39263: LD_VAR 0 1
39267: PUSH
39268: LD_VAR 0 2
39272: MINUS
39273: PUSH
39274: LD_VAR 0 3
39278: PLUS
39279: ST_TO_ADDR
39280: GO 39298
// length := i_to - i_from ;
39282: LD_ADDR_VAR 0 11
39286: PUSH
39287: LD_VAR 0 3
39291: PUSH
39292: LD_VAR 0 2
39296: MINUS
39297: ST_TO_ADDR
// end else
39298: GO 39361
// begin d := - 1 ;
39300: LD_ADDR_VAR 0 9
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: ST_TO_ADDR
// if i_from > i_to then
39309: LD_VAR 0 2
39313: PUSH
39314: LD_VAR 0 3
39318: GREATER
39319: IFFALSE 39339
// length := i_from - i_to else
39321: LD_ADDR_VAR 0 11
39325: PUSH
39326: LD_VAR 0 2
39330: PUSH
39331: LD_VAR 0 3
39335: MINUS
39336: ST_TO_ADDR
39337: GO 39361
// length := ( array - i_to ) + i_from ;
39339: LD_ADDR_VAR 0 11
39343: PUSH
39344: LD_VAR 0 1
39348: PUSH
39349: LD_VAR 0 3
39353: MINUS
39354: PUSH
39355: LD_VAR 0 2
39359: PLUS
39360: ST_TO_ADDR
// end ; if not length then
39361: LD_VAR 0 11
39365: NOT
39366: IFFALSE 39370
// exit ;
39368: GO 39528
// tmp := array ;
39370: LD_ADDR_VAR 0 10
39374: PUSH
39375: LD_VAR 0 1
39379: ST_TO_ADDR
// for i = 1 to length do
39380: LD_ADDR_VAR 0 6
39384: PUSH
39385: DOUBLE
39386: LD_INT 1
39388: DEC
39389: ST_TO_ADDR
39390: LD_VAR 0 11
39394: PUSH
39395: FOR_TO
39396: IFFALSE 39516
// begin for j = 1 to array do
39398: LD_ADDR_VAR 0 7
39402: PUSH
39403: DOUBLE
39404: LD_INT 1
39406: DEC
39407: ST_TO_ADDR
39408: LD_VAR 0 1
39412: PUSH
39413: FOR_TO
39414: IFFALSE 39502
// begin k := j + d ;
39416: LD_ADDR_VAR 0 8
39420: PUSH
39421: LD_VAR 0 7
39425: PUSH
39426: LD_VAR 0 9
39430: PLUS
39431: ST_TO_ADDR
// if k > array then
39432: LD_VAR 0 8
39436: PUSH
39437: LD_VAR 0 1
39441: GREATER
39442: IFFALSE 39452
// k := 1 ;
39444: LD_ADDR_VAR 0 8
39448: PUSH
39449: LD_INT 1
39451: ST_TO_ADDR
// if not k then
39452: LD_VAR 0 8
39456: NOT
39457: IFFALSE 39469
// k := array ;
39459: LD_ADDR_VAR 0 8
39463: PUSH
39464: LD_VAR 0 1
39468: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39469: LD_ADDR_VAR 0 10
39473: PUSH
39474: LD_VAR 0 10
39478: PPUSH
39479: LD_VAR 0 8
39483: PPUSH
39484: LD_VAR 0 1
39488: PUSH
39489: LD_VAR 0 7
39493: ARRAY
39494: PPUSH
39495: CALL_OW 1
39499: ST_TO_ADDR
// end ;
39500: GO 39413
39502: POP
39503: POP
// array := tmp ;
39504: LD_ADDR_VAR 0 1
39508: PUSH
39509: LD_VAR 0 10
39513: ST_TO_ADDR
// end ;
39514: GO 39395
39516: POP
39517: POP
// result := array ;
39518: LD_ADDR_VAR 0 5
39522: PUSH
39523: LD_VAR 0 1
39527: ST_TO_ADDR
// end ;
39528: LD_VAR 0 5
39532: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39533: LD_INT 0
39535: PPUSH
39536: PPUSH
// result := 0 ;
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_INT 0
39544: ST_TO_ADDR
// if not array or not value in array then
39545: LD_VAR 0 1
39549: NOT
39550: PUSH
39551: LD_VAR 0 2
39555: PUSH
39556: LD_VAR 0 1
39560: IN
39561: NOT
39562: OR
39563: IFFALSE 39567
// exit ;
39565: GO 39621
// for i = 1 to array do
39567: LD_ADDR_VAR 0 4
39571: PUSH
39572: DOUBLE
39573: LD_INT 1
39575: DEC
39576: ST_TO_ADDR
39577: LD_VAR 0 1
39581: PUSH
39582: FOR_TO
39583: IFFALSE 39619
// if value = array [ i ] then
39585: LD_VAR 0 2
39589: PUSH
39590: LD_VAR 0 1
39594: PUSH
39595: LD_VAR 0 4
39599: ARRAY
39600: EQUAL
39601: IFFALSE 39617
// begin result := i ;
39603: LD_ADDR_VAR 0 3
39607: PUSH
39608: LD_VAR 0 4
39612: ST_TO_ADDR
// exit ;
39613: POP
39614: POP
39615: GO 39621
// end ;
39617: GO 39582
39619: POP
39620: POP
// end ;
39621: LD_VAR 0 3
39625: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39626: LD_INT 0
39628: PPUSH
// vc_chassis := chassis ;
39629: LD_ADDR_OWVAR 37
39633: PUSH
39634: LD_VAR 0 1
39638: ST_TO_ADDR
// vc_engine := engine ;
39639: LD_ADDR_OWVAR 39
39643: PUSH
39644: LD_VAR 0 2
39648: ST_TO_ADDR
// vc_control := control ;
39649: LD_ADDR_OWVAR 38
39653: PUSH
39654: LD_VAR 0 3
39658: ST_TO_ADDR
// vc_weapon := weapon ;
39659: LD_ADDR_OWVAR 40
39663: PUSH
39664: LD_VAR 0 4
39668: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39669: LD_ADDR_OWVAR 41
39673: PUSH
39674: LD_VAR 0 5
39678: ST_TO_ADDR
// end ;
39679: LD_VAR 0 6
39683: RET
// export function WantPlant ( unit ) ; var task ; begin
39684: LD_INT 0
39686: PPUSH
39687: PPUSH
// result := false ;
39688: LD_ADDR_VAR 0 2
39692: PUSH
39693: LD_INT 0
39695: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39696: LD_ADDR_VAR 0 3
39700: PUSH
39701: LD_VAR 0 1
39705: PPUSH
39706: CALL_OW 437
39710: ST_TO_ADDR
// if task then
39711: LD_VAR 0 3
39715: IFFALSE 39743
// if task [ 1 ] [ 1 ] = p then
39717: LD_VAR 0 3
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: PUSH
39730: LD_STRING p
39732: EQUAL
39733: IFFALSE 39743
// result := true ;
39735: LD_ADDR_VAR 0 2
39739: PUSH
39740: LD_INT 1
39742: ST_TO_ADDR
// end ;
39743: LD_VAR 0 2
39747: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39748: LD_INT 0
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
// if pos < 1 then
39754: LD_VAR 0 2
39758: PUSH
39759: LD_INT 1
39761: LESS
39762: IFFALSE 39766
// exit ;
39764: GO 40069
// if pos = 1 then
39766: LD_VAR 0 2
39770: PUSH
39771: LD_INT 1
39773: EQUAL
39774: IFFALSE 39807
// result := Replace ( arr , pos [ 1 ] , value ) else
39776: LD_ADDR_VAR 0 4
39780: PUSH
39781: LD_VAR 0 1
39785: PPUSH
39786: LD_VAR 0 2
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: PPUSH
39795: LD_VAR 0 3
39799: PPUSH
39800: CALL_OW 1
39804: ST_TO_ADDR
39805: GO 40069
// begin tmp := arr ;
39807: LD_ADDR_VAR 0 6
39811: PUSH
39812: LD_VAR 0 1
39816: ST_TO_ADDR
// s_arr := [ tmp ] ;
39817: LD_ADDR_VAR 0 7
39821: PUSH
39822: LD_VAR 0 6
39826: PUSH
39827: EMPTY
39828: LIST
39829: ST_TO_ADDR
// for i = 1 to pos - 1 do
39830: LD_ADDR_VAR 0 5
39834: PUSH
39835: DOUBLE
39836: LD_INT 1
39838: DEC
39839: ST_TO_ADDR
39840: LD_VAR 0 2
39844: PUSH
39845: LD_INT 1
39847: MINUS
39848: PUSH
39849: FOR_TO
39850: IFFALSE 39895
// begin tmp := tmp [ pos [ i ] ] ;
39852: LD_ADDR_VAR 0 6
39856: PUSH
39857: LD_VAR 0 6
39861: PUSH
39862: LD_VAR 0 2
39866: PUSH
39867: LD_VAR 0 5
39871: ARRAY
39872: ARRAY
39873: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39874: LD_ADDR_VAR 0 7
39878: PUSH
39879: LD_VAR 0 7
39883: PUSH
39884: LD_VAR 0 6
39888: PUSH
39889: EMPTY
39890: LIST
39891: ADD
39892: ST_TO_ADDR
// end ;
39893: GO 39849
39895: POP
39896: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39897: LD_ADDR_VAR 0 6
39901: PUSH
39902: LD_VAR 0 6
39906: PPUSH
39907: LD_VAR 0 2
39911: PUSH
39912: LD_VAR 0 2
39916: ARRAY
39917: PPUSH
39918: LD_VAR 0 3
39922: PPUSH
39923: CALL_OW 1
39927: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39928: LD_ADDR_VAR 0 7
39932: PUSH
39933: LD_VAR 0 7
39937: PPUSH
39938: LD_VAR 0 7
39942: PPUSH
39943: LD_VAR 0 6
39947: PPUSH
39948: CALL_OW 1
39952: ST_TO_ADDR
// for i = s_arr downto 2 do
39953: LD_ADDR_VAR 0 5
39957: PUSH
39958: DOUBLE
39959: LD_VAR 0 7
39963: INC
39964: ST_TO_ADDR
39965: LD_INT 2
39967: PUSH
39968: FOR_DOWNTO
39969: IFFALSE 40053
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39971: LD_ADDR_VAR 0 6
39975: PUSH
39976: LD_VAR 0 7
39980: PUSH
39981: LD_VAR 0 5
39985: PUSH
39986: LD_INT 1
39988: MINUS
39989: ARRAY
39990: PPUSH
39991: LD_VAR 0 2
39995: PUSH
39996: LD_VAR 0 5
40000: PUSH
40001: LD_INT 1
40003: MINUS
40004: ARRAY
40005: PPUSH
40006: LD_VAR 0 7
40010: PUSH
40011: LD_VAR 0 5
40015: ARRAY
40016: PPUSH
40017: CALL_OW 1
40021: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40022: LD_ADDR_VAR 0 7
40026: PUSH
40027: LD_VAR 0 7
40031: PPUSH
40032: LD_VAR 0 5
40036: PUSH
40037: LD_INT 1
40039: MINUS
40040: PPUSH
40041: LD_VAR 0 6
40045: PPUSH
40046: CALL_OW 1
40050: ST_TO_ADDR
// end ;
40051: GO 39968
40053: POP
40054: POP
// result := s_arr [ 1 ] ;
40055: LD_ADDR_VAR 0 4
40059: PUSH
40060: LD_VAR 0 7
40064: PUSH
40065: LD_INT 1
40067: ARRAY
40068: ST_TO_ADDR
// end ; end ;
40069: LD_VAR 0 4
40073: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40074: LD_INT 0
40076: PPUSH
40077: PPUSH
// if not list then
40078: LD_VAR 0 1
40082: NOT
40083: IFFALSE 40087
// exit ;
40085: GO 40178
// i := list [ pos1 ] ;
40087: LD_ADDR_VAR 0 5
40091: PUSH
40092: LD_VAR 0 1
40096: PUSH
40097: LD_VAR 0 2
40101: ARRAY
40102: ST_TO_ADDR
// if not i then
40103: LD_VAR 0 5
40107: NOT
40108: IFFALSE 40112
// exit ;
40110: GO 40178
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40112: LD_ADDR_VAR 0 1
40116: PUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: LD_VAR 0 2
40126: PPUSH
40127: LD_VAR 0 1
40131: PUSH
40132: LD_VAR 0 3
40136: ARRAY
40137: PPUSH
40138: CALL_OW 1
40142: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40143: LD_ADDR_VAR 0 1
40147: PUSH
40148: LD_VAR 0 1
40152: PPUSH
40153: LD_VAR 0 3
40157: PPUSH
40158: LD_VAR 0 5
40162: PPUSH
40163: CALL_OW 1
40167: ST_TO_ADDR
// result := list ;
40168: LD_ADDR_VAR 0 4
40172: PUSH
40173: LD_VAR 0 1
40177: ST_TO_ADDR
// end ;
40178: LD_VAR 0 4
40182: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40183: LD_INT 0
40185: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40186: LD_ADDR_VAR 0 5
40190: PUSH
40191: LD_VAR 0 1
40195: PPUSH
40196: CALL_OW 250
40200: PPUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 251
40210: PPUSH
40211: LD_VAR 0 2
40215: PPUSH
40216: LD_VAR 0 3
40220: PPUSH
40221: LD_VAR 0 4
40225: PPUSH
40226: CALL 40236 0 5
40230: ST_TO_ADDR
// end ;
40231: LD_VAR 0 5
40235: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40236: LD_INT 0
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
// if not list then
40242: LD_VAR 0 3
40246: NOT
40247: IFFALSE 40251
// exit ;
40249: GO 40639
// result := [ ] ;
40251: LD_ADDR_VAR 0 6
40255: PUSH
40256: EMPTY
40257: ST_TO_ADDR
// for i in list do
40258: LD_ADDR_VAR 0 7
40262: PUSH
40263: LD_VAR 0 3
40267: PUSH
40268: FOR_IN
40269: IFFALSE 40471
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40271: LD_ADDR_VAR 0 9
40275: PUSH
40276: LD_VAR 0 7
40280: PPUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: LD_VAR 0 2
40290: PPUSH
40291: CALL_OW 297
40295: ST_TO_ADDR
// if not result then
40296: LD_VAR 0 6
40300: NOT
40301: IFFALSE 40327
// result := [ [ i , tmp ] ] else
40303: LD_ADDR_VAR 0 6
40307: PUSH
40308: LD_VAR 0 7
40312: PUSH
40313: LD_VAR 0 9
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: EMPTY
40323: LIST
40324: ST_TO_ADDR
40325: GO 40469
// begin if result [ result ] [ 2 ] < tmp then
40327: LD_VAR 0 6
40331: PUSH
40332: LD_VAR 0 6
40336: ARRAY
40337: PUSH
40338: LD_INT 2
40340: ARRAY
40341: PUSH
40342: LD_VAR 0 9
40346: LESS
40347: IFFALSE 40389
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40349: LD_ADDR_VAR 0 6
40353: PUSH
40354: LD_VAR 0 6
40358: PPUSH
40359: LD_VAR 0 6
40363: PUSH
40364: LD_INT 1
40366: PLUS
40367: PPUSH
40368: LD_VAR 0 7
40372: PUSH
40373: LD_VAR 0 9
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PPUSH
40382: CALL_OW 2
40386: ST_TO_ADDR
40387: GO 40469
// for j = 1 to result do
40389: LD_ADDR_VAR 0 8
40393: PUSH
40394: DOUBLE
40395: LD_INT 1
40397: DEC
40398: ST_TO_ADDR
40399: LD_VAR 0 6
40403: PUSH
40404: FOR_TO
40405: IFFALSE 40467
// begin if tmp < result [ j ] [ 2 ] then
40407: LD_VAR 0 9
40411: PUSH
40412: LD_VAR 0 6
40416: PUSH
40417: LD_VAR 0 8
40421: ARRAY
40422: PUSH
40423: LD_INT 2
40425: ARRAY
40426: LESS
40427: IFFALSE 40465
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40429: LD_ADDR_VAR 0 6
40433: PUSH
40434: LD_VAR 0 6
40438: PPUSH
40439: LD_VAR 0 8
40443: PPUSH
40444: LD_VAR 0 7
40448: PUSH
40449: LD_VAR 0 9
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PPUSH
40458: CALL_OW 2
40462: ST_TO_ADDR
// break ;
40463: GO 40467
// end ; end ;
40465: GO 40404
40467: POP
40468: POP
// end ; end ;
40469: GO 40268
40471: POP
40472: POP
// if result and not asc then
40473: LD_VAR 0 6
40477: PUSH
40478: LD_VAR 0 4
40482: NOT
40483: AND
40484: IFFALSE 40559
// begin tmp := result ;
40486: LD_ADDR_VAR 0 9
40490: PUSH
40491: LD_VAR 0 6
40495: ST_TO_ADDR
// for i = tmp downto 1 do
40496: LD_ADDR_VAR 0 7
40500: PUSH
40501: DOUBLE
40502: LD_VAR 0 9
40506: INC
40507: ST_TO_ADDR
40508: LD_INT 1
40510: PUSH
40511: FOR_DOWNTO
40512: IFFALSE 40557
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40514: LD_ADDR_VAR 0 6
40518: PUSH
40519: LD_VAR 0 6
40523: PPUSH
40524: LD_VAR 0 9
40528: PUSH
40529: LD_VAR 0 7
40533: MINUS
40534: PUSH
40535: LD_INT 1
40537: PLUS
40538: PPUSH
40539: LD_VAR 0 9
40543: PUSH
40544: LD_VAR 0 7
40548: ARRAY
40549: PPUSH
40550: CALL_OW 1
40554: ST_TO_ADDR
40555: GO 40511
40557: POP
40558: POP
// end ; tmp := [ ] ;
40559: LD_ADDR_VAR 0 9
40563: PUSH
40564: EMPTY
40565: ST_TO_ADDR
// if mode then
40566: LD_VAR 0 5
40570: IFFALSE 40639
// begin for i = 1 to result do
40572: LD_ADDR_VAR 0 7
40576: PUSH
40577: DOUBLE
40578: LD_INT 1
40580: DEC
40581: ST_TO_ADDR
40582: LD_VAR 0 6
40586: PUSH
40587: FOR_TO
40588: IFFALSE 40627
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40590: LD_ADDR_VAR 0 9
40594: PUSH
40595: LD_VAR 0 9
40599: PPUSH
40600: LD_VAR 0 7
40604: PPUSH
40605: LD_VAR 0 6
40609: PUSH
40610: LD_VAR 0 7
40614: ARRAY
40615: PUSH
40616: LD_INT 1
40618: ARRAY
40619: PPUSH
40620: CALL_OW 1
40624: ST_TO_ADDR
40625: GO 40587
40627: POP
40628: POP
// result := tmp ;
40629: LD_ADDR_VAR 0 6
40633: PUSH
40634: LD_VAR 0 9
40638: ST_TO_ADDR
// end ; end ;
40639: LD_VAR 0 6
40643: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40644: LD_INT 0
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40652: LD_ADDR_VAR 0 5
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
// if not x or not y then
40674: LD_VAR 0 2
40678: NOT
40679: PUSH
40680: LD_VAR 0 3
40684: NOT
40685: OR
40686: IFFALSE 40690
// exit ;
40688: GO 42340
// if not range then
40690: LD_VAR 0 4
40694: NOT
40695: IFFALSE 40705
// range := 10 ;
40697: LD_ADDR_VAR 0 4
40701: PUSH
40702: LD_INT 10
40704: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40705: LD_ADDR_VAR 0 8
40709: PUSH
40710: LD_INT 81
40712: PUSH
40713: LD_VAR 0 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 92
40724: PUSH
40725: LD_VAR 0 2
40729: PUSH
40730: LD_VAR 0 3
40734: PUSH
40735: LD_VAR 0 4
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: LD_INT 21
40751: PUSH
40752: LD_INT 3
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: PPUSH
40768: CALL_OW 69
40772: ST_TO_ADDR
// if not tmp then
40773: LD_VAR 0 8
40777: NOT
40778: IFFALSE 40782
// exit ;
40780: GO 42340
// for i in tmp do
40782: LD_ADDR_VAR 0 6
40786: PUSH
40787: LD_VAR 0 8
40791: PUSH
40792: FOR_IN
40793: IFFALSE 42315
// begin points := [ 0 , 0 , 0 ] ;
40795: LD_ADDR_VAR 0 9
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: ST_TO_ADDR
// bpoints := 1 ;
40814: LD_ADDR_VAR 0 10
40818: PUSH
40819: LD_INT 1
40821: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40822: LD_VAR 0 6
40826: PPUSH
40827: CALL_OW 247
40831: PUSH
40832: LD_INT 1
40834: DOUBLE
40835: EQUAL
40836: IFTRUE 40840
40838: GO 41418
40840: POP
// begin if GetClass ( i ) = 1 then
40841: LD_VAR 0 6
40845: PPUSH
40846: CALL_OW 257
40850: PUSH
40851: LD_INT 1
40853: EQUAL
40854: IFFALSE 40875
// points := [ 10 , 5 , 3 ] ;
40856: LD_ADDR_VAR 0 9
40860: PUSH
40861: LD_INT 10
40863: PUSH
40864: LD_INT 5
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40875: LD_VAR 0 6
40879: PPUSH
40880: CALL_OW 257
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: LD_INT 4
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: IN
40899: IFFALSE 40920
// points := [ 3 , 2 , 1 ] ;
40901: LD_ADDR_VAR 0 9
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40920: LD_VAR 0 6
40924: PPUSH
40925: CALL_OW 257
40929: PUSH
40930: LD_INT 5
40932: EQUAL
40933: IFFALSE 40954
// points := [ 130 , 5 , 2 ] ;
40935: LD_ADDR_VAR 0 9
40939: PUSH
40940: LD_INT 130
40942: PUSH
40943: LD_INT 5
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40954: LD_VAR 0 6
40958: PPUSH
40959: CALL_OW 257
40963: PUSH
40964: LD_INT 8
40966: EQUAL
40967: IFFALSE 40988
// points := [ 35 , 35 , 30 ] ;
40969: LD_ADDR_VAR 0 9
40973: PUSH
40974: LD_INT 35
40976: PUSH
40977: LD_INT 35
40979: PUSH
40980: LD_INT 30
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40988: LD_VAR 0 6
40992: PPUSH
40993: CALL_OW 257
40997: PUSH
40998: LD_INT 9
41000: EQUAL
41001: IFFALSE 41022
// points := [ 20 , 55 , 40 ] ;
41003: LD_ADDR_VAR 0 9
41007: PUSH
41008: LD_INT 20
41010: PUSH
41011: LD_INT 55
41013: PUSH
41014: LD_INT 40
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41022: LD_VAR 0 6
41026: PPUSH
41027: CALL_OW 257
41031: PUSH
41032: LD_INT 12
41034: PUSH
41035: LD_INT 16
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: IN
41042: IFFALSE 41063
// points := [ 5 , 3 , 2 ] ;
41044: LD_ADDR_VAR 0 9
41048: PUSH
41049: LD_INT 5
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: LIST
41062: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41063: LD_VAR 0 6
41067: PPUSH
41068: CALL_OW 257
41072: PUSH
41073: LD_INT 17
41075: EQUAL
41076: IFFALSE 41097
// points := [ 100 , 50 , 75 ] ;
41078: LD_ADDR_VAR 0 9
41082: PUSH
41083: LD_INT 100
41085: PUSH
41086: LD_INT 50
41088: PUSH
41089: LD_INT 75
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41097: LD_VAR 0 6
41101: PPUSH
41102: CALL_OW 257
41106: PUSH
41107: LD_INT 15
41109: EQUAL
41110: IFFALSE 41131
// points := [ 10 , 5 , 3 ] ;
41112: LD_ADDR_VAR 0 9
41116: PUSH
41117: LD_INT 10
41119: PUSH
41120: LD_INT 5
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41131: LD_VAR 0 6
41135: PPUSH
41136: CALL_OW 257
41140: PUSH
41141: LD_INT 14
41143: EQUAL
41144: IFFALSE 41165
// points := [ 10 , 0 , 0 ] ;
41146: LD_ADDR_VAR 0 9
41150: PUSH
41151: LD_INT 10
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41165: LD_VAR 0 6
41169: PPUSH
41170: CALL_OW 257
41174: PUSH
41175: LD_INT 11
41177: EQUAL
41178: IFFALSE 41199
// points := [ 30 , 10 , 5 ] ;
41180: LD_ADDR_VAR 0 9
41184: PUSH
41185: LD_INT 30
41187: PUSH
41188: LD_INT 10
41190: PUSH
41191: LD_INT 5
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41199: LD_VAR 0 1
41203: PPUSH
41204: LD_INT 5
41206: PPUSH
41207: CALL_OW 321
41211: PUSH
41212: LD_INT 2
41214: EQUAL
41215: IFFALSE 41232
// bpoints := bpoints * 1.8 ;
41217: LD_ADDR_VAR 0 10
41221: PUSH
41222: LD_VAR 0 10
41226: PUSH
41227: LD_REAL  1.80000000000000E+0000
41230: MUL
41231: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41232: LD_VAR 0 6
41236: PPUSH
41237: CALL_OW 257
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 4
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: IN
41260: PUSH
41261: LD_VAR 0 1
41265: PPUSH
41266: LD_INT 51
41268: PPUSH
41269: CALL_OW 321
41273: PUSH
41274: LD_INT 2
41276: EQUAL
41277: AND
41278: IFFALSE 41295
// bpoints := bpoints * 1.2 ;
41280: LD_ADDR_VAR 0 10
41284: PUSH
41285: LD_VAR 0 10
41289: PUSH
41290: LD_REAL  1.20000000000000E+0000
41293: MUL
41294: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41295: LD_VAR 0 6
41299: PPUSH
41300: CALL_OW 257
41304: PUSH
41305: LD_INT 5
41307: PUSH
41308: LD_INT 7
41310: PUSH
41311: LD_INT 9
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: IN
41319: PUSH
41320: LD_VAR 0 1
41324: PPUSH
41325: LD_INT 52
41327: PPUSH
41328: CALL_OW 321
41332: PUSH
41333: LD_INT 2
41335: EQUAL
41336: AND
41337: IFFALSE 41354
// bpoints := bpoints * 1.5 ;
41339: LD_ADDR_VAR 0 10
41343: PUSH
41344: LD_VAR 0 10
41348: PUSH
41349: LD_REAL  1.50000000000000E+0000
41352: MUL
41353: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41354: LD_VAR 0 1
41358: PPUSH
41359: LD_INT 66
41361: PPUSH
41362: CALL_OW 321
41366: PUSH
41367: LD_INT 2
41369: EQUAL
41370: IFFALSE 41387
// bpoints := bpoints * 1.1 ;
41372: LD_ADDR_VAR 0 10
41376: PUSH
41377: LD_VAR 0 10
41381: PUSH
41382: LD_REAL  1.10000000000000E+0000
41385: MUL
41386: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41387: LD_ADDR_VAR 0 10
41391: PUSH
41392: LD_VAR 0 10
41396: PUSH
41397: LD_VAR 0 6
41401: PPUSH
41402: LD_INT 1
41404: PPUSH
41405: CALL_OW 259
41409: PUSH
41410: LD_REAL  1.15000000000000E+0000
41413: MUL
41414: MUL
41415: ST_TO_ADDR
// end ; unit_vehicle :
41416: GO 42244
41418: LD_INT 2
41420: DOUBLE
41421: EQUAL
41422: IFTRUE 41426
41424: GO 42232
41426: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41427: LD_VAR 0 6
41431: PPUSH
41432: CALL_OW 264
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 42
41442: PUSH
41443: LD_INT 24
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: IN
41451: IFFALSE 41472
// points := [ 25 , 5 , 3 ] ;
41453: LD_ADDR_VAR 0 9
41457: PUSH
41458: LD_INT 25
41460: PUSH
41461: LD_INT 5
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41472: LD_VAR 0 6
41476: PPUSH
41477: CALL_OW 264
41481: PUSH
41482: LD_INT 4
41484: PUSH
41485: LD_INT 43
41487: PUSH
41488: LD_INT 25
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: IN
41496: IFFALSE 41517
// points := [ 40 , 15 , 5 ] ;
41498: LD_ADDR_VAR 0 9
41502: PUSH
41503: LD_INT 40
41505: PUSH
41506: LD_INT 15
41508: PUSH
41509: LD_INT 5
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41517: LD_VAR 0 6
41521: PPUSH
41522: CALL_OW 264
41526: PUSH
41527: LD_INT 3
41529: PUSH
41530: LD_INT 23
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: IN
41537: IFFALSE 41558
// points := [ 7 , 25 , 8 ] ;
41539: LD_ADDR_VAR 0 9
41543: PUSH
41544: LD_INT 7
41546: PUSH
41547: LD_INT 25
41549: PUSH
41550: LD_INT 8
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41558: LD_VAR 0 6
41562: PPUSH
41563: CALL_OW 264
41567: PUSH
41568: LD_INT 5
41570: PUSH
41571: LD_INT 27
41573: PUSH
41574: LD_INT 44
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: IN
41582: IFFALSE 41603
// points := [ 14 , 50 , 16 ] ;
41584: LD_ADDR_VAR 0 9
41588: PUSH
41589: LD_INT 14
41591: PUSH
41592: LD_INT 50
41594: PUSH
41595: LD_INT 16
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41603: LD_VAR 0 6
41607: PPUSH
41608: CALL_OW 264
41612: PUSH
41613: LD_INT 6
41615: PUSH
41616: LD_INT 46
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: IN
41623: IFFALSE 41644
// points := [ 32 , 120 , 70 ] ;
41625: LD_ADDR_VAR 0 9
41629: PUSH
41630: LD_INT 32
41632: PUSH
41633: LD_INT 120
41635: PUSH
41636: LD_INT 70
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41644: LD_VAR 0 6
41648: PPUSH
41649: CALL_OW 264
41653: PUSH
41654: LD_INT 7
41656: PUSH
41657: LD_INT 28
41659: PUSH
41660: LD_INT 45
41662: PUSH
41663: LD_INT 92
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: IN
41672: IFFALSE 41693
// points := [ 35 , 20 , 45 ] ;
41674: LD_ADDR_VAR 0 9
41678: PUSH
41679: LD_INT 35
41681: PUSH
41682: LD_INT 20
41684: PUSH
41685: LD_INT 45
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: LIST
41692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41693: LD_VAR 0 6
41697: PPUSH
41698: CALL_OW 264
41702: PUSH
41703: LD_INT 47
41705: PUSH
41706: EMPTY
41707: LIST
41708: IN
41709: IFFALSE 41730
// points := [ 67 , 45 , 75 ] ;
41711: LD_ADDR_VAR 0 9
41715: PUSH
41716: LD_INT 67
41718: PUSH
41719: LD_INT 45
41721: PUSH
41722: LD_INT 75
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41730: LD_VAR 0 6
41734: PPUSH
41735: CALL_OW 264
41739: PUSH
41740: LD_INT 26
41742: PUSH
41743: EMPTY
41744: LIST
41745: IN
41746: IFFALSE 41767
// points := [ 120 , 30 , 80 ] ;
41748: LD_ADDR_VAR 0 9
41752: PUSH
41753: LD_INT 120
41755: PUSH
41756: LD_INT 30
41758: PUSH
41759: LD_INT 80
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: LIST
41766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41767: LD_VAR 0 6
41771: PPUSH
41772: CALL_OW 264
41776: PUSH
41777: LD_INT 22
41779: PUSH
41780: EMPTY
41781: LIST
41782: IN
41783: IFFALSE 41804
// points := [ 40 , 1 , 1 ] ;
41785: LD_ADDR_VAR 0 9
41789: PUSH
41790: LD_INT 40
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41804: LD_VAR 0 6
41808: PPUSH
41809: CALL_OW 264
41813: PUSH
41814: LD_INT 29
41816: PUSH
41817: EMPTY
41818: LIST
41819: IN
41820: IFFALSE 41841
// points := [ 70 , 200 , 400 ] ;
41822: LD_ADDR_VAR 0 9
41826: PUSH
41827: LD_INT 70
41829: PUSH
41830: LD_INT 200
41832: PUSH
41833: LD_INT 400
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41841: LD_VAR 0 6
41845: PPUSH
41846: CALL_OW 264
41850: PUSH
41851: LD_INT 14
41853: PUSH
41854: LD_INT 53
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: IN
41861: IFFALSE 41882
// points := [ 40 , 10 , 20 ] ;
41863: LD_ADDR_VAR 0 9
41867: PUSH
41868: LD_INT 40
41870: PUSH
41871: LD_INT 10
41873: PUSH
41874: LD_INT 20
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41882: LD_VAR 0 6
41886: PPUSH
41887: CALL_OW 264
41891: PUSH
41892: LD_INT 9
41894: PUSH
41895: EMPTY
41896: LIST
41897: IN
41898: IFFALSE 41919
// points := [ 5 , 70 , 20 ] ;
41900: LD_ADDR_VAR 0 9
41904: PUSH
41905: LD_INT 5
41907: PUSH
41908: LD_INT 70
41910: PUSH
41911: LD_INT 20
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41919: LD_VAR 0 6
41923: PPUSH
41924: CALL_OW 264
41928: PUSH
41929: LD_INT 10
41931: PUSH
41932: EMPTY
41933: LIST
41934: IN
41935: IFFALSE 41956
// points := [ 35 , 110 , 70 ] ;
41937: LD_ADDR_VAR 0 9
41941: PUSH
41942: LD_INT 35
41944: PUSH
41945: LD_INT 110
41947: PUSH
41948: LD_INT 70
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41956: LD_VAR 0 6
41960: PPUSH
41961: CALL_OW 265
41965: PUSH
41966: LD_INT 25
41968: EQUAL
41969: IFFALSE 41990
// points := [ 80 , 65 , 100 ] ;
41971: LD_ADDR_VAR 0 9
41975: PUSH
41976: LD_INT 80
41978: PUSH
41979: LD_INT 65
41981: PUSH
41982: LD_INT 100
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: LIST
41989: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41990: LD_VAR 0 6
41994: PPUSH
41995: CALL_OW 263
41999: PUSH
42000: LD_INT 1
42002: EQUAL
42003: IFFALSE 42038
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42005: LD_ADDR_VAR 0 10
42009: PUSH
42010: LD_VAR 0 10
42014: PUSH
42015: LD_VAR 0 6
42019: PPUSH
42020: CALL_OW 311
42024: PPUSH
42025: LD_INT 3
42027: PPUSH
42028: CALL_OW 259
42032: PUSH
42033: LD_INT 4
42035: MUL
42036: MUL
42037: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42038: LD_VAR 0 6
42042: PPUSH
42043: CALL_OW 263
42047: PUSH
42048: LD_INT 2
42050: EQUAL
42051: IFFALSE 42102
// begin j := IsControledBy ( i ) ;
42053: LD_ADDR_VAR 0 7
42057: PUSH
42058: LD_VAR 0 6
42062: PPUSH
42063: CALL_OW 312
42067: ST_TO_ADDR
// if j then
42068: LD_VAR 0 7
42072: IFFALSE 42102
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42074: LD_ADDR_VAR 0 10
42078: PUSH
42079: LD_VAR 0 10
42083: PUSH
42084: LD_VAR 0 7
42088: PPUSH
42089: LD_INT 3
42091: PPUSH
42092: CALL_OW 259
42096: PUSH
42097: LD_INT 3
42099: MUL
42100: MUL
42101: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42102: LD_VAR 0 6
42106: PPUSH
42107: CALL_OW 264
42111: PUSH
42112: LD_INT 5
42114: PUSH
42115: LD_INT 6
42117: PUSH
42118: LD_INT 46
42120: PUSH
42121: LD_INT 44
42123: PUSH
42124: LD_INT 47
42126: PUSH
42127: LD_INT 45
42129: PUSH
42130: LD_INT 28
42132: PUSH
42133: LD_INT 7
42135: PUSH
42136: LD_INT 27
42138: PUSH
42139: LD_INT 29
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: IN
42154: PUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: LD_INT 52
42162: PPUSH
42163: CALL_OW 321
42167: PUSH
42168: LD_INT 2
42170: EQUAL
42171: AND
42172: IFFALSE 42189
// bpoints := bpoints * 1.2 ;
42174: LD_ADDR_VAR 0 10
42178: PUSH
42179: LD_VAR 0 10
42183: PUSH
42184: LD_REAL  1.20000000000000E+0000
42187: MUL
42188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42189: LD_VAR 0 6
42193: PPUSH
42194: CALL_OW 264
42198: PUSH
42199: LD_INT 6
42201: PUSH
42202: LD_INT 46
42204: PUSH
42205: LD_INT 47
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: LIST
42212: IN
42213: IFFALSE 42230
// bpoints := bpoints * 1.2 ;
42215: LD_ADDR_VAR 0 10
42219: PUSH
42220: LD_VAR 0 10
42224: PUSH
42225: LD_REAL  1.20000000000000E+0000
42228: MUL
42229: ST_TO_ADDR
// end ; unit_building :
42230: GO 42244
42232: LD_INT 3
42234: DOUBLE
42235: EQUAL
42236: IFTRUE 42240
42238: GO 42243
42240: POP
// ; end ;
42241: GO 42244
42243: POP
// for j = 1 to 3 do
42244: LD_ADDR_VAR 0 7
42248: PUSH
42249: DOUBLE
42250: LD_INT 1
42252: DEC
42253: ST_TO_ADDR
42254: LD_INT 3
42256: PUSH
42257: FOR_TO
42258: IFFALSE 42311
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42260: LD_ADDR_VAR 0 5
42264: PUSH
42265: LD_VAR 0 5
42269: PPUSH
42270: LD_VAR 0 7
42274: PPUSH
42275: LD_VAR 0 5
42279: PUSH
42280: LD_VAR 0 7
42284: ARRAY
42285: PUSH
42286: LD_VAR 0 9
42290: PUSH
42291: LD_VAR 0 7
42295: ARRAY
42296: PUSH
42297: LD_VAR 0 10
42301: MUL
42302: PLUS
42303: PPUSH
42304: CALL_OW 1
42308: ST_TO_ADDR
42309: GO 42257
42311: POP
42312: POP
// end ;
42313: GO 40792
42315: POP
42316: POP
// result := Replace ( result , 4 , tmp ) ;
42317: LD_ADDR_VAR 0 5
42321: PUSH
42322: LD_VAR 0 5
42326: PPUSH
42327: LD_INT 4
42329: PPUSH
42330: LD_VAR 0 8
42334: PPUSH
42335: CALL_OW 1
42339: ST_TO_ADDR
// end ;
42340: LD_VAR 0 5
42344: RET
// export function DangerAtRange ( unit , range ) ; begin
42345: LD_INT 0
42347: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_VAR 0 1
42357: PPUSH
42358: CALL_OW 255
42362: PPUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 250
42372: PPUSH
42373: LD_VAR 0 1
42377: PPUSH
42378: CALL_OW 251
42382: PPUSH
42383: LD_VAR 0 2
42387: PPUSH
42388: CALL 40644 0 4
42392: ST_TO_ADDR
// end ;
42393: LD_VAR 0 3
42397: RET
// export function DangerInArea ( side , area ) ; begin
42398: LD_INT 0
42400: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42401: LD_ADDR_VAR 0 3
42405: PUSH
42406: LD_VAR 0 2
42410: PPUSH
42411: LD_INT 81
42413: PUSH
42414: LD_VAR 0 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PPUSH
42423: CALL_OW 70
42427: ST_TO_ADDR
// end ;
42428: LD_VAR 0 3
42432: RET
// export function IsExtension ( b ) ; begin
42433: LD_INT 0
42435: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42436: LD_ADDR_VAR 0 2
42440: PUSH
42441: LD_VAR 0 1
42445: PUSH
42446: LD_INT 23
42448: PUSH
42449: LD_INT 20
42451: PUSH
42452: LD_INT 22
42454: PUSH
42455: LD_INT 17
42457: PUSH
42458: LD_INT 24
42460: PUSH
42461: LD_INT 21
42463: PUSH
42464: LD_INT 19
42466: PUSH
42467: LD_INT 16
42469: PUSH
42470: LD_INT 25
42472: PUSH
42473: LD_INT 18
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: IN
42488: ST_TO_ADDR
// end ;
42489: LD_VAR 0 2
42493: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42494: LD_INT 0
42496: PPUSH
42497: PPUSH
42498: PPUSH
// result := [ ] ;
42499: LD_ADDR_VAR 0 4
42503: PUSH
42504: EMPTY
42505: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42506: LD_ADDR_VAR 0 5
42510: PUSH
42511: LD_VAR 0 2
42515: PPUSH
42516: LD_INT 21
42518: PUSH
42519: LD_INT 3
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PPUSH
42526: CALL_OW 70
42530: ST_TO_ADDR
// if not tmp then
42531: LD_VAR 0 5
42535: NOT
42536: IFFALSE 42540
// exit ;
42538: GO 42604
// if checkLink then
42540: LD_VAR 0 3
42544: IFFALSE 42594
// begin for i in tmp do
42546: LD_ADDR_VAR 0 6
42550: PUSH
42551: LD_VAR 0 5
42555: PUSH
42556: FOR_IN
42557: IFFALSE 42592
// if GetBase ( i ) <> base then
42559: LD_VAR 0 6
42563: PPUSH
42564: CALL_OW 274
42568: PUSH
42569: LD_VAR 0 1
42573: NONEQUAL
42574: IFFALSE 42590
// ComLinkToBase ( base , i ) ;
42576: LD_VAR 0 1
42580: PPUSH
42581: LD_VAR 0 6
42585: PPUSH
42586: CALL_OW 169
42590: GO 42556
42592: POP
42593: POP
// end ; result := tmp ;
42594: LD_ADDR_VAR 0 4
42598: PUSH
42599: LD_VAR 0 5
42603: ST_TO_ADDR
// end ;
42604: LD_VAR 0 4
42608: RET
// export function ComComplete ( units , b ) ; var i ; begin
42609: LD_INT 0
42611: PPUSH
42612: PPUSH
// if not units then
42613: LD_VAR 0 1
42617: NOT
42618: IFFALSE 42622
// exit ;
42620: GO 42712
// for i in units do
42622: LD_ADDR_VAR 0 4
42626: PUSH
42627: LD_VAR 0 1
42631: PUSH
42632: FOR_IN
42633: IFFALSE 42710
// if BuildingStatus ( b ) = bs_build then
42635: LD_VAR 0 2
42639: PPUSH
42640: CALL_OW 461
42644: PUSH
42645: LD_INT 1
42647: EQUAL
42648: IFFALSE 42708
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42650: LD_VAR 0 4
42654: PPUSH
42655: LD_STRING h
42657: PUSH
42658: LD_VAR 0 2
42662: PPUSH
42663: CALL_OW 250
42667: PUSH
42668: LD_VAR 0 2
42672: PPUSH
42673: CALL_OW 251
42677: PUSH
42678: LD_VAR 0 2
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: PUSH
42701: EMPTY
42702: LIST
42703: PPUSH
42704: CALL_OW 446
42708: GO 42632
42710: POP
42711: POP
// end ;
42712: LD_VAR 0 3
42716: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42717: LD_INT 0
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
42723: PPUSH
42724: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42725: LD_VAR 0 1
42729: NOT
42730: PUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 263
42740: PUSH
42741: LD_INT 2
42743: NONEQUAL
42744: OR
42745: IFFALSE 42749
// exit ;
42747: GO 43065
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42749: LD_ADDR_VAR 0 6
42753: PUSH
42754: LD_INT 22
42756: PUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 255
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 30
42776: PUSH
42777: LD_INT 36
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 34
42786: PUSH
42787: LD_INT 31
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PPUSH
42803: CALL_OW 69
42807: ST_TO_ADDR
// if not tmp then
42808: LD_VAR 0 6
42812: NOT
42813: IFFALSE 42817
// exit ;
42815: GO 43065
// result := [ ] ;
42817: LD_ADDR_VAR 0 2
42821: PUSH
42822: EMPTY
42823: ST_TO_ADDR
// for i in tmp do
42824: LD_ADDR_VAR 0 3
42828: PUSH
42829: LD_VAR 0 6
42833: PUSH
42834: FOR_IN
42835: IFFALSE 42906
// begin t := UnitsInside ( i ) ;
42837: LD_ADDR_VAR 0 4
42841: PUSH
42842: LD_VAR 0 3
42846: PPUSH
42847: CALL_OW 313
42851: ST_TO_ADDR
// if t then
42852: LD_VAR 0 4
42856: IFFALSE 42904
// for j in t do
42858: LD_ADDR_VAR 0 7
42862: PUSH
42863: LD_VAR 0 4
42867: PUSH
42868: FOR_IN
42869: IFFALSE 42902
// result := Replace ( result , result + 1 , j ) ;
42871: LD_ADDR_VAR 0 2
42875: PUSH
42876: LD_VAR 0 2
42880: PPUSH
42881: LD_VAR 0 2
42885: PUSH
42886: LD_INT 1
42888: PLUS
42889: PPUSH
42890: LD_VAR 0 7
42894: PPUSH
42895: CALL_OW 1
42899: ST_TO_ADDR
42900: GO 42868
42902: POP
42903: POP
// end ;
42904: GO 42834
42906: POP
42907: POP
// if not result then
42908: LD_VAR 0 2
42912: NOT
42913: IFFALSE 42917
// exit ;
42915: GO 43065
// mech := result [ 1 ] ;
42917: LD_ADDR_VAR 0 5
42921: PUSH
42922: LD_VAR 0 2
42926: PUSH
42927: LD_INT 1
42929: ARRAY
42930: ST_TO_ADDR
// if result > 1 then
42931: LD_VAR 0 2
42935: PUSH
42936: LD_INT 1
42938: GREATER
42939: IFFALSE 43051
// begin for i = 2 to result do
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: DOUBLE
42947: LD_INT 2
42949: DEC
42950: ST_TO_ADDR
42951: LD_VAR 0 2
42955: PUSH
42956: FOR_TO
42957: IFFALSE 43049
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42959: LD_ADDR_VAR 0 4
42963: PUSH
42964: LD_VAR 0 2
42968: PUSH
42969: LD_VAR 0 3
42973: ARRAY
42974: PPUSH
42975: LD_INT 3
42977: PPUSH
42978: CALL_OW 259
42982: PUSH
42983: LD_VAR 0 2
42987: PUSH
42988: LD_VAR 0 3
42992: ARRAY
42993: PPUSH
42994: CALL_OW 432
42998: MINUS
42999: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43000: LD_VAR 0 4
43004: PUSH
43005: LD_VAR 0 5
43009: PPUSH
43010: LD_INT 3
43012: PPUSH
43013: CALL_OW 259
43017: PUSH
43018: LD_VAR 0 5
43022: PPUSH
43023: CALL_OW 432
43027: MINUS
43028: GREATEREQUAL
43029: IFFALSE 43047
// mech := result [ i ] ;
43031: LD_ADDR_VAR 0 5
43035: PUSH
43036: LD_VAR 0 2
43040: PUSH
43041: LD_VAR 0 3
43045: ARRAY
43046: ST_TO_ADDR
// end ;
43047: GO 42956
43049: POP
43050: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43051: LD_VAR 0 1
43055: PPUSH
43056: LD_VAR 0 5
43060: PPUSH
43061: CALL_OW 135
// end ;
43065: LD_VAR 0 2
43069: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43070: LD_INT 0
43072: PPUSH
43073: PPUSH
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
43079: PPUSH
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
// result := [ ] ;
43085: LD_ADDR_VAR 0 7
43089: PUSH
43090: EMPTY
43091: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43092: LD_VAR 0 1
43096: PPUSH
43097: CALL_OW 266
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: IN
43112: NOT
43113: IFFALSE 43117
// exit ;
43115: GO 44751
// if name then
43117: LD_VAR 0 3
43121: IFFALSE 43137
// SetBName ( base_dep , name ) ;
43123: LD_VAR 0 1
43127: PPUSH
43128: LD_VAR 0 3
43132: PPUSH
43133: CALL_OW 500
// base := GetBase ( base_dep ) ;
43137: LD_ADDR_VAR 0 15
43141: PUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL_OW 274
43151: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43152: LD_ADDR_VAR 0 16
43156: PUSH
43157: LD_VAR 0 1
43161: PPUSH
43162: CALL_OW 255
43166: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43167: LD_ADDR_VAR 0 17
43171: PUSH
43172: LD_VAR 0 1
43176: PPUSH
43177: CALL_OW 248
43181: ST_TO_ADDR
// if sources then
43182: LD_VAR 0 5
43186: IFFALSE 43233
// for i = 1 to 3 do
43188: LD_ADDR_VAR 0 8
43192: PUSH
43193: DOUBLE
43194: LD_INT 1
43196: DEC
43197: ST_TO_ADDR
43198: LD_INT 3
43200: PUSH
43201: FOR_TO
43202: IFFALSE 43231
// AddResourceType ( base , i , sources [ i ] ) ;
43204: LD_VAR 0 15
43208: PPUSH
43209: LD_VAR 0 8
43213: PPUSH
43214: LD_VAR 0 5
43218: PUSH
43219: LD_VAR 0 8
43223: ARRAY
43224: PPUSH
43225: CALL_OW 276
43229: GO 43201
43231: POP
43232: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43233: LD_ADDR_VAR 0 18
43237: PUSH
43238: LD_VAR 0 15
43242: PPUSH
43243: LD_VAR 0 2
43247: PPUSH
43248: LD_INT 1
43250: PPUSH
43251: CALL 42494 0 3
43255: ST_TO_ADDR
// InitHc ;
43256: CALL_OW 19
// InitUc ;
43260: CALL_OW 18
// uc_side := side ;
43264: LD_ADDR_OWVAR 20
43268: PUSH
43269: LD_VAR 0 16
43273: ST_TO_ADDR
// uc_nation := nation ;
43274: LD_ADDR_OWVAR 21
43278: PUSH
43279: LD_VAR 0 17
43283: ST_TO_ADDR
// if buildings then
43284: LD_VAR 0 18
43288: IFFALSE 44610
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43290: LD_ADDR_VAR 0 19
43294: PUSH
43295: LD_VAR 0 18
43299: PPUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 30
43305: PUSH
43306: LD_INT 29
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 30
43315: PUSH
43316: LD_INT 30
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: PPUSH
43328: CALL_OW 72
43332: ST_TO_ADDR
// if tmp then
43333: LD_VAR 0 19
43337: IFFALSE 43385
// for i in tmp do
43339: LD_ADDR_VAR 0 8
43343: PUSH
43344: LD_VAR 0 19
43348: PUSH
43349: FOR_IN
43350: IFFALSE 43383
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43352: LD_VAR 0 8
43356: PPUSH
43357: CALL_OW 250
43361: PPUSH
43362: LD_VAR 0 8
43366: PPUSH
43367: CALL_OW 251
43371: PPUSH
43372: LD_VAR 0 16
43376: PPUSH
43377: CALL_OW 441
43381: GO 43349
43383: POP
43384: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43385: LD_VAR 0 18
43389: PPUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 30
43395: PUSH
43396: LD_INT 32
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 30
43405: PUSH
43406: LD_INT 33
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: PPUSH
43418: CALL_OW 72
43422: IFFALSE 43510
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43424: LD_ADDR_VAR 0 8
43428: PUSH
43429: LD_VAR 0 18
43433: PPUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 30
43439: PUSH
43440: LD_INT 32
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 30
43449: PUSH
43450: LD_INT 33
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: PPUSH
43462: CALL_OW 72
43466: PUSH
43467: FOR_IN
43468: IFFALSE 43508
// begin if not GetBWeapon ( i ) then
43470: LD_VAR 0 8
43474: PPUSH
43475: CALL_OW 269
43479: NOT
43480: IFFALSE 43506
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43482: LD_VAR 0 8
43486: PPUSH
43487: LD_VAR 0 8
43491: PPUSH
43492: LD_VAR 0 2
43496: PPUSH
43497: CALL 44756 0 2
43501: PPUSH
43502: CALL_OW 431
// end ;
43506: GO 43467
43508: POP
43509: POP
// end ; for i = 1 to personel do
43510: LD_ADDR_VAR 0 8
43514: PUSH
43515: DOUBLE
43516: LD_INT 1
43518: DEC
43519: ST_TO_ADDR
43520: LD_VAR 0 6
43524: PUSH
43525: FOR_TO
43526: IFFALSE 44590
// begin if i > 4 then
43528: LD_VAR 0 8
43532: PUSH
43533: LD_INT 4
43535: GREATER
43536: IFFALSE 43540
// break ;
43538: GO 44590
// case i of 1 :
43540: LD_VAR 0 8
43544: PUSH
43545: LD_INT 1
43547: DOUBLE
43548: EQUAL
43549: IFTRUE 43553
43551: GO 43633
43553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43554: LD_ADDR_VAR 0 12
43558: PUSH
43559: LD_VAR 0 18
43563: PPUSH
43564: LD_INT 22
43566: PUSH
43567: LD_VAR 0 16
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 58
43578: PUSH
43579: EMPTY
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 30
43587: PUSH
43588: LD_INT 32
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 30
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 30
43607: PUSH
43608: LD_INT 5
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: PPUSH
43626: CALL_OW 72
43630: ST_TO_ADDR
43631: GO 43855
43633: LD_INT 2
43635: DOUBLE
43636: EQUAL
43637: IFTRUE 43641
43639: GO 43703
43641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43642: LD_ADDR_VAR 0 12
43646: PUSH
43647: LD_VAR 0 18
43651: PPUSH
43652: LD_INT 22
43654: PUSH
43655: LD_VAR 0 16
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 30
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 30
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PPUSH
43696: CALL_OW 72
43700: ST_TO_ADDR
43701: GO 43855
43703: LD_INT 3
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43711
43709: GO 43773
43711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43712: LD_ADDR_VAR 0 12
43716: PUSH
43717: LD_VAR 0 18
43721: PPUSH
43722: LD_INT 22
43724: PUSH
43725: LD_VAR 0 16
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 30
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 30
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PPUSH
43766: CALL_OW 72
43770: ST_TO_ADDR
43771: GO 43855
43773: LD_INT 4
43775: DOUBLE
43776: EQUAL
43777: IFTRUE 43781
43779: GO 43854
43781: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43782: LD_ADDR_VAR 0 12
43786: PUSH
43787: LD_VAR 0 18
43791: PPUSH
43792: LD_INT 22
43794: PUSH
43795: LD_VAR 0 16
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 30
43809: PUSH
43810: LD_INT 6
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 30
43819: PUSH
43820: LD_INT 7
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 30
43829: PUSH
43830: LD_INT 8
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PPUSH
43847: CALL_OW 72
43851: ST_TO_ADDR
43852: GO 43855
43854: POP
// if i = 1 then
43855: LD_VAR 0 8
43859: PUSH
43860: LD_INT 1
43862: EQUAL
43863: IFFALSE 43974
// begin tmp := [ ] ;
43865: LD_ADDR_VAR 0 19
43869: PUSH
43870: EMPTY
43871: ST_TO_ADDR
// for j in f do
43872: LD_ADDR_VAR 0 9
43876: PUSH
43877: LD_VAR 0 12
43881: PUSH
43882: FOR_IN
43883: IFFALSE 43956
// if GetBType ( j ) = b_bunker then
43885: LD_VAR 0 9
43889: PPUSH
43890: CALL_OW 266
43894: PUSH
43895: LD_INT 32
43897: EQUAL
43898: IFFALSE 43925
// tmp := Insert ( tmp , 1 , j ) else
43900: LD_ADDR_VAR 0 19
43904: PUSH
43905: LD_VAR 0 19
43909: PPUSH
43910: LD_INT 1
43912: PPUSH
43913: LD_VAR 0 9
43917: PPUSH
43918: CALL_OW 2
43922: ST_TO_ADDR
43923: GO 43954
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43925: LD_ADDR_VAR 0 19
43929: PUSH
43930: LD_VAR 0 19
43934: PPUSH
43935: LD_VAR 0 19
43939: PUSH
43940: LD_INT 1
43942: PLUS
43943: PPUSH
43944: LD_VAR 0 9
43948: PPUSH
43949: CALL_OW 2
43953: ST_TO_ADDR
43954: GO 43882
43956: POP
43957: POP
// if tmp then
43958: LD_VAR 0 19
43962: IFFALSE 43974
// f := tmp ;
43964: LD_ADDR_VAR 0 12
43968: PUSH
43969: LD_VAR 0 19
43973: ST_TO_ADDR
// end ; x := personel [ i ] ;
43974: LD_ADDR_VAR 0 13
43978: PUSH
43979: LD_VAR 0 6
43983: PUSH
43984: LD_VAR 0 8
43988: ARRAY
43989: ST_TO_ADDR
// if x = - 1 then
43990: LD_VAR 0 13
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: EQUAL
43999: IFFALSE 44208
// begin for j in f do
44001: LD_ADDR_VAR 0 9
44005: PUSH
44006: LD_VAR 0 12
44010: PUSH
44011: FOR_IN
44012: IFFALSE 44204
// repeat InitHc ;
44014: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44018: LD_VAR 0 9
44022: PPUSH
44023: CALL_OW 266
44027: PUSH
44028: LD_INT 5
44030: EQUAL
44031: IFFALSE 44101
// begin if UnitsInside ( j ) < 3 then
44033: LD_VAR 0 9
44037: PPUSH
44038: CALL_OW 313
44042: PUSH
44043: LD_INT 3
44045: LESS
44046: IFFALSE 44082
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44048: LD_INT 0
44050: PPUSH
44051: LD_INT 5
44053: PUSH
44054: LD_INT 8
44056: PUSH
44057: LD_INT 9
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: LD_VAR 0 17
44069: ARRAY
44070: PPUSH
44071: LD_VAR 0 4
44075: PPUSH
44076: CALL_OW 380
44080: GO 44099
// PrepareHuman ( false , i , skill ) ;
44082: LD_INT 0
44084: PPUSH
44085: LD_VAR 0 8
44089: PPUSH
44090: LD_VAR 0 4
44094: PPUSH
44095: CALL_OW 380
// end else
44099: GO 44118
// PrepareHuman ( false , i , skill ) ;
44101: LD_INT 0
44103: PPUSH
44104: LD_VAR 0 8
44108: PPUSH
44109: LD_VAR 0 4
44113: PPUSH
44114: CALL_OW 380
// un := CreateHuman ;
44118: LD_ADDR_VAR 0 14
44122: PUSH
44123: CALL_OW 44
44127: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44128: LD_ADDR_VAR 0 7
44132: PUSH
44133: LD_VAR 0 7
44137: PPUSH
44138: LD_INT 1
44140: PPUSH
44141: LD_VAR 0 14
44145: PPUSH
44146: CALL_OW 2
44150: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44151: LD_VAR 0 14
44155: PPUSH
44156: LD_VAR 0 9
44160: PPUSH
44161: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44165: LD_VAR 0 9
44169: PPUSH
44170: CALL_OW 313
44174: PUSH
44175: LD_INT 6
44177: EQUAL
44178: PUSH
44179: LD_VAR 0 9
44183: PPUSH
44184: CALL_OW 266
44188: PUSH
44189: LD_INT 32
44191: PUSH
44192: LD_INT 31
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: IN
44199: OR
44200: IFFALSE 44014
44202: GO 44011
44204: POP
44205: POP
// end else
44206: GO 44588
// for j = 1 to x do
44208: LD_ADDR_VAR 0 9
44212: PUSH
44213: DOUBLE
44214: LD_INT 1
44216: DEC
44217: ST_TO_ADDR
44218: LD_VAR 0 13
44222: PUSH
44223: FOR_TO
44224: IFFALSE 44586
// begin InitHc ;
44226: CALL_OW 19
// if not f then
44230: LD_VAR 0 12
44234: NOT
44235: IFFALSE 44324
// begin PrepareHuman ( false , i , skill ) ;
44237: LD_INT 0
44239: PPUSH
44240: LD_VAR 0 8
44244: PPUSH
44245: LD_VAR 0 4
44249: PPUSH
44250: CALL_OW 380
// un := CreateHuman ;
44254: LD_ADDR_VAR 0 14
44258: PUSH
44259: CALL_OW 44
44263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44264: LD_ADDR_VAR 0 7
44268: PUSH
44269: LD_VAR 0 7
44273: PPUSH
44274: LD_INT 1
44276: PPUSH
44277: LD_VAR 0 14
44281: PPUSH
44282: CALL_OW 2
44286: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44287: LD_VAR 0 14
44291: PPUSH
44292: LD_VAR 0 1
44296: PPUSH
44297: CALL_OW 250
44301: PPUSH
44302: LD_VAR 0 1
44306: PPUSH
44307: CALL_OW 251
44311: PPUSH
44312: LD_INT 10
44314: PPUSH
44315: LD_INT 0
44317: PPUSH
44318: CALL_OW 50
// continue ;
44322: GO 44223
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44324: LD_VAR 0 12
44328: PUSH
44329: LD_INT 1
44331: ARRAY
44332: PPUSH
44333: CALL_OW 313
44337: PUSH
44338: LD_VAR 0 12
44342: PUSH
44343: LD_INT 1
44345: ARRAY
44346: PPUSH
44347: CALL_OW 266
44351: PUSH
44352: LD_INT 32
44354: PUSH
44355: LD_INT 31
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: IN
44362: AND
44363: PUSH
44364: LD_VAR 0 12
44368: PUSH
44369: LD_INT 1
44371: ARRAY
44372: PPUSH
44373: CALL_OW 313
44377: PUSH
44378: LD_INT 6
44380: EQUAL
44381: OR
44382: IFFALSE 44402
// f := Delete ( f , 1 ) ;
44384: LD_ADDR_VAR 0 12
44388: PUSH
44389: LD_VAR 0 12
44393: PPUSH
44394: LD_INT 1
44396: PPUSH
44397: CALL_OW 3
44401: ST_TO_ADDR
// if not f then
44402: LD_VAR 0 12
44406: NOT
44407: IFFALSE 44425
// begin x := x + 2 ;
44409: LD_ADDR_VAR 0 13
44413: PUSH
44414: LD_VAR 0 13
44418: PUSH
44419: LD_INT 2
44421: PLUS
44422: ST_TO_ADDR
// continue ;
44423: GO 44223
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44425: LD_VAR 0 12
44429: PUSH
44430: LD_INT 1
44432: ARRAY
44433: PPUSH
44434: CALL_OW 266
44438: PUSH
44439: LD_INT 5
44441: EQUAL
44442: IFFALSE 44516
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44444: LD_VAR 0 12
44448: PUSH
44449: LD_INT 1
44451: ARRAY
44452: PPUSH
44453: CALL_OW 313
44457: PUSH
44458: LD_INT 3
44460: LESS
44461: IFFALSE 44497
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44463: LD_INT 0
44465: PPUSH
44466: LD_INT 5
44468: PUSH
44469: LD_INT 8
44471: PUSH
44472: LD_INT 9
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: PUSH
44480: LD_VAR 0 17
44484: ARRAY
44485: PPUSH
44486: LD_VAR 0 4
44490: PPUSH
44491: CALL_OW 380
44495: GO 44514
// PrepareHuman ( false , i , skill ) ;
44497: LD_INT 0
44499: PPUSH
44500: LD_VAR 0 8
44504: PPUSH
44505: LD_VAR 0 4
44509: PPUSH
44510: CALL_OW 380
// end else
44514: GO 44533
// PrepareHuman ( false , i , skill ) ;
44516: LD_INT 0
44518: PPUSH
44519: LD_VAR 0 8
44523: PPUSH
44524: LD_VAR 0 4
44528: PPUSH
44529: CALL_OW 380
// un := CreateHuman ;
44533: LD_ADDR_VAR 0 14
44537: PUSH
44538: CALL_OW 44
44542: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44543: LD_ADDR_VAR 0 7
44547: PUSH
44548: LD_VAR 0 7
44552: PPUSH
44553: LD_INT 1
44555: PPUSH
44556: LD_VAR 0 14
44560: PPUSH
44561: CALL_OW 2
44565: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44566: LD_VAR 0 14
44570: PPUSH
44571: LD_VAR 0 12
44575: PUSH
44576: LD_INT 1
44578: ARRAY
44579: PPUSH
44580: CALL_OW 52
// end ;
44584: GO 44223
44586: POP
44587: POP
// end ;
44588: GO 43525
44590: POP
44591: POP
// result := result ^ buildings ;
44592: LD_ADDR_VAR 0 7
44596: PUSH
44597: LD_VAR 0 7
44601: PUSH
44602: LD_VAR 0 18
44606: ADD
44607: ST_TO_ADDR
// end else
44608: GO 44751
// begin for i = 1 to personel do
44610: LD_ADDR_VAR 0 8
44614: PUSH
44615: DOUBLE
44616: LD_INT 1
44618: DEC
44619: ST_TO_ADDR
44620: LD_VAR 0 6
44624: PUSH
44625: FOR_TO
44626: IFFALSE 44749
// begin if i > 4 then
44628: LD_VAR 0 8
44632: PUSH
44633: LD_INT 4
44635: GREATER
44636: IFFALSE 44640
// break ;
44638: GO 44749
// x := personel [ i ] ;
44640: LD_ADDR_VAR 0 13
44644: PUSH
44645: LD_VAR 0 6
44649: PUSH
44650: LD_VAR 0 8
44654: ARRAY
44655: ST_TO_ADDR
// if x = - 1 then
44656: LD_VAR 0 13
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: EQUAL
44665: IFFALSE 44669
// continue ;
44667: GO 44625
// PrepareHuman ( false , i , skill ) ;
44669: LD_INT 0
44671: PPUSH
44672: LD_VAR 0 8
44676: PPUSH
44677: LD_VAR 0 4
44681: PPUSH
44682: CALL_OW 380
// un := CreateHuman ;
44686: LD_ADDR_VAR 0 14
44690: PUSH
44691: CALL_OW 44
44695: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44696: LD_VAR 0 14
44700: PPUSH
44701: LD_VAR 0 1
44705: PPUSH
44706: CALL_OW 250
44710: PPUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 251
44720: PPUSH
44721: LD_INT 10
44723: PPUSH
44724: LD_INT 0
44726: PPUSH
44727: CALL_OW 50
// result := result ^ un ;
44731: LD_ADDR_VAR 0 7
44735: PUSH
44736: LD_VAR 0 7
44740: PUSH
44741: LD_VAR 0 14
44745: ADD
44746: ST_TO_ADDR
// end ;
44747: GO 44625
44749: POP
44750: POP
// end ; end ;
44751: LD_VAR 0 7
44755: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44756: LD_INT 0
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
// result := false ;
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 0
44781: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44782: LD_VAR 0 1
44786: NOT
44787: PUSH
44788: LD_VAR 0 1
44792: PPUSH
44793: CALL_OW 266
44797: PUSH
44798: LD_INT 32
44800: PUSH
44801: LD_INT 33
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: IN
44808: NOT
44809: OR
44810: IFFALSE 44814
// exit ;
44812: GO 45923
// nat := GetNation ( tower ) ;
44814: LD_ADDR_VAR 0 12
44818: PUSH
44819: LD_VAR 0 1
44823: PPUSH
44824: CALL_OW 248
44828: ST_TO_ADDR
// side := GetSide ( tower ) ;
44829: LD_ADDR_VAR 0 16
44833: PUSH
44834: LD_VAR 0 1
44838: PPUSH
44839: CALL_OW 255
44843: ST_TO_ADDR
// x := GetX ( tower ) ;
44844: LD_ADDR_VAR 0 10
44848: PUSH
44849: LD_VAR 0 1
44853: PPUSH
44854: CALL_OW 250
44858: ST_TO_ADDR
// y := GetY ( tower ) ;
44859: LD_ADDR_VAR 0 11
44863: PUSH
44864: LD_VAR 0 1
44868: PPUSH
44869: CALL_OW 251
44873: ST_TO_ADDR
// if not x or not y then
44874: LD_VAR 0 10
44878: NOT
44879: PUSH
44880: LD_VAR 0 11
44884: NOT
44885: OR
44886: IFFALSE 44890
// exit ;
44888: GO 45923
// weapon := 0 ;
44890: LD_ADDR_VAR 0 18
44894: PUSH
44895: LD_INT 0
44897: ST_TO_ADDR
// fac_list := [ ] ;
44898: LD_ADDR_VAR 0 17
44902: PUSH
44903: EMPTY
44904: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44905: LD_ADDR_VAR 0 6
44909: PUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: CALL_OW 274
44919: PPUSH
44920: LD_VAR 0 2
44924: PPUSH
44925: LD_INT 0
44927: PPUSH
44928: CALL 42494 0 3
44932: PPUSH
44933: LD_INT 30
44935: PUSH
44936: LD_INT 3
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PPUSH
44943: CALL_OW 72
44947: ST_TO_ADDR
// if not factories then
44948: LD_VAR 0 6
44952: NOT
44953: IFFALSE 44957
// exit ;
44955: GO 45923
// for i in factories do
44957: LD_ADDR_VAR 0 8
44961: PUSH
44962: LD_VAR 0 6
44966: PUSH
44967: FOR_IN
44968: IFFALSE 44993
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44970: LD_ADDR_VAR 0 17
44974: PUSH
44975: LD_VAR 0 17
44979: PUSH
44980: LD_VAR 0 8
44984: PPUSH
44985: CALL_OW 478
44989: UNION
44990: ST_TO_ADDR
44991: GO 44967
44993: POP
44994: POP
// if not fac_list then
44995: LD_VAR 0 17
44999: NOT
45000: IFFALSE 45004
// exit ;
45002: GO 45923
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45004: LD_ADDR_VAR 0 5
45008: PUSH
45009: LD_INT 4
45011: PUSH
45012: LD_INT 5
45014: PUSH
45015: LD_INT 9
45017: PUSH
45018: LD_INT 10
45020: PUSH
45021: LD_INT 6
45023: PUSH
45024: LD_INT 7
45026: PUSH
45027: LD_INT 11
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 27
45041: PUSH
45042: LD_INT 28
45044: PUSH
45045: LD_INT 26
45047: PUSH
45048: LD_INT 30
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 43
45059: PUSH
45060: LD_INT 44
45062: PUSH
45063: LD_INT 46
45065: PUSH
45066: LD_INT 45
45068: PUSH
45069: LD_INT 47
45071: PUSH
45072: LD_INT 49
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: PUSH
45088: LD_VAR 0 12
45092: ARRAY
45093: ST_TO_ADDR
// list := list isect fac_list ;
45094: LD_ADDR_VAR 0 5
45098: PUSH
45099: LD_VAR 0 5
45103: PUSH
45104: LD_VAR 0 17
45108: ISECT
45109: ST_TO_ADDR
// if not list then
45110: LD_VAR 0 5
45114: NOT
45115: IFFALSE 45119
// exit ;
45117: GO 45923
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45119: LD_VAR 0 12
45123: PUSH
45124: LD_INT 3
45126: EQUAL
45127: PUSH
45128: LD_INT 49
45130: PUSH
45131: LD_VAR 0 5
45135: IN
45136: AND
45137: PUSH
45138: LD_INT 31
45140: PPUSH
45141: LD_VAR 0 16
45145: PPUSH
45146: CALL_OW 321
45150: PUSH
45151: LD_INT 2
45153: EQUAL
45154: AND
45155: IFFALSE 45215
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45157: LD_INT 22
45159: PUSH
45160: LD_VAR 0 16
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 35
45171: PUSH
45172: LD_INT 49
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 91
45181: PUSH
45182: LD_VAR 0 1
45186: PUSH
45187: LD_INT 10
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: PPUSH
45200: CALL_OW 69
45204: NOT
45205: IFFALSE 45215
// weapon := ru_time_lapser ;
45207: LD_ADDR_VAR 0 18
45211: PUSH
45212: LD_INT 49
45214: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45215: LD_VAR 0 12
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: IN
45230: PUSH
45231: LD_INT 11
45233: PUSH
45234: LD_VAR 0 5
45238: IN
45239: PUSH
45240: LD_INT 30
45242: PUSH
45243: LD_VAR 0 5
45247: IN
45248: OR
45249: AND
45250: PUSH
45251: LD_INT 6
45253: PPUSH
45254: LD_VAR 0 16
45258: PPUSH
45259: CALL_OW 321
45263: PUSH
45264: LD_INT 2
45266: EQUAL
45267: AND
45268: IFFALSE 45433
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45270: LD_INT 22
45272: PUSH
45273: LD_VAR 0 16
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 35
45287: PUSH
45288: LD_INT 11
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 35
45297: PUSH
45298: LD_INT 30
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 91
45312: PUSH
45313: LD_VAR 0 1
45317: PUSH
45318: LD_INT 18
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: PPUSH
45331: CALL_OW 69
45335: NOT
45336: PUSH
45337: LD_INT 22
45339: PUSH
45340: LD_VAR 0 16
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: LD_INT 30
45354: PUSH
45355: LD_INT 32
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 30
45364: PUSH
45365: LD_INT 33
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 91
45379: PUSH
45380: LD_VAR 0 1
45384: PUSH
45385: LD_INT 12
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: PUSH
45398: EMPTY
45399: LIST
45400: PPUSH
45401: CALL_OW 69
45405: PUSH
45406: LD_INT 2
45408: GREATER
45409: AND
45410: IFFALSE 45433
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45412: LD_ADDR_VAR 0 18
45416: PUSH
45417: LD_INT 11
45419: PUSH
45420: LD_INT 30
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_VAR 0 12
45431: ARRAY
45432: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45433: LD_VAR 0 18
45437: NOT
45438: PUSH
45439: LD_INT 40
45441: PPUSH
45442: LD_VAR 0 16
45446: PPUSH
45447: CALL_OW 321
45451: PUSH
45452: LD_INT 2
45454: EQUAL
45455: AND
45456: PUSH
45457: LD_INT 7
45459: PUSH
45460: LD_VAR 0 5
45464: IN
45465: PUSH
45466: LD_INT 28
45468: PUSH
45469: LD_VAR 0 5
45473: IN
45474: OR
45475: PUSH
45476: LD_INT 45
45478: PUSH
45479: LD_VAR 0 5
45483: IN
45484: OR
45485: AND
45486: IFFALSE 45740
// begin hex := GetHexInfo ( x , y ) ;
45488: LD_ADDR_VAR 0 4
45492: PUSH
45493: LD_VAR 0 10
45497: PPUSH
45498: LD_VAR 0 11
45502: PPUSH
45503: CALL_OW 546
45507: ST_TO_ADDR
// if hex [ 1 ] then
45508: LD_VAR 0 4
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: IFFALSE 45520
// exit ;
45518: GO 45923
// height := hex [ 2 ] ;
45520: LD_ADDR_VAR 0 15
45524: PUSH
45525: LD_VAR 0 4
45529: PUSH
45530: LD_INT 2
45532: ARRAY
45533: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45534: LD_ADDR_VAR 0 14
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: LD_INT 5
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: ST_TO_ADDR
// for i in tmp do
45557: LD_ADDR_VAR 0 8
45561: PUSH
45562: LD_VAR 0 14
45566: PUSH
45567: FOR_IN
45568: IFFALSE 45738
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_VAR 0 10
45579: PPUSH
45580: LD_VAR 0 8
45584: PPUSH
45585: LD_INT 5
45587: PPUSH
45588: CALL_OW 272
45592: PUSH
45593: LD_VAR 0 11
45597: PPUSH
45598: LD_VAR 0 8
45602: PPUSH
45603: LD_INT 5
45605: PPUSH
45606: CALL_OW 273
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45615: LD_VAR 0 9
45619: PUSH
45620: LD_INT 1
45622: ARRAY
45623: PPUSH
45624: LD_VAR 0 9
45628: PUSH
45629: LD_INT 2
45631: ARRAY
45632: PPUSH
45633: CALL_OW 488
45637: IFFALSE 45736
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45639: LD_ADDR_VAR 0 4
45643: PUSH
45644: LD_VAR 0 9
45648: PUSH
45649: LD_INT 1
45651: ARRAY
45652: PPUSH
45653: LD_VAR 0 9
45657: PUSH
45658: LD_INT 2
45660: ARRAY
45661: PPUSH
45662: CALL_OW 546
45666: ST_TO_ADDR
// if hex [ 1 ] then
45667: LD_VAR 0 4
45671: PUSH
45672: LD_INT 1
45674: ARRAY
45675: IFFALSE 45679
// continue ;
45677: GO 45567
// h := hex [ 2 ] ;
45679: LD_ADDR_VAR 0 13
45683: PUSH
45684: LD_VAR 0 4
45688: PUSH
45689: LD_INT 2
45691: ARRAY
45692: ST_TO_ADDR
// if h + 7 < height then
45693: LD_VAR 0 13
45697: PUSH
45698: LD_INT 7
45700: PLUS
45701: PUSH
45702: LD_VAR 0 15
45706: LESS
45707: IFFALSE 45736
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45709: LD_ADDR_VAR 0 18
45713: PUSH
45714: LD_INT 7
45716: PUSH
45717: LD_INT 28
45719: PUSH
45720: LD_INT 45
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: PUSH
45728: LD_VAR 0 12
45732: ARRAY
45733: ST_TO_ADDR
// break ;
45734: GO 45738
// end ; end ; end ;
45736: GO 45567
45738: POP
45739: POP
// end ; if not weapon then
45740: LD_VAR 0 18
45744: NOT
45745: IFFALSE 45805
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45747: LD_ADDR_VAR 0 5
45751: PUSH
45752: LD_VAR 0 5
45756: PUSH
45757: LD_INT 11
45759: PUSH
45760: LD_INT 30
45762: PUSH
45763: LD_INT 49
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: DIFF
45771: ST_TO_ADDR
// if not list then
45772: LD_VAR 0 5
45776: NOT
45777: IFFALSE 45781
// exit ;
45779: GO 45923
// weapon := list [ rand ( 1 , list ) ] ;
45781: LD_ADDR_VAR 0 18
45785: PUSH
45786: LD_VAR 0 5
45790: PUSH
45791: LD_INT 1
45793: PPUSH
45794: LD_VAR 0 5
45798: PPUSH
45799: CALL_OW 12
45803: ARRAY
45804: ST_TO_ADDR
// end ; if weapon then
45805: LD_VAR 0 18
45809: IFFALSE 45923
// begin tmp := CostOfWeapon ( weapon ) ;
45811: LD_ADDR_VAR 0 14
45815: PUSH
45816: LD_VAR 0 18
45820: PPUSH
45821: CALL_OW 451
45825: ST_TO_ADDR
// j := GetBase ( tower ) ;
45826: LD_ADDR_VAR 0 9
45830: PUSH
45831: LD_VAR 0 1
45835: PPUSH
45836: CALL_OW 274
45840: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45841: LD_VAR 0 9
45845: PPUSH
45846: LD_INT 1
45848: PPUSH
45849: CALL_OW 275
45853: PUSH
45854: LD_VAR 0 14
45858: PUSH
45859: LD_INT 1
45861: ARRAY
45862: GREATEREQUAL
45863: PUSH
45864: LD_VAR 0 9
45868: PPUSH
45869: LD_INT 2
45871: PPUSH
45872: CALL_OW 275
45876: PUSH
45877: LD_VAR 0 14
45881: PUSH
45882: LD_INT 2
45884: ARRAY
45885: GREATEREQUAL
45886: AND
45887: PUSH
45888: LD_VAR 0 9
45892: PPUSH
45893: LD_INT 3
45895: PPUSH
45896: CALL_OW 275
45900: PUSH
45901: LD_VAR 0 14
45905: PUSH
45906: LD_INT 3
45908: ARRAY
45909: GREATEREQUAL
45910: AND
45911: IFFALSE 45923
// result := weapon ;
45913: LD_ADDR_VAR 0 3
45917: PUSH
45918: LD_VAR 0 18
45922: ST_TO_ADDR
// end ; end ;
45923: LD_VAR 0 3
45927: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45928: LD_INT 0
45930: PPUSH
45931: PPUSH
// result := true ;
45932: LD_ADDR_VAR 0 3
45936: PUSH
45937: LD_INT 1
45939: ST_TO_ADDR
// if array1 = array2 then
45940: LD_VAR 0 1
45944: PUSH
45945: LD_VAR 0 2
45949: EQUAL
45950: IFFALSE 46010
// begin for i = 1 to array1 do
45952: LD_ADDR_VAR 0 4
45956: PUSH
45957: DOUBLE
45958: LD_INT 1
45960: DEC
45961: ST_TO_ADDR
45962: LD_VAR 0 1
45966: PUSH
45967: FOR_TO
45968: IFFALSE 46006
// if array1 [ i ] <> array2 [ i ] then
45970: LD_VAR 0 1
45974: PUSH
45975: LD_VAR 0 4
45979: ARRAY
45980: PUSH
45981: LD_VAR 0 2
45985: PUSH
45986: LD_VAR 0 4
45990: ARRAY
45991: NONEQUAL
45992: IFFALSE 46004
// begin result := false ;
45994: LD_ADDR_VAR 0 3
45998: PUSH
45999: LD_INT 0
46001: ST_TO_ADDR
// break ;
46002: GO 46006
// end ;
46004: GO 45967
46006: POP
46007: POP
// end else
46008: GO 46018
// result := false ;
46010: LD_ADDR_VAR 0 3
46014: PUSH
46015: LD_INT 0
46017: ST_TO_ADDR
// end ;
46018: LD_VAR 0 3
46022: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46023: LD_INT 0
46025: PPUSH
46026: PPUSH
// if not array1 or not array2 then
46027: LD_VAR 0 1
46031: NOT
46032: PUSH
46033: LD_VAR 0 2
46037: NOT
46038: OR
46039: IFFALSE 46043
// exit ;
46041: GO 46107
// result := true ;
46043: LD_ADDR_VAR 0 3
46047: PUSH
46048: LD_INT 1
46050: ST_TO_ADDR
// for i = 1 to array1 do
46051: LD_ADDR_VAR 0 4
46055: PUSH
46056: DOUBLE
46057: LD_INT 1
46059: DEC
46060: ST_TO_ADDR
46061: LD_VAR 0 1
46065: PUSH
46066: FOR_TO
46067: IFFALSE 46105
// if array1 [ i ] <> array2 [ i ] then
46069: LD_VAR 0 1
46073: PUSH
46074: LD_VAR 0 4
46078: ARRAY
46079: PUSH
46080: LD_VAR 0 2
46084: PUSH
46085: LD_VAR 0 4
46089: ARRAY
46090: NONEQUAL
46091: IFFALSE 46103
// begin result := false ;
46093: LD_ADDR_VAR 0 3
46097: PUSH
46098: LD_INT 0
46100: ST_TO_ADDR
// break ;
46101: GO 46105
// end ;
46103: GO 46066
46105: POP
46106: POP
// end ;
46107: LD_VAR 0 3
46111: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46112: LD_INT 0
46114: PPUSH
46115: PPUSH
46116: PPUSH
// pom := GetBase ( fac ) ;
46117: LD_ADDR_VAR 0 5
46121: PUSH
46122: LD_VAR 0 1
46126: PPUSH
46127: CALL_OW 274
46131: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46132: LD_ADDR_VAR 0 4
46136: PUSH
46137: LD_VAR 0 2
46141: PUSH
46142: LD_INT 1
46144: ARRAY
46145: PPUSH
46146: LD_VAR 0 2
46150: PUSH
46151: LD_INT 2
46153: ARRAY
46154: PPUSH
46155: LD_VAR 0 2
46159: PUSH
46160: LD_INT 3
46162: ARRAY
46163: PPUSH
46164: LD_VAR 0 2
46168: PUSH
46169: LD_INT 4
46171: ARRAY
46172: PPUSH
46173: CALL_OW 449
46177: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46178: LD_ADDR_VAR 0 3
46182: PUSH
46183: LD_VAR 0 5
46187: PPUSH
46188: LD_INT 1
46190: PPUSH
46191: CALL_OW 275
46195: PUSH
46196: LD_VAR 0 4
46200: PUSH
46201: LD_INT 1
46203: ARRAY
46204: GREATEREQUAL
46205: PUSH
46206: LD_VAR 0 5
46210: PPUSH
46211: LD_INT 2
46213: PPUSH
46214: CALL_OW 275
46218: PUSH
46219: LD_VAR 0 4
46223: PUSH
46224: LD_INT 2
46226: ARRAY
46227: GREATEREQUAL
46228: AND
46229: PUSH
46230: LD_VAR 0 5
46234: PPUSH
46235: LD_INT 3
46237: PPUSH
46238: CALL_OW 275
46242: PUSH
46243: LD_VAR 0 4
46247: PUSH
46248: LD_INT 3
46250: ARRAY
46251: GREATEREQUAL
46252: AND
46253: ST_TO_ADDR
// end ;
46254: LD_VAR 0 3
46258: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46259: LD_INT 0
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
// pom := GetBase ( building ) ;
46265: LD_ADDR_VAR 0 3
46269: PUSH
46270: LD_VAR 0 1
46274: PPUSH
46275: CALL_OW 274
46279: ST_TO_ADDR
// if not pom then
46280: LD_VAR 0 3
46284: NOT
46285: IFFALSE 46289
// exit ;
46287: GO 46459
// btype := GetBType ( building ) ;
46289: LD_ADDR_VAR 0 5
46293: PUSH
46294: LD_VAR 0 1
46298: PPUSH
46299: CALL_OW 266
46303: ST_TO_ADDR
// if btype = b_armoury then
46304: LD_VAR 0 5
46308: PUSH
46309: LD_INT 4
46311: EQUAL
46312: IFFALSE 46322
// btype := b_barracks ;
46314: LD_ADDR_VAR 0 5
46318: PUSH
46319: LD_INT 5
46321: ST_TO_ADDR
// if btype = b_depot then
46322: LD_VAR 0 5
46326: PUSH
46327: LD_INT 0
46329: EQUAL
46330: IFFALSE 46340
// btype := b_warehouse ;
46332: LD_ADDR_VAR 0 5
46336: PUSH
46337: LD_INT 1
46339: ST_TO_ADDR
// if btype = b_workshop then
46340: LD_VAR 0 5
46344: PUSH
46345: LD_INT 2
46347: EQUAL
46348: IFFALSE 46358
// btype := b_factory ;
46350: LD_ADDR_VAR 0 5
46354: PUSH
46355: LD_INT 3
46357: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46358: LD_ADDR_VAR 0 4
46362: PUSH
46363: LD_VAR 0 5
46367: PPUSH
46368: LD_VAR 0 1
46372: PPUSH
46373: CALL_OW 248
46377: PPUSH
46378: CALL_OW 450
46382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46383: LD_ADDR_VAR 0 2
46387: PUSH
46388: LD_VAR 0 3
46392: PPUSH
46393: LD_INT 1
46395: PPUSH
46396: CALL_OW 275
46400: PUSH
46401: LD_VAR 0 4
46405: PUSH
46406: LD_INT 1
46408: ARRAY
46409: GREATEREQUAL
46410: PUSH
46411: LD_VAR 0 3
46415: PPUSH
46416: LD_INT 2
46418: PPUSH
46419: CALL_OW 275
46423: PUSH
46424: LD_VAR 0 4
46428: PUSH
46429: LD_INT 2
46431: ARRAY
46432: GREATEREQUAL
46433: AND
46434: PUSH
46435: LD_VAR 0 3
46439: PPUSH
46440: LD_INT 3
46442: PPUSH
46443: CALL_OW 275
46447: PUSH
46448: LD_VAR 0 4
46452: PUSH
46453: LD_INT 3
46455: ARRAY
46456: GREATEREQUAL
46457: AND
46458: ST_TO_ADDR
// end ;
46459: LD_VAR 0 2
46463: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46464: LD_INT 0
46466: PPUSH
46467: PPUSH
46468: PPUSH
// pom := GetBase ( building ) ;
46469: LD_ADDR_VAR 0 4
46473: PUSH
46474: LD_VAR 0 1
46478: PPUSH
46479: CALL_OW 274
46483: ST_TO_ADDR
// if not pom then
46484: LD_VAR 0 4
46488: NOT
46489: IFFALSE 46493
// exit ;
46491: GO 46594
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46493: LD_ADDR_VAR 0 5
46497: PUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: LD_VAR 0 1
46507: PPUSH
46508: CALL_OW 248
46512: PPUSH
46513: CALL_OW 450
46517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46518: LD_ADDR_VAR 0 3
46522: PUSH
46523: LD_VAR 0 4
46527: PPUSH
46528: LD_INT 1
46530: PPUSH
46531: CALL_OW 275
46535: PUSH
46536: LD_VAR 0 5
46540: PUSH
46541: LD_INT 1
46543: ARRAY
46544: GREATEREQUAL
46545: PUSH
46546: LD_VAR 0 4
46550: PPUSH
46551: LD_INT 2
46553: PPUSH
46554: CALL_OW 275
46558: PUSH
46559: LD_VAR 0 5
46563: PUSH
46564: LD_INT 2
46566: ARRAY
46567: GREATEREQUAL
46568: AND
46569: PUSH
46570: LD_VAR 0 4
46574: PPUSH
46575: LD_INT 3
46577: PPUSH
46578: CALL_OW 275
46582: PUSH
46583: LD_VAR 0 5
46587: PUSH
46588: LD_INT 3
46590: ARRAY
46591: GREATEREQUAL
46592: AND
46593: ST_TO_ADDR
// end ;
46594: LD_VAR 0 3
46598: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46599: LD_INT 0
46601: PPUSH
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
46609: PPUSH
46610: PPUSH
46611: PPUSH
// result := false ;
46612: LD_ADDR_VAR 0 8
46616: PUSH
46617: LD_INT 0
46619: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46620: LD_VAR 0 5
46624: NOT
46625: PUSH
46626: LD_VAR 0 1
46630: NOT
46631: OR
46632: PUSH
46633: LD_VAR 0 2
46637: NOT
46638: OR
46639: PUSH
46640: LD_VAR 0 3
46644: NOT
46645: OR
46646: IFFALSE 46650
// exit ;
46648: GO 47464
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46650: LD_ADDR_VAR 0 14
46654: PUSH
46655: LD_VAR 0 1
46659: PPUSH
46660: LD_VAR 0 2
46664: PPUSH
46665: LD_VAR 0 3
46669: PPUSH
46670: LD_VAR 0 4
46674: PPUSH
46675: LD_VAR 0 5
46679: PUSH
46680: LD_INT 1
46682: ARRAY
46683: PPUSH
46684: CALL_OW 248
46688: PPUSH
46689: LD_INT 0
46691: PPUSH
46692: CALL 48697 0 6
46696: ST_TO_ADDR
// if not hexes then
46697: LD_VAR 0 14
46701: NOT
46702: IFFALSE 46706
// exit ;
46704: GO 47464
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46706: LD_ADDR_VAR 0 17
46710: PUSH
46711: LD_VAR 0 5
46715: PPUSH
46716: LD_INT 22
46718: PUSH
46719: LD_VAR 0 13
46723: PPUSH
46724: CALL_OW 255
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 30
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 30
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PPUSH
46765: CALL_OW 72
46769: ST_TO_ADDR
// for i = 1 to hexes do
46770: LD_ADDR_VAR 0 9
46774: PUSH
46775: DOUBLE
46776: LD_INT 1
46778: DEC
46779: ST_TO_ADDR
46780: LD_VAR 0 14
46784: PUSH
46785: FOR_TO
46786: IFFALSE 47462
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46788: LD_ADDR_VAR 0 13
46792: PUSH
46793: LD_VAR 0 14
46797: PUSH
46798: LD_VAR 0 9
46802: ARRAY
46803: PUSH
46804: LD_INT 1
46806: ARRAY
46807: PPUSH
46808: LD_VAR 0 14
46812: PUSH
46813: LD_VAR 0 9
46817: ARRAY
46818: PUSH
46819: LD_INT 2
46821: ARRAY
46822: PPUSH
46823: CALL_OW 428
46827: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46828: LD_VAR 0 14
46832: PUSH
46833: LD_VAR 0 9
46837: ARRAY
46838: PUSH
46839: LD_INT 1
46841: ARRAY
46842: PPUSH
46843: LD_VAR 0 14
46847: PUSH
46848: LD_VAR 0 9
46852: ARRAY
46853: PUSH
46854: LD_INT 2
46856: ARRAY
46857: PPUSH
46858: CALL_OW 351
46862: PUSH
46863: LD_VAR 0 14
46867: PUSH
46868: LD_VAR 0 9
46872: ARRAY
46873: PUSH
46874: LD_INT 1
46876: ARRAY
46877: PPUSH
46878: LD_VAR 0 14
46882: PUSH
46883: LD_VAR 0 9
46887: ARRAY
46888: PUSH
46889: LD_INT 2
46891: ARRAY
46892: PPUSH
46893: CALL_OW 488
46897: NOT
46898: OR
46899: PUSH
46900: LD_VAR 0 13
46904: PPUSH
46905: CALL_OW 247
46909: PUSH
46910: LD_INT 3
46912: EQUAL
46913: OR
46914: IFFALSE 46920
// exit ;
46916: POP
46917: POP
46918: GO 47464
// if not tmp then
46920: LD_VAR 0 13
46924: NOT
46925: IFFALSE 46929
// continue ;
46927: GO 46785
// result := true ;
46929: LD_ADDR_VAR 0 8
46933: PUSH
46934: LD_INT 1
46936: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46937: LD_VAR 0 6
46941: PUSH
46942: LD_VAR 0 13
46946: PPUSH
46947: CALL_OW 247
46951: PUSH
46952: LD_INT 2
46954: EQUAL
46955: AND
46956: PUSH
46957: LD_VAR 0 13
46961: PPUSH
46962: CALL_OW 263
46966: PUSH
46967: LD_INT 1
46969: EQUAL
46970: AND
46971: IFFALSE 47135
// begin if IsDrivenBy ( tmp ) then
46973: LD_VAR 0 13
46977: PPUSH
46978: CALL_OW 311
46982: IFFALSE 46986
// continue ;
46984: GO 46785
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46986: LD_VAR 0 6
46990: PPUSH
46991: LD_INT 3
46993: PUSH
46994: LD_INT 60
46996: PUSH
46997: EMPTY
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 3
47006: PUSH
47007: LD_INT 55
47009: PUSH
47010: EMPTY
47011: LIST
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PPUSH
47021: CALL_OW 72
47025: IFFALSE 47133
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47027: LD_ADDR_VAR 0 18
47031: PUSH
47032: LD_VAR 0 6
47036: PPUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 60
47042: PUSH
47043: EMPTY
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 55
47055: PUSH
47056: EMPTY
47057: LIST
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PPUSH
47067: CALL_OW 72
47071: PUSH
47072: LD_INT 1
47074: ARRAY
47075: ST_TO_ADDR
// if IsInUnit ( driver ) then
47076: LD_VAR 0 18
47080: PPUSH
47081: CALL_OW 310
47085: IFFALSE 47096
// ComExit ( driver ) ;
47087: LD_VAR 0 18
47091: PPUSH
47092: CALL 72449 0 1
// AddComEnterUnit ( driver , tmp ) ;
47096: LD_VAR 0 18
47100: PPUSH
47101: LD_VAR 0 13
47105: PPUSH
47106: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47110: LD_VAR 0 18
47114: PPUSH
47115: LD_VAR 0 7
47119: PPUSH
47120: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47124: LD_VAR 0 18
47128: PPUSH
47129: CALL_OW 181
// end ; continue ;
47133: GO 46785
// end ; if not cleaners or not tmp in cleaners then
47135: LD_VAR 0 6
47139: NOT
47140: PUSH
47141: LD_VAR 0 13
47145: PUSH
47146: LD_VAR 0 6
47150: IN
47151: NOT
47152: OR
47153: IFFALSE 47460
// begin if dep then
47155: LD_VAR 0 17
47159: IFFALSE 47295
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47161: LD_ADDR_VAR 0 16
47165: PUSH
47166: LD_VAR 0 17
47170: PUSH
47171: LD_INT 1
47173: ARRAY
47174: PPUSH
47175: CALL_OW 250
47179: PPUSH
47180: LD_VAR 0 17
47184: PUSH
47185: LD_INT 1
47187: ARRAY
47188: PPUSH
47189: CALL_OW 254
47193: PPUSH
47194: LD_INT 5
47196: PPUSH
47197: CALL_OW 272
47201: PUSH
47202: LD_VAR 0 17
47206: PUSH
47207: LD_INT 1
47209: ARRAY
47210: PPUSH
47211: CALL_OW 251
47215: PPUSH
47216: LD_VAR 0 17
47220: PUSH
47221: LD_INT 1
47223: ARRAY
47224: PPUSH
47225: CALL_OW 254
47229: PPUSH
47230: LD_INT 5
47232: PPUSH
47233: CALL_OW 273
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47242: LD_VAR 0 16
47246: PUSH
47247: LD_INT 1
47249: ARRAY
47250: PPUSH
47251: LD_VAR 0 16
47255: PUSH
47256: LD_INT 2
47258: ARRAY
47259: PPUSH
47260: CALL_OW 488
47264: IFFALSE 47295
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47266: LD_VAR 0 13
47270: PPUSH
47271: LD_VAR 0 16
47275: PUSH
47276: LD_INT 1
47278: ARRAY
47279: PPUSH
47280: LD_VAR 0 16
47284: PUSH
47285: LD_INT 2
47287: ARRAY
47288: PPUSH
47289: CALL_OW 111
// continue ;
47293: GO 46785
// end ; end ; r := GetDir ( tmp ) ;
47295: LD_ADDR_VAR 0 15
47299: PUSH
47300: LD_VAR 0 13
47304: PPUSH
47305: CALL_OW 254
47309: ST_TO_ADDR
// if r = 5 then
47310: LD_VAR 0 15
47314: PUSH
47315: LD_INT 5
47317: EQUAL
47318: IFFALSE 47328
// r := 0 ;
47320: LD_ADDR_VAR 0 15
47324: PUSH
47325: LD_INT 0
47327: ST_TO_ADDR
// for j = r to 5 do
47328: LD_ADDR_VAR 0 10
47332: PUSH
47333: DOUBLE
47334: LD_VAR 0 15
47338: DEC
47339: ST_TO_ADDR
47340: LD_INT 5
47342: PUSH
47343: FOR_TO
47344: IFFALSE 47458
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47346: LD_ADDR_VAR 0 11
47350: PUSH
47351: LD_VAR 0 13
47355: PPUSH
47356: CALL_OW 250
47360: PPUSH
47361: LD_VAR 0 10
47365: PPUSH
47366: LD_INT 2
47368: PPUSH
47369: CALL_OW 272
47373: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47374: LD_ADDR_VAR 0 12
47378: PUSH
47379: LD_VAR 0 13
47383: PPUSH
47384: CALL_OW 251
47388: PPUSH
47389: LD_VAR 0 10
47393: PPUSH
47394: LD_INT 2
47396: PPUSH
47397: CALL_OW 273
47401: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47402: LD_VAR 0 11
47406: PPUSH
47407: LD_VAR 0 12
47411: PPUSH
47412: CALL_OW 488
47416: PUSH
47417: LD_VAR 0 11
47421: PPUSH
47422: LD_VAR 0 12
47426: PPUSH
47427: CALL_OW 428
47431: NOT
47432: AND
47433: IFFALSE 47456
// begin ComMoveXY ( tmp , _x , _y ) ;
47435: LD_VAR 0 13
47439: PPUSH
47440: LD_VAR 0 11
47444: PPUSH
47445: LD_VAR 0 12
47449: PPUSH
47450: CALL_OW 111
// break ;
47454: GO 47458
// end ; end ;
47456: GO 47343
47458: POP
47459: POP
// end ; end ;
47460: GO 46785
47462: POP
47463: POP
// end ;
47464: LD_VAR 0 8
47468: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47469: LD_INT 0
47471: PPUSH
// result := true ;
47472: LD_ADDR_VAR 0 3
47476: PUSH
47477: LD_INT 1
47479: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47480: LD_VAR 0 2
47484: PUSH
47485: LD_INT 24
47487: DOUBLE
47488: EQUAL
47489: IFTRUE 47499
47491: LD_INT 33
47493: DOUBLE
47494: EQUAL
47495: IFTRUE 47499
47497: GO 47524
47499: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47500: LD_ADDR_VAR 0 3
47504: PUSH
47505: LD_INT 32
47507: PPUSH
47508: LD_VAR 0 1
47512: PPUSH
47513: CALL_OW 321
47517: PUSH
47518: LD_INT 2
47520: EQUAL
47521: ST_TO_ADDR
47522: GO 47840
47524: LD_INT 20
47526: DOUBLE
47527: EQUAL
47528: IFTRUE 47532
47530: GO 47557
47532: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47533: LD_ADDR_VAR 0 3
47537: PUSH
47538: LD_INT 6
47540: PPUSH
47541: LD_VAR 0 1
47545: PPUSH
47546: CALL_OW 321
47550: PUSH
47551: LD_INT 2
47553: EQUAL
47554: ST_TO_ADDR
47555: GO 47840
47557: LD_INT 22
47559: DOUBLE
47560: EQUAL
47561: IFTRUE 47571
47563: LD_INT 36
47565: DOUBLE
47566: EQUAL
47567: IFTRUE 47571
47569: GO 47596
47571: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47572: LD_ADDR_VAR 0 3
47576: PUSH
47577: LD_INT 15
47579: PPUSH
47580: LD_VAR 0 1
47584: PPUSH
47585: CALL_OW 321
47589: PUSH
47590: LD_INT 2
47592: EQUAL
47593: ST_TO_ADDR
47594: GO 47840
47596: LD_INT 30
47598: DOUBLE
47599: EQUAL
47600: IFTRUE 47604
47602: GO 47629
47604: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47605: LD_ADDR_VAR 0 3
47609: PUSH
47610: LD_INT 20
47612: PPUSH
47613: LD_VAR 0 1
47617: PPUSH
47618: CALL_OW 321
47622: PUSH
47623: LD_INT 2
47625: EQUAL
47626: ST_TO_ADDR
47627: GO 47840
47629: LD_INT 28
47631: DOUBLE
47632: EQUAL
47633: IFTRUE 47643
47635: LD_INT 21
47637: DOUBLE
47638: EQUAL
47639: IFTRUE 47643
47641: GO 47668
47643: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47644: LD_ADDR_VAR 0 3
47648: PUSH
47649: LD_INT 21
47651: PPUSH
47652: LD_VAR 0 1
47656: PPUSH
47657: CALL_OW 321
47661: PUSH
47662: LD_INT 2
47664: EQUAL
47665: ST_TO_ADDR
47666: GO 47840
47668: LD_INT 16
47670: DOUBLE
47671: EQUAL
47672: IFTRUE 47676
47674: GO 47701
47676: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47677: LD_ADDR_VAR 0 3
47681: PUSH
47682: LD_INT 84
47684: PPUSH
47685: LD_VAR 0 1
47689: PPUSH
47690: CALL_OW 321
47694: PUSH
47695: LD_INT 2
47697: EQUAL
47698: ST_TO_ADDR
47699: GO 47840
47701: LD_INT 19
47703: DOUBLE
47704: EQUAL
47705: IFTRUE 47715
47707: LD_INT 23
47709: DOUBLE
47710: EQUAL
47711: IFTRUE 47715
47713: GO 47740
47715: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47716: LD_ADDR_VAR 0 3
47720: PUSH
47721: LD_INT 83
47723: PPUSH
47724: LD_VAR 0 1
47728: PPUSH
47729: CALL_OW 321
47733: PUSH
47734: LD_INT 2
47736: EQUAL
47737: ST_TO_ADDR
47738: GO 47840
47740: LD_INT 17
47742: DOUBLE
47743: EQUAL
47744: IFTRUE 47748
47746: GO 47773
47748: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47749: LD_ADDR_VAR 0 3
47753: PUSH
47754: LD_INT 39
47756: PPUSH
47757: LD_VAR 0 1
47761: PPUSH
47762: CALL_OW 321
47766: PUSH
47767: LD_INT 2
47769: EQUAL
47770: ST_TO_ADDR
47771: GO 47840
47773: LD_INT 18
47775: DOUBLE
47776: EQUAL
47777: IFTRUE 47781
47779: GO 47806
47781: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47782: LD_ADDR_VAR 0 3
47786: PUSH
47787: LD_INT 40
47789: PPUSH
47790: LD_VAR 0 1
47794: PPUSH
47795: CALL_OW 321
47799: PUSH
47800: LD_INT 2
47802: EQUAL
47803: ST_TO_ADDR
47804: GO 47840
47806: LD_INT 27
47808: DOUBLE
47809: EQUAL
47810: IFTRUE 47814
47812: GO 47839
47814: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47815: LD_ADDR_VAR 0 3
47819: PUSH
47820: LD_INT 35
47822: PPUSH
47823: LD_VAR 0 1
47827: PPUSH
47828: CALL_OW 321
47832: PUSH
47833: LD_INT 2
47835: EQUAL
47836: ST_TO_ADDR
47837: GO 47840
47839: POP
// end ;
47840: LD_VAR 0 3
47844: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47845: LD_INT 0
47847: PPUSH
47848: PPUSH
47849: PPUSH
47850: PPUSH
47851: PPUSH
47852: PPUSH
47853: PPUSH
47854: PPUSH
47855: PPUSH
47856: PPUSH
47857: PPUSH
// result := false ;
47858: LD_ADDR_VAR 0 6
47862: PUSH
47863: LD_INT 0
47865: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47866: LD_VAR 0 1
47870: NOT
47871: PUSH
47872: LD_VAR 0 1
47876: PPUSH
47877: CALL_OW 266
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: IN
47892: NOT
47893: OR
47894: PUSH
47895: LD_VAR 0 2
47899: NOT
47900: OR
47901: PUSH
47902: LD_VAR 0 5
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: LD_INT 4
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: IN
47933: NOT
47934: OR
47935: PUSH
47936: LD_VAR 0 3
47940: PPUSH
47941: LD_VAR 0 4
47945: PPUSH
47946: CALL_OW 488
47950: NOT
47951: OR
47952: IFFALSE 47956
// exit ;
47954: GO 48692
// side := GetSide ( depot ) ;
47956: LD_ADDR_VAR 0 9
47960: PUSH
47961: LD_VAR 0 1
47965: PPUSH
47966: CALL_OW 255
47970: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47971: LD_VAR 0 9
47975: PPUSH
47976: LD_VAR 0 2
47980: PPUSH
47981: CALL 47469 0 2
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48692
// pom := GetBase ( depot ) ;
47990: LD_ADDR_VAR 0 10
47994: PUSH
47995: LD_VAR 0 1
47999: PPUSH
48000: CALL_OW 274
48004: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48005: LD_ADDR_VAR 0 11
48009: PUSH
48010: LD_VAR 0 2
48014: PPUSH
48015: LD_VAR 0 1
48019: PPUSH
48020: CALL_OW 248
48024: PPUSH
48025: CALL_OW 450
48029: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48030: LD_VAR 0 10
48034: PPUSH
48035: LD_INT 1
48037: PPUSH
48038: CALL_OW 275
48042: PUSH
48043: LD_VAR 0 11
48047: PUSH
48048: LD_INT 1
48050: ARRAY
48051: GREATEREQUAL
48052: PUSH
48053: LD_VAR 0 10
48057: PPUSH
48058: LD_INT 2
48060: PPUSH
48061: CALL_OW 275
48065: PUSH
48066: LD_VAR 0 11
48070: PUSH
48071: LD_INT 2
48073: ARRAY
48074: GREATEREQUAL
48075: AND
48076: PUSH
48077: LD_VAR 0 10
48081: PPUSH
48082: LD_INT 3
48084: PPUSH
48085: CALL_OW 275
48089: PUSH
48090: LD_VAR 0 11
48094: PUSH
48095: LD_INT 3
48097: ARRAY
48098: GREATEREQUAL
48099: AND
48100: NOT
48101: IFFALSE 48105
// exit ;
48103: GO 48692
// if GetBType ( depot ) = b_depot then
48105: LD_VAR 0 1
48109: PPUSH
48110: CALL_OW 266
48114: PUSH
48115: LD_INT 0
48117: EQUAL
48118: IFFALSE 48130
// dist := 28 else
48120: LD_ADDR_VAR 0 14
48124: PUSH
48125: LD_INT 28
48127: ST_TO_ADDR
48128: GO 48138
// dist := 36 ;
48130: LD_ADDR_VAR 0 14
48134: PUSH
48135: LD_INT 36
48137: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48138: LD_VAR 0 1
48142: PPUSH
48143: LD_VAR 0 3
48147: PPUSH
48148: LD_VAR 0 4
48152: PPUSH
48153: CALL_OW 297
48157: PUSH
48158: LD_VAR 0 14
48162: GREATER
48163: IFFALSE 48167
// exit ;
48165: GO 48692
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48167: LD_ADDR_VAR 0 12
48171: PUSH
48172: LD_VAR 0 2
48176: PPUSH
48177: LD_VAR 0 3
48181: PPUSH
48182: LD_VAR 0 4
48186: PPUSH
48187: LD_VAR 0 5
48191: PPUSH
48192: LD_VAR 0 1
48196: PPUSH
48197: CALL_OW 248
48201: PPUSH
48202: LD_INT 0
48204: PPUSH
48205: CALL 48697 0 6
48209: ST_TO_ADDR
// if not hexes then
48210: LD_VAR 0 12
48214: NOT
48215: IFFALSE 48219
// exit ;
48217: GO 48692
// hex := GetHexInfo ( x , y ) ;
48219: LD_ADDR_VAR 0 15
48223: PUSH
48224: LD_VAR 0 3
48228: PPUSH
48229: LD_VAR 0 4
48233: PPUSH
48234: CALL_OW 546
48238: ST_TO_ADDR
// if hex [ 1 ] then
48239: LD_VAR 0 15
48243: PUSH
48244: LD_INT 1
48246: ARRAY
48247: IFFALSE 48251
// exit ;
48249: GO 48692
// height := hex [ 2 ] ;
48251: LD_ADDR_VAR 0 13
48255: PUSH
48256: LD_VAR 0 15
48260: PUSH
48261: LD_INT 2
48263: ARRAY
48264: ST_TO_ADDR
// for i = 1 to hexes do
48265: LD_ADDR_VAR 0 7
48269: PUSH
48270: DOUBLE
48271: LD_INT 1
48273: DEC
48274: ST_TO_ADDR
48275: LD_VAR 0 12
48279: PUSH
48280: FOR_TO
48281: IFFALSE 48611
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48283: LD_VAR 0 12
48287: PUSH
48288: LD_VAR 0 7
48292: ARRAY
48293: PUSH
48294: LD_INT 1
48296: ARRAY
48297: PPUSH
48298: LD_VAR 0 12
48302: PUSH
48303: LD_VAR 0 7
48307: ARRAY
48308: PUSH
48309: LD_INT 2
48311: ARRAY
48312: PPUSH
48313: CALL_OW 488
48317: NOT
48318: PUSH
48319: LD_VAR 0 12
48323: PUSH
48324: LD_VAR 0 7
48328: ARRAY
48329: PUSH
48330: LD_INT 1
48332: ARRAY
48333: PPUSH
48334: LD_VAR 0 12
48338: PUSH
48339: LD_VAR 0 7
48343: ARRAY
48344: PUSH
48345: LD_INT 2
48347: ARRAY
48348: PPUSH
48349: CALL_OW 428
48353: PUSH
48354: LD_INT 0
48356: GREATER
48357: OR
48358: PUSH
48359: LD_VAR 0 12
48363: PUSH
48364: LD_VAR 0 7
48368: ARRAY
48369: PUSH
48370: LD_INT 1
48372: ARRAY
48373: PPUSH
48374: LD_VAR 0 12
48378: PUSH
48379: LD_VAR 0 7
48383: ARRAY
48384: PUSH
48385: LD_INT 2
48387: ARRAY
48388: PPUSH
48389: CALL_OW 351
48393: OR
48394: IFFALSE 48400
// exit ;
48396: POP
48397: POP
48398: GO 48692
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48400: LD_ADDR_VAR 0 8
48404: PUSH
48405: LD_VAR 0 12
48409: PUSH
48410: LD_VAR 0 7
48414: ARRAY
48415: PUSH
48416: LD_INT 1
48418: ARRAY
48419: PPUSH
48420: LD_VAR 0 12
48424: PUSH
48425: LD_VAR 0 7
48429: ARRAY
48430: PUSH
48431: LD_INT 2
48433: ARRAY
48434: PPUSH
48435: CALL_OW 546
48439: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48440: LD_VAR 0 8
48444: PUSH
48445: LD_INT 1
48447: ARRAY
48448: PUSH
48449: LD_VAR 0 8
48453: PUSH
48454: LD_INT 2
48456: ARRAY
48457: PUSH
48458: LD_VAR 0 13
48462: PUSH
48463: LD_INT 2
48465: PLUS
48466: GREATER
48467: OR
48468: PUSH
48469: LD_VAR 0 8
48473: PUSH
48474: LD_INT 2
48476: ARRAY
48477: PUSH
48478: LD_VAR 0 13
48482: PUSH
48483: LD_INT 2
48485: MINUS
48486: LESS
48487: OR
48488: PUSH
48489: LD_VAR 0 8
48493: PUSH
48494: LD_INT 3
48496: ARRAY
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 8
48503: PUSH
48504: LD_INT 9
48506: PUSH
48507: LD_INT 10
48509: PUSH
48510: LD_INT 11
48512: PUSH
48513: LD_INT 12
48515: PUSH
48516: LD_INT 13
48518: PUSH
48519: LD_INT 16
48521: PUSH
48522: LD_INT 17
48524: PUSH
48525: LD_INT 18
48527: PUSH
48528: LD_INT 19
48530: PUSH
48531: LD_INT 20
48533: PUSH
48534: LD_INT 21
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: IN
48552: NOT
48553: OR
48554: PUSH
48555: LD_VAR 0 8
48559: PUSH
48560: LD_INT 5
48562: ARRAY
48563: NOT
48564: OR
48565: PUSH
48566: LD_VAR 0 8
48570: PUSH
48571: LD_INT 6
48573: ARRAY
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 7
48583: PUSH
48584: LD_INT 9
48586: PUSH
48587: LD_INT 10
48589: PUSH
48590: LD_INT 11
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: IN
48601: NOT
48602: OR
48603: IFFALSE 48609
// exit ;
48605: POP
48606: POP
48607: GO 48692
// end ;
48609: GO 48280
48611: POP
48612: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48613: LD_VAR 0 9
48617: PPUSH
48618: LD_VAR 0 3
48622: PPUSH
48623: LD_VAR 0 4
48627: PPUSH
48628: LD_INT 20
48630: PPUSH
48631: CALL 40644 0 4
48635: PUSH
48636: LD_INT 4
48638: ARRAY
48639: IFFALSE 48643
// exit ;
48641: GO 48692
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48643: LD_VAR 0 2
48647: PUSH
48648: LD_INT 29
48650: PUSH
48651: LD_INT 30
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: IN
48658: PUSH
48659: LD_VAR 0 3
48663: PPUSH
48664: LD_VAR 0 4
48668: PPUSH
48669: LD_VAR 0 9
48673: PPUSH
48674: CALL_OW 440
48678: NOT
48679: AND
48680: IFFALSE 48684
// exit ;
48682: GO 48692
// result := true ;
48684: LD_ADDR_VAR 0 6
48688: PUSH
48689: LD_INT 1
48691: ST_TO_ADDR
// end ;
48692: LD_VAR 0 6
48696: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48697: LD_INT 0
48699: PPUSH
48700: PPUSH
48701: PPUSH
48702: PPUSH
48703: PPUSH
48704: PPUSH
48705: PPUSH
48706: PPUSH
48707: PPUSH
48708: PPUSH
48709: PPUSH
48710: PPUSH
48711: PPUSH
48712: PPUSH
48713: PPUSH
48714: PPUSH
48715: PPUSH
48716: PPUSH
48717: PPUSH
48718: PPUSH
48719: PPUSH
48720: PPUSH
48721: PPUSH
48722: PPUSH
48723: PPUSH
48724: PPUSH
48725: PPUSH
48726: PPUSH
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
48733: PPUSH
48734: PPUSH
48735: PPUSH
48736: PPUSH
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
48743: PPUSH
48744: PPUSH
48745: PPUSH
48746: PPUSH
48747: PPUSH
48748: PPUSH
48749: PPUSH
48750: PPUSH
48751: PPUSH
48752: PPUSH
48753: PPUSH
48754: PPUSH
48755: PPUSH
48756: PPUSH
// result = [ ] ;
48757: LD_ADDR_VAR 0 7
48761: PUSH
48762: EMPTY
48763: ST_TO_ADDR
// temp_list = [ ] ;
48764: LD_ADDR_VAR 0 9
48768: PUSH
48769: EMPTY
48770: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48771: LD_VAR 0 4
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: LD_INT 4
48790: PUSH
48791: LD_INT 5
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: IN
48802: NOT
48803: PUSH
48804: LD_VAR 0 1
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: IN
48819: PUSH
48820: LD_VAR 0 5
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 3
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: IN
48839: NOT
48840: AND
48841: OR
48842: IFFALSE 48846
// exit ;
48844: GO 67237
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48846: LD_VAR 0 1
48850: PUSH
48851: LD_INT 6
48853: PUSH
48854: LD_INT 7
48856: PUSH
48857: LD_INT 8
48859: PUSH
48860: LD_INT 13
48862: PUSH
48863: LD_INT 12
48865: PUSH
48866: LD_INT 15
48868: PUSH
48869: LD_INT 11
48871: PUSH
48872: LD_INT 14
48874: PUSH
48875: LD_INT 10
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: IN
48889: IFFALSE 48899
// btype = b_lab ;
48891: LD_ADDR_VAR 0 1
48895: PUSH
48896: LD_INT 6
48898: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48899: LD_VAR 0 6
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: IN
48918: NOT
48919: PUSH
48920: LD_VAR 0 1
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 3
48936: PUSH
48937: LD_INT 6
48939: PUSH
48940: LD_INT 36
48942: PUSH
48943: LD_INT 4
48945: PUSH
48946: LD_INT 5
48948: PUSH
48949: LD_INT 31
48951: PUSH
48952: LD_INT 32
48954: PUSH
48955: LD_INT 33
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: IN
48971: NOT
48972: PUSH
48973: LD_VAR 0 6
48977: PUSH
48978: LD_INT 1
48980: EQUAL
48981: AND
48982: OR
48983: PUSH
48984: LD_VAR 0 1
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 3
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: IN
48999: NOT
49000: PUSH
49001: LD_VAR 0 6
49005: PUSH
49006: LD_INT 2
49008: EQUAL
49009: AND
49010: OR
49011: IFFALSE 49021
// mode = 0 ;
49013: LD_ADDR_VAR 0 6
49017: PUSH
49018: LD_INT 0
49020: ST_TO_ADDR
// case mode of 0 :
49021: LD_VAR 0 6
49025: PUSH
49026: LD_INT 0
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49034
49032: GO 60487
49034: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49035: LD_ADDR_VAR 0 11
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 3
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 3
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49228: LD_ADDR_VAR 0 12
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: NEG
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49424: LD_ADDR_VAR 0 13
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: NEG
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49623: LD_ADDR_VAR 0 14
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49819: LD_ADDR_VAR 0 15
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50012: LD_ADDR_VAR 0 16
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50205: LD_ADDR_VAR 0 17
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50435: LD_ADDR_VAR 0 18
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50665: LD_ADDR_VAR 0 19
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50895: LD_ADDR_VAR 0 20
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51125: LD_ADDR_VAR 0 21
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51355: LD_ADDR_VAR 0 22
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51585: LD_ADDR_VAR 0 23
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 3
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51865: LD_ADDR_VAR 0 24
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52141: LD_ADDR_VAR 0 25
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 3
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52415: LD_ADDR_VAR 0 26
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 3
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52691: LD_ADDR_VAR 0 27
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 3
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52971: LD_ADDR_VAR 0 28
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: LD_INT 3
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53253: LD_ADDR_VAR 0 29
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53532: LD_ADDR_VAR 0 30
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53810: LD_ADDR_VAR 0 31
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54088: LD_ADDR_VAR 0 32
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 3
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54366: LD_ADDR_VAR 0 33
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 3
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 3
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54645: LD_ADDR_VAR 0 34
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 2
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54925: LD_ADDR_VAR 0 35
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55037: LD_ADDR_VAR 0 36
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55149: LD_ADDR_VAR 0 37
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55261: LD_ADDR_VAR 0 38
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55373: LD_ADDR_VAR 0 39
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55485: LD_ADDR_VAR 0 40
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55597: LD_ADDR_VAR 0 41
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: NEG
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: NEG
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55947: LD_ADDR_VAR 0 42
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56297: LD_ADDR_VAR 0 43
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 3
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 3
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56645: LD_ADDR_VAR 0 44
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: NEG
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56995: LD_ADDR_VAR 0 45
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: NEG
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57345: LD_ADDR_VAR 0 46
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 3
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 3
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57693: LD_ADDR_VAR 0 47
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57844: LD_ADDR_VAR 0 48
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57991: LD_ADDR_VAR 0 49
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58135: LD_ADDR_VAR 0 50
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58279: LD_ADDR_VAR 0 51
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58426: LD_ADDR_VAR 0 52
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58577: LD_ADDR_VAR 0 53
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58807: LD_ADDR_VAR 0 54
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59037: LD_ADDR_VAR 0 55
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59267: LD_ADDR_VAR 0 56
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59497: LD_ADDR_VAR 0 57
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59727: LD_ADDR_VAR 0 58
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59957: LD_ADDR_VAR 0 59
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60045: LD_ADDR_VAR 0 60
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60133: LD_ADDR_VAR 0 61
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60221: LD_ADDR_VAR 0 62
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60309: LD_ADDR_VAR 0 63
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60397: LD_ADDR_VAR 0 64
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// end ; 1 :
60485: GO 66382
60487: LD_INT 1
60489: DOUBLE
60490: EQUAL
60491: IFTRUE 60495
60493: GO 63118
60495: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60496: LD_ADDR_VAR 0 11
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 3
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60540: LD_ADDR_VAR 0 12
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 3
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60581: LD_ADDR_VAR 0 13
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 3
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: LD_INT 3
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60621: LD_ADDR_VAR 0 14
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: LD_INT 3
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60662: LD_ADDR_VAR 0 15
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60706: LD_ADDR_VAR 0 16
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60752: LD_ADDR_VAR 0 17
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60796: LD_ADDR_VAR 0 18
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60837: LD_ADDR_VAR 0 19
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60877: LD_ADDR_VAR 0 20
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60918: LD_ADDR_VAR 0 21
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60962: LD_ADDR_VAR 0 22
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: LD_INT 3
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 3
60993: NEG
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61008: LD_ADDR_VAR 0 23
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 4
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 3
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61052: LD_ADDR_VAR 0 24
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 4
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61093: LD_ADDR_VAR 0 25
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 4
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: LD_INT 4
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61133: LD_ADDR_VAR 0 26
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61174: LD_ADDR_VAR 0 27
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: NEG
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 4
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: LIST
61217: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61218: LD_ADDR_VAR 0 28
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 4
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61264: LD_ADDR_VAR 0 29
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: LD_INT 3
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 3
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 4
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 4
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 3
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: LD_INT 5
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 5
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: LD_INT 4
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: LD_INT 6
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 6
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: LD_INT 5
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61419: LD_ADDR_VAR 0 30
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 4
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 4
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 5
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 5
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 5
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 6
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 6
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61562: LD_ADDR_VAR 0 31
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 4
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 4
61609: PUSH
61610: LD_INT 4
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 5
61629: PUSH
61630: LD_INT 4
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 5
61639: PUSH
61640: LD_INT 5
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: LD_INT 5
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 6
61659: PUSH
61660: LD_INT 5
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 6
61669: PUSH
61670: LD_INT 6
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 5
61679: PUSH
61680: LD_INT 6
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61701: LD_ADDR_VAR 0 32
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 3
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: LD_INT 4
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 4
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 5
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 5
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 4
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 6
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 6
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 5
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61844: LD_ADDR_VAR 0 33
61848: PUSH
61849: LD_INT 2
61851: NEG
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: NEG
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 4
61896: NEG
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 4
61907: NEG
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: NEG
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 5
61930: NEG
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 5
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 5
61953: NEG
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 6
61964: NEG
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 6
61975: NEG
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61999: LD_ADDR_VAR 0 34
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: LD_INT 3
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: NEG
62031: PUSH
62032: LD_INT 3
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: LD_INT 4
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 4
62054: NEG
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 4
62066: NEG
62067: PUSH
62068: LD_INT 4
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 4
62078: NEG
62079: PUSH
62080: LD_INT 5
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 5
62090: NEG
62091: PUSH
62092: LD_INT 4
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 5
62102: NEG
62103: PUSH
62104: LD_INT 5
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 5
62114: NEG
62115: PUSH
62116: LD_INT 6
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 6
62126: NEG
62127: PUSH
62128: LD_INT 5
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 6
62138: NEG
62139: PUSH
62140: LD_INT 6
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62162: LD_ADDR_VAR 0 41
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62206: LD_ADDR_VAR 0 42
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62247: LD_ADDR_VAR 0 43
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: LD_INT 2
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 3
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62287: LD_ADDR_VAR 0 44
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 3
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62328: LD_ADDR_VAR 0 45
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: NEG
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62372: LD_ADDR_VAR 0 46
62376: PUSH
62377: LD_INT 2
62379: NEG
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: LD_INT 3
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 3
62403: NEG
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62418: LD_ADDR_VAR 0 47
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 3
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62451: LD_ADDR_VAR 0 48
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62482: LD_ADDR_VAR 0 49
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62511: LD_ADDR_VAR 0 50
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62540: LD_ADDR_VAR 0 51
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62571: LD_ADDR_VAR 0 52
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62604: LD_ADDR_VAR 0 53
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 3
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62648: LD_ADDR_VAR 0 54
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 3
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 3
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62689: LD_ADDR_VAR 0 55
62693: PUSH
62694: LD_INT 3
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 3
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62729: LD_ADDR_VAR 0 56
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: LD_INT 3
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 3
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62770: LD_ADDR_VAR 0 57
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62814: LD_ADDR_VAR 0 58
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: LD_INT 3
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62860: LD_ADDR_VAR 0 59
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62904: LD_ADDR_VAR 0 60
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62945: LD_ADDR_VAR 0 61
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: LD_INT 2
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62985: LD_ADDR_VAR 0 62
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63026: LD_ADDR_VAR 0 63
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63070: LD_ADDR_VAR 0 64
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 2
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: ST_TO_ADDR
// end ; 2 :
63116: GO 66382
63118: LD_INT 2
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63126
63124: GO 66381
63126: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63127: LD_ADDR_VAR 0 29
63131: PUSH
63132: LD_INT 4
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 4
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 5
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 5
63165: PUSH
63166: LD_INT 1
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 3
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: LD_INT 2
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 5
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 3
63227: PUSH
63228: LD_INT 3
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 4
63247: PUSH
63248: LD_INT 3
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 4
63257: PUSH
63258: LD_INT 4
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 4
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 3
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 4
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: LD_INT 4
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 4
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 4
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 5
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 5
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 4
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 5
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 3
63410: NEG
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: NEG
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 3
63455: NEG
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 4
63466: NEG
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 4
63477: NEG
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 4
63489: NEG
63490: PUSH
63491: LD_INT 2
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 4
63512: NEG
63513: PUSH
63514: LD_INT 4
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 4
63524: NEG
63525: PUSH
63526: LD_INT 5
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 3
63536: NEG
63537: PUSH
63538: LD_INT 4
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 3
63548: NEG
63549: PUSH
63550: LD_INT 3
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 4
63560: NEG
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 5
63572: NEG
63573: PUSH
63574: LD_INT 4
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 5
63584: NEG
63585: PUSH
63586: LD_INT 5
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 5
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 5
63608: NEG
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63665: LD_ADDR_VAR 0 30
63669: PUSH
63670: LD_INT 4
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 4
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 5
63692: PUSH
63693: LD_INT 4
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 5
63702: PUSH
63703: LD_INT 5
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 4
63712: PUSH
63713: LD_INT 5
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: LD_INT 4
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: LD_INT 3
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 5
63742: PUSH
63743: LD_INT 3
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: LD_INT 5
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: LD_INT 3
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: LD_INT 4
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 4
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 3
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 4
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: LD_INT 2
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 4
63855: NEG
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 4
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 3
63878: NEG
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 3
63889: NEG
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 5
63911: NEG
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 5
63922: NEG
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 5
63934: NEG
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: LD_INT 2
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 3
63957: NEG
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 3
63969: NEG
63970: PUSH
63971: LD_INT 4
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: LD_INT 2
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: LD_INT 2
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: LD_INT 3
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: NEG
64030: PUSH
64031: LD_INT 4
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 2
64041: NEG
64042: PUSH
64043: LD_INT 4
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 4
64053: NEG
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 4
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 5
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: LD_INT 4
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: LD_INT 3
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: LD_INT 4
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: LD_INT 5
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 3
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: LD_INT 5
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64212: LD_ADDR_VAR 0 31
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 4
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 4
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 5
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 5
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 4
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: LD_INT 3
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: LD_INT 5
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: LD_INT 3
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 3
64312: NEG
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: NEG
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 3
64357: NEG
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 4
64368: NEG
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 4
64379: NEG
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 4
64391: NEG
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 4
64414: NEG
64415: PUSH
64416: LD_INT 4
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 4
64426: NEG
64427: PUSH
64428: LD_INT 5
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 3
64438: NEG
64439: PUSH
64440: LD_INT 4
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 3
64450: NEG
64451: PUSH
64452: LD_INT 3
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 4
64462: NEG
64463: PUSH
64464: LD_INT 3
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 5
64474: NEG
64475: PUSH
64476: LD_INT 4
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 5
64486: NEG
64487: PUSH
64488: LD_INT 5
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 3
64498: NEG
64499: PUSH
64500: LD_INT 5
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 5
64510: NEG
64511: PUSH
64512: LD_INT 3
64514: NEG
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 3
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: LD_INT 4
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: LD_INT 3
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 2
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: LD_INT 3
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 4
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: LD_INT 2
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: LD_INT 4
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 4
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 4
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 5
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 5
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 4
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 3
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 3
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: LD_INT 2
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 5
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64762: LD_ADDR_VAR 0 32
64766: PUSH
64767: LD_INT 4
64769: NEG
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 4
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 4
64814: NEG
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 5
64825: NEG
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 5
64836: NEG
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 5
64848: NEG
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 3
64860: NEG
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 3
64871: NEG
64872: PUSH
64873: LD_INT 3
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: LD_INT 4
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: NEG
64896: PUSH
64897: LD_INT 3
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 2
64907: NEG
64908: PUSH
64909: LD_INT 2
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: NEG
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 4
64931: NEG
64932: PUSH
64933: LD_INT 3
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 4
64943: NEG
64944: PUSH
64945: LD_INT 4
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: NEG
64956: PUSH
64957: LD_INT 4
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 4
64967: NEG
64968: PUSH
64969: LD_INT 2
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 4
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: LD_INT 5
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: LD_INT 4
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: LD_INT 4
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: LD_INT 5
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: LD_INT 5
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 4
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 4
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: LD_INT 2
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 4
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: LD_INT 4
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 4
65184: PUSH
65185: LD_INT 3
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 5
65194: PUSH
65195: LD_INT 4
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 5
65204: PUSH
65205: LD_INT 5
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 4
65214: PUSH
65215: LD_INT 5
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: LD_INT 4
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 3
65234: PUSH
65235: LD_INT 3
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 5
65244: PUSH
65245: LD_INT 3
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 3
65254: PUSH
65255: LD_INT 5
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65309: LD_ADDR_VAR 0 33
65313: PUSH
65314: LD_INT 4
65316: NEG
65317: PUSH
65318: LD_INT 4
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 4
65328: NEG
65329: PUSH
65330: LD_INT 5
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 3
65340: NEG
65341: PUSH
65342: LD_INT 4
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: LD_INT 3
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 4
65364: NEG
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 5
65376: NEG
65377: PUSH
65378: LD_INT 4
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 5
65388: NEG
65389: PUSH
65390: LD_INT 5
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: NEG
65401: PUSH
65402: LD_INT 5
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 5
65412: NEG
65413: PUSH
65414: LD_INT 3
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: LD_INT 4
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: NEG
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: LD_INT 4
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 4
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 5
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 5
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 4
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 3
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 3
65598: PUSH
65599: LD_INT 2
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 5
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 4
65639: PUSH
65640: LD_INT 3
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 4
65649: PUSH
65650: LD_INT 4
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: PUSH
65660: LD_INT 4
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: PUSH
65670: LD_INT 3
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 4
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: LD_INT 4
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 3
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: LD_INT 4
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: LD_INT 5
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 5
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: LD_INT 4
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 3
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: LD_INT 5
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 2
65791: NEG
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65847: LD_ADDR_VAR 0 34
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 4
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 5
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: LD_INT 4
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: LD_INT 3
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: LD_INT 4
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: LD_INT 5
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: LD_INT 3
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: LD_INT 5
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 4
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 4
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 3
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 4
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 4
66049: PUSH
66050: LD_INT 4
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 4
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 5
66069: PUSH
66070: LD_INT 4
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 5
66079: PUSH
66080: LD_INT 5
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 4
66089: PUSH
66090: LD_INT 5
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 3
66099: PUSH
66100: LD_INT 4
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: LD_INT 3
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 5
66119: PUSH
66120: LD_INT 3
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: LD_INT 5
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: LD_INT 3
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 3
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: LD_INT 4
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: LD_INT 4
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 1
66189: NEG
66190: PUSH
66191: LD_INT 3
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: LD_INT 2
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: LD_INT 4
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 2
66221: NEG
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 4
66232: NEG
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 4
66243: NEG
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 3
66255: NEG
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 3
66266: NEG
66267: PUSH
66268: LD_INT 1
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 4
66277: NEG
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 5
66288: NEG
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 5
66299: NEG
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 5
66311: NEG
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 3
66323: NEG
66324: PUSH
66325: LD_INT 2
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// end ; end ;
66379: GO 66382
66381: POP
// case btype of b_depot , b_warehouse :
66382: LD_VAR 0 1
66386: PUSH
66387: LD_INT 0
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66401
66393: LD_INT 1
66395: DOUBLE
66396: EQUAL
66397: IFTRUE 66401
66399: GO 66602
66401: POP
// case nation of nation_american :
66402: LD_VAR 0 5
66406: PUSH
66407: LD_INT 1
66409: DOUBLE
66410: EQUAL
66411: IFTRUE 66415
66413: GO 66471
66415: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66416: LD_ADDR_VAR 0 9
66420: PUSH
66421: LD_VAR 0 11
66425: PUSH
66426: LD_VAR 0 12
66430: PUSH
66431: LD_VAR 0 13
66435: PUSH
66436: LD_VAR 0 14
66440: PUSH
66441: LD_VAR 0 15
66445: PUSH
66446: LD_VAR 0 16
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: LD_VAR 0 4
66463: PUSH
66464: LD_INT 1
66466: PLUS
66467: ARRAY
66468: ST_TO_ADDR
66469: GO 66600
66471: LD_INT 2
66473: DOUBLE
66474: EQUAL
66475: IFTRUE 66479
66477: GO 66535
66479: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66480: LD_ADDR_VAR 0 9
66484: PUSH
66485: LD_VAR 0 17
66489: PUSH
66490: LD_VAR 0 18
66494: PUSH
66495: LD_VAR 0 19
66499: PUSH
66500: LD_VAR 0 20
66504: PUSH
66505: LD_VAR 0 21
66509: PUSH
66510: LD_VAR 0 22
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: PUSH
66523: LD_VAR 0 4
66527: PUSH
66528: LD_INT 1
66530: PLUS
66531: ARRAY
66532: ST_TO_ADDR
66533: GO 66600
66535: LD_INT 3
66537: DOUBLE
66538: EQUAL
66539: IFTRUE 66543
66541: GO 66599
66543: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66544: LD_ADDR_VAR 0 9
66548: PUSH
66549: LD_VAR 0 23
66553: PUSH
66554: LD_VAR 0 24
66558: PUSH
66559: LD_VAR 0 25
66563: PUSH
66564: LD_VAR 0 26
66568: PUSH
66569: LD_VAR 0 27
66573: PUSH
66574: LD_VAR 0 28
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: PUSH
66587: LD_VAR 0 4
66591: PUSH
66592: LD_INT 1
66594: PLUS
66595: ARRAY
66596: ST_TO_ADDR
66597: GO 66600
66599: POP
66600: GO 67155
66602: LD_INT 2
66604: DOUBLE
66605: EQUAL
66606: IFTRUE 66616
66608: LD_INT 3
66610: DOUBLE
66611: EQUAL
66612: IFTRUE 66616
66614: GO 66672
66616: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66617: LD_ADDR_VAR 0 9
66621: PUSH
66622: LD_VAR 0 29
66626: PUSH
66627: LD_VAR 0 30
66631: PUSH
66632: LD_VAR 0 31
66636: PUSH
66637: LD_VAR 0 32
66641: PUSH
66642: LD_VAR 0 33
66646: PUSH
66647: LD_VAR 0 34
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: PUSH
66660: LD_VAR 0 4
66664: PUSH
66665: LD_INT 1
66667: PLUS
66668: ARRAY
66669: ST_TO_ADDR
66670: GO 67155
66672: LD_INT 16
66674: DOUBLE
66675: EQUAL
66676: IFTRUE 66734
66678: LD_INT 17
66680: DOUBLE
66681: EQUAL
66682: IFTRUE 66734
66684: LD_INT 18
66686: DOUBLE
66687: EQUAL
66688: IFTRUE 66734
66690: LD_INT 19
66692: DOUBLE
66693: EQUAL
66694: IFTRUE 66734
66696: LD_INT 22
66698: DOUBLE
66699: EQUAL
66700: IFTRUE 66734
66702: LD_INT 20
66704: DOUBLE
66705: EQUAL
66706: IFTRUE 66734
66708: LD_INT 21
66710: DOUBLE
66711: EQUAL
66712: IFTRUE 66734
66714: LD_INT 23
66716: DOUBLE
66717: EQUAL
66718: IFTRUE 66734
66720: LD_INT 24
66722: DOUBLE
66723: EQUAL
66724: IFTRUE 66734
66726: LD_INT 25
66728: DOUBLE
66729: EQUAL
66730: IFTRUE 66734
66732: GO 66790
66734: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66735: LD_ADDR_VAR 0 9
66739: PUSH
66740: LD_VAR 0 35
66744: PUSH
66745: LD_VAR 0 36
66749: PUSH
66750: LD_VAR 0 37
66754: PUSH
66755: LD_VAR 0 38
66759: PUSH
66760: LD_VAR 0 39
66764: PUSH
66765: LD_VAR 0 40
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: PUSH
66778: LD_VAR 0 4
66782: PUSH
66783: LD_INT 1
66785: PLUS
66786: ARRAY
66787: ST_TO_ADDR
66788: GO 67155
66790: LD_INT 6
66792: DOUBLE
66793: EQUAL
66794: IFTRUE 66846
66796: LD_INT 7
66798: DOUBLE
66799: EQUAL
66800: IFTRUE 66846
66802: LD_INT 8
66804: DOUBLE
66805: EQUAL
66806: IFTRUE 66846
66808: LD_INT 13
66810: DOUBLE
66811: EQUAL
66812: IFTRUE 66846
66814: LD_INT 12
66816: DOUBLE
66817: EQUAL
66818: IFTRUE 66846
66820: LD_INT 15
66822: DOUBLE
66823: EQUAL
66824: IFTRUE 66846
66826: LD_INT 11
66828: DOUBLE
66829: EQUAL
66830: IFTRUE 66846
66832: LD_INT 14
66834: DOUBLE
66835: EQUAL
66836: IFTRUE 66846
66838: LD_INT 10
66840: DOUBLE
66841: EQUAL
66842: IFTRUE 66846
66844: GO 66902
66846: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66847: LD_ADDR_VAR 0 9
66851: PUSH
66852: LD_VAR 0 41
66856: PUSH
66857: LD_VAR 0 42
66861: PUSH
66862: LD_VAR 0 43
66866: PUSH
66867: LD_VAR 0 44
66871: PUSH
66872: LD_VAR 0 45
66876: PUSH
66877: LD_VAR 0 46
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: PUSH
66890: LD_VAR 0 4
66894: PUSH
66895: LD_INT 1
66897: PLUS
66898: ARRAY
66899: ST_TO_ADDR
66900: GO 67155
66902: LD_INT 36
66904: DOUBLE
66905: EQUAL
66906: IFTRUE 66910
66908: GO 66966
66910: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66911: LD_ADDR_VAR 0 9
66915: PUSH
66916: LD_VAR 0 47
66920: PUSH
66921: LD_VAR 0 48
66925: PUSH
66926: LD_VAR 0 49
66930: PUSH
66931: LD_VAR 0 50
66935: PUSH
66936: LD_VAR 0 51
66940: PUSH
66941: LD_VAR 0 52
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: PUSH
66954: LD_VAR 0 4
66958: PUSH
66959: LD_INT 1
66961: PLUS
66962: ARRAY
66963: ST_TO_ADDR
66964: GO 67155
66966: LD_INT 4
66968: DOUBLE
66969: EQUAL
66970: IFTRUE 66992
66972: LD_INT 5
66974: DOUBLE
66975: EQUAL
66976: IFTRUE 66992
66978: LD_INT 34
66980: DOUBLE
66981: EQUAL
66982: IFTRUE 66992
66984: LD_INT 37
66986: DOUBLE
66987: EQUAL
66988: IFTRUE 66992
66990: GO 67048
66992: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66993: LD_ADDR_VAR 0 9
66997: PUSH
66998: LD_VAR 0 53
67002: PUSH
67003: LD_VAR 0 54
67007: PUSH
67008: LD_VAR 0 55
67012: PUSH
67013: LD_VAR 0 56
67017: PUSH
67018: LD_VAR 0 57
67022: PUSH
67023: LD_VAR 0 58
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: PUSH
67036: LD_VAR 0 4
67040: PUSH
67041: LD_INT 1
67043: PLUS
67044: ARRAY
67045: ST_TO_ADDR
67046: GO 67155
67048: LD_INT 31
67050: DOUBLE
67051: EQUAL
67052: IFTRUE 67098
67054: LD_INT 32
67056: DOUBLE
67057: EQUAL
67058: IFTRUE 67098
67060: LD_INT 33
67062: DOUBLE
67063: EQUAL
67064: IFTRUE 67098
67066: LD_INT 27
67068: DOUBLE
67069: EQUAL
67070: IFTRUE 67098
67072: LD_INT 26
67074: DOUBLE
67075: EQUAL
67076: IFTRUE 67098
67078: LD_INT 28
67080: DOUBLE
67081: EQUAL
67082: IFTRUE 67098
67084: LD_INT 29
67086: DOUBLE
67087: EQUAL
67088: IFTRUE 67098
67090: LD_INT 30
67092: DOUBLE
67093: EQUAL
67094: IFTRUE 67098
67096: GO 67154
67098: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67099: LD_ADDR_VAR 0 9
67103: PUSH
67104: LD_VAR 0 59
67108: PUSH
67109: LD_VAR 0 60
67113: PUSH
67114: LD_VAR 0 61
67118: PUSH
67119: LD_VAR 0 62
67123: PUSH
67124: LD_VAR 0 63
67128: PUSH
67129: LD_VAR 0 64
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: PUSH
67142: LD_VAR 0 4
67146: PUSH
67147: LD_INT 1
67149: PLUS
67150: ARRAY
67151: ST_TO_ADDR
67152: GO 67155
67154: POP
// temp_list2 = [ ] ;
67155: LD_ADDR_VAR 0 10
67159: PUSH
67160: EMPTY
67161: ST_TO_ADDR
// for i in temp_list do
67162: LD_ADDR_VAR 0 8
67166: PUSH
67167: LD_VAR 0 9
67171: PUSH
67172: FOR_IN
67173: IFFALSE 67225
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67175: LD_ADDR_VAR 0 10
67179: PUSH
67180: LD_VAR 0 10
67184: PUSH
67185: LD_VAR 0 8
67189: PUSH
67190: LD_INT 1
67192: ARRAY
67193: PUSH
67194: LD_VAR 0 2
67198: PLUS
67199: PUSH
67200: LD_VAR 0 8
67204: PUSH
67205: LD_INT 2
67207: ARRAY
67208: PUSH
67209: LD_VAR 0 3
67213: PLUS
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: EMPTY
67220: LIST
67221: ADD
67222: ST_TO_ADDR
67223: GO 67172
67225: POP
67226: POP
// result = temp_list2 ;
67227: LD_ADDR_VAR 0 7
67231: PUSH
67232: LD_VAR 0 10
67236: ST_TO_ADDR
// end ;
67237: LD_VAR 0 7
67241: RET
// export function EnemyInRange ( unit , dist ) ; begin
67242: LD_INT 0
67244: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67245: LD_ADDR_VAR 0 3
67249: PUSH
67250: LD_VAR 0 1
67254: PPUSH
67255: CALL_OW 255
67259: PPUSH
67260: LD_VAR 0 1
67264: PPUSH
67265: CALL_OW 250
67269: PPUSH
67270: LD_VAR 0 1
67274: PPUSH
67275: CALL_OW 251
67279: PPUSH
67280: LD_VAR 0 2
67284: PPUSH
67285: CALL 40644 0 4
67289: PUSH
67290: LD_INT 4
67292: ARRAY
67293: ST_TO_ADDR
// end ;
67294: LD_VAR 0 3
67298: RET
// export function PlayerSeeMe ( unit ) ; begin
67299: LD_INT 0
67301: PPUSH
// result := See ( your_side , unit ) ;
67302: LD_ADDR_VAR 0 2
67306: PUSH
67307: LD_OWVAR 2
67311: PPUSH
67312: LD_VAR 0 1
67316: PPUSH
67317: CALL_OW 292
67321: ST_TO_ADDR
// end ;
67322: LD_VAR 0 2
67326: RET
// export function ReverseDir ( unit ) ; begin
67327: LD_INT 0
67329: PPUSH
// if not unit then
67330: LD_VAR 0 1
67334: NOT
67335: IFFALSE 67339
// exit ;
67337: GO 67362
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67339: LD_ADDR_VAR 0 2
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 254
67353: PUSH
67354: LD_INT 3
67356: PLUS
67357: PUSH
67358: LD_INT 6
67360: MOD
67361: ST_TO_ADDR
// end ;
67362: LD_VAR 0 2
67366: RET
// export function ReverseArray ( array ) ; var i ; begin
67367: LD_INT 0
67369: PPUSH
67370: PPUSH
// if not array then
67371: LD_VAR 0 1
67375: NOT
67376: IFFALSE 67380
// exit ;
67378: GO 67435
// result := [ ] ;
67380: LD_ADDR_VAR 0 2
67384: PUSH
67385: EMPTY
67386: ST_TO_ADDR
// for i := array downto 1 do
67387: LD_ADDR_VAR 0 3
67391: PUSH
67392: DOUBLE
67393: LD_VAR 0 1
67397: INC
67398: ST_TO_ADDR
67399: LD_INT 1
67401: PUSH
67402: FOR_DOWNTO
67403: IFFALSE 67433
// result := Join ( result , array [ i ] ) ;
67405: LD_ADDR_VAR 0 2
67409: PUSH
67410: LD_VAR 0 2
67414: PPUSH
67415: LD_VAR 0 1
67419: PUSH
67420: LD_VAR 0 3
67424: ARRAY
67425: PPUSH
67426: CALL 72051 0 2
67430: ST_TO_ADDR
67431: GO 67402
67433: POP
67434: POP
// end ;
67435: LD_VAR 0 2
67439: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67440: LD_INT 0
67442: PPUSH
67443: PPUSH
67444: PPUSH
67445: PPUSH
67446: PPUSH
67447: PPUSH
// if not unit or not hexes then
67448: LD_VAR 0 1
67452: NOT
67453: PUSH
67454: LD_VAR 0 2
67458: NOT
67459: OR
67460: IFFALSE 67464
// exit ;
67462: GO 67587
// dist := 9999 ;
67464: LD_ADDR_VAR 0 5
67468: PUSH
67469: LD_INT 9999
67471: ST_TO_ADDR
// for i = 1 to hexes do
67472: LD_ADDR_VAR 0 4
67476: PUSH
67477: DOUBLE
67478: LD_INT 1
67480: DEC
67481: ST_TO_ADDR
67482: LD_VAR 0 2
67486: PUSH
67487: FOR_TO
67488: IFFALSE 67575
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67490: LD_ADDR_VAR 0 6
67494: PUSH
67495: LD_VAR 0 1
67499: PPUSH
67500: LD_VAR 0 2
67504: PUSH
67505: LD_VAR 0 4
67509: ARRAY
67510: PUSH
67511: LD_INT 1
67513: ARRAY
67514: PPUSH
67515: LD_VAR 0 2
67519: PUSH
67520: LD_VAR 0 4
67524: ARRAY
67525: PUSH
67526: LD_INT 2
67528: ARRAY
67529: PPUSH
67530: CALL_OW 297
67534: ST_TO_ADDR
// if tdist < dist then
67535: LD_VAR 0 6
67539: PUSH
67540: LD_VAR 0 5
67544: LESS
67545: IFFALSE 67573
// begin hex := hexes [ i ] ;
67547: LD_ADDR_VAR 0 8
67551: PUSH
67552: LD_VAR 0 2
67556: PUSH
67557: LD_VAR 0 4
67561: ARRAY
67562: ST_TO_ADDR
// dist := tdist ;
67563: LD_ADDR_VAR 0 5
67567: PUSH
67568: LD_VAR 0 6
67572: ST_TO_ADDR
// end ; end ;
67573: GO 67487
67575: POP
67576: POP
// result := hex ;
67577: LD_ADDR_VAR 0 3
67581: PUSH
67582: LD_VAR 0 8
67586: ST_TO_ADDR
// end ;
67587: LD_VAR 0 3
67591: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67592: LD_INT 0
67594: PPUSH
67595: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67596: LD_VAR 0 1
67600: NOT
67601: PUSH
67602: LD_VAR 0 1
67606: PUSH
67607: LD_INT 21
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 23
67619: PUSH
67620: LD_INT 2
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PPUSH
67631: CALL_OW 69
67635: IN
67636: NOT
67637: OR
67638: IFFALSE 67642
// exit ;
67640: GO 67689
// for i = 1 to 3 do
67642: LD_ADDR_VAR 0 3
67646: PUSH
67647: DOUBLE
67648: LD_INT 1
67650: DEC
67651: ST_TO_ADDR
67652: LD_INT 3
67654: PUSH
67655: FOR_TO
67656: IFFALSE 67687
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67658: LD_VAR 0 1
67662: PPUSH
67663: CALL_OW 250
67667: PPUSH
67668: LD_VAR 0 1
67672: PPUSH
67673: CALL_OW 251
67677: PPUSH
67678: LD_INT 1
67680: PPUSH
67681: CALL_OW 453
67685: GO 67655
67687: POP
67688: POP
// end ;
67689: LD_VAR 0 2
67693: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67694: LD_INT 0
67696: PPUSH
67697: PPUSH
67698: PPUSH
67699: PPUSH
67700: PPUSH
67701: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67702: LD_VAR 0 1
67706: NOT
67707: PUSH
67708: LD_VAR 0 2
67712: NOT
67713: OR
67714: PUSH
67715: LD_VAR 0 1
67719: PPUSH
67720: CALL_OW 314
67724: OR
67725: IFFALSE 67729
// exit ;
67727: GO 68170
// x := GetX ( enemy_unit ) ;
67729: LD_ADDR_VAR 0 7
67733: PUSH
67734: LD_VAR 0 2
67738: PPUSH
67739: CALL_OW 250
67743: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67744: LD_ADDR_VAR 0 8
67748: PUSH
67749: LD_VAR 0 2
67753: PPUSH
67754: CALL_OW 251
67758: ST_TO_ADDR
// if not x or not y then
67759: LD_VAR 0 7
67763: NOT
67764: PUSH
67765: LD_VAR 0 8
67769: NOT
67770: OR
67771: IFFALSE 67775
// exit ;
67773: GO 68170
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67775: LD_ADDR_VAR 0 6
67779: PUSH
67780: LD_VAR 0 7
67784: PPUSH
67785: LD_INT 0
67787: PPUSH
67788: LD_INT 4
67790: PPUSH
67791: CALL_OW 272
67795: PUSH
67796: LD_VAR 0 8
67800: PPUSH
67801: LD_INT 0
67803: PPUSH
67804: LD_INT 4
67806: PPUSH
67807: CALL_OW 273
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_VAR 0 7
67820: PPUSH
67821: LD_INT 1
67823: PPUSH
67824: LD_INT 4
67826: PPUSH
67827: CALL_OW 272
67831: PUSH
67832: LD_VAR 0 8
67836: PPUSH
67837: LD_INT 1
67839: PPUSH
67840: LD_INT 4
67842: PPUSH
67843: CALL_OW 273
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_VAR 0 7
67856: PPUSH
67857: LD_INT 2
67859: PPUSH
67860: LD_INT 4
67862: PPUSH
67863: CALL_OW 272
67867: PUSH
67868: LD_VAR 0 8
67872: PPUSH
67873: LD_INT 2
67875: PPUSH
67876: LD_INT 4
67878: PPUSH
67879: CALL_OW 273
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_VAR 0 7
67892: PPUSH
67893: LD_INT 3
67895: PPUSH
67896: LD_INT 4
67898: PPUSH
67899: CALL_OW 272
67903: PUSH
67904: LD_VAR 0 8
67908: PPUSH
67909: LD_INT 3
67911: PPUSH
67912: LD_INT 4
67914: PPUSH
67915: CALL_OW 273
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_VAR 0 7
67928: PPUSH
67929: LD_INT 4
67931: PPUSH
67932: LD_INT 4
67934: PPUSH
67935: CALL_OW 272
67939: PUSH
67940: LD_VAR 0 8
67944: PPUSH
67945: LD_INT 4
67947: PPUSH
67948: LD_INT 4
67950: PPUSH
67951: CALL_OW 273
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_VAR 0 7
67964: PPUSH
67965: LD_INT 5
67967: PPUSH
67968: LD_INT 4
67970: PPUSH
67971: CALL_OW 272
67975: PUSH
67976: LD_VAR 0 8
67980: PPUSH
67981: LD_INT 5
67983: PPUSH
67984: LD_INT 4
67986: PPUSH
67987: CALL_OW 273
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: ST_TO_ADDR
// for i = tmp downto 1 do
68004: LD_ADDR_VAR 0 4
68008: PUSH
68009: DOUBLE
68010: LD_VAR 0 6
68014: INC
68015: ST_TO_ADDR
68016: LD_INT 1
68018: PUSH
68019: FOR_DOWNTO
68020: IFFALSE 68121
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68022: LD_VAR 0 6
68026: PUSH
68027: LD_VAR 0 4
68031: ARRAY
68032: PUSH
68033: LD_INT 1
68035: ARRAY
68036: PPUSH
68037: LD_VAR 0 6
68041: PUSH
68042: LD_VAR 0 4
68046: ARRAY
68047: PUSH
68048: LD_INT 2
68050: ARRAY
68051: PPUSH
68052: CALL_OW 488
68056: NOT
68057: PUSH
68058: LD_VAR 0 6
68062: PUSH
68063: LD_VAR 0 4
68067: ARRAY
68068: PUSH
68069: LD_INT 1
68071: ARRAY
68072: PPUSH
68073: LD_VAR 0 6
68077: PUSH
68078: LD_VAR 0 4
68082: ARRAY
68083: PUSH
68084: LD_INT 2
68086: ARRAY
68087: PPUSH
68088: CALL_OW 428
68092: PUSH
68093: LD_INT 0
68095: NONEQUAL
68096: OR
68097: IFFALSE 68119
// tmp := Delete ( tmp , i ) ;
68099: LD_ADDR_VAR 0 6
68103: PUSH
68104: LD_VAR 0 6
68108: PPUSH
68109: LD_VAR 0 4
68113: PPUSH
68114: CALL_OW 3
68118: ST_TO_ADDR
68119: GO 68019
68121: POP
68122: POP
// j := GetClosestHex ( unit , tmp ) ;
68123: LD_ADDR_VAR 0 5
68127: PUSH
68128: LD_VAR 0 1
68132: PPUSH
68133: LD_VAR 0 6
68137: PPUSH
68138: CALL 67440 0 2
68142: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68143: LD_VAR 0 1
68147: PPUSH
68148: LD_VAR 0 5
68152: PUSH
68153: LD_INT 1
68155: ARRAY
68156: PPUSH
68157: LD_VAR 0 5
68161: PUSH
68162: LD_INT 2
68164: ARRAY
68165: PPUSH
68166: CALL_OW 111
// end ;
68170: LD_VAR 0 3
68174: RET
// export function PrepareApemanSoldier ( ) ; begin
68175: LD_INT 0
68177: PPUSH
// uc_nation := 0 ;
68178: LD_ADDR_OWVAR 21
68182: PUSH
68183: LD_INT 0
68185: ST_TO_ADDR
// hc_sex := sex_male ;
68186: LD_ADDR_OWVAR 27
68190: PUSH
68191: LD_INT 1
68193: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68194: LD_ADDR_OWVAR 28
68198: PUSH
68199: LD_INT 15
68201: ST_TO_ADDR
// hc_gallery :=  ;
68202: LD_ADDR_OWVAR 33
68206: PUSH
68207: LD_STRING 
68209: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68210: LD_ADDR_OWVAR 31
68214: PUSH
68215: LD_INT 0
68217: PPUSH
68218: LD_INT 3
68220: PPUSH
68221: CALL_OW 12
68225: PUSH
68226: LD_INT 0
68228: PPUSH
68229: LD_INT 3
68231: PPUSH
68232: CALL_OW 12
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: ST_TO_ADDR
// end ;
68249: LD_VAR 0 1
68253: RET
// export function PrepareApemanEngineer ( ) ; begin
68254: LD_INT 0
68256: PPUSH
// uc_nation := 0 ;
68257: LD_ADDR_OWVAR 21
68261: PUSH
68262: LD_INT 0
68264: ST_TO_ADDR
// hc_sex := sex_male ;
68265: LD_ADDR_OWVAR 27
68269: PUSH
68270: LD_INT 1
68272: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68273: LD_ADDR_OWVAR 28
68277: PUSH
68278: LD_INT 16
68280: ST_TO_ADDR
// hc_gallery :=  ;
68281: LD_ADDR_OWVAR 33
68285: PUSH
68286: LD_STRING 
68288: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68289: LD_ADDR_OWVAR 31
68293: PUSH
68294: LD_INT 0
68296: PPUSH
68297: LD_INT 3
68299: PPUSH
68300: CALL_OW 12
68304: PUSH
68305: LD_INT 0
68307: PPUSH
68308: LD_INT 3
68310: PPUSH
68311: CALL_OW 12
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: ST_TO_ADDR
// end ;
68328: LD_VAR 0 1
68332: RET
// export function PrepareApeman ( agressivity ) ; begin
68333: LD_INT 0
68335: PPUSH
// uc_side := 0 ;
68336: LD_ADDR_OWVAR 20
68340: PUSH
68341: LD_INT 0
68343: ST_TO_ADDR
// uc_nation := 0 ;
68344: LD_ADDR_OWVAR 21
68348: PUSH
68349: LD_INT 0
68351: ST_TO_ADDR
// hc_sex := sex_male ;
68352: LD_ADDR_OWVAR 27
68356: PUSH
68357: LD_INT 1
68359: ST_TO_ADDR
// hc_class := class_apeman ;
68360: LD_ADDR_OWVAR 28
68364: PUSH
68365: LD_INT 12
68367: ST_TO_ADDR
// hc_gallery :=  ;
68368: LD_ADDR_OWVAR 33
68372: PUSH
68373: LD_STRING 
68375: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68376: LD_ADDR_OWVAR 35
68380: PUSH
68381: LD_VAR 0 1
68385: NEG
68386: PPUSH
68387: LD_VAR 0 1
68391: PPUSH
68392: CALL_OW 12
68396: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68397: LD_ADDR_OWVAR 31
68401: PUSH
68402: LD_INT 0
68404: PPUSH
68405: LD_INT 3
68407: PPUSH
68408: CALL_OW 12
68412: PUSH
68413: LD_INT 0
68415: PPUSH
68416: LD_INT 3
68418: PPUSH
68419: CALL_OW 12
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: ST_TO_ADDR
// end ;
68436: LD_VAR 0 2
68440: RET
// export function PrepareTiger ( agressivity ) ; begin
68441: LD_INT 0
68443: PPUSH
// uc_side := 0 ;
68444: LD_ADDR_OWVAR 20
68448: PUSH
68449: LD_INT 0
68451: ST_TO_ADDR
// uc_nation := 0 ;
68452: LD_ADDR_OWVAR 21
68456: PUSH
68457: LD_INT 0
68459: ST_TO_ADDR
// hc_class := class_tiger ;
68460: LD_ADDR_OWVAR 28
68464: PUSH
68465: LD_INT 14
68467: ST_TO_ADDR
// hc_gallery :=  ;
68468: LD_ADDR_OWVAR 33
68472: PUSH
68473: LD_STRING 
68475: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68476: LD_ADDR_OWVAR 35
68480: PUSH
68481: LD_VAR 0 1
68485: NEG
68486: PPUSH
68487: LD_VAR 0 1
68491: PPUSH
68492: CALL_OW 12
68496: ST_TO_ADDR
// end ;
68497: LD_VAR 0 2
68501: RET
// export function PrepareEnchidna ( ) ; begin
68502: LD_INT 0
68504: PPUSH
// uc_side := 0 ;
68505: LD_ADDR_OWVAR 20
68509: PUSH
68510: LD_INT 0
68512: ST_TO_ADDR
// uc_nation := 0 ;
68513: LD_ADDR_OWVAR 21
68517: PUSH
68518: LD_INT 0
68520: ST_TO_ADDR
// hc_class := class_baggie ;
68521: LD_ADDR_OWVAR 28
68525: PUSH
68526: LD_INT 13
68528: ST_TO_ADDR
// hc_gallery :=  ;
68529: LD_ADDR_OWVAR 33
68533: PUSH
68534: LD_STRING 
68536: ST_TO_ADDR
// end ;
68537: LD_VAR 0 1
68541: RET
// export function PrepareFrog ( ) ; begin
68542: LD_INT 0
68544: PPUSH
// uc_side := 0 ;
68545: LD_ADDR_OWVAR 20
68549: PUSH
68550: LD_INT 0
68552: ST_TO_ADDR
// uc_nation := 0 ;
68553: LD_ADDR_OWVAR 21
68557: PUSH
68558: LD_INT 0
68560: ST_TO_ADDR
// hc_class := class_frog ;
68561: LD_ADDR_OWVAR 28
68565: PUSH
68566: LD_INT 19
68568: ST_TO_ADDR
// hc_gallery :=  ;
68569: LD_ADDR_OWVAR 33
68573: PUSH
68574: LD_STRING 
68576: ST_TO_ADDR
// end ;
68577: LD_VAR 0 1
68581: RET
// export function PrepareFish ( ) ; begin
68582: LD_INT 0
68584: PPUSH
// uc_side := 0 ;
68585: LD_ADDR_OWVAR 20
68589: PUSH
68590: LD_INT 0
68592: ST_TO_ADDR
// uc_nation := 0 ;
68593: LD_ADDR_OWVAR 21
68597: PUSH
68598: LD_INT 0
68600: ST_TO_ADDR
// hc_class := class_fish ;
68601: LD_ADDR_OWVAR 28
68605: PUSH
68606: LD_INT 20
68608: ST_TO_ADDR
// hc_gallery :=  ;
68609: LD_ADDR_OWVAR 33
68613: PUSH
68614: LD_STRING 
68616: ST_TO_ADDR
// end ;
68617: LD_VAR 0 1
68621: RET
// export function PrepareBird ( ) ; begin
68622: LD_INT 0
68624: PPUSH
// uc_side := 0 ;
68625: LD_ADDR_OWVAR 20
68629: PUSH
68630: LD_INT 0
68632: ST_TO_ADDR
// uc_nation := 0 ;
68633: LD_ADDR_OWVAR 21
68637: PUSH
68638: LD_INT 0
68640: ST_TO_ADDR
// hc_class := class_phororhacos ;
68641: LD_ADDR_OWVAR 28
68645: PUSH
68646: LD_INT 18
68648: ST_TO_ADDR
// hc_gallery :=  ;
68649: LD_ADDR_OWVAR 33
68653: PUSH
68654: LD_STRING 
68656: ST_TO_ADDR
// end ;
68657: LD_VAR 0 1
68661: RET
// export function PrepareHorse ( ) ; begin
68662: LD_INT 0
68664: PPUSH
// uc_side := 0 ;
68665: LD_ADDR_OWVAR 20
68669: PUSH
68670: LD_INT 0
68672: ST_TO_ADDR
// uc_nation := 0 ;
68673: LD_ADDR_OWVAR 21
68677: PUSH
68678: LD_INT 0
68680: ST_TO_ADDR
// hc_class := class_horse ;
68681: LD_ADDR_OWVAR 28
68685: PUSH
68686: LD_INT 21
68688: ST_TO_ADDR
// hc_gallery :=  ;
68689: LD_ADDR_OWVAR 33
68693: PUSH
68694: LD_STRING 
68696: ST_TO_ADDR
// end ;
68697: LD_VAR 0 1
68701: RET
// export function PrepareMastodont ( ) ; begin
68702: LD_INT 0
68704: PPUSH
// uc_side := 0 ;
68705: LD_ADDR_OWVAR 20
68709: PUSH
68710: LD_INT 0
68712: ST_TO_ADDR
// uc_nation := 0 ;
68713: LD_ADDR_OWVAR 21
68717: PUSH
68718: LD_INT 0
68720: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68721: LD_ADDR_OWVAR 37
68725: PUSH
68726: LD_INT 31
68728: ST_TO_ADDR
// vc_control := control_rider ;
68729: LD_ADDR_OWVAR 38
68733: PUSH
68734: LD_INT 4
68736: ST_TO_ADDR
// end ;
68737: LD_VAR 0 1
68741: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68742: LD_INT 0
68744: PPUSH
68745: PPUSH
68746: PPUSH
// uc_side = 0 ;
68747: LD_ADDR_OWVAR 20
68751: PUSH
68752: LD_INT 0
68754: ST_TO_ADDR
// uc_nation = 0 ;
68755: LD_ADDR_OWVAR 21
68759: PUSH
68760: LD_INT 0
68762: ST_TO_ADDR
// InitHc_All ( ) ;
68763: CALL_OW 584
// InitVc ;
68767: CALL_OW 20
// if mastodonts then
68771: LD_VAR 0 6
68775: IFFALSE 68842
// for i = 1 to mastodonts do
68777: LD_ADDR_VAR 0 11
68781: PUSH
68782: DOUBLE
68783: LD_INT 1
68785: DEC
68786: ST_TO_ADDR
68787: LD_VAR 0 6
68791: PUSH
68792: FOR_TO
68793: IFFALSE 68840
// begin vc_chassis := 31 ;
68795: LD_ADDR_OWVAR 37
68799: PUSH
68800: LD_INT 31
68802: ST_TO_ADDR
// vc_control := control_rider ;
68803: LD_ADDR_OWVAR 38
68807: PUSH
68808: LD_INT 4
68810: ST_TO_ADDR
// animal := CreateVehicle ;
68811: LD_ADDR_VAR 0 12
68815: PUSH
68816: CALL_OW 45
68820: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68821: LD_VAR 0 12
68825: PPUSH
68826: LD_VAR 0 8
68830: PPUSH
68831: LD_INT 0
68833: PPUSH
68834: CALL 70968 0 3
// end ;
68838: GO 68792
68840: POP
68841: POP
// if horses then
68842: LD_VAR 0 5
68846: IFFALSE 68913
// for i = 1 to horses do
68848: LD_ADDR_VAR 0 11
68852: PUSH
68853: DOUBLE
68854: LD_INT 1
68856: DEC
68857: ST_TO_ADDR
68858: LD_VAR 0 5
68862: PUSH
68863: FOR_TO
68864: IFFALSE 68911
// begin hc_class := 21 ;
68866: LD_ADDR_OWVAR 28
68870: PUSH
68871: LD_INT 21
68873: ST_TO_ADDR
// hc_gallery :=  ;
68874: LD_ADDR_OWVAR 33
68878: PUSH
68879: LD_STRING 
68881: ST_TO_ADDR
// animal := CreateHuman ;
68882: LD_ADDR_VAR 0 12
68886: PUSH
68887: CALL_OW 44
68891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68892: LD_VAR 0 12
68896: PPUSH
68897: LD_VAR 0 8
68901: PPUSH
68902: LD_INT 0
68904: PPUSH
68905: CALL 70968 0 3
// end ;
68909: GO 68863
68911: POP
68912: POP
// if birds then
68913: LD_VAR 0 1
68917: IFFALSE 68984
// for i = 1 to birds do
68919: LD_ADDR_VAR 0 11
68923: PUSH
68924: DOUBLE
68925: LD_INT 1
68927: DEC
68928: ST_TO_ADDR
68929: LD_VAR 0 1
68933: PUSH
68934: FOR_TO
68935: IFFALSE 68982
// begin hc_class = 18 ;
68937: LD_ADDR_OWVAR 28
68941: PUSH
68942: LD_INT 18
68944: ST_TO_ADDR
// hc_gallery =  ;
68945: LD_ADDR_OWVAR 33
68949: PUSH
68950: LD_STRING 
68952: ST_TO_ADDR
// animal := CreateHuman ;
68953: LD_ADDR_VAR 0 12
68957: PUSH
68958: CALL_OW 44
68962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68963: LD_VAR 0 12
68967: PPUSH
68968: LD_VAR 0 8
68972: PPUSH
68973: LD_INT 0
68975: PPUSH
68976: CALL 70968 0 3
// end ;
68980: GO 68934
68982: POP
68983: POP
// if tigers then
68984: LD_VAR 0 2
68988: IFFALSE 69072
// for i = 1 to tigers do
68990: LD_ADDR_VAR 0 11
68994: PUSH
68995: DOUBLE
68996: LD_INT 1
68998: DEC
68999: ST_TO_ADDR
69000: LD_VAR 0 2
69004: PUSH
69005: FOR_TO
69006: IFFALSE 69070
// begin hc_class = class_tiger ;
69008: LD_ADDR_OWVAR 28
69012: PUSH
69013: LD_INT 14
69015: ST_TO_ADDR
// hc_gallery =  ;
69016: LD_ADDR_OWVAR 33
69020: PUSH
69021: LD_STRING 
69023: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69024: LD_ADDR_OWVAR 35
69028: PUSH
69029: LD_INT 7
69031: NEG
69032: PPUSH
69033: LD_INT 7
69035: PPUSH
69036: CALL_OW 12
69040: ST_TO_ADDR
// animal := CreateHuman ;
69041: LD_ADDR_VAR 0 12
69045: PUSH
69046: CALL_OW 44
69050: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69051: LD_VAR 0 12
69055: PPUSH
69056: LD_VAR 0 8
69060: PPUSH
69061: LD_INT 0
69063: PPUSH
69064: CALL 70968 0 3
// end ;
69068: GO 69005
69070: POP
69071: POP
// if apemans then
69072: LD_VAR 0 3
69076: IFFALSE 69199
// for i = 1 to apemans do
69078: LD_ADDR_VAR 0 11
69082: PUSH
69083: DOUBLE
69084: LD_INT 1
69086: DEC
69087: ST_TO_ADDR
69088: LD_VAR 0 3
69092: PUSH
69093: FOR_TO
69094: IFFALSE 69197
// begin hc_class = class_apeman ;
69096: LD_ADDR_OWVAR 28
69100: PUSH
69101: LD_INT 12
69103: ST_TO_ADDR
// hc_gallery =  ;
69104: LD_ADDR_OWVAR 33
69108: PUSH
69109: LD_STRING 
69111: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69112: LD_ADDR_OWVAR 35
69116: PUSH
69117: LD_INT 2
69119: NEG
69120: PPUSH
69121: LD_INT 2
69123: PPUSH
69124: CALL_OW 12
69128: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69129: LD_ADDR_OWVAR 31
69133: PUSH
69134: LD_INT 1
69136: PPUSH
69137: LD_INT 3
69139: PPUSH
69140: CALL_OW 12
69144: PUSH
69145: LD_INT 1
69147: PPUSH
69148: LD_INT 3
69150: PPUSH
69151: CALL_OW 12
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// animal := CreateHuman ;
69168: LD_ADDR_VAR 0 12
69172: PUSH
69173: CALL_OW 44
69177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69178: LD_VAR 0 12
69182: PPUSH
69183: LD_VAR 0 8
69187: PPUSH
69188: LD_INT 0
69190: PPUSH
69191: CALL 70968 0 3
// end ;
69195: GO 69093
69197: POP
69198: POP
// if enchidnas then
69199: LD_VAR 0 4
69203: IFFALSE 69270
// for i = 1 to enchidnas do
69205: LD_ADDR_VAR 0 11
69209: PUSH
69210: DOUBLE
69211: LD_INT 1
69213: DEC
69214: ST_TO_ADDR
69215: LD_VAR 0 4
69219: PUSH
69220: FOR_TO
69221: IFFALSE 69268
// begin hc_class = 13 ;
69223: LD_ADDR_OWVAR 28
69227: PUSH
69228: LD_INT 13
69230: ST_TO_ADDR
// hc_gallery =  ;
69231: LD_ADDR_OWVAR 33
69235: PUSH
69236: LD_STRING 
69238: ST_TO_ADDR
// animal := CreateHuman ;
69239: LD_ADDR_VAR 0 12
69243: PUSH
69244: CALL_OW 44
69248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69249: LD_VAR 0 12
69253: PPUSH
69254: LD_VAR 0 8
69258: PPUSH
69259: LD_INT 0
69261: PPUSH
69262: CALL 70968 0 3
// end ;
69266: GO 69220
69268: POP
69269: POP
// if fishes then
69270: LD_VAR 0 7
69274: IFFALSE 69341
// for i = 1 to fishes do
69276: LD_ADDR_VAR 0 11
69280: PUSH
69281: DOUBLE
69282: LD_INT 1
69284: DEC
69285: ST_TO_ADDR
69286: LD_VAR 0 7
69290: PUSH
69291: FOR_TO
69292: IFFALSE 69339
// begin hc_class = 20 ;
69294: LD_ADDR_OWVAR 28
69298: PUSH
69299: LD_INT 20
69301: ST_TO_ADDR
// hc_gallery =  ;
69302: LD_ADDR_OWVAR 33
69306: PUSH
69307: LD_STRING 
69309: ST_TO_ADDR
// animal := CreateHuman ;
69310: LD_ADDR_VAR 0 12
69314: PUSH
69315: CALL_OW 44
69319: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69320: LD_VAR 0 12
69324: PPUSH
69325: LD_VAR 0 9
69329: PPUSH
69330: LD_INT 0
69332: PPUSH
69333: CALL 70968 0 3
// end ;
69337: GO 69291
69339: POP
69340: POP
// end ;
69341: LD_VAR 0 10
69345: RET
// export function WantHeal ( sci , unit ) ; begin
69346: LD_INT 0
69348: PPUSH
// if GetTaskList ( sci ) > 0 then
69349: LD_VAR 0 1
69353: PPUSH
69354: CALL_OW 437
69358: PUSH
69359: LD_INT 0
69361: GREATER
69362: IFFALSE 69432
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69364: LD_VAR 0 1
69368: PPUSH
69369: CALL_OW 437
69373: PUSH
69374: LD_INT 1
69376: ARRAY
69377: PUSH
69378: LD_INT 1
69380: ARRAY
69381: PUSH
69382: LD_STRING l
69384: EQUAL
69385: PUSH
69386: LD_VAR 0 1
69390: PPUSH
69391: CALL_OW 437
69395: PUSH
69396: LD_INT 1
69398: ARRAY
69399: PUSH
69400: LD_INT 4
69402: ARRAY
69403: PUSH
69404: LD_VAR 0 2
69408: EQUAL
69409: AND
69410: IFFALSE 69422
// result := true else
69412: LD_ADDR_VAR 0 3
69416: PUSH
69417: LD_INT 1
69419: ST_TO_ADDR
69420: GO 69430
// result := false ;
69422: LD_ADDR_VAR 0 3
69426: PUSH
69427: LD_INT 0
69429: ST_TO_ADDR
// end else
69430: GO 69440
// result := false ;
69432: LD_ADDR_VAR 0 3
69436: PUSH
69437: LD_INT 0
69439: ST_TO_ADDR
// end ;
69440: LD_VAR 0 3
69444: RET
// export function HealTarget ( sci ) ; begin
69445: LD_INT 0
69447: PPUSH
// if not sci then
69448: LD_VAR 0 1
69452: NOT
69453: IFFALSE 69457
// exit ;
69455: GO 69522
// result := 0 ;
69457: LD_ADDR_VAR 0 2
69461: PUSH
69462: LD_INT 0
69464: ST_TO_ADDR
// if GetTaskList ( sci ) then
69465: LD_VAR 0 1
69469: PPUSH
69470: CALL_OW 437
69474: IFFALSE 69522
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69476: LD_VAR 0 1
69480: PPUSH
69481: CALL_OW 437
69485: PUSH
69486: LD_INT 1
69488: ARRAY
69489: PUSH
69490: LD_INT 1
69492: ARRAY
69493: PUSH
69494: LD_STRING l
69496: EQUAL
69497: IFFALSE 69522
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69499: LD_ADDR_VAR 0 2
69503: PUSH
69504: LD_VAR 0 1
69508: PPUSH
69509: CALL_OW 437
69513: PUSH
69514: LD_INT 1
69516: ARRAY
69517: PUSH
69518: LD_INT 4
69520: ARRAY
69521: ST_TO_ADDR
// end ;
69522: LD_VAR 0 2
69526: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69527: LD_INT 0
69529: PPUSH
69530: PPUSH
69531: PPUSH
69532: PPUSH
// if not base_units then
69533: LD_VAR 0 1
69537: NOT
69538: IFFALSE 69542
// exit ;
69540: GO 69629
// result := false ;
69542: LD_ADDR_VAR 0 2
69546: PUSH
69547: LD_INT 0
69549: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69550: LD_ADDR_VAR 0 5
69554: PUSH
69555: LD_VAR 0 1
69559: PPUSH
69560: LD_INT 21
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PPUSH
69570: CALL_OW 72
69574: ST_TO_ADDR
// if not tmp then
69575: LD_VAR 0 5
69579: NOT
69580: IFFALSE 69584
// exit ;
69582: GO 69629
// for i in tmp do
69584: LD_ADDR_VAR 0 3
69588: PUSH
69589: LD_VAR 0 5
69593: PUSH
69594: FOR_IN
69595: IFFALSE 69627
// begin result := EnemyInRange ( i , 22 ) ;
69597: LD_ADDR_VAR 0 2
69601: PUSH
69602: LD_VAR 0 3
69606: PPUSH
69607: LD_INT 22
69609: PPUSH
69610: CALL 67242 0 2
69614: ST_TO_ADDR
// if result then
69615: LD_VAR 0 2
69619: IFFALSE 69625
// exit ;
69621: POP
69622: POP
69623: GO 69629
// end ;
69625: GO 69594
69627: POP
69628: POP
// end ;
69629: LD_VAR 0 2
69633: RET
// export function FilterByTag ( units , tag ) ; begin
69634: LD_INT 0
69636: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69637: LD_ADDR_VAR 0 3
69641: PUSH
69642: LD_VAR 0 1
69646: PPUSH
69647: LD_INT 120
69649: PUSH
69650: LD_VAR 0 2
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PPUSH
69659: CALL_OW 72
69663: ST_TO_ADDR
// end ;
69664: LD_VAR 0 3
69668: RET
// export function IsDriver ( un ) ; begin
69669: LD_INT 0
69671: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69672: LD_ADDR_VAR 0 2
69676: PUSH
69677: LD_VAR 0 1
69681: PUSH
69682: LD_INT 55
69684: PUSH
69685: EMPTY
69686: LIST
69687: PPUSH
69688: CALL_OW 69
69692: IN
69693: ST_TO_ADDR
// end ;
69694: LD_VAR 0 2
69698: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69699: LD_INT 0
69701: PPUSH
69702: PPUSH
// list := [ ] ;
69703: LD_ADDR_VAR 0 5
69707: PUSH
69708: EMPTY
69709: ST_TO_ADDR
// case d of 0 :
69710: LD_VAR 0 3
69714: PUSH
69715: LD_INT 0
69717: DOUBLE
69718: EQUAL
69719: IFTRUE 69723
69721: GO 69856
69723: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69724: LD_ADDR_VAR 0 5
69728: PUSH
69729: LD_VAR 0 1
69733: PUSH
69734: LD_INT 4
69736: MINUS
69737: PUSH
69738: LD_VAR 0 2
69742: PUSH
69743: LD_INT 4
69745: MINUS
69746: PUSH
69747: LD_INT 2
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: PUSH
69755: LD_VAR 0 1
69759: PUSH
69760: LD_INT 3
69762: MINUS
69763: PUSH
69764: LD_VAR 0 2
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: PUSH
69777: LD_VAR 0 1
69781: PUSH
69782: LD_INT 4
69784: PLUS
69785: PUSH
69786: LD_VAR 0 2
69790: PUSH
69791: LD_INT 4
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: LIST
69798: PUSH
69799: LD_VAR 0 1
69803: PUSH
69804: LD_INT 3
69806: PLUS
69807: PUSH
69808: LD_VAR 0 2
69812: PUSH
69813: LD_INT 3
69815: PLUS
69816: PUSH
69817: LD_INT 5
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: PUSH
69825: LD_VAR 0 1
69829: PUSH
69830: LD_VAR 0 2
69834: PUSH
69835: LD_INT 4
69837: PLUS
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: LIST
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: ST_TO_ADDR
// end ; 1 :
69854: GO 70554
69856: LD_INT 1
69858: DOUBLE
69859: EQUAL
69860: IFTRUE 69864
69862: GO 69997
69864: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69865: LD_ADDR_VAR 0 5
69869: PUSH
69870: LD_VAR 0 1
69874: PUSH
69875: LD_VAR 0 2
69879: PUSH
69880: LD_INT 4
69882: MINUS
69883: PUSH
69884: LD_INT 3
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: LIST
69891: PUSH
69892: LD_VAR 0 1
69896: PUSH
69897: LD_INT 3
69899: MINUS
69900: PUSH
69901: LD_VAR 0 2
69905: PUSH
69906: LD_INT 3
69908: MINUS
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: LIST
69917: PUSH
69918: LD_VAR 0 1
69922: PUSH
69923: LD_INT 4
69925: MINUS
69926: PUSH
69927: LD_VAR 0 2
69931: PUSH
69932: LD_INT 1
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: PUSH
69940: LD_VAR 0 1
69944: PUSH
69945: LD_VAR 0 2
69949: PUSH
69950: LD_INT 3
69952: PLUS
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: LIST
69961: PUSH
69962: LD_VAR 0 1
69966: PUSH
69967: LD_INT 4
69969: PLUS
69970: PUSH
69971: LD_VAR 0 2
69975: PUSH
69976: LD_INT 4
69978: PLUS
69979: PUSH
69980: LD_INT 5
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// end ; 2 :
69995: GO 70554
69997: LD_INT 2
69999: DOUBLE
70000: EQUAL
70001: IFTRUE 70005
70003: GO 70134
70005: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70006: LD_ADDR_VAR 0 5
70010: PUSH
70011: LD_VAR 0 1
70015: PUSH
70016: LD_VAR 0 2
70020: PUSH
70021: LD_INT 3
70023: MINUS
70024: PUSH
70025: LD_INT 3
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: LIST
70032: PUSH
70033: LD_VAR 0 1
70037: PUSH
70038: LD_INT 4
70040: PLUS
70041: PUSH
70042: LD_VAR 0 2
70046: PUSH
70047: LD_INT 4
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: PUSH
70055: LD_VAR 0 1
70059: PUSH
70060: LD_VAR 0 2
70064: PUSH
70065: LD_INT 4
70067: PLUS
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: LIST
70076: PUSH
70077: LD_VAR 0 1
70081: PUSH
70082: LD_INT 3
70084: MINUS
70085: PUSH
70086: LD_VAR 0 2
70090: PUSH
70091: LD_INT 1
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: PUSH
70099: LD_VAR 0 1
70103: PUSH
70104: LD_INT 4
70106: MINUS
70107: PUSH
70108: LD_VAR 0 2
70112: PUSH
70113: LD_INT 4
70115: MINUS
70116: PUSH
70117: LD_INT 2
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: LIST
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: ST_TO_ADDR
// end ; 3 :
70132: GO 70554
70134: LD_INT 3
70136: DOUBLE
70137: EQUAL
70138: IFTRUE 70142
70140: GO 70275
70142: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70143: LD_ADDR_VAR 0 5
70147: PUSH
70148: LD_VAR 0 1
70152: PUSH
70153: LD_INT 3
70155: PLUS
70156: PUSH
70157: LD_VAR 0 2
70161: PUSH
70162: LD_INT 4
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: PUSH
70170: LD_VAR 0 1
70174: PUSH
70175: LD_INT 4
70177: PLUS
70178: PUSH
70179: LD_VAR 0 2
70183: PUSH
70184: LD_INT 4
70186: PLUS
70187: PUSH
70188: LD_INT 5
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: LIST
70195: PUSH
70196: LD_VAR 0 1
70200: PUSH
70201: LD_INT 4
70203: MINUS
70204: PUSH
70205: LD_VAR 0 2
70209: PUSH
70210: LD_INT 1
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: LIST
70217: PUSH
70218: LD_VAR 0 1
70222: PUSH
70223: LD_VAR 0 2
70227: PUSH
70228: LD_INT 4
70230: MINUS
70231: PUSH
70232: LD_INT 3
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: PUSH
70240: LD_VAR 0 1
70244: PUSH
70245: LD_INT 3
70247: MINUS
70248: PUSH
70249: LD_VAR 0 2
70253: PUSH
70254: LD_INT 3
70256: MINUS
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: LIST
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: ST_TO_ADDR
// end ; 4 :
70273: GO 70554
70275: LD_INT 4
70277: DOUBLE
70278: EQUAL
70279: IFTRUE 70283
70281: GO 70416
70283: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70284: LD_ADDR_VAR 0 5
70288: PUSH
70289: LD_VAR 0 1
70293: PUSH
70294: LD_VAR 0 2
70298: PUSH
70299: LD_INT 4
70301: PLUS
70302: PUSH
70303: LD_INT 0
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: LIST
70310: PUSH
70311: LD_VAR 0 1
70315: PUSH
70316: LD_INT 3
70318: PLUS
70319: PUSH
70320: LD_VAR 0 2
70324: PUSH
70325: LD_INT 3
70327: PLUS
70328: PUSH
70329: LD_INT 5
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: PUSH
70337: LD_VAR 0 1
70341: PUSH
70342: LD_INT 4
70344: PLUS
70345: PUSH
70346: LD_VAR 0 2
70350: PUSH
70351: LD_INT 4
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: LIST
70358: PUSH
70359: LD_VAR 0 1
70363: PUSH
70364: LD_VAR 0 2
70368: PUSH
70369: LD_INT 3
70371: MINUS
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: PUSH
70381: LD_VAR 0 1
70385: PUSH
70386: LD_INT 4
70388: MINUS
70389: PUSH
70390: LD_VAR 0 2
70394: PUSH
70395: LD_INT 4
70397: MINUS
70398: PUSH
70399: LD_INT 2
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: ST_TO_ADDR
// end ; 5 :
70414: GO 70554
70416: LD_INT 5
70418: DOUBLE
70419: EQUAL
70420: IFTRUE 70424
70422: GO 70553
70424: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70425: LD_ADDR_VAR 0 5
70429: PUSH
70430: LD_VAR 0 1
70434: PUSH
70435: LD_INT 4
70437: MINUS
70438: PUSH
70439: LD_VAR 0 2
70443: PUSH
70444: LD_INT 1
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: LIST
70451: PUSH
70452: LD_VAR 0 1
70456: PUSH
70457: LD_VAR 0 2
70461: PUSH
70462: LD_INT 4
70464: MINUS
70465: PUSH
70466: LD_INT 3
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: LIST
70473: PUSH
70474: LD_VAR 0 1
70478: PUSH
70479: LD_INT 4
70481: PLUS
70482: PUSH
70483: LD_VAR 0 2
70487: PUSH
70488: LD_INT 4
70490: PLUS
70491: PUSH
70492: LD_INT 5
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: LIST
70499: PUSH
70500: LD_VAR 0 1
70504: PUSH
70505: LD_INT 3
70507: PLUS
70508: PUSH
70509: LD_VAR 0 2
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: LIST
70521: PUSH
70522: LD_VAR 0 1
70526: PUSH
70527: LD_VAR 0 2
70531: PUSH
70532: LD_INT 3
70534: PLUS
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: ST_TO_ADDR
// end ; end ;
70551: GO 70554
70553: POP
// result := list ;
70554: LD_ADDR_VAR 0 4
70558: PUSH
70559: LD_VAR 0 5
70563: ST_TO_ADDR
// end ;
70564: LD_VAR 0 4
70568: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70569: LD_INT 0
70571: PPUSH
70572: PPUSH
70573: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70574: LD_VAR 0 1
70578: NOT
70579: PUSH
70580: LD_VAR 0 2
70584: PUSH
70585: LD_INT 1
70587: PUSH
70588: LD_INT 2
70590: PUSH
70591: LD_INT 3
70593: PUSH
70594: LD_INT 4
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: IN
70603: NOT
70604: OR
70605: IFFALSE 70609
// exit ;
70607: GO 70692
// tmp := [ ] ;
70609: LD_ADDR_VAR 0 5
70613: PUSH
70614: EMPTY
70615: ST_TO_ADDR
// for i in units do
70616: LD_ADDR_VAR 0 4
70620: PUSH
70621: LD_VAR 0 1
70625: PUSH
70626: FOR_IN
70627: IFFALSE 70661
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70629: LD_ADDR_VAR 0 5
70633: PUSH
70634: LD_VAR 0 5
70638: PPUSH
70639: LD_VAR 0 4
70643: PPUSH
70644: LD_VAR 0 2
70648: PPUSH
70649: CALL_OW 259
70653: PPUSH
70654: CALL 72051 0 2
70658: ST_TO_ADDR
70659: GO 70626
70661: POP
70662: POP
// if not tmp then
70663: LD_VAR 0 5
70667: NOT
70668: IFFALSE 70672
// exit ;
70670: GO 70692
// result := SortListByListDesc ( units , tmp ) ;
70672: LD_ADDR_VAR 0 3
70676: PUSH
70677: LD_VAR 0 1
70681: PPUSH
70682: LD_VAR 0 5
70686: PPUSH
70687: CALL_OW 77
70691: ST_TO_ADDR
// end ;
70692: LD_VAR 0 3
70696: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70697: LD_INT 0
70699: PPUSH
70700: PPUSH
70701: PPUSH
// result := false ;
70702: LD_ADDR_VAR 0 3
70706: PUSH
70707: LD_INT 0
70709: ST_TO_ADDR
// x := GetX ( building ) ;
70710: LD_ADDR_VAR 0 4
70714: PUSH
70715: LD_VAR 0 2
70719: PPUSH
70720: CALL_OW 250
70724: ST_TO_ADDR
// y := GetY ( building ) ;
70725: LD_ADDR_VAR 0 5
70729: PUSH
70730: LD_VAR 0 2
70734: PPUSH
70735: CALL_OW 251
70739: ST_TO_ADDR
// if not building or not x or not y then
70740: LD_VAR 0 2
70744: NOT
70745: PUSH
70746: LD_VAR 0 4
70750: NOT
70751: OR
70752: PUSH
70753: LD_VAR 0 5
70757: NOT
70758: OR
70759: IFFALSE 70763
// exit ;
70761: GO 70855
// if GetTaskList ( unit ) then
70763: LD_VAR 0 1
70767: PPUSH
70768: CALL_OW 437
70772: IFFALSE 70855
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70774: LD_STRING e
70776: PUSH
70777: LD_VAR 0 1
70781: PPUSH
70782: CALL_OW 437
70786: PUSH
70787: LD_INT 1
70789: ARRAY
70790: PUSH
70791: LD_INT 1
70793: ARRAY
70794: EQUAL
70795: PUSH
70796: LD_VAR 0 4
70800: PUSH
70801: LD_VAR 0 1
70805: PPUSH
70806: CALL_OW 437
70810: PUSH
70811: LD_INT 1
70813: ARRAY
70814: PUSH
70815: LD_INT 2
70817: ARRAY
70818: EQUAL
70819: AND
70820: PUSH
70821: LD_VAR 0 5
70825: PUSH
70826: LD_VAR 0 1
70830: PPUSH
70831: CALL_OW 437
70835: PUSH
70836: LD_INT 1
70838: ARRAY
70839: PUSH
70840: LD_INT 3
70842: ARRAY
70843: EQUAL
70844: AND
70845: IFFALSE 70855
// result := true end ;
70847: LD_ADDR_VAR 0 3
70851: PUSH
70852: LD_INT 1
70854: ST_TO_ADDR
// end ;
70855: LD_VAR 0 3
70859: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70860: LD_INT 0
70862: PPUSH
// result := false ;
70863: LD_ADDR_VAR 0 4
70867: PUSH
70868: LD_INT 0
70870: ST_TO_ADDR
// if GetTaskList ( unit ) then
70871: LD_VAR 0 1
70875: PPUSH
70876: CALL_OW 437
70880: IFFALSE 70963
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70882: LD_STRING M
70884: PUSH
70885: LD_VAR 0 1
70889: PPUSH
70890: CALL_OW 437
70894: PUSH
70895: LD_INT 1
70897: ARRAY
70898: PUSH
70899: LD_INT 1
70901: ARRAY
70902: EQUAL
70903: PUSH
70904: LD_VAR 0 2
70908: PUSH
70909: LD_VAR 0 1
70913: PPUSH
70914: CALL_OW 437
70918: PUSH
70919: LD_INT 1
70921: ARRAY
70922: PUSH
70923: LD_INT 2
70925: ARRAY
70926: EQUAL
70927: AND
70928: PUSH
70929: LD_VAR 0 3
70933: PUSH
70934: LD_VAR 0 1
70938: PPUSH
70939: CALL_OW 437
70943: PUSH
70944: LD_INT 1
70946: ARRAY
70947: PUSH
70948: LD_INT 3
70950: ARRAY
70951: EQUAL
70952: AND
70953: IFFALSE 70963
// result := true ;
70955: LD_ADDR_VAR 0 4
70959: PUSH
70960: LD_INT 1
70962: ST_TO_ADDR
// end ; end ;
70963: LD_VAR 0 4
70967: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70968: LD_INT 0
70970: PPUSH
70971: PPUSH
70972: PPUSH
70973: PPUSH
// if not unit or not area then
70974: LD_VAR 0 1
70978: NOT
70979: PUSH
70980: LD_VAR 0 2
70984: NOT
70985: OR
70986: IFFALSE 70990
// exit ;
70988: GO 71154
// tmp := AreaToList ( area , i ) ;
70990: LD_ADDR_VAR 0 6
70994: PUSH
70995: LD_VAR 0 2
70999: PPUSH
71000: LD_VAR 0 5
71004: PPUSH
71005: CALL_OW 517
71009: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71010: LD_ADDR_VAR 0 5
71014: PUSH
71015: DOUBLE
71016: LD_INT 1
71018: DEC
71019: ST_TO_ADDR
71020: LD_VAR 0 6
71024: PUSH
71025: LD_INT 1
71027: ARRAY
71028: PUSH
71029: FOR_TO
71030: IFFALSE 71152
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71032: LD_ADDR_VAR 0 7
71036: PUSH
71037: LD_VAR 0 6
71041: PUSH
71042: LD_INT 1
71044: ARRAY
71045: PUSH
71046: LD_VAR 0 5
71050: ARRAY
71051: PUSH
71052: LD_VAR 0 6
71056: PUSH
71057: LD_INT 2
71059: ARRAY
71060: PUSH
71061: LD_VAR 0 5
71065: ARRAY
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71071: LD_VAR 0 7
71075: PUSH
71076: LD_INT 1
71078: ARRAY
71079: PPUSH
71080: LD_VAR 0 7
71084: PUSH
71085: LD_INT 2
71087: ARRAY
71088: PPUSH
71089: CALL_OW 428
71093: PUSH
71094: LD_INT 0
71096: EQUAL
71097: IFFALSE 71150
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71099: LD_VAR 0 1
71103: PPUSH
71104: LD_VAR 0 7
71108: PUSH
71109: LD_INT 1
71111: ARRAY
71112: PPUSH
71113: LD_VAR 0 7
71117: PUSH
71118: LD_INT 2
71120: ARRAY
71121: PPUSH
71122: LD_VAR 0 3
71126: PPUSH
71127: CALL_OW 48
// result := IsPlaced ( unit ) ;
71131: LD_ADDR_VAR 0 4
71135: PUSH
71136: LD_VAR 0 1
71140: PPUSH
71141: CALL_OW 305
71145: ST_TO_ADDR
// exit ;
71146: POP
71147: POP
71148: GO 71154
// end ; end ;
71150: GO 71029
71152: POP
71153: POP
// end ;
71154: LD_VAR 0 4
71158: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71159: LD_INT 0
71161: PPUSH
71162: PPUSH
71163: PPUSH
// if not side or side > 8 then
71164: LD_VAR 0 1
71168: NOT
71169: PUSH
71170: LD_VAR 0 1
71174: PUSH
71175: LD_INT 8
71177: GREATER
71178: OR
71179: IFFALSE 71183
// exit ;
71181: GO 71370
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71183: LD_ADDR_VAR 0 4
71187: PUSH
71188: LD_INT 22
71190: PUSH
71191: LD_VAR 0 1
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 21
71202: PUSH
71203: LD_INT 3
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PPUSH
71214: CALL_OW 69
71218: ST_TO_ADDR
// if not tmp then
71219: LD_VAR 0 4
71223: NOT
71224: IFFALSE 71228
// exit ;
71226: GO 71370
// enable_addtolog := true ;
71228: LD_ADDR_OWVAR 81
71232: PUSH
71233: LD_INT 1
71235: ST_TO_ADDR
// AddToLog ( [ ) ;
71236: LD_STRING [
71238: PPUSH
71239: CALL_OW 561
// for i in tmp do
71243: LD_ADDR_VAR 0 3
71247: PUSH
71248: LD_VAR 0 4
71252: PUSH
71253: FOR_IN
71254: IFFALSE 71361
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71256: LD_STRING [
71258: PUSH
71259: LD_VAR 0 3
71263: PPUSH
71264: CALL_OW 266
71268: STR
71269: PUSH
71270: LD_STRING , 
71272: STR
71273: PUSH
71274: LD_VAR 0 3
71278: PPUSH
71279: CALL_OW 250
71283: STR
71284: PUSH
71285: LD_STRING , 
71287: STR
71288: PUSH
71289: LD_VAR 0 3
71293: PPUSH
71294: CALL_OW 251
71298: STR
71299: PUSH
71300: LD_STRING , 
71302: STR
71303: PUSH
71304: LD_VAR 0 3
71308: PPUSH
71309: CALL_OW 254
71313: STR
71314: PUSH
71315: LD_STRING , 
71317: STR
71318: PUSH
71319: LD_VAR 0 3
71323: PPUSH
71324: LD_INT 1
71326: PPUSH
71327: CALL_OW 268
71331: STR
71332: PUSH
71333: LD_STRING , 
71335: STR
71336: PUSH
71337: LD_VAR 0 3
71341: PPUSH
71342: LD_INT 2
71344: PPUSH
71345: CALL_OW 268
71349: STR
71350: PUSH
71351: LD_STRING ],
71353: STR
71354: PPUSH
71355: CALL_OW 561
// end ;
71359: GO 71253
71361: POP
71362: POP
// AddToLog ( ]; ) ;
71363: LD_STRING ];
71365: PPUSH
71366: CALL_OW 561
// end ;
71370: LD_VAR 0 2
71374: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71375: LD_INT 0
71377: PPUSH
71378: PPUSH
71379: PPUSH
71380: PPUSH
71381: PPUSH
// if not area or not rate or not max then
71382: LD_VAR 0 1
71386: NOT
71387: PUSH
71388: LD_VAR 0 2
71392: NOT
71393: OR
71394: PUSH
71395: LD_VAR 0 4
71399: NOT
71400: OR
71401: IFFALSE 71405
// exit ;
71403: GO 71594
// while 1 do
71405: LD_INT 1
71407: IFFALSE 71594
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71409: LD_ADDR_VAR 0 9
71413: PUSH
71414: LD_VAR 0 1
71418: PPUSH
71419: LD_INT 1
71421: PPUSH
71422: CALL_OW 287
71426: PUSH
71427: LD_INT 10
71429: MUL
71430: ST_TO_ADDR
// r := rate / 10 ;
71431: LD_ADDR_VAR 0 7
71435: PUSH
71436: LD_VAR 0 2
71440: PUSH
71441: LD_INT 10
71443: DIVREAL
71444: ST_TO_ADDR
// time := 1 1$00 ;
71445: LD_ADDR_VAR 0 8
71449: PUSH
71450: LD_INT 2100
71452: ST_TO_ADDR
// if amount < min then
71453: LD_VAR 0 9
71457: PUSH
71458: LD_VAR 0 3
71462: LESS
71463: IFFALSE 71481
// r := r * 2 else
71465: LD_ADDR_VAR 0 7
71469: PUSH
71470: LD_VAR 0 7
71474: PUSH
71475: LD_INT 2
71477: MUL
71478: ST_TO_ADDR
71479: GO 71507
// if amount > max then
71481: LD_VAR 0 9
71485: PUSH
71486: LD_VAR 0 4
71490: GREATER
71491: IFFALSE 71507
// r := r / 2 ;
71493: LD_ADDR_VAR 0 7
71497: PUSH
71498: LD_VAR 0 7
71502: PUSH
71503: LD_INT 2
71505: DIVREAL
71506: ST_TO_ADDR
// time := time / r ;
71507: LD_ADDR_VAR 0 8
71511: PUSH
71512: LD_VAR 0 8
71516: PUSH
71517: LD_VAR 0 7
71521: DIVREAL
71522: ST_TO_ADDR
// if time < 0 then
71523: LD_VAR 0 8
71527: PUSH
71528: LD_INT 0
71530: LESS
71531: IFFALSE 71548
// time := time * - 1 ;
71533: LD_ADDR_VAR 0 8
71537: PUSH
71538: LD_VAR 0 8
71542: PUSH
71543: LD_INT 1
71545: NEG
71546: MUL
71547: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71548: LD_VAR 0 8
71552: PUSH
71553: LD_INT 35
71555: PPUSH
71556: LD_INT 875
71558: PPUSH
71559: CALL_OW 12
71563: PLUS
71564: PPUSH
71565: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71569: LD_INT 1
71571: PPUSH
71572: LD_INT 5
71574: PPUSH
71575: CALL_OW 12
71579: PPUSH
71580: LD_VAR 0 1
71584: PPUSH
71585: LD_INT 1
71587: PPUSH
71588: CALL_OW 55
// end ;
71592: GO 71405
// end ;
71594: LD_VAR 0 5
71598: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71599: LD_INT 0
71601: PPUSH
71602: PPUSH
71603: PPUSH
71604: PPUSH
71605: PPUSH
71606: PPUSH
71607: PPUSH
71608: PPUSH
// if not turrets or not factories then
71609: LD_VAR 0 1
71613: NOT
71614: PUSH
71615: LD_VAR 0 2
71619: NOT
71620: OR
71621: IFFALSE 71625
// exit ;
71623: GO 71932
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71625: LD_ADDR_VAR 0 10
71629: PUSH
71630: LD_INT 5
71632: PUSH
71633: LD_INT 6
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 2
71642: PUSH
71643: LD_INT 4
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 3
71652: PUSH
71653: LD_INT 5
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 24
71667: PUSH
71668: LD_INT 25
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 23
71677: PUSH
71678: LD_INT 27
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 42
71691: PUSH
71692: LD_INT 43
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 44
71701: PUSH
71702: LD_INT 46
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 45
71711: PUSH
71712: LD_INT 47
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: LIST
71728: ST_TO_ADDR
// result := [ ] ;
71729: LD_ADDR_VAR 0 3
71733: PUSH
71734: EMPTY
71735: ST_TO_ADDR
// for i in turrets do
71736: LD_ADDR_VAR 0 4
71740: PUSH
71741: LD_VAR 0 1
71745: PUSH
71746: FOR_IN
71747: IFFALSE 71930
// begin nat := GetNation ( i ) ;
71749: LD_ADDR_VAR 0 7
71753: PUSH
71754: LD_VAR 0 4
71758: PPUSH
71759: CALL_OW 248
71763: ST_TO_ADDR
// weapon := 0 ;
71764: LD_ADDR_VAR 0 8
71768: PUSH
71769: LD_INT 0
71771: ST_TO_ADDR
// if not nat then
71772: LD_VAR 0 7
71776: NOT
71777: IFFALSE 71781
// continue ;
71779: GO 71746
// for j in list [ nat ] do
71781: LD_ADDR_VAR 0 5
71785: PUSH
71786: LD_VAR 0 10
71790: PUSH
71791: LD_VAR 0 7
71795: ARRAY
71796: PUSH
71797: FOR_IN
71798: IFFALSE 71839
// if GetBWeapon ( i ) = j [ 1 ] then
71800: LD_VAR 0 4
71804: PPUSH
71805: CALL_OW 269
71809: PUSH
71810: LD_VAR 0 5
71814: PUSH
71815: LD_INT 1
71817: ARRAY
71818: EQUAL
71819: IFFALSE 71837
// begin weapon := j [ 2 ] ;
71821: LD_ADDR_VAR 0 8
71825: PUSH
71826: LD_VAR 0 5
71830: PUSH
71831: LD_INT 2
71833: ARRAY
71834: ST_TO_ADDR
// break ;
71835: GO 71839
// end ;
71837: GO 71797
71839: POP
71840: POP
// if not weapon then
71841: LD_VAR 0 8
71845: NOT
71846: IFFALSE 71850
// continue ;
71848: GO 71746
// for k in factories do
71850: LD_ADDR_VAR 0 6
71854: PUSH
71855: LD_VAR 0 2
71859: PUSH
71860: FOR_IN
71861: IFFALSE 71926
// begin weapons := AvailableWeaponList ( k ) ;
71863: LD_ADDR_VAR 0 9
71867: PUSH
71868: LD_VAR 0 6
71872: PPUSH
71873: CALL_OW 478
71877: ST_TO_ADDR
// if not weapons then
71878: LD_VAR 0 9
71882: NOT
71883: IFFALSE 71887
// continue ;
71885: GO 71860
// if weapon in weapons then
71887: LD_VAR 0 8
71891: PUSH
71892: LD_VAR 0 9
71896: IN
71897: IFFALSE 71924
// begin result := [ i , weapon ] ;
71899: LD_ADDR_VAR 0 3
71903: PUSH
71904: LD_VAR 0 4
71908: PUSH
71909: LD_VAR 0 8
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: ST_TO_ADDR
// exit ;
71918: POP
71919: POP
71920: POP
71921: POP
71922: GO 71932
// end ; end ;
71924: GO 71860
71926: POP
71927: POP
// end ;
71928: GO 71746
71930: POP
71931: POP
// end ;
71932: LD_VAR 0 3
71936: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71937: LD_INT 0
71939: PPUSH
// if not side or side > 8 then
71940: LD_VAR 0 3
71944: NOT
71945: PUSH
71946: LD_VAR 0 3
71950: PUSH
71951: LD_INT 8
71953: GREATER
71954: OR
71955: IFFALSE 71959
// exit ;
71957: GO 72018
// if not range then
71959: LD_VAR 0 4
71963: NOT
71964: IFFALSE 71975
// range := - 12 ;
71966: LD_ADDR_VAR 0 4
71970: PUSH
71971: LD_INT 12
71973: NEG
71974: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71975: LD_VAR 0 1
71979: PPUSH
71980: LD_VAR 0 2
71984: PPUSH
71985: LD_VAR 0 3
71989: PPUSH
71990: LD_VAR 0 4
71994: PPUSH
71995: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71999: LD_VAR 0 1
72003: PPUSH
72004: LD_VAR 0 2
72008: PPUSH
72009: LD_VAR 0 3
72013: PPUSH
72014: CALL_OW 331
// end ;
72018: LD_VAR 0 5
72022: RET
// export function Video ( mode ) ; begin
72023: LD_INT 0
72025: PPUSH
// ingame_video = mode ;
72026: LD_ADDR_OWVAR 52
72030: PUSH
72031: LD_VAR 0 1
72035: ST_TO_ADDR
// interface_hidden = mode ;
72036: LD_ADDR_OWVAR 54
72040: PUSH
72041: LD_VAR 0 1
72045: ST_TO_ADDR
// end ;
72046: LD_VAR 0 2
72050: RET
// export function Join ( array , element ) ; begin
72051: LD_INT 0
72053: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72054: LD_ADDR_VAR 0 3
72058: PUSH
72059: LD_VAR 0 1
72063: PPUSH
72064: LD_VAR 0 1
72068: PUSH
72069: LD_INT 1
72071: PLUS
72072: PPUSH
72073: LD_VAR 0 2
72077: PPUSH
72078: CALL_OW 1
72082: ST_TO_ADDR
// end ;
72083: LD_VAR 0 3
72087: RET
// export function JoinUnion ( array , element ) ; begin
72088: LD_INT 0
72090: PPUSH
// result := array union element ;
72091: LD_ADDR_VAR 0 3
72095: PUSH
72096: LD_VAR 0 1
72100: PUSH
72101: LD_VAR 0 2
72105: UNION
72106: ST_TO_ADDR
// end ;
72107: LD_VAR 0 3
72111: RET
// export function GetBehemoths ( side ) ; begin
72112: LD_INT 0
72114: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72115: LD_ADDR_VAR 0 2
72119: PUSH
72120: LD_INT 22
72122: PUSH
72123: LD_VAR 0 1
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 31
72134: PUSH
72135: LD_INT 25
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PPUSH
72146: CALL_OW 69
72150: ST_TO_ADDR
// end ;
72151: LD_VAR 0 2
72155: RET
// export function Shuffle ( array ) ; var i , index ; begin
72156: LD_INT 0
72158: PPUSH
72159: PPUSH
72160: PPUSH
// result := [ ] ;
72161: LD_ADDR_VAR 0 2
72165: PUSH
72166: EMPTY
72167: ST_TO_ADDR
// if not array then
72168: LD_VAR 0 1
72172: NOT
72173: IFFALSE 72177
// exit ;
72175: GO 72276
// Randomize ;
72177: CALL_OW 10
// for i = array downto 1 do
72181: LD_ADDR_VAR 0 3
72185: PUSH
72186: DOUBLE
72187: LD_VAR 0 1
72191: INC
72192: ST_TO_ADDR
72193: LD_INT 1
72195: PUSH
72196: FOR_DOWNTO
72197: IFFALSE 72274
// begin index := rand ( 1 , array ) ;
72199: LD_ADDR_VAR 0 4
72203: PUSH
72204: LD_INT 1
72206: PPUSH
72207: LD_VAR 0 1
72211: PPUSH
72212: CALL_OW 12
72216: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72217: LD_ADDR_VAR 0 2
72221: PUSH
72222: LD_VAR 0 2
72226: PPUSH
72227: LD_VAR 0 2
72231: PUSH
72232: LD_INT 1
72234: PLUS
72235: PPUSH
72236: LD_VAR 0 1
72240: PUSH
72241: LD_VAR 0 4
72245: ARRAY
72246: PPUSH
72247: CALL_OW 2
72251: ST_TO_ADDR
// array := Delete ( array , index ) ;
72252: LD_ADDR_VAR 0 1
72256: PUSH
72257: LD_VAR 0 1
72261: PPUSH
72262: LD_VAR 0 4
72266: PPUSH
72267: CALL_OW 3
72271: ST_TO_ADDR
// end ;
72272: GO 72196
72274: POP
72275: POP
// end ;
72276: LD_VAR 0 2
72280: RET
// export function GetBaseMaterials ( base ) ; begin
72281: LD_INT 0
72283: PPUSH
// result := [ 0 , 0 , 0 ] ;
72284: LD_ADDR_VAR 0 2
72288: PUSH
72289: LD_INT 0
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: LD_INT 0
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: LIST
72302: ST_TO_ADDR
// if not base then
72303: LD_VAR 0 1
72307: NOT
72308: IFFALSE 72312
// exit ;
72310: GO 72361
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72312: LD_ADDR_VAR 0 2
72316: PUSH
72317: LD_VAR 0 1
72321: PPUSH
72322: LD_INT 1
72324: PPUSH
72325: CALL_OW 275
72329: PUSH
72330: LD_VAR 0 1
72334: PPUSH
72335: LD_INT 2
72337: PPUSH
72338: CALL_OW 275
72342: PUSH
72343: LD_VAR 0 1
72347: PPUSH
72348: LD_INT 3
72350: PPUSH
72351: CALL_OW 275
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: LIST
72360: ST_TO_ADDR
// end ;
72361: LD_VAR 0 2
72365: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72366: LD_INT 0
72368: PPUSH
72369: PPUSH
// result := array ;
72370: LD_ADDR_VAR 0 3
72374: PUSH
72375: LD_VAR 0 1
72379: ST_TO_ADDR
// if size >= result then
72380: LD_VAR 0 2
72384: PUSH
72385: LD_VAR 0 3
72389: GREATEREQUAL
72390: IFFALSE 72394
// exit ;
72392: GO 72444
// if size then
72394: LD_VAR 0 2
72398: IFFALSE 72444
// for i := array downto size do
72400: LD_ADDR_VAR 0 4
72404: PUSH
72405: DOUBLE
72406: LD_VAR 0 1
72410: INC
72411: ST_TO_ADDR
72412: LD_VAR 0 2
72416: PUSH
72417: FOR_DOWNTO
72418: IFFALSE 72442
// result := Delete ( result , result ) ;
72420: LD_ADDR_VAR 0 3
72424: PUSH
72425: LD_VAR 0 3
72429: PPUSH
72430: LD_VAR 0 3
72434: PPUSH
72435: CALL_OW 3
72439: ST_TO_ADDR
72440: GO 72417
72442: POP
72443: POP
// end ;
72444: LD_VAR 0 3
72448: RET
// export function ComExit ( unit ) ; var tmp ; begin
72449: LD_INT 0
72451: PPUSH
72452: PPUSH
// if not IsInUnit ( unit ) then
72453: LD_VAR 0 1
72457: PPUSH
72458: CALL_OW 310
72462: NOT
72463: IFFALSE 72467
// exit ;
72465: GO 72527
// tmp := IsInUnit ( unit ) ;
72467: LD_ADDR_VAR 0 3
72471: PUSH
72472: LD_VAR 0 1
72476: PPUSH
72477: CALL_OW 310
72481: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72482: LD_VAR 0 3
72486: PPUSH
72487: CALL_OW 247
72491: PUSH
72492: LD_INT 2
72494: EQUAL
72495: IFFALSE 72508
// ComExitVehicle ( unit ) else
72497: LD_VAR 0 1
72501: PPUSH
72502: CALL_OW 121
72506: GO 72517
// ComExitBuilding ( unit ) ;
72508: LD_VAR 0 1
72512: PPUSH
72513: CALL_OW 122
// result := tmp ;
72517: LD_ADDR_VAR 0 2
72521: PUSH
72522: LD_VAR 0 3
72526: ST_TO_ADDR
// end ;
72527: LD_VAR 0 2
72531: RET
// export function ComExitAll ( units ) ; var i ; begin
72532: LD_INT 0
72534: PPUSH
72535: PPUSH
// if not units then
72536: LD_VAR 0 1
72540: NOT
72541: IFFALSE 72545
// exit ;
72543: GO 72571
// for i in units do
72545: LD_ADDR_VAR 0 3
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: FOR_IN
72556: IFFALSE 72569
// ComExit ( i ) ;
72558: LD_VAR 0 3
72562: PPUSH
72563: CALL 72449 0 1
72567: GO 72555
72569: POP
72570: POP
// end ;
72571: LD_VAR 0 2
72575: RET
// export function ResetHc ; begin
72576: LD_INT 0
72578: PPUSH
// InitHc ;
72579: CALL_OW 19
// hc_importance := 0 ;
72583: LD_ADDR_OWVAR 32
72587: PUSH
72588: LD_INT 0
72590: ST_TO_ADDR
// end ;
72591: LD_VAR 0 1
72595: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72596: LD_INT 0
72598: PPUSH
72599: PPUSH
72600: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72601: LD_ADDR_VAR 0 6
72605: PUSH
72606: LD_VAR 0 1
72610: PUSH
72611: LD_VAR 0 3
72615: PLUS
72616: PUSH
72617: LD_INT 2
72619: DIV
72620: ST_TO_ADDR
// if _x < 0 then
72621: LD_VAR 0 6
72625: PUSH
72626: LD_INT 0
72628: LESS
72629: IFFALSE 72646
// _x := _x * - 1 ;
72631: LD_ADDR_VAR 0 6
72635: PUSH
72636: LD_VAR 0 6
72640: PUSH
72641: LD_INT 1
72643: NEG
72644: MUL
72645: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72646: LD_ADDR_VAR 0 7
72650: PUSH
72651: LD_VAR 0 2
72655: PUSH
72656: LD_VAR 0 4
72660: PLUS
72661: PUSH
72662: LD_INT 2
72664: DIV
72665: ST_TO_ADDR
// if _y < 0 then
72666: LD_VAR 0 7
72670: PUSH
72671: LD_INT 0
72673: LESS
72674: IFFALSE 72691
// _y := _y * - 1 ;
72676: LD_ADDR_VAR 0 7
72680: PUSH
72681: LD_VAR 0 7
72685: PUSH
72686: LD_INT 1
72688: NEG
72689: MUL
72690: ST_TO_ADDR
// result := [ _x , _y ] ;
72691: LD_ADDR_VAR 0 5
72695: PUSH
72696: LD_VAR 0 6
72700: PUSH
72701: LD_VAR 0 7
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: ST_TO_ADDR
// end ;
72710: LD_VAR 0 5
72714: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72715: LD_INT 0
72717: PPUSH
72718: PPUSH
72719: PPUSH
72720: PPUSH
// task := GetTaskList ( unit ) ;
72721: LD_ADDR_VAR 0 7
72725: PUSH
72726: LD_VAR 0 1
72730: PPUSH
72731: CALL_OW 437
72735: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72736: LD_VAR 0 7
72740: NOT
72741: PUSH
72742: LD_VAR 0 1
72746: PPUSH
72747: LD_VAR 0 2
72751: PPUSH
72752: CALL_OW 308
72756: NOT
72757: AND
72758: IFFALSE 72762
// exit ;
72760: GO 72880
// if IsInArea ( unit , area ) then
72762: LD_VAR 0 1
72766: PPUSH
72767: LD_VAR 0 2
72771: PPUSH
72772: CALL_OW 308
72776: IFFALSE 72794
// begin ComMoveToArea ( unit , goAway ) ;
72778: LD_VAR 0 1
72782: PPUSH
72783: LD_VAR 0 3
72787: PPUSH
72788: CALL_OW 113
// exit ;
72792: GO 72880
// end ; if task [ 1 ] [ 1 ] <> M then
72794: LD_VAR 0 7
72798: PUSH
72799: LD_INT 1
72801: ARRAY
72802: PUSH
72803: LD_INT 1
72805: ARRAY
72806: PUSH
72807: LD_STRING M
72809: NONEQUAL
72810: IFFALSE 72814
// exit ;
72812: GO 72880
// x := task [ 1 ] [ 2 ] ;
72814: LD_ADDR_VAR 0 5
72818: PUSH
72819: LD_VAR 0 7
72823: PUSH
72824: LD_INT 1
72826: ARRAY
72827: PUSH
72828: LD_INT 2
72830: ARRAY
72831: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72832: LD_ADDR_VAR 0 6
72836: PUSH
72837: LD_VAR 0 7
72841: PUSH
72842: LD_INT 1
72844: ARRAY
72845: PUSH
72846: LD_INT 3
72848: ARRAY
72849: ST_TO_ADDR
// if InArea ( x , y , area ) then
72850: LD_VAR 0 5
72854: PPUSH
72855: LD_VAR 0 6
72859: PPUSH
72860: LD_VAR 0 2
72864: PPUSH
72865: CALL_OW 309
72869: IFFALSE 72880
// ComStop ( unit ) ;
72871: LD_VAR 0 1
72875: PPUSH
72876: CALL_OW 141
// end ;
72880: LD_VAR 0 4
72884: RET
// export function Abs ( value ) ; begin
72885: LD_INT 0
72887: PPUSH
// result := value ;
72888: LD_ADDR_VAR 0 2
72892: PUSH
72893: LD_VAR 0 1
72897: ST_TO_ADDR
// if value < 0 then
72898: LD_VAR 0 1
72902: PUSH
72903: LD_INT 0
72905: LESS
72906: IFFALSE 72923
// result := value * - 1 ;
72908: LD_ADDR_VAR 0 2
72912: PUSH
72913: LD_VAR 0 1
72917: PUSH
72918: LD_INT 1
72920: NEG
72921: MUL
72922: ST_TO_ADDR
// end ;
72923: LD_VAR 0 2
72927: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72928: LD_INT 0
72930: PPUSH
72931: PPUSH
72932: PPUSH
72933: PPUSH
72934: PPUSH
72935: PPUSH
72936: PPUSH
72937: PPUSH
// if not unit or not building then
72938: LD_VAR 0 1
72942: NOT
72943: PUSH
72944: LD_VAR 0 2
72948: NOT
72949: OR
72950: IFFALSE 72954
// exit ;
72952: GO 73180
// x := GetX ( building ) ;
72954: LD_ADDR_VAR 0 4
72958: PUSH
72959: LD_VAR 0 2
72963: PPUSH
72964: CALL_OW 250
72968: ST_TO_ADDR
// y := GetY ( building ) ;
72969: LD_ADDR_VAR 0 6
72973: PUSH
72974: LD_VAR 0 2
72978: PPUSH
72979: CALL_OW 251
72983: ST_TO_ADDR
// d := GetDir ( building ) ;
72984: LD_ADDR_VAR 0 8
72988: PUSH
72989: LD_VAR 0 2
72993: PPUSH
72994: CALL_OW 254
72998: ST_TO_ADDR
// r := 4 ;
72999: LD_ADDR_VAR 0 9
73003: PUSH
73004: LD_INT 4
73006: ST_TO_ADDR
// for i := 1 to 5 do
73007: LD_ADDR_VAR 0 10
73011: PUSH
73012: DOUBLE
73013: LD_INT 1
73015: DEC
73016: ST_TO_ADDR
73017: LD_INT 5
73019: PUSH
73020: FOR_TO
73021: IFFALSE 73178
// begin _x := ShiftX ( x , d , r + i ) ;
73023: LD_ADDR_VAR 0 5
73027: PUSH
73028: LD_VAR 0 4
73032: PPUSH
73033: LD_VAR 0 8
73037: PPUSH
73038: LD_VAR 0 9
73042: PUSH
73043: LD_VAR 0 10
73047: PLUS
73048: PPUSH
73049: CALL_OW 272
73053: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73054: LD_ADDR_VAR 0 7
73058: PUSH
73059: LD_VAR 0 6
73063: PPUSH
73064: LD_VAR 0 8
73068: PPUSH
73069: LD_VAR 0 9
73073: PUSH
73074: LD_VAR 0 10
73078: PLUS
73079: PPUSH
73080: CALL_OW 273
73084: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73085: LD_VAR 0 5
73089: PPUSH
73090: LD_VAR 0 7
73094: PPUSH
73095: CALL_OW 488
73099: PUSH
73100: LD_VAR 0 5
73104: PPUSH
73105: LD_VAR 0 7
73109: PPUSH
73110: CALL_OW 428
73114: PPUSH
73115: CALL_OW 247
73119: PUSH
73120: LD_INT 3
73122: PUSH
73123: LD_INT 2
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: IN
73130: NOT
73131: AND
73132: IFFALSE 73176
// begin ComMoveXY ( unit , _x , _y ) ;
73134: LD_VAR 0 1
73138: PPUSH
73139: LD_VAR 0 5
73143: PPUSH
73144: LD_VAR 0 7
73148: PPUSH
73149: CALL_OW 111
// result := [ _x , _y ] ;
73153: LD_ADDR_VAR 0 3
73157: PUSH
73158: LD_VAR 0 5
73162: PUSH
73163: LD_VAR 0 7
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: ST_TO_ADDR
// exit ;
73172: POP
73173: POP
73174: GO 73180
// end ; end ;
73176: GO 73020
73178: POP
73179: POP
// end ;
73180: LD_VAR 0 3
73184: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73185: LD_INT 0
73187: PPUSH
73188: PPUSH
73189: PPUSH
// result := 0 ;
73190: LD_ADDR_VAR 0 3
73194: PUSH
73195: LD_INT 0
73197: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73198: LD_VAR 0 1
73202: PUSH
73203: LD_INT 0
73205: LESS
73206: PUSH
73207: LD_VAR 0 1
73211: PUSH
73212: LD_INT 8
73214: GREATER
73215: OR
73216: PUSH
73217: LD_VAR 0 2
73221: PUSH
73222: LD_INT 0
73224: LESS
73225: OR
73226: PUSH
73227: LD_VAR 0 2
73231: PUSH
73232: LD_INT 8
73234: GREATER
73235: OR
73236: IFFALSE 73240
// exit ;
73238: GO 73315
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73240: LD_ADDR_VAR 0 4
73244: PUSH
73245: LD_INT 22
73247: PUSH
73248: LD_VAR 0 2
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PPUSH
73257: CALL_OW 69
73261: PUSH
73262: FOR_IN
73263: IFFALSE 73313
// begin un := UnitShoot ( i ) ;
73265: LD_ADDR_VAR 0 5
73269: PUSH
73270: LD_VAR 0 4
73274: PPUSH
73275: CALL_OW 504
73279: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73280: LD_VAR 0 5
73284: PPUSH
73285: CALL_OW 255
73289: PUSH
73290: LD_VAR 0 1
73294: EQUAL
73295: IFFALSE 73311
// begin result := un ;
73297: LD_ADDR_VAR 0 3
73301: PUSH
73302: LD_VAR 0 5
73306: ST_TO_ADDR
// exit ;
73307: POP
73308: POP
73309: GO 73315
// end ; end ;
73311: GO 73262
73313: POP
73314: POP
// end ;
73315: LD_VAR 0 3
73319: RET
// export function GetCargoBay ( units ) ; begin
73320: LD_INT 0
73322: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73323: LD_ADDR_VAR 0 2
73327: PUSH
73328: LD_VAR 0 1
73332: PPUSH
73333: LD_INT 2
73335: PUSH
73336: LD_INT 34
73338: PUSH
73339: LD_INT 12
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 34
73348: PUSH
73349: LD_INT 51
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 34
73358: PUSH
73359: LD_INT 32
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 34
73368: PUSH
73369: LD_INT 89
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: PPUSH
73383: CALL_OW 72
73387: ST_TO_ADDR
// end ;
73388: LD_VAR 0 2
73392: RET
// export function Negate ( value ) ; begin
73393: LD_INT 0
73395: PPUSH
// result := not value ;
73396: LD_ADDR_VAR 0 2
73400: PUSH
73401: LD_VAR 0 1
73405: NOT
73406: ST_TO_ADDR
// end ;
73407: LD_VAR 0 2
73411: RET
// export function Inc ( value ) ; begin
73412: LD_INT 0
73414: PPUSH
// result := value + 1 ;
73415: LD_ADDR_VAR 0 2
73419: PUSH
73420: LD_VAR 0 1
73424: PUSH
73425: LD_INT 1
73427: PLUS
73428: ST_TO_ADDR
// end ;
73429: LD_VAR 0 2
73433: RET
// export function Dec ( value ) ; begin
73434: LD_INT 0
73436: PPUSH
// result := value - 1 ;
73437: LD_ADDR_VAR 0 2
73441: PUSH
73442: LD_VAR 0 1
73446: PUSH
73447: LD_INT 1
73449: MINUS
73450: ST_TO_ADDR
// end ;
73451: LD_VAR 0 2
73455: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73456: LD_INT 0
73458: PPUSH
73459: PPUSH
73460: PPUSH
73461: PPUSH
73462: PPUSH
73463: PPUSH
73464: PPUSH
73465: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73466: LD_VAR 0 1
73470: PPUSH
73471: LD_VAR 0 2
73475: PPUSH
73476: CALL_OW 488
73480: NOT
73481: PUSH
73482: LD_VAR 0 3
73486: PPUSH
73487: LD_VAR 0 4
73491: PPUSH
73492: CALL_OW 488
73496: NOT
73497: OR
73498: IFFALSE 73511
// begin result := - 1 ;
73500: LD_ADDR_VAR 0 5
73504: PUSH
73505: LD_INT 1
73507: NEG
73508: ST_TO_ADDR
// exit ;
73509: GO 73746
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73511: LD_ADDR_VAR 0 12
73515: PUSH
73516: LD_VAR 0 1
73520: PPUSH
73521: LD_VAR 0 2
73525: PPUSH
73526: LD_VAR 0 3
73530: PPUSH
73531: LD_VAR 0 4
73535: PPUSH
73536: CALL 72596 0 4
73540: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73541: LD_ADDR_VAR 0 11
73545: PUSH
73546: LD_VAR 0 1
73550: PPUSH
73551: LD_VAR 0 2
73555: PPUSH
73556: LD_VAR 0 12
73560: PUSH
73561: LD_INT 1
73563: ARRAY
73564: PPUSH
73565: LD_VAR 0 12
73569: PUSH
73570: LD_INT 2
73572: ARRAY
73573: PPUSH
73574: CALL_OW 298
73578: ST_TO_ADDR
// distance := 9999 ;
73579: LD_ADDR_VAR 0 10
73583: PUSH
73584: LD_INT 9999
73586: ST_TO_ADDR
// for i := 0 to 5 do
73587: LD_ADDR_VAR 0 6
73591: PUSH
73592: DOUBLE
73593: LD_INT 0
73595: DEC
73596: ST_TO_ADDR
73597: LD_INT 5
73599: PUSH
73600: FOR_TO
73601: IFFALSE 73744
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73603: LD_ADDR_VAR 0 7
73607: PUSH
73608: LD_VAR 0 1
73612: PPUSH
73613: LD_VAR 0 6
73617: PPUSH
73618: LD_VAR 0 11
73622: PPUSH
73623: CALL_OW 272
73627: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73628: LD_ADDR_VAR 0 8
73632: PUSH
73633: LD_VAR 0 2
73637: PPUSH
73638: LD_VAR 0 6
73642: PPUSH
73643: LD_VAR 0 11
73647: PPUSH
73648: CALL_OW 273
73652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73653: LD_VAR 0 7
73657: PPUSH
73658: LD_VAR 0 8
73662: PPUSH
73663: CALL_OW 488
73667: NOT
73668: IFFALSE 73672
// continue ;
73670: GO 73600
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73672: LD_ADDR_VAR 0 9
73676: PUSH
73677: LD_VAR 0 12
73681: PUSH
73682: LD_INT 1
73684: ARRAY
73685: PPUSH
73686: LD_VAR 0 12
73690: PUSH
73691: LD_INT 2
73693: ARRAY
73694: PPUSH
73695: LD_VAR 0 7
73699: PPUSH
73700: LD_VAR 0 8
73704: PPUSH
73705: CALL_OW 298
73709: ST_TO_ADDR
// if tmp < distance then
73710: LD_VAR 0 9
73714: PUSH
73715: LD_VAR 0 10
73719: LESS
73720: IFFALSE 73742
// begin result := i ;
73722: LD_ADDR_VAR 0 5
73726: PUSH
73727: LD_VAR 0 6
73731: ST_TO_ADDR
// distance := tmp ;
73732: LD_ADDR_VAR 0 10
73736: PUSH
73737: LD_VAR 0 9
73741: ST_TO_ADDR
// end ; end ;
73742: GO 73600
73744: POP
73745: POP
// end ;
73746: LD_VAR 0 5
73750: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73751: LD_INT 0
73753: PPUSH
73754: PPUSH
// if not driver or not IsInUnit ( driver ) then
73755: LD_VAR 0 1
73759: NOT
73760: PUSH
73761: LD_VAR 0 1
73765: PPUSH
73766: CALL_OW 310
73770: NOT
73771: OR
73772: IFFALSE 73776
// exit ;
73774: GO 73866
// vehicle := IsInUnit ( driver ) ;
73776: LD_ADDR_VAR 0 3
73780: PUSH
73781: LD_VAR 0 1
73785: PPUSH
73786: CALL_OW 310
73790: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73791: LD_VAR 0 1
73795: PPUSH
73796: LD_STRING \
73798: PUSH
73799: LD_INT 0
73801: PUSH
73802: LD_INT 0
73804: PUSH
73805: LD_INT 0
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: LD_INT 0
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: PUSH
73826: LD_STRING E
73828: PUSH
73829: LD_INT 0
73831: PUSH
73832: LD_INT 0
73834: PUSH
73835: LD_VAR 0 3
73839: PUSH
73840: LD_INT 0
73842: PUSH
73843: LD_INT 0
73845: PUSH
73846: LD_INT 0
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PPUSH
73862: CALL_OW 446
// end ;
73866: LD_VAR 0 2
73870: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73871: LD_INT 0
73873: PPUSH
73874: PPUSH
// if not driver or not IsInUnit ( driver ) then
73875: LD_VAR 0 1
73879: NOT
73880: PUSH
73881: LD_VAR 0 1
73885: PPUSH
73886: CALL_OW 310
73890: NOT
73891: OR
73892: IFFALSE 73896
// exit ;
73894: GO 73986
// vehicle := IsInUnit ( driver ) ;
73896: LD_ADDR_VAR 0 3
73900: PUSH
73901: LD_VAR 0 1
73905: PPUSH
73906: CALL_OW 310
73910: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73911: LD_VAR 0 1
73915: PPUSH
73916: LD_STRING \
73918: PUSH
73919: LD_INT 0
73921: PUSH
73922: LD_INT 0
73924: PUSH
73925: LD_INT 0
73927: PUSH
73928: LD_INT 0
73930: PUSH
73931: LD_INT 0
73933: PUSH
73934: LD_INT 0
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: PUSH
73946: LD_STRING E
73948: PUSH
73949: LD_INT 0
73951: PUSH
73952: LD_INT 0
73954: PUSH
73955: LD_VAR 0 3
73959: PUSH
73960: LD_INT 0
73962: PUSH
73963: LD_INT 0
73965: PUSH
73966: LD_INT 0
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PPUSH
73982: CALL_OW 447
// end ;
73986: LD_VAR 0 2
73990: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73991: LD_INT 0
73993: PPUSH
73994: PPUSH
73995: PPUSH
// tmp := [ ] ;
73996: LD_ADDR_VAR 0 5
74000: PUSH
74001: EMPTY
74002: ST_TO_ADDR
// for i in units do
74003: LD_ADDR_VAR 0 4
74007: PUSH
74008: LD_VAR 0 1
74012: PUSH
74013: FOR_IN
74014: IFFALSE 74052
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74016: LD_ADDR_VAR 0 5
74020: PUSH
74021: LD_VAR 0 5
74025: PPUSH
74026: LD_VAR 0 5
74030: PUSH
74031: LD_INT 1
74033: PLUS
74034: PPUSH
74035: LD_VAR 0 4
74039: PPUSH
74040: CALL_OW 256
74044: PPUSH
74045: CALL_OW 2
74049: ST_TO_ADDR
74050: GO 74013
74052: POP
74053: POP
// if not tmp then
74054: LD_VAR 0 5
74058: NOT
74059: IFFALSE 74063
// exit ;
74061: GO 74111
// if asc then
74063: LD_VAR 0 2
74067: IFFALSE 74091
// result := SortListByListAsc ( units , tmp ) else
74069: LD_ADDR_VAR 0 3
74073: PUSH
74074: LD_VAR 0 1
74078: PPUSH
74079: LD_VAR 0 5
74083: PPUSH
74084: CALL_OW 76
74088: ST_TO_ADDR
74089: GO 74111
// result := SortListByListDesc ( units , tmp ) ;
74091: LD_ADDR_VAR 0 3
74095: PUSH
74096: LD_VAR 0 1
74100: PPUSH
74101: LD_VAR 0 5
74105: PPUSH
74106: CALL_OW 77
74110: ST_TO_ADDR
// end ;
74111: LD_VAR 0 3
74115: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74116: LD_INT 0
74118: PPUSH
74119: PPUSH
// task := GetTaskList ( mech ) ;
74120: LD_ADDR_VAR 0 4
74124: PUSH
74125: LD_VAR 0 1
74129: PPUSH
74130: CALL_OW 437
74134: ST_TO_ADDR
// if not task then
74135: LD_VAR 0 4
74139: NOT
74140: IFFALSE 74144
// exit ;
74142: GO 74186
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74144: LD_ADDR_VAR 0 3
74148: PUSH
74149: LD_VAR 0 4
74153: PUSH
74154: LD_INT 1
74156: ARRAY
74157: PUSH
74158: LD_INT 1
74160: ARRAY
74161: PUSH
74162: LD_STRING r
74164: EQUAL
74165: PUSH
74166: LD_VAR 0 4
74170: PUSH
74171: LD_INT 1
74173: ARRAY
74174: PUSH
74175: LD_INT 4
74177: ARRAY
74178: PUSH
74179: LD_VAR 0 2
74183: EQUAL
74184: AND
74185: ST_TO_ADDR
// end ;
74186: LD_VAR 0 3
74190: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74191: LD_INT 0
74193: PPUSH
// SetDir ( unit , d ) ;
74194: LD_VAR 0 1
74198: PPUSH
74199: LD_VAR 0 4
74203: PPUSH
74204: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74208: LD_VAR 0 1
74212: PPUSH
74213: LD_VAR 0 2
74217: PPUSH
74218: LD_VAR 0 3
74222: PPUSH
74223: LD_VAR 0 5
74227: PPUSH
74228: CALL_OW 48
// end ;
74232: LD_VAR 0 6
74236: RET
// export function ToNaturalNumber ( number ) ; begin
74237: LD_INT 0
74239: PPUSH
// result := number div 1 ;
74240: LD_ADDR_VAR 0 2
74244: PUSH
74245: LD_VAR 0 1
74249: PUSH
74250: LD_INT 1
74252: DIV
74253: ST_TO_ADDR
// if number < 0 then
74254: LD_VAR 0 1
74258: PUSH
74259: LD_INT 0
74261: LESS
74262: IFFALSE 74272
// result := 0 ;
74264: LD_ADDR_VAR 0 2
74268: PUSH
74269: LD_INT 0
74271: ST_TO_ADDR
// end ;
74272: LD_VAR 0 2
74276: RET
// export function SortByClass ( units , class ) ; var un ; begin
74277: LD_INT 0
74279: PPUSH
74280: PPUSH
// if not units or not class then
74281: LD_VAR 0 1
74285: NOT
74286: PUSH
74287: LD_VAR 0 2
74291: NOT
74292: OR
74293: IFFALSE 74297
// exit ;
74295: GO 74392
// result := [ ] ;
74297: LD_ADDR_VAR 0 3
74301: PUSH
74302: EMPTY
74303: ST_TO_ADDR
// for un in units do
74304: LD_ADDR_VAR 0 4
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: FOR_IN
74315: IFFALSE 74390
// if GetClass ( un ) = class then
74317: LD_VAR 0 4
74321: PPUSH
74322: CALL_OW 257
74326: PUSH
74327: LD_VAR 0 2
74331: EQUAL
74332: IFFALSE 74359
// result := Insert ( result , 1 , un ) else
74334: LD_ADDR_VAR 0 3
74338: PUSH
74339: LD_VAR 0 3
74343: PPUSH
74344: LD_INT 1
74346: PPUSH
74347: LD_VAR 0 4
74351: PPUSH
74352: CALL_OW 2
74356: ST_TO_ADDR
74357: GO 74388
// result := Replace ( result , result + 1 , un ) ;
74359: LD_ADDR_VAR 0 3
74363: PUSH
74364: LD_VAR 0 3
74368: PPUSH
74369: LD_VAR 0 3
74373: PUSH
74374: LD_INT 1
74376: PLUS
74377: PPUSH
74378: LD_VAR 0 4
74382: PPUSH
74383: CALL_OW 1
74387: ST_TO_ADDR
74388: GO 74314
74390: POP
74391: POP
// end ;
74392: LD_VAR 0 3
74396: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74397: LD_INT 0
74399: PPUSH
74400: PPUSH
74401: PPUSH
74402: PPUSH
74403: PPUSH
74404: PPUSH
74405: PPUSH
// result := [ ] ;
74406: LD_ADDR_VAR 0 4
74410: PUSH
74411: EMPTY
74412: ST_TO_ADDR
// if x - r < 0 then
74413: LD_VAR 0 1
74417: PUSH
74418: LD_VAR 0 3
74422: MINUS
74423: PUSH
74424: LD_INT 0
74426: LESS
74427: IFFALSE 74439
// min_x := 0 else
74429: LD_ADDR_VAR 0 8
74433: PUSH
74434: LD_INT 0
74436: ST_TO_ADDR
74437: GO 74455
// min_x := x - r ;
74439: LD_ADDR_VAR 0 8
74443: PUSH
74444: LD_VAR 0 1
74448: PUSH
74449: LD_VAR 0 3
74453: MINUS
74454: ST_TO_ADDR
// if y - r < 0 then
74455: LD_VAR 0 2
74459: PUSH
74460: LD_VAR 0 3
74464: MINUS
74465: PUSH
74466: LD_INT 0
74468: LESS
74469: IFFALSE 74481
// min_y := 0 else
74471: LD_ADDR_VAR 0 7
74475: PUSH
74476: LD_INT 0
74478: ST_TO_ADDR
74479: GO 74497
// min_y := y - r ;
74481: LD_ADDR_VAR 0 7
74485: PUSH
74486: LD_VAR 0 2
74490: PUSH
74491: LD_VAR 0 3
74495: MINUS
74496: ST_TO_ADDR
// max_x := x + r ;
74497: LD_ADDR_VAR 0 9
74501: PUSH
74502: LD_VAR 0 1
74506: PUSH
74507: LD_VAR 0 3
74511: PLUS
74512: ST_TO_ADDR
// max_y := y + r ;
74513: LD_ADDR_VAR 0 10
74517: PUSH
74518: LD_VAR 0 2
74522: PUSH
74523: LD_VAR 0 3
74527: PLUS
74528: ST_TO_ADDR
// for _x = min_x to max_x do
74529: LD_ADDR_VAR 0 5
74533: PUSH
74534: DOUBLE
74535: LD_VAR 0 8
74539: DEC
74540: ST_TO_ADDR
74541: LD_VAR 0 9
74545: PUSH
74546: FOR_TO
74547: IFFALSE 74648
// for _y = min_y to max_y do
74549: LD_ADDR_VAR 0 6
74553: PUSH
74554: DOUBLE
74555: LD_VAR 0 7
74559: DEC
74560: ST_TO_ADDR
74561: LD_VAR 0 10
74565: PUSH
74566: FOR_TO
74567: IFFALSE 74644
// begin if not ValidHex ( _x , _y ) then
74569: LD_VAR 0 5
74573: PPUSH
74574: LD_VAR 0 6
74578: PPUSH
74579: CALL_OW 488
74583: NOT
74584: IFFALSE 74588
// continue ;
74586: GO 74566
// if GetResourceTypeXY ( _x , _y ) then
74588: LD_VAR 0 5
74592: PPUSH
74593: LD_VAR 0 6
74597: PPUSH
74598: CALL_OW 283
74602: IFFALSE 74642
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74604: LD_ADDR_VAR 0 4
74608: PUSH
74609: LD_VAR 0 4
74613: PPUSH
74614: LD_VAR 0 4
74618: PUSH
74619: LD_INT 1
74621: PLUS
74622: PPUSH
74623: LD_VAR 0 5
74627: PUSH
74628: LD_VAR 0 6
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PPUSH
74637: CALL_OW 1
74641: ST_TO_ADDR
// end ;
74642: GO 74566
74644: POP
74645: POP
74646: GO 74546
74648: POP
74649: POP
// end ;
74650: LD_VAR 0 4
74654: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74655: LD_INT 0
74657: PPUSH
74658: PPUSH
74659: PPUSH
74660: PPUSH
74661: PPUSH
74662: PPUSH
74663: PPUSH
74664: PPUSH
// if not units then
74665: LD_VAR 0 1
74669: NOT
74670: IFFALSE 74674
// exit ;
74672: GO 75198
// result := UnitFilter ( units , [ f_ok ] ) ;
74674: LD_ADDR_VAR 0 3
74678: PUSH
74679: LD_VAR 0 1
74683: PPUSH
74684: LD_INT 50
74686: PUSH
74687: EMPTY
74688: LIST
74689: PPUSH
74690: CALL_OW 72
74694: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74695: LD_ADDR_VAR 0 8
74699: PUSH
74700: LD_VAR 0 1
74704: PUSH
74705: LD_INT 1
74707: ARRAY
74708: PPUSH
74709: CALL_OW 255
74713: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74714: LD_ADDR_VAR 0 10
74718: PUSH
74719: LD_INT 29
74721: PUSH
74722: LD_INT 91
74724: PUSH
74725: LD_INT 49
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: LIST
74732: ST_TO_ADDR
// if not result then
74733: LD_VAR 0 3
74737: NOT
74738: IFFALSE 74742
// exit ;
74740: GO 75198
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74742: LD_ADDR_VAR 0 5
74746: PUSH
74747: LD_INT 81
74749: PUSH
74750: LD_VAR 0 8
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PPUSH
74759: CALL_OW 69
74763: ST_TO_ADDR
// for i in result do
74764: LD_ADDR_VAR 0 4
74768: PUSH
74769: LD_VAR 0 3
74773: PUSH
74774: FOR_IN
74775: IFFALSE 75196
// begin tag := GetTag ( i ) + 1 ;
74777: LD_ADDR_VAR 0 9
74781: PUSH
74782: LD_VAR 0 4
74786: PPUSH
74787: CALL_OW 110
74791: PUSH
74792: LD_INT 1
74794: PLUS
74795: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74796: LD_ADDR_VAR 0 7
74800: PUSH
74801: LD_VAR 0 4
74805: PPUSH
74806: CALL_OW 250
74810: PPUSH
74811: LD_VAR 0 4
74815: PPUSH
74816: CALL_OW 251
74820: PPUSH
74821: LD_INT 6
74823: PPUSH
74824: CALL 74397 0 3
74828: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74829: LD_VAR 0 4
74833: PPUSH
74834: CALL_OW 247
74838: PUSH
74839: LD_INT 2
74841: EQUAL
74842: PUSH
74843: LD_VAR 0 7
74847: AND
74848: PUSH
74849: LD_VAR 0 4
74853: PPUSH
74854: CALL_OW 264
74858: PUSH
74859: LD_VAR 0 10
74863: IN
74864: NOT
74865: AND
74866: IFFALSE 74905
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74868: LD_VAR 0 4
74872: PPUSH
74873: LD_VAR 0 7
74877: PUSH
74878: LD_INT 1
74880: ARRAY
74881: PUSH
74882: LD_INT 1
74884: ARRAY
74885: PPUSH
74886: LD_VAR 0 7
74890: PUSH
74891: LD_INT 1
74893: ARRAY
74894: PUSH
74895: LD_INT 2
74897: ARRAY
74898: PPUSH
74899: CALL_OW 116
74903: GO 75194
// if path > tag then
74905: LD_VAR 0 2
74909: PUSH
74910: LD_VAR 0 9
74914: GREATER
74915: IFFALSE 75123
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74917: LD_ADDR_VAR 0 6
74921: PUSH
74922: LD_VAR 0 5
74926: PPUSH
74927: LD_INT 91
74929: PUSH
74930: LD_VAR 0 4
74934: PUSH
74935: LD_INT 8
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: LIST
74942: PPUSH
74943: CALL_OW 72
74947: ST_TO_ADDR
// if nearEnemy then
74948: LD_VAR 0 6
74952: IFFALSE 75021
// begin if GetWeapon ( i ) = ru_time_lapser then
74954: LD_VAR 0 4
74958: PPUSH
74959: CALL_OW 264
74963: PUSH
74964: LD_INT 49
74966: EQUAL
74967: IFFALSE 74995
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74969: LD_VAR 0 4
74973: PPUSH
74974: LD_VAR 0 6
74978: PPUSH
74979: LD_VAR 0 4
74983: PPUSH
74984: CALL_OW 74
74988: PPUSH
74989: CALL_OW 112
74993: GO 75019
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74995: LD_VAR 0 4
74999: PPUSH
75000: LD_VAR 0 6
75004: PPUSH
75005: LD_VAR 0 4
75009: PPUSH
75010: CALL_OW 74
75014: PPUSH
75015: CALL_OW 115
// end else
75019: GO 75121
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75021: LD_VAR 0 4
75025: PPUSH
75026: LD_VAR 0 2
75030: PUSH
75031: LD_VAR 0 9
75035: ARRAY
75036: PUSH
75037: LD_INT 1
75039: ARRAY
75040: PPUSH
75041: LD_VAR 0 2
75045: PUSH
75046: LD_VAR 0 9
75050: ARRAY
75051: PUSH
75052: LD_INT 2
75054: ARRAY
75055: PPUSH
75056: CALL_OW 297
75060: PUSH
75061: LD_INT 6
75063: GREATER
75064: IFFALSE 75107
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75066: LD_VAR 0 4
75070: PPUSH
75071: LD_VAR 0 2
75075: PUSH
75076: LD_VAR 0 9
75080: ARRAY
75081: PUSH
75082: LD_INT 1
75084: ARRAY
75085: PPUSH
75086: LD_VAR 0 2
75090: PUSH
75091: LD_VAR 0 9
75095: ARRAY
75096: PUSH
75097: LD_INT 2
75099: ARRAY
75100: PPUSH
75101: CALL_OW 114
75105: GO 75121
// SetTag ( i , tag ) ;
75107: LD_VAR 0 4
75111: PPUSH
75112: LD_VAR 0 9
75116: PPUSH
75117: CALL_OW 109
// end else
75121: GO 75194
// if enemy then
75123: LD_VAR 0 5
75127: IFFALSE 75194
// begin if GetWeapon ( i ) = ru_time_lapser then
75129: LD_VAR 0 4
75133: PPUSH
75134: CALL_OW 264
75138: PUSH
75139: LD_INT 49
75141: EQUAL
75142: IFFALSE 75170
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75144: LD_VAR 0 4
75148: PPUSH
75149: LD_VAR 0 5
75153: PPUSH
75154: LD_VAR 0 4
75158: PPUSH
75159: CALL_OW 74
75163: PPUSH
75164: CALL_OW 112
75168: GO 75194
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75170: LD_VAR 0 4
75174: PPUSH
75175: LD_VAR 0 5
75179: PPUSH
75180: LD_VAR 0 4
75184: PPUSH
75185: CALL_OW 74
75189: PPUSH
75190: CALL_OW 115
// end ; end ;
75194: GO 74774
75196: POP
75197: POP
// end ;
75198: LD_VAR 0 3
75202: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75203: LD_INT 0
75205: PPUSH
75206: PPUSH
75207: PPUSH
// if not unit or IsInUnit ( unit ) then
75208: LD_VAR 0 1
75212: NOT
75213: PUSH
75214: LD_VAR 0 1
75218: PPUSH
75219: CALL_OW 310
75223: OR
75224: IFFALSE 75228
// exit ;
75226: GO 75319
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75228: LD_ADDR_VAR 0 4
75232: PUSH
75233: LD_VAR 0 1
75237: PPUSH
75238: CALL_OW 250
75242: PPUSH
75243: LD_VAR 0 2
75247: PPUSH
75248: LD_INT 1
75250: PPUSH
75251: CALL_OW 272
75255: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75256: LD_ADDR_VAR 0 5
75260: PUSH
75261: LD_VAR 0 1
75265: PPUSH
75266: CALL_OW 251
75270: PPUSH
75271: LD_VAR 0 2
75275: PPUSH
75276: LD_INT 1
75278: PPUSH
75279: CALL_OW 273
75283: ST_TO_ADDR
// if ValidHex ( x , y ) then
75284: LD_VAR 0 4
75288: PPUSH
75289: LD_VAR 0 5
75293: PPUSH
75294: CALL_OW 488
75298: IFFALSE 75319
// ComTurnXY ( unit , x , y ) ;
75300: LD_VAR 0 1
75304: PPUSH
75305: LD_VAR 0 4
75309: PPUSH
75310: LD_VAR 0 5
75314: PPUSH
75315: CALL_OW 118
// end ;
75319: LD_VAR 0 3
75323: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75324: LD_INT 0
75326: PPUSH
75327: PPUSH
// result := false ;
75328: LD_ADDR_VAR 0 3
75332: PUSH
75333: LD_INT 0
75335: ST_TO_ADDR
// if not units then
75336: LD_VAR 0 2
75340: NOT
75341: IFFALSE 75345
// exit ;
75343: GO 75390
// for i in units do
75345: LD_ADDR_VAR 0 4
75349: PUSH
75350: LD_VAR 0 2
75354: PUSH
75355: FOR_IN
75356: IFFALSE 75388
// if See ( side , i ) then
75358: LD_VAR 0 1
75362: PPUSH
75363: LD_VAR 0 4
75367: PPUSH
75368: CALL_OW 292
75372: IFFALSE 75386
// begin result := true ;
75374: LD_ADDR_VAR 0 3
75378: PUSH
75379: LD_INT 1
75381: ST_TO_ADDR
// exit ;
75382: POP
75383: POP
75384: GO 75390
// end ;
75386: GO 75355
75388: POP
75389: POP
// end ;
75390: LD_VAR 0 3
75394: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75395: LD_INT 0
75397: PPUSH
75398: PPUSH
75399: PPUSH
75400: PPUSH
// if not unit or not points then
75401: LD_VAR 0 1
75405: NOT
75406: PUSH
75407: LD_VAR 0 2
75411: NOT
75412: OR
75413: IFFALSE 75417
// exit ;
75415: GO 75507
// dist := 99999 ;
75417: LD_ADDR_VAR 0 5
75421: PUSH
75422: LD_INT 99999
75424: ST_TO_ADDR
// for i in points do
75425: LD_ADDR_VAR 0 4
75429: PUSH
75430: LD_VAR 0 2
75434: PUSH
75435: FOR_IN
75436: IFFALSE 75505
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75438: LD_ADDR_VAR 0 6
75442: PUSH
75443: LD_VAR 0 1
75447: PPUSH
75448: LD_VAR 0 4
75452: PUSH
75453: LD_INT 1
75455: ARRAY
75456: PPUSH
75457: LD_VAR 0 4
75461: PUSH
75462: LD_INT 2
75464: ARRAY
75465: PPUSH
75466: CALL_OW 297
75470: ST_TO_ADDR
// if tmpDist < dist then
75471: LD_VAR 0 6
75475: PUSH
75476: LD_VAR 0 5
75480: LESS
75481: IFFALSE 75503
// begin result := i ;
75483: LD_ADDR_VAR 0 3
75487: PUSH
75488: LD_VAR 0 4
75492: ST_TO_ADDR
// dist := tmpDist ;
75493: LD_ADDR_VAR 0 5
75497: PUSH
75498: LD_VAR 0 6
75502: ST_TO_ADDR
// end ; end ;
75503: GO 75435
75505: POP
75506: POP
// end ;
75507: LD_VAR 0 3
75511: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75512: LD_INT 0
75514: PPUSH
// uc_side := side ;
75515: LD_ADDR_OWVAR 20
75519: PUSH
75520: LD_VAR 0 1
75524: ST_TO_ADDR
// uc_nation := 3 ;
75525: LD_ADDR_OWVAR 21
75529: PUSH
75530: LD_INT 3
75532: ST_TO_ADDR
// vc_chassis := 25 ;
75533: LD_ADDR_OWVAR 37
75537: PUSH
75538: LD_INT 25
75540: ST_TO_ADDR
// vc_engine := engine_siberite ;
75541: LD_ADDR_OWVAR 39
75545: PUSH
75546: LD_INT 3
75548: ST_TO_ADDR
// vc_control := control_computer ;
75549: LD_ADDR_OWVAR 38
75553: PUSH
75554: LD_INT 3
75556: ST_TO_ADDR
// vc_weapon := 59 ;
75557: LD_ADDR_OWVAR 40
75561: PUSH
75562: LD_INT 59
75564: ST_TO_ADDR
// result := CreateVehicle ;
75565: LD_ADDR_VAR 0 5
75569: PUSH
75570: CALL_OW 45
75574: ST_TO_ADDR
// SetDir ( result , d ) ;
75575: LD_VAR 0 5
75579: PPUSH
75580: LD_VAR 0 4
75584: PPUSH
75585: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75589: LD_VAR 0 5
75593: PPUSH
75594: LD_VAR 0 2
75598: PPUSH
75599: LD_VAR 0 3
75603: PPUSH
75604: LD_INT 0
75606: PPUSH
75607: CALL_OW 48
// end ;
75611: LD_VAR 0 5
75615: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75616: LD_INT 0
75618: PPUSH
75619: PPUSH
75620: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75621: LD_ADDR_VAR 0 2
75625: PUSH
75626: LD_INT 0
75628: PUSH
75629: LD_INT 0
75631: PUSH
75632: LD_INT 0
75634: PUSH
75635: LD_INT 0
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75644: LD_VAR 0 1
75648: NOT
75649: PUSH
75650: LD_VAR 0 1
75654: PPUSH
75655: CALL_OW 264
75659: PUSH
75660: LD_INT 12
75662: PUSH
75663: LD_INT 51
75665: PUSH
75666: LD_INT 32
75668: PUSH
75669: LD_INT 89
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: IN
75678: NOT
75679: OR
75680: IFFALSE 75684
// exit ;
75682: GO 75782
// for i := 1 to 3 do
75684: LD_ADDR_VAR 0 3
75688: PUSH
75689: DOUBLE
75690: LD_INT 1
75692: DEC
75693: ST_TO_ADDR
75694: LD_INT 3
75696: PUSH
75697: FOR_TO
75698: IFFALSE 75780
// begin tmp := GetCargo ( cargo , i ) ;
75700: LD_ADDR_VAR 0 4
75704: PUSH
75705: LD_VAR 0 1
75709: PPUSH
75710: LD_VAR 0 3
75714: PPUSH
75715: CALL_OW 289
75719: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75720: LD_ADDR_VAR 0 2
75724: PUSH
75725: LD_VAR 0 2
75729: PPUSH
75730: LD_VAR 0 3
75734: PPUSH
75735: LD_VAR 0 4
75739: PPUSH
75740: CALL_OW 1
75744: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75745: LD_ADDR_VAR 0 2
75749: PUSH
75750: LD_VAR 0 2
75754: PPUSH
75755: LD_INT 4
75757: PPUSH
75758: LD_VAR 0 2
75762: PUSH
75763: LD_INT 4
75765: ARRAY
75766: PUSH
75767: LD_VAR 0 4
75771: PLUS
75772: PPUSH
75773: CALL_OW 1
75777: ST_TO_ADDR
// end ;
75778: GO 75697
75780: POP
75781: POP
// end ;
75782: LD_VAR 0 2
75786: RET
// export function Length ( array ) ; begin
75787: LD_INT 0
75789: PPUSH
// result := array + 0 ;
75790: LD_ADDR_VAR 0 2
75794: PUSH
75795: LD_VAR 0 1
75799: PUSH
75800: LD_INT 0
75802: PLUS
75803: ST_TO_ADDR
// end ;
75804: LD_VAR 0 2
75808: RET
// export function PrepareArray ( array ) ; begin
75809: LD_INT 0
75811: PPUSH
// result := array diff 0 ;
75812: LD_ADDR_VAR 0 2
75816: PUSH
75817: LD_VAR 0 1
75821: PUSH
75822: LD_INT 0
75824: DIFF
75825: ST_TO_ADDR
// if not result [ 1 ] then
75826: LD_VAR 0 2
75830: PUSH
75831: LD_INT 1
75833: ARRAY
75834: NOT
75835: IFFALSE 75855
// result := Delete ( result , 1 ) ;
75837: LD_ADDR_VAR 0 2
75841: PUSH
75842: LD_VAR 0 2
75846: PPUSH
75847: LD_INT 1
75849: PPUSH
75850: CALL_OW 3
75854: ST_TO_ADDR
// end ;
75855: LD_VAR 0 2
75859: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75860: LD_INT 0
75862: PPUSH
75863: PPUSH
75864: PPUSH
75865: PPUSH
// sibRocketRange := 25 ;
75866: LD_ADDR_VAR 0 6
75870: PUSH
75871: LD_INT 25
75873: ST_TO_ADDR
// result := false ;
75874: LD_ADDR_VAR 0 4
75878: PUSH
75879: LD_INT 0
75881: ST_TO_ADDR
// for i := 0 to 5 do
75882: LD_ADDR_VAR 0 5
75886: PUSH
75887: DOUBLE
75888: LD_INT 0
75890: DEC
75891: ST_TO_ADDR
75892: LD_INT 5
75894: PUSH
75895: FOR_TO
75896: IFFALSE 75963
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75898: LD_VAR 0 1
75902: PPUSH
75903: LD_VAR 0 5
75907: PPUSH
75908: LD_VAR 0 6
75912: PPUSH
75913: CALL_OW 272
75917: PPUSH
75918: LD_VAR 0 2
75922: PPUSH
75923: LD_VAR 0 5
75927: PPUSH
75928: LD_VAR 0 6
75932: PPUSH
75933: CALL_OW 273
75937: PPUSH
75938: LD_VAR 0 3
75942: PPUSH
75943: CALL_OW 309
75947: IFFALSE 75961
// begin result := true ;
75949: LD_ADDR_VAR 0 4
75953: PUSH
75954: LD_INT 1
75956: ST_TO_ADDR
// exit ;
75957: POP
75958: POP
75959: GO 75965
// end ;
75961: GO 75895
75963: POP
75964: POP
// end ;
75965: LD_VAR 0 4
75969: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75970: LD_INT 0
75972: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75973: LD_VAR 0 1
75977: PPUSH
75978: LD_VAR 0 2
75982: PPUSH
75983: LD_INT 0
75985: PPUSH
75986: LD_INT 0
75988: PPUSH
75989: LD_INT 1
75991: PPUSH
75992: LD_INT 0
75994: PPUSH
75995: CALL_OW 587
// end ; end_of_file
75999: LD_VAR 0 3
76003: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76004: LD_VAR 0 1
76008: PUSH
76009: LD_INT 200
76011: DOUBLE
76012: GREATEREQUAL
76013: IFFALSE 76021
76015: LD_INT 299
76017: DOUBLE
76018: LESSEQUAL
76019: IFTRUE 76023
76021: GO 76055
76023: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76024: LD_VAR 0 1
76028: PPUSH
76029: LD_VAR 0 2
76033: PPUSH
76034: LD_VAR 0 3
76038: PPUSH
76039: LD_VAR 0 4
76043: PPUSH
76044: LD_VAR 0 5
76048: PPUSH
76049: CALL 15049 0 5
76053: GO 76132
76055: LD_INT 300
76057: DOUBLE
76058: GREATEREQUAL
76059: IFFALSE 76067
76061: LD_INT 399
76063: DOUBLE
76064: LESSEQUAL
76065: IFTRUE 76069
76067: GO 76131
76069: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76070: LD_VAR 0 1
76074: PPUSH
76075: LD_VAR 0 2
76079: PPUSH
76080: LD_VAR 0 3
76084: PPUSH
76085: LD_VAR 0 4
76089: PPUSH
76090: LD_VAR 0 5
76094: PPUSH
76095: LD_VAR 0 6
76099: PPUSH
76100: LD_VAR 0 7
76104: PPUSH
76105: LD_VAR 0 8
76109: PPUSH
76110: LD_VAR 0 9
76114: PPUSH
76115: LD_VAR 0 10
76119: PPUSH
76120: LD_VAR 0 11
76124: PPUSH
76125: CALL 31320 0 11
76129: GO 76132
76131: POP
// end ;
76132: PPOPN 11
76134: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76135: LD_VAR 0 1
76139: PPUSH
76140: LD_VAR 0 2
76144: PPUSH
76145: LD_VAR 0 3
76149: PPUSH
76150: LD_VAR 0 4
76154: PPUSH
76155: LD_VAR 0 5
76159: PPUSH
76160: CALL 14785 0 5
// end ; end_of_file
76164: PPOPN 5
76166: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76167: LD_VAR 0 1
76171: PPUSH
76172: LD_VAR 0 2
76176: PPUSH
76177: LD_VAR 0 3
76181: PPUSH
76182: LD_VAR 0 4
76186: PPUSH
76187: LD_VAR 0 5
76191: PPUSH
76192: LD_VAR 0 6
76196: PPUSH
76197: CALL 19013 0 6
// end ;
76201: PPOPN 6
76203: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76204: LD_INT 0
76206: PPUSH
// begin if not units then
76207: LD_VAR 0 1
76211: NOT
76212: IFFALSE 76216
// exit ;
76214: GO 76216
// end ;
76216: PPOPN 7
76218: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76219: CALL 18984 0 0
// end ;
76223: PPOPN 1
76225: END
