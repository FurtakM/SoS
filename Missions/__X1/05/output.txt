// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 740 0 2
// PrepareArabian ;
  31: CALL 1433 0 0
// PrepareRussian ;
  35: CALL 3031 0 0
// Action ;
  39: CALL 7665 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 250: LD_ADDR_OWVAR 79
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// end ;
 258: LD_VAR 0 1
 262: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 263: LD_EXP 10
 267: NOT
 268: PUSH
 269: LD_EXP 9
 273: NOT
 274: AND
 275: PUSH
 276: LD_EXP 39
 280: NOT
 281: AND
 282: PUSH
 283: LD_EXP 40
 287: NOT
 288: AND
 289: IFFALSE 301
 291: GO 293
 293: DISABLE
// SetAchievement ( ACH_EXT ) ;
 294: LD_STRING ACH_EXT
 296: PPUSH
 297: CALL_OW 543
 301: END
// every 0 0$1 trigger captureCounter >= 6 do
 302: LD_EXP 18
 306: PUSH
 307: LD_INT 6
 309: GREATEREQUAL
 310: IFFALSE 322
 312: GO 314
 314: DISABLE
// SetAchievement ( ACH_KEY ) ;
 315: LD_STRING ACH_KEY
 317: PPUSH
 318: CALL_OW 543
 322: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 323: LD_EXP 19
 327: PUSH
 328: LD_INT 3
 330: GREATEREQUAL
 331: IFFALSE 343
 333: GO 335
 335: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 336: LD_STRING ACH_CHEM
 338: PPUSH
 339: CALL_OW 543
 343: END
// every 0 0$1 trigger debug do var i ;
 344: LD_EXP 1
 348: IFFALSE 432
 350: GO 352
 352: DISABLE
 353: LD_INT 0
 355: PPUSH
// begin enable ;
 356: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 357: LD_ADDR_VAR 0 1
 361: PUSH
 362: LD_INT 22
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 21
 377: PUSH
 378: LD_INT 3
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: FOR_IN
 399: IFFALSE 430
// if GetLives ( i ) < 1000 then
 401: LD_VAR 0 1
 405: PPUSH
 406: CALL_OW 256
 410: PUSH
 411: LD_INT 1000
 413: LESS
 414: IFFALSE 428
// SetLives ( i , 1000 ) ;
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 1000
 423: PPUSH
 424: CALL_OW 234
 428: GO 398
 430: POP
 431: POP
// end ; end_of_file
 432: PPOPN 1
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function SayX ( units , ident ) ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// result := false ;
 527: LD_ADDR_VAR 0 3
 531: PUSH
 532: LD_INT 0
 534: ST_TO_ADDR
// if not units then
 535: LD_VAR 0 1
 539: NOT
 540: IFFALSE 544
// exit ;
 542: GO 598
// for i in units do
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: LD_VAR 0 1
 553: PUSH
 554: FOR_IN
 555: IFFALSE 596
// if IsOk ( i ) then
 557: LD_VAR 0 4
 561: PPUSH
 562: CALL_OW 302
 566: IFFALSE 594
// begin Say ( i , ident ) ;
 568: LD_VAR 0 4
 572: PPUSH
 573: LD_VAR 0 2
 577: PPUSH
 578: CALL_OW 88
// result := i ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_VAR 0 4
 591: ST_TO_ADDR
// break ;
 592: GO 596
// end ;
 594: GO 554
 596: POP
 597: POP
// end ;
 598: LD_VAR 0 3
 602: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 603: LD_INT 0
 605: PPUSH
 606: PPUSH
// InitUc ;
 607: CALL_OW 18
// InitHc ;
 611: CALL_OW 19
// uc_side := 0 ;
 615: LD_ADDR_OWVAR 20
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// uc_nation := 0 ;
 623: LD_ADDR_OWVAR 21
 627: PUSH
 628: LD_INT 0
 630: ST_TO_ADDR
// for i = 1 to amount do
 631: LD_ADDR_VAR 0 4
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 2
 645: PUSH
 646: FOR_TO
 647: IFFALSE 729
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 649: LD_ADDR_OWVAR 29
 653: PUSH
 654: LD_INT 9
 656: PPUSH
 657: LD_INT 12
 659: PPUSH
 660: CALL_OW 12
 664: PUSH
 665: LD_INT 9
 667: PPUSH
 668: LD_INT 12
 670: PPUSH
 671: CALL_OW 12
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 680: LD_ADDR_OWVAR 35
 684: PUSH
 685: LD_INT 1
 687: NEG
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL_OW 12
 696: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 697: LD_INT 0
 699: PPUSH
 700: LD_INT 12
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 646
 729: POP
 730: POP
// InitHc ;
 731: CALL_OW 19
// end ;
 735: LD_VAR 0 3
 739: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 740: LD_INT 0
 742: PPUSH
 743: PPUSH
// uc_side := 0 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// uc_nation := 0 ;
 752: LD_ADDR_OWVAR 21
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// for i := 1 to 3 do
 760: LD_ADDR_VAR 0 4
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_INT 3
 772: PUSH
 773: FOR_TO
 774: IFFALSE 811
// begin hc_class := 21 ;
 776: LD_ADDR_OWVAR 28
 780: PUSH
 781: LD_INT 21
 783: ST_TO_ADDR
// hc_gallery :=  ;
 784: LD_ADDR_OWVAR 33
 788: PUSH
 789: LD_STRING 
 791: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 792: CALL_OW 44
 796: PPUSH
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// end ;
 809: GO 773
 811: POP
 812: POP
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 4
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 864
// begin hc_class := 18 ;
 829: LD_ADDR_OWVAR 28
 833: PUSH
 834: LD_INT 18
 836: ST_TO_ADDR
// hc_gallery :=  ;
 837: LD_ADDR_OWVAR 33
 841: PUSH
 842: LD_STRING 
 844: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 845: CALL_OW 44
 849: PPUSH
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end ;
 862: GO 826
 864: POP
 865: POP
// for i := 1 to 3 do
 866: LD_ADDR_VAR 0 4
 870: PUSH
 871: DOUBLE
 872: LD_INT 1
 874: DEC
 875: ST_TO_ADDR
 876: LD_INT 3
 878: PUSH
 879: FOR_TO
 880: IFFALSE 917
// begin hc_class := 13 ;
 882: LD_ADDR_OWVAR 28
 886: PUSH
 887: LD_INT 13
 889: ST_TO_ADDR
// hc_gallery :=  ;
 890: LD_ADDR_OWVAR 33
 894: PUSH
 895: LD_STRING 
 897: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 898: CALL_OW 44
 902: PPUSH
 903: LD_VAR 0 1
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 879
 917: POP
 918: POP
// for i := 1 to 4 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 4
 931: PUSH
 932: FOR_TO
 933: IFFALSE 970
// begin hc_class := class_frog ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 19
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_VAR 0 2
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end ;
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 3
 976: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
// if not observer or not unit then
 982: LD_VAR 0 1
 986: NOT
 987: PUSH
 988: LD_VAR 0 2
 992: NOT
 993: OR
 994: IFFALSE 998
// exit ;
 996: GO 1046
// if not See ( GetSide ( observer ) , unit ) then
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL_OW 255
1007: PPUSH
1008: LD_VAR 0 2
1012: PPUSH
1013: CALL_OW 292
1017: NOT
1018: IFFALSE 1022
// exit ;
1020: GO 1046
// result := GetDistUnits ( observer , unit ) < 12 ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 1
1031: PPUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: CALL_OW 296
1041: PUSH
1042: LD_INT 12
1044: LESS
1045: ST_TO_ADDR
// end ;
1046: LD_VAR 0 3
1050: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1051: LD_INT 0
1053: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_VAR 0 2
1067: PUSH
1068: LD_INT 2
1070: ARRAY
1071: PPUSH
1072: CALL_OW 488
1076: PUSH
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: ARRAY
1085: PPUSH
1086: LD_VAR 0 2
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 428
1099: PUSH
1100: LD_INT 0
1102: EQUAL
1103: AND
1104: IFFALSE 1138
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1106: LD_VAR 0 1
1110: PPUSH
1111: LD_VAR 0 2
1115: PUSH
1116: LD_INT 1
1118: ARRAY
1119: PPUSH
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 3
1133: PPUSH
1134: CALL_OW 48
// end ;
1138: LD_VAR 0 4
1142: RET
// export function ReverseArray ( array ) ; var i ; begin
1143: LD_INT 0
1145: PPUSH
1146: PPUSH
// if not array then
1147: LD_VAR 0 1
1151: NOT
1152: IFFALSE 1156
// exit ;
1154: GO 1214
// result := [ ] ;
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: EMPTY
1162: ST_TO_ADDR
// for i := 1 to array do
1163: LD_ADDR_VAR 0 3
1167: PUSH
1168: DOUBLE
1169: LD_INT 1
1171: DEC
1172: ST_TO_ADDR
1173: LD_VAR 0 1
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1212
// result := Insert ( result , 1 , array [ i ] ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_INT 1
1193: PPUSH
1194: LD_VAR 0 1
1198: PUSH
1199: LD_VAR 0 3
1203: ARRAY
1204: PPUSH
1205: CALL_OW 2
1209: ST_TO_ADDR
1210: GO 1178
1212: POP
1213: POP
// end ;
1214: LD_VAR 0 2
1218: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1219: LD_INT 0
1221: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1222: LD_VAR 0 1
1226: PPUSH
1227: LD_VAR 0 2
1231: PPUSH
1232: LD_VAR 0 3
1236: PPUSH
1237: LD_VAR 0 4
1241: PPUSH
1242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1246: LD_VAR 0 1
1250: PPUSH
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: CALL_OW 331
// end ;
1265: LD_VAR 0 5
1269: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1270: LD_INT 0
1272: PPUSH
// if not units then
1273: LD_VAR 0 1
1277: NOT
1278: IFFALSE 1282
// exit ;
1280: GO 1365
// result := true ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 1
1289: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 26
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: LD_VAR 0 2
1318: PPUSH
1319: CALL_OW 88
1323: NOT
1324: IFFALSE 1365
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1326: LD_ADDR_VAR 0 4
1330: PUSH
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 26
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 72
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 88
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 4
1369: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
// if not group then
1374: LD_VAR 0 2
1378: NOT
1379: IFFALSE 1383
// exit ;
1381: GO 1428
// for i in group do
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: LD_VAR 0 2
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1426
// if See ( side , i ) then
1396: LD_VAR 0 1
1400: PPUSH
1401: LD_VAR 0 4
1405: PPUSH
1406: CALL_OW 292
1410: IFFALSE 1424
// begin result := true ;
1412: LD_ADDR_VAR 0 3
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// exit ;
1420: POP
1421: POP
1422: GO 1428
// end ;
1424: GO 1393
1426: POP
1427: POP
// end ; end_of_file
1428: LD_VAR 0 3
1432: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1433: LD_INT 0
1435: PPUSH
1436: PPUSH
// uc_side := 2 ;
1437: LD_ADDR_OWVAR 20
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// uc_nation := 2 ;
1445: LD_ADDR_OWVAR 21
1449: PUSH
1450: LD_INT 2
1452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Heike
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 31095 0 3
1476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 24
1481: PUSH
1482: LD_STRING Ibrahim
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 31095 0 3
1500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 22
1505: PUSH
1506: LD_STRING Givi
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 31095 0 3
1524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 25
1529: PUSH
1530: LD_STRING Kamil
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 31095 0 3
1548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 26
1553: PUSH
1554: LD_STRING Kaia
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 31095 0 3
1572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 27
1577: PUSH
1578: LD_STRING Sophia
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 31095 0 3
1596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 28
1601: PUSH
1602: LD_STRING Markov
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 31095 0 3
1620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1621: LD_ADDR_EXP 33
1625: PUSH
1626: LD_STRING Aviradze
1628: PPUSH
1629: LD_EXP 1
1633: NOT
1634: PPUSH
1635: LD_EXP 2
1639: PPUSH
1640: CALL 31095 0 3
1644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1645: LD_ADDR_EXP 32
1649: PUSH
1650: LD_STRING Kurt
1652: PPUSH
1653: LD_EXP 1
1657: NOT
1658: PPUSH
1659: LD_EXP 2
1663: PPUSH
1664: CALL 31095 0 3
1668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1669: LD_ADDR_EXP 23
1673: PUSH
1674: LD_STRING Mike
1676: PPUSH
1677: LD_EXP 1
1681: NOT
1682: PPUSH
1683: LD_EXP 2
1687: PPUSH
1688: CALL 31095 0 3
1692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1693: LD_ADDR_EXP 30
1697: PUSH
1698: LD_STRING Olaf
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: LD_STRING 
1706: PPUSH
1707: CALL 31095 0 3
1711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1712: LD_ADDR_EXP 34
1716: PUSH
1717: LD_STRING 04_2_others
1719: PPUSH
1720: CALL_OW 31
1724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1725: LD_ADDR_EXP 36
1729: PUSH
1730: LD_STRING 04_2_apes
1732: PPUSH
1733: CALL_OW 31
1737: ST_TO_ADDR
// if hasFlamethrower then
1738: LD_EXP 3
1742: IFFALSE 1973
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1744: LD_INT 70
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_INT 13
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: LD_INT 27
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 1000
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 13
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: LD_INT 25
1810: PUSH
1811: LD_INT 2
1813: PUSH
1814: LD_INT 1000
1816: PUSH
1817: LD_INT 0
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 13
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 26
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1000
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 13
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 1
1881: PUSH
1882: LD_INT 27
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1000
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 60
1933: PUSH
1934: LD_INT 40
1936: PUSH
1937: LD_INT 20
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_OWVAR 67
1949: ARRAY
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// end else
1971: GO 2187
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1973: LD_ADDR_EXP 35
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 25
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 1000
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 27
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: LD_INT 1000
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 13
2054: PUSH
2055: LD_INT 1
2057: PUSH
2058: LD_INT 1
2060: PUSH
2061: LD_INT 24
2063: PUSH
2064: LD_INT 2
2066: PUSH
2067: LD_INT 1000
2069: PUSH
2070: LD_INT 0
2072: PUSH
2073: LD_INT 0
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 13
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 1
2097: PUSH
2098: LD_INT 27
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: LD_INT 1000
2106: PUSH
2107: LD_INT 0
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 13
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 32
2137: PUSH
2138: LD_INT 2
2140: PUSH
2141: LD_INT 1000
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 50
2149: PUSH
2150: LD_INT 30
2152: PUSH
2153: LD_INT 20
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: LD_OWVAR 67
2165: ARRAY
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// end ; uc_side := 5 ;
2187: LD_ADDR_OWVAR 20
2191: PUSH
2192: LD_INT 5
2194: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2195: LD_ADDR_EXP 29
2199: PUSH
2200: LD_STRING Abdul
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: LD_STRING 
2208: PPUSH
2209: CALL 31095 0 3
2213: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2214: LD_ADDR_EXP 31
2218: PUSH
2219: LD_STRING Omar
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: LD_STRING 
2227: PPUSH
2228: CALL 31095 0 3
2232: ST_TO_ADDR
// end ;
2233: LD_VAR 0 1
2237: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2238: LD_INT 0
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
// pfx := 04_1_ ;
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: LD_STRING 04_1_
2252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2253: LD_INT 35
2255: PPUSH
2256: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 2
2265: PPUSH
2266: CALL_OW 428
2270: NOT
2271: IFFALSE 2253
// tmp := [ ] ;
2273: LD_ADDR_VAR 0 4
2277: PUSH
2278: EMPTY
2279: ST_TO_ADDR
// uc_side := 5 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 5
2287: ST_TO_ADDR
// uc_nation := 2 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2296: LD_ADDR_EXP 33
2300: PUSH
2301: LD_STRING Aviradze_L
2303: PPUSH
2304: LD_EXP 1
2308: NOT
2309: PPUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL 31095 0 3
2319: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 14
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2347: LD_EXP 33
2351: PPUSH
2352: LD_INT 8
2354: PPUSH
2355: LD_INT 6
2357: PPUSH
2358: CALL_OW 111
// AddComHold ( Aviradze ) ;
2362: LD_EXP 33
2366: PPUSH
2367: CALL_OW 200
// tmp := [ Aviradze ] ;
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: LD_EXP 33
2380: PUSH
2381: EMPTY
2382: LIST
2383: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2384: LD_INT 70
2386: PPUSH
2387: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2391: LD_STRING Ibrahim_L
2393: PPUSH
2394: LD_EXP 1
2398: NOT
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL 31095 0 3
2409: IFFALSE 2509
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2411: LD_ADDR_EXP 24
2415: PUSH
2416: LD_STRING Ibrahim_L
2418: PPUSH
2419: LD_EXP 1
2423: NOT
2424: PPUSH
2425: LD_VAR 0 2
2429: PPUSH
2430: CALL 31095 0 3
2434: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 14
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2462: LD_EXP 24
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: LD_INT 7
2472: PPUSH
2473: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2477: LD_EXP 24
2481: PPUSH
2482: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2486: LD_ADDR_VAR 0 4
2490: PUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_EXP 24
2500: ADD
2501: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2502: LD_INT 70
2504: PPUSH
2505: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2509: LD_STRING Kaia_L
2511: PPUSH
2512: LD_EXP 1
2516: NOT
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL 31095 0 3
2527: IFFALSE 2627
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2529: LD_ADDR_EXP 26
2533: PUSH
2534: LD_STRING Kaia_L
2536: PPUSH
2537: LD_EXP 1
2541: NOT
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL 31095 0 3
2552: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 14
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2580: LD_EXP 26
2584: PPUSH
2585: LD_INT 8
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 111
// AddComHold ( Kaia ) ;
2595: LD_EXP 26
2599: PPUSH
2600: CALL_OW 200
// tmp := tmp ^ Kaia ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: LD_VAR 0 4
2613: PUSH
2614: LD_EXP 26
2618: ADD
2619: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2620: LD_INT 70
2622: PPUSH
2623: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2627: LD_STRING Kamil_L
2629: PPUSH
2630: LD_EXP 1
2634: NOT
2635: PPUSH
2636: LD_VAR 0 2
2640: PPUSH
2641: CALL 31095 0 3
2645: IFFALSE 2745
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2647: LD_ADDR_EXP 25
2651: PUSH
2652: LD_STRING Kamil_L
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL 31095 0 3
2670: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 14
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2698: LD_EXP 25
2702: PPUSH
2703: LD_INT 8
2705: PPUSH
2706: LD_INT 7
2708: PPUSH
2709: CALL_OW 111
// AddComHold ( Kamil ) ;
2713: LD_EXP 25
2717: PPUSH
2718: CALL_OW 200
// tmp := tmp ^ Kamil ;
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_EXP 25
2736: ADD
2737: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2738: LD_INT 70
2740: PPUSH
2741: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2745: LD_STRING Sophia_L
2747: PPUSH
2748: LD_EXP 1
2752: NOT
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: CALL 31095 0 3
2763: IFFALSE 2863
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2765: LD_ADDR_EXP 27
2769: PUSH
2770: LD_STRING Sophia_L
2772: PPUSH
2773: LD_EXP 1
2777: NOT
2778: PPUSH
2779: LD_VAR 0 2
2783: PPUSH
2784: CALL 31095 0 3
2788: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 14
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2816: LD_EXP 27
2820: PPUSH
2821: LD_INT 9
2823: PPUSH
2824: LD_INT 6
2826: PPUSH
2827: CALL_OW 111
// AddComHold ( Sophia ) ;
2831: LD_EXP 27
2835: PPUSH
2836: CALL_OW 200
// tmp := tmp ^ Sophia ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_VAR 0 4
2849: PUSH
2850: LD_EXP 27
2854: ADD
2855: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2856: LD_INT 70
2858: PPUSH
2859: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_STRING 04_1_others_L
2870: PPUSH
2871: CALL_OW 31
2875: ST_TO_ADDR
// if tmp2 then
2876: LD_VAR 0 5
2880: IFFALSE 2977
// for i in tmp2 do
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: FOR_IN
2893: IFFALSE 2975
// begin SetDir ( i , 2 ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 14
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2922: LD_ADDR_EXP 34
2926: PUSH
2927: LD_EXP 34
2931: PPUSH
2932: LD_EXP 34
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: CALL_OW 1
2950: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 17
2958: PPUSH
2959: LD_INT 14
2961: PPUSH
2962: CALL_OW 111
// wait ( 0 0$2 ) ;
2966: LD_INT 70
2968: PPUSH
2969: CALL_OW 67
// end ;
2973: GO 2892
2975: POP
2976: POP
// for i in tmp union tmp2 do
2977: LD_ADDR_VAR 0 3
2981: PUSH
2982: LD_VAR 0 4
2986: PUSH
2987: LD_VAR 0 5
2991: UNION
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3024
// begin SetSide ( i , 2 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_EXP 21
3017: PPUSH
3018: CALL_OW 112
// end ;
3022: GO 2993
3024: POP
3025: POP
// end ; end_of_file
3026: LD_VAR 0 1
3030: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
// uc_side := 3 ;
3036: LD_ADDR_OWVAR 20
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// uc_nation := 3 ;
3044: LD_ADDR_OWVAR 21
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3052: LD_ADDR_EXP 37
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3059: LD_ADDR_EXP 38
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3066: LD_ADDR_EXP 41
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3222
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3089: LD_INT 0
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 4
3100: PUSH
3101: LD_INT 5
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: PUSH
3109: LD_OWVAR 67
3113: ARRAY
3114: PPUSH
3115: CALL_OW 380
// un := CreateHuman ;
3119: LD_ADDR_VAR 0 3
3123: PUSH
3124: CALL_OW 44
3128: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3129: LD_ADDR_EXP 37
3133: PUSH
3134: LD_EXP 37
3138: PPUSH
3139: LD_EXP 37
3143: PUSH
3144: LD_INT 1
3146: PLUS
3147: PPUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: CALL_OW 1
3157: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3158: LD_VAR 0 3
3162: PPUSH
3163: LD_INT 100
3165: PPUSH
3166: LD_INT 63
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 97
3186: PPUSH
3187: LD_INT 64
3189: PPUSH
3190: CALL_OW 428
3194: PUSH
3195: LD_INT 98
3197: PPUSH
3198: LD_INT 58
3200: PPUSH
3201: CALL_OW 428
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_VAR 0 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ;
3220: GO 3086
3222: POP
3223: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3224: LD_INT 51
3226: PPUSH
3227: LD_INT 77
3229: PPUSH
3230: CALL_OW 428
3234: PPUSH
3235: CALL_OW 274
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 120
3245: PPUSH
3246: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3250: LD_INT 10
3252: PPUSH
3253: CALL_OW 274
3257: PPUSH
3258: LD_INT 2
3260: PPUSH
3261: LD_INT 300
3263: PPUSH
3264: CALL_OW 277
// for i := 1 to 2 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 2
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3396
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3284: LD_INT 0
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 3
3292: PUSH
3293: LD_INT 4
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 380
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3324: LD_ADDR_EXP 38
3328: PUSH
3329: LD_EXP 38
3333: PPUSH
3334: LD_EXP 38
3338: PUSH
3339: LD_INT 1
3341: PLUS
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: CALL_OW 1
3352: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3353: LD_VAR 0 3
3357: PPUSH
3358: LD_INT 198
3360: PPUSH
3361: LD_INT 106
3363: PPUSH
3364: CALL_OW 428
3368: PUSH
3369: LD_INT 205
3371: PPUSH
3372: LD_INT 114
3374: PPUSH
3375: CALL_OW 428
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_VAR 0 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 52
// end ;
3394: GO 3281
3396: POP
3397: POP
// for i := 1 to 2 do
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 2
3410: PUSH
3411: FOR_TO
3412: IFFALSE 3489
// begin PrepareHuman ( false , 2 , 3 ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 2
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL_OW 380
// un := CreateHuman ;
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: CALL_OW 44
3436: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3437: LD_ADDR_EXP 38
3441: PUSH
3442: LD_EXP 38
3446: PPUSH
3447: LD_EXP 38
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 1
3465: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3466: LD_VAR 0 3
3470: PPUSH
3471: LD_INT 204
3473: PPUSH
3474: LD_INT 108
3476: PPUSH
3477: LD_INT 2
3479: PPUSH
3480: LD_INT 0
3482: PPUSH
3483: CALL_OW 50
// end ;
3487: GO 3411
3489: POP
3490: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 4
3503: PUSH
3504: LD_INT 5
3506: PUSH
3507: LD_INT 6
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_OWVAR 67
3519: ARRAY
3520: PUSH
3521: FOR_TO
3522: IFFALSE 3643
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 4
3538: PUSH
3539: LD_INT 1
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 5
3554: PPUSH
3555: CALL_OW 12
3559: ARRAY
3560: PPUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: LD_OWVAR 67
3579: ARRAY
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3595: LD_VAR 0 3
3599: PPUSH
3600: LD_INT 11
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 66318 0 3
3610: IFFALSE 3641
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3612: LD_ADDR_EXP 39
3616: PUSH
3617: LD_EXP 39
3621: PPUSH
3622: LD_EXP 39
3626: PUSH
3627: LD_INT 1
3629: PLUS
3630: PPUSH
3631: LD_VAR 0 3
3635: PPUSH
3636: CALL_OW 1
3640: ST_TO_ADDR
// end ;
3641: GO 3521
3643: POP
3644: POP
// for i := 1 to 3 do
3645: LD_ADDR_VAR 0 2
3649: PUSH
3650: DOUBLE
3651: LD_INT 1
3653: DEC
3654: ST_TO_ADDR
3655: LD_INT 3
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3749
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 4
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_OWVAR 67
3685: ARRAY
3686: PPUSH
3687: CALL_OW 380
// un := CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 11
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL 66318 0 3
3716: IFFALSE 3747
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3718: LD_ADDR_EXP 39
3722: PUSH
3723: LD_EXP 39
3727: PPUSH
3728: LD_EXP 39
3732: PUSH
3733: LD_INT 1
3735: PLUS
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL_OW 1
3746: ST_TO_ADDR
// end ;
3747: GO 3658
3749: POP
3750: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3751: LD_ADDR_VAR 0 2
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 5
3763: PUSH
3764: LD_INT 6
3766: PUSH
3767: LD_INT 7
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3903
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: CALL_OW 12
3819: ARRAY
3820: PPUSH
3821: LD_INT 3
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 5
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: LD_OWVAR 67
3839: ARRAY
3840: PPUSH
3841: CALL_OW 380
// un := CreateHuman ;
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: CALL_OW 44
3854: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3855: LD_VAR 0 3
3859: PPUSH
3860: LD_INT 15
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL 66318 0 3
3870: IFFALSE 3901
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3872: LD_ADDR_EXP 40
3876: PUSH
3877: LD_EXP 40
3881: PPUSH
3882: LD_EXP 40
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// end ;
3901: GO 3781
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
// uc_side := 3 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// uc_nation := 3 ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// for i := 1 to 6 do
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: DOUBLE
3937: LD_INT 1
3939: DEC
3940: ST_TO_ADDR
3941: LD_INT 6
3943: PUSH
3944: FOR_TO
3945: IFFALSE 4024
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 1
3952: PUSH
3953: LD_INT 4
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 1
3962: PPUSH
3963: LD_INT 2
3965: PPUSH
3966: CALL_OW 12
3970: ARRAY
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL_OW 380
// un := CreateHuman ;
3979: LD_ADDR_VAR 0 3
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 54
3996: PPUSH
3997: LD_INT 88
3999: PPUSH
4000: LD_INT 12
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 50
// SetLives ( un , 1 ) ;
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_INT 1
4017: PPUSH
4018: CALL_OW 234
// end ;
4022: GO 3944
4024: POP
4025: POP
// uc_side := 3 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 3
4033: ST_TO_ADDR
// uc_nation := 0 ;
4034: LD_ADDR_OWVAR 21
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4042: LD_ADDR_EXP 42
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// apeEngGroup := [ ] ;
4049: LD_ADDR_EXP 43
4053: PUSH
4054: EMPTY
4055: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 4
4068: PUSH
4069: LD_INT 5
4071: PUSH
4072: LD_INT 6
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_OWVAR 67
4084: ARRAY
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4201
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PUSH
4098: LD_INT 4
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_OWVAR 67
4113: ARRAY
4114: PPUSH
4115: CALL_OW 380
// un := CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4129: LD_ADDR_EXP 42
4133: PUSH
4134: LD_EXP 42
4138: PPUSH
4139: LD_EXP 42
4143: PUSH
4144: LD_INT 1
4146: PLUS
4147: PPUSH
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 1
4157: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4158: LD_VAR 0 3
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: LD_INT 5
4168: PPUSH
4169: CALL_OW 12
4173: PPUSH
4174: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 56
4185: PPUSH
4186: LD_INT 82
4188: PPUSH
4189: LD_INT 6
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 50
// end ;
4199: GO 4086
4201: POP
4202: POP
// for i := 1 to 2 do
4203: LD_ADDR_VAR 0 2
4207: PUSH
4208: DOUBLE
4209: LD_INT 1
4211: DEC
4212: ST_TO_ADDR
4213: LD_INT 2
4215: PUSH
4216: FOR_TO
4217: IFFALSE 4293
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4219: LD_INT 0
4221: PPUSH
4222: LD_INT 16
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: CALL_OW 380
// un := CreateHuman ;
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: CALL_OW 44
4241: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4242: LD_ADDR_EXP 43
4246: PUSH
4247: LD_EXP 43
4251: PPUSH
4252: LD_EXP 43
4256: PUSH
4257: LD_INT 1
4259: PLUS
4260: PPUSH
4261: LD_VAR 0 3
4265: PPUSH
4266: CALL_OW 1
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 51
4278: PPUSH
4279: LD_INT 77
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 52
// end ;
4291: GO 4216
4293: POP
4294: POP
// end ;
4295: LD_VAR 0 1
4299: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4300: LD_EXP 42
4304: PPUSH
4305: LD_INT 3
4307: PUSH
4308: LD_INT 24
4310: PUSH
4311: LD_INT 600
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: EMPTY
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 72
4343: PUSH
4344: LD_INT 66
4346: PPUSH
4347: LD_INT 89
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 302
4359: AND
4360: IFFALSE 4445
4362: GO 4364
4364: DISABLE
4365: LD_INT 0
4367: PPUSH
// begin enable ;
4368: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_EXP 42
4378: PPUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 24
4384: PUSH
4385: LD_INT 600
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: LD_INT 54
4401: PUSH
4402: EMPTY
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PPUSH
4413: CALL_OW 72
4417: PUSH
4418: FOR_IN
4419: IFFALSE 4443
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4421: LD_VAR 0 1
4425: PPUSH
4426: LD_INT 66
4428: PPUSH
4429: LD_INT 89
4431: PPUSH
4432: CALL_OW 428
4436: PPUSH
4437: CALL_OW 120
4441: GO 4418
4443: POP
4444: POP
// end ;
4445: PPOPN 1
4447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4448: LD_INT 22
4450: PUSH
4451: LD_INT 2
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 92
4460: PUSH
4461: LD_INT 54
4463: PUSH
4464: LD_INT 77
4466: PUSH
4467: LD_INT 8
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: IFFALSE 4548
4486: GO 4488
4488: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4489: LD_EXP 43
4493: PPUSH
4494: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4498: LD_EXP 43
4502: PPUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 92
4515: PUSH
4516: LD_INT 54
4518: PUSH
4519: LD_INT 77
4521: PUSH
4522: LD_INT 8
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PPUSH
4535: CALL_OW 69
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 175
// end ;
4548: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4560: LD_ADDR_VAR 0 3
4564: PUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 3
4570: PPUSH
4571: CALL_OW 12
4575: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4576: LD_ADDR_VAR 0 5
4580: PUSH
4581: LD_INT 16
4583: PUSH
4584: LD_INT 17
4586: PUSH
4587: LD_INT 19
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_VAR 0 3
4599: ARRAY
4600: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4601: LD_ADDR_VAR 0 7
4605: PUSH
4606: LD_INT 159
4608: PUSH
4609: LD_INT 25
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 137
4618: PUSH
4619: LD_INT 37
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 123
4628: PUSH
4629: LD_INT 55
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 115
4638: PUSH
4639: LD_INT 71
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 106
4648: PUSH
4649: LD_INT 88
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 97
4658: PUSH
4659: LD_INT 114
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 75
4668: PUSH
4669: LD_INT 146
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 206
4687: PUSH
4688: LD_INT 135
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 184
4697: PUSH
4698: LD_INT 111
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 154
4707: PUSH
4708: LD_INT 97
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 122
4717: PUSH
4718: LD_INT 80
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 109
4727: PUSH
4728: LD_INT 78
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 97
4737: PUSH
4738: LD_INT 113
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 75
4747: PUSH
4748: LD_INT 147
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 185
4766: PUSH
4767: LD_INT 72
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 171
4776: PUSH
4777: LD_INT 83
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 161
4786: PUSH
4787: LD_INT 99
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 125
4796: PUSH
4797: LD_INT 82
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 105
4806: PUSH
4807: LD_INT 90
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 96
4816: PUSH
4817: LD_INT 116
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 75
4826: PUSH
4827: LD_INT 147
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_VAR 0 3
4852: ARRAY
4853: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4854: LD_ADDR_VAR 0 4
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 5
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 3
4877: ARRAY
4878: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4879: LD_ADDR_VAR 0 6
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 20
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_VAR 0 3
4902: ARRAY
4903: ST_TO_ADDR
// for i := 1 to 2 do
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: DOUBLE
4910: LD_INT 1
4912: DEC
4913: ST_TO_ADDR
4914: LD_INT 2
4916: PUSH
4917: FOR_TO
4918: IFFALSE 4936
// EraseResourceArea ( i , outerSpawnArea ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_VAR 0 6
4929: PPUSH
4930: CALL_OW 286
4934: GO 4917
4936: POP
4937: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4938: LD_VAR 0 6
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 21
4968: PUSH
4969: LD_INT 3
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 70
4986: IFFALSE 5201
// repeat wait ( 0 0$1 ) ;
4988: LD_INT 35
4990: PPUSH
4991: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4995: LD_VAR 0 6
4999: PPUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 21
5005: PUSH
5006: LD_INT 2
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5093
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: PPUSH
5072: CALL_OW 70
5076: PUSH
5077: FOR_IN
5078: IFFALSE 5091
// RemoveUnit ( i ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: CALL_OW 64
5089: GO 5077
5091: POP
5092: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 21
5100: PUSH
5101: LD_INT 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 6
5123: PPUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL_OW 70
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5159
// ComMoveXY ( i , 113 , 53 ) ;
5142: LD_VAR 0 2
5146: PPUSH
5147: LD_INT 113
5149: PPUSH
5150: LD_INT 53
5152: PPUSH
5153: CALL_OW 111
5157: GO 5139
5159: POP
5160: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 2
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 70
5198: NOT
5199: IFFALSE 4988
// case convoyCounter of 1 .. 3 :
5201: LD_EXP 16
5205: PUSH
5206: LD_INT 1
5208: DOUBLE
5209: GREATEREQUAL
5210: IFFALSE 5218
5212: LD_INT 3
5214: DOUBLE
5215: LESSEQUAL
5216: IFTRUE 5220
5218: GO 5815
5220: POP
// begin uc_side := 3 ;
5221: LD_ADDR_OWVAR 20
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// uc_nation := 3 ;
5229: LD_ADDR_OWVAR 21
5233: PUSH
5234: LD_INT 3
5236: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_INT 5
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 7
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: LD_OWVAR 67
5265: ARRAY
5266: PUSH
5267: LD_EXP 16
5271: MINUS
5272: PUSH
5273: FOR_TO
5274: IFFALSE 5461
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5276: LD_INT 0
5278: PPUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: LD_INT 4
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: PPUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: LD_INT 6
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_OWVAR 67
5327: ARRAY
5328: PPUSH
5329: CALL_OW 380
// un := CreateHuman ;
5333: LD_ADDR_VAR 0 8
5337: PUSH
5338: CALL_OW 44
5342: ST_TO_ADDR
// SetDir ( un , dir ) ;
5343: LD_VAR 0 8
5347: PPUSH
5348: LD_VAR 0 4
5352: PPUSH
5353: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5357: LD_VAR 0 8
5361: PPUSH
5362: LD_VAR 0 5
5366: PPUSH
5367: LD_INT 0
5369: PPUSH
5370: CALL 66318 0 3
5374: IFFALSE 5459
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5376: LD_ADDR_EXP 41
5380: PUSH
5381: LD_EXP 41
5385: PPUSH
5386: LD_EXP 41
5390: PUSH
5391: LD_INT 1
5393: PLUS
5394: PPUSH
5395: LD_VAR 0 8
5399: PPUSH
5400: CALL_OW 1
5404: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5405: LD_VAR 0 8
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5417: LD_VAR 0 8
5421: PPUSH
5422: LD_VAR 0 7
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: LD_VAR 0 7
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PUSH
5444: LD_INT 2
5446: ARRAY
5447: PPUSH
5448: CALL_OW 111
// wait ( 0 0$2 ) ;
5452: LD_INT 70
5454: PPUSH
5455: CALL_OW 67
// end ; end ;
5459: GO 5273
5461: POP
5462: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: DOUBLE
5469: LD_INT 1
5471: DEC
5472: ST_TO_ADDR
5473: LD_INT 3
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: LD_OWVAR 67
5491: ARRAY
5492: PUSH
5493: FOR_TO
5494: IFFALSE 5811
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5496: LD_INT 3
5498: PPUSH
5499: LD_INT 3
5501: PPUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 22
5507: PUSH
5508: LD_INT 23
5510: PUSH
5511: LD_INT 24
5513: PUSH
5514: LD_INT 24
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_OWVAR 67
5528: PPUSH
5529: LD_OWVAR 67
5533: PUSH
5534: LD_INT 2
5536: PLUS
5537: PPUSH
5538: CALL_OW 12
5542: ARRAY
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 42
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 43
5558: PUSH
5559: LD_INT 44
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 1
5574: PPUSH
5575: LD_OWVAR 67
5579: PUSH
5580: LD_INT 2
5582: PLUS
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: PPUSH
5590: LD_INT 90
5592: PPUSH
5593: CALL 435 0 7
// un := CreateVehicle ;
5597: LD_ADDR_VAR 0 8
5601: PUSH
5602: CALL_OW 45
5606: ST_TO_ADDR
// SetDir ( un , dir ) ;
5607: LD_VAR 0 8
5611: PPUSH
5612: LD_VAR 0 4
5616: PPUSH
5617: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5621: LD_VAR 0 8
5625: PPUSH
5626: LD_VAR 0 5
5630: PPUSH
5631: LD_INT 0
5633: PPUSH
5634: CALL 66318 0 3
5638: IFFALSE 5809
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5640: LD_ADDR_EXP 41
5644: PUSH
5645: LD_EXP 41
5649: PPUSH
5650: LD_EXP 41
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: PPUSH
5659: LD_VAR 0 8
5663: PPUSH
5664: CALL_OW 1
5668: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: LD_INT 5
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PUSH
5686: LD_OWVAR 67
5690: ARRAY
5691: PPUSH
5692: CALL_OW 383
// un := CreateHuman ;
5696: LD_ADDR_VAR 0 8
5700: PUSH
5701: CALL_OW 44
5705: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5706: LD_VAR 0 8
5710: PPUSH
5711: LD_EXP 41
5715: PUSH
5716: LD_EXP 41
5720: ARRAY
5721: PPUSH
5722: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5726: LD_ADDR_EXP 41
5730: PUSH
5731: LD_EXP 41
5735: PPUSH
5736: LD_EXP 41
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_VAR 0 8
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5755: LD_VAR 0 8
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5767: LD_VAR 0 8
5771: PPUSH
5772: LD_VAR 0 7
5776: PUSH
5777: LD_INT 1
5779: ARRAY
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PPUSH
5785: LD_VAR 0 7
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 2
5796: ARRAY
5797: PPUSH
5798: CALL_OW 111
// wait ( 0 0$3 ) ;
5802: LD_INT 105
5804: PPUSH
5805: CALL_OW 67
// end ; end ;
5809: GO 5493
5811: POP
5812: POP
// end ; 4 .. 7 :
5813: GO 6368
5815: LD_INT 4
5817: DOUBLE
5818: GREATEREQUAL
5819: IFFALSE 5827
5821: LD_INT 7
5823: DOUBLE
5824: LESSEQUAL
5825: IFTRUE 5829
5827: GO 6367
5829: POP
// begin uc_side := 3 ;
5830: LD_ADDR_OWVAR 20
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// uc_nation := 3 ;
5838: LD_ADDR_OWVAR 21
5842: PUSH
5843: LD_INT 3
5845: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5846: LD_ADDR_VAR 0 2
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_INT 2
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: LD_INT 4
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_OWVAR 67
5874: ARRAY
5875: PUSH
5876: FOR_TO
5877: IFFALSE 6037
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_OWVAR 67
5903: ARRAY
5904: PPUSH
5905: CALL_OW 380
// un := CreateHuman ;
5909: LD_ADDR_VAR 0 8
5913: PUSH
5914: CALL_OW 44
5918: ST_TO_ADDR
// SetDir ( un , dir ) ;
5919: LD_VAR 0 8
5923: PPUSH
5924: LD_VAR 0 4
5928: PPUSH
5929: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5933: LD_VAR 0 8
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_INT 0
5945: PPUSH
5946: CALL 66318 0 3
5950: IFFALSE 6035
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5952: LD_ADDR_EXP 41
5956: PUSH
5957: LD_EXP 41
5961: PPUSH
5962: LD_EXP 41
5966: PUSH
5967: LD_INT 1
5969: PLUS
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 1
5980: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5981: LD_VAR 0 8
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5993: LD_VAR 0 8
5997: PPUSH
5998: LD_VAR 0 7
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: PUSH
6007: LD_INT 1
6009: ARRAY
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PUSH
6020: LD_INT 2
6022: ARRAY
6023: PPUSH
6024: CALL_OW 111
// wait ( 0 0$2 ) ;
6028: LD_INT 70
6030: PPUSH
6031: CALL_OW 67
// end ; end ;
6035: GO 5876
6037: POP
6038: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6039: LD_ADDR_VAR 0 2
6043: PUSH
6044: DOUBLE
6045: LD_INT 1
6047: DEC
6048: ST_TO_ADDR
6049: LD_INT 2
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_OWVAR 67
6067: ARRAY
6068: PUSH
6069: FOR_TO
6070: IFFALSE 6363
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL_OW 12
6098: ARRAY
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: LD_INT 42
6108: PUSH
6109: LD_INT 44
6111: PUSH
6112: LD_INT 43
6114: PUSH
6115: LD_INT 44
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_OWVAR 67
6131: PUSH
6132: LD_INT 1
6134: PLUS
6135: PPUSH
6136: CALL_OW 12
6140: ARRAY
6141: PPUSH
6142: LD_INT 90
6144: PPUSH
6145: CALL 435 0 7
// un := CreateVehicle ;
6149: LD_ADDR_VAR 0 8
6153: PUSH
6154: CALL_OW 45
6158: ST_TO_ADDR
// SetDir ( un , dir ) ;
6159: LD_VAR 0 8
6163: PPUSH
6164: LD_VAR 0 4
6168: PPUSH
6169: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6173: LD_VAR 0 8
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL 66318 0 3
6190: IFFALSE 6361
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6192: LD_ADDR_EXP 41
6196: PUSH
6197: LD_EXP 41
6201: PPUSH
6202: LD_EXP 41
6206: PUSH
6207: LD_INT 1
6209: PLUS
6210: PPUSH
6211: LD_VAR 0 8
6215: PPUSH
6216: CALL_OW 1
6220: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6221: LD_INT 0
6223: PPUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PPUSH
6244: CALL_OW 383
// un := CreateHuman ;
6248: LD_ADDR_VAR 0 8
6252: PUSH
6253: CALL_OW 44
6257: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6258: LD_VAR 0 8
6262: PPUSH
6263: LD_EXP 41
6267: PUSH
6268: LD_EXP 41
6272: ARRAY
6273: PPUSH
6274: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6278: LD_ADDR_EXP 41
6282: PUSH
6283: LD_EXP 41
6287: PPUSH
6288: LD_EXP 41
6292: PUSH
6293: LD_INT 1
6295: PLUS
6296: PPUSH
6297: LD_VAR 0 8
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6307: LD_VAR 0 8
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 7
6328: PUSH
6329: LD_INT 1
6331: ARRAY
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_VAR 0 7
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PUSH
6346: LD_INT 2
6348: ARRAY
6349: PPUSH
6350: CALL_OW 111
// wait ( 0 0$2 ) ;
6354: LD_INT 70
6356: PPUSH
6357: CALL_OW 67
// end ; end ;
6361: GO 6069
6363: POP
6364: POP
// end ; end ;
6365: GO 6368
6367: POP
// repeat wait ( 0 0$1 ) ;
6368: LD_INT 35
6370: PPUSH
6371: CALL_OW 67
// for un in ruConvoySquad do
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_EXP 41
6384: PUSH
6385: FOR_IN
6386: IFFALSE 6890
// begin if IsInArea ( un , westSouthOutArea ) then
6388: LD_VAR 0 8
6392: PPUSH
6393: LD_INT 18
6395: PPUSH
6396: CALL_OW 308
6400: IFFALSE 6488
// begin if GetType ( un ) = unit_vehicle then
6402: LD_VAR 0 8
6406: PPUSH
6407: CALL_OW 247
6411: PUSH
6412: LD_INT 2
6414: EQUAL
6415: IFFALSE 6447
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6417: LD_ADDR_EXP 41
6421: PUSH
6422: LD_EXP 41
6426: PUSH
6427: LD_VAR 0 8
6431: PPUSH
6432: CALL_OW 311
6436: DIFF
6437: ST_TO_ADDR
// RemoveUnit ( un ) ;
6438: LD_VAR 0 8
6442: PPUSH
6443: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6447: LD_ADDR_EXP 15
6451: PUSH
6452: LD_EXP 15
6456: PUSH
6457: LD_INT 1
6459: PLUS
6460: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6461: LD_ADDR_EXP 41
6465: PUSH
6466: LD_EXP 41
6470: PUSH
6471: LD_VAR 0 8
6475: DIFF
6476: ST_TO_ADDR
// RemoveUnit ( un ) ;
6477: LD_VAR 0 8
6481: PPUSH
6482: CALL_OW 64
// break ;
6486: GO 6890
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6488: LD_VAR 0 8
6492: PPUSH
6493: CALL_OW 305
6497: NOT
6498: PUSH
6499: LD_VAR 0 8
6503: PPUSH
6504: CALL_OW 310
6508: NOT
6509: AND
6510: IFFALSE 6528
// ruConvoySquad := ruConvoySquad diff un ;
6512: LD_ADDR_EXP 41
6516: PUSH
6517: LD_EXP 41
6521: PUSH
6522: LD_VAR 0 8
6526: DIFF
6527: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6528: LD_VAR 0 8
6532: PPUSH
6533: CALL_OW 302
6537: PUSH
6538: LD_VAR 0 8
6542: PPUSH
6543: CALL_OW 314
6547: NOT
6548: AND
6549: IFFALSE 6888
// begin tag := GetTag ( un ) ;
6551: LD_ADDR_VAR 0 9
6555: PUSH
6556: LD_VAR 0 8
6560: PPUSH
6561: CALL_OW 110
6565: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6566: LD_VAR 0 8
6570: PPUSH
6571: LD_VAR 0 7
6575: PUSH
6576: LD_VAR 0 9
6580: PUSH
6581: LD_INT 1
6583: PLUS
6584: ARRAY
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: LD_VAR 0 7
6594: PUSH
6595: LD_VAR 0 9
6599: PUSH
6600: LD_INT 1
6602: PLUS
6603: ARRAY
6604: PUSH
6605: LD_INT 2
6607: ARRAY
6608: PPUSH
6609: CALL_OW 297
6613: PUSH
6614: LD_INT 6
6616: LESS
6617: IFFALSE 6728
// begin SetTag ( un , tag + 1 ) ;
6619: LD_VAR 0 8
6623: PPUSH
6624: LD_VAR 0 9
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: PPUSH
6633: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 247
6646: PUSH
6647: LD_INT 2
6649: EQUAL
6650: PUSH
6651: LD_VAR 0 8
6655: PPUSH
6656: CALL_OW 257
6660: PUSH
6661: LD_INT 3
6663: EQUAL
6664: OR
6665: IFFALSE 6726
// begin AddComWait ( un , 0 0$4 ) ;
6667: LD_VAR 0 8
6671: PPUSH
6672: LD_INT 140
6674: PPUSH
6675: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6679: LD_VAR 0 8
6683: PPUSH
6684: LD_VAR 0 7
6688: PUSH
6689: LD_VAR 0 9
6693: PUSH
6694: LD_INT 1
6696: PLUS
6697: ARRAY
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_VAR 0 7
6707: PUSH
6708: LD_VAR 0 9
6712: PUSH
6713: LD_INT 1
6715: PLUS
6716: ARRAY
6717: PUSH
6718: LD_INT 2
6720: ARRAY
6721: PPUSH
6722: CALL_OW 174
// end ; end else
6726: GO 6888
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6728: LD_VAR 0 8
6732: PPUSH
6733: CALL_OW 257
6737: PUSH
6738: LD_INT 4
6740: EQUAL
6741: PUSH
6742: LD_EXP 41
6746: PPUSH
6747: LD_INT 21
6749: PUSH
6750: LD_INT 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 3
6759: PUSH
6760: LD_INT 24
6762: PUSH
6763: LD_INT 1000
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PPUSH
6778: CALL_OW 72
6782: AND
6783: IFFALSE 6841
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6785: LD_VAR 0 8
6789: PPUSH
6790: LD_EXP 41
6794: PPUSH
6795: LD_INT 21
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: LD_INT 24
6810: PUSH
6811: LD_INT 1000
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 72
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: CALL_OW 128
6839: GO 6888
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6841: LD_VAR 0 8
6845: PPUSH
6846: LD_VAR 0 7
6850: PUSH
6851: LD_VAR 0 9
6855: PUSH
6856: LD_INT 1
6858: PLUS
6859: ARRAY
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: LD_VAR 0 7
6869: PUSH
6870: LD_VAR 0 9
6874: PUSH
6875: LD_INT 1
6877: PLUS
6878: ARRAY
6879: PUSH
6880: LD_INT 2
6882: ARRAY
6883: PPUSH
6884: CALL_OW 114
// end ; end ; end ;
6888: GO 6385
6890: POP
6891: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
6892: LD_EXP 41
6896: PPUSH
6897: LD_INT 52
6899: PUSH
6900: EMPTY
6901: LIST
6902: PUSH
6903: LD_INT 21
6905: PUSH
6906: LD_INT 1
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 72
6921: NOT
6922: IFFALSE 6368
// end ;
6924: LD_VAR 0 1
6928: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6929: LD_EXP 16
6933: PUSH
6934: LD_INT 3
6936: PPUSH
6937: LD_INT 5
6939: PPUSH
6940: CALL_OW 12
6944: LESS
6945: PUSH
6946: LD_EXP 41
6950: NOT
6951: AND
6952: PUSH
6953: LD_OWVAR 67
6957: PUSH
6958: LD_INT 1
6960: GREATER
6961: AND
6962: IFFALSE 7350
6964: GO 6966
6966: DISABLE
6967: LD_INT 0
6969: PPUSH
6970: PPUSH
6971: PPUSH
// begin uc_side := 3 ;
6972: LD_ADDR_OWVAR 20
6976: PUSH
6977: LD_INT 3
6979: ST_TO_ADDR
// uc_nation := 3 ;
6980: LD_ADDR_OWVAR 21
6984: PUSH
6985: LD_INT 3
6987: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6988: LD_ADDR_VAR 0 1
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 2
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: LD_INT 4
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: PUSH
7012: LD_OWVAR 67
7016: ARRAY
7017: PUSH
7018: FOR_TO
7019: IFFALSE 7271
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7021: LD_INT 3
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 24
7038: PUSH
7039: LD_INT 24
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: PPUSH
7054: LD_OWVAR 67
7058: PUSH
7059: LD_INT 2
7061: PLUS
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 42
7077: PUSH
7078: LD_INT 44
7080: PUSH
7081: LD_INT 43
7083: PUSH
7084: LD_INT 44
7086: PUSH
7087: LD_INT 46
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_OWVAR 67
7104: PUSH
7105: LD_INT 2
7107: PLUS
7108: PPUSH
7109: CALL_OW 12
7113: ARRAY
7114: PPUSH
7115: LD_INT 90
7117: PPUSH
7118: CALL 435 0 7
// un := CreateVehicle ;
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: CALL_OW 45
7131: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 0
7139: PPUSH
7140: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7144: LD_VAR 0 3
7148: PPUSH
7149: LD_INT 23
7151: PPUSH
7152: LD_INT 0
7154: PPUSH
7155: CALL 66318 0 3
7159: IFFALSE 7269
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7161: LD_ADDR_VAR 0 2
7165: PUSH
7166: LD_VAR 0 2
7170: PPUSH
7171: LD_VAR 0 2
7175: PUSH
7176: LD_INT 1
7178: PLUS
7179: PPUSH
7180: LD_VAR 0 3
7184: PPUSH
7185: CALL_OW 1
7189: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7190: LD_INT 0
7192: PPUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 4
7198: PUSH
7199: LD_INT 5
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: LD_OWVAR 67
7211: ARRAY
7212: PPUSH
7213: CALL_OW 383
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_VAR 0 2
7236: PUSH
7237: LD_VAR 0 2
7241: ARRAY
7242: PPUSH
7243: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7247: LD_VAR 0 3
7251: PPUSH
7252: LD_INT 80
7254: PPUSH
7255: LD_INT 139
7257: PPUSH
7258: CALL_OW 111
// wait ( 0 0$3 ) ;
7262: LD_INT 105
7264: PPUSH
7265: CALL_OW 67
// end ; end ;
7269: GO 7018
7271: POP
7272: POP
// for i in tmp do
7273: LD_ADDR_VAR 0 1
7277: PUSH
7278: LD_VAR 0 2
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7348
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7286: LD_VAR 0 1
7290: PPUSH
7291: LD_INT 101
7293: PPUSH
7294: LD_INT 102
7296: PPUSH
7297: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7301: LD_VAR 0 1
7305: PPUSH
7306: LD_INT 110
7308: PPUSH
7309: LD_INT 78
7311: PPUSH
7312: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 75
7323: PPUSH
7324: LD_INT 101
7326: PPUSH
7327: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: LD_INT 57
7338: PPUSH
7339: LD_INT 83
7341: PPUSH
7342: CALL_OW 174
// end ;
7346: GO 7283
7348: POP
7349: POP
// end ; end_of_file
7350: PPOPN 3
7352: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7353: LD_VAR 0 1
7357: PUSH
7358: LD_EXP 21
7362: EQUAL
7363: IFFALSE 7372
// YouLost ( Heike ) ;
7365: LD_STRING Heike
7367: PPUSH
7368: CALL_OW 104
// if un in apeSoldGroup then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 42
7381: IN
7382: IFFALSE 7400
// apeSoldGroup := apeSoldGroup diff un ;
7384: LD_ADDR_EXP 42
7388: PUSH
7389: LD_EXP 42
7393: PUSH
7394: LD_VAR 0 1
7398: DIFF
7399: ST_TO_ADDR
// if un in apeEngGroup then
7400: LD_VAR 0 1
7404: PUSH
7405: LD_EXP 43
7409: IN
7410: IFFALSE 7428
// apeEngGroup := apeEngGroup diff un ;
7412: LD_ADDR_EXP 43
7416: PUSH
7417: LD_EXP 43
7421: PUSH
7422: LD_VAR 0 1
7426: DIFF
7427: ST_TO_ADDR
// if un in oilBaseGuard then
7428: LD_VAR 0 1
7432: PUSH
7433: LD_EXP 38
7437: IN
7438: IFFALSE 7456
// oilBaseGuard := oilBaseGuard diff un ;
7440: LD_ADDR_EXP 38
7444: PUSH
7445: LD_EXP 38
7449: PUSH
7450: LD_VAR 0 1
7454: DIFF
7455: ST_TO_ADDR
// if un in ruNorthGroup then
7456: LD_VAR 0 1
7460: PUSH
7461: LD_EXP 39
7465: IN
7466: IFFALSE 7484
// ruNorthGroup := ruNorthGroup diff un ;
7468: LD_ADDR_EXP 39
7472: PUSH
7473: LD_EXP 39
7477: PUSH
7478: LD_VAR 0 1
7482: DIFF
7483: ST_TO_ADDR
// if un in ruSouthGroup then
7484: LD_VAR 0 1
7488: PUSH
7489: LD_EXP 40
7493: IN
7494: IFFALSE 7512
// ruSouthGroup := ruSouthGroup diff un ;
7496: LD_ADDR_EXP 40
7500: PUSH
7501: LD_EXP 40
7505: PUSH
7506: LD_VAR 0 1
7510: DIFF
7511: ST_TO_ADDR
// if un in ruConvoySquad then
7512: LD_VAR 0 1
7516: PUSH
7517: LD_EXP 41
7521: IN
7522: IFFALSE 7540
// ruConvoySquad := ruConvoySquad diff un ;
7524: LD_ADDR_EXP 41
7528: PUSH
7529: LD_EXP 41
7533: PUSH
7534: LD_VAR 0 1
7538: DIFF
7539: ST_TO_ADDR
// end ;
7540: PPOPN 1
7542: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7543: LD_VAR 0 1
7547: PPUSH
7548: CALL_OW 264
7552: PUSH
7553: LD_INT 30
7555: EQUAL
7556: IFFALSE 7566
// radarConstructed := true ;
7558: LD_ADDR_EXP 13
7562: PUSH
7563: LD_INT 1
7565: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 264
7575: PUSH
7576: LD_INT 26
7578: EQUAL
7579: IFFALSE 7589
// flamethrowerBuilt := true ;
7581: LD_ADDR_EXP 20
7585: PUSH
7586: LD_INT 1
7588: ST_TO_ADDR
// end ;
7589: PPOPN 2
7591: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7592: LD_ADDR_EXP 18
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: LD_INT 1
7604: PLUS
7605: ST_TO_ADDR
// if oldId in ruConvoySquad then
7606: LD_VAR 0 2
7610: PUSH
7611: LD_EXP 41
7615: IN
7616: IFFALSE 7634
// ruConvoySquad := ruConvoySquad diff oldId ;
7618: LD_ADDR_EXP 41
7622: PUSH
7623: LD_EXP 41
7627: PUSH
7628: LD_VAR 0 2
7632: DIFF
7633: ST_TO_ADDR
// if newId in ruConvoySquad then
7634: LD_VAR 0 1
7638: PUSH
7639: LD_EXP 41
7643: IN
7644: IFFALSE 7662
// ruConvoySquad := ruConvoySquad diff newId ;
7646: LD_ADDR_EXP 41
7650: PUSH
7651: LD_EXP 41
7655: PUSH
7656: LD_VAR 0 1
7660: DIFF
7661: ST_TO_ADDR
// end ; end_of_file
7662: PPOPN 4
7664: END
// export function Action ; var i , un , veh , tmp ; begin
7665: LD_INT 0
7667: PPUSH
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
// InGameOn ;
7672: CALL_OW 8
// PauseMusic := true ;
7676: LD_ADDR_OWVAR 77
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// music_nat := 2 ;
7684: LD_ADDR_OWVAR 71
7688: PUSH
7689: LD_INT 2
7691: ST_TO_ADDR
// music_class := music_recon ;
7692: LD_ADDR_OWVAR 72
7696: PUSH
7697: LD_INT 3
7699: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7700: LD_INT 7
7702: PPUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7710: LD_INT 7
7712: PPUSH
7713: LD_INT 6
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: LD_INT 20
7721: NEG
7722: PPUSH
7723: CALL 1219 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7727: LD_ADDR_VAR 0 5
7731: PUSH
7732: LD_EXP 21
7736: PUSH
7737: LD_EXP 22
7741: PUSH
7742: LD_EXP 23
7746: PUSH
7747: LD_EXP 24
7751: PUSH
7752: LD_EXP 25
7756: PUSH
7757: LD_EXP 26
7761: PUSH
7762: LD_EXP 27
7766: PUSH
7767: LD_EXP 28
7771: PUSH
7772: LD_EXP 33
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: ST_TO_ADDR
// tmp := tmp diff 0 ;
7788: LD_ADDR_VAR 0 5
7792: PUSH
7793: LD_VAR 0 5
7797: PUSH
7798: LD_INT 0
7800: DIFF
7801: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: LD_VAR 0 5
7811: PPUSH
7812: LD_INT 3
7814: PPUSH
7815: CALL 65910 0 2
7819: ST_TO_ADDR
// for i in heikeVehicles do
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_EXP 35
7829: PUSH
7830: FOR_IN
7831: IFFALSE 8030
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7833: LD_INT 5
7835: PPUSH
7836: LD_VAR 0 2
7840: PUSH
7841: LD_INT 5
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 2
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 2
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 2
7867: PUSH
7868: LD_INT 3
7870: ARRAY
7871: PPUSH
7872: LD_VAR 0 2
7876: PUSH
7877: LD_INT 4
7879: ARRAY
7880: PPUSH
7881: LD_INT 34
7883: PPUSH
7884: CALL 435 0 7
// veh := CreateVehicle ;
7888: LD_ADDR_VAR 0 4
7892: PUSH
7893: CALL_OW 45
7897: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 4
7905: ARRAY
7906: PUSH
7907: LD_INT 51
7909: PUSH
7910: LD_INT 32
7912: PUSH
7913: LD_INT 12
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: IN
7921: IFFALSE 8001
// begin if i [ 7 ] [ 1 ] then
7923: LD_VAR 0 2
7927: PUSH
7928: LD_INT 7
7930: ARRAY
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: IFFALSE 7962
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7937: LD_VAR 0 4
7941: PPUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PUSH
7950: LD_INT 7
7952: ARRAY
7953: PUSH
7954: LD_INT 1
7956: ARRAY
7957: PPUSH
7958: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7962: LD_VAR 0 2
7966: PUSH
7967: LD_INT 7
7969: ARRAY
7970: PUSH
7971: LD_INT 2
7973: ARRAY
7974: IFFALSE 8001
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7976: LD_VAR 0 4
7980: PPUSH
7981: LD_INT 2
7983: PPUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 7
7991: ARRAY
7992: PUSH
7993: LD_INT 2
7995: ARRAY
7996: PPUSH
7997: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8001: LD_VAR 0 4
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8013: LD_VAR 0 4
8017: PPUSH
8018: LD_INT 4
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 49
// end ;
8028: GO 7830
8030: POP
8031: POP
// if tmp then
8032: LD_VAR 0 5
8036: IFFALSE 8091
// for i in tmp union heikeApes do
8038: LD_ADDR_VAR 0 2
8042: PUSH
8043: LD_VAR 0 5
8047: PUSH
8048: LD_EXP 36
8052: UNION
8053: PUSH
8054: FOR_IN
8055: IFFALSE 8089
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
8057: LD_VAR 0 2
8061: PPUSH
8062: LD_INT 5
8064: PPUSH
8065: LD_INT 0
8067: PPUSH
8068: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8072: LD_VAR 0 2
8076: PPUSH
8077: LD_INT 26
8079: PPUSH
8080: LD_INT 9
8082: PPUSH
8083: CALL_OW 118
// end ;
8087: GO 8054
8089: POP
8090: POP
// if heikeSecondSquad then
8091: LD_EXP 34
8095: IFFALSE 8144
// for i in heikeSecondSquad do
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_EXP 34
8106: PUSH
8107: FOR_IN
8108: IFFALSE 8142
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8110: LD_VAR 0 2
8114: PPUSH
8115: LD_INT 6
8117: PPUSH
8118: LD_INT 0
8120: PPUSH
8121: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8125: LD_VAR 0 2
8129: PPUSH
8130: LD_INT 26
8132: PPUSH
8133: LD_INT 9
8135: PPUSH
8136: CALL_OW 118
// end ;
8140: GO 8107
8142: POP
8143: POP
// if heikeApes then
8144: LD_EXP 36
8148: IFFALSE 8191
// for i in heikeApes do
8150: LD_ADDR_VAR 0 2
8154: PUSH
8155: LD_EXP 36
8159: PUSH
8160: FOR_IN
8161: IFFALSE 8189
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8163: LD_VAR 0 2
8167: PPUSH
8168: LD_INT 7
8170: PPUSH
8171: LD_INT 0
8173: PPUSH
8174: CALL_OW 49
// ComHold ( i ) ;
8178: LD_VAR 0 2
8182: PPUSH
8183: CALL_OW 140
// end ;
8187: GO 8160
8189: POP
8190: POP
// if Kurt then
8191: LD_EXP 32
8195: IFFALSE 8227
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8197: LD_EXP 32
8201: PPUSH
8202: LD_INT 8
8204: PPUSH
8205: LD_INT 0
8207: PPUSH
8208: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8212: LD_EXP 32
8216: PPUSH
8217: LD_INT 42
8219: PPUSH
8220: LD_INT 32
8222: PPUSH
8223: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8227: LD_INT 70
8229: PPUSH
8230: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8234: LD_EXP 21
8238: PPUSH
8239: LD_STRING DH-Start-1
8241: PPUSH
8242: CALL_OW 88
// if Givi then
8246: LD_EXP 22
8250: IFFALSE 8513
// begin Say ( Givi , DG-Start-2-5 ) ;
8252: LD_EXP 22
8256: PPUSH
8257: LD_STRING DG-Start-2-5
8259: PPUSH
8260: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8264: LD_EXP 21
8268: PPUSH
8269: LD_STRING DH-Start-3
8271: PPUSH
8272: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8276: LD_EXP 21
8280: PPUSH
8281: LD_STRING DH-Start-4
8283: PPUSH
8284: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8288: LD_EXP 22
8292: PPUSH
8293: LD_STRING DG-Start-5
8295: PPUSH
8296: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8300: LD_EXP 21
8304: PPUSH
8305: LD_STRING DH-Start-6
8307: PPUSH
8308: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8312: LD_EXP 22
8316: PPUSH
8317: LD_STRING DG-Start-7
8319: PPUSH
8320: CALL_OW 88
// if Mike then
8324: LD_EXP 23
8328: IFFALSE 8501
// begin Say ( Mike , DM-Start-8 ) ;
8330: LD_EXP 23
8334: PPUSH
8335: LD_STRING DM-Start-8
8337: PPUSH
8338: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8342: LD_EXP 23
8346: PPUSH
8347: LD_STRING DM-Start-9
8349: PPUSH
8350: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8354: LD_EXP 22
8358: PPUSH
8359: LD_STRING DG-Start-10
8361: PPUSH
8362: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8366: LD_EXP 22
8370: PPUSH
8371: LD_STRING DG-Start-11
8373: PPUSH
8374: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8378: LD_EXP 21
8382: PPUSH
8383: LD_STRING DH-Start-12
8385: PPUSH
8386: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8390: LD_EXP 22
8394: PPUSH
8395: LD_STRING DG-Start-13
8397: PPUSH
8398: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8402: LD_EXP 22
8406: PPUSH
8407: LD_STRING DG-Start-14
8409: PPUSH
8410: CALL_OW 88
// if Kaia then
8414: LD_EXP 26
8418: IFFALSE 8501
// begin Say ( Kaia , DK-Start-15 ) ;
8420: LD_EXP 26
8424: PPUSH
8425: LD_STRING DK-Start-15
8427: PPUSH
8428: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8432: LD_EXP 26
8436: PPUSH
8437: LD_STRING DK-Start-16
8439: PPUSH
8440: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8444: LD_EXP 26
8448: PPUSH
8449: LD_STRING DK-Start-17
8451: PPUSH
8452: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8456: LD_INT 10
8458: PPUSH
8459: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8463: LD_EXP 22
8467: PPUSH
8468: LD_EXP 26
8472: PPUSH
8473: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8477: LD_EXP 22
8481: PPUSH
8482: LD_STRING DG-Start-18
8484: PPUSH
8485: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8489: LD_EXP 26
8493: PPUSH
8494: LD_STRING DK-Start-19
8496: PPUSH
8497: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8501: LD_EXP 21
8505: PPUSH
8506: LD_STRING DH-Start-20
8508: PPUSH
8509: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8513: LD_INT 70
8515: PPUSH
8516: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8520: LD_EXP 29
8524: PPUSH
8525: LD_STRING DShar-Start-21
8527: PPUSH
8528: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8532: LD_EXP 21
8536: PPUSH
8537: LD_STRING DH-Start-22
8539: PPUSH
8540: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8544: LD_EXP 29
8548: PPUSH
8549: LD_STRING DShar-Start-23
8551: PPUSH
8552: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8556: LD_EXP 29
8560: PPUSH
8561: LD_STRING DShar-Start-24
8563: PPUSH
8564: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8568: LD_EXP 29
8572: PPUSH
8573: LD_STRING DShar-Start-25
8575: PPUSH
8576: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8580: LD_EXP 29
8584: PPUSH
8585: LD_STRING DShar-Start-26
8587: PPUSH
8588: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8592: LD_EXP 21
8596: PPUSH
8597: LD_STRING DH-Start-27
8599: PPUSH
8600: CALL_OW 88
// if Kaia then
8604: LD_EXP 26
8608: IFFALSE 8650
// begin ComTurnUnit ( Heike , Kaia ) ;
8610: LD_EXP 21
8614: PPUSH
8615: LD_EXP 26
8619: PPUSH
8620: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8624: LD_EXP 26
8628: PPUSH
8629: LD_STRING DK-Start-28
8631: PPUSH
8632: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8636: LD_EXP 21
8640: PPUSH
8641: LD_STRING DH-Start-29
8643: PPUSH
8644: CALL_OW 88
// end else
8648: GO 8662
// Say ( Heike , DH-Start-a-28 ) ;
8650: LD_EXP 21
8654: PPUSH
8655: LD_STRING DH-Start-a-28
8657: PPUSH
8658: CALL_OW 88
// if Givi then
8662: LD_EXP 22
8666: IFFALSE 8901
// begin ComTurnUnit ( Heike , Givi ) ;
8668: LD_EXP 21
8672: PPUSH
8673: LD_EXP 22
8677: PPUSH
8678: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8682: LD_EXP 22
8686: PPUSH
8687: LD_EXP 21
8691: PPUSH
8692: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8696: LD_EXP 21
8700: PPUSH
8701: LD_STRING DH-Start-30
8703: PPUSH
8704: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8708: LD_EXP 21
8712: PPUSH
8713: LD_STRING DH-Start-31
8715: PPUSH
8716: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8720: LD_EXP 22
8724: PPUSH
8725: LD_STRING DG-Start-32
8727: PPUSH
8728: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8732: LD_EXP 21
8736: PPUSH
8737: LD_STRING DH-Start-33
8739: PPUSH
8740: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8744: LD_EXP 22
8748: PPUSH
8749: LD_STRING DG-Start-34
8751: PPUSH
8752: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8756: LD_EXP 22
8760: PPUSH
8761: LD_STRING DG-Start-35
8763: PPUSH
8764: CALL_OW 88
// if Kurt and not dialogue_skipped then
8768: LD_EXP 32
8772: PUSH
8773: LD_OWVAR 59
8777: NOT
8778: AND
8779: IFFALSE 8810
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8781: LD_EXP 32
8785: PPUSH
8786: LD_INT 28
8788: PPUSH
8789: LD_INT 13
8791: PPUSH
8792: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8796: LD_EXP 32
8800: PPUSH
8801: LD_EXP 21
8805: PPUSH
8806: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8810: LD_EXP 22
8814: PPUSH
8815: LD_STRING DG-Start-36
8817: PPUSH
8818: CALL_OW 88
// if Kurt then
8822: LD_EXP 32
8826: IFFALSE 8899
// begin if not Givi then
8828: LD_EXP 22
8832: NOT
8833: IFFALSE 8849
// Say ( Kurt , DKs-Start-37-a ) else
8835: LD_EXP 32
8839: PPUSH
8840: LD_STRING DKs-Start-37-a
8842: PPUSH
8843: CALL_OW 88
8847: GO 8861
// Say ( Kurt , DKs-Start-37 ) ;
8849: LD_EXP 32
8853: PPUSH
8854: LD_STRING DKs-Start-37
8856: PPUSH
8857: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8861: LD_EXP 32
8865: PPUSH
8866: LD_STRING DKs-Start-38
8868: PPUSH
8869: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8873: LD_EXP 21
8877: PPUSH
8878: LD_EXP 32
8882: PPUSH
8883: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8887: LD_EXP 21
8891: PPUSH
8892: LD_STRING DH-Start-39
8894: PPUSH
8895: CALL_OW 88
// end ; end else
8899: GO 8930
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8901: LD_EXP 34
8905: PPUSH
8906: LD_STRING DArm-Start-a-37
8908: PPUSH
8909: LD_STRING DArf-Start-a-37
8911: PPUSH
8912: CALL 1270 0 3
8916: IFFALSE 8930
// Say ( Heike , DH-Start-39 ) ;
8918: LD_EXP 21
8922: PPUSH
8923: LD_STRING DH-Start-39
8925: PPUSH
8926: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8930: LD_INT 44
8932: PPUSH
8933: LD_INT 25
8935: PPUSH
8936: CALL_OW 428
8940: IFFALSE 8957
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8942: LD_INT 44
8944: PPUSH
8945: LD_INT 25
8947: PPUSH
8948: CALL_OW 428
8952: PPUSH
8953: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8957: LD_EXP 30
8961: PPUSH
8962: LD_INT 5
8964: PPUSH
8965: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8969: LD_EXP 30
8973: PPUSH
8974: LD_INT 44
8976: PPUSH
8977: LD_INT 25
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8987: LD_EXP 30
8991: PPUSH
8992: LD_INT 29
8994: PPUSH
8995: LD_INT 12
8997: PPUSH
8998: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9002: LD_INT 35
9004: PPUSH
9005: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9009: LD_OWVAR 59
9013: PUSH
9014: LD_EXP 21
9018: PPUSH
9019: LD_EXP 30
9023: PPUSH
9024: CALL_OW 296
9028: PUSH
9029: LD_INT 8
9031: LESS
9032: OR
9033: PUSH
9034: LD_EXP 30
9038: PPUSH
9039: LD_INT 26
9041: PPUSH
9042: LD_INT 9
9044: PPUSH
9045: CALL_OW 297
9049: PUSH
9050: LD_INT 6
9052: LESS
9053: OR
9054: IFFALSE 9002
// Say ( Olaf , DO-Scout-1 ) ;
9056: LD_EXP 30
9060: PPUSH
9061: LD_STRING DO-Scout-1
9063: PPUSH
9064: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9068: LD_EXP 30
9072: PPUSH
9073: LD_EXP 21
9077: PPUSH
9078: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9082: LD_ADDR_VAR 0 2
9086: PUSH
9087: LD_VAR 0 5
9091: PUSH
9092: LD_EXP 34
9096: UNION
9097: PUSH
9098: FOR_IN
9099: IFFALSE 9117
// ComTurnUnit ( i , Olaf ) ;
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_EXP 30
9110: PPUSH
9111: CALL_OW 119
9115: GO 9098
9117: POP
9118: POP
// wait ( 0 0$0.3 ) ;
9119: LD_INT 10
9121: PPUSH
9122: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9126: LD_EXP 21
9130: PPUSH
9131: LD_EXP 30
9135: PPUSH
9136: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_EXP 30
9149: PPUSH
9150: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9154: LD_EXP 21
9158: PPUSH
9159: LD_STRING DH-Scout-2
9161: PPUSH
9162: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9166: LD_EXP 30
9170: PPUSH
9171: LD_STRING DO-Scout-3
9173: PPUSH
9174: CALL_OW 88
// if Mike and Givi then
9178: LD_EXP 23
9182: PUSH
9183: LD_EXP 22
9187: AND
9188: IFFALSE 9204
// Say ( Olaf , DO-Scout-4 ) else
9190: LD_EXP 30
9194: PPUSH
9195: LD_STRING DO-Scout-4
9197: PPUSH
9198: CALL_OW 88
9202: GO 9304
// begin if Mike then
9204: LD_EXP 23
9208: IFFALSE 9236
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9210: LD_EXP 30
9214: PPUSH
9215: LD_STRING DO-Scout-a-4
9217: PPUSH
9218: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9222: LD_EXP 21
9226: PPUSH
9227: LD_STRING DH-Scout-a-5
9229: PPUSH
9230: CALL_OW 88
// end else
9234: GO 9304
// if Givi then
9236: LD_EXP 22
9240: IFFALSE 9268
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9242: LD_EXP 30
9246: PPUSH
9247: LD_STRING DO-Scout-b-4
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Scout-b-5
9261: PPUSH
9262: CALL_OW 88
// end else
9266: GO 9304
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9268: LD_EXP 30
9272: PPUSH
9273: LD_STRING DO-Scout-f-4
9275: PPUSH
9276: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9280: LD_EXP 21
9284: PPUSH
9285: LD_STRING DH-Scout-f-5
9287: PPUSH
9288: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DO-Scout-f-6
9299: PPUSH
9300: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9304: LD_EXP 21
9308: PPUSH
9309: LD_STRING DH-Scout-5
9311: PPUSH
9312: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9316: LD_EXP 30
9320: PPUSH
9321: LD_STRING DO-Scout-6
9323: PPUSH
9324: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9328: LD_EXP 30
9332: PPUSH
9333: LD_STRING DO-Scout-7
9335: PPUSH
9336: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9340: LD_EXP 21
9344: PPUSH
9345: LD_STRING DH-Scout-8
9347: PPUSH
9348: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9352: LD_EXP 21
9356: PPUSH
9357: LD_STRING DH-Scout-9
9359: PPUSH
9360: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9364: LD_EXP 30
9368: PPUSH
9369: LD_STRING DO-Scout-10
9371: PPUSH
9372: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9376: LD_EXP 30
9380: PPUSH
9381: LD_STRING DO-Scout-12
9383: PPUSH
9384: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9388: LD_EXP 30
9392: PPUSH
9393: LD_STRING DO-Scout-13
9395: PPUSH
9396: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9400: LD_EXP 30
9404: PPUSH
9405: LD_STRING DO-Scout-14
9407: PPUSH
9408: CALL_OW 88
// if Givi then
9412: LD_EXP 22
9416: IFFALSE 9442
// begin Say ( Givi , DG-Scout-15 ) ;
9418: LD_EXP 22
9422: PPUSH
9423: LD_STRING DG-Scout-15
9425: PPUSH
9426: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9430: LD_EXP 26
9434: PPUSH
9435: LD_STRING DK-Scout-16
9437: PPUSH
9438: CALL_OW 88
// end ; if not dialogue_skipped then
9442: LD_OWVAR 59
9446: NOT
9447: IFFALSE 9568
// begin async ;
9449: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9450: LD_EXP 30
9454: PPUSH
9455: LD_STRING DO-Scout-17
9457: PPUSH
9458: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9462: LD_INT 55
9464: PPUSH
9465: LD_INT 77
9467: PPUSH
9468: LD_INT 2
9470: PPUSH
9471: LD_INT 6
9473: NEG
9474: PPUSH
9475: CALL 1219 0 4
// wait ( 10 ) ;
9479: LD_INT 10
9481: PPUSH
9482: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9486: LD_INT 55
9488: PPUSH
9489: LD_INT 77
9491: PPUSH
9492: CALL_OW 84
// wait ( 0 0$5 ) ;
9496: LD_INT 175
9498: PPUSH
9499: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9503: LD_EXP 30
9507: PPUSH
9508: LD_STRING DO-Scout-18
9510: PPUSH
9511: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9515: LD_INT 204
9517: PPUSH
9518: LD_INT 107
9520: PPUSH
9521: LD_INT 2
9523: PPUSH
9524: LD_INT 12
9526: NEG
9527: PPUSH
9528: CALL 1219 0 4
// wait ( 10 ) ;
9532: LD_INT 10
9534: PPUSH
9535: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9539: LD_INT 204
9541: PPUSH
9542: LD_INT 107
9544: PPUSH
9545: CALL_OW 84
// wait ( 0 0$5 ) ;
9549: LD_INT 175
9551: PPUSH
9552: CALL_OW 67
// sync ;
9556: SYNC
// CenterNowOnUnits ( Heike ) ;
9557: LD_EXP 21
9561: PPUSH
9562: CALL_OW 87
// end else
9566: GO 9602
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9568: LD_INT 55
9570: PPUSH
9571: LD_INT 77
9573: PPUSH
9574: LD_INT 2
9576: PPUSH
9577: LD_INT 6
9579: NEG
9580: PPUSH
9581: CALL 1219 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9585: LD_INT 204
9587: PPUSH
9588: LD_INT 107
9590: PPUSH
9591: LD_INT 2
9593: PPUSH
9594: LD_INT 12
9596: NEG
9597: PPUSH
9598: CALL 1219 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
9602: LD_EXP 30
9606: PPUSH
9607: LD_STRING DO-Scout-19
9609: PPUSH
9610: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9614: LD_EXP 30
9618: PPUSH
9619: LD_STRING DO-Scout-20
9621: PPUSH
9622: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9626: LD_EXP 21
9630: PPUSH
9631: LD_STRING DH-Scout-21
9633: PPUSH
9634: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9638: LD_EXP 21
9642: PPUSH
9643: LD_STRING DH-Scout-22
9645: PPUSH
9646: CALL_OW 88
// InGameOff ;
9650: CALL_OW 9
// if Givi then
9654: LD_EXP 22
9658: IFFALSE 9673
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9660: LD_INT 13
9662: PPUSH
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 1
9668: PPUSH
9669: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9673: LD_STRING Road
9675: PPUSH
9676: CALL_OW 337
// PauseMusic := false ;
9680: LD_ADDR_OWVAR 77
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_INT 5
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 21
9705: PUSH
9706: LD_INT 2
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PPUSH
9717: CALL_OW 69
9721: PUSH
9722: FOR_IN
9723: IFFALSE 9739
// SetSide ( i , 2 ) ;
9725: LD_VAR 0 2
9729: PPUSH
9730: LD_INT 2
9732: PPUSH
9733: CALL_OW 235
9737: GO 9722
9739: POP
9740: POP
// SaveForQuickRestart ;
9741: CALL_OW 22
// music_class := music_auto ;
9745: LD_ADDR_OWVAR 72
9749: PUSH
9750: LD_INT 0
9752: ST_TO_ADDR
// end ;
9753: LD_VAR 0 1
9757: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9758: LD_INT 2
9760: PPUSH
9761: LD_INT 9
9763: PPUSH
9764: CALL_OW 294
9768: IFFALSE 10135
9770: GO 9772
9772: DISABLE
// begin DialogueOn ;
9773: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9777: LD_INT 111
9779: PPUSH
9780: LD_INT 72
9782: PPUSH
9783: LD_INT 2
9785: PPUSH
9786: LD_INT 20
9788: NEG
9789: PPUSH
9790: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9794: LD_INT 111
9796: PPUSH
9797: LD_INT 72
9799: PPUSH
9800: LD_INT 2
9802: PPUSH
9803: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9807: LD_INT 111
9809: PPUSH
9810: LD_INT 72
9812: PPUSH
9813: CALL_OW 86
// if IsOk ( Kamil ) then
9817: LD_EXP 25
9821: PPUSH
9822: CALL_OW 302
9826: IFFALSE 9943
// begin Say ( Kamil , DKam-Cross-1 ) ;
9828: LD_EXP 25
9832: PPUSH
9833: LD_STRING DKam-Cross-1
9835: PPUSH
9836: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9840: LD_EXP 25
9844: PPUSH
9845: LD_STRING DKam-Cross-2
9847: PPUSH
9848: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9852: LD_EXP 25
9856: PPUSH
9857: LD_STRING DKam-Cross-3
9859: PPUSH
9860: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9864: LD_EXP 25
9868: PPUSH
9869: LD_STRING DKam-Cross-4
9871: PPUSH
9872: CALL_OW 88
// if IsOk ( Ibrahim ) then
9876: LD_EXP 24
9880: PPUSH
9881: CALL_OW 302
9885: IFFALSE 9941
// begin if ibrahimJoinedIn04 then
9887: LD_EXP 4
9891: IFFALSE 9905
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9893: LD_EXP 24
9897: PPUSH
9898: LD_STRING DI-Cross-b-5
9900: PPUSH
9901: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9905: LD_EXP 24
9909: PPUSH
9910: LD_STRING DI-Cross-b-6
9912: PPUSH
9913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9917: LD_EXP 24
9921: PPUSH
9922: LD_STRING DI-Cross-b-7
9924: PPUSH
9925: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9929: LD_EXP 25
9933: PPUSH
9934: LD_STRING DKam-Cross-8
9936: PPUSH
9937: CALL_OW 88
// end ; end else
9941: GO 10101
// if IsOk ( Sophia ) then
9943: LD_EXP 27
9947: PPUSH
9948: CALL_OW 302
9952: IFFALSE 10069
// begin Say ( Sophia , DS-Cross-1 ) ;
9954: LD_EXP 27
9958: PPUSH
9959: LD_STRING DS-Cross-1
9961: PPUSH
9962: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9966: LD_EXP 27
9970: PPUSH
9971: LD_STRING DS-Cross-2
9973: PPUSH
9974: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9978: LD_EXP 27
9982: PPUSH
9983: LD_STRING DS-Cross-3
9985: PPUSH
9986: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9990: LD_EXP 27
9994: PPUSH
9995: LD_STRING DS-Cross-4
9997: PPUSH
9998: CALL_OW 88
// if IsOk ( Ibrahim ) then
10002: LD_EXP 24
10006: PPUSH
10007: CALL_OW 302
10011: IFFALSE 10067
// begin if ibrahimJoinedIn04 then
10013: LD_EXP 4
10017: IFFALSE 10031
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10019: LD_EXP 24
10023: PPUSH
10024: LD_STRING DI-Cross-b-5
10026: PPUSH
10027: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10031: LD_EXP 24
10035: PPUSH
10036: LD_STRING DI-Cross-b-6
10038: PPUSH
10039: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10043: LD_EXP 24
10047: PPUSH
10048: LD_STRING DI-Cross-b-7
10050: PPUSH
10051: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10055: LD_EXP 27
10059: PPUSH
10060: LD_STRING DS-Cross-8
10062: PPUSH
10063: CALL_OW 88
// end ; end else
10067: GO 10101
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10069: LD_EXP 34
10073: PPUSH
10074: LD_INT 50
10076: PUSH
10077: EMPTY
10078: LIST
10079: PPUSH
10080: CALL_OW 72
10084: IFFALSE 10101
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10086: LD_EXP 34
10090: PPUSH
10091: LD_STRING DArm-Cross-c-1
10093: PPUSH
10094: LD_STRING DArf-Cross-c-1
10096: PPUSH
10097: CALL 1270 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10101: LD_EXP 57
10105: PPUSH
10106: LD_INT 2
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL_OW 322
// DialogueOff ;
10116: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10120: LD_STRING Crane
10122: PPUSH
10123: CALL_OW 337
// spottedCrossRoad := true ;
10127: LD_ADDR_EXP 8
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// end ;
10135: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10136: LD_INT 22
10138: PUSH
10139: LD_INT 2
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: LD_INT 30
10151: PUSH
10152: LD_INT 0
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 30
10161: PUSH
10162: LD_INT 1
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: CALL_OW 69
10182: PUSH
10183: LD_EXP 26
10187: PPUSH
10188: CALL_OW 302
10192: PUSH
10193: LD_EXP 34
10197: OR
10198: AND
10199: IFFALSE 10411
10201: GO 10203
10203: DISABLE
// begin DialogueOn ;
10204: CALL_OW 6
// if Kaia then
10208: LD_EXP 26
10212: IFFALSE 10225
// CenterNowOnUnits ( Kaia ) else
10214: LD_EXP 26
10218: PPUSH
10219: CALL_OW 87
10223: GO 10234
// CenterNowOnUnits ( Heike ) ;
10225: LD_EXP 21
10229: PPUSH
10230: CALL_OW 87
// if IsOk ( Kaia ) then
10234: LD_EXP 26
10238: PPUSH
10239: CALL_OW 302
10243: IFFALSE 10259
// Say ( Kaia , DK-Cam-1 ) else
10245: LD_EXP 26
10249: PPUSH
10250: LD_STRING DK-Cam-1
10252: PPUSH
10253: CALL_OW 88
10257: GO 10274
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10259: LD_EXP 34
10263: PPUSH
10264: LD_STRING DArm-Cam-1
10266: PPUSH
10267: LD_STRING DArf-Cam-1
10269: PPUSH
10270: CALL 1270 0 3
// Say ( Heike , DH-Cam-2 ) ;
10274: LD_EXP 21
10278: PPUSH
10279: LD_STRING DH-Cam-2
10281: PPUSH
10282: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10286: LD_EXP 21
10290: PPUSH
10291: LD_STRING DH-Cam-3
10293: PPUSH
10294: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10298: LD_EXP 21
10302: PPUSH
10303: LD_STRING DH-Cam-4
10305: PPUSH
10306: CALL_OW 88
// if IsOk ( Kaia ) then
10310: LD_EXP 26
10314: PPUSH
10315: CALL_OW 302
10319: IFFALSE 10335
// Say ( Kaia , DK-Cam-5 ) else
10321: LD_EXP 26
10325: PPUSH
10326: LD_STRING DK-Cam-5
10328: PPUSH
10329: CALL_OW 88
10333: GO 10350
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10335: LD_EXP 34
10339: PPUSH
10340: LD_STRING DArm-Cam-5
10342: PPUSH
10343: LD_STRING DArf-Cam-5
10345: PPUSH
10346: CALL 1270 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10350: LD_EXP 30
10354: PPUSH
10355: LD_STRING DO-Cam-6
10357: PPUSH
10358: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10362: LD_EXP 30
10366: PPUSH
10367: LD_STRING DO-Cam-7
10369: PPUSH
10370: CALL_OW 88
// DialogueOff ;
10374: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10378: LD_STRING Radar
10380: PPUSH
10381: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10385: LD_INT 6
10387: PPUSH
10388: LD_INT 2
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10398: LD_INT 20
10400: PPUSH
10401: LD_INT 2
10403: PPUSH
10404: LD_INT 1
10406: PPUSH
10407: CALL_OW 324
// end ;
10411: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10412: LD_INT 22
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: LD_INT 34
10427: PUSH
10428: LD_INT 30
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 35
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: IFFALSE 10470
10460: GO 10462
10462: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10463: LD_STRING RadarDone
10465: PPUSH
10466: CALL_OW 337
10470: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10471: LD_INT 22
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 34
10483: PUSH
10484: LD_EXP 50
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PPUSH
10497: CALL_OW 69
10501: IFFALSE 10513
10503: GO 10505
10505: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10506: LD_STRING CraneDone
10508: PPUSH
10509: CALL_OW 337
10513: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10514: LD_EXP 30
10518: PPUSH
10519: CALL_OW 302
10523: PUSH
10524: LD_EXP 33
10528: PPUSH
10529: CALL_OW 302
10533: AND
10534: PUSH
10535: LD_INT 6
10537: PPUSH
10538: LD_INT 2
10540: PPUSH
10541: CALL_OW 321
10545: PUSH
10546: LD_INT 2
10548: EQUAL
10549: AND
10550: PUSH
10551: LD_EXP 33
10555: PPUSH
10556: LD_EXP 21
10560: PPUSH
10561: CALL_OW 296
10565: PUSH
10566: LD_INT 10
10568: LESS
10569: PUSH
10570: LD_EXP 33
10574: PPUSH
10575: CALL_OW 310
10579: OR
10580: AND
10581: IFFALSE 10795
10583: GO 10585
10585: DISABLE
// begin DialogueOn ;
10586: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10590: LD_EXP 33
10594: PPUSH
10595: LD_STRING DA-RC-1
10597: PPUSH
10598: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10602: LD_EXP 33
10606: PPUSH
10607: LD_STRING DA-RC-2
10609: PPUSH
10610: CALL_OW 88
// if IsOk ( Kaia ) then
10614: LD_EXP 26
10618: PPUSH
10619: CALL_OW 302
10623: IFFALSE 10697
// begin Say ( Kaia , DK-RC-3 ) ;
10625: LD_EXP 26
10629: PPUSH
10630: LD_STRING DK-RC-3
10632: PPUSH
10633: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10637: LD_EXP 33
10641: PPUSH
10642: LD_STRING DA-RC-4
10644: PPUSH
10645: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10649: LD_EXP 26
10653: PPUSH
10654: LD_STRING DK-RC-5
10656: PPUSH
10657: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10661: LD_EXP 33
10665: PPUSH
10666: LD_STRING DA-RC-6
10668: PPUSH
10669: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10673: LD_EXP 26
10677: PPUSH
10678: LD_STRING DK-RC-7
10680: PPUSH
10681: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10685: LD_EXP 33
10689: PPUSH
10690: LD_STRING DA-RC-8
10692: PPUSH
10693: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10697: LD_EXP 21
10701: PPUSH
10702: LD_STRING DH-RC-9
10704: PPUSH
10705: CALL_OW 88
// if IsOk ( Markov ) then
10709: LD_EXP 28
10713: PPUSH
10714: CALL_OW 302
10718: IFFALSE 10746
// begin Say ( Markov , DMar-RC-10 ) ;
10720: LD_EXP 28
10724: PPUSH
10725: LD_STRING DMar-RC-10
10727: PPUSH
10728: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10732: LD_EXP 28
10736: PPUSH
10737: LD_STRING DMar-RC-11
10739: PPUSH
10740: CALL_OW 88
// end else
10744: GO 10758
// begin Say ( Olaf , DO-RC-a-10 ) ;
10746: LD_EXP 30
10750: PPUSH
10751: LD_STRING DO-RC-a-10
10753: PPUSH
10754: CALL_OW 88
// end ; DialogueOff ;
10758: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10762: LD_STRING RemoteControl
10764: PPUSH
10765: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10769: LD_INT 15
10771: PPUSH
10772: LD_INT 2
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10782: LD_INT 22
10784: PPUSH
10785: LD_INT 2
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 324
// end ;
10795: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10796: LD_INT 12
10798: PPUSH
10799: LD_INT 22
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 70
10813: IFFALSE 11180
10815: GO 10817
10817: DISABLE
10818: LD_INT 0
10820: PPUSH
// begin PrepareWestBase ;
10821: CALL 3910 0 0
// westBaseSpotted := true ;
10825: LD_ADDR_EXP 5
10829: PUSH
10830: LD_INT 1
10832: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10833: LD_INT 70
10835: PPUSH
10836: CALL_OW 67
// InGameOn ;
10840: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10844: LD_INT 56
10846: PPUSH
10847: LD_INT 77
10849: PPUSH
10850: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10854: LD_INT 56
10856: PPUSH
10857: LD_INT 77
10859: PPUSH
10860: LD_INT 2
10862: PPUSH
10863: LD_INT 12
10865: NEG
10866: PPUSH
10867: CALL_OW 330
// wait ( 0 0$2 ) ;
10871: LD_INT 70
10873: PPUSH
10874: CALL_OW 67
// DialogueOn ;
10878: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10882: LD_EXP 21
10886: PPUSH
10887: LD_STRING DH-Rbase-1
10889: PPUSH
10890: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10894: LD_EXP 26
10898: PPUSH
10899: LD_STRING DK-Rbase-2
10901: PPUSH
10902: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10906: LD_EXP 26
10910: PPUSH
10911: LD_STRING DK-Rbase-3
10913: PPUSH
10914: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10918: LD_EXP 26
10922: PPUSH
10923: LD_STRING DK-Rbase-4
10925: PPUSH
10926: CALL_OW 88
// DialogueOff ;
10930: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10934: LD_INT 56
10936: PPUSH
10937: LD_INT 77
10939: PPUSH
10940: LD_INT 2
10942: PPUSH
10943: CALL_OW 331
// InGameOff ;
10947: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10951: LD_INT 35
10953: PPUSH
10954: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10958: LD_EXP 42
10962: NOT
10963: PUSH
10964: LD_EXP 43
10968: NOT
10969: AND
10970: IFFALSE 10951
// wait ( 0 0$2 ) ;
10972: LD_INT 70
10974: PPUSH
10975: CALL_OW 67
// if IsOk ( Kaia ) then
10979: LD_EXP 26
10983: PPUSH
10984: CALL_OW 302
10988: IFFALSE 11103
// begin DialogueOn ;
10990: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10994: LD_INT 56
10996: PPUSH
10997: LD_INT 81
10999: PPUSH
11000: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11004: LD_EXP 26
11008: PPUSH
11009: LD_STRING DK-Rbase-5
11011: PPUSH
11012: CALL_OW 88
// if IsOk ( Givi ) then
11016: LD_EXP 22
11020: PPUSH
11021: CALL_OW 302
11025: IFFALSE 11099
// begin Say ( Givi , DG-Rbase-6 ) ;
11027: LD_EXP 22
11031: PPUSH
11032: LD_STRING DG-Rbase-6
11034: PPUSH
11035: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11039: LD_EXP 22
11043: PPUSH
11044: LD_STRING DG-Rbase-7
11046: PPUSH
11047: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11051: LD_EXP 26
11055: PPUSH
11056: LD_STRING DK-Rbase-8
11058: PPUSH
11059: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11063: LD_EXP 22
11067: PPUSH
11068: LD_STRING DG-Rbase-9
11070: PPUSH
11071: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11075: LD_EXP 22
11079: PPUSH
11080: LD_STRING DG-Rbase-10
11082: PPUSH
11083: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11087: LD_EXP 26
11091: PPUSH
11092: LD_STRING DK-Rbase-11
11094: PPUSH
11095: CALL_OW 88
// end ; DialogueOff ;
11099: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11103: LD_ADDR_VAR 0 1
11107: PUSH
11108: LD_INT 12
11110: PPUSH
11111: LD_INT 22
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: PUSH
11140: FOR_IN
11141: IFFALSE 11157
// SetSide ( i , 2 ) ;
11143: LD_VAR 0 1
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: CALL_OW 235
11155: GO 11140
11157: POP
11158: POP
// westBaseCaptured := true ;
11159: LD_ADDR_EXP 9
11163: PUSH
11164: LD_INT 1
11166: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11167: LD_INT 0
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 324
// end ;
11180: PPOPN 1
11182: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11183: LD_EXP 38
11187: NOT
11188: PUSH
11189: LD_INT 10
11191: PPUSH
11192: CALL_OW 255
11196: PUSH
11197: LD_INT 2
11199: EQUAL
11200: OR
11201: IFFALSE 11338
11203: GO 11205
11205: DISABLE
// begin DialogueOn ;
11206: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11210: LD_EXP 21
11214: PPUSH
11215: LD_STRING DH-Goal-1
11217: PPUSH
11218: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11222: LD_EXP 29
11226: PPUSH
11227: LD_STRING DShar-Goal-2
11229: PPUSH
11230: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11234: LD_EXP 21
11238: PPUSH
11239: LD_STRING DH-Goal-3
11241: PPUSH
11242: CALL_OW 88
// if reinforcementsAllowed then
11246: LD_EXP 14
11250: IFFALSE 11276
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11252: LD_EXP 29
11256: PPUSH
11257: LD_STRING DShar-Goal-4
11259: PPUSH
11260: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11264: LD_EXP 21
11268: PPUSH
11269: LD_STRING DH-Goal-5
11271: PPUSH
11272: CALL_OW 88
// end ; DialogueOff ;
11276: CALL_OW 7
// eastBaseCaptured := true ;
11280: LD_ADDR_EXP 10
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11288: LD_STRING BaseCaptured
11290: PPUSH
11291: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11295: LD_INT 10
11297: PPUSH
11298: LD_INT 2
11300: PPUSH
11301: CALL_OW 235
// if not reinforcementsAllowed then
11305: LD_EXP 14
11309: NOT
11310: IFFALSE 11314
// exit ;
11312: GO 11338
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11314: LD_INT 21000
11316: PUSH
11317: LD_INT 1050
11319: NEG
11320: PPUSH
11321: LD_INT 1050
11323: PPUSH
11324: CALL_OW 12
11328: PLUS
11329: PPUSH
11330: CALL_OW 67
// PrepareReinforcements ;
11334: CALL 2238 0 0
// end ;
11338: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11339: LD_INT 22
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 30
11351: PUSH
11352: LD_INT 13
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: IFFALSE 11384
11369: GO 11371
11371: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11372: LD_EXP 22
11376: PPUSH
11377: LD_STRING DG-Lab-1
11379: PPUSH
11380: CALL_OW 88
// end ;
11384: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11385: LD_INT 5
11387: PPUSH
11388: LD_INT 2
11390: PPUSH
11391: CALL_OW 321
11395: PUSH
11396: LD_INT 2
11398: EQUAL
11399: PUSH
11400: LD_EXP 22
11404: PPUSH
11405: CALL_OW 302
11409: AND
11410: IFFALSE 11471
11412: GO 11414
11414: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11415: LD_EXP 22
11419: PPUSH
11420: LD_STRING DG-Stim-1
11422: PPUSH
11423: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11427: LD_EXP 21
11431: PPUSH
11432: LD_STRING DH-Stim-2
11434: PPUSH
11435: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11439: LD_EXP 22
11443: PPUSH
11444: LD_STRING DG-Stim-3
11446: PPUSH
11447: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11451: LD_EXP 21
11455: PPUSH
11456: LD_STRING DH-Stim-4
11458: PPUSH
11459: CALL_OW 88
// drugsResearched := true ;
11463: LD_ADDR_EXP 11
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// end ;
11471: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11472: LD_EXP 11
11476: IFFALSE 11788
11478: GO 11480
11480: DISABLE
11481: LD_INT 0
11483: PPUSH
11484: PPUSH
11485: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11486: LD_ADDR_VAR 0 2
11490: PUSH
11491: LD_EXP 21
11495: PUSH
11496: LD_EXP 22
11500: PUSH
11501: LD_EXP 30
11505: PUSH
11506: LD_EXP 28
11510: PUSH
11511: LD_EXP 26
11515: PUSH
11516: LD_EXP 27
11520: PUSH
11521: LD_EXP 32
11525: PUSH
11526: LD_EXP 25
11530: PUSH
11531: LD_EXP 23
11535: PUSH
11536: LD_EXP 24
11540: PUSH
11541: LD_EXP 33
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11559: LD_ADDR_VAR 0 3
11563: PUSH
11564: LD_STRING H
11566: PUSH
11567: LD_STRING G
11569: PUSH
11570: LD_STRING O
11572: PUSH
11573: LD_STRING Mar
11575: PUSH
11576: LD_STRING K
11578: PUSH
11579: LD_STRING S
11581: PUSH
11582: LD_STRING Ks
11584: PUSH
11585: LD_STRING Kam
11587: PUSH
11588: LD_STRING M
11590: PUSH
11591: LD_STRING I
11593: PUSH
11594: LD_STRING A
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11610: LD_INT 35
11612: PPUSH
11613: CALL_OW 67
// for i := tmp downto 1 do
11617: LD_ADDR_VAR 0 1
11621: PUSH
11622: DOUBLE
11623: LD_VAR 0 2
11627: INC
11628: ST_TO_ADDR
11629: LD_INT 1
11631: PUSH
11632: FOR_DOWNTO
11633: IFFALSE 11779
// if GetLives ( tmp [ i ] ) < 250 then
11635: LD_VAR 0 2
11639: PUSH
11640: LD_VAR 0 1
11644: ARRAY
11645: PPUSH
11646: CALL_OW 256
11650: PUSH
11651: LD_INT 250
11653: LESS
11654: IFFALSE 11777
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11656: LD_ADDR_EXP 19
11660: PUSH
11661: LD_EXP 19
11665: PUSH
11666: LD_INT 1
11668: PLUS
11669: ST_TO_ADDR
// DialogueOn ;
11670: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11674: LD_VAR 0 2
11678: PUSH
11679: LD_VAR 0 1
11683: ARRAY
11684: PPUSH
11685: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11689: LD_VAR 0 2
11693: PUSH
11694: LD_VAR 0 1
11698: ARRAY
11699: PPUSH
11700: LD_STRING D
11702: PUSH
11703: LD_VAR 0 3
11707: PUSH
11708: LD_VAR 0 1
11712: ARRAY
11713: STR
11714: PUSH
11715: LD_STRING -Stim-a-1
11717: STR
11718: PPUSH
11719: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: LD_VAR 0 2
11732: PPUSH
11733: LD_VAR 0 1
11737: PPUSH
11738: CALL_OW 3
11742: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11743: LD_ADDR_VAR 0 3
11747: PUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 3
11762: ST_TO_ADDR
// drugsTested := true ;
11763: LD_ADDR_EXP 6
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// DialogueOff ;
11771: CALL_OW 7
// break ;
11775: GO 11779
// end ;
11777: GO 11632
11779: POP
11780: POP
// until not tmp ;
11781: LD_VAR 0 2
11785: NOT
11786: IFFALSE 11610
// end ;
11788: PPOPN 3
11790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11791: LD_INT 22
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 34
11803: PUSH
11804: LD_INT 31
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 2
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 33
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PPUSH
11844: CALL_OW 69
11848: AND
11849: IFFALSE 11862
11851: GO 11853
11853: DISABLE
// remoteControlConstructed := true ;
11854: LD_ADDR_EXP 12
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
11862: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11863: LD_EXP 12
11867: IFFALSE 12167
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
11876: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11877: LD_ADDR_VAR 0 2
11881: PUSH
11882: LD_EXP 21
11886: PUSH
11887: LD_EXP 22
11891: PUSH
11892: LD_EXP 30
11896: PUSH
11897: LD_EXP 28
11901: PUSH
11902: LD_EXP 26
11906: PUSH
11907: LD_EXP 27
11911: PUSH
11912: LD_EXP 32
11916: PUSH
11917: LD_EXP 25
11921: PUSH
11922: LD_EXP 23
11926: PUSH
11927: LD_EXP 24
11931: PUSH
11932: LD_EXP 33
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11950: LD_ADDR_VAR 0 3
11954: PUSH
11955: LD_STRING H
11957: PUSH
11958: LD_STRING G
11960: PUSH
11961: LD_STRING O
11963: PUSH
11964: LD_STRING Mar
11966: PUSH
11967: LD_STRING K
11969: PUSH
11970: LD_STRING S
11972: PUSH
11973: LD_STRING Ks
11975: PUSH
11976: LD_STRING Kam
11978: PUSH
11979: LD_STRING M
11981: PUSH
11982: LD_STRING I
11984: PUSH
11985: LD_STRING A
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12001: LD_INT 35
12003: PPUSH
12004: CALL_OW 67
// for i := tmp downto 1 do
12008: LD_ADDR_VAR 0 1
12012: PUSH
12013: DOUBLE
12014: LD_VAR 0 2
12018: INC
12019: ST_TO_ADDR
12020: LD_INT 1
12022: PUSH
12023: FOR_DOWNTO
12024: IFFALSE 12158
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12026: LD_VAR 0 2
12030: PUSH
12031: LD_VAR 0 1
12035: ARRAY
12036: PPUSH
12037: CALL_OW 257
12041: PUSH
12042: LD_INT 3
12044: EQUAL
12045: PUSH
12046: LD_VAR 0 2
12050: PUSH
12051: LD_VAR 0 1
12055: ARRAY
12056: PPUSH
12057: CALL_OW 432
12061: AND
12062: IFFALSE 12156
// begin DialogueOn ;
12064: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12068: LD_VAR 0 2
12072: PUSH
12073: LD_VAR 0 1
12077: ARRAY
12078: PPUSH
12079: LD_STRING D
12081: PUSH
12082: LD_VAR 0 3
12086: PUSH
12087: LD_VAR 0 1
12091: ARRAY
12092: STR
12093: PUSH
12094: LD_STRING -RC-a-1
12096: STR
12097: PPUSH
12098: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_VAR 0 2
12111: PPUSH
12112: LD_VAR 0 1
12116: PPUSH
12117: CALL_OW 3
12121: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 3
12141: ST_TO_ADDR
// DialogueOff ;
12142: CALL_OW 7
// remoteControlTested := true ;
12146: LD_ADDR_EXP 7
12150: PUSH
12151: LD_INT 1
12153: ST_TO_ADDR
// break ;
12154: GO 12158
// end ;
12156: GO 12023
12158: POP
12159: POP
// until not tmp ;
12160: LD_VAR 0 2
12164: NOT
12165: IFFALSE 12001
// end ;
12167: PPOPN 3
12169: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12170: LD_EXP 7
12174: PUSH
12175: LD_EXP 28
12179: PPUSH
12180: CALL_OW 302
12184: AND
12185: IFFALSE 12214
12187: GO 12189
12189: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12190: LD_EXP 28
12194: PPUSH
12195: LD_STRING DMar-RC-a-2
12197: PPUSH
12198: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12202: LD_EXP 28
12206: PPUSH
12207: LD_STRING DMar-RC-a-3
12209: PPUSH
12210: CALL_OW 88
// end ;
12214: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12215: LD_EXP 14
12219: PUSH
12220: LD_EXP 21
12224: PPUSH
12225: LD_EXP 33
12229: PPUSH
12230: CALL_OW 296
12234: PUSH
12235: LD_INT 8
12237: LESS
12238: AND
12239: PUSH
12240: LD_INT 2
12242: PPUSH
12243: CALL_OW 463
12247: NOT
12248: AND
12249: PUSH
12250: LD_EXP 33
12254: PPUSH
12255: CALL_OW 302
12259: AND
12260: PUSH
12261: LD_EXP 21
12265: PPUSH
12266: CALL_OW 302
12270: AND
12271: IFFALSE 12449
12273: GO 12275
12275: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12276: LD_EXP 33
12280: PPUSH
12281: CALL_OW 310
12285: NOT
12286: IFFALSE 12302
// ComTurnUnit ( Aviradze , Heike ) ;
12288: LD_EXP 33
12292: PPUSH
12293: LD_EXP 21
12297: PPUSH
12298: CALL_OW 119
// if not IsInUnit ( Heike ) then
12302: LD_EXP 21
12306: PPUSH
12307: CALL_OW 310
12311: NOT
12312: IFFALSE 12328
// ComTurnUnit ( Heike , Aviradze ) ;
12314: LD_EXP 21
12318: PPUSH
12319: LD_EXP 33
12323: PPUSH
12324: CALL_OW 119
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12339: LD_EXP 33
12343: PPUSH
12344: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12348: LD_EXP 21
12352: PPUSH
12353: LD_STRING DH-Beria-1
12355: PPUSH
12356: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12360: LD_EXP 33
12364: PPUSH
12365: LD_STRING DA-Beria-2
12367: PPUSH
12368: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12372: LD_EXP 21
12376: PPUSH
12377: LD_STRING DH-Beria-3
12379: PPUSH
12380: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12384: LD_EXP 33
12388: PPUSH
12389: LD_STRING DA-Beria-4
12391: PPUSH
12392: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12396: LD_EXP 33
12400: PPUSH
12401: LD_STRING DA-Beria-5
12403: PPUSH
12404: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12408: LD_EXP 33
12412: PPUSH
12413: LD_STRING DA-Beria-6
12415: PPUSH
12416: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12420: LD_EXP 21
12424: PPUSH
12425: LD_STRING DA-Beria-7
12427: PPUSH
12428: CALL_OW 88
// DialogueOff ;
12432: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12436: LD_INT 52
12438: PPUSH
12439: LD_INT 2
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// end ;
12449: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12450: LD_EXP 26
12454: PPUSH
12455: CALL_OW 300
12459: PUSH
12460: LD_EXP 26
12464: PPUSH
12465: CALL_OW 256
12469: PUSH
12470: LD_INT 10
12472: LESS
12473: AND
12474: IFFALSE 12511
12476: GO 12478
12478: DISABLE
// begin DialogueOn ;
12479: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12483: LD_EXP 26
12487: PPUSH
12488: LD_STRING DK-Kdeath-1
12490: PPUSH
12491: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12495: LD_EXP 21
12499: PPUSH
12500: LD_STRING DH-Kdeath-2
12502: PPUSH
12503: CALL_OW 88
// DialogueOff ;
12507: CALL_OW 7
// end ;
12511: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12512: LD_INT 2
12514: PPUSH
12515: LD_EXP 39
12519: PPUSH
12520: CALL 1370 0 2
12524: IFFALSE 12541
12526: GO 12528
12528: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12529: LD_EXP 21
12533: PPUSH
12534: LD_STRING DH-Obj-1
12536: PPUSH
12537: CALL_OW 88
12541: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12542: LD_INT 2
12544: PPUSH
12545: LD_EXP 40
12549: PPUSH
12550: CALL 1370 0 2
12554: IFFALSE 12571
12556: GO 12558
12558: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12559: LD_EXP 21
12563: PPUSH
12564: LD_STRING DH-Obj-a-1
12566: PPUSH
12567: CALL_OW 88
12571: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12572: LD_EXP 10
12576: PUSH
12577: LD_OWVAR 1
12581: PUSH
12582: LD_INT 14700
12584: PUSH
12585: LD_INT 13650
12587: PUSH
12588: LD_INT 12600
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_OWVAR 67
12600: ARRAY
12601: GREATEREQUAL
12602: OR
12603: IFFALSE 12631
12605: GO 12607
12607: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12608: LD_INT 4200
12610: PPUSH
12611: LD_INT 5250
12613: PPUSH
12614: CALL_OW 12
12618: PPUSH
12619: CALL_OW 67
// convoyStarted := true ;
12623: LD_ADDR_EXP 17
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// end ;
12631: END
// every 0 0$1 trigger convoyStarted do
12632: LD_EXP 17
12636: IFFALSE 12720
12638: GO 12640
12640: DISABLE
// begin DialogueOn ;
12641: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12645: LD_EXP 29
12649: PPUSH
12650: LD_STRING DShar-Convoy-1
12652: PPUSH
12653: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12657: LD_EXP 21
12661: PPUSH
12662: LD_STRING DH-Convoy-2
12664: PPUSH
12665: CALL_OW 88
// DialogueOff ;
12669: CALL_OW 7
// PrepareConvoy ;
12673: CALL 4549 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
12677: LD_INT 5250
12679: PPUSH
12680: LD_INT 11550
12682: PPUSH
12683: CALL_OW 12
12687: PPUSH
12688: CALL_OW 67
// PrepareConvoy ;
12692: CALL 4549 0 0
// convoyCounter := convoyCounter - 1 ;
12696: LD_ADDR_EXP 16
12700: PUSH
12701: LD_EXP 16
12705: PUSH
12706: LD_INT 1
12708: MINUS
12709: ST_TO_ADDR
// until convoyCounter <= 0 ;
12710: LD_EXP 16
12714: PUSH
12715: LD_INT 0
12717: LESSEQUAL
12718: IFFALSE 12677
// end ;
12720: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12721: LD_EXP 15
12725: PUSH
12726: LD_INT 10
12728: GREATEREQUAL
12729: IFFALSE 12746
12731: GO 12733
12733: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12734: LD_EXP 31
12738: PPUSH
12739: LD_STRING DOm-Fail-1
12741: PPUSH
12742: CALL_OW 94
12746: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12747: LD_EXP 39
12751: NOT
12752: PUSH
12753: LD_EXP 40
12757: NOT
12758: AND
12759: IFFALSE 12771
12761: GO 12763
12763: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12764: LD_STRING RaiderDone
12766: PPUSH
12767: CALL_OW 337
12771: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12772: LD_INT 22
12774: PUSH
12775: LD_INT 2
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 33
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PPUSH
12796: CALL_OW 69
12800: PUSH
12801: LD_INT 3
12803: GREATEREQUAL
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 34
12817: PUSH
12818: LD_INT 31
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: PUSH
12834: LD_INT 2
12836: GREATEREQUAL
12837: AND
12838: IFFALSE 12850
12840: GO 12842
12842: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12843: LD_STRING RemoteControlDone
12845: PPUSH
12846: CALL_OW 337
12850: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
12851: LD_EXP 16
12855: PUSH
12856: LD_INT 1
12858: LESS
12859: PUSH
12860: LD_EXP 41
12864: PPUSH
12865: LD_INT 52
12867: PUSH
12868: EMPTY
12869: LIST
12870: PUSH
12871: LD_INT 21
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 72
12889: NOT
12890: AND
12891: PUSH
12892: LD_OWVAR 1
12896: PUSH
12897: LD_INT 126000
12899: GREATEREQUAL
12900: OR
12901: IFFALSE 13718
12903: GO 12905
12905: DISABLE
12906: LD_INT 0
12908: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12909: LD_STRING ReinforcementsDone
12911: PPUSH
12912: CALL_OW 337
// music_class := music_victory ;
12916: LD_ADDR_OWVAR 72
12920: PUSH
12921: LD_INT 4
12923: ST_TO_ADDR
// InGameOn ;
12924: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12928: LD_EXP 21
12932: PPUSH
12933: LD_STRING DH-end-1
12935: PPUSH
12936: CALL_OW 88
// wait ( 0 0$2 ) ;
12940: LD_INT 70
12942: PPUSH
12943: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12947: LD_EXP 29
12951: PPUSH
12952: LD_STRING DShar-end-2
12954: PPUSH
12955: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12959: LD_EXP 39
12963: NOT
12964: PUSH
12965: LD_EXP 40
12969: NOT
12970: AND
12971: IFFALSE 12987
// begin Say ( Heike , DH-end-3 ) ;
12973: LD_EXP 21
12977: PPUSH
12978: LD_STRING DH-end-3
12980: PPUSH
12981: CALL_OW 88
// end else
12985: GO 13084
// begin Say ( Heike , DH-end-a-3 ) ;
12987: LD_EXP 21
12991: PPUSH
12992: LD_STRING DH-end-a-3
12994: PPUSH
12995: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12999: LD_EXP 29
13003: PPUSH
13004: LD_STRING DShar-end-a-4
13006: PPUSH
13007: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13011: LD_EXP 21
13015: PPUSH
13016: LD_STRING DH-end-a-5
13018: PPUSH
13019: CALL_OW 88
// InGameOff ;
13023: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13027: LD_INT 35
13029: PPUSH
13030: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13034: LD_INT 22
13036: PUSH
13037: LD_INT 3
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 21
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PPUSH
13058: CALL_OW 69
13062: PUSH
13063: LD_INT 0
13065: EQUAL
13066: IFFALSE 13027
// InGameOn ;
13068: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13072: LD_EXP 21
13076: PPUSH
13077: LD_STRING DH-end-a-6
13079: PPUSH
13080: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13084: LD_EXP 29
13088: PPUSH
13089: LD_STRING DShar-end-3
13091: PPUSH
13092: CALL_OW 94
// if not flamethrowerBuilt then
13096: LD_EXP 20
13100: NOT
13101: IFFALSE 13110
// SetAchievement ( ACH_FIRE ) ;
13103: LD_STRING ACH_FIRE
13105: PPUSH
13106: CALL_OW 543
// if drugsTested then
13110: LD_EXP 6
13114: IFFALSE 13128
// AddMedal ( med1 , 1 ) else
13116: LD_STRING med1
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 101
13126: GO 13168
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13128: LD_INT 5
13130: PPUSH
13131: LD_INT 2
13133: PPUSH
13134: CALL_OW 321
13138: PUSH
13139: LD_INT 2
13141: EQUAL
13142: IFFALSE 13157
// AddMedal ( med1 , - 1 ) else
13144: LD_STRING med1
13146: PPUSH
13147: LD_INT 1
13149: NEG
13150: PPUSH
13151: CALL_OW 101
13155: GO 13168
// AddMedal ( med1 , - 2 ) ;
13157: LD_STRING med1
13159: PPUSH
13160: LD_INT 2
13162: NEG
13163: PPUSH
13164: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13168: LD_INT 22
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PPUSH
13192: CALL_OW 69
13196: PUSH
13197: LD_INT 3
13199: GREATEREQUAL
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 34
13213: PUSH
13214: LD_INT 31
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: PUSH
13230: LD_INT 1
13232: GREATEREQUAL
13233: AND
13234: IFFALSE 13248
// AddMedal ( med2 , 1 ) else
13236: LD_STRING med2
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: CALL_OW 101
13246: GO 13259
// AddMedal ( med2 , - 1 ) ;
13248: LD_STRING med2
13250: PPUSH
13251: LD_INT 1
13253: NEG
13254: PPUSH
13255: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13259: LD_EXP 15
13263: PUSH
13264: LD_INT 10
13266: PUSH
13267: LD_INT 8
13269: PUSH
13270: LD_INT 6
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: PUSH
13278: LD_OWVAR 67
13282: ARRAY
13283: LESS
13284: IFFALSE 13298
// AddMedal ( med3 , 1 ) else
13286: LD_STRING med3
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 101
13296: GO 13309
// AddMedal ( med3 , - 1 ) ;
13298: LD_STRING med3
13300: PPUSH
13301: LD_INT 1
13303: NEG
13304: PPUSH
13305: CALL_OW 101
// GiveMedals ( MAIN ) ;
13309: LD_STRING MAIN
13311: PPUSH
13312: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13316: LD_INT 22
13318: PUSH
13319: LD_INT 2
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 23
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 21
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: PPUSH
13351: CALL_OW 69
13355: PPUSH
13356: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13360: LD_EXP 15
13364: PPUSH
13365: LD_STRING 05_ConvoySavedCounter
13367: PPUSH
13368: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13372: LD_EXP 13
13376: PPUSH
13377: LD_STRING 05_Radar
13379: PPUSH
13380: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13384: LD_EXP 6
13388: PPUSH
13389: LD_STRING 05_DrugsTested
13391: PPUSH
13392: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13396: LD_INT 22
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 33
13408: PUSH
13409: LD_INT 2
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PUSH
13425: LD_INT 3
13427: GREATEREQUAL
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_INT 2
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 34
13441: PUSH
13442: LD_INT 31
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 69
13457: PUSH
13458: LD_INT 2
13460: GREATEREQUAL
13461: AND
13462: PPUSH
13463: LD_STRING 05_RemoteControl
13465: PPUSH
13466: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13470: LD_EXP 21
13474: PPUSH
13475: LD_STRING 05_Heike
13477: PPUSH
13478: CALL_OW 38
// if Aviradze then
13482: LD_EXP 33
13486: IFFALSE 13500
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13488: LD_EXP 33
13492: PPUSH
13493: LD_STRING 05_Aviradze
13495: PPUSH
13496: CALL_OW 38
// if Ibrahim then
13500: LD_EXP 24
13504: IFFALSE 13518
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13506: LD_EXP 24
13510: PPUSH
13511: LD_STRING 05_Ibrahim
13513: PPUSH
13514: CALL_OW 38
// if Kamil then
13518: LD_EXP 25
13522: IFFALSE 13536
// SaveCharacters ( Kamil , 05_Kamil ) ;
13524: LD_EXP 25
13528: PPUSH
13529: LD_STRING 05_Kamil
13531: PPUSH
13532: CALL_OW 38
// if Sophia then
13536: LD_EXP 27
13540: IFFALSE 13554
// SaveCharacters ( Sophia , 05_Sophia ) ;
13542: LD_EXP 27
13546: PPUSH
13547: LD_STRING 05_Sophia
13549: PPUSH
13550: CALL_OW 38
// if Kaia then
13554: LD_EXP 26
13558: IFFALSE 13572
// SaveCharacters ( Kaia , 05_Kaia ) ;
13560: LD_EXP 26
13564: PPUSH
13565: LD_STRING 05_Kaia
13567: PPUSH
13568: CALL_OW 38
// if Givi then
13572: LD_EXP 22
13576: IFFALSE 13590
// SaveCharacters ( Givi , 05_Givi ) ;
13578: LD_EXP 22
13582: PPUSH
13583: LD_STRING 05_Givi
13585: PPUSH
13586: CALL_OW 38
// if Mike then
13590: LD_EXP 23
13594: IFFALSE 13608
// SaveCharacters ( Mike , 05_Mike ) ;
13596: LD_EXP 23
13600: PPUSH
13601: LD_STRING 05_Mike
13603: PPUSH
13604: CALL_OW 38
// if Markov then
13608: LD_EXP 28
13612: IFFALSE 13626
// SaveCharacters ( Markov , 05_Markov ) ;
13614: LD_EXP 28
13618: PPUSH
13619: LD_STRING 05_Markov
13621: PPUSH
13622: CALL_OW 38
// if Kurt then
13626: LD_EXP 32
13630: IFFALSE 13644
// SaveCharacters ( Kurt , 05_Kurt ) ;
13632: LD_EXP 32
13636: PPUSH
13637: LD_STRING 05_Kurt
13639: PPUSH
13640: CALL_OW 38
// if heikeSecondSquad then
13644: LD_EXP 34
13648: IFFALSE 13662
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13650: LD_EXP 34
13654: PPUSH
13655: LD_STRING 05_others
13657: PPUSH
13658: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13662: LD_ADDR_VAR 0 1
13666: PUSH
13667: LD_INT 22
13669: PUSH
13670: LD_INT 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 23
13679: PUSH
13680: LD_INT 0
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PPUSH
13691: CALL_OW 69
13695: ST_TO_ADDR
// if tmp then
13696: LD_VAR 0 1
13700: IFFALSE 13714
// SaveCharacters ( tmp , 05_apes ) ;
13702: LD_VAR 0 1
13706: PPUSH
13707: LD_STRING 05_apes
13709: PPUSH
13710: CALL_OW 38
// YouWin ;
13714: CALL_OW 103
// end ; end_of_file
13718: PPOPN 1
13720: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13721: LD_EXP 9
13725: PUSH
13726: LD_INT 13
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: CALL_OW 287
13736: PUSH
13737: LD_INT 25
13739: LESS
13740: AND
13741: IFFALSE 13768
13743: GO 13745
13745: DISABLE
// begin enable ;
13746: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13747: LD_INT 1
13749: PPUSH
13750: LD_INT 5
13752: PPUSH
13753: CALL_OW 12
13757: PPUSH
13758: LD_INT 13
13760: PPUSH
13761: LD_INT 1
13763: PPUSH
13764: CALL_OW 55
// end ; end_of_file
13768: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13769: LD_INT 0
13771: PPUSH
// ar_miner := 81 ;
13772: LD_ADDR_EXP 51
13776: PUSH
13777: LD_INT 81
13779: ST_TO_ADDR
// ar_crane := 88 ;
13780: LD_ADDR_EXP 50
13784: PUSH
13785: LD_INT 88
13787: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13788: LD_ADDR_EXP 45
13792: PUSH
13793: LD_INT 89
13795: ST_TO_ADDR
// us_hack := 99 ;
13796: LD_ADDR_EXP 46
13800: PUSH
13801: LD_INT 99
13803: ST_TO_ADDR
// us_artillery := 97 ;
13804: LD_ADDR_EXP 47
13808: PUSH
13809: LD_INT 97
13811: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13812: LD_ADDR_EXP 48
13816: PUSH
13817: LD_INT 91
13819: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13820: LD_ADDR_EXP 49
13824: PUSH
13825: LD_INT 92
13827: ST_TO_ADDR
// ru_radar := 98 ;
13828: LD_ADDR_EXP 44
13832: PUSH
13833: LD_INT 98
13835: ST_TO_ADDR
// tech_Artillery := 80 ;
13836: LD_ADDR_EXP 52
13840: PUSH
13841: LD_INT 80
13843: ST_TO_ADDR
// tech_RadMat := 81 ;
13844: LD_ADDR_EXP 53
13848: PUSH
13849: LD_INT 81
13851: ST_TO_ADDR
// tech_BasicTools := 82 ;
13852: LD_ADDR_EXP 54
13856: PUSH
13857: LD_INT 82
13859: ST_TO_ADDR
// tech_Cargo := 83 ;
13860: LD_ADDR_EXP 55
13864: PUSH
13865: LD_INT 83
13867: ST_TO_ADDR
// tech_Track := 84 ;
13868: LD_ADDR_EXP 56
13872: PUSH
13873: LD_INT 84
13875: ST_TO_ADDR
// tech_Crane := 85 ;
13876: LD_ADDR_EXP 57
13880: PUSH
13881: LD_INT 85
13883: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13884: LD_ADDR_EXP 58
13888: PUSH
13889: LD_INT 86
13891: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13892: LD_ADDR_EXP 59
13896: PUSH
13897: LD_INT 87
13899: ST_TO_ADDR
// end ;
13900: LD_VAR 0 1
13904: RET
// every 1 do
13905: GO 13907
13907: DISABLE
// InitGlobalVariables ; end_of_file
13908: CALL 13769 0 0
13912: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13913: LD_INT 0
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13919: LD_VAR 0 1
13923: PPUSH
13924: CALL_OW 264
13928: PUSH
13929: LD_EXP 48
13933: EQUAL
13934: IFFALSE 14006
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13936: LD_INT 68
13938: PPUSH
13939: LD_VAR 0 1
13943: PPUSH
13944: CALL_OW 255
13948: PPUSH
13949: CALL_OW 321
13953: PUSH
13954: LD_INT 2
13956: EQUAL
13957: IFFALSE 13969
// eff := 70 else
13959: LD_ADDR_VAR 0 4
13963: PUSH
13964: LD_INT 70
13966: ST_TO_ADDR
13967: GO 13977
// eff := 30 ;
13969: LD_ADDR_VAR 0 4
13973: PUSH
13974: LD_INT 30
13976: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 250
13986: PPUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 251
13996: PPUSH
13997: LD_VAR 0 4
14001: PPUSH
14002: CALL_OW 495
// end ; end ;
14006: LD_VAR 0 2
14010: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14011: LD_INT 0
14013: PPUSH
// end ;
14014: LD_VAR 0 4
14018: RET
// export function SOS_Command ( cmd ) ; begin
14019: LD_INT 0
14021: PPUSH
// end ;
14022: LD_VAR 0 2
14026: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14027: LD_INT 0
14029: PPUSH
// if cmd = 121 then
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 121
14037: EQUAL
14038: IFFALSE 14040
// end ;
14040: LD_VAR 0 6
14044: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14045: LD_INT 0
14047: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14048: LD_VAR 0 1
14052: PUSH
14053: LD_INT 250
14055: EQUAL
14056: PUSH
14057: LD_VAR 0 2
14061: PPUSH
14062: CALL_OW 264
14066: PUSH
14067: LD_EXP 51
14071: EQUAL
14072: AND
14073: IFFALSE 14094
// MinerPlaceMine ( unit , x , y ) ;
14075: LD_VAR 0 2
14079: PPUSH
14080: LD_VAR 0 4
14084: PPUSH
14085: LD_VAR 0 5
14089: PPUSH
14090: CALL 16443 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14094: LD_VAR 0 1
14098: PUSH
14099: LD_INT 251
14101: EQUAL
14102: PUSH
14103: LD_VAR 0 2
14107: PPUSH
14108: CALL_OW 264
14112: PUSH
14113: LD_EXP 51
14117: EQUAL
14118: AND
14119: IFFALSE 14140
// MinerDetonateMine ( unit , x , y ) ;
14121: LD_VAR 0 2
14125: PPUSH
14126: LD_VAR 0 4
14130: PPUSH
14131: LD_VAR 0 5
14135: PPUSH
14136: CALL 16720 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14140: LD_VAR 0 1
14144: PUSH
14145: LD_INT 252
14147: EQUAL
14148: PUSH
14149: LD_VAR 0 2
14153: PPUSH
14154: CALL_OW 264
14158: PUSH
14159: LD_EXP 51
14163: EQUAL
14164: AND
14165: IFFALSE 14186
// MinerCreateMinefield ( unit , x , y ) ;
14167: LD_VAR 0 2
14171: PPUSH
14172: LD_VAR 0 4
14176: PPUSH
14177: LD_VAR 0 5
14181: PPUSH
14182: CALL 17137 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14186: LD_VAR 0 1
14190: PUSH
14191: LD_INT 253
14193: EQUAL
14194: PUSH
14195: LD_VAR 0 2
14199: PPUSH
14200: CALL_OW 257
14204: PUSH
14205: LD_INT 5
14207: EQUAL
14208: AND
14209: IFFALSE 14230
// ComBinocular ( unit , x , y ) ;
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_VAR 0 4
14220: PPUSH
14221: LD_VAR 0 5
14225: PPUSH
14226: CALL 17508 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14230: LD_VAR 0 1
14234: PUSH
14235: LD_INT 254
14237: EQUAL
14238: PUSH
14239: LD_VAR 0 2
14243: PPUSH
14244: CALL_OW 264
14248: PUSH
14249: LD_EXP 46
14253: EQUAL
14254: AND
14255: PUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: CALL_OW 263
14265: PUSH
14266: LD_INT 3
14268: EQUAL
14269: AND
14270: IFFALSE 14286
// HackDestroyVehicle ( unit , selectedUnit ) ;
14272: LD_VAR 0 2
14276: PPUSH
14277: LD_VAR 0 3
14281: PPUSH
14282: CALL 15803 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14286: LD_VAR 0 1
14290: PUSH
14291: LD_INT 255
14293: EQUAL
14294: PUSH
14295: LD_VAR 0 2
14299: PPUSH
14300: CALL_OW 264
14304: PUSH
14305: LD_INT 14
14307: PUSH
14308: LD_INT 53
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: IN
14315: AND
14316: PUSH
14317: LD_VAR 0 4
14321: PPUSH
14322: LD_VAR 0 5
14326: PPUSH
14327: CALL_OW 488
14331: AND
14332: IFFALSE 14356
// CutTreeXYR ( unit , x , y , 12 ) ;
14334: LD_VAR 0 2
14338: PPUSH
14339: LD_VAR 0 4
14343: PPUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: LD_INT 12
14351: PPUSH
14352: CALL 14369 0 4
// end ;
14356: LD_VAR 0 6
14360: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
14361: LD_INT 0
14363: PPUSH
// end ;
14364: LD_VAR 0 4
14368: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14380: LD_VAR 0 1
14384: NOT
14385: PUSH
14386: LD_VAR 0 2
14390: PPUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: CALL_OW 488
14400: NOT
14401: OR
14402: PUSH
14403: LD_VAR 0 4
14407: NOT
14408: OR
14409: IFFALSE 14413
// exit ;
14411: GO 14753
// list := [ ] ;
14413: LD_ADDR_VAR 0 13
14417: PUSH
14418: EMPTY
14419: ST_TO_ADDR
// if x - r < 0 then
14420: LD_VAR 0 2
14424: PUSH
14425: LD_VAR 0 4
14429: MINUS
14430: PUSH
14431: LD_INT 0
14433: LESS
14434: IFFALSE 14446
// min_x := 0 else
14436: LD_ADDR_VAR 0 7
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
14444: GO 14462
// min_x := x - r ;
14446: LD_ADDR_VAR 0 7
14450: PUSH
14451: LD_VAR 0 2
14455: PUSH
14456: LD_VAR 0 4
14460: MINUS
14461: ST_TO_ADDR
// if y - r < 0 then
14462: LD_VAR 0 3
14466: PUSH
14467: LD_VAR 0 4
14471: MINUS
14472: PUSH
14473: LD_INT 0
14475: LESS
14476: IFFALSE 14488
// min_y := 0 else
14478: LD_ADDR_VAR 0 8
14482: PUSH
14483: LD_INT 0
14485: ST_TO_ADDR
14486: GO 14504
// min_y := y - r ;
14488: LD_ADDR_VAR 0 8
14492: PUSH
14493: LD_VAR 0 3
14497: PUSH
14498: LD_VAR 0 4
14502: MINUS
14503: ST_TO_ADDR
// max_x := x + r ;
14504: LD_ADDR_VAR 0 9
14508: PUSH
14509: LD_VAR 0 2
14513: PUSH
14514: LD_VAR 0 4
14518: PLUS
14519: ST_TO_ADDR
// max_y := y + r ;
14520: LD_ADDR_VAR 0 10
14524: PUSH
14525: LD_VAR 0 3
14529: PUSH
14530: LD_VAR 0 4
14534: PLUS
14535: ST_TO_ADDR
// for _x = min_x to max_x do
14536: LD_ADDR_VAR 0 11
14540: PUSH
14541: DOUBLE
14542: LD_VAR 0 7
14546: DEC
14547: ST_TO_ADDR
14548: LD_VAR 0 9
14552: PUSH
14553: FOR_TO
14554: IFFALSE 14671
// for _y = min_y to max_y do
14556: LD_ADDR_VAR 0 12
14560: PUSH
14561: DOUBLE
14562: LD_VAR 0 8
14566: DEC
14567: ST_TO_ADDR
14568: LD_VAR 0 10
14572: PUSH
14573: FOR_TO
14574: IFFALSE 14667
// begin if not ValidHex ( _x , _y ) then
14576: LD_VAR 0 11
14580: PPUSH
14581: LD_VAR 0 12
14585: PPUSH
14586: CALL_OW 488
14590: NOT
14591: IFFALSE 14595
// continue ;
14593: GO 14573
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14595: LD_VAR 0 11
14599: PPUSH
14600: LD_VAR 0 12
14604: PPUSH
14605: CALL_OW 351
14609: PUSH
14610: LD_VAR 0 11
14614: PPUSH
14615: LD_VAR 0 12
14619: PPUSH
14620: CALL_OW 554
14624: AND
14625: IFFALSE 14665
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14627: LD_ADDR_VAR 0 13
14631: PUSH
14632: LD_VAR 0 13
14636: PPUSH
14637: LD_VAR 0 13
14641: PUSH
14642: LD_INT 1
14644: PLUS
14645: PPUSH
14646: LD_VAR 0 11
14650: PUSH
14651: LD_VAR 0 12
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PPUSH
14660: CALL_OW 2
14664: ST_TO_ADDR
// end ;
14665: GO 14573
14667: POP
14668: POP
14669: GO 14553
14671: POP
14672: POP
// if not list then
14673: LD_VAR 0 13
14677: NOT
14678: IFFALSE 14682
// exit ;
14680: GO 14753
// for i in list do
14682: LD_ADDR_VAR 0 6
14686: PUSH
14687: LD_VAR 0 13
14691: PUSH
14692: FOR_IN
14693: IFFALSE 14751
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14695: LD_VAR 0 1
14699: PPUSH
14700: LD_STRING M
14702: PUSH
14703: LD_VAR 0 6
14707: PUSH
14708: LD_INT 1
14710: ARRAY
14711: PUSH
14712: LD_VAR 0 6
14716: PUSH
14717: LD_INT 2
14719: ARRAY
14720: PUSH
14721: LD_INT 0
14723: PUSH
14724: LD_INT 0
14726: PUSH
14727: LD_INT 0
14729: PUSH
14730: LD_INT 0
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: PPUSH
14745: CALL_OW 447
14749: GO 14692
14751: POP
14752: POP
// end ;
14753: LD_VAR 0 5
14757: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14758: LD_EXP 62
14762: NOT
14763: IFFALSE 14813
14765: GO 14767
14767: DISABLE
// begin initHack := true ;
14768: LD_ADDR_EXP 62
14772: PUSH
14773: LD_INT 1
14775: ST_TO_ADDR
// hackTanks := [ ] ;
14776: LD_ADDR_EXP 63
14780: PUSH
14781: EMPTY
14782: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14783: LD_ADDR_EXP 64
14787: PUSH
14788: EMPTY
14789: ST_TO_ADDR
// hackLimit := 3 ;
14790: LD_ADDR_EXP 65
14794: PUSH
14795: LD_INT 3
14797: ST_TO_ADDR
// hackDist := 12 ;
14798: LD_ADDR_EXP 66
14802: PUSH
14803: LD_INT 12
14805: ST_TO_ADDR
// hackCounter := [ ] ;
14806: LD_ADDR_EXP 67
14810: PUSH
14811: EMPTY
14812: ST_TO_ADDR
// end ;
14813: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14814: LD_EXP 62
14818: PUSH
14819: LD_INT 34
14821: PUSH
14822: LD_EXP 46
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: AND
14836: IFFALSE 15091
14838: GO 14840
14840: DISABLE
14841: LD_INT 0
14843: PPUSH
14844: PPUSH
// begin enable ;
14845: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14846: LD_ADDR_VAR 0 1
14850: PUSH
14851: LD_INT 34
14853: PUSH
14854: LD_EXP 46
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: PUSH
14868: FOR_IN
14869: IFFALSE 15089
// begin if not i in hackTanks then
14871: LD_VAR 0 1
14875: PUSH
14876: LD_EXP 63
14880: IN
14881: NOT
14882: IFFALSE 14965
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14884: LD_ADDR_EXP 63
14888: PUSH
14889: LD_EXP 63
14893: PPUSH
14894: LD_EXP 63
14898: PUSH
14899: LD_INT 1
14901: PLUS
14902: PPUSH
14903: LD_VAR 0 1
14907: PPUSH
14908: CALL_OW 1
14912: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14913: LD_ADDR_EXP 64
14917: PUSH
14918: LD_EXP 64
14922: PPUSH
14923: LD_EXP 64
14927: PUSH
14928: LD_INT 1
14930: PLUS
14931: PPUSH
14932: EMPTY
14933: PPUSH
14934: CALL_OW 1
14938: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14939: LD_ADDR_EXP 67
14943: PUSH
14944: LD_EXP 67
14948: PPUSH
14949: LD_EXP 67
14953: PUSH
14954: LD_INT 1
14956: PLUS
14957: PPUSH
14958: EMPTY
14959: PPUSH
14960: CALL_OW 1
14964: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14965: LD_VAR 0 1
14969: PPUSH
14970: CALL_OW 302
14974: NOT
14975: IFFALSE 14988
// begin HackUnlinkAll ( i ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL 15094 0 1
// continue ;
14986: GO 14868
// end ; HackCheckCapturedStatus ( i ) ;
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL 15537 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14997: LD_ADDR_VAR 0 2
15001: PUSH
15002: LD_INT 81
15004: PUSH
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 255
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 33
15021: PUSH
15022: LD_INT 3
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 91
15031: PUSH
15032: LD_VAR 0 1
15036: PUSH
15037: LD_EXP 66
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 50
15049: PUSH
15050: EMPTY
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: ST_TO_ADDR
// if not tmp then
15064: LD_VAR 0 2
15068: NOT
15069: IFFALSE 15073
// continue ;
15071: GO 14868
// HackLink ( i , tmp ) ;
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL 15230 0 2
// end ;
15087: GO 14868
15089: POP
15090: POP
// end ;
15091: PPOPN 2
15093: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15094: LD_INT 0
15096: PPUSH
15097: PPUSH
15098: PPUSH
// if not hack in hackTanks then
15099: LD_VAR 0 1
15103: PUSH
15104: LD_EXP 63
15108: IN
15109: NOT
15110: IFFALSE 15114
// exit ;
15112: GO 15225
// index := GetElementIndex ( hackTanks , hack ) ;
15114: LD_ADDR_VAR 0 4
15118: PUSH
15119: LD_EXP 63
15123: PPUSH
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL 35826 0 2
15133: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15134: LD_EXP 64
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: IFFALSE 15225
// begin for i in hackTanksCaptured [ index ] do
15146: LD_ADDR_VAR 0 3
15150: PUSH
15151: LD_EXP 64
15155: PUSH
15156: LD_VAR 0 4
15160: ARRAY
15161: PUSH
15162: FOR_IN
15163: IFFALSE 15189
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15165: LD_VAR 0 3
15169: PUSH
15170: LD_INT 1
15172: ARRAY
15173: PPUSH
15174: LD_VAR 0 3
15178: PUSH
15179: LD_INT 2
15181: ARRAY
15182: PPUSH
15183: CALL_OW 235
15187: GO 15162
15189: POP
15190: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15191: LD_ADDR_EXP 64
15195: PUSH
15196: LD_EXP 64
15200: PPUSH
15201: LD_VAR 0 4
15205: PPUSH
15206: EMPTY
15207: PPUSH
15208: CALL_OW 1
15212: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15213: LD_VAR 0 1
15217: PPUSH
15218: LD_INT 0
15220: PPUSH
15221: CALL_OW 505
// end ; end ;
15225: LD_VAR 0 2
15229: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// if not hack in hackTanks or not vehicles then
15235: LD_VAR 0 1
15239: PUSH
15240: LD_EXP 63
15244: IN
15245: NOT
15246: PUSH
15247: LD_VAR 0 2
15251: NOT
15252: OR
15253: IFFALSE 15257
// exit ;
15255: GO 15532
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: LD_VAR 0 1
15266: PPUSH
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: LD_INT 1
15277: PPUSH
15278: CALL 36476 0 4
15282: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15283: LD_ADDR_VAR 0 5
15287: PUSH
15288: LD_EXP 63
15292: PPUSH
15293: LD_VAR 0 1
15297: PPUSH
15298: CALL 35826 0 2
15302: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15303: LD_EXP 64
15307: PUSH
15308: LD_VAR 0 5
15312: ARRAY
15313: PUSH
15314: LD_EXP 65
15318: LESS
15319: IFFALSE 15508
// begin for i := 1 to vehicles do
15321: LD_ADDR_VAR 0 4
15325: PUSH
15326: DOUBLE
15327: LD_INT 1
15329: DEC
15330: ST_TO_ADDR
15331: LD_VAR 0 2
15335: PUSH
15336: FOR_TO
15337: IFFALSE 15506
// begin if hackTanksCaptured [ index ] = hackLimit then
15339: LD_EXP 64
15343: PUSH
15344: LD_VAR 0 5
15348: ARRAY
15349: PUSH
15350: LD_EXP 65
15354: EQUAL
15355: IFFALSE 15359
// break ;
15357: GO 15506
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15359: LD_ADDR_EXP 67
15363: PUSH
15364: LD_EXP 67
15368: PPUSH
15369: LD_VAR 0 5
15373: PPUSH
15374: LD_EXP 67
15378: PUSH
15379: LD_VAR 0 5
15383: ARRAY
15384: PUSH
15385: LD_INT 1
15387: PLUS
15388: PPUSH
15389: CALL_OW 1
15393: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15394: LD_ADDR_EXP 64
15398: PUSH
15399: LD_EXP 64
15403: PPUSH
15404: LD_VAR 0 5
15408: PUSH
15409: LD_EXP 64
15413: PUSH
15414: LD_VAR 0 5
15418: ARRAY
15419: PUSH
15420: LD_INT 1
15422: PLUS
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: LD_VAR 0 2
15432: PUSH
15433: LD_VAR 0 4
15437: ARRAY
15438: PUSH
15439: LD_VAR 0 2
15443: PUSH
15444: LD_VAR 0 4
15448: ARRAY
15449: PPUSH
15450: CALL_OW 255
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL 36041 0 3
15463: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15464: LD_VAR 0 2
15468: PUSH
15469: LD_VAR 0 4
15473: ARRAY
15474: PPUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 255
15484: PPUSH
15485: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15489: LD_VAR 0 2
15493: PUSH
15494: LD_VAR 0 4
15498: ARRAY
15499: PPUSH
15500: CALL_OW 141
// end ;
15504: GO 15336
15506: POP
15507: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15508: LD_VAR 0 1
15512: PPUSH
15513: LD_EXP 64
15517: PUSH
15518: LD_VAR 0 5
15522: ARRAY
15523: PUSH
15524: LD_INT 0
15526: PLUS
15527: PPUSH
15528: CALL_OW 505
// end ;
15532: LD_VAR 0 3
15536: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15537: LD_INT 0
15539: PPUSH
15540: PPUSH
15541: PPUSH
15542: PPUSH
// if not hack in hackTanks then
15543: LD_VAR 0 1
15547: PUSH
15548: LD_EXP 63
15552: IN
15553: NOT
15554: IFFALSE 15558
// exit ;
15556: GO 15798
// index := GetElementIndex ( hackTanks , hack ) ;
15558: LD_ADDR_VAR 0 4
15562: PUSH
15563: LD_EXP 63
15567: PPUSH
15568: LD_VAR 0 1
15572: PPUSH
15573: CALL 35826 0 2
15577: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15578: LD_ADDR_VAR 0 3
15582: PUSH
15583: DOUBLE
15584: LD_EXP 64
15588: PUSH
15589: LD_VAR 0 4
15593: ARRAY
15594: INC
15595: ST_TO_ADDR
15596: LD_INT 1
15598: PUSH
15599: FOR_DOWNTO
15600: IFFALSE 15772
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15602: LD_ADDR_VAR 0 5
15606: PUSH
15607: LD_EXP 64
15611: PUSH
15612: LD_VAR 0 4
15616: ARRAY
15617: PUSH
15618: LD_VAR 0 3
15622: ARRAY
15623: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15624: LD_VAR 0 5
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: CALL_OW 302
15637: NOT
15638: PUSH
15639: LD_VAR 0 5
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: LD_VAR 0 1
15657: PPUSH
15658: CALL_OW 255
15662: NONEQUAL
15663: OR
15664: IFFALSE 15770
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15666: LD_VAR 0 5
15670: PUSH
15671: LD_INT 1
15673: ARRAY
15674: PPUSH
15675: CALL_OW 305
15679: PUSH
15680: LD_VAR 0 5
15684: PUSH
15685: LD_INT 1
15687: ARRAY
15688: PPUSH
15689: CALL_OW 255
15693: PUSH
15694: LD_VAR 0 1
15698: PPUSH
15699: CALL_OW 255
15703: EQUAL
15704: AND
15705: IFFALSE 15729
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15707: LD_VAR 0 5
15711: PUSH
15712: LD_INT 1
15714: ARRAY
15715: PPUSH
15716: LD_VAR 0 5
15720: PUSH
15721: LD_INT 2
15723: ARRAY
15724: PPUSH
15725: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15729: LD_ADDR_EXP 64
15733: PUSH
15734: LD_EXP 64
15738: PPUSH
15739: LD_VAR 0 4
15743: PPUSH
15744: LD_EXP 64
15748: PUSH
15749: LD_VAR 0 4
15753: ARRAY
15754: PPUSH
15755: LD_VAR 0 3
15759: PPUSH
15760: CALL_OW 3
15764: PPUSH
15765: CALL_OW 1
15769: ST_TO_ADDR
// end ; end ;
15770: GO 15599
15772: POP
15773: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15774: LD_VAR 0 1
15778: PPUSH
15779: LD_EXP 64
15783: PUSH
15784: LD_VAR 0 4
15788: ARRAY
15789: PUSH
15790: LD_INT 0
15792: PLUS
15793: PPUSH
15794: CALL_OW 505
// end ;
15798: LD_VAR 0 2
15802: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15803: LD_INT 0
15805: PPUSH
15806: PPUSH
15807: PPUSH
15808: PPUSH
// if not hack in hackTanks then
15809: LD_VAR 0 1
15813: PUSH
15814: LD_EXP 63
15818: IN
15819: NOT
15820: IFFALSE 15824
// exit ;
15822: GO 15909
// index := GetElementIndex ( hackTanks , hack ) ;
15824: LD_ADDR_VAR 0 5
15828: PUSH
15829: LD_EXP 63
15833: PPUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL 35826 0 2
15843: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15844: LD_ADDR_VAR 0 4
15848: PUSH
15849: DOUBLE
15850: LD_INT 1
15852: DEC
15853: ST_TO_ADDR
15854: LD_EXP 64
15858: PUSH
15859: LD_VAR 0 5
15863: ARRAY
15864: PUSH
15865: FOR_TO
15866: IFFALSE 15907
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15868: LD_EXP 64
15872: PUSH
15873: LD_VAR 0 5
15877: ARRAY
15878: PUSH
15879: LD_VAR 0 4
15883: ARRAY
15884: PUSH
15885: LD_INT 1
15887: ARRAY
15888: PUSH
15889: LD_VAR 0 2
15893: EQUAL
15894: IFFALSE 15905
// KillUnit ( vehicle ) ;
15896: LD_VAR 0 2
15900: PPUSH
15901: CALL_OW 66
15905: GO 15865
15907: POP
15908: POP
// end ;
15909: LD_VAR 0 3
15913: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
15914: LD_EXP 68
15918: NOT
15919: IFFALSE 15954
15921: GO 15923
15923: DISABLE
// begin initMiner := true ;
15924: LD_ADDR_EXP 68
15928: PUSH
15929: LD_INT 1
15931: ST_TO_ADDR
// minersList := [ ] ;
15932: LD_ADDR_EXP 69
15936: PUSH
15937: EMPTY
15938: ST_TO_ADDR
// minerMinesList := [ ] ;
15939: LD_ADDR_EXP 70
15943: PUSH
15944: EMPTY
15945: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
15946: LD_ADDR_EXP 71
15950: PUSH
15951: LD_INT 5
15953: ST_TO_ADDR
// end ;
15954: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
15955: LD_EXP 68
15959: PUSH
15960: LD_INT 34
15962: PUSH
15963: LD_EXP 51
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: AND
15977: IFFALSE 16440
15979: GO 15981
15981: DISABLE
15982: LD_INT 0
15984: PPUSH
15985: PPUSH
15986: PPUSH
15987: PPUSH
// begin enable ;
15988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
15989: LD_ADDR_VAR 0 1
15993: PUSH
15994: LD_INT 34
15996: PUSH
15997: LD_EXP 51
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 69
16010: PUSH
16011: FOR_IN
16012: IFFALSE 16084
// begin if not i in minersList then
16014: LD_VAR 0 1
16018: PUSH
16019: LD_EXP 69
16023: IN
16024: NOT
16025: IFFALSE 16082
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16027: LD_ADDR_EXP 69
16031: PUSH
16032: LD_EXP 69
16036: PPUSH
16037: LD_EXP 69
16041: PUSH
16042: LD_INT 1
16044: PLUS
16045: PPUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 1
16055: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16056: LD_ADDR_EXP 70
16060: PUSH
16061: LD_EXP 70
16065: PPUSH
16066: LD_EXP 70
16070: PUSH
16071: LD_INT 1
16073: PLUS
16074: PPUSH
16075: EMPTY
16076: PPUSH
16077: CALL_OW 1
16081: ST_TO_ADDR
// end end ;
16082: GO 16011
16084: POP
16085: POP
// for i := minerMinesList downto 1 do
16086: LD_ADDR_VAR 0 1
16090: PUSH
16091: DOUBLE
16092: LD_EXP 70
16096: INC
16097: ST_TO_ADDR
16098: LD_INT 1
16100: PUSH
16101: FOR_DOWNTO
16102: IFFALSE 16438
// begin if IsLive ( minersList [ i ] ) then
16104: LD_EXP 69
16108: PUSH
16109: LD_VAR 0 1
16113: ARRAY
16114: PPUSH
16115: CALL_OW 300
16119: IFFALSE 16147
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16121: LD_EXP 69
16125: PUSH
16126: LD_VAR 0 1
16130: ARRAY
16131: PPUSH
16132: LD_EXP 70
16136: PUSH
16137: LD_VAR 0 1
16141: ARRAY
16142: PPUSH
16143: CALL_OW 505
// if not minerMinesList [ i ] then
16147: LD_EXP 70
16151: PUSH
16152: LD_VAR 0 1
16156: ARRAY
16157: NOT
16158: IFFALSE 16162
// continue ;
16160: GO 16101
// for j := minerMinesList [ i ] downto 1 do
16162: LD_ADDR_VAR 0 2
16166: PUSH
16167: DOUBLE
16168: LD_EXP 70
16172: PUSH
16173: LD_VAR 0 1
16177: ARRAY
16178: INC
16179: ST_TO_ADDR
16180: LD_INT 1
16182: PUSH
16183: FOR_DOWNTO
16184: IFFALSE 16434
// begin side := GetSide ( minersList [ i ] ) ;
16186: LD_ADDR_VAR 0 3
16190: PUSH
16191: LD_EXP 69
16195: PUSH
16196: LD_VAR 0 1
16200: ARRAY
16201: PPUSH
16202: CALL_OW 255
16206: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16207: LD_ADDR_VAR 0 4
16211: PUSH
16212: LD_EXP 70
16216: PUSH
16217: LD_VAR 0 1
16221: ARRAY
16222: PUSH
16223: LD_VAR 0 2
16227: ARRAY
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: LD_EXP 70
16237: PUSH
16238: LD_VAR 0 1
16242: ARRAY
16243: PUSH
16244: LD_VAR 0 2
16248: ARRAY
16249: PUSH
16250: LD_INT 2
16252: ARRAY
16253: PPUSH
16254: CALL_OW 428
16258: ST_TO_ADDR
// if not tmp then
16259: LD_VAR 0 4
16263: NOT
16264: IFFALSE 16268
// continue ;
16266: GO 16183
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16268: LD_VAR 0 4
16272: PUSH
16273: LD_INT 81
16275: PUSH
16276: LD_VAR 0 3
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PPUSH
16285: CALL_OW 69
16289: IN
16290: PUSH
16291: LD_EXP 70
16295: PUSH
16296: LD_VAR 0 1
16300: ARRAY
16301: PUSH
16302: LD_VAR 0 2
16306: ARRAY
16307: PUSH
16308: LD_INT 1
16310: ARRAY
16311: PPUSH
16312: LD_EXP 70
16316: PUSH
16317: LD_VAR 0 1
16321: ARRAY
16322: PUSH
16323: LD_VAR 0 2
16327: ARRAY
16328: PUSH
16329: LD_INT 2
16331: ARRAY
16332: PPUSH
16333: CALL_OW 458
16337: AND
16338: IFFALSE 16432
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16340: LD_EXP 70
16344: PUSH
16345: LD_VAR 0 1
16349: ARRAY
16350: PUSH
16351: LD_VAR 0 2
16355: ARRAY
16356: PUSH
16357: LD_INT 1
16359: ARRAY
16360: PPUSH
16361: LD_EXP 70
16365: PUSH
16366: LD_VAR 0 1
16370: ARRAY
16371: PUSH
16372: LD_VAR 0 2
16376: ARRAY
16377: PUSH
16378: LD_INT 2
16380: ARRAY
16381: PPUSH
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16391: LD_ADDR_EXP 70
16395: PUSH
16396: LD_EXP 70
16400: PPUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: LD_EXP 70
16410: PUSH
16411: LD_VAR 0 1
16415: ARRAY
16416: PPUSH
16417: LD_VAR 0 2
16421: PPUSH
16422: CALL_OW 3
16426: PPUSH
16427: CALL_OW 1
16431: ST_TO_ADDR
// end ; end ;
16432: GO 16183
16434: POP
16435: POP
// end ;
16436: GO 16101
16438: POP
16439: POP
// end ;
16440: PPOPN 4
16442: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
16443: LD_INT 0
16445: PPUSH
16446: PPUSH
// result := false ;
16447: LD_ADDR_VAR 0 4
16451: PUSH
16452: LD_INT 0
16454: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 264
16464: PUSH
16465: LD_EXP 51
16469: EQUAL
16470: NOT
16471: IFFALSE 16475
// exit ;
16473: GO 16715
// index := GetElementIndex ( minersList , unit ) ;
16475: LD_ADDR_VAR 0 5
16479: PUSH
16480: LD_EXP 69
16484: PPUSH
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL 35826 0 2
16494: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16495: LD_EXP 70
16499: PUSH
16500: LD_VAR 0 5
16504: ARRAY
16505: PUSH
16506: LD_EXP 71
16510: GREATEREQUAL
16511: IFFALSE 16515
// exit ;
16513: GO 16715
// ComMoveXY ( unit , x , y ) ;
16515: LD_VAR 0 1
16519: PPUSH
16520: LD_VAR 0 2
16524: PPUSH
16525: LD_VAR 0 3
16529: PPUSH
16530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16534: LD_INT 35
16536: PPUSH
16537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16541: LD_VAR 0 1
16545: PPUSH
16546: LD_VAR 0 2
16550: PPUSH
16551: LD_VAR 0 3
16555: PPUSH
16556: CALL 66210 0 3
16560: NOT
16561: PUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 314
16571: AND
16572: IFFALSE 16576
// exit ;
16574: GO 16715
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16576: LD_VAR 0 2
16580: PPUSH
16581: LD_VAR 0 3
16585: PPUSH
16586: CALL_OW 428
16590: PUSH
16591: LD_VAR 0 1
16595: EQUAL
16596: PUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 314
16606: NOT
16607: AND
16608: IFFALSE 16534
// PlaySoundXY ( x , y , PlantMine ) ;
16610: LD_VAR 0 2
16614: PPUSH
16615: LD_VAR 0 3
16619: PPUSH
16620: LD_STRING PlantMine
16622: PPUSH
16623: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16627: LD_VAR 0 2
16631: PPUSH
16632: LD_VAR 0 3
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 255
16646: PPUSH
16647: LD_INT 0
16649: PPUSH
16650: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16654: LD_ADDR_EXP 70
16658: PUSH
16659: LD_EXP 70
16663: PPUSH
16664: LD_VAR 0 5
16668: PUSH
16669: LD_EXP 70
16673: PUSH
16674: LD_VAR 0 5
16678: ARRAY
16679: PUSH
16680: LD_INT 1
16682: PLUS
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PPUSH
16688: LD_VAR 0 2
16692: PUSH
16693: LD_VAR 0 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PPUSH
16702: CALL 36041 0 3
16706: ST_TO_ADDR
// result := true ;
16707: LD_ADDR_VAR 0 4
16711: PUSH
16712: LD_INT 1
16714: ST_TO_ADDR
// end ;
16715: LD_VAR 0 4
16719: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16720: LD_INT 0
16722: PPUSH
16723: PPUSH
16724: PPUSH
// if not unit in minersList then
16725: LD_VAR 0 1
16729: PUSH
16730: LD_EXP 69
16734: IN
16735: NOT
16736: IFFALSE 16740
// exit ;
16738: GO 17132
// index := GetElementIndex ( minersList , unit ) ;
16740: LD_ADDR_VAR 0 6
16744: PUSH
16745: LD_EXP 69
16749: PPUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL 35826 0 2
16759: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
16760: LD_ADDR_VAR 0 5
16764: PUSH
16765: DOUBLE
16766: LD_EXP 70
16770: PUSH
16771: LD_VAR 0 6
16775: ARRAY
16776: INC
16777: ST_TO_ADDR
16778: LD_INT 1
16780: PUSH
16781: FOR_DOWNTO
16782: IFFALSE 16943
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16784: LD_EXP 70
16788: PUSH
16789: LD_VAR 0 6
16793: ARRAY
16794: PUSH
16795: LD_VAR 0 5
16799: ARRAY
16800: PUSH
16801: LD_INT 1
16803: ARRAY
16804: PUSH
16805: LD_VAR 0 2
16809: EQUAL
16810: PUSH
16811: LD_EXP 70
16815: PUSH
16816: LD_VAR 0 6
16820: ARRAY
16821: PUSH
16822: LD_VAR 0 5
16826: ARRAY
16827: PUSH
16828: LD_INT 2
16830: ARRAY
16831: PUSH
16832: LD_VAR 0 3
16836: EQUAL
16837: AND
16838: IFFALSE 16941
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16840: LD_EXP 70
16844: PUSH
16845: LD_VAR 0 6
16849: ARRAY
16850: PUSH
16851: LD_VAR 0 5
16855: ARRAY
16856: PUSH
16857: LD_INT 1
16859: ARRAY
16860: PPUSH
16861: LD_EXP 70
16865: PUSH
16866: LD_VAR 0 6
16870: ARRAY
16871: PUSH
16872: LD_VAR 0 5
16876: ARRAY
16877: PUSH
16878: LD_INT 2
16880: ARRAY
16881: PPUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 255
16891: PPUSH
16892: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16896: LD_ADDR_EXP 70
16900: PUSH
16901: LD_EXP 70
16905: PPUSH
16906: LD_VAR 0 6
16910: PPUSH
16911: LD_EXP 70
16915: PUSH
16916: LD_VAR 0 6
16920: ARRAY
16921: PPUSH
16922: LD_VAR 0 5
16926: PPUSH
16927: CALL_OW 3
16931: PPUSH
16932: CALL_OW 1
16936: ST_TO_ADDR
// exit ;
16937: POP
16938: POP
16939: GO 17132
// end ; end ;
16941: GO 16781
16943: POP
16944: POP
// for i := minerMinesList [ index ] downto 1 do
16945: LD_ADDR_VAR 0 5
16949: PUSH
16950: DOUBLE
16951: LD_EXP 70
16955: PUSH
16956: LD_VAR 0 6
16960: ARRAY
16961: INC
16962: ST_TO_ADDR
16963: LD_INT 1
16965: PUSH
16966: FOR_DOWNTO
16967: IFFALSE 17130
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
16969: LD_EXP 70
16973: PUSH
16974: LD_VAR 0 6
16978: ARRAY
16979: PUSH
16980: LD_VAR 0 5
16984: ARRAY
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: PPUSH
16990: LD_EXP 70
16994: PUSH
16995: LD_VAR 0 6
16999: ARRAY
17000: PUSH
17001: LD_VAR 0 5
17005: ARRAY
17006: PUSH
17007: LD_INT 2
17009: ARRAY
17010: PPUSH
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_VAR 0 3
17020: PPUSH
17021: CALL_OW 298
17025: PUSH
17026: LD_INT 6
17028: LESS
17029: IFFALSE 17128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17031: LD_EXP 70
17035: PUSH
17036: LD_VAR 0 6
17040: ARRAY
17041: PUSH
17042: LD_VAR 0 5
17046: ARRAY
17047: PUSH
17048: LD_INT 1
17050: ARRAY
17051: PPUSH
17052: LD_EXP 70
17056: PUSH
17057: LD_VAR 0 6
17061: ARRAY
17062: PUSH
17063: LD_VAR 0 5
17067: ARRAY
17068: PUSH
17069: LD_INT 2
17071: ARRAY
17072: PPUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 255
17082: PPUSH
17083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17087: LD_ADDR_EXP 70
17091: PUSH
17092: LD_EXP 70
17096: PPUSH
17097: LD_VAR 0 6
17101: PPUSH
17102: LD_EXP 70
17106: PUSH
17107: LD_VAR 0 6
17111: ARRAY
17112: PPUSH
17113: LD_VAR 0 5
17117: PPUSH
17118: CALL_OW 3
17122: PPUSH
17123: CALL_OW 1
17127: ST_TO_ADDR
// end ; end ;
17128: GO 16966
17130: POP
17131: POP
// end ;
17132: LD_VAR 0 4
17136: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17137: LD_INT 0
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
17146: PPUSH
17147: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 264
17157: PUSH
17158: LD_EXP 51
17162: EQUAL
17163: NOT
17164: PUSH
17165: LD_VAR 0 1
17169: PUSH
17170: LD_EXP 69
17174: IN
17175: NOT
17176: OR
17177: IFFALSE 17181
// exit ;
17179: GO 17503
// index := GetElementIndex ( minersList , unit ) ;
17181: LD_ADDR_VAR 0 6
17185: PUSH
17186: LD_EXP 69
17190: PPUSH
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL 35826 0 2
17200: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17201: LD_ADDR_VAR 0 8
17205: PUSH
17206: LD_EXP 71
17210: PUSH
17211: LD_EXP 70
17215: PUSH
17216: LD_VAR 0 6
17220: ARRAY
17221: MINUS
17222: ST_TO_ADDR
// if not minesFreeAmount then
17223: LD_VAR 0 8
17227: NOT
17228: IFFALSE 17232
// exit ;
17230: GO 17503
// tmp := [ ] ;
17232: LD_ADDR_VAR 0 7
17236: PUSH
17237: EMPTY
17238: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17239: LD_ADDR_VAR 0 5
17243: PUSH
17244: DOUBLE
17245: LD_INT 1
17247: DEC
17248: ST_TO_ADDR
17249: LD_VAR 0 8
17253: PUSH
17254: FOR_TO
17255: IFFALSE 17450
// begin _d := rand ( 0 , 5 ) ;
17257: LD_ADDR_VAR 0 11
17261: PUSH
17262: LD_INT 0
17264: PPUSH
17265: LD_INT 5
17267: PPUSH
17268: CALL_OW 12
17272: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17273: LD_ADDR_VAR 0 12
17277: PUSH
17278: LD_INT 2
17280: PPUSH
17281: LD_INT 6
17283: PPUSH
17284: CALL_OW 12
17288: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17289: LD_ADDR_VAR 0 9
17293: PUSH
17294: LD_VAR 0 2
17298: PPUSH
17299: LD_VAR 0 11
17303: PPUSH
17304: LD_VAR 0 12
17308: PPUSH
17309: CALL_OW 272
17313: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17314: LD_ADDR_VAR 0 10
17318: PUSH
17319: LD_VAR 0 3
17323: PPUSH
17324: LD_VAR 0 11
17328: PPUSH
17329: LD_VAR 0 12
17333: PPUSH
17334: CALL_OW 273
17338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17339: LD_VAR 0 9
17343: PPUSH
17344: LD_VAR 0 10
17348: PPUSH
17349: CALL_OW 488
17353: PUSH
17354: LD_VAR 0 9
17358: PUSH
17359: LD_VAR 0 10
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_VAR 0 7
17372: IN
17373: NOT
17374: AND
17375: PUSH
17376: LD_VAR 0 9
17380: PPUSH
17381: LD_VAR 0 10
17385: PPUSH
17386: CALL_OW 458
17390: NOT
17391: AND
17392: IFFALSE 17434
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17394: LD_ADDR_VAR 0 7
17398: PUSH
17399: LD_VAR 0 7
17403: PPUSH
17404: LD_VAR 0 7
17408: PUSH
17409: LD_INT 1
17411: PLUS
17412: PPUSH
17413: LD_VAR 0 9
17417: PUSH
17418: LD_VAR 0 10
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PPUSH
17427: CALL_OW 1
17431: ST_TO_ADDR
17432: GO 17448
// i := i - 1 ;
17434: LD_ADDR_VAR 0 5
17438: PUSH
17439: LD_VAR 0 5
17443: PUSH
17444: LD_INT 1
17446: MINUS
17447: ST_TO_ADDR
// end ;
17448: GO 17254
17450: POP
17451: POP
// for i in tmp do
17452: LD_ADDR_VAR 0 5
17456: PUSH
17457: LD_VAR 0 7
17461: PUSH
17462: FOR_IN
17463: IFFALSE 17501
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17465: LD_VAR 0 1
17469: PPUSH
17470: LD_VAR 0 5
17474: PUSH
17475: LD_INT 1
17477: ARRAY
17478: PPUSH
17479: LD_VAR 0 5
17483: PUSH
17484: LD_INT 2
17486: ARRAY
17487: PPUSH
17488: CALL 16443 0 3
17492: NOT
17493: IFFALSE 17499
// exit ;
17495: POP
17496: POP
17497: GO 17503
17499: GO 17462
17501: POP
17502: POP
// end ;
17503: LD_VAR 0 4
17507: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
17508: LD_INT 0
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
// if not GetClass ( unit ) = class_sniper then
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 257
17526: PUSH
17527: LD_INT 5
17529: EQUAL
17530: NOT
17531: IFFALSE 17535
// exit ;
17533: GO 17923
// dist := 8 ;
17535: LD_ADDR_VAR 0 5
17539: PUSH
17540: LD_INT 8
17542: ST_TO_ADDR
// viewRange := 12 ;
17543: LD_ADDR_VAR 0 7
17547: PUSH
17548: LD_INT 12
17550: ST_TO_ADDR
// side := GetSide ( unit ) ;
17551: LD_ADDR_VAR 0 6
17555: PUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 255
17565: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17566: LD_INT 61
17568: PPUSH
17569: LD_VAR 0 6
17573: PPUSH
17574: CALL_OW 321
17578: PUSH
17579: LD_INT 2
17581: EQUAL
17582: IFFALSE 17592
// viewRange := 16 ;
17584: LD_ADDR_VAR 0 7
17588: PUSH
17589: LD_INT 16
17591: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_VAR 0 3
17606: PPUSH
17607: CALL_OW 297
17611: PUSH
17612: LD_VAR 0 5
17616: GREATER
17617: IFFALSE 17696
// begin ComMoveXY ( unit , x , y ) ;
17619: LD_VAR 0 1
17623: PPUSH
17624: LD_VAR 0 2
17628: PPUSH
17629: LD_VAR 0 3
17633: PPUSH
17634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17638: LD_INT 35
17640: PPUSH
17641: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_VAR 0 2
17654: PPUSH
17655: LD_VAR 0 3
17659: PPUSH
17660: CALL 66210 0 3
17664: NOT
17665: IFFALSE 17669
// exit ;
17667: GO 17923
// until GetDistUnitXY ( unit , x , y ) < dist ;
17669: LD_VAR 0 1
17673: PPUSH
17674: LD_VAR 0 2
17678: PPUSH
17679: LD_VAR 0 3
17683: PPUSH
17684: CALL_OW 297
17688: PUSH
17689: LD_VAR 0 5
17693: LESS
17694: IFFALSE 17638
// end ; ComTurnXY ( unit , x , y ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_VAR 0 2
17705: PPUSH
17706: LD_VAR 0 3
17710: PPUSH
17711: CALL_OW 118
// wait ( 5 ) ;
17715: LD_INT 5
17717: PPUSH
17718: CALL_OW 67
// _d := GetDir ( unit ) ;
17722: LD_ADDR_VAR 0 10
17726: PUSH
17727: LD_VAR 0 1
17731: PPUSH
17732: CALL_OW 254
17736: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
17737: LD_ADDR_VAR 0 8
17741: PUSH
17742: LD_VAR 0 1
17746: PPUSH
17747: CALL_OW 250
17751: PPUSH
17752: LD_VAR 0 10
17756: PPUSH
17757: LD_VAR 0 5
17761: PPUSH
17762: CALL_OW 272
17766: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
17767: LD_ADDR_VAR 0 9
17771: PUSH
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL_OW 251
17781: PPUSH
17782: LD_VAR 0 10
17786: PPUSH
17787: LD_VAR 0 5
17791: PPUSH
17792: CALL_OW 273
17796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17797: LD_VAR 0 8
17801: PPUSH
17802: LD_VAR 0 9
17806: PPUSH
17807: CALL_OW 488
17811: NOT
17812: IFFALSE 17816
// exit ;
17814: GO 17923
// ComAnimCustom ( unit , 1 ) ;
17816: LD_VAR 0 1
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17828: LD_VAR 0 8
17832: PPUSH
17833: LD_VAR 0 9
17837: PPUSH
17838: LD_VAR 0 6
17842: PPUSH
17843: LD_VAR 0 7
17847: PPUSH
17848: CALL_OW 330
// repeat wait ( 1 ) ;
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 316
17868: PUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 314
17878: OR
17879: PUSH
17880: LD_VAR 0 1
17884: PPUSH
17885: CALL_OW 302
17889: NOT
17890: OR
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 301
17901: OR
17902: IFFALSE 17852
// RemoveSeeing ( _x , _y , side ) ;
17904: LD_VAR 0 8
17908: PPUSH
17909: LD_VAR 0 9
17913: PPUSH
17914: LD_VAR 0 6
17918: PPUSH
17919: CALL_OW 331
// end ; end_of_file
17923: LD_VAR 0 4
17927: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17928: LD_VAR 0 2
17932: PUSH
17933: LD_INT 100
17935: EQUAL
17936: IFFALSE 18885
// begin if not StreamModeActive then
17938: LD_EXP 72
17942: NOT
17943: IFFALSE 17953
// StreamModeActive := true ;
17945: LD_ADDR_EXP 72
17949: PUSH
17950: LD_INT 1
17952: ST_TO_ADDR
// if p3 = 0 then
17953: LD_VAR 0 3
17957: PUSH
17958: LD_INT 0
17960: EQUAL
17961: IFFALSE 17967
// InitStreamMode ;
17963: CALL 19043 0 0
// if p3 = 1 then
17967: LD_VAR 0 3
17971: PUSH
17972: LD_INT 1
17974: EQUAL
17975: IFFALSE 17985
// sRocket := true ;
17977: LD_ADDR_EXP 77
17981: PUSH
17982: LD_INT 1
17984: ST_TO_ADDR
// if p3 = 2 then
17985: LD_VAR 0 3
17989: PUSH
17990: LD_INT 2
17992: EQUAL
17993: IFFALSE 18003
// sSpeed := true ;
17995: LD_ADDR_EXP 76
17999: PUSH
18000: LD_INT 1
18002: ST_TO_ADDR
// if p3 = 3 then
18003: LD_VAR 0 3
18007: PUSH
18008: LD_INT 3
18010: EQUAL
18011: IFFALSE 18021
// sEngine := true ;
18013: LD_ADDR_EXP 78
18017: PUSH
18018: LD_INT 1
18020: ST_TO_ADDR
// if p3 = 4 then
18021: LD_VAR 0 3
18025: PUSH
18026: LD_INT 4
18028: EQUAL
18029: IFFALSE 18039
// sSpec := true ;
18031: LD_ADDR_EXP 75
18035: PUSH
18036: LD_INT 1
18038: ST_TO_ADDR
// if p3 = 5 then
18039: LD_VAR 0 3
18043: PUSH
18044: LD_INT 5
18046: EQUAL
18047: IFFALSE 18057
// sLevel := true ;
18049: LD_ADDR_EXP 79
18053: PUSH
18054: LD_INT 1
18056: ST_TO_ADDR
// if p3 = 6 then
18057: LD_VAR 0 3
18061: PUSH
18062: LD_INT 6
18064: EQUAL
18065: IFFALSE 18075
// sArmoury := true ;
18067: LD_ADDR_EXP 80
18071: PUSH
18072: LD_INT 1
18074: ST_TO_ADDR
// if p3 = 7 then
18075: LD_VAR 0 3
18079: PUSH
18080: LD_INT 7
18082: EQUAL
18083: IFFALSE 18093
// sRadar := true ;
18085: LD_ADDR_EXP 81
18089: PUSH
18090: LD_INT 1
18092: ST_TO_ADDR
// if p3 = 8 then
18093: LD_VAR 0 3
18097: PUSH
18098: LD_INT 8
18100: EQUAL
18101: IFFALSE 18111
// sBunker := true ;
18103: LD_ADDR_EXP 82
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// if p3 = 9 then
18111: LD_VAR 0 3
18115: PUSH
18116: LD_INT 9
18118: EQUAL
18119: IFFALSE 18129
// sHack := true ;
18121: LD_ADDR_EXP 83
18125: PUSH
18126: LD_INT 1
18128: ST_TO_ADDR
// if p3 = 10 then
18129: LD_VAR 0 3
18133: PUSH
18134: LD_INT 10
18136: EQUAL
18137: IFFALSE 18147
// sFire := true ;
18139: LD_ADDR_EXP 84
18143: PUSH
18144: LD_INT 1
18146: ST_TO_ADDR
// if p3 = 11 then
18147: LD_VAR 0 3
18151: PUSH
18152: LD_INT 11
18154: EQUAL
18155: IFFALSE 18165
// sRefresh := true ;
18157: LD_ADDR_EXP 85
18161: PUSH
18162: LD_INT 1
18164: ST_TO_ADDR
// if p3 = 12 then
18165: LD_VAR 0 3
18169: PUSH
18170: LD_INT 12
18172: EQUAL
18173: IFFALSE 18183
// sExp := true ;
18175: LD_ADDR_EXP 86
18179: PUSH
18180: LD_INT 1
18182: ST_TO_ADDR
// if p3 = 13 then
18183: LD_VAR 0 3
18187: PUSH
18188: LD_INT 13
18190: EQUAL
18191: IFFALSE 18201
// sDepot := true ;
18193: LD_ADDR_EXP 87
18197: PUSH
18198: LD_INT 1
18200: ST_TO_ADDR
// if p3 = 14 then
18201: LD_VAR 0 3
18205: PUSH
18206: LD_INT 14
18208: EQUAL
18209: IFFALSE 18219
// sFlag := true ;
18211: LD_ADDR_EXP 88
18215: PUSH
18216: LD_INT 1
18218: ST_TO_ADDR
// if p3 = 15 then
18219: LD_VAR 0 3
18223: PUSH
18224: LD_INT 15
18226: EQUAL
18227: IFFALSE 18237
// sKamikadze := true ;
18229: LD_ADDR_EXP 96
18233: PUSH
18234: LD_INT 1
18236: ST_TO_ADDR
// if p3 = 16 then
18237: LD_VAR 0 3
18241: PUSH
18242: LD_INT 16
18244: EQUAL
18245: IFFALSE 18255
// sTroll := true ;
18247: LD_ADDR_EXP 97
18251: PUSH
18252: LD_INT 1
18254: ST_TO_ADDR
// if p3 = 17 then
18255: LD_VAR 0 3
18259: PUSH
18260: LD_INT 17
18262: EQUAL
18263: IFFALSE 18273
// sSlow := true ;
18265: LD_ADDR_EXP 98
18269: PUSH
18270: LD_INT 1
18272: ST_TO_ADDR
// if p3 = 18 then
18273: LD_VAR 0 3
18277: PUSH
18278: LD_INT 18
18280: EQUAL
18281: IFFALSE 18291
// sLack := true ;
18283: LD_ADDR_EXP 99
18287: PUSH
18288: LD_INT 1
18290: ST_TO_ADDR
// if p3 = 19 then
18291: LD_VAR 0 3
18295: PUSH
18296: LD_INT 19
18298: EQUAL
18299: IFFALSE 18309
// sTank := true ;
18301: LD_ADDR_EXP 101
18305: PUSH
18306: LD_INT 1
18308: ST_TO_ADDR
// if p3 = 20 then
18309: LD_VAR 0 3
18313: PUSH
18314: LD_INT 20
18316: EQUAL
18317: IFFALSE 18327
// sRemote := true ;
18319: LD_ADDR_EXP 102
18323: PUSH
18324: LD_INT 1
18326: ST_TO_ADDR
// if p3 = 21 then
18327: LD_VAR 0 3
18331: PUSH
18332: LD_INT 21
18334: EQUAL
18335: IFFALSE 18345
// sPowell := true ;
18337: LD_ADDR_EXP 103
18341: PUSH
18342: LD_INT 1
18344: ST_TO_ADDR
// if p3 = 22 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 22
18352: EQUAL
18353: IFFALSE 18363
// sTeleport := true ;
18355: LD_ADDR_EXP 106
18359: PUSH
18360: LD_INT 1
18362: ST_TO_ADDR
// if p3 = 23 then
18363: LD_VAR 0 3
18367: PUSH
18368: LD_INT 23
18370: EQUAL
18371: IFFALSE 18381
// sOilTower := true ;
18373: LD_ADDR_EXP 108
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// if p3 = 24 then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 24
18388: EQUAL
18389: IFFALSE 18399
// sShovel := true ;
18391: LD_ADDR_EXP 109
18395: PUSH
18396: LD_INT 1
18398: ST_TO_ADDR
// if p3 = 25 then
18399: LD_VAR 0 3
18403: PUSH
18404: LD_INT 25
18406: EQUAL
18407: IFFALSE 18417
// sSheik := true ;
18409: LD_ADDR_EXP 110
18413: PUSH
18414: LD_INT 1
18416: ST_TO_ADDR
// if p3 = 26 then
18417: LD_VAR 0 3
18421: PUSH
18422: LD_INT 26
18424: EQUAL
18425: IFFALSE 18435
// sEarthquake := true ;
18427: LD_ADDR_EXP 112
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// if p3 = 27 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_INT 27
18442: EQUAL
18443: IFFALSE 18453
// sAI := true ;
18445: LD_ADDR_EXP 113
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if p3 = 28 then
18453: LD_VAR 0 3
18457: PUSH
18458: LD_INT 28
18460: EQUAL
18461: IFFALSE 18471
// sCargo := true ;
18463: LD_ADDR_EXP 116
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// if p3 = 29 then
18471: LD_VAR 0 3
18475: PUSH
18476: LD_INT 29
18478: EQUAL
18479: IFFALSE 18489
// sDLaser := true ;
18481: LD_ADDR_EXP 117
18485: PUSH
18486: LD_INT 1
18488: ST_TO_ADDR
// if p3 = 30 then
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 30
18496: EQUAL
18497: IFFALSE 18507
// sExchange := true ;
18499: LD_ADDR_EXP 118
18503: PUSH
18504: LD_INT 1
18506: ST_TO_ADDR
// if p3 = 31 then
18507: LD_VAR 0 3
18511: PUSH
18512: LD_INT 31
18514: EQUAL
18515: IFFALSE 18525
// sFac := true ;
18517: LD_ADDR_EXP 119
18521: PUSH
18522: LD_INT 1
18524: ST_TO_ADDR
// if p3 = 32 then
18525: LD_VAR 0 3
18529: PUSH
18530: LD_INT 32
18532: EQUAL
18533: IFFALSE 18543
// sPower := true ;
18535: LD_ADDR_EXP 120
18539: PUSH
18540: LD_INT 1
18542: ST_TO_ADDR
// if p3 = 33 then
18543: LD_VAR 0 3
18547: PUSH
18548: LD_INT 33
18550: EQUAL
18551: IFFALSE 18561
// sRandom := true ;
18553: LD_ADDR_EXP 121
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// if p3 = 34 then
18561: LD_VAR 0 3
18565: PUSH
18566: LD_INT 34
18568: EQUAL
18569: IFFALSE 18579
// sShield := true ;
18571: LD_ADDR_EXP 122
18575: PUSH
18576: LD_INT 1
18578: ST_TO_ADDR
// if p3 = 35 then
18579: LD_VAR 0 3
18583: PUSH
18584: LD_INT 35
18586: EQUAL
18587: IFFALSE 18597
// sTime := true ;
18589: LD_ADDR_EXP 123
18593: PUSH
18594: LD_INT 1
18596: ST_TO_ADDR
// if p3 = 36 then
18597: LD_VAR 0 3
18601: PUSH
18602: LD_INT 36
18604: EQUAL
18605: IFFALSE 18615
// sTools := true ;
18607: LD_ADDR_EXP 124
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// if p3 = 101 then
18615: LD_VAR 0 3
18619: PUSH
18620: LD_INT 101
18622: EQUAL
18623: IFFALSE 18633
// sSold := true ;
18625: LD_ADDR_EXP 89
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if p3 = 102 then
18633: LD_VAR 0 3
18637: PUSH
18638: LD_INT 102
18640: EQUAL
18641: IFFALSE 18651
// sDiff := true ;
18643: LD_ADDR_EXP 90
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if p3 = 103 then
18651: LD_VAR 0 3
18655: PUSH
18656: LD_INT 103
18658: EQUAL
18659: IFFALSE 18669
// sFog := true ;
18661: LD_ADDR_EXP 93
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// if p3 = 104 then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_INT 104
18676: EQUAL
18677: IFFALSE 18687
// sReset := true ;
18679: LD_ADDR_EXP 94
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// if p3 = 105 then
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 105
18694: EQUAL
18695: IFFALSE 18705
// sSun := true ;
18697: LD_ADDR_EXP 95
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// if p3 = 106 then
18705: LD_VAR 0 3
18709: PUSH
18710: LD_INT 106
18712: EQUAL
18713: IFFALSE 18723
// sTiger := true ;
18715: LD_ADDR_EXP 91
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// if p3 = 107 then
18723: LD_VAR 0 3
18727: PUSH
18728: LD_INT 107
18730: EQUAL
18731: IFFALSE 18741
// sBomb := true ;
18733: LD_ADDR_EXP 92
18737: PUSH
18738: LD_INT 1
18740: ST_TO_ADDR
// if p3 = 108 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 108
18748: EQUAL
18749: IFFALSE 18759
// sWound := true ;
18751: LD_ADDR_EXP 100
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// if p3 = 109 then
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 109
18766: EQUAL
18767: IFFALSE 18777
// sBetray := true ;
18769: LD_ADDR_EXP 104
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// if p3 = 110 then
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 110
18784: EQUAL
18785: IFFALSE 18795
// sContamin := true ;
18787: LD_ADDR_EXP 105
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// if p3 = 111 then
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 111
18802: EQUAL
18803: IFFALSE 18813
// sOil := true ;
18805: LD_ADDR_EXP 107
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
// if p3 = 112 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_INT 112
18820: EQUAL
18821: IFFALSE 18831
// sStu := true ;
18823: LD_ADDR_EXP 111
18827: PUSH
18828: LD_INT 1
18830: ST_TO_ADDR
// if p3 = 113 then
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 113
18838: EQUAL
18839: IFFALSE 18849
// sBazooka := true ;
18841: LD_ADDR_EXP 114
18845: PUSH
18846: LD_INT 1
18848: ST_TO_ADDR
// if p3 = 114 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_INT 114
18856: EQUAL
18857: IFFALSE 18867
// sMortar := true ;
18859: LD_ADDR_EXP 115
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// if p3 = 115 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 115
18874: EQUAL
18875: IFFALSE 18885
// sRanger := true ;
18877: LD_ADDR_EXP 125
18881: PUSH
18882: LD_INT 1
18884: ST_TO_ADDR
// end ; if p2 = 101 then
18885: LD_VAR 0 2
18889: PUSH
18890: LD_INT 101
18892: EQUAL
18893: IFFALSE 19021
// begin case p3 of 1 :
18895: LD_VAR 0 3
18899: PUSH
18900: LD_INT 1
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18915
18908: POP
// hHackUnlimitedResources ; 2 :
18909: CALL 30056 0 0
18913: GO 19021
18915: LD_INT 2
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18930
18923: POP
// hHackSetLevel10 ; 3 :
18924: CALL 30189 0 0
18928: GO 19021
18930: LD_INT 3
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18945
18938: POP
// hHackSetLevel10YourUnits ; 4 :
18939: CALL 30274 0 0
18943: GO 19021
18945: LD_INT 4
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18960
18953: POP
// hHackInvincible ; 5 :
18954: CALL 30722 0 0
18958: GO 19021
18960: LD_INT 5
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18968
18966: GO 18975
18968: POP
// hHackInvisible ; 6 :
18969: CALL 30833 0 0
18973: GO 19021
18975: LD_INT 6
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 18990
18983: POP
// hHackChangeYourSide ; 7 :
18984: CALL 30890 0 0
18988: GO 19021
18990: LD_INT 7
18992: DOUBLE
18993: EQUAL
18994: IFTRUE 18998
18996: GO 19005
18998: POP
// hHackChangeUnitSide ; 8 :
18999: CALL 30932 0 0
19003: GO 19021
19005: LD_INT 8
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19020
19013: POP
// hHackFog ; end ;
19014: CALL 31033 0 0
19018: GO 19021
19020: POP
// end ; end ;
19021: PPOPN 6
19023: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19024: GO 19026
19026: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19027: LD_STRING initStreamRollete();
19029: PPUSH
19030: CALL_OW 559
// InitStreamMode ;
19034: CALL 19043 0 0
// DefineStreamItems ( ) ;
19038: CALL 19483 0 0
// end ;
19042: END
// function InitStreamMode ; begin
19043: LD_INT 0
19045: PPUSH
// streamModeActive := false ;
19046: LD_ADDR_EXP 72
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// normalCounter := 36 ;
19054: LD_ADDR_EXP 73
19058: PUSH
19059: LD_INT 36
19061: ST_TO_ADDR
// hardcoreCounter := 16 ;
19062: LD_ADDR_EXP 74
19066: PUSH
19067: LD_INT 16
19069: ST_TO_ADDR
// sRocket := false ;
19070: LD_ADDR_EXP 77
19074: PUSH
19075: LD_INT 0
19077: ST_TO_ADDR
// sSpeed := false ;
19078: LD_ADDR_EXP 76
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
// sEngine := false ;
19086: LD_ADDR_EXP 78
19090: PUSH
19091: LD_INT 0
19093: ST_TO_ADDR
// sSpec := false ;
19094: LD_ADDR_EXP 75
19098: PUSH
19099: LD_INT 0
19101: ST_TO_ADDR
// sLevel := false ;
19102: LD_ADDR_EXP 79
19106: PUSH
19107: LD_INT 0
19109: ST_TO_ADDR
// sArmoury := false ;
19110: LD_ADDR_EXP 80
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// sRadar := false ;
19118: LD_ADDR_EXP 81
19122: PUSH
19123: LD_INT 0
19125: ST_TO_ADDR
// sBunker := false ;
19126: LD_ADDR_EXP 82
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// sHack := false ;
19134: LD_ADDR_EXP 83
19138: PUSH
19139: LD_INT 0
19141: ST_TO_ADDR
// sFire := false ;
19142: LD_ADDR_EXP 84
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// sRefresh := false ;
19150: LD_ADDR_EXP 85
19154: PUSH
19155: LD_INT 0
19157: ST_TO_ADDR
// sExp := false ;
19158: LD_ADDR_EXP 86
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// sDepot := false ;
19166: LD_ADDR_EXP 87
19170: PUSH
19171: LD_INT 0
19173: ST_TO_ADDR
// sFlag := false ;
19174: LD_ADDR_EXP 88
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// sKamikadze := false ;
19182: LD_ADDR_EXP 96
19186: PUSH
19187: LD_INT 0
19189: ST_TO_ADDR
// sTroll := false ;
19190: LD_ADDR_EXP 97
19194: PUSH
19195: LD_INT 0
19197: ST_TO_ADDR
// sSlow := false ;
19198: LD_ADDR_EXP 98
19202: PUSH
19203: LD_INT 0
19205: ST_TO_ADDR
// sLack := false ;
19206: LD_ADDR_EXP 99
19210: PUSH
19211: LD_INT 0
19213: ST_TO_ADDR
// sTank := false ;
19214: LD_ADDR_EXP 101
19218: PUSH
19219: LD_INT 0
19221: ST_TO_ADDR
// sRemote := false ;
19222: LD_ADDR_EXP 102
19226: PUSH
19227: LD_INT 0
19229: ST_TO_ADDR
// sPowell := false ;
19230: LD_ADDR_EXP 103
19234: PUSH
19235: LD_INT 0
19237: ST_TO_ADDR
// sTeleport := false ;
19238: LD_ADDR_EXP 106
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// sOilTower := false ;
19246: LD_ADDR_EXP 108
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// sShovel := false ;
19254: LD_ADDR_EXP 109
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// sSheik := false ;
19262: LD_ADDR_EXP 110
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
// sEarthquake := false ;
19270: LD_ADDR_EXP 112
19274: PUSH
19275: LD_INT 0
19277: ST_TO_ADDR
// sAI := false ;
19278: LD_ADDR_EXP 113
19282: PUSH
19283: LD_INT 0
19285: ST_TO_ADDR
// sCargo := false ;
19286: LD_ADDR_EXP 116
19290: PUSH
19291: LD_INT 0
19293: ST_TO_ADDR
// sDLaser := false ;
19294: LD_ADDR_EXP 117
19298: PUSH
19299: LD_INT 0
19301: ST_TO_ADDR
// sExchange := false ;
19302: LD_ADDR_EXP 118
19306: PUSH
19307: LD_INT 0
19309: ST_TO_ADDR
// sFac := false ;
19310: LD_ADDR_EXP 119
19314: PUSH
19315: LD_INT 0
19317: ST_TO_ADDR
// sPower := false ;
19318: LD_ADDR_EXP 120
19322: PUSH
19323: LD_INT 0
19325: ST_TO_ADDR
// sRandom := false ;
19326: LD_ADDR_EXP 121
19330: PUSH
19331: LD_INT 0
19333: ST_TO_ADDR
// sShield := false ;
19334: LD_ADDR_EXP 122
19338: PUSH
19339: LD_INT 0
19341: ST_TO_ADDR
// sTime := false ;
19342: LD_ADDR_EXP 123
19346: PUSH
19347: LD_INT 0
19349: ST_TO_ADDR
// sTools := false ;
19350: LD_ADDR_EXP 124
19354: PUSH
19355: LD_INT 0
19357: ST_TO_ADDR
// sSold := false ;
19358: LD_ADDR_EXP 89
19362: PUSH
19363: LD_INT 0
19365: ST_TO_ADDR
// sDiff := false ;
19366: LD_ADDR_EXP 90
19370: PUSH
19371: LD_INT 0
19373: ST_TO_ADDR
// sFog := false ;
19374: LD_ADDR_EXP 93
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// sReset := false ;
19382: LD_ADDR_EXP 94
19386: PUSH
19387: LD_INT 0
19389: ST_TO_ADDR
// sSun := false ;
19390: LD_ADDR_EXP 95
19394: PUSH
19395: LD_INT 0
19397: ST_TO_ADDR
// sTiger := false ;
19398: LD_ADDR_EXP 91
19402: PUSH
19403: LD_INT 0
19405: ST_TO_ADDR
// sBomb := false ;
19406: LD_ADDR_EXP 92
19410: PUSH
19411: LD_INT 0
19413: ST_TO_ADDR
// sWound := false ;
19414: LD_ADDR_EXP 100
19418: PUSH
19419: LD_INT 0
19421: ST_TO_ADDR
// sBetray := false ;
19422: LD_ADDR_EXP 104
19426: PUSH
19427: LD_INT 0
19429: ST_TO_ADDR
// sContamin := false ;
19430: LD_ADDR_EXP 105
19434: PUSH
19435: LD_INT 0
19437: ST_TO_ADDR
// sOil := false ;
19438: LD_ADDR_EXP 107
19442: PUSH
19443: LD_INT 0
19445: ST_TO_ADDR
// sStu := false ;
19446: LD_ADDR_EXP 111
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
// sBazooka := false ;
19454: LD_ADDR_EXP 114
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
// sMortar := false ;
19462: LD_ADDR_EXP 115
19466: PUSH
19467: LD_INT 0
19469: ST_TO_ADDR
// sRanger := false ;
19470: LD_ADDR_EXP 125
19474: PUSH
19475: LD_INT 0
19477: ST_TO_ADDR
// end ;
19478: LD_VAR 0 1
19482: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19483: LD_INT 0
19485: PPUSH
19486: PPUSH
19487: PPUSH
19488: PPUSH
19489: PPUSH
// result := [ ] ;
19490: LD_ADDR_VAR 0 1
19494: PUSH
19495: EMPTY
19496: ST_TO_ADDR
// if campaign_id = 1 then
19497: LD_OWVAR 69
19501: PUSH
19502: LD_INT 1
19504: EQUAL
19505: IFFALSE 22443
// begin case mission_number of 1 :
19507: LD_OWVAR 70
19511: PUSH
19512: LD_INT 1
19514: DOUBLE
19515: EQUAL
19516: IFTRUE 19520
19518: GO 19584
19520: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19521: LD_ADDR_VAR 0 1
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 4
19531: PUSH
19532: LD_INT 11
19534: PUSH
19535: LD_INT 12
19537: PUSH
19538: LD_INT 15
19540: PUSH
19541: LD_INT 16
19543: PUSH
19544: LD_INT 22
19546: PUSH
19547: LD_INT 23
19549: PUSH
19550: LD_INT 26
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 101
19566: PUSH
19567: LD_INT 102
19569: PUSH
19570: LD_INT 106
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: LIST
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: ST_TO_ADDR
19582: GO 22441
19584: LD_INT 2
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19664
19592: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19593: LD_ADDR_VAR 0 1
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: LD_INT 11
19606: PUSH
19607: LD_INT 12
19609: PUSH
19610: LD_INT 15
19612: PUSH
19613: LD_INT 16
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_INT 23
19621: PUSH
19622: LD_INT 26
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 101
19638: PUSH
19639: LD_INT 102
19641: PUSH
19642: LD_INT 105
19644: PUSH
19645: LD_INT 106
19647: PUSH
19648: LD_INT 108
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: ST_TO_ADDR
19662: GO 22441
19664: LD_INT 3
19666: DOUBLE
19667: EQUAL
19668: IFTRUE 19672
19670: GO 19748
19672: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19673: LD_ADDR_VAR 0 1
19677: PUSH
19678: LD_INT 2
19680: PUSH
19681: LD_INT 4
19683: PUSH
19684: LD_INT 5
19686: PUSH
19687: LD_INT 11
19689: PUSH
19690: LD_INT 12
19692: PUSH
19693: LD_INT 15
19695: PUSH
19696: LD_INT 16
19698: PUSH
19699: LD_INT 22
19701: PUSH
19702: LD_INT 26
19704: PUSH
19705: LD_INT 36
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 101
19722: PUSH
19723: LD_INT 102
19725: PUSH
19726: LD_INT 105
19728: PUSH
19729: LD_INT 106
19731: PUSH
19732: LD_INT 108
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: ST_TO_ADDR
19746: GO 22441
19748: LD_INT 4
19750: DOUBLE
19751: EQUAL
19752: IFTRUE 19756
19754: GO 19840
19756: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19757: LD_ADDR_VAR 0 1
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 4
19767: PUSH
19768: LD_INT 5
19770: PUSH
19771: LD_INT 8
19773: PUSH
19774: LD_INT 11
19776: PUSH
19777: LD_INT 12
19779: PUSH
19780: LD_INT 15
19782: PUSH
19783: LD_INT 16
19785: PUSH
19786: LD_INT 22
19788: PUSH
19789: LD_INT 23
19791: PUSH
19792: LD_INT 26
19794: PUSH
19795: LD_INT 36
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 101
19814: PUSH
19815: LD_INT 102
19817: PUSH
19818: LD_INT 105
19820: PUSH
19821: LD_INT 106
19823: PUSH
19824: LD_INT 108
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: ST_TO_ADDR
19838: GO 22441
19840: LD_INT 5
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19948
19848: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: LD_INT 4
19859: PUSH
19860: LD_INT 5
19862: PUSH
19863: LD_INT 6
19865: PUSH
19866: LD_INT 8
19868: PUSH
19869: LD_INT 11
19871: PUSH
19872: LD_INT 12
19874: PUSH
19875: LD_INT 15
19877: PUSH
19878: LD_INT 16
19880: PUSH
19881: LD_INT 22
19883: PUSH
19884: LD_INT 23
19886: PUSH
19887: LD_INT 25
19889: PUSH
19890: LD_INT 26
19892: PUSH
19893: LD_INT 36
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 101
19914: PUSH
19915: LD_INT 102
19917: PUSH
19918: LD_INT 105
19920: PUSH
19921: LD_INT 106
19923: PUSH
19924: LD_INT 108
19926: PUSH
19927: LD_INT 109
19929: PUSH
19930: LD_INT 112
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: ST_TO_ADDR
19946: GO 22441
19948: LD_INT 6
19950: DOUBLE
19951: EQUAL
19952: IFTRUE 19956
19954: GO 20076
19956: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19957: LD_ADDR_VAR 0 1
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: LD_INT 4
19967: PUSH
19968: LD_INT 5
19970: PUSH
19971: LD_INT 6
19973: PUSH
19974: LD_INT 8
19976: PUSH
19977: LD_INT 11
19979: PUSH
19980: LD_INT 12
19982: PUSH
19983: LD_INT 15
19985: PUSH
19986: LD_INT 16
19988: PUSH
19989: LD_INT 20
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 22
19997: PUSH
19998: LD_INT 23
20000: PUSH
20001: LD_INT 25
20003: PUSH
20004: LD_INT 26
20006: PUSH
20007: LD_INT 30
20009: PUSH
20010: LD_INT 31
20012: PUSH
20013: LD_INT 32
20015: PUSH
20016: LD_INT 36
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 101
20042: PUSH
20043: LD_INT 102
20045: PUSH
20046: LD_INT 105
20048: PUSH
20049: LD_INT 106
20051: PUSH
20052: LD_INT 108
20054: PUSH
20055: LD_INT 109
20057: PUSH
20058: LD_INT 112
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: ST_TO_ADDR
20074: GO 22441
20076: LD_INT 7
20078: DOUBLE
20079: EQUAL
20080: IFTRUE 20084
20082: GO 20184
20084: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20085: LD_ADDR_VAR 0 1
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 4
20095: PUSH
20096: LD_INT 5
20098: PUSH
20099: LD_INT 7
20101: PUSH
20102: LD_INT 11
20104: PUSH
20105: LD_INT 12
20107: PUSH
20108: LD_INT 15
20110: PUSH
20111: LD_INT 16
20113: PUSH
20114: LD_INT 20
20116: PUSH
20117: LD_INT 21
20119: PUSH
20120: LD_INT 22
20122: PUSH
20123: LD_INT 23
20125: PUSH
20126: LD_INT 25
20128: PUSH
20129: LD_INT 26
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 101
20150: PUSH
20151: LD_INT 102
20153: PUSH
20154: LD_INT 103
20156: PUSH
20157: LD_INT 105
20159: PUSH
20160: LD_INT 106
20162: PUSH
20163: LD_INT 108
20165: PUSH
20166: LD_INT 112
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: ST_TO_ADDR
20182: GO 22441
20184: LD_INT 8
20186: DOUBLE
20187: EQUAL
20188: IFTRUE 20192
20190: GO 20320
20192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20193: LD_ADDR_VAR 0 1
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: LD_INT 4
20203: PUSH
20204: LD_INT 5
20206: PUSH
20207: LD_INT 6
20209: PUSH
20210: LD_INT 7
20212: PUSH
20213: LD_INT 8
20215: PUSH
20216: LD_INT 11
20218: PUSH
20219: LD_INT 12
20221: PUSH
20222: LD_INT 15
20224: PUSH
20225: LD_INT 16
20227: PUSH
20228: LD_INT 20
20230: PUSH
20231: LD_INT 21
20233: PUSH
20234: LD_INT 22
20236: PUSH
20237: LD_INT 23
20239: PUSH
20240: LD_INT 25
20242: PUSH
20243: LD_INT 26
20245: PUSH
20246: LD_INT 30
20248: PUSH
20249: LD_INT 31
20251: PUSH
20252: LD_INT 32
20254: PUSH
20255: LD_INT 36
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 101
20282: PUSH
20283: LD_INT 102
20285: PUSH
20286: LD_INT 103
20288: PUSH
20289: LD_INT 105
20291: PUSH
20292: LD_INT 106
20294: PUSH
20295: LD_INT 108
20297: PUSH
20298: LD_INT 109
20300: PUSH
20301: LD_INT 112
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: ST_TO_ADDR
20318: GO 22441
20320: LD_INT 9
20322: DOUBLE
20323: EQUAL
20324: IFTRUE 20328
20326: GO 20464
20328: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20329: LD_ADDR_VAR 0 1
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: LD_INT 4
20339: PUSH
20340: LD_INT 5
20342: PUSH
20343: LD_INT 6
20345: PUSH
20346: LD_INT 7
20348: PUSH
20349: LD_INT 8
20351: PUSH
20352: LD_INT 11
20354: PUSH
20355: LD_INT 12
20357: PUSH
20358: LD_INT 15
20360: PUSH
20361: LD_INT 16
20363: PUSH
20364: LD_INT 20
20366: PUSH
20367: LD_INT 21
20369: PUSH
20370: LD_INT 22
20372: PUSH
20373: LD_INT 23
20375: PUSH
20376: LD_INT 25
20378: PUSH
20379: LD_INT 26
20381: PUSH
20382: LD_INT 28
20384: PUSH
20385: LD_INT 30
20387: PUSH
20388: LD_INT 31
20390: PUSH
20391: LD_INT 32
20393: PUSH
20394: LD_INT 36
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 101
20422: PUSH
20423: LD_INT 102
20425: PUSH
20426: LD_INT 103
20428: PUSH
20429: LD_INT 105
20431: PUSH
20432: LD_INT 106
20434: PUSH
20435: LD_INT 108
20437: PUSH
20438: LD_INT 109
20440: PUSH
20441: LD_INT 112
20443: PUSH
20444: LD_INT 114
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: ST_TO_ADDR
20462: GO 22441
20464: LD_INT 10
20466: DOUBLE
20467: EQUAL
20468: IFTRUE 20472
20470: GO 20656
20472: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20473: LD_ADDR_VAR 0 1
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 4
20483: PUSH
20484: LD_INT 5
20486: PUSH
20487: LD_INT 6
20489: PUSH
20490: LD_INT 7
20492: PUSH
20493: LD_INT 8
20495: PUSH
20496: LD_INT 9
20498: PUSH
20499: LD_INT 10
20501: PUSH
20502: LD_INT 11
20504: PUSH
20505: LD_INT 12
20507: PUSH
20508: LD_INT 13
20510: PUSH
20511: LD_INT 14
20513: PUSH
20514: LD_INT 15
20516: PUSH
20517: LD_INT 16
20519: PUSH
20520: LD_INT 17
20522: PUSH
20523: LD_INT 18
20525: PUSH
20526: LD_INT 19
20528: PUSH
20529: LD_INT 20
20531: PUSH
20532: LD_INT 21
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: LD_INT 23
20540: PUSH
20541: LD_INT 24
20543: PUSH
20544: LD_INT 25
20546: PUSH
20547: LD_INT 26
20549: PUSH
20550: LD_INT 28
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 31
20558: PUSH
20559: LD_INT 32
20561: PUSH
20562: LD_INT 36
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 101
20598: PUSH
20599: LD_INT 102
20601: PUSH
20602: LD_INT 103
20604: PUSH
20605: LD_INT 104
20607: PUSH
20608: LD_INT 105
20610: PUSH
20611: LD_INT 106
20613: PUSH
20614: LD_INT 107
20616: PUSH
20617: LD_INT 108
20619: PUSH
20620: LD_INT 109
20622: PUSH
20623: LD_INT 110
20625: PUSH
20626: LD_INT 111
20628: PUSH
20629: LD_INT 112
20631: PUSH
20632: LD_INT 114
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: ST_TO_ADDR
20654: GO 22441
20656: LD_INT 11
20658: DOUBLE
20659: EQUAL
20660: IFTRUE 20664
20662: GO 20856
20664: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20665: LD_ADDR_VAR 0 1
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: LD_INT 3
20675: PUSH
20676: LD_INT 4
20678: PUSH
20679: LD_INT 5
20681: PUSH
20682: LD_INT 6
20684: PUSH
20685: LD_INT 7
20687: PUSH
20688: LD_INT 8
20690: PUSH
20691: LD_INT 9
20693: PUSH
20694: LD_INT 10
20696: PUSH
20697: LD_INT 11
20699: PUSH
20700: LD_INT 12
20702: PUSH
20703: LD_INT 13
20705: PUSH
20706: LD_INT 14
20708: PUSH
20709: LD_INT 15
20711: PUSH
20712: LD_INT 16
20714: PUSH
20715: LD_INT 17
20717: PUSH
20718: LD_INT 18
20720: PUSH
20721: LD_INT 19
20723: PUSH
20724: LD_INT 20
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 23
20735: PUSH
20736: LD_INT 24
20738: PUSH
20739: LD_INT 25
20741: PUSH
20742: LD_INT 26
20744: PUSH
20745: LD_INT 28
20747: PUSH
20748: LD_INT 30
20750: PUSH
20751: LD_INT 31
20753: PUSH
20754: LD_INT 32
20756: PUSH
20757: LD_INT 34
20759: PUSH
20760: LD_INT 36
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 101
20798: PUSH
20799: LD_INT 102
20801: PUSH
20802: LD_INT 103
20804: PUSH
20805: LD_INT 104
20807: PUSH
20808: LD_INT 105
20810: PUSH
20811: LD_INT 106
20813: PUSH
20814: LD_INT 107
20816: PUSH
20817: LD_INT 108
20819: PUSH
20820: LD_INT 109
20822: PUSH
20823: LD_INT 110
20825: PUSH
20826: LD_INT 111
20828: PUSH
20829: LD_INT 112
20831: PUSH
20832: LD_INT 114
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: ST_TO_ADDR
20854: GO 22441
20856: LD_INT 12
20858: DOUBLE
20859: EQUAL
20860: IFTRUE 20864
20862: GO 21072
20864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20865: LD_ADDR_VAR 0 1
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: LD_INT 4
20881: PUSH
20882: LD_INT 5
20884: PUSH
20885: LD_INT 6
20887: PUSH
20888: LD_INT 7
20890: PUSH
20891: LD_INT 8
20893: PUSH
20894: LD_INT 9
20896: PUSH
20897: LD_INT 10
20899: PUSH
20900: LD_INT 11
20902: PUSH
20903: LD_INT 12
20905: PUSH
20906: LD_INT 13
20908: PUSH
20909: LD_INT 14
20911: PUSH
20912: LD_INT 15
20914: PUSH
20915: LD_INT 16
20917: PUSH
20918: LD_INT 17
20920: PUSH
20921: LD_INT 18
20923: PUSH
20924: LD_INT 19
20926: PUSH
20927: LD_INT 20
20929: PUSH
20930: LD_INT 21
20932: PUSH
20933: LD_INT 22
20935: PUSH
20936: LD_INT 23
20938: PUSH
20939: LD_INT 24
20941: PUSH
20942: LD_INT 25
20944: PUSH
20945: LD_INT 26
20947: PUSH
20948: LD_INT 27
20950: PUSH
20951: LD_INT 28
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: LD_INT 31
20959: PUSH
20960: LD_INT 32
20962: PUSH
20963: LD_INT 33
20965: PUSH
20966: LD_INT 34
20968: PUSH
20969: LD_INT 36
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 101
21010: PUSH
21011: LD_INT 102
21013: PUSH
21014: LD_INT 103
21016: PUSH
21017: LD_INT 104
21019: PUSH
21020: LD_INT 105
21022: PUSH
21023: LD_INT 106
21025: PUSH
21026: LD_INT 107
21028: PUSH
21029: LD_INT 108
21031: PUSH
21032: LD_INT 109
21034: PUSH
21035: LD_INT 110
21037: PUSH
21038: LD_INT 111
21040: PUSH
21041: LD_INT 112
21043: PUSH
21044: LD_INT 113
21046: PUSH
21047: LD_INT 114
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: ST_TO_ADDR
21070: GO 22441
21072: LD_INT 13
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21276
21080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21081: LD_ADDR_VAR 0 1
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: LD_INT 2
21091: PUSH
21092: LD_INT 3
21094: PUSH
21095: LD_INT 4
21097: PUSH
21098: LD_INT 5
21100: PUSH
21101: LD_INT 8
21103: PUSH
21104: LD_INT 9
21106: PUSH
21107: LD_INT 10
21109: PUSH
21110: LD_INT 11
21112: PUSH
21113: LD_INT 12
21115: PUSH
21116: LD_INT 14
21118: PUSH
21119: LD_INT 15
21121: PUSH
21122: LD_INT 16
21124: PUSH
21125: LD_INT 17
21127: PUSH
21128: LD_INT 18
21130: PUSH
21131: LD_INT 19
21133: PUSH
21134: LD_INT 20
21136: PUSH
21137: LD_INT 21
21139: PUSH
21140: LD_INT 22
21142: PUSH
21143: LD_INT 23
21145: PUSH
21146: LD_INT 24
21148: PUSH
21149: LD_INT 25
21151: PUSH
21152: LD_INT 26
21154: PUSH
21155: LD_INT 27
21157: PUSH
21158: LD_INT 28
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 31
21166: PUSH
21167: LD_INT 32
21169: PUSH
21170: LD_INT 33
21172: PUSH
21173: LD_INT 34
21175: PUSH
21176: LD_INT 36
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 101
21214: PUSH
21215: LD_INT 102
21217: PUSH
21218: LD_INT 103
21220: PUSH
21221: LD_INT 104
21223: PUSH
21224: LD_INT 105
21226: PUSH
21227: LD_INT 106
21229: PUSH
21230: LD_INT 107
21232: PUSH
21233: LD_INT 108
21235: PUSH
21236: LD_INT 109
21238: PUSH
21239: LD_INT 110
21241: PUSH
21242: LD_INT 111
21244: PUSH
21245: LD_INT 112
21247: PUSH
21248: LD_INT 113
21250: PUSH
21251: LD_INT 114
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: ST_TO_ADDR
21274: GO 22441
21276: LD_INT 14
21278: DOUBLE
21279: EQUAL
21280: IFTRUE 21284
21282: GO 21496
21284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: LD_INT 3
21298: PUSH
21299: LD_INT 4
21301: PUSH
21302: LD_INT 5
21304: PUSH
21305: LD_INT 6
21307: PUSH
21308: LD_INT 7
21310: PUSH
21311: LD_INT 8
21313: PUSH
21314: LD_INT 9
21316: PUSH
21317: LD_INT 10
21319: PUSH
21320: LD_INT 11
21322: PUSH
21323: LD_INT 12
21325: PUSH
21326: LD_INT 13
21328: PUSH
21329: LD_INT 14
21331: PUSH
21332: LD_INT 15
21334: PUSH
21335: LD_INT 16
21337: PUSH
21338: LD_INT 17
21340: PUSH
21341: LD_INT 18
21343: PUSH
21344: LD_INT 19
21346: PUSH
21347: LD_INT 20
21349: PUSH
21350: LD_INT 21
21352: PUSH
21353: LD_INT 22
21355: PUSH
21356: LD_INT 23
21358: PUSH
21359: LD_INT 24
21361: PUSH
21362: LD_INT 25
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 27
21370: PUSH
21371: LD_INT 28
21373: PUSH
21374: LD_INT 29
21376: PUSH
21377: LD_INT 30
21379: PUSH
21380: LD_INT 31
21382: PUSH
21383: LD_INT 32
21385: PUSH
21386: LD_INT 33
21388: PUSH
21389: LD_INT 34
21391: PUSH
21392: LD_INT 36
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 101
21434: PUSH
21435: LD_INT 102
21437: PUSH
21438: LD_INT 103
21440: PUSH
21441: LD_INT 104
21443: PUSH
21444: LD_INT 105
21446: PUSH
21447: LD_INT 106
21449: PUSH
21450: LD_INT 107
21452: PUSH
21453: LD_INT 108
21455: PUSH
21456: LD_INT 109
21458: PUSH
21459: LD_INT 110
21461: PUSH
21462: LD_INT 111
21464: PUSH
21465: LD_INT 112
21467: PUSH
21468: LD_INT 113
21470: PUSH
21471: LD_INT 114
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: ST_TO_ADDR
21494: GO 22441
21496: LD_INT 15
21498: DOUBLE
21499: EQUAL
21500: IFTRUE 21504
21502: GO 21716
21504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21505: LD_ADDR_VAR 0 1
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 3
21518: PUSH
21519: LD_INT 4
21521: PUSH
21522: LD_INT 5
21524: PUSH
21525: LD_INT 6
21527: PUSH
21528: LD_INT 7
21530: PUSH
21531: LD_INT 8
21533: PUSH
21534: LD_INT 9
21536: PUSH
21537: LD_INT 10
21539: PUSH
21540: LD_INT 11
21542: PUSH
21543: LD_INT 12
21545: PUSH
21546: LD_INT 13
21548: PUSH
21549: LD_INT 14
21551: PUSH
21552: LD_INT 15
21554: PUSH
21555: LD_INT 16
21557: PUSH
21558: LD_INT 17
21560: PUSH
21561: LD_INT 18
21563: PUSH
21564: LD_INT 19
21566: PUSH
21567: LD_INT 20
21569: PUSH
21570: LD_INT 21
21572: PUSH
21573: LD_INT 22
21575: PUSH
21576: LD_INT 23
21578: PUSH
21579: LD_INT 24
21581: PUSH
21582: LD_INT 25
21584: PUSH
21585: LD_INT 26
21587: PUSH
21588: LD_INT 27
21590: PUSH
21591: LD_INT 28
21593: PUSH
21594: LD_INT 29
21596: PUSH
21597: LD_INT 30
21599: PUSH
21600: LD_INT 31
21602: PUSH
21603: LD_INT 32
21605: PUSH
21606: LD_INT 33
21608: PUSH
21609: LD_INT 34
21611: PUSH
21612: LD_INT 36
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 101
21654: PUSH
21655: LD_INT 102
21657: PUSH
21658: LD_INT 103
21660: PUSH
21661: LD_INT 104
21663: PUSH
21664: LD_INT 105
21666: PUSH
21667: LD_INT 106
21669: PUSH
21670: LD_INT 107
21672: PUSH
21673: LD_INT 108
21675: PUSH
21676: LD_INT 109
21678: PUSH
21679: LD_INT 110
21681: PUSH
21682: LD_INT 111
21684: PUSH
21685: LD_INT 112
21687: PUSH
21688: LD_INT 113
21690: PUSH
21691: LD_INT 114
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: ST_TO_ADDR
21714: GO 22441
21716: LD_INT 16
21718: DOUBLE
21719: EQUAL
21720: IFTRUE 21724
21722: GO 21848
21724: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21725: LD_ADDR_VAR 0 1
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: LD_INT 4
21735: PUSH
21736: LD_INT 5
21738: PUSH
21739: LD_INT 7
21741: PUSH
21742: LD_INT 11
21744: PUSH
21745: LD_INT 12
21747: PUSH
21748: LD_INT 15
21750: PUSH
21751: LD_INT 16
21753: PUSH
21754: LD_INT 20
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 22
21762: PUSH
21763: LD_INT 23
21765: PUSH
21766: LD_INT 25
21768: PUSH
21769: LD_INT 26
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 31
21777: PUSH
21778: LD_INT 32
21780: PUSH
21781: LD_INT 33
21783: PUSH
21784: LD_INT 34
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 101
21810: PUSH
21811: LD_INT 102
21813: PUSH
21814: LD_INT 103
21816: PUSH
21817: LD_INT 106
21819: PUSH
21820: LD_INT 108
21822: PUSH
21823: LD_INT 112
21825: PUSH
21826: LD_INT 113
21828: PUSH
21829: LD_INT 114
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: ST_TO_ADDR
21846: GO 22441
21848: LD_INT 17
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 22068
21856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: LD_INT 3
21870: PUSH
21871: LD_INT 4
21873: PUSH
21874: LD_INT 5
21876: PUSH
21877: LD_INT 6
21879: PUSH
21880: LD_INT 7
21882: PUSH
21883: LD_INT 8
21885: PUSH
21886: LD_INT 9
21888: PUSH
21889: LD_INT 10
21891: PUSH
21892: LD_INT 11
21894: PUSH
21895: LD_INT 12
21897: PUSH
21898: LD_INT 13
21900: PUSH
21901: LD_INT 14
21903: PUSH
21904: LD_INT 15
21906: PUSH
21907: LD_INT 16
21909: PUSH
21910: LD_INT 17
21912: PUSH
21913: LD_INT 18
21915: PUSH
21916: LD_INT 19
21918: PUSH
21919: LD_INT 20
21921: PUSH
21922: LD_INT 21
21924: PUSH
21925: LD_INT 22
21927: PUSH
21928: LD_INT 23
21930: PUSH
21931: LD_INT 24
21933: PUSH
21934: LD_INT 25
21936: PUSH
21937: LD_INT 26
21939: PUSH
21940: LD_INT 27
21942: PUSH
21943: LD_INT 28
21945: PUSH
21946: LD_INT 29
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: LD_INT 31
21954: PUSH
21955: LD_INT 32
21957: PUSH
21958: LD_INT 33
21960: PUSH
21961: LD_INT 34
21963: PUSH
21964: LD_INT 36
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 103
22012: PUSH
22013: LD_INT 104
22015: PUSH
22016: LD_INT 105
22018: PUSH
22019: LD_INT 106
22021: PUSH
22022: LD_INT 107
22024: PUSH
22025: LD_INT 108
22027: PUSH
22028: LD_INT 109
22030: PUSH
22031: LD_INT 110
22033: PUSH
22034: LD_INT 111
22036: PUSH
22037: LD_INT 112
22039: PUSH
22040: LD_INT 113
22042: PUSH
22043: LD_INT 114
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: ST_TO_ADDR
22066: GO 22441
22068: LD_INT 18
22070: DOUBLE
22071: EQUAL
22072: IFTRUE 22076
22074: GO 22212
22076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22077: LD_ADDR_VAR 0 1
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: LD_INT 4
22087: PUSH
22088: LD_INT 5
22090: PUSH
22091: LD_INT 7
22093: PUSH
22094: LD_INT 11
22096: PUSH
22097: LD_INT 12
22099: PUSH
22100: LD_INT 15
22102: PUSH
22103: LD_INT 16
22105: PUSH
22106: LD_INT 20
22108: PUSH
22109: LD_INT 21
22111: PUSH
22112: LD_INT 22
22114: PUSH
22115: LD_INT 23
22117: PUSH
22118: LD_INT 25
22120: PUSH
22121: LD_INT 26
22123: PUSH
22124: LD_INT 30
22126: PUSH
22127: LD_INT 31
22129: PUSH
22130: LD_INT 32
22132: PUSH
22133: LD_INT 33
22135: PUSH
22136: LD_INT 34
22138: PUSH
22139: LD_INT 35
22141: PUSH
22142: LD_INT 36
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 101
22170: PUSH
22171: LD_INT 102
22173: PUSH
22174: LD_INT 103
22176: PUSH
22177: LD_INT 106
22179: PUSH
22180: LD_INT 108
22182: PUSH
22183: LD_INT 112
22185: PUSH
22186: LD_INT 113
22188: PUSH
22189: LD_INT 114
22191: PUSH
22192: LD_INT 115
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 22441
22212: LD_INT 19
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22440
22220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22221: LD_ADDR_VAR 0 1
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: LD_INT 4
22237: PUSH
22238: LD_INT 5
22240: PUSH
22241: LD_INT 6
22243: PUSH
22244: LD_INT 7
22246: PUSH
22247: LD_INT 8
22249: PUSH
22250: LD_INT 9
22252: PUSH
22253: LD_INT 10
22255: PUSH
22256: LD_INT 11
22258: PUSH
22259: LD_INT 12
22261: PUSH
22262: LD_INT 13
22264: PUSH
22265: LD_INT 14
22267: PUSH
22268: LD_INT 15
22270: PUSH
22271: LD_INT 16
22273: PUSH
22274: LD_INT 17
22276: PUSH
22277: LD_INT 18
22279: PUSH
22280: LD_INT 19
22282: PUSH
22283: LD_INT 20
22285: PUSH
22286: LD_INT 21
22288: PUSH
22289: LD_INT 22
22291: PUSH
22292: LD_INT 23
22294: PUSH
22295: LD_INT 24
22297: PUSH
22298: LD_INT 25
22300: PUSH
22301: LD_INT 26
22303: PUSH
22304: LD_INT 27
22306: PUSH
22307: LD_INT 28
22309: PUSH
22310: LD_INT 29
22312: PUSH
22313: LD_INT 30
22315: PUSH
22316: LD_INT 31
22318: PUSH
22319: LD_INT 32
22321: PUSH
22322: LD_INT 33
22324: PUSH
22325: LD_INT 34
22327: PUSH
22328: LD_INT 35
22330: PUSH
22331: LD_INT 36
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 101
22374: PUSH
22375: LD_INT 102
22377: PUSH
22378: LD_INT 103
22380: PUSH
22381: LD_INT 104
22383: PUSH
22384: LD_INT 105
22386: PUSH
22387: LD_INT 106
22389: PUSH
22390: LD_INT 107
22392: PUSH
22393: LD_INT 108
22395: PUSH
22396: LD_INT 109
22398: PUSH
22399: LD_INT 110
22401: PUSH
22402: LD_INT 111
22404: PUSH
22405: LD_INT 112
22407: PUSH
22408: LD_INT 113
22410: PUSH
22411: LD_INT 114
22413: PUSH
22414: LD_INT 115
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: ST_TO_ADDR
22438: GO 22441
22440: POP
// end else
22441: GO 22660
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22443: LD_ADDR_VAR 0 1
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 2
22453: PUSH
22454: LD_INT 3
22456: PUSH
22457: LD_INT 4
22459: PUSH
22460: LD_INT 5
22462: PUSH
22463: LD_INT 6
22465: PUSH
22466: LD_INT 7
22468: PUSH
22469: LD_INT 8
22471: PUSH
22472: LD_INT 9
22474: PUSH
22475: LD_INT 10
22477: PUSH
22478: LD_INT 11
22480: PUSH
22481: LD_INT 12
22483: PUSH
22484: LD_INT 13
22486: PUSH
22487: LD_INT 14
22489: PUSH
22490: LD_INT 15
22492: PUSH
22493: LD_INT 16
22495: PUSH
22496: LD_INT 17
22498: PUSH
22499: LD_INT 18
22501: PUSH
22502: LD_INT 19
22504: PUSH
22505: LD_INT 20
22507: PUSH
22508: LD_INT 21
22510: PUSH
22511: LD_INT 22
22513: PUSH
22514: LD_INT 23
22516: PUSH
22517: LD_INT 24
22519: PUSH
22520: LD_INT 25
22522: PUSH
22523: LD_INT 26
22525: PUSH
22526: LD_INT 27
22528: PUSH
22529: LD_INT 28
22531: PUSH
22532: LD_INT 29
22534: PUSH
22535: LD_INT 30
22537: PUSH
22538: LD_INT 31
22540: PUSH
22541: LD_INT 32
22543: PUSH
22544: LD_INT 33
22546: PUSH
22547: LD_INT 34
22549: PUSH
22550: LD_INT 35
22552: PUSH
22553: LD_INT 36
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 101
22596: PUSH
22597: LD_INT 102
22599: PUSH
22600: LD_INT 103
22602: PUSH
22603: LD_INT 104
22605: PUSH
22606: LD_INT 105
22608: PUSH
22609: LD_INT 106
22611: PUSH
22612: LD_INT 107
22614: PUSH
22615: LD_INT 108
22617: PUSH
22618: LD_INT 109
22620: PUSH
22621: LD_INT 110
22623: PUSH
22624: LD_INT 111
22626: PUSH
22627: LD_INT 112
22629: PUSH
22630: LD_INT 113
22632: PUSH
22633: LD_INT 114
22635: PUSH
22636: LD_INT 115
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: ST_TO_ADDR
// if result then
22660: LD_VAR 0 1
22664: IFFALSE 22953
// begin normal :=  ;
22666: LD_ADDR_VAR 0 3
22670: PUSH
22671: LD_STRING 
22673: ST_TO_ADDR
// hardcore :=  ;
22674: LD_ADDR_VAR 0 4
22678: PUSH
22679: LD_STRING 
22681: ST_TO_ADDR
// for i = 1 to normalCounter do
22682: LD_ADDR_VAR 0 5
22686: PUSH
22687: DOUBLE
22688: LD_INT 1
22690: DEC
22691: ST_TO_ADDR
22692: LD_EXP 73
22696: PUSH
22697: FOR_TO
22698: IFFALSE 22799
// begin tmp := 0 ;
22700: LD_ADDR_VAR 0 2
22704: PUSH
22705: LD_STRING 0
22707: ST_TO_ADDR
// if result [ 1 ] then
22708: LD_VAR 0 1
22712: PUSH
22713: LD_INT 1
22715: ARRAY
22716: IFFALSE 22781
// if result [ 1 ] [ 1 ] = i then
22718: LD_VAR 0 1
22722: PUSH
22723: LD_INT 1
22725: ARRAY
22726: PUSH
22727: LD_INT 1
22729: ARRAY
22730: PUSH
22731: LD_VAR 0 5
22735: EQUAL
22736: IFFALSE 22781
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22738: LD_ADDR_VAR 0 1
22742: PUSH
22743: LD_VAR 0 1
22747: PPUSH
22748: LD_INT 1
22750: PPUSH
22751: LD_VAR 0 1
22755: PUSH
22756: LD_INT 1
22758: ARRAY
22759: PPUSH
22760: LD_INT 1
22762: PPUSH
22763: CALL_OW 3
22767: PPUSH
22768: CALL_OW 1
22772: ST_TO_ADDR
// tmp := 1 ;
22773: LD_ADDR_VAR 0 2
22777: PUSH
22778: LD_STRING 1
22780: ST_TO_ADDR
// end ; normal := normal & tmp ;
22781: LD_ADDR_VAR 0 3
22785: PUSH
22786: LD_VAR 0 3
22790: PUSH
22791: LD_VAR 0 2
22795: STR
22796: ST_TO_ADDR
// end ;
22797: GO 22697
22799: POP
22800: POP
// for i = 1 to hardcoreCounter do
22801: LD_ADDR_VAR 0 5
22805: PUSH
22806: DOUBLE
22807: LD_INT 1
22809: DEC
22810: ST_TO_ADDR
22811: LD_EXP 74
22815: PUSH
22816: FOR_TO
22817: IFFALSE 22922
// begin tmp := 0 ;
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_STRING 0
22826: ST_TO_ADDR
// if result [ 2 ] then
22827: LD_VAR 0 1
22831: PUSH
22832: LD_INT 2
22834: ARRAY
22835: IFFALSE 22904
// if result [ 2 ] [ 1 ] = 100 + i then
22837: LD_VAR 0 1
22841: PUSH
22842: LD_INT 2
22844: ARRAY
22845: PUSH
22846: LD_INT 1
22848: ARRAY
22849: PUSH
22850: LD_INT 100
22852: PUSH
22853: LD_VAR 0 5
22857: PLUS
22858: EQUAL
22859: IFFALSE 22904
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22861: LD_ADDR_VAR 0 1
22865: PUSH
22866: LD_VAR 0 1
22870: PPUSH
22871: LD_INT 2
22873: PPUSH
22874: LD_VAR 0 1
22878: PUSH
22879: LD_INT 2
22881: ARRAY
22882: PPUSH
22883: LD_INT 1
22885: PPUSH
22886: CALL_OW 3
22890: PPUSH
22891: CALL_OW 1
22895: ST_TO_ADDR
// tmp := 1 ;
22896: LD_ADDR_VAR 0 2
22900: PUSH
22901: LD_STRING 1
22903: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22904: LD_ADDR_VAR 0 4
22908: PUSH
22909: LD_VAR 0 4
22913: PUSH
22914: LD_VAR 0 2
22918: STR
22919: ST_TO_ADDR
// end ;
22920: GO 22816
22922: POP
22923: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22924: LD_STRING getStreamItemsFromMission("
22926: PUSH
22927: LD_VAR 0 3
22931: STR
22932: PUSH
22933: LD_STRING ","
22935: STR
22936: PUSH
22937: LD_VAR 0 4
22941: STR
22942: PUSH
22943: LD_STRING ")
22945: STR
22946: PPUSH
22947: CALL_OW 559
// end else
22951: GO 22960
// ToLua ( getStreamItemsFromMission("","") ) ;
22953: LD_STRING getStreamItemsFromMission("","")
22955: PPUSH
22956: CALL_OW 559
// end ;
22960: LD_VAR 0 1
22964: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22965: LD_EXP 72
22969: PUSH
22970: LD_EXP 77
22974: AND
22975: IFFALSE 23099
22977: GO 22979
22979: DISABLE
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
// begin enable ;
22984: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: LD_INT 22
22992: PUSH
22993: LD_OWVAR 2
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: LD_INT 34
23007: PUSH
23008: LD_INT 7
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 34
23017: PUSH
23018: LD_INT 45
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 34
23027: PUSH
23028: LD_INT 28
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 34
23037: PUSH
23038: LD_INT 47
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PPUSH
23056: CALL_OW 69
23060: ST_TO_ADDR
// if not tmp then
23061: LD_VAR 0 2
23065: NOT
23066: IFFALSE 23070
// exit ;
23068: GO 23099
// for i in tmp do
23070: LD_ADDR_VAR 0 1
23074: PUSH
23075: LD_VAR 0 2
23079: PUSH
23080: FOR_IN
23081: IFFALSE 23097
// begin SetLives ( i , 0 ) ;
23083: LD_VAR 0 1
23087: PPUSH
23088: LD_INT 0
23090: PPUSH
23091: CALL_OW 234
// end ;
23095: GO 23080
23097: POP
23098: POP
// end ;
23099: PPOPN 2
23101: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23102: LD_EXP 72
23106: PUSH
23107: LD_EXP 78
23111: AND
23112: IFFALSE 23196
23114: GO 23116
23116: DISABLE
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
// begin enable ;
23121: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23122: LD_ADDR_VAR 0 2
23126: PUSH
23127: LD_INT 22
23129: PUSH
23130: LD_OWVAR 2
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 32
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 69
23157: ST_TO_ADDR
// if not tmp then
23158: LD_VAR 0 2
23162: NOT
23163: IFFALSE 23167
// exit ;
23165: GO 23196
// for i in tmp do
23167: LD_ADDR_VAR 0 1
23171: PUSH
23172: LD_VAR 0 2
23176: PUSH
23177: FOR_IN
23178: IFFALSE 23194
// begin SetLives ( i , 0 ) ;
23180: LD_VAR 0 1
23184: PPUSH
23185: LD_INT 0
23187: PPUSH
23188: CALL_OW 234
// end ;
23192: GO 23177
23194: POP
23195: POP
// end ;
23196: PPOPN 2
23198: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23199: LD_EXP 72
23203: PUSH
23204: LD_EXP 75
23208: AND
23209: IFFALSE 23302
23211: GO 23213
23213: DISABLE
23214: LD_INT 0
23216: PPUSH
// begin enable ;
23217: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23218: LD_ADDR_VAR 0 1
23222: PUSH
23223: LD_INT 22
23225: PUSH
23226: LD_OWVAR 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: LD_INT 25
23240: PUSH
23241: LD_INT 5
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 25
23250: PUSH
23251: LD_INT 9
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 25
23260: PUSH
23261: LD_INT 8
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 69
23282: PUSH
23283: FOR_IN
23284: IFFALSE 23300
// begin SetClass ( i , 1 ) ;
23286: LD_VAR 0 1
23290: PPUSH
23291: LD_INT 1
23293: PPUSH
23294: CALL_OW 336
// end ;
23298: GO 23283
23300: POP
23301: POP
// end ;
23302: PPOPN 1
23304: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23305: LD_EXP 72
23309: PUSH
23310: LD_EXP 76
23314: AND
23315: PUSH
23316: LD_OWVAR 65
23320: PUSH
23321: LD_INT 7
23323: LESS
23324: AND
23325: IFFALSE 23339
23327: GO 23329
23329: DISABLE
// begin enable ;
23330: ENABLE
// game_speed := 7 ;
23331: LD_ADDR_OWVAR 65
23335: PUSH
23336: LD_INT 7
23338: ST_TO_ADDR
// end ;
23339: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23340: LD_EXP 72
23344: PUSH
23345: LD_EXP 79
23349: AND
23350: IFFALSE 23552
23352: GO 23354
23354: DISABLE
23355: LD_INT 0
23357: PPUSH
23358: PPUSH
23359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23360: LD_ADDR_VAR 0 3
23364: PUSH
23365: LD_INT 81
23367: PUSH
23368: LD_OWVAR 2
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 21
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PPUSH
23391: CALL_OW 69
23395: ST_TO_ADDR
// if not tmp then
23396: LD_VAR 0 3
23400: NOT
23401: IFFALSE 23405
// exit ;
23403: GO 23552
// if tmp > 5 then
23405: LD_VAR 0 3
23409: PUSH
23410: LD_INT 5
23412: GREATER
23413: IFFALSE 23425
// k := 5 else
23415: LD_ADDR_VAR 0 2
23419: PUSH
23420: LD_INT 5
23422: ST_TO_ADDR
23423: GO 23435
// k := tmp ;
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_VAR 0 3
23434: ST_TO_ADDR
// for i := 1 to k do
23435: LD_ADDR_VAR 0 1
23439: PUSH
23440: DOUBLE
23441: LD_INT 1
23443: DEC
23444: ST_TO_ADDR
23445: LD_VAR 0 2
23449: PUSH
23450: FOR_TO
23451: IFFALSE 23550
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23453: LD_VAR 0 3
23457: PUSH
23458: LD_VAR 0 1
23462: ARRAY
23463: PPUSH
23464: LD_VAR 0 1
23468: PUSH
23469: LD_INT 4
23471: MOD
23472: PUSH
23473: LD_INT 1
23475: PLUS
23476: PPUSH
23477: CALL_OW 259
23481: PUSH
23482: LD_INT 10
23484: LESS
23485: IFFALSE 23548
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23487: LD_VAR 0 3
23491: PUSH
23492: LD_VAR 0 1
23496: ARRAY
23497: PPUSH
23498: LD_VAR 0 1
23502: PUSH
23503: LD_INT 4
23505: MOD
23506: PUSH
23507: LD_INT 1
23509: PLUS
23510: PPUSH
23511: LD_VAR 0 3
23515: PUSH
23516: LD_VAR 0 1
23520: ARRAY
23521: PPUSH
23522: LD_VAR 0 1
23526: PUSH
23527: LD_INT 4
23529: MOD
23530: PUSH
23531: LD_INT 1
23533: PLUS
23534: PPUSH
23535: CALL_OW 259
23539: PUSH
23540: LD_INT 1
23542: PLUS
23543: PPUSH
23544: CALL_OW 237
23548: GO 23450
23550: POP
23551: POP
// end ;
23552: PPOPN 3
23554: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23555: LD_EXP 72
23559: PUSH
23560: LD_EXP 80
23564: AND
23565: IFFALSE 23585
23567: GO 23569
23569: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23570: LD_INT 4
23572: PPUSH
23573: LD_OWVAR 2
23577: PPUSH
23578: LD_INT 0
23580: PPUSH
23581: CALL_OW 324
23585: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23586: LD_EXP 72
23590: PUSH
23591: LD_EXP 109
23595: AND
23596: IFFALSE 23616
23598: GO 23600
23600: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23601: LD_INT 19
23603: PPUSH
23604: LD_OWVAR 2
23608: PPUSH
23609: LD_INT 0
23611: PPUSH
23612: CALL_OW 324
23616: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23617: LD_EXP 72
23621: PUSH
23622: LD_EXP 81
23626: AND
23627: IFFALSE 23729
23629: GO 23631
23631: DISABLE
23632: LD_INT 0
23634: PPUSH
23635: PPUSH
// begin enable ;
23636: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23637: LD_ADDR_VAR 0 2
23641: PUSH
23642: LD_INT 22
23644: PUSH
23645: LD_OWVAR 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: LD_INT 34
23659: PUSH
23660: LD_INT 11
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 34
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 69
23690: ST_TO_ADDR
// if not tmp then
23691: LD_VAR 0 2
23695: NOT
23696: IFFALSE 23700
// exit ;
23698: GO 23729
// for i in tmp do
23700: LD_ADDR_VAR 0 1
23704: PUSH
23705: LD_VAR 0 2
23709: PUSH
23710: FOR_IN
23711: IFFALSE 23727
// begin SetLives ( i , 0 ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 0
23720: PPUSH
23721: CALL_OW 234
// end ;
23725: GO 23710
23727: POP
23728: POP
// end ;
23729: PPOPN 2
23731: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23732: LD_EXP 72
23736: PUSH
23737: LD_EXP 82
23741: AND
23742: IFFALSE 23762
23744: GO 23746
23746: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23747: LD_INT 32
23749: PPUSH
23750: LD_OWVAR 2
23754: PPUSH
23755: LD_INT 0
23757: PPUSH
23758: CALL_OW 324
23762: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23763: LD_EXP 72
23767: PUSH
23768: LD_EXP 83
23772: AND
23773: IFFALSE 23954
23775: GO 23777
23777: DISABLE
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
23782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_INT 22
23790: PUSH
23791: LD_OWVAR 2
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 33
23802: PUSH
23803: LD_INT 3
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PPUSH
23814: CALL_OW 69
23818: ST_TO_ADDR
// if not tmp then
23819: LD_VAR 0 2
23823: NOT
23824: IFFALSE 23828
// exit ;
23826: GO 23954
// side := 0 ;
23828: LD_ADDR_VAR 0 3
23832: PUSH
23833: LD_INT 0
23835: ST_TO_ADDR
// for i := 1 to 8 do
23836: LD_ADDR_VAR 0 1
23840: PUSH
23841: DOUBLE
23842: LD_INT 1
23844: DEC
23845: ST_TO_ADDR
23846: LD_INT 8
23848: PUSH
23849: FOR_TO
23850: IFFALSE 23898
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23852: LD_OWVAR 2
23856: PUSH
23857: LD_VAR 0 1
23861: NONEQUAL
23862: PUSH
23863: LD_OWVAR 2
23867: PPUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 81
23877: PUSH
23878: LD_INT 2
23880: EQUAL
23881: AND
23882: IFFALSE 23896
// begin side := i ;
23884: LD_ADDR_VAR 0 3
23888: PUSH
23889: LD_VAR 0 1
23893: ST_TO_ADDR
// break ;
23894: GO 23898
// end ;
23896: GO 23849
23898: POP
23899: POP
// if not side then
23900: LD_VAR 0 3
23904: NOT
23905: IFFALSE 23909
// exit ;
23907: GO 23954
// for i := 1 to tmp do
23909: LD_ADDR_VAR 0 1
23913: PUSH
23914: DOUBLE
23915: LD_INT 1
23917: DEC
23918: ST_TO_ADDR
23919: LD_VAR 0 2
23923: PUSH
23924: FOR_TO
23925: IFFALSE 23952
// if Prob ( 60 ) then
23927: LD_INT 60
23929: PPUSH
23930: CALL_OW 13
23934: IFFALSE 23950
// SetSide ( i , side ) ;
23936: LD_VAR 0 1
23940: PPUSH
23941: LD_VAR 0 3
23945: PPUSH
23946: CALL_OW 235
23950: GO 23924
23952: POP
23953: POP
// end ;
23954: PPOPN 3
23956: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23957: LD_EXP 72
23961: PUSH
23962: LD_EXP 85
23966: AND
23967: IFFALSE 24086
23969: GO 23971
23971: DISABLE
23972: LD_INT 0
23974: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23975: LD_ADDR_VAR 0 1
23979: PUSH
23980: LD_INT 22
23982: PUSH
23983: LD_OWVAR 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 21
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 3
24004: PUSH
24005: LD_INT 23
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: PPUSH
24024: CALL_OW 69
24028: PUSH
24029: FOR_IN
24030: IFFALSE 24084
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24032: LD_VAR 0 1
24036: PPUSH
24037: CALL_OW 257
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: LD_INT 3
24050: PUSH
24051: LD_INT 4
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: IN
24060: IFFALSE 24082
// SetClass ( un , rand ( 1 , 4 ) ) ;
24062: LD_VAR 0 1
24066: PPUSH
24067: LD_INT 1
24069: PPUSH
24070: LD_INT 4
24072: PPUSH
24073: CALL_OW 12
24077: PPUSH
24078: CALL_OW 336
24082: GO 24029
24084: POP
24085: POP
// end ;
24086: PPOPN 1
24088: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24089: LD_EXP 72
24093: PUSH
24094: LD_EXP 84
24098: AND
24099: IFFALSE 24178
24101: GO 24103
24103: DISABLE
24104: LD_INT 0
24106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24107: LD_ADDR_VAR 0 1
24111: PUSH
24112: LD_INT 22
24114: PUSH
24115: LD_OWVAR 2
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 21
24126: PUSH
24127: LD_INT 3
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PPUSH
24138: CALL_OW 69
24142: ST_TO_ADDR
// if not tmp then
24143: LD_VAR 0 1
24147: NOT
24148: IFFALSE 24152
// exit ;
24150: GO 24178
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24152: LD_VAR 0 1
24156: PUSH
24157: LD_INT 1
24159: PPUSH
24160: LD_VAR 0 1
24164: PPUSH
24165: CALL_OW 12
24169: ARRAY
24170: PPUSH
24171: LD_INT 100
24173: PPUSH
24174: CALL_OW 234
// end ;
24178: PPOPN 1
24180: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24181: LD_EXP 72
24185: PUSH
24186: LD_EXP 86
24190: AND
24191: IFFALSE 24289
24193: GO 24195
24195: DISABLE
24196: LD_INT 0
24198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24199: LD_ADDR_VAR 0 1
24203: PUSH
24204: LD_INT 22
24206: PUSH
24207: LD_OWVAR 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 21
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PPUSH
24230: CALL_OW 69
24234: ST_TO_ADDR
// if not tmp then
24235: LD_VAR 0 1
24239: NOT
24240: IFFALSE 24244
// exit ;
24242: GO 24289
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24244: LD_VAR 0 1
24248: PUSH
24249: LD_INT 1
24251: PPUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 12
24261: ARRAY
24262: PPUSH
24263: LD_INT 1
24265: PPUSH
24266: LD_INT 4
24268: PPUSH
24269: CALL_OW 12
24273: PPUSH
24274: LD_INT 3000
24276: PPUSH
24277: LD_INT 9000
24279: PPUSH
24280: CALL_OW 12
24284: PPUSH
24285: CALL_OW 492
// end ;
24289: PPOPN 1
24291: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24292: LD_EXP 72
24296: PUSH
24297: LD_EXP 87
24301: AND
24302: IFFALSE 24322
24304: GO 24306
24306: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24307: LD_INT 1
24309: PPUSH
24310: LD_OWVAR 2
24314: PPUSH
24315: LD_INT 0
24317: PPUSH
24318: CALL_OW 324
24322: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24323: LD_EXP 72
24327: PUSH
24328: LD_EXP 88
24332: AND
24333: IFFALSE 24416
24335: GO 24337
24337: DISABLE
24338: LD_INT 0
24340: PPUSH
24341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24342: LD_ADDR_VAR 0 2
24346: PUSH
24347: LD_INT 22
24349: PUSH
24350: LD_OWVAR 2
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 21
24361: PUSH
24362: LD_INT 3
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PPUSH
24373: CALL_OW 69
24377: ST_TO_ADDR
// if not tmp then
24378: LD_VAR 0 2
24382: NOT
24383: IFFALSE 24387
// exit ;
24385: GO 24416
// for i in tmp do
24387: LD_ADDR_VAR 0 1
24391: PUSH
24392: LD_VAR 0 2
24396: PUSH
24397: FOR_IN
24398: IFFALSE 24414
// SetBLevel ( i , 10 ) ;
24400: LD_VAR 0 1
24404: PPUSH
24405: LD_INT 10
24407: PPUSH
24408: CALL_OW 241
24412: GO 24397
24414: POP
24415: POP
// end ;
24416: PPOPN 2
24418: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24419: LD_EXP 72
24423: PUSH
24424: LD_EXP 89
24428: AND
24429: IFFALSE 24540
24431: GO 24433
24433: DISABLE
24434: LD_INT 0
24436: PPUSH
24437: PPUSH
24438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24439: LD_ADDR_VAR 0 3
24443: PUSH
24444: LD_INT 22
24446: PUSH
24447: LD_OWVAR 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 25
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PPUSH
24470: CALL_OW 69
24474: ST_TO_ADDR
// if not tmp then
24475: LD_VAR 0 3
24479: NOT
24480: IFFALSE 24484
// exit ;
24482: GO 24540
// un := tmp [ rand ( 1 , tmp ) ] ;
24484: LD_ADDR_VAR 0 2
24488: PUSH
24489: LD_VAR 0 3
24493: PUSH
24494: LD_INT 1
24496: PPUSH
24497: LD_VAR 0 3
24501: PPUSH
24502: CALL_OW 12
24506: ARRAY
24507: ST_TO_ADDR
// if Crawls ( un ) then
24508: LD_VAR 0 2
24512: PPUSH
24513: CALL_OW 318
24517: IFFALSE 24528
// ComWalk ( un ) ;
24519: LD_VAR 0 2
24523: PPUSH
24524: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24528: LD_VAR 0 2
24532: PPUSH
24533: LD_INT 5
24535: PPUSH
24536: CALL_OW 336
// end ;
24540: PPOPN 3
24542: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24543: LD_EXP 72
24547: PUSH
24548: LD_EXP 90
24552: AND
24553: PUSH
24554: LD_OWVAR 67
24558: PUSH
24559: LD_INT 3
24561: LESS
24562: AND
24563: IFFALSE 24582
24565: GO 24567
24567: DISABLE
// Difficulty := Difficulty + 1 ;
24568: LD_ADDR_OWVAR 67
24572: PUSH
24573: LD_OWVAR 67
24577: PUSH
24578: LD_INT 1
24580: PLUS
24581: ST_TO_ADDR
24582: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24583: LD_EXP 72
24587: PUSH
24588: LD_EXP 91
24592: AND
24593: IFFALSE 24696
24595: GO 24597
24597: DISABLE
24598: LD_INT 0
24600: PPUSH
// begin for i := 1 to 5 do
24601: LD_ADDR_VAR 0 1
24605: PUSH
24606: DOUBLE
24607: LD_INT 1
24609: DEC
24610: ST_TO_ADDR
24611: LD_INT 5
24613: PUSH
24614: FOR_TO
24615: IFFALSE 24694
// begin uc_nation := nation_nature ;
24617: LD_ADDR_OWVAR 21
24621: PUSH
24622: LD_INT 0
24624: ST_TO_ADDR
// uc_side := 0 ;
24625: LD_ADDR_OWVAR 20
24629: PUSH
24630: LD_INT 0
24632: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24633: LD_ADDR_OWVAR 29
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: LD_INT 12
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: ST_TO_ADDR
// hc_agressivity := 20 ;
24648: LD_ADDR_OWVAR 35
24652: PUSH
24653: LD_INT 20
24655: ST_TO_ADDR
// hc_class := class_tiger ;
24656: LD_ADDR_OWVAR 28
24660: PUSH
24661: LD_INT 14
24663: ST_TO_ADDR
// hc_gallery :=  ;
24664: LD_ADDR_OWVAR 33
24668: PUSH
24669: LD_STRING 
24671: ST_TO_ADDR
// hc_name :=  ;
24672: LD_ADDR_OWVAR 26
24676: PUSH
24677: LD_STRING 
24679: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24680: CALL_OW 44
24684: PPUSH
24685: LD_INT 0
24687: PPUSH
24688: CALL_OW 51
// end ;
24692: GO 24614
24694: POP
24695: POP
// end ;
24696: PPOPN 1
24698: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24699: LD_EXP 72
24703: PUSH
24704: LD_EXP 92
24708: AND
24709: IFFALSE 24718
24711: GO 24713
24713: DISABLE
// StreamSibBomb ;
24714: CALL 24719 0 0
24718: END
// export function StreamSibBomb ; var i , x , y ; begin
24719: LD_INT 0
24721: PPUSH
24722: PPUSH
24723: PPUSH
24724: PPUSH
// result := false ;
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_INT 0
24732: ST_TO_ADDR
// for i := 1 to 16 do
24733: LD_ADDR_VAR 0 2
24737: PUSH
24738: DOUBLE
24739: LD_INT 1
24741: DEC
24742: ST_TO_ADDR
24743: LD_INT 16
24745: PUSH
24746: FOR_TO
24747: IFFALSE 24946
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24749: LD_ADDR_VAR 0 3
24753: PUSH
24754: LD_INT 10
24756: PUSH
24757: LD_INT 20
24759: PUSH
24760: LD_INT 30
24762: PUSH
24763: LD_INT 40
24765: PUSH
24766: LD_INT 50
24768: PUSH
24769: LD_INT 60
24771: PUSH
24772: LD_INT 70
24774: PUSH
24775: LD_INT 80
24777: PUSH
24778: LD_INT 90
24780: PUSH
24781: LD_INT 100
24783: PUSH
24784: LD_INT 110
24786: PUSH
24787: LD_INT 120
24789: PUSH
24790: LD_INT 130
24792: PUSH
24793: LD_INT 140
24795: PUSH
24796: LD_INT 150
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: PPUSH
24819: LD_INT 15
24821: PPUSH
24822: CALL_OW 12
24826: ARRAY
24827: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24828: LD_ADDR_VAR 0 4
24832: PUSH
24833: LD_INT 10
24835: PUSH
24836: LD_INT 20
24838: PUSH
24839: LD_INT 30
24841: PUSH
24842: LD_INT 40
24844: PUSH
24845: LD_INT 50
24847: PUSH
24848: LD_INT 60
24850: PUSH
24851: LD_INT 70
24853: PUSH
24854: LD_INT 80
24856: PUSH
24857: LD_INT 90
24859: PUSH
24860: LD_INT 100
24862: PUSH
24863: LD_INT 110
24865: PUSH
24866: LD_INT 120
24868: PUSH
24869: LD_INT 130
24871: PUSH
24872: LD_INT 140
24874: PUSH
24875: LD_INT 150
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PPUSH
24898: LD_INT 15
24900: PPUSH
24901: CALL_OW 12
24905: ARRAY
24906: ST_TO_ADDR
// if ValidHex ( x , y ) then
24907: LD_VAR 0 3
24911: PPUSH
24912: LD_VAR 0 4
24916: PPUSH
24917: CALL_OW 488
24921: IFFALSE 24944
// begin result := [ x , y ] ;
24923: LD_ADDR_VAR 0 1
24927: PUSH
24928: LD_VAR 0 3
24932: PUSH
24933: LD_VAR 0 4
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: ST_TO_ADDR
// break ;
24942: GO 24946
// end ; end ;
24944: GO 24746
24946: POP
24947: POP
// if result then
24948: LD_VAR 0 1
24952: IFFALSE 25012
// begin ToLua ( playSibBomb() ) ;
24954: LD_STRING playSibBomb()
24956: PPUSH
24957: CALL_OW 559
// wait ( 0 0$14 ) ;
24961: LD_INT 490
24963: PPUSH
24964: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24968: LD_VAR 0 1
24972: PUSH
24973: LD_INT 1
24975: ARRAY
24976: PPUSH
24977: LD_VAR 0 1
24981: PUSH
24982: LD_INT 2
24984: ARRAY
24985: PPUSH
24986: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24990: LD_VAR 0 1
24994: PUSH
24995: LD_INT 1
24997: ARRAY
24998: PPUSH
24999: LD_VAR 0 1
25003: PUSH
25004: LD_INT 2
25006: ARRAY
25007: PPUSH
25008: CALL_OW 429
// end ; end ;
25012: LD_VAR 0 1
25016: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25017: LD_EXP 72
25021: PUSH
25022: LD_EXP 94
25026: AND
25027: IFFALSE 25039
25029: GO 25031
25031: DISABLE
// YouLost (  ) ;
25032: LD_STRING 
25034: PPUSH
25035: CALL_OW 104
25039: END
// every 0 0$1 trigger StreamModeActive and sFog do
25040: LD_EXP 72
25044: PUSH
25045: LD_EXP 93
25049: AND
25050: IFFALSE 25064
25052: GO 25054
25054: DISABLE
// FogOff ( your_side ) ;
25055: LD_OWVAR 2
25059: PPUSH
25060: CALL_OW 344
25064: END
// every 0 0$1 trigger StreamModeActive and sSun do
25065: LD_EXP 72
25069: PUSH
25070: LD_EXP 95
25074: AND
25075: IFFALSE 25103
25077: GO 25079
25079: DISABLE
// begin solar_recharge_percent := 0 ;
25080: LD_ADDR_OWVAR 79
25084: PUSH
25085: LD_INT 0
25087: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25088: LD_INT 10500
25090: PPUSH
25091: CALL_OW 67
// solar_recharge_percent := 100 ;
25095: LD_ADDR_OWVAR 79
25099: PUSH
25100: LD_INT 100
25102: ST_TO_ADDR
// end ;
25103: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25104: LD_EXP 72
25108: PUSH
25109: LD_EXP 96
25113: AND
25114: IFFALSE 25353
25116: GO 25118
25118: DISABLE
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
25123: PPUSH
// begin tmp := [ ] ;
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: EMPTY
25130: ST_TO_ADDR
// for i := 1 to 6 do
25131: LD_ADDR_VAR 0 1
25135: PUSH
25136: DOUBLE
25137: LD_INT 1
25139: DEC
25140: ST_TO_ADDR
25141: LD_INT 6
25143: PUSH
25144: FOR_TO
25145: IFFALSE 25250
// begin uc_nation := nation_nature ;
25147: LD_ADDR_OWVAR 21
25151: PUSH
25152: LD_INT 0
25154: ST_TO_ADDR
// uc_side := 0 ;
25155: LD_ADDR_OWVAR 20
25159: PUSH
25160: LD_INT 0
25162: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25163: LD_ADDR_OWVAR 29
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 12
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: ST_TO_ADDR
// hc_agressivity := 20 ;
25178: LD_ADDR_OWVAR 35
25182: PUSH
25183: LD_INT 20
25185: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25186: LD_ADDR_OWVAR 28
25190: PUSH
25191: LD_INT 17
25193: ST_TO_ADDR
// hc_gallery :=  ;
25194: LD_ADDR_OWVAR 33
25198: PUSH
25199: LD_STRING 
25201: ST_TO_ADDR
// hc_name :=  ;
25202: LD_ADDR_OWVAR 26
25206: PUSH
25207: LD_STRING 
25209: ST_TO_ADDR
// un := CreateHuman ;
25210: LD_ADDR_VAR 0 2
25214: PUSH
25215: CALL_OW 44
25219: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25220: LD_VAR 0 2
25224: PPUSH
25225: LD_INT 1
25227: PPUSH
25228: CALL_OW 51
// tmp := tmp ^ un ;
25232: LD_ADDR_VAR 0 3
25236: PUSH
25237: LD_VAR 0 3
25241: PUSH
25242: LD_VAR 0 2
25246: ADD
25247: ST_TO_ADDR
// end ;
25248: GO 25144
25250: POP
25251: POP
// repeat wait ( 0 0$1 ) ;
25252: LD_INT 35
25254: PPUSH
25255: CALL_OW 67
// for un in tmp do
25259: LD_ADDR_VAR 0 2
25263: PUSH
25264: LD_VAR 0 3
25268: PUSH
25269: FOR_IN
25270: IFFALSE 25344
// begin if IsDead ( un ) then
25272: LD_VAR 0 2
25276: PPUSH
25277: CALL_OW 301
25281: IFFALSE 25301
// begin tmp := tmp diff un ;
25283: LD_ADDR_VAR 0 3
25287: PUSH
25288: LD_VAR 0 3
25292: PUSH
25293: LD_VAR 0 2
25297: DIFF
25298: ST_TO_ADDR
// continue ;
25299: GO 25269
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25301: LD_VAR 0 2
25305: PPUSH
25306: LD_INT 3
25308: PUSH
25309: LD_INT 22
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PPUSH
25323: CALL_OW 69
25327: PPUSH
25328: LD_VAR 0 2
25332: PPUSH
25333: CALL_OW 74
25337: PPUSH
25338: CALL_OW 115
// end ;
25342: GO 25269
25344: POP
25345: POP
// until not tmp ;
25346: LD_VAR 0 3
25350: NOT
25351: IFFALSE 25252
// end ;
25353: PPOPN 3
25355: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25356: LD_EXP 72
25360: PUSH
25361: LD_EXP 97
25365: AND
25366: IFFALSE 25420
25368: GO 25370
25370: DISABLE
// begin ToLua ( displayTroll(); ) ;
25371: LD_STRING displayTroll();
25373: PPUSH
25374: CALL_OW 559
// wait ( 3 3$00 ) ;
25378: LD_INT 6300
25380: PPUSH
25381: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25385: LD_STRING hideTroll();
25387: PPUSH
25388: CALL_OW 559
// wait ( 1 1$00 ) ;
25392: LD_INT 2100
25394: PPUSH
25395: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25399: LD_STRING displayTroll();
25401: PPUSH
25402: CALL_OW 559
// wait ( 1 1$00 ) ;
25406: LD_INT 2100
25408: PPUSH
25409: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25413: LD_STRING hideTroll();
25415: PPUSH
25416: CALL_OW 559
// end ;
25420: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25421: LD_EXP 72
25425: PUSH
25426: LD_EXP 98
25430: AND
25431: IFFALSE 25494
25433: GO 25435
25435: DISABLE
25436: LD_INT 0
25438: PPUSH
// begin p := 0 ;
25439: LD_ADDR_VAR 0 1
25443: PUSH
25444: LD_INT 0
25446: ST_TO_ADDR
// repeat game_speed := 1 ;
25447: LD_ADDR_OWVAR 65
25451: PUSH
25452: LD_INT 1
25454: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25455: LD_INT 35
25457: PPUSH
25458: CALL_OW 67
// p := p + 1 ;
25462: LD_ADDR_VAR 0 1
25466: PUSH
25467: LD_VAR 0 1
25471: PUSH
25472: LD_INT 1
25474: PLUS
25475: ST_TO_ADDR
// until p >= 60 ;
25476: LD_VAR 0 1
25480: PUSH
25481: LD_INT 60
25483: GREATEREQUAL
25484: IFFALSE 25447
// game_speed := 4 ;
25486: LD_ADDR_OWVAR 65
25490: PUSH
25491: LD_INT 4
25493: ST_TO_ADDR
// end ;
25494: PPOPN 1
25496: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25497: LD_EXP 72
25501: PUSH
25502: LD_EXP 99
25506: AND
25507: IFFALSE 25653
25509: GO 25511
25511: DISABLE
25512: LD_INT 0
25514: PPUSH
25515: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25516: LD_ADDR_VAR 0 1
25520: PUSH
25521: LD_INT 22
25523: PUSH
25524: LD_OWVAR 2
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: LD_INT 30
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 30
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PPUSH
25565: CALL_OW 69
25569: ST_TO_ADDR
// if not depot then
25570: LD_VAR 0 1
25574: NOT
25575: IFFALSE 25579
// exit ;
25577: GO 25653
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25579: LD_ADDR_VAR 0 2
25583: PUSH
25584: LD_VAR 0 1
25588: PUSH
25589: LD_INT 1
25591: PPUSH
25592: LD_VAR 0 1
25596: PPUSH
25597: CALL_OW 12
25601: ARRAY
25602: PPUSH
25603: CALL_OW 274
25607: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25608: LD_VAR 0 2
25612: PPUSH
25613: LD_INT 1
25615: PPUSH
25616: LD_INT 0
25618: PPUSH
25619: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25623: LD_VAR 0 2
25627: PPUSH
25628: LD_INT 2
25630: PPUSH
25631: LD_INT 0
25633: PPUSH
25634: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25638: LD_VAR 0 2
25642: PPUSH
25643: LD_INT 3
25645: PPUSH
25646: LD_INT 0
25648: PPUSH
25649: CALL_OW 277
// end ;
25653: PPOPN 2
25655: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25656: LD_EXP 72
25660: PUSH
25661: LD_EXP 100
25665: AND
25666: IFFALSE 25763
25668: GO 25670
25670: DISABLE
25671: LD_INT 0
25673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: LD_INT 22
25681: PUSH
25682: LD_OWVAR 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 21
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: LD_INT 23
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: ST_TO_ADDR
// if not tmp then
25728: LD_VAR 0 1
25732: NOT
25733: IFFALSE 25737
// exit ;
25735: GO 25763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25737: LD_VAR 0 1
25741: PUSH
25742: LD_INT 1
25744: PPUSH
25745: LD_VAR 0 1
25749: PPUSH
25750: CALL_OW 12
25754: ARRAY
25755: PPUSH
25756: LD_INT 200
25758: PPUSH
25759: CALL_OW 234
// end ;
25763: PPOPN 1
25765: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25766: LD_EXP 72
25770: PUSH
25771: LD_EXP 101
25775: AND
25776: IFFALSE 25855
25778: GO 25780
25780: DISABLE
25781: LD_INT 0
25783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25784: LD_ADDR_VAR 0 1
25788: PUSH
25789: LD_INT 22
25791: PUSH
25792: LD_OWVAR 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 21
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PPUSH
25815: CALL_OW 69
25819: ST_TO_ADDR
// if not tmp then
25820: LD_VAR 0 1
25824: NOT
25825: IFFALSE 25829
// exit ;
25827: GO 25855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25829: LD_VAR 0 1
25833: PUSH
25834: LD_INT 1
25836: PPUSH
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL_OW 12
25846: ARRAY
25847: PPUSH
25848: LD_INT 60
25850: PPUSH
25851: CALL_OW 234
// end ;
25855: PPOPN 1
25857: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25858: LD_EXP 72
25862: PUSH
25863: LD_EXP 102
25867: AND
25868: IFFALSE 25967
25870: GO 25872
25872: DISABLE
25873: LD_INT 0
25875: PPUSH
25876: PPUSH
// begin enable ;
25877: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25878: LD_ADDR_VAR 0 1
25882: PUSH
25883: LD_INT 22
25885: PUSH
25886: LD_OWVAR 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 61
25897: PUSH
25898: EMPTY
25899: LIST
25900: PUSH
25901: LD_INT 33
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: PPUSH
25916: CALL_OW 69
25920: ST_TO_ADDR
// if not tmp then
25921: LD_VAR 0 1
25925: NOT
25926: IFFALSE 25930
// exit ;
25928: GO 25967
// for i in tmp do
25930: LD_ADDR_VAR 0 2
25934: PUSH
25935: LD_VAR 0 1
25939: PUSH
25940: FOR_IN
25941: IFFALSE 25965
// if IsControledBy ( i ) then
25943: LD_VAR 0 2
25947: PPUSH
25948: CALL_OW 312
25952: IFFALSE 25963
// ComUnlink ( i ) ;
25954: LD_VAR 0 2
25958: PPUSH
25959: CALL_OW 136
25963: GO 25940
25965: POP
25966: POP
// end ;
25967: PPOPN 2
25969: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25970: LD_EXP 72
25974: PUSH
25975: LD_EXP 103
25979: AND
25980: IFFALSE 26120
25982: GO 25984
25984: DISABLE
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
// begin ToLua ( displayPowell(); ) ;
25989: LD_STRING displayPowell();
25991: PPUSH
25992: CALL_OW 559
// uc_side := 0 ;
25996: LD_ADDR_OWVAR 20
26000: PUSH
26001: LD_INT 0
26003: ST_TO_ADDR
// uc_nation := 2 ;
26004: LD_ADDR_OWVAR 21
26008: PUSH
26009: LD_INT 2
26011: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26012: LD_ADDR_OWVAR 37
26016: PUSH
26017: LD_INT 14
26019: ST_TO_ADDR
// vc_engine := engine_siberite ;
26020: LD_ADDR_OWVAR 39
26024: PUSH
26025: LD_INT 3
26027: ST_TO_ADDR
// vc_control := control_apeman ;
26028: LD_ADDR_OWVAR 38
26032: PUSH
26033: LD_INT 5
26035: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26036: LD_ADDR_OWVAR 40
26040: PUSH
26041: LD_INT 29
26043: ST_TO_ADDR
// un := CreateVehicle ;
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: CALL_OW 45
26053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26054: LD_VAR 0 2
26058: PPUSH
26059: LD_INT 1
26061: PPUSH
26062: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26066: LD_INT 35
26068: PPUSH
26069: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26073: LD_VAR 0 2
26077: PPUSH
26078: LD_INT 22
26080: PUSH
26081: LD_OWVAR 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PPUSH
26090: CALL_OW 69
26094: PPUSH
26095: LD_VAR 0 2
26099: PPUSH
26100: CALL_OW 74
26104: PPUSH
26105: CALL_OW 115
// until IsDead ( un ) ;
26109: LD_VAR 0 2
26113: PPUSH
26114: CALL_OW 301
26118: IFFALSE 26066
// end ;
26120: PPOPN 2
26122: END
// every 0 0$1 trigger StreamModeActive and sStu do
26123: LD_EXP 72
26127: PUSH
26128: LD_EXP 111
26132: AND
26133: IFFALSE 26149
26135: GO 26137
26137: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26138: LD_STRING displayStucuk();
26140: PPUSH
26141: CALL_OW 559
// ResetFog ;
26145: CALL_OW 335
// end ;
26149: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26150: LD_EXP 72
26154: PUSH
26155: LD_EXP 104
26159: AND
26160: IFFALSE 26301
26162: GO 26164
26164: DISABLE
26165: LD_INT 0
26167: PPUSH
26168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26169: LD_ADDR_VAR 0 2
26173: PUSH
26174: LD_INT 22
26176: PUSH
26177: LD_OWVAR 2
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 21
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PPUSH
26200: CALL_OW 69
26204: ST_TO_ADDR
// if not tmp then
26205: LD_VAR 0 2
26209: NOT
26210: IFFALSE 26214
// exit ;
26212: GO 26301
// un := tmp [ rand ( 1 , tmp ) ] ;
26214: LD_ADDR_VAR 0 1
26218: PUSH
26219: LD_VAR 0 2
26223: PUSH
26224: LD_INT 1
26226: PPUSH
26227: LD_VAR 0 2
26231: PPUSH
26232: CALL_OW 12
26236: ARRAY
26237: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_INT 0
26245: PPUSH
26246: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26250: LD_VAR 0 1
26254: PPUSH
26255: LD_OWVAR 3
26259: PUSH
26260: LD_VAR 0 1
26264: DIFF
26265: PPUSH
26266: LD_VAR 0 1
26270: PPUSH
26271: CALL_OW 74
26275: PPUSH
26276: CALL_OW 115
// wait ( 0 0$20 ) ;
26280: LD_INT 700
26282: PPUSH
26283: CALL_OW 67
// SetSide ( un , your_side ) ;
26287: LD_VAR 0 1
26291: PPUSH
26292: LD_OWVAR 2
26296: PPUSH
26297: CALL_OW 235
// end ;
26301: PPOPN 2
26303: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26304: LD_EXP 72
26308: PUSH
26309: LD_EXP 105
26313: AND
26314: IFFALSE 26420
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26322: LD_ADDR_VAR 0 1
26326: PUSH
26327: LD_INT 22
26329: PUSH
26330: LD_OWVAR 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: LD_INT 30
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 30
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PPUSH
26371: CALL_OW 69
26375: ST_TO_ADDR
// if not depot then
26376: LD_VAR 0 1
26380: NOT
26381: IFFALSE 26385
// exit ;
26383: GO 26420
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26385: LD_VAR 0 1
26389: PUSH
26390: LD_INT 1
26392: ARRAY
26393: PPUSH
26394: CALL_OW 250
26398: PPUSH
26399: LD_VAR 0 1
26403: PUSH
26404: LD_INT 1
26406: ARRAY
26407: PPUSH
26408: CALL_OW 251
26412: PPUSH
26413: LD_INT 70
26415: PPUSH
26416: CALL_OW 495
// end ;
26420: PPOPN 1
26422: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26423: LD_EXP 72
26427: PUSH
26428: LD_EXP 106
26432: AND
26433: IFFALSE 26644
26435: GO 26437
26437: DISABLE
26438: LD_INT 0
26440: PPUSH
26441: PPUSH
26442: PPUSH
26443: PPUSH
26444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26445: LD_ADDR_VAR 0 5
26449: PUSH
26450: LD_INT 22
26452: PUSH
26453: LD_OWVAR 2
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 21
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PPUSH
26476: CALL_OW 69
26480: ST_TO_ADDR
// if not tmp then
26481: LD_VAR 0 5
26485: NOT
26486: IFFALSE 26490
// exit ;
26488: GO 26644
// for i in tmp do
26490: LD_ADDR_VAR 0 1
26494: PUSH
26495: LD_VAR 0 5
26499: PUSH
26500: FOR_IN
26501: IFFALSE 26642
// begin d := rand ( 0 , 5 ) ;
26503: LD_ADDR_VAR 0 4
26507: PUSH
26508: LD_INT 0
26510: PPUSH
26511: LD_INT 5
26513: PPUSH
26514: CALL_OW 12
26518: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26519: LD_ADDR_VAR 0 2
26523: PUSH
26524: LD_VAR 0 1
26528: PPUSH
26529: CALL_OW 250
26533: PPUSH
26534: LD_VAR 0 4
26538: PPUSH
26539: LD_INT 3
26541: PPUSH
26542: LD_INT 12
26544: PPUSH
26545: CALL_OW 12
26549: PPUSH
26550: CALL_OW 272
26554: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: LD_VAR 0 1
26564: PPUSH
26565: CALL_OW 251
26569: PPUSH
26570: LD_VAR 0 4
26574: PPUSH
26575: LD_INT 3
26577: PPUSH
26578: LD_INT 12
26580: PPUSH
26581: CALL_OW 12
26585: PPUSH
26586: CALL_OW 273
26590: ST_TO_ADDR
// if ValidHex ( x , y ) then
26591: LD_VAR 0 2
26595: PPUSH
26596: LD_VAR 0 3
26600: PPUSH
26601: CALL_OW 488
26605: IFFALSE 26640
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26607: LD_VAR 0 1
26611: PPUSH
26612: LD_VAR 0 2
26616: PPUSH
26617: LD_VAR 0 3
26621: PPUSH
26622: LD_INT 3
26624: PPUSH
26625: LD_INT 6
26627: PPUSH
26628: CALL_OW 12
26632: PPUSH
26633: LD_INT 1
26635: PPUSH
26636: CALL_OW 483
// end ;
26640: GO 26500
26642: POP
26643: POP
// end ;
26644: PPOPN 5
26646: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26647: LD_EXP 72
26651: PUSH
26652: LD_EXP 107
26656: AND
26657: IFFALSE 26751
26659: GO 26661
26661: DISABLE
26662: LD_INT 0
26664: PPUSH
26665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26666: LD_ADDR_VAR 0 2
26670: PUSH
26671: LD_INT 22
26673: PUSH
26674: LD_OWVAR 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 32
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 21
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: PPUSH
26708: CALL_OW 69
26712: ST_TO_ADDR
// if not tmp then
26713: LD_VAR 0 2
26717: NOT
26718: IFFALSE 26722
// exit ;
26720: GO 26751
// for i in tmp do
26722: LD_ADDR_VAR 0 1
26726: PUSH
26727: LD_VAR 0 2
26731: PUSH
26732: FOR_IN
26733: IFFALSE 26749
// SetFuel ( i , 0 ) ;
26735: LD_VAR 0 1
26739: PPUSH
26740: LD_INT 0
26742: PPUSH
26743: CALL_OW 240
26747: GO 26732
26749: POP
26750: POP
// end ;
26751: PPOPN 2
26753: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26754: LD_EXP 72
26758: PUSH
26759: LD_EXP 108
26763: AND
26764: IFFALSE 26830
26766: GO 26768
26768: DISABLE
26769: LD_INT 0
26771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26772: LD_ADDR_VAR 0 1
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_OWVAR 2
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 30
26791: PUSH
26792: LD_INT 29
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PPUSH
26803: CALL_OW 69
26807: ST_TO_ADDR
// if not tmp then
26808: LD_VAR 0 1
26812: NOT
26813: IFFALSE 26817
// exit ;
26815: GO 26830
// DestroyUnit ( tmp [ 1 ] ) ;
26817: LD_VAR 0 1
26821: PUSH
26822: LD_INT 1
26824: ARRAY
26825: PPUSH
26826: CALL_OW 65
// end ;
26830: PPOPN 1
26832: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26833: LD_EXP 72
26837: PUSH
26838: LD_EXP 110
26842: AND
26843: IFFALSE 26972
26845: GO 26847
26847: DISABLE
26848: LD_INT 0
26850: PPUSH
// begin uc_side := 0 ;
26851: LD_ADDR_OWVAR 20
26855: PUSH
26856: LD_INT 0
26858: ST_TO_ADDR
// uc_nation := nation_arabian ;
26859: LD_ADDR_OWVAR 21
26863: PUSH
26864: LD_INT 2
26866: ST_TO_ADDR
// hc_gallery :=  ;
26867: LD_ADDR_OWVAR 33
26871: PUSH
26872: LD_STRING 
26874: ST_TO_ADDR
// hc_name :=  ;
26875: LD_ADDR_OWVAR 26
26879: PUSH
26880: LD_STRING 
26882: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26883: LD_INT 1
26885: PPUSH
26886: LD_INT 11
26888: PPUSH
26889: LD_INT 10
26891: PPUSH
26892: CALL_OW 380
// un := CreateHuman ;
26896: LD_ADDR_VAR 0 1
26900: PUSH
26901: CALL_OW 44
26905: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_INT 1
26913: PPUSH
26914: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26918: LD_INT 35
26920: PPUSH
26921: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26925: LD_VAR 0 1
26929: PPUSH
26930: LD_INT 22
26932: PUSH
26933: LD_OWVAR 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PPUSH
26942: CALL_OW 69
26946: PPUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 74
26956: PPUSH
26957: CALL_OW 115
// until IsDead ( un ) ;
26961: LD_VAR 0 1
26965: PPUSH
26966: CALL_OW 301
26970: IFFALSE 26918
// end ;
26972: PPOPN 1
26974: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26975: LD_EXP 72
26979: PUSH
26980: LD_EXP 112
26984: AND
26985: IFFALSE 26997
26987: GO 26989
26989: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26990: LD_STRING earthquake(getX(game), 0, 32)
26992: PPUSH
26993: CALL_OW 559
26997: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26998: LD_EXP 72
27002: PUSH
27003: LD_EXP 113
27007: AND
27008: IFFALSE 27099
27010: GO 27012
27012: DISABLE
27013: LD_INT 0
27015: PPUSH
// begin enable ;
27016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27017: LD_ADDR_VAR 0 1
27021: PUSH
27022: LD_INT 22
27024: PUSH
27025: LD_OWVAR 2
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 21
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 33
27046: PUSH
27047: LD_INT 3
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 69
27063: ST_TO_ADDR
// if not tmp then
27064: LD_VAR 0 1
27068: NOT
27069: IFFALSE 27073
// exit ;
27071: GO 27099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27073: LD_VAR 0 1
27077: PUSH
27078: LD_INT 1
27080: PPUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 12
27090: ARRAY
27091: PPUSH
27092: LD_INT 1
27094: PPUSH
27095: CALL_OW 234
// end ;
27099: PPOPN 1
27101: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27102: LD_EXP 72
27106: PUSH
27107: LD_EXP 114
27111: AND
27112: IFFALSE 27253
27114: GO 27116
27116: DISABLE
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
27121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27122: LD_ADDR_VAR 0 3
27126: PUSH
27127: LD_INT 22
27129: PUSH
27130: LD_OWVAR 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 25
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PPUSH
27153: CALL_OW 69
27157: ST_TO_ADDR
// if not tmp then
27158: LD_VAR 0 3
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27253
// un := tmp [ rand ( 1 , tmp ) ] ;
27167: LD_ADDR_VAR 0 2
27171: PUSH
27172: LD_VAR 0 3
27176: PUSH
27177: LD_INT 1
27179: PPUSH
27180: LD_VAR 0 3
27184: PPUSH
27185: CALL_OW 12
27189: ARRAY
27190: ST_TO_ADDR
// if Crawls ( un ) then
27191: LD_VAR 0 2
27195: PPUSH
27196: CALL_OW 318
27200: IFFALSE 27211
// ComWalk ( un ) ;
27202: LD_VAR 0 2
27206: PPUSH
27207: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27211: LD_VAR 0 2
27215: PPUSH
27216: LD_INT 9
27218: PPUSH
27219: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27223: LD_INT 28
27225: PPUSH
27226: LD_OWVAR 2
27230: PPUSH
27231: LD_INT 2
27233: PPUSH
27234: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27238: LD_INT 29
27240: PPUSH
27241: LD_OWVAR 2
27245: PPUSH
27246: LD_INT 2
27248: PPUSH
27249: CALL_OW 322
// end ;
27253: PPOPN 3
27255: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27256: LD_EXP 72
27260: PUSH
27261: LD_EXP 115
27265: AND
27266: IFFALSE 27377
27268: GO 27270
27270: DISABLE
27271: LD_INT 0
27273: PPUSH
27274: PPUSH
27275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27276: LD_ADDR_VAR 0 3
27280: PUSH
27281: LD_INT 22
27283: PUSH
27284: LD_OWVAR 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 25
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PPUSH
27307: CALL_OW 69
27311: ST_TO_ADDR
// if not tmp then
27312: LD_VAR 0 3
27316: NOT
27317: IFFALSE 27321
// exit ;
27319: GO 27377
// un := tmp [ rand ( 1 , tmp ) ] ;
27321: LD_ADDR_VAR 0 2
27325: PUSH
27326: LD_VAR 0 3
27330: PUSH
27331: LD_INT 1
27333: PPUSH
27334: LD_VAR 0 3
27338: PPUSH
27339: CALL_OW 12
27343: ARRAY
27344: ST_TO_ADDR
// if Crawls ( un ) then
27345: LD_VAR 0 2
27349: PPUSH
27350: CALL_OW 318
27354: IFFALSE 27365
// ComWalk ( un ) ;
27356: LD_VAR 0 2
27360: PPUSH
27361: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27365: LD_VAR 0 2
27369: PPUSH
27370: LD_INT 8
27372: PPUSH
27373: CALL_OW 336
// end ;
27377: PPOPN 3
27379: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27380: LD_EXP 72
27384: PUSH
27385: LD_EXP 116
27389: AND
27390: IFFALSE 27534
27392: GO 27394
27394: DISABLE
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27399: LD_ADDR_VAR 0 2
27403: PUSH
27404: LD_INT 22
27406: PUSH
27407: LD_OWVAR 2
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 21
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: LD_INT 34
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 34
27441: PUSH
27442: LD_INT 51
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 34
27451: PUSH
27452: LD_INT 32
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: PPUSH
27470: CALL_OW 69
27474: ST_TO_ADDR
// if not tmp then
27475: LD_VAR 0 2
27479: NOT
27480: IFFALSE 27484
// exit ;
27482: GO 27534
// for i in tmp do
27484: LD_ADDR_VAR 0 1
27488: PUSH
27489: LD_VAR 0 2
27493: PUSH
27494: FOR_IN
27495: IFFALSE 27532
// if GetCargo ( i , mat_artifact ) = 0 then
27497: LD_VAR 0 1
27501: PPUSH
27502: LD_INT 4
27504: PPUSH
27505: CALL_OW 289
27509: PUSH
27510: LD_INT 0
27512: EQUAL
27513: IFFALSE 27530
// SetCargo ( i , mat_siberit , 100 ) ;
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_INT 3
27522: PPUSH
27523: LD_INT 100
27525: PPUSH
27526: CALL_OW 290
27530: GO 27494
27532: POP
27533: POP
// end ;
27534: PPOPN 2
27536: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27537: LD_EXP 72
27541: PUSH
27542: LD_EXP 117
27546: AND
27547: IFFALSE 27730
27549: GO 27551
27551: DISABLE
27552: LD_INT 0
27554: PPUSH
27555: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27556: LD_ADDR_VAR 0 2
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_OWVAR 2
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PPUSH
27573: CALL_OW 69
27577: ST_TO_ADDR
// if not tmp then
27578: LD_VAR 0 2
27582: NOT
27583: IFFALSE 27587
// exit ;
27585: GO 27730
// for i := 1 to 2 do
27587: LD_ADDR_VAR 0 1
27591: PUSH
27592: DOUBLE
27593: LD_INT 1
27595: DEC
27596: ST_TO_ADDR
27597: LD_INT 2
27599: PUSH
27600: FOR_TO
27601: IFFALSE 27728
// begin uc_side := your_side ;
27603: LD_ADDR_OWVAR 20
27607: PUSH
27608: LD_OWVAR 2
27612: ST_TO_ADDR
// uc_nation := nation_american ;
27613: LD_ADDR_OWVAR 21
27617: PUSH
27618: LD_INT 1
27620: ST_TO_ADDR
// vc_chassis := us_morphling ;
27621: LD_ADDR_OWVAR 37
27625: PUSH
27626: LD_INT 5
27628: ST_TO_ADDR
// vc_engine := engine_siberite ;
27629: LD_ADDR_OWVAR 39
27633: PUSH
27634: LD_INT 3
27636: ST_TO_ADDR
// vc_control := control_computer ;
27637: LD_ADDR_OWVAR 38
27641: PUSH
27642: LD_INT 3
27644: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27645: LD_ADDR_OWVAR 40
27649: PUSH
27650: LD_INT 10
27652: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27653: LD_VAR 0 2
27657: PUSH
27658: LD_INT 1
27660: ARRAY
27661: PPUSH
27662: CALL_OW 310
27666: NOT
27667: IFFALSE 27714
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27669: CALL_OW 45
27673: PPUSH
27674: LD_VAR 0 2
27678: PUSH
27679: LD_INT 1
27681: ARRAY
27682: PPUSH
27683: CALL_OW 250
27687: PPUSH
27688: LD_VAR 0 2
27692: PUSH
27693: LD_INT 1
27695: ARRAY
27696: PPUSH
27697: CALL_OW 251
27701: PPUSH
27702: LD_INT 12
27704: PPUSH
27705: LD_INT 1
27707: PPUSH
27708: CALL_OW 50
27712: GO 27726
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27714: CALL_OW 45
27718: PPUSH
27719: LD_INT 1
27721: PPUSH
27722: CALL_OW 51
// end ;
27726: GO 27600
27728: POP
27729: POP
// end ;
27730: PPOPN 2
27732: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27733: LD_EXP 72
27737: PUSH
27738: LD_EXP 118
27742: AND
27743: IFFALSE 27965
27745: GO 27747
27747: DISABLE
27748: LD_INT 0
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
27754: PPUSH
27755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27756: LD_ADDR_VAR 0 6
27760: PUSH
27761: LD_INT 22
27763: PUSH
27764: LD_OWVAR 2
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 21
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: LD_INT 23
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: PPUSH
27805: CALL_OW 69
27809: ST_TO_ADDR
// if not tmp then
27810: LD_VAR 0 6
27814: NOT
27815: IFFALSE 27819
// exit ;
27817: GO 27965
// s1 := rand ( 1 , 4 ) ;
27819: LD_ADDR_VAR 0 2
27823: PUSH
27824: LD_INT 1
27826: PPUSH
27827: LD_INT 4
27829: PPUSH
27830: CALL_OW 12
27834: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27835: LD_ADDR_VAR 0 4
27839: PUSH
27840: LD_VAR 0 6
27844: PUSH
27845: LD_INT 1
27847: ARRAY
27848: PPUSH
27849: LD_VAR 0 2
27853: PPUSH
27854: CALL_OW 259
27858: ST_TO_ADDR
// if s1 = 1 then
27859: LD_VAR 0 2
27863: PUSH
27864: LD_INT 1
27866: EQUAL
27867: IFFALSE 27887
// s2 := rand ( 2 , 4 ) else
27869: LD_ADDR_VAR 0 3
27873: PUSH
27874: LD_INT 2
27876: PPUSH
27877: LD_INT 4
27879: PPUSH
27880: CALL_OW 12
27884: ST_TO_ADDR
27885: GO 27895
// s2 := 1 ;
27887: LD_ADDR_VAR 0 3
27891: PUSH
27892: LD_INT 1
27894: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27895: LD_ADDR_VAR 0 5
27899: PUSH
27900: LD_VAR 0 6
27904: PUSH
27905: LD_INT 1
27907: ARRAY
27908: PPUSH
27909: LD_VAR 0 3
27913: PPUSH
27914: CALL_OW 259
27918: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27919: LD_VAR 0 6
27923: PUSH
27924: LD_INT 1
27926: ARRAY
27927: PPUSH
27928: LD_VAR 0 2
27932: PPUSH
27933: LD_VAR 0 5
27937: PPUSH
27938: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27942: LD_VAR 0 6
27946: PUSH
27947: LD_INT 1
27949: ARRAY
27950: PPUSH
27951: LD_VAR 0 3
27955: PPUSH
27956: LD_VAR 0 4
27960: PPUSH
27961: CALL_OW 237
// end ;
27965: PPOPN 6
27967: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27968: LD_EXP 72
27972: PUSH
27973: LD_EXP 119
27977: AND
27978: IFFALSE 28057
27980: GO 27982
27982: DISABLE
27983: LD_INT 0
27985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27986: LD_ADDR_VAR 0 1
27990: PUSH
27991: LD_INT 22
27993: PUSH
27994: LD_OWVAR 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 30
28005: PUSH
28006: LD_INT 3
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PPUSH
28017: CALL_OW 69
28021: ST_TO_ADDR
// if not tmp then
28022: LD_VAR 0 1
28026: NOT
28027: IFFALSE 28031
// exit ;
28029: GO 28057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28031: LD_VAR 0 1
28035: PUSH
28036: LD_INT 1
28038: PPUSH
28039: LD_VAR 0 1
28043: PPUSH
28044: CALL_OW 12
28048: ARRAY
28049: PPUSH
28050: LD_INT 1
28052: PPUSH
28053: CALL_OW 234
// end ;
28057: PPOPN 1
28059: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28060: LD_EXP 72
28064: PUSH
28065: LD_EXP 120
28069: AND
28070: IFFALSE 28182
28072: GO 28074
28074: DISABLE
28075: LD_INT 0
28077: PPUSH
28078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28079: LD_ADDR_VAR 0 2
28083: PUSH
28084: LD_INT 22
28086: PUSH
28087: LD_OWVAR 2
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 30
28101: PUSH
28102: LD_INT 27
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 30
28111: PUSH
28112: LD_INT 26
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 30
28121: PUSH
28122: LD_INT 28
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PPUSH
28139: CALL_OW 69
28143: ST_TO_ADDR
// if not tmp then
28144: LD_VAR 0 2
28148: NOT
28149: IFFALSE 28153
// exit ;
28151: GO 28182
// for i in tmp do
28153: LD_ADDR_VAR 0 1
28157: PUSH
28158: LD_VAR 0 2
28162: PUSH
28163: FOR_IN
28164: IFFALSE 28180
// SetLives ( i , 1 ) ;
28166: LD_VAR 0 1
28170: PPUSH
28171: LD_INT 1
28173: PPUSH
28174: CALL_OW 234
28178: GO 28163
28180: POP
28181: POP
// end ;
28182: PPOPN 2
28184: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28185: LD_EXP 72
28189: PUSH
28190: LD_EXP 121
28194: AND
28195: IFFALSE 28469
28197: GO 28199
28199: DISABLE
28200: LD_INT 0
28202: PPUSH
28203: PPUSH
28204: PPUSH
// begin i := rand ( 1 , 7 ) ;
28205: LD_ADDR_VAR 0 1
28209: PUSH
28210: LD_INT 1
28212: PPUSH
28213: LD_INT 7
28215: PPUSH
28216: CALL_OW 12
28220: ST_TO_ADDR
// case i of 1 :
28221: LD_VAR 0 1
28225: PUSH
28226: LD_INT 1
28228: DOUBLE
28229: EQUAL
28230: IFTRUE 28234
28232: GO 28244
28234: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28235: LD_STRING earthquake(getX(game), 0, 32)
28237: PPUSH
28238: CALL_OW 559
28242: GO 28469
28244: LD_INT 2
28246: DOUBLE
28247: EQUAL
28248: IFTRUE 28252
28250: GO 28266
28252: POP
// begin ToLua ( displayStucuk(); ) ;
28253: LD_STRING displayStucuk();
28255: PPUSH
28256: CALL_OW 559
// ResetFog ;
28260: CALL_OW 335
// end ; 3 :
28264: GO 28469
28266: LD_INT 3
28268: DOUBLE
28269: EQUAL
28270: IFTRUE 28274
28272: GO 28378
28274: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28275: LD_ADDR_VAR 0 2
28279: PUSH
28280: LD_INT 22
28282: PUSH
28283: LD_OWVAR 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 25
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PPUSH
28306: CALL_OW 69
28310: ST_TO_ADDR
// if not tmp then
28311: LD_VAR 0 2
28315: NOT
28316: IFFALSE 28320
// exit ;
28318: GO 28469
// un := tmp [ rand ( 1 , tmp ) ] ;
28320: LD_ADDR_VAR 0 3
28324: PUSH
28325: LD_VAR 0 2
28329: PUSH
28330: LD_INT 1
28332: PPUSH
28333: LD_VAR 0 2
28337: PPUSH
28338: CALL_OW 12
28342: ARRAY
28343: ST_TO_ADDR
// if Crawls ( un ) then
28344: LD_VAR 0 3
28348: PPUSH
28349: CALL_OW 318
28353: IFFALSE 28364
// ComWalk ( un ) ;
28355: LD_VAR 0 3
28359: PPUSH
28360: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28364: LD_VAR 0 3
28368: PPUSH
28369: LD_INT 8
28371: PPUSH
28372: CALL_OW 336
// end ; 4 :
28376: GO 28469
28378: LD_INT 4
28380: DOUBLE
28381: EQUAL
28382: IFTRUE 28386
28384: GO 28447
28386: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28387: LD_ADDR_VAR 0 2
28391: PUSH
28392: LD_INT 22
28394: PUSH
28395: LD_OWVAR 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 30
28406: PUSH
28407: LD_INT 29
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PPUSH
28418: CALL_OW 69
28422: ST_TO_ADDR
// if not tmp then
28423: LD_VAR 0 2
28427: NOT
28428: IFFALSE 28432
// exit ;
28430: GO 28469
// DestroyUnit ( tmp [ 1 ] ) ;
28432: LD_VAR 0 2
28436: PUSH
28437: LD_INT 1
28439: ARRAY
28440: PPUSH
28441: CALL_OW 65
// end ; 5 .. 7 :
28445: GO 28469
28447: LD_INT 5
28449: DOUBLE
28450: GREATEREQUAL
28451: IFFALSE 28459
28453: LD_INT 7
28455: DOUBLE
28456: LESSEQUAL
28457: IFTRUE 28461
28459: GO 28468
28461: POP
// StreamSibBomb ; end ;
28462: CALL 24719 0 0
28466: GO 28469
28468: POP
// end ;
28469: PPOPN 3
28471: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28472: LD_EXP 72
28476: PUSH
28477: LD_EXP 122
28481: AND
28482: IFFALSE 28638
28484: GO 28486
28486: DISABLE
28487: LD_INT 0
28489: PPUSH
28490: PPUSH
28491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28492: LD_ADDR_VAR 0 2
28496: PUSH
28497: LD_INT 81
28499: PUSH
28500: LD_OWVAR 2
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 21
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 21
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PPUSH
28541: CALL_OW 69
28545: ST_TO_ADDR
// if not tmp then
28546: LD_VAR 0 2
28550: NOT
28551: IFFALSE 28555
// exit ;
28553: GO 28638
// p := 0 ;
28555: LD_ADDR_VAR 0 3
28559: PUSH
28560: LD_INT 0
28562: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28563: LD_INT 35
28565: PPUSH
28566: CALL_OW 67
// p := p + 1 ;
28570: LD_ADDR_VAR 0 3
28574: PUSH
28575: LD_VAR 0 3
28579: PUSH
28580: LD_INT 1
28582: PLUS
28583: ST_TO_ADDR
// for i in tmp do
28584: LD_ADDR_VAR 0 1
28588: PUSH
28589: LD_VAR 0 2
28593: PUSH
28594: FOR_IN
28595: IFFALSE 28626
// if GetLives ( i ) < 1000 then
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 256
28606: PUSH
28607: LD_INT 1000
28609: LESS
28610: IFFALSE 28624
// SetLives ( i , 1000 ) ;
28612: LD_VAR 0 1
28616: PPUSH
28617: LD_INT 1000
28619: PPUSH
28620: CALL_OW 234
28624: GO 28594
28626: POP
28627: POP
// until p > 20 ;
28628: LD_VAR 0 3
28632: PUSH
28633: LD_INT 20
28635: GREATER
28636: IFFALSE 28563
// end ;
28638: PPOPN 3
28640: END
// every 0 0$1 trigger StreamModeActive and sTime do
28641: LD_EXP 72
28645: PUSH
28646: LD_EXP 123
28650: AND
28651: IFFALSE 28686
28653: GO 28655
28655: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28656: LD_INT 28
28658: PPUSH
28659: LD_OWVAR 2
28663: PPUSH
28664: LD_INT 2
28666: PPUSH
28667: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28671: LD_INT 30
28673: PPUSH
28674: LD_OWVAR 2
28678: PPUSH
28679: LD_INT 2
28681: PPUSH
28682: CALL_OW 322
// end ;
28686: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28687: LD_EXP 72
28691: PUSH
28692: LD_EXP 124
28696: AND
28697: IFFALSE 28818
28699: GO 28701
28701: DISABLE
28702: LD_INT 0
28704: PPUSH
28705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28706: LD_ADDR_VAR 0 2
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_OWVAR 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 21
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 3
28735: PUSH
28736: LD_INT 23
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: PPUSH
28755: CALL_OW 69
28759: ST_TO_ADDR
// if not tmp then
28760: LD_VAR 0 2
28764: NOT
28765: IFFALSE 28769
// exit ;
28767: GO 28818
// for i in tmp do
28769: LD_ADDR_VAR 0 1
28773: PUSH
28774: LD_VAR 0 2
28778: PUSH
28779: FOR_IN
28780: IFFALSE 28816
// begin if Crawls ( i ) then
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 318
28791: IFFALSE 28802
// ComWalk ( i ) ;
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL_OW 138
// SetClass ( i , 2 ) ;
28802: LD_VAR 0 1
28806: PPUSH
28807: LD_INT 2
28809: PPUSH
28810: CALL_OW 336
// end ;
28814: GO 28779
28816: POP
28817: POP
// end ;
28818: PPOPN 2
28820: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28821: LD_EXP 72
28825: PUSH
28826: LD_EXP 125
28830: AND
28831: IFFALSE 29112
28833: GO 28835
28835: DISABLE
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
28840: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28841: LD_OWVAR 2
28845: PPUSH
28846: LD_INT 9
28848: PPUSH
28849: LD_INT 1
28851: PPUSH
28852: LD_INT 1
28854: PPUSH
28855: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28859: LD_INT 9
28861: PPUSH
28862: LD_OWVAR 2
28866: PPUSH
28867: CALL_OW 343
// uc_side := 9 ;
28871: LD_ADDR_OWVAR 20
28875: PUSH
28876: LD_INT 9
28878: ST_TO_ADDR
// uc_nation := 2 ;
28879: LD_ADDR_OWVAR 21
28883: PUSH
28884: LD_INT 2
28886: ST_TO_ADDR
// hc_name := Dark Warrior ;
28887: LD_ADDR_OWVAR 26
28891: PUSH
28892: LD_STRING Dark Warrior
28894: ST_TO_ADDR
// hc_gallery :=  ;
28895: LD_ADDR_OWVAR 33
28899: PUSH
28900: LD_STRING 
28902: ST_TO_ADDR
// hc_noskilllimit := true ;
28903: LD_ADDR_OWVAR 76
28907: PUSH
28908: LD_INT 1
28910: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28911: LD_ADDR_OWVAR 31
28915: PUSH
28916: LD_INT 30
28918: PUSH
28919: LD_INT 30
28921: PUSH
28922: LD_INT 30
28924: PUSH
28925: LD_INT 30
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// un := CreateHuman ;
28934: LD_ADDR_VAR 0 3
28938: PUSH
28939: CALL_OW 44
28943: ST_TO_ADDR
// hc_noskilllimit := false ;
28944: LD_ADDR_OWVAR 76
28948: PUSH
28949: LD_INT 0
28951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28952: LD_VAR 0 3
28956: PPUSH
28957: LD_INT 1
28959: PPUSH
28960: CALL_OW 51
// p := 0 ;
28964: LD_ADDR_VAR 0 2
28968: PUSH
28969: LD_INT 0
28971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28972: LD_INT 35
28974: PPUSH
28975: CALL_OW 67
// p := p + 1 ;
28979: LD_ADDR_VAR 0 2
28983: PUSH
28984: LD_VAR 0 2
28988: PUSH
28989: LD_INT 1
28991: PLUS
28992: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28993: LD_VAR 0 3
28997: PPUSH
28998: CALL_OW 256
29002: PUSH
29003: LD_INT 1000
29005: LESS
29006: IFFALSE 29020
// SetLives ( un , 1000 ) ;
29008: LD_VAR 0 3
29012: PPUSH
29013: LD_INT 1000
29015: PPUSH
29016: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29020: LD_VAR 0 3
29024: PPUSH
29025: LD_INT 81
29027: PUSH
29028: LD_OWVAR 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 91
29039: PUSH
29040: LD_VAR 0 3
29044: PUSH
29045: LD_INT 30
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PPUSH
29057: CALL_OW 69
29061: PPUSH
29062: LD_VAR 0 3
29066: PPUSH
29067: CALL_OW 74
29071: PPUSH
29072: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29076: LD_VAR 0 2
29080: PUSH
29081: LD_INT 60
29083: GREATER
29084: PUSH
29085: LD_VAR 0 3
29089: PPUSH
29090: CALL_OW 301
29094: OR
29095: IFFALSE 28972
// if un then
29097: LD_VAR 0 3
29101: IFFALSE 29112
// RemoveUnit ( un ) ;
29103: LD_VAR 0 3
29107: PPUSH
29108: CALL_OW 64
// end ;
29112: PPOPN 3
29114: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29115: LD_INT 0
29117: PPUSH
// case cmd of 301 :
29118: LD_VAR 0 1
29122: PUSH
29123: LD_INT 301
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29163
29131: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29132: LD_VAR 0 6
29136: PPUSH
29137: LD_VAR 0 7
29141: PPUSH
29142: LD_VAR 0 8
29146: PPUSH
29147: LD_VAR 0 4
29151: PPUSH
29152: LD_VAR 0 5
29156: PPUSH
29157: CALL 30364 0 5
29161: GO 29284
29163: LD_INT 302
29165: DOUBLE
29166: EQUAL
29167: IFTRUE 29171
29169: GO 29208
29171: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29172: LD_VAR 0 6
29176: PPUSH
29177: LD_VAR 0 7
29181: PPUSH
29182: LD_VAR 0 8
29186: PPUSH
29187: LD_VAR 0 9
29191: PPUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: LD_VAR 0 5
29201: PPUSH
29202: CALL 30455 0 6
29206: GO 29284
29208: LD_INT 303
29210: DOUBLE
29211: EQUAL
29212: IFTRUE 29216
29214: GO 29253
29216: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29217: LD_VAR 0 6
29221: PPUSH
29222: LD_VAR 0 7
29226: PPUSH
29227: LD_VAR 0 8
29231: PPUSH
29232: LD_VAR 0 9
29236: PPUSH
29237: LD_VAR 0 4
29241: PPUSH
29242: LD_VAR 0 5
29246: PPUSH
29247: CALL 29289 0 6
29251: GO 29284
29253: LD_INT 304
29255: DOUBLE
29256: EQUAL
29257: IFTRUE 29261
29259: GO 29283
29261: POP
// hHackTeleport ( unit , x , y ) ; end ;
29262: LD_VAR 0 2
29266: PPUSH
29267: LD_VAR 0 4
29271: PPUSH
29272: LD_VAR 0 5
29276: PPUSH
29277: CALL 31048 0 3
29281: GO 29284
29283: POP
// end ;
29284: LD_VAR 0 12
29288: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29289: LD_INT 0
29291: PPUSH
29292: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29293: LD_VAR 0 1
29297: PUSH
29298: LD_INT 1
29300: LESS
29301: PUSH
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 3
29309: GREATER
29310: OR
29311: PUSH
29312: LD_VAR 0 5
29316: PPUSH
29317: LD_VAR 0 6
29321: PPUSH
29322: CALL_OW 428
29326: OR
29327: IFFALSE 29331
// exit ;
29329: GO 30051
// uc_side := your_side ;
29331: LD_ADDR_OWVAR 20
29335: PUSH
29336: LD_OWVAR 2
29340: ST_TO_ADDR
// uc_nation := nation ;
29341: LD_ADDR_OWVAR 21
29345: PUSH
29346: LD_VAR 0 1
29350: ST_TO_ADDR
// bc_level = 1 ;
29351: LD_ADDR_OWVAR 43
29355: PUSH
29356: LD_INT 1
29358: ST_TO_ADDR
// case btype of 1 :
29359: LD_VAR 0 2
29363: PUSH
29364: LD_INT 1
29366: DOUBLE
29367: EQUAL
29368: IFTRUE 29372
29370: GO 29383
29372: POP
// bc_type := b_depot ; 2 :
29373: LD_ADDR_OWVAR 42
29377: PUSH
29378: LD_INT 0
29380: ST_TO_ADDR
29381: GO 29995
29383: LD_INT 2
29385: DOUBLE
29386: EQUAL
29387: IFTRUE 29391
29389: GO 29402
29391: POP
// bc_type := b_warehouse ; 3 :
29392: LD_ADDR_OWVAR 42
29396: PUSH
29397: LD_INT 1
29399: ST_TO_ADDR
29400: GO 29995
29402: LD_INT 3
29404: DOUBLE
29405: EQUAL
29406: IFTRUE 29410
29408: GO 29421
29410: POP
// bc_type := b_lab ; 4 .. 9 :
29411: LD_ADDR_OWVAR 42
29415: PUSH
29416: LD_INT 6
29418: ST_TO_ADDR
29419: GO 29995
29421: LD_INT 4
29423: DOUBLE
29424: GREATEREQUAL
29425: IFFALSE 29433
29427: LD_INT 9
29429: DOUBLE
29430: LESSEQUAL
29431: IFTRUE 29435
29433: GO 29487
29435: POP
// begin bc_type := b_lab_half ;
29436: LD_ADDR_OWVAR 42
29440: PUSH
29441: LD_INT 7
29443: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29444: LD_ADDR_OWVAR 44
29448: PUSH
29449: LD_INT 10
29451: PUSH
29452: LD_INT 11
29454: PUSH
29455: LD_INT 12
29457: PUSH
29458: LD_INT 15
29460: PUSH
29461: LD_INT 14
29463: PUSH
29464: LD_INT 13
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: LD_VAR 0 2
29479: PUSH
29480: LD_INT 3
29482: MINUS
29483: ARRAY
29484: ST_TO_ADDR
// end ; 10 .. 13 :
29485: GO 29995
29487: LD_INT 10
29489: DOUBLE
29490: GREATEREQUAL
29491: IFFALSE 29499
29493: LD_INT 13
29495: DOUBLE
29496: LESSEQUAL
29497: IFTRUE 29501
29499: GO 29578
29501: POP
// begin bc_type := b_lab_full ;
29502: LD_ADDR_OWVAR 42
29506: PUSH
29507: LD_INT 8
29509: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29510: LD_ADDR_OWVAR 44
29514: PUSH
29515: LD_INT 10
29517: PUSH
29518: LD_INT 12
29520: PUSH
29521: LD_INT 14
29523: PUSH
29524: LD_INT 13
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: PUSH
29533: LD_VAR 0 2
29537: PUSH
29538: LD_INT 9
29540: MINUS
29541: ARRAY
29542: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29543: LD_ADDR_OWVAR 45
29547: PUSH
29548: LD_INT 11
29550: PUSH
29551: LD_INT 15
29553: PUSH
29554: LD_INT 12
29556: PUSH
29557: LD_INT 15
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: PUSH
29566: LD_VAR 0 2
29570: PUSH
29571: LD_INT 9
29573: MINUS
29574: ARRAY
29575: ST_TO_ADDR
// end ; 14 :
29576: GO 29995
29578: LD_INT 14
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29597
29586: POP
// bc_type := b_workshop ; 15 :
29587: LD_ADDR_OWVAR 42
29591: PUSH
29592: LD_INT 2
29594: ST_TO_ADDR
29595: GO 29995
29597: LD_INT 15
29599: DOUBLE
29600: EQUAL
29601: IFTRUE 29605
29603: GO 29616
29605: POP
// bc_type := b_factory ; 16 :
29606: LD_ADDR_OWVAR 42
29610: PUSH
29611: LD_INT 3
29613: ST_TO_ADDR
29614: GO 29995
29616: LD_INT 16
29618: DOUBLE
29619: EQUAL
29620: IFTRUE 29624
29622: GO 29635
29624: POP
// bc_type := b_ext_gun ; 17 :
29625: LD_ADDR_OWVAR 42
29629: PUSH
29630: LD_INT 17
29632: ST_TO_ADDR
29633: GO 29995
29635: LD_INT 17
29637: DOUBLE
29638: EQUAL
29639: IFTRUE 29643
29641: GO 29671
29643: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29644: LD_ADDR_OWVAR 42
29648: PUSH
29649: LD_INT 19
29651: PUSH
29652: LD_INT 23
29654: PUSH
29655: LD_INT 19
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: PUSH
29663: LD_VAR 0 1
29667: ARRAY
29668: ST_TO_ADDR
29669: GO 29995
29671: LD_INT 18
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29690
29679: POP
// bc_type := b_ext_radar ; 19 :
29680: LD_ADDR_OWVAR 42
29684: PUSH
29685: LD_INT 20
29687: ST_TO_ADDR
29688: GO 29995
29690: LD_INT 19
29692: DOUBLE
29693: EQUAL
29694: IFTRUE 29698
29696: GO 29709
29698: POP
// bc_type := b_ext_radio ; 20 :
29699: LD_ADDR_OWVAR 42
29703: PUSH
29704: LD_INT 22
29706: ST_TO_ADDR
29707: GO 29995
29709: LD_INT 20
29711: DOUBLE
29712: EQUAL
29713: IFTRUE 29717
29715: GO 29728
29717: POP
// bc_type := b_ext_siberium ; 21 :
29718: LD_ADDR_OWVAR 42
29722: PUSH
29723: LD_INT 21
29725: ST_TO_ADDR
29726: GO 29995
29728: LD_INT 21
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 29747
29736: POP
// bc_type := b_ext_computer ; 22 :
29737: LD_ADDR_OWVAR 42
29741: PUSH
29742: LD_INT 24
29744: ST_TO_ADDR
29745: GO 29995
29747: LD_INT 22
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29766
29755: POP
// bc_type := b_ext_track ; 23 :
29756: LD_ADDR_OWVAR 42
29760: PUSH
29761: LD_INT 16
29763: ST_TO_ADDR
29764: GO 29995
29766: LD_INT 23
29768: DOUBLE
29769: EQUAL
29770: IFTRUE 29774
29772: GO 29785
29774: POP
// bc_type := b_ext_laser ; 24 :
29775: LD_ADDR_OWVAR 42
29779: PUSH
29780: LD_INT 25
29782: ST_TO_ADDR
29783: GO 29995
29785: LD_INT 24
29787: DOUBLE
29788: EQUAL
29789: IFTRUE 29793
29791: GO 29804
29793: POP
// bc_type := b_control_tower ; 25 :
29794: LD_ADDR_OWVAR 42
29798: PUSH
29799: LD_INT 36
29801: ST_TO_ADDR
29802: GO 29995
29804: LD_INT 25
29806: DOUBLE
29807: EQUAL
29808: IFTRUE 29812
29810: GO 29823
29812: POP
// bc_type := b_breastwork ; 26 :
29813: LD_ADDR_OWVAR 42
29817: PUSH
29818: LD_INT 31
29820: ST_TO_ADDR
29821: GO 29995
29823: LD_INT 26
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29842
29831: POP
// bc_type := b_bunker ; 27 :
29832: LD_ADDR_OWVAR 42
29836: PUSH
29837: LD_INT 32
29839: ST_TO_ADDR
29840: GO 29995
29842: LD_INT 27
29844: DOUBLE
29845: EQUAL
29846: IFTRUE 29850
29848: GO 29861
29850: POP
// bc_type := b_turret ; 28 :
29851: LD_ADDR_OWVAR 42
29855: PUSH
29856: LD_INT 33
29858: ST_TO_ADDR
29859: GO 29995
29861: LD_INT 28
29863: DOUBLE
29864: EQUAL
29865: IFTRUE 29869
29867: GO 29880
29869: POP
// bc_type := b_armoury ; 29 :
29870: LD_ADDR_OWVAR 42
29874: PUSH
29875: LD_INT 4
29877: ST_TO_ADDR
29878: GO 29995
29880: LD_INT 29
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29899
29888: POP
// bc_type := b_barracks ; 30 :
29889: LD_ADDR_OWVAR 42
29893: PUSH
29894: LD_INT 5
29896: ST_TO_ADDR
29897: GO 29995
29899: LD_INT 30
29901: DOUBLE
29902: EQUAL
29903: IFTRUE 29907
29905: GO 29918
29907: POP
// bc_type := b_solar_power ; 31 :
29908: LD_ADDR_OWVAR 42
29912: PUSH
29913: LD_INT 27
29915: ST_TO_ADDR
29916: GO 29995
29918: LD_INT 31
29920: DOUBLE
29921: EQUAL
29922: IFTRUE 29926
29924: GO 29937
29926: POP
// bc_type := b_oil_power ; 32 :
29927: LD_ADDR_OWVAR 42
29931: PUSH
29932: LD_INT 26
29934: ST_TO_ADDR
29935: GO 29995
29937: LD_INT 32
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29956
29945: POP
// bc_type := b_siberite_power ; 33 :
29946: LD_ADDR_OWVAR 42
29950: PUSH
29951: LD_INT 28
29953: ST_TO_ADDR
29954: GO 29995
29956: LD_INT 33
29958: DOUBLE
29959: EQUAL
29960: IFTRUE 29964
29962: GO 29975
29964: POP
// bc_type := b_oil_mine ; 34 :
29965: LD_ADDR_OWVAR 42
29969: PUSH
29970: LD_INT 29
29972: ST_TO_ADDR
29973: GO 29995
29975: LD_INT 34
29977: DOUBLE
29978: EQUAL
29979: IFTRUE 29983
29981: GO 29994
29983: POP
// bc_type := b_siberite_mine ; end ;
29984: LD_ADDR_OWVAR 42
29988: PUSH
29989: LD_INT 30
29991: ST_TO_ADDR
29992: GO 29995
29994: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29995: LD_ADDR_VAR 0 8
29999: PUSH
30000: LD_VAR 0 5
30004: PPUSH
30005: LD_VAR 0 6
30009: PPUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: CALL_OW 47
30019: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30020: LD_OWVAR 42
30024: PUSH
30025: LD_INT 32
30027: PUSH
30028: LD_INT 33
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: IN
30035: IFFALSE 30051
// PlaceWeaponTurret ( b , weapon ) ;
30037: LD_VAR 0 8
30041: PPUSH
30042: LD_VAR 0 4
30046: PPUSH
30047: CALL_OW 431
// end ;
30051: LD_VAR 0 7
30055: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30056: LD_INT 0
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30062: LD_ADDR_VAR 0 4
30066: PUSH
30067: LD_INT 22
30069: PUSH
30070: LD_OWVAR 2
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: LD_INT 30
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 30
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: LIST
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PPUSH
30111: CALL_OW 69
30115: ST_TO_ADDR
// if not tmp then
30116: LD_VAR 0 4
30120: NOT
30121: IFFALSE 30125
// exit ;
30123: GO 30184
// for i in tmp do
30125: LD_ADDR_VAR 0 2
30129: PUSH
30130: LD_VAR 0 4
30134: PUSH
30135: FOR_IN
30136: IFFALSE 30182
// for j = 1 to 3 do
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: DOUBLE
30144: LD_INT 1
30146: DEC
30147: ST_TO_ADDR
30148: LD_INT 3
30150: PUSH
30151: FOR_TO
30152: IFFALSE 30178
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30154: LD_VAR 0 2
30158: PPUSH
30159: CALL_OW 274
30163: PPUSH
30164: LD_VAR 0 3
30168: PPUSH
30169: LD_INT 99999
30171: PPUSH
30172: CALL_OW 277
30176: GO 30151
30178: POP
30179: POP
30180: GO 30135
30182: POP
30183: POP
// end ;
30184: LD_VAR 0 1
30188: RET
// export function hHackSetLevel10 ; var i , j ; begin
30189: LD_INT 0
30191: PPUSH
30192: PPUSH
30193: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30194: LD_ADDR_VAR 0 2
30198: PUSH
30199: LD_INT 21
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PPUSH
30209: CALL_OW 69
30213: PUSH
30214: FOR_IN
30215: IFFALSE 30267
// if IsSelected ( i ) then
30217: LD_VAR 0 2
30221: PPUSH
30222: CALL_OW 306
30226: IFFALSE 30265
// begin for j := 1 to 4 do
30228: LD_ADDR_VAR 0 3
30232: PUSH
30233: DOUBLE
30234: LD_INT 1
30236: DEC
30237: ST_TO_ADDR
30238: LD_INT 4
30240: PUSH
30241: FOR_TO
30242: IFFALSE 30263
// SetSkill ( i , j , 10 ) ;
30244: LD_VAR 0 2
30248: PPUSH
30249: LD_VAR 0 3
30253: PPUSH
30254: LD_INT 10
30256: PPUSH
30257: CALL_OW 237
30261: GO 30241
30263: POP
30264: POP
// end ;
30265: GO 30214
30267: POP
30268: POP
// end ;
30269: LD_VAR 0 1
30273: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30274: LD_INT 0
30276: PPUSH
30277: PPUSH
30278: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30279: LD_ADDR_VAR 0 2
30283: PUSH
30284: LD_INT 22
30286: PUSH
30287: LD_OWVAR 2
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 21
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PPUSH
30310: CALL_OW 69
30314: PUSH
30315: FOR_IN
30316: IFFALSE 30357
// begin for j := 1 to 4 do
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: DOUBLE
30324: LD_INT 1
30326: DEC
30327: ST_TO_ADDR
30328: LD_INT 4
30330: PUSH
30331: FOR_TO
30332: IFFALSE 30353
// SetSkill ( i , j , 10 ) ;
30334: LD_VAR 0 2
30338: PPUSH
30339: LD_VAR 0 3
30343: PPUSH
30344: LD_INT 10
30346: PPUSH
30347: CALL_OW 237
30351: GO 30331
30353: POP
30354: POP
// end ;
30355: GO 30315
30357: POP
30358: POP
// end ;
30359: LD_VAR 0 1
30363: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30364: LD_INT 0
30366: PPUSH
// uc_side := your_side ;
30367: LD_ADDR_OWVAR 20
30371: PUSH
30372: LD_OWVAR 2
30376: ST_TO_ADDR
// uc_nation := nation ;
30377: LD_ADDR_OWVAR 21
30381: PUSH
30382: LD_VAR 0 1
30386: ST_TO_ADDR
// InitHc ;
30387: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30391: LD_INT 0
30393: PPUSH
30394: LD_VAR 0 2
30398: PPUSH
30399: LD_VAR 0 3
30403: PPUSH
30404: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30408: LD_VAR 0 4
30412: PPUSH
30413: LD_VAR 0 5
30417: PPUSH
30418: CALL_OW 428
30422: PUSH
30423: LD_INT 0
30425: EQUAL
30426: IFFALSE 30450
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30428: CALL_OW 44
30432: PPUSH
30433: LD_VAR 0 4
30437: PPUSH
30438: LD_VAR 0 5
30442: PPUSH
30443: LD_INT 1
30445: PPUSH
30446: CALL_OW 48
// end ;
30450: LD_VAR 0 6
30454: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30455: LD_INT 0
30457: PPUSH
30458: PPUSH
// uc_side := your_side ;
30459: LD_ADDR_OWVAR 20
30463: PUSH
30464: LD_OWVAR 2
30468: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30469: LD_VAR 0 1
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: LD_INT 4
30485: PUSH
30486: LD_INT 5
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: IN
30496: IFFALSE 30508
// uc_nation := nation_american else
30498: LD_ADDR_OWVAR 21
30502: PUSH
30503: LD_INT 1
30505: ST_TO_ADDR
30506: GO 30551
// if chassis in [ 11 , 12 , 13 , 14 ] then
30508: LD_VAR 0 1
30512: PUSH
30513: LD_INT 11
30515: PUSH
30516: LD_INT 12
30518: PUSH
30519: LD_INT 13
30521: PUSH
30522: LD_INT 14
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: IN
30531: IFFALSE 30543
// uc_nation := nation_arabian else
30533: LD_ADDR_OWVAR 21
30537: PUSH
30538: LD_INT 2
30540: ST_TO_ADDR
30541: GO 30551
// uc_nation := nation_russian ;
30543: LD_ADDR_OWVAR 21
30547: PUSH
30548: LD_INT 3
30550: ST_TO_ADDR
// vc_chassis := chassis ;
30551: LD_ADDR_OWVAR 37
30555: PUSH
30556: LD_VAR 0 1
30560: ST_TO_ADDR
// vc_engine := engine ;
30561: LD_ADDR_OWVAR 39
30565: PUSH
30566: LD_VAR 0 2
30570: ST_TO_ADDR
// vc_control := control ;
30571: LD_ADDR_OWVAR 38
30575: PUSH
30576: LD_VAR 0 3
30580: ST_TO_ADDR
// vc_weapon := weapon ;
30581: LD_ADDR_OWVAR 40
30585: PUSH
30586: LD_VAR 0 4
30590: ST_TO_ADDR
// un := CreateVehicle ;
30591: LD_ADDR_VAR 0 8
30595: PUSH
30596: CALL_OW 45
30600: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30601: LD_VAR 0 8
30605: PPUSH
30606: LD_INT 0
30608: PPUSH
30609: LD_INT 5
30611: PPUSH
30612: CALL_OW 12
30616: PPUSH
30617: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30621: LD_VAR 0 8
30625: PPUSH
30626: LD_VAR 0 5
30630: PPUSH
30631: LD_VAR 0 6
30635: PPUSH
30636: LD_INT 1
30638: PPUSH
30639: CALL_OW 48
// end ;
30643: LD_VAR 0 7
30647: RET
// export hInvincible ; every 1 do
30648: GO 30650
30650: DISABLE
// hInvincible := [ ] ;
30651: LD_ADDR_EXP 126
30655: PUSH
30656: EMPTY
30657: ST_TO_ADDR
30658: END
// every 10 do var i ;
30659: GO 30661
30661: DISABLE
30662: LD_INT 0
30664: PPUSH
// begin enable ;
30665: ENABLE
// if not hInvincible then
30666: LD_EXP 126
30670: NOT
30671: IFFALSE 30675
// exit ;
30673: GO 30719
// for i in hInvincible do
30675: LD_ADDR_VAR 0 1
30679: PUSH
30680: LD_EXP 126
30684: PUSH
30685: FOR_IN
30686: IFFALSE 30717
// if GetLives ( i ) < 1000 then
30688: LD_VAR 0 1
30692: PPUSH
30693: CALL_OW 256
30697: PUSH
30698: LD_INT 1000
30700: LESS
30701: IFFALSE 30715
// SetLives ( i , 1000 ) ;
30703: LD_VAR 0 1
30707: PPUSH
30708: LD_INT 1000
30710: PPUSH
30711: CALL_OW 234
30715: GO 30685
30717: POP
30718: POP
// end ;
30719: PPOPN 1
30721: END
// export function hHackInvincible ; var i ; begin
30722: LD_INT 0
30724: PPUSH
30725: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30726: LD_ADDR_VAR 0 2
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 21
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 21
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: PPUSH
30759: CALL_OW 69
30763: PUSH
30764: FOR_IN
30765: IFFALSE 30826
// if IsSelected ( i ) then
30767: LD_VAR 0 2
30771: PPUSH
30772: CALL_OW 306
30776: IFFALSE 30824
// begin if i in hInvincible then
30778: LD_VAR 0 2
30782: PUSH
30783: LD_EXP 126
30787: IN
30788: IFFALSE 30808
// hInvincible := hInvincible diff i else
30790: LD_ADDR_EXP 126
30794: PUSH
30795: LD_EXP 126
30799: PUSH
30800: LD_VAR 0 2
30804: DIFF
30805: ST_TO_ADDR
30806: GO 30824
// hInvincible := hInvincible union i ;
30808: LD_ADDR_EXP 126
30812: PUSH
30813: LD_EXP 126
30817: PUSH
30818: LD_VAR 0 2
30822: UNION
30823: ST_TO_ADDR
// end ;
30824: GO 30764
30826: POP
30827: POP
// end ;
30828: LD_VAR 0 1
30832: RET
// export function hHackInvisible ; var i , j ; begin
30833: LD_INT 0
30835: PPUSH
30836: PPUSH
30837: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30838: LD_ADDR_VAR 0 2
30842: PUSH
30843: LD_INT 21
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PPUSH
30853: CALL_OW 69
30857: PUSH
30858: FOR_IN
30859: IFFALSE 30883
// if IsSelected ( i ) then
30861: LD_VAR 0 2
30865: PPUSH
30866: CALL_OW 306
30870: IFFALSE 30881
// ComForceInvisible ( i ) ;
30872: LD_VAR 0 2
30876: PPUSH
30877: CALL_OW 496
30881: GO 30858
30883: POP
30884: POP
// end ;
30885: LD_VAR 0 1
30889: RET
// export function hHackChangeYourSide ; begin
30890: LD_INT 0
30892: PPUSH
// if your_side = 8 then
30893: LD_OWVAR 2
30897: PUSH
30898: LD_INT 8
30900: EQUAL
30901: IFFALSE 30913
// your_side := 0 else
30903: LD_ADDR_OWVAR 2
30907: PUSH
30908: LD_INT 0
30910: ST_TO_ADDR
30911: GO 30927
// your_side := your_side + 1 ;
30913: LD_ADDR_OWVAR 2
30917: PUSH
30918: LD_OWVAR 2
30922: PUSH
30923: LD_INT 1
30925: PLUS
30926: ST_TO_ADDR
// end ;
30927: LD_VAR 0 1
30931: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30932: LD_INT 0
30934: PPUSH
30935: PPUSH
30936: PPUSH
// for i in all_units do
30937: LD_ADDR_VAR 0 2
30941: PUSH
30942: LD_OWVAR 3
30946: PUSH
30947: FOR_IN
30948: IFFALSE 31026
// if IsSelected ( i ) then
30950: LD_VAR 0 2
30954: PPUSH
30955: CALL_OW 306
30959: IFFALSE 31024
// begin j := GetSide ( i ) ;
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_VAR 0 2
30970: PPUSH
30971: CALL_OW 255
30975: ST_TO_ADDR
// if j = 8 then
30976: LD_VAR 0 3
30980: PUSH
30981: LD_INT 8
30983: EQUAL
30984: IFFALSE 30996
// j := 0 else
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_INT 0
30993: ST_TO_ADDR
30994: GO 31010
// j := j + 1 ;
30996: LD_ADDR_VAR 0 3
31000: PUSH
31001: LD_VAR 0 3
31005: PUSH
31006: LD_INT 1
31008: PLUS
31009: ST_TO_ADDR
// SetSide ( i , j ) ;
31010: LD_VAR 0 2
31014: PPUSH
31015: LD_VAR 0 3
31019: PPUSH
31020: CALL_OW 235
// end ;
31024: GO 30947
31026: POP
31027: POP
// end ;
31028: LD_VAR 0 1
31032: RET
// export function hHackFog ; begin
31033: LD_INT 0
31035: PPUSH
// FogOff ( true ) ;
31036: LD_INT 1
31038: PPUSH
31039: CALL_OW 344
// end ;
31043: LD_VAR 0 1
31047: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31048: LD_INT 0
31050: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31051: LD_VAR 0 1
31055: PPUSH
31056: LD_VAR 0 2
31060: PPUSH
31061: LD_VAR 0 3
31065: PPUSH
31066: LD_INT 1
31068: PPUSH
31069: LD_INT 1
31071: PPUSH
31072: CALL_OW 483
// CenterOnXY ( x , y ) ;
31076: LD_VAR 0 2
31080: PPUSH
31081: LD_VAR 0 3
31085: PPUSH
31086: CALL_OW 84
// end ; end_of_file end_of_file
31090: LD_VAR 0 4
31094: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31095: LD_INT 0
31097: PPUSH
31098: PPUSH
// if exist_mode then
31099: LD_VAR 0 2
31103: IFFALSE 31128
// unit := CreateCharacter ( prefix & ident ) else
31105: LD_ADDR_VAR 0 5
31109: PUSH
31110: LD_VAR 0 3
31114: PUSH
31115: LD_VAR 0 1
31119: STR
31120: PPUSH
31121: CALL_OW 34
31125: ST_TO_ADDR
31126: GO 31143
// unit := NewCharacter ( ident ) ;
31128: LD_ADDR_VAR 0 5
31132: PUSH
31133: LD_VAR 0 1
31137: PPUSH
31138: CALL_OW 25
31142: ST_TO_ADDR
// result := unit ;
31143: LD_ADDR_VAR 0 4
31147: PUSH
31148: LD_VAR 0 5
31152: ST_TO_ADDR
// end ;
31153: LD_VAR 0 4
31157: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31158: LD_INT 0
31160: PPUSH
31161: PPUSH
// if not side or not nation then
31162: LD_VAR 0 1
31166: NOT
31167: PUSH
31168: LD_VAR 0 2
31172: NOT
31173: OR
31174: IFFALSE 31178
// exit ;
31176: GO 31942
// case nation of nation_american :
31178: LD_VAR 0 2
31182: PUSH
31183: LD_INT 1
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31405
31191: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31192: LD_ADDR_VAR 0 4
31196: PUSH
31197: LD_INT 35
31199: PUSH
31200: LD_INT 45
31202: PUSH
31203: LD_INT 46
31205: PUSH
31206: LD_INT 47
31208: PUSH
31209: LD_INT 82
31211: PUSH
31212: LD_INT 83
31214: PUSH
31215: LD_INT 84
31217: PUSH
31218: LD_INT 85
31220: PUSH
31221: LD_INT 86
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 6
31232: PUSH
31233: LD_INT 15
31235: PUSH
31236: LD_INT 16
31238: PUSH
31239: LD_INT 7
31241: PUSH
31242: LD_INT 12
31244: PUSH
31245: LD_INT 13
31247: PUSH
31248: LD_INT 10
31250: PUSH
31251: LD_INT 14
31253: PUSH
31254: LD_INT 20
31256: PUSH
31257: LD_INT 21
31259: PUSH
31260: LD_INT 22
31262: PUSH
31263: LD_INT 25
31265: PUSH
31266: LD_INT 32
31268: PUSH
31269: LD_INT 27
31271: PUSH
31272: LD_INT 36
31274: PUSH
31275: LD_INT 69
31277: PUSH
31278: LD_INT 39
31280: PUSH
31281: LD_INT 34
31283: PUSH
31284: LD_INT 40
31286: PUSH
31287: LD_INT 48
31289: PUSH
31290: LD_INT 49
31292: PUSH
31293: LD_INT 50
31295: PUSH
31296: LD_INT 51
31298: PUSH
31299: LD_INT 52
31301: PUSH
31302: LD_INT 53
31304: PUSH
31305: LD_INT 54
31307: PUSH
31308: LD_INT 55
31310: PUSH
31311: LD_INT 56
31313: PUSH
31314: LD_INT 57
31316: PUSH
31317: LD_INT 58
31319: PUSH
31320: LD_INT 59
31322: PUSH
31323: LD_INT 60
31325: PUSH
31326: LD_INT 61
31328: PUSH
31329: LD_INT 62
31331: PUSH
31332: LD_INT 80
31334: PUSH
31335: LD_INT 82
31337: PUSH
31338: LD_INT 83
31340: PUSH
31341: LD_INT 84
31343: PUSH
31344: LD_INT 85
31346: PUSH
31347: LD_INT 86
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: ST_TO_ADDR
31403: GO 31866
31405: LD_INT 2
31407: DOUBLE
31408: EQUAL
31409: IFTRUE 31413
31411: GO 31635
31413: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31414: LD_ADDR_VAR 0 4
31418: PUSH
31419: LD_INT 35
31421: PUSH
31422: LD_INT 45
31424: PUSH
31425: LD_INT 46
31427: PUSH
31428: LD_INT 47
31430: PUSH
31431: LD_INT 82
31433: PUSH
31434: LD_INT 83
31436: PUSH
31437: LD_INT 84
31439: PUSH
31440: LD_INT 85
31442: PUSH
31443: LD_INT 87
31445: PUSH
31446: LD_INT 70
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 11
31454: PUSH
31455: LD_INT 3
31457: PUSH
31458: LD_INT 4
31460: PUSH
31461: LD_INT 5
31463: PUSH
31464: LD_INT 6
31466: PUSH
31467: LD_INT 15
31469: PUSH
31470: LD_INT 18
31472: PUSH
31473: LD_INT 7
31475: PUSH
31476: LD_INT 17
31478: PUSH
31479: LD_INT 8
31481: PUSH
31482: LD_INT 20
31484: PUSH
31485: LD_INT 21
31487: PUSH
31488: LD_INT 22
31490: PUSH
31491: LD_INT 72
31493: PUSH
31494: LD_INT 26
31496: PUSH
31497: LD_INT 69
31499: PUSH
31500: LD_INT 39
31502: PUSH
31503: LD_INT 40
31505: PUSH
31506: LD_INT 41
31508: PUSH
31509: LD_INT 42
31511: PUSH
31512: LD_INT 43
31514: PUSH
31515: LD_INT 48
31517: PUSH
31518: LD_INT 49
31520: PUSH
31521: LD_INT 50
31523: PUSH
31524: LD_INT 51
31526: PUSH
31527: LD_INT 52
31529: PUSH
31530: LD_INT 53
31532: PUSH
31533: LD_INT 54
31535: PUSH
31536: LD_INT 55
31538: PUSH
31539: LD_INT 56
31541: PUSH
31542: LD_INT 60
31544: PUSH
31545: LD_INT 61
31547: PUSH
31548: LD_INT 62
31550: PUSH
31551: LD_INT 66
31553: PUSH
31554: LD_INT 67
31556: PUSH
31557: LD_INT 68
31559: PUSH
31560: LD_INT 81
31562: PUSH
31563: LD_INT 82
31565: PUSH
31566: LD_INT 83
31568: PUSH
31569: LD_INT 84
31571: PUSH
31572: LD_INT 85
31574: PUSH
31575: LD_INT 87
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: ST_TO_ADDR
31633: GO 31866
31635: LD_INT 3
31637: DOUBLE
31638: EQUAL
31639: IFTRUE 31643
31641: GO 31865
31643: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31644: LD_ADDR_VAR 0 4
31648: PUSH
31649: LD_INT 46
31651: PUSH
31652: LD_INT 47
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 82
31663: PUSH
31664: LD_INT 83
31666: PUSH
31667: LD_INT 84
31669: PUSH
31670: LD_INT 85
31672: PUSH
31673: LD_INT 86
31675: PUSH
31676: LD_INT 11
31678: PUSH
31679: LD_INT 9
31681: PUSH
31682: LD_INT 20
31684: PUSH
31685: LD_INT 19
31687: PUSH
31688: LD_INT 21
31690: PUSH
31691: LD_INT 24
31693: PUSH
31694: LD_INT 22
31696: PUSH
31697: LD_INT 25
31699: PUSH
31700: LD_INT 28
31702: PUSH
31703: LD_INT 29
31705: PUSH
31706: LD_INT 30
31708: PUSH
31709: LD_INT 31
31711: PUSH
31712: LD_INT 37
31714: PUSH
31715: LD_INT 38
31717: PUSH
31718: LD_INT 32
31720: PUSH
31721: LD_INT 27
31723: PUSH
31724: LD_INT 33
31726: PUSH
31727: LD_INT 69
31729: PUSH
31730: LD_INT 39
31732: PUSH
31733: LD_INT 34
31735: PUSH
31736: LD_INT 40
31738: PUSH
31739: LD_INT 71
31741: PUSH
31742: LD_INT 23
31744: PUSH
31745: LD_INT 44
31747: PUSH
31748: LD_INT 48
31750: PUSH
31751: LD_INT 49
31753: PUSH
31754: LD_INT 50
31756: PUSH
31757: LD_INT 51
31759: PUSH
31760: LD_INT 52
31762: PUSH
31763: LD_INT 53
31765: PUSH
31766: LD_INT 54
31768: PUSH
31769: LD_INT 55
31771: PUSH
31772: LD_INT 56
31774: PUSH
31775: LD_INT 57
31777: PUSH
31778: LD_INT 58
31780: PUSH
31781: LD_INT 59
31783: PUSH
31784: LD_INT 63
31786: PUSH
31787: LD_INT 64
31789: PUSH
31790: LD_INT 65
31792: PUSH
31793: LD_INT 82
31795: PUSH
31796: LD_INT 83
31798: PUSH
31799: LD_INT 84
31801: PUSH
31802: LD_INT 85
31804: PUSH
31805: LD_INT 86
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
31863: GO 31866
31865: POP
// if state > - 1 and state < 3 then
31866: LD_VAR 0 3
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: GREATER
31875: PUSH
31876: LD_VAR 0 3
31880: PUSH
31881: LD_INT 3
31883: LESS
31884: AND
31885: IFFALSE 31942
// for i in result do
31887: LD_ADDR_VAR 0 5
31891: PUSH
31892: LD_VAR 0 4
31896: PUSH
31897: FOR_IN
31898: IFFALSE 31940
// if GetTech ( i , side ) <> state then
31900: LD_VAR 0 5
31904: PPUSH
31905: LD_VAR 0 1
31909: PPUSH
31910: CALL_OW 321
31914: PUSH
31915: LD_VAR 0 3
31919: NONEQUAL
31920: IFFALSE 31938
// result := result diff i ;
31922: LD_ADDR_VAR 0 4
31926: PUSH
31927: LD_VAR 0 4
31931: PUSH
31932: LD_VAR 0 5
31936: DIFF
31937: ST_TO_ADDR
31938: GO 31897
31940: POP
31941: POP
// end ;
31942: LD_VAR 0 4
31946: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31947: LD_INT 0
31949: PPUSH
31950: PPUSH
31951: PPUSH
// result := true ;
31952: LD_ADDR_VAR 0 3
31956: PUSH
31957: LD_INT 1
31959: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31960: LD_ADDR_VAR 0 5
31964: PUSH
31965: LD_VAR 0 2
31969: PPUSH
31970: CALL_OW 480
31974: ST_TO_ADDR
// if not tmp then
31975: LD_VAR 0 5
31979: NOT
31980: IFFALSE 31984
// exit ;
31982: GO 32033
// for i in tmp do
31984: LD_ADDR_VAR 0 4
31988: PUSH
31989: LD_VAR 0 5
31993: PUSH
31994: FOR_IN
31995: IFFALSE 32031
// if GetTech ( i , side ) <> state_researched then
31997: LD_VAR 0 4
32001: PPUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL_OW 321
32011: PUSH
32012: LD_INT 2
32014: NONEQUAL
32015: IFFALSE 32029
// begin result := false ;
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_INT 0
32024: ST_TO_ADDR
// exit ;
32025: POP
32026: POP
32027: GO 32033
// end ;
32029: GO 31994
32031: POP
32032: POP
// end ;
32033: LD_VAR 0 3
32037: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32038: LD_INT 0
32040: PPUSH
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
32052: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32053: LD_VAR 0 1
32057: NOT
32058: PUSH
32059: LD_VAR 0 1
32063: PPUSH
32064: CALL_OW 257
32068: PUSH
32069: LD_INT 9
32071: NONEQUAL
32072: OR
32073: IFFALSE 32077
// exit ;
32075: GO 32650
// side := GetSide ( unit ) ;
32077: LD_ADDR_VAR 0 9
32081: PUSH
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 255
32091: ST_TO_ADDR
// tech_space := tech_spacanom ;
32092: LD_ADDR_VAR 0 12
32096: PUSH
32097: LD_INT 29
32099: ST_TO_ADDR
// tech_time := tech_taurad ;
32100: LD_ADDR_VAR 0 13
32104: PUSH
32105: LD_INT 28
32107: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32108: LD_ADDR_VAR 0 11
32112: PUSH
32113: LD_VAR 0 1
32117: PPUSH
32118: CALL_OW 310
32122: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32123: LD_VAR 0 11
32127: PPUSH
32128: CALL_OW 247
32132: PUSH
32133: LD_INT 2
32135: EQUAL
32136: IFFALSE 32140
// exit ;
32138: GO 32650
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32140: LD_ADDR_VAR 0 8
32144: PUSH
32145: LD_INT 81
32147: PUSH
32148: LD_VAR 0 9
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: LD_INT 21
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PPUSH
32178: CALL_OW 69
32182: ST_TO_ADDR
// if not tmp then
32183: LD_VAR 0 8
32187: NOT
32188: IFFALSE 32192
// exit ;
32190: GO 32650
// if in_unit then
32192: LD_VAR 0 11
32196: IFFALSE 32220
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32198: LD_ADDR_VAR 0 10
32202: PUSH
32203: LD_VAR 0 8
32207: PPUSH
32208: LD_VAR 0 11
32212: PPUSH
32213: CALL_OW 74
32217: ST_TO_ADDR
32218: GO 32240
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32220: LD_ADDR_VAR 0 10
32224: PUSH
32225: LD_VAR 0 8
32229: PPUSH
32230: LD_VAR 0 1
32234: PPUSH
32235: CALL_OW 74
32239: ST_TO_ADDR
// if not enemy then
32240: LD_VAR 0 10
32244: NOT
32245: IFFALSE 32249
// exit ;
32247: GO 32650
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32249: LD_VAR 0 11
32253: PUSH
32254: LD_VAR 0 11
32258: PPUSH
32259: LD_VAR 0 10
32263: PPUSH
32264: CALL_OW 296
32268: PUSH
32269: LD_INT 13
32271: GREATER
32272: AND
32273: PUSH
32274: LD_VAR 0 1
32278: PPUSH
32279: LD_VAR 0 10
32283: PPUSH
32284: CALL_OW 296
32288: PUSH
32289: LD_INT 12
32291: GREATER
32292: OR
32293: IFFALSE 32297
// exit ;
32295: GO 32650
// missile := [ 1 ] ;
32297: LD_ADDR_VAR 0 14
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: EMPTY
32306: LIST
32307: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32308: LD_VAR 0 9
32312: PPUSH
32313: LD_VAR 0 12
32317: PPUSH
32318: CALL_OW 325
32322: IFFALSE 32351
// missile := Insert ( missile , missile + 1 , 2 ) ;
32324: LD_ADDR_VAR 0 14
32328: PUSH
32329: LD_VAR 0 14
32333: PPUSH
32334: LD_VAR 0 14
32338: PUSH
32339: LD_INT 1
32341: PLUS
32342: PPUSH
32343: LD_INT 2
32345: PPUSH
32346: CALL_OW 2
32350: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32351: LD_VAR 0 9
32355: PPUSH
32356: LD_VAR 0 13
32360: PPUSH
32361: CALL_OW 325
32365: PUSH
32366: LD_VAR 0 10
32370: PPUSH
32371: CALL_OW 255
32375: PPUSH
32376: LD_VAR 0 13
32380: PPUSH
32381: CALL_OW 325
32385: NOT
32386: AND
32387: IFFALSE 32416
// missile := Insert ( missile , missile + 1 , 3 ) ;
32389: LD_ADDR_VAR 0 14
32393: PUSH
32394: LD_VAR 0 14
32398: PPUSH
32399: LD_VAR 0 14
32403: PUSH
32404: LD_INT 1
32406: PLUS
32407: PPUSH
32408: LD_INT 3
32410: PPUSH
32411: CALL_OW 2
32415: ST_TO_ADDR
// if missile < 2 then
32416: LD_VAR 0 14
32420: PUSH
32421: LD_INT 2
32423: LESS
32424: IFFALSE 32428
// exit ;
32426: GO 32650
// x := GetX ( enemy ) ;
32428: LD_ADDR_VAR 0 4
32432: PUSH
32433: LD_VAR 0 10
32437: PPUSH
32438: CALL_OW 250
32442: ST_TO_ADDR
// y := GetY ( enemy ) ;
32443: LD_ADDR_VAR 0 5
32447: PUSH
32448: LD_VAR 0 10
32452: PPUSH
32453: CALL_OW 251
32457: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32458: LD_ADDR_VAR 0 6
32462: PUSH
32463: LD_VAR 0 4
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PPUSH
32472: LD_INT 1
32474: PPUSH
32475: CALL_OW 12
32479: PLUS
32480: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32481: LD_ADDR_VAR 0 7
32485: PUSH
32486: LD_VAR 0 5
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PPUSH
32495: LD_INT 1
32497: PPUSH
32498: CALL_OW 12
32502: PLUS
32503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32504: LD_VAR 0 6
32508: PPUSH
32509: LD_VAR 0 7
32513: PPUSH
32514: CALL_OW 488
32518: NOT
32519: IFFALSE 32541
// begin _x := x ;
32521: LD_ADDR_VAR 0 6
32525: PUSH
32526: LD_VAR 0 4
32530: ST_TO_ADDR
// _y := y ;
32531: LD_ADDR_VAR 0 7
32535: PUSH
32536: LD_VAR 0 5
32540: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32541: LD_ADDR_VAR 0 3
32545: PUSH
32546: LD_INT 1
32548: PPUSH
32549: LD_VAR 0 14
32553: PPUSH
32554: CALL_OW 12
32558: ST_TO_ADDR
// case i of 1 :
32559: LD_VAR 0 3
32563: PUSH
32564: LD_INT 1
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32572
32570: GO 32589
32572: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32573: LD_VAR 0 1
32577: PPUSH
32578: LD_VAR 0 10
32582: PPUSH
32583: CALL_OW 115
32587: GO 32650
32589: LD_INT 2
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32619
32597: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32598: LD_VAR 0 1
32602: PPUSH
32603: LD_VAR 0 6
32607: PPUSH
32608: LD_VAR 0 7
32612: PPUSH
32613: CALL_OW 153
32617: GO 32650
32619: LD_INT 3
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32649
32627: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32628: LD_VAR 0 1
32632: PPUSH
32633: LD_VAR 0 6
32637: PPUSH
32638: LD_VAR 0 7
32642: PPUSH
32643: CALL_OW 154
32647: GO 32650
32649: POP
// end ;
32650: LD_VAR 0 2
32654: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32655: LD_INT 0
32657: PPUSH
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
32662: PPUSH
// if not unit or not building then
32663: LD_VAR 0 1
32667: NOT
32668: PUSH
32669: LD_VAR 0 2
32673: NOT
32674: OR
32675: IFFALSE 32679
// exit ;
32677: GO 32837
// x := GetX ( building ) ;
32679: LD_ADDR_VAR 0 5
32683: PUSH
32684: LD_VAR 0 2
32688: PPUSH
32689: CALL_OW 250
32693: ST_TO_ADDR
// y := GetY ( building ) ;
32694: LD_ADDR_VAR 0 6
32698: PUSH
32699: LD_VAR 0 2
32703: PPUSH
32704: CALL_OW 251
32708: ST_TO_ADDR
// for i = 0 to 5 do
32709: LD_ADDR_VAR 0 4
32713: PUSH
32714: DOUBLE
32715: LD_INT 0
32717: DEC
32718: ST_TO_ADDR
32719: LD_INT 5
32721: PUSH
32722: FOR_TO
32723: IFFALSE 32835
// begin _x := ShiftX ( x , i , 3 ) ;
32725: LD_ADDR_VAR 0 7
32729: PUSH
32730: LD_VAR 0 5
32734: PPUSH
32735: LD_VAR 0 4
32739: PPUSH
32740: LD_INT 3
32742: PPUSH
32743: CALL_OW 272
32747: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32748: LD_ADDR_VAR 0 8
32752: PUSH
32753: LD_VAR 0 6
32757: PPUSH
32758: LD_VAR 0 4
32762: PPUSH
32763: LD_INT 3
32765: PPUSH
32766: CALL_OW 273
32770: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32771: LD_VAR 0 7
32775: PPUSH
32776: LD_VAR 0 8
32780: PPUSH
32781: CALL_OW 488
32785: NOT
32786: IFFALSE 32790
// continue ;
32788: GO 32722
// if HexInfo ( _x , _y ) = 0 then
32790: LD_VAR 0 7
32794: PPUSH
32795: LD_VAR 0 8
32799: PPUSH
32800: CALL_OW 428
32804: PUSH
32805: LD_INT 0
32807: EQUAL
32808: IFFALSE 32833
// begin ComMoveXY ( unit , _x , _y ) ;
32810: LD_VAR 0 1
32814: PPUSH
32815: LD_VAR 0 7
32819: PPUSH
32820: LD_VAR 0 8
32824: PPUSH
32825: CALL_OW 111
// exit ;
32829: POP
32830: POP
32831: GO 32837
// end ; end ;
32833: GO 32722
32835: POP
32836: POP
// end ;
32837: LD_VAR 0 3
32841: RET
// export function ScanBase ( side , base_area ) ; begin
32842: LD_INT 0
32844: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32845: LD_ADDR_VAR 0 3
32849: PUSH
32850: LD_VAR 0 2
32854: PPUSH
32855: LD_INT 81
32857: PUSH
32858: LD_VAR 0 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PPUSH
32867: CALL_OW 70
32871: ST_TO_ADDR
// end ;
32872: LD_VAR 0 3
32876: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32877: LD_INT 0
32879: PPUSH
32880: PPUSH
32881: PPUSH
32882: PPUSH
// result := false ;
32883: LD_ADDR_VAR 0 2
32887: PUSH
32888: LD_INT 0
32890: ST_TO_ADDR
// side := GetSide ( unit ) ;
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: LD_VAR 0 1
32900: PPUSH
32901: CALL_OW 255
32905: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32906: LD_ADDR_VAR 0 4
32910: PUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 248
32920: ST_TO_ADDR
// case nat of 1 :
32921: LD_VAR 0 4
32925: PUSH
32926: LD_INT 1
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 32945
32934: POP
// tech := tech_lassight ; 2 :
32935: LD_ADDR_VAR 0 5
32939: PUSH
32940: LD_INT 12
32942: ST_TO_ADDR
32943: GO 32984
32945: LD_INT 2
32947: DOUBLE
32948: EQUAL
32949: IFTRUE 32953
32951: GO 32964
32953: POP
// tech := tech_mortar ; 3 :
32954: LD_ADDR_VAR 0 5
32958: PUSH
32959: LD_INT 41
32961: ST_TO_ADDR
32962: GO 32984
32964: LD_INT 3
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 32983
32972: POP
// tech := tech_bazooka ; end ;
32973: LD_ADDR_VAR 0 5
32977: PUSH
32978: LD_INT 44
32980: ST_TO_ADDR
32981: GO 32984
32983: POP
// if Researched ( side , tech ) then
32984: LD_VAR 0 3
32988: PPUSH
32989: LD_VAR 0 5
32993: PPUSH
32994: CALL_OW 325
32998: IFFALSE 33025
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33000: LD_ADDR_VAR 0 2
33004: PUSH
33005: LD_INT 5
33007: PUSH
33008: LD_INT 8
33010: PUSH
33011: LD_INT 9
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: LIST
33018: PUSH
33019: LD_VAR 0 4
33023: ARRAY
33024: ST_TO_ADDR
// end ;
33025: LD_VAR 0 2
33029: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33030: LD_INT 0
33032: PPUSH
33033: PPUSH
33034: PPUSH
// if not mines then
33035: LD_VAR 0 2
33039: NOT
33040: IFFALSE 33044
// exit ;
33042: GO 33188
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33044: LD_ADDR_VAR 0 5
33048: PUSH
33049: LD_INT 81
33051: PUSH
33052: LD_VAR 0 1
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: LD_INT 21
33066: PUSH
33067: LD_INT 3
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PPUSH
33082: CALL_OW 69
33086: ST_TO_ADDR
// for i in mines do
33087: LD_ADDR_VAR 0 4
33091: PUSH
33092: LD_VAR 0 2
33096: PUSH
33097: FOR_IN
33098: IFFALSE 33186
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33100: LD_VAR 0 4
33104: PUSH
33105: LD_INT 1
33107: ARRAY
33108: PPUSH
33109: LD_VAR 0 4
33113: PUSH
33114: LD_INT 2
33116: ARRAY
33117: PPUSH
33118: CALL_OW 458
33122: NOT
33123: IFFALSE 33127
// continue ;
33125: GO 33097
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33127: LD_VAR 0 4
33131: PUSH
33132: LD_INT 1
33134: ARRAY
33135: PPUSH
33136: LD_VAR 0 4
33140: PUSH
33141: LD_INT 2
33143: ARRAY
33144: PPUSH
33145: CALL_OW 428
33149: PUSH
33150: LD_VAR 0 5
33154: IN
33155: IFFALSE 33184
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33157: LD_VAR 0 4
33161: PUSH
33162: LD_INT 1
33164: ARRAY
33165: PPUSH
33166: LD_VAR 0 4
33170: PUSH
33171: LD_INT 2
33173: ARRAY
33174: PPUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 456
// end ;
33184: GO 33097
33186: POP
33187: POP
// end ;
33188: LD_VAR 0 3
33192: RET
// export function Count ( array ) ; var i ; begin
33193: LD_INT 0
33195: PPUSH
33196: PPUSH
// result := 0 ;
33197: LD_ADDR_VAR 0 2
33201: PUSH
33202: LD_INT 0
33204: ST_TO_ADDR
// for i in array do
33205: LD_ADDR_VAR 0 3
33209: PUSH
33210: LD_VAR 0 1
33214: PUSH
33215: FOR_IN
33216: IFFALSE 33240
// if i then
33218: LD_VAR 0 3
33222: IFFALSE 33238
// result := result + 1 ;
33224: LD_ADDR_VAR 0 2
33228: PUSH
33229: LD_VAR 0 2
33233: PUSH
33234: LD_INT 1
33236: PLUS
33237: ST_TO_ADDR
33238: GO 33215
33240: POP
33241: POP
// end ;
33242: LD_VAR 0 2
33246: RET
// export function IsEmpty ( building ) ; begin
33247: LD_INT 0
33249: PPUSH
// if not building then
33250: LD_VAR 0 1
33254: NOT
33255: IFFALSE 33259
// exit ;
33257: GO 33302
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33259: LD_ADDR_VAR 0 2
33263: PUSH
33264: LD_VAR 0 1
33268: PUSH
33269: LD_INT 22
33271: PUSH
33272: LD_VAR 0 1
33276: PPUSH
33277: CALL_OW 255
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 58
33288: PUSH
33289: EMPTY
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PPUSH
33296: CALL_OW 69
33300: IN
33301: ST_TO_ADDR
// end ;
33302: LD_VAR 0 2
33306: RET
// export function IsNotFull ( building ) ; begin
33307: LD_INT 0
33309: PPUSH
// if not building then
33310: LD_VAR 0 1
33314: NOT
33315: IFFALSE 33319
// exit ;
33317: GO 33338
// result := UnitsInside ( building ) < 6 ;
33319: LD_ADDR_VAR 0 2
33323: PUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: CALL_OW 313
33333: PUSH
33334: LD_INT 6
33336: LESS
33337: ST_TO_ADDR
// end ;
33338: LD_VAR 0 2
33342: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33343: LD_INT 0
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
// tmp := [ ] ;
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: EMPTY
33355: ST_TO_ADDR
// list := [ ] ;
33356: LD_ADDR_VAR 0 5
33360: PUSH
33361: EMPTY
33362: ST_TO_ADDR
// for i = 16 to 25 do
33363: LD_ADDR_VAR 0 4
33367: PUSH
33368: DOUBLE
33369: LD_INT 16
33371: DEC
33372: ST_TO_ADDR
33373: LD_INT 25
33375: PUSH
33376: FOR_TO
33377: IFFALSE 33450
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_VAR 0 3
33388: PUSH
33389: LD_INT 22
33391: PUSH
33392: LD_VAR 0 1
33396: PPUSH
33397: CALL_OW 255
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 91
33408: PUSH
33409: LD_VAR 0 1
33413: PUSH
33414: LD_INT 6
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 30
33424: PUSH
33425: LD_VAR 0 4
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PUSH
33439: EMPTY
33440: LIST
33441: PPUSH
33442: CALL_OW 69
33446: ADD
33447: ST_TO_ADDR
33448: GO 33376
33450: POP
33451: POP
// for i = 1 to tmp do
33452: LD_ADDR_VAR 0 4
33456: PUSH
33457: DOUBLE
33458: LD_INT 1
33460: DEC
33461: ST_TO_ADDR
33462: LD_VAR 0 3
33466: PUSH
33467: FOR_TO
33468: IFFALSE 33556
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33470: LD_ADDR_VAR 0 5
33474: PUSH
33475: LD_VAR 0 5
33479: PUSH
33480: LD_VAR 0 3
33484: PUSH
33485: LD_VAR 0 4
33489: ARRAY
33490: PPUSH
33491: CALL_OW 266
33495: PUSH
33496: LD_VAR 0 3
33500: PUSH
33501: LD_VAR 0 4
33505: ARRAY
33506: PPUSH
33507: CALL_OW 250
33511: PUSH
33512: LD_VAR 0 3
33516: PUSH
33517: LD_VAR 0 4
33521: ARRAY
33522: PPUSH
33523: CALL_OW 251
33527: PUSH
33528: LD_VAR 0 3
33532: PUSH
33533: LD_VAR 0 4
33537: ARRAY
33538: PPUSH
33539: CALL_OW 254
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: PUSH
33550: EMPTY
33551: LIST
33552: ADD
33553: ST_TO_ADDR
33554: GO 33467
33556: POP
33557: POP
// result := list ;
33558: LD_ADDR_VAR 0 2
33562: PUSH
33563: LD_VAR 0 5
33567: ST_TO_ADDR
// end ;
33568: LD_VAR 0 2
33572: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33573: LD_INT 0
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
// if not factory then
33582: LD_VAR 0 1
33586: NOT
33587: IFFALSE 33591
// exit ;
33589: GO 34184
// if control = control_apeman then
33591: LD_VAR 0 4
33595: PUSH
33596: LD_INT 5
33598: EQUAL
33599: IFFALSE 33708
// begin tmp := UnitsInside ( factory ) ;
33601: LD_ADDR_VAR 0 8
33605: PUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 313
33615: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33616: LD_VAR 0 8
33620: PPUSH
33621: LD_INT 25
33623: PUSH
33624: LD_INT 12
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PPUSH
33631: CALL_OW 72
33635: NOT
33636: IFFALSE 33646
// control := control_manual ;
33638: LD_ADDR_VAR 0 4
33642: PUSH
33643: LD_INT 1
33645: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33646: LD_ADDR_VAR 0 8
33650: PUSH
33651: LD_VAR 0 1
33655: PPUSH
33656: CALL 33343 0 1
33660: ST_TO_ADDR
// if tmp then
33661: LD_VAR 0 8
33665: IFFALSE 33708
// begin for i in tmp do
33667: LD_ADDR_VAR 0 7
33671: PUSH
33672: LD_VAR 0 8
33676: PUSH
33677: FOR_IN
33678: IFFALSE 33706
// if i [ 1 ] = b_ext_radio then
33680: LD_VAR 0 7
33684: PUSH
33685: LD_INT 1
33687: ARRAY
33688: PUSH
33689: LD_INT 22
33691: EQUAL
33692: IFFALSE 33704
// begin control := control_remote ;
33694: LD_ADDR_VAR 0 4
33698: PUSH
33699: LD_INT 2
33701: ST_TO_ADDR
// break ;
33702: GO 33706
// end ;
33704: GO 33677
33706: POP
33707: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33708: LD_VAR 0 1
33712: PPUSH
33713: LD_VAR 0 2
33717: PPUSH
33718: LD_VAR 0 3
33722: PPUSH
33723: LD_VAR 0 4
33727: PPUSH
33728: LD_VAR 0 5
33732: PPUSH
33733: CALL_OW 448
33737: IFFALSE 33772
// begin result := [ chassis , engine , control , weapon ] ;
33739: LD_ADDR_VAR 0 6
33743: PUSH
33744: LD_VAR 0 2
33748: PUSH
33749: LD_VAR 0 3
33753: PUSH
33754: LD_VAR 0 4
33758: PUSH
33759: LD_VAR 0 5
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
// exit ;
33770: GO 34184
// end ; _chassis := AvailableChassisList ( factory ) ;
33772: LD_ADDR_VAR 0 9
33776: PUSH
33777: LD_VAR 0 1
33781: PPUSH
33782: CALL_OW 475
33786: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33787: LD_ADDR_VAR 0 11
33791: PUSH
33792: LD_VAR 0 1
33796: PPUSH
33797: CALL_OW 476
33801: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33802: LD_ADDR_VAR 0 12
33806: PUSH
33807: LD_VAR 0 1
33811: PPUSH
33812: CALL_OW 477
33816: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33817: LD_ADDR_VAR 0 10
33821: PUSH
33822: LD_VAR 0 1
33826: PPUSH
33827: CALL_OW 478
33831: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33832: LD_VAR 0 9
33836: NOT
33837: PUSH
33838: LD_VAR 0 11
33842: NOT
33843: OR
33844: PUSH
33845: LD_VAR 0 12
33849: NOT
33850: OR
33851: PUSH
33852: LD_VAR 0 10
33856: NOT
33857: OR
33858: IFFALSE 33893
// begin result := [ chassis , engine , control , weapon ] ;
33860: LD_ADDR_VAR 0 6
33864: PUSH
33865: LD_VAR 0 2
33869: PUSH
33870: LD_VAR 0 3
33874: PUSH
33875: LD_VAR 0 4
33879: PUSH
33880: LD_VAR 0 5
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
// exit ;
33891: GO 34184
// end ; if not chassis in _chassis then
33893: LD_VAR 0 2
33897: PUSH
33898: LD_VAR 0 9
33902: IN
33903: NOT
33904: IFFALSE 33930
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33906: LD_ADDR_VAR 0 2
33910: PUSH
33911: LD_VAR 0 9
33915: PUSH
33916: LD_INT 1
33918: PPUSH
33919: LD_VAR 0 9
33923: PPUSH
33924: CALL_OW 12
33928: ARRAY
33929: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33930: LD_VAR 0 2
33934: PPUSH
33935: LD_VAR 0 3
33939: PPUSH
33940: CALL 34189 0 2
33944: NOT
33945: IFFALSE 34004
// repeat engine := _engine [ 1 ] ;
33947: LD_ADDR_VAR 0 3
33951: PUSH
33952: LD_VAR 0 11
33956: PUSH
33957: LD_INT 1
33959: ARRAY
33960: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33961: LD_ADDR_VAR 0 11
33965: PUSH
33966: LD_VAR 0 11
33970: PPUSH
33971: LD_INT 1
33973: PPUSH
33974: CALL_OW 3
33978: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33979: LD_VAR 0 2
33983: PPUSH
33984: LD_VAR 0 3
33988: PPUSH
33989: CALL 34189 0 2
33993: PUSH
33994: LD_VAR 0 11
33998: PUSH
33999: EMPTY
34000: EQUAL
34001: OR
34002: IFFALSE 33947
// if not control in _control then
34004: LD_VAR 0 4
34008: PUSH
34009: LD_VAR 0 12
34013: IN
34014: NOT
34015: IFFALSE 34041
// control := _control [ rand ( 1 , _control ) ] ;
34017: LD_ADDR_VAR 0 4
34021: PUSH
34022: LD_VAR 0 12
34026: PUSH
34027: LD_INT 1
34029: PPUSH
34030: LD_VAR 0 12
34034: PPUSH
34035: CALL_OW 12
34039: ARRAY
34040: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34041: LD_VAR 0 2
34045: PPUSH
34046: LD_VAR 0 5
34050: PPUSH
34051: CALL 34409 0 2
34055: NOT
34056: IFFALSE 34115
// repeat weapon := _weapon [ 1 ] ;
34058: LD_ADDR_VAR 0 5
34062: PUSH
34063: LD_VAR 0 10
34067: PUSH
34068: LD_INT 1
34070: ARRAY
34071: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34072: LD_ADDR_VAR 0 10
34076: PUSH
34077: LD_VAR 0 10
34081: PPUSH
34082: LD_INT 1
34084: PPUSH
34085: CALL_OW 3
34089: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34090: LD_VAR 0 2
34094: PPUSH
34095: LD_VAR 0 5
34099: PPUSH
34100: CALL 34409 0 2
34104: PUSH
34105: LD_VAR 0 10
34109: PUSH
34110: EMPTY
34111: EQUAL
34112: OR
34113: IFFALSE 34058
// result := [ ] ;
34115: LD_ADDR_VAR 0 6
34119: PUSH
34120: EMPTY
34121: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34122: LD_VAR 0 1
34126: PPUSH
34127: LD_VAR 0 2
34131: PPUSH
34132: LD_VAR 0 3
34136: PPUSH
34137: LD_VAR 0 4
34141: PPUSH
34142: LD_VAR 0 5
34146: PPUSH
34147: CALL_OW 448
34151: IFFALSE 34184
// result := [ chassis , engine , control , weapon ] ;
34153: LD_ADDR_VAR 0 6
34157: PUSH
34158: LD_VAR 0 2
34162: PUSH
34163: LD_VAR 0 3
34167: PUSH
34168: LD_VAR 0 4
34172: PUSH
34173: LD_VAR 0 5
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// end ;
34184: LD_VAR 0 6
34188: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34189: LD_INT 0
34191: PPUSH
// if not chassis or not engine then
34192: LD_VAR 0 1
34196: NOT
34197: PUSH
34198: LD_VAR 0 2
34202: NOT
34203: OR
34204: IFFALSE 34208
// exit ;
34206: GO 34404
// case engine of engine_solar :
34208: LD_VAR 0 2
34212: PUSH
34213: LD_INT 2
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34221
34219: GO 34259
34221: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34222: LD_ADDR_VAR 0 3
34226: PUSH
34227: LD_INT 11
34229: PUSH
34230: LD_INT 12
34232: PUSH
34233: LD_INT 13
34235: PUSH
34236: LD_INT 14
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: LD_INT 3
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: ST_TO_ADDR
34257: GO 34388
34259: LD_INT 1
34261: DOUBLE
34262: EQUAL
34263: IFTRUE 34267
34265: GO 34329
34267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_INT 11
34275: PUSH
34276: LD_INT 12
34278: PUSH
34279: LD_INT 13
34281: PUSH
34282: LD_INT 14
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 3
34293: PUSH
34294: LD_INT 4
34296: PUSH
34297: LD_INT 5
34299: PUSH
34300: LD_INT 21
34302: PUSH
34303: LD_INT 23
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_INT 24
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: ST_TO_ADDR
34327: GO 34388
34329: LD_INT 3
34331: DOUBLE
34332: EQUAL
34333: IFTRUE 34337
34335: GO 34387
34337: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34338: LD_ADDR_VAR 0 3
34342: PUSH
34343: LD_INT 13
34345: PUSH
34346: LD_INT 14
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 3
34354: PUSH
34355: LD_INT 4
34357: PUSH
34358: LD_INT 5
34360: PUSH
34361: LD_INT 21
34363: PUSH
34364: LD_INT 22
34366: PUSH
34367: LD_INT 23
34369: PUSH
34370: LD_INT 24
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 34388
34387: POP
// result := ( chassis in result ) ;
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_VAR 0 1
34397: PUSH
34398: LD_VAR 0 3
34402: IN
34403: ST_TO_ADDR
// end ;
34404: LD_VAR 0 3
34408: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34409: LD_INT 0
34411: PPUSH
// if not chassis or not weapon then
34412: LD_VAR 0 1
34416: NOT
34417: PUSH
34418: LD_VAR 0 2
34422: NOT
34423: OR
34424: IFFALSE 34428
// exit ;
34426: GO 35454
// case weapon of us_machine_gun :
34428: LD_VAR 0 2
34432: PUSH
34433: LD_INT 2
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34441
34439: GO 34471
34441: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: LD_INT 3
34455: PUSH
34456: LD_INT 4
34458: PUSH
34459: LD_INT 5
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
34469: GO 35438
34471: LD_INT 3
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34509
34479: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: LD_INT 5
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: ST_TO_ADDR
34507: GO 35438
34509: LD_INT 11
34511: DOUBLE
34512: EQUAL
34513: IFTRUE 34517
34515: GO 34547
34517: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34518: LD_ADDR_VAR 0 3
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: LD_INT 4
34534: PUSH
34535: LD_INT 5
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: ST_TO_ADDR
34545: GO 35438
34547: LD_INT 4
34549: DOUBLE
34550: EQUAL
34551: IFTRUE 34555
34553: GO 34581
34555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34556: LD_ADDR_VAR 0 3
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 3
34566: PUSH
34567: LD_INT 4
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
34579: GO 35438
34581: LD_INT 5
34583: DOUBLE
34584: EQUAL
34585: IFTRUE 34589
34587: GO 34615
34589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34590: LD_ADDR_VAR 0 3
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: ST_TO_ADDR
34613: GO 35438
34615: LD_INT 9
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34649
34623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: ST_TO_ADDR
34647: GO 35438
34649: LD_INT 7
34651: DOUBLE
34652: EQUAL
34653: IFTRUE 34657
34655: GO 34683
34657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: LD_INT 4
34671: PUSH
34672: LD_INT 5
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
34681: GO 35438
34683: LD_INT 12
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34717
34691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34692: LD_ADDR_VAR 0 3
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: LD_INT 4
34705: PUSH
34706: LD_INT 5
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
34715: GO 35438
34717: LD_INT 13
34719: DOUBLE
34720: EQUAL
34721: IFTRUE 34725
34723: GO 34751
34725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34726: LD_ADDR_VAR 0 3
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 4
34739: PUSH
34740: LD_INT 5
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: ST_TO_ADDR
34749: GO 35438
34751: LD_INT 14
34753: DOUBLE
34754: EQUAL
34755: IFTRUE 34759
34757: GO 34777
34759: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34760: LD_ADDR_VAR 0 3
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 5
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: ST_TO_ADDR
34775: GO 35438
34777: LD_INT 6
34779: DOUBLE
34780: EQUAL
34781: IFTRUE 34785
34783: GO 34803
34785: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34786: LD_ADDR_VAR 0 3
34790: PUSH
34791: LD_INT 4
34793: PUSH
34794: LD_INT 5
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: ST_TO_ADDR
34801: GO 35438
34803: LD_INT 10
34805: DOUBLE
34806: EQUAL
34807: IFTRUE 34811
34809: GO 34829
34811: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34812: LD_ADDR_VAR 0 3
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 5
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: ST_TO_ADDR
34827: GO 35438
34829: LD_INT 22
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34863
34837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 11
34845: PUSH
34846: LD_INT 12
34848: PUSH
34849: LD_INT 13
34851: PUSH
34852: LD_INT 14
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
34861: GO 35438
34863: LD_INT 23
34865: DOUBLE
34866: EQUAL
34867: IFTRUE 34871
34869: GO 34897
34871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34872: LD_ADDR_VAR 0 3
34876: PUSH
34877: LD_INT 11
34879: PUSH
34880: LD_INT 12
34882: PUSH
34883: LD_INT 13
34885: PUSH
34886: LD_INT 14
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
34895: GO 35438
34897: LD_INT 24
34899: DOUBLE
34900: EQUAL
34901: IFTRUE 34905
34903: GO 34931
34905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_INT 11
34913: PUSH
34914: LD_INT 12
34916: PUSH
34917: LD_INT 13
34919: PUSH
34920: LD_INT 14
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: ST_TO_ADDR
34929: GO 35438
34931: LD_INT 30
34933: DOUBLE
34934: EQUAL
34935: IFTRUE 34939
34937: GO 34965
34939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34940: LD_ADDR_VAR 0 3
34944: PUSH
34945: LD_INT 11
34947: PUSH
34948: LD_INT 12
34950: PUSH
34951: LD_INT 13
34953: PUSH
34954: LD_INT 14
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: ST_TO_ADDR
34963: GO 35438
34965: LD_INT 25
34967: DOUBLE
34968: EQUAL
34969: IFTRUE 34973
34971: GO 34991
34973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34974: LD_ADDR_VAR 0 3
34978: PUSH
34979: LD_INT 13
34981: PUSH
34982: LD_INT 14
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: ST_TO_ADDR
34989: GO 35438
34991: LD_INT 27
34993: DOUBLE
34994: EQUAL
34995: IFTRUE 34999
34997: GO 35017
34999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35000: LD_ADDR_VAR 0 3
35004: PUSH
35005: LD_INT 13
35007: PUSH
35008: LD_INT 14
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: ST_TO_ADDR
35015: GO 35438
35017: LD_INT 28
35019: DOUBLE
35020: EQUAL
35021: IFTRUE 35025
35023: GO 35043
35025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35026: LD_ADDR_VAR 0 3
35030: PUSH
35031: LD_INT 13
35033: PUSH
35034: LD_INT 14
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: ST_TO_ADDR
35041: GO 35438
35043: LD_INT 29
35045: DOUBLE
35046: EQUAL
35047: IFTRUE 35051
35049: GO 35069
35051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35052: LD_ADDR_VAR 0 3
35056: PUSH
35057: LD_INT 13
35059: PUSH
35060: LD_INT 14
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: ST_TO_ADDR
35067: GO 35438
35069: LD_INT 31
35071: DOUBLE
35072: EQUAL
35073: IFTRUE 35077
35075: GO 35095
35077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35078: LD_ADDR_VAR 0 3
35082: PUSH
35083: LD_INT 13
35085: PUSH
35086: LD_INT 14
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: ST_TO_ADDR
35093: GO 35438
35095: LD_INT 26
35097: DOUBLE
35098: EQUAL
35099: IFTRUE 35103
35101: GO 35121
35103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35104: LD_ADDR_VAR 0 3
35108: PUSH
35109: LD_INT 13
35111: PUSH
35112: LD_INT 14
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: ST_TO_ADDR
35119: GO 35438
35121: LD_INT 42
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35129
35127: GO 35155
35129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_INT 21
35137: PUSH
35138: LD_INT 22
35140: PUSH
35141: LD_INT 23
35143: PUSH
35144: LD_INT 24
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: ST_TO_ADDR
35153: GO 35438
35155: LD_INT 43
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35163
35161: GO 35189
35163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35164: LD_ADDR_VAR 0 3
35168: PUSH
35169: LD_INT 21
35171: PUSH
35172: LD_INT 22
35174: PUSH
35175: LD_INT 23
35177: PUSH
35178: LD_INT 24
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: ST_TO_ADDR
35187: GO 35438
35189: LD_INT 44
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35197
35195: GO 35223
35197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: LD_INT 21
35205: PUSH
35206: LD_INT 22
35208: PUSH
35209: LD_INT 23
35211: PUSH
35212: LD_INT 24
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: ST_TO_ADDR
35221: GO 35438
35223: LD_INT 45
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35231
35229: GO 35257
35231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35232: LD_ADDR_VAR 0 3
35236: PUSH
35237: LD_INT 21
35239: PUSH
35240: LD_INT 22
35242: PUSH
35243: LD_INT 23
35245: PUSH
35246: LD_INT 24
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: ST_TO_ADDR
35255: GO 35438
35257: LD_INT 49
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35291
35265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_INT 21
35273: PUSH
35274: LD_INT 22
35276: PUSH
35277: LD_INT 23
35279: PUSH
35280: LD_INT 24
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: ST_TO_ADDR
35289: GO 35438
35291: LD_INT 51
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35299
35297: GO 35325
35299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35300: LD_ADDR_VAR 0 3
35304: PUSH
35305: LD_INT 21
35307: PUSH
35308: LD_INT 22
35310: PUSH
35311: LD_INT 23
35313: PUSH
35314: LD_INT 24
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: ST_TO_ADDR
35323: GO 35438
35325: LD_INT 52
35327: DOUBLE
35328: EQUAL
35329: IFTRUE 35333
35331: GO 35359
35333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35334: LD_ADDR_VAR 0 3
35338: PUSH
35339: LD_INT 21
35341: PUSH
35342: LD_INT 22
35344: PUSH
35345: LD_INT 23
35347: PUSH
35348: LD_INT 24
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
35357: GO 35438
35359: LD_INT 53
35361: DOUBLE
35362: EQUAL
35363: IFTRUE 35367
35365: GO 35385
35367: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35368: LD_ADDR_VAR 0 3
35372: PUSH
35373: LD_INT 23
35375: PUSH
35376: LD_INT 24
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: ST_TO_ADDR
35383: GO 35438
35385: LD_INT 46
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35393
35391: GO 35411
35393: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35394: LD_ADDR_VAR 0 3
35398: PUSH
35399: LD_INT 23
35401: PUSH
35402: LD_INT 24
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: ST_TO_ADDR
35409: GO 35438
35411: LD_INT 47
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35419
35417: GO 35437
35419: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35420: LD_ADDR_VAR 0 3
35424: PUSH
35425: LD_INT 23
35427: PUSH
35428: LD_INT 24
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: ST_TO_ADDR
35435: GO 35438
35437: POP
// result := ( chassis in result ) ;
35438: LD_ADDR_VAR 0 3
35442: PUSH
35443: LD_VAR 0 1
35447: PUSH
35448: LD_VAR 0 3
35452: IN
35453: ST_TO_ADDR
// end ;
35454: LD_VAR 0 3
35458: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35459: LD_INT 0
35461: PPUSH
35462: PPUSH
35463: PPUSH
35464: PPUSH
35465: PPUSH
35466: PPUSH
35467: PPUSH
// result := array ;
35468: LD_ADDR_VAR 0 5
35472: PUSH
35473: LD_VAR 0 1
35477: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35478: LD_VAR 0 1
35482: NOT
35483: PUSH
35484: LD_VAR 0 2
35488: NOT
35489: OR
35490: PUSH
35491: LD_VAR 0 3
35495: NOT
35496: OR
35497: PUSH
35498: LD_VAR 0 2
35502: PUSH
35503: LD_VAR 0 1
35507: GREATER
35508: OR
35509: PUSH
35510: LD_VAR 0 3
35514: PUSH
35515: LD_VAR 0 1
35519: GREATER
35520: OR
35521: IFFALSE 35525
// exit ;
35523: GO 35821
// if direction then
35525: LD_VAR 0 4
35529: IFFALSE 35593
// begin d := 1 ;
35531: LD_ADDR_VAR 0 9
35535: PUSH
35536: LD_INT 1
35538: ST_TO_ADDR
// if i_from > i_to then
35539: LD_VAR 0 2
35543: PUSH
35544: LD_VAR 0 3
35548: GREATER
35549: IFFALSE 35575
// length := ( array - i_from ) + i_to else
35551: LD_ADDR_VAR 0 11
35555: PUSH
35556: LD_VAR 0 1
35560: PUSH
35561: LD_VAR 0 2
35565: MINUS
35566: PUSH
35567: LD_VAR 0 3
35571: PLUS
35572: ST_TO_ADDR
35573: GO 35591
// length := i_to - i_from ;
35575: LD_ADDR_VAR 0 11
35579: PUSH
35580: LD_VAR 0 3
35584: PUSH
35585: LD_VAR 0 2
35589: MINUS
35590: ST_TO_ADDR
// end else
35591: GO 35654
// begin d := - 1 ;
35593: LD_ADDR_VAR 0 9
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: ST_TO_ADDR
// if i_from > i_to then
35602: LD_VAR 0 2
35606: PUSH
35607: LD_VAR 0 3
35611: GREATER
35612: IFFALSE 35632
// length := i_from - i_to else
35614: LD_ADDR_VAR 0 11
35618: PUSH
35619: LD_VAR 0 2
35623: PUSH
35624: LD_VAR 0 3
35628: MINUS
35629: ST_TO_ADDR
35630: GO 35654
// length := ( array - i_to ) + i_from ;
35632: LD_ADDR_VAR 0 11
35636: PUSH
35637: LD_VAR 0 1
35641: PUSH
35642: LD_VAR 0 3
35646: MINUS
35647: PUSH
35648: LD_VAR 0 2
35652: PLUS
35653: ST_TO_ADDR
// end ; if not length then
35654: LD_VAR 0 11
35658: NOT
35659: IFFALSE 35663
// exit ;
35661: GO 35821
// tmp := array ;
35663: LD_ADDR_VAR 0 10
35667: PUSH
35668: LD_VAR 0 1
35672: ST_TO_ADDR
// for i = 1 to length do
35673: LD_ADDR_VAR 0 6
35677: PUSH
35678: DOUBLE
35679: LD_INT 1
35681: DEC
35682: ST_TO_ADDR
35683: LD_VAR 0 11
35687: PUSH
35688: FOR_TO
35689: IFFALSE 35809
// begin for j = 1 to array do
35691: LD_ADDR_VAR 0 7
35695: PUSH
35696: DOUBLE
35697: LD_INT 1
35699: DEC
35700: ST_TO_ADDR
35701: LD_VAR 0 1
35705: PUSH
35706: FOR_TO
35707: IFFALSE 35795
// begin k := j + d ;
35709: LD_ADDR_VAR 0 8
35713: PUSH
35714: LD_VAR 0 7
35718: PUSH
35719: LD_VAR 0 9
35723: PLUS
35724: ST_TO_ADDR
// if k > array then
35725: LD_VAR 0 8
35729: PUSH
35730: LD_VAR 0 1
35734: GREATER
35735: IFFALSE 35745
// k := 1 ;
35737: LD_ADDR_VAR 0 8
35741: PUSH
35742: LD_INT 1
35744: ST_TO_ADDR
// if not k then
35745: LD_VAR 0 8
35749: NOT
35750: IFFALSE 35762
// k := array ;
35752: LD_ADDR_VAR 0 8
35756: PUSH
35757: LD_VAR 0 1
35761: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35762: LD_ADDR_VAR 0 10
35766: PUSH
35767: LD_VAR 0 10
35771: PPUSH
35772: LD_VAR 0 8
35776: PPUSH
35777: LD_VAR 0 1
35781: PUSH
35782: LD_VAR 0 7
35786: ARRAY
35787: PPUSH
35788: CALL_OW 1
35792: ST_TO_ADDR
// end ;
35793: GO 35706
35795: POP
35796: POP
// array := tmp ;
35797: LD_ADDR_VAR 0 1
35801: PUSH
35802: LD_VAR 0 10
35806: ST_TO_ADDR
// end ;
35807: GO 35688
35809: POP
35810: POP
// result := array ;
35811: LD_ADDR_VAR 0 5
35815: PUSH
35816: LD_VAR 0 1
35820: ST_TO_ADDR
// end ;
35821: LD_VAR 0 5
35825: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35826: LD_INT 0
35828: PPUSH
35829: PPUSH
// result := 0 ;
35830: LD_ADDR_VAR 0 3
35834: PUSH
35835: LD_INT 0
35837: ST_TO_ADDR
// if not array or not value in array then
35838: LD_VAR 0 1
35842: NOT
35843: PUSH
35844: LD_VAR 0 2
35848: PUSH
35849: LD_VAR 0 1
35853: IN
35854: NOT
35855: OR
35856: IFFALSE 35860
// exit ;
35858: GO 35914
// for i = 1 to array do
35860: LD_ADDR_VAR 0 4
35864: PUSH
35865: DOUBLE
35866: LD_INT 1
35868: DEC
35869: ST_TO_ADDR
35870: LD_VAR 0 1
35874: PUSH
35875: FOR_TO
35876: IFFALSE 35912
// if value = array [ i ] then
35878: LD_VAR 0 2
35882: PUSH
35883: LD_VAR 0 1
35887: PUSH
35888: LD_VAR 0 4
35892: ARRAY
35893: EQUAL
35894: IFFALSE 35910
// begin result := i ;
35896: LD_ADDR_VAR 0 3
35900: PUSH
35901: LD_VAR 0 4
35905: ST_TO_ADDR
// exit ;
35906: POP
35907: POP
35908: GO 35914
// end ;
35910: GO 35875
35912: POP
35913: POP
// end ;
35914: LD_VAR 0 3
35918: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35919: LD_INT 0
35921: PPUSH
// vc_chassis := chassis ;
35922: LD_ADDR_OWVAR 37
35926: PUSH
35927: LD_VAR 0 1
35931: ST_TO_ADDR
// vc_engine := engine ;
35932: LD_ADDR_OWVAR 39
35936: PUSH
35937: LD_VAR 0 2
35941: ST_TO_ADDR
// vc_control := control ;
35942: LD_ADDR_OWVAR 38
35946: PUSH
35947: LD_VAR 0 3
35951: ST_TO_ADDR
// vc_weapon := weapon ;
35952: LD_ADDR_OWVAR 40
35956: PUSH
35957: LD_VAR 0 4
35961: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35962: LD_ADDR_OWVAR 41
35966: PUSH
35967: LD_VAR 0 5
35971: ST_TO_ADDR
// end ;
35972: LD_VAR 0 6
35976: RET
// export function WantPlant ( unit ) ; var task ; begin
35977: LD_INT 0
35979: PPUSH
35980: PPUSH
// result := false ;
35981: LD_ADDR_VAR 0 2
35985: PUSH
35986: LD_INT 0
35988: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35989: LD_ADDR_VAR 0 3
35993: PUSH
35994: LD_VAR 0 1
35998: PPUSH
35999: CALL_OW 437
36003: ST_TO_ADDR
// if task then
36004: LD_VAR 0 3
36008: IFFALSE 36036
// if task [ 1 ] [ 1 ] = p then
36010: LD_VAR 0 3
36014: PUSH
36015: LD_INT 1
36017: ARRAY
36018: PUSH
36019: LD_INT 1
36021: ARRAY
36022: PUSH
36023: LD_STRING p
36025: EQUAL
36026: IFFALSE 36036
// result := true ;
36028: LD_ADDR_VAR 0 2
36032: PUSH
36033: LD_INT 1
36035: ST_TO_ADDR
// end ;
36036: LD_VAR 0 2
36040: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36041: LD_INT 0
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
// if pos < 1 then
36047: LD_VAR 0 2
36051: PUSH
36052: LD_INT 1
36054: LESS
36055: IFFALSE 36059
// exit ;
36057: GO 36362
// if pos = 1 then
36059: LD_VAR 0 2
36063: PUSH
36064: LD_INT 1
36066: EQUAL
36067: IFFALSE 36100
// result := Replace ( arr , pos [ 1 ] , value ) else
36069: LD_ADDR_VAR 0 4
36073: PUSH
36074: LD_VAR 0 1
36078: PPUSH
36079: LD_VAR 0 2
36083: PUSH
36084: LD_INT 1
36086: ARRAY
36087: PPUSH
36088: LD_VAR 0 3
36092: PPUSH
36093: CALL_OW 1
36097: ST_TO_ADDR
36098: GO 36362
// begin tmp := arr ;
36100: LD_ADDR_VAR 0 6
36104: PUSH
36105: LD_VAR 0 1
36109: ST_TO_ADDR
// s_arr := [ tmp ] ;
36110: LD_ADDR_VAR 0 7
36114: PUSH
36115: LD_VAR 0 6
36119: PUSH
36120: EMPTY
36121: LIST
36122: ST_TO_ADDR
// for i = 1 to pos - 1 do
36123: LD_ADDR_VAR 0 5
36127: PUSH
36128: DOUBLE
36129: LD_INT 1
36131: DEC
36132: ST_TO_ADDR
36133: LD_VAR 0 2
36137: PUSH
36138: LD_INT 1
36140: MINUS
36141: PUSH
36142: FOR_TO
36143: IFFALSE 36188
// begin tmp := tmp [ pos [ i ] ] ;
36145: LD_ADDR_VAR 0 6
36149: PUSH
36150: LD_VAR 0 6
36154: PUSH
36155: LD_VAR 0 2
36159: PUSH
36160: LD_VAR 0 5
36164: ARRAY
36165: ARRAY
36166: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36167: LD_ADDR_VAR 0 7
36171: PUSH
36172: LD_VAR 0 7
36176: PUSH
36177: LD_VAR 0 6
36181: PUSH
36182: EMPTY
36183: LIST
36184: ADD
36185: ST_TO_ADDR
// end ;
36186: GO 36142
36188: POP
36189: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36190: LD_ADDR_VAR 0 6
36194: PUSH
36195: LD_VAR 0 6
36199: PPUSH
36200: LD_VAR 0 2
36204: PUSH
36205: LD_VAR 0 2
36209: ARRAY
36210: PPUSH
36211: LD_VAR 0 3
36215: PPUSH
36216: CALL_OW 1
36220: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36221: LD_ADDR_VAR 0 7
36225: PUSH
36226: LD_VAR 0 7
36230: PPUSH
36231: LD_VAR 0 7
36235: PPUSH
36236: LD_VAR 0 6
36240: PPUSH
36241: CALL_OW 1
36245: ST_TO_ADDR
// for i = s_arr downto 2 do
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: DOUBLE
36252: LD_VAR 0 7
36256: INC
36257: ST_TO_ADDR
36258: LD_INT 2
36260: PUSH
36261: FOR_DOWNTO
36262: IFFALSE 36346
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36264: LD_ADDR_VAR 0 6
36268: PUSH
36269: LD_VAR 0 7
36273: PUSH
36274: LD_VAR 0 5
36278: PUSH
36279: LD_INT 1
36281: MINUS
36282: ARRAY
36283: PPUSH
36284: LD_VAR 0 2
36288: PUSH
36289: LD_VAR 0 5
36293: PUSH
36294: LD_INT 1
36296: MINUS
36297: ARRAY
36298: PPUSH
36299: LD_VAR 0 7
36303: PUSH
36304: LD_VAR 0 5
36308: ARRAY
36309: PPUSH
36310: CALL_OW 1
36314: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36315: LD_ADDR_VAR 0 7
36319: PUSH
36320: LD_VAR 0 7
36324: PPUSH
36325: LD_VAR 0 5
36329: PUSH
36330: LD_INT 1
36332: MINUS
36333: PPUSH
36334: LD_VAR 0 6
36338: PPUSH
36339: CALL_OW 1
36343: ST_TO_ADDR
// end ;
36344: GO 36261
36346: POP
36347: POP
// result := s_arr [ 1 ] ;
36348: LD_ADDR_VAR 0 4
36352: PUSH
36353: LD_VAR 0 7
36357: PUSH
36358: LD_INT 1
36360: ARRAY
36361: ST_TO_ADDR
// end ; end ;
36362: LD_VAR 0 4
36366: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36367: LD_INT 0
36369: PPUSH
36370: PPUSH
// if not list then
36371: LD_VAR 0 1
36375: NOT
36376: IFFALSE 36380
// exit ;
36378: GO 36471
// i := list [ pos1 ] ;
36380: LD_ADDR_VAR 0 5
36384: PUSH
36385: LD_VAR 0 1
36389: PUSH
36390: LD_VAR 0 2
36394: ARRAY
36395: ST_TO_ADDR
// if not i then
36396: LD_VAR 0 5
36400: NOT
36401: IFFALSE 36405
// exit ;
36403: GO 36471
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36405: LD_ADDR_VAR 0 1
36409: PUSH
36410: LD_VAR 0 1
36414: PPUSH
36415: LD_VAR 0 2
36419: PPUSH
36420: LD_VAR 0 1
36424: PUSH
36425: LD_VAR 0 3
36429: ARRAY
36430: PPUSH
36431: CALL_OW 1
36435: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36436: LD_ADDR_VAR 0 1
36440: PUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: LD_VAR 0 3
36450: PPUSH
36451: LD_VAR 0 5
36455: PPUSH
36456: CALL_OW 1
36460: ST_TO_ADDR
// result := list ;
36461: LD_ADDR_VAR 0 4
36465: PUSH
36466: LD_VAR 0 1
36470: ST_TO_ADDR
// end ;
36471: LD_VAR 0 4
36475: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36476: LD_INT 0
36478: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36479: LD_ADDR_VAR 0 5
36483: PUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL_OW 250
36493: PPUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 251
36503: PPUSH
36504: LD_VAR 0 2
36508: PPUSH
36509: LD_VAR 0 3
36513: PPUSH
36514: LD_VAR 0 4
36518: PPUSH
36519: CALL 36529 0 5
36523: ST_TO_ADDR
// end ;
36524: LD_VAR 0 5
36528: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36529: LD_INT 0
36531: PPUSH
36532: PPUSH
36533: PPUSH
36534: PPUSH
// if not list then
36535: LD_VAR 0 3
36539: NOT
36540: IFFALSE 36544
// exit ;
36542: GO 36932
// result := [ ] ;
36544: LD_ADDR_VAR 0 6
36548: PUSH
36549: EMPTY
36550: ST_TO_ADDR
// for i in list do
36551: LD_ADDR_VAR 0 7
36555: PUSH
36556: LD_VAR 0 3
36560: PUSH
36561: FOR_IN
36562: IFFALSE 36764
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: LD_VAR 0 7
36573: PPUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: LD_VAR 0 2
36583: PPUSH
36584: CALL_OW 297
36588: ST_TO_ADDR
// if not result then
36589: LD_VAR 0 6
36593: NOT
36594: IFFALSE 36620
// result := [ [ i , tmp ] ] else
36596: LD_ADDR_VAR 0 6
36600: PUSH
36601: LD_VAR 0 7
36605: PUSH
36606: LD_VAR 0 9
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: EMPTY
36616: LIST
36617: ST_TO_ADDR
36618: GO 36762
// begin if result [ result ] [ 2 ] < tmp then
36620: LD_VAR 0 6
36624: PUSH
36625: LD_VAR 0 6
36629: ARRAY
36630: PUSH
36631: LD_INT 2
36633: ARRAY
36634: PUSH
36635: LD_VAR 0 9
36639: LESS
36640: IFFALSE 36682
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36642: LD_ADDR_VAR 0 6
36646: PUSH
36647: LD_VAR 0 6
36651: PPUSH
36652: LD_VAR 0 6
36656: PUSH
36657: LD_INT 1
36659: PLUS
36660: PPUSH
36661: LD_VAR 0 7
36665: PUSH
36666: LD_VAR 0 9
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PPUSH
36675: CALL_OW 2
36679: ST_TO_ADDR
36680: GO 36762
// for j = 1 to result do
36682: LD_ADDR_VAR 0 8
36686: PUSH
36687: DOUBLE
36688: LD_INT 1
36690: DEC
36691: ST_TO_ADDR
36692: LD_VAR 0 6
36696: PUSH
36697: FOR_TO
36698: IFFALSE 36760
// begin if tmp < result [ j ] [ 2 ] then
36700: LD_VAR 0 9
36704: PUSH
36705: LD_VAR 0 6
36709: PUSH
36710: LD_VAR 0 8
36714: ARRAY
36715: PUSH
36716: LD_INT 2
36718: ARRAY
36719: LESS
36720: IFFALSE 36758
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36722: LD_ADDR_VAR 0 6
36726: PUSH
36727: LD_VAR 0 6
36731: PPUSH
36732: LD_VAR 0 8
36736: PPUSH
36737: LD_VAR 0 7
36741: PUSH
36742: LD_VAR 0 9
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PPUSH
36751: CALL_OW 2
36755: ST_TO_ADDR
// break ;
36756: GO 36760
// end ; end ;
36758: GO 36697
36760: POP
36761: POP
// end ; end ;
36762: GO 36561
36764: POP
36765: POP
// if result and not asc then
36766: LD_VAR 0 6
36770: PUSH
36771: LD_VAR 0 4
36775: NOT
36776: AND
36777: IFFALSE 36852
// begin tmp := result ;
36779: LD_ADDR_VAR 0 9
36783: PUSH
36784: LD_VAR 0 6
36788: ST_TO_ADDR
// for i = tmp downto 1 do
36789: LD_ADDR_VAR 0 7
36793: PUSH
36794: DOUBLE
36795: LD_VAR 0 9
36799: INC
36800: ST_TO_ADDR
36801: LD_INT 1
36803: PUSH
36804: FOR_DOWNTO
36805: IFFALSE 36850
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36807: LD_ADDR_VAR 0 6
36811: PUSH
36812: LD_VAR 0 6
36816: PPUSH
36817: LD_VAR 0 9
36821: PUSH
36822: LD_VAR 0 7
36826: MINUS
36827: PUSH
36828: LD_INT 1
36830: PLUS
36831: PPUSH
36832: LD_VAR 0 9
36836: PUSH
36837: LD_VAR 0 7
36841: ARRAY
36842: PPUSH
36843: CALL_OW 1
36847: ST_TO_ADDR
36848: GO 36804
36850: POP
36851: POP
// end ; tmp := [ ] ;
36852: LD_ADDR_VAR 0 9
36856: PUSH
36857: EMPTY
36858: ST_TO_ADDR
// if mode then
36859: LD_VAR 0 5
36863: IFFALSE 36932
// begin for i = 1 to result do
36865: LD_ADDR_VAR 0 7
36869: PUSH
36870: DOUBLE
36871: LD_INT 1
36873: DEC
36874: ST_TO_ADDR
36875: LD_VAR 0 6
36879: PUSH
36880: FOR_TO
36881: IFFALSE 36920
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36883: LD_ADDR_VAR 0 9
36887: PUSH
36888: LD_VAR 0 9
36892: PPUSH
36893: LD_VAR 0 7
36897: PPUSH
36898: LD_VAR 0 6
36902: PUSH
36903: LD_VAR 0 7
36907: ARRAY
36908: PUSH
36909: LD_INT 1
36911: ARRAY
36912: PPUSH
36913: CALL_OW 1
36917: ST_TO_ADDR
36918: GO 36880
36920: POP
36921: POP
// result := tmp ;
36922: LD_ADDR_VAR 0 6
36926: PUSH
36927: LD_VAR 0 9
36931: ST_TO_ADDR
// end ; end ;
36932: LD_VAR 0 6
36936: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36937: LD_INT 0
36939: PPUSH
36940: PPUSH
36941: PPUSH
36942: PPUSH
36943: PPUSH
36944: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: ST_TO_ADDR
// if not x or not y then
36967: LD_VAR 0 2
36971: NOT
36972: PUSH
36973: LD_VAR 0 3
36977: NOT
36978: OR
36979: IFFALSE 36983
// exit ;
36981: GO 38629
// if not range then
36983: LD_VAR 0 4
36987: NOT
36988: IFFALSE 36998
// range := 10 ;
36990: LD_ADDR_VAR 0 4
36994: PUSH
36995: LD_INT 10
36997: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36998: LD_ADDR_VAR 0 8
37002: PUSH
37003: LD_INT 81
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 92
37017: PUSH
37018: LD_VAR 0 2
37022: PUSH
37023: LD_VAR 0 3
37027: PUSH
37028: LD_VAR 0 4
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: LD_INT 21
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: PPUSH
37061: CALL_OW 69
37065: ST_TO_ADDR
// if not tmp then
37066: LD_VAR 0 8
37070: NOT
37071: IFFALSE 37075
// exit ;
37073: GO 38629
// for i in tmp do
37075: LD_ADDR_VAR 0 6
37079: PUSH
37080: LD_VAR 0 8
37084: PUSH
37085: FOR_IN
37086: IFFALSE 38604
// begin points := [ 0 , 0 , 0 ] ;
37088: LD_ADDR_VAR 0 9
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
// bpoints := 1 ;
37107: LD_ADDR_VAR 0 10
37111: PUSH
37112: LD_INT 1
37114: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37115: LD_VAR 0 6
37119: PPUSH
37120: CALL_OW 247
37124: PUSH
37125: LD_INT 1
37127: DOUBLE
37128: EQUAL
37129: IFTRUE 37133
37131: GO 37711
37133: POP
// begin if GetClass ( i ) = 1 then
37134: LD_VAR 0 6
37138: PPUSH
37139: CALL_OW 257
37143: PUSH
37144: LD_INT 1
37146: EQUAL
37147: IFFALSE 37168
// points := [ 10 , 5 , 3 ] ;
37149: LD_ADDR_VAR 0 9
37153: PUSH
37154: LD_INT 10
37156: PUSH
37157: LD_INT 5
37159: PUSH
37160: LD_INT 3
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 257
37177: PUSH
37178: LD_INT 2
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 4
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: IN
37192: IFFALSE 37213
// points := [ 3 , 2 , 1 ] ;
37194: LD_ADDR_VAR 0 9
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37213: LD_VAR 0 6
37217: PPUSH
37218: CALL_OW 257
37222: PUSH
37223: LD_INT 5
37225: EQUAL
37226: IFFALSE 37247
// points := [ 130 , 5 , 2 ] ;
37228: LD_ADDR_VAR 0 9
37232: PUSH
37233: LD_INT 130
37235: PUSH
37236: LD_INT 5
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37247: LD_VAR 0 6
37251: PPUSH
37252: CALL_OW 257
37256: PUSH
37257: LD_INT 8
37259: EQUAL
37260: IFFALSE 37281
// points := [ 35 , 35 , 30 ] ;
37262: LD_ADDR_VAR 0 9
37266: PUSH
37267: LD_INT 35
37269: PUSH
37270: LD_INT 35
37272: PUSH
37273: LD_INT 30
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37281: LD_VAR 0 6
37285: PPUSH
37286: CALL_OW 257
37290: PUSH
37291: LD_INT 9
37293: EQUAL
37294: IFFALSE 37315
// points := [ 20 , 55 , 40 ] ;
37296: LD_ADDR_VAR 0 9
37300: PUSH
37301: LD_INT 20
37303: PUSH
37304: LD_INT 55
37306: PUSH
37307: LD_INT 40
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37315: LD_VAR 0 6
37319: PPUSH
37320: CALL_OW 257
37324: PUSH
37325: LD_INT 12
37327: PUSH
37328: LD_INT 16
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: IN
37335: IFFALSE 37356
// points := [ 5 , 3 , 2 ] ;
37337: LD_ADDR_VAR 0 9
37341: PUSH
37342: LD_INT 5
37344: PUSH
37345: LD_INT 3
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37356: LD_VAR 0 6
37360: PPUSH
37361: CALL_OW 257
37365: PUSH
37366: LD_INT 17
37368: EQUAL
37369: IFFALSE 37390
// points := [ 100 , 50 , 75 ] ;
37371: LD_ADDR_VAR 0 9
37375: PUSH
37376: LD_INT 100
37378: PUSH
37379: LD_INT 50
37381: PUSH
37382: LD_INT 75
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37390: LD_VAR 0 6
37394: PPUSH
37395: CALL_OW 257
37399: PUSH
37400: LD_INT 15
37402: EQUAL
37403: IFFALSE 37424
// points := [ 10 , 5 , 3 ] ;
37405: LD_ADDR_VAR 0 9
37409: PUSH
37410: LD_INT 10
37412: PUSH
37413: LD_INT 5
37415: PUSH
37416: LD_INT 3
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37424: LD_VAR 0 6
37428: PPUSH
37429: CALL_OW 257
37433: PUSH
37434: LD_INT 14
37436: EQUAL
37437: IFFALSE 37458
// points := [ 10 , 0 , 0 ] ;
37439: LD_ADDR_VAR 0 9
37443: PUSH
37444: LD_INT 10
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37458: LD_VAR 0 6
37462: PPUSH
37463: CALL_OW 257
37467: PUSH
37468: LD_INT 11
37470: EQUAL
37471: IFFALSE 37492
// points := [ 30 , 10 , 5 ] ;
37473: LD_ADDR_VAR 0 9
37477: PUSH
37478: LD_INT 30
37480: PUSH
37481: LD_INT 10
37483: PUSH
37484: LD_INT 5
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37492: LD_VAR 0 1
37496: PPUSH
37497: LD_INT 5
37499: PPUSH
37500: CALL_OW 321
37504: PUSH
37505: LD_INT 2
37507: EQUAL
37508: IFFALSE 37525
// bpoints := bpoints * 1.8 ;
37510: LD_ADDR_VAR 0 10
37514: PUSH
37515: LD_VAR 0 10
37519: PUSH
37520: LD_REAL  1.80000000000000E+0000
37523: MUL
37524: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37525: LD_VAR 0 6
37529: PPUSH
37530: CALL_OW 257
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 3
37543: PUSH
37544: LD_INT 4
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: IN
37553: PUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: LD_INT 51
37561: PPUSH
37562: CALL_OW 321
37566: PUSH
37567: LD_INT 2
37569: EQUAL
37570: AND
37571: IFFALSE 37588
// bpoints := bpoints * 1.2 ;
37573: LD_ADDR_VAR 0 10
37577: PUSH
37578: LD_VAR 0 10
37582: PUSH
37583: LD_REAL  1.20000000000000E+0000
37586: MUL
37587: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37588: LD_VAR 0 6
37592: PPUSH
37593: CALL_OW 257
37597: PUSH
37598: LD_INT 5
37600: PUSH
37601: LD_INT 7
37603: PUSH
37604: LD_INT 9
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: IN
37612: PUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: LD_INT 52
37620: PPUSH
37621: CALL_OW 321
37625: PUSH
37626: LD_INT 2
37628: EQUAL
37629: AND
37630: IFFALSE 37647
// bpoints := bpoints * 1.5 ;
37632: LD_ADDR_VAR 0 10
37636: PUSH
37637: LD_VAR 0 10
37641: PUSH
37642: LD_REAL  1.50000000000000E+0000
37645: MUL
37646: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37647: LD_VAR 0 1
37651: PPUSH
37652: LD_INT 66
37654: PPUSH
37655: CALL_OW 321
37659: PUSH
37660: LD_INT 2
37662: EQUAL
37663: IFFALSE 37680
// bpoints := bpoints * 1.1 ;
37665: LD_ADDR_VAR 0 10
37669: PUSH
37670: LD_VAR 0 10
37674: PUSH
37675: LD_REAL  1.10000000000000E+0000
37678: MUL
37679: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37680: LD_ADDR_VAR 0 10
37684: PUSH
37685: LD_VAR 0 10
37689: PUSH
37690: LD_VAR 0 6
37694: PPUSH
37695: LD_INT 1
37697: PPUSH
37698: CALL_OW 259
37702: PUSH
37703: LD_REAL  1.15000000000000E+0000
37706: MUL
37707: MUL
37708: ST_TO_ADDR
// end ; unit_vehicle :
37709: GO 38533
37711: LD_INT 2
37713: DOUBLE
37714: EQUAL
37715: IFTRUE 37719
37717: GO 38521
37719: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37720: LD_VAR 0 6
37724: PPUSH
37725: CALL_OW 264
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 42
37735: PUSH
37736: LD_INT 24
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: IN
37744: IFFALSE 37765
// points := [ 25 , 5 , 3 ] ;
37746: LD_ADDR_VAR 0 9
37750: PUSH
37751: LD_INT 25
37753: PUSH
37754: LD_INT 5
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37765: LD_VAR 0 6
37769: PPUSH
37770: CALL_OW 264
37774: PUSH
37775: LD_INT 4
37777: PUSH
37778: LD_INT 43
37780: PUSH
37781: LD_INT 25
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: IN
37789: IFFALSE 37810
// points := [ 40 , 15 , 5 ] ;
37791: LD_ADDR_VAR 0 9
37795: PUSH
37796: LD_INT 40
37798: PUSH
37799: LD_INT 15
37801: PUSH
37802: LD_INT 5
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37810: LD_VAR 0 6
37814: PPUSH
37815: CALL_OW 264
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: LD_INT 23
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: IN
37830: IFFALSE 37851
// points := [ 7 , 25 , 8 ] ;
37832: LD_ADDR_VAR 0 9
37836: PUSH
37837: LD_INT 7
37839: PUSH
37840: LD_INT 25
37842: PUSH
37843: LD_INT 8
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37851: LD_VAR 0 6
37855: PPUSH
37856: CALL_OW 264
37860: PUSH
37861: LD_INT 5
37863: PUSH
37864: LD_INT 27
37866: PUSH
37867: LD_INT 44
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: IN
37875: IFFALSE 37896
// points := [ 14 , 50 , 16 ] ;
37877: LD_ADDR_VAR 0 9
37881: PUSH
37882: LD_INT 14
37884: PUSH
37885: LD_INT 50
37887: PUSH
37888: LD_INT 16
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37896: LD_VAR 0 6
37900: PPUSH
37901: CALL_OW 264
37905: PUSH
37906: LD_INT 6
37908: PUSH
37909: LD_INT 46
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: IN
37916: IFFALSE 37937
// points := [ 32 , 120 , 70 ] ;
37918: LD_ADDR_VAR 0 9
37922: PUSH
37923: LD_INT 32
37925: PUSH
37926: LD_INT 120
37928: PUSH
37929: LD_INT 70
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37937: LD_VAR 0 6
37941: PPUSH
37942: CALL_OW 264
37946: PUSH
37947: LD_INT 7
37949: PUSH
37950: LD_INT 28
37952: PUSH
37953: LD_INT 45
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: LIST
37960: IN
37961: IFFALSE 37982
// points := [ 35 , 20 , 45 ] ;
37963: LD_ADDR_VAR 0 9
37967: PUSH
37968: LD_INT 35
37970: PUSH
37971: LD_INT 20
37973: PUSH
37974: LD_INT 45
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37982: LD_VAR 0 6
37986: PPUSH
37987: CALL_OW 264
37991: PUSH
37992: LD_INT 47
37994: PUSH
37995: EMPTY
37996: LIST
37997: IN
37998: IFFALSE 38019
// points := [ 67 , 45 , 75 ] ;
38000: LD_ADDR_VAR 0 9
38004: PUSH
38005: LD_INT 67
38007: PUSH
38008: LD_INT 45
38010: PUSH
38011: LD_INT 75
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38019: LD_VAR 0 6
38023: PPUSH
38024: CALL_OW 264
38028: PUSH
38029: LD_INT 26
38031: PUSH
38032: EMPTY
38033: LIST
38034: IN
38035: IFFALSE 38056
// points := [ 120 , 30 , 80 ] ;
38037: LD_ADDR_VAR 0 9
38041: PUSH
38042: LD_INT 120
38044: PUSH
38045: LD_INT 30
38047: PUSH
38048: LD_INT 80
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38056: LD_VAR 0 6
38060: PPUSH
38061: CALL_OW 264
38065: PUSH
38066: LD_INT 22
38068: PUSH
38069: EMPTY
38070: LIST
38071: IN
38072: IFFALSE 38093
// points := [ 40 , 1 , 1 ] ;
38074: LD_ADDR_VAR 0 9
38078: PUSH
38079: LD_INT 40
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38093: LD_VAR 0 6
38097: PPUSH
38098: CALL_OW 264
38102: PUSH
38103: LD_INT 29
38105: PUSH
38106: EMPTY
38107: LIST
38108: IN
38109: IFFALSE 38130
// points := [ 70 , 200 , 400 ] ;
38111: LD_ADDR_VAR 0 9
38115: PUSH
38116: LD_INT 70
38118: PUSH
38119: LD_INT 200
38121: PUSH
38122: LD_INT 400
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38130: LD_VAR 0 6
38134: PPUSH
38135: CALL_OW 264
38139: PUSH
38140: LD_INT 14
38142: PUSH
38143: LD_INT 53
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: IN
38150: IFFALSE 38171
// points := [ 40 , 10 , 20 ] ;
38152: LD_ADDR_VAR 0 9
38156: PUSH
38157: LD_INT 40
38159: PUSH
38160: LD_INT 10
38162: PUSH
38163: LD_INT 20
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38171: LD_VAR 0 6
38175: PPUSH
38176: CALL_OW 264
38180: PUSH
38181: LD_INT 9
38183: PUSH
38184: EMPTY
38185: LIST
38186: IN
38187: IFFALSE 38208
// points := [ 5 , 70 , 20 ] ;
38189: LD_ADDR_VAR 0 9
38193: PUSH
38194: LD_INT 5
38196: PUSH
38197: LD_INT 70
38199: PUSH
38200: LD_INT 20
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38208: LD_VAR 0 6
38212: PPUSH
38213: CALL_OW 264
38217: PUSH
38218: LD_INT 10
38220: PUSH
38221: EMPTY
38222: LIST
38223: IN
38224: IFFALSE 38245
// points := [ 35 , 110 , 70 ] ;
38226: LD_ADDR_VAR 0 9
38230: PUSH
38231: LD_INT 35
38233: PUSH
38234: LD_INT 110
38236: PUSH
38237: LD_INT 70
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38245: LD_VAR 0 6
38249: PPUSH
38250: CALL_OW 265
38254: PUSH
38255: LD_INT 25
38257: EQUAL
38258: IFFALSE 38279
// points := [ 80 , 65 , 100 ] ;
38260: LD_ADDR_VAR 0 9
38264: PUSH
38265: LD_INT 80
38267: PUSH
38268: LD_INT 65
38270: PUSH
38271: LD_INT 100
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38279: LD_VAR 0 6
38283: PPUSH
38284: CALL_OW 263
38288: PUSH
38289: LD_INT 1
38291: EQUAL
38292: IFFALSE 38327
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38294: LD_ADDR_VAR 0 10
38298: PUSH
38299: LD_VAR 0 10
38303: PUSH
38304: LD_VAR 0 6
38308: PPUSH
38309: CALL_OW 311
38313: PPUSH
38314: LD_INT 3
38316: PPUSH
38317: CALL_OW 259
38321: PUSH
38322: LD_INT 4
38324: MUL
38325: MUL
38326: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38327: LD_VAR 0 6
38331: PPUSH
38332: CALL_OW 263
38336: PUSH
38337: LD_INT 2
38339: EQUAL
38340: IFFALSE 38391
// begin j := IsControledBy ( i ) ;
38342: LD_ADDR_VAR 0 7
38346: PUSH
38347: LD_VAR 0 6
38351: PPUSH
38352: CALL_OW 312
38356: ST_TO_ADDR
// if j then
38357: LD_VAR 0 7
38361: IFFALSE 38391
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38363: LD_ADDR_VAR 0 10
38367: PUSH
38368: LD_VAR 0 10
38372: PUSH
38373: LD_VAR 0 7
38377: PPUSH
38378: LD_INT 3
38380: PPUSH
38381: CALL_OW 259
38385: PUSH
38386: LD_INT 3
38388: MUL
38389: MUL
38390: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38391: LD_VAR 0 6
38395: PPUSH
38396: CALL_OW 264
38400: PUSH
38401: LD_INT 5
38403: PUSH
38404: LD_INT 6
38406: PUSH
38407: LD_INT 46
38409: PUSH
38410: LD_INT 44
38412: PUSH
38413: LD_INT 47
38415: PUSH
38416: LD_INT 45
38418: PUSH
38419: LD_INT 28
38421: PUSH
38422: LD_INT 7
38424: PUSH
38425: LD_INT 27
38427: PUSH
38428: LD_INT 29
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: IN
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: LD_INT 52
38451: PPUSH
38452: CALL_OW 321
38456: PUSH
38457: LD_INT 2
38459: EQUAL
38460: AND
38461: IFFALSE 38478
// bpoints := bpoints * 1.2 ;
38463: LD_ADDR_VAR 0 10
38467: PUSH
38468: LD_VAR 0 10
38472: PUSH
38473: LD_REAL  1.20000000000000E+0000
38476: MUL
38477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38478: LD_VAR 0 6
38482: PPUSH
38483: CALL_OW 264
38487: PUSH
38488: LD_INT 6
38490: PUSH
38491: LD_INT 46
38493: PUSH
38494: LD_INT 47
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: IN
38502: IFFALSE 38519
// bpoints := bpoints * 1.2 ;
38504: LD_ADDR_VAR 0 10
38508: PUSH
38509: LD_VAR 0 10
38513: PUSH
38514: LD_REAL  1.20000000000000E+0000
38517: MUL
38518: ST_TO_ADDR
// end ; unit_building :
38519: GO 38533
38521: LD_INT 3
38523: DOUBLE
38524: EQUAL
38525: IFTRUE 38529
38527: GO 38532
38529: POP
// ; end ;
38530: GO 38533
38532: POP
// for j = 1 to 3 do
38533: LD_ADDR_VAR 0 7
38537: PUSH
38538: DOUBLE
38539: LD_INT 1
38541: DEC
38542: ST_TO_ADDR
38543: LD_INT 3
38545: PUSH
38546: FOR_TO
38547: IFFALSE 38600
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38549: LD_ADDR_VAR 0 5
38553: PUSH
38554: LD_VAR 0 5
38558: PPUSH
38559: LD_VAR 0 7
38563: PPUSH
38564: LD_VAR 0 5
38568: PUSH
38569: LD_VAR 0 7
38573: ARRAY
38574: PUSH
38575: LD_VAR 0 9
38579: PUSH
38580: LD_VAR 0 7
38584: ARRAY
38585: PUSH
38586: LD_VAR 0 10
38590: MUL
38591: PLUS
38592: PPUSH
38593: CALL_OW 1
38597: ST_TO_ADDR
38598: GO 38546
38600: POP
38601: POP
// end ;
38602: GO 37085
38604: POP
38605: POP
// result := Replace ( result , 4 , tmp ) ;
38606: LD_ADDR_VAR 0 5
38610: PUSH
38611: LD_VAR 0 5
38615: PPUSH
38616: LD_INT 4
38618: PPUSH
38619: LD_VAR 0 8
38623: PPUSH
38624: CALL_OW 1
38628: ST_TO_ADDR
// end ;
38629: LD_VAR 0 5
38633: RET
// export function DangerAtRange ( unit , range ) ; begin
38634: LD_INT 0
38636: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38637: LD_ADDR_VAR 0 3
38641: PUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: CALL_OW 255
38651: PPUSH
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 250
38661: PPUSH
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL_OW 251
38671: PPUSH
38672: LD_VAR 0 2
38676: PPUSH
38677: CALL 36937 0 4
38681: ST_TO_ADDR
// end ;
38682: LD_VAR 0 3
38686: RET
// export function DangerInArea ( side , area ) ; begin
38687: LD_INT 0
38689: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38690: LD_ADDR_VAR 0 3
38694: PUSH
38695: LD_VAR 0 2
38699: PPUSH
38700: LD_INT 81
38702: PUSH
38703: LD_VAR 0 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PPUSH
38712: CALL_OW 70
38716: ST_TO_ADDR
// end ;
38717: LD_VAR 0 3
38721: RET
// export function IsExtension ( b ) ; begin
38722: LD_INT 0
38724: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38725: LD_ADDR_VAR 0 2
38729: PUSH
38730: LD_VAR 0 1
38734: PUSH
38735: LD_INT 23
38737: PUSH
38738: LD_INT 20
38740: PUSH
38741: LD_INT 22
38743: PUSH
38744: LD_INT 17
38746: PUSH
38747: LD_INT 24
38749: PUSH
38750: LD_INT 21
38752: PUSH
38753: LD_INT 19
38755: PUSH
38756: LD_INT 16
38758: PUSH
38759: LD_INT 25
38761: PUSH
38762: LD_INT 18
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: IN
38777: ST_TO_ADDR
// end ;
38778: LD_VAR 0 2
38782: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38783: LD_INT 0
38785: PPUSH
38786: PPUSH
38787: PPUSH
// result := [ ] ;
38788: LD_ADDR_VAR 0 4
38792: PUSH
38793: EMPTY
38794: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38795: LD_ADDR_VAR 0 5
38799: PUSH
38800: LD_VAR 0 2
38804: PPUSH
38805: LD_INT 21
38807: PUSH
38808: LD_INT 3
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PPUSH
38815: CALL_OW 70
38819: ST_TO_ADDR
// if not tmp then
38820: LD_VAR 0 5
38824: NOT
38825: IFFALSE 38829
// exit ;
38827: GO 38893
// if checkLink then
38829: LD_VAR 0 3
38833: IFFALSE 38883
// begin for i in tmp do
38835: LD_ADDR_VAR 0 6
38839: PUSH
38840: LD_VAR 0 5
38844: PUSH
38845: FOR_IN
38846: IFFALSE 38881
// if GetBase ( i ) <> base then
38848: LD_VAR 0 6
38852: PPUSH
38853: CALL_OW 274
38857: PUSH
38858: LD_VAR 0 1
38862: NONEQUAL
38863: IFFALSE 38879
// ComLinkToBase ( base , i ) ;
38865: LD_VAR 0 1
38869: PPUSH
38870: LD_VAR 0 6
38874: PPUSH
38875: CALL_OW 169
38879: GO 38845
38881: POP
38882: POP
// end ; result := tmp ;
38883: LD_ADDR_VAR 0 4
38887: PUSH
38888: LD_VAR 0 5
38892: ST_TO_ADDR
// end ;
38893: LD_VAR 0 4
38897: RET
// export function ComComplete ( units , b ) ; var i ; begin
38898: LD_INT 0
38900: PPUSH
38901: PPUSH
// if not units then
38902: LD_VAR 0 1
38906: NOT
38907: IFFALSE 38911
// exit ;
38909: GO 39001
// for i in units do
38911: LD_ADDR_VAR 0 4
38915: PUSH
38916: LD_VAR 0 1
38920: PUSH
38921: FOR_IN
38922: IFFALSE 38999
// if BuildingStatus ( b ) = bs_build then
38924: LD_VAR 0 2
38928: PPUSH
38929: CALL_OW 461
38933: PUSH
38934: LD_INT 1
38936: EQUAL
38937: IFFALSE 38997
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38939: LD_VAR 0 4
38943: PPUSH
38944: LD_STRING h
38946: PUSH
38947: LD_VAR 0 2
38951: PPUSH
38952: CALL_OW 250
38956: PUSH
38957: LD_VAR 0 2
38961: PPUSH
38962: CALL_OW 251
38966: PUSH
38967: LD_VAR 0 2
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: PPUSH
38993: CALL_OW 446
38997: GO 38921
38999: POP
39000: POP
// end ;
39001: LD_VAR 0 3
39005: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39006: LD_INT 0
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39014: LD_VAR 0 1
39018: NOT
39019: PUSH
39020: LD_VAR 0 1
39024: PPUSH
39025: CALL_OW 263
39029: PUSH
39030: LD_INT 2
39032: EQUAL
39033: NOT
39034: OR
39035: IFFALSE 39039
// exit ;
39037: GO 39355
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39039: LD_ADDR_VAR 0 6
39043: PUSH
39044: LD_INT 22
39046: PUSH
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL_OW 255
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: LD_INT 30
39066: PUSH
39067: LD_INT 36
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 34
39076: PUSH
39077: LD_INT 31
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PPUSH
39093: CALL_OW 69
39097: ST_TO_ADDR
// if not tmp then
39098: LD_VAR 0 6
39102: NOT
39103: IFFALSE 39107
// exit ;
39105: GO 39355
// result := [ ] ;
39107: LD_ADDR_VAR 0 2
39111: PUSH
39112: EMPTY
39113: ST_TO_ADDR
// for i in tmp do
39114: LD_ADDR_VAR 0 3
39118: PUSH
39119: LD_VAR 0 6
39123: PUSH
39124: FOR_IN
39125: IFFALSE 39196
// begin t := UnitsInside ( i ) ;
39127: LD_ADDR_VAR 0 4
39131: PUSH
39132: LD_VAR 0 3
39136: PPUSH
39137: CALL_OW 313
39141: ST_TO_ADDR
// if t then
39142: LD_VAR 0 4
39146: IFFALSE 39194
// for j in t do
39148: LD_ADDR_VAR 0 7
39152: PUSH
39153: LD_VAR 0 4
39157: PUSH
39158: FOR_IN
39159: IFFALSE 39192
// result := Insert ( result , result + 1 , j ) ;
39161: LD_ADDR_VAR 0 2
39165: PUSH
39166: LD_VAR 0 2
39170: PPUSH
39171: LD_VAR 0 2
39175: PUSH
39176: LD_INT 1
39178: PLUS
39179: PPUSH
39180: LD_VAR 0 7
39184: PPUSH
39185: CALL_OW 2
39189: ST_TO_ADDR
39190: GO 39158
39192: POP
39193: POP
// end ;
39194: GO 39124
39196: POP
39197: POP
// if not result then
39198: LD_VAR 0 2
39202: NOT
39203: IFFALSE 39207
// exit ;
39205: GO 39355
// mech := result [ 1 ] ;
39207: LD_ADDR_VAR 0 5
39211: PUSH
39212: LD_VAR 0 2
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: ST_TO_ADDR
// if result > 1 then
39221: LD_VAR 0 2
39225: PUSH
39226: LD_INT 1
39228: GREATER
39229: IFFALSE 39341
// for i = 2 to result do
39231: LD_ADDR_VAR 0 3
39235: PUSH
39236: DOUBLE
39237: LD_INT 2
39239: DEC
39240: ST_TO_ADDR
39241: LD_VAR 0 2
39245: PUSH
39246: FOR_TO
39247: IFFALSE 39339
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39249: LD_ADDR_VAR 0 4
39253: PUSH
39254: LD_VAR 0 2
39258: PUSH
39259: LD_VAR 0 3
39263: ARRAY
39264: PPUSH
39265: LD_INT 3
39267: PPUSH
39268: CALL_OW 259
39272: PUSH
39273: LD_VAR 0 2
39277: PUSH
39278: LD_VAR 0 3
39282: ARRAY
39283: PPUSH
39284: CALL_OW 432
39288: MINUS
39289: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39290: LD_VAR 0 4
39294: PUSH
39295: LD_VAR 0 5
39299: PPUSH
39300: LD_INT 3
39302: PPUSH
39303: CALL_OW 259
39307: PUSH
39308: LD_VAR 0 5
39312: PPUSH
39313: CALL_OW 432
39317: MINUS
39318: GREATEREQUAL
39319: IFFALSE 39337
// mech := result [ i ] ;
39321: LD_ADDR_VAR 0 5
39325: PUSH
39326: LD_VAR 0 2
39330: PUSH
39331: LD_VAR 0 3
39335: ARRAY
39336: ST_TO_ADDR
// end ;
39337: GO 39246
39339: POP
39340: POP
// ComLinkTo ( vehicle , mech ) ;
39341: LD_VAR 0 1
39345: PPUSH
39346: LD_VAR 0 5
39350: PPUSH
39351: CALL_OW 135
// end ;
39355: LD_VAR 0 2
39359: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39360: LD_INT 0
39362: PPUSH
39363: PPUSH
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
39370: PPUSH
39371: PPUSH
39372: PPUSH
39373: PPUSH
39374: PPUSH
// result := [ ] ;
39375: LD_ADDR_VAR 0 7
39379: PUSH
39380: EMPTY
39381: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39382: LD_VAR 0 1
39386: PPUSH
39387: CALL_OW 266
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: IN
39402: NOT
39403: IFFALSE 39407
// exit ;
39405: GO 41041
// if name then
39407: LD_VAR 0 3
39411: IFFALSE 39427
// SetBName ( base_dep , name ) ;
39413: LD_VAR 0 1
39417: PPUSH
39418: LD_VAR 0 3
39422: PPUSH
39423: CALL_OW 500
// base := GetBase ( base_dep ) ;
39427: LD_ADDR_VAR 0 15
39431: PUSH
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 274
39441: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39442: LD_ADDR_VAR 0 16
39446: PUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 255
39456: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39457: LD_ADDR_VAR 0 17
39461: PUSH
39462: LD_VAR 0 1
39466: PPUSH
39467: CALL_OW 248
39471: ST_TO_ADDR
// if sources then
39472: LD_VAR 0 5
39476: IFFALSE 39523
// for i = 1 to 3 do
39478: LD_ADDR_VAR 0 8
39482: PUSH
39483: DOUBLE
39484: LD_INT 1
39486: DEC
39487: ST_TO_ADDR
39488: LD_INT 3
39490: PUSH
39491: FOR_TO
39492: IFFALSE 39521
// AddResourceType ( base , i , sources [ i ] ) ;
39494: LD_VAR 0 15
39498: PPUSH
39499: LD_VAR 0 8
39503: PPUSH
39504: LD_VAR 0 5
39508: PUSH
39509: LD_VAR 0 8
39513: ARRAY
39514: PPUSH
39515: CALL_OW 276
39519: GO 39491
39521: POP
39522: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39523: LD_ADDR_VAR 0 18
39527: PUSH
39528: LD_VAR 0 15
39532: PPUSH
39533: LD_VAR 0 2
39537: PPUSH
39538: LD_INT 1
39540: PPUSH
39541: CALL 38783 0 3
39545: ST_TO_ADDR
// InitHc ;
39546: CALL_OW 19
// InitUc ;
39550: CALL_OW 18
// uc_side := side ;
39554: LD_ADDR_OWVAR 20
39558: PUSH
39559: LD_VAR 0 16
39563: ST_TO_ADDR
// uc_nation := nation ;
39564: LD_ADDR_OWVAR 21
39568: PUSH
39569: LD_VAR 0 17
39573: ST_TO_ADDR
// if buildings then
39574: LD_VAR 0 18
39578: IFFALSE 40900
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39580: LD_ADDR_VAR 0 19
39584: PUSH
39585: LD_VAR 0 18
39589: PPUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 30
39595: PUSH
39596: LD_INT 29
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 30
39605: PUSH
39606: LD_INT 30
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: PPUSH
39618: CALL_OW 72
39622: ST_TO_ADDR
// if tmp then
39623: LD_VAR 0 19
39627: IFFALSE 39675
// for i in tmp do
39629: LD_ADDR_VAR 0 8
39633: PUSH
39634: LD_VAR 0 19
39638: PUSH
39639: FOR_IN
39640: IFFALSE 39673
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39642: LD_VAR 0 8
39646: PPUSH
39647: CALL_OW 250
39651: PPUSH
39652: LD_VAR 0 8
39656: PPUSH
39657: CALL_OW 251
39661: PPUSH
39662: LD_VAR 0 16
39666: PPUSH
39667: CALL_OW 441
39671: GO 39639
39673: POP
39674: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39675: LD_VAR 0 18
39679: PPUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 30
39685: PUSH
39686: LD_INT 32
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 30
39695: PUSH
39696: LD_INT 33
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: LIST
39707: PPUSH
39708: CALL_OW 72
39712: IFFALSE 39800
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39714: LD_ADDR_VAR 0 8
39718: PUSH
39719: LD_VAR 0 18
39723: PPUSH
39724: LD_INT 2
39726: PUSH
39727: LD_INT 30
39729: PUSH
39730: LD_INT 32
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 30
39739: PUSH
39740: LD_INT 33
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: PPUSH
39752: CALL_OW 72
39756: PUSH
39757: FOR_IN
39758: IFFALSE 39798
// begin if not GetBWeapon ( i ) then
39760: LD_VAR 0 8
39764: PPUSH
39765: CALL_OW 269
39769: NOT
39770: IFFALSE 39796
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39772: LD_VAR 0 8
39776: PPUSH
39777: LD_VAR 0 8
39781: PPUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: CALL 41046 0 2
39791: PPUSH
39792: CALL_OW 431
// end ;
39796: GO 39757
39798: POP
39799: POP
// end ; for i = 1 to personel do
39800: LD_ADDR_VAR 0 8
39804: PUSH
39805: DOUBLE
39806: LD_INT 1
39808: DEC
39809: ST_TO_ADDR
39810: LD_VAR 0 6
39814: PUSH
39815: FOR_TO
39816: IFFALSE 40880
// begin if i > 4 then
39818: LD_VAR 0 8
39822: PUSH
39823: LD_INT 4
39825: GREATER
39826: IFFALSE 39830
// break ;
39828: GO 40880
// case i of 1 :
39830: LD_VAR 0 8
39834: PUSH
39835: LD_INT 1
39837: DOUBLE
39838: EQUAL
39839: IFTRUE 39843
39841: GO 39923
39843: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39844: LD_ADDR_VAR 0 12
39848: PUSH
39849: LD_VAR 0 18
39853: PPUSH
39854: LD_INT 22
39856: PUSH
39857: LD_VAR 0 16
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 58
39868: PUSH
39869: EMPTY
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 30
39877: PUSH
39878: LD_INT 32
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 30
39887: PUSH
39888: LD_INT 4
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 30
39897: PUSH
39898: LD_INT 5
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: LIST
39915: PPUSH
39916: CALL_OW 72
39920: ST_TO_ADDR
39921: GO 40145
39923: LD_INT 2
39925: DOUBLE
39926: EQUAL
39927: IFTRUE 39931
39929: GO 39993
39931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39932: LD_ADDR_VAR 0 12
39936: PUSH
39937: LD_VAR 0 18
39941: PPUSH
39942: LD_INT 22
39944: PUSH
39945: LD_VAR 0 16
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 30
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 30
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PPUSH
39986: CALL_OW 72
39990: ST_TO_ADDR
39991: GO 40145
39993: LD_INT 3
39995: DOUBLE
39996: EQUAL
39997: IFTRUE 40001
39999: GO 40063
40001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40002: LD_ADDR_VAR 0 12
40006: PUSH
40007: LD_VAR 0 18
40011: PPUSH
40012: LD_INT 22
40014: PUSH
40015: LD_VAR 0 16
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: LD_INT 30
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 30
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PPUSH
40056: CALL_OW 72
40060: ST_TO_ADDR
40061: GO 40145
40063: LD_INT 4
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40071
40069: GO 40144
40071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40072: LD_ADDR_VAR 0 12
40076: PUSH
40077: LD_VAR 0 18
40081: PPUSH
40082: LD_INT 22
40084: PUSH
40085: LD_VAR 0 16
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: LD_INT 30
40099: PUSH
40100: LD_INT 6
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 30
40109: PUSH
40110: LD_INT 7
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 30
40119: PUSH
40120: LD_INT 8
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PPUSH
40137: CALL_OW 72
40141: ST_TO_ADDR
40142: GO 40145
40144: POP
// if i = 1 then
40145: LD_VAR 0 8
40149: PUSH
40150: LD_INT 1
40152: EQUAL
40153: IFFALSE 40264
// begin tmp := [ ] ;
40155: LD_ADDR_VAR 0 19
40159: PUSH
40160: EMPTY
40161: ST_TO_ADDR
// for j in f do
40162: LD_ADDR_VAR 0 9
40166: PUSH
40167: LD_VAR 0 12
40171: PUSH
40172: FOR_IN
40173: IFFALSE 40246
// if GetBType ( j ) = b_bunker then
40175: LD_VAR 0 9
40179: PPUSH
40180: CALL_OW 266
40184: PUSH
40185: LD_INT 32
40187: EQUAL
40188: IFFALSE 40215
// tmp := Insert ( tmp , 1 , j ) else
40190: LD_ADDR_VAR 0 19
40194: PUSH
40195: LD_VAR 0 19
40199: PPUSH
40200: LD_INT 1
40202: PPUSH
40203: LD_VAR 0 9
40207: PPUSH
40208: CALL_OW 2
40212: ST_TO_ADDR
40213: GO 40244
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40215: LD_ADDR_VAR 0 19
40219: PUSH
40220: LD_VAR 0 19
40224: PPUSH
40225: LD_VAR 0 19
40229: PUSH
40230: LD_INT 1
40232: PLUS
40233: PPUSH
40234: LD_VAR 0 9
40238: PPUSH
40239: CALL_OW 2
40243: ST_TO_ADDR
40244: GO 40172
40246: POP
40247: POP
// if tmp then
40248: LD_VAR 0 19
40252: IFFALSE 40264
// f := tmp ;
40254: LD_ADDR_VAR 0 12
40258: PUSH
40259: LD_VAR 0 19
40263: ST_TO_ADDR
// end ; x := personel [ i ] ;
40264: LD_ADDR_VAR 0 13
40268: PUSH
40269: LD_VAR 0 6
40273: PUSH
40274: LD_VAR 0 8
40278: ARRAY
40279: ST_TO_ADDR
// if x = - 1 then
40280: LD_VAR 0 13
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: EQUAL
40289: IFFALSE 40498
// begin for j in f do
40291: LD_ADDR_VAR 0 9
40295: PUSH
40296: LD_VAR 0 12
40300: PUSH
40301: FOR_IN
40302: IFFALSE 40494
// repeat InitHc ;
40304: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40308: LD_VAR 0 9
40312: PPUSH
40313: CALL_OW 266
40317: PUSH
40318: LD_INT 5
40320: EQUAL
40321: IFFALSE 40391
// begin if UnitsInside ( j ) < 3 then
40323: LD_VAR 0 9
40327: PPUSH
40328: CALL_OW 313
40332: PUSH
40333: LD_INT 3
40335: LESS
40336: IFFALSE 40372
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40338: LD_INT 0
40340: PPUSH
40341: LD_INT 5
40343: PUSH
40344: LD_INT 8
40346: PUSH
40347: LD_INT 9
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: PUSH
40355: LD_VAR 0 17
40359: ARRAY
40360: PPUSH
40361: LD_VAR 0 4
40365: PPUSH
40366: CALL_OW 380
40370: GO 40389
// PrepareHuman ( false , i , skill ) ;
40372: LD_INT 0
40374: PPUSH
40375: LD_VAR 0 8
40379: PPUSH
40380: LD_VAR 0 4
40384: PPUSH
40385: CALL_OW 380
// end else
40389: GO 40408
// PrepareHuman ( false , i , skill ) ;
40391: LD_INT 0
40393: PPUSH
40394: LD_VAR 0 8
40398: PPUSH
40399: LD_VAR 0 4
40403: PPUSH
40404: CALL_OW 380
// un := CreateHuman ;
40408: LD_ADDR_VAR 0 14
40412: PUSH
40413: CALL_OW 44
40417: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40418: LD_ADDR_VAR 0 7
40422: PUSH
40423: LD_VAR 0 7
40427: PPUSH
40428: LD_INT 1
40430: PPUSH
40431: LD_VAR 0 14
40435: PPUSH
40436: CALL_OW 2
40440: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40441: LD_VAR 0 14
40445: PPUSH
40446: LD_VAR 0 9
40450: PPUSH
40451: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40455: LD_VAR 0 9
40459: PPUSH
40460: CALL_OW 313
40464: PUSH
40465: LD_INT 6
40467: EQUAL
40468: PUSH
40469: LD_VAR 0 9
40473: PPUSH
40474: CALL_OW 266
40478: PUSH
40479: LD_INT 32
40481: PUSH
40482: LD_INT 31
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: IN
40489: OR
40490: IFFALSE 40304
40492: GO 40301
40494: POP
40495: POP
// end else
40496: GO 40878
// for j = 1 to x do
40498: LD_ADDR_VAR 0 9
40502: PUSH
40503: DOUBLE
40504: LD_INT 1
40506: DEC
40507: ST_TO_ADDR
40508: LD_VAR 0 13
40512: PUSH
40513: FOR_TO
40514: IFFALSE 40876
// begin InitHc ;
40516: CALL_OW 19
// if not f then
40520: LD_VAR 0 12
40524: NOT
40525: IFFALSE 40614
// begin PrepareHuman ( false , i , skill ) ;
40527: LD_INT 0
40529: PPUSH
40530: LD_VAR 0 8
40534: PPUSH
40535: LD_VAR 0 4
40539: PPUSH
40540: CALL_OW 380
// un := CreateHuman ;
40544: LD_ADDR_VAR 0 14
40548: PUSH
40549: CALL_OW 44
40553: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40554: LD_ADDR_VAR 0 7
40558: PUSH
40559: LD_VAR 0 7
40563: PPUSH
40564: LD_INT 1
40566: PPUSH
40567: LD_VAR 0 14
40571: PPUSH
40572: CALL_OW 2
40576: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40577: LD_VAR 0 14
40581: PPUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: CALL_OW 250
40591: PPUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 251
40601: PPUSH
40602: LD_INT 10
40604: PPUSH
40605: LD_INT 0
40607: PPUSH
40608: CALL_OW 50
// continue ;
40612: GO 40513
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40614: LD_VAR 0 12
40618: PUSH
40619: LD_INT 1
40621: ARRAY
40622: PPUSH
40623: CALL_OW 313
40627: PUSH
40628: LD_VAR 0 12
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: PPUSH
40637: CALL_OW 266
40641: PUSH
40642: LD_INT 32
40644: PUSH
40645: LD_INT 31
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: IN
40652: AND
40653: PUSH
40654: LD_VAR 0 12
40658: PUSH
40659: LD_INT 1
40661: ARRAY
40662: PPUSH
40663: CALL_OW 313
40667: PUSH
40668: LD_INT 6
40670: EQUAL
40671: OR
40672: IFFALSE 40692
// f := Delete ( f , 1 ) ;
40674: LD_ADDR_VAR 0 12
40678: PUSH
40679: LD_VAR 0 12
40683: PPUSH
40684: LD_INT 1
40686: PPUSH
40687: CALL_OW 3
40691: ST_TO_ADDR
// if not f then
40692: LD_VAR 0 12
40696: NOT
40697: IFFALSE 40715
// begin x := x + 2 ;
40699: LD_ADDR_VAR 0 13
40703: PUSH
40704: LD_VAR 0 13
40708: PUSH
40709: LD_INT 2
40711: PLUS
40712: ST_TO_ADDR
// continue ;
40713: GO 40513
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40715: LD_VAR 0 12
40719: PUSH
40720: LD_INT 1
40722: ARRAY
40723: PPUSH
40724: CALL_OW 266
40728: PUSH
40729: LD_INT 5
40731: EQUAL
40732: IFFALSE 40806
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40734: LD_VAR 0 12
40738: PUSH
40739: LD_INT 1
40741: ARRAY
40742: PPUSH
40743: CALL_OW 313
40747: PUSH
40748: LD_INT 3
40750: LESS
40751: IFFALSE 40787
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40753: LD_INT 0
40755: PPUSH
40756: LD_INT 5
40758: PUSH
40759: LD_INT 8
40761: PUSH
40762: LD_INT 9
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: LD_VAR 0 17
40774: ARRAY
40775: PPUSH
40776: LD_VAR 0 4
40780: PPUSH
40781: CALL_OW 380
40785: GO 40804
// PrepareHuman ( false , i , skill ) ;
40787: LD_INT 0
40789: PPUSH
40790: LD_VAR 0 8
40794: PPUSH
40795: LD_VAR 0 4
40799: PPUSH
40800: CALL_OW 380
// end else
40804: GO 40823
// PrepareHuman ( false , i , skill ) ;
40806: LD_INT 0
40808: PPUSH
40809: LD_VAR 0 8
40813: PPUSH
40814: LD_VAR 0 4
40818: PPUSH
40819: CALL_OW 380
// un := CreateHuman ;
40823: LD_ADDR_VAR 0 14
40827: PUSH
40828: CALL_OW 44
40832: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40833: LD_ADDR_VAR 0 7
40837: PUSH
40838: LD_VAR 0 7
40842: PPUSH
40843: LD_INT 1
40845: PPUSH
40846: LD_VAR 0 14
40850: PPUSH
40851: CALL_OW 2
40855: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40856: LD_VAR 0 14
40860: PPUSH
40861: LD_VAR 0 12
40865: PUSH
40866: LD_INT 1
40868: ARRAY
40869: PPUSH
40870: CALL_OW 52
// end ;
40874: GO 40513
40876: POP
40877: POP
// end ;
40878: GO 39815
40880: POP
40881: POP
// result := result ^ buildings ;
40882: LD_ADDR_VAR 0 7
40886: PUSH
40887: LD_VAR 0 7
40891: PUSH
40892: LD_VAR 0 18
40896: ADD
40897: ST_TO_ADDR
// end else
40898: GO 41041
// begin for i = 1 to personel do
40900: LD_ADDR_VAR 0 8
40904: PUSH
40905: DOUBLE
40906: LD_INT 1
40908: DEC
40909: ST_TO_ADDR
40910: LD_VAR 0 6
40914: PUSH
40915: FOR_TO
40916: IFFALSE 41039
// begin if i > 4 then
40918: LD_VAR 0 8
40922: PUSH
40923: LD_INT 4
40925: GREATER
40926: IFFALSE 40930
// break ;
40928: GO 41039
// x := personel [ i ] ;
40930: LD_ADDR_VAR 0 13
40934: PUSH
40935: LD_VAR 0 6
40939: PUSH
40940: LD_VAR 0 8
40944: ARRAY
40945: ST_TO_ADDR
// if x = - 1 then
40946: LD_VAR 0 13
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: EQUAL
40955: IFFALSE 40959
// continue ;
40957: GO 40915
// PrepareHuman ( false , i , skill ) ;
40959: LD_INT 0
40961: PPUSH
40962: LD_VAR 0 8
40966: PPUSH
40967: LD_VAR 0 4
40971: PPUSH
40972: CALL_OW 380
// un := CreateHuman ;
40976: LD_ADDR_VAR 0 14
40980: PUSH
40981: CALL_OW 44
40985: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40986: LD_VAR 0 14
40990: PPUSH
40991: LD_VAR 0 1
40995: PPUSH
40996: CALL_OW 250
41000: PPUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 251
41010: PPUSH
41011: LD_INT 10
41013: PPUSH
41014: LD_INT 0
41016: PPUSH
41017: CALL_OW 50
// result := result ^ un ;
41021: LD_ADDR_VAR 0 7
41025: PUSH
41026: LD_VAR 0 7
41030: PUSH
41031: LD_VAR 0 14
41035: ADD
41036: ST_TO_ADDR
// end ;
41037: GO 40915
41039: POP
41040: POP
// end ; end ;
41041: LD_VAR 0 7
41045: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41046: LD_INT 0
41048: PPUSH
41049: PPUSH
41050: PPUSH
41051: PPUSH
41052: PPUSH
41053: PPUSH
41054: PPUSH
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
// result := false ;
41064: LD_ADDR_VAR 0 3
41068: PUSH
41069: LD_INT 0
41071: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41072: LD_VAR 0 1
41076: NOT
41077: PUSH
41078: LD_VAR 0 1
41082: PPUSH
41083: CALL_OW 266
41087: PUSH
41088: LD_INT 32
41090: PUSH
41091: LD_INT 33
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: IN
41098: NOT
41099: OR
41100: IFFALSE 41104
// exit ;
41102: GO 42243
// nat := GetNation ( tower ) ;
41104: LD_ADDR_VAR 0 12
41108: PUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: CALL_OW 248
41118: ST_TO_ADDR
// side := GetSide ( tower ) ;
41119: LD_ADDR_VAR 0 16
41123: PUSH
41124: LD_VAR 0 1
41128: PPUSH
41129: CALL_OW 255
41133: ST_TO_ADDR
// x := GetX ( tower ) ;
41134: LD_ADDR_VAR 0 10
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: CALL_OW 250
41148: ST_TO_ADDR
// y := GetY ( tower ) ;
41149: LD_ADDR_VAR 0 11
41153: PUSH
41154: LD_VAR 0 1
41158: PPUSH
41159: CALL_OW 251
41163: ST_TO_ADDR
// if not x or not y then
41164: LD_VAR 0 10
41168: NOT
41169: PUSH
41170: LD_VAR 0 11
41174: NOT
41175: OR
41176: IFFALSE 41180
// exit ;
41178: GO 42243
// weapon := 0 ;
41180: LD_ADDR_VAR 0 18
41184: PUSH
41185: LD_INT 0
41187: ST_TO_ADDR
// fac_list := [ ] ;
41188: LD_ADDR_VAR 0 17
41192: PUSH
41193: EMPTY
41194: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41195: LD_ADDR_VAR 0 6
41199: PUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: CALL_OW 274
41209: PPUSH
41210: LD_VAR 0 2
41214: PPUSH
41215: LD_INT 0
41217: PPUSH
41218: CALL 38783 0 3
41222: PPUSH
41223: LD_INT 30
41225: PUSH
41226: LD_INT 3
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PPUSH
41233: CALL_OW 72
41237: ST_TO_ADDR
// if not factories then
41238: LD_VAR 0 6
41242: NOT
41243: IFFALSE 41247
// exit ;
41245: GO 42243
// for i in factories do
41247: LD_ADDR_VAR 0 8
41251: PUSH
41252: LD_VAR 0 6
41256: PUSH
41257: FOR_IN
41258: IFFALSE 41283
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41260: LD_ADDR_VAR 0 17
41264: PUSH
41265: LD_VAR 0 17
41269: PUSH
41270: LD_VAR 0 8
41274: PPUSH
41275: CALL_OW 478
41279: UNION
41280: ST_TO_ADDR
41281: GO 41257
41283: POP
41284: POP
// if not fac_list then
41285: LD_VAR 0 17
41289: NOT
41290: IFFALSE 41294
// exit ;
41292: GO 42243
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41294: LD_ADDR_VAR 0 5
41298: PUSH
41299: LD_INT 4
41301: PUSH
41302: LD_INT 5
41304: PUSH
41305: LD_INT 9
41307: PUSH
41308: LD_INT 10
41310: PUSH
41311: LD_INT 6
41313: PUSH
41314: LD_INT 7
41316: PUSH
41317: LD_INT 11
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 27
41331: PUSH
41332: LD_INT 28
41334: PUSH
41335: LD_INT 26
41337: PUSH
41338: LD_INT 30
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 43
41349: PUSH
41350: LD_INT 44
41352: PUSH
41353: LD_INT 46
41355: PUSH
41356: LD_INT 45
41358: PUSH
41359: LD_INT 47
41361: PUSH
41362: LD_INT 49
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: PUSH
41378: LD_VAR 0 12
41382: ARRAY
41383: ST_TO_ADDR
// for i in list do
41384: LD_ADDR_VAR 0 8
41388: PUSH
41389: LD_VAR 0 5
41393: PUSH
41394: FOR_IN
41395: IFFALSE 41428
// if not i in fac_list then
41397: LD_VAR 0 8
41401: PUSH
41402: LD_VAR 0 17
41406: IN
41407: NOT
41408: IFFALSE 41426
// list := list diff i ;
41410: LD_ADDR_VAR 0 5
41414: PUSH
41415: LD_VAR 0 5
41419: PUSH
41420: LD_VAR 0 8
41424: DIFF
41425: ST_TO_ADDR
41426: GO 41394
41428: POP
41429: POP
// if not list then
41430: LD_VAR 0 5
41434: NOT
41435: IFFALSE 41439
// exit ;
41437: GO 42243
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41439: LD_VAR 0 12
41443: PUSH
41444: LD_INT 3
41446: EQUAL
41447: PUSH
41448: LD_INT 49
41450: PUSH
41451: LD_VAR 0 5
41455: IN
41456: AND
41457: PUSH
41458: LD_INT 31
41460: PPUSH
41461: LD_VAR 0 16
41465: PPUSH
41466: CALL_OW 321
41470: PUSH
41471: LD_INT 2
41473: EQUAL
41474: AND
41475: IFFALSE 41535
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41477: LD_INT 22
41479: PUSH
41480: LD_VAR 0 16
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 35
41491: PUSH
41492: LD_INT 49
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 91
41501: PUSH
41502: LD_VAR 0 1
41506: PUSH
41507: LD_INT 10
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: PPUSH
41520: CALL_OW 69
41524: NOT
41525: IFFALSE 41535
// weapon := ru_time_lapser ;
41527: LD_ADDR_VAR 0 18
41531: PUSH
41532: LD_INT 49
41534: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41535: LD_VAR 0 12
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: IN
41550: PUSH
41551: LD_INT 11
41553: PUSH
41554: LD_VAR 0 5
41558: IN
41559: PUSH
41560: LD_INT 30
41562: PUSH
41563: LD_VAR 0 5
41567: IN
41568: OR
41569: AND
41570: PUSH
41571: LD_INT 6
41573: PPUSH
41574: LD_VAR 0 16
41578: PPUSH
41579: CALL_OW 321
41583: PUSH
41584: LD_INT 2
41586: EQUAL
41587: AND
41588: IFFALSE 41753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41590: LD_INT 22
41592: PUSH
41593: LD_VAR 0 16
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 35
41607: PUSH
41608: LD_INT 11
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 35
41617: PUSH
41618: LD_INT 30
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 91
41632: PUSH
41633: LD_VAR 0 1
41637: PUSH
41638: LD_INT 18
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: PPUSH
41651: CALL_OW 69
41655: NOT
41656: PUSH
41657: LD_INT 22
41659: PUSH
41660: LD_VAR 0 16
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 30
41674: PUSH
41675: LD_INT 32
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 30
41684: PUSH
41685: LD_INT 33
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 91
41699: PUSH
41700: LD_VAR 0 1
41704: PUSH
41705: LD_INT 12
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: PUSH
41718: EMPTY
41719: LIST
41720: PPUSH
41721: CALL_OW 69
41725: PUSH
41726: LD_INT 2
41728: GREATER
41729: AND
41730: IFFALSE 41753
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41732: LD_ADDR_VAR 0 18
41736: PUSH
41737: LD_INT 11
41739: PUSH
41740: LD_INT 30
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_VAR 0 12
41751: ARRAY
41752: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41753: LD_VAR 0 18
41757: NOT
41758: PUSH
41759: LD_INT 40
41761: PPUSH
41762: LD_VAR 0 16
41766: PPUSH
41767: CALL_OW 321
41771: PUSH
41772: LD_INT 2
41774: EQUAL
41775: AND
41776: PUSH
41777: LD_INT 7
41779: PUSH
41780: LD_VAR 0 5
41784: IN
41785: PUSH
41786: LD_INT 28
41788: PUSH
41789: LD_VAR 0 5
41793: IN
41794: OR
41795: PUSH
41796: LD_INT 45
41798: PUSH
41799: LD_VAR 0 5
41803: IN
41804: OR
41805: AND
41806: IFFALSE 42060
// begin hex := GetHexInfo ( x , y ) ;
41808: LD_ADDR_VAR 0 4
41812: PUSH
41813: LD_VAR 0 10
41817: PPUSH
41818: LD_VAR 0 11
41822: PPUSH
41823: CALL_OW 546
41827: ST_TO_ADDR
// if hex [ 1 ] then
41828: LD_VAR 0 4
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: IFFALSE 41840
// exit ;
41838: GO 42243
// height := hex [ 2 ] ;
41840: LD_ADDR_VAR 0 15
41844: PUSH
41845: LD_VAR 0 4
41849: PUSH
41850: LD_INT 2
41852: ARRAY
41853: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41854: LD_ADDR_VAR 0 14
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: LD_INT 5
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// for i in tmp do
41877: LD_ADDR_VAR 0 8
41881: PUSH
41882: LD_VAR 0 14
41886: PUSH
41887: FOR_IN
41888: IFFALSE 42058
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41890: LD_ADDR_VAR 0 9
41894: PUSH
41895: LD_VAR 0 10
41899: PPUSH
41900: LD_VAR 0 8
41904: PPUSH
41905: LD_INT 5
41907: PPUSH
41908: CALL_OW 272
41912: PUSH
41913: LD_VAR 0 11
41917: PPUSH
41918: LD_VAR 0 8
41922: PPUSH
41923: LD_INT 5
41925: PPUSH
41926: CALL_OW 273
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41935: LD_VAR 0 9
41939: PUSH
41940: LD_INT 1
41942: ARRAY
41943: PPUSH
41944: LD_VAR 0 9
41948: PUSH
41949: LD_INT 2
41951: ARRAY
41952: PPUSH
41953: CALL_OW 488
41957: IFFALSE 42056
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41959: LD_ADDR_VAR 0 4
41963: PUSH
41964: LD_VAR 0 9
41968: PUSH
41969: LD_INT 1
41971: ARRAY
41972: PPUSH
41973: LD_VAR 0 9
41977: PUSH
41978: LD_INT 2
41980: ARRAY
41981: PPUSH
41982: CALL_OW 546
41986: ST_TO_ADDR
// if hex [ 1 ] then
41987: LD_VAR 0 4
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: IFFALSE 41999
// continue ;
41997: GO 41887
// h := hex [ 2 ] ;
41999: LD_ADDR_VAR 0 13
42003: PUSH
42004: LD_VAR 0 4
42008: PUSH
42009: LD_INT 2
42011: ARRAY
42012: ST_TO_ADDR
// if h + 7 < height then
42013: LD_VAR 0 13
42017: PUSH
42018: LD_INT 7
42020: PLUS
42021: PUSH
42022: LD_VAR 0 15
42026: LESS
42027: IFFALSE 42056
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42029: LD_ADDR_VAR 0 18
42033: PUSH
42034: LD_INT 7
42036: PUSH
42037: LD_INT 28
42039: PUSH
42040: LD_INT 45
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: LIST
42047: PUSH
42048: LD_VAR 0 12
42052: ARRAY
42053: ST_TO_ADDR
// break ;
42054: GO 42058
// end ; end ; end ;
42056: GO 41887
42058: POP
42059: POP
// end ; if not weapon then
42060: LD_VAR 0 18
42064: NOT
42065: IFFALSE 42125
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42067: LD_ADDR_VAR 0 5
42071: PUSH
42072: LD_VAR 0 5
42076: PUSH
42077: LD_INT 11
42079: PUSH
42080: LD_INT 30
42082: PUSH
42083: LD_INT 49
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: DIFF
42091: ST_TO_ADDR
// if not list then
42092: LD_VAR 0 5
42096: NOT
42097: IFFALSE 42101
// exit ;
42099: GO 42243
// weapon := list [ rand ( 1 , list ) ] ;
42101: LD_ADDR_VAR 0 18
42105: PUSH
42106: LD_VAR 0 5
42110: PUSH
42111: LD_INT 1
42113: PPUSH
42114: LD_VAR 0 5
42118: PPUSH
42119: CALL_OW 12
42123: ARRAY
42124: ST_TO_ADDR
// end ; if weapon then
42125: LD_VAR 0 18
42129: IFFALSE 42243
// begin tmp := CostOfWeapon ( weapon ) ;
42131: LD_ADDR_VAR 0 14
42135: PUSH
42136: LD_VAR 0 18
42140: PPUSH
42141: CALL_OW 451
42145: ST_TO_ADDR
// j := GetBase ( tower ) ;
42146: LD_ADDR_VAR 0 9
42150: PUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL_OW 274
42160: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42161: LD_VAR 0 9
42165: PPUSH
42166: LD_INT 1
42168: PPUSH
42169: CALL_OW 275
42173: PUSH
42174: LD_VAR 0 14
42178: PUSH
42179: LD_INT 1
42181: ARRAY
42182: GREATEREQUAL
42183: PUSH
42184: LD_VAR 0 9
42188: PPUSH
42189: LD_INT 2
42191: PPUSH
42192: CALL_OW 275
42196: PUSH
42197: LD_VAR 0 14
42201: PUSH
42202: LD_INT 2
42204: ARRAY
42205: GREATEREQUAL
42206: AND
42207: PUSH
42208: LD_VAR 0 9
42212: PPUSH
42213: LD_INT 3
42215: PPUSH
42216: CALL_OW 275
42220: PUSH
42221: LD_VAR 0 14
42225: PUSH
42226: LD_INT 3
42228: ARRAY
42229: GREATEREQUAL
42230: AND
42231: IFFALSE 42243
// result := weapon ;
42233: LD_ADDR_VAR 0 3
42237: PUSH
42238: LD_VAR 0 18
42242: ST_TO_ADDR
// end ; end ;
42243: LD_VAR 0 3
42247: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42248: LD_INT 0
42250: PPUSH
42251: PPUSH
// result := true ;
42252: LD_ADDR_VAR 0 3
42256: PUSH
42257: LD_INT 1
42259: ST_TO_ADDR
// if array1 = array2 then
42260: LD_VAR 0 1
42264: PUSH
42265: LD_VAR 0 2
42269: EQUAL
42270: IFFALSE 42330
// begin for i = 1 to array1 do
42272: LD_ADDR_VAR 0 4
42276: PUSH
42277: DOUBLE
42278: LD_INT 1
42280: DEC
42281: ST_TO_ADDR
42282: LD_VAR 0 1
42286: PUSH
42287: FOR_TO
42288: IFFALSE 42326
// if array1 [ i ] <> array2 [ i ] then
42290: LD_VAR 0 1
42294: PUSH
42295: LD_VAR 0 4
42299: ARRAY
42300: PUSH
42301: LD_VAR 0 2
42305: PUSH
42306: LD_VAR 0 4
42310: ARRAY
42311: NONEQUAL
42312: IFFALSE 42324
// begin result := false ;
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_INT 0
42321: ST_TO_ADDR
// break ;
42322: GO 42326
// end ;
42324: GO 42287
42326: POP
42327: POP
// end else
42328: GO 42338
// result := false ;
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_INT 0
42337: ST_TO_ADDR
// end ;
42338: LD_VAR 0 3
42342: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42343: LD_INT 0
42345: PPUSH
42346: PPUSH
// if not array1 or not array2 then
42347: LD_VAR 0 1
42351: NOT
42352: PUSH
42353: LD_VAR 0 2
42357: NOT
42358: OR
42359: IFFALSE 42363
// exit ;
42361: GO 42427
// result := true ;
42363: LD_ADDR_VAR 0 3
42367: PUSH
42368: LD_INT 1
42370: ST_TO_ADDR
// for i = 1 to array1 do
42371: LD_ADDR_VAR 0 4
42375: PUSH
42376: DOUBLE
42377: LD_INT 1
42379: DEC
42380: ST_TO_ADDR
42381: LD_VAR 0 1
42385: PUSH
42386: FOR_TO
42387: IFFALSE 42425
// if array1 [ i ] <> array2 [ i ] then
42389: LD_VAR 0 1
42393: PUSH
42394: LD_VAR 0 4
42398: ARRAY
42399: PUSH
42400: LD_VAR 0 2
42404: PUSH
42405: LD_VAR 0 4
42409: ARRAY
42410: NONEQUAL
42411: IFFALSE 42423
// begin result := false ;
42413: LD_ADDR_VAR 0 3
42417: PUSH
42418: LD_INT 0
42420: ST_TO_ADDR
// break ;
42421: GO 42425
// end ;
42423: GO 42386
42425: POP
42426: POP
// end ;
42427: LD_VAR 0 3
42431: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42432: LD_INT 0
42434: PPUSH
42435: PPUSH
42436: PPUSH
// pom := GetBase ( fac ) ;
42437: LD_ADDR_VAR 0 5
42441: PUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 274
42451: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42452: LD_ADDR_VAR 0 4
42456: PUSH
42457: LD_VAR 0 2
42461: PUSH
42462: LD_INT 1
42464: ARRAY
42465: PPUSH
42466: LD_VAR 0 2
42470: PUSH
42471: LD_INT 2
42473: ARRAY
42474: PPUSH
42475: LD_VAR 0 2
42479: PUSH
42480: LD_INT 3
42482: ARRAY
42483: PPUSH
42484: LD_VAR 0 2
42488: PUSH
42489: LD_INT 4
42491: ARRAY
42492: PPUSH
42493: CALL_OW 449
42497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_VAR 0 5
42507: PPUSH
42508: LD_INT 1
42510: PPUSH
42511: CALL_OW 275
42515: PUSH
42516: LD_VAR 0 4
42520: PUSH
42521: LD_INT 1
42523: ARRAY
42524: GREATEREQUAL
42525: PUSH
42526: LD_VAR 0 5
42530: PPUSH
42531: LD_INT 2
42533: PPUSH
42534: CALL_OW 275
42538: PUSH
42539: LD_VAR 0 4
42543: PUSH
42544: LD_INT 2
42546: ARRAY
42547: GREATEREQUAL
42548: AND
42549: PUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: LD_INT 3
42557: PPUSH
42558: CALL_OW 275
42562: PUSH
42563: LD_VAR 0 4
42567: PUSH
42568: LD_INT 3
42570: ARRAY
42571: GREATEREQUAL
42572: AND
42573: ST_TO_ADDR
// end ;
42574: LD_VAR 0 3
42578: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42579: LD_INT 0
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
// pom := GetBase ( building ) ;
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_VAR 0 1
42594: PPUSH
42595: CALL_OW 274
42599: ST_TO_ADDR
// if not pom then
42600: LD_VAR 0 3
42604: NOT
42605: IFFALSE 42609
// exit ;
42607: GO 42779
// btype := GetBType ( building ) ;
42609: LD_ADDR_VAR 0 5
42613: PUSH
42614: LD_VAR 0 1
42618: PPUSH
42619: CALL_OW 266
42623: ST_TO_ADDR
// if btype = b_armoury then
42624: LD_VAR 0 5
42628: PUSH
42629: LD_INT 4
42631: EQUAL
42632: IFFALSE 42642
// btype := b_barracks ;
42634: LD_ADDR_VAR 0 5
42638: PUSH
42639: LD_INT 5
42641: ST_TO_ADDR
// if btype = b_depot then
42642: LD_VAR 0 5
42646: PUSH
42647: LD_INT 0
42649: EQUAL
42650: IFFALSE 42660
// btype := b_warehouse ;
42652: LD_ADDR_VAR 0 5
42656: PUSH
42657: LD_INT 1
42659: ST_TO_ADDR
// if btype = b_workshop then
42660: LD_VAR 0 5
42664: PUSH
42665: LD_INT 2
42667: EQUAL
42668: IFFALSE 42678
// btype := b_factory ;
42670: LD_ADDR_VAR 0 5
42674: PUSH
42675: LD_INT 3
42677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42678: LD_ADDR_VAR 0 4
42682: PUSH
42683: LD_VAR 0 5
42687: PPUSH
42688: LD_VAR 0 1
42692: PPUSH
42693: CALL_OW 248
42697: PPUSH
42698: CALL_OW 450
42702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42703: LD_ADDR_VAR 0 2
42707: PUSH
42708: LD_VAR 0 3
42712: PPUSH
42713: LD_INT 1
42715: PPUSH
42716: CALL_OW 275
42720: PUSH
42721: LD_VAR 0 4
42725: PUSH
42726: LD_INT 1
42728: ARRAY
42729: GREATEREQUAL
42730: PUSH
42731: LD_VAR 0 3
42735: PPUSH
42736: LD_INT 2
42738: PPUSH
42739: CALL_OW 275
42743: PUSH
42744: LD_VAR 0 4
42748: PUSH
42749: LD_INT 2
42751: ARRAY
42752: GREATEREQUAL
42753: AND
42754: PUSH
42755: LD_VAR 0 3
42759: PPUSH
42760: LD_INT 3
42762: PPUSH
42763: CALL_OW 275
42767: PUSH
42768: LD_VAR 0 4
42772: PUSH
42773: LD_INT 3
42775: ARRAY
42776: GREATEREQUAL
42777: AND
42778: ST_TO_ADDR
// end ;
42779: LD_VAR 0 2
42783: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42784: LD_INT 0
42786: PPUSH
42787: PPUSH
42788: PPUSH
// pom := GetBase ( building ) ;
42789: LD_ADDR_VAR 0 4
42793: PUSH
42794: LD_VAR 0 1
42798: PPUSH
42799: CALL_OW 274
42803: ST_TO_ADDR
// if not pom then
42804: LD_VAR 0 4
42808: NOT
42809: IFFALSE 42813
// exit ;
42811: GO 42914
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42813: LD_ADDR_VAR 0 5
42817: PUSH
42818: LD_VAR 0 2
42822: PPUSH
42823: LD_VAR 0 1
42827: PPUSH
42828: CALL_OW 248
42832: PPUSH
42833: CALL_OW 450
42837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42838: LD_ADDR_VAR 0 3
42842: PUSH
42843: LD_VAR 0 4
42847: PPUSH
42848: LD_INT 1
42850: PPUSH
42851: CALL_OW 275
42855: PUSH
42856: LD_VAR 0 5
42860: PUSH
42861: LD_INT 1
42863: ARRAY
42864: GREATEREQUAL
42865: PUSH
42866: LD_VAR 0 4
42870: PPUSH
42871: LD_INT 2
42873: PPUSH
42874: CALL_OW 275
42878: PUSH
42879: LD_VAR 0 5
42883: PUSH
42884: LD_INT 2
42886: ARRAY
42887: GREATEREQUAL
42888: AND
42889: PUSH
42890: LD_VAR 0 4
42894: PPUSH
42895: LD_INT 3
42897: PPUSH
42898: CALL_OW 275
42902: PUSH
42903: LD_VAR 0 5
42907: PUSH
42908: LD_INT 3
42910: ARRAY
42911: GREATEREQUAL
42912: AND
42913: ST_TO_ADDR
// end ;
42914: LD_VAR 0 3
42918: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42919: LD_INT 0
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
// result := false ;
42932: LD_ADDR_VAR 0 8
42936: PUSH
42937: LD_INT 0
42939: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42940: LD_VAR 0 5
42944: NOT
42945: PUSH
42946: LD_VAR 0 1
42950: NOT
42951: OR
42952: PUSH
42953: LD_VAR 0 2
42957: NOT
42958: OR
42959: PUSH
42960: LD_VAR 0 3
42964: NOT
42965: OR
42966: IFFALSE 42970
// exit ;
42968: GO 43771
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42970: LD_ADDR_VAR 0 14
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: LD_VAR 0 2
42984: PPUSH
42985: LD_VAR 0 3
42989: PPUSH
42990: LD_VAR 0 4
42994: PPUSH
42995: LD_VAR 0 5
42999: PUSH
43000: LD_INT 1
43002: ARRAY
43003: PPUSH
43004: CALL_OW 248
43008: PPUSH
43009: LD_INT 0
43011: PPUSH
43012: CALL 44608 0 6
43016: ST_TO_ADDR
// if not hexes then
43017: LD_VAR 0 14
43021: NOT
43022: IFFALSE 43026
// exit ;
43024: GO 43771
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43026: LD_ADDR_VAR 0 17
43030: PUSH
43031: LD_VAR 0 5
43035: PPUSH
43036: LD_INT 22
43038: PUSH
43039: LD_VAR 0 13
43043: PPUSH
43044: CALL_OW 255
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 30
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 30
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PPUSH
43085: CALL_OW 72
43089: ST_TO_ADDR
// for i = 1 to hexes do
43090: LD_ADDR_VAR 0 9
43094: PUSH
43095: DOUBLE
43096: LD_INT 1
43098: DEC
43099: ST_TO_ADDR
43100: LD_VAR 0 14
43104: PUSH
43105: FOR_TO
43106: IFFALSE 43769
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43108: LD_ADDR_VAR 0 13
43112: PUSH
43113: LD_VAR 0 14
43117: PUSH
43118: LD_VAR 0 9
43122: ARRAY
43123: PUSH
43124: LD_INT 1
43126: ARRAY
43127: PPUSH
43128: LD_VAR 0 14
43132: PUSH
43133: LD_VAR 0 9
43137: ARRAY
43138: PUSH
43139: LD_INT 2
43141: ARRAY
43142: PPUSH
43143: CALL_OW 428
43147: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43148: LD_VAR 0 14
43152: PUSH
43153: LD_VAR 0 9
43157: ARRAY
43158: PUSH
43159: LD_INT 1
43161: ARRAY
43162: PPUSH
43163: LD_VAR 0 14
43167: PUSH
43168: LD_VAR 0 9
43172: ARRAY
43173: PUSH
43174: LD_INT 2
43176: ARRAY
43177: PPUSH
43178: CALL_OW 351
43182: PUSH
43183: LD_VAR 0 14
43187: PUSH
43188: LD_VAR 0 9
43192: ARRAY
43193: PUSH
43194: LD_INT 1
43196: ARRAY
43197: PPUSH
43198: LD_VAR 0 14
43202: PUSH
43203: LD_VAR 0 9
43207: ARRAY
43208: PUSH
43209: LD_INT 2
43211: ARRAY
43212: PPUSH
43213: CALL_OW 488
43217: NOT
43218: OR
43219: PUSH
43220: LD_VAR 0 13
43224: PPUSH
43225: CALL_OW 247
43229: PUSH
43230: LD_INT 3
43232: EQUAL
43233: OR
43234: IFFALSE 43240
// exit ;
43236: POP
43237: POP
43238: GO 43771
// if not tmp then
43240: LD_VAR 0 13
43244: NOT
43245: IFFALSE 43249
// continue ;
43247: GO 43105
// result := true ;
43249: LD_ADDR_VAR 0 8
43253: PUSH
43254: LD_INT 1
43256: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43257: LD_VAR 0 13
43261: PPUSH
43262: CALL_OW 247
43266: PUSH
43267: LD_INT 2
43269: EQUAL
43270: PUSH
43271: LD_VAR 0 13
43275: PPUSH
43276: CALL_OW 263
43280: PUSH
43281: LD_INT 1
43283: EQUAL
43284: AND
43285: IFFALSE 43449
// begin if IsDrivenBy ( tmp ) then
43287: LD_VAR 0 13
43291: PPUSH
43292: CALL_OW 311
43296: IFFALSE 43300
// continue ;
43298: GO 43105
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43300: LD_VAR 0 6
43304: PPUSH
43305: LD_INT 3
43307: PUSH
43308: LD_INT 60
43310: PUSH
43311: EMPTY
43312: LIST
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 3
43320: PUSH
43321: LD_INT 55
43323: PUSH
43324: EMPTY
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PPUSH
43335: CALL_OW 72
43339: IFFALSE 43447
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43341: LD_ADDR_VAR 0 18
43345: PUSH
43346: LD_VAR 0 6
43350: PPUSH
43351: LD_INT 3
43353: PUSH
43354: LD_INT 60
43356: PUSH
43357: EMPTY
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: LD_INT 55
43369: PUSH
43370: EMPTY
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PPUSH
43381: CALL_OW 72
43385: PUSH
43386: LD_INT 1
43388: ARRAY
43389: ST_TO_ADDR
// if IsInUnit ( driver ) then
43390: LD_VAR 0 18
43394: PPUSH
43395: CALL_OW 310
43399: IFFALSE 43410
// ComExit ( driver ) ;
43401: LD_VAR 0 18
43405: PPUSH
43406: CALL 67792 0 1
// AddComEnterUnit ( driver , tmp ) ;
43410: LD_VAR 0 18
43414: PPUSH
43415: LD_VAR 0 13
43419: PPUSH
43420: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43424: LD_VAR 0 18
43428: PPUSH
43429: LD_VAR 0 7
43433: PPUSH
43434: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43438: LD_VAR 0 18
43442: PPUSH
43443: CALL_OW 181
// end ; continue ;
43447: GO 43105
// end ; if not tmp in cleaners then
43449: LD_VAR 0 13
43453: PUSH
43454: LD_VAR 0 6
43458: IN
43459: NOT
43460: IFFALSE 43767
// begin if dep then
43462: LD_VAR 0 17
43466: IFFALSE 43602
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43468: LD_ADDR_VAR 0 16
43472: PUSH
43473: LD_VAR 0 17
43477: PUSH
43478: LD_INT 1
43480: ARRAY
43481: PPUSH
43482: CALL_OW 250
43486: PPUSH
43487: LD_VAR 0 17
43491: PUSH
43492: LD_INT 1
43494: ARRAY
43495: PPUSH
43496: CALL_OW 254
43500: PPUSH
43501: LD_INT 5
43503: PPUSH
43504: CALL_OW 272
43508: PUSH
43509: LD_VAR 0 17
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PPUSH
43518: CALL_OW 251
43522: PPUSH
43523: LD_VAR 0 17
43527: PUSH
43528: LD_INT 1
43530: ARRAY
43531: PPUSH
43532: CALL_OW 254
43536: PPUSH
43537: LD_INT 5
43539: PPUSH
43540: CALL_OW 273
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43549: LD_VAR 0 16
43553: PUSH
43554: LD_INT 1
43556: ARRAY
43557: PPUSH
43558: LD_VAR 0 16
43562: PUSH
43563: LD_INT 2
43565: ARRAY
43566: PPUSH
43567: CALL_OW 488
43571: IFFALSE 43602
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43573: LD_VAR 0 13
43577: PPUSH
43578: LD_VAR 0 16
43582: PUSH
43583: LD_INT 1
43585: ARRAY
43586: PPUSH
43587: LD_VAR 0 16
43591: PUSH
43592: LD_INT 2
43594: ARRAY
43595: PPUSH
43596: CALL_OW 111
// continue ;
43600: GO 43105
// end ; end ; r := GetDir ( tmp ) ;
43602: LD_ADDR_VAR 0 15
43606: PUSH
43607: LD_VAR 0 13
43611: PPUSH
43612: CALL_OW 254
43616: ST_TO_ADDR
// if r = 5 then
43617: LD_VAR 0 15
43621: PUSH
43622: LD_INT 5
43624: EQUAL
43625: IFFALSE 43635
// r := 0 ;
43627: LD_ADDR_VAR 0 15
43631: PUSH
43632: LD_INT 0
43634: ST_TO_ADDR
// for j = r to 5 do
43635: LD_ADDR_VAR 0 10
43639: PUSH
43640: DOUBLE
43641: LD_VAR 0 15
43645: DEC
43646: ST_TO_ADDR
43647: LD_INT 5
43649: PUSH
43650: FOR_TO
43651: IFFALSE 43765
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43653: LD_ADDR_VAR 0 11
43657: PUSH
43658: LD_VAR 0 13
43662: PPUSH
43663: CALL_OW 250
43667: PPUSH
43668: LD_VAR 0 10
43672: PPUSH
43673: LD_INT 2
43675: PPUSH
43676: CALL_OW 272
43680: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43681: LD_ADDR_VAR 0 12
43685: PUSH
43686: LD_VAR 0 13
43690: PPUSH
43691: CALL_OW 251
43695: PPUSH
43696: LD_VAR 0 10
43700: PPUSH
43701: LD_INT 2
43703: PPUSH
43704: CALL_OW 273
43708: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43709: LD_VAR 0 11
43713: PPUSH
43714: LD_VAR 0 12
43718: PPUSH
43719: CALL_OW 488
43723: PUSH
43724: LD_VAR 0 11
43728: PPUSH
43729: LD_VAR 0 12
43733: PPUSH
43734: CALL_OW 428
43738: NOT
43739: AND
43740: IFFALSE 43763
// begin ComMoveXY ( tmp , _x , _y ) ;
43742: LD_VAR 0 13
43746: PPUSH
43747: LD_VAR 0 11
43751: PPUSH
43752: LD_VAR 0 12
43756: PPUSH
43757: CALL_OW 111
// break ;
43761: GO 43765
// end ; end ;
43763: GO 43650
43765: POP
43766: POP
// end ; end ;
43767: GO 43105
43769: POP
43770: POP
// end ;
43771: LD_VAR 0 8
43775: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43776: LD_INT 0
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
// result := false ;
43788: LD_ADDR_VAR 0 6
43792: PUSH
43793: LD_INT 0
43795: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43796: LD_VAR 0 1
43800: NOT
43801: PUSH
43802: LD_VAR 0 1
43806: PPUSH
43807: CALL_OW 266
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: IN
43822: NOT
43823: OR
43824: PUSH
43825: LD_VAR 0 2
43829: NOT
43830: OR
43831: PUSH
43832: LD_VAR 0 5
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: LD_INT 3
43848: PUSH
43849: LD_INT 4
43851: PUSH
43852: LD_INT 5
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: IN
43863: NOT
43864: OR
43865: PUSH
43866: LD_VAR 0 3
43870: PPUSH
43871: LD_VAR 0 4
43875: PPUSH
43876: CALL_OW 488
43880: NOT
43881: OR
43882: IFFALSE 43886
// exit ;
43884: GO 44603
// pom := GetBase ( depot ) ;
43886: LD_ADDR_VAR 0 10
43890: PUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 274
43900: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43901: LD_ADDR_VAR 0 11
43905: PUSH
43906: LD_VAR 0 2
43910: PPUSH
43911: LD_VAR 0 1
43915: PPUSH
43916: CALL_OW 248
43920: PPUSH
43921: CALL_OW 450
43925: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43926: LD_VAR 0 10
43930: PPUSH
43931: LD_INT 1
43933: PPUSH
43934: CALL_OW 275
43938: PUSH
43939: LD_VAR 0 11
43943: PUSH
43944: LD_INT 1
43946: ARRAY
43947: GREATEREQUAL
43948: PUSH
43949: LD_VAR 0 10
43953: PPUSH
43954: LD_INT 2
43956: PPUSH
43957: CALL_OW 275
43961: PUSH
43962: LD_VAR 0 11
43966: PUSH
43967: LD_INT 2
43969: ARRAY
43970: GREATEREQUAL
43971: AND
43972: PUSH
43973: LD_VAR 0 10
43977: PPUSH
43978: LD_INT 3
43980: PPUSH
43981: CALL_OW 275
43985: PUSH
43986: LD_VAR 0 11
43990: PUSH
43991: LD_INT 3
43993: ARRAY
43994: GREATEREQUAL
43995: AND
43996: NOT
43997: IFFALSE 44001
// exit ;
43999: GO 44603
// if GetBType ( depot ) = b_depot then
44001: LD_VAR 0 1
44005: PPUSH
44006: CALL_OW 266
44010: PUSH
44011: LD_INT 0
44013: EQUAL
44014: IFFALSE 44026
// dist := 28 else
44016: LD_ADDR_VAR 0 14
44020: PUSH
44021: LD_INT 28
44023: ST_TO_ADDR
44024: GO 44034
// dist := 36 ;
44026: LD_ADDR_VAR 0 14
44030: PUSH
44031: LD_INT 36
44033: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44034: LD_VAR 0 1
44038: PPUSH
44039: LD_VAR 0 3
44043: PPUSH
44044: LD_VAR 0 4
44048: PPUSH
44049: CALL_OW 297
44053: PUSH
44054: LD_VAR 0 14
44058: GREATER
44059: IFFALSE 44063
// exit ;
44061: GO 44603
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44063: LD_ADDR_VAR 0 12
44067: PUSH
44068: LD_VAR 0 2
44072: PPUSH
44073: LD_VAR 0 3
44077: PPUSH
44078: LD_VAR 0 4
44082: PPUSH
44083: LD_VAR 0 5
44087: PPUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: CALL_OW 248
44097: PPUSH
44098: LD_INT 0
44100: PPUSH
44101: CALL 44608 0 6
44105: ST_TO_ADDR
// if not hexes then
44106: LD_VAR 0 12
44110: NOT
44111: IFFALSE 44115
// exit ;
44113: GO 44603
// hex := GetHexInfo ( x , y ) ;
44115: LD_ADDR_VAR 0 15
44119: PUSH
44120: LD_VAR 0 3
44124: PPUSH
44125: LD_VAR 0 4
44129: PPUSH
44130: CALL_OW 546
44134: ST_TO_ADDR
// if hex [ 1 ] then
44135: LD_VAR 0 15
44139: PUSH
44140: LD_INT 1
44142: ARRAY
44143: IFFALSE 44147
// exit ;
44145: GO 44603
// height := hex [ 2 ] ;
44147: LD_ADDR_VAR 0 13
44151: PUSH
44152: LD_VAR 0 15
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: ST_TO_ADDR
// for i = 1 to hexes do
44161: LD_ADDR_VAR 0 7
44165: PUSH
44166: DOUBLE
44167: LD_INT 1
44169: DEC
44170: ST_TO_ADDR
44171: LD_VAR 0 12
44175: PUSH
44176: FOR_TO
44177: IFFALSE 44507
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44179: LD_VAR 0 12
44183: PUSH
44184: LD_VAR 0 7
44188: ARRAY
44189: PUSH
44190: LD_INT 1
44192: ARRAY
44193: PPUSH
44194: LD_VAR 0 12
44198: PUSH
44199: LD_VAR 0 7
44203: ARRAY
44204: PUSH
44205: LD_INT 2
44207: ARRAY
44208: PPUSH
44209: CALL_OW 488
44213: NOT
44214: PUSH
44215: LD_VAR 0 12
44219: PUSH
44220: LD_VAR 0 7
44224: ARRAY
44225: PUSH
44226: LD_INT 1
44228: ARRAY
44229: PPUSH
44230: LD_VAR 0 12
44234: PUSH
44235: LD_VAR 0 7
44239: ARRAY
44240: PUSH
44241: LD_INT 2
44243: ARRAY
44244: PPUSH
44245: CALL_OW 428
44249: PUSH
44250: LD_INT 0
44252: GREATER
44253: OR
44254: PUSH
44255: LD_VAR 0 12
44259: PUSH
44260: LD_VAR 0 7
44264: ARRAY
44265: PUSH
44266: LD_INT 1
44268: ARRAY
44269: PPUSH
44270: LD_VAR 0 12
44274: PUSH
44275: LD_VAR 0 7
44279: ARRAY
44280: PUSH
44281: LD_INT 2
44283: ARRAY
44284: PPUSH
44285: CALL_OW 351
44289: OR
44290: IFFALSE 44296
// exit ;
44292: POP
44293: POP
44294: GO 44603
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44296: LD_ADDR_VAR 0 8
44300: PUSH
44301: LD_VAR 0 12
44305: PUSH
44306: LD_VAR 0 7
44310: ARRAY
44311: PUSH
44312: LD_INT 1
44314: ARRAY
44315: PPUSH
44316: LD_VAR 0 12
44320: PUSH
44321: LD_VAR 0 7
44325: ARRAY
44326: PUSH
44327: LD_INT 2
44329: ARRAY
44330: PPUSH
44331: CALL_OW 546
44335: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44336: LD_VAR 0 8
44340: PUSH
44341: LD_INT 1
44343: ARRAY
44344: PUSH
44345: LD_VAR 0 8
44349: PUSH
44350: LD_INT 2
44352: ARRAY
44353: PUSH
44354: LD_VAR 0 13
44358: PUSH
44359: LD_INT 2
44361: PLUS
44362: GREATER
44363: OR
44364: PUSH
44365: LD_VAR 0 8
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PUSH
44374: LD_VAR 0 13
44378: PUSH
44379: LD_INT 2
44381: MINUS
44382: LESS
44383: OR
44384: PUSH
44385: LD_VAR 0 8
44389: PUSH
44390: LD_INT 3
44392: ARRAY
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 8
44399: PUSH
44400: LD_INT 9
44402: PUSH
44403: LD_INT 10
44405: PUSH
44406: LD_INT 11
44408: PUSH
44409: LD_INT 12
44411: PUSH
44412: LD_INT 13
44414: PUSH
44415: LD_INT 16
44417: PUSH
44418: LD_INT 17
44420: PUSH
44421: LD_INT 18
44423: PUSH
44424: LD_INT 19
44426: PUSH
44427: LD_INT 20
44429: PUSH
44430: LD_INT 21
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: IN
44448: NOT
44449: OR
44450: PUSH
44451: LD_VAR 0 8
44455: PUSH
44456: LD_INT 5
44458: ARRAY
44459: NOT
44460: OR
44461: PUSH
44462: LD_VAR 0 8
44466: PUSH
44467: LD_INT 6
44469: ARRAY
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 7
44479: PUSH
44480: LD_INT 9
44482: PUSH
44483: LD_INT 10
44485: PUSH
44486: LD_INT 11
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: IN
44497: NOT
44498: OR
44499: IFFALSE 44505
// exit ;
44501: POP
44502: POP
44503: GO 44603
// end ;
44505: GO 44176
44507: POP
44508: POP
// side := GetSide ( depot ) ;
44509: LD_ADDR_VAR 0 9
44513: PUSH
44514: LD_VAR 0 1
44518: PPUSH
44519: CALL_OW 255
44523: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44524: LD_VAR 0 9
44528: PPUSH
44529: LD_VAR 0 3
44533: PPUSH
44534: LD_VAR 0 4
44538: PPUSH
44539: LD_INT 20
44541: PPUSH
44542: CALL 36937 0 4
44546: PUSH
44547: LD_INT 4
44549: ARRAY
44550: IFFALSE 44554
// exit ;
44552: GO 44603
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44554: LD_VAR 0 2
44558: PUSH
44559: LD_INT 29
44561: PUSH
44562: LD_INT 30
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: IN
44569: PUSH
44570: LD_VAR 0 3
44574: PPUSH
44575: LD_VAR 0 4
44579: PPUSH
44580: LD_VAR 0 9
44584: PPUSH
44585: CALL_OW 440
44589: NOT
44590: AND
44591: IFFALSE 44595
// exit ;
44593: GO 44603
// result := true ;
44595: LD_ADDR_VAR 0 6
44599: PUSH
44600: LD_INT 1
44602: ST_TO_ADDR
// end ;
44603: LD_VAR 0 6
44607: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44608: LD_INT 0
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
44663: PPUSH
44664: PPUSH
44665: PPUSH
44666: PPUSH
44667: PPUSH
// result = [ ] ;
44668: LD_ADDR_VAR 0 7
44672: PUSH
44673: EMPTY
44674: ST_TO_ADDR
// temp_list = [ ] ;
44675: LD_ADDR_VAR 0 9
44679: PUSH
44680: EMPTY
44681: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44682: LD_VAR 0 4
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: LD_INT 5
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: IN
44713: NOT
44714: PUSH
44715: LD_VAR 0 1
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: IN
44730: PUSH
44731: LD_VAR 0 5
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: IN
44750: NOT
44751: AND
44752: OR
44753: IFFALSE 44757
// exit ;
44755: GO 63148
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44757: LD_VAR 0 1
44761: PUSH
44762: LD_INT 6
44764: PUSH
44765: LD_INT 7
44767: PUSH
44768: LD_INT 8
44770: PUSH
44771: LD_INT 13
44773: PUSH
44774: LD_INT 12
44776: PUSH
44777: LD_INT 15
44779: PUSH
44780: LD_INT 11
44782: PUSH
44783: LD_INT 14
44785: PUSH
44786: LD_INT 10
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: IN
44800: IFFALSE 44810
// btype = b_lab ;
44802: LD_ADDR_VAR 0 1
44806: PUSH
44807: LD_INT 6
44809: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44810: LD_VAR 0 6
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: IN
44829: NOT
44830: PUSH
44831: LD_VAR 0 1
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 6
44850: PUSH
44851: LD_INT 36
44853: PUSH
44854: LD_INT 4
44856: PUSH
44857: LD_INT 5
44859: PUSH
44860: LD_INT 31
44862: PUSH
44863: LD_INT 32
44865: PUSH
44866: LD_INT 33
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: IN
44882: NOT
44883: PUSH
44884: LD_VAR 0 6
44888: PUSH
44889: LD_INT 1
44891: EQUAL
44892: AND
44893: OR
44894: PUSH
44895: LD_VAR 0 1
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: IN
44910: NOT
44911: PUSH
44912: LD_VAR 0 6
44916: PUSH
44917: LD_INT 2
44919: EQUAL
44920: AND
44921: OR
44922: IFFALSE 44932
// mode = 0 ;
44924: LD_ADDR_VAR 0 6
44928: PUSH
44929: LD_INT 0
44931: ST_TO_ADDR
// case mode of 0 :
44932: LD_VAR 0 6
44936: PUSH
44937: LD_INT 0
44939: DOUBLE
44940: EQUAL
44941: IFTRUE 44945
44943: GO 56398
44945: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44946: LD_ADDR_VAR 0 11
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 3
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 3
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45139: LD_ADDR_VAR 0 12
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 3
45296: NEG
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45335: LD_ADDR_VAR 0 13
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45534: LD_ADDR_VAR 0 14
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 3
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45730: LD_ADDR_VAR 0 15
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45923: LD_ADDR_VAR 0 16
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46116: LD_ADDR_VAR 0 17
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46346: LD_ADDR_VAR 0 18
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46576: LD_ADDR_VAR 0 19
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46806: LD_ADDR_VAR 0 20
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47036: LD_ADDR_VAR 0 21
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47266: LD_ADDR_VAR 0 22
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47496: LD_ADDR_VAR 0 23
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 3
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47776: LD_ADDR_VAR 0 24
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48052: LD_ADDR_VAR 0 25
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48326: LD_ADDR_VAR 0 26
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48602: LD_ADDR_VAR 0 27
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48882: LD_ADDR_VAR 0 28
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49164: LD_ADDR_VAR 0 29
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 3
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: NEG
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49443: LD_ADDR_VAR 0 30
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49721: LD_ADDR_VAR 0 31
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49999: LD_ADDR_VAR 0 32
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 3
50242: NEG
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50277: LD_ADDR_VAR 0 33
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50556: LD_ADDR_VAR 0 34
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50836: LD_ADDR_VAR 0 35
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50948: LD_ADDR_VAR 0 36
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51060: LD_ADDR_VAR 0 37
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51172: LD_ADDR_VAR 0 38
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51284: LD_ADDR_VAR 0 39
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51396: LD_ADDR_VAR 0 40
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51508: LD_ADDR_VAR 0 41
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: NEG
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51858: LD_ADDR_VAR 0 42
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52208: LD_ADDR_VAR 0 43
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 3
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 3
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52556: LD_ADDR_VAR 0 44
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: LD_INT 3
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: NEG
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52906: LD_ADDR_VAR 0 45
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 3
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 3
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 3
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: LD_INT 3
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53256: LD_ADDR_VAR 0 46
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 3
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 3
53552: NEG
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53604: LD_ADDR_VAR 0 47
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53755: LD_ADDR_VAR 0 48
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53902: LD_ADDR_VAR 0 49
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54046: LD_ADDR_VAR 0 50
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54190: LD_ADDR_VAR 0 51
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54337: LD_ADDR_VAR 0 52
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54488: LD_ADDR_VAR 0 53
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54718: LD_ADDR_VAR 0 54
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54948: LD_ADDR_VAR 0 55
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55178: LD_ADDR_VAR 0 56
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55408: LD_ADDR_VAR 0 57
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55638: LD_ADDR_VAR 0 58
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: LD_INT 2
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55868: LD_ADDR_VAR 0 59
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55956: LD_ADDR_VAR 0 60
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56044: LD_ADDR_VAR 0 61
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56132: LD_ADDR_VAR 0 62
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56220: LD_ADDR_VAR 0 63
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56308: LD_ADDR_VAR 0 64
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: ST_TO_ADDR
// end ; 1 :
56396: GO 62293
56398: LD_INT 1
56400: DOUBLE
56401: EQUAL
56402: IFTRUE 56406
56404: GO 59029
56406: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56407: LD_ADDR_VAR 0 11
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 3
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 3
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56451: LD_ADDR_VAR 0 12
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56492: LD_ADDR_VAR 0 13
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56532: LD_ADDR_VAR 0 14
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: LIST
56572: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56573: LD_ADDR_VAR 0 15
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: LIST
56616: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56617: LD_ADDR_VAR 0 16
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: LD_INT 3
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56663: LD_ADDR_VAR 0 17
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56707: LD_ADDR_VAR 0 18
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56748: LD_ADDR_VAR 0 19
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56788: LD_ADDR_VAR 0 20
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: LIST
56828: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56829: LD_ADDR_VAR 0 21
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56873: LD_ADDR_VAR 0 22
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56919: LD_ADDR_VAR 0 23
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 4
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 3
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56963: LD_ADDR_VAR 0 24
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 4
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57004: LD_ADDR_VAR 0 25
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57044: LD_ADDR_VAR 0 26
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 4
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57085: LD_ADDR_VAR 0 27
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57129: LD_ADDR_VAR 0 28
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 4
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57175: LD_ADDR_VAR 0 29
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 4
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 4
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 5
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 5
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 4
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 6
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 6
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 5
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57330: LD_ADDR_VAR 0 30
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 4
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 4
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 4
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 5
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 5
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 5
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 6
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 6
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57473: LD_ADDR_VAR 0 31
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 3
57490: PUSH
57491: LD_INT 3
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: LD_INT 3
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 4
57510: PUSH
57511: LD_INT 3
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: PUSH
57521: LD_INT 4
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 4
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 5
57540: PUSH
57541: LD_INT 4
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 5
57550: PUSH
57551: LD_INT 5
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 4
57560: PUSH
57561: LD_INT 5
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 6
57570: PUSH
57571: LD_INT 5
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 6
57580: PUSH
57581: LD_INT 6
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 5
57590: PUSH
57591: LD_INT 6
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57612: LD_ADDR_VAR 0 32
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 3
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 4
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 4
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 5
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 5
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 4
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 6
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 6
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 5
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57755: LD_ADDR_VAR 0 33
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 4
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 4
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 4
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 5
57841: NEG
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 5
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 5
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 6
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 6
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57910: LD_ADDR_VAR 0 34
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 4
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 4
57977: NEG
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: LD_INT 5
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 5
58001: NEG
58002: PUSH
58003: LD_INT 4
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 5
58013: NEG
58014: PUSH
58015: LD_INT 5
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 5
58025: NEG
58026: PUSH
58027: LD_INT 6
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 6
58037: NEG
58038: PUSH
58039: LD_INT 5
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 6
58049: NEG
58050: PUSH
58051: LD_INT 6
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58073: LD_ADDR_VAR 0 41
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58117: LD_ADDR_VAR 0 42
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: LIST
58157: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58158: LD_ADDR_VAR 0 43
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58198: LD_ADDR_VAR 0 44
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58239: LD_ADDR_VAR 0 45
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58283: LD_ADDR_VAR 0 46
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58329: LD_ADDR_VAR 0 47
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58362: LD_ADDR_VAR 0 48
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58393: LD_ADDR_VAR 0 49
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58422: LD_ADDR_VAR 0 50
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58451: LD_ADDR_VAR 0 51
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58482: LD_ADDR_VAR 0 52
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58515: LD_ADDR_VAR 0 53
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58559: LD_ADDR_VAR 0 54
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58600: LD_ADDR_VAR 0 55
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58640: LD_ADDR_VAR 0 56
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58681: LD_ADDR_VAR 0 57
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58725: LD_ADDR_VAR 0 58
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 3
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58771: LD_ADDR_VAR 0 59
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58815: LD_ADDR_VAR 0 60
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: LIST
58855: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58856: LD_ADDR_VAR 0 61
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58896: LD_ADDR_VAR 0 62
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58937: LD_ADDR_VAR 0 63
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: LIST
58980: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58981: LD_ADDR_VAR 0 64
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: ST_TO_ADDR
// end ; 2 :
59027: GO 62293
59029: LD_INT 2
59031: DOUBLE
59032: EQUAL
59033: IFTRUE 59037
59035: GO 62292
59037: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59038: LD_ADDR_VAR 0 29
59042: PUSH
59043: LD_INT 4
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 5
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 5
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 4
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 5
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: LD_INT 3
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 4
59158: PUSH
59159: LD_INT 3
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: LD_INT 4
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: LD_INT 4
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: LD_INT 4
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 4
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 5
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 5
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 5
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 4
59377: NEG
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: NEG
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 4
59423: NEG
59424: PUSH
59425: LD_INT 4
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 4
59435: NEG
59436: PUSH
59437: LD_INT 5
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 3
59447: NEG
59448: PUSH
59449: LD_INT 4
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 4
59471: NEG
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 5
59483: NEG
59484: PUSH
59485: LD_INT 4
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 5
59495: NEG
59496: PUSH
59497: LD_INT 5
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 5
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 5
59519: NEG
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59576: LD_ADDR_VAR 0 30
59580: PUSH
59581: LD_INT 4
59583: PUSH
59584: LD_INT 4
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 4
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 5
59603: PUSH
59604: LD_INT 4
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 5
59613: PUSH
59614: LD_INT 5
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 4
59623: PUSH
59624: LD_INT 5
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: LD_INT 5
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 4
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 4
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 5
59822: NEG
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 5
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 5
59845: NEG
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: NEG
59869: PUSH
59870: LD_INT 3
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: LD_INT 4
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: NEG
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 4
59940: NEG
59941: PUSH
59942: LD_INT 4
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 4
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 5
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 4
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 5
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 5
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60123: LD_ADDR_VAR 0 31
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 4
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 4
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 5
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 5
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: NEG
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 4
60337: NEG
60338: PUSH
60339: LD_INT 5
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: NEG
60350: PUSH
60351: LD_INT 4
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 4
60373: NEG
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 5
60385: NEG
60386: PUSH
60387: LD_INT 4
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 5
60397: NEG
60398: PUSH
60399: LD_INT 5
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: LD_INT 5
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 5
60421: NEG
60422: PUSH
60423: LD_INT 3
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 4
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 4
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 4
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 5
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 5
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 4
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 5
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60673: LD_ADDR_VAR 0 32
60677: PUSH
60678: LD_INT 4
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 4
60725: NEG
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 5
60736: NEG
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 5
60747: NEG
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 5
60759: NEG
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 4
60842: NEG
60843: PUSH
60844: LD_INT 3
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: NEG
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 4
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 4
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 5
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: LD_INT 4
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 5
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 5
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 4
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 4
61085: PUSH
61086: LD_INT 4
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 4
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 5
61105: PUSH
61106: LD_INT 4
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 5
61115: PUSH
61116: LD_INT 5
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 4
61125: PUSH
61126: LD_INT 5
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: LD_INT 4
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 5
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: PUSH
61166: LD_INT 5
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61220: LD_ADDR_VAR 0 33
61224: PUSH
61225: LD_INT 4
61227: NEG
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: LD_INT 5
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: LD_INT 4
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 4
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 5
61287: NEG
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 5
61299: NEG
61300: PUSH
61301: LD_INT 5
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: LD_INT 5
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 5
61323: NEG
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 3
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 4
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 4
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 4
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 5
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 5
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 4
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 5
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: LD_INT 3
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 3
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: LD_INT 3
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 4
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 3
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: LD_INT 3
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 4
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: LD_INT 4
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 4
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 4
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 5
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 5
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 5
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61758: LD_ADDR_VAR 0 34
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 4
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 5
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 4
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 3
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 4
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 5
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: LD_INT 3
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 5
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 4
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 4
61960: PUSH
61961: LD_INT 4
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 4
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 5
61980: PUSH
61981: LD_INT 4
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 5
61990: PUSH
61991: LD_INT 5
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: LD_INT 5
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 4
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 5
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: LD_INT 5
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 4
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 4
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 4
62143: NEG
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 4
62154: NEG
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 3
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 4
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 5
62199: NEG
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 5
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 5
62222: NEG
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// end ; end ;
62290: GO 62293
62292: POP
// case btype of b_depot , b_warehouse :
62293: LD_VAR 0 1
62297: PUSH
62298: LD_INT 0
62300: DOUBLE
62301: EQUAL
62302: IFTRUE 62312
62304: LD_INT 1
62306: DOUBLE
62307: EQUAL
62308: IFTRUE 62312
62310: GO 62513
62312: POP
// case nation of nation_american :
62313: LD_VAR 0 5
62317: PUSH
62318: LD_INT 1
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62326
62324: GO 62382
62326: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62327: LD_ADDR_VAR 0 9
62331: PUSH
62332: LD_VAR 0 11
62336: PUSH
62337: LD_VAR 0 12
62341: PUSH
62342: LD_VAR 0 13
62346: PUSH
62347: LD_VAR 0 14
62351: PUSH
62352: LD_VAR 0 15
62356: PUSH
62357: LD_VAR 0 16
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: PUSH
62370: LD_VAR 0 4
62374: PUSH
62375: LD_INT 1
62377: PLUS
62378: ARRAY
62379: ST_TO_ADDR
62380: GO 62511
62382: LD_INT 2
62384: DOUBLE
62385: EQUAL
62386: IFTRUE 62390
62388: GO 62446
62390: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62391: LD_ADDR_VAR 0 9
62395: PUSH
62396: LD_VAR 0 17
62400: PUSH
62401: LD_VAR 0 18
62405: PUSH
62406: LD_VAR 0 19
62410: PUSH
62411: LD_VAR 0 20
62415: PUSH
62416: LD_VAR 0 21
62420: PUSH
62421: LD_VAR 0 22
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: PUSH
62434: LD_VAR 0 4
62438: PUSH
62439: LD_INT 1
62441: PLUS
62442: ARRAY
62443: ST_TO_ADDR
62444: GO 62511
62446: LD_INT 3
62448: DOUBLE
62449: EQUAL
62450: IFTRUE 62454
62452: GO 62510
62454: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62455: LD_ADDR_VAR 0 9
62459: PUSH
62460: LD_VAR 0 23
62464: PUSH
62465: LD_VAR 0 24
62469: PUSH
62470: LD_VAR 0 25
62474: PUSH
62475: LD_VAR 0 26
62479: PUSH
62480: LD_VAR 0 27
62484: PUSH
62485: LD_VAR 0 28
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: PUSH
62498: LD_VAR 0 4
62502: PUSH
62503: LD_INT 1
62505: PLUS
62506: ARRAY
62507: ST_TO_ADDR
62508: GO 62511
62510: POP
62511: GO 63066
62513: LD_INT 2
62515: DOUBLE
62516: EQUAL
62517: IFTRUE 62527
62519: LD_INT 3
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62527
62525: GO 62583
62527: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62528: LD_ADDR_VAR 0 9
62532: PUSH
62533: LD_VAR 0 29
62537: PUSH
62538: LD_VAR 0 30
62542: PUSH
62543: LD_VAR 0 31
62547: PUSH
62548: LD_VAR 0 32
62552: PUSH
62553: LD_VAR 0 33
62557: PUSH
62558: LD_VAR 0 34
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: PUSH
62571: LD_VAR 0 4
62575: PUSH
62576: LD_INT 1
62578: PLUS
62579: ARRAY
62580: ST_TO_ADDR
62581: GO 63066
62583: LD_INT 16
62585: DOUBLE
62586: EQUAL
62587: IFTRUE 62645
62589: LD_INT 17
62591: DOUBLE
62592: EQUAL
62593: IFTRUE 62645
62595: LD_INT 18
62597: DOUBLE
62598: EQUAL
62599: IFTRUE 62645
62601: LD_INT 19
62603: DOUBLE
62604: EQUAL
62605: IFTRUE 62645
62607: LD_INT 22
62609: DOUBLE
62610: EQUAL
62611: IFTRUE 62645
62613: LD_INT 20
62615: DOUBLE
62616: EQUAL
62617: IFTRUE 62645
62619: LD_INT 21
62621: DOUBLE
62622: EQUAL
62623: IFTRUE 62645
62625: LD_INT 23
62627: DOUBLE
62628: EQUAL
62629: IFTRUE 62645
62631: LD_INT 24
62633: DOUBLE
62634: EQUAL
62635: IFTRUE 62645
62637: LD_INT 25
62639: DOUBLE
62640: EQUAL
62641: IFTRUE 62645
62643: GO 62701
62645: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62646: LD_ADDR_VAR 0 9
62650: PUSH
62651: LD_VAR 0 35
62655: PUSH
62656: LD_VAR 0 36
62660: PUSH
62661: LD_VAR 0 37
62665: PUSH
62666: LD_VAR 0 38
62670: PUSH
62671: LD_VAR 0 39
62675: PUSH
62676: LD_VAR 0 40
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: PUSH
62689: LD_VAR 0 4
62693: PUSH
62694: LD_INT 1
62696: PLUS
62697: ARRAY
62698: ST_TO_ADDR
62699: GO 63066
62701: LD_INT 6
62703: DOUBLE
62704: EQUAL
62705: IFTRUE 62757
62707: LD_INT 7
62709: DOUBLE
62710: EQUAL
62711: IFTRUE 62757
62713: LD_INT 8
62715: DOUBLE
62716: EQUAL
62717: IFTRUE 62757
62719: LD_INT 13
62721: DOUBLE
62722: EQUAL
62723: IFTRUE 62757
62725: LD_INT 12
62727: DOUBLE
62728: EQUAL
62729: IFTRUE 62757
62731: LD_INT 15
62733: DOUBLE
62734: EQUAL
62735: IFTRUE 62757
62737: LD_INT 11
62739: DOUBLE
62740: EQUAL
62741: IFTRUE 62757
62743: LD_INT 14
62745: DOUBLE
62746: EQUAL
62747: IFTRUE 62757
62749: LD_INT 10
62751: DOUBLE
62752: EQUAL
62753: IFTRUE 62757
62755: GO 62813
62757: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62758: LD_ADDR_VAR 0 9
62762: PUSH
62763: LD_VAR 0 41
62767: PUSH
62768: LD_VAR 0 42
62772: PUSH
62773: LD_VAR 0 43
62777: PUSH
62778: LD_VAR 0 44
62782: PUSH
62783: LD_VAR 0 45
62787: PUSH
62788: LD_VAR 0 46
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: PUSH
62801: LD_VAR 0 4
62805: PUSH
62806: LD_INT 1
62808: PLUS
62809: ARRAY
62810: ST_TO_ADDR
62811: GO 63066
62813: LD_INT 36
62815: DOUBLE
62816: EQUAL
62817: IFTRUE 62821
62819: GO 62877
62821: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62822: LD_ADDR_VAR 0 9
62826: PUSH
62827: LD_VAR 0 47
62831: PUSH
62832: LD_VAR 0 48
62836: PUSH
62837: LD_VAR 0 49
62841: PUSH
62842: LD_VAR 0 50
62846: PUSH
62847: LD_VAR 0 51
62851: PUSH
62852: LD_VAR 0 52
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: PUSH
62865: LD_VAR 0 4
62869: PUSH
62870: LD_INT 1
62872: PLUS
62873: ARRAY
62874: ST_TO_ADDR
62875: GO 63066
62877: LD_INT 4
62879: DOUBLE
62880: EQUAL
62881: IFTRUE 62903
62883: LD_INT 5
62885: DOUBLE
62886: EQUAL
62887: IFTRUE 62903
62889: LD_INT 34
62891: DOUBLE
62892: EQUAL
62893: IFTRUE 62903
62895: LD_INT 37
62897: DOUBLE
62898: EQUAL
62899: IFTRUE 62903
62901: GO 62959
62903: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62904: LD_ADDR_VAR 0 9
62908: PUSH
62909: LD_VAR 0 53
62913: PUSH
62914: LD_VAR 0 54
62918: PUSH
62919: LD_VAR 0 55
62923: PUSH
62924: LD_VAR 0 56
62928: PUSH
62929: LD_VAR 0 57
62933: PUSH
62934: LD_VAR 0 58
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: PUSH
62947: LD_VAR 0 4
62951: PUSH
62952: LD_INT 1
62954: PLUS
62955: ARRAY
62956: ST_TO_ADDR
62957: GO 63066
62959: LD_INT 31
62961: DOUBLE
62962: EQUAL
62963: IFTRUE 63009
62965: LD_INT 32
62967: DOUBLE
62968: EQUAL
62969: IFTRUE 63009
62971: LD_INT 33
62973: DOUBLE
62974: EQUAL
62975: IFTRUE 63009
62977: LD_INT 27
62979: DOUBLE
62980: EQUAL
62981: IFTRUE 63009
62983: LD_INT 26
62985: DOUBLE
62986: EQUAL
62987: IFTRUE 63009
62989: LD_INT 28
62991: DOUBLE
62992: EQUAL
62993: IFTRUE 63009
62995: LD_INT 29
62997: DOUBLE
62998: EQUAL
62999: IFTRUE 63009
63001: LD_INT 30
63003: DOUBLE
63004: EQUAL
63005: IFTRUE 63009
63007: GO 63065
63009: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63010: LD_ADDR_VAR 0 9
63014: PUSH
63015: LD_VAR 0 59
63019: PUSH
63020: LD_VAR 0 60
63024: PUSH
63025: LD_VAR 0 61
63029: PUSH
63030: LD_VAR 0 62
63034: PUSH
63035: LD_VAR 0 63
63039: PUSH
63040: LD_VAR 0 64
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: PUSH
63053: LD_VAR 0 4
63057: PUSH
63058: LD_INT 1
63060: PLUS
63061: ARRAY
63062: ST_TO_ADDR
63063: GO 63066
63065: POP
// temp_list2 = [ ] ;
63066: LD_ADDR_VAR 0 10
63070: PUSH
63071: EMPTY
63072: ST_TO_ADDR
// for i in temp_list do
63073: LD_ADDR_VAR 0 8
63077: PUSH
63078: LD_VAR 0 9
63082: PUSH
63083: FOR_IN
63084: IFFALSE 63136
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63086: LD_ADDR_VAR 0 10
63090: PUSH
63091: LD_VAR 0 10
63095: PUSH
63096: LD_VAR 0 8
63100: PUSH
63101: LD_INT 1
63103: ARRAY
63104: PUSH
63105: LD_VAR 0 2
63109: PLUS
63110: PUSH
63111: LD_VAR 0 8
63115: PUSH
63116: LD_INT 2
63118: ARRAY
63119: PUSH
63120: LD_VAR 0 3
63124: PLUS
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: ADD
63133: ST_TO_ADDR
63134: GO 63083
63136: POP
63137: POP
// result = temp_list2 ;
63138: LD_ADDR_VAR 0 7
63142: PUSH
63143: LD_VAR 0 10
63147: ST_TO_ADDR
// end ;
63148: LD_VAR 0 7
63152: RET
// export function EnemyInRange ( unit , dist ) ; begin
63153: LD_INT 0
63155: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63156: LD_ADDR_VAR 0 3
63160: PUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: CALL_OW 255
63170: PPUSH
63171: LD_VAR 0 1
63175: PPUSH
63176: CALL_OW 250
63180: PPUSH
63181: LD_VAR 0 1
63185: PPUSH
63186: CALL_OW 251
63190: PPUSH
63191: LD_VAR 0 2
63195: PPUSH
63196: CALL 36937 0 4
63200: PUSH
63201: LD_INT 4
63203: ARRAY
63204: ST_TO_ADDR
// end ;
63205: LD_VAR 0 3
63209: RET
// export function PlayerSeeMe ( unit ) ; begin
63210: LD_INT 0
63212: PPUSH
// result := See ( your_side , unit ) ;
63213: LD_ADDR_VAR 0 2
63217: PUSH
63218: LD_OWVAR 2
63222: PPUSH
63223: LD_VAR 0 1
63227: PPUSH
63228: CALL_OW 292
63232: ST_TO_ADDR
// end ;
63233: LD_VAR 0 2
63237: RET
// export function ReverseDir ( unit ) ; begin
63238: LD_INT 0
63240: PPUSH
// if not unit then
63241: LD_VAR 0 1
63245: NOT
63246: IFFALSE 63250
// exit ;
63248: GO 63273
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63250: LD_ADDR_VAR 0 2
63254: PUSH
63255: LD_VAR 0 1
63259: PPUSH
63260: CALL_OW 254
63264: PUSH
63265: LD_INT 3
63267: PLUS
63268: PUSH
63269: LD_INT 6
63271: MOD
63272: ST_TO_ADDR
// end ;
63273: LD_VAR 0 2
63277: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63278: LD_INT 0
63280: PPUSH
63281: PPUSH
63282: PPUSH
63283: PPUSH
63284: PPUSH
// if not hexes then
63285: LD_VAR 0 2
63289: NOT
63290: IFFALSE 63294
// exit ;
63292: GO 63442
// dist := 9999 ;
63294: LD_ADDR_VAR 0 5
63298: PUSH
63299: LD_INT 9999
63301: ST_TO_ADDR
// for i = 1 to hexes do
63302: LD_ADDR_VAR 0 4
63306: PUSH
63307: DOUBLE
63308: LD_INT 1
63310: DEC
63311: ST_TO_ADDR
63312: LD_VAR 0 2
63316: PUSH
63317: FOR_TO
63318: IFFALSE 63430
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63320: LD_VAR 0 1
63324: PPUSH
63325: LD_VAR 0 2
63329: PUSH
63330: LD_VAR 0 4
63334: ARRAY
63335: PUSH
63336: LD_INT 1
63338: ARRAY
63339: PPUSH
63340: LD_VAR 0 2
63344: PUSH
63345: LD_VAR 0 4
63349: ARRAY
63350: PUSH
63351: LD_INT 2
63353: ARRAY
63354: PPUSH
63355: CALL_OW 297
63359: PUSH
63360: LD_VAR 0 5
63364: LESS
63365: IFFALSE 63428
// begin hex := hexes [ i ] ;
63367: LD_ADDR_VAR 0 7
63371: PUSH
63372: LD_VAR 0 2
63376: PUSH
63377: LD_VAR 0 4
63381: ARRAY
63382: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63383: LD_ADDR_VAR 0 5
63387: PUSH
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_VAR 0 2
63397: PUSH
63398: LD_VAR 0 4
63402: ARRAY
63403: PUSH
63404: LD_INT 1
63406: ARRAY
63407: PPUSH
63408: LD_VAR 0 2
63412: PUSH
63413: LD_VAR 0 4
63417: ARRAY
63418: PUSH
63419: LD_INT 2
63421: ARRAY
63422: PPUSH
63423: CALL_OW 297
63427: ST_TO_ADDR
// end ; end ;
63428: GO 63317
63430: POP
63431: POP
// result := hex ;
63432: LD_ADDR_VAR 0 3
63436: PUSH
63437: LD_VAR 0 7
63441: ST_TO_ADDR
// end ;
63442: LD_VAR 0 3
63446: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63447: LD_INT 0
63449: PPUSH
63450: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63451: LD_VAR 0 1
63455: NOT
63456: PUSH
63457: LD_VAR 0 1
63461: PUSH
63462: LD_INT 21
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 23
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PPUSH
63486: CALL_OW 69
63490: IN
63491: NOT
63492: OR
63493: IFFALSE 63497
// exit ;
63495: GO 63544
// for i = 1 to 3 do
63497: LD_ADDR_VAR 0 3
63501: PUSH
63502: DOUBLE
63503: LD_INT 1
63505: DEC
63506: ST_TO_ADDR
63507: LD_INT 3
63509: PUSH
63510: FOR_TO
63511: IFFALSE 63542
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63513: LD_VAR 0 1
63517: PPUSH
63518: CALL_OW 250
63522: PPUSH
63523: LD_VAR 0 1
63527: PPUSH
63528: CALL_OW 251
63532: PPUSH
63533: LD_INT 1
63535: PPUSH
63536: CALL_OW 453
63540: GO 63510
63542: POP
63543: POP
// end ;
63544: LD_VAR 0 2
63548: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63549: LD_INT 0
63551: PPUSH
63552: PPUSH
63553: PPUSH
63554: PPUSH
63555: PPUSH
63556: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63557: LD_VAR 0 1
63561: NOT
63562: PUSH
63563: LD_VAR 0 2
63567: NOT
63568: OR
63569: PUSH
63570: LD_VAR 0 1
63574: PPUSH
63575: CALL_OW 314
63579: OR
63580: IFFALSE 63584
// exit ;
63582: GO 64025
// x := GetX ( enemy_unit ) ;
63584: LD_ADDR_VAR 0 7
63588: PUSH
63589: LD_VAR 0 2
63593: PPUSH
63594: CALL_OW 250
63598: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63599: LD_ADDR_VAR 0 8
63603: PUSH
63604: LD_VAR 0 2
63608: PPUSH
63609: CALL_OW 251
63613: ST_TO_ADDR
// if not x or not y then
63614: LD_VAR 0 7
63618: NOT
63619: PUSH
63620: LD_VAR 0 8
63624: NOT
63625: OR
63626: IFFALSE 63630
// exit ;
63628: GO 64025
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63630: LD_ADDR_VAR 0 6
63634: PUSH
63635: LD_VAR 0 7
63639: PPUSH
63640: LD_INT 0
63642: PPUSH
63643: LD_INT 4
63645: PPUSH
63646: CALL_OW 272
63650: PUSH
63651: LD_VAR 0 8
63655: PPUSH
63656: LD_INT 0
63658: PPUSH
63659: LD_INT 4
63661: PPUSH
63662: CALL_OW 273
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_VAR 0 7
63675: PPUSH
63676: LD_INT 1
63678: PPUSH
63679: LD_INT 4
63681: PPUSH
63682: CALL_OW 272
63686: PUSH
63687: LD_VAR 0 8
63691: PPUSH
63692: LD_INT 1
63694: PPUSH
63695: LD_INT 4
63697: PPUSH
63698: CALL_OW 273
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_VAR 0 7
63711: PPUSH
63712: LD_INT 2
63714: PPUSH
63715: LD_INT 4
63717: PPUSH
63718: CALL_OW 272
63722: PUSH
63723: LD_VAR 0 8
63727: PPUSH
63728: LD_INT 2
63730: PPUSH
63731: LD_INT 4
63733: PPUSH
63734: CALL_OW 273
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_VAR 0 7
63747: PPUSH
63748: LD_INT 3
63750: PPUSH
63751: LD_INT 4
63753: PPUSH
63754: CALL_OW 272
63758: PUSH
63759: LD_VAR 0 8
63763: PPUSH
63764: LD_INT 3
63766: PPUSH
63767: LD_INT 4
63769: PPUSH
63770: CALL_OW 273
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_VAR 0 7
63783: PPUSH
63784: LD_INT 4
63786: PPUSH
63787: LD_INT 4
63789: PPUSH
63790: CALL_OW 272
63794: PUSH
63795: LD_VAR 0 8
63799: PPUSH
63800: LD_INT 4
63802: PPUSH
63803: LD_INT 4
63805: PPUSH
63806: CALL_OW 273
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_VAR 0 7
63819: PPUSH
63820: LD_INT 5
63822: PPUSH
63823: LD_INT 4
63825: PPUSH
63826: CALL_OW 272
63830: PUSH
63831: LD_VAR 0 8
63835: PPUSH
63836: LD_INT 5
63838: PPUSH
63839: LD_INT 4
63841: PPUSH
63842: CALL_OW 273
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// for i = tmp downto 1 do
63859: LD_ADDR_VAR 0 4
63863: PUSH
63864: DOUBLE
63865: LD_VAR 0 6
63869: INC
63870: ST_TO_ADDR
63871: LD_INT 1
63873: PUSH
63874: FOR_DOWNTO
63875: IFFALSE 63976
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63877: LD_VAR 0 6
63881: PUSH
63882: LD_VAR 0 4
63886: ARRAY
63887: PUSH
63888: LD_INT 1
63890: ARRAY
63891: PPUSH
63892: LD_VAR 0 6
63896: PUSH
63897: LD_VAR 0 4
63901: ARRAY
63902: PUSH
63903: LD_INT 2
63905: ARRAY
63906: PPUSH
63907: CALL_OW 488
63911: NOT
63912: PUSH
63913: LD_VAR 0 6
63917: PUSH
63918: LD_VAR 0 4
63922: ARRAY
63923: PUSH
63924: LD_INT 1
63926: ARRAY
63927: PPUSH
63928: LD_VAR 0 6
63932: PUSH
63933: LD_VAR 0 4
63937: ARRAY
63938: PUSH
63939: LD_INT 2
63941: ARRAY
63942: PPUSH
63943: CALL_OW 428
63947: PUSH
63948: LD_INT 0
63950: NONEQUAL
63951: OR
63952: IFFALSE 63974
// tmp := Delete ( tmp , i ) ;
63954: LD_ADDR_VAR 0 6
63958: PUSH
63959: LD_VAR 0 6
63963: PPUSH
63964: LD_VAR 0 4
63968: PPUSH
63969: CALL_OW 3
63973: ST_TO_ADDR
63974: GO 63874
63976: POP
63977: POP
// j := GetClosestHex ( unit , tmp ) ;
63978: LD_ADDR_VAR 0 5
63982: PUSH
63983: LD_VAR 0 1
63987: PPUSH
63988: LD_VAR 0 6
63992: PPUSH
63993: CALL 63278 0 2
63997: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63998: LD_VAR 0 1
64002: PPUSH
64003: LD_VAR 0 5
64007: PUSH
64008: LD_INT 1
64010: ARRAY
64011: PPUSH
64012: LD_VAR 0 5
64016: PUSH
64017: LD_INT 2
64019: ARRAY
64020: PPUSH
64021: CALL_OW 111
// end ;
64025: LD_VAR 0 3
64029: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64030: LD_INT 0
64032: PPUSH
64033: PPUSH
64034: PPUSH
// uc_side = 0 ;
64035: LD_ADDR_OWVAR 20
64039: PUSH
64040: LD_INT 0
64042: ST_TO_ADDR
// uc_nation = 0 ;
64043: LD_ADDR_OWVAR 21
64047: PUSH
64048: LD_INT 0
64050: ST_TO_ADDR
// InitHc_All ( ) ;
64051: CALL_OW 584
// InitVc ;
64055: CALL_OW 20
// if mastodonts then
64059: LD_VAR 0 6
64063: IFFALSE 64130
// for i = 1 to mastodonts do
64065: LD_ADDR_VAR 0 11
64069: PUSH
64070: DOUBLE
64071: LD_INT 1
64073: DEC
64074: ST_TO_ADDR
64075: LD_VAR 0 6
64079: PUSH
64080: FOR_TO
64081: IFFALSE 64128
// begin vc_chassis := 31 ;
64083: LD_ADDR_OWVAR 37
64087: PUSH
64088: LD_INT 31
64090: ST_TO_ADDR
// vc_control := control_rider ;
64091: LD_ADDR_OWVAR 38
64095: PUSH
64096: LD_INT 4
64098: ST_TO_ADDR
// animal := CreateVehicle ;
64099: LD_ADDR_VAR 0 12
64103: PUSH
64104: CALL_OW 45
64108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64109: LD_VAR 0 12
64113: PPUSH
64114: LD_VAR 0 8
64118: PPUSH
64119: LD_INT 0
64121: PPUSH
64122: CALL 66318 0 3
// end ;
64126: GO 64080
64128: POP
64129: POP
// if horses then
64130: LD_VAR 0 5
64134: IFFALSE 64201
// for i = 1 to horses do
64136: LD_ADDR_VAR 0 11
64140: PUSH
64141: DOUBLE
64142: LD_INT 1
64144: DEC
64145: ST_TO_ADDR
64146: LD_VAR 0 5
64150: PUSH
64151: FOR_TO
64152: IFFALSE 64199
// begin hc_class := 21 ;
64154: LD_ADDR_OWVAR 28
64158: PUSH
64159: LD_INT 21
64161: ST_TO_ADDR
// hc_gallery :=  ;
64162: LD_ADDR_OWVAR 33
64166: PUSH
64167: LD_STRING 
64169: ST_TO_ADDR
// animal := CreateHuman ;
64170: LD_ADDR_VAR 0 12
64174: PUSH
64175: CALL_OW 44
64179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64180: LD_VAR 0 12
64184: PPUSH
64185: LD_VAR 0 8
64189: PPUSH
64190: LD_INT 0
64192: PPUSH
64193: CALL 66318 0 3
// end ;
64197: GO 64151
64199: POP
64200: POP
// if birds then
64201: LD_VAR 0 1
64205: IFFALSE 64272
// for i = 1 to birds do
64207: LD_ADDR_VAR 0 11
64211: PUSH
64212: DOUBLE
64213: LD_INT 1
64215: DEC
64216: ST_TO_ADDR
64217: LD_VAR 0 1
64221: PUSH
64222: FOR_TO
64223: IFFALSE 64270
// begin hc_class = 18 ;
64225: LD_ADDR_OWVAR 28
64229: PUSH
64230: LD_INT 18
64232: ST_TO_ADDR
// hc_gallery =  ;
64233: LD_ADDR_OWVAR 33
64237: PUSH
64238: LD_STRING 
64240: ST_TO_ADDR
// animal := CreateHuman ;
64241: LD_ADDR_VAR 0 12
64245: PUSH
64246: CALL_OW 44
64250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64251: LD_VAR 0 12
64255: PPUSH
64256: LD_VAR 0 8
64260: PPUSH
64261: LD_INT 0
64263: PPUSH
64264: CALL 66318 0 3
// end ;
64268: GO 64222
64270: POP
64271: POP
// if tigers then
64272: LD_VAR 0 2
64276: IFFALSE 64360
// for i = 1 to tigers do
64278: LD_ADDR_VAR 0 11
64282: PUSH
64283: DOUBLE
64284: LD_INT 1
64286: DEC
64287: ST_TO_ADDR
64288: LD_VAR 0 2
64292: PUSH
64293: FOR_TO
64294: IFFALSE 64358
// begin hc_class = class_tiger ;
64296: LD_ADDR_OWVAR 28
64300: PUSH
64301: LD_INT 14
64303: ST_TO_ADDR
// hc_gallery =  ;
64304: LD_ADDR_OWVAR 33
64308: PUSH
64309: LD_STRING 
64311: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64312: LD_ADDR_OWVAR 35
64316: PUSH
64317: LD_INT 7
64319: NEG
64320: PPUSH
64321: LD_INT 7
64323: PPUSH
64324: CALL_OW 12
64328: ST_TO_ADDR
// animal := CreateHuman ;
64329: LD_ADDR_VAR 0 12
64333: PUSH
64334: CALL_OW 44
64338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64339: LD_VAR 0 12
64343: PPUSH
64344: LD_VAR 0 8
64348: PPUSH
64349: LD_INT 0
64351: PPUSH
64352: CALL 66318 0 3
// end ;
64356: GO 64293
64358: POP
64359: POP
// if apemans then
64360: LD_VAR 0 3
64364: IFFALSE 64487
// for i = 1 to apemans do
64366: LD_ADDR_VAR 0 11
64370: PUSH
64371: DOUBLE
64372: LD_INT 1
64374: DEC
64375: ST_TO_ADDR
64376: LD_VAR 0 3
64380: PUSH
64381: FOR_TO
64382: IFFALSE 64485
// begin hc_class = class_apeman ;
64384: LD_ADDR_OWVAR 28
64388: PUSH
64389: LD_INT 12
64391: ST_TO_ADDR
// hc_gallery =  ;
64392: LD_ADDR_OWVAR 33
64396: PUSH
64397: LD_STRING 
64399: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64400: LD_ADDR_OWVAR 35
64404: PUSH
64405: LD_INT 5
64407: NEG
64408: PPUSH
64409: LD_INT 5
64411: PPUSH
64412: CALL_OW 12
64416: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64417: LD_ADDR_OWVAR 31
64421: PUSH
64422: LD_INT 1
64424: PPUSH
64425: LD_INT 3
64427: PPUSH
64428: CALL_OW 12
64432: PUSH
64433: LD_INT 1
64435: PPUSH
64436: LD_INT 3
64438: PPUSH
64439: CALL_OW 12
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: ST_TO_ADDR
// animal := CreateHuman ;
64456: LD_ADDR_VAR 0 12
64460: PUSH
64461: CALL_OW 44
64465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64466: LD_VAR 0 12
64470: PPUSH
64471: LD_VAR 0 8
64475: PPUSH
64476: LD_INT 0
64478: PPUSH
64479: CALL 66318 0 3
// end ;
64483: GO 64381
64485: POP
64486: POP
// if enchidnas then
64487: LD_VAR 0 4
64491: IFFALSE 64558
// for i = 1 to enchidnas do
64493: LD_ADDR_VAR 0 11
64497: PUSH
64498: DOUBLE
64499: LD_INT 1
64501: DEC
64502: ST_TO_ADDR
64503: LD_VAR 0 4
64507: PUSH
64508: FOR_TO
64509: IFFALSE 64556
// begin hc_class = 13 ;
64511: LD_ADDR_OWVAR 28
64515: PUSH
64516: LD_INT 13
64518: ST_TO_ADDR
// hc_gallery =  ;
64519: LD_ADDR_OWVAR 33
64523: PUSH
64524: LD_STRING 
64526: ST_TO_ADDR
// animal := CreateHuman ;
64527: LD_ADDR_VAR 0 12
64531: PUSH
64532: CALL_OW 44
64536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64537: LD_VAR 0 12
64541: PPUSH
64542: LD_VAR 0 8
64546: PPUSH
64547: LD_INT 0
64549: PPUSH
64550: CALL 66318 0 3
// end ;
64554: GO 64508
64556: POP
64557: POP
// if fishes then
64558: LD_VAR 0 7
64562: IFFALSE 64629
// for i = 1 to fishes do
64564: LD_ADDR_VAR 0 11
64568: PUSH
64569: DOUBLE
64570: LD_INT 1
64572: DEC
64573: ST_TO_ADDR
64574: LD_VAR 0 7
64578: PUSH
64579: FOR_TO
64580: IFFALSE 64627
// begin hc_class = 20 ;
64582: LD_ADDR_OWVAR 28
64586: PUSH
64587: LD_INT 20
64589: ST_TO_ADDR
// hc_gallery =  ;
64590: LD_ADDR_OWVAR 33
64594: PUSH
64595: LD_STRING 
64597: ST_TO_ADDR
// animal := CreateHuman ;
64598: LD_ADDR_VAR 0 12
64602: PUSH
64603: CALL_OW 44
64607: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64608: LD_VAR 0 12
64612: PPUSH
64613: LD_VAR 0 9
64617: PPUSH
64618: LD_INT 0
64620: PPUSH
64621: CALL 66318 0 3
// end ;
64625: GO 64579
64627: POP
64628: POP
// end ;
64629: LD_VAR 0 10
64633: RET
// export function WantHeal ( sci , unit ) ; begin
64634: LD_INT 0
64636: PPUSH
// if GetTaskList ( sci ) > 0 then
64637: LD_VAR 0 1
64641: PPUSH
64642: CALL_OW 437
64646: PUSH
64647: LD_INT 0
64649: GREATER
64650: IFFALSE 64720
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64652: LD_VAR 0 1
64656: PPUSH
64657: CALL_OW 437
64661: PUSH
64662: LD_INT 1
64664: ARRAY
64665: PUSH
64666: LD_INT 1
64668: ARRAY
64669: PUSH
64670: LD_STRING l
64672: EQUAL
64673: PUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: CALL_OW 437
64683: PUSH
64684: LD_INT 1
64686: ARRAY
64687: PUSH
64688: LD_INT 4
64690: ARRAY
64691: PUSH
64692: LD_VAR 0 2
64696: EQUAL
64697: AND
64698: IFFALSE 64710
// result := true else
64700: LD_ADDR_VAR 0 3
64704: PUSH
64705: LD_INT 1
64707: ST_TO_ADDR
64708: GO 64718
// result := false ;
64710: LD_ADDR_VAR 0 3
64714: PUSH
64715: LD_INT 0
64717: ST_TO_ADDR
// end else
64718: GO 64728
// result := false ;
64720: LD_ADDR_VAR 0 3
64724: PUSH
64725: LD_INT 0
64727: ST_TO_ADDR
// end ;
64728: LD_VAR 0 3
64732: RET
// export function HealTarget ( sci ) ; begin
64733: LD_INT 0
64735: PPUSH
// if not sci then
64736: LD_VAR 0 1
64740: NOT
64741: IFFALSE 64745
// exit ;
64743: GO 64810
// result := 0 ;
64745: LD_ADDR_VAR 0 2
64749: PUSH
64750: LD_INT 0
64752: ST_TO_ADDR
// if GetTaskList ( sci ) then
64753: LD_VAR 0 1
64757: PPUSH
64758: CALL_OW 437
64762: IFFALSE 64810
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64764: LD_VAR 0 1
64768: PPUSH
64769: CALL_OW 437
64773: PUSH
64774: LD_INT 1
64776: ARRAY
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: PUSH
64782: LD_STRING l
64784: EQUAL
64785: IFFALSE 64810
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64787: LD_ADDR_VAR 0 2
64791: PUSH
64792: LD_VAR 0 1
64796: PPUSH
64797: CALL_OW 437
64801: PUSH
64802: LD_INT 1
64804: ARRAY
64805: PUSH
64806: LD_INT 4
64808: ARRAY
64809: ST_TO_ADDR
// end ;
64810: LD_VAR 0 2
64814: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64815: LD_INT 0
64817: PPUSH
64818: PPUSH
64819: PPUSH
64820: PPUSH
// if not base_units then
64821: LD_VAR 0 1
64825: NOT
64826: IFFALSE 64830
// exit ;
64828: GO 64917
// result := false ;
64830: LD_ADDR_VAR 0 2
64834: PUSH
64835: LD_INT 0
64837: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64838: LD_ADDR_VAR 0 5
64842: PUSH
64843: LD_VAR 0 1
64847: PPUSH
64848: LD_INT 21
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PPUSH
64858: CALL_OW 72
64862: ST_TO_ADDR
// if not tmp then
64863: LD_VAR 0 5
64867: NOT
64868: IFFALSE 64872
// exit ;
64870: GO 64917
// for i in tmp do
64872: LD_ADDR_VAR 0 3
64876: PUSH
64877: LD_VAR 0 5
64881: PUSH
64882: FOR_IN
64883: IFFALSE 64915
// begin result := EnemyInRange ( i , 22 ) ;
64885: LD_ADDR_VAR 0 2
64889: PUSH
64890: LD_VAR 0 3
64894: PPUSH
64895: LD_INT 22
64897: PPUSH
64898: CALL 63153 0 2
64902: ST_TO_ADDR
// if result then
64903: LD_VAR 0 2
64907: IFFALSE 64913
// exit ;
64909: POP
64910: POP
64911: GO 64917
// end ;
64913: GO 64882
64915: POP
64916: POP
// end ;
64917: LD_VAR 0 2
64921: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64922: LD_INT 0
64924: PPUSH
64925: PPUSH
// if not units then
64926: LD_VAR 0 1
64930: NOT
64931: IFFALSE 64935
// exit ;
64933: GO 65005
// result := [ ] ;
64935: LD_ADDR_VAR 0 3
64939: PUSH
64940: EMPTY
64941: ST_TO_ADDR
// for i in units do
64942: LD_ADDR_VAR 0 4
64946: PUSH
64947: LD_VAR 0 1
64951: PUSH
64952: FOR_IN
64953: IFFALSE 65003
// if GetTag ( i ) = tag then
64955: LD_VAR 0 4
64959: PPUSH
64960: CALL_OW 110
64964: PUSH
64965: LD_VAR 0 2
64969: EQUAL
64970: IFFALSE 65001
// result := Insert ( result , result + 1 , i ) ;
64972: LD_ADDR_VAR 0 3
64976: PUSH
64977: LD_VAR 0 3
64981: PPUSH
64982: LD_VAR 0 3
64986: PUSH
64987: LD_INT 1
64989: PLUS
64990: PPUSH
64991: LD_VAR 0 4
64995: PPUSH
64996: CALL_OW 2
65000: ST_TO_ADDR
65001: GO 64952
65003: POP
65004: POP
// end ;
65005: LD_VAR 0 3
65009: RET
// export function IsDriver ( un ) ; begin
65010: LD_INT 0
65012: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65013: LD_ADDR_VAR 0 2
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_INT 55
65025: PUSH
65026: EMPTY
65027: LIST
65028: PPUSH
65029: CALL_OW 69
65033: IN
65034: ST_TO_ADDR
// end ;
65035: LD_VAR 0 2
65039: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65040: LD_INT 0
65042: PPUSH
65043: PPUSH
// list := [ ] ;
65044: LD_ADDR_VAR 0 5
65048: PUSH
65049: EMPTY
65050: ST_TO_ADDR
// case d of 0 :
65051: LD_VAR 0 3
65055: PUSH
65056: LD_INT 0
65058: DOUBLE
65059: EQUAL
65060: IFTRUE 65064
65062: GO 65197
65064: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65065: LD_ADDR_VAR 0 5
65069: PUSH
65070: LD_VAR 0 1
65074: PUSH
65075: LD_INT 4
65077: MINUS
65078: PUSH
65079: LD_VAR 0 2
65083: PUSH
65084: LD_INT 4
65086: MINUS
65087: PUSH
65088: LD_INT 2
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: LIST
65095: PUSH
65096: LD_VAR 0 1
65100: PUSH
65101: LD_INT 3
65103: MINUS
65104: PUSH
65105: LD_VAR 0 2
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_INT 4
65125: PLUS
65126: PUSH
65127: LD_VAR 0 2
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: PUSH
65140: LD_VAR 0 1
65144: PUSH
65145: LD_INT 3
65147: PLUS
65148: PUSH
65149: LD_VAR 0 2
65153: PUSH
65154: LD_INT 3
65156: PLUS
65157: PUSH
65158: LD_INT 5
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: PUSH
65166: LD_VAR 0 1
65170: PUSH
65171: LD_VAR 0 2
65175: PUSH
65176: LD_INT 4
65178: PLUS
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: ST_TO_ADDR
// end ; 1 :
65195: GO 65895
65197: LD_INT 1
65199: DOUBLE
65200: EQUAL
65201: IFTRUE 65205
65203: GO 65338
65205: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65206: LD_ADDR_VAR 0 5
65210: PUSH
65211: LD_VAR 0 1
65215: PUSH
65216: LD_VAR 0 2
65220: PUSH
65221: LD_INT 4
65223: MINUS
65224: PUSH
65225: LD_INT 3
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: PUSH
65233: LD_VAR 0 1
65237: PUSH
65238: LD_INT 3
65240: MINUS
65241: PUSH
65242: LD_VAR 0 2
65246: PUSH
65247: LD_INT 3
65249: MINUS
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: LIST
65258: PUSH
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 4
65266: MINUS
65267: PUSH
65268: LD_VAR 0 2
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: PUSH
65281: LD_VAR 0 1
65285: PUSH
65286: LD_VAR 0 2
65290: PUSH
65291: LD_INT 3
65293: PLUS
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: PUSH
65303: LD_VAR 0 1
65307: PUSH
65308: LD_INT 4
65310: PLUS
65311: PUSH
65312: LD_VAR 0 2
65316: PUSH
65317: LD_INT 4
65319: PLUS
65320: PUSH
65321: LD_INT 5
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: LIST
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: ST_TO_ADDR
// end ; 2 :
65336: GO 65895
65338: LD_INT 2
65340: DOUBLE
65341: EQUAL
65342: IFTRUE 65346
65344: GO 65475
65346: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65347: LD_ADDR_VAR 0 5
65351: PUSH
65352: LD_VAR 0 1
65356: PUSH
65357: LD_VAR 0 2
65361: PUSH
65362: LD_INT 3
65364: MINUS
65365: PUSH
65366: LD_INT 3
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: PUSH
65374: LD_VAR 0 1
65378: PUSH
65379: LD_INT 4
65381: PLUS
65382: PUSH
65383: LD_VAR 0 2
65387: PUSH
65388: LD_INT 4
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: LIST
65395: PUSH
65396: LD_VAR 0 1
65400: PUSH
65401: LD_VAR 0 2
65405: PUSH
65406: LD_INT 4
65408: PLUS
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: PUSH
65418: LD_VAR 0 1
65422: PUSH
65423: LD_INT 3
65425: MINUS
65426: PUSH
65427: LD_VAR 0 2
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: PUSH
65440: LD_VAR 0 1
65444: PUSH
65445: LD_INT 4
65447: MINUS
65448: PUSH
65449: LD_VAR 0 2
65453: PUSH
65454: LD_INT 4
65456: MINUS
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// end ; 3 :
65473: GO 65895
65475: LD_INT 3
65477: DOUBLE
65478: EQUAL
65479: IFTRUE 65483
65481: GO 65616
65483: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65484: LD_ADDR_VAR 0 5
65488: PUSH
65489: LD_VAR 0 1
65493: PUSH
65494: LD_INT 3
65496: PLUS
65497: PUSH
65498: LD_VAR 0 2
65502: PUSH
65503: LD_INT 4
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: PUSH
65511: LD_VAR 0 1
65515: PUSH
65516: LD_INT 4
65518: PLUS
65519: PUSH
65520: LD_VAR 0 2
65524: PUSH
65525: LD_INT 4
65527: PLUS
65528: PUSH
65529: LD_INT 5
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_INT 4
65544: MINUS
65545: PUSH
65546: LD_VAR 0 2
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: PUSH
65559: LD_VAR 0 1
65563: PUSH
65564: LD_VAR 0 2
65568: PUSH
65569: LD_INT 4
65571: MINUS
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PUSH
65581: LD_VAR 0 1
65585: PUSH
65586: LD_INT 3
65588: MINUS
65589: PUSH
65590: LD_VAR 0 2
65594: PUSH
65595: LD_INT 3
65597: MINUS
65598: PUSH
65599: LD_INT 2
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: ST_TO_ADDR
// end ; 4 :
65614: GO 65895
65616: LD_INT 4
65618: DOUBLE
65619: EQUAL
65620: IFTRUE 65624
65622: GO 65757
65624: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65625: LD_ADDR_VAR 0 5
65629: PUSH
65630: LD_VAR 0 1
65634: PUSH
65635: LD_VAR 0 2
65639: PUSH
65640: LD_INT 4
65642: PLUS
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: PUSH
65652: LD_VAR 0 1
65656: PUSH
65657: LD_INT 3
65659: PLUS
65660: PUSH
65661: LD_VAR 0 2
65665: PUSH
65666: LD_INT 3
65668: PLUS
65669: PUSH
65670: LD_INT 5
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: PUSH
65678: LD_VAR 0 1
65682: PUSH
65683: LD_INT 4
65685: PLUS
65686: PUSH
65687: LD_VAR 0 2
65691: PUSH
65692: LD_INT 4
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: PUSH
65700: LD_VAR 0 1
65704: PUSH
65705: LD_VAR 0 2
65709: PUSH
65710: LD_INT 3
65712: MINUS
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: PUSH
65722: LD_VAR 0 1
65726: PUSH
65727: LD_INT 4
65729: MINUS
65730: PUSH
65731: LD_VAR 0 2
65735: PUSH
65736: LD_INT 4
65738: MINUS
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: ST_TO_ADDR
// end ; 5 :
65755: GO 65895
65757: LD_INT 5
65759: DOUBLE
65760: EQUAL
65761: IFTRUE 65765
65763: GO 65894
65765: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65766: LD_ADDR_VAR 0 5
65770: PUSH
65771: LD_VAR 0 1
65775: PUSH
65776: LD_INT 4
65778: MINUS
65779: PUSH
65780: LD_VAR 0 2
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_VAR 0 2
65802: PUSH
65803: LD_INT 4
65805: MINUS
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: LIST
65814: PUSH
65815: LD_VAR 0 1
65819: PUSH
65820: LD_INT 4
65822: PLUS
65823: PUSH
65824: LD_VAR 0 2
65828: PUSH
65829: LD_INT 4
65831: PLUS
65832: PUSH
65833: LD_INT 5
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: PUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_INT 3
65848: PLUS
65849: PUSH
65850: LD_VAR 0 2
65854: PUSH
65855: LD_INT 4
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: LIST
65862: PUSH
65863: LD_VAR 0 1
65867: PUSH
65868: LD_VAR 0 2
65872: PUSH
65873: LD_INT 3
65875: PLUS
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: ST_TO_ADDR
// end ; end ;
65892: GO 65895
65894: POP
// result := list ;
65895: LD_ADDR_VAR 0 4
65899: PUSH
65900: LD_VAR 0 5
65904: ST_TO_ADDR
// end ;
65905: LD_VAR 0 4
65909: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65910: LD_INT 0
65912: PPUSH
65913: PPUSH
65914: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65915: LD_VAR 0 1
65919: NOT
65920: PUSH
65921: LD_VAR 0 2
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: LD_INT 4
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: IN
65944: NOT
65945: OR
65946: IFFALSE 65950
// exit ;
65948: GO 66042
// tmp := [ ] ;
65950: LD_ADDR_VAR 0 5
65954: PUSH
65955: EMPTY
65956: ST_TO_ADDR
// for i in units do
65957: LD_ADDR_VAR 0 4
65961: PUSH
65962: LD_VAR 0 1
65966: PUSH
65967: FOR_IN
65968: IFFALSE 66011
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65970: LD_ADDR_VAR 0 5
65974: PUSH
65975: LD_VAR 0 5
65979: PPUSH
65980: LD_VAR 0 5
65984: PUSH
65985: LD_INT 1
65987: PLUS
65988: PPUSH
65989: LD_VAR 0 4
65993: PPUSH
65994: LD_VAR 0 2
65998: PPUSH
65999: CALL_OW 259
66003: PPUSH
66004: CALL_OW 2
66008: ST_TO_ADDR
66009: GO 65967
66011: POP
66012: POP
// if not tmp then
66013: LD_VAR 0 5
66017: NOT
66018: IFFALSE 66022
// exit ;
66020: GO 66042
// result := SortListByListDesc ( units , tmp ) ;
66022: LD_ADDR_VAR 0 3
66026: PUSH
66027: LD_VAR 0 1
66031: PPUSH
66032: LD_VAR 0 5
66036: PPUSH
66037: CALL_OW 77
66041: ST_TO_ADDR
// end ;
66042: LD_VAR 0 3
66046: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66047: LD_INT 0
66049: PPUSH
66050: PPUSH
66051: PPUSH
// result := false ;
66052: LD_ADDR_VAR 0 3
66056: PUSH
66057: LD_INT 0
66059: ST_TO_ADDR
// x := GetX ( building ) ;
66060: LD_ADDR_VAR 0 4
66064: PUSH
66065: LD_VAR 0 2
66069: PPUSH
66070: CALL_OW 250
66074: ST_TO_ADDR
// y := GetY ( building ) ;
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 2
66084: PPUSH
66085: CALL_OW 251
66089: ST_TO_ADDR
// if not building or not x or not y then
66090: LD_VAR 0 2
66094: NOT
66095: PUSH
66096: LD_VAR 0 4
66100: NOT
66101: OR
66102: PUSH
66103: LD_VAR 0 5
66107: NOT
66108: OR
66109: IFFALSE 66113
// exit ;
66111: GO 66205
// if GetTaskList ( unit ) then
66113: LD_VAR 0 1
66117: PPUSH
66118: CALL_OW 437
66122: IFFALSE 66205
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66124: LD_STRING e
66126: PUSH
66127: LD_VAR 0 1
66131: PPUSH
66132: CALL_OW 437
66136: PUSH
66137: LD_INT 1
66139: ARRAY
66140: PUSH
66141: LD_INT 1
66143: ARRAY
66144: EQUAL
66145: PUSH
66146: LD_VAR 0 4
66150: PUSH
66151: LD_VAR 0 1
66155: PPUSH
66156: CALL_OW 437
66160: PUSH
66161: LD_INT 1
66163: ARRAY
66164: PUSH
66165: LD_INT 2
66167: ARRAY
66168: EQUAL
66169: AND
66170: PUSH
66171: LD_VAR 0 5
66175: PUSH
66176: LD_VAR 0 1
66180: PPUSH
66181: CALL_OW 437
66185: PUSH
66186: LD_INT 1
66188: ARRAY
66189: PUSH
66190: LD_INT 3
66192: ARRAY
66193: EQUAL
66194: AND
66195: IFFALSE 66205
// result := true end ;
66197: LD_ADDR_VAR 0 3
66201: PUSH
66202: LD_INT 1
66204: ST_TO_ADDR
// end ;
66205: LD_VAR 0 3
66209: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66210: LD_INT 0
66212: PPUSH
// result := false ;
66213: LD_ADDR_VAR 0 4
66217: PUSH
66218: LD_INT 0
66220: ST_TO_ADDR
// if GetTaskList ( unit ) then
66221: LD_VAR 0 1
66225: PPUSH
66226: CALL_OW 437
66230: IFFALSE 66313
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66232: LD_STRING M
66234: PUSH
66235: LD_VAR 0 1
66239: PPUSH
66240: CALL_OW 437
66244: PUSH
66245: LD_INT 1
66247: ARRAY
66248: PUSH
66249: LD_INT 1
66251: ARRAY
66252: EQUAL
66253: PUSH
66254: LD_VAR 0 2
66258: PUSH
66259: LD_VAR 0 1
66263: PPUSH
66264: CALL_OW 437
66268: PUSH
66269: LD_INT 1
66271: ARRAY
66272: PUSH
66273: LD_INT 2
66275: ARRAY
66276: EQUAL
66277: AND
66278: PUSH
66279: LD_VAR 0 3
66283: PUSH
66284: LD_VAR 0 1
66288: PPUSH
66289: CALL_OW 437
66293: PUSH
66294: LD_INT 1
66296: ARRAY
66297: PUSH
66298: LD_INT 3
66300: ARRAY
66301: EQUAL
66302: AND
66303: IFFALSE 66313
// result := true ;
66305: LD_ADDR_VAR 0 4
66309: PUSH
66310: LD_INT 1
66312: ST_TO_ADDR
// end ; end ;
66313: LD_VAR 0 4
66317: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66318: LD_INT 0
66320: PPUSH
66321: PPUSH
66322: PPUSH
66323: PPUSH
// if not unit or not area then
66324: LD_VAR 0 1
66328: NOT
66329: PUSH
66330: LD_VAR 0 2
66334: NOT
66335: OR
66336: IFFALSE 66340
// exit ;
66338: GO 66504
// tmp := AreaToList ( area , i ) ;
66340: LD_ADDR_VAR 0 6
66344: PUSH
66345: LD_VAR 0 2
66349: PPUSH
66350: LD_VAR 0 5
66354: PPUSH
66355: CALL_OW 517
66359: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66360: LD_ADDR_VAR 0 5
66364: PUSH
66365: DOUBLE
66366: LD_INT 1
66368: DEC
66369: ST_TO_ADDR
66370: LD_VAR 0 6
66374: PUSH
66375: LD_INT 1
66377: ARRAY
66378: PUSH
66379: FOR_TO
66380: IFFALSE 66502
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66382: LD_ADDR_VAR 0 7
66386: PUSH
66387: LD_VAR 0 6
66391: PUSH
66392: LD_INT 1
66394: ARRAY
66395: PUSH
66396: LD_VAR 0 5
66400: ARRAY
66401: PUSH
66402: LD_VAR 0 6
66406: PUSH
66407: LD_INT 2
66409: ARRAY
66410: PUSH
66411: LD_VAR 0 5
66415: ARRAY
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66421: LD_VAR 0 7
66425: PUSH
66426: LD_INT 1
66428: ARRAY
66429: PPUSH
66430: LD_VAR 0 7
66434: PUSH
66435: LD_INT 2
66437: ARRAY
66438: PPUSH
66439: CALL_OW 428
66443: PUSH
66444: LD_INT 0
66446: EQUAL
66447: IFFALSE 66500
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66449: LD_VAR 0 1
66453: PPUSH
66454: LD_VAR 0 7
66458: PUSH
66459: LD_INT 1
66461: ARRAY
66462: PPUSH
66463: LD_VAR 0 7
66467: PUSH
66468: LD_INT 2
66470: ARRAY
66471: PPUSH
66472: LD_VAR 0 3
66476: PPUSH
66477: CALL_OW 48
// result := IsPlaced ( unit ) ;
66481: LD_ADDR_VAR 0 4
66485: PUSH
66486: LD_VAR 0 1
66490: PPUSH
66491: CALL_OW 305
66495: ST_TO_ADDR
// exit ;
66496: POP
66497: POP
66498: GO 66504
// end ; end ;
66500: GO 66379
66502: POP
66503: POP
// end ;
66504: LD_VAR 0 4
66508: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66509: LD_INT 0
66511: PPUSH
66512: PPUSH
66513: PPUSH
// if not side or side > 8 then
66514: LD_VAR 0 1
66518: NOT
66519: PUSH
66520: LD_VAR 0 1
66524: PUSH
66525: LD_INT 8
66527: GREATER
66528: OR
66529: IFFALSE 66533
// exit ;
66531: GO 66720
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66533: LD_ADDR_VAR 0 4
66537: PUSH
66538: LD_INT 22
66540: PUSH
66541: LD_VAR 0 1
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 21
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PPUSH
66564: CALL_OW 69
66568: ST_TO_ADDR
// if not tmp then
66569: LD_VAR 0 4
66573: NOT
66574: IFFALSE 66578
// exit ;
66576: GO 66720
// enable_addtolog := true ;
66578: LD_ADDR_OWVAR 81
66582: PUSH
66583: LD_INT 1
66585: ST_TO_ADDR
// AddToLog ( [ ) ;
66586: LD_STRING [
66588: PPUSH
66589: CALL_OW 561
// for i in tmp do
66593: LD_ADDR_VAR 0 3
66597: PUSH
66598: LD_VAR 0 4
66602: PUSH
66603: FOR_IN
66604: IFFALSE 66711
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66606: LD_STRING [
66608: PUSH
66609: LD_VAR 0 3
66613: PPUSH
66614: CALL_OW 266
66618: STR
66619: PUSH
66620: LD_STRING , 
66622: STR
66623: PUSH
66624: LD_VAR 0 3
66628: PPUSH
66629: CALL_OW 250
66633: STR
66634: PUSH
66635: LD_STRING , 
66637: STR
66638: PUSH
66639: LD_VAR 0 3
66643: PPUSH
66644: CALL_OW 251
66648: STR
66649: PUSH
66650: LD_STRING , 
66652: STR
66653: PUSH
66654: LD_VAR 0 3
66658: PPUSH
66659: CALL_OW 254
66663: STR
66664: PUSH
66665: LD_STRING , 
66667: STR
66668: PUSH
66669: LD_VAR 0 3
66673: PPUSH
66674: LD_INT 1
66676: PPUSH
66677: CALL_OW 268
66681: STR
66682: PUSH
66683: LD_STRING , 
66685: STR
66686: PUSH
66687: LD_VAR 0 3
66691: PPUSH
66692: LD_INT 2
66694: PPUSH
66695: CALL_OW 268
66699: STR
66700: PUSH
66701: LD_STRING ],
66703: STR
66704: PPUSH
66705: CALL_OW 561
// end ;
66709: GO 66603
66711: POP
66712: POP
// AddToLog ( ]; ) ;
66713: LD_STRING ];
66715: PPUSH
66716: CALL_OW 561
// end ;
66720: LD_VAR 0 2
66724: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66725: LD_INT 0
66727: PPUSH
66728: PPUSH
66729: PPUSH
66730: PPUSH
66731: PPUSH
// if not area or not rate or not max then
66732: LD_VAR 0 1
66736: NOT
66737: PUSH
66738: LD_VAR 0 2
66742: NOT
66743: OR
66744: PUSH
66745: LD_VAR 0 4
66749: NOT
66750: OR
66751: IFFALSE 66755
// exit ;
66753: GO 66947
// while 1 do
66755: LD_INT 1
66757: IFFALSE 66947
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66759: LD_ADDR_VAR 0 9
66763: PUSH
66764: LD_VAR 0 1
66768: PPUSH
66769: LD_INT 1
66771: PPUSH
66772: CALL_OW 287
66776: PUSH
66777: LD_INT 10
66779: MUL
66780: ST_TO_ADDR
// r := rate / 10 ;
66781: LD_ADDR_VAR 0 7
66785: PUSH
66786: LD_VAR 0 2
66790: PUSH
66791: LD_INT 10
66793: DIVREAL
66794: ST_TO_ADDR
// time := 1 1$00 ;
66795: LD_ADDR_VAR 0 8
66799: PUSH
66800: LD_INT 2100
66802: ST_TO_ADDR
// if amount < min then
66803: LD_VAR 0 9
66807: PUSH
66808: LD_VAR 0 3
66812: LESS
66813: IFFALSE 66831
// r := r * 2 else
66815: LD_ADDR_VAR 0 7
66819: PUSH
66820: LD_VAR 0 7
66824: PUSH
66825: LD_INT 2
66827: MUL
66828: ST_TO_ADDR
66829: GO 66857
// if amount > max then
66831: LD_VAR 0 9
66835: PUSH
66836: LD_VAR 0 4
66840: GREATER
66841: IFFALSE 66857
// r := r / 2 ;
66843: LD_ADDR_VAR 0 7
66847: PUSH
66848: LD_VAR 0 7
66852: PUSH
66853: LD_INT 2
66855: DIVREAL
66856: ST_TO_ADDR
// time := time / r ;
66857: LD_ADDR_VAR 0 8
66861: PUSH
66862: LD_VAR 0 8
66866: PUSH
66867: LD_VAR 0 7
66871: DIVREAL
66872: ST_TO_ADDR
// if time < 0 then
66873: LD_VAR 0 8
66877: PUSH
66878: LD_INT 0
66880: LESS
66881: IFFALSE 66898
// time := time * - 1 ;
66883: LD_ADDR_VAR 0 8
66887: PUSH
66888: LD_VAR 0 8
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: MUL
66897: ST_TO_ADDR
// wait ( time ) ;
66898: LD_VAR 0 8
66902: PPUSH
66903: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66907: LD_INT 35
66909: PPUSH
66910: LD_INT 875
66912: PPUSH
66913: CALL_OW 12
66917: PPUSH
66918: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66922: LD_INT 1
66924: PPUSH
66925: LD_INT 5
66927: PPUSH
66928: CALL_OW 12
66932: PPUSH
66933: LD_VAR 0 1
66937: PPUSH
66938: LD_INT 1
66940: PPUSH
66941: CALL_OW 55
// end ;
66945: GO 66755
// end ;
66947: LD_VAR 0 5
66951: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66952: LD_INT 0
66954: PPUSH
66955: PPUSH
66956: PPUSH
66957: PPUSH
66958: PPUSH
66959: PPUSH
66960: PPUSH
66961: PPUSH
// if not turrets or not factories then
66962: LD_VAR 0 1
66966: NOT
66967: PUSH
66968: LD_VAR 0 2
66972: NOT
66973: OR
66974: IFFALSE 66978
// exit ;
66976: GO 67285
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66978: LD_ADDR_VAR 0 10
66982: PUSH
66983: LD_INT 5
66985: PUSH
66986: LD_INT 6
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 2
66995: PUSH
66996: LD_INT 4
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: LD_INT 5
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 24
67020: PUSH
67021: LD_INT 25
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 23
67030: PUSH
67031: LD_INT 27
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 42
67044: PUSH
67045: LD_INT 43
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 44
67054: PUSH
67055: LD_INT 46
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 45
67064: PUSH
67065: LD_INT 47
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: ST_TO_ADDR
// result := [ ] ;
67082: LD_ADDR_VAR 0 3
67086: PUSH
67087: EMPTY
67088: ST_TO_ADDR
// for i in turrets do
67089: LD_ADDR_VAR 0 4
67093: PUSH
67094: LD_VAR 0 1
67098: PUSH
67099: FOR_IN
67100: IFFALSE 67283
// begin nat := GetNation ( i ) ;
67102: LD_ADDR_VAR 0 7
67106: PUSH
67107: LD_VAR 0 4
67111: PPUSH
67112: CALL_OW 248
67116: ST_TO_ADDR
// weapon := 0 ;
67117: LD_ADDR_VAR 0 8
67121: PUSH
67122: LD_INT 0
67124: ST_TO_ADDR
// if not nat then
67125: LD_VAR 0 7
67129: NOT
67130: IFFALSE 67134
// continue ;
67132: GO 67099
// for j in list [ nat ] do
67134: LD_ADDR_VAR 0 5
67138: PUSH
67139: LD_VAR 0 10
67143: PUSH
67144: LD_VAR 0 7
67148: ARRAY
67149: PUSH
67150: FOR_IN
67151: IFFALSE 67192
// if GetBWeapon ( i ) = j [ 1 ] then
67153: LD_VAR 0 4
67157: PPUSH
67158: CALL_OW 269
67162: PUSH
67163: LD_VAR 0 5
67167: PUSH
67168: LD_INT 1
67170: ARRAY
67171: EQUAL
67172: IFFALSE 67190
// begin weapon := j [ 2 ] ;
67174: LD_ADDR_VAR 0 8
67178: PUSH
67179: LD_VAR 0 5
67183: PUSH
67184: LD_INT 2
67186: ARRAY
67187: ST_TO_ADDR
// break ;
67188: GO 67192
// end ;
67190: GO 67150
67192: POP
67193: POP
// if not weapon then
67194: LD_VAR 0 8
67198: NOT
67199: IFFALSE 67203
// continue ;
67201: GO 67099
// for k in factories do
67203: LD_ADDR_VAR 0 6
67207: PUSH
67208: LD_VAR 0 2
67212: PUSH
67213: FOR_IN
67214: IFFALSE 67279
// begin weapons := AvailableWeaponList ( k ) ;
67216: LD_ADDR_VAR 0 9
67220: PUSH
67221: LD_VAR 0 6
67225: PPUSH
67226: CALL_OW 478
67230: ST_TO_ADDR
// if not weapons then
67231: LD_VAR 0 9
67235: NOT
67236: IFFALSE 67240
// continue ;
67238: GO 67213
// if weapon in weapons then
67240: LD_VAR 0 8
67244: PUSH
67245: LD_VAR 0 9
67249: IN
67250: IFFALSE 67277
// begin result := [ i , weapon ] ;
67252: LD_ADDR_VAR 0 3
67256: PUSH
67257: LD_VAR 0 4
67261: PUSH
67262: LD_VAR 0 8
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: ST_TO_ADDR
// exit ;
67271: POP
67272: POP
67273: POP
67274: POP
67275: GO 67285
// end ; end ;
67277: GO 67213
67279: POP
67280: POP
// end ;
67281: GO 67099
67283: POP
67284: POP
// end ;
67285: LD_VAR 0 3
67289: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67290: LD_INT 0
67292: PPUSH
// if not side or side > 8 then
67293: LD_VAR 0 3
67297: NOT
67298: PUSH
67299: LD_VAR 0 3
67303: PUSH
67304: LD_INT 8
67306: GREATER
67307: OR
67308: IFFALSE 67312
// exit ;
67310: GO 67371
// if not range then
67312: LD_VAR 0 4
67316: NOT
67317: IFFALSE 67328
// range := - 12 ;
67319: LD_ADDR_VAR 0 4
67323: PUSH
67324: LD_INT 12
67326: NEG
67327: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67328: LD_VAR 0 1
67332: PPUSH
67333: LD_VAR 0 2
67337: PPUSH
67338: LD_VAR 0 3
67342: PPUSH
67343: LD_VAR 0 4
67347: PPUSH
67348: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67352: LD_VAR 0 1
67356: PPUSH
67357: LD_VAR 0 2
67361: PPUSH
67362: LD_VAR 0 3
67366: PPUSH
67367: CALL_OW 331
// end ;
67371: LD_VAR 0 5
67375: RET
// export function Video ( mode ) ; begin
67376: LD_INT 0
67378: PPUSH
// ingame_video = mode ;
67379: LD_ADDR_OWVAR 52
67383: PUSH
67384: LD_VAR 0 1
67388: ST_TO_ADDR
// interface_hidden = mode ;
67389: LD_ADDR_OWVAR 54
67393: PUSH
67394: LD_VAR 0 1
67398: ST_TO_ADDR
// end ;
67399: LD_VAR 0 2
67403: RET
// export function Join ( array , element ) ; begin
67404: LD_INT 0
67406: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67407: LD_ADDR_VAR 0 3
67411: PUSH
67412: LD_VAR 0 1
67416: PPUSH
67417: LD_VAR 0 1
67421: PUSH
67422: LD_INT 1
67424: PLUS
67425: PPUSH
67426: LD_VAR 0 2
67430: PPUSH
67431: CALL_OW 1
67435: ST_TO_ADDR
// end ;
67436: LD_VAR 0 3
67440: RET
// export function JoinUnion ( array , element ) ; begin
67441: LD_INT 0
67443: PPUSH
// result := array union element ;
67444: LD_ADDR_VAR 0 3
67448: PUSH
67449: LD_VAR 0 1
67453: PUSH
67454: LD_VAR 0 2
67458: UNION
67459: ST_TO_ADDR
// end ;
67460: LD_VAR 0 3
67464: RET
// export function GetBehemoths ( side ) ; begin
67465: LD_INT 0
67467: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67468: LD_ADDR_VAR 0 2
67472: PUSH
67473: LD_INT 22
67475: PUSH
67476: LD_VAR 0 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 31
67487: PUSH
67488: LD_INT 25
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PPUSH
67499: CALL_OW 69
67503: ST_TO_ADDR
// end ;
67504: LD_VAR 0 2
67508: RET
// export function Shuffle ( array ) ; var i , index ; begin
67509: LD_INT 0
67511: PPUSH
67512: PPUSH
67513: PPUSH
// result := [ ] ;
67514: LD_ADDR_VAR 0 2
67518: PUSH
67519: EMPTY
67520: ST_TO_ADDR
// if not array then
67521: LD_VAR 0 1
67525: NOT
67526: IFFALSE 67530
// exit ;
67528: GO 67629
// Randomize ;
67530: CALL_OW 10
// for i = array downto 1 do
67534: LD_ADDR_VAR 0 3
67538: PUSH
67539: DOUBLE
67540: LD_VAR 0 1
67544: INC
67545: ST_TO_ADDR
67546: LD_INT 1
67548: PUSH
67549: FOR_DOWNTO
67550: IFFALSE 67627
// begin index := rand ( 1 , array ) ;
67552: LD_ADDR_VAR 0 4
67556: PUSH
67557: LD_INT 1
67559: PPUSH
67560: LD_VAR 0 1
67564: PPUSH
67565: CALL_OW 12
67569: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67570: LD_ADDR_VAR 0 2
67574: PUSH
67575: LD_VAR 0 2
67579: PPUSH
67580: LD_VAR 0 2
67584: PUSH
67585: LD_INT 1
67587: PLUS
67588: PPUSH
67589: LD_VAR 0 1
67593: PUSH
67594: LD_VAR 0 4
67598: ARRAY
67599: PPUSH
67600: CALL_OW 2
67604: ST_TO_ADDR
// array := Delete ( array , index ) ;
67605: LD_ADDR_VAR 0 1
67609: PUSH
67610: LD_VAR 0 1
67614: PPUSH
67615: LD_VAR 0 4
67619: PPUSH
67620: CALL_OW 3
67624: ST_TO_ADDR
// end ;
67625: GO 67549
67627: POP
67628: POP
// end ;
67629: LD_VAR 0 2
67633: RET
// export function GetBaseMaterials ( base ) ; begin
67634: LD_INT 0
67636: PPUSH
// result := [ 0 , 0 , 0 ] ;
67637: LD_ADDR_VAR 0 2
67641: PUSH
67642: LD_INT 0
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: ST_TO_ADDR
// if not base then
67656: LD_VAR 0 1
67660: NOT
67661: IFFALSE 67665
// exit ;
67663: GO 67714
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67665: LD_ADDR_VAR 0 2
67669: PUSH
67670: LD_VAR 0 1
67674: PPUSH
67675: LD_INT 1
67677: PPUSH
67678: CALL_OW 275
67682: PUSH
67683: LD_VAR 0 1
67687: PPUSH
67688: LD_INT 2
67690: PPUSH
67691: CALL_OW 275
67695: PUSH
67696: LD_VAR 0 1
67700: PPUSH
67701: LD_INT 3
67703: PPUSH
67704: CALL_OW 275
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: ST_TO_ADDR
// end ;
67714: LD_VAR 0 2
67718: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67719: LD_INT 0
67721: PPUSH
67722: PPUSH
// result := array ;
67723: LD_ADDR_VAR 0 3
67727: PUSH
67728: LD_VAR 0 1
67732: ST_TO_ADDR
// if size > 0 then
67733: LD_VAR 0 2
67737: PUSH
67738: LD_INT 0
67740: GREATER
67741: IFFALSE 67787
// for i := array downto size do
67743: LD_ADDR_VAR 0 4
67747: PUSH
67748: DOUBLE
67749: LD_VAR 0 1
67753: INC
67754: ST_TO_ADDR
67755: LD_VAR 0 2
67759: PUSH
67760: FOR_DOWNTO
67761: IFFALSE 67785
// result := Delete ( result , result ) ;
67763: LD_ADDR_VAR 0 3
67767: PUSH
67768: LD_VAR 0 3
67772: PPUSH
67773: LD_VAR 0 3
67777: PPUSH
67778: CALL_OW 3
67782: ST_TO_ADDR
67783: GO 67760
67785: POP
67786: POP
// end ;
67787: LD_VAR 0 3
67791: RET
// export function ComExit ( unit ) ; var tmp ; begin
67792: LD_INT 0
67794: PPUSH
67795: PPUSH
// if not IsInUnit ( unit ) then
67796: LD_VAR 0 1
67800: PPUSH
67801: CALL_OW 310
67805: NOT
67806: IFFALSE 67810
// exit ;
67808: GO 67870
// tmp := IsInUnit ( unit ) ;
67810: LD_ADDR_VAR 0 3
67814: PUSH
67815: LD_VAR 0 1
67819: PPUSH
67820: CALL_OW 310
67824: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67825: LD_VAR 0 3
67829: PPUSH
67830: CALL_OW 247
67834: PUSH
67835: LD_INT 2
67837: EQUAL
67838: IFFALSE 67851
// ComExitVehicle ( unit ) else
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 121
67849: GO 67860
// ComExitBuilding ( unit ) ;
67851: LD_VAR 0 1
67855: PPUSH
67856: CALL_OW 122
// result := tmp ;
67860: LD_ADDR_VAR 0 2
67864: PUSH
67865: LD_VAR 0 3
67869: ST_TO_ADDR
// end ;
67870: LD_VAR 0 2
67874: RET
// export function ComExitAll ( units ) ; var i ; begin
67875: LD_INT 0
67877: PPUSH
67878: PPUSH
// if not units then
67879: LD_VAR 0 1
67883: NOT
67884: IFFALSE 67888
// exit ;
67886: GO 67914
// for i in units do
67888: LD_ADDR_VAR 0 3
67892: PUSH
67893: LD_VAR 0 1
67897: PUSH
67898: FOR_IN
67899: IFFALSE 67912
// ComExit ( i ) ;
67901: LD_VAR 0 3
67905: PPUSH
67906: CALL 67792 0 1
67910: GO 67898
67912: POP
67913: POP
// end ;
67914: LD_VAR 0 2
67918: RET
// export function ResetHc ; begin
67919: LD_INT 0
67921: PPUSH
// InitHc ;
67922: CALL_OW 19
// hc_importance := 0 ;
67926: LD_ADDR_OWVAR 32
67930: PUSH
67931: LD_INT 0
67933: ST_TO_ADDR
// end ;
67934: LD_VAR 0 1
67938: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67939: LD_INT 0
67941: PPUSH
67942: PPUSH
67943: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67944: LD_ADDR_VAR 0 6
67948: PUSH
67949: LD_VAR 0 1
67953: PUSH
67954: LD_VAR 0 3
67958: PLUS
67959: PUSH
67960: LD_INT 2
67962: DIV
67963: ST_TO_ADDR
// if _x < 0 then
67964: LD_VAR 0 6
67968: PUSH
67969: LD_INT 0
67971: LESS
67972: IFFALSE 67989
// _x := _x * - 1 ;
67974: LD_ADDR_VAR 0 6
67978: PUSH
67979: LD_VAR 0 6
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: MUL
67988: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67989: LD_ADDR_VAR 0 7
67993: PUSH
67994: LD_VAR 0 2
67998: PUSH
67999: LD_VAR 0 4
68003: PLUS
68004: PUSH
68005: LD_INT 2
68007: DIV
68008: ST_TO_ADDR
// if _y < 0 then
68009: LD_VAR 0 7
68013: PUSH
68014: LD_INT 0
68016: LESS
68017: IFFALSE 68034
// _y := _y * - 1 ;
68019: LD_ADDR_VAR 0 7
68023: PUSH
68024: LD_VAR 0 7
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: MUL
68033: ST_TO_ADDR
// result := [ _x , _y ] ;
68034: LD_ADDR_VAR 0 5
68038: PUSH
68039: LD_VAR 0 6
68043: PUSH
68044: LD_VAR 0 7
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: ST_TO_ADDR
// end ;
68053: LD_VAR 0 5
68057: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68058: LD_INT 0
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
// task := GetTaskList ( unit ) ;
68064: LD_ADDR_VAR 0 7
68068: PUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: CALL_OW 437
68078: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68079: LD_VAR 0 7
68083: NOT
68084: PUSH
68085: LD_VAR 0 1
68089: PPUSH
68090: LD_VAR 0 2
68094: PPUSH
68095: CALL_OW 308
68099: NOT
68100: AND
68101: IFFALSE 68105
// exit ;
68103: GO 68223
// if IsInArea ( unit , area ) then
68105: LD_VAR 0 1
68109: PPUSH
68110: LD_VAR 0 2
68114: PPUSH
68115: CALL_OW 308
68119: IFFALSE 68137
// begin ComMoveToArea ( unit , goAway ) ;
68121: LD_VAR 0 1
68125: PPUSH
68126: LD_VAR 0 3
68130: PPUSH
68131: CALL_OW 113
// exit ;
68135: GO 68223
// end ; if task [ 1 ] [ 1 ] <> M then
68137: LD_VAR 0 7
68141: PUSH
68142: LD_INT 1
68144: ARRAY
68145: PUSH
68146: LD_INT 1
68148: ARRAY
68149: PUSH
68150: LD_STRING M
68152: NONEQUAL
68153: IFFALSE 68157
// exit ;
68155: GO 68223
// x := task [ 1 ] [ 2 ] ;
68157: LD_ADDR_VAR 0 5
68161: PUSH
68162: LD_VAR 0 7
68166: PUSH
68167: LD_INT 1
68169: ARRAY
68170: PUSH
68171: LD_INT 2
68173: ARRAY
68174: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68175: LD_ADDR_VAR 0 6
68179: PUSH
68180: LD_VAR 0 7
68184: PUSH
68185: LD_INT 1
68187: ARRAY
68188: PUSH
68189: LD_INT 3
68191: ARRAY
68192: ST_TO_ADDR
// if InArea ( x , y , area ) then
68193: LD_VAR 0 5
68197: PPUSH
68198: LD_VAR 0 6
68202: PPUSH
68203: LD_VAR 0 2
68207: PPUSH
68208: CALL_OW 309
68212: IFFALSE 68223
// ComStop ( unit ) ;
68214: LD_VAR 0 1
68218: PPUSH
68219: CALL_OW 141
// end ;
68223: LD_VAR 0 4
68227: RET
// export function Abs ( value ) ; begin
68228: LD_INT 0
68230: PPUSH
// result := value ;
68231: LD_ADDR_VAR 0 2
68235: PUSH
68236: LD_VAR 0 1
68240: ST_TO_ADDR
// if value < 0 then
68241: LD_VAR 0 1
68245: PUSH
68246: LD_INT 0
68248: LESS
68249: IFFALSE 68266
// result := value * - 1 ;
68251: LD_ADDR_VAR 0 2
68255: PUSH
68256: LD_VAR 0 1
68260: PUSH
68261: LD_INT 1
68263: NEG
68264: MUL
68265: ST_TO_ADDR
// end ;
68266: LD_VAR 0 2
68270: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68271: LD_INT 0
68273: PPUSH
68274: PPUSH
68275: PPUSH
68276: PPUSH
68277: PPUSH
68278: PPUSH
68279: PPUSH
68280: PPUSH
// if not unit or not building then
68281: LD_VAR 0 1
68285: NOT
68286: PUSH
68287: LD_VAR 0 2
68291: NOT
68292: OR
68293: IFFALSE 68297
// exit ;
68295: GO 68523
// x := GetX ( building ) ;
68297: LD_ADDR_VAR 0 4
68301: PUSH
68302: LD_VAR 0 2
68306: PPUSH
68307: CALL_OW 250
68311: ST_TO_ADDR
// y := GetY ( building ) ;
68312: LD_ADDR_VAR 0 6
68316: PUSH
68317: LD_VAR 0 2
68321: PPUSH
68322: CALL_OW 251
68326: ST_TO_ADDR
// d := GetDir ( building ) ;
68327: LD_ADDR_VAR 0 8
68331: PUSH
68332: LD_VAR 0 2
68336: PPUSH
68337: CALL_OW 254
68341: ST_TO_ADDR
// r := 4 ;
68342: LD_ADDR_VAR 0 9
68346: PUSH
68347: LD_INT 4
68349: ST_TO_ADDR
// for i := 1 to 5 do
68350: LD_ADDR_VAR 0 10
68354: PUSH
68355: DOUBLE
68356: LD_INT 1
68358: DEC
68359: ST_TO_ADDR
68360: LD_INT 5
68362: PUSH
68363: FOR_TO
68364: IFFALSE 68521
// begin _x := ShiftX ( x , d , r + i ) ;
68366: LD_ADDR_VAR 0 5
68370: PUSH
68371: LD_VAR 0 4
68375: PPUSH
68376: LD_VAR 0 8
68380: PPUSH
68381: LD_VAR 0 9
68385: PUSH
68386: LD_VAR 0 10
68390: PLUS
68391: PPUSH
68392: CALL_OW 272
68396: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68397: LD_ADDR_VAR 0 7
68401: PUSH
68402: LD_VAR 0 6
68406: PPUSH
68407: LD_VAR 0 8
68411: PPUSH
68412: LD_VAR 0 9
68416: PUSH
68417: LD_VAR 0 10
68421: PLUS
68422: PPUSH
68423: CALL_OW 273
68427: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68428: LD_VAR 0 5
68432: PPUSH
68433: LD_VAR 0 7
68437: PPUSH
68438: CALL_OW 488
68442: PUSH
68443: LD_VAR 0 5
68447: PPUSH
68448: LD_VAR 0 7
68452: PPUSH
68453: CALL_OW 428
68457: PPUSH
68458: CALL_OW 247
68462: PUSH
68463: LD_INT 3
68465: PUSH
68466: LD_INT 2
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: IN
68473: NOT
68474: AND
68475: IFFALSE 68519
// begin ComMoveXY ( unit , _x , _y ) ;
68477: LD_VAR 0 1
68481: PPUSH
68482: LD_VAR 0 5
68486: PPUSH
68487: LD_VAR 0 7
68491: PPUSH
68492: CALL_OW 111
// result := [ _x , _y ] ;
68496: LD_ADDR_VAR 0 3
68500: PUSH
68501: LD_VAR 0 5
68505: PUSH
68506: LD_VAR 0 7
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: ST_TO_ADDR
// exit ;
68515: POP
68516: POP
68517: GO 68523
// end ; end ;
68519: GO 68363
68521: POP
68522: POP
// end ;
68523: LD_VAR 0 3
68527: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68528: LD_INT 0
68530: PPUSH
68531: PPUSH
68532: PPUSH
// result := 0 ;
68533: LD_ADDR_VAR 0 3
68537: PUSH
68538: LD_INT 0
68540: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68541: LD_VAR 0 1
68545: PUSH
68546: LD_INT 0
68548: LESS
68549: PUSH
68550: LD_VAR 0 1
68554: PUSH
68555: LD_INT 8
68557: GREATER
68558: OR
68559: PUSH
68560: LD_VAR 0 2
68564: PUSH
68565: LD_INT 0
68567: LESS
68568: OR
68569: PUSH
68570: LD_VAR 0 2
68574: PUSH
68575: LD_INT 8
68577: GREATER
68578: OR
68579: IFFALSE 68583
// exit ;
68581: GO 68658
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68583: LD_ADDR_VAR 0 4
68587: PUSH
68588: LD_INT 22
68590: PUSH
68591: LD_VAR 0 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PPUSH
68600: CALL_OW 69
68604: PUSH
68605: FOR_IN
68606: IFFALSE 68656
// begin un := UnitShoot ( i ) ;
68608: LD_ADDR_VAR 0 5
68612: PUSH
68613: LD_VAR 0 4
68617: PPUSH
68618: CALL_OW 504
68622: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68623: LD_VAR 0 5
68627: PPUSH
68628: CALL_OW 255
68632: PUSH
68633: LD_VAR 0 1
68637: EQUAL
68638: IFFALSE 68654
// begin result := un ;
68640: LD_ADDR_VAR 0 3
68644: PUSH
68645: LD_VAR 0 5
68649: ST_TO_ADDR
// exit ;
68650: POP
68651: POP
68652: GO 68658
// end ; end ;
68654: GO 68605
68656: POP
68657: POP
// end ;
68658: LD_VAR 0 3
68662: RET
// export function GetCargoBay ( units ) ; begin
68663: LD_INT 0
68665: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68666: LD_ADDR_VAR 0 2
68670: PUSH
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_INT 2
68678: PUSH
68679: LD_INT 34
68681: PUSH
68682: LD_INT 12
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 34
68691: PUSH
68692: LD_INT 51
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 34
68701: PUSH
68702: LD_INT 32
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 34
68711: PUSH
68712: LD_EXP 45
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: PPUSH
68728: CALL_OW 72
68732: ST_TO_ADDR
// end ; end_of_file
68733: LD_VAR 0 2
68737: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68738: LD_VAR 0 1
68742: PUSH
68743: LD_INT 200
68745: DOUBLE
68746: GREATEREQUAL
68747: IFFALSE 68755
68749: LD_INT 299
68751: DOUBLE
68752: LESSEQUAL
68753: IFTRUE 68757
68755: GO 68789
68757: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
68758: LD_VAR 0 1
68762: PPUSH
68763: LD_VAR 0 2
68767: PPUSH
68768: LD_VAR 0 3
68772: PPUSH
68773: LD_VAR 0 4
68777: PPUSH
68778: LD_VAR 0 5
68782: PPUSH
68783: CALL 14045 0 5
68787: GO 68790
68789: POP
// end ;
68790: PPOPN 11
68792: END
