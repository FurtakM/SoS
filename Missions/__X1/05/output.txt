// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8387 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 35058 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 35058 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 35058 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 35058 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 35058 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 35058 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 35058 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 35058 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 35058 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 35058 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 35058 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 35058 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 35058 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 35058 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 35058 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 35058 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 35058 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 35058 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 35058 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 35058 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 35058 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 35058 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 71443 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 71443 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 71443 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 71443 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 71443 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 71443 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 71443 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 71443 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ;
7765: PPOPN 1
7767: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7768: LD_EXP 38
7772: PPUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 54
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 95
7794: PUSH
7795: LD_INT 26
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 72
7815: IFFALSE 7910
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
// begin enable ;
7824: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_EXP 38
7834: PPUSH
7835: LD_INT 1
7837: PUSH
7838: LD_INT 3
7840: PUSH
7841: LD_INT 54
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 95
7856: PUSH
7857: LD_INT 26
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: ST_TO_ADDR
// for i in tmp do
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_VAR 0 2
7887: PUSH
7888: FOR_IN
7889: IFFALSE 7908
// ComMoveXY ( i , 206 , 110 ) ;
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 206
7898: PPUSH
7899: LD_INT 110
7901: PPUSH
7902: CALL_OW 111
7906: GO 7888
7908: POP
7909: POP
// end ;
7910: PPOPN 2
7912: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7913: LD_INT 26
7915: PPUSH
7916: LD_INT 22
7918: PUSH
7919: LD_INT 2
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 70
7930: PUSH
7931: LD_INT 26
7933: PPUSH
7934: LD_INT 22
7936: PUSH
7937: LD_INT 3
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 30
7946: PUSH
7947: LD_INT 32
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 50
7956: PUSH
7957: EMPTY
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: AND
7970: IFFALSE 8049
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_INT 26
7985: PPUSH
7986: LD_INT 22
7988: PUSH
7989: LD_INT 3
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 30
7998: PUSH
7999: LD_INT 32
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 50
8008: PUSH
8009: EMPTY
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 70
8021: PUSH
8022: FOR_IN
8023: IFFALSE 8047
// if IsInUnit ( i ) then
8025: LD_VAR 0 1
8029: PPUSH
8030: CALL_OW 310
8034: IFFALSE 8045
// ComExitBuilding ( i ) ;
8036: LD_VAR 0 1
8040: PPUSH
8041: CALL_OW 122
8045: GO 8022
8047: POP
8048: POP
// end ; end_of_file
8049: PPOPN 1
8051: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL 14975 0 1
// if un = Heike then
8061: LD_VAR 0 1
8065: PUSH
8066: LD_EXP 21
8070: EQUAL
8071: IFFALSE 8080
// YouLost ( Heike ) ;
8073: LD_STRING Heike
8075: PPUSH
8076: CALL_OW 104
// if un in apeSoldGroup then
8080: LD_VAR 0 1
8084: PUSH
8085: LD_EXP 42
8089: IN
8090: IFFALSE 8108
// apeSoldGroup := apeSoldGroup diff un ;
8092: LD_ADDR_EXP 42
8096: PUSH
8097: LD_EXP 42
8101: PUSH
8102: LD_VAR 0 1
8106: DIFF
8107: ST_TO_ADDR
// if un in apeEngGroup then
8108: LD_VAR 0 1
8112: PUSH
8113: LD_EXP 43
8117: IN
8118: IFFALSE 8136
// apeEngGroup := apeEngGroup diff un ;
8120: LD_ADDR_EXP 43
8124: PUSH
8125: LD_EXP 43
8129: PUSH
8130: LD_VAR 0 1
8134: DIFF
8135: ST_TO_ADDR
// if un in oilBaseGuard then
8136: LD_VAR 0 1
8140: PUSH
8141: LD_EXP 38
8145: IN
8146: IFFALSE 8164
// oilBaseGuard := oilBaseGuard diff un ;
8148: LD_ADDR_EXP 38
8152: PUSH
8153: LD_EXP 38
8157: PUSH
8158: LD_VAR 0 1
8162: DIFF
8163: ST_TO_ADDR
// if un in ruNorthGroup then
8164: LD_VAR 0 1
8168: PUSH
8169: LD_EXP 39
8173: IN
8174: IFFALSE 8192
// ruNorthGroup := ruNorthGroup diff un ;
8176: LD_ADDR_EXP 39
8180: PUSH
8181: LD_EXP 39
8185: PUSH
8186: LD_VAR 0 1
8190: DIFF
8191: ST_TO_ADDR
// if un in ruSouthGroup then
8192: LD_VAR 0 1
8196: PUSH
8197: LD_EXP 40
8201: IN
8202: IFFALSE 8220
// ruSouthGroup := ruSouthGroup diff un ;
8204: LD_ADDR_EXP 40
8208: PUSH
8209: LD_EXP 40
8213: PUSH
8214: LD_VAR 0 1
8218: DIFF
8219: ST_TO_ADDR
// if un in ruConvoySquad then
8220: LD_VAR 0 1
8224: PUSH
8225: LD_EXP 41
8229: IN
8230: IFFALSE 8248
// ruConvoySquad := ruConvoySquad diff un ;
8232: LD_ADDR_EXP 41
8236: PUSH
8237: LD_EXP 41
8241: PUSH
8242: LD_VAR 0 1
8246: DIFF
8247: ST_TO_ADDR
// end ;
8248: PPOPN 1
8250: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8251: LD_VAR 0 1
8255: PPUSH
8256: LD_VAR 0 2
8260: PPUSH
8261: CALL 15095 0 2
// if GetWeapon ( veh ) = ar_radar then
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 264
8274: PUSH
8275: LD_INT 30
8277: EQUAL
8278: IFFALSE 8288
// radarConstructed := true ;
8280: LD_ADDR_EXP 13
8284: PUSH
8285: LD_INT 1
8287: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 264
8297: PUSH
8298: LD_INT 26
8300: EQUAL
8301: IFFALSE 8311
// flamethrowerBuilt := true ;
8303: LD_ADDR_EXP 20
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// end ;
8311: PPOPN 2
8313: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8314: LD_ADDR_EXP 18
8318: PUSH
8319: LD_EXP 18
8323: PUSH
8324: LD_INT 1
8326: PLUS
8327: ST_TO_ADDR
// if oldId in ruConvoySquad then
8328: LD_VAR 0 2
8332: PUSH
8333: LD_EXP 41
8337: IN
8338: IFFALSE 8356
// ruConvoySquad := ruConvoySquad diff oldId ;
8340: LD_ADDR_EXP 41
8344: PUSH
8345: LD_EXP 41
8349: PUSH
8350: LD_VAR 0 2
8354: DIFF
8355: ST_TO_ADDR
// if newId in ruConvoySquad then
8356: LD_VAR 0 1
8360: PUSH
8361: LD_EXP 41
8365: IN
8366: IFFALSE 8384
// ruConvoySquad := ruConvoySquad diff newId ;
8368: LD_ADDR_EXP 41
8372: PUSH
8373: LD_EXP 41
8377: PUSH
8378: LD_VAR 0 1
8382: DIFF
8383: ST_TO_ADDR
// end ; end_of_file
8384: PPOPN 4
8386: END
// export function Action ; var i , p , un , veh , tmp ; begin
8387: LD_INT 0
8389: PPUSH
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
// InGameOn ;
8395: CALL_OW 8
// music_nat := 2 ;
8399: LD_ADDR_OWVAR 71
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// music_class := music_recon ;
8407: LD_ADDR_OWVAR 72
8411: PUSH
8412: LD_INT 3
8414: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8415: LD_INT 7
8417: PPUSH
8418: LD_INT 6
8420: PPUSH
8421: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8425: LD_INT 7
8427: PPUSH
8428: LD_INT 6
8430: PPUSH
8431: LD_INT 2
8433: PPUSH
8434: LD_INT 30
8436: NEG
8437: PPUSH
8438: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8442: LD_ADDR_VAR 0 6
8446: PUSH
8447: LD_EXP 21
8451: PUSH
8452: LD_EXP 22
8456: PUSH
8457: LD_EXP 23
8461: PUSH
8462: LD_EXP 24
8466: PUSH
8467: LD_EXP 25
8471: PUSH
8472: LD_EXP 26
8476: PUSH
8477: LD_EXP 28
8481: PUSH
8482: LD_EXP 33
8486: PUSH
8487: LD_EXP 27
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: ST_TO_ADDR
// tmp := tmp diff 0 ;
8503: LD_ADDR_VAR 0 6
8507: PUSH
8508: LD_VAR 0 6
8512: PUSH
8513: LD_INT 0
8515: DIFF
8516: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8517: LD_ADDR_VAR 0 6
8521: PUSH
8522: LD_VAR 0 6
8526: PPUSH
8527: LD_INT 3
8529: PPUSH
8530: CALL 71042 0 2
8534: ST_TO_ADDR
// for i in heikeVehicles do
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_EXP 35
8544: PUSH
8545: FOR_IN
8546: IFFALSE 8745
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8548: LD_INT 5
8550: PPUSH
8551: LD_VAR 0 2
8555: PUSH
8556: LD_INT 5
8558: ARRAY
8559: PPUSH
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 1
8567: ARRAY
8568: PPUSH
8569: LD_VAR 0 2
8573: PUSH
8574: LD_INT 2
8576: ARRAY
8577: PPUSH
8578: LD_VAR 0 2
8582: PUSH
8583: LD_INT 3
8585: ARRAY
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_INT 4
8594: ARRAY
8595: PPUSH
8596: LD_INT 34
8598: PPUSH
8599: CALL 439 0 7
// veh := CreateVehicle ;
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: CALL_OW 45
8612: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 4
8620: ARRAY
8621: PUSH
8622: LD_INT 51
8624: PUSH
8625: LD_INT 32
8627: PUSH
8628: LD_INT 12
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: IN
8636: IFFALSE 8716
// begin if i [ 7 ] [ 1 ] then
8638: LD_VAR 0 2
8642: PUSH
8643: LD_INT 7
8645: ARRAY
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: IFFALSE 8677
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8652: LD_VAR 0 5
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: LD_VAR 0 2
8664: PUSH
8665: LD_INT 7
8667: ARRAY
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: PPUSH
8673: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8677: LD_VAR 0 2
8681: PUSH
8682: LD_INT 7
8684: ARRAY
8685: PUSH
8686: LD_INT 2
8688: ARRAY
8689: IFFALSE 8716
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8691: LD_VAR 0 5
8695: PPUSH
8696: LD_INT 2
8698: PPUSH
8699: LD_VAR 0 2
8703: PUSH
8704: LD_INT 7
8706: ARRAY
8707: PUSH
8708: LD_INT 2
8710: ARRAY
8711: PPUSH
8712: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8716: LD_VAR 0 5
8720: PPUSH
8721: LD_INT 2
8723: PPUSH
8724: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8728: LD_VAR 0 5
8732: PPUSH
8733: LD_INT 4
8735: PPUSH
8736: LD_INT 0
8738: PPUSH
8739: CALL_OW 49
// end ;
8743: GO 8545
8745: POP
8746: POP
// if tmp then
8747: LD_VAR 0 6
8751: IFFALSE 8861
// begin p := 0 ;
8753: LD_ADDR_VAR 0 3
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// for i in tmp do
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_VAR 0 6
8770: PUSH
8771: FOR_IN
8772: IFFALSE 8859
// begin p := p + 1 ;
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 1
8786: PLUS
8787: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_INT 5
8795: PPUSH
8796: LD_INT 0
8798: PPUSH
8799: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8803: LD_VAR 0 2
8807: PPUSH
8808: LD_INT 26
8810: PPUSH
8811: LD_INT 9
8813: PPUSH
8814: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8818: LD_VAR 0 3
8822: PUSH
8823: LD_EXP 35
8827: GREATEREQUAL
8828: PUSH
8829: LD_VAR 0 2
8833: PPUSH
8834: CALL_OW 257
8838: PUSH
8839: LD_INT 3
8841: EQUAL
8842: AND
8843: IFFALSE 8857
// SetClass ( i , 1 ) ;
8845: LD_VAR 0 2
8849: PPUSH
8850: LD_INT 1
8852: PPUSH
8853: CALL_OW 336
// end ;
8857: GO 8771
8859: POP
8860: POP
// end ; if heikeSecondSquad then
8861: LD_EXP 34
8865: IFFALSE 8967
// for i in heikeSecondSquad do
8867: LD_ADDR_VAR 0 2
8871: PUSH
8872: LD_EXP 34
8876: PUSH
8877: FOR_IN
8878: IFFALSE 8965
// begin p := p + 1 ;
8880: LD_ADDR_VAR 0 3
8884: PUSH
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 1
8892: PLUS
8893: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8894: LD_VAR 0 2
8898: PPUSH
8899: LD_INT 6
8901: PPUSH
8902: LD_INT 0
8904: PPUSH
8905: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_INT 26
8916: PPUSH
8917: LD_INT 9
8919: PPUSH
8920: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_EXP 35
8933: GREATEREQUAL
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: CALL_OW 257
8944: PUSH
8945: LD_INT 3
8947: EQUAL
8948: AND
8949: IFFALSE 8963
// SetClass ( i , 1 ) ;
8951: LD_VAR 0 2
8955: PPUSH
8956: LD_INT 1
8958: PPUSH
8959: CALL_OW 336
// end ;
8963: GO 8877
8965: POP
8966: POP
// if heikeApes then
8967: LD_EXP 36
8971: IFFALSE 9014
// for i in heikeApes do
8973: LD_ADDR_VAR 0 2
8977: PUSH
8978: LD_EXP 36
8982: PUSH
8983: FOR_IN
8984: IFFALSE 9012
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_INT 7
8993: PPUSH
8994: LD_INT 0
8996: PPUSH
8997: CALL_OW 49
// ComHold ( i ) ;
9001: LD_VAR 0 2
9005: PPUSH
9006: CALL_OW 140
// end ;
9010: GO 8983
9012: POP
9013: POP
// if Kurt then
9014: LD_EXP 32
9018: IFFALSE 9050
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9020: LD_EXP 32
9024: PPUSH
9025: LD_INT 8
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9035: LD_EXP 32
9039: PPUSH
9040: LD_INT 42
9042: PPUSH
9043: LD_INT 32
9045: PPUSH
9046: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9050: LD_INT 70
9052: PPUSH
9053: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9057: LD_EXP 21
9061: PPUSH
9062: LD_STRING DH-Start-1
9064: PPUSH
9065: CALL_OW 88
// if Givi then
9069: LD_EXP 22
9073: IFFALSE 9336
// begin Say ( Givi , DG-Start-2-5 ) ;
9075: LD_EXP 22
9079: PPUSH
9080: LD_STRING DG-Start-2-5
9082: PPUSH
9083: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9087: LD_EXP 21
9091: PPUSH
9092: LD_STRING DH-Start-3
9094: PPUSH
9095: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9099: LD_EXP 21
9103: PPUSH
9104: LD_STRING DH-Start-4
9106: PPUSH
9107: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9111: LD_EXP 22
9115: PPUSH
9116: LD_STRING DG-Start-5
9118: PPUSH
9119: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9123: LD_EXP 21
9127: PPUSH
9128: LD_STRING DH-Start-6
9130: PPUSH
9131: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9135: LD_EXP 22
9139: PPUSH
9140: LD_STRING DG-Start-7
9142: PPUSH
9143: CALL_OW 88
// if Mike then
9147: LD_EXP 23
9151: IFFALSE 9324
// begin Say ( Mike , DM-Start-8 ) ;
9153: LD_EXP 23
9157: PPUSH
9158: LD_STRING DM-Start-8
9160: PPUSH
9161: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9165: LD_EXP 23
9169: PPUSH
9170: LD_STRING DM-Start-9
9172: PPUSH
9173: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9177: LD_EXP 22
9181: PPUSH
9182: LD_STRING DG-Start-10
9184: PPUSH
9185: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9189: LD_EXP 22
9193: PPUSH
9194: LD_STRING DG-Start-11
9196: PPUSH
9197: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9201: LD_EXP 21
9205: PPUSH
9206: LD_STRING DH-Start-12
9208: PPUSH
9209: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9213: LD_EXP 22
9217: PPUSH
9218: LD_STRING DG-Start-13
9220: PPUSH
9221: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9225: LD_EXP 22
9229: PPUSH
9230: LD_STRING DG-Start-14
9232: PPUSH
9233: CALL_OW 88
// if Kaia then
9237: LD_EXP 26
9241: IFFALSE 9324
// begin Say ( Kaia , DK-Start-15 ) ;
9243: LD_EXP 26
9247: PPUSH
9248: LD_STRING DK-Start-15
9250: PPUSH
9251: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9255: LD_EXP 26
9259: PPUSH
9260: LD_STRING DK-Start-16
9262: PPUSH
9263: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9267: LD_EXP 26
9271: PPUSH
9272: LD_STRING DK-Start-17
9274: PPUSH
9275: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9279: LD_INT 10
9281: PPUSH
9282: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9286: LD_EXP 22
9290: PPUSH
9291: LD_EXP 26
9295: PPUSH
9296: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9300: LD_EXP 22
9304: PPUSH
9305: LD_STRING DG-Start-18
9307: PPUSH
9308: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9312: LD_EXP 26
9316: PPUSH
9317: LD_STRING DK-Start-19
9319: PPUSH
9320: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9324: LD_EXP 21
9328: PPUSH
9329: LD_STRING DH-Start-20
9331: PPUSH
9332: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9336: LD_INT 70
9338: PPUSH
9339: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9343: LD_EXP 29
9347: PPUSH
9348: LD_STRING DShar-Start-21
9350: PPUSH
9351: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9355: LD_EXP 21
9359: PPUSH
9360: LD_STRING DH-Start-22
9362: PPUSH
9363: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9367: LD_EXP 29
9371: PPUSH
9372: LD_STRING DShar-Start-23
9374: PPUSH
9375: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9379: LD_EXP 29
9383: PPUSH
9384: LD_STRING DShar-Start-24
9386: PPUSH
9387: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9391: LD_EXP 29
9395: PPUSH
9396: LD_STRING DShar-Start-25
9398: PPUSH
9399: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9403: LD_EXP 29
9407: PPUSH
9408: LD_STRING DShar-Start-26
9410: PPUSH
9411: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9415: LD_EXP 21
9419: PPUSH
9420: LD_STRING DH-Start-27
9422: PPUSH
9423: CALL_OW 88
// if Kaia then
9427: LD_EXP 26
9431: IFFALSE 9473
// begin ComTurnUnit ( Heike , Kaia ) ;
9433: LD_EXP 21
9437: PPUSH
9438: LD_EXP 26
9442: PPUSH
9443: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9447: LD_EXP 26
9451: PPUSH
9452: LD_STRING DK-Start-28
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9459: LD_EXP 21
9463: PPUSH
9464: LD_STRING DH-Start-29
9466: PPUSH
9467: CALL_OW 88
// end else
9471: GO 9485
// Say ( Heike , DH-Start-a-28 ) ;
9473: LD_EXP 21
9477: PPUSH
9478: LD_STRING DH-Start-a-28
9480: PPUSH
9481: CALL_OW 88
// if Givi then
9485: LD_EXP 22
9489: IFFALSE 9724
// begin ComTurnUnit ( Heike , Givi ) ;
9491: LD_EXP 21
9495: PPUSH
9496: LD_EXP 22
9500: PPUSH
9501: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9505: LD_EXP 22
9509: PPUSH
9510: LD_EXP 21
9514: PPUSH
9515: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9519: LD_EXP 21
9523: PPUSH
9524: LD_STRING DH-Start-30
9526: PPUSH
9527: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9531: LD_EXP 21
9535: PPUSH
9536: LD_STRING DH-Start-31
9538: PPUSH
9539: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9543: LD_EXP 22
9547: PPUSH
9548: LD_STRING DG-Start-32
9550: PPUSH
9551: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9555: LD_EXP 21
9559: PPUSH
9560: LD_STRING DH-Start-33
9562: PPUSH
9563: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9567: LD_EXP 22
9571: PPUSH
9572: LD_STRING DG-Start-34
9574: PPUSH
9575: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9579: LD_EXP 22
9583: PPUSH
9584: LD_STRING DG-Start-35
9586: PPUSH
9587: CALL_OW 88
// if Kurt and not dialogue_skipped then
9591: LD_EXP 32
9595: PUSH
9596: LD_OWVAR 59
9600: NOT
9601: AND
9602: IFFALSE 9633
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9604: LD_EXP 32
9608: PPUSH
9609: LD_INT 28
9611: PPUSH
9612: LD_INT 13
9614: PPUSH
9615: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9619: LD_EXP 32
9623: PPUSH
9624: LD_EXP 21
9628: PPUSH
9629: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9633: LD_EXP 22
9637: PPUSH
9638: LD_STRING DG-Start-36
9640: PPUSH
9641: CALL_OW 88
// if Kurt then
9645: LD_EXP 32
9649: IFFALSE 9722
// begin if not Givi then
9651: LD_EXP 22
9655: NOT
9656: IFFALSE 9672
// Say ( Kurt , DKs-Start-37-a ) else
9658: LD_EXP 32
9662: PPUSH
9663: LD_STRING DKs-Start-37-a
9665: PPUSH
9666: CALL_OW 88
9670: GO 9684
// Say ( Kurt , DKs-Start-37 ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_STRING DKs-Start-37
9679: PPUSH
9680: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9684: LD_EXP 32
9688: PPUSH
9689: LD_STRING DKs-Start-38
9691: PPUSH
9692: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9696: LD_EXP 21
9700: PPUSH
9701: LD_EXP 32
9705: PPUSH
9706: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9710: LD_EXP 21
9714: PPUSH
9715: LD_STRING DH-Start-39
9717: PPUSH
9718: CALL_OW 88
// end ; end else
9722: GO 9753
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9724: LD_EXP 34
9728: PPUSH
9729: LD_STRING DArm-Start-a-37
9731: PPUSH
9732: LD_STRING DArf-Start-a-37
9734: PPUSH
9735: CALL 1198 0 3
9739: IFFALSE 9753
// Say ( Heike , DH-Start-39 ) ;
9741: LD_EXP 21
9745: PPUSH
9746: LD_STRING DH-Start-39
9748: PPUSH
9749: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9753: LD_INT 44
9755: PPUSH
9756: LD_INT 25
9758: PPUSH
9759: CALL_OW 428
9763: IFFALSE 9780
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9765: LD_INT 44
9767: PPUSH
9768: LD_INT 25
9770: PPUSH
9771: CALL_OW 428
9775: PPUSH
9776: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9780: LD_EXP 30
9784: PPUSH
9785: LD_INT 5
9787: PPUSH
9788: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9792: LD_EXP 30
9796: PPUSH
9797: LD_INT 44
9799: PPUSH
9800: LD_INT 25
9802: PPUSH
9803: LD_INT 0
9805: PPUSH
9806: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9810: LD_EXP 30
9814: PPUSH
9815: LD_INT 29
9817: PPUSH
9818: LD_INT 12
9820: PPUSH
9821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9825: LD_INT 35
9827: PPUSH
9828: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9832: LD_OWVAR 59
9836: PUSH
9837: LD_EXP 21
9841: PPUSH
9842: LD_EXP 30
9846: PPUSH
9847: CALL_OW 296
9851: PUSH
9852: LD_INT 8
9854: LESS
9855: OR
9856: PUSH
9857: LD_EXP 30
9861: PPUSH
9862: LD_INT 26
9864: PPUSH
9865: LD_INT 9
9867: PPUSH
9868: CALL_OW 297
9872: PUSH
9873: LD_INT 6
9875: LESS
9876: OR
9877: IFFALSE 9825
// Say ( Olaf , DO-Scout-1 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-1
9886: PPUSH
9887: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_EXP 21
9900: PPUSH
9901: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9905: LD_ADDR_VAR 0 2
9909: PUSH
9910: LD_VAR 0 6
9914: PUSH
9915: LD_EXP 34
9919: UNION
9920: PUSH
9921: FOR_IN
9922: IFFALSE 9940
// ComTurnUnit ( i , Olaf ) ;
9924: LD_VAR 0 2
9928: PPUSH
9929: LD_EXP 30
9933: PPUSH
9934: CALL_OW 119
9938: GO 9921
9940: POP
9941: POP
// wait ( 0 0$0.3 ) ;
9942: LD_INT 10
9944: PPUSH
9945: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9949: LD_EXP 21
9953: PPUSH
9954: LD_EXP 30
9958: PPUSH
9959: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9963: LD_EXP 21
9967: PPUSH
9968: LD_EXP 30
9972: PPUSH
9973: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9977: LD_EXP 21
9981: PPUSH
9982: LD_STRING DH-Scout-2
9984: PPUSH
9985: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9989: LD_EXP 30
9993: PPUSH
9994: LD_STRING DO-Scout-3
9996: PPUSH
9997: CALL_OW 88
// if Mike and Givi then
10001: LD_EXP 23
10005: PUSH
10006: LD_EXP 22
10010: AND
10011: IFFALSE 10027
// Say ( Olaf , DO-Scout-4 ) else
10013: LD_EXP 30
10017: PPUSH
10018: LD_STRING DO-Scout-4
10020: PPUSH
10021: CALL_OW 88
10025: GO 10127
// begin if Mike then
10027: LD_EXP 23
10031: IFFALSE 10059
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10033: LD_EXP 30
10037: PPUSH
10038: LD_STRING DO-Scout-a-4
10040: PPUSH
10041: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10045: LD_EXP 21
10049: PPUSH
10050: LD_STRING DH-Scout-a-5
10052: PPUSH
10053: CALL_OW 88
// end else
10057: GO 10127
// if Givi then
10059: LD_EXP 22
10063: IFFALSE 10091
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10065: LD_EXP 30
10069: PPUSH
10070: LD_STRING DO-Scout-b-4
10072: PPUSH
10073: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10077: LD_EXP 21
10081: PPUSH
10082: LD_STRING DH-Scout-b-5
10084: PPUSH
10085: CALL_OW 88
// end else
10089: GO 10127
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10091: LD_EXP 30
10095: PPUSH
10096: LD_STRING DO-Scout-f-4
10098: PPUSH
10099: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10103: LD_EXP 21
10107: PPUSH
10108: LD_STRING DH-Scout-f-5
10110: PPUSH
10111: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10115: LD_EXP 30
10119: PPUSH
10120: LD_STRING DO-Scout-f-6
10122: PPUSH
10123: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10127: LD_EXP 21
10131: PPUSH
10132: LD_STRING DH-Scout-5
10134: PPUSH
10135: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10139: LD_EXP 30
10143: PPUSH
10144: LD_STRING DO-Scout-6
10146: PPUSH
10147: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10151: LD_EXP 30
10155: PPUSH
10156: LD_STRING DO-Scout-7
10158: PPUSH
10159: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10163: LD_EXP 21
10167: PPUSH
10168: LD_STRING DH-Scout-8
10170: PPUSH
10171: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10175: LD_EXP 21
10179: PPUSH
10180: LD_STRING DH-Scout-9
10182: PPUSH
10183: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DO-Scout-10
10194: PPUSH
10195: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10199: LD_EXP 30
10203: PPUSH
10204: LD_STRING DO-Scout-12
10206: PPUSH
10207: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DO-Scout-13
10218: PPUSH
10219: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10223: LD_EXP 30
10227: PPUSH
10228: LD_STRING DO-Scout-14
10230: PPUSH
10231: CALL_OW 88
// if Givi then
10235: LD_EXP 22
10239: IFFALSE 10265
// begin Say ( Givi , DG-Scout-15 ) ;
10241: LD_EXP 22
10245: PPUSH
10246: LD_STRING DG-Scout-15
10248: PPUSH
10249: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10253: LD_EXP 26
10257: PPUSH
10258: LD_STRING DK-Scout-16
10260: PPUSH
10261: CALL_OW 88
// end ; if not dialogue_skipped then
10265: LD_OWVAR 59
10269: NOT
10270: IFFALSE 10391
// begin async ;
10272: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10273: LD_EXP 30
10277: PPUSH
10278: LD_STRING DO-Scout-17
10280: PPUSH
10281: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10285: LD_INT 55
10287: PPUSH
10288: LD_INT 77
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: LD_INT 6
10296: NEG
10297: PPUSH
10298: CALL 1147 0 4
// wait ( 10 ) ;
10302: LD_INT 10
10304: PPUSH
10305: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10309: LD_INT 55
10311: PPUSH
10312: LD_INT 77
10314: PPUSH
10315: CALL_OW 84
// wait ( 0 0$10 ) ;
10319: LD_INT 350
10321: PPUSH
10322: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-18
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10338: LD_INT 204
10340: PPUSH
10341: LD_INT 107
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 12
10349: NEG
10350: PPUSH
10351: CALL 1147 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10362: LD_INT 204
10364: PPUSH
10365: LD_INT 107
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// sync ;
10379: SYNC
// CenterNowOnUnits ( Heike ) ;
10380: LD_EXP 21
10384: PPUSH
10385: CALL_OW 87
// end else
10389: GO 10425
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10391: LD_INT 55
10393: PPUSH
10394: LD_INT 77
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 6
10402: NEG
10403: PPUSH
10404: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10408: LD_INT 204
10410: PPUSH
10411: LD_INT 107
10413: PPUSH
10414: LD_INT 2
10416: PPUSH
10417: LD_INT 12
10419: NEG
10420: PPUSH
10421: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10425: LD_EXP 30
10429: PPUSH
10430: LD_STRING DO-Scout-19
10432: PPUSH
10433: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10437: LD_EXP 30
10441: PPUSH
10442: LD_STRING DO-Scout-20
10444: PPUSH
10445: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10449: LD_EXP 21
10453: PPUSH
10454: LD_STRING DH-Scout-21
10456: PPUSH
10457: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10461: LD_EXP 21
10465: PPUSH
10466: LD_STRING DH-Scout-22
10468: PPUSH
10469: CALL_OW 88
// InGameOff ;
10473: CALL_OW 9
// if heikeSecondSquad then
10477: LD_EXP 34
10481: IFFALSE 10495
// ForceSleep ( heikeSecondSquad , false ) ;
10483: LD_EXP 34
10487: PPUSH
10488: LD_INT 0
10490: PPUSH
10491: CALL_OW 585
// if Givi then
10495: LD_EXP 22
10499: IFFALSE 10514
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10501: LD_INT 13
10503: PPUSH
10504: LD_INT 2
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10514: LD_STRING Road
10516: PPUSH
10517: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 5
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 2
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: PUSH
10555: FOR_IN
10556: IFFALSE 10572
// SetSide ( i , 2 ) ;
10558: LD_VAR 0 2
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: CALL_OW 235
10570: GO 10555
10572: POP
10573: POP
// SaveForQuickRestart ;
10574: CALL_OW 22
// music_class := music_auto ;
10578: LD_ADDR_OWVAR 72
10582: PUSH
10583: LD_INT 0
10585: ST_TO_ADDR
// end ;
10586: LD_VAR 0 1
10590: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10591: LD_INT 2
10593: PPUSH
10594: LD_INT 9
10596: PPUSH
10597: CALL_OW 294
10601: IFFALSE 10966
10603: GO 10605
10605: DISABLE
// begin DialogueOn ;
10606: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10610: LD_INT 111
10612: PPUSH
10613: LD_INT 72
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: LD_INT 20
10621: NEG
10622: PPUSH
10623: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10627: LD_INT 111
10629: PPUSH
10630: LD_INT 72
10632: PPUSH
10633: LD_INT 2
10635: PPUSH
10636: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10640: LD_INT 111
10642: PPUSH
10643: LD_INT 72
10645: PPUSH
10646: CALL_OW 86
// if IsOk ( Kamil ) then
10650: LD_EXP 25
10654: PPUSH
10655: CALL_OW 302
10659: IFFALSE 10776
// begin Say ( Kamil , DKam-Cross-1 ) ;
10661: LD_EXP 25
10665: PPUSH
10666: LD_STRING DKam-Cross-1
10668: PPUSH
10669: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10673: LD_EXP 25
10677: PPUSH
10678: LD_STRING DKam-Cross-2
10680: PPUSH
10681: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10685: LD_EXP 25
10689: PPUSH
10690: LD_STRING DKam-Cross-3
10692: PPUSH
10693: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10697: LD_EXP 25
10701: PPUSH
10702: LD_STRING DKam-Cross-4
10704: PPUSH
10705: CALL_OW 88
// if IsOk ( Ibrahim ) then
10709: LD_EXP 24
10713: PPUSH
10714: CALL_OW 302
10718: IFFALSE 10774
// begin if ibrahimJoinedIn04 then
10720: LD_EXP 4
10724: IFFALSE 10738
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10726: LD_EXP 24
10730: PPUSH
10731: LD_STRING DI-Cross-b-5
10733: PPUSH
10734: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10738: LD_EXP 24
10742: PPUSH
10743: LD_STRING DI-Cross-b-6
10745: PPUSH
10746: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10750: LD_EXP 24
10754: PPUSH
10755: LD_STRING DI-Cross-b-7
10757: PPUSH
10758: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10762: LD_EXP 25
10766: PPUSH
10767: LD_STRING DKam-Cross-8
10769: PPUSH
10770: CALL_OW 88
// end ; end else
10774: GO 10934
// if IsOk ( Sophia ) then
10776: LD_EXP 27
10780: PPUSH
10781: CALL_OW 302
10785: IFFALSE 10902
// begin Say ( Sophia , DS-Cross-1 ) ;
10787: LD_EXP 27
10791: PPUSH
10792: LD_STRING DS-Cross-1
10794: PPUSH
10795: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10799: LD_EXP 27
10803: PPUSH
10804: LD_STRING DS-Cross-2
10806: PPUSH
10807: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10811: LD_EXP 27
10815: PPUSH
10816: LD_STRING DS-Cross-3
10818: PPUSH
10819: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10823: LD_EXP 27
10827: PPUSH
10828: LD_STRING DS-Cross-4
10830: PPUSH
10831: CALL_OW 88
// if IsOk ( Ibrahim ) then
10835: LD_EXP 24
10839: PPUSH
10840: CALL_OW 302
10844: IFFALSE 10900
// begin if ibrahimJoinedIn04 then
10846: LD_EXP 4
10850: IFFALSE 10864
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10852: LD_EXP 24
10856: PPUSH
10857: LD_STRING DI-Cross-b-5
10859: PPUSH
10860: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10864: LD_EXP 24
10868: PPUSH
10869: LD_STRING DI-Cross-b-6
10871: PPUSH
10872: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10876: LD_EXP 24
10880: PPUSH
10881: LD_STRING DI-Cross-b-7
10883: PPUSH
10884: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10888: LD_EXP 27
10892: PPUSH
10893: LD_STRING DS-Cross-8
10895: PPUSH
10896: CALL_OW 88
// end ; end else
10900: GO 10934
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10902: LD_EXP 34
10906: PPUSH
10907: LD_INT 50
10909: PUSH
10910: EMPTY
10911: LIST
10912: PPUSH
10913: CALL_OW 72
10917: IFFALSE 10934
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10919: LD_EXP 34
10923: PPUSH
10924: LD_STRING DArm-Cross-c-1
10926: PPUSH
10927: LD_STRING DArf-Cross-c-1
10929: PPUSH
10930: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10934: LD_INT 85
10936: PPUSH
10937: LD_INT 2
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 322
// DialogueOff ;
10947: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10951: LD_STRING Crane
10953: PPUSH
10954: CALL_OW 337
// spottedCrossRoad := true ;
10958: LD_ADDR_EXP 8
10962: PUSH
10963: LD_INT 1
10965: ST_TO_ADDR
// end ;
10966: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10967: LD_INT 22
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 2
10979: PUSH
10980: LD_INT 30
10982: PUSH
10983: LD_INT 0
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 30
10992: PUSH
10993: LD_INT 1
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 69
11013: PUSH
11014: LD_EXP 26
11018: PPUSH
11019: CALL_OW 302
11023: PUSH
11024: LD_EXP 34
11028: OR
11029: AND
11030: IFFALSE 11242
11032: GO 11034
11034: DISABLE
// begin DialogueOn ;
11035: CALL_OW 6
// if Kaia then
11039: LD_EXP 26
11043: IFFALSE 11056
// CenterNowOnUnits ( Kaia ) else
11045: LD_EXP 26
11049: PPUSH
11050: CALL_OW 87
11054: GO 11065
// CenterNowOnUnits ( Heike ) ;
11056: LD_EXP 21
11060: PPUSH
11061: CALL_OW 87
// if IsOk ( Kaia ) then
11065: LD_EXP 26
11069: PPUSH
11070: CALL_OW 302
11074: IFFALSE 11090
// Say ( Kaia , DK-Cam-1 ) else
11076: LD_EXP 26
11080: PPUSH
11081: LD_STRING DK-Cam-1
11083: PPUSH
11084: CALL_OW 88
11088: GO 11105
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11090: LD_EXP 34
11094: PPUSH
11095: LD_STRING DArm-Cam-1
11097: PPUSH
11098: LD_STRING DArf-Cam-1
11100: PPUSH
11101: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
11105: LD_EXP 21
11109: PPUSH
11110: LD_STRING DH-Cam-2
11112: PPUSH
11113: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11117: LD_EXP 21
11121: PPUSH
11122: LD_STRING DH-Cam-3
11124: PPUSH
11125: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11129: LD_EXP 21
11133: PPUSH
11134: LD_STRING DH-Cam-4
11136: PPUSH
11137: CALL_OW 88
// if IsOk ( Kaia ) then
11141: LD_EXP 26
11145: PPUSH
11146: CALL_OW 302
11150: IFFALSE 11166
// Say ( Kaia , DK-Cam-5 ) else
11152: LD_EXP 26
11156: PPUSH
11157: LD_STRING DK-Cam-5
11159: PPUSH
11160: CALL_OW 88
11164: GO 11181
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11166: LD_EXP 34
11170: PPUSH
11171: LD_STRING DArm-Cam-5
11173: PPUSH
11174: LD_STRING DArf-Cam-5
11176: PPUSH
11177: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11181: LD_EXP 30
11185: PPUSH
11186: LD_STRING DO-Cam-6
11188: PPUSH
11189: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11193: LD_EXP 30
11197: PPUSH
11198: LD_STRING DO-Cam-7
11200: PPUSH
11201: CALL_OW 88
// DialogueOff ;
11205: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11209: LD_STRING Radar
11211: PPUSH
11212: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11216: LD_INT 6
11218: PPUSH
11219: LD_INT 2
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11229: LD_INT 20
11231: PPUSH
11232: LD_INT 2
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 324
// end ;
11242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11243: LD_INT 22
11245: PUSH
11246: LD_INT 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: LD_INT 34
11258: PUSH
11259: LD_INT 30
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 35
11268: PUSH
11269: LD_INT 30
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: IFFALSE 11301
11291: GO 11293
11293: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11294: LD_STRING RadarDone
11296: PPUSH
11297: CALL_OW 337
11301: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11302: LD_INT 22
11304: PUSH
11305: LD_INT 2
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 34
11314: PUSH
11315: LD_INT 88
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 69
11330: IFFALSE 11342
11332: GO 11334
11334: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11335: LD_STRING CraneDone
11337: PPUSH
11338: CALL_OW 337
11342: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11343: LD_EXP 30
11347: PPUSH
11348: CALL_OW 302
11352: PUSH
11353: LD_EXP 33
11357: PPUSH
11358: CALL_OW 302
11362: AND
11363: PUSH
11364: LD_INT 6
11366: PPUSH
11367: LD_INT 2
11369: PPUSH
11370: CALL_OW 321
11374: PUSH
11375: LD_INT 2
11377: EQUAL
11378: AND
11379: PUSH
11380: LD_EXP 33
11384: PPUSH
11385: LD_EXP 21
11389: PPUSH
11390: CALL_OW 296
11394: PUSH
11395: LD_INT 10
11397: LESS
11398: PUSH
11399: LD_EXP 33
11403: PPUSH
11404: CALL_OW 310
11408: OR
11409: AND
11410: IFFALSE 11624
11412: GO 11414
11414: DISABLE
// begin DialogueOn ;
11415: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11419: LD_EXP 33
11423: PPUSH
11424: LD_STRING DA-RC-1
11426: PPUSH
11427: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11431: LD_EXP 33
11435: PPUSH
11436: LD_STRING DA-RC-2
11438: PPUSH
11439: CALL_OW 88
// if IsOk ( Kaia ) then
11443: LD_EXP 26
11447: PPUSH
11448: CALL_OW 302
11452: IFFALSE 11526
// begin Say ( Kaia , DK-RC-3 ) ;
11454: LD_EXP 26
11458: PPUSH
11459: LD_STRING DK-RC-3
11461: PPUSH
11462: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11466: LD_EXP 33
11470: PPUSH
11471: LD_STRING DA-RC-4
11473: PPUSH
11474: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11478: LD_EXP 26
11482: PPUSH
11483: LD_STRING DK-RC-5
11485: PPUSH
11486: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11490: LD_EXP 33
11494: PPUSH
11495: LD_STRING DA-RC-6
11497: PPUSH
11498: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11502: LD_EXP 26
11506: PPUSH
11507: LD_STRING DK-RC-7
11509: PPUSH
11510: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11514: LD_EXP 33
11518: PPUSH
11519: LD_STRING DA-RC-8
11521: PPUSH
11522: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11526: LD_EXP 21
11530: PPUSH
11531: LD_STRING DH-RC-9
11533: PPUSH
11534: CALL_OW 88
// if IsOk ( Markov ) then
11538: LD_EXP 28
11542: PPUSH
11543: CALL_OW 302
11547: IFFALSE 11575
// begin Say ( Markov , DMar-RC-10 ) ;
11549: LD_EXP 28
11553: PPUSH
11554: LD_STRING DMar-RC-10
11556: PPUSH
11557: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11561: LD_EXP 28
11565: PPUSH
11566: LD_STRING DMar-RC-11
11568: PPUSH
11569: CALL_OW 88
// end else
11573: GO 11587
// begin Say ( Olaf , DO-RC-a-10 ) ;
11575: LD_EXP 30
11579: PPUSH
11580: LD_STRING DO-RC-a-10
11582: PPUSH
11583: CALL_OW 88
// end ; DialogueOff ;
11587: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11591: LD_STRING RemoteControl
11593: PPUSH
11594: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11598: LD_INT 15
11600: PPUSH
11601: LD_INT 2
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11611: LD_INT 22
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: CALL_OW 324
// end ;
11624: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11625: LD_INT 12
11627: PPUSH
11628: LD_INT 22
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PPUSH
11638: CALL_OW 70
11642: IFFALSE 12009
11644: GO 11646
11646: DISABLE
11647: LD_INT 0
11649: PPUSH
// begin PrepareWestBase ;
11650: CALL 3916 0 0
// westBaseSpotted := true ;
11654: LD_ADDR_EXP 5
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11662: LD_INT 70
11664: PPUSH
11665: CALL_OW 67
// InGameOn ;
11669: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11673: LD_INT 56
11675: PPUSH
11676: LD_INT 77
11678: PPUSH
11679: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11683: LD_INT 56
11685: PPUSH
11686: LD_INT 77
11688: PPUSH
11689: LD_INT 2
11691: PPUSH
11692: LD_INT 12
11694: NEG
11695: PPUSH
11696: CALL_OW 330
// wait ( 0 0$2 ) ;
11700: LD_INT 70
11702: PPUSH
11703: CALL_OW 67
// DialogueOn ;
11707: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11711: LD_EXP 21
11715: PPUSH
11716: LD_STRING DH-Rbase-1
11718: PPUSH
11719: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11723: LD_EXP 26
11727: PPUSH
11728: LD_STRING DK-Rbase-2
11730: PPUSH
11731: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11735: LD_EXP 26
11739: PPUSH
11740: LD_STRING DK-Rbase-3
11742: PPUSH
11743: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11747: LD_EXP 26
11751: PPUSH
11752: LD_STRING DK-Rbase-4
11754: PPUSH
11755: CALL_OW 88
// DialogueOff ;
11759: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11763: LD_INT 56
11765: PPUSH
11766: LD_INT 77
11768: PPUSH
11769: LD_INT 2
11771: PPUSH
11772: CALL_OW 331
// InGameOff ;
11776: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11780: LD_INT 35
11782: PPUSH
11783: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11787: LD_EXP 42
11791: NOT
11792: PUSH
11793: LD_EXP 43
11797: NOT
11798: AND
11799: IFFALSE 11780
// wait ( 0 0$2 ) ;
11801: LD_INT 70
11803: PPUSH
11804: CALL_OW 67
// if IsOk ( Kaia ) then
11808: LD_EXP 26
11812: PPUSH
11813: CALL_OW 302
11817: IFFALSE 11932
// begin DialogueOn ;
11819: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11823: LD_INT 56
11825: PPUSH
11826: LD_INT 81
11828: PPUSH
11829: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11833: LD_EXP 26
11837: PPUSH
11838: LD_STRING DK-Rbase-5
11840: PPUSH
11841: CALL_OW 88
// if IsOk ( Givi ) then
11845: LD_EXP 22
11849: PPUSH
11850: CALL_OW 302
11854: IFFALSE 11928
// begin Say ( Givi , DG-Rbase-6 ) ;
11856: LD_EXP 22
11860: PPUSH
11861: LD_STRING DG-Rbase-6
11863: PPUSH
11864: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11868: LD_EXP 22
11872: PPUSH
11873: LD_STRING DG-Rbase-7
11875: PPUSH
11876: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11880: LD_EXP 26
11884: PPUSH
11885: LD_STRING DK-Rbase-8
11887: PPUSH
11888: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11892: LD_EXP 22
11896: PPUSH
11897: LD_STRING DG-Rbase-9
11899: PPUSH
11900: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11904: LD_EXP 22
11908: PPUSH
11909: LD_STRING DG-Rbase-10
11911: PPUSH
11912: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11916: LD_EXP 26
11920: PPUSH
11921: LD_STRING DK-Rbase-11
11923: PPUSH
11924: CALL_OW 88
// end ; DialogueOff ;
11928: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11932: LD_ADDR_VAR 0 1
11936: PUSH
11937: LD_INT 12
11939: PPUSH
11940: LD_INT 22
11942: PUSH
11943: LD_INT 3
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 21
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PPUSH
11964: CALL_OW 70
11968: PUSH
11969: FOR_IN
11970: IFFALSE 11986
// SetSide ( i , 2 ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_INT 2
11979: PPUSH
11980: CALL_OW 235
11984: GO 11969
11986: POP
11987: POP
// westBaseCaptured := true ;
11988: LD_ADDR_EXP 9
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11996: LD_INT 0
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 324
// end ;
12009: PPOPN 1
12011: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12012: LD_EXP 38
12016: NOT
12017: PUSH
12018: LD_INT 10
12020: PPUSH
12021: CALL_OW 255
12025: PUSH
12026: LD_INT 2
12028: EQUAL
12029: OR
12030: IFFALSE 12167
12032: GO 12034
12034: DISABLE
// begin DialogueOn ;
12035: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12039: LD_EXP 21
12043: PPUSH
12044: LD_STRING DH-Goal-1
12046: PPUSH
12047: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12051: LD_EXP 29
12055: PPUSH
12056: LD_STRING DShar-Goal-2
12058: PPUSH
12059: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12063: LD_EXP 21
12067: PPUSH
12068: LD_STRING DH-Goal-3
12070: PPUSH
12071: CALL_OW 88
// if reinforcementsAllowed then
12075: LD_EXP 14
12079: IFFALSE 12105
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12081: LD_EXP 29
12085: PPUSH
12086: LD_STRING DShar-Goal-4
12088: PPUSH
12089: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12093: LD_EXP 21
12097: PPUSH
12098: LD_STRING DH-Goal-5
12100: PPUSH
12101: CALL_OW 88
// end ; DialogueOff ;
12105: CALL_OW 7
// eastBaseCaptured := true ;
12109: LD_ADDR_EXP 10
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12117: LD_STRING BaseCaptured
12119: PPUSH
12120: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12124: LD_INT 10
12126: PPUSH
12127: LD_INT 2
12129: PPUSH
12130: CALL_OW 235
// if not reinforcementsAllowed then
12134: LD_EXP 14
12138: NOT
12139: IFFALSE 12143
// exit ;
12141: GO 12167
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12143: LD_INT 21000
12145: PUSH
12146: LD_INT 1050
12148: NEG
12149: PPUSH
12150: LD_INT 1050
12152: PPUSH
12153: CALL_OW 12
12157: PLUS
12158: PPUSH
12159: CALL_OW 67
// PrepareReinforcements ;
12163: CALL 2174 0 0
// end ;
12167: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12168: LD_INT 22
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: LD_INT 13
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 69
12196: IFFALSE 12213
12198: GO 12200
12200: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12201: LD_EXP 22
12205: PPUSH
12206: LD_STRING DG-Lab-1
12208: PPUSH
12209: CALL_OW 88
// end ;
12213: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12214: LD_INT 5
12216: PPUSH
12217: LD_INT 2
12219: PPUSH
12220: CALL_OW 321
12224: PUSH
12225: LD_INT 2
12227: EQUAL
12228: PUSH
12229: LD_EXP 22
12233: PPUSH
12234: CALL_OW 302
12238: AND
12239: IFFALSE 12300
12241: GO 12243
12243: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12244: LD_EXP 22
12248: PPUSH
12249: LD_STRING DG-Stim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12256: LD_EXP 21
12260: PPUSH
12261: LD_STRING DH-Stim-2
12263: PPUSH
12264: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12268: LD_EXP 22
12272: PPUSH
12273: LD_STRING DG-Stim-3
12275: PPUSH
12276: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12280: LD_EXP 21
12284: PPUSH
12285: LD_STRING DH-Stim-4
12287: PPUSH
12288: CALL_OW 88
// drugsResearched := true ;
12292: LD_ADDR_EXP 11
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// end ;
12300: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12301: LD_EXP 11
12305: IFFALSE 12617
12307: GO 12309
12309: DISABLE
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_EXP 21
12324: PUSH
12325: LD_EXP 22
12329: PUSH
12330: LD_EXP 30
12334: PUSH
12335: LD_EXP 28
12339: PUSH
12340: LD_EXP 26
12344: PUSH
12345: LD_EXP 27
12349: PUSH
12350: LD_EXP 32
12354: PUSH
12355: LD_EXP 25
12359: PUSH
12360: LD_EXP 23
12364: PUSH
12365: LD_EXP 24
12369: PUSH
12370: LD_EXP 33
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_STRING H
12395: PUSH
12396: LD_STRING G
12398: PUSH
12399: LD_STRING O
12401: PUSH
12402: LD_STRING Mar
12404: PUSH
12405: LD_STRING K
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: LD_STRING Ks
12413: PUSH
12414: LD_STRING Kam
12416: PUSH
12417: LD_STRING M
12419: PUSH
12420: LD_STRING I
12422: PUSH
12423: LD_STRING A
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12439: LD_INT 35
12441: PPUSH
12442: CALL_OW 67
// for i := tmp downto 1 do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: DOUBLE
12452: LD_VAR 0 2
12456: INC
12457: ST_TO_ADDR
12458: LD_INT 1
12460: PUSH
12461: FOR_DOWNTO
12462: IFFALSE 12608
// if GetLives ( tmp [ i ] ) < 250 then
12464: LD_VAR 0 2
12468: PUSH
12469: LD_VAR 0 1
12473: ARRAY
12474: PPUSH
12475: CALL_OW 256
12479: PUSH
12480: LD_INT 250
12482: LESS
12483: IFFALSE 12606
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12485: LD_ADDR_EXP 19
12489: PUSH
12490: LD_EXP 19
12494: PUSH
12495: LD_INT 1
12497: PLUS
12498: ST_TO_ADDR
// DialogueOn ;
12499: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12503: LD_VAR 0 2
12507: PUSH
12508: LD_VAR 0 1
12512: ARRAY
12513: PPUSH
12514: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12518: LD_VAR 0 2
12522: PUSH
12523: LD_VAR 0 1
12527: ARRAY
12528: PPUSH
12529: LD_STRING D
12531: PUSH
12532: LD_VAR 0 3
12536: PUSH
12537: LD_VAR 0 1
12541: ARRAY
12542: STR
12543: PUSH
12544: LD_STRING -Stim-a-1
12546: STR
12547: PPUSH
12548: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 3
12571: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_VAR 0 3
12581: PPUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: CALL_OW 3
12591: ST_TO_ADDR
// drugsTested := true ;
12592: LD_ADDR_EXP 6
12596: PUSH
12597: LD_INT 1
12599: ST_TO_ADDR
// DialogueOff ;
12600: CALL_OW 7
// break ;
12604: GO 12608
// end ;
12606: GO 12461
12608: POP
12609: POP
// until not tmp ;
12610: LD_VAR 0 2
12614: NOT
12615: IFFALSE 12439
// end ;
12617: PPOPN 3
12619: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12620: LD_INT 22
12622: PUSH
12623: LD_INT 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 34
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 33
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: AND
12678: IFFALSE 12691
12680: GO 12682
12682: DISABLE
// remoteControlConstructed := true ;
12683: LD_ADDR_EXP 12
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
12691: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12692: LD_EXP 12
12696: IFFALSE 12996
12698: GO 12700
12700: DISABLE
12701: LD_INT 0
12703: PPUSH
12704: PPUSH
12705: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12706: LD_ADDR_VAR 0 2
12710: PUSH
12711: LD_EXP 21
12715: PUSH
12716: LD_EXP 22
12720: PUSH
12721: LD_EXP 30
12725: PUSH
12726: LD_EXP 28
12730: PUSH
12731: LD_EXP 26
12735: PUSH
12736: LD_EXP 27
12740: PUSH
12741: LD_EXP 32
12745: PUSH
12746: LD_EXP 25
12750: PUSH
12751: LD_EXP 23
12755: PUSH
12756: LD_EXP 24
12760: PUSH
12761: LD_EXP 33
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12779: LD_ADDR_VAR 0 3
12783: PUSH
12784: LD_STRING H
12786: PUSH
12787: LD_STRING G
12789: PUSH
12790: LD_STRING O
12792: PUSH
12793: LD_STRING Mar
12795: PUSH
12796: LD_STRING K
12798: PUSH
12799: LD_STRING S
12801: PUSH
12802: LD_STRING Ks
12804: PUSH
12805: LD_STRING Kam
12807: PUSH
12808: LD_STRING M
12810: PUSH
12811: LD_STRING I
12813: PUSH
12814: LD_STRING A
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12830: LD_INT 35
12832: PPUSH
12833: CALL_OW 67
// for i := tmp downto 1 do
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: DOUBLE
12843: LD_VAR 0 2
12847: INC
12848: ST_TO_ADDR
12849: LD_INT 1
12851: PUSH
12852: FOR_DOWNTO
12853: IFFALSE 12987
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12855: LD_VAR 0 2
12859: PUSH
12860: LD_VAR 0 1
12864: ARRAY
12865: PPUSH
12866: CALL_OW 257
12870: PUSH
12871: LD_INT 3
12873: EQUAL
12874: PUSH
12875: LD_VAR 0 2
12879: PUSH
12880: LD_VAR 0 1
12884: ARRAY
12885: PPUSH
12886: CALL_OW 432
12890: AND
12891: IFFALSE 12985
// begin DialogueOn ;
12893: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12897: LD_VAR 0 2
12901: PUSH
12902: LD_VAR 0 1
12906: ARRAY
12907: PPUSH
12908: LD_STRING D
12910: PUSH
12911: LD_VAR 0 3
12915: PUSH
12916: LD_VAR 0 1
12920: ARRAY
12921: STR
12922: PUSH
12923: LD_STRING -RC-a-1
12925: STR
12926: PPUSH
12927: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 3
12950: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12951: LD_ADDR_VAR 0 3
12955: PUSH
12956: LD_VAR 0 3
12960: PPUSH
12961: LD_VAR 0 1
12965: PPUSH
12966: CALL_OW 3
12970: ST_TO_ADDR
// DialogueOff ;
12971: CALL_OW 7
// remoteControlTested := true ;
12975: LD_ADDR_EXP 7
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// break ;
12983: GO 12987
// end ;
12985: GO 12852
12987: POP
12988: POP
// until not tmp ;
12989: LD_VAR 0 2
12993: NOT
12994: IFFALSE 12830
// end ;
12996: PPOPN 3
12998: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12999: LD_EXP 7
13003: PUSH
13004: LD_EXP 28
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13043
13016: GO 13018
13018: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13019: LD_EXP 28
13023: PPUSH
13024: LD_STRING DMar-RC-a-2
13026: PPUSH
13027: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13031: LD_EXP 28
13035: PPUSH
13036: LD_STRING DMar-RC-a-3
13038: PPUSH
13039: CALL_OW 88
// end ;
13043: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13044: LD_EXP 14
13048: PUSH
13049: LD_EXP 21
13053: PPUSH
13054: LD_EXP 33
13058: PPUSH
13059: CALL_OW 296
13063: PUSH
13064: LD_INT 8
13066: LESS
13067: AND
13068: PUSH
13069: LD_INT 2
13071: PPUSH
13072: CALL_OW 463
13076: NOT
13077: AND
13078: PUSH
13079: LD_EXP 33
13083: PPUSH
13084: CALL_OW 302
13088: AND
13089: PUSH
13090: LD_EXP 21
13094: PPUSH
13095: CALL_OW 302
13099: AND
13100: IFFALSE 13278
13102: GO 13104
13104: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13105: LD_EXP 33
13109: PPUSH
13110: CALL_OW 310
13114: NOT
13115: IFFALSE 13131
// ComTurnUnit ( Aviradze , Heike ) ;
13117: LD_EXP 33
13121: PPUSH
13122: LD_EXP 21
13126: PPUSH
13127: CALL_OW 119
// if not IsInUnit ( Heike ) then
13131: LD_EXP 21
13135: PPUSH
13136: CALL_OW 310
13140: NOT
13141: IFFALSE 13157
// ComTurnUnit ( Heike , Aviradze ) ;
13143: LD_EXP 21
13147: PPUSH
13148: LD_EXP 33
13152: PPUSH
13153: CALL_OW 119
// wait ( 0 0$1 ) ;
13157: LD_INT 35
13159: PPUSH
13160: CALL_OW 67
// DialogueOn ;
13164: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13168: LD_EXP 33
13172: PPUSH
13173: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13177: LD_EXP 21
13181: PPUSH
13182: LD_STRING DH-Beria-1
13184: PPUSH
13185: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13189: LD_EXP 33
13193: PPUSH
13194: LD_STRING DA-Beria-2
13196: PPUSH
13197: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13201: LD_EXP 21
13205: PPUSH
13206: LD_STRING DH-Beria-3
13208: PPUSH
13209: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13213: LD_EXP 33
13217: PPUSH
13218: LD_STRING DA-Beria-4
13220: PPUSH
13221: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13225: LD_EXP 33
13229: PPUSH
13230: LD_STRING DA-Beria-5
13232: PPUSH
13233: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13237: LD_EXP 33
13241: PPUSH
13242: LD_STRING DA-Beria-6
13244: PPUSH
13245: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13249: LD_EXP 21
13253: PPUSH
13254: LD_STRING DA-Beria-7
13256: PPUSH
13257: CALL_OW 88
// DialogueOff ;
13261: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13265: LD_INT 52
13267: PPUSH
13268: LD_INT 2
13270: PPUSH
13271: LD_INT 1
13273: PPUSH
13274: CALL_OW 322
// end ;
13278: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13279: LD_EXP 26
13283: PPUSH
13284: CALL_OW 300
13288: PUSH
13289: LD_EXP 26
13293: PPUSH
13294: CALL_OW 256
13298: PUSH
13299: LD_INT 10
13301: LESS
13302: AND
13303: IFFALSE 13340
13305: GO 13307
13307: DISABLE
// begin DialogueOn ;
13308: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13312: LD_EXP 26
13316: PPUSH
13317: LD_STRING DK-Kdeath-1
13319: PPUSH
13320: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13324: LD_EXP 21
13328: PPUSH
13329: LD_STRING DH-Kdeath-2
13331: PPUSH
13332: CALL_OW 88
// DialogueOff ;
13336: CALL_OW 7
// end ;
13340: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13341: LD_INT 2
13343: PPUSH
13344: LD_EXP 39
13348: PPUSH
13349: CALL 1298 0 2
13353: IFFALSE 13370
13355: GO 13357
13357: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13358: LD_EXP 21
13362: PPUSH
13363: LD_STRING DH-Obj-1
13365: PPUSH
13366: CALL_OW 88
13370: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13371: LD_INT 2
13373: PPUSH
13374: LD_EXP 40
13378: PPUSH
13379: CALL 1298 0 2
13383: IFFALSE 13400
13385: GO 13387
13387: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13388: LD_EXP 21
13392: PPUSH
13393: LD_STRING DH-Obj-a-1
13395: PPUSH
13396: CALL_OW 88
13400: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13401: LD_EXP 10
13405: PUSH
13406: LD_OWVAR 1
13410: PUSH
13411: LD_INT 23100
13413: PUSH
13414: LD_INT 22050
13416: PUSH
13417: LD_INT 21000
13419: PUSH
13420: LD_INT 19950
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: LD_OWVAR 67
13433: ARRAY
13434: GREATEREQUAL
13435: OR
13436: IFFALSE 13462
13438: GO 13440
13440: DISABLE
// begin if eastBaseCaptured then
13441: LD_EXP 10
13445: IFFALSE 13454
// wait ( 2 2$00 ) ;
13447: LD_INT 4200
13449: PPUSH
13450: CALL_OW 67
// convoyStarted := true ;
13454: LD_ADDR_EXP 17
13458: PUSH
13459: LD_INT 1
13461: ST_TO_ADDR
// end ;
13462: END
// every 0 0$1 trigger convoyStarted do
13463: LD_EXP 17
13467: IFFALSE 13558
13469: GO 13471
13471: DISABLE
// begin DialogueOn ;
13472: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13476: LD_EXP 29
13480: PPUSH
13481: LD_STRING DShar-Convoy-1
13483: PPUSH
13484: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13488: LD_EXP 21
13492: PPUSH
13493: LD_STRING DH-Convoy-2
13495: PPUSH
13496: CALL_OW 88
// DialogueOff ;
13500: CALL_OW 7
// wait ( 0 0$10 ) ;
13504: LD_INT 350
13506: PPUSH
13507: CALL_OW 67
// PrepareConvoy ;
13511: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13515: LD_INT 5250
13517: PPUSH
13518: LD_INT 11550
13520: PPUSH
13521: CALL_OW 12
13525: PPUSH
13526: CALL_OW 67
// PrepareConvoy ;
13530: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13534: LD_ADDR_EXP 16
13538: PUSH
13539: LD_EXP 16
13543: PUSH
13544: LD_INT 1
13546: MINUS
13547: ST_TO_ADDR
// until convoyCounter <= 0 ;
13548: LD_EXP 16
13552: PUSH
13553: LD_INT 0
13555: LESSEQUAL
13556: IFFALSE 13515
// end ;
13558: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13559: LD_EXP 15
13563: PUSH
13564: LD_INT 10
13566: GREATEREQUAL
13567: IFFALSE 13584
13569: GO 13571
13571: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13572: LD_EXP 31
13576: PPUSH
13577: LD_STRING DOm-Fail-1
13579: PPUSH
13580: CALL_OW 94
13584: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13585: LD_EXP 39
13589: NOT
13590: PUSH
13591: LD_EXP 40
13595: NOT
13596: AND
13597: IFFALSE 13609
13599: GO 13601
13601: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13602: LD_STRING RaiderDone
13604: PPUSH
13605: CALL_OW 337
13609: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13610: LD_INT 22
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 33
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: PUSH
13639: LD_INT 3
13641: GREATEREQUAL
13642: PUSH
13643: LD_INT 22
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 34
13655: PUSH
13656: LD_INT 31
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL_OW 69
13671: PUSH
13672: LD_INT 2
13674: GREATEREQUAL
13675: AND
13676: IFFALSE 13688
13678: GO 13680
13680: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13681: LD_STRING RemoteControlDone
13683: PPUSH
13684: CALL_OW 337
13688: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13689: LD_EXP 16
13693: PUSH
13694: LD_INT 1
13696: LESS
13697: PUSH
13698: LD_EXP 41
13702: PPUSH
13703: LD_INT 52
13705: PUSH
13706: EMPTY
13707: LIST
13708: PUSH
13709: LD_INT 21
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PPUSH
13723: CALL_OW 72
13727: NOT
13728: AND
13729: PUSH
13730: LD_OWVAR 1
13734: PUSH
13735: LD_INT 126000
13737: GREATEREQUAL
13738: OR
13739: IFFALSE 14924
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
13748: PPUSH
13749: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13750: LD_STRING ReinforcementsDone
13752: PPUSH
13753: CALL_OW 337
// music_class := music_victory ;
13757: LD_ADDR_OWVAR 72
13761: PUSH
13762: LD_INT 4
13764: ST_TO_ADDR
// if tick <= 45 45$00 then
13765: LD_OWVAR 1
13769: PUSH
13770: LD_INT 94500
13772: LESSEQUAL
13773: IFFALSE 13782
// SetAchievement ( ACH_HSPEED_5 ) ;
13775: LD_STRING ACH_HSPEED_5
13777: PPUSH
13778: CALL_OW 543
// InGameOn ;
13782: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13786: LD_EXP 21
13790: PPUSH
13791: LD_STRING DH-end-1
13793: PPUSH
13794: CALL_OW 88
// wait ( 0 0$2 ) ;
13798: LD_INT 70
13800: PPUSH
13801: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13805: LD_EXP 29
13809: PPUSH
13810: LD_STRING DShar-end-2
13812: PPUSH
13813: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13817: LD_EXP 39
13821: NOT
13822: PUSH
13823: LD_EXP 40
13827: NOT
13828: AND
13829: IFFALSE 13845
// begin Say ( Heike , DH-end-3 ) ;
13831: LD_EXP 21
13835: PPUSH
13836: LD_STRING DH-end-3
13838: PPUSH
13839: CALL_OW 88
// end else
13843: GO 13942
// begin Say ( Heike , DH-end-a-3 ) ;
13845: LD_EXP 21
13849: PPUSH
13850: LD_STRING DH-end-a-3
13852: PPUSH
13853: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13857: LD_EXP 29
13861: PPUSH
13862: LD_STRING DShar-end-a-4
13864: PPUSH
13865: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13869: LD_EXP 21
13873: PPUSH
13874: LD_STRING DH-end-a-5
13876: PPUSH
13877: CALL_OW 88
// InGameOff ;
13881: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13885: LD_INT 35
13887: PPUSH
13888: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13892: LD_INT 22
13894: PUSH
13895: LD_INT 3
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PUSH
13921: LD_INT 0
13923: EQUAL
13924: IFFALSE 13885
// InGameOn ;
13926: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13930: LD_EXP 21
13934: PPUSH
13935: LD_STRING DH-end-a-6
13937: PPUSH
13938: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13942: LD_EXP 29
13946: PPUSH
13947: LD_STRING DShar-end-3
13949: PPUSH
13950: CALL_OW 94
// if not flamethrowerBuilt then
13954: LD_EXP 20
13958: NOT
13959: IFFALSE 13968
// SetAchievement ( ACH_FIRE ) ;
13961: LD_STRING ACH_FIRE
13963: PPUSH
13964: CALL_OW 543
// if drugsTested then
13968: LD_EXP 6
13972: IFFALSE 13986
// AddMedal ( med1 , 1 ) else
13974: LD_STRING med1
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 101
13984: GO 14026
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13986: LD_INT 5
13988: PPUSH
13989: LD_INT 2
13991: PPUSH
13992: CALL_OW 321
13996: PUSH
13997: LD_INT 2
13999: EQUAL
14000: IFFALSE 14015
// AddMedal ( med1 , - 1 ) else
14002: LD_STRING med1
14004: PPUSH
14005: LD_INT 1
14007: NEG
14008: PPUSH
14009: CALL_OW 101
14013: GO 14026
// AddMedal ( med1 , - 2 ) ;
14015: LD_STRING med1
14017: PPUSH
14018: LD_INT 2
14020: NEG
14021: PPUSH
14022: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14026: LD_INT 22
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 33
14038: PUSH
14039: LD_INT 2
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: PUSH
14055: LD_INT 3
14057: GREATEREQUAL
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 34
14071: PUSH
14072: LD_INT 31
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 69
14087: PUSH
14088: LD_INT 1
14090: GREATEREQUAL
14091: AND
14092: IFFALSE 14106
// AddMedal ( med2 , 1 ) else
14094: LD_STRING med2
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: CALL_OW 101
14104: GO 14117
// AddMedal ( med2 , - 1 ) ;
14106: LD_STRING med2
14108: PPUSH
14109: LD_INT 1
14111: NEG
14112: PPUSH
14113: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14117: LD_EXP 15
14121: PUSH
14122: LD_INT 10
14124: PUSH
14125: LD_INT 8
14127: PUSH
14128: LD_INT 6
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: PUSH
14140: LD_OWVAR 67
14144: ARRAY
14145: LESS
14146: IFFALSE 14160
// AddMedal ( med3 , 1 ) else
14148: LD_STRING med3
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 101
14158: GO 14171
// AddMedal ( med3 , - 1 ) ;
14160: LD_STRING med3
14162: PPUSH
14163: LD_INT 1
14165: NEG
14166: PPUSH
14167: CALL_OW 101
// GiveMedals ( MAIN ) ;
14171: LD_STRING MAIN
14173: PPUSH
14174: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14178: LD_INT 22
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 23
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PPUSH
14213: CALL_OW 69
14217: PPUSH
14218: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14222: LD_EXP 15
14226: PPUSH
14227: LD_STRING 05_ConvoySavedCounter
14229: PPUSH
14230: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14234: LD_EXP 13
14238: PPUSH
14239: LD_STRING 05_Radar
14241: PPUSH
14242: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14246: LD_EXP 6
14250: PPUSH
14251: LD_STRING 05_DrugsTested
14253: PPUSH
14254: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14258: LD_INT 22
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 33
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: PUSH
14287: LD_INT 3
14289: GREATEREQUAL
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_INT 2
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 34
14303: PUSH
14304: LD_INT 31
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PPUSH
14315: CALL_OW 69
14319: PUSH
14320: LD_INT 2
14322: GREATEREQUAL
14323: AND
14324: PPUSH
14325: LD_STRING 05_RemoteControl
14327: PPUSH
14328: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14332: LD_ADDR_VAR 0 2
14336: PUSH
14337: LD_INT 22
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 21
14349: PUSH
14350: LD_INT 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if tmp then
14366: LD_VAR 0 2
14370: IFFALSE 14489
// begin vehs := [ ] ;
14372: LD_ADDR_VAR 0 4
14376: PUSH
14377: EMPTY
14378: ST_TO_ADDR
// for i in tmp do
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_VAR 0 2
14388: PUSH
14389: FOR_IN
14390: IFFALSE 14475
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14392: LD_ADDR_VAR 0 4
14396: PUSH
14397: LD_VAR 0 4
14401: PPUSH
14402: LD_VAR 0 4
14406: PUSH
14407: LD_INT 1
14409: PLUS
14410: PPUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 265
14420: PUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 262
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 263
14440: PUSH
14441: LD_VAR 0 1
14445: PPUSH
14446: CALL_OW 264
14450: PUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 248
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 1
14472: ST_TO_ADDR
14473: GO 14389
14475: POP
14476: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14477: LD_VAR 0 4
14481: PPUSH
14482: LD_STRING 05_Vehicles
14484: PPUSH
14485: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14489: LD_ADDR_VAR 0 2
14493: PUSH
14494: LD_INT 25
14496: PPUSH
14497: LD_INT 21
14499: PUSH
14500: LD_INT 3
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 70
14511: ST_TO_ADDR
// tmp2 := [ ] ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: EMPTY
14518: ST_TO_ADDR
// if tmp then
14519: LD_VAR 0 2
14523: IFFALSE 14676
// begin for i in tmp do
14525: LD_ADDR_VAR 0 1
14529: PUSH
14530: LD_VAR 0 2
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14662
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14538: LD_ADDR_VAR 0 3
14542: PUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_VAR 0 1
14552: PPUSH
14553: CALL_OW 266
14557: PUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 250
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 251
14577: PUSH
14578: LD_VAR 0 1
14582: PPUSH
14583: CALL_OW 254
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 248
14597: PUSH
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 267
14607: PUSH
14608: LD_VAR 0 1
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 268
14620: PUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_INT 2
14628: PPUSH
14629: CALL_OW 268
14633: PUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 269
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL 72526 0 2
14659: ST_TO_ADDR
14660: GO 14535
14662: POP
14663: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_STRING 05_Buildings
14671: PPUSH
14672: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14676: LD_EXP 21
14680: PPUSH
14681: LD_STRING 05_Heike
14683: PPUSH
14684: CALL_OW 38
// if Aviradze then
14688: LD_EXP 33
14692: IFFALSE 14706
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14694: LD_EXP 33
14698: PPUSH
14699: LD_STRING 05_Aviradze
14701: PPUSH
14702: CALL_OW 38
// if Ibrahim then
14706: LD_EXP 24
14710: IFFALSE 14724
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14712: LD_EXP 24
14716: PPUSH
14717: LD_STRING 05_Ibrahim
14719: PPUSH
14720: CALL_OW 38
// if Kamil then
14724: LD_EXP 25
14728: IFFALSE 14742
// SaveCharacters ( Kamil , 05_Kamil ) ;
14730: LD_EXP 25
14734: PPUSH
14735: LD_STRING 05_Kamil
14737: PPUSH
14738: CALL_OW 38
// if Sophia then
14742: LD_EXP 27
14746: IFFALSE 14760
// SaveCharacters ( Sophia , 05_Sophia ) ;
14748: LD_EXP 27
14752: PPUSH
14753: LD_STRING 05_Sophia
14755: PPUSH
14756: CALL_OW 38
// if Kaia then
14760: LD_EXP 26
14764: IFFALSE 14778
// SaveCharacters ( Kaia , 05_Kaia ) ;
14766: LD_EXP 26
14770: PPUSH
14771: LD_STRING 05_Kaia
14773: PPUSH
14774: CALL_OW 38
// if Givi then
14778: LD_EXP 22
14782: IFFALSE 14796
// SaveCharacters ( Givi , 05_Givi ) ;
14784: LD_EXP 22
14788: PPUSH
14789: LD_STRING 05_Givi
14791: PPUSH
14792: CALL_OW 38
// if Mike then
14796: LD_EXP 23
14800: IFFALSE 14814
// SaveCharacters ( Mike , 05_Mike ) ;
14802: LD_EXP 23
14806: PPUSH
14807: LD_STRING 05_Mike
14809: PPUSH
14810: CALL_OW 38
// if Markov then
14814: LD_EXP 28
14818: IFFALSE 14832
// SaveCharacters ( Markov , 05_Markov ) ;
14820: LD_EXP 28
14824: PPUSH
14825: LD_STRING 05_Markov
14827: PPUSH
14828: CALL_OW 38
// if Kurt then
14832: LD_EXP 32
14836: IFFALSE 14850
// SaveCharacters ( Kurt , 05_Kurt ) ;
14838: LD_EXP 32
14842: PPUSH
14843: LD_STRING 05_Kurt
14845: PPUSH
14846: CALL_OW 38
// if heikeSecondSquad then
14850: LD_EXP 34
14854: IFFALSE 14868
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14856: LD_EXP 34
14860: PPUSH
14861: LD_STRING 05_others
14863: PPUSH
14864: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 23
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: ST_TO_ADDR
// if tmp then
14902: LD_VAR 0 2
14906: IFFALSE 14920
// SaveCharacters ( tmp , 05_apes ) ;
14908: LD_VAR 0 2
14912: PPUSH
14913: LD_STRING 05_apes
14915: PPUSH
14916: CALL_OW 38
// YouWin ;
14920: CALL_OW 103
// end ; end_of_file
14924: PPOPN 4
14926: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14927: LD_EXP 9
14931: PUSH
14932: LD_INT 13
14934: PPUSH
14935: LD_INT 1
14937: PPUSH
14938: CALL_OW 287
14942: PUSH
14943: LD_INT 25
14945: LESS
14946: AND
14947: IFFALSE 14974
14949: GO 14951
14951: DISABLE
// begin enable ;
14952: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14953: LD_INT 1
14955: PPUSH
14956: LD_INT 5
14958: PPUSH
14959: CALL_OW 12
14963: PPUSH
14964: LD_INT 13
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 55
// end ; end_of_file
14974: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 264
14990: PUSH
14991: LD_INT 91
14993: EQUAL
14994: IFFALSE 15066
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14996: LD_INT 68
14998: PPUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 255
15008: PPUSH
15009: CALL_OW 321
15013: PUSH
15014: LD_INT 2
15016: EQUAL
15017: IFFALSE 15029
// eff := 70 else
15019: LD_ADDR_VAR 0 4
15023: PUSH
15024: LD_INT 70
15026: ST_TO_ADDR
15027: GO 15037
// eff := 30 ;
15029: LD_ADDR_VAR 0 4
15033: PUSH
15034: LD_INT 30
15036: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 250
15046: PPUSH
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 251
15056: PPUSH
15057: LD_VAR 0 4
15061: PPUSH
15062: CALL_OW 495
// end ; end ;
15066: LD_VAR 0 2
15070: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15071: LD_INT 0
15073: PPUSH
// end ;
15074: LD_VAR 0 4
15078: RET
// export function SOS_Command ( cmd ) ; begin
15079: LD_INT 0
15081: PPUSH
// end ;
15082: LD_VAR 0 2
15086: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15087: LD_INT 0
15089: PPUSH
// end ;
15090: LD_VAR 0 6
15094: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
// if not vehicle or not factory then
15099: LD_VAR 0 1
15103: NOT
15104: PUSH
15105: LD_VAR 0 2
15109: NOT
15110: OR
15111: IFFALSE 15115
// exit ;
15113: GO 15346
// if factoryWaypoints >= factory then
15115: LD_EXP 113
15119: PUSH
15120: LD_VAR 0 2
15124: GREATEREQUAL
15125: IFFALSE 15346
// if factoryWaypoints [ factory ] then
15127: LD_EXP 113
15131: PUSH
15132: LD_VAR 0 2
15136: ARRAY
15137: IFFALSE 15346
// begin if GetControl ( vehicle ) = control_manual then
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 263
15148: PUSH
15149: LD_INT 1
15151: EQUAL
15152: IFFALSE 15233
// begin driver := IsDrivenBy ( vehicle ) ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 311
15168: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15169: LD_VAR 0 4
15173: PPUSH
15174: LD_EXP 113
15178: PUSH
15179: LD_VAR 0 2
15183: ARRAY
15184: PUSH
15185: LD_INT 3
15187: ARRAY
15188: PPUSH
15189: LD_EXP 113
15193: PUSH
15194: LD_VAR 0 2
15198: ARRAY
15199: PUSH
15200: LD_INT 4
15202: ARRAY
15203: PPUSH
15204: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15208: LD_VAR 0 4
15212: PPUSH
15213: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15217: LD_VAR 0 4
15221: PPUSH
15222: LD_VAR 0 2
15226: PPUSH
15227: CALL_OW 180
// end else
15231: GO 15346
// if GetControl ( vehicle ) = control_remote then
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 263
15242: PUSH
15243: LD_INT 2
15245: EQUAL
15246: IFFALSE 15307
// begin wait ( 0 0$2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: CALL_OW 67
// if Connect ( vehicle ) then
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL 43164 0 1
15264: IFFALSE 15305
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_EXP 113
15275: PUSH
15276: LD_VAR 0 2
15280: ARRAY
15281: PUSH
15282: LD_INT 3
15284: ARRAY
15285: PPUSH
15286: LD_EXP 113
15290: PUSH
15291: LD_VAR 0 2
15295: ARRAY
15296: PUSH
15297: LD_INT 4
15299: ARRAY
15300: PPUSH
15301: CALL_OW 171
// end else
15305: GO 15346
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15307: LD_VAR 0 1
15311: PPUSH
15312: LD_EXP 113
15316: PUSH
15317: LD_VAR 0 2
15321: ARRAY
15322: PUSH
15323: LD_INT 3
15325: ARRAY
15326: PPUSH
15327: LD_EXP 113
15331: PUSH
15332: LD_VAR 0 2
15336: ARRAY
15337: PUSH
15338: LD_INT 4
15340: ARRAY
15341: PPUSH
15342: CALL_OW 171
// end ; end ;
15346: LD_VAR 0 3
15350: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15351: LD_INT 0
15353: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 250
15361: EQUAL
15362: PUSH
15363: LD_VAR 0 2
15367: PPUSH
15368: CALL_OW 264
15372: PUSH
15373: LD_INT 81
15375: EQUAL
15376: AND
15377: IFFALSE 15398
// MinerPlaceMine ( unit , x , y ) ;
15379: LD_VAR 0 2
15383: PPUSH
15384: LD_VAR 0 4
15388: PPUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: CALL 17783 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15398: LD_VAR 0 1
15402: PUSH
15403: LD_INT 251
15405: EQUAL
15406: PUSH
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 264
15416: PUSH
15417: LD_INT 81
15419: EQUAL
15420: AND
15421: IFFALSE 15442
// MinerDetonateMine ( unit , x , y ) ;
15423: LD_VAR 0 2
15427: PPUSH
15428: LD_VAR 0 4
15432: PPUSH
15433: LD_VAR 0 5
15437: PPUSH
15438: CALL 18058 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15442: LD_VAR 0 1
15446: PUSH
15447: LD_INT 252
15449: EQUAL
15450: PUSH
15451: LD_VAR 0 2
15455: PPUSH
15456: CALL_OW 264
15460: PUSH
15461: LD_INT 81
15463: EQUAL
15464: AND
15465: IFFALSE 15486
// MinerCreateMinefield ( unit , x , y ) ;
15467: LD_VAR 0 2
15471: PPUSH
15472: LD_VAR 0 4
15476: PPUSH
15477: LD_VAR 0 5
15481: PPUSH
15482: CALL 18475 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15486: LD_VAR 0 1
15490: PUSH
15491: LD_INT 253
15493: EQUAL
15494: PUSH
15495: LD_VAR 0 2
15499: PPUSH
15500: CALL_OW 257
15504: PUSH
15505: LD_INT 5
15507: EQUAL
15508: AND
15509: IFFALSE 15530
// ComBinocular ( unit , x , y ) ;
15511: LD_VAR 0 2
15515: PPUSH
15516: LD_VAR 0 4
15520: PPUSH
15521: LD_VAR 0 5
15525: PPUSH
15526: CALL 18844 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15530: LD_VAR 0 1
15534: PUSH
15535: LD_INT 254
15537: EQUAL
15538: PUSH
15539: LD_VAR 0 2
15543: PPUSH
15544: CALL_OW 264
15548: PUSH
15549: LD_INT 99
15551: EQUAL
15552: AND
15553: PUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: CALL_OW 263
15563: PUSH
15564: LD_INT 3
15566: EQUAL
15567: AND
15568: IFFALSE 15584
// HackDestroyVehicle ( unit , selectedUnit ) ;
15570: LD_VAR 0 2
15574: PPUSH
15575: LD_VAR 0 3
15579: PPUSH
15580: CALL 17147 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 255
15591: EQUAL
15592: PUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: CALL_OW 264
15602: PUSH
15603: LD_INT 14
15605: PUSH
15606: LD_INT 53
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: IN
15613: AND
15614: PUSH
15615: LD_VAR 0 4
15619: PPUSH
15620: LD_VAR 0 5
15624: PPUSH
15625: CALL_OW 488
15629: AND
15630: IFFALSE 15654
// CutTreeXYR ( unit , x , y , 12 ) ;
15632: LD_VAR 0 2
15636: PPUSH
15637: LD_VAR 0 4
15641: PPUSH
15642: LD_VAR 0 5
15646: PPUSH
15647: LD_INT 12
15649: PPUSH
15650: CALL 15717 0 4
// if cmd = 256 then
15654: LD_VAR 0 1
15658: PUSH
15659: LD_INT 256
15661: EQUAL
15662: IFFALSE 15683
// SetFactoryWaypoint ( unit , x , y ) ;
15664: LD_VAR 0 2
15668: PPUSH
15669: LD_VAR 0 4
15673: PPUSH
15674: LD_VAR 0 5
15678: PPUSH
15679: CALL 33747 0 3
// if cmd = 257 then
15683: LD_VAR 0 1
15687: PUSH
15688: LD_INT 257
15690: EQUAL
15691: IFFALSE 15712
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15693: LD_VAR 0 2
15697: PPUSH
15698: LD_VAR 0 4
15702: PPUSH
15703: LD_VAR 0 5
15707: PPUSH
15708: CALL 34109 0 3
// end ;
15712: LD_VAR 0 6
15716: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15717: LD_INT 0
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
15727: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15728: LD_VAR 0 1
15732: NOT
15733: PUSH
15734: LD_VAR 0 2
15738: PPUSH
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL_OW 488
15748: NOT
15749: OR
15750: PUSH
15751: LD_VAR 0 4
15755: NOT
15756: OR
15757: IFFALSE 15761
// exit ;
15759: GO 16101
// list := [ ] ;
15761: LD_ADDR_VAR 0 13
15765: PUSH
15766: EMPTY
15767: ST_TO_ADDR
// if x - r < 0 then
15768: LD_VAR 0 2
15772: PUSH
15773: LD_VAR 0 4
15777: MINUS
15778: PUSH
15779: LD_INT 0
15781: LESS
15782: IFFALSE 15794
// min_x := 0 else
15784: LD_ADDR_VAR 0 7
15788: PUSH
15789: LD_INT 0
15791: ST_TO_ADDR
15792: GO 15810
// min_x := x - r ;
15794: LD_ADDR_VAR 0 7
15798: PUSH
15799: LD_VAR 0 2
15803: PUSH
15804: LD_VAR 0 4
15808: MINUS
15809: ST_TO_ADDR
// if y - r < 0 then
15810: LD_VAR 0 3
15814: PUSH
15815: LD_VAR 0 4
15819: MINUS
15820: PUSH
15821: LD_INT 0
15823: LESS
15824: IFFALSE 15836
// min_y := 0 else
15826: LD_ADDR_VAR 0 8
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
15834: GO 15852
// min_y := y - r ;
15836: LD_ADDR_VAR 0 8
15840: PUSH
15841: LD_VAR 0 3
15845: PUSH
15846: LD_VAR 0 4
15850: MINUS
15851: ST_TO_ADDR
// max_x := x + r ;
15852: LD_ADDR_VAR 0 9
15856: PUSH
15857: LD_VAR 0 2
15861: PUSH
15862: LD_VAR 0 4
15866: PLUS
15867: ST_TO_ADDR
// max_y := y + r ;
15868: LD_ADDR_VAR 0 10
15872: PUSH
15873: LD_VAR 0 3
15877: PUSH
15878: LD_VAR 0 4
15882: PLUS
15883: ST_TO_ADDR
// for _x = min_x to max_x do
15884: LD_ADDR_VAR 0 11
15888: PUSH
15889: DOUBLE
15890: LD_VAR 0 7
15894: DEC
15895: ST_TO_ADDR
15896: LD_VAR 0 9
15900: PUSH
15901: FOR_TO
15902: IFFALSE 16019
// for _y = min_y to max_y do
15904: LD_ADDR_VAR 0 12
15908: PUSH
15909: DOUBLE
15910: LD_VAR 0 8
15914: DEC
15915: ST_TO_ADDR
15916: LD_VAR 0 10
15920: PUSH
15921: FOR_TO
15922: IFFALSE 16015
// begin if not ValidHex ( _x , _y ) then
15924: LD_VAR 0 11
15928: PPUSH
15929: LD_VAR 0 12
15933: PPUSH
15934: CALL_OW 488
15938: NOT
15939: IFFALSE 15943
// continue ;
15941: GO 15921
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15943: LD_VAR 0 11
15947: PPUSH
15948: LD_VAR 0 12
15952: PPUSH
15953: CALL_OW 351
15957: PUSH
15958: LD_VAR 0 11
15962: PPUSH
15963: LD_VAR 0 12
15967: PPUSH
15968: CALL_OW 554
15972: AND
15973: IFFALSE 16013
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15975: LD_ADDR_VAR 0 13
15979: PUSH
15980: LD_VAR 0 13
15984: PPUSH
15985: LD_VAR 0 13
15989: PUSH
15990: LD_INT 1
15992: PLUS
15993: PPUSH
15994: LD_VAR 0 11
15998: PUSH
15999: LD_VAR 0 12
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PPUSH
16008: CALL_OW 2
16012: ST_TO_ADDR
// end ;
16013: GO 15921
16015: POP
16016: POP
16017: GO 15901
16019: POP
16020: POP
// if not list then
16021: LD_VAR 0 13
16025: NOT
16026: IFFALSE 16030
// exit ;
16028: GO 16101
// for i in list do
16030: LD_ADDR_VAR 0 6
16034: PUSH
16035: LD_VAR 0 13
16039: PUSH
16040: FOR_IN
16041: IFFALSE 16099
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16043: LD_VAR 0 1
16047: PPUSH
16048: LD_STRING M
16050: PUSH
16051: LD_VAR 0 6
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PUSH
16060: LD_VAR 0 6
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PUSH
16069: LD_INT 0
16071: PUSH
16072: LD_INT 0
16074: PUSH
16075: LD_INT 0
16077: PUSH
16078: LD_INT 0
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: PPUSH
16093: CALL_OW 447
16097: GO 16040
16099: POP
16100: POP
// end ;
16101: LD_VAR 0 5
16105: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16106: LD_EXP 44
16110: NOT
16111: IFFALSE 16161
16113: GO 16115
16115: DISABLE
// begin initHack := true ;
16116: LD_ADDR_EXP 44
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// hackTanks := [ ] ;
16124: LD_ADDR_EXP 45
16128: PUSH
16129: EMPTY
16130: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16131: LD_ADDR_EXP 46
16135: PUSH
16136: EMPTY
16137: ST_TO_ADDR
// hackLimit := 3 ;
16138: LD_ADDR_EXP 47
16142: PUSH
16143: LD_INT 3
16145: ST_TO_ADDR
// hackDist := 12 ;
16146: LD_ADDR_EXP 48
16150: PUSH
16151: LD_INT 12
16153: ST_TO_ADDR
// hackCounter := [ ] ;
16154: LD_ADDR_EXP 49
16158: PUSH
16159: EMPTY
16160: ST_TO_ADDR
// end ;
16161: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16162: LD_EXP 44
16166: PUSH
16167: LD_INT 34
16169: PUSH
16170: LD_INT 99
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: AND
16182: IFFALSE 16435
16184: GO 16186
16186: DISABLE
16187: LD_INT 0
16189: PPUSH
16190: PPUSH
// begin enable ;
16191: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16192: LD_ADDR_VAR 0 1
16196: PUSH
16197: LD_INT 34
16199: PUSH
16200: LD_INT 99
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: PUSH
16212: FOR_IN
16213: IFFALSE 16433
// begin if not i in hackTanks then
16215: LD_VAR 0 1
16219: PUSH
16220: LD_EXP 45
16224: IN
16225: NOT
16226: IFFALSE 16309
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16228: LD_ADDR_EXP 45
16232: PUSH
16233: LD_EXP 45
16237: PPUSH
16238: LD_EXP 45
16242: PUSH
16243: LD_INT 1
16245: PLUS
16246: PPUSH
16247: LD_VAR 0 1
16251: PPUSH
16252: CALL_OW 1
16256: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16257: LD_ADDR_EXP 46
16261: PUSH
16262: LD_EXP 46
16266: PPUSH
16267: LD_EXP 46
16271: PUSH
16272: LD_INT 1
16274: PLUS
16275: PPUSH
16276: EMPTY
16277: PPUSH
16278: CALL_OW 1
16282: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16283: LD_ADDR_EXP 49
16287: PUSH
16288: LD_EXP 49
16292: PPUSH
16293: LD_EXP 49
16297: PUSH
16298: LD_INT 1
16300: PLUS
16301: PPUSH
16302: EMPTY
16303: PPUSH
16304: CALL_OW 1
16308: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16309: LD_VAR 0 1
16313: PPUSH
16314: CALL_OW 302
16318: NOT
16319: IFFALSE 16332
// begin HackUnlinkAll ( i ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL 16438 0 1
// continue ;
16330: GO 16212
// end ; HackCheckCapturedStatus ( i ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: CALL 16881 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16341: LD_ADDR_VAR 0 2
16345: PUSH
16346: LD_INT 81
16348: PUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 255
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 33
16365: PUSH
16366: LD_INT 3
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 91
16375: PUSH
16376: LD_VAR 0 1
16380: PUSH
16381: LD_EXP 48
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 50
16393: PUSH
16394: EMPTY
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 69
16407: ST_TO_ADDR
// if not tmp then
16408: LD_VAR 0 2
16412: NOT
16413: IFFALSE 16417
// continue ;
16415: GO 16212
// HackLink ( i , tmp ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL 16574 0 2
// end ;
16431: GO 16212
16433: POP
16434: POP
// end ;
16435: PPOPN 2
16437: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16438: LD_INT 0
16440: PPUSH
16441: PPUSH
16442: PPUSH
// if not hack in hackTanks then
16443: LD_VAR 0 1
16447: PUSH
16448: LD_EXP 45
16452: IN
16453: NOT
16454: IFFALSE 16458
// exit ;
16456: GO 16569
// index := GetElementIndex ( hackTanks , hack ) ;
16458: LD_ADDR_VAR 0 4
16462: PUSH
16463: LD_EXP 45
16467: PPUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL 39980 0 2
16477: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16478: LD_EXP 46
16482: PUSH
16483: LD_VAR 0 4
16487: ARRAY
16488: IFFALSE 16569
// begin for i in hackTanksCaptured [ index ] do
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_EXP 46
16499: PUSH
16500: LD_VAR 0 4
16504: ARRAY
16505: PUSH
16506: FOR_IN
16507: IFFALSE 16533
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 1
16516: ARRAY
16517: PPUSH
16518: LD_VAR 0 3
16522: PUSH
16523: LD_INT 2
16525: ARRAY
16526: PPUSH
16527: CALL_OW 235
16531: GO 16506
16533: POP
16534: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16535: LD_ADDR_EXP 46
16539: PUSH
16540: LD_EXP 46
16544: PPUSH
16545: LD_VAR 0 4
16549: PPUSH
16550: EMPTY
16551: PPUSH
16552: CALL_OW 1
16556: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16557: LD_VAR 0 1
16561: PPUSH
16562: LD_INT 0
16564: PPUSH
16565: CALL_OW 505
// end ; end ;
16569: LD_VAR 0 2
16573: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16574: LD_INT 0
16576: PPUSH
16577: PPUSH
16578: PPUSH
// if not hack in hackTanks or not vehicles then
16579: LD_VAR 0 1
16583: PUSH
16584: LD_EXP 45
16588: IN
16589: NOT
16590: PUSH
16591: LD_VAR 0 2
16595: NOT
16596: OR
16597: IFFALSE 16601
// exit ;
16599: GO 16876
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_VAR 0 2
16615: PPUSH
16616: LD_INT 1
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL 40630 0 4
16626: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16627: LD_ADDR_VAR 0 5
16631: PUSH
16632: LD_EXP 45
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL 39980 0 2
16646: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16647: LD_EXP 46
16651: PUSH
16652: LD_VAR 0 5
16656: ARRAY
16657: PUSH
16658: LD_EXP 47
16662: LESS
16663: IFFALSE 16852
// begin for i := 1 to vehicles do
16665: LD_ADDR_VAR 0 4
16669: PUSH
16670: DOUBLE
16671: LD_INT 1
16673: DEC
16674: ST_TO_ADDR
16675: LD_VAR 0 2
16679: PUSH
16680: FOR_TO
16681: IFFALSE 16850
// begin if hackTanksCaptured [ index ] = hackLimit then
16683: LD_EXP 46
16687: PUSH
16688: LD_VAR 0 5
16692: ARRAY
16693: PUSH
16694: LD_EXP 47
16698: EQUAL
16699: IFFALSE 16703
// break ;
16701: GO 16850
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16703: LD_ADDR_EXP 49
16707: PUSH
16708: LD_EXP 49
16712: PPUSH
16713: LD_VAR 0 5
16717: PPUSH
16718: LD_EXP 49
16722: PUSH
16723: LD_VAR 0 5
16727: ARRAY
16728: PUSH
16729: LD_INT 1
16731: PLUS
16732: PPUSH
16733: CALL_OW 1
16737: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16738: LD_ADDR_EXP 46
16742: PUSH
16743: LD_EXP 46
16747: PPUSH
16748: LD_VAR 0 5
16752: PUSH
16753: LD_EXP 46
16757: PUSH
16758: LD_VAR 0 5
16762: ARRAY
16763: PUSH
16764: LD_INT 1
16766: PLUS
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PPUSH
16772: LD_VAR 0 2
16776: PUSH
16777: LD_VAR 0 4
16781: ARRAY
16782: PUSH
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 4
16792: ARRAY
16793: PPUSH
16794: CALL_OW 255
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL 40195 0 3
16807: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16808: LD_VAR 0 2
16812: PUSH
16813: LD_VAR 0 4
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 255
16828: PPUSH
16829: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16833: LD_VAR 0 2
16837: PUSH
16838: LD_VAR 0 4
16842: ARRAY
16843: PPUSH
16844: CALL_OW 141
// end ;
16848: GO 16680
16850: POP
16851: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16852: LD_VAR 0 1
16856: PPUSH
16857: LD_EXP 46
16861: PUSH
16862: LD_VAR 0 5
16866: ARRAY
16867: PUSH
16868: LD_INT 0
16870: PLUS
16871: PPUSH
16872: CALL_OW 505
// end ;
16876: LD_VAR 0 3
16880: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16881: LD_INT 0
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
// if not hack in hackTanks then
16887: LD_VAR 0 1
16891: PUSH
16892: LD_EXP 45
16896: IN
16897: NOT
16898: IFFALSE 16902
// exit ;
16900: GO 17142
// index := GetElementIndex ( hackTanks , hack ) ;
16902: LD_ADDR_VAR 0 4
16906: PUSH
16907: LD_EXP 45
16911: PPUSH
16912: LD_VAR 0 1
16916: PPUSH
16917: CALL 39980 0 2
16921: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: DOUBLE
16928: LD_EXP 46
16932: PUSH
16933: LD_VAR 0 4
16937: ARRAY
16938: INC
16939: ST_TO_ADDR
16940: LD_INT 1
16942: PUSH
16943: FOR_DOWNTO
16944: IFFALSE 17116
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16946: LD_ADDR_VAR 0 5
16950: PUSH
16951: LD_EXP 46
16955: PUSH
16956: LD_VAR 0 4
16960: ARRAY
16961: PUSH
16962: LD_VAR 0 3
16966: ARRAY
16967: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16968: LD_VAR 0 5
16972: PUSH
16973: LD_INT 1
16975: ARRAY
16976: PPUSH
16977: CALL_OW 302
16981: NOT
16982: PUSH
16983: LD_VAR 0 5
16987: PUSH
16988: LD_INT 1
16990: ARRAY
16991: PPUSH
16992: CALL_OW 255
16996: PUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 255
17006: NONEQUAL
17007: OR
17008: IFFALSE 17114
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17010: LD_VAR 0 5
17014: PUSH
17015: LD_INT 1
17017: ARRAY
17018: PPUSH
17019: CALL_OW 305
17023: PUSH
17024: LD_VAR 0 5
17028: PUSH
17029: LD_INT 1
17031: ARRAY
17032: PPUSH
17033: CALL_OW 255
17037: PUSH
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL_OW 255
17047: EQUAL
17048: AND
17049: IFFALSE 17073
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17051: LD_VAR 0 5
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: LD_VAR 0 5
17064: PUSH
17065: LD_INT 2
17067: ARRAY
17068: PPUSH
17069: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17073: LD_ADDR_EXP 46
17077: PUSH
17078: LD_EXP 46
17082: PPUSH
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_EXP 46
17092: PUSH
17093: LD_VAR 0 4
17097: ARRAY
17098: PPUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: CALL_OW 3
17108: PPUSH
17109: CALL_OW 1
17113: ST_TO_ADDR
// end ; end ;
17114: GO 16943
17116: POP
17117: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_EXP 46
17127: PUSH
17128: LD_VAR 0 4
17132: ARRAY
17133: PUSH
17134: LD_INT 0
17136: PLUS
17137: PPUSH
17138: CALL_OW 505
// end ;
17142: LD_VAR 0 2
17146: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
// if not hack in hackTanks then
17153: LD_VAR 0 1
17157: PUSH
17158: LD_EXP 45
17162: IN
17163: NOT
17164: IFFALSE 17168
// exit ;
17166: GO 17253
// index := GetElementIndex ( hackTanks , hack ) ;
17168: LD_ADDR_VAR 0 5
17172: PUSH
17173: LD_EXP 45
17177: PPUSH
17178: LD_VAR 0 1
17182: PPUSH
17183: CALL 39980 0 2
17187: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17188: LD_ADDR_VAR 0 4
17192: PUSH
17193: DOUBLE
17194: LD_INT 1
17196: DEC
17197: ST_TO_ADDR
17198: LD_EXP 46
17202: PUSH
17203: LD_VAR 0 5
17207: ARRAY
17208: PUSH
17209: FOR_TO
17210: IFFALSE 17251
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17212: LD_EXP 46
17216: PUSH
17217: LD_VAR 0 5
17221: ARRAY
17222: PUSH
17223: LD_VAR 0 4
17227: ARRAY
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PUSH
17233: LD_VAR 0 2
17237: EQUAL
17238: IFFALSE 17249
// KillUnit ( vehicle ) ;
17240: LD_VAR 0 2
17244: PPUSH
17245: CALL_OW 66
17249: GO 17209
17251: POP
17252: POP
// end ;
17253: LD_VAR 0 3
17257: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17258: LD_EXP 50
17262: NOT
17263: IFFALSE 17298
17265: GO 17267
17267: DISABLE
// begin initMiner := true ;
17268: LD_ADDR_EXP 50
17272: PUSH
17273: LD_INT 1
17275: ST_TO_ADDR
// minersList := [ ] ;
17276: LD_ADDR_EXP 51
17280: PUSH
17281: EMPTY
17282: ST_TO_ADDR
// minerMinesList := [ ] ;
17283: LD_ADDR_EXP 52
17287: PUSH
17288: EMPTY
17289: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17290: LD_ADDR_EXP 53
17294: PUSH
17295: LD_INT 5
17297: ST_TO_ADDR
// end ;
17298: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17299: LD_EXP 50
17303: PUSH
17304: LD_INT 34
17306: PUSH
17307: LD_INT 81
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PPUSH
17314: CALL_OW 69
17318: AND
17319: IFFALSE 17780
17321: GO 17323
17323: DISABLE
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
// begin enable ;
17330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17331: LD_ADDR_VAR 0 1
17335: PUSH
17336: LD_INT 34
17338: PUSH
17339: LD_INT 81
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PPUSH
17346: CALL_OW 69
17350: PUSH
17351: FOR_IN
17352: IFFALSE 17424
// begin if not i in minersList then
17354: LD_VAR 0 1
17358: PUSH
17359: LD_EXP 51
17363: IN
17364: NOT
17365: IFFALSE 17422
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17367: LD_ADDR_EXP 51
17371: PUSH
17372: LD_EXP 51
17376: PPUSH
17377: LD_EXP 51
17381: PUSH
17382: LD_INT 1
17384: PLUS
17385: PPUSH
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 1
17395: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17396: LD_ADDR_EXP 52
17400: PUSH
17401: LD_EXP 52
17405: PPUSH
17406: LD_EXP 52
17410: PUSH
17411: LD_INT 1
17413: PLUS
17414: PPUSH
17415: EMPTY
17416: PPUSH
17417: CALL_OW 1
17421: ST_TO_ADDR
// end end ;
17422: GO 17351
17424: POP
17425: POP
// for i := minerMinesList downto 1 do
17426: LD_ADDR_VAR 0 1
17430: PUSH
17431: DOUBLE
17432: LD_EXP 52
17436: INC
17437: ST_TO_ADDR
17438: LD_INT 1
17440: PUSH
17441: FOR_DOWNTO
17442: IFFALSE 17778
// begin if IsLive ( minersList [ i ] ) then
17444: LD_EXP 51
17448: PUSH
17449: LD_VAR 0 1
17453: ARRAY
17454: PPUSH
17455: CALL_OW 300
17459: IFFALSE 17487
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17461: LD_EXP 51
17465: PUSH
17466: LD_VAR 0 1
17470: ARRAY
17471: PPUSH
17472: LD_EXP 52
17476: PUSH
17477: LD_VAR 0 1
17481: ARRAY
17482: PPUSH
17483: CALL_OW 505
// if not minerMinesList [ i ] then
17487: LD_EXP 52
17491: PUSH
17492: LD_VAR 0 1
17496: ARRAY
17497: NOT
17498: IFFALSE 17502
// continue ;
17500: GO 17441
// for j := minerMinesList [ i ] downto 1 do
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: DOUBLE
17508: LD_EXP 52
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: INC
17519: ST_TO_ADDR
17520: LD_INT 1
17522: PUSH
17523: FOR_DOWNTO
17524: IFFALSE 17774
// begin side := GetSide ( minersList [ i ] ) ;
17526: LD_ADDR_VAR 0 3
17530: PUSH
17531: LD_EXP 51
17535: PUSH
17536: LD_VAR 0 1
17540: ARRAY
17541: PPUSH
17542: CALL_OW 255
17546: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17547: LD_ADDR_VAR 0 4
17551: PUSH
17552: LD_EXP 52
17556: PUSH
17557: LD_VAR 0 1
17561: ARRAY
17562: PUSH
17563: LD_VAR 0 2
17567: ARRAY
17568: PUSH
17569: LD_INT 1
17571: ARRAY
17572: PPUSH
17573: LD_EXP 52
17577: PUSH
17578: LD_VAR 0 1
17582: ARRAY
17583: PUSH
17584: LD_VAR 0 2
17588: ARRAY
17589: PUSH
17590: LD_INT 2
17592: ARRAY
17593: PPUSH
17594: CALL_OW 428
17598: ST_TO_ADDR
// if not tmp then
17599: LD_VAR 0 4
17603: NOT
17604: IFFALSE 17608
// continue ;
17606: GO 17523
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17608: LD_VAR 0 4
17612: PUSH
17613: LD_INT 81
17615: PUSH
17616: LD_VAR 0 3
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: IN
17630: PUSH
17631: LD_EXP 52
17635: PUSH
17636: LD_VAR 0 1
17640: ARRAY
17641: PUSH
17642: LD_VAR 0 2
17646: ARRAY
17647: PUSH
17648: LD_INT 1
17650: ARRAY
17651: PPUSH
17652: LD_EXP 52
17656: PUSH
17657: LD_VAR 0 1
17661: ARRAY
17662: PUSH
17663: LD_VAR 0 2
17667: ARRAY
17668: PUSH
17669: LD_INT 2
17671: ARRAY
17672: PPUSH
17673: CALL_OW 458
17677: AND
17678: IFFALSE 17772
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17680: LD_EXP 52
17684: PUSH
17685: LD_VAR 0 1
17689: ARRAY
17690: PUSH
17691: LD_VAR 0 2
17695: ARRAY
17696: PUSH
17697: LD_INT 1
17699: ARRAY
17700: PPUSH
17701: LD_EXP 52
17705: PUSH
17706: LD_VAR 0 1
17710: ARRAY
17711: PUSH
17712: LD_VAR 0 2
17716: ARRAY
17717: PUSH
17718: LD_INT 2
17720: ARRAY
17721: PPUSH
17722: LD_VAR 0 3
17726: PPUSH
17727: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17731: LD_ADDR_EXP 52
17735: PUSH
17736: LD_EXP 52
17740: PPUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_EXP 52
17750: PUSH
17751: LD_VAR 0 1
17755: ARRAY
17756: PPUSH
17757: LD_VAR 0 2
17761: PPUSH
17762: CALL_OW 3
17766: PPUSH
17767: CALL_OW 1
17771: ST_TO_ADDR
// end ; end ;
17772: GO 17523
17774: POP
17775: POP
// end ;
17776: GO 17441
17778: POP
17779: POP
// end ;
17780: PPOPN 4
17782: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
// result := false ;
17787: LD_ADDR_VAR 0 4
17791: PUSH
17792: LD_INT 0
17794: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL_OW 264
17804: PUSH
17805: LD_INT 81
17807: EQUAL
17808: NOT
17809: IFFALSE 17813
// exit ;
17811: GO 18053
// index := GetElementIndex ( minersList , unit ) ;
17813: LD_ADDR_VAR 0 5
17817: PUSH
17818: LD_EXP 51
17822: PPUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL 39980 0 2
17832: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17833: LD_EXP 52
17837: PUSH
17838: LD_VAR 0 5
17842: ARRAY
17843: PUSH
17844: LD_EXP 53
17848: GREATEREQUAL
17849: IFFALSE 17853
// exit ;
17851: GO 18053
// ComMoveXY ( unit , x , y ) ;
17853: LD_VAR 0 1
17857: PPUSH
17858: LD_VAR 0 2
17862: PPUSH
17863: LD_VAR 0 3
17867: PPUSH
17868: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17872: LD_INT 35
17874: PPUSH
17875: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17879: LD_VAR 0 1
17883: PPUSH
17884: LD_VAR 0 2
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: CALL 71335 0 3
17898: NOT
17899: PUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 314
17909: AND
17910: IFFALSE 17914
// exit ;
17912: GO 18053
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17914: LD_VAR 0 2
17918: PPUSH
17919: LD_VAR 0 3
17923: PPUSH
17924: CALL_OW 428
17928: PUSH
17929: LD_VAR 0 1
17933: EQUAL
17934: PUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 314
17944: NOT
17945: AND
17946: IFFALSE 17872
// PlaySoundXY ( x , y , PlantMine ) ;
17948: LD_VAR 0 2
17952: PPUSH
17953: LD_VAR 0 3
17957: PPUSH
17958: LD_STRING PlantMine
17960: PPUSH
17961: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17965: LD_VAR 0 2
17969: PPUSH
17970: LD_VAR 0 3
17974: PPUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 255
17984: PPUSH
17985: LD_INT 0
17987: PPUSH
17988: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17992: LD_ADDR_EXP 52
17996: PUSH
17997: LD_EXP 52
18001: PPUSH
18002: LD_VAR 0 5
18006: PUSH
18007: LD_EXP 52
18011: PUSH
18012: LD_VAR 0 5
18016: ARRAY
18017: PUSH
18018: LD_INT 1
18020: PLUS
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PPUSH
18026: LD_VAR 0 2
18030: PUSH
18031: LD_VAR 0 3
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL 40195 0 3
18044: ST_TO_ADDR
// result := true ;
18045: LD_ADDR_VAR 0 4
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
// end ;
18053: LD_VAR 0 4
18057: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18058: LD_INT 0
18060: PPUSH
18061: PPUSH
18062: PPUSH
// if not unit in minersList then
18063: LD_VAR 0 1
18067: PUSH
18068: LD_EXP 51
18072: IN
18073: NOT
18074: IFFALSE 18078
// exit ;
18076: GO 18470
// index := GetElementIndex ( minersList , unit ) ;
18078: LD_ADDR_VAR 0 6
18082: PUSH
18083: LD_EXP 51
18087: PPUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL 39980 0 2
18097: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18098: LD_ADDR_VAR 0 5
18102: PUSH
18103: DOUBLE
18104: LD_EXP 52
18108: PUSH
18109: LD_VAR 0 6
18113: ARRAY
18114: INC
18115: ST_TO_ADDR
18116: LD_INT 1
18118: PUSH
18119: FOR_DOWNTO
18120: IFFALSE 18281
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18122: LD_EXP 52
18126: PUSH
18127: LD_VAR 0 6
18131: ARRAY
18132: PUSH
18133: LD_VAR 0 5
18137: ARRAY
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PUSH
18143: LD_VAR 0 2
18147: EQUAL
18148: PUSH
18149: LD_EXP 52
18153: PUSH
18154: LD_VAR 0 6
18158: ARRAY
18159: PUSH
18160: LD_VAR 0 5
18164: ARRAY
18165: PUSH
18166: LD_INT 2
18168: ARRAY
18169: PUSH
18170: LD_VAR 0 3
18174: EQUAL
18175: AND
18176: IFFALSE 18279
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18178: LD_EXP 52
18182: PUSH
18183: LD_VAR 0 6
18187: ARRAY
18188: PUSH
18189: LD_VAR 0 5
18193: ARRAY
18194: PUSH
18195: LD_INT 1
18197: ARRAY
18198: PPUSH
18199: LD_EXP 52
18203: PUSH
18204: LD_VAR 0 6
18208: ARRAY
18209: PUSH
18210: LD_VAR 0 5
18214: ARRAY
18215: PUSH
18216: LD_INT 2
18218: ARRAY
18219: PPUSH
18220: LD_VAR 0 1
18224: PPUSH
18225: CALL_OW 255
18229: PPUSH
18230: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18234: LD_ADDR_EXP 52
18238: PUSH
18239: LD_EXP 52
18243: PPUSH
18244: LD_VAR 0 6
18248: PPUSH
18249: LD_EXP 52
18253: PUSH
18254: LD_VAR 0 6
18258: ARRAY
18259: PPUSH
18260: LD_VAR 0 5
18264: PPUSH
18265: CALL_OW 3
18269: PPUSH
18270: CALL_OW 1
18274: ST_TO_ADDR
// exit ;
18275: POP
18276: POP
18277: GO 18470
// end ; end ;
18279: GO 18119
18281: POP
18282: POP
// for i := minerMinesList [ index ] downto 1 do
18283: LD_ADDR_VAR 0 5
18287: PUSH
18288: DOUBLE
18289: LD_EXP 52
18293: PUSH
18294: LD_VAR 0 6
18298: ARRAY
18299: INC
18300: ST_TO_ADDR
18301: LD_INT 1
18303: PUSH
18304: FOR_DOWNTO
18305: IFFALSE 18468
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18307: LD_EXP 52
18311: PUSH
18312: LD_VAR 0 6
18316: ARRAY
18317: PUSH
18318: LD_VAR 0 5
18322: ARRAY
18323: PUSH
18324: LD_INT 1
18326: ARRAY
18327: PPUSH
18328: LD_EXP 52
18332: PUSH
18333: LD_VAR 0 6
18337: ARRAY
18338: PUSH
18339: LD_VAR 0 5
18343: ARRAY
18344: PUSH
18345: LD_INT 2
18347: ARRAY
18348: PPUSH
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: CALL_OW 298
18363: PUSH
18364: LD_INT 6
18366: LESS
18367: IFFALSE 18466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18369: LD_EXP 52
18373: PUSH
18374: LD_VAR 0 6
18378: ARRAY
18379: PUSH
18380: LD_VAR 0 5
18384: ARRAY
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_EXP 52
18394: PUSH
18395: LD_VAR 0 6
18399: ARRAY
18400: PUSH
18401: LD_VAR 0 5
18405: ARRAY
18406: PUSH
18407: LD_INT 2
18409: ARRAY
18410: PPUSH
18411: LD_VAR 0 1
18415: PPUSH
18416: CALL_OW 255
18420: PPUSH
18421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18425: LD_ADDR_EXP 52
18429: PUSH
18430: LD_EXP 52
18434: PPUSH
18435: LD_VAR 0 6
18439: PPUSH
18440: LD_EXP 52
18444: PUSH
18445: LD_VAR 0 6
18449: ARRAY
18450: PPUSH
18451: LD_VAR 0 5
18455: PPUSH
18456: CALL_OW 3
18460: PPUSH
18461: CALL_OW 1
18465: ST_TO_ADDR
// end ; end ;
18466: GO 18304
18468: POP
18469: POP
// end ;
18470: LD_VAR 0 4
18474: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18475: LD_INT 0
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 264
18495: PUSH
18496: LD_INT 81
18498: EQUAL
18499: NOT
18500: PUSH
18501: LD_VAR 0 1
18505: PUSH
18506: LD_EXP 51
18510: IN
18511: NOT
18512: OR
18513: IFFALSE 18517
// exit ;
18515: GO 18839
// index := GetElementIndex ( minersList , unit ) ;
18517: LD_ADDR_VAR 0 6
18521: PUSH
18522: LD_EXP 51
18526: PPUSH
18527: LD_VAR 0 1
18531: PPUSH
18532: CALL 39980 0 2
18536: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18537: LD_ADDR_VAR 0 8
18541: PUSH
18542: LD_EXP 53
18546: PUSH
18547: LD_EXP 52
18551: PUSH
18552: LD_VAR 0 6
18556: ARRAY
18557: MINUS
18558: ST_TO_ADDR
// if not minesFreeAmount then
18559: LD_VAR 0 8
18563: NOT
18564: IFFALSE 18568
// exit ;
18566: GO 18839
// tmp := [ ] ;
18568: LD_ADDR_VAR 0 7
18572: PUSH
18573: EMPTY
18574: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18575: LD_ADDR_VAR 0 5
18579: PUSH
18580: DOUBLE
18581: LD_INT 1
18583: DEC
18584: ST_TO_ADDR
18585: LD_VAR 0 8
18589: PUSH
18590: FOR_TO
18591: IFFALSE 18786
// begin _d := rand ( 0 , 5 ) ;
18593: LD_ADDR_VAR 0 11
18597: PUSH
18598: LD_INT 0
18600: PPUSH
18601: LD_INT 5
18603: PPUSH
18604: CALL_OW 12
18608: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18609: LD_ADDR_VAR 0 12
18613: PUSH
18614: LD_INT 2
18616: PPUSH
18617: LD_INT 6
18619: PPUSH
18620: CALL_OW 12
18624: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18625: LD_ADDR_VAR 0 9
18629: PUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: LD_VAR 0 11
18639: PPUSH
18640: LD_VAR 0 12
18644: PPUSH
18645: CALL_OW 272
18649: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18650: LD_ADDR_VAR 0 10
18654: PUSH
18655: LD_VAR 0 3
18659: PPUSH
18660: LD_VAR 0 11
18664: PPUSH
18665: LD_VAR 0 12
18669: PPUSH
18670: CALL_OW 273
18674: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18675: LD_VAR 0 9
18679: PPUSH
18680: LD_VAR 0 10
18684: PPUSH
18685: CALL_OW 488
18689: PUSH
18690: LD_VAR 0 9
18694: PUSH
18695: LD_VAR 0 10
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_VAR 0 7
18708: IN
18709: NOT
18710: AND
18711: PUSH
18712: LD_VAR 0 9
18716: PPUSH
18717: LD_VAR 0 10
18721: PPUSH
18722: CALL_OW 458
18726: NOT
18727: AND
18728: IFFALSE 18770
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18730: LD_ADDR_VAR 0 7
18734: PUSH
18735: LD_VAR 0 7
18739: PPUSH
18740: LD_VAR 0 7
18744: PUSH
18745: LD_INT 1
18747: PLUS
18748: PPUSH
18749: LD_VAR 0 9
18753: PUSH
18754: LD_VAR 0 10
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 1
18767: ST_TO_ADDR
18768: GO 18784
// i := i - 1 ;
18770: LD_ADDR_VAR 0 5
18774: PUSH
18775: LD_VAR 0 5
18779: PUSH
18780: LD_INT 1
18782: MINUS
18783: ST_TO_ADDR
// end ;
18784: GO 18590
18786: POP
18787: POP
// for i in tmp do
18788: LD_ADDR_VAR 0 5
18792: PUSH
18793: LD_VAR 0 7
18797: PUSH
18798: FOR_IN
18799: IFFALSE 18837
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18801: LD_VAR 0 1
18805: PPUSH
18806: LD_VAR 0 5
18810: PUSH
18811: LD_INT 1
18813: ARRAY
18814: PPUSH
18815: LD_VAR 0 5
18819: PUSH
18820: LD_INT 2
18822: ARRAY
18823: PPUSH
18824: CALL 17783 0 3
18828: NOT
18829: IFFALSE 18835
// exit ;
18831: POP
18832: POP
18833: GO 18839
18835: GO 18798
18837: POP
18838: POP
// end ;
18839: LD_VAR 0 4
18843: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18844: LD_INT 0
18846: PPUSH
18847: PPUSH
18848: PPUSH
18849: PPUSH
18850: PPUSH
18851: PPUSH
18852: PPUSH
// if not GetClass ( unit ) = class_sniper then
18853: LD_VAR 0 1
18857: PPUSH
18858: CALL_OW 257
18862: PUSH
18863: LD_INT 5
18865: EQUAL
18866: NOT
18867: IFFALSE 18871
// exit ;
18869: GO 19259
// dist := 8 ;
18871: LD_ADDR_VAR 0 5
18875: PUSH
18876: LD_INT 8
18878: ST_TO_ADDR
// viewRange := 12 ;
18879: LD_ADDR_VAR 0 7
18883: PUSH
18884: LD_INT 12
18886: ST_TO_ADDR
// side := GetSide ( unit ) ;
18887: LD_ADDR_VAR 0 6
18891: PUSH
18892: LD_VAR 0 1
18896: PPUSH
18897: CALL_OW 255
18901: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18902: LD_INT 61
18904: PPUSH
18905: LD_VAR 0 6
18909: PPUSH
18910: CALL_OW 321
18914: PUSH
18915: LD_INT 2
18917: EQUAL
18918: IFFALSE 18928
// viewRange := 16 ;
18920: LD_ADDR_VAR 0 7
18924: PUSH
18925: LD_INT 16
18927: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18928: LD_VAR 0 1
18932: PPUSH
18933: LD_VAR 0 2
18937: PPUSH
18938: LD_VAR 0 3
18942: PPUSH
18943: CALL_OW 297
18947: PUSH
18948: LD_VAR 0 5
18952: GREATER
18953: IFFALSE 19032
// begin ComMoveXY ( unit , x , y ) ;
18955: LD_VAR 0 1
18959: PPUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18974: LD_INT 35
18976: PPUSH
18977: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18981: LD_VAR 0 1
18985: PPUSH
18986: LD_VAR 0 2
18990: PPUSH
18991: LD_VAR 0 3
18995: PPUSH
18996: CALL 71335 0 3
19000: NOT
19001: IFFALSE 19005
// exit ;
19003: GO 19259
// until GetDistUnitXY ( unit , x , y ) < dist ;
19005: LD_VAR 0 1
19009: PPUSH
19010: LD_VAR 0 2
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: CALL_OW 297
19024: PUSH
19025: LD_VAR 0 5
19029: LESS
19030: IFFALSE 18974
// end ; ComTurnXY ( unit , x , y ) ;
19032: LD_VAR 0 1
19036: PPUSH
19037: LD_VAR 0 2
19041: PPUSH
19042: LD_VAR 0 3
19046: PPUSH
19047: CALL_OW 118
// wait ( 5 ) ;
19051: LD_INT 5
19053: PPUSH
19054: CALL_OW 67
// _d := GetDir ( unit ) ;
19058: LD_ADDR_VAR 0 10
19062: PUSH
19063: LD_VAR 0 1
19067: PPUSH
19068: CALL_OW 254
19072: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19073: LD_ADDR_VAR 0 8
19077: PUSH
19078: LD_VAR 0 1
19082: PPUSH
19083: CALL_OW 250
19087: PPUSH
19088: LD_VAR 0 10
19092: PPUSH
19093: LD_VAR 0 5
19097: PPUSH
19098: CALL_OW 272
19102: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19103: LD_ADDR_VAR 0 9
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 251
19117: PPUSH
19118: LD_VAR 0 10
19122: PPUSH
19123: LD_VAR 0 5
19127: PPUSH
19128: CALL_OW 273
19132: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19133: LD_VAR 0 8
19137: PPUSH
19138: LD_VAR 0 9
19142: PPUSH
19143: CALL_OW 488
19147: NOT
19148: IFFALSE 19152
// exit ;
19150: GO 19259
// ComAnimCustom ( unit , 1 ) ;
19152: LD_VAR 0 1
19156: PPUSH
19157: LD_INT 1
19159: PPUSH
19160: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19164: LD_VAR 0 8
19168: PPUSH
19169: LD_VAR 0 9
19173: PPUSH
19174: LD_VAR 0 6
19178: PPUSH
19179: LD_VAR 0 7
19183: PPUSH
19184: CALL_OW 330
// repeat wait ( 1 ) ;
19188: LD_INT 1
19190: PPUSH
19191: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19195: LD_VAR 0 1
19199: PPUSH
19200: CALL_OW 316
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: CALL_OW 314
19214: OR
19215: PUSH
19216: LD_VAR 0 1
19220: PPUSH
19221: CALL_OW 302
19225: NOT
19226: OR
19227: PUSH
19228: LD_VAR 0 1
19232: PPUSH
19233: CALL_OW 301
19237: OR
19238: IFFALSE 19188
// RemoveSeeing ( _x , _y , side ) ;
19240: LD_VAR 0 8
19244: PPUSH
19245: LD_VAR 0 9
19249: PPUSH
19250: LD_VAR 0 6
19254: PPUSH
19255: CALL_OW 331
// end ; end_of_file
19259: LD_VAR 0 4
19263: RET
// export globalGameSaveCounter ; every 0 0$1 do
19264: GO 19266
19266: DISABLE
// begin enable ;
19267: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19268: LD_STRING updateTimer(
19270: PUSH
19271: LD_OWVAR 1
19275: STR
19276: PUSH
19277: LD_STRING );
19279: STR
19280: PPUSH
19281: CALL_OW 559
// end ;
19285: END
// every 0 0$1 do
19286: GO 19288
19288: DISABLE
// begin globalGameSaveCounter := 0 ;
19289: LD_ADDR_EXP 54
19293: PUSH
19294: LD_INT 0
19296: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19297: LD_STRING setGameSaveCounter(0)
19299: PPUSH
19300: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19304: LD_STRING initStreamRollete();
19306: PPUSH
19307: CALL_OW 559
// InitStreamMode ;
19311: CALL 20637 0 0
// DefineStreamItems ( false ) ;
19315: LD_INT 0
19317: PPUSH
19318: CALL 21101 0 1
// end ;
19322: END
// export function SOS_MapStart ( ) ; begin
19323: LD_INT 0
19325: PPUSH
// if streamModeActive then
19326: LD_EXP 55
19330: IFFALSE 19339
// DefineStreamItems ( true ) ;
19332: LD_INT 1
19334: PPUSH
19335: CALL 21101 0 1
// UpdateLuaVariables ( ) ;
19339: CALL 19356 0 0
// UpdateFactoryWaypoints ( ) ;
19343: CALL 33962 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19347: CALL 34219 0 0
// end ;
19351: LD_VAR 0 1
19355: RET
// function UpdateLuaVariables ( ) ; begin
19356: LD_INT 0
19358: PPUSH
// if globalGameSaveCounter then
19359: LD_EXP 54
19363: IFFALSE 19397
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19365: LD_ADDR_EXP 54
19369: PUSH
19370: LD_EXP 54
19374: PPUSH
19375: CALL 73887 0 1
19379: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19380: LD_STRING setGameSaveCounter(
19382: PUSH
19383: LD_EXP 54
19387: STR
19388: PUSH
19389: LD_STRING )
19391: STR
19392: PPUSH
19393: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19397: LD_STRING setGameDifficulty(
19399: PUSH
19400: LD_OWVAR 67
19404: STR
19405: PUSH
19406: LD_STRING )
19408: STR
19409: PPUSH
19410: CALL_OW 559
// end ;
19414: LD_VAR 0 1
19418: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19419: LD_INT 0
19421: PPUSH
// if p2 = stream_mode then
19422: LD_VAR 0 2
19426: PUSH
19427: LD_INT 100
19429: EQUAL
19430: IFFALSE 20433
// begin if not StreamModeActive then
19432: LD_EXP 55
19436: NOT
19437: IFFALSE 19447
// StreamModeActive := true ;
19439: LD_ADDR_EXP 55
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
// if p3 = 0 then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 0
19454: EQUAL
19455: IFFALSE 19461
// InitStreamMode ;
19457: CALL 20637 0 0
// if p3 = 1 then
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 1
19468: EQUAL
19469: IFFALSE 19479
// sRocket := true ;
19471: LD_ADDR_EXP 60
19475: PUSH
19476: LD_INT 1
19478: ST_TO_ADDR
// if p3 = 2 then
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 2
19486: EQUAL
19487: IFFALSE 19497
// sSpeed := true ;
19489: LD_ADDR_EXP 59
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if p3 = 3 then
19497: LD_VAR 0 3
19501: PUSH
19502: LD_INT 3
19504: EQUAL
19505: IFFALSE 19515
// sEngine := true ;
19507: LD_ADDR_EXP 61
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// if p3 = 4 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_INT 4
19522: EQUAL
19523: IFFALSE 19533
// sSpec := true ;
19525: LD_ADDR_EXP 58
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// if p3 = 5 then
19533: LD_VAR 0 3
19537: PUSH
19538: LD_INT 5
19540: EQUAL
19541: IFFALSE 19551
// sLevel := true ;
19543: LD_ADDR_EXP 62
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
// if p3 = 6 then
19551: LD_VAR 0 3
19555: PUSH
19556: LD_INT 6
19558: EQUAL
19559: IFFALSE 19569
// sArmoury := true ;
19561: LD_ADDR_EXP 63
19565: PUSH
19566: LD_INT 1
19568: ST_TO_ADDR
// if p3 = 7 then
19569: LD_VAR 0 3
19573: PUSH
19574: LD_INT 7
19576: EQUAL
19577: IFFALSE 19587
// sRadar := true ;
19579: LD_ADDR_EXP 64
19583: PUSH
19584: LD_INT 1
19586: ST_TO_ADDR
// if p3 = 8 then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_INT 8
19594: EQUAL
19595: IFFALSE 19605
// sBunker := true ;
19597: LD_ADDR_EXP 65
19601: PUSH
19602: LD_INT 1
19604: ST_TO_ADDR
// if p3 = 9 then
19605: LD_VAR 0 3
19609: PUSH
19610: LD_INT 9
19612: EQUAL
19613: IFFALSE 19623
// sHack := true ;
19615: LD_ADDR_EXP 66
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// if p3 = 10 then
19623: LD_VAR 0 3
19627: PUSH
19628: LD_INT 10
19630: EQUAL
19631: IFFALSE 19641
// sFire := true ;
19633: LD_ADDR_EXP 67
19637: PUSH
19638: LD_INT 1
19640: ST_TO_ADDR
// if p3 = 11 then
19641: LD_VAR 0 3
19645: PUSH
19646: LD_INT 11
19648: EQUAL
19649: IFFALSE 19659
// sRefresh := true ;
19651: LD_ADDR_EXP 68
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// if p3 = 12 then
19659: LD_VAR 0 3
19663: PUSH
19664: LD_INT 12
19666: EQUAL
19667: IFFALSE 19677
// sExp := true ;
19669: LD_ADDR_EXP 69
19673: PUSH
19674: LD_INT 1
19676: ST_TO_ADDR
// if p3 = 13 then
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 13
19684: EQUAL
19685: IFFALSE 19695
// sDepot := true ;
19687: LD_ADDR_EXP 70
19691: PUSH
19692: LD_INT 1
19694: ST_TO_ADDR
// if p3 = 14 then
19695: LD_VAR 0 3
19699: PUSH
19700: LD_INT 14
19702: EQUAL
19703: IFFALSE 19713
// sFlag := true ;
19705: LD_ADDR_EXP 71
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// if p3 = 15 then
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 15
19720: EQUAL
19721: IFFALSE 19731
// sKamikadze := true ;
19723: LD_ADDR_EXP 79
19727: PUSH
19728: LD_INT 1
19730: ST_TO_ADDR
// if p3 = 16 then
19731: LD_VAR 0 3
19735: PUSH
19736: LD_INT 16
19738: EQUAL
19739: IFFALSE 19749
// sTroll := true ;
19741: LD_ADDR_EXP 80
19745: PUSH
19746: LD_INT 1
19748: ST_TO_ADDR
// if p3 = 17 then
19749: LD_VAR 0 3
19753: PUSH
19754: LD_INT 17
19756: EQUAL
19757: IFFALSE 19767
// sSlow := true ;
19759: LD_ADDR_EXP 81
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// if p3 = 18 then
19767: LD_VAR 0 3
19771: PUSH
19772: LD_INT 18
19774: EQUAL
19775: IFFALSE 19785
// sLack := true ;
19777: LD_ADDR_EXP 82
19781: PUSH
19782: LD_INT 1
19784: ST_TO_ADDR
// if p3 = 19 then
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 19
19792: EQUAL
19793: IFFALSE 19803
// sTank := true ;
19795: LD_ADDR_EXP 84
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// if p3 = 20 then
19803: LD_VAR 0 3
19807: PUSH
19808: LD_INT 20
19810: EQUAL
19811: IFFALSE 19821
// sRemote := true ;
19813: LD_ADDR_EXP 85
19817: PUSH
19818: LD_INT 1
19820: ST_TO_ADDR
// if p3 = 21 then
19821: LD_VAR 0 3
19825: PUSH
19826: LD_INT 21
19828: EQUAL
19829: IFFALSE 19839
// sPowell := true ;
19831: LD_ADDR_EXP 86
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// if p3 = 22 then
19839: LD_VAR 0 3
19843: PUSH
19844: LD_INT 22
19846: EQUAL
19847: IFFALSE 19857
// sTeleport := true ;
19849: LD_ADDR_EXP 89
19853: PUSH
19854: LD_INT 1
19856: ST_TO_ADDR
// if p3 = 23 then
19857: LD_VAR 0 3
19861: PUSH
19862: LD_INT 23
19864: EQUAL
19865: IFFALSE 19875
// sOilTower := true ;
19867: LD_ADDR_EXP 91
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// if p3 = 24 then
19875: LD_VAR 0 3
19879: PUSH
19880: LD_INT 24
19882: EQUAL
19883: IFFALSE 19893
// sShovel := true ;
19885: LD_ADDR_EXP 92
19889: PUSH
19890: LD_INT 1
19892: ST_TO_ADDR
// if p3 = 25 then
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 25
19900: EQUAL
19901: IFFALSE 19911
// sSheik := true ;
19903: LD_ADDR_EXP 93
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// if p3 = 26 then
19911: LD_VAR 0 3
19915: PUSH
19916: LD_INT 26
19918: EQUAL
19919: IFFALSE 19929
// sEarthquake := true ;
19921: LD_ADDR_EXP 95
19925: PUSH
19926: LD_INT 1
19928: ST_TO_ADDR
// if p3 = 27 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 27
19936: EQUAL
19937: IFFALSE 19947
// sAI := true ;
19939: LD_ADDR_EXP 96
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 28 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 28
19954: EQUAL
19955: IFFALSE 19965
// sCargo := true ;
19957: LD_ADDR_EXP 99
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 29 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 29
19972: EQUAL
19973: IFFALSE 19983
// sDLaser := true ;
19975: LD_ADDR_EXP 100
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 30 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 30
19990: EQUAL
19991: IFFALSE 20001
// sExchange := true ;
19993: LD_ADDR_EXP 101
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 31 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 31
20008: EQUAL
20009: IFFALSE 20019
// sFac := true ;
20011: LD_ADDR_EXP 102
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 32 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 32
20026: EQUAL
20027: IFFALSE 20037
// sPower := true ;
20029: LD_ADDR_EXP 103
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 33 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 33
20044: EQUAL
20045: IFFALSE 20055
// sRandom := true ;
20047: LD_ADDR_EXP 104
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 34 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 34
20062: EQUAL
20063: IFFALSE 20073
// sShield := true ;
20065: LD_ADDR_EXP 105
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 35 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 35
20080: EQUAL
20081: IFFALSE 20091
// sTime := true ;
20083: LD_ADDR_EXP 106
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 36 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 36
20098: EQUAL
20099: IFFALSE 20109
// sTools := true ;
20101: LD_ADDR_EXP 107
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 101 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 101
20116: EQUAL
20117: IFFALSE 20127
// sSold := true ;
20119: LD_ADDR_EXP 72
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// if p3 = 102 then
20127: LD_VAR 0 3
20131: PUSH
20132: LD_INT 102
20134: EQUAL
20135: IFFALSE 20145
// sDiff := true ;
20137: LD_ADDR_EXP 73
20141: PUSH
20142: LD_INT 1
20144: ST_TO_ADDR
// if p3 = 103 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 103
20152: EQUAL
20153: IFFALSE 20163
// sFog := true ;
20155: LD_ADDR_EXP 76
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// if p3 = 104 then
20163: LD_VAR 0 3
20167: PUSH
20168: LD_INT 104
20170: EQUAL
20171: IFFALSE 20181
// sReset := true ;
20173: LD_ADDR_EXP 77
20177: PUSH
20178: LD_INT 1
20180: ST_TO_ADDR
// if p3 = 105 then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 105
20188: EQUAL
20189: IFFALSE 20199
// sSun := true ;
20191: LD_ADDR_EXP 78
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// if p3 = 106 then
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 106
20206: EQUAL
20207: IFFALSE 20217
// sTiger := true ;
20209: LD_ADDR_EXP 74
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// if p3 = 107 then
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 107
20224: EQUAL
20225: IFFALSE 20235
// sBomb := true ;
20227: LD_ADDR_EXP 75
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// if p3 = 108 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 108
20242: EQUAL
20243: IFFALSE 20253
// sWound := true ;
20245: LD_ADDR_EXP 83
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 109 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 109
20260: EQUAL
20261: IFFALSE 20271
// sBetray := true ;
20263: LD_ADDR_EXP 87
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 110 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 110
20278: EQUAL
20279: IFFALSE 20289
// sContamin := true ;
20281: LD_ADDR_EXP 88
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 111 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 111
20296: EQUAL
20297: IFFALSE 20307
// sOil := true ;
20299: LD_ADDR_EXP 90
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 112 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 112
20314: EQUAL
20315: IFFALSE 20325
// sStu := true ;
20317: LD_ADDR_EXP 94
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 113 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 113
20332: EQUAL
20333: IFFALSE 20343
// sBazooka := true ;
20335: LD_ADDR_EXP 97
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 114 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 114
20350: EQUAL
20351: IFFALSE 20361
// sMortar := true ;
20353: LD_ADDR_EXP 98
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 115 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 115
20368: EQUAL
20369: IFFALSE 20379
// sRanger := true ;
20371: LD_ADDR_EXP 108
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 116 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 116
20386: EQUAL
20387: IFFALSE 20397
// sComputer := true ;
20389: LD_ADDR_EXP 109
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 117 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 117
20404: EQUAL
20405: IFFALSE 20415
// s30 := true ;
20407: LD_ADDR_EXP 110
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 118 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 118
20422: EQUAL
20423: IFFALSE 20433
// s60 := true ;
20425: LD_ADDR_EXP 111
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// end ; if p2 = hack_mode then
20433: LD_VAR 0 2
20437: PUSH
20438: LD_INT 101
20440: EQUAL
20441: IFFALSE 20569
// begin case p3 of 1 :
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 1
20450: DOUBLE
20451: EQUAL
20452: IFTRUE 20456
20454: GO 20463
20456: POP
// hHackUnlimitedResources ; 2 :
20457: CALL 32708 0 0
20461: GO 20569
20463: LD_INT 2
20465: DOUBLE
20466: EQUAL
20467: IFTRUE 20471
20469: GO 20478
20471: POP
// hHackSetLevel10 ; 3 :
20472: CALL 32841 0 0
20476: GO 20569
20478: LD_INT 3
20480: DOUBLE
20481: EQUAL
20482: IFTRUE 20486
20484: GO 20493
20486: POP
// hHackSetLevel10YourUnits ; 4 :
20487: CALL 32926 0 0
20491: GO 20569
20493: LD_INT 4
20495: DOUBLE
20496: EQUAL
20497: IFTRUE 20501
20499: GO 20508
20501: POP
// hHackInvincible ; 5 :
20502: CALL 33374 0 0
20506: GO 20569
20508: LD_INT 5
20510: DOUBLE
20511: EQUAL
20512: IFTRUE 20516
20514: GO 20523
20516: POP
// hHackInvisible ; 6 :
20517: CALL 33485 0 0
20521: GO 20569
20523: LD_INT 6
20525: DOUBLE
20526: EQUAL
20527: IFTRUE 20531
20529: GO 20538
20531: POP
// hHackChangeYourSide ; 7 :
20532: CALL 33542 0 0
20536: GO 20569
20538: LD_INT 7
20540: DOUBLE
20541: EQUAL
20542: IFTRUE 20546
20544: GO 20553
20546: POP
// hHackChangeUnitSide ; 8 :
20547: CALL 33584 0 0
20551: GO 20569
20553: LD_INT 8
20555: DOUBLE
20556: EQUAL
20557: IFTRUE 20561
20559: GO 20568
20561: POP
// hHackFog ; end ;
20562: CALL 33685 0 0
20566: GO 20569
20568: POP
// end ; if p2 = game_save_mode then
20569: LD_VAR 0 2
20573: PUSH
20574: LD_INT 102
20576: EQUAL
20577: IFFALSE 20632
// begin if p3 = 1 then
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 1
20586: EQUAL
20587: IFFALSE 20599
// globalGameSaveCounter := p4 ;
20589: LD_ADDR_EXP 54
20593: PUSH
20594: LD_VAR 0 4
20598: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 2
20606: EQUAL
20607: PUSH
20608: LD_EXP 54
20612: AND
20613: IFFALSE 20632
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20615: LD_STRING setGameSaveCounter(
20617: PUSH
20618: LD_EXP 54
20622: STR
20623: PUSH
20624: LD_STRING )
20626: STR
20627: PPUSH
20628: CALL_OW 559
// end ; end ;
20632: LD_VAR 0 7
20636: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20637: LD_INT 0
20639: PPUSH
// streamModeActive := false ;
20640: LD_ADDR_EXP 55
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// normalCounter := 36 ;
20648: LD_ADDR_EXP 56
20652: PUSH
20653: LD_INT 36
20655: ST_TO_ADDR
// hardcoreCounter := 18 ;
20656: LD_ADDR_EXP 57
20660: PUSH
20661: LD_INT 18
20663: ST_TO_ADDR
// sRocket := false ;
20664: LD_ADDR_EXP 60
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sSpeed := false ;
20672: LD_ADDR_EXP 59
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sEngine := false ;
20680: LD_ADDR_EXP 61
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sSpec := false ;
20688: LD_ADDR_EXP 58
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sLevel := false ;
20696: LD_ADDR_EXP 62
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sArmoury := false ;
20704: LD_ADDR_EXP 63
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sRadar := false ;
20712: LD_ADDR_EXP 64
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// sBunker := false ;
20720: LD_ADDR_EXP 65
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// sHack := false ;
20728: LD_ADDR_EXP 66
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// sFire := false ;
20736: LD_ADDR_EXP 67
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sRefresh := false ;
20744: LD_ADDR_EXP 68
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// sExp := false ;
20752: LD_ADDR_EXP 69
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// sDepot := false ;
20760: LD_ADDR_EXP 70
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// sFlag := false ;
20768: LD_ADDR_EXP 71
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// sKamikadze := false ;
20776: LD_ADDR_EXP 79
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// sTroll := false ;
20784: LD_ADDR_EXP 80
20788: PUSH
20789: LD_INT 0
20791: ST_TO_ADDR
// sSlow := false ;
20792: LD_ADDR_EXP 81
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// sLack := false ;
20800: LD_ADDR_EXP 82
20804: PUSH
20805: LD_INT 0
20807: ST_TO_ADDR
// sTank := false ;
20808: LD_ADDR_EXP 84
20812: PUSH
20813: LD_INT 0
20815: ST_TO_ADDR
// sRemote := false ;
20816: LD_ADDR_EXP 85
20820: PUSH
20821: LD_INT 0
20823: ST_TO_ADDR
// sPowell := false ;
20824: LD_ADDR_EXP 86
20828: PUSH
20829: LD_INT 0
20831: ST_TO_ADDR
// sTeleport := false ;
20832: LD_ADDR_EXP 89
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// sOilTower := false ;
20840: LD_ADDR_EXP 91
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// sShovel := false ;
20848: LD_ADDR_EXP 92
20852: PUSH
20853: LD_INT 0
20855: ST_TO_ADDR
// sSheik := false ;
20856: LD_ADDR_EXP 93
20860: PUSH
20861: LD_INT 0
20863: ST_TO_ADDR
// sEarthquake := false ;
20864: LD_ADDR_EXP 95
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// sAI := false ;
20872: LD_ADDR_EXP 96
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// sCargo := false ;
20880: LD_ADDR_EXP 99
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// sDLaser := false ;
20888: LD_ADDR_EXP 100
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// sExchange := false ;
20896: LD_ADDR_EXP 101
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sFac := false ;
20904: LD_ADDR_EXP 102
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sPower := false ;
20912: LD_ADDR_EXP 103
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sRandom := false ;
20920: LD_ADDR_EXP 104
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sShield := false ;
20928: LD_ADDR_EXP 105
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sTime := false ;
20936: LD_ADDR_EXP 106
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sTools := false ;
20944: LD_ADDR_EXP 107
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sSold := false ;
20952: LD_ADDR_EXP 72
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sDiff := false ;
20960: LD_ADDR_EXP 73
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sFog := false ;
20968: LD_ADDR_EXP 76
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sReset := false ;
20976: LD_ADDR_EXP 77
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// sSun := false ;
20984: LD_ADDR_EXP 78
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// sTiger := false ;
20992: LD_ADDR_EXP 74
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// sBomb := false ;
21000: LD_ADDR_EXP 75
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// sWound := false ;
21008: LD_ADDR_EXP 83
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// sBetray := false ;
21016: LD_ADDR_EXP 87
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// sContamin := false ;
21024: LD_ADDR_EXP 88
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// sOil := false ;
21032: LD_ADDR_EXP 90
21036: PUSH
21037: LD_INT 0
21039: ST_TO_ADDR
// sStu := false ;
21040: LD_ADDR_EXP 94
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sBazooka := false ;
21048: LD_ADDR_EXP 97
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sMortar := false ;
21056: LD_ADDR_EXP 98
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sRanger := false ;
21064: LD_ADDR_EXP 108
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sComputer := false ;
21072: LD_ADDR_EXP 109
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// s30 := false ;
21080: LD_ADDR_EXP 110
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// s60 := false ;
21088: LD_ADDR_EXP 111
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// end ;
21096: LD_VAR 0 1
21100: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21101: LD_INT 0
21103: PPUSH
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
// result := [ ] ;
21110: LD_ADDR_VAR 0 2
21114: PUSH
21115: EMPTY
21116: ST_TO_ADDR
// if campaign_id = 1 then
21117: LD_OWVAR 69
21121: PUSH
21122: LD_INT 1
21124: EQUAL
21125: IFFALSE 24291
// begin case mission_number of 1 :
21127: LD_OWVAR 70
21131: PUSH
21132: LD_INT 1
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21216
21140: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 4
21151: PUSH
21152: LD_INT 11
21154: PUSH
21155: LD_INT 12
21157: PUSH
21158: LD_INT 15
21160: PUSH
21161: LD_INT 16
21163: PUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 23
21169: PUSH
21170: LD_INT 26
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 101
21186: PUSH
21187: LD_INT 102
21189: PUSH
21190: LD_INT 106
21192: PUSH
21193: LD_INT 116
21195: PUSH
21196: LD_INT 117
21198: PUSH
21199: LD_INT 118
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: ST_TO_ADDR
21214: GO 24289
21216: LD_INT 2
21218: DOUBLE
21219: EQUAL
21220: IFTRUE 21224
21222: GO 21308
21224: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21225: LD_ADDR_VAR 0 2
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 4
21235: PUSH
21236: LD_INT 11
21238: PUSH
21239: LD_INT 12
21241: PUSH
21242: LD_INT 15
21244: PUSH
21245: LD_INT 16
21247: PUSH
21248: LD_INT 22
21250: PUSH
21251: LD_INT 23
21253: PUSH
21254: LD_INT 26
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 105
21276: PUSH
21277: LD_INT 106
21279: PUSH
21280: LD_INT 108
21282: PUSH
21283: LD_INT 116
21285: PUSH
21286: LD_INT 117
21288: PUSH
21289: LD_INT 118
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 24289
21308: LD_INT 3
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21404
21316: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 15
21339: PUSH
21340: LD_INT 16
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_INT 26
21348: PUSH
21349: LD_INT 36
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 101
21366: PUSH
21367: LD_INT 102
21369: PUSH
21370: LD_INT 105
21372: PUSH
21373: LD_INT 106
21375: PUSH
21376: LD_INT 108
21378: PUSH
21379: LD_INT 116
21381: PUSH
21382: LD_INT 117
21384: PUSH
21385: LD_INT 118
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: ST_TO_ADDR
21402: GO 24289
21404: LD_INT 4
21406: DOUBLE
21407: EQUAL
21408: IFTRUE 21412
21410: GO 21508
21412: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21413: LD_ADDR_VAR 0 2
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: LD_INT 4
21423: PUSH
21424: LD_INT 5
21426: PUSH
21427: LD_INT 8
21429: PUSH
21430: LD_INT 11
21432: PUSH
21433: LD_INT 12
21435: PUSH
21436: LD_INT 15
21438: PUSH
21439: LD_INT 16
21441: PUSH
21442: LD_INT 22
21444: PUSH
21445: LD_INT 23
21447: PUSH
21448: LD_INT 26
21450: PUSH
21451: LD_INT 36
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 101
21470: PUSH
21471: LD_INT 102
21473: PUSH
21474: LD_INT 105
21476: PUSH
21477: LD_INT 106
21479: PUSH
21480: LD_INT 108
21482: PUSH
21483: LD_INT 116
21485: PUSH
21486: LD_INT 117
21488: PUSH
21489: LD_INT 118
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: ST_TO_ADDR
21506: GO 24289
21508: LD_INT 5
21510: DOUBLE
21511: EQUAL
21512: IFTRUE 21516
21514: GO 21628
21516: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21517: LD_ADDR_VAR 0 2
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 4
21527: PUSH
21528: LD_INT 5
21530: PUSH
21531: LD_INT 6
21533: PUSH
21534: LD_INT 8
21536: PUSH
21537: LD_INT 11
21539: PUSH
21540: LD_INT 12
21542: PUSH
21543: LD_INT 15
21545: PUSH
21546: LD_INT 16
21548: PUSH
21549: LD_INT 22
21551: PUSH
21552: LD_INT 23
21554: PUSH
21555: LD_INT 25
21557: PUSH
21558: LD_INT 26
21560: PUSH
21561: LD_INT 36
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 101
21582: PUSH
21583: LD_INT 102
21585: PUSH
21586: LD_INT 105
21588: PUSH
21589: LD_INT 106
21591: PUSH
21592: LD_INT 108
21594: PUSH
21595: LD_INT 109
21597: PUSH
21598: LD_INT 112
21600: PUSH
21601: LD_INT 116
21603: PUSH
21604: LD_INT 117
21606: PUSH
21607: LD_INT 118
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: ST_TO_ADDR
21626: GO 24289
21628: LD_INT 6
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21768
21636: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 4
21647: PUSH
21648: LD_INT 5
21650: PUSH
21651: LD_INT 6
21653: PUSH
21654: LD_INT 8
21656: PUSH
21657: LD_INT 11
21659: PUSH
21660: LD_INT 12
21662: PUSH
21663: LD_INT 15
21665: PUSH
21666: LD_INT 16
21668: PUSH
21669: LD_INT 20
21671: PUSH
21672: LD_INT 21
21674: PUSH
21675: LD_INT 22
21677: PUSH
21678: LD_INT 23
21680: PUSH
21681: LD_INT 25
21683: PUSH
21684: LD_INT 26
21686: PUSH
21687: LD_INT 30
21689: PUSH
21690: LD_INT 31
21692: PUSH
21693: LD_INT 32
21695: PUSH
21696: LD_INT 36
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 101
21722: PUSH
21723: LD_INT 102
21725: PUSH
21726: LD_INT 105
21728: PUSH
21729: LD_INT 106
21731: PUSH
21732: LD_INT 108
21734: PUSH
21735: LD_INT 109
21737: PUSH
21738: LD_INT 112
21740: PUSH
21741: LD_INT 116
21743: PUSH
21744: LD_INT 117
21746: PUSH
21747: LD_INT 118
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: ST_TO_ADDR
21766: GO 24289
21768: LD_INT 7
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21888
21776: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21777: LD_ADDR_VAR 0 2
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: LD_INT 4
21787: PUSH
21788: LD_INT 5
21790: PUSH
21791: LD_INT 7
21793: PUSH
21794: LD_INT 11
21796: PUSH
21797: LD_INT 12
21799: PUSH
21800: LD_INT 15
21802: PUSH
21803: LD_INT 16
21805: PUSH
21806: LD_INT 20
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 23
21817: PUSH
21818: LD_INT 25
21820: PUSH
21821: LD_INT 26
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 101
21842: PUSH
21843: LD_INT 102
21845: PUSH
21846: LD_INT 103
21848: PUSH
21849: LD_INT 105
21851: PUSH
21852: LD_INT 106
21854: PUSH
21855: LD_INT 108
21857: PUSH
21858: LD_INT 112
21860: PUSH
21861: LD_INT 116
21863: PUSH
21864: LD_INT 117
21866: PUSH
21867: LD_INT 118
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: ST_TO_ADDR
21886: GO 24289
21888: LD_INT 8
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 22036
21896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21897: LD_ADDR_VAR 0 2
21901: PUSH
21902: LD_INT 2
21904: PUSH
21905: LD_INT 4
21907: PUSH
21908: LD_INT 5
21910: PUSH
21911: LD_INT 6
21913: PUSH
21914: LD_INT 7
21916: PUSH
21917: LD_INT 8
21919: PUSH
21920: LD_INT 11
21922: PUSH
21923: LD_INT 12
21925: PUSH
21926: LD_INT 15
21928: PUSH
21929: LD_INT 16
21931: PUSH
21932: LD_INT 20
21934: PUSH
21935: LD_INT 21
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 23
21943: PUSH
21944: LD_INT 25
21946: PUSH
21947: LD_INT 26
21949: PUSH
21950: LD_INT 30
21952: PUSH
21953: LD_INT 31
21955: PUSH
21956: LD_INT 32
21958: PUSH
21959: LD_INT 36
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 101
21986: PUSH
21987: LD_INT 102
21989: PUSH
21990: LD_INT 103
21992: PUSH
21993: LD_INT 105
21995: PUSH
21996: LD_INT 106
21998: PUSH
21999: LD_INT 108
22001: PUSH
22002: LD_INT 109
22004: PUSH
22005: LD_INT 112
22007: PUSH
22008: LD_INT 116
22010: PUSH
22011: LD_INT 117
22013: PUSH
22014: LD_INT 118
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 24289
22036: LD_INT 9
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22192
22044: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22045: LD_ADDR_VAR 0 2
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 4
22055: PUSH
22056: LD_INT 5
22058: PUSH
22059: LD_INT 6
22061: PUSH
22062: LD_INT 7
22064: PUSH
22065: LD_INT 8
22067: PUSH
22068: LD_INT 11
22070: PUSH
22071: LD_INT 12
22073: PUSH
22074: LD_INT 15
22076: PUSH
22077: LD_INT 16
22079: PUSH
22080: LD_INT 20
22082: PUSH
22083: LD_INT 21
22085: PUSH
22086: LD_INT 22
22088: PUSH
22089: LD_INT 23
22091: PUSH
22092: LD_INT 25
22094: PUSH
22095: LD_INT 26
22097: PUSH
22098: LD_INT 28
22100: PUSH
22101: LD_INT 30
22103: PUSH
22104: LD_INT 31
22106: PUSH
22107: LD_INT 32
22109: PUSH
22110: LD_INT 36
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 101
22138: PUSH
22139: LD_INT 102
22141: PUSH
22142: LD_INT 103
22144: PUSH
22145: LD_INT 105
22147: PUSH
22148: LD_INT 106
22150: PUSH
22151: LD_INT 108
22153: PUSH
22154: LD_INT 109
22156: PUSH
22157: LD_INT 112
22159: PUSH
22160: LD_INT 114
22162: PUSH
22163: LD_INT 116
22165: PUSH
22166: LD_INT 117
22168: PUSH
22169: LD_INT 118
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: ST_TO_ADDR
22190: GO 24289
22192: LD_INT 10
22194: DOUBLE
22195: EQUAL
22196: IFTRUE 22200
22198: GO 22396
22200: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22201: LD_ADDR_VAR 0 2
22205: PUSH
22206: LD_INT 2
22208: PUSH
22209: LD_INT 4
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: LD_INT 6
22217: PUSH
22218: LD_INT 7
22220: PUSH
22221: LD_INT 8
22223: PUSH
22224: LD_INT 9
22226: PUSH
22227: LD_INT 10
22229: PUSH
22230: LD_INT 11
22232: PUSH
22233: LD_INT 12
22235: PUSH
22236: LD_INT 13
22238: PUSH
22239: LD_INT 14
22241: PUSH
22242: LD_INT 15
22244: PUSH
22245: LD_INT 16
22247: PUSH
22248: LD_INT 17
22250: PUSH
22251: LD_INT 18
22253: PUSH
22254: LD_INT 19
22256: PUSH
22257: LD_INT 20
22259: PUSH
22260: LD_INT 21
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_INT 23
22268: PUSH
22269: LD_INT 24
22271: PUSH
22272: LD_INT 25
22274: PUSH
22275: LD_INT 26
22277: PUSH
22278: LD_INT 28
22280: PUSH
22281: LD_INT 30
22283: PUSH
22284: LD_INT 31
22286: PUSH
22287: LD_INT 32
22289: PUSH
22290: LD_INT 36
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 101
22326: PUSH
22327: LD_INT 102
22329: PUSH
22330: LD_INT 103
22332: PUSH
22333: LD_INT 104
22335: PUSH
22336: LD_INT 105
22338: PUSH
22339: LD_INT 106
22341: PUSH
22342: LD_INT 107
22344: PUSH
22345: LD_INT 108
22347: PUSH
22348: LD_INT 109
22350: PUSH
22351: LD_INT 110
22353: PUSH
22354: LD_INT 111
22356: PUSH
22357: LD_INT 112
22359: PUSH
22360: LD_INT 114
22362: PUSH
22363: LD_INT 116
22365: PUSH
22366: LD_INT 117
22368: PUSH
22369: LD_INT 118
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: ST_TO_ADDR
22394: GO 24289
22396: LD_INT 11
22398: DOUBLE
22399: EQUAL
22400: IFTRUE 22404
22402: GO 22608
22404: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22405: LD_ADDR_VAR 0 2
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: LD_INT 3
22415: PUSH
22416: LD_INT 4
22418: PUSH
22419: LD_INT 5
22421: PUSH
22422: LD_INT 6
22424: PUSH
22425: LD_INT 7
22427: PUSH
22428: LD_INT 8
22430: PUSH
22431: LD_INT 9
22433: PUSH
22434: LD_INT 10
22436: PUSH
22437: LD_INT 11
22439: PUSH
22440: LD_INT 12
22442: PUSH
22443: LD_INT 13
22445: PUSH
22446: LD_INT 14
22448: PUSH
22449: LD_INT 15
22451: PUSH
22452: LD_INT 16
22454: PUSH
22455: LD_INT 17
22457: PUSH
22458: LD_INT 18
22460: PUSH
22461: LD_INT 19
22463: PUSH
22464: LD_INT 20
22466: PUSH
22467: LD_INT 21
22469: PUSH
22470: LD_INT 22
22472: PUSH
22473: LD_INT 23
22475: PUSH
22476: LD_INT 24
22478: PUSH
22479: LD_INT 25
22481: PUSH
22482: LD_INT 26
22484: PUSH
22485: LD_INT 28
22487: PUSH
22488: LD_INT 30
22490: PUSH
22491: LD_INT 31
22493: PUSH
22494: LD_INT 32
22496: PUSH
22497: LD_INT 34
22499: PUSH
22500: LD_INT 36
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 101
22538: PUSH
22539: LD_INT 102
22541: PUSH
22542: LD_INT 103
22544: PUSH
22545: LD_INT 104
22547: PUSH
22548: LD_INT 105
22550: PUSH
22551: LD_INT 106
22553: PUSH
22554: LD_INT 107
22556: PUSH
22557: LD_INT 108
22559: PUSH
22560: LD_INT 109
22562: PUSH
22563: LD_INT 110
22565: PUSH
22566: LD_INT 111
22568: PUSH
22569: LD_INT 112
22571: PUSH
22572: LD_INT 114
22574: PUSH
22575: LD_INT 116
22577: PUSH
22578: LD_INT 117
22580: PUSH
22581: LD_INT 118
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: ST_TO_ADDR
22606: GO 24289
22608: LD_INT 12
22610: DOUBLE
22611: EQUAL
22612: IFTRUE 22616
22614: GO 22836
22616: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22617: LD_ADDR_VAR 0 2
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 3
22630: PUSH
22631: LD_INT 4
22633: PUSH
22634: LD_INT 5
22636: PUSH
22637: LD_INT 6
22639: PUSH
22640: LD_INT 7
22642: PUSH
22643: LD_INT 8
22645: PUSH
22646: LD_INT 9
22648: PUSH
22649: LD_INT 10
22651: PUSH
22652: LD_INT 11
22654: PUSH
22655: LD_INT 12
22657: PUSH
22658: LD_INT 13
22660: PUSH
22661: LD_INT 14
22663: PUSH
22664: LD_INT 15
22666: PUSH
22667: LD_INT 16
22669: PUSH
22670: LD_INT 17
22672: PUSH
22673: LD_INT 18
22675: PUSH
22676: LD_INT 19
22678: PUSH
22679: LD_INT 20
22681: PUSH
22682: LD_INT 21
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_INT 23
22690: PUSH
22691: LD_INT 24
22693: PUSH
22694: LD_INT 25
22696: PUSH
22697: LD_INT 26
22699: PUSH
22700: LD_INT 27
22702: PUSH
22703: LD_INT 28
22705: PUSH
22706: LD_INT 30
22708: PUSH
22709: LD_INT 31
22711: PUSH
22712: LD_INT 32
22714: PUSH
22715: LD_INT 33
22717: PUSH
22718: LD_INT 34
22720: PUSH
22721: LD_INT 36
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 101
22762: PUSH
22763: LD_INT 102
22765: PUSH
22766: LD_INT 103
22768: PUSH
22769: LD_INT 104
22771: PUSH
22772: LD_INT 105
22774: PUSH
22775: LD_INT 106
22777: PUSH
22778: LD_INT 107
22780: PUSH
22781: LD_INT 108
22783: PUSH
22784: LD_INT 109
22786: PUSH
22787: LD_INT 110
22789: PUSH
22790: LD_INT 111
22792: PUSH
22793: LD_INT 112
22795: PUSH
22796: LD_INT 113
22798: PUSH
22799: LD_INT 114
22801: PUSH
22802: LD_INT 116
22804: PUSH
22805: LD_INT 117
22807: PUSH
22808: LD_INT 118
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: ST_TO_ADDR
22834: GO 24289
22836: LD_INT 13
22838: DOUBLE
22839: EQUAL
22840: IFTRUE 22844
22842: GO 23052
22844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22845: LD_ADDR_VAR 0 2
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: LD_INT 3
22858: PUSH
22859: LD_INT 4
22861: PUSH
22862: LD_INT 5
22864: PUSH
22865: LD_INT 8
22867: PUSH
22868: LD_INT 9
22870: PUSH
22871: LD_INT 10
22873: PUSH
22874: LD_INT 11
22876: PUSH
22877: LD_INT 12
22879: PUSH
22880: LD_INT 14
22882: PUSH
22883: LD_INT 15
22885: PUSH
22886: LD_INT 16
22888: PUSH
22889: LD_INT 17
22891: PUSH
22892: LD_INT 18
22894: PUSH
22895: LD_INT 19
22897: PUSH
22898: LD_INT 20
22900: PUSH
22901: LD_INT 21
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_INT 23
22909: PUSH
22910: LD_INT 24
22912: PUSH
22913: LD_INT 25
22915: PUSH
22916: LD_INT 26
22918: PUSH
22919: LD_INT 27
22921: PUSH
22922: LD_INT 28
22924: PUSH
22925: LD_INT 30
22927: PUSH
22928: LD_INT 31
22930: PUSH
22931: LD_INT 32
22933: PUSH
22934: LD_INT 33
22936: PUSH
22937: LD_INT 34
22939: PUSH
22940: LD_INT 36
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 101
22978: PUSH
22979: LD_INT 102
22981: PUSH
22982: LD_INT 103
22984: PUSH
22985: LD_INT 104
22987: PUSH
22988: LD_INT 105
22990: PUSH
22991: LD_INT 106
22993: PUSH
22994: LD_INT 107
22996: PUSH
22997: LD_INT 108
22999: PUSH
23000: LD_INT 109
23002: PUSH
23003: LD_INT 110
23005: PUSH
23006: LD_INT 111
23008: PUSH
23009: LD_INT 112
23011: PUSH
23012: LD_INT 113
23014: PUSH
23015: LD_INT 114
23017: PUSH
23018: LD_INT 116
23020: PUSH
23021: LD_INT 117
23023: PUSH
23024: LD_INT 118
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: ST_TO_ADDR
23050: GO 24289
23052: LD_INT 14
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23284
23060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23061: LD_ADDR_VAR 0 2
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 3
23074: PUSH
23075: LD_INT 4
23077: PUSH
23078: LD_INT 5
23080: PUSH
23081: LD_INT 6
23083: PUSH
23084: LD_INT 7
23086: PUSH
23087: LD_INT 8
23089: PUSH
23090: LD_INT 9
23092: PUSH
23093: LD_INT 10
23095: PUSH
23096: LD_INT 11
23098: PUSH
23099: LD_INT 12
23101: PUSH
23102: LD_INT 13
23104: PUSH
23105: LD_INT 14
23107: PUSH
23108: LD_INT 15
23110: PUSH
23111: LD_INT 16
23113: PUSH
23114: LD_INT 17
23116: PUSH
23117: LD_INT 18
23119: PUSH
23120: LD_INT 19
23122: PUSH
23123: LD_INT 20
23125: PUSH
23126: LD_INT 21
23128: PUSH
23129: LD_INT 22
23131: PUSH
23132: LD_INT 23
23134: PUSH
23135: LD_INT 24
23137: PUSH
23138: LD_INT 25
23140: PUSH
23141: LD_INT 26
23143: PUSH
23144: LD_INT 27
23146: PUSH
23147: LD_INT 28
23149: PUSH
23150: LD_INT 29
23152: PUSH
23153: LD_INT 30
23155: PUSH
23156: LD_INT 31
23158: PUSH
23159: LD_INT 32
23161: PUSH
23162: LD_INT 33
23164: PUSH
23165: LD_INT 34
23167: PUSH
23168: LD_INT 36
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 101
23210: PUSH
23211: LD_INT 102
23213: PUSH
23214: LD_INT 103
23216: PUSH
23217: LD_INT 104
23219: PUSH
23220: LD_INT 105
23222: PUSH
23223: LD_INT 106
23225: PUSH
23226: LD_INT 107
23228: PUSH
23229: LD_INT 108
23231: PUSH
23232: LD_INT 109
23234: PUSH
23235: LD_INT 110
23237: PUSH
23238: LD_INT 111
23240: PUSH
23241: LD_INT 112
23243: PUSH
23244: LD_INT 113
23246: PUSH
23247: LD_INT 114
23249: PUSH
23250: LD_INT 116
23252: PUSH
23253: LD_INT 117
23255: PUSH
23256: LD_INT 118
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: ST_TO_ADDR
23282: GO 24289
23284: LD_INT 15
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23516
23292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23293: LD_ADDR_VAR 0 2
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 2
23303: PUSH
23304: LD_INT 3
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: LD_INT 5
23312: PUSH
23313: LD_INT 6
23315: PUSH
23316: LD_INT 7
23318: PUSH
23319: LD_INT 8
23321: PUSH
23322: LD_INT 9
23324: PUSH
23325: LD_INT 10
23327: PUSH
23328: LD_INT 11
23330: PUSH
23331: LD_INT 12
23333: PUSH
23334: LD_INT 13
23336: PUSH
23337: LD_INT 14
23339: PUSH
23340: LD_INT 15
23342: PUSH
23343: LD_INT 16
23345: PUSH
23346: LD_INT 17
23348: PUSH
23349: LD_INT 18
23351: PUSH
23352: LD_INT 19
23354: PUSH
23355: LD_INT 20
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 22
23363: PUSH
23364: LD_INT 23
23366: PUSH
23367: LD_INT 24
23369: PUSH
23370: LD_INT 25
23372: PUSH
23373: LD_INT 26
23375: PUSH
23376: LD_INT 27
23378: PUSH
23379: LD_INT 28
23381: PUSH
23382: LD_INT 29
23384: PUSH
23385: LD_INT 30
23387: PUSH
23388: LD_INT 31
23390: PUSH
23391: LD_INT 32
23393: PUSH
23394: LD_INT 33
23396: PUSH
23397: LD_INT 34
23399: PUSH
23400: LD_INT 36
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 101
23442: PUSH
23443: LD_INT 102
23445: PUSH
23446: LD_INT 103
23448: PUSH
23449: LD_INT 104
23451: PUSH
23452: LD_INT 105
23454: PUSH
23455: LD_INT 106
23457: PUSH
23458: LD_INT 107
23460: PUSH
23461: LD_INT 108
23463: PUSH
23464: LD_INT 109
23466: PUSH
23467: LD_INT 110
23469: PUSH
23470: LD_INT 111
23472: PUSH
23473: LD_INT 112
23475: PUSH
23476: LD_INT 113
23478: PUSH
23479: LD_INT 114
23481: PUSH
23482: LD_INT 116
23484: PUSH
23485: LD_INT 117
23487: PUSH
23488: LD_INT 118
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: ST_TO_ADDR
23514: GO 24289
23516: LD_INT 16
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23660
23524: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23525: LD_ADDR_VAR 0 2
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 4
23535: PUSH
23536: LD_INT 5
23538: PUSH
23539: LD_INT 7
23541: PUSH
23542: LD_INT 11
23544: PUSH
23545: LD_INT 12
23547: PUSH
23548: LD_INT 15
23550: PUSH
23551: LD_INT 16
23553: PUSH
23554: LD_INT 20
23556: PUSH
23557: LD_INT 21
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_INT 23
23565: PUSH
23566: LD_INT 25
23568: PUSH
23569: LD_INT 26
23571: PUSH
23572: LD_INT 30
23574: PUSH
23575: LD_INT 31
23577: PUSH
23578: LD_INT 32
23580: PUSH
23581: LD_INT 33
23583: PUSH
23584: LD_INT 34
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 101
23610: PUSH
23611: LD_INT 102
23613: PUSH
23614: LD_INT 103
23616: PUSH
23617: LD_INT 106
23619: PUSH
23620: LD_INT 108
23622: PUSH
23623: LD_INT 112
23625: PUSH
23626: LD_INT 113
23628: PUSH
23629: LD_INT 114
23631: PUSH
23632: LD_INT 116
23634: PUSH
23635: LD_INT 117
23637: PUSH
23638: LD_INT 118
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: ST_TO_ADDR
23658: GO 24289
23660: LD_INT 17
23662: DOUBLE
23663: EQUAL
23664: IFTRUE 23668
23666: GO 23892
23668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 6
23691: PUSH
23692: LD_INT 7
23694: PUSH
23695: LD_INT 8
23697: PUSH
23698: LD_INT 9
23700: PUSH
23701: LD_INT 10
23703: PUSH
23704: LD_INT 11
23706: PUSH
23707: LD_INT 12
23709: PUSH
23710: LD_INT 13
23712: PUSH
23713: LD_INT 14
23715: PUSH
23716: LD_INT 15
23718: PUSH
23719: LD_INT 16
23721: PUSH
23722: LD_INT 17
23724: PUSH
23725: LD_INT 18
23727: PUSH
23728: LD_INT 19
23730: PUSH
23731: LD_INT 20
23733: PUSH
23734: LD_INT 21
23736: PUSH
23737: LD_INT 22
23739: PUSH
23740: LD_INT 23
23742: PUSH
23743: LD_INT 24
23745: PUSH
23746: LD_INT 25
23748: PUSH
23749: LD_INT 26
23751: PUSH
23752: LD_INT 27
23754: PUSH
23755: LD_INT 28
23757: PUSH
23758: LD_INT 29
23760: PUSH
23761: LD_INT 30
23763: PUSH
23764: LD_INT 31
23766: PUSH
23767: LD_INT 32
23769: PUSH
23770: LD_INT 33
23772: PUSH
23773: LD_INT 34
23775: PUSH
23776: LD_INT 36
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 101
23818: PUSH
23819: LD_INT 102
23821: PUSH
23822: LD_INT 103
23824: PUSH
23825: LD_INT 104
23827: PUSH
23828: LD_INT 105
23830: PUSH
23831: LD_INT 106
23833: PUSH
23834: LD_INT 107
23836: PUSH
23837: LD_INT 108
23839: PUSH
23840: LD_INT 109
23842: PUSH
23843: LD_INT 110
23845: PUSH
23846: LD_INT 111
23848: PUSH
23849: LD_INT 112
23851: PUSH
23852: LD_INT 113
23854: PUSH
23855: LD_INT 114
23857: PUSH
23858: LD_INT 116
23860: PUSH
23861: LD_INT 117
23863: PUSH
23864: LD_INT 118
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 24289
23892: LD_INT 18
23894: DOUBLE
23895: EQUAL
23896: IFTRUE 23900
23898: GO 24048
23900: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 4
23911: PUSH
23912: LD_INT 5
23914: PUSH
23915: LD_INT 7
23917: PUSH
23918: LD_INT 11
23920: PUSH
23921: LD_INT 12
23923: PUSH
23924: LD_INT 15
23926: PUSH
23927: LD_INT 16
23929: PUSH
23930: LD_INT 20
23932: PUSH
23933: LD_INT 21
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_INT 23
23941: PUSH
23942: LD_INT 25
23944: PUSH
23945: LD_INT 26
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 31
23953: PUSH
23954: LD_INT 32
23956: PUSH
23957: LD_INT 33
23959: PUSH
23960: LD_INT 34
23962: PUSH
23963: LD_INT 35
23965: PUSH
23966: LD_INT 36
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 101
23994: PUSH
23995: LD_INT 102
23997: PUSH
23998: LD_INT 103
24000: PUSH
24001: LD_INT 106
24003: PUSH
24004: LD_INT 108
24006: PUSH
24007: LD_INT 112
24009: PUSH
24010: LD_INT 113
24012: PUSH
24013: LD_INT 114
24015: PUSH
24016: LD_INT 115
24018: PUSH
24019: LD_INT 116
24021: PUSH
24022: LD_INT 117
24024: PUSH
24025: LD_INT 118
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: ST_TO_ADDR
24046: GO 24289
24048: LD_INT 19
24050: DOUBLE
24051: EQUAL
24052: IFTRUE 24056
24054: GO 24288
24056: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 3
24070: PUSH
24071: LD_INT 4
24073: PUSH
24074: LD_INT 5
24076: PUSH
24077: LD_INT 6
24079: PUSH
24080: LD_INT 7
24082: PUSH
24083: LD_INT 8
24085: PUSH
24086: LD_INT 9
24088: PUSH
24089: LD_INT 10
24091: PUSH
24092: LD_INT 11
24094: PUSH
24095: LD_INT 12
24097: PUSH
24098: LD_INT 13
24100: PUSH
24101: LD_INT 14
24103: PUSH
24104: LD_INT 15
24106: PUSH
24107: LD_INT 16
24109: PUSH
24110: LD_INT 17
24112: PUSH
24113: LD_INT 18
24115: PUSH
24116: LD_INT 19
24118: PUSH
24119: LD_INT 20
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 24
24133: PUSH
24134: LD_INT 25
24136: PUSH
24137: LD_INT 26
24139: PUSH
24140: LD_INT 27
24142: PUSH
24143: LD_INT 28
24145: PUSH
24146: LD_INT 29
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_INT 31
24154: PUSH
24155: LD_INT 32
24157: PUSH
24158: LD_INT 33
24160: PUSH
24161: LD_INT 34
24163: PUSH
24164: LD_INT 35
24166: PUSH
24167: LD_INT 36
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 101
24210: PUSH
24211: LD_INT 102
24213: PUSH
24214: LD_INT 103
24216: PUSH
24217: LD_INT 104
24219: PUSH
24220: LD_INT 105
24222: PUSH
24223: LD_INT 106
24225: PUSH
24226: LD_INT 107
24228: PUSH
24229: LD_INT 108
24231: PUSH
24232: LD_INT 109
24234: PUSH
24235: LD_INT 110
24237: PUSH
24238: LD_INT 111
24240: PUSH
24241: LD_INT 112
24243: PUSH
24244: LD_INT 113
24246: PUSH
24247: LD_INT 114
24249: PUSH
24250: LD_INT 115
24252: PUSH
24253: LD_INT 116
24255: PUSH
24256: LD_INT 117
24258: PUSH
24259: LD_INT 118
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: ST_TO_ADDR
24286: GO 24289
24288: POP
// end else
24289: GO 24520
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24291: LD_ADDR_VAR 0 2
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: LD_INT 3
24304: PUSH
24305: LD_INT 4
24307: PUSH
24308: LD_INT 5
24310: PUSH
24311: LD_INT 6
24313: PUSH
24314: LD_INT 7
24316: PUSH
24317: LD_INT 8
24319: PUSH
24320: LD_INT 9
24322: PUSH
24323: LD_INT 10
24325: PUSH
24326: LD_INT 11
24328: PUSH
24329: LD_INT 12
24331: PUSH
24332: LD_INT 13
24334: PUSH
24335: LD_INT 14
24337: PUSH
24338: LD_INT 15
24340: PUSH
24341: LD_INT 16
24343: PUSH
24344: LD_INT 17
24346: PUSH
24347: LD_INT 18
24349: PUSH
24350: LD_INT 19
24352: PUSH
24353: LD_INT 20
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 22
24361: PUSH
24362: LD_INT 23
24364: PUSH
24365: LD_INT 24
24367: PUSH
24368: LD_INT 25
24370: PUSH
24371: LD_INT 26
24373: PUSH
24374: LD_INT 27
24376: PUSH
24377: LD_INT 28
24379: PUSH
24380: LD_INT 29
24382: PUSH
24383: LD_INT 30
24385: PUSH
24386: LD_INT 31
24388: PUSH
24389: LD_INT 32
24391: PUSH
24392: LD_INT 33
24394: PUSH
24395: LD_INT 34
24397: PUSH
24398: LD_INT 35
24400: PUSH
24401: LD_INT 36
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 101
24444: PUSH
24445: LD_INT 102
24447: PUSH
24448: LD_INT 103
24450: PUSH
24451: LD_INT 104
24453: PUSH
24454: LD_INT 105
24456: PUSH
24457: LD_INT 106
24459: PUSH
24460: LD_INT 107
24462: PUSH
24463: LD_INT 108
24465: PUSH
24466: LD_INT 109
24468: PUSH
24469: LD_INT 110
24471: PUSH
24472: LD_INT 111
24474: PUSH
24475: LD_INT 112
24477: PUSH
24478: LD_INT 113
24480: PUSH
24481: LD_INT 114
24483: PUSH
24484: LD_INT 115
24486: PUSH
24487: LD_INT 116
24489: PUSH
24490: LD_INT 117
24492: PUSH
24493: LD_INT 118
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// if result then
24520: LD_VAR 0 2
24524: IFFALSE 25310
// begin normal :=  ;
24526: LD_ADDR_VAR 0 5
24530: PUSH
24531: LD_STRING 
24533: ST_TO_ADDR
// hardcore :=  ;
24534: LD_ADDR_VAR 0 6
24538: PUSH
24539: LD_STRING 
24541: ST_TO_ADDR
// active :=  ;
24542: LD_ADDR_VAR 0 7
24546: PUSH
24547: LD_STRING 
24549: ST_TO_ADDR
// for i = 1 to normalCounter do
24550: LD_ADDR_VAR 0 8
24554: PUSH
24555: DOUBLE
24556: LD_INT 1
24558: DEC
24559: ST_TO_ADDR
24560: LD_EXP 56
24564: PUSH
24565: FOR_TO
24566: IFFALSE 24667
// begin tmp := 0 ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_STRING 0
24575: ST_TO_ADDR
// if result [ 1 ] then
24576: LD_VAR 0 2
24580: PUSH
24581: LD_INT 1
24583: ARRAY
24584: IFFALSE 24649
// if result [ 1 ] [ 1 ] = i then
24586: LD_VAR 0 2
24590: PUSH
24591: LD_INT 1
24593: ARRAY
24594: PUSH
24595: LD_INT 1
24597: ARRAY
24598: PUSH
24599: LD_VAR 0 8
24603: EQUAL
24604: IFFALSE 24649
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24606: LD_ADDR_VAR 0 2
24610: PUSH
24611: LD_VAR 0 2
24615: PPUSH
24616: LD_INT 1
24618: PPUSH
24619: LD_VAR 0 2
24623: PUSH
24624: LD_INT 1
24626: ARRAY
24627: PPUSH
24628: LD_INT 1
24630: PPUSH
24631: CALL_OW 3
24635: PPUSH
24636: CALL_OW 1
24640: ST_TO_ADDR
// tmp := 1 ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_STRING 1
24648: ST_TO_ADDR
// end ; normal := normal & tmp ;
24649: LD_ADDR_VAR 0 5
24653: PUSH
24654: LD_VAR 0 5
24658: PUSH
24659: LD_VAR 0 3
24663: STR
24664: ST_TO_ADDR
// end ;
24665: GO 24565
24667: POP
24668: POP
// for i = 1 to hardcoreCounter do
24669: LD_ADDR_VAR 0 8
24673: PUSH
24674: DOUBLE
24675: LD_INT 1
24677: DEC
24678: ST_TO_ADDR
24679: LD_EXP 57
24683: PUSH
24684: FOR_TO
24685: IFFALSE 24790
// begin tmp := 0 ;
24687: LD_ADDR_VAR 0 3
24691: PUSH
24692: LD_STRING 0
24694: ST_TO_ADDR
// if result [ 2 ] then
24695: LD_VAR 0 2
24699: PUSH
24700: LD_INT 2
24702: ARRAY
24703: IFFALSE 24772
// if result [ 2 ] [ 1 ] = 100 + i then
24705: LD_VAR 0 2
24709: PUSH
24710: LD_INT 2
24712: ARRAY
24713: PUSH
24714: LD_INT 1
24716: ARRAY
24717: PUSH
24718: LD_INT 100
24720: PUSH
24721: LD_VAR 0 8
24725: PLUS
24726: EQUAL
24727: IFFALSE 24772
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24729: LD_ADDR_VAR 0 2
24733: PUSH
24734: LD_VAR 0 2
24738: PPUSH
24739: LD_INT 2
24741: PPUSH
24742: LD_VAR 0 2
24746: PUSH
24747: LD_INT 2
24749: ARRAY
24750: PPUSH
24751: LD_INT 1
24753: PPUSH
24754: CALL_OW 3
24758: PPUSH
24759: CALL_OW 1
24763: ST_TO_ADDR
// tmp := 1 ;
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_STRING 1
24771: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24772: LD_ADDR_VAR 0 6
24776: PUSH
24777: LD_VAR 0 6
24781: PUSH
24782: LD_VAR 0 3
24786: STR
24787: ST_TO_ADDR
// end ;
24788: GO 24684
24790: POP
24791: POP
// if isGameLoad then
24792: LD_VAR 0 1
24796: IFFALSE 25271
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24798: LD_ADDR_VAR 0 4
24802: PUSH
24803: LD_EXP 60
24807: PUSH
24808: LD_EXP 59
24812: PUSH
24813: LD_EXP 61
24817: PUSH
24818: LD_EXP 58
24822: PUSH
24823: LD_EXP 62
24827: PUSH
24828: LD_EXP 63
24832: PUSH
24833: LD_EXP 64
24837: PUSH
24838: LD_EXP 65
24842: PUSH
24843: LD_EXP 66
24847: PUSH
24848: LD_EXP 67
24852: PUSH
24853: LD_EXP 68
24857: PUSH
24858: LD_EXP 69
24862: PUSH
24863: LD_EXP 70
24867: PUSH
24868: LD_EXP 71
24872: PUSH
24873: LD_EXP 79
24877: PUSH
24878: LD_EXP 80
24882: PUSH
24883: LD_EXP 81
24887: PUSH
24888: LD_EXP 82
24892: PUSH
24893: LD_EXP 84
24897: PUSH
24898: LD_EXP 85
24902: PUSH
24903: LD_EXP 86
24907: PUSH
24908: LD_EXP 89
24912: PUSH
24913: LD_EXP 91
24917: PUSH
24918: LD_EXP 92
24922: PUSH
24923: LD_EXP 93
24927: PUSH
24928: LD_EXP 95
24932: PUSH
24933: LD_EXP 96
24937: PUSH
24938: LD_EXP 99
24942: PUSH
24943: LD_EXP 100
24947: PUSH
24948: LD_EXP 101
24952: PUSH
24953: LD_EXP 102
24957: PUSH
24958: LD_EXP 103
24962: PUSH
24963: LD_EXP 104
24967: PUSH
24968: LD_EXP 105
24972: PUSH
24973: LD_EXP 106
24977: PUSH
24978: LD_EXP 107
24982: PUSH
24983: LD_EXP 72
24987: PUSH
24988: LD_EXP 73
24992: PUSH
24993: LD_EXP 76
24997: PUSH
24998: LD_EXP 77
25002: PUSH
25003: LD_EXP 78
25007: PUSH
25008: LD_EXP 74
25012: PUSH
25013: LD_EXP 75
25017: PUSH
25018: LD_EXP 83
25022: PUSH
25023: LD_EXP 87
25027: PUSH
25028: LD_EXP 88
25032: PUSH
25033: LD_EXP 90
25037: PUSH
25038: LD_EXP 94
25042: PUSH
25043: LD_EXP 97
25047: PUSH
25048: LD_EXP 98
25052: PUSH
25053: LD_EXP 108
25057: PUSH
25058: LD_EXP 109
25062: PUSH
25063: LD_EXP 110
25067: PUSH
25068: LD_EXP 111
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: ST_TO_ADDR
// tmp :=  ;
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_STRING 
25136: ST_TO_ADDR
// for i = 1 to normalCounter do
25137: LD_ADDR_VAR 0 8
25141: PUSH
25142: DOUBLE
25143: LD_INT 1
25145: DEC
25146: ST_TO_ADDR
25147: LD_EXP 56
25151: PUSH
25152: FOR_TO
25153: IFFALSE 25189
// begin if flags [ i ] then
25155: LD_VAR 0 4
25159: PUSH
25160: LD_VAR 0 8
25164: ARRAY
25165: IFFALSE 25187
// tmp := tmp & i & ; ;
25167: LD_ADDR_VAR 0 3
25171: PUSH
25172: LD_VAR 0 3
25176: PUSH
25177: LD_VAR 0 8
25181: STR
25182: PUSH
25183: LD_STRING ;
25185: STR
25186: ST_TO_ADDR
// end ;
25187: GO 25152
25189: POP
25190: POP
// for i = 1 to hardcoreCounter do
25191: LD_ADDR_VAR 0 8
25195: PUSH
25196: DOUBLE
25197: LD_INT 1
25199: DEC
25200: ST_TO_ADDR
25201: LD_EXP 57
25205: PUSH
25206: FOR_TO
25207: IFFALSE 25253
// begin if flags [ normalCounter + i ] then
25209: LD_VAR 0 4
25213: PUSH
25214: LD_EXP 56
25218: PUSH
25219: LD_VAR 0 8
25223: PLUS
25224: ARRAY
25225: IFFALSE 25251
// tmp := tmp & ( 100 + i ) & ; ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_VAR 0 3
25236: PUSH
25237: LD_INT 100
25239: PUSH
25240: LD_VAR 0 8
25244: PLUS
25245: STR
25246: PUSH
25247: LD_STRING ;
25249: STR
25250: ST_TO_ADDR
// end ;
25251: GO 25206
25253: POP
25254: POP
// if tmp then
25255: LD_VAR 0 3
25259: IFFALSE 25271
// active := tmp ;
25261: LD_ADDR_VAR 0 7
25265: PUSH
25266: LD_VAR 0 3
25270: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25271: LD_STRING getStreamItemsFromMission("
25273: PUSH
25274: LD_VAR 0 5
25278: STR
25279: PUSH
25280: LD_STRING ","
25282: STR
25283: PUSH
25284: LD_VAR 0 6
25288: STR
25289: PUSH
25290: LD_STRING ","
25292: STR
25293: PUSH
25294: LD_VAR 0 7
25298: STR
25299: PUSH
25300: LD_STRING ")
25302: STR
25303: PPUSH
25304: CALL_OW 559
// end else
25308: GO 25317
// ToLua ( getStreamItemsFromMission("","","") ) ;
25310: LD_STRING getStreamItemsFromMission("","","")
25312: PPUSH
25313: CALL_OW 559
// end ;
25317: LD_VAR 0 2
25321: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25322: LD_EXP 55
25326: PUSH
25327: LD_EXP 60
25331: AND
25332: IFFALSE 25456
25334: GO 25336
25336: DISABLE
25337: LD_INT 0
25339: PPUSH
25340: PPUSH
// begin enable ;
25341: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25342: LD_ADDR_VAR 0 2
25346: PUSH
25347: LD_INT 22
25349: PUSH
25350: LD_OWVAR 2
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 34
25364: PUSH
25365: LD_INT 7
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 34
25374: PUSH
25375: LD_INT 45
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 34
25384: PUSH
25385: LD_INT 28
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_INT 47
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL_OW 69
25417: ST_TO_ADDR
// if not tmp then
25418: LD_VAR 0 2
25422: NOT
25423: IFFALSE 25427
// exit ;
25425: GO 25456
// for i in tmp do
25427: LD_ADDR_VAR 0 1
25431: PUSH
25432: LD_VAR 0 2
25436: PUSH
25437: FOR_IN
25438: IFFALSE 25454
// begin SetLives ( i , 0 ) ;
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_INT 0
25447: PPUSH
25448: CALL_OW 234
// end ;
25452: GO 25437
25454: POP
25455: POP
// end ;
25456: PPOPN 2
25458: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25459: LD_EXP 55
25463: PUSH
25464: LD_EXP 61
25468: AND
25469: IFFALSE 25553
25471: GO 25473
25473: DISABLE
25474: LD_INT 0
25476: PPUSH
25477: PPUSH
// begin enable ;
25478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25479: LD_ADDR_VAR 0 2
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 32
25498: PUSH
25499: LD_INT 3
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: ST_TO_ADDR
// if not tmp then
25515: LD_VAR 0 2
25519: NOT
25520: IFFALSE 25524
// exit ;
25522: GO 25553
// for i in tmp do
25524: LD_ADDR_VAR 0 1
25528: PUSH
25529: LD_VAR 0 2
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25551
// begin SetLives ( i , 0 ) ;
25537: LD_VAR 0 1
25541: PPUSH
25542: LD_INT 0
25544: PPUSH
25545: CALL_OW 234
// end ;
25549: GO 25534
25551: POP
25552: POP
// end ;
25553: PPOPN 2
25555: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25556: LD_EXP 55
25560: PUSH
25561: LD_EXP 58
25565: AND
25566: IFFALSE 25659
25568: GO 25570
25570: DISABLE
25571: LD_INT 0
25573: PPUSH
// begin enable ;
25574: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25575: LD_ADDR_VAR 0 1
25579: PUSH
25580: LD_INT 22
25582: PUSH
25583: LD_OWVAR 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: LD_INT 25
25597: PUSH
25598: LD_INT 5
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 25
25607: PUSH
25608: LD_INT 9
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 25
25617: PUSH
25618: LD_INT 8
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: PUSH
25640: FOR_IN
25641: IFFALSE 25657
// begin SetClass ( i , 1 ) ;
25643: LD_VAR 0 1
25647: PPUSH
25648: LD_INT 1
25650: PPUSH
25651: CALL_OW 336
// end ;
25655: GO 25640
25657: POP
25658: POP
// end ;
25659: PPOPN 1
25661: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25662: LD_EXP 55
25666: PUSH
25667: LD_EXP 59
25671: AND
25672: PUSH
25673: LD_OWVAR 65
25677: PUSH
25678: LD_INT 7
25680: LESS
25681: AND
25682: IFFALSE 25696
25684: GO 25686
25686: DISABLE
// begin enable ;
25687: ENABLE
// game_speed := 7 ;
25688: LD_ADDR_OWVAR 65
25692: PUSH
25693: LD_INT 7
25695: ST_TO_ADDR
// end ;
25696: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25697: LD_EXP 55
25701: PUSH
25702: LD_EXP 62
25706: AND
25707: IFFALSE 25909
25709: GO 25711
25711: DISABLE
25712: LD_INT 0
25714: PPUSH
25715: PPUSH
25716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25717: LD_ADDR_VAR 0 3
25721: PUSH
25722: LD_INT 81
25724: PUSH
25725: LD_OWVAR 2
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 21
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PPUSH
25748: CALL_OW 69
25752: ST_TO_ADDR
// if not tmp then
25753: LD_VAR 0 3
25757: NOT
25758: IFFALSE 25762
// exit ;
25760: GO 25909
// if tmp > 5 then
25762: LD_VAR 0 3
25766: PUSH
25767: LD_INT 5
25769: GREATER
25770: IFFALSE 25782
// k := 5 else
25772: LD_ADDR_VAR 0 2
25776: PUSH
25777: LD_INT 5
25779: ST_TO_ADDR
25780: GO 25792
// k := tmp ;
25782: LD_ADDR_VAR 0 2
25786: PUSH
25787: LD_VAR 0 3
25791: ST_TO_ADDR
// for i := 1 to k do
25792: LD_ADDR_VAR 0 1
25796: PUSH
25797: DOUBLE
25798: LD_INT 1
25800: DEC
25801: ST_TO_ADDR
25802: LD_VAR 0 2
25806: PUSH
25807: FOR_TO
25808: IFFALSE 25907
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25810: LD_VAR 0 3
25814: PUSH
25815: LD_VAR 0 1
25819: ARRAY
25820: PPUSH
25821: LD_VAR 0 1
25825: PUSH
25826: LD_INT 4
25828: MOD
25829: PUSH
25830: LD_INT 1
25832: PLUS
25833: PPUSH
25834: CALL_OW 259
25838: PUSH
25839: LD_INT 10
25841: LESS
25842: IFFALSE 25905
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25844: LD_VAR 0 3
25848: PUSH
25849: LD_VAR 0 1
25853: ARRAY
25854: PPUSH
25855: LD_VAR 0 1
25859: PUSH
25860: LD_INT 4
25862: MOD
25863: PUSH
25864: LD_INT 1
25866: PLUS
25867: PPUSH
25868: LD_VAR 0 3
25872: PUSH
25873: LD_VAR 0 1
25877: ARRAY
25878: PPUSH
25879: LD_VAR 0 1
25883: PUSH
25884: LD_INT 4
25886: MOD
25887: PUSH
25888: LD_INT 1
25890: PLUS
25891: PPUSH
25892: CALL_OW 259
25896: PUSH
25897: LD_INT 1
25899: PLUS
25900: PPUSH
25901: CALL_OW 237
25905: GO 25807
25907: POP
25908: POP
// end ;
25909: PPOPN 3
25911: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25912: LD_EXP 55
25916: PUSH
25917: LD_EXP 63
25921: AND
25922: IFFALSE 25942
25924: GO 25926
25926: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25927: LD_INT 4
25929: PPUSH
25930: LD_OWVAR 2
25934: PPUSH
25935: LD_INT 0
25937: PPUSH
25938: CALL_OW 324
25942: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25943: LD_EXP 55
25947: PUSH
25948: LD_EXP 92
25952: AND
25953: IFFALSE 25973
25955: GO 25957
25957: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25958: LD_INT 19
25960: PPUSH
25961: LD_OWVAR 2
25965: PPUSH
25966: LD_INT 0
25968: PPUSH
25969: CALL_OW 324
25973: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25974: LD_EXP 55
25978: PUSH
25979: LD_EXP 64
25983: AND
25984: IFFALSE 26086
25986: GO 25988
25988: DISABLE
25989: LD_INT 0
25991: PPUSH
25992: PPUSH
// begin enable ;
25993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25994: LD_ADDR_VAR 0 2
25998: PUSH
25999: LD_INT 22
26001: PUSH
26002: LD_OWVAR 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 34
26016: PUSH
26017: LD_INT 11
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 34
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 69
26047: ST_TO_ADDR
// if not tmp then
26048: LD_VAR 0 2
26052: NOT
26053: IFFALSE 26057
// exit ;
26055: GO 26086
// for i in tmp do
26057: LD_ADDR_VAR 0 1
26061: PUSH
26062: LD_VAR 0 2
26066: PUSH
26067: FOR_IN
26068: IFFALSE 26084
// begin SetLives ( i , 0 ) ;
26070: LD_VAR 0 1
26074: PPUSH
26075: LD_INT 0
26077: PPUSH
26078: CALL_OW 234
// end ;
26082: GO 26067
26084: POP
26085: POP
// end ;
26086: PPOPN 2
26088: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26089: LD_EXP 55
26093: PUSH
26094: LD_EXP 65
26098: AND
26099: IFFALSE 26119
26101: GO 26103
26103: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26104: LD_INT 32
26106: PPUSH
26107: LD_OWVAR 2
26111: PPUSH
26112: LD_INT 0
26114: PPUSH
26115: CALL_OW 324
26119: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26120: LD_EXP 55
26124: PUSH
26125: LD_EXP 66
26129: AND
26130: IFFALSE 26311
26132: GO 26134
26134: DISABLE
26135: LD_INT 0
26137: PPUSH
26138: PPUSH
26139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26140: LD_ADDR_VAR 0 2
26144: PUSH
26145: LD_INT 22
26147: PUSH
26148: LD_OWVAR 2
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 33
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PPUSH
26171: CALL_OW 69
26175: ST_TO_ADDR
// if not tmp then
26176: LD_VAR 0 2
26180: NOT
26181: IFFALSE 26185
// exit ;
26183: GO 26311
// side := 0 ;
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_INT 0
26192: ST_TO_ADDR
// for i := 1 to 8 do
26193: LD_ADDR_VAR 0 1
26197: PUSH
26198: DOUBLE
26199: LD_INT 1
26201: DEC
26202: ST_TO_ADDR
26203: LD_INT 8
26205: PUSH
26206: FOR_TO
26207: IFFALSE 26255
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26209: LD_OWVAR 2
26213: PUSH
26214: LD_VAR 0 1
26218: NONEQUAL
26219: PUSH
26220: LD_OWVAR 2
26224: PPUSH
26225: LD_VAR 0 1
26229: PPUSH
26230: CALL_OW 81
26234: PUSH
26235: LD_INT 2
26237: EQUAL
26238: AND
26239: IFFALSE 26253
// begin side := i ;
26241: LD_ADDR_VAR 0 3
26245: PUSH
26246: LD_VAR 0 1
26250: ST_TO_ADDR
// break ;
26251: GO 26255
// end ;
26253: GO 26206
26255: POP
26256: POP
// if not side then
26257: LD_VAR 0 3
26261: NOT
26262: IFFALSE 26266
// exit ;
26264: GO 26311
// for i := 1 to tmp do
26266: LD_ADDR_VAR 0 1
26270: PUSH
26271: DOUBLE
26272: LD_INT 1
26274: DEC
26275: ST_TO_ADDR
26276: LD_VAR 0 2
26280: PUSH
26281: FOR_TO
26282: IFFALSE 26309
// if Prob ( 60 ) then
26284: LD_INT 60
26286: PPUSH
26287: CALL_OW 13
26291: IFFALSE 26307
// SetSide ( i , side ) ;
26293: LD_VAR 0 1
26297: PPUSH
26298: LD_VAR 0 3
26302: PPUSH
26303: CALL_OW 235
26307: GO 26281
26309: POP
26310: POP
// end ;
26311: PPOPN 3
26313: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26314: LD_EXP 55
26318: PUSH
26319: LD_EXP 68
26323: AND
26324: IFFALSE 26443
26326: GO 26328
26328: DISABLE
26329: LD_INT 0
26331: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26332: LD_ADDR_VAR 0 1
26336: PUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 21
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: LD_INT 23
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: PUSH
26386: FOR_IN
26387: IFFALSE 26441
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26389: LD_VAR 0 1
26393: PPUSH
26394: CALL_OW 257
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 3
26407: PUSH
26408: LD_INT 4
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: IN
26417: IFFALSE 26439
// SetClass ( un , rand ( 1 , 4 ) ) ;
26419: LD_VAR 0 1
26423: PPUSH
26424: LD_INT 1
26426: PPUSH
26427: LD_INT 4
26429: PPUSH
26430: CALL_OW 12
26434: PPUSH
26435: CALL_OW 336
26439: GO 26386
26441: POP
26442: POP
// end ;
26443: PPOPN 1
26445: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26446: LD_EXP 55
26450: PUSH
26451: LD_EXP 67
26455: AND
26456: IFFALSE 26535
26458: GO 26460
26460: DISABLE
26461: LD_INT 0
26463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26464: LD_ADDR_VAR 0 1
26468: PUSH
26469: LD_INT 22
26471: PUSH
26472: LD_OWVAR 2
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 21
26483: PUSH
26484: LD_INT 3
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PPUSH
26495: CALL_OW 69
26499: ST_TO_ADDR
// if not tmp then
26500: LD_VAR 0 1
26504: NOT
26505: IFFALSE 26509
// exit ;
26507: GO 26535
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26509: LD_VAR 0 1
26513: PUSH
26514: LD_INT 1
26516: PPUSH
26517: LD_VAR 0 1
26521: PPUSH
26522: CALL_OW 12
26526: ARRAY
26527: PPUSH
26528: LD_INT 100
26530: PPUSH
26531: CALL_OW 234
// end ;
26535: PPOPN 1
26537: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26538: LD_EXP 55
26542: PUSH
26543: LD_EXP 69
26547: AND
26548: IFFALSE 26646
26550: GO 26552
26552: DISABLE
26553: LD_INT 0
26555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26556: LD_ADDR_VAR 0 1
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_OWVAR 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 21
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PPUSH
26587: CALL_OW 69
26591: ST_TO_ADDR
// if not tmp then
26592: LD_VAR 0 1
26596: NOT
26597: IFFALSE 26601
// exit ;
26599: GO 26646
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26601: LD_VAR 0 1
26605: PUSH
26606: LD_INT 1
26608: PPUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 12
26618: ARRAY
26619: PPUSH
26620: LD_INT 1
26622: PPUSH
26623: LD_INT 4
26625: PPUSH
26626: CALL_OW 12
26630: PPUSH
26631: LD_INT 3000
26633: PPUSH
26634: LD_INT 9000
26636: PPUSH
26637: CALL_OW 12
26641: PPUSH
26642: CALL_OW 492
// end ;
26646: PPOPN 1
26648: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26649: LD_EXP 55
26653: PUSH
26654: LD_EXP 70
26658: AND
26659: IFFALSE 26679
26661: GO 26663
26663: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26664: LD_INT 1
26666: PPUSH
26667: LD_OWVAR 2
26671: PPUSH
26672: LD_INT 0
26674: PPUSH
26675: CALL_OW 324
26679: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26680: LD_EXP 55
26684: PUSH
26685: LD_EXP 71
26689: AND
26690: IFFALSE 26773
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26699: LD_ADDR_VAR 0 2
26703: PUSH
26704: LD_INT 22
26706: PUSH
26707: LD_OWVAR 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 21
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PPUSH
26730: CALL_OW 69
26734: ST_TO_ADDR
// if not tmp then
26735: LD_VAR 0 2
26739: NOT
26740: IFFALSE 26744
// exit ;
26742: GO 26773
// for i in tmp do
26744: LD_ADDR_VAR 0 1
26748: PUSH
26749: LD_VAR 0 2
26753: PUSH
26754: FOR_IN
26755: IFFALSE 26771
// SetBLevel ( i , 10 ) ;
26757: LD_VAR 0 1
26761: PPUSH
26762: LD_INT 10
26764: PPUSH
26765: CALL_OW 241
26769: GO 26754
26771: POP
26772: POP
// end ;
26773: PPOPN 2
26775: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26776: LD_EXP 55
26780: PUSH
26781: LD_EXP 72
26785: AND
26786: IFFALSE 26897
26788: GO 26790
26790: DISABLE
26791: LD_INT 0
26793: PPUSH
26794: PPUSH
26795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26796: LD_ADDR_VAR 0 3
26800: PUSH
26801: LD_INT 22
26803: PUSH
26804: LD_OWVAR 2
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 25
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PPUSH
26827: CALL_OW 69
26831: ST_TO_ADDR
// if not tmp then
26832: LD_VAR 0 3
26836: NOT
26837: IFFALSE 26841
// exit ;
26839: GO 26897
// un := tmp [ rand ( 1 , tmp ) ] ;
26841: LD_ADDR_VAR 0 2
26845: PUSH
26846: LD_VAR 0 3
26850: PUSH
26851: LD_INT 1
26853: PPUSH
26854: LD_VAR 0 3
26858: PPUSH
26859: CALL_OW 12
26863: ARRAY
26864: ST_TO_ADDR
// if Crawls ( un ) then
26865: LD_VAR 0 2
26869: PPUSH
26870: CALL_OW 318
26874: IFFALSE 26885
// ComWalk ( un ) ;
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26885: LD_VAR 0 2
26889: PPUSH
26890: LD_INT 5
26892: PPUSH
26893: CALL_OW 336
// end ;
26897: PPOPN 3
26899: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26900: LD_EXP 55
26904: PUSH
26905: LD_EXP 73
26909: AND
26910: PUSH
26911: LD_OWVAR 67
26915: PUSH
26916: LD_INT 4
26918: LESS
26919: AND
26920: IFFALSE 26939
26922: GO 26924
26924: DISABLE
// begin Difficulty := Difficulty + 1 ;
26925: LD_ADDR_OWVAR 67
26929: PUSH
26930: LD_OWVAR 67
26934: PUSH
26935: LD_INT 1
26937: PLUS
26938: ST_TO_ADDR
// end ;
26939: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26940: LD_EXP 55
26944: PUSH
26945: LD_EXP 74
26949: AND
26950: IFFALSE 27053
26952: GO 26954
26954: DISABLE
26955: LD_INT 0
26957: PPUSH
// begin for i := 1 to 5 do
26958: LD_ADDR_VAR 0 1
26962: PUSH
26963: DOUBLE
26964: LD_INT 1
26966: DEC
26967: ST_TO_ADDR
26968: LD_INT 5
26970: PUSH
26971: FOR_TO
26972: IFFALSE 27051
// begin uc_nation := nation_nature ;
26974: LD_ADDR_OWVAR 21
26978: PUSH
26979: LD_INT 0
26981: ST_TO_ADDR
// uc_side := 0 ;
26982: LD_ADDR_OWVAR 20
26986: PUSH
26987: LD_INT 0
26989: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26990: LD_ADDR_OWVAR 29
26994: PUSH
26995: LD_INT 12
26997: PUSH
26998: LD_INT 12
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: ST_TO_ADDR
// hc_agressivity := 20 ;
27005: LD_ADDR_OWVAR 35
27009: PUSH
27010: LD_INT 20
27012: ST_TO_ADDR
// hc_class := class_tiger ;
27013: LD_ADDR_OWVAR 28
27017: PUSH
27018: LD_INT 14
27020: ST_TO_ADDR
// hc_gallery :=  ;
27021: LD_ADDR_OWVAR 33
27025: PUSH
27026: LD_STRING 
27028: ST_TO_ADDR
// hc_name :=  ;
27029: LD_ADDR_OWVAR 26
27033: PUSH
27034: LD_STRING 
27036: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27037: CALL_OW 44
27041: PPUSH
27042: LD_INT 0
27044: PPUSH
27045: CALL_OW 51
// end ;
27049: GO 26971
27051: POP
27052: POP
// end ;
27053: PPOPN 1
27055: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27056: LD_EXP 55
27060: PUSH
27061: LD_EXP 75
27065: AND
27066: IFFALSE 27075
27068: GO 27070
27070: DISABLE
// StreamSibBomb ;
27071: CALL 27076 0 0
27075: END
// export function StreamSibBomb ; var i , x , y ; begin
27076: LD_INT 0
27078: PPUSH
27079: PPUSH
27080: PPUSH
27081: PPUSH
// result := false ;
27082: LD_ADDR_VAR 0 1
27086: PUSH
27087: LD_INT 0
27089: ST_TO_ADDR
// for i := 1 to 16 do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_INT 16
27102: PUSH
27103: FOR_TO
27104: IFFALSE 27303
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27106: LD_ADDR_VAR 0 3
27110: PUSH
27111: LD_INT 10
27113: PUSH
27114: LD_INT 20
27116: PUSH
27117: LD_INT 30
27119: PUSH
27120: LD_INT 40
27122: PUSH
27123: LD_INT 50
27125: PUSH
27126: LD_INT 60
27128: PUSH
27129: LD_INT 70
27131: PUSH
27132: LD_INT 80
27134: PUSH
27135: LD_INT 90
27137: PUSH
27138: LD_INT 100
27140: PUSH
27141: LD_INT 110
27143: PUSH
27144: LD_INT 120
27146: PUSH
27147: LD_INT 130
27149: PUSH
27150: LD_INT 140
27152: PUSH
27153: LD_INT 150
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: PPUSH
27176: LD_INT 15
27178: PPUSH
27179: CALL_OW 12
27183: ARRAY
27184: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27185: LD_ADDR_VAR 0 4
27189: PUSH
27190: LD_INT 10
27192: PUSH
27193: LD_INT 20
27195: PUSH
27196: LD_INT 30
27198: PUSH
27199: LD_INT 40
27201: PUSH
27202: LD_INT 50
27204: PUSH
27205: LD_INT 60
27207: PUSH
27208: LD_INT 70
27210: PUSH
27211: LD_INT 80
27213: PUSH
27214: LD_INT 90
27216: PUSH
27217: LD_INT 100
27219: PUSH
27220: LD_INT 110
27222: PUSH
27223: LD_INT 120
27225: PUSH
27226: LD_INT 130
27228: PUSH
27229: LD_INT 140
27231: PUSH
27232: LD_INT 150
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: PPUSH
27255: LD_INT 15
27257: PPUSH
27258: CALL_OW 12
27262: ARRAY
27263: ST_TO_ADDR
// if ValidHex ( x , y ) then
27264: LD_VAR 0 3
27268: PPUSH
27269: LD_VAR 0 4
27273: PPUSH
27274: CALL_OW 488
27278: IFFALSE 27301
// begin result := [ x , y ] ;
27280: LD_ADDR_VAR 0 1
27284: PUSH
27285: LD_VAR 0 3
27289: PUSH
27290: LD_VAR 0 4
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: ST_TO_ADDR
// break ;
27299: GO 27303
// end ; end ;
27301: GO 27103
27303: POP
27304: POP
// if result then
27305: LD_VAR 0 1
27309: IFFALSE 27369
// begin ToLua ( playSibBomb() ) ;
27311: LD_STRING playSibBomb()
27313: PPUSH
27314: CALL_OW 559
// wait ( 0 0$14 ) ;
27318: LD_INT 490
27320: PPUSH
27321: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27325: LD_VAR 0 1
27329: PUSH
27330: LD_INT 1
27332: ARRAY
27333: PPUSH
27334: LD_VAR 0 1
27338: PUSH
27339: LD_INT 2
27341: ARRAY
27342: PPUSH
27343: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27347: LD_VAR 0 1
27351: PUSH
27352: LD_INT 1
27354: ARRAY
27355: PPUSH
27356: LD_VAR 0 1
27360: PUSH
27361: LD_INT 2
27363: ARRAY
27364: PPUSH
27365: CALL_OW 429
// end ; end ;
27369: LD_VAR 0 1
27373: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27374: LD_EXP 55
27378: PUSH
27379: LD_EXP 77
27383: AND
27384: IFFALSE 27396
27386: GO 27388
27388: DISABLE
// YouLost (  ) ;
27389: LD_STRING 
27391: PPUSH
27392: CALL_OW 104
27396: END
// every 0 0$1 trigger StreamModeActive and sFog do
27397: LD_EXP 55
27401: PUSH
27402: LD_EXP 76
27406: AND
27407: IFFALSE 27421
27409: GO 27411
27411: DISABLE
// FogOff ( your_side ) ;
27412: LD_OWVAR 2
27416: PPUSH
27417: CALL_OW 344
27421: END
// every 0 0$1 trigger StreamModeActive and sSun do
27422: LD_EXP 55
27426: PUSH
27427: LD_EXP 78
27431: AND
27432: IFFALSE 27460
27434: GO 27436
27436: DISABLE
// begin solar_recharge_percent := 0 ;
27437: LD_ADDR_OWVAR 79
27441: PUSH
27442: LD_INT 0
27444: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27445: LD_INT 10500
27447: PPUSH
27448: CALL_OW 67
// solar_recharge_percent := 100 ;
27452: LD_ADDR_OWVAR 79
27456: PUSH
27457: LD_INT 100
27459: ST_TO_ADDR
// end ;
27460: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27461: LD_EXP 55
27465: PUSH
27466: LD_EXP 79
27470: AND
27471: IFFALSE 27710
27473: GO 27475
27475: DISABLE
27476: LD_INT 0
27478: PPUSH
27479: PPUSH
27480: PPUSH
// begin tmp := [ ] ;
27481: LD_ADDR_VAR 0 3
27485: PUSH
27486: EMPTY
27487: ST_TO_ADDR
// for i := 1 to 6 do
27488: LD_ADDR_VAR 0 1
27492: PUSH
27493: DOUBLE
27494: LD_INT 1
27496: DEC
27497: ST_TO_ADDR
27498: LD_INT 6
27500: PUSH
27501: FOR_TO
27502: IFFALSE 27607
// begin uc_nation := nation_nature ;
27504: LD_ADDR_OWVAR 21
27508: PUSH
27509: LD_INT 0
27511: ST_TO_ADDR
// uc_side := 0 ;
27512: LD_ADDR_OWVAR 20
27516: PUSH
27517: LD_INT 0
27519: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27520: LD_ADDR_OWVAR 29
27524: PUSH
27525: LD_INT 12
27527: PUSH
27528: LD_INT 12
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: ST_TO_ADDR
// hc_agressivity := 20 ;
27535: LD_ADDR_OWVAR 35
27539: PUSH
27540: LD_INT 20
27542: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27543: LD_ADDR_OWVAR 28
27547: PUSH
27548: LD_INT 17
27550: ST_TO_ADDR
// hc_gallery :=  ;
27551: LD_ADDR_OWVAR 33
27555: PUSH
27556: LD_STRING 
27558: ST_TO_ADDR
// hc_name :=  ;
27559: LD_ADDR_OWVAR 26
27563: PUSH
27564: LD_STRING 
27566: ST_TO_ADDR
// un := CreateHuman ;
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: CALL_OW 44
27576: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27577: LD_VAR 0 2
27581: PPUSH
27582: LD_INT 1
27584: PPUSH
27585: CALL_OW 51
// tmp := tmp ^ un ;
27589: LD_ADDR_VAR 0 3
27593: PUSH
27594: LD_VAR 0 3
27598: PUSH
27599: LD_VAR 0 2
27603: ADD
27604: ST_TO_ADDR
// end ;
27605: GO 27501
27607: POP
27608: POP
// repeat wait ( 0 0$1 ) ;
27609: LD_INT 35
27611: PPUSH
27612: CALL_OW 67
// for un in tmp do
27616: LD_ADDR_VAR 0 2
27620: PUSH
27621: LD_VAR 0 3
27625: PUSH
27626: FOR_IN
27627: IFFALSE 27701
// begin if IsDead ( un ) then
27629: LD_VAR 0 2
27633: PPUSH
27634: CALL_OW 301
27638: IFFALSE 27658
// begin tmp := tmp diff un ;
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: LD_VAR 0 3
27649: PUSH
27650: LD_VAR 0 2
27654: DIFF
27655: ST_TO_ADDR
// continue ;
27656: GO 27626
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27658: LD_VAR 0 2
27662: PPUSH
27663: LD_INT 3
27665: PUSH
27666: LD_INT 22
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PPUSH
27680: CALL_OW 69
27684: PPUSH
27685: LD_VAR 0 2
27689: PPUSH
27690: CALL_OW 74
27694: PPUSH
27695: CALL_OW 115
// end ;
27699: GO 27626
27701: POP
27702: POP
// until not tmp ;
27703: LD_VAR 0 3
27707: NOT
27708: IFFALSE 27609
// end ;
27710: PPOPN 3
27712: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27713: LD_EXP 55
27717: PUSH
27718: LD_EXP 80
27722: AND
27723: IFFALSE 27777
27725: GO 27727
27727: DISABLE
// begin ToLua ( displayTroll(); ) ;
27728: LD_STRING displayTroll();
27730: PPUSH
27731: CALL_OW 559
// wait ( 3 3$00 ) ;
27735: LD_INT 6300
27737: PPUSH
27738: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27742: LD_STRING hideTroll();
27744: PPUSH
27745: CALL_OW 559
// wait ( 1 1$00 ) ;
27749: LD_INT 2100
27751: PPUSH
27752: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27756: LD_STRING displayTroll();
27758: PPUSH
27759: CALL_OW 559
// wait ( 1 1$00 ) ;
27763: LD_INT 2100
27765: PPUSH
27766: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27770: LD_STRING hideTroll();
27772: PPUSH
27773: CALL_OW 559
// end ;
27777: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27778: LD_EXP 55
27782: PUSH
27783: LD_EXP 81
27787: AND
27788: IFFALSE 27851
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
// begin p := 0 ;
27796: LD_ADDR_VAR 0 1
27800: PUSH
27801: LD_INT 0
27803: ST_TO_ADDR
// repeat game_speed := 1 ;
27804: LD_ADDR_OWVAR 65
27808: PUSH
27809: LD_INT 1
27811: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27812: LD_INT 35
27814: PPUSH
27815: CALL_OW 67
// p := p + 1 ;
27819: LD_ADDR_VAR 0 1
27823: PUSH
27824: LD_VAR 0 1
27828: PUSH
27829: LD_INT 1
27831: PLUS
27832: ST_TO_ADDR
// until p >= 60 ;
27833: LD_VAR 0 1
27837: PUSH
27838: LD_INT 60
27840: GREATEREQUAL
27841: IFFALSE 27804
// game_speed := 4 ;
27843: LD_ADDR_OWVAR 65
27847: PUSH
27848: LD_INT 4
27850: ST_TO_ADDR
// end ;
27851: PPOPN 1
27853: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27854: LD_EXP 55
27858: PUSH
27859: LD_EXP 82
27863: AND
27864: IFFALSE 28010
27866: GO 27868
27868: DISABLE
27869: LD_INT 0
27871: PPUSH
27872: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27873: LD_ADDR_VAR 0 1
27877: PUSH
27878: LD_INT 22
27880: PUSH
27881: LD_OWVAR 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 30
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 30
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL_OW 69
27926: ST_TO_ADDR
// if not depot then
27927: LD_VAR 0 1
27931: NOT
27932: IFFALSE 27936
// exit ;
27934: GO 28010
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27936: LD_ADDR_VAR 0 2
27940: PUSH
27941: LD_VAR 0 1
27945: PUSH
27946: LD_INT 1
27948: PPUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 12
27958: ARRAY
27959: PPUSH
27960: CALL_OW 274
27964: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27965: LD_VAR 0 2
27969: PPUSH
27970: LD_INT 1
27972: PPUSH
27973: LD_INT 0
27975: PPUSH
27976: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27980: LD_VAR 0 2
27984: PPUSH
27985: LD_INT 2
27987: PPUSH
27988: LD_INT 0
27990: PPUSH
27991: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27995: LD_VAR 0 2
27999: PPUSH
28000: LD_INT 3
28002: PPUSH
28003: LD_INT 0
28005: PPUSH
28006: CALL_OW 277
// end ;
28010: PPOPN 2
28012: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28013: LD_EXP 55
28017: PUSH
28018: LD_EXP 83
28022: AND
28023: IFFALSE 28120
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28031: LD_ADDR_VAR 0 1
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_OWVAR 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 21
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: LD_INT 23
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: PPUSH
28080: CALL_OW 69
28084: ST_TO_ADDR
// if not tmp then
28085: LD_VAR 0 1
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28094: LD_VAR 0 1
28098: PUSH
28099: LD_INT 1
28101: PPUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: CALL_OW 12
28111: ARRAY
28112: PPUSH
28113: LD_INT 200
28115: PPUSH
28116: CALL_OW 234
// end ;
28120: PPOPN 1
28122: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28123: LD_EXP 55
28127: PUSH
28128: LD_EXP 84
28132: AND
28133: IFFALSE 28212
28135: GO 28137
28137: DISABLE
28138: LD_INT 0
28140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28141: LD_ADDR_VAR 0 1
28145: PUSH
28146: LD_INT 22
28148: PUSH
28149: LD_OWVAR 2
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 21
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PPUSH
28172: CALL_OW 69
28176: ST_TO_ADDR
// if not tmp then
28177: LD_VAR 0 1
28181: NOT
28182: IFFALSE 28186
// exit ;
28184: GO 28212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28186: LD_VAR 0 1
28190: PUSH
28191: LD_INT 1
28193: PPUSH
28194: LD_VAR 0 1
28198: PPUSH
28199: CALL_OW 12
28203: ARRAY
28204: PPUSH
28205: LD_INT 60
28207: PPUSH
28208: CALL_OW 234
// end ;
28212: PPOPN 1
28214: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28215: LD_EXP 55
28219: PUSH
28220: LD_EXP 85
28224: AND
28225: IFFALSE 28324
28227: GO 28229
28229: DISABLE
28230: LD_INT 0
28232: PPUSH
28233: PPUSH
// begin enable ;
28234: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28235: LD_ADDR_VAR 0 1
28239: PUSH
28240: LD_INT 22
28242: PUSH
28243: LD_OWVAR 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 61
28254: PUSH
28255: EMPTY
28256: LIST
28257: PUSH
28258: LD_INT 33
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: PPUSH
28273: CALL_OW 69
28277: ST_TO_ADDR
// if not tmp then
28278: LD_VAR 0 1
28282: NOT
28283: IFFALSE 28287
// exit ;
28285: GO 28324
// for i in tmp do
28287: LD_ADDR_VAR 0 2
28291: PUSH
28292: LD_VAR 0 1
28296: PUSH
28297: FOR_IN
28298: IFFALSE 28322
// if IsControledBy ( i ) then
28300: LD_VAR 0 2
28304: PPUSH
28305: CALL_OW 312
28309: IFFALSE 28320
// ComUnlink ( i ) ;
28311: LD_VAR 0 2
28315: PPUSH
28316: CALL_OW 136
28320: GO 28297
28322: POP
28323: POP
// end ;
28324: PPOPN 2
28326: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28327: LD_EXP 55
28331: PUSH
28332: LD_EXP 86
28336: AND
28337: IFFALSE 28477
28339: GO 28341
28341: DISABLE
28342: LD_INT 0
28344: PPUSH
28345: PPUSH
// begin ToLua ( displayPowell(); ) ;
28346: LD_STRING displayPowell();
28348: PPUSH
28349: CALL_OW 559
// uc_side := 0 ;
28353: LD_ADDR_OWVAR 20
28357: PUSH
28358: LD_INT 0
28360: ST_TO_ADDR
// uc_nation := 2 ;
28361: LD_ADDR_OWVAR 21
28365: PUSH
28366: LD_INT 2
28368: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28369: LD_ADDR_OWVAR 37
28373: PUSH
28374: LD_INT 14
28376: ST_TO_ADDR
// vc_engine := engine_siberite ;
28377: LD_ADDR_OWVAR 39
28381: PUSH
28382: LD_INT 3
28384: ST_TO_ADDR
// vc_control := control_apeman ;
28385: LD_ADDR_OWVAR 38
28389: PUSH
28390: LD_INT 5
28392: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28393: LD_ADDR_OWVAR 40
28397: PUSH
28398: LD_INT 29
28400: ST_TO_ADDR
// un := CreateVehicle ;
28401: LD_ADDR_VAR 0 2
28405: PUSH
28406: CALL_OW 45
28410: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28411: LD_VAR 0 2
28415: PPUSH
28416: LD_INT 1
28418: PPUSH
28419: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28423: LD_INT 35
28425: PPUSH
28426: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28430: LD_VAR 0 2
28434: PPUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: PPUSH
28452: LD_VAR 0 2
28456: PPUSH
28457: CALL_OW 74
28461: PPUSH
28462: CALL_OW 115
// until IsDead ( un ) ;
28466: LD_VAR 0 2
28470: PPUSH
28471: CALL_OW 301
28475: IFFALSE 28423
// end ;
28477: PPOPN 2
28479: END
// every 0 0$1 trigger StreamModeActive and sStu do
28480: LD_EXP 55
28484: PUSH
28485: LD_EXP 94
28489: AND
28490: IFFALSE 28506
28492: GO 28494
28494: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28495: LD_STRING displayStucuk();
28497: PPUSH
28498: CALL_OW 559
// ResetFog ;
28502: CALL_OW 335
// end ;
28506: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28507: LD_EXP 55
28511: PUSH
28512: LD_EXP 87
28516: AND
28517: IFFALSE 28658
28519: GO 28521
28521: DISABLE
28522: LD_INT 0
28524: PPUSH
28525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28526: LD_ADDR_VAR 0 2
28530: PUSH
28531: LD_INT 22
28533: PUSH
28534: LD_OWVAR 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 21
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PPUSH
28557: CALL_OW 69
28561: ST_TO_ADDR
// if not tmp then
28562: LD_VAR 0 2
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28658
// un := tmp [ rand ( 1 , tmp ) ] ;
28571: LD_ADDR_VAR 0 1
28575: PUSH
28576: LD_VAR 0 2
28580: PUSH
28581: LD_INT 1
28583: PPUSH
28584: LD_VAR 0 2
28588: PPUSH
28589: CALL_OW 12
28593: ARRAY
28594: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28595: LD_VAR 0 1
28599: PPUSH
28600: LD_INT 0
28602: PPUSH
28603: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28607: LD_VAR 0 1
28611: PPUSH
28612: LD_OWVAR 3
28616: PUSH
28617: LD_VAR 0 1
28621: DIFF
28622: PPUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 74
28632: PPUSH
28633: CALL_OW 115
// wait ( 0 0$20 ) ;
28637: LD_INT 700
28639: PPUSH
28640: CALL_OW 67
// SetSide ( un , your_side ) ;
28644: LD_VAR 0 1
28648: PPUSH
28649: LD_OWVAR 2
28653: PPUSH
28654: CALL_OW 235
// end ;
28658: PPOPN 2
28660: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28661: LD_EXP 55
28665: PUSH
28666: LD_EXP 88
28670: AND
28671: IFFALSE 28777
28673: GO 28675
28675: DISABLE
28676: LD_INT 0
28678: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28679: LD_ADDR_VAR 0 1
28683: PUSH
28684: LD_INT 22
28686: PUSH
28687: LD_OWVAR 2
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PPUSH
28728: CALL_OW 69
28732: ST_TO_ADDR
// if not depot then
28733: LD_VAR 0 1
28737: NOT
28738: IFFALSE 28742
// exit ;
28740: GO 28777
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28742: LD_VAR 0 1
28746: PUSH
28747: LD_INT 1
28749: ARRAY
28750: PPUSH
28751: CALL_OW 250
28755: PPUSH
28756: LD_VAR 0 1
28760: PUSH
28761: LD_INT 1
28763: ARRAY
28764: PPUSH
28765: CALL_OW 251
28769: PPUSH
28770: LD_INT 70
28772: PPUSH
28773: CALL_OW 495
// end ;
28777: PPOPN 1
28779: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28780: LD_EXP 55
28784: PUSH
28785: LD_EXP 89
28789: AND
28790: IFFALSE 29001
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
28801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28802: LD_ADDR_VAR 0 5
28806: PUSH
28807: LD_INT 22
28809: PUSH
28810: LD_OWVAR 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 21
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PPUSH
28833: CALL_OW 69
28837: ST_TO_ADDR
// if not tmp then
28838: LD_VAR 0 5
28842: NOT
28843: IFFALSE 28847
// exit ;
28845: GO 29001
// for i in tmp do
28847: LD_ADDR_VAR 0 1
28851: PUSH
28852: LD_VAR 0 5
28856: PUSH
28857: FOR_IN
28858: IFFALSE 28999
// begin d := rand ( 0 , 5 ) ;
28860: LD_ADDR_VAR 0 4
28864: PUSH
28865: LD_INT 0
28867: PPUSH
28868: LD_INT 5
28870: PPUSH
28871: CALL_OW 12
28875: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28876: LD_ADDR_VAR 0 2
28880: PUSH
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 250
28890: PPUSH
28891: LD_VAR 0 4
28895: PPUSH
28896: LD_INT 3
28898: PPUSH
28899: LD_INT 12
28901: PPUSH
28902: CALL_OW 12
28906: PPUSH
28907: CALL_OW 272
28911: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: CALL_OW 251
28926: PPUSH
28927: LD_VAR 0 4
28931: PPUSH
28932: LD_INT 3
28934: PPUSH
28935: LD_INT 12
28937: PPUSH
28938: CALL_OW 12
28942: PPUSH
28943: CALL_OW 273
28947: ST_TO_ADDR
// if ValidHex ( x , y ) then
28948: LD_VAR 0 2
28952: PPUSH
28953: LD_VAR 0 3
28957: PPUSH
28958: CALL_OW 488
28962: IFFALSE 28997
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28964: LD_VAR 0 1
28968: PPUSH
28969: LD_VAR 0 2
28973: PPUSH
28974: LD_VAR 0 3
28978: PPUSH
28979: LD_INT 3
28981: PPUSH
28982: LD_INT 6
28984: PPUSH
28985: CALL_OW 12
28989: PPUSH
28990: LD_INT 1
28992: PPUSH
28993: CALL_OW 483
// end ;
28997: GO 28857
28999: POP
29000: POP
// end ;
29001: PPOPN 5
29003: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29004: LD_EXP 55
29008: PUSH
29009: LD_EXP 90
29013: AND
29014: IFFALSE 29108
29016: GO 29018
29018: DISABLE
29019: LD_INT 0
29021: PPUSH
29022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29023: LD_ADDR_VAR 0 2
29027: PUSH
29028: LD_INT 22
29030: PUSH
29031: LD_OWVAR 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 32
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 21
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 2
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29108
// for i in tmp do
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 2
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29106
// SetFuel ( i , 0 ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_INT 0
29099: PPUSH
29100: CALL_OW 240
29104: GO 29089
29106: POP
29107: POP
// end ;
29108: PPOPN 2
29110: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29111: LD_EXP 55
29115: PUSH
29116: LD_EXP 91
29120: AND
29121: IFFALSE 29187
29123: GO 29125
29125: DISABLE
29126: LD_INT 0
29128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29129: LD_ADDR_VAR 0 1
29133: PUSH
29134: LD_INT 22
29136: PUSH
29137: LD_OWVAR 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 30
29148: PUSH
29149: LD_INT 29
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 69
29164: ST_TO_ADDR
// if not tmp then
29165: LD_VAR 0 1
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29187
// DestroyUnit ( tmp [ 1 ] ) ;
29174: LD_VAR 0 1
29178: PUSH
29179: LD_INT 1
29181: ARRAY
29182: PPUSH
29183: CALL_OW 65
// end ;
29187: PPOPN 1
29189: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29190: LD_EXP 55
29194: PUSH
29195: LD_EXP 93
29199: AND
29200: IFFALSE 29329
29202: GO 29204
29204: DISABLE
29205: LD_INT 0
29207: PPUSH
// begin uc_side := 0 ;
29208: LD_ADDR_OWVAR 20
29212: PUSH
29213: LD_INT 0
29215: ST_TO_ADDR
// uc_nation := nation_arabian ;
29216: LD_ADDR_OWVAR 21
29220: PUSH
29221: LD_INT 2
29223: ST_TO_ADDR
// hc_gallery :=  ;
29224: LD_ADDR_OWVAR 33
29228: PUSH
29229: LD_STRING 
29231: ST_TO_ADDR
// hc_name :=  ;
29232: LD_ADDR_OWVAR 26
29236: PUSH
29237: LD_STRING 
29239: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29240: LD_INT 1
29242: PPUSH
29243: LD_INT 11
29245: PPUSH
29246: LD_INT 10
29248: PPUSH
29249: CALL_OW 380
// un := CreateHuman ;
29253: LD_ADDR_VAR 0 1
29257: PUSH
29258: CALL_OW 44
29262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29263: LD_VAR 0 1
29267: PPUSH
29268: LD_INT 1
29270: PPUSH
29271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29275: LD_INT 35
29277: PPUSH
29278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29282: LD_VAR 0 1
29286: PPUSH
29287: LD_INT 22
29289: PUSH
29290: LD_OWVAR 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PPUSH
29299: CALL_OW 69
29303: PPUSH
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL_OW 74
29313: PPUSH
29314: CALL_OW 115
// until IsDead ( un ) ;
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 301
29327: IFFALSE 29275
// end ;
29329: PPOPN 1
29331: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29332: LD_EXP 55
29336: PUSH
29337: LD_EXP 95
29341: AND
29342: IFFALSE 29354
29344: GO 29346
29346: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29347: LD_STRING earthquake(getX(game), 0, 32)
29349: PPUSH
29350: CALL_OW 559
29354: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29355: LD_EXP 55
29359: PUSH
29360: LD_EXP 96
29364: AND
29365: IFFALSE 29456
29367: GO 29369
29369: DISABLE
29370: LD_INT 0
29372: PPUSH
// begin enable ;
29373: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29374: LD_ADDR_VAR 0 1
29378: PUSH
29379: LD_INT 22
29381: PUSH
29382: LD_OWVAR 2
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 21
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 33
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: LIST
29415: PPUSH
29416: CALL_OW 69
29420: ST_TO_ADDR
// if not tmp then
29421: LD_VAR 0 1
29425: NOT
29426: IFFALSE 29430
// exit ;
29428: GO 29456
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29430: LD_VAR 0 1
29434: PUSH
29435: LD_INT 1
29437: PPUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 12
29447: ARRAY
29448: PPUSH
29449: LD_INT 1
29451: PPUSH
29452: CALL_OW 234
// end ;
29456: PPOPN 1
29458: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29459: LD_EXP 55
29463: PUSH
29464: LD_EXP 97
29468: AND
29469: IFFALSE 29610
29471: GO 29473
29473: DISABLE
29474: LD_INT 0
29476: PPUSH
29477: PPUSH
29478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29479: LD_ADDR_VAR 0 3
29483: PUSH
29484: LD_INT 22
29486: PUSH
29487: LD_OWVAR 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 25
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PPUSH
29510: CALL_OW 69
29514: ST_TO_ADDR
// if not tmp then
29515: LD_VAR 0 3
29519: NOT
29520: IFFALSE 29524
// exit ;
29522: GO 29610
// un := tmp [ rand ( 1 , tmp ) ] ;
29524: LD_ADDR_VAR 0 2
29528: PUSH
29529: LD_VAR 0 3
29533: PUSH
29534: LD_INT 1
29536: PPUSH
29537: LD_VAR 0 3
29541: PPUSH
29542: CALL_OW 12
29546: ARRAY
29547: ST_TO_ADDR
// if Crawls ( un ) then
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 318
29557: IFFALSE 29568
// ComWalk ( un ) ;
29559: LD_VAR 0 2
29563: PPUSH
29564: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29568: LD_VAR 0 2
29572: PPUSH
29573: LD_INT 9
29575: PPUSH
29576: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29580: LD_INT 28
29582: PPUSH
29583: LD_OWVAR 2
29587: PPUSH
29588: LD_INT 2
29590: PPUSH
29591: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29595: LD_INT 29
29597: PPUSH
29598: LD_OWVAR 2
29602: PPUSH
29603: LD_INT 2
29605: PPUSH
29606: CALL_OW 322
// end ;
29610: PPOPN 3
29612: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29613: LD_EXP 55
29617: PUSH
29618: LD_EXP 98
29622: AND
29623: IFFALSE 29734
29625: GO 29627
29627: DISABLE
29628: LD_INT 0
29630: PPUSH
29631: PPUSH
29632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_INT 22
29640: PUSH
29641: LD_OWVAR 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 25
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PPUSH
29664: CALL_OW 69
29668: ST_TO_ADDR
// if not tmp then
29669: LD_VAR 0 3
29673: NOT
29674: IFFALSE 29678
// exit ;
29676: GO 29734
// un := tmp [ rand ( 1 , tmp ) ] ;
29678: LD_ADDR_VAR 0 2
29682: PUSH
29683: LD_VAR 0 3
29687: PUSH
29688: LD_INT 1
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: CALL_OW 12
29700: ARRAY
29701: ST_TO_ADDR
// if Crawls ( un ) then
29702: LD_VAR 0 2
29706: PPUSH
29707: CALL_OW 318
29711: IFFALSE 29722
// ComWalk ( un ) ;
29713: LD_VAR 0 2
29717: PPUSH
29718: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_INT 8
29729: PPUSH
29730: CALL_OW 336
// end ;
29734: PPOPN 3
29736: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29737: LD_EXP 55
29741: PUSH
29742: LD_EXP 99
29746: AND
29747: IFFALSE 29891
29749: GO 29751
29751: DISABLE
29752: LD_INT 0
29754: PPUSH
29755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29756: LD_ADDR_VAR 0 2
29760: PUSH
29761: LD_INT 22
29763: PUSH
29764: LD_OWVAR 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 21
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 34
29788: PUSH
29789: LD_INT 12
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 34
29798: PUSH
29799: LD_INT 51
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 34
29808: PUSH
29809: LD_INT 32
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: PPUSH
29827: CALL_OW 69
29831: ST_TO_ADDR
// if not tmp then
29832: LD_VAR 0 2
29836: NOT
29837: IFFALSE 29841
// exit ;
29839: GO 29891
// for i in tmp do
29841: LD_ADDR_VAR 0 1
29845: PUSH
29846: LD_VAR 0 2
29850: PUSH
29851: FOR_IN
29852: IFFALSE 29889
// if GetCargo ( i , mat_artifact ) = 0 then
29854: LD_VAR 0 1
29858: PPUSH
29859: LD_INT 4
29861: PPUSH
29862: CALL_OW 289
29866: PUSH
29867: LD_INT 0
29869: EQUAL
29870: IFFALSE 29887
// SetCargo ( i , mat_siberit , 100 ) ;
29872: LD_VAR 0 1
29876: PPUSH
29877: LD_INT 3
29879: PPUSH
29880: LD_INT 100
29882: PPUSH
29883: CALL_OW 290
29887: GO 29851
29889: POP
29890: POP
// end ;
29891: PPOPN 2
29893: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29894: LD_EXP 55
29898: PUSH
29899: LD_EXP 100
29903: AND
29904: IFFALSE 30087
29906: GO 29908
29908: DISABLE
29909: LD_INT 0
29911: PPUSH
29912: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29913: LD_ADDR_VAR 0 2
29917: PUSH
29918: LD_INT 22
29920: PUSH
29921: LD_OWVAR 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PPUSH
29930: CALL_OW 69
29934: ST_TO_ADDR
// if not tmp then
29935: LD_VAR 0 2
29939: NOT
29940: IFFALSE 29944
// exit ;
29942: GO 30087
// for i := 1 to 2 do
29944: LD_ADDR_VAR 0 1
29948: PUSH
29949: DOUBLE
29950: LD_INT 1
29952: DEC
29953: ST_TO_ADDR
29954: LD_INT 2
29956: PUSH
29957: FOR_TO
29958: IFFALSE 30085
// begin uc_side := your_side ;
29960: LD_ADDR_OWVAR 20
29964: PUSH
29965: LD_OWVAR 2
29969: ST_TO_ADDR
// uc_nation := nation_american ;
29970: LD_ADDR_OWVAR 21
29974: PUSH
29975: LD_INT 1
29977: ST_TO_ADDR
// vc_chassis := us_morphling ;
29978: LD_ADDR_OWVAR 37
29982: PUSH
29983: LD_INT 5
29985: ST_TO_ADDR
// vc_engine := engine_siberite ;
29986: LD_ADDR_OWVAR 39
29990: PUSH
29991: LD_INT 3
29993: ST_TO_ADDR
// vc_control := control_computer ;
29994: LD_ADDR_OWVAR 38
29998: PUSH
29999: LD_INT 3
30001: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30002: LD_ADDR_OWVAR 40
30006: PUSH
30007: LD_INT 10
30009: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30010: LD_VAR 0 2
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: PPUSH
30019: CALL_OW 310
30023: NOT
30024: IFFALSE 30071
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30026: CALL_OW 45
30030: PPUSH
30031: LD_VAR 0 2
30035: PUSH
30036: LD_INT 1
30038: ARRAY
30039: PPUSH
30040: CALL_OW 250
30044: PPUSH
30045: LD_VAR 0 2
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: PPUSH
30054: CALL_OW 251
30058: PPUSH
30059: LD_INT 12
30061: PPUSH
30062: LD_INT 1
30064: PPUSH
30065: CALL_OW 50
30069: GO 30083
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30071: CALL_OW 45
30075: PPUSH
30076: LD_INT 1
30078: PPUSH
30079: CALL_OW 51
// end ;
30083: GO 29957
30085: POP
30086: POP
// end ;
30087: PPOPN 2
30089: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30090: LD_EXP 55
30094: PUSH
30095: LD_EXP 101
30099: AND
30100: IFFALSE 30322
30102: GO 30104
30104: DISABLE
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
30109: PPUSH
30110: PPUSH
30111: PPUSH
30112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30113: LD_ADDR_VAR 0 6
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: LD_INT 23
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: PPUSH
30162: CALL_OW 69
30166: ST_TO_ADDR
// if not tmp then
30167: LD_VAR 0 6
30171: NOT
30172: IFFALSE 30176
// exit ;
30174: GO 30322
// s1 := rand ( 1 , 4 ) ;
30176: LD_ADDR_VAR 0 2
30180: PUSH
30181: LD_INT 1
30183: PPUSH
30184: LD_INT 4
30186: PPUSH
30187: CALL_OW 12
30191: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30192: LD_ADDR_VAR 0 4
30196: PUSH
30197: LD_VAR 0 6
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: LD_VAR 0 2
30210: PPUSH
30211: CALL_OW 259
30215: ST_TO_ADDR
// if s1 = 1 then
30216: LD_VAR 0 2
30220: PUSH
30221: LD_INT 1
30223: EQUAL
30224: IFFALSE 30244
// s2 := rand ( 2 , 4 ) else
30226: LD_ADDR_VAR 0 3
30230: PUSH
30231: LD_INT 2
30233: PPUSH
30234: LD_INT 4
30236: PPUSH
30237: CALL_OW 12
30241: ST_TO_ADDR
30242: GO 30252
// s2 := 1 ;
30244: LD_ADDR_VAR 0 3
30248: PUSH
30249: LD_INT 1
30251: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30252: LD_ADDR_VAR 0 5
30256: PUSH
30257: LD_VAR 0 6
30261: PUSH
30262: LD_INT 1
30264: ARRAY
30265: PPUSH
30266: LD_VAR 0 3
30270: PPUSH
30271: CALL_OW 259
30275: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30276: LD_VAR 0 6
30280: PUSH
30281: LD_INT 1
30283: ARRAY
30284: PPUSH
30285: LD_VAR 0 2
30289: PPUSH
30290: LD_VAR 0 5
30294: PPUSH
30295: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30299: LD_VAR 0 6
30303: PUSH
30304: LD_INT 1
30306: ARRAY
30307: PPUSH
30308: LD_VAR 0 3
30312: PPUSH
30313: LD_VAR 0 4
30317: PPUSH
30318: CALL_OW 237
// end ;
30322: PPOPN 6
30324: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30325: LD_EXP 55
30329: PUSH
30330: LD_EXP 102
30334: AND
30335: IFFALSE 30414
30337: GO 30339
30339: DISABLE
30340: LD_INT 0
30342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30343: LD_ADDR_VAR 0 1
30347: PUSH
30348: LD_INT 22
30350: PUSH
30351: LD_OWVAR 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 30
30362: PUSH
30363: LD_INT 3
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PPUSH
30374: CALL_OW 69
30378: ST_TO_ADDR
// if not tmp then
30379: LD_VAR 0 1
30383: NOT
30384: IFFALSE 30388
// exit ;
30386: GO 30414
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30388: LD_VAR 0 1
30392: PUSH
30393: LD_INT 1
30395: PPUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 12
30405: ARRAY
30406: PPUSH
30407: LD_INT 1
30409: PPUSH
30410: CALL_OW 234
// end ;
30414: PPOPN 1
30416: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30417: LD_EXP 55
30421: PUSH
30422: LD_EXP 103
30426: AND
30427: IFFALSE 30539
30429: GO 30431
30431: DISABLE
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30436: LD_ADDR_VAR 0 2
30440: PUSH
30441: LD_INT 22
30443: PUSH
30444: LD_OWVAR 2
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 30
30458: PUSH
30459: LD_INT 27
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 30
30468: PUSH
30469: LD_INT 26
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 28
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PPUSH
30496: CALL_OW 69
30500: ST_TO_ADDR
// if not tmp then
30501: LD_VAR 0 2
30505: NOT
30506: IFFALSE 30510
// exit ;
30508: GO 30539
// for i in tmp do
30510: LD_ADDR_VAR 0 1
30514: PUSH
30515: LD_VAR 0 2
30519: PUSH
30520: FOR_IN
30521: IFFALSE 30537
// SetLives ( i , 1 ) ;
30523: LD_VAR 0 1
30527: PPUSH
30528: LD_INT 1
30530: PPUSH
30531: CALL_OW 234
30535: GO 30520
30537: POP
30538: POP
// end ;
30539: PPOPN 2
30541: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30542: LD_EXP 55
30546: PUSH
30547: LD_EXP 104
30551: AND
30552: IFFALSE 30839
30554: GO 30556
30556: DISABLE
30557: LD_INT 0
30559: PPUSH
30560: PPUSH
30561: PPUSH
// begin i := rand ( 1 , 7 ) ;
30562: LD_ADDR_VAR 0 1
30566: PUSH
30567: LD_INT 1
30569: PPUSH
30570: LD_INT 7
30572: PPUSH
30573: CALL_OW 12
30577: ST_TO_ADDR
// case i of 1 :
30578: LD_VAR 0 1
30582: PUSH
30583: LD_INT 1
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30601
30591: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30592: LD_STRING earthquake(getX(game), 0, 32)
30594: PPUSH
30595: CALL_OW 559
30599: GO 30839
30601: LD_INT 2
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30623
30609: POP
// begin ToLua ( displayStucuk(); ) ;
30610: LD_STRING displayStucuk();
30612: PPUSH
30613: CALL_OW 559
// ResetFog ;
30617: CALL_OW 335
// end ; 3 :
30621: GO 30839
30623: LD_INT 3
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30735
30631: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30632: LD_ADDR_VAR 0 2
30636: PUSH
30637: LD_INT 22
30639: PUSH
30640: LD_OWVAR 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 25
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 69
30667: ST_TO_ADDR
// if not tmp then
30668: LD_VAR 0 2
30672: NOT
30673: IFFALSE 30677
// exit ;
30675: GO 30839
// un := tmp [ rand ( 1 , tmp ) ] ;
30677: LD_ADDR_VAR 0 3
30681: PUSH
30682: LD_VAR 0 2
30686: PUSH
30687: LD_INT 1
30689: PPUSH
30690: LD_VAR 0 2
30694: PPUSH
30695: CALL_OW 12
30699: ARRAY
30700: ST_TO_ADDR
// if Crawls ( un ) then
30701: LD_VAR 0 3
30705: PPUSH
30706: CALL_OW 318
30710: IFFALSE 30721
// ComWalk ( un ) ;
30712: LD_VAR 0 3
30716: PPUSH
30717: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30721: LD_VAR 0 3
30725: PPUSH
30726: LD_INT 8
30728: PPUSH
30729: CALL_OW 336
// end ; 4 :
30733: GO 30839
30735: LD_INT 4
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30817
30743: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30744: LD_ADDR_VAR 0 2
30748: PUSH
30749: LD_INT 22
30751: PUSH
30752: LD_OWVAR 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 30
30763: PUSH
30764: LD_INT 29
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 69
30779: ST_TO_ADDR
// if not tmp then
30780: LD_VAR 0 2
30784: NOT
30785: IFFALSE 30789
// exit ;
30787: GO 30839
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30789: LD_VAR 0 2
30793: PUSH
30794: LD_INT 1
30796: ARRAY
30797: PPUSH
30798: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30802: LD_VAR 0 2
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: PPUSH
30811: CALL_OW 65
// end ; 5 .. 7 :
30815: GO 30839
30817: LD_INT 5
30819: DOUBLE
30820: GREATEREQUAL
30821: IFFALSE 30829
30823: LD_INT 7
30825: DOUBLE
30826: LESSEQUAL
30827: IFTRUE 30831
30829: GO 30838
30831: POP
// StreamSibBomb ; end ;
30832: CALL 27076 0 0
30836: GO 30839
30838: POP
// end ;
30839: PPOPN 3
30841: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30842: LD_EXP 55
30846: PUSH
30847: LD_EXP 105
30851: AND
30852: IFFALSE 31008
30854: GO 30856
30856: DISABLE
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30862: LD_ADDR_VAR 0 2
30866: PUSH
30867: LD_INT 81
30869: PUSH
30870: LD_OWVAR 2
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 21
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 21
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PPUSH
30911: CALL_OW 69
30915: ST_TO_ADDR
// if not tmp then
30916: LD_VAR 0 2
30920: NOT
30921: IFFALSE 30925
// exit ;
30923: GO 31008
// p := 0 ;
30925: LD_ADDR_VAR 0 3
30929: PUSH
30930: LD_INT 0
30932: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30933: LD_INT 35
30935: PPUSH
30936: CALL_OW 67
// p := p + 1 ;
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: LD_VAR 0 3
30949: PUSH
30950: LD_INT 1
30952: PLUS
30953: ST_TO_ADDR
// for i in tmp do
30954: LD_ADDR_VAR 0 1
30958: PUSH
30959: LD_VAR 0 2
30963: PUSH
30964: FOR_IN
30965: IFFALSE 30996
// if GetLives ( i ) < 1000 then
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 256
30976: PUSH
30977: LD_INT 1000
30979: LESS
30980: IFFALSE 30994
// SetLives ( i , 1000 ) ;
30982: LD_VAR 0 1
30986: PPUSH
30987: LD_INT 1000
30989: PPUSH
30990: CALL_OW 234
30994: GO 30964
30996: POP
30997: POP
// until p > 20 ;
30998: LD_VAR 0 3
31002: PUSH
31003: LD_INT 20
31005: GREATER
31006: IFFALSE 30933
// end ;
31008: PPOPN 3
31010: END
// every 0 0$1 trigger StreamModeActive and sTime do
31011: LD_EXP 55
31015: PUSH
31016: LD_EXP 106
31020: AND
31021: IFFALSE 31056
31023: GO 31025
31025: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31026: LD_INT 28
31028: PPUSH
31029: LD_OWVAR 2
31033: PPUSH
31034: LD_INT 2
31036: PPUSH
31037: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31041: LD_INT 30
31043: PPUSH
31044: LD_OWVAR 2
31048: PPUSH
31049: LD_INT 2
31051: PPUSH
31052: CALL_OW 322
// end ;
31056: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31057: LD_EXP 55
31061: PUSH
31062: LD_EXP 107
31066: AND
31067: IFFALSE 31188
31069: GO 31071
31071: DISABLE
31072: LD_INT 0
31074: PPUSH
31075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_INT 22
31083: PUSH
31084: LD_OWVAR 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 21
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: LD_INT 23
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 69
31129: ST_TO_ADDR
// if not tmp then
31130: LD_VAR 0 2
31134: NOT
31135: IFFALSE 31139
// exit ;
31137: GO 31188
// for i in tmp do
31139: LD_ADDR_VAR 0 1
31143: PUSH
31144: LD_VAR 0 2
31148: PUSH
31149: FOR_IN
31150: IFFALSE 31186
// begin if Crawls ( i ) then
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL_OW 318
31161: IFFALSE 31172
// ComWalk ( i ) ;
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 138
// SetClass ( i , 2 ) ;
31172: LD_VAR 0 1
31176: PPUSH
31177: LD_INT 2
31179: PPUSH
31180: CALL_OW 336
// end ;
31184: GO 31149
31186: POP
31187: POP
// end ;
31188: PPOPN 2
31190: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31191: LD_EXP 55
31195: PUSH
31196: LD_EXP 108
31200: AND
31201: IFFALSE 31489
31203: GO 31205
31205: DISABLE
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
31210: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31211: LD_OWVAR 2
31215: PPUSH
31216: LD_INT 9
31218: PPUSH
31219: LD_INT 1
31221: PPUSH
31222: LD_INT 1
31224: PPUSH
31225: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31229: LD_INT 9
31231: PPUSH
31232: LD_OWVAR 2
31236: PPUSH
31237: CALL_OW 343
// uc_side := 9 ;
31241: LD_ADDR_OWVAR 20
31245: PUSH
31246: LD_INT 9
31248: ST_TO_ADDR
// uc_nation := 2 ;
31249: LD_ADDR_OWVAR 21
31253: PUSH
31254: LD_INT 2
31256: ST_TO_ADDR
// hc_name := Dark Warrior ;
31257: LD_ADDR_OWVAR 26
31261: PUSH
31262: LD_STRING Dark Warrior
31264: ST_TO_ADDR
// hc_gallery :=  ;
31265: LD_ADDR_OWVAR 33
31269: PUSH
31270: LD_STRING 
31272: ST_TO_ADDR
// hc_noskilllimit := true ;
31273: LD_ADDR_OWVAR 76
31277: PUSH
31278: LD_INT 1
31280: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31281: LD_ADDR_OWVAR 31
31285: PUSH
31286: LD_INT 30
31288: PUSH
31289: LD_INT 30
31291: PUSH
31292: LD_INT 30
31294: PUSH
31295: LD_INT 30
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// un := CreateHuman ;
31304: LD_ADDR_VAR 0 3
31308: PUSH
31309: CALL_OW 44
31313: ST_TO_ADDR
// hc_noskilllimit := false ;
31314: LD_ADDR_OWVAR 76
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31322: LD_VAR 0 3
31326: PPUSH
31327: LD_INT 1
31329: PPUSH
31330: CALL_OW 51
// ToLua ( playRanger() ) ;
31334: LD_STRING playRanger()
31336: PPUSH
31337: CALL_OW 559
// p := 0 ;
31341: LD_ADDR_VAR 0 2
31345: PUSH
31346: LD_INT 0
31348: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31349: LD_INT 35
31351: PPUSH
31352: CALL_OW 67
// p := p + 1 ;
31356: LD_ADDR_VAR 0 2
31360: PUSH
31361: LD_VAR 0 2
31365: PUSH
31366: LD_INT 1
31368: PLUS
31369: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31370: LD_VAR 0 3
31374: PPUSH
31375: CALL_OW 256
31379: PUSH
31380: LD_INT 1000
31382: LESS
31383: IFFALSE 31397
// SetLives ( un , 1000 ) ;
31385: LD_VAR 0 3
31389: PPUSH
31390: LD_INT 1000
31392: PPUSH
31393: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31397: LD_VAR 0 3
31401: PPUSH
31402: LD_INT 81
31404: PUSH
31405: LD_OWVAR 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 91
31416: PUSH
31417: LD_VAR 0 3
31421: PUSH
31422: LD_INT 30
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PPUSH
31434: CALL_OW 69
31438: PPUSH
31439: LD_VAR 0 3
31443: PPUSH
31444: CALL_OW 74
31448: PPUSH
31449: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31453: LD_VAR 0 2
31457: PUSH
31458: LD_INT 80
31460: GREATER
31461: PUSH
31462: LD_VAR 0 3
31466: PPUSH
31467: CALL_OW 301
31471: OR
31472: IFFALSE 31349
// if un then
31474: LD_VAR 0 3
31478: IFFALSE 31489
// RemoveUnit ( un ) ;
31480: LD_VAR 0 3
31484: PPUSH
31485: CALL_OW 64
// end ;
31489: PPOPN 3
31491: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31492: LD_EXP 109
31496: IFFALSE 31612
31498: GO 31500
31500: DISABLE
31501: LD_INT 0
31503: PPUSH
31504: PPUSH
31505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31506: LD_ADDR_VAR 0 2
31510: PUSH
31511: LD_INT 81
31513: PUSH
31514: LD_OWVAR 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 21
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PPUSH
31537: CALL_OW 69
31541: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31542: LD_STRING playComputer()
31544: PPUSH
31545: CALL_OW 559
// if not tmp then
31549: LD_VAR 0 2
31553: NOT
31554: IFFALSE 31558
// exit ;
31556: GO 31612
// for i in tmp do
31558: LD_ADDR_VAR 0 1
31562: PUSH
31563: LD_VAR 0 2
31567: PUSH
31568: FOR_IN
31569: IFFALSE 31610
// for j := 1 to 4 do
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: DOUBLE
31577: LD_INT 1
31579: DEC
31580: ST_TO_ADDR
31581: LD_INT 4
31583: PUSH
31584: FOR_TO
31585: IFFALSE 31606
// SetSkill ( i , j , 10 ) ;
31587: LD_VAR 0 1
31591: PPUSH
31592: LD_VAR 0 3
31596: PPUSH
31597: LD_INT 10
31599: PPUSH
31600: CALL_OW 237
31604: GO 31584
31606: POP
31607: POP
31608: GO 31568
31610: POP
31611: POP
// end ;
31612: PPOPN 3
31614: END
// every 0 0$1 trigger s30 do var i , tmp ;
31615: LD_EXP 110
31619: IFFALSE 31688
31621: GO 31623
31623: DISABLE
31624: LD_INT 0
31626: PPUSH
31627: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31628: LD_ADDR_VAR 0 2
31632: PUSH
31633: LD_INT 22
31635: PUSH
31636: LD_OWVAR 2
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PPUSH
31645: CALL_OW 69
31649: ST_TO_ADDR
// if not tmp then
31650: LD_VAR 0 2
31654: NOT
31655: IFFALSE 31659
// exit ;
31657: GO 31688
// for i in tmp do
31659: LD_ADDR_VAR 0 1
31663: PUSH
31664: LD_VAR 0 2
31668: PUSH
31669: FOR_IN
31670: IFFALSE 31686
// SetLives ( i , 300 ) ;
31672: LD_VAR 0 1
31676: PPUSH
31677: LD_INT 300
31679: PPUSH
31680: CALL_OW 234
31684: GO 31669
31686: POP
31687: POP
// end ;
31688: PPOPN 2
31690: END
// every 0 0$1 trigger s60 do var i , tmp ;
31691: LD_EXP 111
31695: IFFALSE 31764
31697: GO 31699
31699: DISABLE
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31704: LD_ADDR_VAR 0 2
31708: PUSH
31709: LD_INT 22
31711: PUSH
31712: LD_OWVAR 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PPUSH
31721: CALL_OW 69
31725: ST_TO_ADDR
// if not tmp then
31726: LD_VAR 0 2
31730: NOT
31731: IFFALSE 31735
// exit ;
31733: GO 31764
// for i in tmp do
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: LD_VAR 0 2
31744: PUSH
31745: FOR_IN
31746: IFFALSE 31762
// SetLives ( i , 600 ) ;
31748: LD_VAR 0 1
31752: PPUSH
31753: LD_INT 600
31755: PPUSH
31756: CALL_OW 234
31760: GO 31745
31762: POP
31763: POP
// end ;
31764: PPOPN 2
31766: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31767: LD_INT 0
31769: PPUSH
// case cmd of 301 :
31770: LD_VAR 0 1
31774: PUSH
31775: LD_INT 301
31777: DOUBLE
31778: EQUAL
31779: IFTRUE 31783
31781: GO 31815
31783: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31784: LD_VAR 0 6
31788: PPUSH
31789: LD_VAR 0 7
31793: PPUSH
31794: LD_VAR 0 8
31798: PPUSH
31799: LD_VAR 0 4
31803: PPUSH
31804: LD_VAR 0 5
31808: PPUSH
31809: CALL 33016 0 5
31813: GO 31936
31815: LD_INT 302
31817: DOUBLE
31818: EQUAL
31819: IFTRUE 31823
31821: GO 31860
31823: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31824: LD_VAR 0 6
31828: PPUSH
31829: LD_VAR 0 7
31833: PPUSH
31834: LD_VAR 0 8
31838: PPUSH
31839: LD_VAR 0 9
31843: PPUSH
31844: LD_VAR 0 4
31848: PPUSH
31849: LD_VAR 0 5
31853: PPUSH
31854: CALL 33107 0 6
31858: GO 31936
31860: LD_INT 303
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31868
31866: GO 31905
31868: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31869: LD_VAR 0 6
31873: PPUSH
31874: LD_VAR 0 7
31878: PPUSH
31879: LD_VAR 0 8
31883: PPUSH
31884: LD_VAR 0 9
31888: PPUSH
31889: LD_VAR 0 4
31893: PPUSH
31894: LD_VAR 0 5
31898: PPUSH
31899: CALL 31941 0 6
31903: GO 31936
31905: LD_INT 304
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31935
31913: POP
// hHackTeleport ( unit , x , y ) ; end ;
31914: LD_VAR 0 2
31918: PPUSH
31919: LD_VAR 0 4
31923: PPUSH
31924: LD_VAR 0 5
31928: PPUSH
31929: CALL 33700 0 3
31933: GO 31936
31935: POP
// end ;
31936: LD_VAR 0 12
31940: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31941: LD_INT 0
31943: PPUSH
31944: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31945: LD_VAR 0 1
31949: PUSH
31950: LD_INT 1
31952: LESS
31953: PUSH
31954: LD_VAR 0 1
31958: PUSH
31959: LD_INT 3
31961: GREATER
31962: OR
31963: PUSH
31964: LD_VAR 0 5
31968: PPUSH
31969: LD_VAR 0 6
31973: PPUSH
31974: CALL_OW 428
31978: OR
31979: IFFALSE 31983
// exit ;
31981: GO 32703
// uc_side := your_side ;
31983: LD_ADDR_OWVAR 20
31987: PUSH
31988: LD_OWVAR 2
31992: ST_TO_ADDR
// uc_nation := nation ;
31993: LD_ADDR_OWVAR 21
31997: PUSH
31998: LD_VAR 0 1
32002: ST_TO_ADDR
// bc_level = 1 ;
32003: LD_ADDR_OWVAR 43
32007: PUSH
32008: LD_INT 1
32010: ST_TO_ADDR
// case btype of 1 :
32011: LD_VAR 0 2
32015: PUSH
32016: LD_INT 1
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 32035
32024: POP
// bc_type := b_depot ; 2 :
32025: LD_ADDR_OWVAR 42
32029: PUSH
32030: LD_INT 0
32032: ST_TO_ADDR
32033: GO 32647
32035: LD_INT 2
32037: DOUBLE
32038: EQUAL
32039: IFTRUE 32043
32041: GO 32054
32043: POP
// bc_type := b_warehouse ; 3 :
32044: LD_ADDR_OWVAR 42
32048: PUSH
32049: LD_INT 1
32051: ST_TO_ADDR
32052: GO 32647
32054: LD_INT 3
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32073
32062: POP
// bc_type := b_lab ; 4 .. 9 :
32063: LD_ADDR_OWVAR 42
32067: PUSH
32068: LD_INT 6
32070: ST_TO_ADDR
32071: GO 32647
32073: LD_INT 4
32075: DOUBLE
32076: GREATEREQUAL
32077: IFFALSE 32085
32079: LD_INT 9
32081: DOUBLE
32082: LESSEQUAL
32083: IFTRUE 32087
32085: GO 32139
32087: POP
// begin bc_type := b_lab_half ;
32088: LD_ADDR_OWVAR 42
32092: PUSH
32093: LD_INT 7
32095: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32096: LD_ADDR_OWVAR 44
32100: PUSH
32101: LD_INT 10
32103: PUSH
32104: LD_INT 11
32106: PUSH
32107: LD_INT 12
32109: PUSH
32110: LD_INT 15
32112: PUSH
32113: LD_INT 14
32115: PUSH
32116: LD_INT 13
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: PUSH
32127: LD_VAR 0 2
32131: PUSH
32132: LD_INT 3
32134: MINUS
32135: ARRAY
32136: ST_TO_ADDR
// end ; 10 .. 13 :
32137: GO 32647
32139: LD_INT 10
32141: DOUBLE
32142: GREATEREQUAL
32143: IFFALSE 32151
32145: LD_INT 13
32147: DOUBLE
32148: LESSEQUAL
32149: IFTRUE 32153
32151: GO 32230
32153: POP
// begin bc_type := b_lab_full ;
32154: LD_ADDR_OWVAR 42
32158: PUSH
32159: LD_INT 8
32161: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32162: LD_ADDR_OWVAR 44
32166: PUSH
32167: LD_INT 10
32169: PUSH
32170: LD_INT 12
32172: PUSH
32173: LD_INT 14
32175: PUSH
32176: LD_INT 13
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: PUSH
32185: LD_VAR 0 2
32189: PUSH
32190: LD_INT 9
32192: MINUS
32193: ARRAY
32194: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32195: LD_ADDR_OWVAR 45
32199: PUSH
32200: LD_INT 11
32202: PUSH
32203: LD_INT 15
32205: PUSH
32206: LD_INT 12
32208: PUSH
32209: LD_INT 15
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: PUSH
32218: LD_VAR 0 2
32222: PUSH
32223: LD_INT 9
32225: MINUS
32226: ARRAY
32227: ST_TO_ADDR
// end ; 14 :
32228: GO 32647
32230: LD_INT 14
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// bc_type := b_workshop ; 15 :
32239: LD_ADDR_OWVAR 42
32243: PUSH
32244: LD_INT 2
32246: ST_TO_ADDR
32247: GO 32647
32249: LD_INT 15
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// bc_type := b_factory ; 16 :
32258: LD_ADDR_OWVAR 42
32262: PUSH
32263: LD_INT 3
32265: ST_TO_ADDR
32266: GO 32647
32268: LD_INT 16
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// bc_type := b_ext_gun ; 17 :
32277: LD_ADDR_OWVAR 42
32281: PUSH
32282: LD_INT 17
32284: ST_TO_ADDR
32285: GO 32647
32287: LD_INT 17
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32295
32293: GO 32323
32295: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32296: LD_ADDR_OWVAR 42
32300: PUSH
32301: LD_INT 19
32303: PUSH
32304: LD_INT 23
32306: PUSH
32307: LD_INT 19
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: PUSH
32315: LD_VAR 0 1
32319: ARRAY
32320: ST_TO_ADDR
32321: GO 32647
32323: LD_INT 18
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32331
32329: GO 32342
32331: POP
// bc_type := b_ext_radar ; 19 :
32332: LD_ADDR_OWVAR 42
32336: PUSH
32337: LD_INT 20
32339: ST_TO_ADDR
32340: GO 32647
32342: LD_INT 19
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32361
32350: POP
// bc_type := b_ext_radio ; 20 :
32351: LD_ADDR_OWVAR 42
32355: PUSH
32356: LD_INT 22
32358: ST_TO_ADDR
32359: GO 32647
32361: LD_INT 20
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32369
32367: GO 32380
32369: POP
// bc_type := b_ext_siberium ; 21 :
32370: LD_ADDR_OWVAR 42
32374: PUSH
32375: LD_INT 21
32377: ST_TO_ADDR
32378: GO 32647
32380: LD_INT 21
32382: DOUBLE
32383: EQUAL
32384: IFTRUE 32388
32386: GO 32399
32388: POP
// bc_type := b_ext_computer ; 22 :
32389: LD_ADDR_OWVAR 42
32393: PUSH
32394: LD_INT 24
32396: ST_TO_ADDR
32397: GO 32647
32399: LD_INT 22
32401: DOUBLE
32402: EQUAL
32403: IFTRUE 32407
32405: GO 32418
32407: POP
// bc_type := b_ext_track ; 23 :
32408: LD_ADDR_OWVAR 42
32412: PUSH
32413: LD_INT 16
32415: ST_TO_ADDR
32416: GO 32647
32418: LD_INT 23
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32426
32424: GO 32437
32426: POP
// bc_type := b_ext_laser ; 24 :
32427: LD_ADDR_OWVAR 42
32431: PUSH
32432: LD_INT 25
32434: ST_TO_ADDR
32435: GO 32647
32437: LD_INT 24
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32445
32443: GO 32456
32445: POP
// bc_type := b_control_tower ; 25 :
32446: LD_ADDR_OWVAR 42
32450: PUSH
32451: LD_INT 36
32453: ST_TO_ADDR
32454: GO 32647
32456: LD_INT 25
32458: DOUBLE
32459: EQUAL
32460: IFTRUE 32464
32462: GO 32475
32464: POP
// bc_type := b_breastwork ; 26 :
32465: LD_ADDR_OWVAR 42
32469: PUSH
32470: LD_INT 31
32472: ST_TO_ADDR
32473: GO 32647
32475: LD_INT 26
32477: DOUBLE
32478: EQUAL
32479: IFTRUE 32483
32481: GO 32494
32483: POP
// bc_type := b_bunker ; 27 :
32484: LD_ADDR_OWVAR 42
32488: PUSH
32489: LD_INT 32
32491: ST_TO_ADDR
32492: GO 32647
32494: LD_INT 27
32496: DOUBLE
32497: EQUAL
32498: IFTRUE 32502
32500: GO 32513
32502: POP
// bc_type := b_turret ; 28 :
32503: LD_ADDR_OWVAR 42
32507: PUSH
32508: LD_INT 33
32510: ST_TO_ADDR
32511: GO 32647
32513: LD_INT 28
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32532
32521: POP
// bc_type := b_armoury ; 29 :
32522: LD_ADDR_OWVAR 42
32526: PUSH
32527: LD_INT 4
32529: ST_TO_ADDR
32530: GO 32647
32532: LD_INT 29
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32551
32540: POP
// bc_type := b_barracks ; 30 :
32541: LD_ADDR_OWVAR 42
32545: PUSH
32546: LD_INT 5
32548: ST_TO_ADDR
32549: GO 32647
32551: LD_INT 30
32553: DOUBLE
32554: EQUAL
32555: IFTRUE 32559
32557: GO 32570
32559: POP
// bc_type := b_solar_power ; 31 :
32560: LD_ADDR_OWVAR 42
32564: PUSH
32565: LD_INT 27
32567: ST_TO_ADDR
32568: GO 32647
32570: LD_INT 31
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32578
32576: GO 32589
32578: POP
// bc_type := b_oil_power ; 32 :
32579: LD_ADDR_OWVAR 42
32583: PUSH
32584: LD_INT 26
32586: ST_TO_ADDR
32587: GO 32647
32589: LD_INT 32
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32608
32597: POP
// bc_type := b_siberite_power ; 33 :
32598: LD_ADDR_OWVAR 42
32602: PUSH
32603: LD_INT 28
32605: ST_TO_ADDR
32606: GO 32647
32608: LD_INT 33
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32616
32614: GO 32627
32616: POP
// bc_type := b_oil_mine ; 34 :
32617: LD_ADDR_OWVAR 42
32621: PUSH
32622: LD_INT 29
32624: ST_TO_ADDR
32625: GO 32647
32627: LD_INT 34
32629: DOUBLE
32630: EQUAL
32631: IFTRUE 32635
32633: GO 32646
32635: POP
// bc_type := b_siberite_mine ; end ;
32636: LD_ADDR_OWVAR 42
32640: PUSH
32641: LD_INT 30
32643: ST_TO_ADDR
32644: GO 32647
32646: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32647: LD_ADDR_VAR 0 8
32651: PUSH
32652: LD_VAR 0 5
32656: PPUSH
32657: LD_VAR 0 6
32661: PPUSH
32662: LD_VAR 0 3
32666: PPUSH
32667: CALL_OW 47
32671: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32672: LD_OWVAR 42
32676: PUSH
32677: LD_INT 32
32679: PUSH
32680: LD_INT 33
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: IN
32687: IFFALSE 32703
// PlaceWeaponTurret ( b , weapon ) ;
32689: LD_VAR 0 8
32693: PPUSH
32694: LD_VAR 0 4
32698: PPUSH
32699: CALL_OW 431
// end ;
32703: LD_VAR 0 7
32707: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32708: LD_INT 0
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32714: LD_ADDR_VAR 0 4
32718: PUSH
32719: LD_INT 22
32721: PUSH
32722: LD_OWVAR 2
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 30
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 30
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PPUSH
32763: CALL_OW 69
32767: ST_TO_ADDR
// if not tmp then
32768: LD_VAR 0 4
32772: NOT
32773: IFFALSE 32777
// exit ;
32775: GO 32836
// for i in tmp do
32777: LD_ADDR_VAR 0 2
32781: PUSH
32782: LD_VAR 0 4
32786: PUSH
32787: FOR_IN
32788: IFFALSE 32834
// for j = 1 to 3 do
32790: LD_ADDR_VAR 0 3
32794: PUSH
32795: DOUBLE
32796: LD_INT 1
32798: DEC
32799: ST_TO_ADDR
32800: LD_INT 3
32802: PUSH
32803: FOR_TO
32804: IFFALSE 32830
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32806: LD_VAR 0 2
32810: PPUSH
32811: CALL_OW 274
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: LD_INT 99999
32823: PPUSH
32824: CALL_OW 277
32828: GO 32803
32830: POP
32831: POP
32832: GO 32787
32834: POP
32835: POP
// end ;
32836: LD_VAR 0 1
32840: RET
// export function hHackSetLevel10 ; var i , j ; begin
32841: LD_INT 0
32843: PPUSH
32844: PPUSH
32845: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32846: LD_ADDR_VAR 0 2
32850: PUSH
32851: LD_INT 21
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PPUSH
32861: CALL_OW 69
32865: PUSH
32866: FOR_IN
32867: IFFALSE 32919
// if IsSelected ( i ) then
32869: LD_VAR 0 2
32873: PPUSH
32874: CALL_OW 306
32878: IFFALSE 32917
// begin for j := 1 to 4 do
32880: LD_ADDR_VAR 0 3
32884: PUSH
32885: DOUBLE
32886: LD_INT 1
32888: DEC
32889: ST_TO_ADDR
32890: LD_INT 4
32892: PUSH
32893: FOR_TO
32894: IFFALSE 32915
// SetSkill ( i , j , 10 ) ;
32896: LD_VAR 0 2
32900: PPUSH
32901: LD_VAR 0 3
32905: PPUSH
32906: LD_INT 10
32908: PPUSH
32909: CALL_OW 237
32913: GO 32893
32915: POP
32916: POP
// end ;
32917: GO 32866
32919: POP
32920: POP
// end ;
32921: LD_VAR 0 1
32925: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32926: LD_INT 0
32928: PPUSH
32929: PPUSH
32930: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32931: LD_ADDR_VAR 0 2
32935: PUSH
32936: LD_INT 22
32938: PUSH
32939: LD_OWVAR 2
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 21
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PPUSH
32962: CALL_OW 69
32966: PUSH
32967: FOR_IN
32968: IFFALSE 33009
// begin for j := 1 to 4 do
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: DOUBLE
32976: LD_INT 1
32978: DEC
32979: ST_TO_ADDR
32980: LD_INT 4
32982: PUSH
32983: FOR_TO
32984: IFFALSE 33005
// SetSkill ( i , j , 10 ) ;
32986: LD_VAR 0 2
32990: PPUSH
32991: LD_VAR 0 3
32995: PPUSH
32996: LD_INT 10
32998: PPUSH
32999: CALL_OW 237
33003: GO 32983
33005: POP
33006: POP
// end ;
33007: GO 32967
33009: POP
33010: POP
// end ;
33011: LD_VAR 0 1
33015: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33016: LD_INT 0
33018: PPUSH
// uc_side := your_side ;
33019: LD_ADDR_OWVAR 20
33023: PUSH
33024: LD_OWVAR 2
33028: ST_TO_ADDR
// uc_nation := nation ;
33029: LD_ADDR_OWVAR 21
33033: PUSH
33034: LD_VAR 0 1
33038: ST_TO_ADDR
// InitHc ;
33039: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33043: LD_INT 0
33045: PPUSH
33046: LD_VAR 0 2
33050: PPUSH
33051: LD_VAR 0 3
33055: PPUSH
33056: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33060: LD_VAR 0 4
33064: PPUSH
33065: LD_VAR 0 5
33069: PPUSH
33070: CALL_OW 428
33074: PUSH
33075: LD_INT 0
33077: EQUAL
33078: IFFALSE 33102
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33080: CALL_OW 44
33084: PPUSH
33085: LD_VAR 0 4
33089: PPUSH
33090: LD_VAR 0 5
33094: PPUSH
33095: LD_INT 1
33097: PPUSH
33098: CALL_OW 48
// end ;
33102: LD_VAR 0 6
33106: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33107: LD_INT 0
33109: PPUSH
33110: PPUSH
// uc_side := your_side ;
33111: LD_ADDR_OWVAR 20
33115: PUSH
33116: LD_OWVAR 2
33120: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33121: LD_VAR 0 1
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: LD_INT 3
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: LD_INT 5
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: IN
33148: IFFALSE 33160
// uc_nation := nation_american else
33150: LD_ADDR_OWVAR 21
33154: PUSH
33155: LD_INT 1
33157: ST_TO_ADDR
33158: GO 33203
// if chassis in [ 11 , 12 , 13 , 14 ] then
33160: LD_VAR 0 1
33164: PUSH
33165: LD_INT 11
33167: PUSH
33168: LD_INT 12
33170: PUSH
33171: LD_INT 13
33173: PUSH
33174: LD_INT 14
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: IN
33183: IFFALSE 33195
// uc_nation := nation_arabian else
33185: LD_ADDR_OWVAR 21
33189: PUSH
33190: LD_INT 2
33192: ST_TO_ADDR
33193: GO 33203
// uc_nation := nation_russian ;
33195: LD_ADDR_OWVAR 21
33199: PUSH
33200: LD_INT 3
33202: ST_TO_ADDR
// vc_chassis := chassis ;
33203: LD_ADDR_OWVAR 37
33207: PUSH
33208: LD_VAR 0 1
33212: ST_TO_ADDR
// vc_engine := engine ;
33213: LD_ADDR_OWVAR 39
33217: PUSH
33218: LD_VAR 0 2
33222: ST_TO_ADDR
// vc_control := control ;
33223: LD_ADDR_OWVAR 38
33227: PUSH
33228: LD_VAR 0 3
33232: ST_TO_ADDR
// vc_weapon := weapon ;
33233: LD_ADDR_OWVAR 40
33237: PUSH
33238: LD_VAR 0 4
33242: ST_TO_ADDR
// un := CreateVehicle ;
33243: LD_ADDR_VAR 0 8
33247: PUSH
33248: CALL_OW 45
33252: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33253: LD_VAR 0 8
33257: PPUSH
33258: LD_INT 0
33260: PPUSH
33261: LD_INT 5
33263: PPUSH
33264: CALL_OW 12
33268: PPUSH
33269: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33273: LD_VAR 0 8
33277: PPUSH
33278: LD_VAR 0 5
33282: PPUSH
33283: LD_VAR 0 6
33287: PPUSH
33288: LD_INT 1
33290: PPUSH
33291: CALL_OW 48
// end ;
33295: LD_VAR 0 7
33299: RET
// export hInvincible ; every 1 do
33300: GO 33302
33302: DISABLE
// hInvincible := [ ] ;
33303: LD_ADDR_EXP 112
33307: PUSH
33308: EMPTY
33309: ST_TO_ADDR
33310: END
// every 10 do var i ;
33311: GO 33313
33313: DISABLE
33314: LD_INT 0
33316: PPUSH
// begin enable ;
33317: ENABLE
// if not hInvincible then
33318: LD_EXP 112
33322: NOT
33323: IFFALSE 33327
// exit ;
33325: GO 33371
// for i in hInvincible do
33327: LD_ADDR_VAR 0 1
33331: PUSH
33332: LD_EXP 112
33336: PUSH
33337: FOR_IN
33338: IFFALSE 33369
// if GetLives ( i ) < 1000 then
33340: LD_VAR 0 1
33344: PPUSH
33345: CALL_OW 256
33349: PUSH
33350: LD_INT 1000
33352: LESS
33353: IFFALSE 33367
// SetLives ( i , 1000 ) ;
33355: LD_VAR 0 1
33359: PPUSH
33360: LD_INT 1000
33362: PPUSH
33363: CALL_OW 234
33367: GO 33337
33369: POP
33370: POP
// end ;
33371: PPOPN 1
33373: END
// export function hHackInvincible ; var i ; begin
33374: LD_INT 0
33376: PPUSH
33377: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33378: LD_ADDR_VAR 0 2
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: LD_INT 21
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 21
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: PPUSH
33411: CALL_OW 69
33415: PUSH
33416: FOR_IN
33417: IFFALSE 33478
// if IsSelected ( i ) then
33419: LD_VAR 0 2
33423: PPUSH
33424: CALL_OW 306
33428: IFFALSE 33476
// begin if i in hInvincible then
33430: LD_VAR 0 2
33434: PUSH
33435: LD_EXP 112
33439: IN
33440: IFFALSE 33460
// hInvincible := hInvincible diff i else
33442: LD_ADDR_EXP 112
33446: PUSH
33447: LD_EXP 112
33451: PUSH
33452: LD_VAR 0 2
33456: DIFF
33457: ST_TO_ADDR
33458: GO 33476
// hInvincible := hInvincible union i ;
33460: LD_ADDR_EXP 112
33464: PUSH
33465: LD_EXP 112
33469: PUSH
33470: LD_VAR 0 2
33474: UNION
33475: ST_TO_ADDR
// end ;
33476: GO 33416
33478: POP
33479: POP
// end ;
33480: LD_VAR 0 1
33484: RET
// export function hHackInvisible ; var i , j ; begin
33485: LD_INT 0
33487: PPUSH
33488: PPUSH
33489: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33490: LD_ADDR_VAR 0 2
33494: PUSH
33495: LD_INT 21
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 69
33509: PUSH
33510: FOR_IN
33511: IFFALSE 33535
// if IsSelected ( i ) then
33513: LD_VAR 0 2
33517: PPUSH
33518: CALL_OW 306
33522: IFFALSE 33533
// ComForceInvisible ( i ) ;
33524: LD_VAR 0 2
33528: PPUSH
33529: CALL_OW 496
33533: GO 33510
33535: POP
33536: POP
// end ;
33537: LD_VAR 0 1
33541: RET
// export function hHackChangeYourSide ; begin
33542: LD_INT 0
33544: PPUSH
// if your_side = 8 then
33545: LD_OWVAR 2
33549: PUSH
33550: LD_INT 8
33552: EQUAL
33553: IFFALSE 33565
// your_side := 0 else
33555: LD_ADDR_OWVAR 2
33559: PUSH
33560: LD_INT 0
33562: ST_TO_ADDR
33563: GO 33579
// your_side := your_side + 1 ;
33565: LD_ADDR_OWVAR 2
33569: PUSH
33570: LD_OWVAR 2
33574: PUSH
33575: LD_INT 1
33577: PLUS
33578: ST_TO_ADDR
// end ;
33579: LD_VAR 0 1
33583: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33584: LD_INT 0
33586: PPUSH
33587: PPUSH
33588: PPUSH
// for i in all_units do
33589: LD_ADDR_VAR 0 2
33593: PUSH
33594: LD_OWVAR 3
33598: PUSH
33599: FOR_IN
33600: IFFALSE 33678
// if IsSelected ( i ) then
33602: LD_VAR 0 2
33606: PPUSH
33607: CALL_OW 306
33611: IFFALSE 33676
// begin j := GetSide ( i ) ;
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_VAR 0 2
33622: PPUSH
33623: CALL_OW 255
33627: ST_TO_ADDR
// if j = 8 then
33628: LD_VAR 0 3
33632: PUSH
33633: LD_INT 8
33635: EQUAL
33636: IFFALSE 33648
// j := 0 else
33638: LD_ADDR_VAR 0 3
33642: PUSH
33643: LD_INT 0
33645: ST_TO_ADDR
33646: GO 33662
// j := j + 1 ;
33648: LD_ADDR_VAR 0 3
33652: PUSH
33653: LD_VAR 0 3
33657: PUSH
33658: LD_INT 1
33660: PLUS
33661: ST_TO_ADDR
// SetSide ( i , j ) ;
33662: LD_VAR 0 2
33666: PPUSH
33667: LD_VAR 0 3
33671: PPUSH
33672: CALL_OW 235
// end ;
33676: GO 33599
33678: POP
33679: POP
// end ;
33680: LD_VAR 0 1
33684: RET
// export function hHackFog ; begin
33685: LD_INT 0
33687: PPUSH
// FogOff ( true ) ;
33688: LD_INT 1
33690: PPUSH
33691: CALL_OW 344
// end ;
33695: LD_VAR 0 1
33699: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33700: LD_INT 0
33702: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33703: LD_VAR 0 1
33707: PPUSH
33708: LD_VAR 0 2
33712: PPUSH
33713: LD_VAR 0 3
33717: PPUSH
33718: LD_INT 1
33720: PPUSH
33721: LD_INT 1
33723: PPUSH
33724: CALL_OW 483
// CenterOnXY ( x , y ) ;
33728: LD_VAR 0 2
33732: PPUSH
33733: LD_VAR 0 3
33737: PPUSH
33738: CALL_OW 84
// end ;
33742: LD_VAR 0 4
33746: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33747: LD_INT 0
33749: PPUSH
33750: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33751: LD_VAR 0 1
33755: NOT
33756: PUSH
33757: LD_VAR 0 2
33761: PPUSH
33762: LD_VAR 0 3
33766: PPUSH
33767: CALL_OW 488
33771: NOT
33772: OR
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 266
33783: PUSH
33784: LD_INT 3
33786: NONEQUAL
33787: PUSH
33788: LD_VAR 0 1
33792: PPUSH
33793: CALL_OW 247
33797: PUSH
33798: LD_INT 1
33800: EQUAL
33801: NOT
33802: AND
33803: OR
33804: IFFALSE 33808
// exit ;
33806: GO 33957
// if GetType ( factory ) = unit_human then
33808: LD_VAR 0 1
33812: PPUSH
33813: CALL_OW 247
33817: PUSH
33818: LD_INT 1
33820: EQUAL
33821: IFFALSE 33838
// factory := IsInUnit ( factory ) ;
33823: LD_ADDR_VAR 0 1
33827: PUSH
33828: LD_VAR 0 1
33832: PPUSH
33833: CALL_OW 310
33837: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33838: LD_VAR 0 1
33842: PPUSH
33843: CALL_OW 266
33847: PUSH
33848: LD_INT 3
33850: NONEQUAL
33851: IFFALSE 33855
// exit ;
33853: GO 33957
// if HexInfo ( x , y ) = factory then
33855: LD_VAR 0 2
33859: PPUSH
33860: LD_VAR 0 3
33864: PPUSH
33865: CALL_OW 428
33869: PUSH
33870: LD_VAR 0 1
33874: EQUAL
33875: IFFALSE 33902
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33877: LD_ADDR_EXP 113
33881: PUSH
33882: LD_EXP 113
33886: PPUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: LD_INT 0
33894: PPUSH
33895: CALL_OW 1
33899: ST_TO_ADDR
33900: GO 33953
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33902: LD_ADDR_EXP 113
33906: PUSH
33907: LD_EXP 113
33911: PPUSH
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 255
33926: PUSH
33927: LD_VAR 0 1
33931: PUSH
33932: LD_VAR 0 2
33936: PUSH
33937: LD_VAR 0 3
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: PPUSH
33948: CALL_OW 1
33952: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33953: CALL 33962 0 0
// end ;
33957: LD_VAR 0 4
33961: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
33966: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33967: LD_STRING resetFactoryWaypoint();
33969: PPUSH
33970: CALL_OW 559
// if factoryWaypoints then
33974: LD_EXP 113
33978: IFFALSE 34104
// begin list := PrepareArray ( factoryWaypoints ) ;
33980: LD_ADDR_VAR 0 3
33984: PUSH
33985: LD_EXP 113
33989: PPUSH
33990: CALL 76284 0 1
33994: ST_TO_ADDR
// for i := 1 to list do
33995: LD_ADDR_VAR 0 2
33999: PUSH
34000: DOUBLE
34001: LD_INT 1
34003: DEC
34004: ST_TO_ADDR
34005: LD_VAR 0 3
34009: PUSH
34010: FOR_TO
34011: IFFALSE 34102
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34013: LD_STRING setFactoryWaypointXY(
34015: PUSH
34016: LD_VAR 0 3
34020: PUSH
34021: LD_VAR 0 2
34025: ARRAY
34026: PUSH
34027: LD_INT 1
34029: ARRAY
34030: STR
34031: PUSH
34032: LD_STRING ,
34034: STR
34035: PUSH
34036: LD_VAR 0 3
34040: PUSH
34041: LD_VAR 0 2
34045: ARRAY
34046: PUSH
34047: LD_INT 2
34049: ARRAY
34050: STR
34051: PUSH
34052: LD_STRING ,
34054: STR
34055: PUSH
34056: LD_VAR 0 3
34060: PUSH
34061: LD_VAR 0 2
34065: ARRAY
34066: PUSH
34067: LD_INT 3
34069: ARRAY
34070: STR
34071: PUSH
34072: LD_STRING ,
34074: STR
34075: PUSH
34076: LD_VAR 0 3
34080: PUSH
34081: LD_VAR 0 2
34085: ARRAY
34086: PUSH
34087: LD_INT 4
34089: ARRAY
34090: STR
34091: PUSH
34092: LD_STRING )
34094: STR
34095: PPUSH
34096: CALL_OW 559
34100: GO 34010
34102: POP
34103: POP
// end ; end ;
34104: LD_VAR 0 1
34108: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34109: LD_INT 0
34111: PPUSH
// if HexInfo ( x , y ) = warehouse then
34112: LD_VAR 0 2
34116: PPUSH
34117: LD_VAR 0 3
34121: PPUSH
34122: CALL_OW 428
34126: PUSH
34127: LD_VAR 0 1
34131: EQUAL
34132: IFFALSE 34159
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34134: LD_ADDR_EXP 114
34138: PUSH
34139: LD_EXP 114
34143: PPUSH
34144: LD_VAR 0 1
34148: PPUSH
34149: LD_INT 0
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
34157: GO 34210
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34159: LD_ADDR_EXP 114
34163: PUSH
34164: LD_EXP 114
34168: PPUSH
34169: LD_VAR 0 1
34173: PPUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: CALL_OW 255
34183: PUSH
34184: LD_VAR 0 1
34188: PUSH
34189: LD_VAR 0 2
34193: PUSH
34194: LD_VAR 0 3
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: PPUSH
34205: CALL_OW 1
34209: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34210: CALL 34219 0 0
// end ;
34214: LD_VAR 0 4
34218: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34219: LD_INT 0
34221: PPUSH
34222: PPUSH
34223: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34224: LD_STRING resetWarehouseGatheringPoints();
34226: PPUSH
34227: CALL_OW 559
// if warehouseGatheringPoints then
34231: LD_EXP 114
34235: IFFALSE 34361
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34237: LD_ADDR_VAR 0 3
34241: PUSH
34242: LD_EXP 114
34246: PPUSH
34247: CALL 76284 0 1
34251: ST_TO_ADDR
// for i := 1 to list do
34252: LD_ADDR_VAR 0 2
34256: PUSH
34257: DOUBLE
34258: LD_INT 1
34260: DEC
34261: ST_TO_ADDR
34262: LD_VAR 0 3
34266: PUSH
34267: FOR_TO
34268: IFFALSE 34359
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34270: LD_STRING setWarehouseGatheringPointXY(
34272: PUSH
34273: LD_VAR 0 3
34277: PUSH
34278: LD_VAR 0 2
34282: ARRAY
34283: PUSH
34284: LD_INT 1
34286: ARRAY
34287: STR
34288: PUSH
34289: LD_STRING ,
34291: STR
34292: PUSH
34293: LD_VAR 0 3
34297: PUSH
34298: LD_VAR 0 2
34302: ARRAY
34303: PUSH
34304: LD_INT 2
34306: ARRAY
34307: STR
34308: PUSH
34309: LD_STRING ,
34311: STR
34312: PUSH
34313: LD_VAR 0 3
34317: PUSH
34318: LD_VAR 0 2
34322: ARRAY
34323: PUSH
34324: LD_INT 3
34326: ARRAY
34327: STR
34328: PUSH
34329: LD_STRING ,
34331: STR
34332: PUSH
34333: LD_VAR 0 3
34337: PUSH
34338: LD_VAR 0 2
34342: ARRAY
34343: PUSH
34344: LD_INT 4
34346: ARRAY
34347: STR
34348: PUSH
34349: LD_STRING )
34351: STR
34352: PPUSH
34353: CALL_OW 559
34357: GO 34267
34359: POP
34360: POP
// end ; end ;
34361: LD_VAR 0 1
34365: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34366: LD_EXP 114
34370: IFFALSE 35055
34372: GO 34374
34374: DISABLE
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
34381: PPUSH
34382: PPUSH
34383: PPUSH
34384: PPUSH
34385: PPUSH
// begin enable ;
34386: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_EXP 114
34396: PPUSH
34397: CALL 76284 0 1
34401: ST_TO_ADDR
// if not list then
34402: LD_VAR 0 3
34406: NOT
34407: IFFALSE 34411
// exit ;
34409: GO 35055
// for i := 1 to list do
34411: LD_ADDR_VAR 0 1
34415: PUSH
34416: DOUBLE
34417: LD_INT 1
34419: DEC
34420: ST_TO_ADDR
34421: LD_VAR 0 3
34425: PUSH
34426: FOR_TO
34427: IFFALSE 35053
// begin depot := list [ i ] [ 2 ] ;
34429: LD_ADDR_VAR 0 8
34433: PUSH
34434: LD_VAR 0 3
34438: PUSH
34439: LD_VAR 0 1
34443: ARRAY
34444: PUSH
34445: LD_INT 2
34447: ARRAY
34448: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34449: LD_ADDR_VAR 0 5
34453: PUSH
34454: LD_VAR 0 3
34458: PUSH
34459: LD_VAR 0 1
34463: ARRAY
34464: PUSH
34465: LD_INT 1
34467: ARRAY
34468: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34469: LD_VAR 0 8
34473: PPUSH
34474: CALL_OW 301
34478: PUSH
34479: LD_VAR 0 5
34483: PUSH
34484: LD_VAR 0 8
34488: PPUSH
34489: CALL_OW 255
34493: NONEQUAL
34494: OR
34495: IFFALSE 34524
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34497: LD_ADDR_EXP 114
34501: PUSH
34502: LD_EXP 114
34506: PPUSH
34507: LD_VAR 0 8
34511: PPUSH
34512: LD_INT 0
34514: PPUSH
34515: CALL_OW 1
34519: ST_TO_ADDR
// exit ;
34520: POP
34521: POP
34522: GO 35055
// end ; x := list [ i ] [ 3 ] ;
34524: LD_ADDR_VAR 0 6
34528: PUSH
34529: LD_VAR 0 3
34533: PUSH
34534: LD_VAR 0 1
34538: ARRAY
34539: PUSH
34540: LD_INT 3
34542: ARRAY
34543: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34544: LD_ADDR_VAR 0 7
34548: PUSH
34549: LD_VAR 0 3
34553: PUSH
34554: LD_VAR 0 1
34558: ARRAY
34559: PUSH
34560: LD_INT 4
34562: ARRAY
34563: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34564: LD_ADDR_VAR 0 9
34568: PUSH
34569: LD_VAR 0 6
34573: PPUSH
34574: LD_VAR 0 7
34578: PPUSH
34579: LD_INT 16
34581: PPUSH
34582: CALL 74872 0 3
34586: ST_TO_ADDR
// if not cratesNearbyPoint then
34587: LD_VAR 0 9
34591: NOT
34592: IFFALSE 34598
// exit ;
34594: POP
34595: POP
34596: GO 35055
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34598: LD_ADDR_VAR 0 4
34602: PUSH
34603: LD_INT 22
34605: PUSH
34606: LD_VAR 0 5
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 3
34617: PUSH
34618: LD_INT 60
34620: PUSH
34621: EMPTY
34622: LIST
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 91
34630: PUSH
34631: LD_VAR 0 8
34635: PUSH
34636: LD_INT 6
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 25
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 25
34659: PUSH
34660: LD_INT 16
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: PPUSH
34678: CALL_OW 69
34682: PUSH
34683: LD_VAR 0 8
34687: PPUSH
34688: CALL_OW 313
34692: PPUSH
34693: LD_INT 3
34695: PUSH
34696: LD_INT 60
34698: PUSH
34699: EMPTY
34700: LIST
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 25
34711: PUSH
34712: LD_INT 2
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 25
34721: PUSH
34722: LD_INT 16
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PPUSH
34738: CALL_OW 72
34742: UNION
34743: ST_TO_ADDR
// if tmp then
34744: LD_VAR 0 4
34748: IFFALSE 34828
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34750: LD_ADDR_VAR 0 4
34754: PUSH
34755: LD_VAR 0 4
34759: PPUSH
34760: LD_INT 3
34762: PPUSH
34763: CALL 72841 0 2
34767: ST_TO_ADDR
// for j in tmp do
34768: LD_ADDR_VAR 0 2
34772: PUSH
34773: LD_VAR 0 4
34777: PUSH
34778: FOR_IN
34779: IFFALSE 34822
// begin if IsInUnit ( j ) then
34781: LD_VAR 0 2
34785: PPUSH
34786: CALL_OW 310
34790: IFFALSE 34801
// ComExit ( j ) ;
34792: LD_VAR 0 2
34796: PPUSH
34797: CALL 72924 0 1
// AddComCollect ( j , x , y ) ;
34801: LD_VAR 0 2
34805: PPUSH
34806: LD_VAR 0 6
34810: PPUSH
34811: LD_VAR 0 7
34815: PPUSH
34816: CALL_OW 177
// end ;
34820: GO 34778
34822: POP
34823: POP
// exit ;
34824: POP
34825: POP
34826: GO 35055
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34828: LD_ADDR_VAR 0 4
34832: PUSH
34833: LD_INT 22
34835: PUSH
34836: LD_VAR 0 5
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 91
34847: PUSH
34848: LD_VAR 0 8
34852: PUSH
34853: LD_INT 8
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: LD_INT 34
34866: PUSH
34867: LD_INT 12
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 34
34876: PUSH
34877: LD_INT 51
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 34
34886: PUSH
34887: LD_INT 32
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 34
34896: PUSH
34897: LD_INT 89
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: PPUSH
34916: CALL_OW 69
34920: ST_TO_ADDR
// if tmp then
34921: LD_VAR 0 4
34925: IFFALSE 35051
// begin for j in tmp do
34927: LD_ADDR_VAR 0 2
34931: PUSH
34932: LD_VAR 0 4
34936: PUSH
34937: FOR_IN
34938: IFFALSE 35049
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34940: LD_VAR 0 2
34944: PPUSH
34945: CALL_OW 262
34949: PUSH
34950: LD_INT 3
34952: EQUAL
34953: PUSH
34954: LD_VAR 0 2
34958: PPUSH
34959: CALL_OW 261
34963: PUSH
34964: LD_INT 20
34966: GREATER
34967: OR
34968: PUSH
34969: LD_VAR 0 2
34973: PPUSH
34974: CALL_OW 314
34978: NOT
34979: AND
34980: PUSH
34981: LD_VAR 0 2
34985: PPUSH
34986: CALL_OW 263
34990: PUSH
34991: LD_INT 1
34993: NONEQUAL
34994: PUSH
34995: LD_VAR 0 2
34999: PPUSH
35000: CALL_OW 311
35004: OR
35005: AND
35006: IFFALSE 35047
// begin ComCollect ( j , x , y ) ;
35008: LD_VAR 0 2
35012: PPUSH
35013: LD_VAR 0 6
35017: PPUSH
35018: LD_VAR 0 7
35022: PPUSH
35023: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35027: LD_VAR 0 2
35031: PPUSH
35032: LD_VAR 0 8
35036: PPUSH
35037: CALL_OW 172
// exit ;
35041: POP
35042: POP
35043: POP
35044: POP
35045: GO 35055
// end ;
35047: GO 34937
35049: POP
35050: POP
// end ; end ;
35051: GO 34426
35053: POP
35054: POP
// end ; end_of_file end_of_file
35055: PPOPN 9
35057: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35058: LD_INT 0
35060: PPUSH
35061: PPUSH
// if exist_mode then
35062: LD_VAR 0 2
35066: IFFALSE 35091
// unit := CreateCharacter ( prefix & ident ) else
35068: LD_ADDR_VAR 0 5
35072: PUSH
35073: LD_VAR 0 3
35077: PUSH
35078: LD_VAR 0 1
35082: STR
35083: PPUSH
35084: CALL_OW 34
35088: ST_TO_ADDR
35089: GO 35106
// unit := NewCharacter ( ident ) ;
35091: LD_ADDR_VAR 0 5
35095: PUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 25
35105: ST_TO_ADDR
// result := unit ;
35106: LD_ADDR_VAR 0 4
35110: PUSH
35111: LD_VAR 0 5
35115: ST_TO_ADDR
// end ;
35116: LD_VAR 0 4
35120: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35121: LD_INT 0
35123: PPUSH
35124: PPUSH
// if not side or not nation then
35125: LD_VAR 0 1
35129: NOT
35130: PUSH
35131: LD_VAR 0 2
35135: NOT
35136: OR
35137: IFFALSE 35141
// exit ;
35139: GO 35909
// case nation of nation_american :
35141: LD_VAR 0 2
35145: PUSH
35146: LD_INT 1
35148: DOUBLE
35149: EQUAL
35150: IFTRUE 35154
35152: GO 35368
35154: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35155: LD_ADDR_VAR 0 4
35159: PUSH
35160: LD_INT 35
35162: PUSH
35163: LD_INT 45
35165: PUSH
35166: LD_INT 46
35168: PUSH
35169: LD_INT 47
35171: PUSH
35172: LD_INT 82
35174: PUSH
35175: LD_INT 83
35177: PUSH
35178: LD_INT 84
35180: PUSH
35181: LD_INT 85
35183: PUSH
35184: LD_INT 86
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 6
35195: PUSH
35196: LD_INT 15
35198: PUSH
35199: LD_INT 16
35201: PUSH
35202: LD_INT 7
35204: PUSH
35205: LD_INT 12
35207: PUSH
35208: LD_INT 13
35210: PUSH
35211: LD_INT 10
35213: PUSH
35214: LD_INT 14
35216: PUSH
35217: LD_INT 20
35219: PUSH
35220: LD_INT 21
35222: PUSH
35223: LD_INT 22
35225: PUSH
35226: LD_INT 25
35228: PUSH
35229: LD_INT 32
35231: PUSH
35232: LD_INT 27
35234: PUSH
35235: LD_INT 36
35237: PUSH
35238: LD_INT 69
35240: PUSH
35241: LD_INT 39
35243: PUSH
35244: LD_INT 34
35246: PUSH
35247: LD_INT 40
35249: PUSH
35250: LD_INT 48
35252: PUSH
35253: LD_INT 49
35255: PUSH
35256: LD_INT 50
35258: PUSH
35259: LD_INT 51
35261: PUSH
35262: LD_INT 52
35264: PUSH
35265: LD_INT 53
35267: PUSH
35268: LD_INT 54
35270: PUSH
35271: LD_INT 55
35273: PUSH
35274: LD_INT 56
35276: PUSH
35277: LD_INT 57
35279: PUSH
35280: LD_INT 58
35282: PUSH
35283: LD_INT 59
35285: PUSH
35286: LD_INT 60
35288: PUSH
35289: LD_INT 61
35291: PUSH
35292: LD_INT 62
35294: PUSH
35295: LD_INT 80
35297: PUSH
35298: LD_INT 82
35300: PUSH
35301: LD_INT 83
35303: PUSH
35304: LD_INT 84
35306: PUSH
35307: LD_INT 85
35309: PUSH
35310: LD_INT 86
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
35366: GO 35833
35368: LD_INT 2
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35602
35376: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35377: LD_ADDR_VAR 0 4
35381: PUSH
35382: LD_INT 35
35384: PUSH
35385: LD_INT 45
35387: PUSH
35388: LD_INT 46
35390: PUSH
35391: LD_INT 47
35393: PUSH
35394: LD_INT 82
35396: PUSH
35397: LD_INT 83
35399: PUSH
35400: LD_INT 84
35402: PUSH
35403: LD_INT 85
35405: PUSH
35406: LD_INT 87
35408: PUSH
35409: LD_INT 70
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 11
35417: PUSH
35418: LD_INT 3
35420: PUSH
35421: LD_INT 4
35423: PUSH
35424: LD_INT 5
35426: PUSH
35427: LD_INT 6
35429: PUSH
35430: LD_INT 15
35432: PUSH
35433: LD_INT 18
35435: PUSH
35436: LD_INT 7
35438: PUSH
35439: LD_INT 17
35441: PUSH
35442: LD_INT 8
35444: PUSH
35445: LD_INT 20
35447: PUSH
35448: LD_INT 21
35450: PUSH
35451: LD_INT 22
35453: PUSH
35454: LD_INT 72
35456: PUSH
35457: LD_INT 26
35459: PUSH
35460: LD_INT 69
35462: PUSH
35463: LD_INT 39
35465: PUSH
35466: LD_INT 40
35468: PUSH
35469: LD_INT 41
35471: PUSH
35472: LD_INT 42
35474: PUSH
35475: LD_INT 43
35477: PUSH
35478: LD_INT 48
35480: PUSH
35481: LD_INT 49
35483: PUSH
35484: LD_INT 50
35486: PUSH
35487: LD_INT 51
35489: PUSH
35490: LD_INT 52
35492: PUSH
35493: LD_INT 53
35495: PUSH
35496: LD_INT 54
35498: PUSH
35499: LD_INT 55
35501: PUSH
35502: LD_INT 56
35504: PUSH
35505: LD_INT 60
35507: PUSH
35508: LD_INT 61
35510: PUSH
35511: LD_INT 62
35513: PUSH
35514: LD_INT 66
35516: PUSH
35517: LD_INT 67
35519: PUSH
35520: LD_INT 68
35522: PUSH
35523: LD_INT 81
35525: PUSH
35526: LD_INT 82
35528: PUSH
35529: LD_INT 83
35531: PUSH
35532: LD_INT 84
35534: PUSH
35535: LD_INT 85
35537: PUSH
35538: LD_INT 87
35540: PUSH
35541: LD_INT 88
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: ST_TO_ADDR
35600: GO 35833
35602: LD_INT 3
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 35832
35610: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35611: LD_ADDR_VAR 0 4
35615: PUSH
35616: LD_INT 46
35618: PUSH
35619: LD_INT 47
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 82
35630: PUSH
35631: LD_INT 83
35633: PUSH
35634: LD_INT 84
35636: PUSH
35637: LD_INT 85
35639: PUSH
35640: LD_INT 86
35642: PUSH
35643: LD_INT 11
35645: PUSH
35646: LD_INT 9
35648: PUSH
35649: LD_INT 20
35651: PUSH
35652: LD_INT 19
35654: PUSH
35655: LD_INT 21
35657: PUSH
35658: LD_INT 24
35660: PUSH
35661: LD_INT 22
35663: PUSH
35664: LD_INT 25
35666: PUSH
35667: LD_INT 28
35669: PUSH
35670: LD_INT 29
35672: PUSH
35673: LD_INT 30
35675: PUSH
35676: LD_INT 31
35678: PUSH
35679: LD_INT 37
35681: PUSH
35682: LD_INT 38
35684: PUSH
35685: LD_INT 32
35687: PUSH
35688: LD_INT 27
35690: PUSH
35691: LD_INT 33
35693: PUSH
35694: LD_INT 69
35696: PUSH
35697: LD_INT 39
35699: PUSH
35700: LD_INT 34
35702: PUSH
35703: LD_INT 40
35705: PUSH
35706: LD_INT 71
35708: PUSH
35709: LD_INT 23
35711: PUSH
35712: LD_INT 44
35714: PUSH
35715: LD_INT 48
35717: PUSH
35718: LD_INT 49
35720: PUSH
35721: LD_INT 50
35723: PUSH
35724: LD_INT 51
35726: PUSH
35727: LD_INT 52
35729: PUSH
35730: LD_INT 53
35732: PUSH
35733: LD_INT 54
35735: PUSH
35736: LD_INT 55
35738: PUSH
35739: LD_INT 56
35741: PUSH
35742: LD_INT 57
35744: PUSH
35745: LD_INT 58
35747: PUSH
35748: LD_INT 59
35750: PUSH
35751: LD_INT 63
35753: PUSH
35754: LD_INT 64
35756: PUSH
35757: LD_INT 65
35759: PUSH
35760: LD_INT 82
35762: PUSH
35763: LD_INT 83
35765: PUSH
35766: LD_INT 84
35768: PUSH
35769: LD_INT 85
35771: PUSH
35772: LD_INT 86
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: ST_TO_ADDR
35830: GO 35833
35832: POP
// if state > - 1 and state < 3 then
35833: LD_VAR 0 3
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: GREATER
35842: PUSH
35843: LD_VAR 0 3
35847: PUSH
35848: LD_INT 3
35850: LESS
35851: AND
35852: IFFALSE 35909
// for i in result do
35854: LD_ADDR_VAR 0 5
35858: PUSH
35859: LD_VAR 0 4
35863: PUSH
35864: FOR_IN
35865: IFFALSE 35907
// if GetTech ( i , side ) <> state then
35867: LD_VAR 0 5
35871: PPUSH
35872: LD_VAR 0 1
35876: PPUSH
35877: CALL_OW 321
35881: PUSH
35882: LD_VAR 0 3
35886: NONEQUAL
35887: IFFALSE 35905
// result := result diff i ;
35889: LD_ADDR_VAR 0 4
35893: PUSH
35894: LD_VAR 0 4
35898: PUSH
35899: LD_VAR 0 5
35903: DIFF
35904: ST_TO_ADDR
35905: GO 35864
35907: POP
35908: POP
// end ;
35909: LD_VAR 0 4
35913: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35914: LD_INT 0
35916: PPUSH
35917: PPUSH
35918: PPUSH
// result := true ;
35919: LD_ADDR_VAR 0 3
35923: PUSH
35924: LD_INT 1
35926: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35927: LD_ADDR_VAR 0 5
35931: PUSH
35932: LD_VAR 0 2
35936: PPUSH
35937: CALL_OW 480
35941: ST_TO_ADDR
// if not tmp then
35942: LD_VAR 0 5
35946: NOT
35947: IFFALSE 35951
// exit ;
35949: GO 36000
// for i in tmp do
35951: LD_ADDR_VAR 0 4
35955: PUSH
35956: LD_VAR 0 5
35960: PUSH
35961: FOR_IN
35962: IFFALSE 35998
// if GetTech ( i , side ) <> state_researched then
35964: LD_VAR 0 4
35968: PPUSH
35969: LD_VAR 0 1
35973: PPUSH
35974: CALL_OW 321
35978: PUSH
35979: LD_INT 2
35981: NONEQUAL
35982: IFFALSE 35996
// begin result := false ;
35984: LD_ADDR_VAR 0 3
35988: PUSH
35989: LD_INT 0
35991: ST_TO_ADDR
// exit ;
35992: POP
35993: POP
35994: GO 36000
// end ;
35996: GO 35961
35998: POP
35999: POP
// end ;
36000: LD_VAR 0 3
36004: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36005: LD_INT 0
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36020: LD_VAR 0 1
36024: NOT
36025: PUSH
36026: LD_VAR 0 1
36030: PPUSH
36031: CALL_OW 257
36035: PUSH
36036: LD_INT 9
36038: NONEQUAL
36039: OR
36040: IFFALSE 36044
// exit ;
36042: GO 36617
// side := GetSide ( unit ) ;
36044: LD_ADDR_VAR 0 9
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 255
36058: ST_TO_ADDR
// tech_space := tech_spacanom ;
36059: LD_ADDR_VAR 0 12
36063: PUSH
36064: LD_INT 29
36066: ST_TO_ADDR
// tech_time := tech_taurad ;
36067: LD_ADDR_VAR 0 13
36071: PUSH
36072: LD_INT 28
36074: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36075: LD_ADDR_VAR 0 11
36079: PUSH
36080: LD_VAR 0 1
36084: PPUSH
36085: CALL_OW 310
36089: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36090: LD_VAR 0 11
36094: PPUSH
36095: CALL_OW 247
36099: PUSH
36100: LD_INT 2
36102: EQUAL
36103: IFFALSE 36107
// exit ;
36105: GO 36617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36107: LD_ADDR_VAR 0 8
36111: PUSH
36112: LD_INT 81
36114: PUSH
36115: LD_VAR 0 9
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: LD_INT 21
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PPUSH
36145: CALL_OW 69
36149: ST_TO_ADDR
// if not tmp then
36150: LD_VAR 0 8
36154: NOT
36155: IFFALSE 36159
// exit ;
36157: GO 36617
// if in_unit then
36159: LD_VAR 0 11
36163: IFFALSE 36187
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36165: LD_ADDR_VAR 0 10
36169: PUSH
36170: LD_VAR 0 8
36174: PPUSH
36175: LD_VAR 0 11
36179: PPUSH
36180: CALL_OW 74
36184: ST_TO_ADDR
36185: GO 36207
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36187: LD_ADDR_VAR 0 10
36191: PUSH
36192: LD_VAR 0 8
36196: PPUSH
36197: LD_VAR 0 1
36201: PPUSH
36202: CALL_OW 74
36206: ST_TO_ADDR
// if not enemy then
36207: LD_VAR 0 10
36211: NOT
36212: IFFALSE 36216
// exit ;
36214: GO 36617
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36216: LD_VAR 0 11
36220: PUSH
36221: LD_VAR 0 11
36225: PPUSH
36226: LD_VAR 0 10
36230: PPUSH
36231: CALL_OW 296
36235: PUSH
36236: LD_INT 13
36238: GREATER
36239: AND
36240: PUSH
36241: LD_VAR 0 1
36245: PPUSH
36246: LD_VAR 0 10
36250: PPUSH
36251: CALL_OW 296
36255: PUSH
36256: LD_INT 12
36258: GREATER
36259: OR
36260: IFFALSE 36264
// exit ;
36262: GO 36617
// missile := [ 1 ] ;
36264: LD_ADDR_VAR 0 14
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36275: LD_VAR 0 9
36279: PPUSH
36280: LD_VAR 0 12
36284: PPUSH
36285: CALL_OW 325
36289: IFFALSE 36318
// missile := Replace ( missile , missile + 1 , 2 ) ;
36291: LD_ADDR_VAR 0 14
36295: PUSH
36296: LD_VAR 0 14
36300: PPUSH
36301: LD_VAR 0 14
36305: PUSH
36306: LD_INT 1
36308: PLUS
36309: PPUSH
36310: LD_INT 2
36312: PPUSH
36313: CALL_OW 1
36317: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36318: LD_VAR 0 9
36322: PPUSH
36323: LD_VAR 0 13
36327: PPUSH
36328: CALL_OW 325
36332: PUSH
36333: LD_VAR 0 10
36337: PPUSH
36338: CALL_OW 255
36342: PPUSH
36343: LD_VAR 0 13
36347: PPUSH
36348: CALL_OW 325
36352: NOT
36353: AND
36354: IFFALSE 36383
// missile := Replace ( missile , missile + 1 , 3 ) ;
36356: LD_ADDR_VAR 0 14
36360: PUSH
36361: LD_VAR 0 14
36365: PPUSH
36366: LD_VAR 0 14
36370: PUSH
36371: LD_INT 1
36373: PLUS
36374: PPUSH
36375: LD_INT 3
36377: PPUSH
36378: CALL_OW 1
36382: ST_TO_ADDR
// if missile < 2 then
36383: LD_VAR 0 14
36387: PUSH
36388: LD_INT 2
36390: LESS
36391: IFFALSE 36395
// exit ;
36393: GO 36617
// x := GetX ( enemy ) ;
36395: LD_ADDR_VAR 0 4
36399: PUSH
36400: LD_VAR 0 10
36404: PPUSH
36405: CALL_OW 250
36409: ST_TO_ADDR
// y := GetY ( enemy ) ;
36410: LD_ADDR_VAR 0 5
36414: PUSH
36415: LD_VAR 0 10
36419: PPUSH
36420: CALL_OW 251
36424: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36425: LD_ADDR_VAR 0 6
36429: PUSH
36430: LD_VAR 0 4
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PPUSH
36439: LD_INT 1
36441: PPUSH
36442: CALL_OW 12
36446: PLUS
36447: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36448: LD_ADDR_VAR 0 7
36452: PUSH
36453: LD_VAR 0 5
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PPUSH
36462: LD_INT 1
36464: PPUSH
36465: CALL_OW 12
36469: PLUS
36470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36471: LD_VAR 0 6
36475: PPUSH
36476: LD_VAR 0 7
36480: PPUSH
36481: CALL_OW 488
36485: NOT
36486: IFFALSE 36508
// begin _x := x ;
36488: LD_ADDR_VAR 0 6
36492: PUSH
36493: LD_VAR 0 4
36497: ST_TO_ADDR
// _y := y ;
36498: LD_ADDR_VAR 0 7
36502: PUSH
36503: LD_VAR 0 5
36507: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36508: LD_ADDR_VAR 0 3
36512: PUSH
36513: LD_INT 1
36515: PPUSH
36516: LD_VAR 0 14
36520: PPUSH
36521: CALL_OW 12
36525: ST_TO_ADDR
// case i of 1 :
36526: LD_VAR 0 3
36530: PUSH
36531: LD_INT 1
36533: DOUBLE
36534: EQUAL
36535: IFTRUE 36539
36537: GO 36556
36539: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36540: LD_VAR 0 1
36544: PPUSH
36545: LD_VAR 0 10
36549: PPUSH
36550: CALL_OW 115
36554: GO 36617
36556: LD_INT 2
36558: DOUBLE
36559: EQUAL
36560: IFTRUE 36564
36562: GO 36586
36564: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36565: LD_VAR 0 1
36569: PPUSH
36570: LD_VAR 0 6
36574: PPUSH
36575: LD_VAR 0 7
36579: PPUSH
36580: CALL_OW 153
36584: GO 36617
36586: LD_INT 3
36588: DOUBLE
36589: EQUAL
36590: IFTRUE 36594
36592: GO 36616
36594: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36595: LD_VAR 0 1
36599: PPUSH
36600: LD_VAR 0 6
36604: PPUSH
36605: LD_VAR 0 7
36609: PPUSH
36610: CALL_OW 154
36614: GO 36617
36616: POP
// end ;
36617: LD_VAR 0 2
36621: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36622: LD_INT 0
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
// if not unit or not building then
36630: LD_VAR 0 1
36634: NOT
36635: PUSH
36636: LD_VAR 0 2
36640: NOT
36641: OR
36642: IFFALSE 36646
// exit ;
36644: GO 36804
// x := GetX ( building ) ;
36646: LD_ADDR_VAR 0 5
36650: PUSH
36651: LD_VAR 0 2
36655: PPUSH
36656: CALL_OW 250
36660: ST_TO_ADDR
// y := GetY ( building ) ;
36661: LD_ADDR_VAR 0 6
36665: PUSH
36666: LD_VAR 0 2
36670: PPUSH
36671: CALL_OW 251
36675: ST_TO_ADDR
// for i = 0 to 5 do
36676: LD_ADDR_VAR 0 4
36680: PUSH
36681: DOUBLE
36682: LD_INT 0
36684: DEC
36685: ST_TO_ADDR
36686: LD_INT 5
36688: PUSH
36689: FOR_TO
36690: IFFALSE 36802
// begin _x := ShiftX ( x , i , 3 ) ;
36692: LD_ADDR_VAR 0 7
36696: PUSH
36697: LD_VAR 0 5
36701: PPUSH
36702: LD_VAR 0 4
36706: PPUSH
36707: LD_INT 3
36709: PPUSH
36710: CALL_OW 272
36714: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36715: LD_ADDR_VAR 0 8
36719: PUSH
36720: LD_VAR 0 6
36724: PPUSH
36725: LD_VAR 0 4
36729: PPUSH
36730: LD_INT 3
36732: PPUSH
36733: CALL_OW 273
36737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36738: LD_VAR 0 7
36742: PPUSH
36743: LD_VAR 0 8
36747: PPUSH
36748: CALL_OW 488
36752: NOT
36753: IFFALSE 36757
// continue ;
36755: GO 36689
// if HexInfo ( _x , _y ) = 0 then
36757: LD_VAR 0 7
36761: PPUSH
36762: LD_VAR 0 8
36766: PPUSH
36767: CALL_OW 428
36771: PUSH
36772: LD_INT 0
36774: EQUAL
36775: IFFALSE 36800
// begin ComMoveXY ( unit , _x , _y ) ;
36777: LD_VAR 0 1
36781: PPUSH
36782: LD_VAR 0 7
36786: PPUSH
36787: LD_VAR 0 8
36791: PPUSH
36792: CALL_OW 111
// exit ;
36796: POP
36797: POP
36798: GO 36804
// end ; end ;
36800: GO 36689
36802: POP
36803: POP
// end ;
36804: LD_VAR 0 3
36808: RET
// export function ScanBase ( side , base_area ) ; begin
36809: LD_INT 0
36811: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36812: LD_ADDR_VAR 0 3
36816: PUSH
36817: LD_VAR 0 2
36821: PPUSH
36822: LD_INT 81
36824: PUSH
36825: LD_VAR 0 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PPUSH
36834: CALL_OW 70
36838: ST_TO_ADDR
// end ;
36839: LD_VAR 0 3
36843: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36844: LD_INT 0
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
// result := false ;
36850: LD_ADDR_VAR 0 2
36854: PUSH
36855: LD_INT 0
36857: ST_TO_ADDR
// side := GetSide ( unit ) ;
36858: LD_ADDR_VAR 0 3
36862: PUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 255
36872: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36873: LD_ADDR_VAR 0 4
36877: PUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 248
36887: ST_TO_ADDR
// case nat of 1 :
36888: LD_VAR 0 4
36892: PUSH
36893: LD_INT 1
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36901
36899: GO 36912
36901: POP
// tech := tech_lassight ; 2 :
36902: LD_ADDR_VAR 0 5
36906: PUSH
36907: LD_INT 12
36909: ST_TO_ADDR
36910: GO 36951
36912: LD_INT 2
36914: DOUBLE
36915: EQUAL
36916: IFTRUE 36920
36918: GO 36931
36920: POP
// tech := tech_mortar ; 3 :
36921: LD_ADDR_VAR 0 5
36925: PUSH
36926: LD_INT 41
36928: ST_TO_ADDR
36929: GO 36951
36931: LD_INT 3
36933: DOUBLE
36934: EQUAL
36935: IFTRUE 36939
36937: GO 36950
36939: POP
// tech := tech_bazooka ; end ;
36940: LD_ADDR_VAR 0 5
36944: PUSH
36945: LD_INT 44
36947: ST_TO_ADDR
36948: GO 36951
36950: POP
// if Researched ( side , tech ) then
36951: LD_VAR 0 3
36955: PPUSH
36956: LD_VAR 0 5
36960: PPUSH
36961: CALL_OW 325
36965: IFFALSE 36992
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36967: LD_ADDR_VAR 0 2
36971: PUSH
36972: LD_INT 5
36974: PUSH
36975: LD_INT 8
36977: PUSH
36978: LD_INT 9
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: PUSH
36986: LD_VAR 0 4
36990: ARRAY
36991: ST_TO_ADDR
// end ;
36992: LD_VAR 0 2
36996: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36997: LD_INT 0
36999: PPUSH
37000: PPUSH
37001: PPUSH
// if not mines then
37002: LD_VAR 0 2
37006: NOT
37007: IFFALSE 37011
// exit ;
37009: GO 37155
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37011: LD_ADDR_VAR 0 5
37015: PUSH
37016: LD_INT 81
37018: PUSH
37019: LD_VAR 0 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: LD_INT 21
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PPUSH
37049: CALL_OW 69
37053: ST_TO_ADDR
// for i in mines do
37054: LD_ADDR_VAR 0 4
37058: PUSH
37059: LD_VAR 0 2
37063: PUSH
37064: FOR_IN
37065: IFFALSE 37153
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37067: LD_VAR 0 4
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PPUSH
37076: LD_VAR 0 4
37080: PUSH
37081: LD_INT 2
37083: ARRAY
37084: PPUSH
37085: CALL_OW 458
37089: NOT
37090: IFFALSE 37094
// continue ;
37092: GO 37064
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37094: LD_VAR 0 4
37098: PUSH
37099: LD_INT 1
37101: ARRAY
37102: PPUSH
37103: LD_VAR 0 4
37107: PUSH
37108: LD_INT 2
37110: ARRAY
37111: PPUSH
37112: CALL_OW 428
37116: PUSH
37117: LD_VAR 0 5
37121: IN
37122: IFFALSE 37151
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37124: LD_VAR 0 4
37128: PUSH
37129: LD_INT 1
37131: ARRAY
37132: PPUSH
37133: LD_VAR 0 4
37137: PUSH
37138: LD_INT 2
37140: ARRAY
37141: PPUSH
37142: LD_VAR 0 1
37146: PPUSH
37147: CALL_OW 456
// end ;
37151: GO 37064
37153: POP
37154: POP
// end ;
37155: LD_VAR 0 3
37159: RET
// export function Count ( array ) ; var i ; begin
37160: LD_INT 0
37162: PPUSH
37163: PPUSH
// result := 0 ;
37164: LD_ADDR_VAR 0 2
37168: PUSH
37169: LD_INT 0
37171: ST_TO_ADDR
// for i in array do
37172: LD_ADDR_VAR 0 3
37176: PUSH
37177: LD_VAR 0 1
37181: PUSH
37182: FOR_IN
37183: IFFALSE 37207
// if i then
37185: LD_VAR 0 3
37189: IFFALSE 37205
// result := result + 1 ;
37191: LD_ADDR_VAR 0 2
37195: PUSH
37196: LD_VAR 0 2
37200: PUSH
37201: LD_INT 1
37203: PLUS
37204: ST_TO_ADDR
37205: GO 37182
37207: POP
37208: POP
// end ;
37209: LD_VAR 0 2
37213: RET
// export function IsEmpty ( building ) ; begin
37214: LD_INT 0
37216: PPUSH
// if not building then
37217: LD_VAR 0 1
37221: NOT
37222: IFFALSE 37226
// exit ;
37224: GO 37269
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37226: LD_ADDR_VAR 0 2
37230: PUSH
37231: LD_VAR 0 1
37235: PUSH
37236: LD_INT 22
37238: PUSH
37239: LD_VAR 0 1
37243: PPUSH
37244: CALL_OW 255
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 58
37255: PUSH
37256: EMPTY
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PPUSH
37263: CALL_OW 69
37267: IN
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 2
37273: RET
// export function IsNotFull ( building ) ; var places ; begin
37274: LD_INT 0
37276: PPUSH
37277: PPUSH
// if not building then
37278: LD_VAR 0 1
37282: NOT
37283: IFFALSE 37287
// exit ;
37285: GO 37458
// result := false ;
37287: LD_ADDR_VAR 0 2
37291: PUSH
37292: LD_INT 0
37294: ST_TO_ADDR
// places := 0 ;
37295: LD_ADDR_VAR 0 3
37299: PUSH
37300: LD_INT 0
37302: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 266
37312: PUSH
37313: LD_INT 0
37315: DOUBLE
37316: EQUAL
37317: IFTRUE 37375
37319: LD_INT 1
37321: DOUBLE
37322: EQUAL
37323: IFTRUE 37375
37325: LD_INT 6
37327: DOUBLE
37328: EQUAL
37329: IFTRUE 37375
37331: LD_INT 7
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37375
37337: LD_INT 8
37339: DOUBLE
37340: EQUAL
37341: IFTRUE 37375
37343: LD_INT 4
37345: DOUBLE
37346: EQUAL
37347: IFTRUE 37375
37349: LD_INT 5
37351: DOUBLE
37352: EQUAL
37353: IFTRUE 37375
37355: LD_INT 2
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37375
37361: LD_INT 3
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37375
37367: LD_INT 35
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37375
37373: GO 37386
37375: POP
// places := 6 ; b_bunker , b_breastwork :
37376: LD_ADDR_VAR 0 3
37380: PUSH
37381: LD_INT 6
37383: ST_TO_ADDR
37384: GO 37431
37386: LD_INT 32
37388: DOUBLE
37389: EQUAL
37390: IFTRUE 37400
37392: LD_INT 31
37394: DOUBLE
37395: EQUAL
37396: IFTRUE 37400
37398: GO 37411
37400: POP
// places := 1 ; b_control_tower :
37401: LD_ADDR_VAR 0 3
37405: PUSH
37406: LD_INT 1
37408: ST_TO_ADDR
37409: GO 37431
37411: LD_INT 36
37413: DOUBLE
37414: EQUAL
37415: IFTRUE 37419
37417: GO 37430
37419: POP
// places := 3 ; end ;
37420: LD_ADDR_VAR 0 3
37424: PUSH
37425: LD_INT 3
37427: ST_TO_ADDR
37428: GO 37431
37430: POP
// if places then
37431: LD_VAR 0 3
37435: IFFALSE 37458
// result := UnitsInside ( building ) < places ;
37437: LD_ADDR_VAR 0 2
37441: PUSH
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 313
37451: PUSH
37452: LD_VAR 0 3
37456: LESS
37457: ST_TO_ADDR
// end ;
37458: LD_VAR 0 2
37462: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37463: LD_INT 0
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
// tmp := [ ] ;
37469: LD_ADDR_VAR 0 3
37473: PUSH
37474: EMPTY
37475: ST_TO_ADDR
// list := [ ] ;
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: EMPTY
37482: ST_TO_ADDR
// for i = 16 to 25 do
37483: LD_ADDR_VAR 0 4
37487: PUSH
37488: DOUBLE
37489: LD_INT 16
37491: DEC
37492: ST_TO_ADDR
37493: LD_INT 25
37495: PUSH
37496: FOR_TO
37497: IFFALSE 37570
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37499: LD_ADDR_VAR 0 3
37503: PUSH
37504: LD_VAR 0 3
37508: PUSH
37509: LD_INT 22
37511: PUSH
37512: LD_VAR 0 1
37516: PPUSH
37517: CALL_OW 255
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 91
37528: PUSH
37529: LD_VAR 0 1
37533: PUSH
37534: LD_INT 6
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 30
37544: PUSH
37545: LD_VAR 0 4
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: PPUSH
37562: CALL_OW 69
37566: ADD
37567: ST_TO_ADDR
37568: GO 37496
37570: POP
37571: POP
// for i = 1 to tmp do
37572: LD_ADDR_VAR 0 4
37576: PUSH
37577: DOUBLE
37578: LD_INT 1
37580: DEC
37581: ST_TO_ADDR
37582: LD_VAR 0 3
37586: PUSH
37587: FOR_TO
37588: IFFALSE 37676
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37590: LD_ADDR_VAR 0 5
37594: PUSH
37595: LD_VAR 0 5
37599: PUSH
37600: LD_VAR 0 3
37604: PUSH
37605: LD_VAR 0 4
37609: ARRAY
37610: PPUSH
37611: CALL_OW 266
37615: PUSH
37616: LD_VAR 0 3
37620: PUSH
37621: LD_VAR 0 4
37625: ARRAY
37626: PPUSH
37627: CALL_OW 250
37631: PUSH
37632: LD_VAR 0 3
37636: PUSH
37637: LD_VAR 0 4
37641: ARRAY
37642: PPUSH
37643: CALL_OW 251
37647: PUSH
37648: LD_VAR 0 3
37652: PUSH
37653: LD_VAR 0 4
37657: ARRAY
37658: PPUSH
37659: CALL_OW 254
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: ADD
37673: ST_TO_ADDR
37674: GO 37587
37676: POP
37677: POP
// result := list ;
37678: LD_ADDR_VAR 0 2
37682: PUSH
37683: LD_VAR 0 5
37687: ST_TO_ADDR
// end ;
37688: LD_VAR 0 2
37692: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37693: LD_INT 0
37695: PPUSH
37696: PPUSH
37697: PPUSH
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
// if not factory then
37702: LD_VAR 0 1
37706: NOT
37707: IFFALSE 37711
// exit ;
37709: GO 38304
// if control = control_apeman then
37711: LD_VAR 0 4
37715: PUSH
37716: LD_INT 5
37718: EQUAL
37719: IFFALSE 37828
// begin tmp := UnitsInside ( factory ) ;
37721: LD_ADDR_VAR 0 8
37725: PUSH
37726: LD_VAR 0 1
37730: PPUSH
37731: CALL_OW 313
37735: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37736: LD_VAR 0 8
37740: PPUSH
37741: LD_INT 25
37743: PUSH
37744: LD_INT 12
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PPUSH
37751: CALL_OW 72
37755: NOT
37756: IFFALSE 37766
// control := control_manual ;
37758: LD_ADDR_VAR 0 4
37762: PUSH
37763: LD_INT 1
37765: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37766: LD_ADDR_VAR 0 8
37770: PUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL 37463 0 1
37780: ST_TO_ADDR
// if tmp then
37781: LD_VAR 0 8
37785: IFFALSE 37828
// begin for i in tmp do
37787: LD_ADDR_VAR 0 7
37791: PUSH
37792: LD_VAR 0 8
37796: PUSH
37797: FOR_IN
37798: IFFALSE 37826
// if i [ 1 ] = b_ext_radio then
37800: LD_VAR 0 7
37804: PUSH
37805: LD_INT 1
37807: ARRAY
37808: PUSH
37809: LD_INT 22
37811: EQUAL
37812: IFFALSE 37824
// begin control := control_remote ;
37814: LD_ADDR_VAR 0 4
37818: PUSH
37819: LD_INT 2
37821: ST_TO_ADDR
// break ;
37822: GO 37826
// end ;
37824: GO 37797
37826: POP
37827: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37828: LD_VAR 0 1
37832: PPUSH
37833: LD_VAR 0 2
37837: PPUSH
37838: LD_VAR 0 3
37842: PPUSH
37843: LD_VAR 0 4
37847: PPUSH
37848: LD_VAR 0 5
37852: PPUSH
37853: CALL_OW 448
37857: IFFALSE 37892
// begin result := [ chassis , engine , control , weapon ] ;
37859: LD_ADDR_VAR 0 6
37863: PUSH
37864: LD_VAR 0 2
37868: PUSH
37869: LD_VAR 0 3
37873: PUSH
37874: LD_VAR 0 4
37878: PUSH
37879: LD_VAR 0 5
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: ST_TO_ADDR
// exit ;
37890: GO 38304
// end ; _chassis := AvailableChassisList ( factory ) ;
37892: LD_ADDR_VAR 0 9
37896: PUSH
37897: LD_VAR 0 1
37901: PPUSH
37902: CALL_OW 475
37906: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37907: LD_ADDR_VAR 0 11
37911: PUSH
37912: LD_VAR 0 1
37916: PPUSH
37917: CALL_OW 476
37921: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37922: LD_ADDR_VAR 0 12
37926: PUSH
37927: LD_VAR 0 1
37931: PPUSH
37932: CALL_OW 477
37936: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37937: LD_ADDR_VAR 0 10
37941: PUSH
37942: LD_VAR 0 1
37946: PPUSH
37947: CALL_OW 478
37951: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37952: LD_VAR 0 9
37956: NOT
37957: PUSH
37958: LD_VAR 0 11
37962: NOT
37963: OR
37964: PUSH
37965: LD_VAR 0 12
37969: NOT
37970: OR
37971: PUSH
37972: LD_VAR 0 10
37976: NOT
37977: OR
37978: IFFALSE 38013
// begin result := [ chassis , engine , control , weapon ] ;
37980: LD_ADDR_VAR 0 6
37984: PUSH
37985: LD_VAR 0 2
37989: PUSH
37990: LD_VAR 0 3
37994: PUSH
37995: LD_VAR 0 4
37999: PUSH
38000: LD_VAR 0 5
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: ST_TO_ADDR
// exit ;
38011: GO 38304
// end ; if not chassis in _chassis then
38013: LD_VAR 0 2
38017: PUSH
38018: LD_VAR 0 9
38022: IN
38023: NOT
38024: IFFALSE 38050
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38026: LD_ADDR_VAR 0 2
38030: PUSH
38031: LD_VAR 0 9
38035: PUSH
38036: LD_INT 1
38038: PPUSH
38039: LD_VAR 0 9
38043: PPUSH
38044: CALL_OW 12
38048: ARRAY
38049: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38050: LD_VAR 0 2
38054: PPUSH
38055: LD_VAR 0 3
38059: PPUSH
38060: CALL 38309 0 2
38064: NOT
38065: IFFALSE 38124
// repeat engine := _engine [ 1 ] ;
38067: LD_ADDR_VAR 0 3
38071: PUSH
38072: LD_VAR 0 11
38076: PUSH
38077: LD_INT 1
38079: ARRAY
38080: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38081: LD_ADDR_VAR 0 11
38085: PUSH
38086: LD_VAR 0 11
38090: PPUSH
38091: LD_INT 1
38093: PPUSH
38094: CALL_OW 3
38098: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38099: LD_VAR 0 2
38103: PPUSH
38104: LD_VAR 0 3
38108: PPUSH
38109: CALL 38309 0 2
38113: PUSH
38114: LD_VAR 0 11
38118: PUSH
38119: EMPTY
38120: EQUAL
38121: OR
38122: IFFALSE 38067
// if not control in _control then
38124: LD_VAR 0 4
38128: PUSH
38129: LD_VAR 0 12
38133: IN
38134: NOT
38135: IFFALSE 38161
// control := _control [ rand ( 1 , _control ) ] ;
38137: LD_ADDR_VAR 0 4
38141: PUSH
38142: LD_VAR 0 12
38146: PUSH
38147: LD_INT 1
38149: PPUSH
38150: LD_VAR 0 12
38154: PPUSH
38155: CALL_OW 12
38159: ARRAY
38160: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38161: LD_VAR 0 2
38165: PPUSH
38166: LD_VAR 0 5
38170: PPUSH
38171: CALL 38529 0 2
38175: NOT
38176: IFFALSE 38235
// repeat weapon := _weapon [ 1 ] ;
38178: LD_ADDR_VAR 0 5
38182: PUSH
38183: LD_VAR 0 10
38187: PUSH
38188: LD_INT 1
38190: ARRAY
38191: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38192: LD_ADDR_VAR 0 10
38196: PUSH
38197: LD_VAR 0 10
38201: PPUSH
38202: LD_INT 1
38204: PPUSH
38205: CALL_OW 3
38209: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38210: LD_VAR 0 2
38214: PPUSH
38215: LD_VAR 0 5
38219: PPUSH
38220: CALL 38529 0 2
38224: PUSH
38225: LD_VAR 0 10
38229: PUSH
38230: EMPTY
38231: EQUAL
38232: OR
38233: IFFALSE 38178
// result := [ ] ;
38235: LD_ADDR_VAR 0 6
38239: PUSH
38240: EMPTY
38241: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38242: LD_VAR 0 1
38246: PPUSH
38247: LD_VAR 0 2
38251: PPUSH
38252: LD_VAR 0 3
38256: PPUSH
38257: LD_VAR 0 4
38261: PPUSH
38262: LD_VAR 0 5
38266: PPUSH
38267: CALL_OW 448
38271: IFFALSE 38304
// result := [ chassis , engine , control , weapon ] ;
38273: LD_ADDR_VAR 0 6
38277: PUSH
38278: LD_VAR 0 2
38282: PUSH
38283: LD_VAR 0 3
38287: PUSH
38288: LD_VAR 0 4
38292: PUSH
38293: LD_VAR 0 5
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// end ;
38304: LD_VAR 0 6
38308: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38309: LD_INT 0
38311: PPUSH
// if not chassis or not engine then
38312: LD_VAR 0 1
38316: NOT
38317: PUSH
38318: LD_VAR 0 2
38322: NOT
38323: OR
38324: IFFALSE 38328
// exit ;
38326: GO 38524
// case engine of engine_solar :
38328: LD_VAR 0 2
38332: PUSH
38333: LD_INT 2
38335: DOUBLE
38336: EQUAL
38337: IFTRUE 38341
38339: GO 38379
38341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38342: LD_ADDR_VAR 0 3
38346: PUSH
38347: LD_INT 11
38349: PUSH
38350: LD_INT 12
38352: PUSH
38353: LD_INT 13
38355: PUSH
38356: LD_INT 14
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: LD_INT 3
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: ST_TO_ADDR
38377: GO 38508
38379: LD_INT 1
38381: DOUBLE
38382: EQUAL
38383: IFTRUE 38387
38385: GO 38449
38387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38388: LD_ADDR_VAR 0 3
38392: PUSH
38393: LD_INT 11
38395: PUSH
38396: LD_INT 12
38398: PUSH
38399: LD_INT 13
38401: PUSH
38402: LD_INT 14
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 3
38413: PUSH
38414: LD_INT 4
38416: PUSH
38417: LD_INT 5
38419: PUSH
38420: LD_INT 21
38422: PUSH
38423: LD_INT 23
38425: PUSH
38426: LD_INT 22
38428: PUSH
38429: LD_INT 24
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
38447: GO 38508
38449: LD_INT 3
38451: DOUBLE
38452: EQUAL
38453: IFTRUE 38457
38455: GO 38507
38457: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38458: LD_ADDR_VAR 0 3
38462: PUSH
38463: LD_INT 13
38465: PUSH
38466: LD_INT 14
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: LD_INT 4
38477: PUSH
38478: LD_INT 5
38480: PUSH
38481: LD_INT 21
38483: PUSH
38484: LD_INT 22
38486: PUSH
38487: LD_INT 23
38489: PUSH
38490: LD_INT 24
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: ST_TO_ADDR
38505: GO 38508
38507: POP
// result := ( chassis in result ) ;
38508: LD_ADDR_VAR 0 3
38512: PUSH
38513: LD_VAR 0 1
38517: PUSH
38518: LD_VAR 0 3
38522: IN
38523: ST_TO_ADDR
// end ;
38524: LD_VAR 0 3
38528: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38529: LD_INT 0
38531: PPUSH
// if not chassis or not weapon then
38532: LD_VAR 0 1
38536: NOT
38537: PUSH
38538: LD_VAR 0 2
38542: NOT
38543: OR
38544: IFFALSE 38548
// exit ;
38546: GO 39608
// case weapon of us_machine_gun :
38548: LD_VAR 0 2
38552: PUSH
38553: LD_INT 2
38555: DOUBLE
38556: EQUAL
38557: IFTRUE 38561
38559: GO 38591
38561: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 4
38578: PUSH
38579: LD_INT 5
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
38589: GO 39592
38591: LD_INT 3
38593: DOUBLE
38594: EQUAL
38595: IFTRUE 38599
38597: GO 38629
38599: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38600: LD_ADDR_VAR 0 3
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 3
38613: PUSH
38614: LD_INT 4
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: ST_TO_ADDR
38627: GO 39592
38629: LD_INT 11
38631: DOUBLE
38632: EQUAL
38633: IFTRUE 38637
38635: GO 38667
38637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38638: LD_ADDR_VAR 0 3
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: LD_INT 4
38654: PUSH
38655: LD_INT 5
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: ST_TO_ADDR
38665: GO 39592
38667: LD_INT 4
38669: DOUBLE
38670: EQUAL
38671: IFTRUE 38675
38673: GO 38701
38675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38676: LD_ADDR_VAR 0 3
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 3
38686: PUSH
38687: LD_INT 4
38689: PUSH
38690: LD_INT 5
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: ST_TO_ADDR
38699: GO 39592
38701: LD_INT 5
38703: DOUBLE
38704: EQUAL
38705: IFTRUE 38709
38707: GO 38735
38709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38710: LD_ADDR_VAR 0 3
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: LD_INT 4
38723: PUSH
38724: LD_INT 5
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: ST_TO_ADDR
38733: GO 39592
38735: LD_INT 9
38737: DOUBLE
38738: EQUAL
38739: IFTRUE 38743
38741: GO 38769
38743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38744: LD_ADDR_VAR 0 3
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 3
38754: PUSH
38755: LD_INT 4
38757: PUSH
38758: LD_INT 5
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: ST_TO_ADDR
38767: GO 39592
38769: LD_INT 7
38771: DOUBLE
38772: EQUAL
38773: IFTRUE 38777
38775: GO 38803
38777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38778: LD_ADDR_VAR 0 3
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 4
38791: PUSH
38792: LD_INT 5
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: ST_TO_ADDR
38801: GO 39592
38803: LD_INT 12
38805: DOUBLE
38806: EQUAL
38807: IFTRUE 38811
38809: GO 38837
38811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38812: LD_ADDR_VAR 0 3
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 3
38822: PUSH
38823: LD_INT 4
38825: PUSH
38826: LD_INT 5
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: ST_TO_ADDR
38835: GO 39592
38837: LD_INT 13
38839: DOUBLE
38840: EQUAL
38841: IFTRUE 38845
38843: GO 38871
38845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38846: LD_ADDR_VAR 0 3
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: LD_INT 4
38859: PUSH
38860: LD_INT 5
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: ST_TO_ADDR
38869: GO 39592
38871: LD_INT 14
38873: DOUBLE
38874: EQUAL
38875: IFTRUE 38879
38877: GO 38897
38879: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38880: LD_ADDR_VAR 0 3
38884: PUSH
38885: LD_INT 4
38887: PUSH
38888: LD_INT 5
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: ST_TO_ADDR
38895: GO 39592
38897: LD_INT 6
38899: DOUBLE
38900: EQUAL
38901: IFTRUE 38905
38903: GO 38923
38905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38906: LD_ADDR_VAR 0 3
38910: PUSH
38911: LD_INT 4
38913: PUSH
38914: LD_INT 5
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: ST_TO_ADDR
38921: GO 39592
38923: LD_INT 10
38925: DOUBLE
38926: EQUAL
38927: IFTRUE 38931
38929: GO 38949
38931: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38932: LD_ADDR_VAR 0 3
38936: PUSH
38937: LD_INT 4
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: ST_TO_ADDR
38947: GO 39592
38949: LD_INT 22
38951: DOUBLE
38952: EQUAL
38953: IFTRUE 38957
38955: GO 38983
38957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38958: LD_ADDR_VAR 0 3
38962: PUSH
38963: LD_INT 11
38965: PUSH
38966: LD_INT 12
38968: PUSH
38969: LD_INT 13
38971: PUSH
38972: LD_INT 14
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: ST_TO_ADDR
38981: GO 39592
38983: LD_INT 23
38985: DOUBLE
38986: EQUAL
38987: IFTRUE 38991
38989: GO 39017
38991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38992: LD_ADDR_VAR 0 3
38996: PUSH
38997: LD_INT 11
38999: PUSH
39000: LD_INT 12
39002: PUSH
39003: LD_INT 13
39005: PUSH
39006: LD_INT 14
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: ST_TO_ADDR
39015: GO 39592
39017: LD_INT 24
39019: DOUBLE
39020: EQUAL
39021: IFTRUE 39025
39023: GO 39051
39025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39026: LD_ADDR_VAR 0 3
39030: PUSH
39031: LD_INT 11
39033: PUSH
39034: LD_INT 12
39036: PUSH
39037: LD_INT 13
39039: PUSH
39040: LD_INT 14
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: ST_TO_ADDR
39049: GO 39592
39051: LD_INT 30
39053: DOUBLE
39054: EQUAL
39055: IFTRUE 39059
39057: GO 39085
39059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39060: LD_ADDR_VAR 0 3
39064: PUSH
39065: LD_INT 11
39067: PUSH
39068: LD_INT 12
39070: PUSH
39071: LD_INT 13
39073: PUSH
39074: LD_INT 14
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: ST_TO_ADDR
39083: GO 39592
39085: LD_INT 25
39087: DOUBLE
39088: EQUAL
39089: IFTRUE 39093
39091: GO 39111
39093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39094: LD_ADDR_VAR 0 3
39098: PUSH
39099: LD_INT 13
39101: PUSH
39102: LD_INT 14
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: ST_TO_ADDR
39109: GO 39592
39111: LD_INT 27
39113: DOUBLE
39114: EQUAL
39115: IFTRUE 39119
39117: GO 39137
39119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39120: LD_ADDR_VAR 0 3
39124: PUSH
39125: LD_INT 13
39127: PUSH
39128: LD_INT 14
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: ST_TO_ADDR
39135: GO 39592
39137: LD_INT 92
39139: DOUBLE
39140: EQUAL
39141: IFTRUE 39145
39143: GO 39171
39145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39146: LD_ADDR_VAR 0 3
39150: PUSH
39151: LD_INT 11
39153: PUSH
39154: LD_INT 12
39156: PUSH
39157: LD_INT 13
39159: PUSH
39160: LD_INT 14
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: ST_TO_ADDR
39169: GO 39592
39171: LD_INT 28
39173: DOUBLE
39174: EQUAL
39175: IFTRUE 39179
39177: GO 39197
39179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39180: LD_ADDR_VAR 0 3
39184: PUSH
39185: LD_INT 13
39187: PUSH
39188: LD_INT 14
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: ST_TO_ADDR
39195: GO 39592
39197: LD_INT 29
39199: DOUBLE
39200: EQUAL
39201: IFTRUE 39205
39203: GO 39223
39205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39206: LD_ADDR_VAR 0 3
39210: PUSH
39211: LD_INT 13
39213: PUSH
39214: LD_INT 14
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: ST_TO_ADDR
39221: GO 39592
39223: LD_INT 31
39225: DOUBLE
39226: EQUAL
39227: IFTRUE 39231
39229: GO 39249
39231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39232: LD_ADDR_VAR 0 3
39236: PUSH
39237: LD_INT 13
39239: PUSH
39240: LD_INT 14
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: ST_TO_ADDR
39247: GO 39592
39249: LD_INT 26
39251: DOUBLE
39252: EQUAL
39253: IFTRUE 39257
39255: GO 39275
39257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39258: LD_ADDR_VAR 0 3
39262: PUSH
39263: LD_INT 13
39265: PUSH
39266: LD_INT 14
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: ST_TO_ADDR
39273: GO 39592
39275: LD_INT 42
39277: DOUBLE
39278: EQUAL
39279: IFTRUE 39283
39281: GO 39309
39283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_INT 21
39291: PUSH
39292: LD_INT 22
39294: PUSH
39295: LD_INT 23
39297: PUSH
39298: LD_INT 24
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: ST_TO_ADDR
39307: GO 39592
39309: LD_INT 43
39311: DOUBLE
39312: EQUAL
39313: IFTRUE 39317
39315: GO 39343
39317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_INT 21
39325: PUSH
39326: LD_INT 22
39328: PUSH
39329: LD_INT 23
39331: PUSH
39332: LD_INT 24
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
39341: GO 39592
39343: LD_INT 44
39345: DOUBLE
39346: EQUAL
39347: IFTRUE 39351
39349: GO 39377
39351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39352: LD_ADDR_VAR 0 3
39356: PUSH
39357: LD_INT 21
39359: PUSH
39360: LD_INT 22
39362: PUSH
39363: LD_INT 23
39365: PUSH
39366: LD_INT 24
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
39375: GO 39592
39377: LD_INT 45
39379: DOUBLE
39380: EQUAL
39381: IFTRUE 39385
39383: GO 39411
39385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39386: LD_ADDR_VAR 0 3
39390: PUSH
39391: LD_INT 21
39393: PUSH
39394: LD_INT 22
39396: PUSH
39397: LD_INT 23
39399: PUSH
39400: LD_INT 24
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
39409: GO 39592
39411: LD_INT 49
39413: DOUBLE
39414: EQUAL
39415: IFTRUE 39419
39417: GO 39445
39419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39420: LD_ADDR_VAR 0 3
39424: PUSH
39425: LD_INT 21
39427: PUSH
39428: LD_INT 22
39430: PUSH
39431: LD_INT 23
39433: PUSH
39434: LD_INT 24
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: ST_TO_ADDR
39443: GO 39592
39445: LD_INT 51
39447: DOUBLE
39448: EQUAL
39449: IFTRUE 39453
39451: GO 39479
39453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39454: LD_ADDR_VAR 0 3
39458: PUSH
39459: LD_INT 21
39461: PUSH
39462: LD_INT 22
39464: PUSH
39465: LD_INT 23
39467: PUSH
39468: LD_INT 24
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
39477: GO 39592
39479: LD_INT 52
39481: DOUBLE
39482: EQUAL
39483: IFTRUE 39487
39485: GO 39513
39487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39488: LD_ADDR_VAR 0 3
39492: PUSH
39493: LD_INT 21
39495: PUSH
39496: LD_INT 22
39498: PUSH
39499: LD_INT 23
39501: PUSH
39502: LD_INT 24
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
39511: GO 39592
39513: LD_INT 53
39515: DOUBLE
39516: EQUAL
39517: IFTRUE 39521
39519: GO 39539
39521: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39522: LD_ADDR_VAR 0 3
39526: PUSH
39527: LD_INT 23
39529: PUSH
39530: LD_INT 24
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: ST_TO_ADDR
39537: GO 39592
39539: LD_INT 46
39541: DOUBLE
39542: EQUAL
39543: IFTRUE 39547
39545: GO 39565
39547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39548: LD_ADDR_VAR 0 3
39552: PUSH
39553: LD_INT 23
39555: PUSH
39556: LD_INT 24
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: ST_TO_ADDR
39563: GO 39592
39565: LD_INT 47
39567: DOUBLE
39568: EQUAL
39569: IFTRUE 39573
39571: GO 39591
39573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39574: LD_ADDR_VAR 0 3
39578: PUSH
39579: LD_INT 23
39581: PUSH
39582: LD_INT 24
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: ST_TO_ADDR
39589: GO 39592
39591: POP
// result := ( chassis in result ) ;
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_VAR 0 1
39601: PUSH
39602: LD_VAR 0 3
39606: IN
39607: ST_TO_ADDR
// end ;
39608: LD_VAR 0 3
39612: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39613: LD_INT 0
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
// result := array ;
39622: LD_ADDR_VAR 0 5
39626: PUSH
39627: LD_VAR 0 1
39631: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39632: LD_VAR 0 1
39636: NOT
39637: PUSH
39638: LD_VAR 0 2
39642: NOT
39643: OR
39644: PUSH
39645: LD_VAR 0 3
39649: NOT
39650: OR
39651: PUSH
39652: LD_VAR 0 2
39656: PUSH
39657: LD_VAR 0 1
39661: GREATER
39662: OR
39663: PUSH
39664: LD_VAR 0 3
39668: PUSH
39669: LD_VAR 0 1
39673: GREATER
39674: OR
39675: IFFALSE 39679
// exit ;
39677: GO 39975
// if direction then
39679: LD_VAR 0 4
39683: IFFALSE 39747
// begin d := 1 ;
39685: LD_ADDR_VAR 0 9
39689: PUSH
39690: LD_INT 1
39692: ST_TO_ADDR
// if i_from > i_to then
39693: LD_VAR 0 2
39697: PUSH
39698: LD_VAR 0 3
39702: GREATER
39703: IFFALSE 39729
// length := ( array - i_from ) + i_to else
39705: LD_ADDR_VAR 0 11
39709: PUSH
39710: LD_VAR 0 1
39714: PUSH
39715: LD_VAR 0 2
39719: MINUS
39720: PUSH
39721: LD_VAR 0 3
39725: PLUS
39726: ST_TO_ADDR
39727: GO 39745
// length := i_to - i_from ;
39729: LD_ADDR_VAR 0 11
39733: PUSH
39734: LD_VAR 0 3
39738: PUSH
39739: LD_VAR 0 2
39743: MINUS
39744: ST_TO_ADDR
// end else
39745: GO 39808
// begin d := - 1 ;
39747: LD_ADDR_VAR 0 9
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: ST_TO_ADDR
// if i_from > i_to then
39756: LD_VAR 0 2
39760: PUSH
39761: LD_VAR 0 3
39765: GREATER
39766: IFFALSE 39786
// length := i_from - i_to else
39768: LD_ADDR_VAR 0 11
39772: PUSH
39773: LD_VAR 0 2
39777: PUSH
39778: LD_VAR 0 3
39782: MINUS
39783: ST_TO_ADDR
39784: GO 39808
// length := ( array - i_to ) + i_from ;
39786: LD_ADDR_VAR 0 11
39790: PUSH
39791: LD_VAR 0 1
39795: PUSH
39796: LD_VAR 0 3
39800: MINUS
39801: PUSH
39802: LD_VAR 0 2
39806: PLUS
39807: ST_TO_ADDR
// end ; if not length then
39808: LD_VAR 0 11
39812: NOT
39813: IFFALSE 39817
// exit ;
39815: GO 39975
// tmp := array ;
39817: LD_ADDR_VAR 0 10
39821: PUSH
39822: LD_VAR 0 1
39826: ST_TO_ADDR
// for i = 1 to length do
39827: LD_ADDR_VAR 0 6
39831: PUSH
39832: DOUBLE
39833: LD_INT 1
39835: DEC
39836: ST_TO_ADDR
39837: LD_VAR 0 11
39841: PUSH
39842: FOR_TO
39843: IFFALSE 39963
// begin for j = 1 to array do
39845: LD_ADDR_VAR 0 7
39849: PUSH
39850: DOUBLE
39851: LD_INT 1
39853: DEC
39854: ST_TO_ADDR
39855: LD_VAR 0 1
39859: PUSH
39860: FOR_TO
39861: IFFALSE 39949
// begin k := j + d ;
39863: LD_ADDR_VAR 0 8
39867: PUSH
39868: LD_VAR 0 7
39872: PUSH
39873: LD_VAR 0 9
39877: PLUS
39878: ST_TO_ADDR
// if k > array then
39879: LD_VAR 0 8
39883: PUSH
39884: LD_VAR 0 1
39888: GREATER
39889: IFFALSE 39899
// k := 1 ;
39891: LD_ADDR_VAR 0 8
39895: PUSH
39896: LD_INT 1
39898: ST_TO_ADDR
// if not k then
39899: LD_VAR 0 8
39903: NOT
39904: IFFALSE 39916
// k := array ;
39906: LD_ADDR_VAR 0 8
39910: PUSH
39911: LD_VAR 0 1
39915: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39916: LD_ADDR_VAR 0 10
39920: PUSH
39921: LD_VAR 0 10
39925: PPUSH
39926: LD_VAR 0 8
39930: PPUSH
39931: LD_VAR 0 1
39935: PUSH
39936: LD_VAR 0 7
39940: ARRAY
39941: PPUSH
39942: CALL_OW 1
39946: ST_TO_ADDR
// end ;
39947: GO 39860
39949: POP
39950: POP
// array := tmp ;
39951: LD_ADDR_VAR 0 1
39955: PUSH
39956: LD_VAR 0 10
39960: ST_TO_ADDR
// end ;
39961: GO 39842
39963: POP
39964: POP
// result := array ;
39965: LD_ADDR_VAR 0 5
39969: PUSH
39970: LD_VAR 0 1
39974: ST_TO_ADDR
// end ;
39975: LD_VAR 0 5
39979: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39980: LD_INT 0
39982: PPUSH
39983: PPUSH
// result := 0 ;
39984: LD_ADDR_VAR 0 3
39988: PUSH
39989: LD_INT 0
39991: ST_TO_ADDR
// if not array or not value in array then
39992: LD_VAR 0 1
39996: NOT
39997: PUSH
39998: LD_VAR 0 2
40002: PUSH
40003: LD_VAR 0 1
40007: IN
40008: NOT
40009: OR
40010: IFFALSE 40014
// exit ;
40012: GO 40068
// for i = 1 to array do
40014: LD_ADDR_VAR 0 4
40018: PUSH
40019: DOUBLE
40020: LD_INT 1
40022: DEC
40023: ST_TO_ADDR
40024: LD_VAR 0 1
40028: PUSH
40029: FOR_TO
40030: IFFALSE 40066
// if value = array [ i ] then
40032: LD_VAR 0 2
40036: PUSH
40037: LD_VAR 0 1
40041: PUSH
40042: LD_VAR 0 4
40046: ARRAY
40047: EQUAL
40048: IFFALSE 40064
// begin result := i ;
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_VAR 0 4
40059: ST_TO_ADDR
// exit ;
40060: POP
40061: POP
40062: GO 40068
// end ;
40064: GO 40029
40066: POP
40067: POP
// end ;
40068: LD_VAR 0 3
40072: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40073: LD_INT 0
40075: PPUSH
// vc_chassis := chassis ;
40076: LD_ADDR_OWVAR 37
40080: PUSH
40081: LD_VAR 0 1
40085: ST_TO_ADDR
// vc_engine := engine ;
40086: LD_ADDR_OWVAR 39
40090: PUSH
40091: LD_VAR 0 2
40095: ST_TO_ADDR
// vc_control := control ;
40096: LD_ADDR_OWVAR 38
40100: PUSH
40101: LD_VAR 0 3
40105: ST_TO_ADDR
// vc_weapon := weapon ;
40106: LD_ADDR_OWVAR 40
40110: PUSH
40111: LD_VAR 0 4
40115: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40116: LD_ADDR_OWVAR 41
40120: PUSH
40121: LD_VAR 0 5
40125: ST_TO_ADDR
// end ;
40126: LD_VAR 0 6
40130: RET
// export function WantPlant ( unit ) ; var task ; begin
40131: LD_INT 0
40133: PPUSH
40134: PPUSH
// result := false ;
40135: LD_ADDR_VAR 0 2
40139: PUSH
40140: LD_INT 0
40142: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40143: LD_ADDR_VAR 0 3
40147: PUSH
40148: LD_VAR 0 1
40152: PPUSH
40153: CALL_OW 437
40157: ST_TO_ADDR
// if task then
40158: LD_VAR 0 3
40162: IFFALSE 40190
// if task [ 1 ] [ 1 ] = p then
40164: LD_VAR 0 3
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: PUSH
40173: LD_INT 1
40175: ARRAY
40176: PUSH
40177: LD_STRING p
40179: EQUAL
40180: IFFALSE 40190
// result := true ;
40182: LD_ADDR_VAR 0 2
40186: PUSH
40187: LD_INT 1
40189: ST_TO_ADDR
// end ;
40190: LD_VAR 0 2
40194: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40195: LD_INT 0
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
// if pos < 1 then
40201: LD_VAR 0 2
40205: PUSH
40206: LD_INT 1
40208: LESS
40209: IFFALSE 40213
// exit ;
40211: GO 40516
// if pos = 1 then
40213: LD_VAR 0 2
40217: PUSH
40218: LD_INT 1
40220: EQUAL
40221: IFFALSE 40254
// result := Replace ( arr , pos [ 1 ] , value ) else
40223: LD_ADDR_VAR 0 4
40227: PUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: LD_VAR 0 2
40237: PUSH
40238: LD_INT 1
40240: ARRAY
40241: PPUSH
40242: LD_VAR 0 3
40246: PPUSH
40247: CALL_OW 1
40251: ST_TO_ADDR
40252: GO 40516
// begin tmp := arr ;
40254: LD_ADDR_VAR 0 6
40258: PUSH
40259: LD_VAR 0 1
40263: ST_TO_ADDR
// s_arr := [ tmp ] ;
40264: LD_ADDR_VAR 0 7
40268: PUSH
40269: LD_VAR 0 6
40273: PUSH
40274: EMPTY
40275: LIST
40276: ST_TO_ADDR
// for i = 1 to pos - 1 do
40277: LD_ADDR_VAR 0 5
40281: PUSH
40282: DOUBLE
40283: LD_INT 1
40285: DEC
40286: ST_TO_ADDR
40287: LD_VAR 0 2
40291: PUSH
40292: LD_INT 1
40294: MINUS
40295: PUSH
40296: FOR_TO
40297: IFFALSE 40342
// begin tmp := tmp [ pos [ i ] ] ;
40299: LD_ADDR_VAR 0 6
40303: PUSH
40304: LD_VAR 0 6
40308: PUSH
40309: LD_VAR 0 2
40313: PUSH
40314: LD_VAR 0 5
40318: ARRAY
40319: ARRAY
40320: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40321: LD_ADDR_VAR 0 7
40325: PUSH
40326: LD_VAR 0 7
40330: PUSH
40331: LD_VAR 0 6
40335: PUSH
40336: EMPTY
40337: LIST
40338: ADD
40339: ST_TO_ADDR
// end ;
40340: GO 40296
40342: POP
40343: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40344: LD_ADDR_VAR 0 6
40348: PUSH
40349: LD_VAR 0 6
40353: PPUSH
40354: LD_VAR 0 2
40358: PUSH
40359: LD_VAR 0 2
40363: ARRAY
40364: PPUSH
40365: LD_VAR 0 3
40369: PPUSH
40370: CALL_OW 1
40374: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40375: LD_ADDR_VAR 0 7
40379: PUSH
40380: LD_VAR 0 7
40384: PPUSH
40385: LD_VAR 0 7
40389: PPUSH
40390: LD_VAR 0 6
40394: PPUSH
40395: CALL_OW 1
40399: ST_TO_ADDR
// for i = s_arr downto 2 do
40400: LD_ADDR_VAR 0 5
40404: PUSH
40405: DOUBLE
40406: LD_VAR 0 7
40410: INC
40411: ST_TO_ADDR
40412: LD_INT 2
40414: PUSH
40415: FOR_DOWNTO
40416: IFFALSE 40500
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40418: LD_ADDR_VAR 0 6
40422: PUSH
40423: LD_VAR 0 7
40427: PUSH
40428: LD_VAR 0 5
40432: PUSH
40433: LD_INT 1
40435: MINUS
40436: ARRAY
40437: PPUSH
40438: LD_VAR 0 2
40442: PUSH
40443: LD_VAR 0 5
40447: PUSH
40448: LD_INT 1
40450: MINUS
40451: ARRAY
40452: PPUSH
40453: LD_VAR 0 7
40457: PUSH
40458: LD_VAR 0 5
40462: ARRAY
40463: PPUSH
40464: CALL_OW 1
40468: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40469: LD_ADDR_VAR 0 7
40473: PUSH
40474: LD_VAR 0 7
40478: PPUSH
40479: LD_VAR 0 5
40483: PUSH
40484: LD_INT 1
40486: MINUS
40487: PPUSH
40488: LD_VAR 0 6
40492: PPUSH
40493: CALL_OW 1
40497: ST_TO_ADDR
// end ;
40498: GO 40415
40500: POP
40501: POP
// result := s_arr [ 1 ] ;
40502: LD_ADDR_VAR 0 4
40506: PUSH
40507: LD_VAR 0 7
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: ST_TO_ADDR
// end ; end ;
40516: LD_VAR 0 4
40520: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40521: LD_INT 0
40523: PPUSH
40524: PPUSH
// if not list then
40525: LD_VAR 0 1
40529: NOT
40530: IFFALSE 40534
// exit ;
40532: GO 40625
// i := list [ pos1 ] ;
40534: LD_ADDR_VAR 0 5
40538: PUSH
40539: LD_VAR 0 1
40543: PUSH
40544: LD_VAR 0 2
40548: ARRAY
40549: ST_TO_ADDR
// if not i then
40550: LD_VAR 0 5
40554: NOT
40555: IFFALSE 40559
// exit ;
40557: GO 40625
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40559: LD_ADDR_VAR 0 1
40563: PUSH
40564: LD_VAR 0 1
40568: PPUSH
40569: LD_VAR 0 2
40573: PPUSH
40574: LD_VAR 0 1
40578: PUSH
40579: LD_VAR 0 3
40583: ARRAY
40584: PPUSH
40585: CALL_OW 1
40589: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40590: LD_ADDR_VAR 0 1
40594: PUSH
40595: LD_VAR 0 1
40599: PPUSH
40600: LD_VAR 0 3
40604: PPUSH
40605: LD_VAR 0 5
40609: PPUSH
40610: CALL_OW 1
40614: ST_TO_ADDR
// result := list ;
40615: LD_ADDR_VAR 0 4
40619: PUSH
40620: LD_VAR 0 1
40624: ST_TO_ADDR
// end ;
40625: LD_VAR 0 4
40629: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40630: LD_INT 0
40632: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40633: LD_ADDR_VAR 0 5
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 250
40647: PPUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 251
40657: PPUSH
40658: LD_VAR 0 2
40662: PPUSH
40663: LD_VAR 0 3
40667: PPUSH
40668: LD_VAR 0 4
40672: PPUSH
40673: CALL 40683 0 5
40677: ST_TO_ADDR
// end ;
40678: LD_VAR 0 5
40682: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40683: LD_INT 0
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
// if not list then
40689: LD_VAR 0 3
40693: NOT
40694: IFFALSE 40698
// exit ;
40696: GO 41086
// result := [ ] ;
40698: LD_ADDR_VAR 0 6
40702: PUSH
40703: EMPTY
40704: ST_TO_ADDR
// for i in list do
40705: LD_ADDR_VAR 0 7
40709: PUSH
40710: LD_VAR 0 3
40714: PUSH
40715: FOR_IN
40716: IFFALSE 40918
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40718: LD_ADDR_VAR 0 9
40722: PUSH
40723: LD_VAR 0 7
40727: PPUSH
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_VAR 0 2
40737: PPUSH
40738: CALL_OW 297
40742: ST_TO_ADDR
// if not result then
40743: LD_VAR 0 6
40747: NOT
40748: IFFALSE 40774
// result := [ [ i , tmp ] ] else
40750: LD_ADDR_VAR 0 6
40754: PUSH
40755: LD_VAR 0 7
40759: PUSH
40760: LD_VAR 0 9
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: ST_TO_ADDR
40772: GO 40916
// begin if result [ result ] [ 2 ] < tmp then
40774: LD_VAR 0 6
40778: PUSH
40779: LD_VAR 0 6
40783: ARRAY
40784: PUSH
40785: LD_INT 2
40787: ARRAY
40788: PUSH
40789: LD_VAR 0 9
40793: LESS
40794: IFFALSE 40836
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40796: LD_ADDR_VAR 0 6
40800: PUSH
40801: LD_VAR 0 6
40805: PPUSH
40806: LD_VAR 0 6
40810: PUSH
40811: LD_INT 1
40813: PLUS
40814: PPUSH
40815: LD_VAR 0 7
40819: PUSH
40820: LD_VAR 0 9
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PPUSH
40829: CALL_OW 2
40833: ST_TO_ADDR
40834: GO 40916
// for j = 1 to result do
40836: LD_ADDR_VAR 0 8
40840: PUSH
40841: DOUBLE
40842: LD_INT 1
40844: DEC
40845: ST_TO_ADDR
40846: LD_VAR 0 6
40850: PUSH
40851: FOR_TO
40852: IFFALSE 40914
// begin if tmp < result [ j ] [ 2 ] then
40854: LD_VAR 0 9
40858: PUSH
40859: LD_VAR 0 6
40863: PUSH
40864: LD_VAR 0 8
40868: ARRAY
40869: PUSH
40870: LD_INT 2
40872: ARRAY
40873: LESS
40874: IFFALSE 40912
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40876: LD_ADDR_VAR 0 6
40880: PUSH
40881: LD_VAR 0 6
40885: PPUSH
40886: LD_VAR 0 8
40890: PPUSH
40891: LD_VAR 0 7
40895: PUSH
40896: LD_VAR 0 9
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PPUSH
40905: CALL_OW 2
40909: ST_TO_ADDR
// break ;
40910: GO 40914
// end ; end ;
40912: GO 40851
40914: POP
40915: POP
// end ; end ;
40916: GO 40715
40918: POP
40919: POP
// if result and not asc then
40920: LD_VAR 0 6
40924: PUSH
40925: LD_VAR 0 4
40929: NOT
40930: AND
40931: IFFALSE 41006
// begin tmp := result ;
40933: LD_ADDR_VAR 0 9
40937: PUSH
40938: LD_VAR 0 6
40942: ST_TO_ADDR
// for i = tmp downto 1 do
40943: LD_ADDR_VAR 0 7
40947: PUSH
40948: DOUBLE
40949: LD_VAR 0 9
40953: INC
40954: ST_TO_ADDR
40955: LD_INT 1
40957: PUSH
40958: FOR_DOWNTO
40959: IFFALSE 41004
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40961: LD_ADDR_VAR 0 6
40965: PUSH
40966: LD_VAR 0 6
40970: PPUSH
40971: LD_VAR 0 9
40975: PUSH
40976: LD_VAR 0 7
40980: MINUS
40981: PUSH
40982: LD_INT 1
40984: PLUS
40985: PPUSH
40986: LD_VAR 0 9
40990: PUSH
40991: LD_VAR 0 7
40995: ARRAY
40996: PPUSH
40997: CALL_OW 1
41001: ST_TO_ADDR
41002: GO 40958
41004: POP
41005: POP
// end ; tmp := [ ] ;
41006: LD_ADDR_VAR 0 9
41010: PUSH
41011: EMPTY
41012: ST_TO_ADDR
// if mode then
41013: LD_VAR 0 5
41017: IFFALSE 41086
// begin for i = 1 to result do
41019: LD_ADDR_VAR 0 7
41023: PUSH
41024: DOUBLE
41025: LD_INT 1
41027: DEC
41028: ST_TO_ADDR
41029: LD_VAR 0 6
41033: PUSH
41034: FOR_TO
41035: IFFALSE 41074
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41037: LD_ADDR_VAR 0 9
41041: PUSH
41042: LD_VAR 0 9
41046: PPUSH
41047: LD_VAR 0 7
41051: PPUSH
41052: LD_VAR 0 6
41056: PUSH
41057: LD_VAR 0 7
41061: ARRAY
41062: PUSH
41063: LD_INT 1
41065: ARRAY
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
41072: GO 41034
41074: POP
41075: POP
// result := tmp ;
41076: LD_ADDR_VAR 0 6
41080: PUSH
41081: LD_VAR 0 9
41085: ST_TO_ADDR
// end ; end ;
41086: LD_VAR 0 6
41090: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41091: LD_INT 0
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41099: LD_ADDR_VAR 0 5
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: ST_TO_ADDR
// if not x or not y then
41121: LD_VAR 0 2
41125: NOT
41126: PUSH
41127: LD_VAR 0 3
41131: NOT
41132: OR
41133: IFFALSE 41137
// exit ;
41135: GO 42787
// if not range then
41137: LD_VAR 0 4
41141: NOT
41142: IFFALSE 41152
// range := 10 ;
41144: LD_ADDR_VAR 0 4
41148: PUSH
41149: LD_INT 10
41151: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41152: LD_ADDR_VAR 0 8
41156: PUSH
41157: LD_INT 81
41159: PUSH
41160: LD_VAR 0 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 92
41171: PUSH
41172: LD_VAR 0 2
41176: PUSH
41177: LD_VAR 0 3
41181: PUSH
41182: LD_VAR 0 4
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: LD_INT 21
41198: PUSH
41199: LD_INT 3
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: LIST
41214: PPUSH
41215: CALL_OW 69
41219: ST_TO_ADDR
// if not tmp then
41220: LD_VAR 0 8
41224: NOT
41225: IFFALSE 41229
// exit ;
41227: GO 42787
// for i in tmp do
41229: LD_ADDR_VAR 0 6
41233: PUSH
41234: LD_VAR 0 8
41238: PUSH
41239: FOR_IN
41240: IFFALSE 42762
// begin points := [ 0 , 0 , 0 ] ;
41242: LD_ADDR_VAR 0 9
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// bpoints := 1 ;
41261: LD_ADDR_VAR 0 10
41265: PUSH
41266: LD_INT 1
41268: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41269: LD_VAR 0 6
41273: PPUSH
41274: CALL_OW 247
41278: PUSH
41279: LD_INT 1
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41287
41285: GO 41865
41287: POP
// begin if GetClass ( i ) = 1 then
41288: LD_VAR 0 6
41292: PPUSH
41293: CALL_OW 257
41297: PUSH
41298: LD_INT 1
41300: EQUAL
41301: IFFALSE 41322
// points := [ 10 , 5 , 3 ] ;
41303: LD_ADDR_VAR 0 9
41307: PUSH
41308: LD_INT 10
41310: PUSH
41311: LD_INT 5
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41322: LD_VAR 0 6
41326: PPUSH
41327: CALL_OW 257
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: LD_INT 4
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: IN
41346: IFFALSE 41367
// points := [ 3 , 2 , 1 ] ;
41348: LD_ADDR_VAR 0 9
41352: PUSH
41353: LD_INT 3
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41367: LD_VAR 0 6
41371: PPUSH
41372: CALL_OW 257
41376: PUSH
41377: LD_INT 5
41379: EQUAL
41380: IFFALSE 41401
// points := [ 130 , 5 , 2 ] ;
41382: LD_ADDR_VAR 0 9
41386: PUSH
41387: LD_INT 130
41389: PUSH
41390: LD_INT 5
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41401: LD_VAR 0 6
41405: PPUSH
41406: CALL_OW 257
41410: PUSH
41411: LD_INT 8
41413: EQUAL
41414: IFFALSE 41435
// points := [ 35 , 35 , 30 ] ;
41416: LD_ADDR_VAR 0 9
41420: PUSH
41421: LD_INT 35
41423: PUSH
41424: LD_INT 35
41426: PUSH
41427: LD_INT 30
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41435: LD_VAR 0 6
41439: PPUSH
41440: CALL_OW 257
41444: PUSH
41445: LD_INT 9
41447: EQUAL
41448: IFFALSE 41469
// points := [ 20 , 55 , 40 ] ;
41450: LD_ADDR_VAR 0 9
41454: PUSH
41455: LD_INT 20
41457: PUSH
41458: LD_INT 55
41460: PUSH
41461: LD_INT 40
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41469: LD_VAR 0 6
41473: PPUSH
41474: CALL_OW 257
41478: PUSH
41479: LD_INT 12
41481: PUSH
41482: LD_INT 16
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: IN
41489: IFFALSE 41510
// points := [ 5 , 3 , 2 ] ;
41491: LD_ADDR_VAR 0 9
41495: PUSH
41496: LD_INT 5
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41510: LD_VAR 0 6
41514: PPUSH
41515: CALL_OW 257
41519: PUSH
41520: LD_INT 17
41522: EQUAL
41523: IFFALSE 41544
// points := [ 100 , 50 , 75 ] ;
41525: LD_ADDR_VAR 0 9
41529: PUSH
41530: LD_INT 100
41532: PUSH
41533: LD_INT 50
41535: PUSH
41536: LD_INT 75
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41544: LD_VAR 0 6
41548: PPUSH
41549: CALL_OW 257
41553: PUSH
41554: LD_INT 15
41556: EQUAL
41557: IFFALSE 41578
// points := [ 10 , 5 , 3 ] ;
41559: LD_ADDR_VAR 0 9
41563: PUSH
41564: LD_INT 10
41566: PUSH
41567: LD_INT 5
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41578: LD_VAR 0 6
41582: PPUSH
41583: CALL_OW 257
41587: PUSH
41588: LD_INT 14
41590: EQUAL
41591: IFFALSE 41612
// points := [ 10 , 0 , 0 ] ;
41593: LD_ADDR_VAR 0 9
41597: PUSH
41598: LD_INT 10
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41612: LD_VAR 0 6
41616: PPUSH
41617: CALL_OW 257
41621: PUSH
41622: LD_INT 11
41624: EQUAL
41625: IFFALSE 41646
// points := [ 30 , 10 , 5 ] ;
41627: LD_ADDR_VAR 0 9
41631: PUSH
41632: LD_INT 30
41634: PUSH
41635: LD_INT 10
41637: PUSH
41638: LD_INT 5
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41646: LD_VAR 0 1
41650: PPUSH
41651: LD_INT 5
41653: PPUSH
41654: CALL_OW 321
41658: PUSH
41659: LD_INT 2
41661: EQUAL
41662: IFFALSE 41679
// bpoints := bpoints * 1.8 ;
41664: LD_ADDR_VAR 0 10
41668: PUSH
41669: LD_VAR 0 10
41673: PUSH
41674: LD_REAL  1.80000000000000E+0000
41677: MUL
41678: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41679: LD_VAR 0 6
41683: PPUSH
41684: CALL_OW 257
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 4
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: IN
41707: PUSH
41708: LD_VAR 0 1
41712: PPUSH
41713: LD_INT 51
41715: PPUSH
41716: CALL_OW 321
41720: PUSH
41721: LD_INT 2
41723: EQUAL
41724: AND
41725: IFFALSE 41742
// bpoints := bpoints * 1.2 ;
41727: LD_ADDR_VAR 0 10
41731: PUSH
41732: LD_VAR 0 10
41736: PUSH
41737: LD_REAL  1.20000000000000E+0000
41740: MUL
41741: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41742: LD_VAR 0 6
41746: PPUSH
41747: CALL_OW 257
41751: PUSH
41752: LD_INT 5
41754: PUSH
41755: LD_INT 7
41757: PUSH
41758: LD_INT 9
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: IN
41766: PUSH
41767: LD_VAR 0 1
41771: PPUSH
41772: LD_INT 52
41774: PPUSH
41775: CALL_OW 321
41779: PUSH
41780: LD_INT 2
41782: EQUAL
41783: AND
41784: IFFALSE 41801
// bpoints := bpoints * 1.5 ;
41786: LD_ADDR_VAR 0 10
41790: PUSH
41791: LD_VAR 0 10
41795: PUSH
41796: LD_REAL  1.50000000000000E+0000
41799: MUL
41800: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41801: LD_VAR 0 1
41805: PPUSH
41806: LD_INT 66
41808: PPUSH
41809: CALL_OW 321
41813: PUSH
41814: LD_INT 2
41816: EQUAL
41817: IFFALSE 41834
// bpoints := bpoints * 1.1 ;
41819: LD_ADDR_VAR 0 10
41823: PUSH
41824: LD_VAR 0 10
41828: PUSH
41829: LD_REAL  1.10000000000000E+0000
41832: MUL
41833: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41834: LD_ADDR_VAR 0 10
41838: PUSH
41839: LD_VAR 0 10
41843: PUSH
41844: LD_VAR 0 6
41848: PPUSH
41849: LD_INT 1
41851: PPUSH
41852: CALL_OW 259
41856: PUSH
41857: LD_REAL  1.15000000000000E+0000
41860: MUL
41861: MUL
41862: ST_TO_ADDR
// end ; unit_vehicle :
41863: GO 42691
41865: LD_INT 2
41867: DOUBLE
41868: EQUAL
41869: IFTRUE 41873
41871: GO 42679
41873: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41874: LD_VAR 0 6
41878: PPUSH
41879: CALL_OW 264
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 42
41889: PUSH
41890: LD_INT 24
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: IN
41898: IFFALSE 41919
// points := [ 25 , 5 , 3 ] ;
41900: LD_ADDR_VAR 0 9
41904: PUSH
41905: LD_INT 25
41907: PUSH
41908: LD_INT 5
41910: PUSH
41911: LD_INT 3
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41919: LD_VAR 0 6
41923: PPUSH
41924: CALL_OW 264
41928: PUSH
41929: LD_INT 4
41931: PUSH
41932: LD_INT 43
41934: PUSH
41935: LD_INT 25
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: IN
41943: IFFALSE 41964
// points := [ 40 , 15 , 5 ] ;
41945: LD_ADDR_VAR 0 9
41949: PUSH
41950: LD_INT 40
41952: PUSH
41953: LD_INT 15
41955: PUSH
41956: LD_INT 5
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41964: LD_VAR 0 6
41968: PPUSH
41969: CALL_OW 264
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 23
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: IN
41984: IFFALSE 42005
// points := [ 7 , 25 , 8 ] ;
41986: LD_ADDR_VAR 0 9
41990: PUSH
41991: LD_INT 7
41993: PUSH
41994: LD_INT 25
41996: PUSH
41997: LD_INT 8
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42005: LD_VAR 0 6
42009: PPUSH
42010: CALL_OW 264
42014: PUSH
42015: LD_INT 5
42017: PUSH
42018: LD_INT 27
42020: PUSH
42021: LD_INT 44
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: IN
42029: IFFALSE 42050
// points := [ 14 , 50 , 16 ] ;
42031: LD_ADDR_VAR 0 9
42035: PUSH
42036: LD_INT 14
42038: PUSH
42039: LD_INT 50
42041: PUSH
42042: LD_INT 16
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42050: LD_VAR 0 6
42054: PPUSH
42055: CALL_OW 264
42059: PUSH
42060: LD_INT 6
42062: PUSH
42063: LD_INT 46
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: IN
42070: IFFALSE 42091
// points := [ 32 , 120 , 70 ] ;
42072: LD_ADDR_VAR 0 9
42076: PUSH
42077: LD_INT 32
42079: PUSH
42080: LD_INT 120
42082: PUSH
42083: LD_INT 70
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42091: LD_VAR 0 6
42095: PPUSH
42096: CALL_OW 264
42100: PUSH
42101: LD_INT 7
42103: PUSH
42104: LD_INT 28
42106: PUSH
42107: LD_INT 45
42109: PUSH
42110: LD_INT 92
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: IN
42119: IFFALSE 42140
// points := [ 35 , 20 , 45 ] ;
42121: LD_ADDR_VAR 0 9
42125: PUSH
42126: LD_INT 35
42128: PUSH
42129: LD_INT 20
42131: PUSH
42132: LD_INT 45
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42140: LD_VAR 0 6
42144: PPUSH
42145: CALL_OW 264
42149: PUSH
42150: LD_INT 47
42152: PUSH
42153: EMPTY
42154: LIST
42155: IN
42156: IFFALSE 42177
// points := [ 67 , 45 , 75 ] ;
42158: LD_ADDR_VAR 0 9
42162: PUSH
42163: LD_INT 67
42165: PUSH
42166: LD_INT 45
42168: PUSH
42169: LD_INT 75
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42177: LD_VAR 0 6
42181: PPUSH
42182: CALL_OW 264
42186: PUSH
42187: LD_INT 26
42189: PUSH
42190: EMPTY
42191: LIST
42192: IN
42193: IFFALSE 42214
// points := [ 120 , 30 , 80 ] ;
42195: LD_ADDR_VAR 0 9
42199: PUSH
42200: LD_INT 120
42202: PUSH
42203: LD_INT 30
42205: PUSH
42206: LD_INT 80
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42214: LD_VAR 0 6
42218: PPUSH
42219: CALL_OW 264
42223: PUSH
42224: LD_INT 22
42226: PUSH
42227: EMPTY
42228: LIST
42229: IN
42230: IFFALSE 42251
// points := [ 40 , 1 , 1 ] ;
42232: LD_ADDR_VAR 0 9
42236: PUSH
42237: LD_INT 40
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: LIST
42250: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42251: LD_VAR 0 6
42255: PPUSH
42256: CALL_OW 264
42260: PUSH
42261: LD_INT 29
42263: PUSH
42264: EMPTY
42265: LIST
42266: IN
42267: IFFALSE 42288
// points := [ 70 , 200 , 400 ] ;
42269: LD_ADDR_VAR 0 9
42273: PUSH
42274: LD_INT 70
42276: PUSH
42277: LD_INT 200
42279: PUSH
42280: LD_INT 400
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42288: LD_VAR 0 6
42292: PPUSH
42293: CALL_OW 264
42297: PUSH
42298: LD_INT 14
42300: PUSH
42301: LD_INT 53
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: IN
42308: IFFALSE 42329
// points := [ 40 , 10 , 20 ] ;
42310: LD_ADDR_VAR 0 9
42314: PUSH
42315: LD_INT 40
42317: PUSH
42318: LD_INT 10
42320: PUSH
42321: LD_INT 20
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42329: LD_VAR 0 6
42333: PPUSH
42334: CALL_OW 264
42338: PUSH
42339: LD_INT 9
42341: PUSH
42342: EMPTY
42343: LIST
42344: IN
42345: IFFALSE 42366
// points := [ 5 , 70 , 20 ] ;
42347: LD_ADDR_VAR 0 9
42351: PUSH
42352: LD_INT 5
42354: PUSH
42355: LD_INT 70
42357: PUSH
42358: LD_INT 20
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42366: LD_VAR 0 6
42370: PPUSH
42371: CALL_OW 264
42375: PUSH
42376: LD_INT 10
42378: PUSH
42379: EMPTY
42380: LIST
42381: IN
42382: IFFALSE 42403
// points := [ 35 , 110 , 70 ] ;
42384: LD_ADDR_VAR 0 9
42388: PUSH
42389: LD_INT 35
42391: PUSH
42392: LD_INT 110
42394: PUSH
42395: LD_INT 70
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42403: LD_VAR 0 6
42407: PPUSH
42408: CALL_OW 265
42412: PUSH
42413: LD_INT 25
42415: EQUAL
42416: IFFALSE 42437
// points := [ 80 , 65 , 100 ] ;
42418: LD_ADDR_VAR 0 9
42422: PUSH
42423: LD_INT 80
42425: PUSH
42426: LD_INT 65
42428: PUSH
42429: LD_INT 100
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: LIST
42436: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42437: LD_VAR 0 6
42441: PPUSH
42442: CALL_OW 263
42446: PUSH
42447: LD_INT 1
42449: EQUAL
42450: IFFALSE 42485
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42452: LD_ADDR_VAR 0 10
42456: PUSH
42457: LD_VAR 0 10
42461: PUSH
42462: LD_VAR 0 6
42466: PPUSH
42467: CALL_OW 311
42471: PPUSH
42472: LD_INT 3
42474: PPUSH
42475: CALL_OW 259
42479: PUSH
42480: LD_INT 4
42482: MUL
42483: MUL
42484: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42485: LD_VAR 0 6
42489: PPUSH
42490: CALL_OW 263
42494: PUSH
42495: LD_INT 2
42497: EQUAL
42498: IFFALSE 42549
// begin j := IsControledBy ( i ) ;
42500: LD_ADDR_VAR 0 7
42504: PUSH
42505: LD_VAR 0 6
42509: PPUSH
42510: CALL_OW 312
42514: ST_TO_ADDR
// if j then
42515: LD_VAR 0 7
42519: IFFALSE 42549
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42521: LD_ADDR_VAR 0 10
42525: PUSH
42526: LD_VAR 0 10
42530: PUSH
42531: LD_VAR 0 7
42535: PPUSH
42536: LD_INT 3
42538: PPUSH
42539: CALL_OW 259
42543: PUSH
42544: LD_INT 3
42546: MUL
42547: MUL
42548: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42549: LD_VAR 0 6
42553: PPUSH
42554: CALL_OW 264
42558: PUSH
42559: LD_INT 5
42561: PUSH
42562: LD_INT 6
42564: PUSH
42565: LD_INT 46
42567: PUSH
42568: LD_INT 44
42570: PUSH
42571: LD_INT 47
42573: PUSH
42574: LD_INT 45
42576: PUSH
42577: LD_INT 28
42579: PUSH
42580: LD_INT 7
42582: PUSH
42583: LD_INT 27
42585: PUSH
42586: LD_INT 29
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: IN
42601: PUSH
42602: LD_VAR 0 1
42606: PPUSH
42607: LD_INT 52
42609: PPUSH
42610: CALL_OW 321
42614: PUSH
42615: LD_INT 2
42617: EQUAL
42618: AND
42619: IFFALSE 42636
// bpoints := bpoints * 1.2 ;
42621: LD_ADDR_VAR 0 10
42625: PUSH
42626: LD_VAR 0 10
42630: PUSH
42631: LD_REAL  1.20000000000000E+0000
42634: MUL
42635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42636: LD_VAR 0 6
42640: PPUSH
42641: CALL_OW 264
42645: PUSH
42646: LD_INT 6
42648: PUSH
42649: LD_INT 46
42651: PUSH
42652: LD_INT 47
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: IN
42660: IFFALSE 42677
// bpoints := bpoints * 1.2 ;
42662: LD_ADDR_VAR 0 10
42666: PUSH
42667: LD_VAR 0 10
42671: PUSH
42672: LD_REAL  1.20000000000000E+0000
42675: MUL
42676: ST_TO_ADDR
// end ; unit_building :
42677: GO 42691
42679: LD_INT 3
42681: DOUBLE
42682: EQUAL
42683: IFTRUE 42687
42685: GO 42690
42687: POP
// ; end ;
42688: GO 42691
42690: POP
// for j = 1 to 3 do
42691: LD_ADDR_VAR 0 7
42695: PUSH
42696: DOUBLE
42697: LD_INT 1
42699: DEC
42700: ST_TO_ADDR
42701: LD_INT 3
42703: PUSH
42704: FOR_TO
42705: IFFALSE 42758
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42707: LD_ADDR_VAR 0 5
42711: PUSH
42712: LD_VAR 0 5
42716: PPUSH
42717: LD_VAR 0 7
42721: PPUSH
42722: LD_VAR 0 5
42726: PUSH
42727: LD_VAR 0 7
42731: ARRAY
42732: PUSH
42733: LD_VAR 0 9
42737: PUSH
42738: LD_VAR 0 7
42742: ARRAY
42743: PUSH
42744: LD_VAR 0 10
42748: MUL
42749: PLUS
42750: PPUSH
42751: CALL_OW 1
42755: ST_TO_ADDR
42756: GO 42704
42758: POP
42759: POP
// end ;
42760: GO 41239
42762: POP
42763: POP
// result := Replace ( result , 4 , tmp ) ;
42764: LD_ADDR_VAR 0 5
42768: PUSH
42769: LD_VAR 0 5
42773: PPUSH
42774: LD_INT 4
42776: PPUSH
42777: LD_VAR 0 8
42781: PPUSH
42782: CALL_OW 1
42786: ST_TO_ADDR
// end ;
42787: LD_VAR 0 5
42791: RET
// export function DangerAtRange ( unit , range ) ; begin
42792: LD_INT 0
42794: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_VAR 0 1
42804: PPUSH
42805: CALL_OW 255
42809: PPUSH
42810: LD_VAR 0 1
42814: PPUSH
42815: CALL_OW 250
42819: PPUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: CALL_OW 251
42829: PPUSH
42830: LD_VAR 0 2
42834: PPUSH
42835: CALL 41091 0 4
42839: ST_TO_ADDR
// end ;
42840: LD_VAR 0 3
42844: RET
// export function DangerInArea ( side , area ) ; begin
42845: LD_INT 0
42847: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42848: LD_ADDR_VAR 0 3
42852: PUSH
42853: LD_VAR 0 2
42857: PPUSH
42858: LD_INT 81
42860: PUSH
42861: LD_VAR 0 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PPUSH
42870: CALL_OW 70
42874: ST_TO_ADDR
// end ;
42875: LD_VAR 0 3
42879: RET
// export function IsExtension ( b ) ; begin
42880: LD_INT 0
42882: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42883: LD_ADDR_VAR 0 2
42887: PUSH
42888: LD_VAR 0 1
42892: PUSH
42893: LD_INT 23
42895: PUSH
42896: LD_INT 20
42898: PUSH
42899: LD_INT 22
42901: PUSH
42902: LD_INT 17
42904: PUSH
42905: LD_INT 24
42907: PUSH
42908: LD_INT 21
42910: PUSH
42911: LD_INT 19
42913: PUSH
42914: LD_INT 16
42916: PUSH
42917: LD_INT 25
42919: PUSH
42920: LD_INT 18
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: IN
42935: ST_TO_ADDR
// end ;
42936: LD_VAR 0 2
42940: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42941: LD_INT 0
42943: PPUSH
42944: PPUSH
42945: PPUSH
// result := [ ] ;
42946: LD_ADDR_VAR 0 4
42950: PUSH
42951: EMPTY
42952: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42953: LD_ADDR_VAR 0 5
42957: PUSH
42958: LD_VAR 0 2
42962: PPUSH
42963: LD_INT 21
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PPUSH
42973: CALL_OW 70
42977: ST_TO_ADDR
// if not tmp then
42978: LD_VAR 0 5
42982: NOT
42983: IFFALSE 42987
// exit ;
42985: GO 43051
// if checkLink then
42987: LD_VAR 0 3
42991: IFFALSE 43041
// begin for i in tmp do
42993: LD_ADDR_VAR 0 6
42997: PUSH
42998: LD_VAR 0 5
43002: PUSH
43003: FOR_IN
43004: IFFALSE 43039
// if GetBase ( i ) <> base then
43006: LD_VAR 0 6
43010: PPUSH
43011: CALL_OW 274
43015: PUSH
43016: LD_VAR 0 1
43020: NONEQUAL
43021: IFFALSE 43037
// ComLinkToBase ( base , i ) ;
43023: LD_VAR 0 1
43027: PPUSH
43028: LD_VAR 0 6
43032: PPUSH
43033: CALL_OW 169
43037: GO 43003
43039: POP
43040: POP
// end ; result := tmp ;
43041: LD_ADDR_VAR 0 4
43045: PUSH
43046: LD_VAR 0 5
43050: ST_TO_ADDR
// end ;
43051: LD_VAR 0 4
43055: RET
// export function ComComplete ( units , b ) ; var i ; begin
43056: LD_INT 0
43058: PPUSH
43059: PPUSH
// if not units then
43060: LD_VAR 0 1
43064: NOT
43065: IFFALSE 43069
// exit ;
43067: GO 43159
// for i in units do
43069: LD_ADDR_VAR 0 4
43073: PUSH
43074: LD_VAR 0 1
43078: PUSH
43079: FOR_IN
43080: IFFALSE 43157
// if BuildingStatus ( b ) = bs_build then
43082: LD_VAR 0 2
43086: PPUSH
43087: CALL_OW 461
43091: PUSH
43092: LD_INT 1
43094: EQUAL
43095: IFFALSE 43155
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43097: LD_VAR 0 4
43101: PPUSH
43102: LD_STRING h
43104: PUSH
43105: LD_VAR 0 2
43109: PPUSH
43110: CALL_OW 250
43114: PUSH
43115: LD_VAR 0 2
43119: PPUSH
43120: CALL_OW 251
43124: PUSH
43125: LD_VAR 0 2
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: PUSH
43148: EMPTY
43149: LIST
43150: PPUSH
43151: CALL_OW 446
43155: GO 43079
43157: POP
43158: POP
// end ;
43159: LD_VAR 0 3
43163: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43164: LD_INT 0
43166: PPUSH
43167: PPUSH
43168: PPUSH
43169: PPUSH
43170: PPUSH
43171: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43172: LD_VAR 0 1
43176: NOT
43177: PUSH
43178: LD_VAR 0 1
43182: PPUSH
43183: CALL_OW 263
43187: PUSH
43188: LD_INT 2
43190: NONEQUAL
43191: OR
43192: IFFALSE 43196
// exit ;
43194: GO 43512
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43196: LD_ADDR_VAR 0 6
43200: PUSH
43201: LD_INT 22
43203: PUSH
43204: LD_VAR 0 1
43208: PPUSH
43209: CALL_OW 255
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 30
43223: PUSH
43224: LD_INT 36
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 34
43233: PUSH
43234: LD_INT 31
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PPUSH
43250: CALL_OW 69
43254: ST_TO_ADDR
// if not tmp then
43255: LD_VAR 0 6
43259: NOT
43260: IFFALSE 43264
// exit ;
43262: GO 43512
// result := [ ] ;
43264: LD_ADDR_VAR 0 2
43268: PUSH
43269: EMPTY
43270: ST_TO_ADDR
// for i in tmp do
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_VAR 0 6
43280: PUSH
43281: FOR_IN
43282: IFFALSE 43353
// begin t := UnitsInside ( i ) ;
43284: LD_ADDR_VAR 0 4
43288: PUSH
43289: LD_VAR 0 3
43293: PPUSH
43294: CALL_OW 313
43298: ST_TO_ADDR
// if t then
43299: LD_VAR 0 4
43303: IFFALSE 43351
// for j in t do
43305: LD_ADDR_VAR 0 7
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: FOR_IN
43316: IFFALSE 43349
// result := Replace ( result , result + 1 , j ) ;
43318: LD_ADDR_VAR 0 2
43322: PUSH
43323: LD_VAR 0 2
43327: PPUSH
43328: LD_VAR 0 2
43332: PUSH
43333: LD_INT 1
43335: PLUS
43336: PPUSH
43337: LD_VAR 0 7
43341: PPUSH
43342: CALL_OW 1
43346: ST_TO_ADDR
43347: GO 43315
43349: POP
43350: POP
// end ;
43351: GO 43281
43353: POP
43354: POP
// if not result then
43355: LD_VAR 0 2
43359: NOT
43360: IFFALSE 43364
// exit ;
43362: GO 43512
// mech := result [ 1 ] ;
43364: LD_ADDR_VAR 0 5
43368: PUSH
43369: LD_VAR 0 2
43373: PUSH
43374: LD_INT 1
43376: ARRAY
43377: ST_TO_ADDR
// if result > 1 then
43378: LD_VAR 0 2
43382: PUSH
43383: LD_INT 1
43385: GREATER
43386: IFFALSE 43498
// begin for i = 2 to result do
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: DOUBLE
43394: LD_INT 2
43396: DEC
43397: ST_TO_ADDR
43398: LD_VAR 0 2
43402: PUSH
43403: FOR_TO
43404: IFFALSE 43496
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43406: LD_ADDR_VAR 0 4
43410: PUSH
43411: LD_VAR 0 2
43415: PUSH
43416: LD_VAR 0 3
43420: ARRAY
43421: PPUSH
43422: LD_INT 3
43424: PPUSH
43425: CALL_OW 259
43429: PUSH
43430: LD_VAR 0 2
43434: PUSH
43435: LD_VAR 0 3
43439: ARRAY
43440: PPUSH
43441: CALL_OW 432
43445: MINUS
43446: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43447: LD_VAR 0 4
43451: PUSH
43452: LD_VAR 0 5
43456: PPUSH
43457: LD_INT 3
43459: PPUSH
43460: CALL_OW 259
43464: PUSH
43465: LD_VAR 0 5
43469: PPUSH
43470: CALL_OW 432
43474: MINUS
43475: GREATEREQUAL
43476: IFFALSE 43494
// mech := result [ i ] ;
43478: LD_ADDR_VAR 0 5
43482: PUSH
43483: LD_VAR 0 2
43487: PUSH
43488: LD_VAR 0 3
43492: ARRAY
43493: ST_TO_ADDR
// end ;
43494: GO 43403
43496: POP
43497: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43498: LD_VAR 0 1
43502: PPUSH
43503: LD_VAR 0 5
43507: PPUSH
43508: CALL_OW 135
// end ;
43512: LD_VAR 0 2
43516: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
// result := [ ] ;
43532: LD_ADDR_VAR 0 7
43536: PUSH
43537: EMPTY
43538: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43539: LD_VAR 0 1
43543: PPUSH
43544: CALL_OW 266
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: IN
43559: NOT
43560: IFFALSE 43564
// exit ;
43562: GO 45198
// if name then
43564: LD_VAR 0 3
43568: IFFALSE 43584
// SetBName ( base_dep , name ) ;
43570: LD_VAR 0 1
43574: PPUSH
43575: LD_VAR 0 3
43579: PPUSH
43580: CALL_OW 500
// base := GetBase ( base_dep ) ;
43584: LD_ADDR_VAR 0 15
43588: PUSH
43589: LD_VAR 0 1
43593: PPUSH
43594: CALL_OW 274
43598: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43599: LD_ADDR_VAR 0 16
43603: PUSH
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL_OW 255
43613: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43614: LD_ADDR_VAR 0 17
43618: PUSH
43619: LD_VAR 0 1
43623: PPUSH
43624: CALL_OW 248
43628: ST_TO_ADDR
// if sources then
43629: LD_VAR 0 5
43633: IFFALSE 43680
// for i = 1 to 3 do
43635: LD_ADDR_VAR 0 8
43639: PUSH
43640: DOUBLE
43641: LD_INT 1
43643: DEC
43644: ST_TO_ADDR
43645: LD_INT 3
43647: PUSH
43648: FOR_TO
43649: IFFALSE 43678
// AddResourceType ( base , i , sources [ i ] ) ;
43651: LD_VAR 0 15
43655: PPUSH
43656: LD_VAR 0 8
43660: PPUSH
43661: LD_VAR 0 5
43665: PUSH
43666: LD_VAR 0 8
43670: ARRAY
43671: PPUSH
43672: CALL_OW 276
43676: GO 43648
43678: POP
43679: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43680: LD_ADDR_VAR 0 18
43684: PUSH
43685: LD_VAR 0 15
43689: PPUSH
43690: LD_VAR 0 2
43694: PPUSH
43695: LD_INT 1
43697: PPUSH
43698: CALL 42941 0 3
43702: ST_TO_ADDR
// InitHc ;
43703: CALL_OW 19
// InitUc ;
43707: CALL_OW 18
// uc_side := side ;
43711: LD_ADDR_OWVAR 20
43715: PUSH
43716: LD_VAR 0 16
43720: ST_TO_ADDR
// uc_nation := nation ;
43721: LD_ADDR_OWVAR 21
43725: PUSH
43726: LD_VAR 0 17
43730: ST_TO_ADDR
// if buildings then
43731: LD_VAR 0 18
43735: IFFALSE 45057
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43737: LD_ADDR_VAR 0 19
43741: PUSH
43742: LD_VAR 0 18
43746: PPUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 30
43752: PUSH
43753: LD_INT 29
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 30
43762: PUSH
43763: LD_INT 30
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: PPUSH
43775: CALL_OW 72
43779: ST_TO_ADDR
// if tmp then
43780: LD_VAR 0 19
43784: IFFALSE 43832
// for i in tmp do
43786: LD_ADDR_VAR 0 8
43790: PUSH
43791: LD_VAR 0 19
43795: PUSH
43796: FOR_IN
43797: IFFALSE 43830
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43799: LD_VAR 0 8
43803: PPUSH
43804: CALL_OW 250
43808: PPUSH
43809: LD_VAR 0 8
43813: PPUSH
43814: CALL_OW 251
43818: PPUSH
43819: LD_VAR 0 16
43823: PPUSH
43824: CALL_OW 441
43828: GO 43796
43830: POP
43831: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43832: LD_VAR 0 18
43836: PPUSH
43837: LD_INT 2
43839: PUSH
43840: LD_INT 30
43842: PUSH
43843: LD_INT 32
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 30
43852: PUSH
43853: LD_INT 33
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: PPUSH
43865: CALL_OW 72
43869: IFFALSE 43957
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43871: LD_ADDR_VAR 0 8
43875: PUSH
43876: LD_VAR 0 18
43880: PPUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 30
43886: PUSH
43887: LD_INT 32
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 30
43896: PUSH
43897: LD_INT 33
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: PPUSH
43909: CALL_OW 72
43913: PUSH
43914: FOR_IN
43915: IFFALSE 43955
// begin if not GetBWeapon ( i ) then
43917: LD_VAR 0 8
43921: PPUSH
43922: CALL_OW 269
43926: NOT
43927: IFFALSE 43953
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43929: LD_VAR 0 8
43933: PPUSH
43934: LD_VAR 0 8
43938: PPUSH
43939: LD_VAR 0 2
43943: PPUSH
43944: CALL 45203 0 2
43948: PPUSH
43949: CALL_OW 431
// end ;
43953: GO 43914
43955: POP
43956: POP
// end ; for i = 1 to personel do
43957: LD_ADDR_VAR 0 8
43961: PUSH
43962: DOUBLE
43963: LD_INT 1
43965: DEC
43966: ST_TO_ADDR
43967: LD_VAR 0 6
43971: PUSH
43972: FOR_TO
43973: IFFALSE 45037
// begin if i > 4 then
43975: LD_VAR 0 8
43979: PUSH
43980: LD_INT 4
43982: GREATER
43983: IFFALSE 43987
// break ;
43985: GO 45037
// case i of 1 :
43987: LD_VAR 0 8
43991: PUSH
43992: LD_INT 1
43994: DOUBLE
43995: EQUAL
43996: IFTRUE 44000
43998: GO 44080
44000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44001: LD_ADDR_VAR 0 12
44005: PUSH
44006: LD_VAR 0 18
44010: PPUSH
44011: LD_INT 22
44013: PUSH
44014: LD_VAR 0 16
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 58
44025: PUSH
44026: EMPTY
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 30
44034: PUSH
44035: LD_INT 32
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 30
44044: PUSH
44045: LD_INT 4
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 30
44054: PUSH
44055: LD_INT 5
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: PPUSH
44073: CALL_OW 72
44077: ST_TO_ADDR
44078: GO 44302
44080: LD_INT 2
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44088
44086: GO 44150
44088: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44089: LD_ADDR_VAR 0 12
44093: PUSH
44094: LD_VAR 0 18
44098: PPUSH
44099: LD_INT 22
44101: PUSH
44102: LD_VAR 0 16
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 30
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 30
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PPUSH
44143: CALL_OW 72
44147: ST_TO_ADDR
44148: GO 44302
44150: LD_INT 3
44152: DOUBLE
44153: EQUAL
44154: IFTRUE 44158
44156: GO 44220
44158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44159: LD_ADDR_VAR 0 12
44163: PUSH
44164: LD_VAR 0 18
44168: PPUSH
44169: LD_INT 22
44171: PUSH
44172: LD_VAR 0 16
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 30
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 30
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PPUSH
44213: CALL_OW 72
44217: ST_TO_ADDR
44218: GO 44302
44220: LD_INT 4
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44228
44226: GO 44301
44228: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44229: LD_ADDR_VAR 0 12
44233: PUSH
44234: LD_VAR 0 18
44238: PPUSH
44239: LD_INT 22
44241: PUSH
44242: LD_VAR 0 16
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 30
44256: PUSH
44257: LD_INT 6
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 30
44266: PUSH
44267: LD_INT 7
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 30
44276: PUSH
44277: LD_INT 8
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PPUSH
44294: CALL_OW 72
44298: ST_TO_ADDR
44299: GO 44302
44301: POP
// if i = 1 then
44302: LD_VAR 0 8
44306: PUSH
44307: LD_INT 1
44309: EQUAL
44310: IFFALSE 44421
// begin tmp := [ ] ;
44312: LD_ADDR_VAR 0 19
44316: PUSH
44317: EMPTY
44318: ST_TO_ADDR
// for j in f do
44319: LD_ADDR_VAR 0 9
44323: PUSH
44324: LD_VAR 0 12
44328: PUSH
44329: FOR_IN
44330: IFFALSE 44403
// if GetBType ( j ) = b_bunker then
44332: LD_VAR 0 9
44336: PPUSH
44337: CALL_OW 266
44341: PUSH
44342: LD_INT 32
44344: EQUAL
44345: IFFALSE 44372
// tmp := Insert ( tmp , 1 , j ) else
44347: LD_ADDR_VAR 0 19
44351: PUSH
44352: LD_VAR 0 19
44356: PPUSH
44357: LD_INT 1
44359: PPUSH
44360: LD_VAR 0 9
44364: PPUSH
44365: CALL_OW 2
44369: ST_TO_ADDR
44370: GO 44401
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44372: LD_ADDR_VAR 0 19
44376: PUSH
44377: LD_VAR 0 19
44381: PPUSH
44382: LD_VAR 0 19
44386: PUSH
44387: LD_INT 1
44389: PLUS
44390: PPUSH
44391: LD_VAR 0 9
44395: PPUSH
44396: CALL_OW 2
44400: ST_TO_ADDR
44401: GO 44329
44403: POP
44404: POP
// if tmp then
44405: LD_VAR 0 19
44409: IFFALSE 44421
// f := tmp ;
44411: LD_ADDR_VAR 0 12
44415: PUSH
44416: LD_VAR 0 19
44420: ST_TO_ADDR
// end ; x := personel [ i ] ;
44421: LD_ADDR_VAR 0 13
44425: PUSH
44426: LD_VAR 0 6
44430: PUSH
44431: LD_VAR 0 8
44435: ARRAY
44436: ST_TO_ADDR
// if x = - 1 then
44437: LD_VAR 0 13
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: EQUAL
44446: IFFALSE 44655
// begin for j in f do
44448: LD_ADDR_VAR 0 9
44452: PUSH
44453: LD_VAR 0 12
44457: PUSH
44458: FOR_IN
44459: IFFALSE 44651
// repeat InitHc ;
44461: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44465: LD_VAR 0 9
44469: PPUSH
44470: CALL_OW 266
44474: PUSH
44475: LD_INT 5
44477: EQUAL
44478: IFFALSE 44548
// begin if UnitsInside ( j ) < 3 then
44480: LD_VAR 0 9
44484: PPUSH
44485: CALL_OW 313
44489: PUSH
44490: LD_INT 3
44492: LESS
44493: IFFALSE 44529
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44495: LD_INT 0
44497: PPUSH
44498: LD_INT 5
44500: PUSH
44501: LD_INT 8
44503: PUSH
44504: LD_INT 9
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: PUSH
44512: LD_VAR 0 17
44516: ARRAY
44517: PPUSH
44518: LD_VAR 0 4
44522: PPUSH
44523: CALL_OW 380
44527: GO 44546
// PrepareHuman ( false , i , skill ) ;
44529: LD_INT 0
44531: PPUSH
44532: LD_VAR 0 8
44536: PPUSH
44537: LD_VAR 0 4
44541: PPUSH
44542: CALL_OW 380
// end else
44546: GO 44565
// PrepareHuman ( false , i , skill ) ;
44548: LD_INT 0
44550: PPUSH
44551: LD_VAR 0 8
44555: PPUSH
44556: LD_VAR 0 4
44560: PPUSH
44561: CALL_OW 380
// un := CreateHuman ;
44565: LD_ADDR_VAR 0 14
44569: PUSH
44570: CALL_OW 44
44574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44575: LD_ADDR_VAR 0 7
44579: PUSH
44580: LD_VAR 0 7
44584: PPUSH
44585: LD_INT 1
44587: PPUSH
44588: LD_VAR 0 14
44592: PPUSH
44593: CALL_OW 2
44597: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44598: LD_VAR 0 14
44602: PPUSH
44603: LD_VAR 0 9
44607: PPUSH
44608: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44612: LD_VAR 0 9
44616: PPUSH
44617: CALL_OW 313
44621: PUSH
44622: LD_INT 6
44624: EQUAL
44625: PUSH
44626: LD_VAR 0 9
44630: PPUSH
44631: CALL_OW 266
44635: PUSH
44636: LD_INT 32
44638: PUSH
44639: LD_INT 31
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: IN
44646: OR
44647: IFFALSE 44461
44649: GO 44458
44651: POP
44652: POP
// end else
44653: GO 45035
// for j = 1 to x do
44655: LD_ADDR_VAR 0 9
44659: PUSH
44660: DOUBLE
44661: LD_INT 1
44663: DEC
44664: ST_TO_ADDR
44665: LD_VAR 0 13
44669: PUSH
44670: FOR_TO
44671: IFFALSE 45033
// begin InitHc ;
44673: CALL_OW 19
// if not f then
44677: LD_VAR 0 12
44681: NOT
44682: IFFALSE 44771
// begin PrepareHuman ( false , i , skill ) ;
44684: LD_INT 0
44686: PPUSH
44687: LD_VAR 0 8
44691: PPUSH
44692: LD_VAR 0 4
44696: PPUSH
44697: CALL_OW 380
// un := CreateHuman ;
44701: LD_ADDR_VAR 0 14
44705: PUSH
44706: CALL_OW 44
44710: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44711: LD_ADDR_VAR 0 7
44715: PUSH
44716: LD_VAR 0 7
44720: PPUSH
44721: LD_INT 1
44723: PPUSH
44724: LD_VAR 0 14
44728: PPUSH
44729: CALL_OW 2
44733: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44734: LD_VAR 0 14
44738: PPUSH
44739: LD_VAR 0 1
44743: PPUSH
44744: CALL_OW 250
44748: PPUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: CALL_OW 251
44758: PPUSH
44759: LD_INT 10
44761: PPUSH
44762: LD_INT 0
44764: PPUSH
44765: CALL_OW 50
// continue ;
44769: GO 44670
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44771: LD_VAR 0 12
44775: PUSH
44776: LD_INT 1
44778: ARRAY
44779: PPUSH
44780: CALL_OW 313
44784: PUSH
44785: LD_VAR 0 12
44789: PUSH
44790: LD_INT 1
44792: ARRAY
44793: PPUSH
44794: CALL_OW 266
44798: PUSH
44799: LD_INT 32
44801: PUSH
44802: LD_INT 31
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: IN
44809: AND
44810: PUSH
44811: LD_VAR 0 12
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: PPUSH
44820: CALL_OW 313
44824: PUSH
44825: LD_INT 6
44827: EQUAL
44828: OR
44829: IFFALSE 44849
// f := Delete ( f , 1 ) ;
44831: LD_ADDR_VAR 0 12
44835: PUSH
44836: LD_VAR 0 12
44840: PPUSH
44841: LD_INT 1
44843: PPUSH
44844: CALL_OW 3
44848: ST_TO_ADDR
// if not f then
44849: LD_VAR 0 12
44853: NOT
44854: IFFALSE 44872
// begin x := x + 2 ;
44856: LD_ADDR_VAR 0 13
44860: PUSH
44861: LD_VAR 0 13
44865: PUSH
44866: LD_INT 2
44868: PLUS
44869: ST_TO_ADDR
// continue ;
44870: GO 44670
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44872: LD_VAR 0 12
44876: PUSH
44877: LD_INT 1
44879: ARRAY
44880: PPUSH
44881: CALL_OW 266
44885: PUSH
44886: LD_INT 5
44888: EQUAL
44889: IFFALSE 44963
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44891: LD_VAR 0 12
44895: PUSH
44896: LD_INT 1
44898: ARRAY
44899: PPUSH
44900: CALL_OW 313
44904: PUSH
44905: LD_INT 3
44907: LESS
44908: IFFALSE 44944
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44910: LD_INT 0
44912: PPUSH
44913: LD_INT 5
44915: PUSH
44916: LD_INT 8
44918: PUSH
44919: LD_INT 9
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: PUSH
44927: LD_VAR 0 17
44931: ARRAY
44932: PPUSH
44933: LD_VAR 0 4
44937: PPUSH
44938: CALL_OW 380
44942: GO 44961
// PrepareHuman ( false , i , skill ) ;
44944: LD_INT 0
44946: PPUSH
44947: LD_VAR 0 8
44951: PPUSH
44952: LD_VAR 0 4
44956: PPUSH
44957: CALL_OW 380
// end else
44961: GO 44980
// PrepareHuman ( false , i , skill ) ;
44963: LD_INT 0
44965: PPUSH
44966: LD_VAR 0 8
44970: PPUSH
44971: LD_VAR 0 4
44975: PPUSH
44976: CALL_OW 380
// un := CreateHuman ;
44980: LD_ADDR_VAR 0 14
44984: PUSH
44985: CALL_OW 44
44989: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44990: LD_ADDR_VAR 0 7
44994: PUSH
44995: LD_VAR 0 7
44999: PPUSH
45000: LD_INT 1
45002: PPUSH
45003: LD_VAR 0 14
45007: PPUSH
45008: CALL_OW 2
45012: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45013: LD_VAR 0 14
45017: PPUSH
45018: LD_VAR 0 12
45022: PUSH
45023: LD_INT 1
45025: ARRAY
45026: PPUSH
45027: CALL_OW 52
// end ;
45031: GO 44670
45033: POP
45034: POP
// end ;
45035: GO 43972
45037: POP
45038: POP
// result := result ^ buildings ;
45039: LD_ADDR_VAR 0 7
45043: PUSH
45044: LD_VAR 0 7
45048: PUSH
45049: LD_VAR 0 18
45053: ADD
45054: ST_TO_ADDR
// end else
45055: GO 45198
// begin for i = 1 to personel do
45057: LD_ADDR_VAR 0 8
45061: PUSH
45062: DOUBLE
45063: LD_INT 1
45065: DEC
45066: ST_TO_ADDR
45067: LD_VAR 0 6
45071: PUSH
45072: FOR_TO
45073: IFFALSE 45196
// begin if i > 4 then
45075: LD_VAR 0 8
45079: PUSH
45080: LD_INT 4
45082: GREATER
45083: IFFALSE 45087
// break ;
45085: GO 45196
// x := personel [ i ] ;
45087: LD_ADDR_VAR 0 13
45091: PUSH
45092: LD_VAR 0 6
45096: PUSH
45097: LD_VAR 0 8
45101: ARRAY
45102: ST_TO_ADDR
// if x = - 1 then
45103: LD_VAR 0 13
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: EQUAL
45112: IFFALSE 45116
// continue ;
45114: GO 45072
// PrepareHuman ( false , i , skill ) ;
45116: LD_INT 0
45118: PPUSH
45119: LD_VAR 0 8
45123: PPUSH
45124: LD_VAR 0 4
45128: PPUSH
45129: CALL_OW 380
// un := CreateHuman ;
45133: LD_ADDR_VAR 0 14
45137: PUSH
45138: CALL_OW 44
45142: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45143: LD_VAR 0 14
45147: PPUSH
45148: LD_VAR 0 1
45152: PPUSH
45153: CALL_OW 250
45157: PPUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: CALL_OW 251
45167: PPUSH
45168: LD_INT 10
45170: PPUSH
45171: LD_INT 0
45173: PPUSH
45174: CALL_OW 50
// result := result ^ un ;
45178: LD_ADDR_VAR 0 7
45182: PUSH
45183: LD_VAR 0 7
45187: PUSH
45188: LD_VAR 0 14
45192: ADD
45193: ST_TO_ADDR
// end ;
45194: GO 45072
45196: POP
45197: POP
// end ; end ;
45198: LD_VAR 0 7
45202: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45203: LD_INT 0
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
// result := false ;
45221: LD_ADDR_VAR 0 3
45225: PUSH
45226: LD_INT 0
45228: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45229: LD_VAR 0 1
45233: NOT
45234: PUSH
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 266
45244: PUSH
45245: LD_INT 32
45247: PUSH
45248: LD_INT 33
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: IN
45255: NOT
45256: OR
45257: IFFALSE 45261
// exit ;
45259: GO 46370
// nat := GetNation ( tower ) ;
45261: LD_ADDR_VAR 0 12
45265: PUSH
45266: LD_VAR 0 1
45270: PPUSH
45271: CALL_OW 248
45275: ST_TO_ADDR
// side := GetSide ( tower ) ;
45276: LD_ADDR_VAR 0 16
45280: PUSH
45281: LD_VAR 0 1
45285: PPUSH
45286: CALL_OW 255
45290: ST_TO_ADDR
// x := GetX ( tower ) ;
45291: LD_ADDR_VAR 0 10
45295: PUSH
45296: LD_VAR 0 1
45300: PPUSH
45301: CALL_OW 250
45305: ST_TO_ADDR
// y := GetY ( tower ) ;
45306: LD_ADDR_VAR 0 11
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: CALL_OW 251
45320: ST_TO_ADDR
// if not x or not y then
45321: LD_VAR 0 10
45325: NOT
45326: PUSH
45327: LD_VAR 0 11
45331: NOT
45332: OR
45333: IFFALSE 45337
// exit ;
45335: GO 46370
// weapon := 0 ;
45337: LD_ADDR_VAR 0 18
45341: PUSH
45342: LD_INT 0
45344: ST_TO_ADDR
// fac_list := [ ] ;
45345: LD_ADDR_VAR 0 17
45349: PUSH
45350: EMPTY
45351: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45352: LD_ADDR_VAR 0 6
45356: PUSH
45357: LD_VAR 0 1
45361: PPUSH
45362: CALL_OW 274
45366: PPUSH
45367: LD_VAR 0 2
45371: PPUSH
45372: LD_INT 0
45374: PPUSH
45375: CALL 42941 0 3
45379: PPUSH
45380: LD_INT 30
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PPUSH
45390: CALL_OW 72
45394: ST_TO_ADDR
// if not factories then
45395: LD_VAR 0 6
45399: NOT
45400: IFFALSE 45404
// exit ;
45402: GO 46370
// for i in factories do
45404: LD_ADDR_VAR 0 8
45408: PUSH
45409: LD_VAR 0 6
45413: PUSH
45414: FOR_IN
45415: IFFALSE 45440
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45417: LD_ADDR_VAR 0 17
45421: PUSH
45422: LD_VAR 0 17
45426: PUSH
45427: LD_VAR 0 8
45431: PPUSH
45432: CALL_OW 478
45436: UNION
45437: ST_TO_ADDR
45438: GO 45414
45440: POP
45441: POP
// if not fac_list then
45442: LD_VAR 0 17
45446: NOT
45447: IFFALSE 45451
// exit ;
45449: GO 46370
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45451: LD_ADDR_VAR 0 5
45455: PUSH
45456: LD_INT 4
45458: PUSH
45459: LD_INT 5
45461: PUSH
45462: LD_INT 9
45464: PUSH
45465: LD_INT 10
45467: PUSH
45468: LD_INT 6
45470: PUSH
45471: LD_INT 7
45473: PUSH
45474: LD_INT 11
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 27
45488: PUSH
45489: LD_INT 28
45491: PUSH
45492: LD_INT 26
45494: PUSH
45495: LD_INT 30
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 43
45506: PUSH
45507: LD_INT 44
45509: PUSH
45510: LD_INT 46
45512: PUSH
45513: LD_INT 45
45515: PUSH
45516: LD_INT 47
45518: PUSH
45519: LD_INT 49
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: PUSH
45535: LD_VAR 0 12
45539: ARRAY
45540: ST_TO_ADDR
// list := list isect fac_list ;
45541: LD_ADDR_VAR 0 5
45545: PUSH
45546: LD_VAR 0 5
45550: PUSH
45551: LD_VAR 0 17
45555: ISECT
45556: ST_TO_ADDR
// if not list then
45557: LD_VAR 0 5
45561: NOT
45562: IFFALSE 45566
// exit ;
45564: GO 46370
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45566: LD_VAR 0 12
45570: PUSH
45571: LD_INT 3
45573: EQUAL
45574: PUSH
45575: LD_INT 49
45577: PUSH
45578: LD_VAR 0 5
45582: IN
45583: AND
45584: PUSH
45585: LD_INT 31
45587: PPUSH
45588: LD_VAR 0 16
45592: PPUSH
45593: CALL_OW 321
45597: PUSH
45598: LD_INT 2
45600: EQUAL
45601: AND
45602: IFFALSE 45662
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45604: LD_INT 22
45606: PUSH
45607: LD_VAR 0 16
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 35
45618: PUSH
45619: LD_INT 49
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 91
45628: PUSH
45629: LD_VAR 0 1
45633: PUSH
45634: LD_INT 10
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: PPUSH
45647: CALL_OW 69
45651: NOT
45652: IFFALSE 45662
// weapon := ru_time_lapser ;
45654: LD_ADDR_VAR 0 18
45658: PUSH
45659: LD_INT 49
45661: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45662: LD_VAR 0 12
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: IN
45677: PUSH
45678: LD_INT 11
45680: PUSH
45681: LD_VAR 0 5
45685: IN
45686: PUSH
45687: LD_INT 30
45689: PUSH
45690: LD_VAR 0 5
45694: IN
45695: OR
45696: AND
45697: PUSH
45698: LD_INT 6
45700: PPUSH
45701: LD_VAR 0 16
45705: PPUSH
45706: CALL_OW 321
45710: PUSH
45711: LD_INT 2
45713: EQUAL
45714: AND
45715: IFFALSE 45880
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45717: LD_INT 22
45719: PUSH
45720: LD_VAR 0 16
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 35
45734: PUSH
45735: LD_INT 11
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 35
45744: PUSH
45745: LD_INT 30
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 91
45759: PUSH
45760: LD_VAR 0 1
45764: PUSH
45765: LD_INT 18
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: PPUSH
45778: CALL_OW 69
45782: NOT
45783: PUSH
45784: LD_INT 22
45786: PUSH
45787: LD_VAR 0 16
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 30
45801: PUSH
45802: LD_INT 32
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 30
45811: PUSH
45812: LD_INT 33
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 91
45826: PUSH
45827: LD_VAR 0 1
45831: PUSH
45832: LD_INT 12
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: PPUSH
45848: CALL_OW 69
45852: PUSH
45853: LD_INT 2
45855: GREATER
45856: AND
45857: IFFALSE 45880
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45859: LD_ADDR_VAR 0 18
45863: PUSH
45864: LD_INT 11
45866: PUSH
45867: LD_INT 30
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_VAR 0 12
45878: ARRAY
45879: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45880: LD_VAR 0 18
45884: NOT
45885: PUSH
45886: LD_INT 40
45888: PPUSH
45889: LD_VAR 0 16
45893: PPUSH
45894: CALL_OW 321
45898: PUSH
45899: LD_INT 2
45901: EQUAL
45902: AND
45903: PUSH
45904: LD_INT 7
45906: PUSH
45907: LD_VAR 0 5
45911: IN
45912: PUSH
45913: LD_INT 28
45915: PUSH
45916: LD_VAR 0 5
45920: IN
45921: OR
45922: PUSH
45923: LD_INT 45
45925: PUSH
45926: LD_VAR 0 5
45930: IN
45931: OR
45932: AND
45933: IFFALSE 46187
// begin hex := GetHexInfo ( x , y ) ;
45935: LD_ADDR_VAR 0 4
45939: PUSH
45940: LD_VAR 0 10
45944: PPUSH
45945: LD_VAR 0 11
45949: PPUSH
45950: CALL_OW 546
45954: ST_TO_ADDR
// if hex [ 1 ] then
45955: LD_VAR 0 4
45959: PUSH
45960: LD_INT 1
45962: ARRAY
45963: IFFALSE 45967
// exit ;
45965: GO 46370
// height := hex [ 2 ] ;
45967: LD_ADDR_VAR 0 15
45971: PUSH
45972: LD_VAR 0 4
45976: PUSH
45977: LD_INT 2
45979: ARRAY
45980: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45981: LD_ADDR_VAR 0 14
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: LD_INT 5
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: ST_TO_ADDR
// for i in tmp do
46004: LD_ADDR_VAR 0 8
46008: PUSH
46009: LD_VAR 0 14
46013: PUSH
46014: FOR_IN
46015: IFFALSE 46185
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46017: LD_ADDR_VAR 0 9
46021: PUSH
46022: LD_VAR 0 10
46026: PPUSH
46027: LD_VAR 0 8
46031: PPUSH
46032: LD_INT 5
46034: PPUSH
46035: CALL_OW 272
46039: PUSH
46040: LD_VAR 0 11
46044: PPUSH
46045: LD_VAR 0 8
46049: PPUSH
46050: LD_INT 5
46052: PPUSH
46053: CALL_OW 273
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46062: LD_VAR 0 9
46066: PUSH
46067: LD_INT 1
46069: ARRAY
46070: PPUSH
46071: LD_VAR 0 9
46075: PUSH
46076: LD_INT 2
46078: ARRAY
46079: PPUSH
46080: CALL_OW 488
46084: IFFALSE 46183
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46086: LD_ADDR_VAR 0 4
46090: PUSH
46091: LD_VAR 0 9
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: PPUSH
46100: LD_VAR 0 9
46104: PUSH
46105: LD_INT 2
46107: ARRAY
46108: PPUSH
46109: CALL_OW 546
46113: ST_TO_ADDR
// if hex [ 1 ] then
46114: LD_VAR 0 4
46118: PUSH
46119: LD_INT 1
46121: ARRAY
46122: IFFALSE 46126
// continue ;
46124: GO 46014
// h := hex [ 2 ] ;
46126: LD_ADDR_VAR 0 13
46130: PUSH
46131: LD_VAR 0 4
46135: PUSH
46136: LD_INT 2
46138: ARRAY
46139: ST_TO_ADDR
// if h + 7 < height then
46140: LD_VAR 0 13
46144: PUSH
46145: LD_INT 7
46147: PLUS
46148: PUSH
46149: LD_VAR 0 15
46153: LESS
46154: IFFALSE 46183
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46156: LD_ADDR_VAR 0 18
46160: PUSH
46161: LD_INT 7
46163: PUSH
46164: LD_INT 28
46166: PUSH
46167: LD_INT 45
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: PUSH
46175: LD_VAR 0 12
46179: ARRAY
46180: ST_TO_ADDR
// break ;
46181: GO 46185
// end ; end ; end ;
46183: GO 46014
46185: POP
46186: POP
// end ; if not weapon then
46187: LD_VAR 0 18
46191: NOT
46192: IFFALSE 46252
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46194: LD_ADDR_VAR 0 5
46198: PUSH
46199: LD_VAR 0 5
46203: PUSH
46204: LD_INT 11
46206: PUSH
46207: LD_INT 30
46209: PUSH
46210: LD_INT 49
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: DIFF
46218: ST_TO_ADDR
// if not list then
46219: LD_VAR 0 5
46223: NOT
46224: IFFALSE 46228
// exit ;
46226: GO 46370
// weapon := list [ rand ( 1 , list ) ] ;
46228: LD_ADDR_VAR 0 18
46232: PUSH
46233: LD_VAR 0 5
46237: PUSH
46238: LD_INT 1
46240: PPUSH
46241: LD_VAR 0 5
46245: PPUSH
46246: CALL_OW 12
46250: ARRAY
46251: ST_TO_ADDR
// end ; if weapon then
46252: LD_VAR 0 18
46256: IFFALSE 46370
// begin tmp := CostOfWeapon ( weapon ) ;
46258: LD_ADDR_VAR 0 14
46262: PUSH
46263: LD_VAR 0 18
46267: PPUSH
46268: CALL_OW 451
46272: ST_TO_ADDR
// j := GetBase ( tower ) ;
46273: LD_ADDR_VAR 0 9
46277: PUSH
46278: LD_VAR 0 1
46282: PPUSH
46283: CALL_OW 274
46287: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46288: LD_VAR 0 9
46292: PPUSH
46293: LD_INT 1
46295: PPUSH
46296: CALL_OW 275
46300: PUSH
46301: LD_VAR 0 14
46305: PUSH
46306: LD_INT 1
46308: ARRAY
46309: GREATEREQUAL
46310: PUSH
46311: LD_VAR 0 9
46315: PPUSH
46316: LD_INT 2
46318: PPUSH
46319: CALL_OW 275
46323: PUSH
46324: LD_VAR 0 14
46328: PUSH
46329: LD_INT 2
46331: ARRAY
46332: GREATEREQUAL
46333: AND
46334: PUSH
46335: LD_VAR 0 9
46339: PPUSH
46340: LD_INT 3
46342: PPUSH
46343: CALL_OW 275
46347: PUSH
46348: LD_VAR 0 14
46352: PUSH
46353: LD_INT 3
46355: ARRAY
46356: GREATEREQUAL
46357: AND
46358: IFFALSE 46370
// result := weapon ;
46360: LD_ADDR_VAR 0 3
46364: PUSH
46365: LD_VAR 0 18
46369: ST_TO_ADDR
// end ; end ;
46370: LD_VAR 0 3
46374: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46375: LD_INT 0
46377: PPUSH
46378: PPUSH
// result := true ;
46379: LD_ADDR_VAR 0 3
46383: PUSH
46384: LD_INT 1
46386: ST_TO_ADDR
// if array1 = array2 then
46387: LD_VAR 0 1
46391: PUSH
46392: LD_VAR 0 2
46396: EQUAL
46397: IFFALSE 46457
// begin for i = 1 to array1 do
46399: LD_ADDR_VAR 0 4
46403: PUSH
46404: DOUBLE
46405: LD_INT 1
46407: DEC
46408: ST_TO_ADDR
46409: LD_VAR 0 1
46413: PUSH
46414: FOR_TO
46415: IFFALSE 46453
// if array1 [ i ] <> array2 [ i ] then
46417: LD_VAR 0 1
46421: PUSH
46422: LD_VAR 0 4
46426: ARRAY
46427: PUSH
46428: LD_VAR 0 2
46432: PUSH
46433: LD_VAR 0 4
46437: ARRAY
46438: NONEQUAL
46439: IFFALSE 46451
// begin result := false ;
46441: LD_ADDR_VAR 0 3
46445: PUSH
46446: LD_INT 0
46448: ST_TO_ADDR
// break ;
46449: GO 46453
// end ;
46451: GO 46414
46453: POP
46454: POP
// end else
46455: GO 46465
// result := false ;
46457: LD_ADDR_VAR 0 3
46461: PUSH
46462: LD_INT 0
46464: ST_TO_ADDR
// end ;
46465: LD_VAR 0 3
46469: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46470: LD_INT 0
46472: PPUSH
46473: PPUSH
// if not array1 or not array2 then
46474: LD_VAR 0 1
46478: NOT
46479: PUSH
46480: LD_VAR 0 2
46484: NOT
46485: OR
46486: IFFALSE 46490
// exit ;
46488: GO 46554
// result := true ;
46490: LD_ADDR_VAR 0 3
46494: PUSH
46495: LD_INT 1
46497: ST_TO_ADDR
// for i = 1 to array1 do
46498: LD_ADDR_VAR 0 4
46502: PUSH
46503: DOUBLE
46504: LD_INT 1
46506: DEC
46507: ST_TO_ADDR
46508: LD_VAR 0 1
46512: PUSH
46513: FOR_TO
46514: IFFALSE 46552
// if array1 [ i ] <> array2 [ i ] then
46516: LD_VAR 0 1
46520: PUSH
46521: LD_VAR 0 4
46525: ARRAY
46526: PUSH
46527: LD_VAR 0 2
46531: PUSH
46532: LD_VAR 0 4
46536: ARRAY
46537: NONEQUAL
46538: IFFALSE 46550
// begin result := false ;
46540: LD_ADDR_VAR 0 3
46544: PUSH
46545: LD_INT 0
46547: ST_TO_ADDR
// break ;
46548: GO 46552
// end ;
46550: GO 46513
46552: POP
46553: POP
// end ;
46554: LD_VAR 0 3
46558: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46559: LD_INT 0
46561: PPUSH
46562: PPUSH
46563: PPUSH
// pom := GetBase ( fac ) ;
46564: LD_ADDR_VAR 0 5
46568: PUSH
46569: LD_VAR 0 1
46573: PPUSH
46574: CALL_OW 274
46578: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46579: LD_ADDR_VAR 0 4
46583: PUSH
46584: LD_VAR 0 2
46588: PUSH
46589: LD_INT 1
46591: ARRAY
46592: PPUSH
46593: LD_VAR 0 2
46597: PUSH
46598: LD_INT 2
46600: ARRAY
46601: PPUSH
46602: LD_VAR 0 2
46606: PUSH
46607: LD_INT 3
46609: ARRAY
46610: PPUSH
46611: LD_VAR 0 2
46615: PUSH
46616: LD_INT 4
46618: ARRAY
46619: PPUSH
46620: CALL_OW 449
46624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46625: LD_ADDR_VAR 0 3
46629: PUSH
46630: LD_VAR 0 5
46634: PPUSH
46635: LD_INT 1
46637: PPUSH
46638: CALL_OW 275
46642: PUSH
46643: LD_VAR 0 4
46647: PUSH
46648: LD_INT 1
46650: ARRAY
46651: GREATEREQUAL
46652: PUSH
46653: LD_VAR 0 5
46657: PPUSH
46658: LD_INT 2
46660: PPUSH
46661: CALL_OW 275
46665: PUSH
46666: LD_VAR 0 4
46670: PUSH
46671: LD_INT 2
46673: ARRAY
46674: GREATEREQUAL
46675: AND
46676: PUSH
46677: LD_VAR 0 5
46681: PPUSH
46682: LD_INT 3
46684: PPUSH
46685: CALL_OW 275
46689: PUSH
46690: LD_VAR 0 4
46694: PUSH
46695: LD_INT 3
46697: ARRAY
46698: GREATEREQUAL
46699: AND
46700: ST_TO_ADDR
// end ;
46701: LD_VAR 0 3
46705: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46706: LD_INT 0
46708: PPUSH
46709: PPUSH
46710: PPUSH
46711: PPUSH
// pom := GetBase ( building ) ;
46712: LD_ADDR_VAR 0 3
46716: PUSH
46717: LD_VAR 0 1
46721: PPUSH
46722: CALL_OW 274
46726: ST_TO_ADDR
// if not pom then
46727: LD_VAR 0 3
46731: NOT
46732: IFFALSE 46736
// exit ;
46734: GO 46906
// btype := GetBType ( building ) ;
46736: LD_ADDR_VAR 0 5
46740: PUSH
46741: LD_VAR 0 1
46745: PPUSH
46746: CALL_OW 266
46750: ST_TO_ADDR
// if btype = b_armoury then
46751: LD_VAR 0 5
46755: PUSH
46756: LD_INT 4
46758: EQUAL
46759: IFFALSE 46769
// btype := b_barracks ;
46761: LD_ADDR_VAR 0 5
46765: PUSH
46766: LD_INT 5
46768: ST_TO_ADDR
// if btype = b_depot then
46769: LD_VAR 0 5
46773: PUSH
46774: LD_INT 0
46776: EQUAL
46777: IFFALSE 46787
// btype := b_warehouse ;
46779: LD_ADDR_VAR 0 5
46783: PUSH
46784: LD_INT 1
46786: ST_TO_ADDR
// if btype = b_workshop then
46787: LD_VAR 0 5
46791: PUSH
46792: LD_INT 2
46794: EQUAL
46795: IFFALSE 46805
// btype := b_factory ;
46797: LD_ADDR_VAR 0 5
46801: PUSH
46802: LD_INT 3
46804: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46805: LD_ADDR_VAR 0 4
46809: PUSH
46810: LD_VAR 0 5
46814: PPUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 248
46824: PPUSH
46825: CALL_OW 450
46829: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46830: LD_ADDR_VAR 0 2
46834: PUSH
46835: LD_VAR 0 3
46839: PPUSH
46840: LD_INT 1
46842: PPUSH
46843: CALL_OW 275
46847: PUSH
46848: LD_VAR 0 4
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: GREATEREQUAL
46857: PUSH
46858: LD_VAR 0 3
46862: PPUSH
46863: LD_INT 2
46865: PPUSH
46866: CALL_OW 275
46870: PUSH
46871: LD_VAR 0 4
46875: PUSH
46876: LD_INT 2
46878: ARRAY
46879: GREATEREQUAL
46880: AND
46881: PUSH
46882: LD_VAR 0 3
46886: PPUSH
46887: LD_INT 3
46889: PPUSH
46890: CALL_OW 275
46894: PUSH
46895: LD_VAR 0 4
46899: PUSH
46900: LD_INT 3
46902: ARRAY
46903: GREATEREQUAL
46904: AND
46905: ST_TO_ADDR
// end ;
46906: LD_VAR 0 2
46910: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46911: LD_INT 0
46913: PPUSH
46914: PPUSH
46915: PPUSH
// pom := GetBase ( building ) ;
46916: LD_ADDR_VAR 0 4
46920: PUSH
46921: LD_VAR 0 1
46925: PPUSH
46926: CALL_OW 274
46930: ST_TO_ADDR
// if not pom then
46931: LD_VAR 0 4
46935: NOT
46936: IFFALSE 46940
// exit ;
46938: GO 47041
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46940: LD_ADDR_VAR 0 5
46944: PUSH
46945: LD_VAR 0 2
46949: PPUSH
46950: LD_VAR 0 1
46954: PPUSH
46955: CALL_OW 248
46959: PPUSH
46960: CALL_OW 450
46964: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46965: LD_ADDR_VAR 0 3
46969: PUSH
46970: LD_VAR 0 4
46974: PPUSH
46975: LD_INT 1
46977: PPUSH
46978: CALL_OW 275
46982: PUSH
46983: LD_VAR 0 5
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: GREATEREQUAL
46992: PUSH
46993: LD_VAR 0 4
46997: PPUSH
46998: LD_INT 2
47000: PPUSH
47001: CALL_OW 275
47005: PUSH
47006: LD_VAR 0 5
47010: PUSH
47011: LD_INT 2
47013: ARRAY
47014: GREATEREQUAL
47015: AND
47016: PUSH
47017: LD_VAR 0 4
47021: PPUSH
47022: LD_INT 3
47024: PPUSH
47025: CALL_OW 275
47029: PUSH
47030: LD_VAR 0 5
47034: PUSH
47035: LD_INT 3
47037: ARRAY
47038: GREATEREQUAL
47039: AND
47040: ST_TO_ADDR
// end ;
47041: LD_VAR 0 3
47045: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47046: LD_INT 0
47048: PPUSH
47049: PPUSH
47050: PPUSH
47051: PPUSH
47052: PPUSH
47053: PPUSH
47054: PPUSH
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
// result := false ;
47059: LD_ADDR_VAR 0 8
47063: PUSH
47064: LD_INT 0
47066: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47067: LD_VAR 0 5
47071: NOT
47072: PUSH
47073: LD_VAR 0 1
47077: NOT
47078: OR
47079: PUSH
47080: LD_VAR 0 2
47084: NOT
47085: OR
47086: PUSH
47087: LD_VAR 0 3
47091: NOT
47092: OR
47093: IFFALSE 47097
// exit ;
47095: GO 47911
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47097: LD_ADDR_VAR 0 14
47101: PUSH
47102: LD_VAR 0 1
47106: PPUSH
47107: LD_VAR 0 2
47111: PPUSH
47112: LD_VAR 0 3
47116: PPUSH
47117: LD_VAR 0 4
47121: PPUSH
47122: LD_VAR 0 5
47126: PUSH
47127: LD_INT 1
47129: ARRAY
47130: PPUSH
47131: CALL_OW 248
47135: PPUSH
47136: LD_INT 0
47138: PPUSH
47139: CALL 49144 0 6
47143: ST_TO_ADDR
// if not hexes then
47144: LD_VAR 0 14
47148: NOT
47149: IFFALSE 47153
// exit ;
47151: GO 47911
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47153: LD_ADDR_VAR 0 17
47157: PUSH
47158: LD_VAR 0 5
47162: PPUSH
47163: LD_INT 22
47165: PUSH
47166: LD_VAR 0 13
47170: PPUSH
47171: CALL_OW 255
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 30
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 30
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PPUSH
47212: CALL_OW 72
47216: ST_TO_ADDR
// for i = 1 to hexes do
47217: LD_ADDR_VAR 0 9
47221: PUSH
47222: DOUBLE
47223: LD_INT 1
47225: DEC
47226: ST_TO_ADDR
47227: LD_VAR 0 14
47231: PUSH
47232: FOR_TO
47233: IFFALSE 47909
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47235: LD_ADDR_VAR 0 13
47239: PUSH
47240: LD_VAR 0 14
47244: PUSH
47245: LD_VAR 0 9
47249: ARRAY
47250: PUSH
47251: LD_INT 1
47253: ARRAY
47254: PPUSH
47255: LD_VAR 0 14
47259: PUSH
47260: LD_VAR 0 9
47264: ARRAY
47265: PUSH
47266: LD_INT 2
47268: ARRAY
47269: PPUSH
47270: CALL_OW 428
47274: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47275: LD_VAR 0 14
47279: PUSH
47280: LD_VAR 0 9
47284: ARRAY
47285: PUSH
47286: LD_INT 1
47288: ARRAY
47289: PPUSH
47290: LD_VAR 0 14
47294: PUSH
47295: LD_VAR 0 9
47299: ARRAY
47300: PUSH
47301: LD_INT 2
47303: ARRAY
47304: PPUSH
47305: CALL_OW 351
47309: PUSH
47310: LD_VAR 0 14
47314: PUSH
47315: LD_VAR 0 9
47319: ARRAY
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PPUSH
47325: LD_VAR 0 14
47329: PUSH
47330: LD_VAR 0 9
47334: ARRAY
47335: PUSH
47336: LD_INT 2
47338: ARRAY
47339: PPUSH
47340: CALL_OW 488
47344: NOT
47345: OR
47346: PUSH
47347: LD_VAR 0 13
47351: PPUSH
47352: CALL_OW 247
47356: PUSH
47357: LD_INT 3
47359: EQUAL
47360: OR
47361: IFFALSE 47367
// exit ;
47363: POP
47364: POP
47365: GO 47911
// if not tmp then
47367: LD_VAR 0 13
47371: NOT
47372: IFFALSE 47376
// continue ;
47374: GO 47232
// result := true ;
47376: LD_ADDR_VAR 0 8
47380: PUSH
47381: LD_INT 1
47383: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47384: LD_VAR 0 6
47388: PUSH
47389: LD_VAR 0 13
47393: PPUSH
47394: CALL_OW 247
47398: PUSH
47399: LD_INT 2
47401: EQUAL
47402: AND
47403: PUSH
47404: LD_VAR 0 13
47408: PPUSH
47409: CALL_OW 263
47413: PUSH
47414: LD_INT 1
47416: EQUAL
47417: AND
47418: IFFALSE 47582
// begin if IsDrivenBy ( tmp ) then
47420: LD_VAR 0 13
47424: PPUSH
47425: CALL_OW 311
47429: IFFALSE 47433
// continue ;
47431: GO 47232
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47433: LD_VAR 0 6
47437: PPUSH
47438: LD_INT 3
47440: PUSH
47441: LD_INT 60
47443: PUSH
47444: EMPTY
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: LD_INT 55
47456: PUSH
47457: EMPTY
47458: LIST
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PPUSH
47468: CALL_OW 72
47472: IFFALSE 47580
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47474: LD_ADDR_VAR 0 18
47478: PUSH
47479: LD_VAR 0 6
47483: PPUSH
47484: LD_INT 3
47486: PUSH
47487: LD_INT 60
47489: PUSH
47490: EMPTY
47491: LIST
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: LD_INT 55
47502: PUSH
47503: EMPTY
47504: LIST
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PPUSH
47514: CALL_OW 72
47518: PUSH
47519: LD_INT 1
47521: ARRAY
47522: ST_TO_ADDR
// if IsInUnit ( driver ) then
47523: LD_VAR 0 18
47527: PPUSH
47528: CALL_OW 310
47532: IFFALSE 47543
// ComExit ( driver ) ;
47534: LD_VAR 0 18
47538: PPUSH
47539: CALL 72924 0 1
// AddComEnterUnit ( driver , tmp ) ;
47543: LD_VAR 0 18
47547: PPUSH
47548: LD_VAR 0 13
47552: PPUSH
47553: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47557: LD_VAR 0 18
47561: PPUSH
47562: LD_VAR 0 7
47566: PPUSH
47567: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47571: LD_VAR 0 18
47575: PPUSH
47576: CALL_OW 181
// end ; continue ;
47580: GO 47232
// end ; if not cleaners or not tmp in cleaners then
47582: LD_VAR 0 6
47586: NOT
47587: PUSH
47588: LD_VAR 0 13
47592: PUSH
47593: LD_VAR 0 6
47597: IN
47598: NOT
47599: OR
47600: IFFALSE 47907
// begin if dep then
47602: LD_VAR 0 17
47606: IFFALSE 47742
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47608: LD_ADDR_VAR 0 16
47612: PUSH
47613: LD_VAR 0 17
47617: PUSH
47618: LD_INT 1
47620: ARRAY
47621: PPUSH
47622: CALL_OW 250
47626: PPUSH
47627: LD_VAR 0 17
47631: PUSH
47632: LD_INT 1
47634: ARRAY
47635: PPUSH
47636: CALL_OW 254
47640: PPUSH
47641: LD_INT 5
47643: PPUSH
47644: CALL_OW 272
47648: PUSH
47649: LD_VAR 0 17
47653: PUSH
47654: LD_INT 1
47656: ARRAY
47657: PPUSH
47658: CALL_OW 251
47662: PPUSH
47663: LD_VAR 0 17
47667: PUSH
47668: LD_INT 1
47670: ARRAY
47671: PPUSH
47672: CALL_OW 254
47676: PPUSH
47677: LD_INT 5
47679: PPUSH
47680: CALL_OW 273
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47689: LD_VAR 0 16
47693: PUSH
47694: LD_INT 1
47696: ARRAY
47697: PPUSH
47698: LD_VAR 0 16
47702: PUSH
47703: LD_INT 2
47705: ARRAY
47706: PPUSH
47707: CALL_OW 488
47711: IFFALSE 47742
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47713: LD_VAR 0 13
47717: PPUSH
47718: LD_VAR 0 16
47722: PUSH
47723: LD_INT 1
47725: ARRAY
47726: PPUSH
47727: LD_VAR 0 16
47731: PUSH
47732: LD_INT 2
47734: ARRAY
47735: PPUSH
47736: CALL_OW 111
// continue ;
47740: GO 47232
// end ; end ; r := GetDir ( tmp ) ;
47742: LD_ADDR_VAR 0 15
47746: PUSH
47747: LD_VAR 0 13
47751: PPUSH
47752: CALL_OW 254
47756: ST_TO_ADDR
// if r = 5 then
47757: LD_VAR 0 15
47761: PUSH
47762: LD_INT 5
47764: EQUAL
47765: IFFALSE 47775
// r := 0 ;
47767: LD_ADDR_VAR 0 15
47771: PUSH
47772: LD_INT 0
47774: ST_TO_ADDR
// for j = r to 5 do
47775: LD_ADDR_VAR 0 10
47779: PUSH
47780: DOUBLE
47781: LD_VAR 0 15
47785: DEC
47786: ST_TO_ADDR
47787: LD_INT 5
47789: PUSH
47790: FOR_TO
47791: IFFALSE 47905
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47793: LD_ADDR_VAR 0 11
47797: PUSH
47798: LD_VAR 0 13
47802: PPUSH
47803: CALL_OW 250
47807: PPUSH
47808: LD_VAR 0 10
47812: PPUSH
47813: LD_INT 2
47815: PPUSH
47816: CALL_OW 272
47820: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47821: LD_ADDR_VAR 0 12
47825: PUSH
47826: LD_VAR 0 13
47830: PPUSH
47831: CALL_OW 251
47835: PPUSH
47836: LD_VAR 0 10
47840: PPUSH
47841: LD_INT 2
47843: PPUSH
47844: CALL_OW 273
47848: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47849: LD_VAR 0 11
47853: PPUSH
47854: LD_VAR 0 12
47858: PPUSH
47859: CALL_OW 488
47863: PUSH
47864: LD_VAR 0 11
47868: PPUSH
47869: LD_VAR 0 12
47873: PPUSH
47874: CALL_OW 428
47878: NOT
47879: AND
47880: IFFALSE 47903
// begin ComMoveXY ( tmp , _x , _y ) ;
47882: LD_VAR 0 13
47886: PPUSH
47887: LD_VAR 0 11
47891: PPUSH
47892: LD_VAR 0 12
47896: PPUSH
47897: CALL_OW 111
// break ;
47901: GO 47905
// end ; end ;
47903: GO 47790
47905: POP
47906: POP
// end ; end ;
47907: GO 47232
47909: POP
47910: POP
// end ;
47911: LD_VAR 0 8
47915: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47916: LD_INT 0
47918: PPUSH
// result := true ;
47919: LD_ADDR_VAR 0 3
47923: PUSH
47924: LD_INT 1
47926: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47927: LD_VAR 0 2
47931: PUSH
47932: LD_INT 24
47934: DOUBLE
47935: EQUAL
47936: IFTRUE 47946
47938: LD_INT 33
47940: DOUBLE
47941: EQUAL
47942: IFTRUE 47946
47944: GO 47971
47946: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47947: LD_ADDR_VAR 0 3
47951: PUSH
47952: LD_INT 32
47954: PPUSH
47955: LD_VAR 0 1
47959: PPUSH
47960: CALL_OW 321
47964: PUSH
47965: LD_INT 2
47967: EQUAL
47968: ST_TO_ADDR
47969: GO 48287
47971: LD_INT 20
47973: DOUBLE
47974: EQUAL
47975: IFTRUE 47979
47977: GO 48004
47979: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47980: LD_ADDR_VAR 0 3
47984: PUSH
47985: LD_INT 6
47987: PPUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 321
47997: PUSH
47998: LD_INT 2
48000: EQUAL
48001: ST_TO_ADDR
48002: GO 48287
48004: LD_INT 22
48006: DOUBLE
48007: EQUAL
48008: IFTRUE 48018
48010: LD_INT 36
48012: DOUBLE
48013: EQUAL
48014: IFTRUE 48018
48016: GO 48043
48018: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_INT 15
48026: PPUSH
48027: LD_VAR 0 1
48031: PPUSH
48032: CALL_OW 321
48036: PUSH
48037: LD_INT 2
48039: EQUAL
48040: ST_TO_ADDR
48041: GO 48287
48043: LD_INT 30
48045: DOUBLE
48046: EQUAL
48047: IFTRUE 48051
48049: GO 48076
48051: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48052: LD_ADDR_VAR 0 3
48056: PUSH
48057: LD_INT 20
48059: PPUSH
48060: LD_VAR 0 1
48064: PPUSH
48065: CALL_OW 321
48069: PUSH
48070: LD_INT 2
48072: EQUAL
48073: ST_TO_ADDR
48074: GO 48287
48076: LD_INT 28
48078: DOUBLE
48079: EQUAL
48080: IFTRUE 48090
48082: LD_INT 21
48084: DOUBLE
48085: EQUAL
48086: IFTRUE 48090
48088: GO 48115
48090: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48091: LD_ADDR_VAR 0 3
48095: PUSH
48096: LD_INT 21
48098: PPUSH
48099: LD_VAR 0 1
48103: PPUSH
48104: CALL_OW 321
48108: PUSH
48109: LD_INT 2
48111: EQUAL
48112: ST_TO_ADDR
48113: GO 48287
48115: LD_INT 16
48117: DOUBLE
48118: EQUAL
48119: IFTRUE 48123
48121: GO 48148
48123: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48124: LD_ADDR_VAR 0 3
48128: PUSH
48129: LD_INT 84
48131: PPUSH
48132: LD_VAR 0 1
48136: PPUSH
48137: CALL_OW 321
48141: PUSH
48142: LD_INT 2
48144: EQUAL
48145: ST_TO_ADDR
48146: GO 48287
48148: LD_INT 19
48150: DOUBLE
48151: EQUAL
48152: IFTRUE 48162
48154: LD_INT 23
48156: DOUBLE
48157: EQUAL
48158: IFTRUE 48162
48160: GO 48187
48162: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48163: LD_ADDR_VAR 0 3
48167: PUSH
48168: LD_INT 83
48170: PPUSH
48171: LD_VAR 0 1
48175: PPUSH
48176: CALL_OW 321
48180: PUSH
48181: LD_INT 2
48183: EQUAL
48184: ST_TO_ADDR
48185: GO 48287
48187: LD_INT 17
48189: DOUBLE
48190: EQUAL
48191: IFTRUE 48195
48193: GO 48220
48195: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48196: LD_ADDR_VAR 0 3
48200: PUSH
48201: LD_INT 39
48203: PPUSH
48204: LD_VAR 0 1
48208: PPUSH
48209: CALL_OW 321
48213: PUSH
48214: LD_INT 2
48216: EQUAL
48217: ST_TO_ADDR
48218: GO 48287
48220: LD_INT 18
48222: DOUBLE
48223: EQUAL
48224: IFTRUE 48228
48226: GO 48253
48228: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48229: LD_ADDR_VAR 0 3
48233: PUSH
48234: LD_INT 40
48236: PPUSH
48237: LD_VAR 0 1
48241: PPUSH
48242: CALL_OW 321
48246: PUSH
48247: LD_INT 2
48249: EQUAL
48250: ST_TO_ADDR
48251: GO 48287
48253: LD_INT 27
48255: DOUBLE
48256: EQUAL
48257: IFTRUE 48261
48259: GO 48286
48261: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48262: LD_ADDR_VAR 0 3
48266: PUSH
48267: LD_INT 35
48269: PPUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 321
48279: PUSH
48280: LD_INT 2
48282: EQUAL
48283: ST_TO_ADDR
48284: GO 48287
48286: POP
// end ;
48287: LD_VAR 0 3
48291: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48292: LD_INT 0
48294: PPUSH
48295: PPUSH
48296: PPUSH
48297: PPUSH
48298: PPUSH
48299: PPUSH
48300: PPUSH
48301: PPUSH
48302: PPUSH
48303: PPUSH
48304: PPUSH
// result := false ;
48305: LD_ADDR_VAR 0 6
48309: PUSH
48310: LD_INT 0
48312: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48313: LD_VAR 0 1
48317: NOT
48318: PUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 266
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: IN
48339: NOT
48340: OR
48341: PUSH
48342: LD_VAR 0 2
48346: NOT
48347: OR
48348: PUSH
48349: LD_VAR 0 5
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: LD_INT 5
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: IN
48380: NOT
48381: OR
48382: PUSH
48383: LD_VAR 0 3
48387: PPUSH
48388: LD_VAR 0 4
48392: PPUSH
48393: CALL_OW 488
48397: NOT
48398: OR
48399: IFFALSE 48403
// exit ;
48401: GO 49139
// side := GetSide ( depot ) ;
48403: LD_ADDR_VAR 0 9
48407: PUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: CALL_OW 255
48417: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48418: LD_VAR 0 9
48422: PPUSH
48423: LD_VAR 0 2
48427: PPUSH
48428: CALL 47916 0 2
48432: NOT
48433: IFFALSE 48437
// exit ;
48435: GO 49139
// pom := GetBase ( depot ) ;
48437: LD_ADDR_VAR 0 10
48441: PUSH
48442: LD_VAR 0 1
48446: PPUSH
48447: CALL_OW 274
48451: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48452: LD_ADDR_VAR 0 11
48456: PUSH
48457: LD_VAR 0 2
48461: PPUSH
48462: LD_VAR 0 1
48466: PPUSH
48467: CALL_OW 248
48471: PPUSH
48472: CALL_OW 450
48476: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48477: LD_VAR 0 10
48481: PPUSH
48482: LD_INT 1
48484: PPUSH
48485: CALL_OW 275
48489: PUSH
48490: LD_VAR 0 11
48494: PUSH
48495: LD_INT 1
48497: ARRAY
48498: GREATEREQUAL
48499: PUSH
48500: LD_VAR 0 10
48504: PPUSH
48505: LD_INT 2
48507: PPUSH
48508: CALL_OW 275
48512: PUSH
48513: LD_VAR 0 11
48517: PUSH
48518: LD_INT 2
48520: ARRAY
48521: GREATEREQUAL
48522: AND
48523: PUSH
48524: LD_VAR 0 10
48528: PPUSH
48529: LD_INT 3
48531: PPUSH
48532: CALL_OW 275
48536: PUSH
48537: LD_VAR 0 11
48541: PUSH
48542: LD_INT 3
48544: ARRAY
48545: GREATEREQUAL
48546: AND
48547: NOT
48548: IFFALSE 48552
// exit ;
48550: GO 49139
// if GetBType ( depot ) = b_depot then
48552: LD_VAR 0 1
48556: PPUSH
48557: CALL_OW 266
48561: PUSH
48562: LD_INT 0
48564: EQUAL
48565: IFFALSE 48577
// dist := 28 else
48567: LD_ADDR_VAR 0 14
48571: PUSH
48572: LD_INT 28
48574: ST_TO_ADDR
48575: GO 48585
// dist := 36 ;
48577: LD_ADDR_VAR 0 14
48581: PUSH
48582: LD_INT 36
48584: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48585: LD_VAR 0 1
48589: PPUSH
48590: LD_VAR 0 3
48594: PPUSH
48595: LD_VAR 0 4
48599: PPUSH
48600: CALL_OW 297
48604: PUSH
48605: LD_VAR 0 14
48609: GREATER
48610: IFFALSE 48614
// exit ;
48612: GO 49139
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48614: LD_ADDR_VAR 0 12
48618: PUSH
48619: LD_VAR 0 2
48623: PPUSH
48624: LD_VAR 0 3
48628: PPUSH
48629: LD_VAR 0 4
48633: PPUSH
48634: LD_VAR 0 5
48638: PPUSH
48639: LD_VAR 0 1
48643: PPUSH
48644: CALL_OW 248
48648: PPUSH
48649: LD_INT 0
48651: PPUSH
48652: CALL 49144 0 6
48656: ST_TO_ADDR
// if not hexes then
48657: LD_VAR 0 12
48661: NOT
48662: IFFALSE 48666
// exit ;
48664: GO 49139
// hex := GetHexInfo ( x , y ) ;
48666: LD_ADDR_VAR 0 15
48670: PUSH
48671: LD_VAR 0 3
48675: PPUSH
48676: LD_VAR 0 4
48680: PPUSH
48681: CALL_OW 546
48685: ST_TO_ADDR
// if hex [ 1 ] then
48686: LD_VAR 0 15
48690: PUSH
48691: LD_INT 1
48693: ARRAY
48694: IFFALSE 48698
// exit ;
48696: GO 49139
// height := hex [ 2 ] ;
48698: LD_ADDR_VAR 0 13
48702: PUSH
48703: LD_VAR 0 15
48707: PUSH
48708: LD_INT 2
48710: ARRAY
48711: ST_TO_ADDR
// for i = 1 to hexes do
48712: LD_ADDR_VAR 0 7
48716: PUSH
48717: DOUBLE
48718: LD_INT 1
48720: DEC
48721: ST_TO_ADDR
48722: LD_VAR 0 12
48726: PUSH
48727: FOR_TO
48728: IFFALSE 49058
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48730: LD_VAR 0 12
48734: PUSH
48735: LD_VAR 0 7
48739: ARRAY
48740: PUSH
48741: LD_INT 1
48743: ARRAY
48744: PPUSH
48745: LD_VAR 0 12
48749: PUSH
48750: LD_VAR 0 7
48754: ARRAY
48755: PUSH
48756: LD_INT 2
48758: ARRAY
48759: PPUSH
48760: CALL_OW 488
48764: NOT
48765: PUSH
48766: LD_VAR 0 12
48770: PUSH
48771: LD_VAR 0 7
48775: ARRAY
48776: PUSH
48777: LD_INT 1
48779: ARRAY
48780: PPUSH
48781: LD_VAR 0 12
48785: PUSH
48786: LD_VAR 0 7
48790: ARRAY
48791: PUSH
48792: LD_INT 2
48794: ARRAY
48795: PPUSH
48796: CALL_OW 428
48800: PUSH
48801: LD_INT 0
48803: GREATER
48804: OR
48805: PUSH
48806: LD_VAR 0 12
48810: PUSH
48811: LD_VAR 0 7
48815: ARRAY
48816: PUSH
48817: LD_INT 1
48819: ARRAY
48820: PPUSH
48821: LD_VAR 0 12
48825: PUSH
48826: LD_VAR 0 7
48830: ARRAY
48831: PUSH
48832: LD_INT 2
48834: ARRAY
48835: PPUSH
48836: CALL_OW 351
48840: OR
48841: IFFALSE 48847
// exit ;
48843: POP
48844: POP
48845: GO 49139
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48847: LD_ADDR_VAR 0 8
48851: PUSH
48852: LD_VAR 0 12
48856: PUSH
48857: LD_VAR 0 7
48861: ARRAY
48862: PUSH
48863: LD_INT 1
48865: ARRAY
48866: PPUSH
48867: LD_VAR 0 12
48871: PUSH
48872: LD_VAR 0 7
48876: ARRAY
48877: PUSH
48878: LD_INT 2
48880: ARRAY
48881: PPUSH
48882: CALL_OW 546
48886: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48887: LD_VAR 0 8
48891: PUSH
48892: LD_INT 1
48894: ARRAY
48895: PUSH
48896: LD_VAR 0 8
48900: PUSH
48901: LD_INT 2
48903: ARRAY
48904: PUSH
48905: LD_VAR 0 13
48909: PUSH
48910: LD_INT 2
48912: PLUS
48913: GREATER
48914: OR
48915: PUSH
48916: LD_VAR 0 8
48920: PUSH
48921: LD_INT 2
48923: ARRAY
48924: PUSH
48925: LD_VAR 0 13
48929: PUSH
48930: LD_INT 2
48932: MINUS
48933: LESS
48934: OR
48935: PUSH
48936: LD_VAR 0 8
48940: PUSH
48941: LD_INT 3
48943: ARRAY
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 8
48950: PUSH
48951: LD_INT 9
48953: PUSH
48954: LD_INT 10
48956: PUSH
48957: LD_INT 11
48959: PUSH
48960: LD_INT 12
48962: PUSH
48963: LD_INT 13
48965: PUSH
48966: LD_INT 16
48968: PUSH
48969: LD_INT 17
48971: PUSH
48972: LD_INT 18
48974: PUSH
48975: LD_INT 19
48977: PUSH
48978: LD_INT 20
48980: PUSH
48981: LD_INT 21
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: IN
48999: NOT
49000: OR
49001: PUSH
49002: LD_VAR 0 8
49006: PUSH
49007: LD_INT 5
49009: ARRAY
49010: NOT
49011: OR
49012: PUSH
49013: LD_VAR 0 8
49017: PUSH
49018: LD_INT 6
49020: ARRAY
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 7
49030: PUSH
49031: LD_INT 9
49033: PUSH
49034: LD_INT 10
49036: PUSH
49037: LD_INT 11
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: IN
49048: NOT
49049: OR
49050: IFFALSE 49056
// exit ;
49052: POP
49053: POP
49054: GO 49139
// end ;
49056: GO 48727
49058: POP
49059: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49060: LD_VAR 0 9
49064: PPUSH
49065: LD_VAR 0 3
49069: PPUSH
49070: LD_VAR 0 4
49074: PPUSH
49075: LD_INT 20
49077: PPUSH
49078: CALL 41091 0 4
49082: PUSH
49083: LD_INT 4
49085: ARRAY
49086: IFFALSE 49090
// exit ;
49088: GO 49139
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49090: LD_VAR 0 2
49094: PUSH
49095: LD_INT 29
49097: PUSH
49098: LD_INT 30
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: IN
49105: PUSH
49106: LD_VAR 0 3
49110: PPUSH
49111: LD_VAR 0 4
49115: PPUSH
49116: LD_VAR 0 9
49120: PPUSH
49121: CALL_OW 440
49125: NOT
49126: AND
49127: IFFALSE 49131
// exit ;
49129: GO 49139
// result := true ;
49131: LD_ADDR_VAR 0 6
49135: PUSH
49136: LD_INT 1
49138: ST_TO_ADDR
// end ;
49139: LD_VAR 0 6
49143: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49144: LD_INT 0
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
49150: PPUSH
49151: PPUSH
49152: PPUSH
49153: PPUSH
49154: PPUSH
49155: PPUSH
49156: PPUSH
49157: PPUSH
49158: PPUSH
49159: PPUSH
49160: PPUSH
49161: PPUSH
49162: PPUSH
49163: PPUSH
49164: PPUSH
49165: PPUSH
49166: PPUSH
49167: PPUSH
49168: PPUSH
49169: PPUSH
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
49190: PPUSH
49191: PPUSH
49192: PPUSH
49193: PPUSH
49194: PPUSH
49195: PPUSH
49196: PPUSH
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
// result = [ ] ;
49204: LD_ADDR_VAR 0 7
49208: PUSH
49209: EMPTY
49210: ST_TO_ADDR
// temp_list = [ ] ;
49211: LD_ADDR_VAR 0 9
49215: PUSH
49216: EMPTY
49217: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49218: LD_VAR 0 4
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: LD_INT 4
49237: PUSH
49238: LD_INT 5
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: IN
49249: NOT
49250: PUSH
49251: LD_VAR 0 1
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: IN
49266: PUSH
49267: LD_VAR 0 5
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 3
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: IN
49286: NOT
49287: AND
49288: OR
49289: IFFALSE 49293
// exit ;
49291: GO 67684
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49293: LD_VAR 0 1
49297: PUSH
49298: LD_INT 6
49300: PUSH
49301: LD_INT 7
49303: PUSH
49304: LD_INT 8
49306: PUSH
49307: LD_INT 13
49309: PUSH
49310: LD_INT 12
49312: PUSH
49313: LD_INT 15
49315: PUSH
49316: LD_INT 11
49318: PUSH
49319: LD_INT 14
49321: PUSH
49322: LD_INT 10
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: IN
49336: IFFALSE 49346
// btype = b_lab ;
49338: LD_ADDR_VAR 0 1
49342: PUSH
49343: LD_INT 6
49345: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49346: LD_VAR 0 6
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: IN
49365: NOT
49366: PUSH
49367: LD_VAR 0 1
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: LD_INT 6
49386: PUSH
49387: LD_INT 36
49389: PUSH
49390: LD_INT 4
49392: PUSH
49393: LD_INT 5
49395: PUSH
49396: LD_INT 31
49398: PUSH
49399: LD_INT 32
49401: PUSH
49402: LD_INT 33
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: IN
49418: NOT
49419: PUSH
49420: LD_VAR 0 6
49424: PUSH
49425: LD_INT 1
49427: EQUAL
49428: AND
49429: OR
49430: PUSH
49431: LD_VAR 0 1
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: IN
49446: NOT
49447: PUSH
49448: LD_VAR 0 6
49452: PUSH
49453: LD_INT 2
49455: EQUAL
49456: AND
49457: OR
49458: IFFALSE 49468
// mode = 0 ;
49460: LD_ADDR_VAR 0 6
49464: PUSH
49465: LD_INT 0
49467: ST_TO_ADDR
// case mode of 0 :
49468: LD_VAR 0 6
49472: PUSH
49473: LD_INT 0
49475: DOUBLE
49476: EQUAL
49477: IFTRUE 49481
49479: GO 60934
49481: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49482: LD_ADDR_VAR 0 11
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49675: LD_ADDR_VAR 0 12
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 3
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49871: LD_ADDR_VAR 0 13
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: LD_INT 3
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50070: LD_ADDR_VAR 0 14
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50266: LD_ADDR_VAR 0 15
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50459: LD_ADDR_VAR 0 16
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50652: LD_ADDR_VAR 0 17
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50882: LD_ADDR_VAR 0 18
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51112: LD_ADDR_VAR 0 19
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51342: LD_ADDR_VAR 0 20
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51572: LD_ADDR_VAR 0 21
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51802: LD_ADDR_VAR 0 22
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52032: LD_ADDR_VAR 0 23
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: NEG
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 3
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52312: LD_ADDR_VAR 0 24
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52588: LD_ADDR_VAR 0 25
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 3
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52862: LD_ADDR_VAR 0 26
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 3
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53138: LD_ADDR_VAR 0 27
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: NEG
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53418: LD_ADDR_VAR 0 28
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: LD_INT 3
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 3
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53700: LD_ADDR_VAR 0 29
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 3
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 3
53944: NEG
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53979: LD_ADDR_VAR 0 30
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54257: LD_ADDR_VAR 0 31
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: NEG
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54535: LD_ADDR_VAR 0 32
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54813: LD_ADDR_VAR 0 33
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55092: LD_ADDR_VAR 0 34
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55372: LD_ADDR_VAR 0 35
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55484: LD_ADDR_VAR 0 36
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55596: LD_ADDR_VAR 0 37
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55708: LD_ADDR_VAR 0 38
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55820: LD_ADDR_VAR 0 39
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55932: LD_ADDR_VAR 0 40
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56044: LD_ADDR_VAR 0 41
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56394: LD_ADDR_VAR 0 42
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 2
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 3
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 3
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: LD_INT 3
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56744: LD_ADDR_VAR 0 43
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57092: LD_ADDR_VAR 0 44
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: LD_INT 3
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57442: LD_ADDR_VAR 0 45
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: LD_INT 3
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: LD_INT 3
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: PUSH
57699: LD_INT 3
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 3
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57792: LD_ADDR_VAR 0 46
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 3
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58140: LD_ADDR_VAR 0 47
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58291: LD_ADDR_VAR 0 48
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58438: LD_ADDR_VAR 0 49
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58582: LD_ADDR_VAR 0 50
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58726: LD_ADDR_VAR 0 51
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58873: LD_ADDR_VAR 0 52
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59024: LD_ADDR_VAR 0 53
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59254: LD_ADDR_VAR 0 54
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59484: LD_ADDR_VAR 0 55
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 2
59683: NEG
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59714: LD_ADDR_VAR 0 56
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59944: LD_ADDR_VAR 0 57
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60174: LD_ADDR_VAR 0 58
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60404: LD_ADDR_VAR 0 59
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60492: LD_ADDR_VAR 0 60
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60580: LD_ADDR_VAR 0 61
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60668: LD_ADDR_VAR 0 62
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60756: LD_ADDR_VAR 0 63
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60844: LD_ADDR_VAR 0 64
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: ST_TO_ADDR
// end ; 1 :
60932: GO 66829
60934: LD_INT 1
60936: DOUBLE
60937: EQUAL
60938: IFTRUE 60942
60940: GO 63565
60942: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60943: LD_ADDR_VAR 0 11
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60987: LD_ADDR_VAR 0 12
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 3
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61028: LD_ADDR_VAR 0 13
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61068: LD_ADDR_VAR 0 14
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: LD_INT 3
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61109: LD_ADDR_VAR 0 15
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61153: LD_ADDR_VAR 0 16
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: NEG
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61199: LD_ADDR_VAR 0 17
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61243: LD_ADDR_VAR 0 18
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 3
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61284: LD_ADDR_VAR 0 19
61288: PUSH
61289: LD_INT 3
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: PUSH
61302: LD_INT 3
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61324: LD_ADDR_VAR 0 20
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: LIST
61364: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61365: LD_ADDR_VAR 0 21
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61409: LD_ADDR_VAR 0 22
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61455: LD_ADDR_VAR 0 23
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61499: LD_ADDR_VAR 0 24
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 4
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61540: LD_ADDR_VAR 0 25
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: LD_INT 3
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 4
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 3
61567: PUSH
61568: LD_INT 4
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61580: LD_ADDR_VAR 0 26
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: LD_INT 4
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: LIST
61620: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61621: LD_ADDR_VAR 0 27
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 4
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61665: LD_ADDR_VAR 0 28
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 4
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 4
61696: NEG
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61711: LD_ADDR_VAR 0 29
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 3
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: LD_INT 4
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 5
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: LD_INT 5
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 4
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 6
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 6
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 5
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61866: LD_ADDR_VAR 0 30
61870: PUSH
61871: LD_INT 2
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 3
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 5
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 5
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 5
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 6
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 6
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62009: LD_ADDR_VAR 0 31
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 3
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: LD_INT 3
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 4
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 4
62056: PUSH
62057: LD_INT 4
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 5
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 5
62086: PUSH
62087: LD_INT 5
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 4
62096: PUSH
62097: LD_INT 5
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 6
62106: PUSH
62107: LD_INT 5
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 6
62116: PUSH
62117: LD_INT 6
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 5
62126: PUSH
62127: LD_INT 6
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62148: LD_ADDR_VAR 0 32
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 3
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 4
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 4
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 3
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 5
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 5
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 4
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 6
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 6
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 5
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62291: LD_ADDR_VAR 0 33
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 4
62343: NEG
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 4
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 4
62366: NEG
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 5
62377: NEG
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 5
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 5
62400: NEG
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 6
62411: NEG
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 6
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62446: LD_ADDR_VAR 0 34
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: LD_INT 3
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 3
62465: NEG
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 3
62477: NEG
62478: PUSH
62479: LD_INT 3
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 3
62489: NEG
62490: PUSH
62491: LD_INT 4
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 4
62501: NEG
62502: PUSH
62503: LD_INT 3
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 4
62513: NEG
62514: PUSH
62515: LD_INT 4
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 4
62525: NEG
62526: PUSH
62527: LD_INT 5
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 5
62537: NEG
62538: PUSH
62539: LD_INT 4
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 5
62549: NEG
62550: PUSH
62551: LD_INT 5
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 5
62561: NEG
62562: PUSH
62563: LD_INT 6
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 6
62573: NEG
62574: PUSH
62575: LD_INT 5
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 6
62585: NEG
62586: PUSH
62587: LD_INT 6
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62609: LD_ADDR_VAR 0 41
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 3
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62653: LD_ADDR_VAR 0 42
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62694: LD_ADDR_VAR 0 43
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62734: LD_ADDR_VAR 0 44
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62775: LD_ADDR_VAR 0 45
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62819: LD_ADDR_VAR 0 46
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 3
62850: NEG
62851: PUSH
62852: LD_INT 2
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: LIST
62864: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62865: LD_ADDR_VAR 0 47
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: LD_INT 3
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 3
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62898: LD_ADDR_VAR 0 48
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62929: LD_ADDR_VAR 0 49
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62958: LD_ADDR_VAR 0 50
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62987: LD_ADDR_VAR 0 51
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 2
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63018: LD_ADDR_VAR 0 52
63022: PUSH
63023: LD_INT 3
63025: NEG
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 3
63037: NEG
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63051: LD_ADDR_VAR 0 53
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: LD_INT 3
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 3
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 2
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63095: LD_ADDR_VAR 0 54
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 3
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 3
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63136: LD_ADDR_VAR 0 55
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 3
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63176: LD_ADDR_VAR 0 56
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63217: LD_ADDR_VAR 0 57
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 3
63235: NEG
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63261: LD_ADDR_VAR 0 58
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: LD_INT 3
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: NEG
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: LD_INT 3
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63307: LD_ADDR_VAR 0 59
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 2
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63351: LD_ADDR_VAR 0 60
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63392: LD_ADDR_VAR 0 61
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63432: LD_ADDR_VAR 0 62
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63473: LD_ADDR_VAR 0 63
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: NEG
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63517: LD_ADDR_VAR 0 64
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: LIST
63562: ST_TO_ADDR
// end ; 2 :
63563: GO 66829
63565: LD_INT 2
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 66828
63573: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63574: LD_ADDR_VAR 0 29
63578: PUSH
63579: LD_INT 4
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 4
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 5
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 5
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 4
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 3
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 5
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 4
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 3
63714: PUSH
63715: LD_INT 4
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 4
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: LD_INT 4
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 4
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 4
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 5
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 5
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 4
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 3
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: NEG
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 4
63913: NEG
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 4
63924: NEG
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 4
63936: NEG
63937: PUSH
63938: LD_INT 2
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 4
63959: NEG
63960: PUSH
63961: LD_INT 4
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 4
63971: NEG
63972: PUSH
63973: LD_INT 5
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: LD_INT 4
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 3
63995: NEG
63996: PUSH
63997: LD_INT 3
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 4
64007: NEG
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 5
64019: NEG
64020: PUSH
64021: LD_INT 4
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 5
64031: NEG
64032: PUSH
64033: LD_INT 5
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: NEG
64044: PUSH
64045: LD_INT 5
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 5
64055: NEG
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64112: LD_ADDR_VAR 0 30
64116: PUSH
64117: LD_INT 4
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 4
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 5
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 5
64149: PUSH
64150: LD_INT 5
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 4
64159: PUSH
64160: LD_INT 5
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 3
64169: PUSH
64170: LD_INT 4
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 3
64179: PUSH
64180: LD_INT 3
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 5
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 3
64199: PUSH
64200: LD_INT 5
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 3
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 2
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 4
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 4
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: LD_INT 4
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 4
64302: NEG
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 4
64313: NEG
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 3
64325: NEG
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: NEG
64337: PUSH
64338: LD_INT 1
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 4
64347: NEG
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 5
64358: NEG
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 5
64369: NEG
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 5
64381: NEG
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 3
64393: NEG
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 3
64404: NEG
64405: PUSH
64406: LD_INT 3
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 3
64416: NEG
64417: PUSH
64418: LD_INT 4
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: LD_INT 3
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 2
64440: NEG
64441: PUSH
64442: LD_INT 2
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 3
64452: NEG
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 4
64464: NEG
64465: PUSH
64466: LD_INT 3
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 4
64476: NEG
64477: PUSH
64478: LD_INT 4
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 2
64488: NEG
64489: PUSH
64490: LD_INT 4
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 4
64500: NEG
64501: PUSH
64502: LD_INT 2
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: LD_INT 4
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 5
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: LD_INT 4
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 3
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: LD_INT 4
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 5
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 2
64591: PUSH
64592: LD_INT 3
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: LD_INT 5
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64659: LD_ADDR_VAR 0 31
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: LD_INT 4
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: LD_INT 3
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: LD_INT 4
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: LD_INT 5
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: LD_INT 5
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 4
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 2
64738: PUSH
64739: LD_INT 5
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 2
64782: NEG
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 4
64815: NEG
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 4
64826: NEG
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 4
64838: NEG
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 2
64850: NEG
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 4
64861: NEG
64862: PUSH
64863: LD_INT 4
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 4
64873: NEG
64874: PUSH
64875: LD_INT 5
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 4
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: LD_INT 3
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 4
64909: NEG
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 5
64921: NEG
64922: PUSH
64923: LD_INT 4
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 5
64933: NEG
64934: PUSH
64935: LD_INT 5
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 3
64945: NEG
64946: PUSH
64947: LD_INT 5
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 5
64957: NEG
64958: PUSH
64959: LD_INT 3
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 4
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: LD_INT 4
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: LD_INT 4
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 4
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 4
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 5
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 5
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 4
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 5
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65209: LD_ADDR_VAR 0 32
65213: PUSH
65214: LD_INT 4
65216: NEG
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 4
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 5
65272: NEG
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 5
65283: NEG
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 5
65295: NEG
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 3
65307: NEG
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 3
65318: NEG
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: NEG
65331: PUSH
65332: LD_INT 4
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: NEG
65355: PUSH
65356: LD_INT 2
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 3
65366: NEG
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 4
65378: NEG
65379: PUSH
65380: LD_INT 3
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 4
65390: NEG
65391: PUSH
65392: LD_INT 4
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: LD_INT 4
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 4
65414: NEG
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 4
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 5
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: LD_INT 4
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 4
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: LD_INT 5
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 2
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 2
65516: NEG
65517: PUSH
65518: LD_INT 5
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 3
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 3
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 4
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 4
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 2
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 2
65600: PUSH
65601: LD_INT 2
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 4
65611: PUSH
65612: LD_INT 2
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 4
65621: PUSH
65622: LD_INT 4
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 4
65631: PUSH
65632: LD_INT 3
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 5
65641: PUSH
65642: LD_INT 4
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 5
65651: PUSH
65652: LD_INT 5
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 4
65661: PUSH
65662: LD_INT 5
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: LD_INT 4
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 5
65691: PUSH
65692: LD_INT 3
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 3
65701: PUSH
65702: LD_INT 5
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65756: LD_ADDR_VAR 0 33
65760: PUSH
65761: LD_INT 4
65763: NEG
65764: PUSH
65765: LD_INT 4
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 4
65775: NEG
65776: PUSH
65777: LD_INT 5
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 3
65787: NEG
65788: PUSH
65789: LD_INT 4
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 3
65799: NEG
65800: PUSH
65801: LD_INT 3
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 4
65811: NEG
65812: PUSH
65813: LD_INT 3
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 5
65823: NEG
65824: PUSH
65825: LD_INT 4
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 5
65835: NEG
65836: PUSH
65837: LD_INT 5
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 3
65847: NEG
65848: PUSH
65849: LD_INT 5
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 5
65859: NEG
65860: PUSH
65861: LD_INT 3
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: LD_INT 3
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 4
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: LD_INT 2
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: LD_INT 2
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: LD_INT 4
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: NEG
65962: PUSH
65963: LD_INT 4
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 4
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 4
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 5
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 5
66004: PUSH
66005: LD_INT 1
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 5
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 3
66066: PUSH
66067: LD_INT 3
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: LD_INT 2
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: LD_INT 3
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 4
66096: PUSH
66097: LD_INT 4
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 4
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: LD_INT 3
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: LD_INT 2
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 4
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: LD_INT 4
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 4
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: LD_INT 5
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: LD_INT 5
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 4
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 2
66228: PUSH
66229: LD_INT 5
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: LD_INT 3
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66294: LD_ADDR_VAR 0 34
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 4
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: LD_INT 5
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 4
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 3
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 4
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: LD_INT 5
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: LD_INT 3
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: LD_INT 5
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: LD_INT 1
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 4
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: LD_INT 2
66478: NEG
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 4
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 4
66496: PUSH
66497: LD_INT 4
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 4
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 5
66516: PUSH
66517: LD_INT 4
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 5
66526: PUSH
66527: LD_INT 5
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 4
66536: PUSH
66537: LD_INT 5
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 3
66546: PUSH
66547: LD_INT 4
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 5
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 3
66576: PUSH
66577: LD_INT 5
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: LD_INT 4
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: LD_INT 3
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: LD_INT 4
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: LD_INT 2
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 4
66679: NEG
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 4
66690: NEG
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 3
66713: NEG
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 4
66724: NEG
66725: PUSH
66726: LD_INT 1
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 5
66735: NEG
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 5
66746: NEG
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 5
66758: NEG
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 3
66770: NEG
66771: PUSH
66772: LD_INT 2
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: ST_TO_ADDR
// end ; end ;
66826: GO 66829
66828: POP
// case btype of b_depot , b_warehouse :
66829: LD_VAR 0 1
66833: PUSH
66834: LD_INT 0
66836: DOUBLE
66837: EQUAL
66838: IFTRUE 66848
66840: LD_INT 1
66842: DOUBLE
66843: EQUAL
66844: IFTRUE 66848
66846: GO 67049
66848: POP
// case nation of nation_american :
66849: LD_VAR 0 5
66853: PUSH
66854: LD_INT 1
66856: DOUBLE
66857: EQUAL
66858: IFTRUE 66862
66860: GO 66918
66862: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66863: LD_ADDR_VAR 0 9
66867: PUSH
66868: LD_VAR 0 11
66872: PUSH
66873: LD_VAR 0 12
66877: PUSH
66878: LD_VAR 0 13
66882: PUSH
66883: LD_VAR 0 14
66887: PUSH
66888: LD_VAR 0 15
66892: PUSH
66893: LD_VAR 0 16
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: PUSH
66906: LD_VAR 0 4
66910: PUSH
66911: LD_INT 1
66913: PLUS
66914: ARRAY
66915: ST_TO_ADDR
66916: GO 67047
66918: LD_INT 2
66920: DOUBLE
66921: EQUAL
66922: IFTRUE 66926
66924: GO 66982
66926: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66927: LD_ADDR_VAR 0 9
66931: PUSH
66932: LD_VAR 0 17
66936: PUSH
66937: LD_VAR 0 18
66941: PUSH
66942: LD_VAR 0 19
66946: PUSH
66947: LD_VAR 0 20
66951: PUSH
66952: LD_VAR 0 21
66956: PUSH
66957: LD_VAR 0 22
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: PUSH
66970: LD_VAR 0 4
66974: PUSH
66975: LD_INT 1
66977: PLUS
66978: ARRAY
66979: ST_TO_ADDR
66980: GO 67047
66982: LD_INT 3
66984: DOUBLE
66985: EQUAL
66986: IFTRUE 66990
66988: GO 67046
66990: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66991: LD_ADDR_VAR 0 9
66995: PUSH
66996: LD_VAR 0 23
67000: PUSH
67001: LD_VAR 0 24
67005: PUSH
67006: LD_VAR 0 25
67010: PUSH
67011: LD_VAR 0 26
67015: PUSH
67016: LD_VAR 0 27
67020: PUSH
67021: LD_VAR 0 28
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: PUSH
67034: LD_VAR 0 4
67038: PUSH
67039: LD_INT 1
67041: PLUS
67042: ARRAY
67043: ST_TO_ADDR
67044: GO 67047
67046: POP
67047: GO 67602
67049: LD_INT 2
67051: DOUBLE
67052: EQUAL
67053: IFTRUE 67063
67055: LD_INT 3
67057: DOUBLE
67058: EQUAL
67059: IFTRUE 67063
67061: GO 67119
67063: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67064: LD_ADDR_VAR 0 9
67068: PUSH
67069: LD_VAR 0 29
67073: PUSH
67074: LD_VAR 0 30
67078: PUSH
67079: LD_VAR 0 31
67083: PUSH
67084: LD_VAR 0 32
67088: PUSH
67089: LD_VAR 0 33
67093: PUSH
67094: LD_VAR 0 34
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: PUSH
67107: LD_VAR 0 4
67111: PUSH
67112: LD_INT 1
67114: PLUS
67115: ARRAY
67116: ST_TO_ADDR
67117: GO 67602
67119: LD_INT 16
67121: DOUBLE
67122: EQUAL
67123: IFTRUE 67181
67125: LD_INT 17
67127: DOUBLE
67128: EQUAL
67129: IFTRUE 67181
67131: LD_INT 18
67133: DOUBLE
67134: EQUAL
67135: IFTRUE 67181
67137: LD_INT 19
67139: DOUBLE
67140: EQUAL
67141: IFTRUE 67181
67143: LD_INT 22
67145: DOUBLE
67146: EQUAL
67147: IFTRUE 67181
67149: LD_INT 20
67151: DOUBLE
67152: EQUAL
67153: IFTRUE 67181
67155: LD_INT 21
67157: DOUBLE
67158: EQUAL
67159: IFTRUE 67181
67161: LD_INT 23
67163: DOUBLE
67164: EQUAL
67165: IFTRUE 67181
67167: LD_INT 24
67169: DOUBLE
67170: EQUAL
67171: IFTRUE 67181
67173: LD_INT 25
67175: DOUBLE
67176: EQUAL
67177: IFTRUE 67181
67179: GO 67237
67181: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67182: LD_ADDR_VAR 0 9
67186: PUSH
67187: LD_VAR 0 35
67191: PUSH
67192: LD_VAR 0 36
67196: PUSH
67197: LD_VAR 0 37
67201: PUSH
67202: LD_VAR 0 38
67206: PUSH
67207: LD_VAR 0 39
67211: PUSH
67212: LD_VAR 0 40
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: PUSH
67225: LD_VAR 0 4
67229: PUSH
67230: LD_INT 1
67232: PLUS
67233: ARRAY
67234: ST_TO_ADDR
67235: GO 67602
67237: LD_INT 6
67239: DOUBLE
67240: EQUAL
67241: IFTRUE 67293
67243: LD_INT 7
67245: DOUBLE
67246: EQUAL
67247: IFTRUE 67293
67249: LD_INT 8
67251: DOUBLE
67252: EQUAL
67253: IFTRUE 67293
67255: LD_INT 13
67257: DOUBLE
67258: EQUAL
67259: IFTRUE 67293
67261: LD_INT 12
67263: DOUBLE
67264: EQUAL
67265: IFTRUE 67293
67267: LD_INT 15
67269: DOUBLE
67270: EQUAL
67271: IFTRUE 67293
67273: LD_INT 11
67275: DOUBLE
67276: EQUAL
67277: IFTRUE 67293
67279: LD_INT 14
67281: DOUBLE
67282: EQUAL
67283: IFTRUE 67293
67285: LD_INT 10
67287: DOUBLE
67288: EQUAL
67289: IFTRUE 67293
67291: GO 67349
67293: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67294: LD_ADDR_VAR 0 9
67298: PUSH
67299: LD_VAR 0 41
67303: PUSH
67304: LD_VAR 0 42
67308: PUSH
67309: LD_VAR 0 43
67313: PUSH
67314: LD_VAR 0 44
67318: PUSH
67319: LD_VAR 0 45
67323: PUSH
67324: LD_VAR 0 46
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: PUSH
67337: LD_VAR 0 4
67341: PUSH
67342: LD_INT 1
67344: PLUS
67345: ARRAY
67346: ST_TO_ADDR
67347: GO 67602
67349: LD_INT 36
67351: DOUBLE
67352: EQUAL
67353: IFTRUE 67357
67355: GO 67413
67357: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67358: LD_ADDR_VAR 0 9
67362: PUSH
67363: LD_VAR 0 47
67367: PUSH
67368: LD_VAR 0 48
67372: PUSH
67373: LD_VAR 0 49
67377: PUSH
67378: LD_VAR 0 50
67382: PUSH
67383: LD_VAR 0 51
67387: PUSH
67388: LD_VAR 0 52
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: PUSH
67401: LD_VAR 0 4
67405: PUSH
67406: LD_INT 1
67408: PLUS
67409: ARRAY
67410: ST_TO_ADDR
67411: GO 67602
67413: LD_INT 4
67415: DOUBLE
67416: EQUAL
67417: IFTRUE 67439
67419: LD_INT 5
67421: DOUBLE
67422: EQUAL
67423: IFTRUE 67439
67425: LD_INT 34
67427: DOUBLE
67428: EQUAL
67429: IFTRUE 67439
67431: LD_INT 37
67433: DOUBLE
67434: EQUAL
67435: IFTRUE 67439
67437: GO 67495
67439: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67440: LD_ADDR_VAR 0 9
67444: PUSH
67445: LD_VAR 0 53
67449: PUSH
67450: LD_VAR 0 54
67454: PUSH
67455: LD_VAR 0 55
67459: PUSH
67460: LD_VAR 0 56
67464: PUSH
67465: LD_VAR 0 57
67469: PUSH
67470: LD_VAR 0 58
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: PUSH
67483: LD_VAR 0 4
67487: PUSH
67488: LD_INT 1
67490: PLUS
67491: ARRAY
67492: ST_TO_ADDR
67493: GO 67602
67495: LD_INT 31
67497: DOUBLE
67498: EQUAL
67499: IFTRUE 67545
67501: LD_INT 32
67503: DOUBLE
67504: EQUAL
67505: IFTRUE 67545
67507: LD_INT 33
67509: DOUBLE
67510: EQUAL
67511: IFTRUE 67545
67513: LD_INT 27
67515: DOUBLE
67516: EQUAL
67517: IFTRUE 67545
67519: LD_INT 26
67521: DOUBLE
67522: EQUAL
67523: IFTRUE 67545
67525: LD_INT 28
67527: DOUBLE
67528: EQUAL
67529: IFTRUE 67545
67531: LD_INT 29
67533: DOUBLE
67534: EQUAL
67535: IFTRUE 67545
67537: LD_INT 30
67539: DOUBLE
67540: EQUAL
67541: IFTRUE 67545
67543: GO 67601
67545: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67546: LD_ADDR_VAR 0 9
67550: PUSH
67551: LD_VAR 0 59
67555: PUSH
67556: LD_VAR 0 60
67560: PUSH
67561: LD_VAR 0 61
67565: PUSH
67566: LD_VAR 0 62
67570: PUSH
67571: LD_VAR 0 63
67575: PUSH
67576: LD_VAR 0 64
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: PUSH
67589: LD_VAR 0 4
67593: PUSH
67594: LD_INT 1
67596: PLUS
67597: ARRAY
67598: ST_TO_ADDR
67599: GO 67602
67601: POP
// temp_list2 = [ ] ;
67602: LD_ADDR_VAR 0 10
67606: PUSH
67607: EMPTY
67608: ST_TO_ADDR
// for i in temp_list do
67609: LD_ADDR_VAR 0 8
67613: PUSH
67614: LD_VAR 0 9
67618: PUSH
67619: FOR_IN
67620: IFFALSE 67672
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67622: LD_ADDR_VAR 0 10
67626: PUSH
67627: LD_VAR 0 10
67631: PUSH
67632: LD_VAR 0 8
67636: PUSH
67637: LD_INT 1
67639: ARRAY
67640: PUSH
67641: LD_VAR 0 2
67645: PLUS
67646: PUSH
67647: LD_VAR 0 8
67651: PUSH
67652: LD_INT 2
67654: ARRAY
67655: PUSH
67656: LD_VAR 0 3
67660: PLUS
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: EMPTY
67667: LIST
67668: ADD
67669: ST_TO_ADDR
67670: GO 67619
67672: POP
67673: POP
// result = temp_list2 ;
67674: LD_ADDR_VAR 0 7
67678: PUSH
67679: LD_VAR 0 10
67683: ST_TO_ADDR
// end ;
67684: LD_VAR 0 7
67688: RET
// export function EnemyInRange ( unit , dist ) ; begin
67689: LD_INT 0
67691: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67692: LD_ADDR_VAR 0 3
67696: PUSH
67697: LD_VAR 0 1
67701: PPUSH
67702: CALL_OW 255
67706: PPUSH
67707: LD_VAR 0 1
67711: PPUSH
67712: CALL_OW 250
67716: PPUSH
67717: LD_VAR 0 1
67721: PPUSH
67722: CALL_OW 251
67726: PPUSH
67727: LD_VAR 0 2
67731: PPUSH
67732: CALL 41091 0 4
67736: PUSH
67737: LD_INT 4
67739: ARRAY
67740: ST_TO_ADDR
// end ;
67741: LD_VAR 0 3
67745: RET
// export function PlayerSeeMe ( unit ) ; begin
67746: LD_INT 0
67748: PPUSH
// result := See ( your_side , unit ) ;
67749: LD_ADDR_VAR 0 2
67753: PUSH
67754: LD_OWVAR 2
67758: PPUSH
67759: LD_VAR 0 1
67763: PPUSH
67764: CALL_OW 292
67768: ST_TO_ADDR
// end ;
67769: LD_VAR 0 2
67773: RET
// export function ReverseDir ( unit ) ; begin
67774: LD_INT 0
67776: PPUSH
// if not unit then
67777: LD_VAR 0 1
67781: NOT
67782: IFFALSE 67786
// exit ;
67784: GO 67809
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67786: LD_ADDR_VAR 0 2
67790: PUSH
67791: LD_VAR 0 1
67795: PPUSH
67796: CALL_OW 254
67800: PUSH
67801: LD_INT 3
67803: PLUS
67804: PUSH
67805: LD_INT 6
67807: MOD
67808: ST_TO_ADDR
// end ;
67809: LD_VAR 0 2
67813: RET
// export function ReverseArray ( array ) ; var i ; begin
67814: LD_INT 0
67816: PPUSH
67817: PPUSH
// if not array then
67818: LD_VAR 0 1
67822: NOT
67823: IFFALSE 67827
// exit ;
67825: GO 67882
// result := [ ] ;
67827: LD_ADDR_VAR 0 2
67831: PUSH
67832: EMPTY
67833: ST_TO_ADDR
// for i := array downto 1 do
67834: LD_ADDR_VAR 0 3
67838: PUSH
67839: DOUBLE
67840: LD_VAR 0 1
67844: INC
67845: ST_TO_ADDR
67846: LD_INT 1
67848: PUSH
67849: FOR_DOWNTO
67850: IFFALSE 67880
// result := Join ( result , array [ i ] ) ;
67852: LD_ADDR_VAR 0 2
67856: PUSH
67857: LD_VAR 0 2
67861: PPUSH
67862: LD_VAR 0 1
67866: PUSH
67867: LD_VAR 0 3
67871: ARRAY
67872: PPUSH
67873: CALL 72526 0 2
67877: ST_TO_ADDR
67878: GO 67849
67880: POP
67881: POP
// end ;
67882: LD_VAR 0 2
67886: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67887: LD_INT 0
67889: PPUSH
67890: PPUSH
67891: PPUSH
67892: PPUSH
67893: PPUSH
67894: PPUSH
// if not unit or not hexes then
67895: LD_VAR 0 1
67899: NOT
67900: PUSH
67901: LD_VAR 0 2
67905: NOT
67906: OR
67907: IFFALSE 67911
// exit ;
67909: GO 68034
// dist := 9999 ;
67911: LD_ADDR_VAR 0 5
67915: PUSH
67916: LD_INT 9999
67918: ST_TO_ADDR
// for i = 1 to hexes do
67919: LD_ADDR_VAR 0 4
67923: PUSH
67924: DOUBLE
67925: LD_INT 1
67927: DEC
67928: ST_TO_ADDR
67929: LD_VAR 0 2
67933: PUSH
67934: FOR_TO
67935: IFFALSE 68022
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67937: LD_ADDR_VAR 0 6
67941: PUSH
67942: LD_VAR 0 1
67946: PPUSH
67947: LD_VAR 0 2
67951: PUSH
67952: LD_VAR 0 4
67956: ARRAY
67957: PUSH
67958: LD_INT 1
67960: ARRAY
67961: PPUSH
67962: LD_VAR 0 2
67966: PUSH
67967: LD_VAR 0 4
67971: ARRAY
67972: PUSH
67973: LD_INT 2
67975: ARRAY
67976: PPUSH
67977: CALL_OW 297
67981: ST_TO_ADDR
// if tdist < dist then
67982: LD_VAR 0 6
67986: PUSH
67987: LD_VAR 0 5
67991: LESS
67992: IFFALSE 68020
// begin hex := hexes [ i ] ;
67994: LD_ADDR_VAR 0 8
67998: PUSH
67999: LD_VAR 0 2
68003: PUSH
68004: LD_VAR 0 4
68008: ARRAY
68009: ST_TO_ADDR
// dist := tdist ;
68010: LD_ADDR_VAR 0 5
68014: PUSH
68015: LD_VAR 0 6
68019: ST_TO_ADDR
// end ; end ;
68020: GO 67934
68022: POP
68023: POP
// result := hex ;
68024: LD_ADDR_VAR 0 3
68028: PUSH
68029: LD_VAR 0 8
68033: ST_TO_ADDR
// end ;
68034: LD_VAR 0 3
68038: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68043: LD_VAR 0 1
68047: NOT
68048: PUSH
68049: LD_VAR 0 1
68053: PUSH
68054: LD_INT 21
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 23
68066: PUSH
68067: LD_INT 2
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PPUSH
68078: CALL_OW 69
68082: IN
68083: NOT
68084: OR
68085: IFFALSE 68089
// exit ;
68087: GO 68136
// for i = 1 to 3 do
68089: LD_ADDR_VAR 0 3
68093: PUSH
68094: DOUBLE
68095: LD_INT 1
68097: DEC
68098: ST_TO_ADDR
68099: LD_INT 3
68101: PUSH
68102: FOR_TO
68103: IFFALSE 68134
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68105: LD_VAR 0 1
68109: PPUSH
68110: CALL_OW 250
68114: PPUSH
68115: LD_VAR 0 1
68119: PPUSH
68120: CALL_OW 251
68124: PPUSH
68125: LD_INT 1
68127: PPUSH
68128: CALL_OW 453
68132: GO 68102
68134: POP
68135: POP
// end ;
68136: LD_VAR 0 2
68140: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68141: LD_INT 0
68143: PPUSH
68144: PPUSH
68145: PPUSH
68146: PPUSH
68147: PPUSH
68148: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68149: LD_VAR 0 1
68153: NOT
68154: PUSH
68155: LD_VAR 0 2
68159: NOT
68160: OR
68161: PUSH
68162: LD_VAR 0 1
68166: PPUSH
68167: CALL_OW 314
68171: OR
68172: IFFALSE 68176
// exit ;
68174: GO 68643
// if GetLives ( i ) < 250 then
68176: LD_VAR 0 4
68180: PPUSH
68181: CALL_OW 256
68185: PUSH
68186: LD_INT 250
68188: LESS
68189: IFFALSE 68202
// begin ComAutodestruct ( i ) ;
68191: LD_VAR 0 4
68195: PPUSH
68196: CALL 68039 0 1
// exit ;
68200: GO 68643
// end ; x := GetX ( enemy_unit ) ;
68202: LD_ADDR_VAR 0 7
68206: PUSH
68207: LD_VAR 0 2
68211: PPUSH
68212: CALL_OW 250
68216: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68217: LD_ADDR_VAR 0 8
68221: PUSH
68222: LD_VAR 0 2
68226: PPUSH
68227: CALL_OW 251
68231: ST_TO_ADDR
// if not x or not y then
68232: LD_VAR 0 7
68236: NOT
68237: PUSH
68238: LD_VAR 0 8
68242: NOT
68243: OR
68244: IFFALSE 68248
// exit ;
68246: GO 68643
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68248: LD_ADDR_VAR 0 6
68252: PUSH
68253: LD_VAR 0 7
68257: PPUSH
68258: LD_INT 0
68260: PPUSH
68261: LD_INT 4
68263: PPUSH
68264: CALL_OW 272
68268: PUSH
68269: LD_VAR 0 8
68273: PPUSH
68274: LD_INT 0
68276: PPUSH
68277: LD_INT 4
68279: PPUSH
68280: CALL_OW 273
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_VAR 0 7
68293: PPUSH
68294: LD_INT 1
68296: PPUSH
68297: LD_INT 4
68299: PPUSH
68300: CALL_OW 272
68304: PUSH
68305: LD_VAR 0 8
68309: PPUSH
68310: LD_INT 1
68312: PPUSH
68313: LD_INT 4
68315: PPUSH
68316: CALL_OW 273
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_VAR 0 7
68329: PPUSH
68330: LD_INT 2
68332: PPUSH
68333: LD_INT 4
68335: PPUSH
68336: CALL_OW 272
68340: PUSH
68341: LD_VAR 0 8
68345: PPUSH
68346: LD_INT 2
68348: PPUSH
68349: LD_INT 4
68351: PPUSH
68352: CALL_OW 273
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_VAR 0 7
68365: PPUSH
68366: LD_INT 3
68368: PPUSH
68369: LD_INT 4
68371: PPUSH
68372: CALL_OW 272
68376: PUSH
68377: LD_VAR 0 8
68381: PPUSH
68382: LD_INT 3
68384: PPUSH
68385: LD_INT 4
68387: PPUSH
68388: CALL_OW 273
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_VAR 0 7
68401: PPUSH
68402: LD_INT 4
68404: PPUSH
68405: LD_INT 4
68407: PPUSH
68408: CALL_OW 272
68412: PUSH
68413: LD_VAR 0 8
68417: PPUSH
68418: LD_INT 4
68420: PPUSH
68421: LD_INT 4
68423: PPUSH
68424: CALL_OW 273
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_VAR 0 7
68437: PPUSH
68438: LD_INT 5
68440: PPUSH
68441: LD_INT 4
68443: PPUSH
68444: CALL_OW 272
68448: PUSH
68449: LD_VAR 0 8
68453: PPUSH
68454: LD_INT 5
68456: PPUSH
68457: LD_INT 4
68459: PPUSH
68460: CALL_OW 273
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: ST_TO_ADDR
// for i = tmp downto 1 do
68477: LD_ADDR_VAR 0 4
68481: PUSH
68482: DOUBLE
68483: LD_VAR 0 6
68487: INC
68488: ST_TO_ADDR
68489: LD_INT 1
68491: PUSH
68492: FOR_DOWNTO
68493: IFFALSE 68594
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68495: LD_VAR 0 6
68499: PUSH
68500: LD_VAR 0 4
68504: ARRAY
68505: PUSH
68506: LD_INT 1
68508: ARRAY
68509: PPUSH
68510: LD_VAR 0 6
68514: PUSH
68515: LD_VAR 0 4
68519: ARRAY
68520: PUSH
68521: LD_INT 2
68523: ARRAY
68524: PPUSH
68525: CALL_OW 488
68529: NOT
68530: PUSH
68531: LD_VAR 0 6
68535: PUSH
68536: LD_VAR 0 4
68540: ARRAY
68541: PUSH
68542: LD_INT 1
68544: ARRAY
68545: PPUSH
68546: LD_VAR 0 6
68550: PUSH
68551: LD_VAR 0 4
68555: ARRAY
68556: PUSH
68557: LD_INT 2
68559: ARRAY
68560: PPUSH
68561: CALL_OW 428
68565: PUSH
68566: LD_INT 0
68568: NONEQUAL
68569: OR
68570: IFFALSE 68592
// tmp := Delete ( tmp , i ) ;
68572: LD_ADDR_VAR 0 6
68576: PUSH
68577: LD_VAR 0 6
68581: PPUSH
68582: LD_VAR 0 4
68586: PPUSH
68587: CALL_OW 3
68591: ST_TO_ADDR
68592: GO 68492
68594: POP
68595: POP
// j := GetClosestHex ( unit , tmp ) ;
68596: LD_ADDR_VAR 0 5
68600: PUSH
68601: LD_VAR 0 1
68605: PPUSH
68606: LD_VAR 0 6
68610: PPUSH
68611: CALL 67887 0 2
68615: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68616: LD_VAR 0 1
68620: PPUSH
68621: LD_VAR 0 5
68625: PUSH
68626: LD_INT 1
68628: ARRAY
68629: PPUSH
68630: LD_VAR 0 5
68634: PUSH
68635: LD_INT 2
68637: ARRAY
68638: PPUSH
68639: CALL_OW 111
// end ;
68643: LD_VAR 0 3
68647: RET
// export function PrepareApemanSoldier ( ) ; begin
68648: LD_INT 0
68650: PPUSH
// uc_nation := 0 ;
68651: LD_ADDR_OWVAR 21
68655: PUSH
68656: LD_INT 0
68658: ST_TO_ADDR
// hc_sex := sex_male ;
68659: LD_ADDR_OWVAR 27
68663: PUSH
68664: LD_INT 1
68666: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68667: LD_ADDR_OWVAR 28
68671: PUSH
68672: LD_INT 15
68674: ST_TO_ADDR
// hc_gallery :=  ;
68675: LD_ADDR_OWVAR 33
68679: PUSH
68680: LD_STRING 
68682: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68683: LD_ADDR_OWVAR 31
68687: PUSH
68688: LD_INT 0
68690: PPUSH
68691: LD_INT 3
68693: PPUSH
68694: CALL_OW 12
68698: PUSH
68699: LD_INT 0
68701: PPUSH
68702: LD_INT 3
68704: PPUSH
68705: CALL_OW 12
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: ST_TO_ADDR
// end ;
68722: LD_VAR 0 1
68726: RET
// export function PrepareApemanEngineer ( ) ; begin
68727: LD_INT 0
68729: PPUSH
// uc_nation := 0 ;
68730: LD_ADDR_OWVAR 21
68734: PUSH
68735: LD_INT 0
68737: ST_TO_ADDR
// hc_sex := sex_male ;
68738: LD_ADDR_OWVAR 27
68742: PUSH
68743: LD_INT 1
68745: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68746: LD_ADDR_OWVAR 28
68750: PUSH
68751: LD_INT 16
68753: ST_TO_ADDR
// hc_gallery :=  ;
68754: LD_ADDR_OWVAR 33
68758: PUSH
68759: LD_STRING 
68761: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68762: LD_ADDR_OWVAR 31
68766: PUSH
68767: LD_INT 0
68769: PPUSH
68770: LD_INT 3
68772: PPUSH
68773: CALL_OW 12
68777: PUSH
68778: LD_INT 0
68780: PPUSH
68781: LD_INT 3
68783: PPUSH
68784: CALL_OW 12
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: ST_TO_ADDR
// end ;
68801: LD_VAR 0 1
68805: RET
// export function PrepareApeman ( agressivity ) ; begin
68806: LD_INT 0
68808: PPUSH
// uc_side := 0 ;
68809: LD_ADDR_OWVAR 20
68813: PUSH
68814: LD_INT 0
68816: ST_TO_ADDR
// uc_nation := 0 ;
68817: LD_ADDR_OWVAR 21
68821: PUSH
68822: LD_INT 0
68824: ST_TO_ADDR
// hc_sex := sex_male ;
68825: LD_ADDR_OWVAR 27
68829: PUSH
68830: LD_INT 1
68832: ST_TO_ADDR
// hc_class := class_apeman ;
68833: LD_ADDR_OWVAR 28
68837: PUSH
68838: LD_INT 12
68840: ST_TO_ADDR
// hc_gallery :=  ;
68841: LD_ADDR_OWVAR 33
68845: PUSH
68846: LD_STRING 
68848: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68849: LD_ADDR_OWVAR 35
68853: PUSH
68854: LD_VAR 0 1
68858: NEG
68859: PPUSH
68860: LD_VAR 0 1
68864: PPUSH
68865: CALL_OW 12
68869: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68870: LD_ADDR_OWVAR 31
68874: PUSH
68875: LD_INT 0
68877: PPUSH
68878: LD_INT 3
68880: PPUSH
68881: CALL_OW 12
68885: PUSH
68886: LD_INT 0
68888: PPUSH
68889: LD_INT 3
68891: PPUSH
68892: CALL_OW 12
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: ST_TO_ADDR
// end ;
68909: LD_VAR 0 2
68913: RET
// export function PrepareTiger ( agressivity ) ; begin
68914: LD_INT 0
68916: PPUSH
// uc_side := 0 ;
68917: LD_ADDR_OWVAR 20
68921: PUSH
68922: LD_INT 0
68924: ST_TO_ADDR
// uc_nation := 0 ;
68925: LD_ADDR_OWVAR 21
68929: PUSH
68930: LD_INT 0
68932: ST_TO_ADDR
// hc_class := class_tiger ;
68933: LD_ADDR_OWVAR 28
68937: PUSH
68938: LD_INT 14
68940: ST_TO_ADDR
// hc_gallery :=  ;
68941: LD_ADDR_OWVAR 33
68945: PUSH
68946: LD_STRING 
68948: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68949: LD_ADDR_OWVAR 35
68953: PUSH
68954: LD_VAR 0 1
68958: NEG
68959: PPUSH
68960: LD_VAR 0 1
68964: PPUSH
68965: CALL_OW 12
68969: ST_TO_ADDR
// end ;
68970: LD_VAR 0 2
68974: RET
// export function PrepareEnchidna ( ) ; begin
68975: LD_INT 0
68977: PPUSH
// uc_side := 0 ;
68978: LD_ADDR_OWVAR 20
68982: PUSH
68983: LD_INT 0
68985: ST_TO_ADDR
// uc_nation := 0 ;
68986: LD_ADDR_OWVAR 21
68990: PUSH
68991: LD_INT 0
68993: ST_TO_ADDR
// hc_class := class_baggie ;
68994: LD_ADDR_OWVAR 28
68998: PUSH
68999: LD_INT 13
69001: ST_TO_ADDR
// hc_gallery :=  ;
69002: LD_ADDR_OWVAR 33
69006: PUSH
69007: LD_STRING 
69009: ST_TO_ADDR
// end ;
69010: LD_VAR 0 1
69014: RET
// export function PrepareFrog ( ) ; begin
69015: LD_INT 0
69017: PPUSH
// uc_side := 0 ;
69018: LD_ADDR_OWVAR 20
69022: PUSH
69023: LD_INT 0
69025: ST_TO_ADDR
// uc_nation := 0 ;
69026: LD_ADDR_OWVAR 21
69030: PUSH
69031: LD_INT 0
69033: ST_TO_ADDR
// hc_class := class_frog ;
69034: LD_ADDR_OWVAR 28
69038: PUSH
69039: LD_INT 19
69041: ST_TO_ADDR
// hc_gallery :=  ;
69042: LD_ADDR_OWVAR 33
69046: PUSH
69047: LD_STRING 
69049: ST_TO_ADDR
// end ;
69050: LD_VAR 0 1
69054: RET
// export function PrepareFish ( ) ; begin
69055: LD_INT 0
69057: PPUSH
// uc_side := 0 ;
69058: LD_ADDR_OWVAR 20
69062: PUSH
69063: LD_INT 0
69065: ST_TO_ADDR
// uc_nation := 0 ;
69066: LD_ADDR_OWVAR 21
69070: PUSH
69071: LD_INT 0
69073: ST_TO_ADDR
// hc_class := class_fish ;
69074: LD_ADDR_OWVAR 28
69078: PUSH
69079: LD_INT 20
69081: ST_TO_ADDR
// hc_gallery :=  ;
69082: LD_ADDR_OWVAR 33
69086: PUSH
69087: LD_STRING 
69089: ST_TO_ADDR
// end ;
69090: LD_VAR 0 1
69094: RET
// export function PrepareBird ( ) ; begin
69095: LD_INT 0
69097: PPUSH
// uc_side := 0 ;
69098: LD_ADDR_OWVAR 20
69102: PUSH
69103: LD_INT 0
69105: ST_TO_ADDR
// uc_nation := 0 ;
69106: LD_ADDR_OWVAR 21
69110: PUSH
69111: LD_INT 0
69113: ST_TO_ADDR
// hc_class := class_phororhacos ;
69114: LD_ADDR_OWVAR 28
69118: PUSH
69119: LD_INT 18
69121: ST_TO_ADDR
// hc_gallery :=  ;
69122: LD_ADDR_OWVAR 33
69126: PUSH
69127: LD_STRING 
69129: ST_TO_ADDR
// end ;
69130: LD_VAR 0 1
69134: RET
// export function PrepareHorse ( ) ; begin
69135: LD_INT 0
69137: PPUSH
// uc_side := 0 ;
69138: LD_ADDR_OWVAR 20
69142: PUSH
69143: LD_INT 0
69145: ST_TO_ADDR
// uc_nation := 0 ;
69146: LD_ADDR_OWVAR 21
69150: PUSH
69151: LD_INT 0
69153: ST_TO_ADDR
// hc_class := class_horse ;
69154: LD_ADDR_OWVAR 28
69158: PUSH
69159: LD_INT 21
69161: ST_TO_ADDR
// hc_gallery :=  ;
69162: LD_ADDR_OWVAR 33
69166: PUSH
69167: LD_STRING 
69169: ST_TO_ADDR
// end ;
69170: LD_VAR 0 1
69174: RET
// export function PrepareMastodont ( ) ; begin
69175: LD_INT 0
69177: PPUSH
// uc_side := 0 ;
69178: LD_ADDR_OWVAR 20
69182: PUSH
69183: LD_INT 0
69185: ST_TO_ADDR
// uc_nation := 0 ;
69186: LD_ADDR_OWVAR 21
69190: PUSH
69191: LD_INT 0
69193: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69194: LD_ADDR_OWVAR 37
69198: PUSH
69199: LD_INT 31
69201: ST_TO_ADDR
// vc_control := control_rider ;
69202: LD_ADDR_OWVAR 38
69206: PUSH
69207: LD_INT 4
69209: ST_TO_ADDR
// end ;
69210: LD_VAR 0 1
69214: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69215: LD_INT 0
69217: PPUSH
69218: PPUSH
69219: PPUSH
// uc_side = 0 ;
69220: LD_ADDR_OWVAR 20
69224: PUSH
69225: LD_INT 0
69227: ST_TO_ADDR
// uc_nation = 0 ;
69228: LD_ADDR_OWVAR 21
69232: PUSH
69233: LD_INT 0
69235: ST_TO_ADDR
// InitHc_All ( ) ;
69236: CALL_OW 584
// InitVc ;
69240: CALL_OW 20
// if mastodonts then
69244: LD_VAR 0 6
69248: IFFALSE 69315
// for i = 1 to mastodonts do
69250: LD_ADDR_VAR 0 11
69254: PUSH
69255: DOUBLE
69256: LD_INT 1
69258: DEC
69259: ST_TO_ADDR
69260: LD_VAR 0 6
69264: PUSH
69265: FOR_TO
69266: IFFALSE 69313
// begin vc_chassis := 31 ;
69268: LD_ADDR_OWVAR 37
69272: PUSH
69273: LD_INT 31
69275: ST_TO_ADDR
// vc_control := control_rider ;
69276: LD_ADDR_OWVAR 38
69280: PUSH
69281: LD_INT 4
69283: ST_TO_ADDR
// animal := CreateVehicle ;
69284: LD_ADDR_VAR 0 12
69288: PUSH
69289: CALL_OW 45
69293: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69294: LD_VAR 0 12
69298: PPUSH
69299: LD_VAR 0 8
69303: PPUSH
69304: LD_INT 0
69306: PPUSH
69307: CALL 71443 0 3
// end ;
69311: GO 69265
69313: POP
69314: POP
// if horses then
69315: LD_VAR 0 5
69319: IFFALSE 69386
// for i = 1 to horses do
69321: LD_ADDR_VAR 0 11
69325: PUSH
69326: DOUBLE
69327: LD_INT 1
69329: DEC
69330: ST_TO_ADDR
69331: LD_VAR 0 5
69335: PUSH
69336: FOR_TO
69337: IFFALSE 69384
// begin hc_class := 21 ;
69339: LD_ADDR_OWVAR 28
69343: PUSH
69344: LD_INT 21
69346: ST_TO_ADDR
// hc_gallery :=  ;
69347: LD_ADDR_OWVAR 33
69351: PUSH
69352: LD_STRING 
69354: ST_TO_ADDR
// animal := CreateHuman ;
69355: LD_ADDR_VAR 0 12
69359: PUSH
69360: CALL_OW 44
69364: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69365: LD_VAR 0 12
69369: PPUSH
69370: LD_VAR 0 8
69374: PPUSH
69375: LD_INT 0
69377: PPUSH
69378: CALL 71443 0 3
// end ;
69382: GO 69336
69384: POP
69385: POP
// if birds then
69386: LD_VAR 0 1
69390: IFFALSE 69457
// for i = 1 to birds do
69392: LD_ADDR_VAR 0 11
69396: PUSH
69397: DOUBLE
69398: LD_INT 1
69400: DEC
69401: ST_TO_ADDR
69402: LD_VAR 0 1
69406: PUSH
69407: FOR_TO
69408: IFFALSE 69455
// begin hc_class = 18 ;
69410: LD_ADDR_OWVAR 28
69414: PUSH
69415: LD_INT 18
69417: ST_TO_ADDR
// hc_gallery =  ;
69418: LD_ADDR_OWVAR 33
69422: PUSH
69423: LD_STRING 
69425: ST_TO_ADDR
// animal := CreateHuman ;
69426: LD_ADDR_VAR 0 12
69430: PUSH
69431: CALL_OW 44
69435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69436: LD_VAR 0 12
69440: PPUSH
69441: LD_VAR 0 8
69445: PPUSH
69446: LD_INT 0
69448: PPUSH
69449: CALL 71443 0 3
// end ;
69453: GO 69407
69455: POP
69456: POP
// if tigers then
69457: LD_VAR 0 2
69461: IFFALSE 69545
// for i = 1 to tigers do
69463: LD_ADDR_VAR 0 11
69467: PUSH
69468: DOUBLE
69469: LD_INT 1
69471: DEC
69472: ST_TO_ADDR
69473: LD_VAR 0 2
69477: PUSH
69478: FOR_TO
69479: IFFALSE 69543
// begin hc_class = class_tiger ;
69481: LD_ADDR_OWVAR 28
69485: PUSH
69486: LD_INT 14
69488: ST_TO_ADDR
// hc_gallery =  ;
69489: LD_ADDR_OWVAR 33
69493: PUSH
69494: LD_STRING 
69496: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69497: LD_ADDR_OWVAR 35
69501: PUSH
69502: LD_INT 7
69504: NEG
69505: PPUSH
69506: LD_INT 7
69508: PPUSH
69509: CALL_OW 12
69513: ST_TO_ADDR
// animal := CreateHuman ;
69514: LD_ADDR_VAR 0 12
69518: PUSH
69519: CALL_OW 44
69523: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69524: LD_VAR 0 12
69528: PPUSH
69529: LD_VAR 0 8
69533: PPUSH
69534: LD_INT 0
69536: PPUSH
69537: CALL 71443 0 3
// end ;
69541: GO 69478
69543: POP
69544: POP
// if apemans then
69545: LD_VAR 0 3
69549: IFFALSE 69672
// for i = 1 to apemans do
69551: LD_ADDR_VAR 0 11
69555: PUSH
69556: DOUBLE
69557: LD_INT 1
69559: DEC
69560: ST_TO_ADDR
69561: LD_VAR 0 3
69565: PUSH
69566: FOR_TO
69567: IFFALSE 69670
// begin hc_class = class_apeman ;
69569: LD_ADDR_OWVAR 28
69573: PUSH
69574: LD_INT 12
69576: ST_TO_ADDR
// hc_gallery =  ;
69577: LD_ADDR_OWVAR 33
69581: PUSH
69582: LD_STRING 
69584: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69585: LD_ADDR_OWVAR 35
69589: PUSH
69590: LD_INT 2
69592: NEG
69593: PPUSH
69594: LD_INT 2
69596: PPUSH
69597: CALL_OW 12
69601: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69602: LD_ADDR_OWVAR 31
69606: PUSH
69607: LD_INT 1
69609: PPUSH
69610: LD_INT 3
69612: PPUSH
69613: CALL_OW 12
69617: PUSH
69618: LD_INT 1
69620: PPUSH
69621: LD_INT 3
69623: PPUSH
69624: CALL_OW 12
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: ST_TO_ADDR
// animal := CreateHuman ;
69641: LD_ADDR_VAR 0 12
69645: PUSH
69646: CALL_OW 44
69650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69651: LD_VAR 0 12
69655: PPUSH
69656: LD_VAR 0 8
69660: PPUSH
69661: LD_INT 0
69663: PPUSH
69664: CALL 71443 0 3
// end ;
69668: GO 69566
69670: POP
69671: POP
// if enchidnas then
69672: LD_VAR 0 4
69676: IFFALSE 69743
// for i = 1 to enchidnas do
69678: LD_ADDR_VAR 0 11
69682: PUSH
69683: DOUBLE
69684: LD_INT 1
69686: DEC
69687: ST_TO_ADDR
69688: LD_VAR 0 4
69692: PUSH
69693: FOR_TO
69694: IFFALSE 69741
// begin hc_class = 13 ;
69696: LD_ADDR_OWVAR 28
69700: PUSH
69701: LD_INT 13
69703: ST_TO_ADDR
// hc_gallery =  ;
69704: LD_ADDR_OWVAR 33
69708: PUSH
69709: LD_STRING 
69711: ST_TO_ADDR
// animal := CreateHuman ;
69712: LD_ADDR_VAR 0 12
69716: PUSH
69717: CALL_OW 44
69721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69722: LD_VAR 0 12
69726: PPUSH
69727: LD_VAR 0 8
69731: PPUSH
69732: LD_INT 0
69734: PPUSH
69735: CALL 71443 0 3
// end ;
69739: GO 69693
69741: POP
69742: POP
// if fishes then
69743: LD_VAR 0 7
69747: IFFALSE 69814
// for i = 1 to fishes do
69749: LD_ADDR_VAR 0 11
69753: PUSH
69754: DOUBLE
69755: LD_INT 1
69757: DEC
69758: ST_TO_ADDR
69759: LD_VAR 0 7
69763: PUSH
69764: FOR_TO
69765: IFFALSE 69812
// begin hc_class = 20 ;
69767: LD_ADDR_OWVAR 28
69771: PUSH
69772: LD_INT 20
69774: ST_TO_ADDR
// hc_gallery =  ;
69775: LD_ADDR_OWVAR 33
69779: PUSH
69780: LD_STRING 
69782: ST_TO_ADDR
// animal := CreateHuman ;
69783: LD_ADDR_VAR 0 12
69787: PUSH
69788: CALL_OW 44
69792: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69793: LD_VAR 0 12
69797: PPUSH
69798: LD_VAR 0 9
69802: PPUSH
69803: LD_INT 0
69805: PPUSH
69806: CALL 71443 0 3
// end ;
69810: GO 69764
69812: POP
69813: POP
// end ;
69814: LD_VAR 0 10
69818: RET
// export function WantHeal ( sci , unit ) ; begin
69819: LD_INT 0
69821: PPUSH
// if GetTaskList ( sci ) > 0 then
69822: LD_VAR 0 1
69826: PPUSH
69827: CALL_OW 437
69831: PUSH
69832: LD_INT 0
69834: GREATER
69835: IFFALSE 69905
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69837: LD_VAR 0 1
69841: PPUSH
69842: CALL_OW 437
69846: PUSH
69847: LD_INT 1
69849: ARRAY
69850: PUSH
69851: LD_INT 1
69853: ARRAY
69854: PUSH
69855: LD_STRING l
69857: EQUAL
69858: PUSH
69859: LD_VAR 0 1
69863: PPUSH
69864: CALL_OW 437
69868: PUSH
69869: LD_INT 1
69871: ARRAY
69872: PUSH
69873: LD_INT 4
69875: ARRAY
69876: PUSH
69877: LD_VAR 0 2
69881: EQUAL
69882: AND
69883: IFFALSE 69895
// result := true else
69885: LD_ADDR_VAR 0 3
69889: PUSH
69890: LD_INT 1
69892: ST_TO_ADDR
69893: GO 69903
// result := false ;
69895: LD_ADDR_VAR 0 3
69899: PUSH
69900: LD_INT 0
69902: ST_TO_ADDR
// end else
69903: GO 69913
// result := false ;
69905: LD_ADDR_VAR 0 3
69909: PUSH
69910: LD_INT 0
69912: ST_TO_ADDR
// end ;
69913: LD_VAR 0 3
69917: RET
// export function HealTarget ( sci ) ; begin
69918: LD_INT 0
69920: PPUSH
// if not sci then
69921: LD_VAR 0 1
69925: NOT
69926: IFFALSE 69930
// exit ;
69928: GO 69995
// result := 0 ;
69930: LD_ADDR_VAR 0 2
69934: PUSH
69935: LD_INT 0
69937: ST_TO_ADDR
// if GetTaskList ( sci ) then
69938: LD_VAR 0 1
69942: PPUSH
69943: CALL_OW 437
69947: IFFALSE 69995
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69949: LD_VAR 0 1
69953: PPUSH
69954: CALL_OW 437
69958: PUSH
69959: LD_INT 1
69961: ARRAY
69962: PUSH
69963: LD_INT 1
69965: ARRAY
69966: PUSH
69967: LD_STRING l
69969: EQUAL
69970: IFFALSE 69995
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69972: LD_ADDR_VAR 0 2
69976: PUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: CALL_OW 437
69986: PUSH
69987: LD_INT 1
69989: ARRAY
69990: PUSH
69991: LD_INT 4
69993: ARRAY
69994: ST_TO_ADDR
// end ;
69995: LD_VAR 0 2
69999: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70000: LD_INT 0
70002: PPUSH
70003: PPUSH
70004: PPUSH
70005: PPUSH
// if not base_units then
70006: LD_VAR 0 1
70010: NOT
70011: IFFALSE 70015
// exit ;
70013: GO 70102
// result := false ;
70015: LD_ADDR_VAR 0 2
70019: PUSH
70020: LD_INT 0
70022: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70023: LD_ADDR_VAR 0 5
70027: PUSH
70028: LD_VAR 0 1
70032: PPUSH
70033: LD_INT 21
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PPUSH
70043: CALL_OW 72
70047: ST_TO_ADDR
// if not tmp then
70048: LD_VAR 0 5
70052: NOT
70053: IFFALSE 70057
// exit ;
70055: GO 70102
// for i in tmp do
70057: LD_ADDR_VAR 0 3
70061: PUSH
70062: LD_VAR 0 5
70066: PUSH
70067: FOR_IN
70068: IFFALSE 70100
// begin result := EnemyInRange ( i , 22 ) ;
70070: LD_ADDR_VAR 0 2
70074: PUSH
70075: LD_VAR 0 3
70079: PPUSH
70080: LD_INT 22
70082: PPUSH
70083: CALL 67689 0 2
70087: ST_TO_ADDR
// if result then
70088: LD_VAR 0 2
70092: IFFALSE 70098
// exit ;
70094: POP
70095: POP
70096: GO 70102
// end ;
70098: GO 70067
70100: POP
70101: POP
// end ;
70102: LD_VAR 0 2
70106: RET
// export function FilterByTag ( units , tag ) ; begin
70107: LD_INT 0
70109: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70110: LD_ADDR_VAR 0 3
70114: PUSH
70115: LD_VAR 0 1
70119: PPUSH
70120: LD_INT 120
70122: PUSH
70123: LD_VAR 0 2
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PPUSH
70132: CALL_OW 72
70136: ST_TO_ADDR
// end ;
70137: LD_VAR 0 3
70141: RET
// export function IsDriver ( un ) ; begin
70142: LD_INT 0
70144: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70145: LD_ADDR_VAR 0 2
70149: PUSH
70150: LD_VAR 0 1
70154: PUSH
70155: LD_INT 55
70157: PUSH
70158: EMPTY
70159: LIST
70160: PPUSH
70161: CALL_OW 69
70165: IN
70166: ST_TO_ADDR
// end ;
70167: LD_VAR 0 2
70171: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70172: LD_INT 0
70174: PPUSH
70175: PPUSH
// list := [ ] ;
70176: LD_ADDR_VAR 0 5
70180: PUSH
70181: EMPTY
70182: ST_TO_ADDR
// case d of 0 :
70183: LD_VAR 0 3
70187: PUSH
70188: LD_INT 0
70190: DOUBLE
70191: EQUAL
70192: IFTRUE 70196
70194: GO 70329
70196: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70197: LD_ADDR_VAR 0 5
70201: PUSH
70202: LD_VAR 0 1
70206: PUSH
70207: LD_INT 4
70209: MINUS
70210: PUSH
70211: LD_VAR 0 2
70215: PUSH
70216: LD_INT 4
70218: MINUS
70219: PUSH
70220: LD_INT 2
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: LIST
70227: PUSH
70228: LD_VAR 0 1
70232: PUSH
70233: LD_INT 3
70235: MINUS
70236: PUSH
70237: LD_VAR 0 2
70241: PUSH
70242: LD_INT 1
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: PUSH
70250: LD_VAR 0 1
70254: PUSH
70255: LD_INT 4
70257: PLUS
70258: PUSH
70259: LD_VAR 0 2
70263: PUSH
70264: LD_INT 4
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: LIST
70271: PUSH
70272: LD_VAR 0 1
70276: PUSH
70277: LD_INT 3
70279: PLUS
70280: PUSH
70281: LD_VAR 0 2
70285: PUSH
70286: LD_INT 3
70288: PLUS
70289: PUSH
70290: LD_INT 5
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: LIST
70297: PUSH
70298: LD_VAR 0 1
70302: PUSH
70303: LD_VAR 0 2
70307: PUSH
70308: LD_INT 4
70310: PLUS
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: ST_TO_ADDR
// end ; 1 :
70327: GO 71027
70329: LD_INT 1
70331: DOUBLE
70332: EQUAL
70333: IFTRUE 70337
70335: GO 70470
70337: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70338: LD_ADDR_VAR 0 5
70342: PUSH
70343: LD_VAR 0 1
70347: PUSH
70348: LD_VAR 0 2
70352: PUSH
70353: LD_INT 4
70355: MINUS
70356: PUSH
70357: LD_INT 3
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: LIST
70364: PUSH
70365: LD_VAR 0 1
70369: PUSH
70370: LD_INT 3
70372: MINUS
70373: PUSH
70374: LD_VAR 0 2
70378: PUSH
70379: LD_INT 3
70381: MINUS
70382: PUSH
70383: LD_INT 2
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: LIST
70390: PUSH
70391: LD_VAR 0 1
70395: PUSH
70396: LD_INT 4
70398: MINUS
70399: PUSH
70400: LD_VAR 0 2
70404: PUSH
70405: LD_INT 1
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: LIST
70412: PUSH
70413: LD_VAR 0 1
70417: PUSH
70418: LD_VAR 0 2
70422: PUSH
70423: LD_INT 3
70425: PLUS
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: PUSH
70435: LD_VAR 0 1
70439: PUSH
70440: LD_INT 4
70442: PLUS
70443: PUSH
70444: LD_VAR 0 2
70448: PUSH
70449: LD_INT 4
70451: PLUS
70452: PUSH
70453: LD_INT 5
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: ST_TO_ADDR
// end ; 2 :
70468: GO 71027
70470: LD_INT 2
70472: DOUBLE
70473: EQUAL
70474: IFTRUE 70478
70476: GO 70607
70478: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70479: LD_ADDR_VAR 0 5
70483: PUSH
70484: LD_VAR 0 1
70488: PUSH
70489: LD_VAR 0 2
70493: PUSH
70494: LD_INT 3
70496: MINUS
70497: PUSH
70498: LD_INT 3
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: LIST
70505: PUSH
70506: LD_VAR 0 1
70510: PUSH
70511: LD_INT 4
70513: PLUS
70514: PUSH
70515: LD_VAR 0 2
70519: PUSH
70520: LD_INT 4
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: PUSH
70528: LD_VAR 0 1
70532: PUSH
70533: LD_VAR 0 2
70537: PUSH
70538: LD_INT 4
70540: PLUS
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: LIST
70549: PUSH
70550: LD_VAR 0 1
70554: PUSH
70555: LD_INT 3
70557: MINUS
70558: PUSH
70559: LD_VAR 0 2
70563: PUSH
70564: LD_INT 1
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: LIST
70571: PUSH
70572: LD_VAR 0 1
70576: PUSH
70577: LD_INT 4
70579: MINUS
70580: PUSH
70581: LD_VAR 0 2
70585: PUSH
70586: LD_INT 4
70588: MINUS
70589: PUSH
70590: LD_INT 2
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: ST_TO_ADDR
// end ; 3 :
70605: GO 71027
70607: LD_INT 3
70609: DOUBLE
70610: EQUAL
70611: IFTRUE 70615
70613: GO 70748
70615: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70616: LD_ADDR_VAR 0 5
70620: PUSH
70621: LD_VAR 0 1
70625: PUSH
70626: LD_INT 3
70628: PLUS
70629: PUSH
70630: LD_VAR 0 2
70634: PUSH
70635: LD_INT 4
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: LIST
70642: PUSH
70643: LD_VAR 0 1
70647: PUSH
70648: LD_INT 4
70650: PLUS
70651: PUSH
70652: LD_VAR 0 2
70656: PUSH
70657: LD_INT 4
70659: PLUS
70660: PUSH
70661: LD_INT 5
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: PUSH
70669: LD_VAR 0 1
70673: PUSH
70674: LD_INT 4
70676: MINUS
70677: PUSH
70678: LD_VAR 0 2
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: LIST
70690: PUSH
70691: LD_VAR 0 1
70695: PUSH
70696: LD_VAR 0 2
70700: PUSH
70701: LD_INT 4
70703: MINUS
70704: PUSH
70705: LD_INT 3
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: LIST
70712: PUSH
70713: LD_VAR 0 1
70717: PUSH
70718: LD_INT 3
70720: MINUS
70721: PUSH
70722: LD_VAR 0 2
70726: PUSH
70727: LD_INT 3
70729: MINUS
70730: PUSH
70731: LD_INT 2
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: LIST
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: ST_TO_ADDR
// end ; 4 :
70746: GO 71027
70748: LD_INT 4
70750: DOUBLE
70751: EQUAL
70752: IFTRUE 70756
70754: GO 70889
70756: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70757: LD_ADDR_VAR 0 5
70761: PUSH
70762: LD_VAR 0 1
70766: PUSH
70767: LD_VAR 0 2
70771: PUSH
70772: LD_INT 4
70774: PLUS
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: PUSH
70784: LD_VAR 0 1
70788: PUSH
70789: LD_INT 3
70791: PLUS
70792: PUSH
70793: LD_VAR 0 2
70797: PUSH
70798: LD_INT 3
70800: PLUS
70801: PUSH
70802: LD_INT 5
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: PUSH
70810: LD_VAR 0 1
70814: PUSH
70815: LD_INT 4
70817: PLUS
70818: PUSH
70819: LD_VAR 0 2
70823: PUSH
70824: LD_INT 4
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: LIST
70831: PUSH
70832: LD_VAR 0 1
70836: PUSH
70837: LD_VAR 0 2
70841: PUSH
70842: LD_INT 3
70844: MINUS
70845: PUSH
70846: LD_INT 3
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: PUSH
70854: LD_VAR 0 1
70858: PUSH
70859: LD_INT 4
70861: MINUS
70862: PUSH
70863: LD_VAR 0 2
70867: PUSH
70868: LD_INT 4
70870: MINUS
70871: PUSH
70872: LD_INT 2
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: LIST
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: ST_TO_ADDR
// end ; 5 :
70887: GO 71027
70889: LD_INT 5
70891: DOUBLE
70892: EQUAL
70893: IFTRUE 70897
70895: GO 71026
70897: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70898: LD_ADDR_VAR 0 5
70902: PUSH
70903: LD_VAR 0 1
70907: PUSH
70908: LD_INT 4
70910: MINUS
70911: PUSH
70912: LD_VAR 0 2
70916: PUSH
70917: LD_INT 1
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: LIST
70924: PUSH
70925: LD_VAR 0 1
70929: PUSH
70930: LD_VAR 0 2
70934: PUSH
70935: LD_INT 4
70937: MINUS
70938: PUSH
70939: LD_INT 3
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: LIST
70946: PUSH
70947: LD_VAR 0 1
70951: PUSH
70952: LD_INT 4
70954: PLUS
70955: PUSH
70956: LD_VAR 0 2
70960: PUSH
70961: LD_INT 4
70963: PLUS
70964: PUSH
70965: LD_INT 5
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: LIST
70972: PUSH
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 3
70980: PLUS
70981: PUSH
70982: LD_VAR 0 2
70986: PUSH
70987: LD_INT 4
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: LIST
70994: PUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_VAR 0 2
71004: PUSH
71005: LD_INT 3
71007: PLUS
71008: PUSH
71009: LD_INT 0
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: ST_TO_ADDR
// end ; end ;
71024: GO 71027
71026: POP
// result := list ;
71027: LD_ADDR_VAR 0 4
71031: PUSH
71032: LD_VAR 0 5
71036: ST_TO_ADDR
// end ;
71037: LD_VAR 0 4
71041: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71042: LD_INT 0
71044: PPUSH
71045: PPUSH
71046: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71047: LD_VAR 0 1
71051: NOT
71052: PUSH
71053: LD_VAR 0 2
71057: PUSH
71058: LD_INT 1
71060: PUSH
71061: LD_INT 2
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: LD_INT 4
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: IN
71076: NOT
71077: OR
71078: IFFALSE 71082
// exit ;
71080: GO 71165
// tmp := [ ] ;
71082: LD_ADDR_VAR 0 5
71086: PUSH
71087: EMPTY
71088: ST_TO_ADDR
// for i in units do
71089: LD_ADDR_VAR 0 4
71093: PUSH
71094: LD_VAR 0 1
71098: PUSH
71099: FOR_IN
71100: IFFALSE 71134
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71102: LD_ADDR_VAR 0 5
71106: PUSH
71107: LD_VAR 0 5
71111: PPUSH
71112: LD_VAR 0 4
71116: PPUSH
71117: LD_VAR 0 2
71121: PPUSH
71122: CALL_OW 259
71126: PPUSH
71127: CALL 72526 0 2
71131: ST_TO_ADDR
71132: GO 71099
71134: POP
71135: POP
// if not tmp then
71136: LD_VAR 0 5
71140: NOT
71141: IFFALSE 71145
// exit ;
71143: GO 71165
// result := SortListByListDesc ( units , tmp ) ;
71145: LD_ADDR_VAR 0 3
71149: PUSH
71150: LD_VAR 0 1
71154: PPUSH
71155: LD_VAR 0 5
71159: PPUSH
71160: CALL_OW 77
71164: ST_TO_ADDR
// end ;
71165: LD_VAR 0 3
71169: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71170: LD_INT 0
71172: PPUSH
71173: PPUSH
71174: PPUSH
// result := false ;
71175: LD_ADDR_VAR 0 3
71179: PUSH
71180: LD_INT 0
71182: ST_TO_ADDR
// if not building then
71183: LD_VAR 0 2
71187: NOT
71188: IFFALSE 71192
// exit ;
71190: GO 71330
// x := GetX ( building ) ;
71192: LD_ADDR_VAR 0 4
71196: PUSH
71197: LD_VAR 0 2
71201: PPUSH
71202: CALL_OW 250
71206: ST_TO_ADDR
// y := GetY ( building ) ;
71207: LD_ADDR_VAR 0 5
71211: PUSH
71212: LD_VAR 0 2
71216: PPUSH
71217: CALL_OW 251
71221: ST_TO_ADDR
// if not x or not y then
71222: LD_VAR 0 4
71226: NOT
71227: PUSH
71228: LD_VAR 0 5
71232: NOT
71233: OR
71234: IFFALSE 71238
// exit ;
71236: GO 71330
// if GetTaskList ( unit ) then
71238: LD_VAR 0 1
71242: PPUSH
71243: CALL_OW 437
71247: IFFALSE 71330
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71249: LD_STRING e
71251: PUSH
71252: LD_VAR 0 1
71256: PPUSH
71257: CALL_OW 437
71261: PUSH
71262: LD_INT 1
71264: ARRAY
71265: PUSH
71266: LD_INT 1
71268: ARRAY
71269: EQUAL
71270: PUSH
71271: LD_VAR 0 4
71275: PUSH
71276: LD_VAR 0 1
71280: PPUSH
71281: CALL_OW 437
71285: PUSH
71286: LD_INT 1
71288: ARRAY
71289: PUSH
71290: LD_INT 2
71292: ARRAY
71293: EQUAL
71294: AND
71295: PUSH
71296: LD_VAR 0 5
71300: PUSH
71301: LD_VAR 0 1
71305: PPUSH
71306: CALL_OW 437
71310: PUSH
71311: LD_INT 1
71313: ARRAY
71314: PUSH
71315: LD_INT 3
71317: ARRAY
71318: EQUAL
71319: AND
71320: IFFALSE 71330
// result := true end ;
71322: LD_ADDR_VAR 0 3
71326: PUSH
71327: LD_INT 1
71329: ST_TO_ADDR
// end ;
71330: LD_VAR 0 3
71334: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71335: LD_INT 0
71337: PPUSH
// result := false ;
71338: LD_ADDR_VAR 0 4
71342: PUSH
71343: LD_INT 0
71345: ST_TO_ADDR
// if GetTaskList ( unit ) then
71346: LD_VAR 0 1
71350: PPUSH
71351: CALL_OW 437
71355: IFFALSE 71438
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71357: LD_STRING M
71359: PUSH
71360: LD_VAR 0 1
71364: PPUSH
71365: CALL_OW 437
71369: PUSH
71370: LD_INT 1
71372: ARRAY
71373: PUSH
71374: LD_INT 1
71376: ARRAY
71377: EQUAL
71378: PUSH
71379: LD_VAR 0 2
71383: PUSH
71384: LD_VAR 0 1
71388: PPUSH
71389: CALL_OW 437
71393: PUSH
71394: LD_INT 1
71396: ARRAY
71397: PUSH
71398: LD_INT 2
71400: ARRAY
71401: EQUAL
71402: AND
71403: PUSH
71404: LD_VAR 0 3
71408: PUSH
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 437
71418: PUSH
71419: LD_INT 1
71421: ARRAY
71422: PUSH
71423: LD_INT 3
71425: ARRAY
71426: EQUAL
71427: AND
71428: IFFALSE 71438
// result := true ;
71430: LD_ADDR_VAR 0 4
71434: PUSH
71435: LD_INT 1
71437: ST_TO_ADDR
// end ; end ;
71438: LD_VAR 0 4
71442: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71443: LD_INT 0
71445: PPUSH
71446: PPUSH
71447: PPUSH
71448: PPUSH
// if not unit or not area then
71449: LD_VAR 0 1
71453: NOT
71454: PUSH
71455: LD_VAR 0 2
71459: NOT
71460: OR
71461: IFFALSE 71465
// exit ;
71463: GO 71629
// tmp := AreaToList ( area , i ) ;
71465: LD_ADDR_VAR 0 6
71469: PUSH
71470: LD_VAR 0 2
71474: PPUSH
71475: LD_VAR 0 5
71479: PPUSH
71480: CALL_OW 517
71484: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71485: LD_ADDR_VAR 0 5
71489: PUSH
71490: DOUBLE
71491: LD_INT 1
71493: DEC
71494: ST_TO_ADDR
71495: LD_VAR 0 6
71499: PUSH
71500: LD_INT 1
71502: ARRAY
71503: PUSH
71504: FOR_TO
71505: IFFALSE 71627
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71507: LD_ADDR_VAR 0 7
71511: PUSH
71512: LD_VAR 0 6
71516: PUSH
71517: LD_INT 1
71519: ARRAY
71520: PUSH
71521: LD_VAR 0 5
71525: ARRAY
71526: PUSH
71527: LD_VAR 0 6
71531: PUSH
71532: LD_INT 2
71534: ARRAY
71535: PUSH
71536: LD_VAR 0 5
71540: ARRAY
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71546: LD_VAR 0 7
71550: PUSH
71551: LD_INT 1
71553: ARRAY
71554: PPUSH
71555: LD_VAR 0 7
71559: PUSH
71560: LD_INT 2
71562: ARRAY
71563: PPUSH
71564: CALL_OW 428
71568: PUSH
71569: LD_INT 0
71571: EQUAL
71572: IFFALSE 71625
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71574: LD_VAR 0 1
71578: PPUSH
71579: LD_VAR 0 7
71583: PUSH
71584: LD_INT 1
71586: ARRAY
71587: PPUSH
71588: LD_VAR 0 7
71592: PUSH
71593: LD_INT 2
71595: ARRAY
71596: PPUSH
71597: LD_VAR 0 3
71601: PPUSH
71602: CALL_OW 48
// result := IsPlaced ( unit ) ;
71606: LD_ADDR_VAR 0 4
71610: PUSH
71611: LD_VAR 0 1
71615: PPUSH
71616: CALL_OW 305
71620: ST_TO_ADDR
// exit ;
71621: POP
71622: POP
71623: GO 71629
// end ; end ;
71625: GO 71504
71627: POP
71628: POP
// end ;
71629: LD_VAR 0 4
71633: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71634: LD_INT 0
71636: PPUSH
71637: PPUSH
71638: PPUSH
// if not side or side > 8 then
71639: LD_VAR 0 1
71643: NOT
71644: PUSH
71645: LD_VAR 0 1
71649: PUSH
71650: LD_INT 8
71652: GREATER
71653: OR
71654: IFFALSE 71658
// exit ;
71656: GO 71845
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71658: LD_ADDR_VAR 0 4
71662: PUSH
71663: LD_INT 22
71665: PUSH
71666: LD_VAR 0 1
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 21
71677: PUSH
71678: LD_INT 3
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PPUSH
71689: CALL_OW 69
71693: ST_TO_ADDR
// if not tmp then
71694: LD_VAR 0 4
71698: NOT
71699: IFFALSE 71703
// exit ;
71701: GO 71845
// enable_addtolog := true ;
71703: LD_ADDR_OWVAR 81
71707: PUSH
71708: LD_INT 1
71710: ST_TO_ADDR
// AddToLog ( [ ) ;
71711: LD_STRING [
71713: PPUSH
71714: CALL_OW 561
// for i in tmp do
71718: LD_ADDR_VAR 0 3
71722: PUSH
71723: LD_VAR 0 4
71727: PUSH
71728: FOR_IN
71729: IFFALSE 71836
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71731: LD_STRING [
71733: PUSH
71734: LD_VAR 0 3
71738: PPUSH
71739: CALL_OW 266
71743: STR
71744: PUSH
71745: LD_STRING , 
71747: STR
71748: PUSH
71749: LD_VAR 0 3
71753: PPUSH
71754: CALL_OW 250
71758: STR
71759: PUSH
71760: LD_STRING , 
71762: STR
71763: PUSH
71764: LD_VAR 0 3
71768: PPUSH
71769: CALL_OW 251
71773: STR
71774: PUSH
71775: LD_STRING , 
71777: STR
71778: PUSH
71779: LD_VAR 0 3
71783: PPUSH
71784: CALL_OW 254
71788: STR
71789: PUSH
71790: LD_STRING , 
71792: STR
71793: PUSH
71794: LD_VAR 0 3
71798: PPUSH
71799: LD_INT 1
71801: PPUSH
71802: CALL_OW 268
71806: STR
71807: PUSH
71808: LD_STRING , 
71810: STR
71811: PUSH
71812: LD_VAR 0 3
71816: PPUSH
71817: LD_INT 2
71819: PPUSH
71820: CALL_OW 268
71824: STR
71825: PUSH
71826: LD_STRING ],
71828: STR
71829: PPUSH
71830: CALL_OW 561
// end ;
71834: GO 71728
71836: POP
71837: POP
// AddToLog ( ]; ) ;
71838: LD_STRING ];
71840: PPUSH
71841: CALL_OW 561
// end ;
71845: LD_VAR 0 2
71849: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71850: LD_INT 0
71852: PPUSH
71853: PPUSH
71854: PPUSH
71855: PPUSH
71856: PPUSH
// if not area or not rate or not max then
71857: LD_VAR 0 1
71861: NOT
71862: PUSH
71863: LD_VAR 0 2
71867: NOT
71868: OR
71869: PUSH
71870: LD_VAR 0 4
71874: NOT
71875: OR
71876: IFFALSE 71880
// exit ;
71878: GO 72069
// while 1 do
71880: LD_INT 1
71882: IFFALSE 72069
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71884: LD_ADDR_VAR 0 9
71888: PUSH
71889: LD_VAR 0 1
71893: PPUSH
71894: LD_INT 1
71896: PPUSH
71897: CALL_OW 287
71901: PUSH
71902: LD_INT 10
71904: MUL
71905: ST_TO_ADDR
// r := rate / 10 ;
71906: LD_ADDR_VAR 0 7
71910: PUSH
71911: LD_VAR 0 2
71915: PUSH
71916: LD_INT 10
71918: DIVREAL
71919: ST_TO_ADDR
// time := 1 1$00 ;
71920: LD_ADDR_VAR 0 8
71924: PUSH
71925: LD_INT 2100
71927: ST_TO_ADDR
// if amount < min then
71928: LD_VAR 0 9
71932: PUSH
71933: LD_VAR 0 3
71937: LESS
71938: IFFALSE 71956
// r := r * 2 else
71940: LD_ADDR_VAR 0 7
71944: PUSH
71945: LD_VAR 0 7
71949: PUSH
71950: LD_INT 2
71952: MUL
71953: ST_TO_ADDR
71954: GO 71982
// if amount > max then
71956: LD_VAR 0 9
71960: PUSH
71961: LD_VAR 0 4
71965: GREATER
71966: IFFALSE 71982
// r := r / 2 ;
71968: LD_ADDR_VAR 0 7
71972: PUSH
71973: LD_VAR 0 7
71977: PUSH
71978: LD_INT 2
71980: DIVREAL
71981: ST_TO_ADDR
// time := time / r ;
71982: LD_ADDR_VAR 0 8
71986: PUSH
71987: LD_VAR 0 8
71991: PUSH
71992: LD_VAR 0 7
71996: DIVREAL
71997: ST_TO_ADDR
// if time < 0 then
71998: LD_VAR 0 8
72002: PUSH
72003: LD_INT 0
72005: LESS
72006: IFFALSE 72023
// time := time * - 1 ;
72008: LD_ADDR_VAR 0 8
72012: PUSH
72013: LD_VAR 0 8
72017: PUSH
72018: LD_INT 1
72020: NEG
72021: MUL
72022: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72023: LD_VAR 0 8
72027: PUSH
72028: LD_INT 35
72030: PPUSH
72031: LD_INT 875
72033: PPUSH
72034: CALL_OW 12
72038: PLUS
72039: PPUSH
72040: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72044: LD_INT 1
72046: PPUSH
72047: LD_INT 5
72049: PPUSH
72050: CALL_OW 12
72054: PPUSH
72055: LD_VAR 0 1
72059: PPUSH
72060: LD_INT 1
72062: PPUSH
72063: CALL_OW 55
// end ;
72067: GO 71880
// end ;
72069: LD_VAR 0 5
72073: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72074: LD_INT 0
72076: PPUSH
72077: PPUSH
72078: PPUSH
72079: PPUSH
72080: PPUSH
72081: PPUSH
72082: PPUSH
72083: PPUSH
// if not turrets or not factories then
72084: LD_VAR 0 1
72088: NOT
72089: PUSH
72090: LD_VAR 0 2
72094: NOT
72095: OR
72096: IFFALSE 72100
// exit ;
72098: GO 72407
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72100: LD_ADDR_VAR 0 10
72104: PUSH
72105: LD_INT 5
72107: PUSH
72108: LD_INT 6
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 2
72117: PUSH
72118: LD_INT 4
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 3
72127: PUSH
72128: LD_INT 5
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 24
72142: PUSH
72143: LD_INT 25
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 23
72152: PUSH
72153: LD_INT 27
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 42
72166: PUSH
72167: LD_INT 43
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 44
72176: PUSH
72177: LD_INT 46
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 45
72186: PUSH
72187: LD_INT 47
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: LIST
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: LIST
72203: ST_TO_ADDR
// result := [ ] ;
72204: LD_ADDR_VAR 0 3
72208: PUSH
72209: EMPTY
72210: ST_TO_ADDR
// for i in turrets do
72211: LD_ADDR_VAR 0 4
72215: PUSH
72216: LD_VAR 0 1
72220: PUSH
72221: FOR_IN
72222: IFFALSE 72405
// begin nat := GetNation ( i ) ;
72224: LD_ADDR_VAR 0 7
72228: PUSH
72229: LD_VAR 0 4
72233: PPUSH
72234: CALL_OW 248
72238: ST_TO_ADDR
// weapon := 0 ;
72239: LD_ADDR_VAR 0 8
72243: PUSH
72244: LD_INT 0
72246: ST_TO_ADDR
// if not nat then
72247: LD_VAR 0 7
72251: NOT
72252: IFFALSE 72256
// continue ;
72254: GO 72221
// for j in list [ nat ] do
72256: LD_ADDR_VAR 0 5
72260: PUSH
72261: LD_VAR 0 10
72265: PUSH
72266: LD_VAR 0 7
72270: ARRAY
72271: PUSH
72272: FOR_IN
72273: IFFALSE 72314
// if GetBWeapon ( i ) = j [ 1 ] then
72275: LD_VAR 0 4
72279: PPUSH
72280: CALL_OW 269
72284: PUSH
72285: LD_VAR 0 5
72289: PUSH
72290: LD_INT 1
72292: ARRAY
72293: EQUAL
72294: IFFALSE 72312
// begin weapon := j [ 2 ] ;
72296: LD_ADDR_VAR 0 8
72300: PUSH
72301: LD_VAR 0 5
72305: PUSH
72306: LD_INT 2
72308: ARRAY
72309: ST_TO_ADDR
// break ;
72310: GO 72314
// end ;
72312: GO 72272
72314: POP
72315: POP
// if not weapon then
72316: LD_VAR 0 8
72320: NOT
72321: IFFALSE 72325
// continue ;
72323: GO 72221
// for k in factories do
72325: LD_ADDR_VAR 0 6
72329: PUSH
72330: LD_VAR 0 2
72334: PUSH
72335: FOR_IN
72336: IFFALSE 72401
// begin weapons := AvailableWeaponList ( k ) ;
72338: LD_ADDR_VAR 0 9
72342: PUSH
72343: LD_VAR 0 6
72347: PPUSH
72348: CALL_OW 478
72352: ST_TO_ADDR
// if not weapons then
72353: LD_VAR 0 9
72357: NOT
72358: IFFALSE 72362
// continue ;
72360: GO 72335
// if weapon in weapons then
72362: LD_VAR 0 8
72366: PUSH
72367: LD_VAR 0 9
72371: IN
72372: IFFALSE 72399
// begin result := [ i , weapon ] ;
72374: LD_ADDR_VAR 0 3
72378: PUSH
72379: LD_VAR 0 4
72383: PUSH
72384: LD_VAR 0 8
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: ST_TO_ADDR
// exit ;
72393: POP
72394: POP
72395: POP
72396: POP
72397: GO 72407
// end ; end ;
72399: GO 72335
72401: POP
72402: POP
// end ;
72403: GO 72221
72405: POP
72406: POP
// end ;
72407: LD_VAR 0 3
72411: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72412: LD_INT 0
72414: PPUSH
// if not side or side > 8 then
72415: LD_VAR 0 3
72419: NOT
72420: PUSH
72421: LD_VAR 0 3
72425: PUSH
72426: LD_INT 8
72428: GREATER
72429: OR
72430: IFFALSE 72434
// exit ;
72432: GO 72493
// if not range then
72434: LD_VAR 0 4
72438: NOT
72439: IFFALSE 72450
// range := - 12 ;
72441: LD_ADDR_VAR 0 4
72445: PUSH
72446: LD_INT 12
72448: NEG
72449: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72450: LD_VAR 0 1
72454: PPUSH
72455: LD_VAR 0 2
72459: PPUSH
72460: LD_VAR 0 3
72464: PPUSH
72465: LD_VAR 0 4
72469: PPUSH
72470: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72474: LD_VAR 0 1
72478: PPUSH
72479: LD_VAR 0 2
72483: PPUSH
72484: LD_VAR 0 3
72488: PPUSH
72489: CALL_OW 331
// end ;
72493: LD_VAR 0 5
72497: RET
// export function Video ( mode ) ; begin
72498: LD_INT 0
72500: PPUSH
// ingame_video = mode ;
72501: LD_ADDR_OWVAR 52
72505: PUSH
72506: LD_VAR 0 1
72510: ST_TO_ADDR
// interface_hidden = mode ;
72511: LD_ADDR_OWVAR 54
72515: PUSH
72516: LD_VAR 0 1
72520: ST_TO_ADDR
// end ;
72521: LD_VAR 0 2
72525: RET
// export function Join ( array , element ) ; begin
72526: LD_INT 0
72528: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72529: LD_ADDR_VAR 0 3
72533: PUSH
72534: LD_VAR 0 1
72538: PPUSH
72539: LD_VAR 0 1
72543: PUSH
72544: LD_INT 1
72546: PLUS
72547: PPUSH
72548: LD_VAR 0 2
72552: PPUSH
72553: CALL_OW 1
72557: ST_TO_ADDR
// end ;
72558: LD_VAR 0 3
72562: RET
// export function JoinUnion ( array , element ) ; begin
72563: LD_INT 0
72565: PPUSH
// result := array union element ;
72566: LD_ADDR_VAR 0 3
72570: PUSH
72571: LD_VAR 0 1
72575: PUSH
72576: LD_VAR 0 2
72580: UNION
72581: ST_TO_ADDR
// end ;
72582: LD_VAR 0 3
72586: RET
// export function GetBehemoths ( side ) ; begin
72587: LD_INT 0
72589: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72590: LD_ADDR_VAR 0 2
72594: PUSH
72595: LD_INT 22
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 31
72609: PUSH
72610: LD_INT 25
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PPUSH
72621: CALL_OW 69
72625: ST_TO_ADDR
// end ;
72626: LD_VAR 0 2
72630: RET
// export function Shuffle ( array ) ; var i , index ; begin
72631: LD_INT 0
72633: PPUSH
72634: PPUSH
72635: PPUSH
// result := [ ] ;
72636: LD_ADDR_VAR 0 2
72640: PUSH
72641: EMPTY
72642: ST_TO_ADDR
// if not array then
72643: LD_VAR 0 1
72647: NOT
72648: IFFALSE 72652
// exit ;
72650: GO 72751
// Randomize ;
72652: CALL_OW 10
// for i = array downto 1 do
72656: LD_ADDR_VAR 0 3
72660: PUSH
72661: DOUBLE
72662: LD_VAR 0 1
72666: INC
72667: ST_TO_ADDR
72668: LD_INT 1
72670: PUSH
72671: FOR_DOWNTO
72672: IFFALSE 72749
// begin index := rand ( 1 , array ) ;
72674: LD_ADDR_VAR 0 4
72678: PUSH
72679: LD_INT 1
72681: PPUSH
72682: LD_VAR 0 1
72686: PPUSH
72687: CALL_OW 12
72691: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72692: LD_ADDR_VAR 0 2
72696: PUSH
72697: LD_VAR 0 2
72701: PPUSH
72702: LD_VAR 0 2
72706: PUSH
72707: LD_INT 1
72709: PLUS
72710: PPUSH
72711: LD_VAR 0 1
72715: PUSH
72716: LD_VAR 0 4
72720: ARRAY
72721: PPUSH
72722: CALL_OW 2
72726: ST_TO_ADDR
// array := Delete ( array , index ) ;
72727: LD_ADDR_VAR 0 1
72731: PUSH
72732: LD_VAR 0 1
72736: PPUSH
72737: LD_VAR 0 4
72741: PPUSH
72742: CALL_OW 3
72746: ST_TO_ADDR
// end ;
72747: GO 72671
72749: POP
72750: POP
// end ;
72751: LD_VAR 0 2
72755: RET
// export function GetBaseMaterials ( base ) ; begin
72756: LD_INT 0
72758: PPUSH
// result := [ 0 , 0 , 0 ] ;
72759: LD_ADDR_VAR 0 2
72763: PUSH
72764: LD_INT 0
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: LD_INT 0
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: LIST
72777: ST_TO_ADDR
// if not base then
72778: LD_VAR 0 1
72782: NOT
72783: IFFALSE 72787
// exit ;
72785: GO 72836
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72787: LD_ADDR_VAR 0 2
72791: PUSH
72792: LD_VAR 0 1
72796: PPUSH
72797: LD_INT 1
72799: PPUSH
72800: CALL_OW 275
72804: PUSH
72805: LD_VAR 0 1
72809: PPUSH
72810: LD_INT 2
72812: PPUSH
72813: CALL_OW 275
72817: PUSH
72818: LD_VAR 0 1
72822: PPUSH
72823: LD_INT 3
72825: PPUSH
72826: CALL_OW 275
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: LIST
72835: ST_TO_ADDR
// end ;
72836: LD_VAR 0 2
72840: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72841: LD_INT 0
72843: PPUSH
72844: PPUSH
// result := array ;
72845: LD_ADDR_VAR 0 3
72849: PUSH
72850: LD_VAR 0 1
72854: ST_TO_ADDR
// if size >= result then
72855: LD_VAR 0 2
72859: PUSH
72860: LD_VAR 0 3
72864: GREATEREQUAL
72865: IFFALSE 72869
// exit ;
72867: GO 72919
// if size then
72869: LD_VAR 0 2
72873: IFFALSE 72919
// for i := array downto size do
72875: LD_ADDR_VAR 0 4
72879: PUSH
72880: DOUBLE
72881: LD_VAR 0 1
72885: INC
72886: ST_TO_ADDR
72887: LD_VAR 0 2
72891: PUSH
72892: FOR_DOWNTO
72893: IFFALSE 72917
// result := Delete ( result , result ) ;
72895: LD_ADDR_VAR 0 3
72899: PUSH
72900: LD_VAR 0 3
72904: PPUSH
72905: LD_VAR 0 3
72909: PPUSH
72910: CALL_OW 3
72914: ST_TO_ADDR
72915: GO 72892
72917: POP
72918: POP
// end ;
72919: LD_VAR 0 3
72923: RET
// export function ComExit ( unit ) ; var tmp ; begin
72924: LD_INT 0
72926: PPUSH
72927: PPUSH
// if not IsInUnit ( unit ) then
72928: LD_VAR 0 1
72932: PPUSH
72933: CALL_OW 310
72937: NOT
72938: IFFALSE 72942
// exit ;
72940: GO 73002
// tmp := IsInUnit ( unit ) ;
72942: LD_ADDR_VAR 0 3
72946: PUSH
72947: LD_VAR 0 1
72951: PPUSH
72952: CALL_OW 310
72956: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72957: LD_VAR 0 3
72961: PPUSH
72962: CALL_OW 247
72966: PUSH
72967: LD_INT 2
72969: EQUAL
72970: IFFALSE 72983
// ComExitVehicle ( unit ) else
72972: LD_VAR 0 1
72976: PPUSH
72977: CALL_OW 121
72981: GO 72992
// ComExitBuilding ( unit ) ;
72983: LD_VAR 0 1
72987: PPUSH
72988: CALL_OW 122
// result := tmp ;
72992: LD_ADDR_VAR 0 2
72996: PUSH
72997: LD_VAR 0 3
73001: ST_TO_ADDR
// end ;
73002: LD_VAR 0 2
73006: RET
// export function ComExitAll ( units ) ; var i ; begin
73007: LD_INT 0
73009: PPUSH
73010: PPUSH
// if not units then
73011: LD_VAR 0 1
73015: NOT
73016: IFFALSE 73020
// exit ;
73018: GO 73046
// for i in units do
73020: LD_ADDR_VAR 0 3
73024: PUSH
73025: LD_VAR 0 1
73029: PUSH
73030: FOR_IN
73031: IFFALSE 73044
// ComExit ( i ) ;
73033: LD_VAR 0 3
73037: PPUSH
73038: CALL 72924 0 1
73042: GO 73030
73044: POP
73045: POP
// end ;
73046: LD_VAR 0 2
73050: RET
// export function ResetHc ; begin
73051: LD_INT 0
73053: PPUSH
// InitHc ;
73054: CALL_OW 19
// hc_importance := 0 ;
73058: LD_ADDR_OWVAR 32
73062: PUSH
73063: LD_INT 0
73065: ST_TO_ADDR
// end ;
73066: LD_VAR 0 1
73070: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73071: LD_INT 0
73073: PPUSH
73074: PPUSH
73075: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73076: LD_ADDR_VAR 0 6
73080: PUSH
73081: LD_VAR 0 1
73085: PUSH
73086: LD_VAR 0 3
73090: PLUS
73091: PUSH
73092: LD_INT 2
73094: DIV
73095: ST_TO_ADDR
// if _x < 0 then
73096: LD_VAR 0 6
73100: PUSH
73101: LD_INT 0
73103: LESS
73104: IFFALSE 73121
// _x := _x * - 1 ;
73106: LD_ADDR_VAR 0 6
73110: PUSH
73111: LD_VAR 0 6
73115: PUSH
73116: LD_INT 1
73118: NEG
73119: MUL
73120: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73121: LD_ADDR_VAR 0 7
73125: PUSH
73126: LD_VAR 0 2
73130: PUSH
73131: LD_VAR 0 4
73135: PLUS
73136: PUSH
73137: LD_INT 2
73139: DIV
73140: ST_TO_ADDR
// if _y < 0 then
73141: LD_VAR 0 7
73145: PUSH
73146: LD_INT 0
73148: LESS
73149: IFFALSE 73166
// _y := _y * - 1 ;
73151: LD_ADDR_VAR 0 7
73155: PUSH
73156: LD_VAR 0 7
73160: PUSH
73161: LD_INT 1
73163: NEG
73164: MUL
73165: ST_TO_ADDR
// result := [ _x , _y ] ;
73166: LD_ADDR_VAR 0 5
73170: PUSH
73171: LD_VAR 0 6
73175: PUSH
73176: LD_VAR 0 7
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: ST_TO_ADDR
// end ;
73185: LD_VAR 0 5
73189: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73190: LD_INT 0
73192: PPUSH
73193: PPUSH
73194: PPUSH
73195: PPUSH
// task := GetTaskList ( unit ) ;
73196: LD_ADDR_VAR 0 7
73200: PUSH
73201: LD_VAR 0 1
73205: PPUSH
73206: CALL_OW 437
73210: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73211: LD_VAR 0 7
73215: NOT
73216: PUSH
73217: LD_VAR 0 1
73221: PPUSH
73222: LD_VAR 0 2
73226: PPUSH
73227: CALL_OW 308
73231: NOT
73232: AND
73233: IFFALSE 73237
// exit ;
73235: GO 73355
// if IsInArea ( unit , area ) then
73237: LD_VAR 0 1
73241: PPUSH
73242: LD_VAR 0 2
73246: PPUSH
73247: CALL_OW 308
73251: IFFALSE 73269
// begin ComMoveToArea ( unit , goAway ) ;
73253: LD_VAR 0 1
73257: PPUSH
73258: LD_VAR 0 3
73262: PPUSH
73263: CALL_OW 113
// exit ;
73267: GO 73355
// end ; if task [ 1 ] [ 1 ] <> M then
73269: LD_VAR 0 7
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: PUSH
73278: LD_INT 1
73280: ARRAY
73281: PUSH
73282: LD_STRING M
73284: NONEQUAL
73285: IFFALSE 73289
// exit ;
73287: GO 73355
// x := task [ 1 ] [ 2 ] ;
73289: LD_ADDR_VAR 0 5
73293: PUSH
73294: LD_VAR 0 7
73298: PUSH
73299: LD_INT 1
73301: ARRAY
73302: PUSH
73303: LD_INT 2
73305: ARRAY
73306: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73307: LD_ADDR_VAR 0 6
73311: PUSH
73312: LD_VAR 0 7
73316: PUSH
73317: LD_INT 1
73319: ARRAY
73320: PUSH
73321: LD_INT 3
73323: ARRAY
73324: ST_TO_ADDR
// if InArea ( x , y , area ) then
73325: LD_VAR 0 5
73329: PPUSH
73330: LD_VAR 0 6
73334: PPUSH
73335: LD_VAR 0 2
73339: PPUSH
73340: CALL_OW 309
73344: IFFALSE 73355
// ComStop ( unit ) ;
73346: LD_VAR 0 1
73350: PPUSH
73351: CALL_OW 141
// end ;
73355: LD_VAR 0 4
73359: RET
// export function Abs ( value ) ; begin
73360: LD_INT 0
73362: PPUSH
// result := value ;
73363: LD_ADDR_VAR 0 2
73367: PUSH
73368: LD_VAR 0 1
73372: ST_TO_ADDR
// if value < 0 then
73373: LD_VAR 0 1
73377: PUSH
73378: LD_INT 0
73380: LESS
73381: IFFALSE 73398
// result := value * - 1 ;
73383: LD_ADDR_VAR 0 2
73387: PUSH
73388: LD_VAR 0 1
73392: PUSH
73393: LD_INT 1
73395: NEG
73396: MUL
73397: ST_TO_ADDR
// end ;
73398: LD_VAR 0 2
73402: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73403: LD_INT 0
73405: PPUSH
73406: PPUSH
73407: PPUSH
73408: PPUSH
73409: PPUSH
73410: PPUSH
73411: PPUSH
73412: PPUSH
// if not unit or not building then
73413: LD_VAR 0 1
73417: NOT
73418: PUSH
73419: LD_VAR 0 2
73423: NOT
73424: OR
73425: IFFALSE 73429
// exit ;
73427: GO 73655
// x := GetX ( building ) ;
73429: LD_ADDR_VAR 0 4
73433: PUSH
73434: LD_VAR 0 2
73438: PPUSH
73439: CALL_OW 250
73443: ST_TO_ADDR
// y := GetY ( building ) ;
73444: LD_ADDR_VAR 0 6
73448: PUSH
73449: LD_VAR 0 2
73453: PPUSH
73454: CALL_OW 251
73458: ST_TO_ADDR
// d := GetDir ( building ) ;
73459: LD_ADDR_VAR 0 8
73463: PUSH
73464: LD_VAR 0 2
73468: PPUSH
73469: CALL_OW 254
73473: ST_TO_ADDR
// r := 4 ;
73474: LD_ADDR_VAR 0 9
73478: PUSH
73479: LD_INT 4
73481: ST_TO_ADDR
// for i := 1 to 5 do
73482: LD_ADDR_VAR 0 10
73486: PUSH
73487: DOUBLE
73488: LD_INT 1
73490: DEC
73491: ST_TO_ADDR
73492: LD_INT 5
73494: PUSH
73495: FOR_TO
73496: IFFALSE 73653
// begin _x := ShiftX ( x , d , r + i ) ;
73498: LD_ADDR_VAR 0 5
73502: PUSH
73503: LD_VAR 0 4
73507: PPUSH
73508: LD_VAR 0 8
73512: PPUSH
73513: LD_VAR 0 9
73517: PUSH
73518: LD_VAR 0 10
73522: PLUS
73523: PPUSH
73524: CALL_OW 272
73528: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73529: LD_ADDR_VAR 0 7
73533: PUSH
73534: LD_VAR 0 6
73538: PPUSH
73539: LD_VAR 0 8
73543: PPUSH
73544: LD_VAR 0 9
73548: PUSH
73549: LD_VAR 0 10
73553: PLUS
73554: PPUSH
73555: CALL_OW 273
73559: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73560: LD_VAR 0 5
73564: PPUSH
73565: LD_VAR 0 7
73569: PPUSH
73570: CALL_OW 488
73574: PUSH
73575: LD_VAR 0 5
73579: PPUSH
73580: LD_VAR 0 7
73584: PPUSH
73585: CALL_OW 428
73589: PPUSH
73590: CALL_OW 247
73594: PUSH
73595: LD_INT 3
73597: PUSH
73598: LD_INT 2
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: IN
73605: NOT
73606: AND
73607: IFFALSE 73651
// begin ComMoveXY ( unit , _x , _y ) ;
73609: LD_VAR 0 1
73613: PPUSH
73614: LD_VAR 0 5
73618: PPUSH
73619: LD_VAR 0 7
73623: PPUSH
73624: CALL_OW 111
// result := [ _x , _y ] ;
73628: LD_ADDR_VAR 0 3
73632: PUSH
73633: LD_VAR 0 5
73637: PUSH
73638: LD_VAR 0 7
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: ST_TO_ADDR
// exit ;
73647: POP
73648: POP
73649: GO 73655
// end ; end ;
73651: GO 73495
73653: POP
73654: POP
// end ;
73655: LD_VAR 0 3
73659: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73660: LD_INT 0
73662: PPUSH
73663: PPUSH
73664: PPUSH
// result := 0 ;
73665: LD_ADDR_VAR 0 3
73669: PUSH
73670: LD_INT 0
73672: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73673: LD_VAR 0 1
73677: PUSH
73678: LD_INT 0
73680: LESS
73681: PUSH
73682: LD_VAR 0 1
73686: PUSH
73687: LD_INT 8
73689: GREATER
73690: OR
73691: PUSH
73692: LD_VAR 0 2
73696: PUSH
73697: LD_INT 0
73699: LESS
73700: OR
73701: PUSH
73702: LD_VAR 0 2
73706: PUSH
73707: LD_INT 8
73709: GREATER
73710: OR
73711: IFFALSE 73715
// exit ;
73713: GO 73790
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73715: LD_ADDR_VAR 0 4
73719: PUSH
73720: LD_INT 22
73722: PUSH
73723: LD_VAR 0 2
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PPUSH
73732: CALL_OW 69
73736: PUSH
73737: FOR_IN
73738: IFFALSE 73788
// begin un := UnitShoot ( i ) ;
73740: LD_ADDR_VAR 0 5
73744: PUSH
73745: LD_VAR 0 4
73749: PPUSH
73750: CALL_OW 504
73754: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73755: LD_VAR 0 5
73759: PPUSH
73760: CALL_OW 255
73764: PUSH
73765: LD_VAR 0 1
73769: EQUAL
73770: IFFALSE 73786
// begin result := un ;
73772: LD_ADDR_VAR 0 3
73776: PUSH
73777: LD_VAR 0 5
73781: ST_TO_ADDR
// exit ;
73782: POP
73783: POP
73784: GO 73790
// end ; end ;
73786: GO 73737
73788: POP
73789: POP
// end ;
73790: LD_VAR 0 3
73794: RET
// export function GetCargoBay ( units ) ; begin
73795: LD_INT 0
73797: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73798: LD_ADDR_VAR 0 2
73802: PUSH
73803: LD_VAR 0 1
73807: PPUSH
73808: LD_INT 2
73810: PUSH
73811: LD_INT 34
73813: PUSH
73814: LD_INT 12
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: PUSH
73821: LD_INT 34
73823: PUSH
73824: LD_INT 51
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: PUSH
73831: LD_INT 34
73833: PUSH
73834: LD_INT 32
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: PUSH
73841: LD_INT 34
73843: PUSH
73844: LD_INT 89
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: PPUSH
73858: CALL_OW 72
73862: ST_TO_ADDR
// end ;
73863: LD_VAR 0 2
73867: RET
// export function Negate ( value ) ; begin
73868: LD_INT 0
73870: PPUSH
// result := not value ;
73871: LD_ADDR_VAR 0 2
73875: PUSH
73876: LD_VAR 0 1
73880: NOT
73881: ST_TO_ADDR
// end ;
73882: LD_VAR 0 2
73886: RET
// export function Inc ( value ) ; begin
73887: LD_INT 0
73889: PPUSH
// result := value + 1 ;
73890: LD_ADDR_VAR 0 2
73894: PUSH
73895: LD_VAR 0 1
73899: PUSH
73900: LD_INT 1
73902: PLUS
73903: ST_TO_ADDR
// end ;
73904: LD_VAR 0 2
73908: RET
// export function Dec ( value ) ; begin
73909: LD_INT 0
73911: PPUSH
// result := value - 1 ;
73912: LD_ADDR_VAR 0 2
73916: PUSH
73917: LD_VAR 0 1
73921: PUSH
73922: LD_INT 1
73924: MINUS
73925: ST_TO_ADDR
// end ;
73926: LD_VAR 0 2
73930: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73931: LD_INT 0
73933: PPUSH
73934: PPUSH
73935: PPUSH
73936: PPUSH
73937: PPUSH
73938: PPUSH
73939: PPUSH
73940: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73941: LD_VAR 0 1
73945: PPUSH
73946: LD_VAR 0 2
73950: PPUSH
73951: CALL_OW 488
73955: NOT
73956: PUSH
73957: LD_VAR 0 3
73961: PPUSH
73962: LD_VAR 0 4
73966: PPUSH
73967: CALL_OW 488
73971: NOT
73972: OR
73973: IFFALSE 73986
// begin result := - 1 ;
73975: LD_ADDR_VAR 0 5
73979: PUSH
73980: LD_INT 1
73982: NEG
73983: ST_TO_ADDR
// exit ;
73984: GO 74221
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73986: LD_ADDR_VAR 0 12
73990: PUSH
73991: LD_VAR 0 1
73995: PPUSH
73996: LD_VAR 0 2
74000: PPUSH
74001: LD_VAR 0 3
74005: PPUSH
74006: LD_VAR 0 4
74010: PPUSH
74011: CALL 73071 0 4
74015: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74016: LD_ADDR_VAR 0 11
74020: PUSH
74021: LD_VAR 0 1
74025: PPUSH
74026: LD_VAR 0 2
74030: PPUSH
74031: LD_VAR 0 12
74035: PUSH
74036: LD_INT 1
74038: ARRAY
74039: PPUSH
74040: LD_VAR 0 12
74044: PUSH
74045: LD_INT 2
74047: ARRAY
74048: PPUSH
74049: CALL_OW 298
74053: ST_TO_ADDR
// distance := 9999 ;
74054: LD_ADDR_VAR 0 10
74058: PUSH
74059: LD_INT 9999
74061: ST_TO_ADDR
// for i := 0 to 5 do
74062: LD_ADDR_VAR 0 6
74066: PUSH
74067: DOUBLE
74068: LD_INT 0
74070: DEC
74071: ST_TO_ADDR
74072: LD_INT 5
74074: PUSH
74075: FOR_TO
74076: IFFALSE 74219
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74078: LD_ADDR_VAR 0 7
74082: PUSH
74083: LD_VAR 0 1
74087: PPUSH
74088: LD_VAR 0 6
74092: PPUSH
74093: LD_VAR 0 11
74097: PPUSH
74098: CALL_OW 272
74102: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74103: LD_ADDR_VAR 0 8
74107: PUSH
74108: LD_VAR 0 2
74112: PPUSH
74113: LD_VAR 0 6
74117: PPUSH
74118: LD_VAR 0 11
74122: PPUSH
74123: CALL_OW 273
74127: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74128: LD_VAR 0 7
74132: PPUSH
74133: LD_VAR 0 8
74137: PPUSH
74138: CALL_OW 488
74142: NOT
74143: IFFALSE 74147
// continue ;
74145: GO 74075
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74147: LD_ADDR_VAR 0 9
74151: PUSH
74152: LD_VAR 0 12
74156: PUSH
74157: LD_INT 1
74159: ARRAY
74160: PPUSH
74161: LD_VAR 0 12
74165: PUSH
74166: LD_INT 2
74168: ARRAY
74169: PPUSH
74170: LD_VAR 0 7
74174: PPUSH
74175: LD_VAR 0 8
74179: PPUSH
74180: CALL_OW 298
74184: ST_TO_ADDR
// if tmp < distance then
74185: LD_VAR 0 9
74189: PUSH
74190: LD_VAR 0 10
74194: LESS
74195: IFFALSE 74217
// begin result := i ;
74197: LD_ADDR_VAR 0 5
74201: PUSH
74202: LD_VAR 0 6
74206: ST_TO_ADDR
// distance := tmp ;
74207: LD_ADDR_VAR 0 10
74211: PUSH
74212: LD_VAR 0 9
74216: ST_TO_ADDR
// end ; end ;
74217: GO 74075
74219: POP
74220: POP
// end ;
74221: LD_VAR 0 5
74225: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74226: LD_INT 0
74228: PPUSH
74229: PPUSH
// if not driver or not IsInUnit ( driver ) then
74230: LD_VAR 0 1
74234: NOT
74235: PUSH
74236: LD_VAR 0 1
74240: PPUSH
74241: CALL_OW 310
74245: NOT
74246: OR
74247: IFFALSE 74251
// exit ;
74249: GO 74341
// vehicle := IsInUnit ( driver ) ;
74251: LD_ADDR_VAR 0 3
74255: PUSH
74256: LD_VAR 0 1
74260: PPUSH
74261: CALL_OW 310
74265: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74266: LD_VAR 0 1
74270: PPUSH
74271: LD_STRING \
74273: PUSH
74274: LD_INT 0
74276: PUSH
74277: LD_INT 0
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: LD_INT 0
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: LD_INT 0
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: PUSH
74301: LD_STRING E
74303: PUSH
74304: LD_INT 0
74306: PUSH
74307: LD_INT 0
74309: PUSH
74310: LD_VAR 0 3
74314: PUSH
74315: LD_INT 0
74317: PUSH
74318: LD_INT 0
74320: PUSH
74321: LD_INT 0
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PPUSH
74337: CALL_OW 446
// end ;
74341: LD_VAR 0 2
74345: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74346: LD_INT 0
74348: PPUSH
74349: PPUSH
// if not driver or not IsInUnit ( driver ) then
74350: LD_VAR 0 1
74354: NOT
74355: PUSH
74356: LD_VAR 0 1
74360: PPUSH
74361: CALL_OW 310
74365: NOT
74366: OR
74367: IFFALSE 74371
// exit ;
74369: GO 74461
// vehicle := IsInUnit ( driver ) ;
74371: LD_ADDR_VAR 0 3
74375: PUSH
74376: LD_VAR 0 1
74380: PPUSH
74381: CALL_OW 310
74385: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74386: LD_VAR 0 1
74390: PPUSH
74391: LD_STRING \
74393: PUSH
74394: LD_INT 0
74396: PUSH
74397: LD_INT 0
74399: PUSH
74400: LD_INT 0
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: LD_INT 0
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: PUSH
74421: LD_STRING E
74423: PUSH
74424: LD_INT 0
74426: PUSH
74427: LD_INT 0
74429: PUSH
74430: LD_VAR 0 3
74434: PUSH
74435: LD_INT 0
74437: PUSH
74438: LD_INT 0
74440: PUSH
74441: LD_INT 0
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PPUSH
74457: CALL_OW 447
// end ;
74461: LD_VAR 0 2
74465: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74466: LD_INT 0
74468: PPUSH
74469: PPUSH
74470: PPUSH
// tmp := [ ] ;
74471: LD_ADDR_VAR 0 5
74475: PUSH
74476: EMPTY
74477: ST_TO_ADDR
// for i in units do
74478: LD_ADDR_VAR 0 4
74482: PUSH
74483: LD_VAR 0 1
74487: PUSH
74488: FOR_IN
74489: IFFALSE 74527
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74491: LD_ADDR_VAR 0 5
74495: PUSH
74496: LD_VAR 0 5
74500: PPUSH
74501: LD_VAR 0 5
74505: PUSH
74506: LD_INT 1
74508: PLUS
74509: PPUSH
74510: LD_VAR 0 4
74514: PPUSH
74515: CALL_OW 256
74519: PPUSH
74520: CALL_OW 2
74524: ST_TO_ADDR
74525: GO 74488
74527: POP
74528: POP
// if not tmp then
74529: LD_VAR 0 5
74533: NOT
74534: IFFALSE 74538
// exit ;
74536: GO 74586
// if asc then
74538: LD_VAR 0 2
74542: IFFALSE 74566
// result := SortListByListAsc ( units , tmp ) else
74544: LD_ADDR_VAR 0 3
74548: PUSH
74549: LD_VAR 0 1
74553: PPUSH
74554: LD_VAR 0 5
74558: PPUSH
74559: CALL_OW 76
74563: ST_TO_ADDR
74564: GO 74586
// result := SortListByListDesc ( units , tmp ) ;
74566: LD_ADDR_VAR 0 3
74570: PUSH
74571: LD_VAR 0 1
74575: PPUSH
74576: LD_VAR 0 5
74580: PPUSH
74581: CALL_OW 77
74585: ST_TO_ADDR
// end ;
74586: LD_VAR 0 3
74590: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74591: LD_INT 0
74593: PPUSH
74594: PPUSH
// task := GetTaskList ( mech ) ;
74595: LD_ADDR_VAR 0 4
74599: PUSH
74600: LD_VAR 0 1
74604: PPUSH
74605: CALL_OW 437
74609: ST_TO_ADDR
// if not task then
74610: LD_VAR 0 4
74614: NOT
74615: IFFALSE 74619
// exit ;
74617: GO 74661
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74619: LD_ADDR_VAR 0 3
74623: PUSH
74624: LD_VAR 0 4
74628: PUSH
74629: LD_INT 1
74631: ARRAY
74632: PUSH
74633: LD_INT 1
74635: ARRAY
74636: PUSH
74637: LD_STRING r
74639: EQUAL
74640: PUSH
74641: LD_VAR 0 4
74645: PUSH
74646: LD_INT 1
74648: ARRAY
74649: PUSH
74650: LD_INT 4
74652: ARRAY
74653: PUSH
74654: LD_VAR 0 2
74658: EQUAL
74659: AND
74660: ST_TO_ADDR
// end ;
74661: LD_VAR 0 3
74665: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74666: LD_INT 0
74668: PPUSH
// SetDir ( unit , d ) ;
74669: LD_VAR 0 1
74673: PPUSH
74674: LD_VAR 0 4
74678: PPUSH
74679: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74683: LD_VAR 0 1
74687: PPUSH
74688: LD_VAR 0 2
74692: PPUSH
74693: LD_VAR 0 3
74697: PPUSH
74698: LD_VAR 0 5
74702: PPUSH
74703: CALL_OW 48
// end ;
74707: LD_VAR 0 6
74711: RET
// export function ToNaturalNumber ( number ) ; begin
74712: LD_INT 0
74714: PPUSH
// result := number div 1 ;
74715: LD_ADDR_VAR 0 2
74719: PUSH
74720: LD_VAR 0 1
74724: PUSH
74725: LD_INT 1
74727: DIV
74728: ST_TO_ADDR
// if number < 0 then
74729: LD_VAR 0 1
74733: PUSH
74734: LD_INT 0
74736: LESS
74737: IFFALSE 74747
// result := 0 ;
74739: LD_ADDR_VAR 0 2
74743: PUSH
74744: LD_INT 0
74746: ST_TO_ADDR
// end ;
74747: LD_VAR 0 2
74751: RET
// export function SortByClass ( units , class ) ; var un ; begin
74752: LD_INT 0
74754: PPUSH
74755: PPUSH
// if not units or not class then
74756: LD_VAR 0 1
74760: NOT
74761: PUSH
74762: LD_VAR 0 2
74766: NOT
74767: OR
74768: IFFALSE 74772
// exit ;
74770: GO 74867
// result := [ ] ;
74772: LD_ADDR_VAR 0 3
74776: PUSH
74777: EMPTY
74778: ST_TO_ADDR
// for un in units do
74779: LD_ADDR_VAR 0 4
74783: PUSH
74784: LD_VAR 0 1
74788: PUSH
74789: FOR_IN
74790: IFFALSE 74865
// if GetClass ( un ) = class then
74792: LD_VAR 0 4
74796: PPUSH
74797: CALL_OW 257
74801: PUSH
74802: LD_VAR 0 2
74806: EQUAL
74807: IFFALSE 74834
// result := Insert ( result , 1 , un ) else
74809: LD_ADDR_VAR 0 3
74813: PUSH
74814: LD_VAR 0 3
74818: PPUSH
74819: LD_INT 1
74821: PPUSH
74822: LD_VAR 0 4
74826: PPUSH
74827: CALL_OW 2
74831: ST_TO_ADDR
74832: GO 74863
// result := Replace ( result , result + 1 , un ) ;
74834: LD_ADDR_VAR 0 3
74838: PUSH
74839: LD_VAR 0 3
74843: PPUSH
74844: LD_VAR 0 3
74848: PUSH
74849: LD_INT 1
74851: PLUS
74852: PPUSH
74853: LD_VAR 0 4
74857: PPUSH
74858: CALL_OW 1
74862: ST_TO_ADDR
74863: GO 74789
74865: POP
74866: POP
// end ;
74867: LD_VAR 0 3
74871: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74872: LD_INT 0
74874: PPUSH
74875: PPUSH
74876: PPUSH
74877: PPUSH
74878: PPUSH
74879: PPUSH
74880: PPUSH
// result := [ ] ;
74881: LD_ADDR_VAR 0 4
74885: PUSH
74886: EMPTY
74887: ST_TO_ADDR
// if x - r < 0 then
74888: LD_VAR 0 1
74892: PUSH
74893: LD_VAR 0 3
74897: MINUS
74898: PUSH
74899: LD_INT 0
74901: LESS
74902: IFFALSE 74914
// min_x := 0 else
74904: LD_ADDR_VAR 0 8
74908: PUSH
74909: LD_INT 0
74911: ST_TO_ADDR
74912: GO 74930
// min_x := x - r ;
74914: LD_ADDR_VAR 0 8
74918: PUSH
74919: LD_VAR 0 1
74923: PUSH
74924: LD_VAR 0 3
74928: MINUS
74929: ST_TO_ADDR
// if y - r < 0 then
74930: LD_VAR 0 2
74934: PUSH
74935: LD_VAR 0 3
74939: MINUS
74940: PUSH
74941: LD_INT 0
74943: LESS
74944: IFFALSE 74956
// min_y := 0 else
74946: LD_ADDR_VAR 0 7
74950: PUSH
74951: LD_INT 0
74953: ST_TO_ADDR
74954: GO 74972
// min_y := y - r ;
74956: LD_ADDR_VAR 0 7
74960: PUSH
74961: LD_VAR 0 2
74965: PUSH
74966: LD_VAR 0 3
74970: MINUS
74971: ST_TO_ADDR
// max_x := x + r ;
74972: LD_ADDR_VAR 0 9
74976: PUSH
74977: LD_VAR 0 1
74981: PUSH
74982: LD_VAR 0 3
74986: PLUS
74987: ST_TO_ADDR
// max_y := y + r ;
74988: LD_ADDR_VAR 0 10
74992: PUSH
74993: LD_VAR 0 2
74997: PUSH
74998: LD_VAR 0 3
75002: PLUS
75003: ST_TO_ADDR
// for _x = min_x to max_x do
75004: LD_ADDR_VAR 0 5
75008: PUSH
75009: DOUBLE
75010: LD_VAR 0 8
75014: DEC
75015: ST_TO_ADDR
75016: LD_VAR 0 9
75020: PUSH
75021: FOR_TO
75022: IFFALSE 75123
// for _y = min_y to max_y do
75024: LD_ADDR_VAR 0 6
75028: PUSH
75029: DOUBLE
75030: LD_VAR 0 7
75034: DEC
75035: ST_TO_ADDR
75036: LD_VAR 0 10
75040: PUSH
75041: FOR_TO
75042: IFFALSE 75119
// begin if not ValidHex ( _x , _y ) then
75044: LD_VAR 0 5
75048: PPUSH
75049: LD_VAR 0 6
75053: PPUSH
75054: CALL_OW 488
75058: NOT
75059: IFFALSE 75063
// continue ;
75061: GO 75041
// if GetResourceTypeXY ( _x , _y ) then
75063: LD_VAR 0 5
75067: PPUSH
75068: LD_VAR 0 6
75072: PPUSH
75073: CALL_OW 283
75077: IFFALSE 75117
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75079: LD_ADDR_VAR 0 4
75083: PUSH
75084: LD_VAR 0 4
75088: PPUSH
75089: LD_VAR 0 4
75093: PUSH
75094: LD_INT 1
75096: PLUS
75097: PPUSH
75098: LD_VAR 0 5
75102: PUSH
75103: LD_VAR 0 6
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PPUSH
75112: CALL_OW 1
75116: ST_TO_ADDR
// end ;
75117: GO 75041
75119: POP
75120: POP
75121: GO 75021
75123: POP
75124: POP
// end ;
75125: LD_VAR 0 4
75129: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75130: LD_INT 0
75132: PPUSH
75133: PPUSH
75134: PPUSH
75135: PPUSH
75136: PPUSH
75137: PPUSH
75138: PPUSH
75139: PPUSH
// if not units then
75140: LD_VAR 0 1
75144: NOT
75145: IFFALSE 75149
// exit ;
75147: GO 75673
// result := UnitFilter ( units , [ f_ok ] ) ;
75149: LD_ADDR_VAR 0 3
75153: PUSH
75154: LD_VAR 0 1
75158: PPUSH
75159: LD_INT 50
75161: PUSH
75162: EMPTY
75163: LIST
75164: PPUSH
75165: CALL_OW 72
75169: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75170: LD_ADDR_VAR 0 8
75174: PUSH
75175: LD_VAR 0 1
75179: PUSH
75180: LD_INT 1
75182: ARRAY
75183: PPUSH
75184: CALL_OW 255
75188: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75189: LD_ADDR_VAR 0 10
75193: PUSH
75194: LD_INT 29
75196: PUSH
75197: LD_INT 91
75199: PUSH
75200: LD_INT 49
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: LIST
75207: ST_TO_ADDR
// if not result then
75208: LD_VAR 0 3
75212: NOT
75213: IFFALSE 75217
// exit ;
75215: GO 75673
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75217: LD_ADDR_VAR 0 5
75221: PUSH
75222: LD_INT 81
75224: PUSH
75225: LD_VAR 0 8
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PPUSH
75234: CALL_OW 69
75238: ST_TO_ADDR
// for i in result do
75239: LD_ADDR_VAR 0 4
75243: PUSH
75244: LD_VAR 0 3
75248: PUSH
75249: FOR_IN
75250: IFFALSE 75671
// begin tag := GetTag ( i ) + 1 ;
75252: LD_ADDR_VAR 0 9
75256: PUSH
75257: LD_VAR 0 4
75261: PPUSH
75262: CALL_OW 110
75266: PUSH
75267: LD_INT 1
75269: PLUS
75270: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75271: LD_ADDR_VAR 0 7
75275: PUSH
75276: LD_VAR 0 4
75280: PPUSH
75281: CALL_OW 250
75285: PPUSH
75286: LD_VAR 0 4
75290: PPUSH
75291: CALL_OW 251
75295: PPUSH
75296: LD_INT 6
75298: PPUSH
75299: CALL 74872 0 3
75303: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75304: LD_VAR 0 4
75308: PPUSH
75309: CALL_OW 247
75313: PUSH
75314: LD_INT 2
75316: EQUAL
75317: PUSH
75318: LD_VAR 0 7
75322: AND
75323: PUSH
75324: LD_VAR 0 4
75328: PPUSH
75329: CALL_OW 264
75333: PUSH
75334: LD_VAR 0 10
75338: IN
75339: NOT
75340: AND
75341: IFFALSE 75380
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75343: LD_VAR 0 4
75347: PPUSH
75348: LD_VAR 0 7
75352: PUSH
75353: LD_INT 1
75355: ARRAY
75356: PUSH
75357: LD_INT 1
75359: ARRAY
75360: PPUSH
75361: LD_VAR 0 7
75365: PUSH
75366: LD_INT 1
75368: ARRAY
75369: PUSH
75370: LD_INT 2
75372: ARRAY
75373: PPUSH
75374: CALL_OW 116
75378: GO 75669
// if path > tag then
75380: LD_VAR 0 2
75384: PUSH
75385: LD_VAR 0 9
75389: GREATER
75390: IFFALSE 75598
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75392: LD_ADDR_VAR 0 6
75396: PUSH
75397: LD_VAR 0 5
75401: PPUSH
75402: LD_INT 91
75404: PUSH
75405: LD_VAR 0 4
75409: PUSH
75410: LD_INT 8
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: LIST
75417: PPUSH
75418: CALL_OW 72
75422: ST_TO_ADDR
// if nearEnemy then
75423: LD_VAR 0 6
75427: IFFALSE 75496
// begin if GetWeapon ( i ) = ru_time_lapser then
75429: LD_VAR 0 4
75433: PPUSH
75434: CALL_OW 264
75438: PUSH
75439: LD_INT 49
75441: EQUAL
75442: IFFALSE 75470
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75444: LD_VAR 0 4
75448: PPUSH
75449: LD_VAR 0 6
75453: PPUSH
75454: LD_VAR 0 4
75458: PPUSH
75459: CALL_OW 74
75463: PPUSH
75464: CALL_OW 112
75468: GO 75494
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75470: LD_VAR 0 4
75474: PPUSH
75475: LD_VAR 0 6
75479: PPUSH
75480: LD_VAR 0 4
75484: PPUSH
75485: CALL_OW 74
75489: PPUSH
75490: CALL_OW 115
// end else
75494: GO 75596
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75496: LD_VAR 0 4
75500: PPUSH
75501: LD_VAR 0 2
75505: PUSH
75506: LD_VAR 0 9
75510: ARRAY
75511: PUSH
75512: LD_INT 1
75514: ARRAY
75515: PPUSH
75516: LD_VAR 0 2
75520: PUSH
75521: LD_VAR 0 9
75525: ARRAY
75526: PUSH
75527: LD_INT 2
75529: ARRAY
75530: PPUSH
75531: CALL_OW 297
75535: PUSH
75536: LD_INT 6
75538: GREATER
75539: IFFALSE 75582
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75541: LD_VAR 0 4
75545: PPUSH
75546: LD_VAR 0 2
75550: PUSH
75551: LD_VAR 0 9
75555: ARRAY
75556: PUSH
75557: LD_INT 1
75559: ARRAY
75560: PPUSH
75561: LD_VAR 0 2
75565: PUSH
75566: LD_VAR 0 9
75570: ARRAY
75571: PUSH
75572: LD_INT 2
75574: ARRAY
75575: PPUSH
75576: CALL_OW 114
75580: GO 75596
// SetTag ( i , tag ) ;
75582: LD_VAR 0 4
75586: PPUSH
75587: LD_VAR 0 9
75591: PPUSH
75592: CALL_OW 109
// end else
75596: GO 75669
// if enemy then
75598: LD_VAR 0 5
75602: IFFALSE 75669
// begin if GetWeapon ( i ) = ru_time_lapser then
75604: LD_VAR 0 4
75608: PPUSH
75609: CALL_OW 264
75613: PUSH
75614: LD_INT 49
75616: EQUAL
75617: IFFALSE 75645
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75619: LD_VAR 0 4
75623: PPUSH
75624: LD_VAR 0 5
75628: PPUSH
75629: LD_VAR 0 4
75633: PPUSH
75634: CALL_OW 74
75638: PPUSH
75639: CALL_OW 112
75643: GO 75669
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75645: LD_VAR 0 4
75649: PPUSH
75650: LD_VAR 0 5
75654: PPUSH
75655: LD_VAR 0 4
75659: PPUSH
75660: CALL_OW 74
75664: PPUSH
75665: CALL_OW 115
// end ; end ;
75669: GO 75249
75671: POP
75672: POP
// end ;
75673: LD_VAR 0 3
75677: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75678: LD_INT 0
75680: PPUSH
75681: PPUSH
75682: PPUSH
// if not unit or IsInUnit ( unit ) then
75683: LD_VAR 0 1
75687: NOT
75688: PUSH
75689: LD_VAR 0 1
75693: PPUSH
75694: CALL_OW 310
75698: OR
75699: IFFALSE 75703
// exit ;
75701: GO 75794
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75703: LD_ADDR_VAR 0 4
75707: PUSH
75708: LD_VAR 0 1
75712: PPUSH
75713: CALL_OW 250
75717: PPUSH
75718: LD_VAR 0 2
75722: PPUSH
75723: LD_INT 1
75725: PPUSH
75726: CALL_OW 272
75730: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75731: LD_ADDR_VAR 0 5
75735: PUSH
75736: LD_VAR 0 1
75740: PPUSH
75741: CALL_OW 251
75745: PPUSH
75746: LD_VAR 0 2
75750: PPUSH
75751: LD_INT 1
75753: PPUSH
75754: CALL_OW 273
75758: ST_TO_ADDR
// if ValidHex ( x , y ) then
75759: LD_VAR 0 4
75763: PPUSH
75764: LD_VAR 0 5
75768: PPUSH
75769: CALL_OW 488
75773: IFFALSE 75794
// ComTurnXY ( unit , x , y ) ;
75775: LD_VAR 0 1
75779: PPUSH
75780: LD_VAR 0 4
75784: PPUSH
75785: LD_VAR 0 5
75789: PPUSH
75790: CALL_OW 118
// end ;
75794: LD_VAR 0 3
75798: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75799: LD_INT 0
75801: PPUSH
75802: PPUSH
// result := false ;
75803: LD_ADDR_VAR 0 3
75807: PUSH
75808: LD_INT 0
75810: ST_TO_ADDR
// if not units then
75811: LD_VAR 0 2
75815: NOT
75816: IFFALSE 75820
// exit ;
75818: GO 75865
// for i in units do
75820: LD_ADDR_VAR 0 4
75824: PUSH
75825: LD_VAR 0 2
75829: PUSH
75830: FOR_IN
75831: IFFALSE 75863
// if See ( side , i ) then
75833: LD_VAR 0 1
75837: PPUSH
75838: LD_VAR 0 4
75842: PPUSH
75843: CALL_OW 292
75847: IFFALSE 75861
// begin result := true ;
75849: LD_ADDR_VAR 0 3
75853: PUSH
75854: LD_INT 1
75856: ST_TO_ADDR
// exit ;
75857: POP
75858: POP
75859: GO 75865
// end ;
75861: GO 75830
75863: POP
75864: POP
// end ;
75865: LD_VAR 0 3
75869: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75870: LD_INT 0
75872: PPUSH
75873: PPUSH
75874: PPUSH
75875: PPUSH
// if not unit or not points then
75876: LD_VAR 0 1
75880: NOT
75881: PUSH
75882: LD_VAR 0 2
75886: NOT
75887: OR
75888: IFFALSE 75892
// exit ;
75890: GO 75982
// dist := 99999 ;
75892: LD_ADDR_VAR 0 5
75896: PUSH
75897: LD_INT 99999
75899: ST_TO_ADDR
// for i in points do
75900: LD_ADDR_VAR 0 4
75904: PUSH
75905: LD_VAR 0 2
75909: PUSH
75910: FOR_IN
75911: IFFALSE 75980
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75913: LD_ADDR_VAR 0 6
75917: PUSH
75918: LD_VAR 0 1
75922: PPUSH
75923: LD_VAR 0 4
75927: PUSH
75928: LD_INT 1
75930: ARRAY
75931: PPUSH
75932: LD_VAR 0 4
75936: PUSH
75937: LD_INT 2
75939: ARRAY
75940: PPUSH
75941: CALL_OW 297
75945: ST_TO_ADDR
// if tmpDist < dist then
75946: LD_VAR 0 6
75950: PUSH
75951: LD_VAR 0 5
75955: LESS
75956: IFFALSE 75978
// begin result := i ;
75958: LD_ADDR_VAR 0 3
75962: PUSH
75963: LD_VAR 0 4
75967: ST_TO_ADDR
// dist := tmpDist ;
75968: LD_ADDR_VAR 0 5
75972: PUSH
75973: LD_VAR 0 6
75977: ST_TO_ADDR
// end ; end ;
75978: GO 75910
75980: POP
75981: POP
// end ;
75982: LD_VAR 0 3
75986: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75987: LD_INT 0
75989: PPUSH
// uc_side := side ;
75990: LD_ADDR_OWVAR 20
75994: PUSH
75995: LD_VAR 0 1
75999: ST_TO_ADDR
// uc_nation := 3 ;
76000: LD_ADDR_OWVAR 21
76004: PUSH
76005: LD_INT 3
76007: ST_TO_ADDR
// vc_chassis := 25 ;
76008: LD_ADDR_OWVAR 37
76012: PUSH
76013: LD_INT 25
76015: ST_TO_ADDR
// vc_engine := engine_siberite ;
76016: LD_ADDR_OWVAR 39
76020: PUSH
76021: LD_INT 3
76023: ST_TO_ADDR
// vc_control := control_computer ;
76024: LD_ADDR_OWVAR 38
76028: PUSH
76029: LD_INT 3
76031: ST_TO_ADDR
// vc_weapon := 59 ;
76032: LD_ADDR_OWVAR 40
76036: PUSH
76037: LD_INT 59
76039: ST_TO_ADDR
// result := CreateVehicle ;
76040: LD_ADDR_VAR 0 5
76044: PUSH
76045: CALL_OW 45
76049: ST_TO_ADDR
// SetDir ( result , d ) ;
76050: LD_VAR 0 5
76054: PPUSH
76055: LD_VAR 0 4
76059: PPUSH
76060: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76064: LD_VAR 0 5
76068: PPUSH
76069: LD_VAR 0 2
76073: PPUSH
76074: LD_VAR 0 3
76078: PPUSH
76079: LD_INT 0
76081: PPUSH
76082: CALL_OW 48
// end ;
76086: LD_VAR 0 5
76090: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76091: LD_INT 0
76093: PPUSH
76094: PPUSH
76095: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76096: LD_ADDR_VAR 0 2
76100: PUSH
76101: LD_INT 0
76103: PUSH
76104: LD_INT 0
76106: PUSH
76107: LD_INT 0
76109: PUSH
76110: LD_INT 0
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76119: LD_VAR 0 1
76123: NOT
76124: PUSH
76125: LD_VAR 0 1
76129: PPUSH
76130: CALL_OW 264
76134: PUSH
76135: LD_INT 12
76137: PUSH
76138: LD_INT 51
76140: PUSH
76141: LD_INT 32
76143: PUSH
76144: LD_INT 89
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: IN
76153: NOT
76154: OR
76155: IFFALSE 76159
// exit ;
76157: GO 76257
// for i := 1 to 3 do
76159: LD_ADDR_VAR 0 3
76163: PUSH
76164: DOUBLE
76165: LD_INT 1
76167: DEC
76168: ST_TO_ADDR
76169: LD_INT 3
76171: PUSH
76172: FOR_TO
76173: IFFALSE 76255
// begin tmp := GetCargo ( cargo , i ) ;
76175: LD_ADDR_VAR 0 4
76179: PUSH
76180: LD_VAR 0 1
76184: PPUSH
76185: LD_VAR 0 3
76189: PPUSH
76190: CALL_OW 289
76194: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76195: LD_ADDR_VAR 0 2
76199: PUSH
76200: LD_VAR 0 2
76204: PPUSH
76205: LD_VAR 0 3
76209: PPUSH
76210: LD_VAR 0 4
76214: PPUSH
76215: CALL_OW 1
76219: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76220: LD_ADDR_VAR 0 2
76224: PUSH
76225: LD_VAR 0 2
76229: PPUSH
76230: LD_INT 4
76232: PPUSH
76233: LD_VAR 0 2
76237: PUSH
76238: LD_INT 4
76240: ARRAY
76241: PUSH
76242: LD_VAR 0 4
76246: PLUS
76247: PPUSH
76248: CALL_OW 1
76252: ST_TO_ADDR
// end ;
76253: GO 76172
76255: POP
76256: POP
// end ;
76257: LD_VAR 0 2
76261: RET
// export function Length ( array ) ; begin
76262: LD_INT 0
76264: PPUSH
// result := array + 0 ;
76265: LD_ADDR_VAR 0 2
76269: PUSH
76270: LD_VAR 0 1
76274: PUSH
76275: LD_INT 0
76277: PLUS
76278: ST_TO_ADDR
// end ;
76279: LD_VAR 0 2
76283: RET
// export function PrepareArray ( array ) ; begin
76284: LD_INT 0
76286: PPUSH
// result := array diff 0 ;
76287: LD_ADDR_VAR 0 2
76291: PUSH
76292: LD_VAR 0 1
76296: PUSH
76297: LD_INT 0
76299: DIFF
76300: ST_TO_ADDR
// if not result [ 1 ] then
76301: LD_VAR 0 2
76305: PUSH
76306: LD_INT 1
76308: ARRAY
76309: NOT
76310: IFFALSE 76330
// result := Delete ( result , 1 ) ;
76312: LD_ADDR_VAR 0 2
76316: PUSH
76317: LD_VAR 0 2
76321: PPUSH
76322: LD_INT 1
76324: PPUSH
76325: CALL_OW 3
76329: ST_TO_ADDR
// end ;
76330: LD_VAR 0 2
76334: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76335: LD_INT 0
76337: PPUSH
76338: PPUSH
76339: PPUSH
76340: PPUSH
// sibRocketRange := 25 ;
76341: LD_ADDR_VAR 0 6
76345: PUSH
76346: LD_INT 25
76348: ST_TO_ADDR
// result := false ;
76349: LD_ADDR_VAR 0 4
76353: PUSH
76354: LD_INT 0
76356: ST_TO_ADDR
// for i := 0 to 5 do
76357: LD_ADDR_VAR 0 5
76361: PUSH
76362: DOUBLE
76363: LD_INT 0
76365: DEC
76366: ST_TO_ADDR
76367: LD_INT 5
76369: PUSH
76370: FOR_TO
76371: IFFALSE 76438
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76373: LD_VAR 0 1
76377: PPUSH
76378: LD_VAR 0 5
76382: PPUSH
76383: LD_VAR 0 6
76387: PPUSH
76388: CALL_OW 272
76392: PPUSH
76393: LD_VAR 0 2
76397: PPUSH
76398: LD_VAR 0 5
76402: PPUSH
76403: LD_VAR 0 6
76407: PPUSH
76408: CALL_OW 273
76412: PPUSH
76413: LD_VAR 0 3
76417: PPUSH
76418: CALL_OW 309
76422: IFFALSE 76436
// begin result := true ;
76424: LD_ADDR_VAR 0 4
76428: PUSH
76429: LD_INT 1
76431: ST_TO_ADDR
// exit ;
76432: POP
76433: POP
76434: GO 76440
// end ;
76436: GO 76370
76438: POP
76439: POP
// end ;
76440: LD_VAR 0 4
76444: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76445: LD_INT 0
76447: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76448: LD_VAR 0 1
76452: PPUSH
76453: LD_VAR 0 2
76457: PPUSH
76458: LD_INT 0
76460: PPUSH
76461: LD_INT 0
76463: PPUSH
76464: LD_INT 1
76466: PPUSH
76467: LD_INT 0
76469: PPUSH
76470: CALL_OW 587
// end ; end_of_file
76474: LD_VAR 0 3
76478: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76479: LD_VAR 0 1
76483: PUSH
76484: LD_INT 200
76486: DOUBLE
76487: GREATEREQUAL
76488: IFFALSE 76496
76490: LD_INT 299
76492: DOUBLE
76493: LESSEQUAL
76494: IFTRUE 76498
76496: GO 76530
76498: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76499: LD_VAR 0 1
76503: PPUSH
76504: LD_VAR 0 2
76508: PPUSH
76509: LD_VAR 0 3
76513: PPUSH
76514: LD_VAR 0 4
76518: PPUSH
76519: LD_VAR 0 5
76523: PPUSH
76524: CALL 15351 0 5
76528: GO 76607
76530: LD_INT 300
76532: DOUBLE
76533: GREATEREQUAL
76534: IFFALSE 76542
76536: LD_INT 399
76538: DOUBLE
76539: LESSEQUAL
76540: IFTRUE 76544
76542: GO 76606
76544: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76545: LD_VAR 0 1
76549: PPUSH
76550: LD_VAR 0 2
76554: PPUSH
76555: LD_VAR 0 3
76559: PPUSH
76560: LD_VAR 0 4
76564: PPUSH
76565: LD_VAR 0 5
76569: PPUSH
76570: LD_VAR 0 6
76574: PPUSH
76575: LD_VAR 0 7
76579: PPUSH
76580: LD_VAR 0 8
76584: PPUSH
76585: LD_VAR 0 9
76589: PPUSH
76590: LD_VAR 0 10
76594: PPUSH
76595: LD_VAR 0 11
76599: PPUSH
76600: CALL 31767 0 11
76604: GO 76607
76606: POP
// end ;
76607: PPOPN 11
76609: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76610: LD_VAR 0 1
76614: PPUSH
76615: LD_VAR 0 2
76619: PPUSH
76620: LD_VAR 0 3
76624: PPUSH
76625: LD_VAR 0 4
76629: PPUSH
76630: LD_VAR 0 5
76634: PPUSH
76635: CALL 15087 0 5
// end ; end_of_file
76639: PPOPN 5
76641: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76642: LD_VAR 0 1
76646: PPUSH
76647: LD_VAR 0 2
76651: PPUSH
76652: LD_VAR 0 3
76656: PPUSH
76657: LD_VAR 0 4
76661: PPUSH
76662: LD_VAR 0 5
76666: PPUSH
76667: LD_VAR 0 6
76671: PPUSH
76672: CALL 19419 0 6
// end ;
76676: PPOPN 6
76678: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76679: LD_INT 0
76681: PPUSH
// begin if not units then
76682: LD_VAR 0 1
76686: NOT
76687: IFFALSE 76691
// exit ;
76689: GO 76691
// end ;
76691: PPOPN 7
76693: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76694: CALL 19323 0 0
// end ;
76698: PPOPN 1
76700: END
