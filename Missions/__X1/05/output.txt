// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 3012 0 0
// Action ;
  39: CALL 8432 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 35560 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 35560 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 35560 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 35560 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 35560 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 35560 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 35560 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 35560 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 35560 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 35560 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 35560 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 35560 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 35560 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// if HexInfo ( 3 , 2 ) then
2189: LD_INT 3
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: CALL_OW 428
2199: IFFALSE 2224
// ComMoveXY ( HexInfo ( 3 , 2 ) , 18 , 18 ) else
2201: LD_INT 3
2203: PPUSH
2204: LD_INT 2
2206: PPUSH
2207: CALL_OW 428
2211: PPUSH
2212: LD_INT 18
2214: PPUSH
2215: LD_INT 18
2217: PPUSH
2218: CALL_OW 111
2222: GO 2234
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2224: LD_INT 1
2226: PPUSH
2227: LD_INT 14
2229: PPUSH
2230: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2234: LD_INT 35
2236: PPUSH
2237: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2241: LD_INT 3
2243: PPUSH
2244: LD_INT 2
2246: PPUSH
2247: CALL_OW 428
2251: NOT
2252: IFFALSE 2234
// tmp := [ ] ;
2254: LD_ADDR_VAR 0 4
2258: PUSH
2259: EMPTY
2260: ST_TO_ADDR
// uc_side := 5 ;
2261: LD_ADDR_OWVAR 20
2265: PUSH
2266: LD_INT 5
2268: ST_TO_ADDR
// uc_nation := 2 ;
2269: LD_ADDR_OWVAR 21
2273: PUSH
2274: LD_INT 2
2276: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2277: LD_ADDR_EXP 33
2281: PUSH
2282: LD_STRING Aviradze_L
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_VAR 0 2
2295: PPUSH
2296: CALL 35560 0 3
2300: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2301: LD_EXP 33
2305: PPUSH
2306: LD_INT 2
2308: PPUSH
2309: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2313: LD_EXP 33
2317: PPUSH
2318: LD_INT 14
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2328: LD_EXP 33
2332: PPUSH
2333: LD_INT 25
2335: PPUSH
2336: LD_INT 19
2338: PPUSH
2339: CALL_OW 111
// AddComHold ( Aviradze ) ;
2343: LD_EXP 33
2347: PPUSH
2348: CALL_OW 200
// tmp := [ Aviradze ] ;
2352: LD_ADDR_VAR 0 4
2356: PUSH
2357: LD_EXP 33
2361: PUSH
2362: EMPTY
2363: LIST
2364: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2365: LD_INT 70
2367: PPUSH
2368: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2372: LD_STRING Ibrahim_L
2374: PPUSH
2375: LD_EXP 1
2379: NOT
2380: PPUSH
2381: LD_VAR 0 2
2385: PPUSH
2386: CALL 35560 0 3
2390: IFFALSE 2490
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2392: LD_ADDR_EXP 24
2396: PUSH
2397: LD_STRING Ibrahim_L
2399: PPUSH
2400: LD_EXP 1
2404: NOT
2405: PPUSH
2406: LD_VAR 0 2
2410: PPUSH
2411: CALL 35560 0 3
2415: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2416: LD_EXP 24
2420: PPUSH
2421: LD_INT 2
2423: PPUSH
2424: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2428: LD_EXP 24
2432: PPUSH
2433: LD_INT 14
2435: PPUSH
2436: LD_INT 0
2438: PPUSH
2439: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2443: LD_EXP 24
2447: PPUSH
2448: LD_INT 25
2450: PPUSH
2451: LD_INT 19
2453: PPUSH
2454: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2458: LD_EXP 24
2462: PPUSH
2463: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2467: LD_ADDR_VAR 0 4
2471: PUSH
2472: LD_VAR 0 4
2476: PUSH
2477: LD_EXP 24
2481: ADD
2482: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2483: LD_INT 70
2485: PPUSH
2486: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2490: LD_STRING Kaia_L
2492: PPUSH
2493: LD_EXP 1
2497: NOT
2498: PPUSH
2499: LD_VAR 0 2
2503: PPUSH
2504: CALL 35560 0 3
2508: IFFALSE 2608
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2510: LD_ADDR_EXP 26
2514: PUSH
2515: LD_STRING Kaia_L
2517: PPUSH
2518: LD_EXP 1
2522: NOT
2523: PPUSH
2524: LD_VAR 0 2
2528: PPUSH
2529: CALL 35560 0 3
2533: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2534: LD_EXP 26
2538: PPUSH
2539: LD_INT 2
2541: PPUSH
2542: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2546: LD_EXP 26
2550: PPUSH
2551: LD_INT 14
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2561: LD_EXP 26
2565: PPUSH
2566: LD_INT 25
2568: PPUSH
2569: LD_INT 19
2571: PPUSH
2572: CALL_OW 111
// AddComHold ( Kaia ) ;
2576: LD_EXP 26
2580: PPUSH
2581: CALL_OW 200
// tmp := tmp ^ Kaia ;
2585: LD_ADDR_VAR 0 4
2589: PUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_EXP 26
2599: ADD
2600: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2601: LD_INT 70
2603: PPUSH
2604: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2608: LD_STRING Kamil_L
2610: PPUSH
2611: LD_EXP 1
2615: NOT
2616: PPUSH
2617: LD_VAR 0 2
2621: PPUSH
2622: CALL 35560 0 3
2626: IFFALSE 2726
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2628: LD_ADDR_EXP 25
2632: PUSH
2633: LD_STRING Kamil_L
2635: PPUSH
2636: LD_EXP 1
2640: NOT
2641: PPUSH
2642: LD_VAR 0 2
2646: PPUSH
2647: CALL 35560 0 3
2651: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2652: LD_EXP 25
2656: PPUSH
2657: LD_INT 2
2659: PPUSH
2660: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2664: LD_EXP 25
2668: PPUSH
2669: LD_INT 14
2671: PPUSH
2672: LD_INT 0
2674: PPUSH
2675: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2679: LD_EXP 25
2683: PPUSH
2684: LD_INT 25
2686: PPUSH
2687: LD_INT 19
2689: PPUSH
2690: CALL_OW 111
// AddComHold ( Kamil ) ;
2694: LD_EXP 25
2698: PPUSH
2699: CALL_OW 200
// tmp := tmp ^ Kamil ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: LD_VAR 0 4
2712: PUSH
2713: LD_EXP 25
2717: ADD
2718: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2719: LD_INT 70
2721: PPUSH
2722: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2726: LD_STRING Sophia_L
2728: PPUSH
2729: LD_EXP 1
2733: NOT
2734: PPUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: CALL 35560 0 3
2744: IFFALSE 2844
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2746: LD_ADDR_EXP 27
2750: PUSH
2751: LD_STRING Sophia_L
2753: PPUSH
2754: LD_EXP 1
2758: NOT
2759: PPUSH
2760: LD_VAR 0 2
2764: PPUSH
2765: CALL 35560 0 3
2769: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2770: LD_EXP 27
2774: PPUSH
2775: LD_INT 2
2777: PPUSH
2778: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2782: LD_EXP 27
2786: PPUSH
2787: LD_INT 14
2789: PPUSH
2790: LD_INT 0
2792: PPUSH
2793: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2797: LD_EXP 27
2801: PPUSH
2802: LD_INT 25
2804: PPUSH
2805: LD_INT 19
2807: PPUSH
2808: CALL_OW 111
// AddComHold ( Sophia ) ;
2812: LD_EXP 27
2816: PPUSH
2817: CALL_OW 200
// tmp := tmp ^ Sophia ;
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: LD_VAR 0 4
2830: PUSH
2831: LD_EXP 27
2835: ADD
2836: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2837: LD_INT 70
2839: PPUSH
2840: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2844: LD_ADDR_VAR 0 5
2848: PUSH
2849: LD_STRING 04_1_others_L
2851: PPUSH
2852: CALL_OW 31
2856: ST_TO_ADDR
// if tmp2 then
2857: LD_VAR 0 5
2861: IFFALSE 2958
// for i in tmp2 do
2863: LD_ADDR_VAR 0 3
2867: PUSH
2868: LD_VAR 0 5
2872: PUSH
2873: FOR_IN
2874: IFFALSE 2956
// begin SetDir ( i , 2 ) ;
2876: LD_VAR 0 3
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2888: LD_VAR 0 3
2892: PPUSH
2893: LD_INT 14
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2903: LD_ADDR_EXP 34
2907: PUSH
2908: LD_EXP 34
2912: PPUSH
2913: LD_EXP 34
2917: PUSH
2918: LD_INT 1
2920: PLUS
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: CALL_OW 1
2931: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 17
2939: PPUSH
2940: LD_INT 14
2942: PPUSH
2943: CALL_OW 111
// wait ( 0 0$2 ) ;
2947: LD_INT 70
2949: PPUSH
2950: CALL_OW 67
// end ;
2954: GO 2873
2956: POP
2957: POP
// for i in tmp union tmp2 do
2958: LD_ADDR_VAR 0 3
2962: PUSH
2963: LD_VAR 0 4
2967: PUSH
2968: LD_VAR 0 5
2972: UNION
2973: PUSH
2974: FOR_IN
2975: IFFALSE 3005
// begin SetSide ( i , 2 ) ;
2977: LD_VAR 0 3
2981: PPUSH
2982: LD_INT 2
2984: PPUSH
2985: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2989: LD_VAR 0 3
2993: PPUSH
2994: LD_EXP 21
2998: PPUSH
2999: CALL_OW 112
// end ;
3003: GO 2974
3005: POP
3006: POP
// end ; end_of_file
3007: LD_VAR 0 1
3011: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3012: LD_INT 0
3014: PPUSH
3015: PPUSH
3016: PPUSH
// uc_side := 3 ;
3017: LD_ADDR_OWVAR 20
3021: PUSH
3022: LD_INT 3
3024: ST_TO_ADDR
// uc_nation := 3 ;
3025: LD_ADDR_OWVAR 21
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3033: LD_ADDR_EXP 37
3037: PUSH
3038: EMPTY
3039: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3040: LD_ADDR_EXP 38
3044: PUSH
3045: EMPTY
3046: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3047: LD_ADDR_EXP 41
3051: PUSH
3052: EMPTY
3053: ST_TO_ADDR
// for i := 1 to 2 do
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: DOUBLE
3060: LD_INT 1
3062: DEC
3063: ST_TO_ADDR
3064: LD_INT 2
3066: PUSH
3067: FOR_TO
3068: IFFALSE 3207
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3070: LD_INT 0
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: LD_INT 3
3078: PUSH
3079: LD_INT 4
3081: PUSH
3082: LD_INT 5
3084: PUSH
3085: LD_INT 6
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_OWVAR 67
3098: ARRAY
3099: PPUSH
3100: CALL_OW 380
// un := CreateHuman ;
3104: LD_ADDR_VAR 0 3
3108: PUSH
3109: CALL_OW 44
3113: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3114: LD_ADDR_EXP 37
3118: PUSH
3119: LD_EXP 37
3123: PPUSH
3124: LD_EXP 37
3128: PUSH
3129: LD_INT 1
3131: PLUS
3132: PPUSH
3133: LD_VAR 0 3
3137: PPUSH
3138: CALL_OW 1
3142: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3143: LD_VAR 0 3
3147: PPUSH
3148: LD_INT 100
3150: PPUSH
3151: LD_INT 63
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3164: LD_VAR 0 3
3168: PPUSH
3169: LD_INT 97
3171: PPUSH
3172: LD_INT 64
3174: PPUSH
3175: CALL_OW 428
3179: PUSH
3180: LD_INT 98
3182: PPUSH
3183: LD_INT 58
3185: PPUSH
3186: CALL_OW 428
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_VAR 0 2
3199: ARRAY
3200: PPUSH
3201: CALL_OW 120
// end ;
3205: GO 3067
3207: POP
3208: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3209: LD_INT 51
3211: PPUSH
3212: LD_INT 77
3214: PPUSH
3215: CALL_OW 428
3219: PPUSH
3220: CALL_OW 274
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: LD_INT 120
3230: PPUSH
3231: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3235: LD_INT 10
3237: PPUSH
3238: CALL_OW 274
3242: PPUSH
3243: LD_INT 2
3245: PPUSH
3246: LD_INT 300
3248: PPUSH
3249: CALL_OW 277
// for i := 1 to 2 do
3253: LD_ADDR_VAR 0 2
3257: PUSH
3258: DOUBLE
3259: LD_INT 1
3261: DEC
3262: ST_TO_ADDR
3263: LD_INT 2
3265: PUSH
3266: FOR_TO
3267: IFFALSE 3385
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3269: LD_INT 0
3271: PPUSH
3272: LD_INT 1
3274: PPUSH
3275: LD_INT 3
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: LD_INT 5
3283: PUSH
3284: LD_INT 6
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_OWVAR 67
3297: ARRAY
3298: PPUSH
3299: CALL_OW 380
// un := CreateHuman ;
3303: LD_ADDR_VAR 0 3
3307: PUSH
3308: CALL_OW 44
3312: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3313: LD_ADDR_EXP 38
3317: PUSH
3318: LD_EXP 38
3322: PPUSH
3323: LD_EXP 38
3327: PUSH
3328: LD_INT 1
3330: PLUS
3331: PPUSH
3332: LD_VAR 0 3
3336: PPUSH
3337: CALL_OW 1
3341: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3342: LD_VAR 0 3
3346: PPUSH
3347: LD_INT 198
3349: PPUSH
3350: LD_INT 106
3352: PPUSH
3353: CALL_OW 428
3357: PUSH
3358: LD_INT 205
3360: PPUSH
3361: LD_INT 114
3363: PPUSH
3364: CALL_OW 428
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_VAR 0 2
3377: ARRAY
3378: PPUSH
3379: CALL_OW 52
// end ;
3383: GO 3266
3385: POP
3386: POP
// for i := 1 to 2 do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: DOUBLE
3393: LD_INT 1
3395: DEC
3396: ST_TO_ADDR
3397: LD_INT 2
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3478
// begin PrepareHuman ( false , 2 , 3 ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 2
3408: PPUSH
3409: LD_INT 3
3411: PPUSH
3412: CALL_OW 380
// un := CreateHuman ;
3416: LD_ADDR_VAR 0 3
3420: PUSH
3421: CALL_OW 44
3425: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3426: LD_ADDR_EXP 38
3430: PUSH
3431: LD_EXP 38
3435: PPUSH
3436: LD_EXP 38
3440: PUSH
3441: LD_INT 1
3443: PLUS
3444: PPUSH
3445: LD_VAR 0 3
3449: PPUSH
3450: CALL_OW 1
3454: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: LD_INT 204
3462: PPUSH
3463: LD_INT 108
3465: PPUSH
3466: LD_INT 2
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL_OW 50
// end ;
3476: GO 3400
3478: POP
3479: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: DOUBLE
3486: LD_INT 1
3488: DEC
3489: ST_TO_ADDR
3490: LD_INT 4
3492: PUSH
3493: LD_INT 5
3495: PUSH
3496: LD_INT 6
3498: PUSH
3499: LD_INT 7
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: PUSH
3508: LD_OWVAR 67
3512: ARRAY
3513: PUSH
3514: FOR_TO
3515: IFFALSE 3661
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3517: LD_INT 0
3519: PPUSH
3520: LD_INT 1
3522: PUSH
3523: LD_INT 1
3525: PUSH
3526: LD_INT 2
3528: PUSH
3529: LD_INT 4
3531: PUSH
3532: LD_INT 1
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_INT 5
3547: PPUSH
3548: CALL_OW 12
3552: ARRAY
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: LD_INT 5
3562: PUSH
3563: LD_INT 5
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: PUSH
3572: LD_OWVAR 67
3576: ARRAY
3577: PPUSH
3578: CALL_OW 380
// un := CreateHuman ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: CALL_OW 44
3591: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3592: LD_VAR 0 3
3596: PPUSH
3597: LD_INT 10
3599: PPUSH
3600: LD_INT 0
3602: PPUSH
3603: CALL 72167 0 3
3607: IFFALSE 3659
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3609: LD_ADDR_EXP 39
3613: PUSH
3614: LD_EXP 39
3618: PPUSH
3619: LD_EXP 39
3623: PUSH
3624: LD_INT 1
3626: PLUS
3627: PPUSH
3628: LD_VAR 0 3
3632: PPUSH
3633: CALL_OW 1
3637: ST_TO_ADDR
// if Prob ( 50 ) then
3638: LD_INT 50
3640: PPUSH
3641: CALL_OW 13
3645: IFFALSE 3659
// ForceSleep ( un , true ) ;
3647: LD_VAR 0 3
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: CALL_OW 585
// end ; end ;
3659: GO 3514
3661: POP
3662: POP
// for i := 1 to 3 do
3663: LD_ADDR_VAR 0 2
3667: PUSH
3668: DOUBLE
3669: LD_INT 1
3671: DEC
3672: ST_TO_ADDR
3673: LD_INT 3
3675: PUSH
3676: FOR_TO
3677: IFFALSE 3771
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 1
3684: PPUSH
3685: LD_INT 3
3687: PUSH
3688: LD_INT 4
3690: PUSH
3691: LD_INT 4
3693: PUSH
3694: LD_INT 5
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: PUSH
3703: LD_OWVAR 67
3707: ARRAY
3708: PPUSH
3709: CALL_OW 380
// un := CreateHuman ;
3713: LD_ADDR_VAR 0 3
3717: PUSH
3718: CALL_OW 44
3722: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3723: LD_VAR 0 3
3727: PPUSH
3728: LD_INT 11
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 72167 0 3
3738: IFFALSE 3769
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3740: LD_ADDR_EXP 39
3744: PUSH
3745: LD_EXP 39
3749: PPUSH
3750: LD_EXP 39
3754: PUSH
3755: LD_INT 1
3757: PLUS
3758: PPUSH
3759: LD_VAR 0 3
3763: PPUSH
3764: CALL_OW 1
3768: ST_TO_ADDR
// end ;
3769: GO 3676
3771: POP
3772: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 5
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: LD_INT 7
3791: PUSH
3792: LD_INT 8
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: PUSH
3807: FOR_TO
3808: IFFALSE 3954
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3810: LD_INT 0
3812: PPUSH
3813: LD_INT 1
3815: PUSH
3816: LD_INT 1
3818: PUSH
3819: LD_INT 2
3821: PUSH
3822: LD_INT 4
3824: PUSH
3825: LD_INT 1
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 5
3840: PPUSH
3841: CALL_OW 12
3845: ARRAY
3846: PPUSH
3847: LD_INT 3
3849: PUSH
3850: LD_INT 4
3852: PUSH
3853: LD_INT 5
3855: PUSH
3856: LD_INT 5
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: LD_OWVAR 67
3869: ARRAY
3870: PPUSH
3871: CALL_OW 380
// un := CreateHuman ;
3875: LD_ADDR_VAR 0 3
3879: PUSH
3880: CALL_OW 44
3884: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3885: LD_VAR 0 3
3889: PPUSH
3890: LD_INT 15
3892: PPUSH
3893: LD_INT 0
3895: PPUSH
3896: CALL 72167 0 3
3900: IFFALSE 3952
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3902: LD_ADDR_EXP 40
3906: PUSH
3907: LD_EXP 40
3911: PPUSH
3912: LD_EXP 40
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: PPUSH
3921: LD_VAR 0 3
3925: PPUSH
3926: CALL_OW 1
3930: ST_TO_ADDR
// if Prob ( 50 ) then
3931: LD_INT 50
3933: PPUSH
3934: CALL_OW 13
3938: IFFALSE 3952
// ForceSleep ( un , true ) ;
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: CALL_OW 585
// end ; end ;
3952: GO 3807
3954: POP
3955: POP
// end ;
3956: LD_VAR 0 1
3960: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
// uc_side := 3 ;
3966: LD_ADDR_OWVAR 20
3970: PUSH
3971: LD_INT 3
3973: ST_TO_ADDR
// uc_nation := 3 ;
3974: LD_ADDR_OWVAR 21
3978: PUSH
3979: LD_INT 3
3981: ST_TO_ADDR
// for i := 1 to 6 do
3982: LD_ADDR_VAR 0 2
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4075
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 1
4003: PUSH
4004: LD_INT 4
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 2
4016: PPUSH
4017: CALL_OW 12
4021: ARRAY
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL_OW 380
// un := CreateHuman ;
4030: LD_ADDR_VAR 0 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 54
4047: PPUSH
4048: LD_INT 88
4050: PPUSH
4051: LD_INT 12
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 50
// SetLives ( un , 1 ) ;
4061: LD_VAR 0 3
4065: PPUSH
4066: LD_INT 1
4068: PPUSH
4069: CALL_OW 234
// end ;
4073: GO 3995
4075: POP
4076: POP
// uc_side := 3 ;
4077: LD_ADDR_OWVAR 20
4081: PUSH
4082: LD_INT 3
4084: ST_TO_ADDR
// uc_nation := 0 ;
4085: LD_ADDR_OWVAR 21
4089: PUSH
4090: LD_INT 0
4092: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4093: LD_ADDR_EXP 42
4097: PUSH
4098: EMPTY
4099: ST_TO_ADDR
// apeEngGroup := [ ] ;
4100: LD_ADDR_EXP 43
4104: PUSH
4105: EMPTY
4106: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4107: LD_ADDR_VAR 0 2
4111: PUSH
4112: DOUBLE
4113: LD_INT 1
4115: DEC
4116: ST_TO_ADDR
4117: LD_INT 4
4119: PUSH
4120: LD_INT 5
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: LD_INT 7
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: PUSH
4135: LD_OWVAR 67
4139: ARRAY
4140: PUSH
4141: FOR_TO
4142: IFFALSE 4260
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 15
4149: PPUSH
4150: LD_INT 3
4152: PUSH
4153: LD_INT 4
4155: PUSH
4156: LD_INT 5
4158: PUSH
4159: LD_INT 6
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: PUSH
4168: LD_OWVAR 67
4172: ARRAY
4173: PPUSH
4174: CALL_OW 380
// un := CreateHuman ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: CALL_OW 44
4187: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4188: LD_ADDR_EXP 42
4192: PUSH
4193: LD_EXP 42
4197: PPUSH
4198: LD_EXP 42
4202: PUSH
4203: LD_INT 1
4205: PLUS
4206: PPUSH
4207: LD_VAR 0 3
4211: PPUSH
4212: CALL_OW 1
4216: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4217: LD_VAR 0 3
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: LD_INT 5
4227: PPUSH
4228: CALL_OW 12
4232: PPUSH
4233: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: LD_INT 56
4244: PPUSH
4245: LD_INT 82
4247: PPUSH
4248: LD_INT 6
4250: PPUSH
4251: LD_INT 0
4253: PPUSH
4254: CALL_OW 50
// end ;
4258: GO 4141
4260: POP
4261: POP
// for i := 1 to 2 do
4262: LD_ADDR_VAR 0 2
4266: PUSH
4267: DOUBLE
4268: LD_INT 1
4270: DEC
4271: ST_TO_ADDR
4272: LD_INT 2
4274: PUSH
4275: FOR_TO
4276: IFFALSE 4352
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4278: LD_INT 0
4280: PPUSH
4281: LD_INT 16
4283: PPUSH
4284: LD_INT 4
4286: PPUSH
4287: CALL_OW 380
// un := CreateHuman ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4301: LD_ADDR_EXP 43
4305: PUSH
4306: LD_EXP 43
4310: PPUSH
4311: LD_EXP 43
4315: PUSH
4316: LD_INT 1
4318: PLUS
4319: PPUSH
4320: LD_VAR 0 3
4324: PPUSH
4325: CALL_OW 1
4329: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4330: LD_VAR 0 3
4334: PPUSH
4335: LD_INT 51
4337: PPUSH
4338: LD_INT 77
4340: PPUSH
4341: CALL_OW 428
4345: PPUSH
4346: CALL_OW 52
// end ;
4350: GO 4275
4352: POP
4353: POP
// end ;
4354: LD_VAR 0 1
4358: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4359: LD_EXP 42
4363: PPUSH
4364: LD_INT 3
4366: PUSH
4367: LD_INT 24
4369: PUSH
4370: LD_INT 600
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 3
4383: PUSH
4384: LD_INT 54
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 72
4402: PUSH
4403: LD_INT 66
4405: PPUSH
4406: LD_INT 89
4408: PPUSH
4409: CALL_OW 428
4413: PPUSH
4414: CALL_OW 302
4418: AND
4419: IFFALSE 4504
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
// begin enable ;
4427: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4428: LD_ADDR_VAR 0 1
4432: PUSH
4433: LD_EXP 42
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 600
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: LD_INT 54
4460: PUSH
4461: EMPTY
4462: LIST
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PPUSH
4472: CALL_OW 72
4476: PUSH
4477: FOR_IN
4478: IFFALSE 4502
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4480: LD_VAR 0 1
4484: PPUSH
4485: LD_INT 66
4487: PPUSH
4488: LD_INT 89
4490: PPUSH
4491: CALL_OW 428
4495: PPUSH
4496: CALL_OW 120
4500: GO 4477
4502: POP
4503: POP
// end ;
4504: PPOPN 1
4506: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4507: LD_INT 22
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 92
4519: PUSH
4520: LD_INT 54
4522: PUSH
4523: LD_INT 77
4525: PUSH
4526: LD_INT 8
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 69
4543: IFFALSE 4607
4545: GO 4547
4547: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4548: LD_EXP 43
4552: PPUSH
4553: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4557: LD_EXP 43
4561: PPUSH
4562: LD_INT 22
4564: PUSH
4565: LD_INT 2
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: LD_INT 92
4574: PUSH
4575: LD_INT 54
4577: PUSH
4578: LD_INT 77
4580: PUSH
4581: LD_INT 8
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 69
4598: PUSH
4599: LD_INT 1
4601: ARRAY
4602: PPUSH
4603: CALL_OW 175
// end ;
4607: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
4614: PPUSH
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 1
4627: PPUSH
4628: LD_INT 3
4630: PPUSH
4631: CALL_OW 12
4635: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4636: LD_ADDR_VAR 0 5
4640: PUSH
4641: LD_INT 16
4643: PUSH
4644: LD_INT 17
4646: PUSH
4647: LD_INT 19
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: PUSH
4655: LD_VAR 0 3
4659: ARRAY
4660: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4661: LD_ADDR_VAR 0 7
4665: PUSH
4666: LD_INT 159
4668: PUSH
4669: LD_INT 25
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 137
4678: PUSH
4679: LD_INT 37
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 123
4688: PUSH
4689: LD_INT 55
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PUSH
4696: LD_INT 115
4698: PUSH
4699: LD_INT 71
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 106
4708: PUSH
4709: LD_INT 88
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 97
4718: PUSH
4719: LD_INT 114
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 75
4728: PUSH
4729: LD_INT 146
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 206
4747: PUSH
4748: LD_INT 135
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 184
4757: PUSH
4758: LD_INT 111
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 154
4767: PUSH
4768: LD_INT 97
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 122
4777: PUSH
4778: LD_INT 80
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 109
4787: PUSH
4788: LD_INT 78
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 97
4797: PUSH
4798: LD_INT 113
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 75
4807: PUSH
4808: LD_INT 147
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 185
4826: PUSH
4827: LD_INT 72
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: LD_INT 171
4836: PUSH
4837: LD_INT 83
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 161
4846: PUSH
4847: LD_INT 99
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PUSH
4854: LD_INT 125
4856: PUSH
4857: LD_INT 82
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 105
4866: PUSH
4867: LD_INT 90
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 96
4876: PUSH
4877: LD_INT 116
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 75
4886: PUSH
4887: LD_INT 147
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_VAR 0 3
4912: ARRAY
4913: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4914: LD_ADDR_VAR 0 4
4918: PUSH
4919: LD_INT 4
4921: PUSH
4922: LD_INT 5
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: LD_VAR 0 3
4937: ARRAY
4938: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4939: LD_ADDR_VAR 0 6
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 20
4949: PUSH
4950: LD_INT 21
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: PUSH
4958: LD_VAR 0 3
4962: ARRAY
4963: ST_TO_ADDR
// for i := 1 to 2 do
4964: LD_ADDR_VAR 0 2
4968: PUSH
4969: DOUBLE
4970: LD_INT 1
4972: DEC
4973: ST_TO_ADDR
4974: LD_INT 2
4976: PUSH
4977: FOR_TO
4978: IFFALSE 4996
// EraseResourceArea ( i , outerSpawnArea ) ;
4980: LD_VAR 0 2
4984: PPUSH
4985: LD_VAR 0 6
4989: PPUSH
4990: CALL_OW 286
4994: GO 4977
4996: POP
4997: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4998: LD_VAR 0 6
5002: PPUSH
5003: LD_INT 2
5005: PUSH
5006: LD_INT 21
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 21
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 21
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: PPUSH
5042: CALL_OW 70
5046: IFFALSE 5261
// repeat wait ( 0 0$1 ) ;
5048: LD_INT 35
5050: PPUSH
5051: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5055: LD_VAR 0 6
5059: PPUSH
5060: LD_INT 2
5062: PUSH
5063: LD_INT 21
5065: PUSH
5066: LD_INT 2
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 21
5075: PUSH
5076: LD_INT 3
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: LIST
5087: PPUSH
5088: CALL_OW 70
5092: IFFALSE 5153
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5094: LD_ADDR_VAR 0 2
5098: PUSH
5099: LD_VAR 0 6
5103: PPUSH
5104: LD_INT 2
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 2
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 21
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 70
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5151
// RemoveUnit ( i ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: CALL_OW 64
5149: GO 5137
5151: POP
5152: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5153: LD_VAR 0 6
5157: PPUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 1
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PPUSH
5168: CALL_OW 70
5172: IFFALSE 5221
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5174: LD_ADDR_VAR 0 2
5178: PUSH
5179: LD_VAR 0 6
5183: PPUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 70
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5219
// ComMoveXY ( i , 113 , 53 ) ;
5202: LD_VAR 0 2
5206: PPUSH
5207: LD_INT 113
5209: PPUSH
5210: LD_INT 53
5212: PPUSH
5213: CALL_OW 111
5217: GO 5199
5219: POP
5220: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5221: LD_VAR 0 6
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 21
5231: PUSH
5232: LD_INT 1
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PUSH
5239: LD_INT 21
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 70
5258: NOT
5259: IFFALSE 5048
// case convoyCounter of 1 .. 3 :
5261: LD_EXP 16
5265: PUSH
5266: LD_INT 1
5268: DOUBLE
5269: GREATEREQUAL
5270: IFFALSE 5278
5272: LD_INT 3
5274: DOUBLE
5275: LESSEQUAL
5276: IFTRUE 5280
5278: GO 5915
5280: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5281: LD_ADDR_VAR 0 2
5285: PUSH
5286: DOUBLE
5287: LD_INT 1
5289: DEC
5290: ST_TO_ADDR
5291: LD_INT 5
5293: PUSH
5294: LD_INT 6
5296: PUSH
5297: LD_INT 7
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: LD_OWVAR 67
5313: ARRAY
5314: PUSH
5315: LD_EXP 16
5319: MINUS
5320: PUSH
5321: FOR_TO
5322: IFFALSE 5529
// begin uc_side := 3 ;
5324: LD_ADDR_OWVAR 20
5328: PUSH
5329: LD_INT 3
5331: ST_TO_ADDR
// uc_nation := 3 ;
5332: LD_ADDR_OWVAR 21
5336: PUSH
5337: LD_INT 3
5339: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5340: LD_INT 0
5342: PPUSH
5343: LD_INT 1
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: LD_INT 4
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 1
5363: PPUSH
5364: LD_INT 4
5366: PPUSH
5367: CALL_OW 12
5371: ARRAY
5372: PPUSH
5373: LD_INT 4
5375: PUSH
5376: LD_INT 5
5378: PUSH
5379: LD_INT 6
5381: PUSH
5382: LD_INT 7
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_OWVAR 67
5395: ARRAY
5396: PPUSH
5397: CALL_OW 380
// un := CreateHuman ;
5401: LD_ADDR_VAR 0 8
5405: PUSH
5406: CALL_OW 44
5410: ST_TO_ADDR
// SetDir ( un , dir ) ;
5411: LD_VAR 0 8
5415: PPUSH
5416: LD_VAR 0 4
5420: PPUSH
5421: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5425: LD_VAR 0 8
5429: PPUSH
5430: LD_VAR 0 5
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL 72167 0 3
5442: IFFALSE 5527
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5444: LD_ADDR_EXP 41
5448: PUSH
5449: LD_EXP 41
5453: PPUSH
5454: LD_EXP 41
5458: PUSH
5459: LD_INT 1
5461: PLUS
5462: PPUSH
5463: LD_VAR 0 8
5467: PPUSH
5468: CALL_OW 1
5472: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5473: LD_VAR 0 8
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5485: LD_VAR 0 8
5489: PPUSH
5490: LD_VAR 0 7
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: PUSH
5499: LD_INT 1
5501: ARRAY
5502: PPUSH
5503: LD_VAR 0 7
5507: PUSH
5508: LD_INT 1
5510: ARRAY
5511: PUSH
5512: LD_INT 2
5514: ARRAY
5515: PPUSH
5516: CALL_OW 111
// wait ( 0 0$2 ) ;
5520: LD_INT 70
5522: PPUSH
5523: CALL_OW 67
// end ; end ;
5527: GO 5321
5529: POP
5530: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5531: LD_ADDR_VAR 0 2
5535: PUSH
5536: DOUBLE
5537: LD_INT 1
5539: DEC
5540: ST_TO_ADDR
5541: LD_INT 3
5543: PUSH
5544: LD_INT 4
5546: PUSH
5547: LD_INT 4
5549: PUSH
5550: LD_INT 4
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: LD_OWVAR 67
5563: ARRAY
5564: PUSH
5565: FOR_TO
5566: IFFALSE 5911
// begin uc_side := 3 ;
5568: LD_ADDR_OWVAR 20
5572: PUSH
5573: LD_INT 3
5575: ST_TO_ADDR
// uc_nation := 3 ;
5576: LD_ADDR_OWVAR 21
5580: PUSH
5581: LD_INT 3
5583: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5584: LD_INT 3
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: LD_INT 21
5592: PUSH
5593: LD_INT 22
5595: PUSH
5596: LD_INT 23
5598: PUSH
5599: LD_INT 24
5601: PUSH
5602: LD_INT 24
5604: PUSH
5605: LD_INT 24
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: PUSH
5616: LD_OWVAR 67
5620: PPUSH
5621: LD_OWVAR 67
5625: PUSH
5626: LD_INT 2
5628: PLUS
5629: PPUSH
5630: CALL_OW 12
5634: ARRAY
5635: PPUSH
5636: LD_INT 1
5638: PPUSH
5639: LD_INT 1
5641: PPUSH
5642: LD_INT 42
5644: PUSH
5645: LD_INT 44
5647: PUSH
5648: LD_INT 43
5650: PUSH
5651: LD_INT 44
5653: PUSH
5654: LD_INT 46
5656: PUSH
5657: LD_INT 46
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: PUSH
5668: LD_INT 1
5670: PPUSH
5671: LD_OWVAR 67
5675: PUSH
5676: LD_INT 2
5678: PLUS
5679: PPUSH
5680: CALL_OW 12
5684: ARRAY
5685: PPUSH
5686: LD_INT 90
5688: PPUSH
5689: CALL 439 0 7
// un := CreateVehicle ;
5693: LD_ADDR_VAR 0 8
5697: PUSH
5698: CALL_OW 45
5702: ST_TO_ADDR
// SetDir ( un , dir ) ;
5703: LD_VAR 0 8
5707: PPUSH
5708: LD_VAR 0 4
5712: PPUSH
5713: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5717: LD_VAR 0 8
5721: PPUSH
5722: LD_VAR 0 5
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: CALL 72167 0 3
5734: IFFALSE 5909
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5736: LD_ADDR_EXP 41
5740: PUSH
5741: LD_EXP 41
5745: PPUSH
5746: LD_EXP 41
5750: PUSH
5751: LD_INT 1
5753: PLUS
5754: PPUSH
5755: LD_VAR 0 8
5759: PPUSH
5760: CALL_OW 1
5764: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5765: LD_INT 0
5767: PPUSH
5768: LD_INT 3
5770: PUSH
5771: LD_INT 4
5773: PUSH
5774: LD_INT 5
5776: PUSH
5777: LD_INT 6
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: PUSH
5786: LD_OWVAR 67
5790: ARRAY
5791: PPUSH
5792: CALL_OW 383
// un := CreateHuman ;
5796: LD_ADDR_VAR 0 8
5800: PUSH
5801: CALL_OW 44
5805: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5806: LD_VAR 0 8
5810: PPUSH
5811: LD_EXP 41
5815: PUSH
5816: LD_EXP 41
5820: ARRAY
5821: PPUSH
5822: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5826: LD_ADDR_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: PPUSH
5836: LD_EXP 41
5840: PUSH
5841: LD_INT 1
5843: PLUS
5844: PPUSH
5845: LD_VAR 0 8
5849: PPUSH
5850: CALL_OW 1
5854: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5855: LD_VAR 0 8
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5867: LD_VAR 0 8
5871: PPUSH
5872: LD_VAR 0 7
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: LD_VAR 0 7
5889: PUSH
5890: LD_INT 1
5892: ARRAY
5893: PUSH
5894: LD_INT 2
5896: ARRAY
5897: PPUSH
5898: CALL_OW 111
// wait ( 0 0$3 ) ;
5902: LD_INT 105
5904: PPUSH
5905: CALL_OW 67
// end ; end ;
5909: GO 5565
5911: POP
5912: POP
// end ; 4 .. 7 :
5913: GO 6520
5915: LD_INT 4
5917: DOUBLE
5918: GREATEREQUAL
5919: IFFALSE 5927
5921: LD_INT 7
5923: DOUBLE
5924: LESSEQUAL
5925: IFTRUE 5929
5927: GO 6519
5929: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_INT 2
5942: PUSH
5943: LD_INT 3
5945: PUSH
5946: LD_INT 4
5948: PUSH
5949: LD_INT 4
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_OWVAR 67
5962: ARRAY
5963: PUSH
5964: FOR_TO
5965: IFFALSE 6145
// begin uc_side := 3 ;
5967: LD_ADDR_OWVAR 20
5971: PUSH
5972: LD_INT 3
5974: ST_TO_ADDR
// uc_nation := 3 ;
5975: LD_ADDR_OWVAR 21
5979: PUSH
5980: LD_INT 3
5982: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5983: LD_INT 0
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: LD_INT 4
5991: PUSH
5992: LD_INT 5
5994: PUSH
5995: LD_INT 6
5997: PUSH
5998: LD_INT 7
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: PUSH
6007: LD_OWVAR 67
6011: ARRAY
6012: PPUSH
6013: CALL_OW 380
// un := CreateHuman ;
6017: LD_ADDR_VAR 0 8
6021: PUSH
6022: CALL_OW 44
6026: ST_TO_ADDR
// SetDir ( un , dir ) ;
6027: LD_VAR 0 8
6031: PPUSH
6032: LD_VAR 0 4
6036: PPUSH
6037: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6041: LD_VAR 0 8
6045: PPUSH
6046: LD_VAR 0 5
6050: PPUSH
6051: LD_INT 0
6053: PPUSH
6054: CALL 72167 0 3
6058: IFFALSE 6143
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6060: LD_ADDR_EXP 41
6064: PUSH
6065: LD_EXP 41
6069: PPUSH
6070: LD_EXP 41
6074: PUSH
6075: LD_INT 1
6077: PLUS
6078: PPUSH
6079: LD_VAR 0 8
6083: PPUSH
6084: CALL_OW 1
6088: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6089: LD_VAR 0 8
6093: PPUSH
6094: LD_INT 1
6096: PPUSH
6097: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6101: LD_VAR 0 8
6105: PPUSH
6106: LD_VAR 0 7
6110: PUSH
6111: LD_INT 1
6113: ARRAY
6114: PUSH
6115: LD_INT 1
6117: ARRAY
6118: PPUSH
6119: LD_VAR 0 7
6123: PUSH
6124: LD_INT 1
6126: ARRAY
6127: PUSH
6128: LD_INT 2
6130: ARRAY
6131: PPUSH
6132: CALL_OW 111
// wait ( 0 0$2 ) ;
6136: LD_INT 70
6138: PPUSH
6139: CALL_OW 67
// end ; end ;
6143: GO 5964
6145: POP
6146: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6147: LD_ADDR_VAR 0 2
6151: PUSH
6152: DOUBLE
6153: LD_INT 1
6155: DEC
6156: ST_TO_ADDR
6157: LD_INT 2
6159: PUSH
6160: LD_INT 3
6162: PUSH
6163: LD_INT 3
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PUSH
6175: LD_OWVAR 67
6179: ARRAY
6180: PUSH
6181: FOR_TO
6182: IFFALSE 6515
// begin uc_side := 3 ;
6184: LD_ADDR_OWVAR 20
6188: PUSH
6189: LD_INT 3
6191: ST_TO_ADDR
// uc_nation := 3 ;
6192: LD_ADDR_OWVAR 21
6196: PUSH
6197: LD_INT 3
6199: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6200: LD_INT 3
6202: PPUSH
6203: LD_INT 3
6205: PPUSH
6206: LD_INT 21
6208: PUSH
6209: LD_INT 22
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 1
6218: PPUSH
6219: LD_INT 2
6221: PPUSH
6222: CALL_OW 12
6226: ARRAY
6227: PPUSH
6228: LD_INT 1
6230: PPUSH
6231: LD_INT 1
6233: PPUSH
6234: LD_INT 42
6236: PUSH
6237: LD_INT 44
6239: PUSH
6240: LD_INT 43
6242: PUSH
6243: LD_INT 44
6245: PUSH
6246: LD_INT 44
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 1
6258: PPUSH
6259: LD_OWVAR 67
6263: PUSH
6264: LD_INT 1
6266: PLUS
6267: PPUSH
6268: CALL_OW 12
6272: ARRAY
6273: PPUSH
6274: LD_INT 90
6276: PPUSH
6277: CALL 439 0 7
// un := CreateVehicle ;
6281: LD_ADDR_VAR 0 8
6285: PUSH
6286: CALL_OW 45
6290: ST_TO_ADDR
// SetDir ( un , dir ) ;
6291: LD_VAR 0 8
6295: PPUSH
6296: LD_VAR 0 4
6300: PPUSH
6301: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6305: LD_VAR 0 8
6309: PPUSH
6310: LD_VAR 0 5
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL 72167 0 3
6322: IFFALSE 6513
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6324: LD_ADDR_EXP 41
6328: PUSH
6329: LD_EXP 41
6333: PPUSH
6334: LD_EXP 41
6338: PUSH
6339: LD_INT 1
6341: PLUS
6342: PPUSH
6343: LD_VAR 0 8
6347: PPUSH
6348: CALL_OW 1
6352: ST_TO_ADDR
// uc_side := 3 ;
6353: LD_ADDR_OWVAR 20
6357: PUSH
6358: LD_INT 3
6360: ST_TO_ADDR
// uc_nation := 3 ;
6361: LD_ADDR_OWVAR 21
6365: PUSH
6366: LD_INT 3
6368: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6369: LD_INT 0
6371: PPUSH
6372: LD_INT 3
6374: PUSH
6375: LD_INT 4
6377: PUSH
6378: LD_INT 5
6380: PUSH
6381: LD_INT 6
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_OWVAR 67
6394: ARRAY
6395: PPUSH
6396: CALL_OW 383
// un := CreateHuman ;
6400: LD_ADDR_VAR 0 8
6404: PUSH
6405: CALL_OW 44
6409: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6410: LD_VAR 0 8
6414: PPUSH
6415: LD_EXP 41
6419: PUSH
6420: LD_EXP 41
6424: ARRAY
6425: PPUSH
6426: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6430: LD_ADDR_EXP 41
6434: PUSH
6435: LD_EXP 41
6439: PPUSH
6440: LD_EXP 41
6444: PUSH
6445: LD_INT 1
6447: PLUS
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL_OW 1
6458: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6459: LD_VAR 0 8
6463: PPUSH
6464: LD_INT 1
6466: PPUSH
6467: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6471: LD_VAR 0 8
6475: PPUSH
6476: LD_VAR 0 7
6480: PUSH
6481: LD_INT 1
6483: ARRAY
6484: PUSH
6485: LD_INT 1
6487: ARRAY
6488: PPUSH
6489: LD_VAR 0 7
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: PUSH
6498: LD_INT 2
6500: ARRAY
6501: PPUSH
6502: CALL_OW 111
// wait ( 0 0$2 ) ;
6506: LD_INT 70
6508: PPUSH
6509: CALL_OW 67
// end ; end ;
6513: GO 6181
6515: POP
6516: POP
// end ; end ;
6517: GO 6520
6519: POP
// repeat wait ( 0 0$1 ) ;
6520: LD_INT 35
6522: PPUSH
6523: CALL_OW 67
// for un in ruConvoySquad do
6527: LD_ADDR_VAR 0 8
6531: PUSH
6532: LD_EXP 41
6536: PUSH
6537: FOR_IN
6538: IFFALSE 7162
// begin if IsInArea ( un , westSouthOutArea ) then
6540: LD_VAR 0 8
6544: PPUSH
6545: LD_INT 18
6547: PPUSH
6548: CALL_OW 308
6552: IFFALSE 6640
// begin if GetType ( un ) = unit_vehicle then
6554: LD_VAR 0 8
6558: PPUSH
6559: CALL_OW 247
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: IFFALSE 6599
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6569: LD_ADDR_EXP 41
6573: PUSH
6574: LD_EXP 41
6578: PUSH
6579: LD_VAR 0 8
6583: PPUSH
6584: CALL_OW 311
6588: DIFF
6589: ST_TO_ADDR
// RemoveUnit ( un ) ;
6590: LD_VAR 0 8
6594: PPUSH
6595: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6599: LD_ADDR_EXP 15
6603: PUSH
6604: LD_EXP 15
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6613: LD_ADDR_EXP 41
6617: PUSH
6618: LD_EXP 41
6622: PUSH
6623: LD_VAR 0 8
6627: DIFF
6628: ST_TO_ADDR
// RemoveUnit ( un ) ;
6629: LD_VAR 0 8
6633: PPUSH
6634: CALL_OW 64
// break ;
6638: GO 7162
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6640: LD_VAR 0 8
6644: PPUSH
6645: CALL_OW 305
6649: NOT
6650: PUSH
6651: LD_VAR 0 8
6655: PPUSH
6656: CALL_OW 310
6660: NOT
6661: AND
6662: IFFALSE 6680
// ruConvoySquad := ruConvoySquad diff un ;
6664: LD_ADDR_EXP 41
6668: PUSH
6669: LD_EXP 41
6673: PUSH
6674: LD_VAR 0 8
6678: DIFF
6679: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6680: LD_VAR 0 8
6684: PPUSH
6685: CALL_OW 302
6689: PUSH
6690: LD_VAR 0 8
6694: PPUSH
6695: CALL_OW 314
6699: NOT
6700: AND
6701: IFFALSE 7160
// begin tag := GetTag ( un ) ;
6703: LD_ADDR_VAR 0 9
6707: PUSH
6708: LD_VAR 0 8
6712: PPUSH
6713: CALL_OW 110
6717: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6718: LD_VAR 0 8
6722: PPUSH
6723: LD_VAR 0 7
6727: PUSH
6728: LD_VAR 0 9
6732: PUSH
6733: LD_INT 1
6735: PLUS
6736: ARRAY
6737: PUSH
6738: LD_INT 1
6740: ARRAY
6741: PPUSH
6742: LD_VAR 0 7
6746: PUSH
6747: LD_VAR 0 9
6751: PUSH
6752: LD_INT 1
6754: PLUS
6755: ARRAY
6756: PUSH
6757: LD_INT 2
6759: ARRAY
6760: PPUSH
6761: CALL_OW 297
6765: PUSH
6766: LD_INT 6
6768: LESS
6769: IFFALSE 6952
// begin SetTag ( un , tag + 1 ) ;
6771: LD_VAR 0 8
6775: PPUSH
6776: LD_VAR 0 9
6780: PUSH
6781: LD_INT 1
6783: PLUS
6784: PPUSH
6785: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6789: LD_VAR 0 8
6793: PPUSH
6794: CALL_OW 247
6798: PUSH
6799: LD_INT 2
6801: EQUAL
6802: PUSH
6803: LD_VAR 0 8
6807: PPUSH
6808: CALL_OW 257
6812: PUSH
6813: LD_INT 3
6815: EQUAL
6816: OR
6817: IFFALSE 6950
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6819: LD_ADDR_VAR 0 10
6823: PUSH
6824: LD_INT 22
6826: PUSH
6827: LD_INT 2
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 91
6836: PUSH
6837: LD_VAR 0 8
6841: PUSH
6842: LD_INT 8
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: ST_TO_ADDR
// if enemy then
6859: LD_VAR 0 10
6863: IFFALSE 6891
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6865: LD_VAR 0 8
6869: PPUSH
6870: LD_VAR 0 10
6874: PPUSH
6875: LD_VAR 0 8
6879: PPUSH
6880: CALL_OW 74
6884: PPUSH
6885: CALL_OW 115
6889: GO 6950
// begin AddComWait ( un , 0 0$4 ) ;
6891: LD_VAR 0 8
6895: PPUSH
6896: LD_INT 140
6898: PPUSH
6899: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6903: LD_VAR 0 8
6907: PPUSH
6908: LD_VAR 0 7
6912: PUSH
6913: LD_VAR 0 9
6917: PUSH
6918: LD_INT 1
6920: PLUS
6921: ARRAY
6922: PUSH
6923: LD_INT 1
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 7
6931: PUSH
6932: LD_VAR 0 9
6936: PUSH
6937: LD_INT 1
6939: PLUS
6940: ARRAY
6941: PUSH
6942: LD_INT 2
6944: ARRAY
6945: PPUSH
6946: CALL_OW 174
// end ; end ; end else
6950: GO 7160
// begin if GetClass ( un ) = 4 then
6952: LD_VAR 0 8
6956: PPUSH
6957: CALL_OW 257
6961: PUSH
6962: LD_INT 4
6964: EQUAL
6965: IFFALSE 7113
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6967: LD_EXP 41
6971: PPUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: LD_INT 24
6987: PUSH
6988: LD_INT 1000
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PPUSH
7003: CALL_OW 72
7007: IFFALSE 7065
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7009: LD_VAR 0 8
7013: PPUSH
7014: LD_EXP 41
7018: PPUSH
7019: LD_INT 21
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 3
7031: PUSH
7032: LD_INT 24
7034: PUSH
7035: LD_INT 1000
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PPUSH
7050: CALL_OW 72
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 128
7063: GO 7111
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7065: LD_VAR 0 8
7069: PPUSH
7070: LD_EXP 41
7074: PPUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 25
7080: PUSH
7081: LD_INT 4
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PPUSH
7092: CALL_OW 72
7096: PPUSH
7097: LD_VAR 0 8
7101: PPUSH
7102: CALL_OW 74
7106: PPUSH
7107: CALL_OW 112
7111: GO 7160
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7113: LD_VAR 0 8
7117: PPUSH
7118: LD_VAR 0 7
7122: PUSH
7123: LD_VAR 0 9
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ARRAY
7132: PUSH
7133: LD_INT 1
7135: ARRAY
7136: PPUSH
7137: LD_VAR 0 7
7141: PUSH
7142: LD_VAR 0 9
7146: PUSH
7147: LD_INT 1
7149: PLUS
7150: ARRAY
7151: PUSH
7152: LD_INT 2
7154: ARRAY
7155: PPUSH
7156: CALL_OW 114
// end ; end ; end ;
7160: GO 6537
7162: POP
7163: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7164: LD_EXP 41
7168: PPUSH
7169: LD_INT 52
7171: PUSH
7172: EMPTY
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 1
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PPUSH
7189: CALL_OW 72
7193: NOT
7194: IFFALSE 6520
// end ;
7196: LD_VAR 0 1
7200: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7201: LD_EXP 16
7205: PUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 5
7211: PPUSH
7212: CALL_OW 12
7216: LESS
7217: PUSH
7218: LD_EXP 41
7222: NOT
7223: AND
7224: PUSH
7225: LD_OWVAR 67
7229: PUSH
7230: LD_INT 1
7232: GREATER
7233: AND
7234: IFFALSE 7654
7236: GO 7238
7238: DISABLE
7239: LD_INT 0
7241: PPUSH
7242: PPUSH
7243: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7244: LD_ADDR_VAR 0 1
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_INT 2
7256: PUSH
7257: LD_INT 3
7259: PUSH
7260: LD_INT 4
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: PUSH
7272: LD_OWVAR 67
7276: ARRAY
7277: PUSH
7278: FOR_TO
7279: IFFALSE 7575
// begin uc_side := 3 ;
7281: LD_ADDR_OWVAR 20
7285: PUSH
7286: LD_INT 3
7288: ST_TO_ADDR
// uc_nation := 3 ;
7289: LD_ADDR_OWVAR 21
7293: PUSH
7294: LD_INT 3
7296: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7297: LD_INT 3
7299: PPUSH
7300: LD_INT 3
7302: PPUSH
7303: LD_INT 21
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_INT 23
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: LD_INT 24
7317: PUSH
7318: LD_INT 24
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: LD_OWVAR 67
7333: PPUSH
7334: LD_OWVAR 67
7338: PUSH
7339: LD_INT 2
7341: PLUS
7342: PPUSH
7343: CALL_OW 12
7347: ARRAY
7348: PPUSH
7349: LD_INT 1
7351: PPUSH
7352: LD_INT 1
7354: PPUSH
7355: LD_INT 42
7357: PUSH
7358: LD_INT 44
7360: PUSH
7361: LD_INT 43
7363: PUSH
7364: LD_INT 44
7366: PUSH
7367: LD_INT 46
7369: PUSH
7370: LD_INT 46
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 1
7383: PPUSH
7384: LD_OWVAR 67
7388: PUSH
7389: LD_INT 2
7391: PLUS
7392: PPUSH
7393: CALL_OW 12
7397: ARRAY
7398: PPUSH
7399: LD_INT 90
7401: PPUSH
7402: CALL 439 0 7
// un := CreateVehicle ;
7406: LD_ADDR_VAR 0 3
7410: PUSH
7411: CALL_OW 45
7415: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7416: LD_VAR 0 3
7420: PPUSH
7421: LD_INT 0
7423: PPUSH
7424: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7428: LD_VAR 0 3
7432: PPUSH
7433: LD_INT 23
7435: PPUSH
7436: LD_INT 0
7438: PPUSH
7439: CALL 72167 0 3
7443: IFFALSE 7573
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_VAR 0 2
7454: PPUSH
7455: LD_VAR 0 2
7459: PUSH
7460: LD_INT 1
7462: PLUS
7463: PPUSH
7464: LD_VAR 0 3
7468: PPUSH
7469: CALL_OW 1
7473: ST_TO_ADDR
// uc_side := 3 ;
7474: LD_ADDR_OWVAR 20
7478: PUSH
7479: LD_INT 3
7481: ST_TO_ADDR
// uc_nation := 3 ;
7482: LD_ADDR_OWVAR 21
7486: PUSH
7487: LD_INT 3
7489: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7490: LD_INT 0
7492: PPUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 4
7498: PUSH
7499: LD_INT 5
7501: PUSH
7502: LD_INT 6
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: PUSH
7511: LD_OWVAR 67
7515: ARRAY
7516: PPUSH
7517: CALL_OW 383
// un := CreateHuman ;
7521: LD_ADDR_VAR 0 3
7525: PUSH
7526: CALL_OW 44
7530: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_VAR 0 2
7545: ARRAY
7546: PPUSH
7547: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7551: LD_VAR 0 3
7555: PPUSH
7556: LD_INT 80
7558: PPUSH
7559: LD_INT 139
7561: PPUSH
7562: CALL_OW 111
// wait ( 0 0$3 ) ;
7566: LD_INT 105
7568: PPUSH
7569: CALL_OW 67
// end ; end ;
7573: GO 7278
7575: POP
7576: POP
// for i in tmp do
7577: LD_ADDR_VAR 0 1
7581: PUSH
7582: LD_VAR 0 2
7586: PUSH
7587: FOR_IN
7588: IFFALSE 7652
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: LD_INT 102
7600: PPUSH
7601: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7605: LD_VAR 0 1
7609: PPUSH
7610: LD_INT 110
7612: PPUSH
7613: LD_INT 78
7615: PPUSH
7616: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7620: LD_VAR 0 1
7624: PPUSH
7625: LD_INT 75
7627: PPUSH
7628: LD_INT 101
7630: PPUSH
7631: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7635: LD_VAR 0 1
7639: PPUSH
7640: LD_INT 57
7642: PPUSH
7643: LD_INT 83
7645: PPUSH
7646: CALL_OW 174
// end ;
7650: GO 7587
7652: POP
7653: POP
// end ;
7654: PPOPN 3
7656: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7657: LD_EXP 39
7661: PPUSH
7662: LD_INT 3
7664: PUSH
7665: LD_INT 24
7667: PUSH
7668: LD_INT 1000
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: PUSH
7684: LD_EXP 40
7688: PPUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 24
7694: PUSH
7695: LD_INT 1000
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PPUSH
7706: CALL_OW 72
7710: OR
7711: IFFALSE 7810
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
// begin enable ;
7719: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7720: LD_ADDR_VAR 0 1
7724: PUSH
7725: LD_EXP 39
7729: PPUSH
7730: LD_INT 3
7732: PUSH
7733: LD_INT 24
7735: PUSH
7736: LD_INT 1000
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 72
7751: PUSH
7752: LD_EXP 40
7756: PPUSH
7757: LD_INT 3
7759: PUSH
7760: LD_INT 24
7762: PUSH
7763: LD_INT 1000
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PPUSH
7774: CALL_OW 72
7778: UNION
7779: PUSH
7780: FOR_IN
7781: IFFALSE 7808
// if IsSleeping ( i ) then
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 555
7792: IFFALSE 7806
// ForceSleep ( i , false ) ;
7794: LD_VAR 0 1
7798: PPUSH
7799: LD_INT 0
7801: PPUSH
7802: CALL_OW 585
7806: GO 7780
7808: POP
7809: POP
// end ;
7810: PPOPN 1
7812: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7813: LD_EXP 38
7817: PPUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 54
7826: PUSH
7827: EMPTY
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: LD_INT 95
7839: PUSH
7840: LD_INT 26
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 72
7860: IFFALSE 7955
7862: GO 7864
7864: DISABLE
7865: LD_INT 0
7867: PPUSH
7868: PPUSH
// begin enable ;
7869: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7870: LD_ADDR_VAR 0 2
7874: PUSH
7875: LD_EXP 38
7879: PPUSH
7880: LD_INT 1
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: LD_INT 54
7888: PUSH
7889: EMPTY
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 3
7898: PUSH
7899: LD_INT 95
7901: PUSH
7902: LD_INT 26
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 72
7922: ST_TO_ADDR
// for i in tmp do
7923: LD_ADDR_VAR 0 1
7927: PUSH
7928: LD_VAR 0 2
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7953
// ComMoveXY ( i , 206 , 110 ) ;
7936: LD_VAR 0 1
7940: PPUSH
7941: LD_INT 206
7943: PPUSH
7944: LD_INT 110
7946: PPUSH
7947: CALL_OW 111
7951: GO 7933
7953: POP
7954: POP
// end ;
7955: PPOPN 2
7957: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7958: LD_INT 26
7960: PPUSH
7961: LD_INT 22
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PPUSH
7971: CALL_OW 70
7975: PUSH
7976: LD_INT 26
7978: PPUSH
7979: LD_INT 22
7981: PUSH
7982: LD_INT 3
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 32
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 50
8001: PUSH
8002: EMPTY
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 70
8014: AND
8015: IFFALSE 8094
8017: GO 8019
8019: DISABLE
8020: LD_INT 0
8022: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8023: LD_ADDR_VAR 0 1
8027: PUSH
8028: LD_INT 26
8030: PPUSH
8031: LD_INT 22
8033: PUSH
8034: LD_INT 3
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 30
8043: PUSH
8044: LD_INT 32
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 50
8053: PUSH
8054: EMPTY
8055: LIST
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: PPUSH
8062: CALL_OW 70
8066: PUSH
8067: FOR_IN
8068: IFFALSE 8092
// if IsInUnit ( i ) then
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 310
8079: IFFALSE 8090
// ComExitBuilding ( i ) ;
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 122
8090: GO 8067
8092: POP
8093: POP
// end ; end_of_file
8094: PPOPN 1
8096: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL 15030 0 1
// if un = Heike then
8106: LD_VAR 0 1
8110: PUSH
8111: LD_EXP 21
8115: EQUAL
8116: IFFALSE 8125
// YouLost ( Heike ) ;
8118: LD_STRING Heike
8120: PPUSH
8121: CALL_OW 104
// if un in apeSoldGroup then
8125: LD_VAR 0 1
8129: PUSH
8130: LD_EXP 42
8134: IN
8135: IFFALSE 8153
// apeSoldGroup := apeSoldGroup diff un ;
8137: LD_ADDR_EXP 42
8141: PUSH
8142: LD_EXP 42
8146: PUSH
8147: LD_VAR 0 1
8151: DIFF
8152: ST_TO_ADDR
// if un in apeEngGroup then
8153: LD_VAR 0 1
8157: PUSH
8158: LD_EXP 43
8162: IN
8163: IFFALSE 8181
// apeEngGroup := apeEngGroup diff un ;
8165: LD_ADDR_EXP 43
8169: PUSH
8170: LD_EXP 43
8174: PUSH
8175: LD_VAR 0 1
8179: DIFF
8180: ST_TO_ADDR
// if un in oilBaseGuard then
8181: LD_VAR 0 1
8185: PUSH
8186: LD_EXP 38
8190: IN
8191: IFFALSE 8209
// oilBaseGuard := oilBaseGuard diff un ;
8193: LD_ADDR_EXP 38
8197: PUSH
8198: LD_EXP 38
8202: PUSH
8203: LD_VAR 0 1
8207: DIFF
8208: ST_TO_ADDR
// if un in ruNorthGroup then
8209: LD_VAR 0 1
8213: PUSH
8214: LD_EXP 39
8218: IN
8219: IFFALSE 8237
// ruNorthGroup := ruNorthGroup diff un ;
8221: LD_ADDR_EXP 39
8225: PUSH
8226: LD_EXP 39
8230: PUSH
8231: LD_VAR 0 1
8235: DIFF
8236: ST_TO_ADDR
// if un in ruSouthGroup then
8237: LD_VAR 0 1
8241: PUSH
8242: LD_EXP 40
8246: IN
8247: IFFALSE 8265
// ruSouthGroup := ruSouthGroup diff un ;
8249: LD_ADDR_EXP 40
8253: PUSH
8254: LD_EXP 40
8258: PUSH
8259: LD_VAR 0 1
8263: DIFF
8264: ST_TO_ADDR
// if un in ruConvoySquad then
8265: LD_VAR 0 1
8269: PUSH
8270: LD_EXP 41
8274: IN
8275: IFFALSE 8293
// ruConvoySquad := ruConvoySquad diff un ;
8277: LD_ADDR_EXP 41
8281: PUSH
8282: LD_EXP 41
8286: PUSH
8287: LD_VAR 0 1
8291: DIFF
8292: ST_TO_ADDR
// end ;
8293: PPOPN 1
8295: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8296: LD_VAR 0 1
8300: PPUSH
8301: LD_VAR 0 2
8305: PPUSH
8306: CALL 15150 0 2
// if GetWeapon ( veh ) = ar_radar then
8310: LD_VAR 0 1
8314: PPUSH
8315: CALL_OW 264
8319: PUSH
8320: LD_INT 30
8322: EQUAL
8323: IFFALSE 8333
// radarConstructed := true ;
8325: LD_ADDR_EXP 13
8329: PUSH
8330: LD_INT 1
8332: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8333: LD_VAR 0 1
8337: PPUSH
8338: CALL_OW 264
8342: PUSH
8343: LD_INT 26
8345: EQUAL
8346: IFFALSE 8356
// flamethrowerBuilt := true ;
8348: LD_ADDR_EXP 20
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// end ;
8356: PPOPN 2
8358: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8359: LD_ADDR_EXP 18
8363: PUSH
8364: LD_EXP 18
8368: PUSH
8369: LD_INT 1
8371: PLUS
8372: ST_TO_ADDR
// if oldId in ruConvoySquad then
8373: LD_VAR 0 2
8377: PUSH
8378: LD_EXP 41
8382: IN
8383: IFFALSE 8401
// ruConvoySquad := ruConvoySquad diff oldId ;
8385: LD_ADDR_EXP 41
8389: PUSH
8390: LD_EXP 41
8394: PUSH
8395: LD_VAR 0 2
8399: DIFF
8400: ST_TO_ADDR
// if newId in ruConvoySquad then
8401: LD_VAR 0 1
8405: PUSH
8406: LD_EXP 41
8410: IN
8411: IFFALSE 8429
// ruConvoySquad := ruConvoySquad diff newId ;
8413: LD_ADDR_EXP 41
8417: PUSH
8418: LD_EXP 41
8422: PUSH
8423: LD_VAR 0 1
8427: DIFF
8428: ST_TO_ADDR
// end ; end_of_file
8429: PPOPN 4
8431: END
// export function Action ; var i , p , un , veh , tmp ; begin
8432: LD_INT 0
8434: PPUSH
8435: PPUSH
8436: PPUSH
8437: PPUSH
8438: PPUSH
8439: PPUSH
// InGameOn ;
8440: CALL_OW 8
// music_nat := 2 ;
8444: LD_ADDR_OWVAR 71
8448: PUSH
8449: LD_INT 2
8451: ST_TO_ADDR
// music_class := music_recon ;
8452: LD_ADDR_OWVAR 72
8456: PUSH
8457: LD_INT 3
8459: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8460: LD_INT 7
8462: PPUSH
8463: LD_INT 6
8465: PPUSH
8466: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8470: LD_INT 7
8472: PPUSH
8473: LD_INT 6
8475: PPUSH
8476: LD_INT 2
8478: PPUSH
8479: LD_INT 30
8481: NEG
8482: PPUSH
8483: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8487: LD_ADDR_VAR 0 6
8491: PUSH
8492: LD_EXP 21
8496: PUSH
8497: LD_EXP 22
8501: PUSH
8502: LD_EXP 23
8506: PUSH
8507: LD_EXP 24
8511: PUSH
8512: LD_EXP 25
8516: PUSH
8517: LD_EXP 26
8521: PUSH
8522: LD_EXP 28
8526: PUSH
8527: LD_EXP 33
8531: PUSH
8532: LD_EXP 27
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: ST_TO_ADDR
// tmp := tmp diff 0 ;
8548: LD_ADDR_VAR 0 6
8552: PUSH
8553: LD_VAR 0 6
8557: PUSH
8558: LD_INT 0
8560: DIFF
8561: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8562: LD_ADDR_VAR 0 6
8566: PUSH
8567: LD_VAR 0 6
8571: PPUSH
8572: LD_INT 3
8574: PPUSH
8575: CALL 71766 0 2
8579: ST_TO_ADDR
// for i in heikeVehicles do
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 35
8589: PUSH
8590: FOR_IN
8591: IFFALSE 8790
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8593: LD_INT 5
8595: PPUSH
8596: LD_VAR 0 2
8600: PUSH
8601: LD_INT 5
8603: ARRAY
8604: PPUSH
8605: LD_VAR 0 2
8609: PUSH
8610: LD_INT 1
8612: ARRAY
8613: PPUSH
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 2
8621: ARRAY
8622: PPUSH
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 3
8630: ARRAY
8631: PPUSH
8632: LD_VAR 0 2
8636: PUSH
8637: LD_INT 4
8639: ARRAY
8640: PPUSH
8641: LD_INT 34
8643: PPUSH
8644: CALL 439 0 7
// veh := CreateVehicle ;
8648: LD_ADDR_VAR 0 5
8652: PUSH
8653: CALL_OW 45
8657: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8658: LD_VAR 0 2
8662: PUSH
8663: LD_INT 4
8665: ARRAY
8666: PUSH
8667: LD_INT 51
8669: PUSH
8670: LD_INT 32
8672: PUSH
8673: LD_INT 12
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: IN
8681: IFFALSE 8761
// begin if i [ 7 ] [ 1 ] then
8683: LD_VAR 0 2
8687: PUSH
8688: LD_INT 7
8690: ARRAY
8691: PUSH
8692: LD_INT 1
8694: ARRAY
8695: IFFALSE 8722
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8697: LD_VAR 0 5
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: LD_VAR 0 2
8709: PUSH
8710: LD_INT 7
8712: ARRAY
8713: PUSH
8714: LD_INT 1
8716: ARRAY
8717: PPUSH
8718: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8722: LD_VAR 0 2
8726: PUSH
8727: LD_INT 7
8729: ARRAY
8730: PUSH
8731: LD_INT 2
8733: ARRAY
8734: IFFALSE 8761
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8736: LD_VAR 0 5
8740: PPUSH
8741: LD_INT 2
8743: PPUSH
8744: LD_VAR 0 2
8748: PUSH
8749: LD_INT 7
8751: ARRAY
8752: PUSH
8753: LD_INT 2
8755: ARRAY
8756: PPUSH
8757: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8761: LD_VAR 0 5
8765: PPUSH
8766: LD_INT 2
8768: PPUSH
8769: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8773: LD_VAR 0 5
8777: PPUSH
8778: LD_INT 4
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL_OW 49
// end ;
8788: GO 8590
8790: POP
8791: POP
// if tmp then
8792: LD_VAR 0 6
8796: IFFALSE 8906
// begin p := 0 ;
8798: LD_ADDR_VAR 0 3
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// for i in tmp do
8806: LD_ADDR_VAR 0 2
8810: PUSH
8811: LD_VAR 0 6
8815: PUSH
8816: FOR_IN
8817: IFFALSE 8904
// begin p := p + 1 ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_VAR 0 3
8828: PUSH
8829: LD_INT 1
8831: PLUS
8832: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8833: LD_VAR 0 2
8837: PPUSH
8838: LD_INT 5
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_INT 26
8855: PPUSH
8856: LD_INT 9
8858: PPUSH
8859: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8863: LD_VAR 0 3
8867: PUSH
8868: LD_EXP 35
8872: GREATEREQUAL
8873: PUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 257
8883: PUSH
8884: LD_INT 3
8886: EQUAL
8887: AND
8888: IFFALSE 8902
// SetClass ( i , 1 ) ;
8890: LD_VAR 0 2
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: CALL_OW 336
// end ;
8902: GO 8816
8904: POP
8905: POP
// end ; if heikeSecondSquad then
8906: LD_EXP 34
8910: IFFALSE 9012
// for i in heikeSecondSquad do
8912: LD_ADDR_VAR 0 2
8916: PUSH
8917: LD_EXP 34
8921: PUSH
8922: FOR_IN
8923: IFFALSE 9010
// begin p := p + 1 ;
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_VAR 0 3
8934: PUSH
8935: LD_INT 1
8937: PLUS
8938: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8939: LD_VAR 0 2
8943: PPUSH
8944: LD_INT 6
8946: PPUSH
8947: LD_INT 0
8949: PPUSH
8950: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8954: LD_VAR 0 2
8958: PPUSH
8959: LD_INT 26
8961: PPUSH
8962: LD_INT 9
8964: PPUSH
8965: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8969: LD_VAR 0 3
8973: PUSH
8974: LD_EXP 35
8978: GREATEREQUAL
8979: PUSH
8980: LD_VAR 0 2
8984: PPUSH
8985: CALL_OW 257
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: AND
8994: IFFALSE 9008
// SetClass ( i , 1 ) ;
8996: LD_VAR 0 2
9000: PPUSH
9001: LD_INT 1
9003: PPUSH
9004: CALL_OW 336
// end ;
9008: GO 8922
9010: POP
9011: POP
// if heikeApes then
9012: LD_EXP 36
9016: IFFALSE 9059
// for i in heikeApes do
9018: LD_ADDR_VAR 0 2
9022: PUSH
9023: LD_EXP 36
9027: PUSH
9028: FOR_IN
9029: IFFALSE 9057
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9031: LD_VAR 0 2
9035: PPUSH
9036: LD_INT 7
9038: PPUSH
9039: LD_INT 0
9041: PPUSH
9042: CALL_OW 49
// ComHold ( i ) ;
9046: LD_VAR 0 2
9050: PPUSH
9051: CALL_OW 140
// end ;
9055: GO 9028
9057: POP
9058: POP
// if Kurt then
9059: LD_EXP 32
9063: IFFALSE 9095
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9065: LD_EXP 32
9069: PPUSH
9070: LD_INT 8
9072: PPUSH
9073: LD_INT 0
9075: PPUSH
9076: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9080: LD_EXP 32
9084: PPUSH
9085: LD_INT 42
9087: PPUSH
9088: LD_INT 32
9090: PPUSH
9091: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9095: LD_INT 70
9097: PPUSH
9098: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9102: LD_EXP 21
9106: PPUSH
9107: LD_STRING DH-Start-1
9109: PPUSH
9110: CALL_OW 88
// if Givi then
9114: LD_EXP 22
9118: IFFALSE 9381
// begin Say ( Givi , DG-Start-2-5 ) ;
9120: LD_EXP 22
9124: PPUSH
9125: LD_STRING DG-Start-2-5
9127: PPUSH
9128: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9132: LD_EXP 21
9136: PPUSH
9137: LD_STRING DH-Start-3
9139: PPUSH
9140: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9144: LD_EXP 21
9148: PPUSH
9149: LD_STRING DH-Start-4
9151: PPUSH
9152: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9156: LD_EXP 22
9160: PPUSH
9161: LD_STRING DG-Start-5
9163: PPUSH
9164: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9168: LD_EXP 21
9172: PPUSH
9173: LD_STRING DH-Start-6
9175: PPUSH
9176: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9180: LD_EXP 22
9184: PPUSH
9185: LD_STRING DG-Start-7
9187: PPUSH
9188: CALL_OW 88
// if Mike then
9192: LD_EXP 23
9196: IFFALSE 9369
// begin Say ( Mike , DM-Start-8 ) ;
9198: LD_EXP 23
9202: PPUSH
9203: LD_STRING DM-Start-8
9205: PPUSH
9206: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9210: LD_EXP 23
9214: PPUSH
9215: LD_STRING DM-Start-9
9217: PPUSH
9218: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9222: LD_EXP 22
9226: PPUSH
9227: LD_STRING DG-Start-10
9229: PPUSH
9230: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9234: LD_EXP 22
9238: PPUSH
9239: LD_STRING DG-Start-11
9241: PPUSH
9242: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9246: LD_EXP 21
9250: PPUSH
9251: LD_STRING DH-Start-12
9253: PPUSH
9254: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9258: LD_EXP 22
9262: PPUSH
9263: LD_STRING DG-Start-13
9265: PPUSH
9266: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9270: LD_EXP 22
9274: PPUSH
9275: LD_STRING DG-Start-14
9277: PPUSH
9278: CALL_OW 88
// if Kaia then
9282: LD_EXP 26
9286: IFFALSE 9369
// begin Say ( Kaia , DK-Start-15 ) ;
9288: LD_EXP 26
9292: PPUSH
9293: LD_STRING DK-Start-15
9295: PPUSH
9296: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9300: LD_EXP 26
9304: PPUSH
9305: LD_STRING DK-Start-16
9307: PPUSH
9308: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9312: LD_EXP 26
9316: PPUSH
9317: LD_STRING DK-Start-17
9319: PPUSH
9320: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9324: LD_INT 10
9326: PPUSH
9327: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9331: LD_EXP 22
9335: PPUSH
9336: LD_EXP 26
9340: PPUSH
9341: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9345: LD_EXP 22
9349: PPUSH
9350: LD_STRING DG-Start-18
9352: PPUSH
9353: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9357: LD_EXP 26
9361: PPUSH
9362: LD_STRING DK-Start-19
9364: PPUSH
9365: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9369: LD_EXP 21
9373: PPUSH
9374: LD_STRING DH-Start-20
9376: PPUSH
9377: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9381: LD_INT 70
9383: PPUSH
9384: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9388: LD_EXP 29
9392: PPUSH
9393: LD_STRING DShar-Start-21
9395: PPUSH
9396: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9400: LD_EXP 21
9404: PPUSH
9405: LD_STRING DH-Start-22
9407: PPUSH
9408: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9412: LD_EXP 29
9416: PPUSH
9417: LD_STRING DShar-Start-23
9419: PPUSH
9420: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9424: LD_EXP 29
9428: PPUSH
9429: LD_STRING DShar-Start-24
9431: PPUSH
9432: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9436: LD_EXP 29
9440: PPUSH
9441: LD_STRING DShar-Start-25
9443: PPUSH
9444: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9448: LD_EXP 29
9452: PPUSH
9453: LD_STRING DShar-Start-26
9455: PPUSH
9456: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9460: LD_EXP 21
9464: PPUSH
9465: LD_STRING DH-Start-27
9467: PPUSH
9468: CALL_OW 88
// if Kaia then
9472: LD_EXP 26
9476: IFFALSE 9518
// begin ComTurnUnit ( Heike , Kaia ) ;
9478: LD_EXP 21
9482: PPUSH
9483: LD_EXP 26
9487: PPUSH
9488: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9492: LD_EXP 26
9496: PPUSH
9497: LD_STRING DK-Start-28
9499: PPUSH
9500: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9504: LD_EXP 21
9508: PPUSH
9509: LD_STRING DH-Start-29
9511: PPUSH
9512: CALL_OW 88
// end else
9516: GO 9530
// Say ( Heike , DH-Start-a-28 ) ;
9518: LD_EXP 21
9522: PPUSH
9523: LD_STRING DH-Start-a-28
9525: PPUSH
9526: CALL_OW 88
// if Givi then
9530: LD_EXP 22
9534: IFFALSE 9769
// begin ComTurnUnit ( Heike , Givi ) ;
9536: LD_EXP 21
9540: PPUSH
9541: LD_EXP 22
9545: PPUSH
9546: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9550: LD_EXP 22
9554: PPUSH
9555: LD_EXP 21
9559: PPUSH
9560: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9564: LD_EXP 21
9568: PPUSH
9569: LD_STRING DH-Start-30
9571: PPUSH
9572: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9576: LD_EXP 21
9580: PPUSH
9581: LD_STRING DH-Start-31
9583: PPUSH
9584: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9588: LD_EXP 22
9592: PPUSH
9593: LD_STRING DG-Start-32
9595: PPUSH
9596: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9600: LD_EXP 21
9604: PPUSH
9605: LD_STRING DH-Start-33
9607: PPUSH
9608: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9612: LD_EXP 22
9616: PPUSH
9617: LD_STRING DG-Start-34
9619: PPUSH
9620: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9624: LD_EXP 22
9628: PPUSH
9629: LD_STRING DG-Start-35
9631: PPUSH
9632: CALL_OW 88
// if Kurt and not dialogue_skipped then
9636: LD_EXP 32
9640: PUSH
9641: LD_OWVAR 59
9645: NOT
9646: AND
9647: IFFALSE 9678
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9649: LD_EXP 32
9653: PPUSH
9654: LD_INT 28
9656: PPUSH
9657: LD_INT 13
9659: PPUSH
9660: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9664: LD_EXP 32
9668: PPUSH
9669: LD_EXP 21
9673: PPUSH
9674: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9678: LD_EXP 22
9682: PPUSH
9683: LD_STRING DG-Start-36
9685: PPUSH
9686: CALL_OW 88
// if Kurt then
9690: LD_EXP 32
9694: IFFALSE 9767
// begin if not Givi then
9696: LD_EXP 22
9700: NOT
9701: IFFALSE 9717
// Say ( Kurt , DKs-Start-37-a ) else
9703: LD_EXP 32
9707: PPUSH
9708: LD_STRING DKs-Start-37-a
9710: PPUSH
9711: CALL_OW 88
9715: GO 9729
// Say ( Kurt , DKs-Start-37 ) ;
9717: LD_EXP 32
9721: PPUSH
9722: LD_STRING DKs-Start-37
9724: PPUSH
9725: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9729: LD_EXP 32
9733: PPUSH
9734: LD_STRING DKs-Start-38
9736: PPUSH
9737: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9741: LD_EXP 21
9745: PPUSH
9746: LD_EXP 32
9750: PPUSH
9751: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9755: LD_EXP 21
9759: PPUSH
9760: LD_STRING DH-Start-39
9762: PPUSH
9763: CALL_OW 88
// end ; end else
9767: GO 9798
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9769: LD_EXP 34
9773: PPUSH
9774: LD_STRING DArm-Start-a-37
9776: PPUSH
9777: LD_STRING DArf-Start-a-37
9779: PPUSH
9780: CALL 1198 0 3
9784: IFFALSE 9798
// Say ( Heike , DH-Start-39 ) ;
9786: LD_EXP 21
9790: PPUSH
9791: LD_STRING DH-Start-39
9793: PPUSH
9794: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9798: LD_INT 44
9800: PPUSH
9801: LD_INT 25
9803: PPUSH
9804: CALL_OW 428
9808: IFFALSE 9825
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9810: LD_INT 44
9812: PPUSH
9813: LD_INT 25
9815: PPUSH
9816: CALL_OW 428
9820: PPUSH
9821: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9825: LD_EXP 30
9829: PPUSH
9830: LD_INT 5
9832: PPUSH
9833: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9837: LD_EXP 30
9841: PPUSH
9842: LD_INT 44
9844: PPUSH
9845: LD_INT 25
9847: PPUSH
9848: LD_INT 0
9850: PPUSH
9851: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9855: LD_EXP 30
9859: PPUSH
9860: LD_INT 29
9862: PPUSH
9863: LD_INT 12
9865: PPUSH
9866: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9870: LD_INT 35
9872: PPUSH
9873: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9877: LD_OWVAR 59
9881: PUSH
9882: LD_EXP 21
9886: PPUSH
9887: LD_EXP 30
9891: PPUSH
9892: CALL_OW 296
9896: PUSH
9897: LD_INT 8
9899: LESS
9900: OR
9901: PUSH
9902: LD_EXP 30
9906: PPUSH
9907: LD_INT 26
9909: PPUSH
9910: LD_INT 9
9912: PPUSH
9913: CALL_OW 297
9917: PUSH
9918: LD_INT 6
9920: LESS
9921: OR
9922: IFFALSE 9870
// Say ( Olaf , DO-Scout-1 ) ;
9924: LD_EXP 30
9928: PPUSH
9929: LD_STRING DO-Scout-1
9931: PPUSH
9932: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9936: LD_EXP 30
9940: PPUSH
9941: LD_EXP 21
9945: PPUSH
9946: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9950: LD_ADDR_VAR 0 2
9954: PUSH
9955: LD_VAR 0 6
9959: PUSH
9960: LD_EXP 34
9964: UNION
9965: PUSH
9966: FOR_IN
9967: IFFALSE 9985
// ComTurnUnit ( i , Olaf ) ;
9969: LD_VAR 0 2
9973: PPUSH
9974: LD_EXP 30
9978: PPUSH
9979: CALL_OW 119
9983: GO 9966
9985: POP
9986: POP
// wait ( 0 0$0.3 ) ;
9987: LD_INT 10
9989: PPUSH
9990: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9994: LD_EXP 21
9998: PPUSH
9999: LD_EXP 30
10003: PPUSH
10004: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10008: LD_EXP 21
10012: PPUSH
10013: LD_EXP 30
10017: PPUSH
10018: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10022: LD_EXP 21
10026: PPUSH
10027: LD_STRING DH-Scout-2
10029: PPUSH
10030: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10034: LD_EXP 30
10038: PPUSH
10039: LD_STRING DO-Scout-3
10041: PPUSH
10042: CALL_OW 88
// if Mike and Givi then
10046: LD_EXP 23
10050: PUSH
10051: LD_EXP 22
10055: AND
10056: IFFALSE 10072
// Say ( Olaf , DO-Scout-4 ) else
10058: LD_EXP 30
10062: PPUSH
10063: LD_STRING DO-Scout-4
10065: PPUSH
10066: CALL_OW 88
10070: GO 10172
// begin if Mike then
10072: LD_EXP 23
10076: IFFALSE 10104
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10078: LD_EXP 30
10082: PPUSH
10083: LD_STRING DO-Scout-a-4
10085: PPUSH
10086: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10090: LD_EXP 21
10094: PPUSH
10095: LD_STRING DH-Scout-a-5
10097: PPUSH
10098: CALL_OW 88
// end else
10102: GO 10172
// if Givi then
10104: LD_EXP 22
10108: IFFALSE 10136
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10110: LD_EXP 30
10114: PPUSH
10115: LD_STRING DO-Scout-b-4
10117: PPUSH
10118: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10122: LD_EXP 21
10126: PPUSH
10127: LD_STRING DH-Scout-b-5
10129: PPUSH
10130: CALL_OW 88
// end else
10134: GO 10172
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10136: LD_EXP 30
10140: PPUSH
10141: LD_STRING DO-Scout-f-4
10143: PPUSH
10144: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10148: LD_EXP 21
10152: PPUSH
10153: LD_STRING DH-Scout-f-5
10155: PPUSH
10156: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10160: LD_EXP 30
10164: PPUSH
10165: LD_STRING DO-Scout-f-6
10167: PPUSH
10168: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10172: LD_EXP 21
10176: PPUSH
10177: LD_STRING DH-Scout-5
10179: PPUSH
10180: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10184: LD_EXP 30
10188: PPUSH
10189: LD_STRING DO-Scout-6
10191: PPUSH
10192: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10196: LD_EXP 30
10200: PPUSH
10201: LD_STRING DO-Scout-7
10203: PPUSH
10204: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10208: LD_EXP 21
10212: PPUSH
10213: LD_STRING DH-Scout-8
10215: PPUSH
10216: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10220: LD_EXP 21
10224: PPUSH
10225: LD_STRING DH-Scout-9
10227: PPUSH
10228: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10232: LD_EXP 30
10236: PPUSH
10237: LD_STRING DO-Scout-10
10239: PPUSH
10240: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10244: LD_EXP 30
10248: PPUSH
10249: LD_STRING DO-Scout-12
10251: PPUSH
10252: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10256: LD_EXP 30
10260: PPUSH
10261: LD_STRING DO-Scout-13
10263: PPUSH
10264: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10268: LD_EXP 30
10272: PPUSH
10273: LD_STRING DO-Scout-14
10275: PPUSH
10276: CALL_OW 88
// if Givi then
10280: LD_EXP 22
10284: IFFALSE 10310
// begin Say ( Givi , DG-Scout-15 ) ;
10286: LD_EXP 22
10290: PPUSH
10291: LD_STRING DG-Scout-15
10293: PPUSH
10294: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10298: LD_EXP 26
10302: PPUSH
10303: LD_STRING DK-Scout-16
10305: PPUSH
10306: CALL_OW 88
// end ; if not dialogue_skipped then
10310: LD_OWVAR 59
10314: NOT
10315: IFFALSE 10436
// begin async ;
10317: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10318: LD_EXP 30
10322: PPUSH
10323: LD_STRING DO-Scout-17
10325: PPUSH
10326: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10330: LD_INT 55
10332: PPUSH
10333: LD_INT 77
10335: PPUSH
10336: LD_INT 2
10338: PPUSH
10339: LD_INT 6
10341: NEG
10342: PPUSH
10343: CALL 1147 0 4
// wait ( 10 ) ;
10347: LD_INT 10
10349: PPUSH
10350: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10354: LD_INT 55
10356: PPUSH
10357: LD_INT 77
10359: PPUSH
10360: CALL_OW 84
// wait ( 0 0$10 ) ;
10364: LD_INT 350
10366: PPUSH
10367: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10371: LD_EXP 30
10375: PPUSH
10376: LD_STRING DO-Scout-18
10378: PPUSH
10379: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10383: LD_INT 204
10385: PPUSH
10386: LD_INT 107
10388: PPUSH
10389: LD_INT 2
10391: PPUSH
10392: LD_INT 12
10394: NEG
10395: PPUSH
10396: CALL 1147 0 4
// wait ( 10 ) ;
10400: LD_INT 10
10402: PPUSH
10403: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10407: LD_INT 204
10409: PPUSH
10410: LD_INT 107
10412: PPUSH
10413: CALL_OW 84
// wait ( 0 0$10 ) ;
10417: LD_INT 350
10419: PPUSH
10420: CALL_OW 67
// sync ;
10424: SYNC
// CenterNowOnUnits ( Heike ) ;
10425: LD_EXP 21
10429: PPUSH
10430: CALL_OW 87
// end else
10434: GO 10470
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10436: LD_INT 55
10438: PPUSH
10439: LD_INT 77
10441: PPUSH
10442: LD_INT 2
10444: PPUSH
10445: LD_INT 6
10447: NEG
10448: PPUSH
10449: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10453: LD_INT 204
10455: PPUSH
10456: LD_INT 107
10458: PPUSH
10459: LD_INT 2
10461: PPUSH
10462: LD_INT 12
10464: NEG
10465: PPUSH
10466: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10470: LD_EXP 30
10474: PPUSH
10475: LD_STRING DO-Scout-19
10477: PPUSH
10478: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10482: LD_EXP 30
10486: PPUSH
10487: LD_STRING DO-Scout-20
10489: PPUSH
10490: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10494: LD_EXP 21
10498: PPUSH
10499: LD_STRING DH-Scout-21
10501: PPUSH
10502: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10506: LD_EXP 21
10510: PPUSH
10511: LD_STRING DH-Scout-22
10513: PPUSH
10514: CALL_OW 88
// InGameOff ;
10518: CALL_OW 9
// if heikeSecondSquad then
10522: LD_EXP 34
10526: IFFALSE 10540
// ForceSleep ( heikeSecondSquad , false ) ;
10528: LD_EXP 34
10532: PPUSH
10533: LD_INT 0
10535: PPUSH
10536: CALL_OW 585
// if Givi then
10540: LD_EXP 22
10544: IFFALSE 10559
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10546: LD_INT 13
10548: PPUSH
10549: LD_INT 2
10551: PPUSH
10552: LD_INT 1
10554: PPUSH
10555: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10559: LD_STRING Road
10561: PPUSH
10562: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10566: LD_ADDR_VAR 0 2
10570: PUSH
10571: LD_INT 22
10573: PUSH
10574: LD_INT 5
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 21
10583: PUSH
10584: LD_INT 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: PUSH
10600: FOR_IN
10601: IFFALSE 10617
// SetSide ( i , 2 ) ;
10603: LD_VAR 0 2
10607: PPUSH
10608: LD_INT 2
10610: PPUSH
10611: CALL_OW 235
10615: GO 10600
10617: POP
10618: POP
// SaveForQuickRestart ;
10619: CALL_OW 22
// music_class := music_auto ;
10623: LD_ADDR_OWVAR 72
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 1
10635: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10636: LD_INT 2
10638: PPUSH
10639: LD_INT 9
10641: PPUSH
10642: CALL_OW 294
10646: IFFALSE 11011
10648: GO 10650
10650: DISABLE
// begin DialogueOn ;
10651: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10655: LD_INT 111
10657: PPUSH
10658: LD_INT 72
10660: PPUSH
10661: LD_INT 2
10663: PPUSH
10664: LD_INT 20
10666: NEG
10667: PPUSH
10668: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10672: LD_INT 111
10674: PPUSH
10675: LD_INT 72
10677: PPUSH
10678: LD_INT 2
10680: PPUSH
10681: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10685: LD_INT 111
10687: PPUSH
10688: LD_INT 72
10690: PPUSH
10691: CALL_OW 86
// if IsOk ( Kamil ) then
10695: LD_EXP 25
10699: PPUSH
10700: CALL_OW 302
10704: IFFALSE 10821
// begin Say ( Kamil , DKam-Cross-1 ) ;
10706: LD_EXP 25
10710: PPUSH
10711: LD_STRING DKam-Cross-1
10713: PPUSH
10714: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10718: LD_EXP 25
10722: PPUSH
10723: LD_STRING DKam-Cross-2
10725: PPUSH
10726: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10730: LD_EXP 25
10734: PPUSH
10735: LD_STRING DKam-Cross-3
10737: PPUSH
10738: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10742: LD_EXP 25
10746: PPUSH
10747: LD_STRING DKam-Cross-4
10749: PPUSH
10750: CALL_OW 88
// if IsOk ( Ibrahim ) then
10754: LD_EXP 24
10758: PPUSH
10759: CALL_OW 302
10763: IFFALSE 10819
// begin if ibrahimJoinedIn04 then
10765: LD_EXP 4
10769: IFFALSE 10783
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10771: LD_EXP 24
10775: PPUSH
10776: LD_STRING DI-Cross-b-5
10778: PPUSH
10779: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10783: LD_EXP 24
10787: PPUSH
10788: LD_STRING DI-Cross-b-6
10790: PPUSH
10791: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10795: LD_EXP 24
10799: PPUSH
10800: LD_STRING DI-Cross-b-7
10802: PPUSH
10803: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10807: LD_EXP 25
10811: PPUSH
10812: LD_STRING DKam-Cross-8
10814: PPUSH
10815: CALL_OW 88
// end ; end else
10819: GO 10979
// if IsOk ( Sophia ) then
10821: LD_EXP 27
10825: PPUSH
10826: CALL_OW 302
10830: IFFALSE 10947
// begin Say ( Sophia , DS-Cross-1 ) ;
10832: LD_EXP 27
10836: PPUSH
10837: LD_STRING DS-Cross-1
10839: PPUSH
10840: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10844: LD_EXP 27
10848: PPUSH
10849: LD_STRING DS-Cross-2
10851: PPUSH
10852: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10856: LD_EXP 27
10860: PPUSH
10861: LD_STRING DS-Cross-3
10863: PPUSH
10864: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10868: LD_EXP 27
10872: PPUSH
10873: LD_STRING DS-Cross-4
10875: PPUSH
10876: CALL_OW 88
// if IsOk ( Ibrahim ) then
10880: LD_EXP 24
10884: PPUSH
10885: CALL_OW 302
10889: IFFALSE 10945
// begin if ibrahimJoinedIn04 then
10891: LD_EXP 4
10895: IFFALSE 10909
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10897: LD_EXP 24
10901: PPUSH
10902: LD_STRING DI-Cross-b-5
10904: PPUSH
10905: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10909: LD_EXP 24
10913: PPUSH
10914: LD_STRING DI-Cross-b-6
10916: PPUSH
10917: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10921: LD_EXP 24
10925: PPUSH
10926: LD_STRING DI-Cross-b-7
10928: PPUSH
10929: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10933: LD_EXP 27
10937: PPUSH
10938: LD_STRING DS-Cross-8
10940: PPUSH
10941: CALL_OW 88
// end ; end else
10945: GO 10979
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10947: LD_EXP 34
10951: PPUSH
10952: LD_INT 50
10954: PUSH
10955: EMPTY
10956: LIST
10957: PPUSH
10958: CALL_OW 72
10962: IFFALSE 10979
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10964: LD_EXP 34
10968: PPUSH
10969: LD_STRING DArm-Cross-c-1
10971: PPUSH
10972: LD_STRING DArf-Cross-c-1
10974: PPUSH
10975: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10979: LD_INT 85
10981: PPUSH
10982: LD_INT 2
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 322
// DialogueOff ;
10992: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10996: LD_STRING Crane
10998: PPUSH
10999: CALL_OW 337
// spottedCrossRoad := true ;
11003: LD_ADDR_EXP 8
11007: PUSH
11008: LD_INT 1
11010: ST_TO_ADDR
// end ;
11011: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11012: LD_INT 22
11014: PUSH
11015: LD_INT 2
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 2
11024: PUSH
11025: LD_INT 30
11027: PUSH
11028: LD_INT 0
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 30
11037: PUSH
11038: LD_INT 1
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: PUSH
11059: LD_EXP 26
11063: PPUSH
11064: CALL_OW 302
11068: PUSH
11069: LD_EXP 34
11073: OR
11074: AND
11075: IFFALSE 11287
11077: GO 11079
11079: DISABLE
// begin DialogueOn ;
11080: CALL_OW 6
// if Kaia then
11084: LD_EXP 26
11088: IFFALSE 11101
// CenterNowOnUnits ( Kaia ) else
11090: LD_EXP 26
11094: PPUSH
11095: CALL_OW 87
11099: GO 11110
// CenterNowOnUnits ( Heike ) ;
11101: LD_EXP 21
11105: PPUSH
11106: CALL_OW 87
// if IsOk ( Kaia ) then
11110: LD_EXP 26
11114: PPUSH
11115: CALL_OW 302
11119: IFFALSE 11135
// Say ( Kaia , DK-Cam-1 ) else
11121: LD_EXP 26
11125: PPUSH
11126: LD_STRING DK-Cam-1
11128: PPUSH
11129: CALL_OW 88
11133: GO 11150
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11135: LD_EXP 34
11139: PPUSH
11140: LD_STRING DArm-Cam-1
11142: PPUSH
11143: LD_STRING DArf-Cam-1
11145: PPUSH
11146: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
11150: LD_EXP 21
11154: PPUSH
11155: LD_STRING DH-Cam-2
11157: PPUSH
11158: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11162: LD_EXP 21
11166: PPUSH
11167: LD_STRING DH-Cam-3
11169: PPUSH
11170: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11174: LD_EXP 21
11178: PPUSH
11179: LD_STRING DH-Cam-4
11181: PPUSH
11182: CALL_OW 88
// if IsOk ( Kaia ) then
11186: LD_EXP 26
11190: PPUSH
11191: CALL_OW 302
11195: IFFALSE 11211
// Say ( Kaia , DK-Cam-5 ) else
11197: LD_EXP 26
11201: PPUSH
11202: LD_STRING DK-Cam-5
11204: PPUSH
11205: CALL_OW 88
11209: GO 11226
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11211: LD_EXP 34
11215: PPUSH
11216: LD_STRING DArm-Cam-5
11218: PPUSH
11219: LD_STRING DArf-Cam-5
11221: PPUSH
11222: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11226: LD_EXP 30
11230: PPUSH
11231: LD_STRING DO-Cam-6
11233: PPUSH
11234: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11238: LD_EXP 30
11242: PPUSH
11243: LD_STRING DO-Cam-7
11245: PPUSH
11246: CALL_OW 88
// DialogueOff ;
11250: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11254: LD_STRING Radar
11256: PPUSH
11257: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11261: LD_INT 6
11263: PPUSH
11264: LD_INT 2
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11274: LD_INT 20
11276: PPUSH
11277: LD_INT 2
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 324
// end ;
11287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11288: LD_INT 22
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 2
11300: PUSH
11301: LD_INT 34
11303: PUSH
11304: LD_INT 30
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 35
11313: PUSH
11314: LD_INT 30
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PPUSH
11330: CALL_OW 69
11334: IFFALSE 11346
11336: GO 11338
11338: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11339: LD_STRING RadarDone
11341: PPUSH
11342: CALL_OW 337
11346: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11347: LD_INT 22
11349: PUSH
11350: LD_INT 2
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 34
11359: PUSH
11360: LD_INT 88
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: IFFALSE 11387
11377: GO 11379
11379: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11380: LD_STRING CraneDone
11382: PPUSH
11383: CALL_OW 337
11387: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11388: LD_EXP 30
11392: PPUSH
11393: CALL_OW 302
11397: PUSH
11398: LD_EXP 33
11402: PPUSH
11403: CALL_OW 302
11407: AND
11408: PUSH
11409: LD_INT 6
11411: PPUSH
11412: LD_INT 2
11414: PPUSH
11415: CALL_OW 321
11419: PUSH
11420: LD_INT 2
11422: EQUAL
11423: AND
11424: PUSH
11425: LD_EXP 33
11429: PPUSH
11430: LD_EXP 21
11434: PPUSH
11435: CALL_OW 296
11439: PUSH
11440: LD_INT 10
11442: LESS
11443: PUSH
11444: LD_EXP 33
11448: PPUSH
11449: CALL_OW 310
11453: OR
11454: AND
11455: IFFALSE 11669
11457: GO 11459
11459: DISABLE
// begin DialogueOn ;
11460: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11464: LD_EXP 33
11468: PPUSH
11469: LD_STRING DA-RC-1
11471: PPUSH
11472: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11476: LD_EXP 33
11480: PPUSH
11481: LD_STRING DA-RC-2
11483: PPUSH
11484: CALL_OW 88
// if IsOk ( Kaia ) then
11488: LD_EXP 26
11492: PPUSH
11493: CALL_OW 302
11497: IFFALSE 11571
// begin Say ( Kaia , DK-RC-3 ) ;
11499: LD_EXP 26
11503: PPUSH
11504: LD_STRING DK-RC-3
11506: PPUSH
11507: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11511: LD_EXP 33
11515: PPUSH
11516: LD_STRING DA-RC-4
11518: PPUSH
11519: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11523: LD_EXP 26
11527: PPUSH
11528: LD_STRING DK-RC-5
11530: PPUSH
11531: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11535: LD_EXP 33
11539: PPUSH
11540: LD_STRING DA-RC-6
11542: PPUSH
11543: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11547: LD_EXP 26
11551: PPUSH
11552: LD_STRING DK-RC-7
11554: PPUSH
11555: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11559: LD_EXP 33
11563: PPUSH
11564: LD_STRING DA-RC-8
11566: PPUSH
11567: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11571: LD_EXP 21
11575: PPUSH
11576: LD_STRING DH-RC-9
11578: PPUSH
11579: CALL_OW 88
// if IsOk ( Markov ) then
11583: LD_EXP 28
11587: PPUSH
11588: CALL_OW 302
11592: IFFALSE 11620
// begin Say ( Markov , DMar-RC-10 ) ;
11594: LD_EXP 28
11598: PPUSH
11599: LD_STRING DMar-RC-10
11601: PPUSH
11602: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11606: LD_EXP 28
11610: PPUSH
11611: LD_STRING DMar-RC-11
11613: PPUSH
11614: CALL_OW 88
// end else
11618: GO 11632
// begin Say ( Olaf , DO-RC-a-10 ) ;
11620: LD_EXP 30
11624: PPUSH
11625: LD_STRING DO-RC-a-10
11627: PPUSH
11628: CALL_OW 88
// end ; DialogueOff ;
11632: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11636: LD_STRING RemoteControl
11638: PPUSH
11639: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11643: LD_INT 15
11645: PPUSH
11646: LD_INT 2
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11656: LD_INT 22
11658: PPUSH
11659: LD_INT 2
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 324
// end ;
11669: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11670: LD_INT 12
11672: PPUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 70
11687: IFFALSE 12054
11689: GO 11691
11691: DISABLE
11692: LD_INT 0
11694: PPUSH
// begin PrepareWestBase ;
11695: CALL 3961 0 0
// westBaseSpotted := true ;
11699: LD_ADDR_EXP 5
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11707: LD_INT 70
11709: PPUSH
11710: CALL_OW 67
// InGameOn ;
11714: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11718: LD_INT 56
11720: PPUSH
11721: LD_INT 77
11723: PPUSH
11724: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11728: LD_INT 56
11730: PPUSH
11731: LD_INT 77
11733: PPUSH
11734: LD_INT 2
11736: PPUSH
11737: LD_INT 12
11739: NEG
11740: PPUSH
11741: CALL_OW 330
// wait ( 0 0$2 ) ;
11745: LD_INT 70
11747: PPUSH
11748: CALL_OW 67
// DialogueOn ;
11752: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11756: LD_EXP 21
11760: PPUSH
11761: LD_STRING DH-Rbase-1
11763: PPUSH
11764: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11768: LD_EXP 26
11772: PPUSH
11773: LD_STRING DK-Rbase-2
11775: PPUSH
11776: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11780: LD_EXP 26
11784: PPUSH
11785: LD_STRING DK-Rbase-3
11787: PPUSH
11788: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11792: LD_EXP 26
11796: PPUSH
11797: LD_STRING DK-Rbase-4
11799: PPUSH
11800: CALL_OW 88
// DialogueOff ;
11804: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11808: LD_INT 56
11810: PPUSH
11811: LD_INT 77
11813: PPUSH
11814: LD_INT 2
11816: PPUSH
11817: CALL_OW 331
// InGameOff ;
11821: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11825: LD_INT 35
11827: PPUSH
11828: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11832: LD_EXP 42
11836: NOT
11837: PUSH
11838: LD_EXP 43
11842: NOT
11843: AND
11844: IFFALSE 11825
// wait ( 0 0$2 ) ;
11846: LD_INT 70
11848: PPUSH
11849: CALL_OW 67
// if IsOk ( Kaia ) then
11853: LD_EXP 26
11857: PPUSH
11858: CALL_OW 302
11862: IFFALSE 11977
// begin DialogueOn ;
11864: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11868: LD_INT 56
11870: PPUSH
11871: LD_INT 81
11873: PPUSH
11874: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11878: LD_EXP 26
11882: PPUSH
11883: LD_STRING DK-Rbase-5
11885: PPUSH
11886: CALL_OW 88
// if IsOk ( Givi ) then
11890: LD_EXP 22
11894: PPUSH
11895: CALL_OW 302
11899: IFFALSE 11973
// begin Say ( Givi , DG-Rbase-6 ) ;
11901: LD_EXP 22
11905: PPUSH
11906: LD_STRING DG-Rbase-6
11908: PPUSH
11909: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11913: LD_EXP 22
11917: PPUSH
11918: LD_STRING DG-Rbase-7
11920: PPUSH
11921: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11925: LD_EXP 26
11929: PPUSH
11930: LD_STRING DK-Rbase-8
11932: PPUSH
11933: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11937: LD_EXP 22
11941: PPUSH
11942: LD_STRING DG-Rbase-9
11944: PPUSH
11945: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11949: LD_EXP 22
11953: PPUSH
11954: LD_STRING DG-Rbase-10
11956: PPUSH
11957: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11961: LD_EXP 26
11965: PPUSH
11966: LD_STRING DK-Rbase-11
11968: PPUSH
11969: CALL_OW 88
// end ; DialogueOff ;
11973: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: LD_INT 12
11984: PPUSH
11985: LD_INT 22
11987: PUSH
11988: LD_INT 3
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 21
11997: PUSH
11998: LD_INT 3
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PPUSH
12009: CALL_OW 70
12013: PUSH
12014: FOR_IN
12015: IFFALSE 12031
// SetSide ( i , 2 ) ;
12017: LD_VAR 0 1
12021: PPUSH
12022: LD_INT 2
12024: PPUSH
12025: CALL_OW 235
12029: GO 12014
12031: POP
12032: POP
// westBaseCaptured := true ;
12033: LD_ADDR_EXP 9
12037: PUSH
12038: LD_INT 1
12040: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12041: LD_INT 0
12043: PPUSH
12044: LD_INT 2
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 324
// end ;
12054: PPOPN 1
12056: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 or tick > 15 15$00 do
12057: LD_EXP 38
12061: NOT
12062: PUSH
12063: LD_INT 10
12065: PPUSH
12066: CALL_OW 255
12070: PUSH
12071: LD_INT 2
12073: EQUAL
12074: OR
12075: PUSH
12076: LD_OWVAR 1
12080: PUSH
12081: LD_INT 31500
12083: GREATER
12084: OR
12085: IFFALSE 12222
12087: GO 12089
12089: DISABLE
// begin DialogueOn ;
12090: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12094: LD_EXP 21
12098: PPUSH
12099: LD_STRING DH-Goal-1
12101: PPUSH
12102: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12106: LD_EXP 29
12110: PPUSH
12111: LD_STRING DShar-Goal-2
12113: PPUSH
12114: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12118: LD_EXP 21
12122: PPUSH
12123: LD_STRING DH-Goal-3
12125: PPUSH
12126: CALL_OW 88
// if reinforcementsAllowed then
12130: LD_EXP 14
12134: IFFALSE 12160
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12136: LD_EXP 29
12140: PPUSH
12141: LD_STRING DShar-Goal-4
12143: PPUSH
12144: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12148: LD_EXP 21
12152: PPUSH
12153: LD_STRING DH-Goal-5
12155: PPUSH
12156: CALL_OW 88
// end ; DialogueOff ;
12160: CALL_OW 7
// eastBaseCaptured := true ;
12164: LD_ADDR_EXP 10
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12172: LD_STRING BaseCaptured
12174: PPUSH
12175: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12179: LD_INT 10
12181: PPUSH
12182: LD_INT 2
12184: PPUSH
12185: CALL_OW 235
// if not reinforcementsAllowed then
12189: LD_EXP 14
12193: NOT
12194: IFFALSE 12198
// exit ;
12196: GO 12222
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12198: LD_INT 21000
12200: PUSH
12201: LD_INT 1050
12203: NEG
12204: PPUSH
12205: LD_INT 1050
12207: PPUSH
12208: CALL_OW 12
12212: PLUS
12213: PPUSH
12214: CALL_OW 67
// PrepareReinforcements ;
12218: CALL 2174 0 0
// end ;
12222: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12223: LD_INT 22
12225: PUSH
12226: LD_INT 2
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: LD_INT 13
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PPUSH
12247: CALL_OW 69
12251: IFFALSE 12268
12253: GO 12255
12255: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12256: LD_EXP 22
12260: PPUSH
12261: LD_STRING DG-Lab-1
12263: PPUSH
12264: CALL_OW 88
// end ;
12268: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12269: LD_INT 5
12271: PPUSH
12272: LD_INT 2
12274: PPUSH
12275: CALL_OW 321
12279: PUSH
12280: LD_INT 2
12282: EQUAL
12283: PUSH
12284: LD_EXP 22
12288: PPUSH
12289: CALL_OW 302
12293: AND
12294: IFFALSE 12355
12296: GO 12298
12298: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12299: LD_EXP 22
12303: PPUSH
12304: LD_STRING DG-Stim-1
12306: PPUSH
12307: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12311: LD_EXP 21
12315: PPUSH
12316: LD_STRING DH-Stim-2
12318: PPUSH
12319: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12323: LD_EXP 22
12327: PPUSH
12328: LD_STRING DG-Stim-3
12330: PPUSH
12331: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12335: LD_EXP 21
12339: PPUSH
12340: LD_STRING DH-Stim-4
12342: PPUSH
12343: CALL_OW 88
// drugsResearched := true ;
12347: LD_ADDR_EXP 11
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// end ;
12355: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12356: LD_EXP 11
12360: IFFALSE 12672
12362: GO 12364
12364: DISABLE
12365: LD_INT 0
12367: PPUSH
12368: PPUSH
12369: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12370: LD_ADDR_VAR 0 2
12374: PUSH
12375: LD_EXP 21
12379: PUSH
12380: LD_EXP 22
12384: PUSH
12385: LD_EXP 30
12389: PUSH
12390: LD_EXP 28
12394: PUSH
12395: LD_EXP 26
12399: PUSH
12400: LD_EXP 27
12404: PUSH
12405: LD_EXP 32
12409: PUSH
12410: LD_EXP 25
12414: PUSH
12415: LD_EXP 23
12419: PUSH
12420: LD_EXP 24
12424: PUSH
12425: LD_EXP 33
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12443: LD_ADDR_VAR 0 3
12447: PUSH
12448: LD_STRING H
12450: PUSH
12451: LD_STRING G
12453: PUSH
12454: LD_STRING O
12456: PUSH
12457: LD_STRING Mar
12459: PUSH
12460: LD_STRING K
12462: PUSH
12463: LD_STRING S
12465: PUSH
12466: LD_STRING Ks
12468: PUSH
12469: LD_STRING Kam
12471: PUSH
12472: LD_STRING M
12474: PUSH
12475: LD_STRING I
12477: PUSH
12478: LD_STRING A
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12494: LD_INT 35
12496: PPUSH
12497: CALL_OW 67
// for i := tmp downto 1 do
12501: LD_ADDR_VAR 0 1
12505: PUSH
12506: DOUBLE
12507: LD_VAR 0 2
12511: INC
12512: ST_TO_ADDR
12513: LD_INT 1
12515: PUSH
12516: FOR_DOWNTO
12517: IFFALSE 12663
// if GetLives ( tmp [ i ] ) < 250 then
12519: LD_VAR 0 2
12523: PUSH
12524: LD_VAR 0 1
12528: ARRAY
12529: PPUSH
12530: CALL_OW 256
12534: PUSH
12535: LD_INT 250
12537: LESS
12538: IFFALSE 12661
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12540: LD_ADDR_EXP 19
12544: PUSH
12545: LD_EXP 19
12549: PUSH
12550: LD_INT 1
12552: PLUS
12553: ST_TO_ADDR
// DialogueOn ;
12554: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12558: LD_VAR 0 2
12562: PUSH
12563: LD_VAR 0 1
12567: ARRAY
12568: PPUSH
12569: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12573: LD_VAR 0 2
12577: PUSH
12578: LD_VAR 0 1
12582: ARRAY
12583: PPUSH
12584: LD_STRING D
12586: PUSH
12587: LD_VAR 0 3
12591: PUSH
12592: LD_VAR 0 1
12596: ARRAY
12597: STR
12598: PUSH
12599: LD_STRING -Stim-a-1
12601: STR
12602: PPUSH
12603: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12607: LD_ADDR_VAR 0 2
12611: PUSH
12612: LD_VAR 0 2
12616: PPUSH
12617: LD_VAR 0 1
12621: PPUSH
12622: CALL_OW 3
12626: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12627: LD_ADDR_VAR 0 3
12631: PUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 3
12646: ST_TO_ADDR
// drugsTested := true ;
12647: LD_ADDR_EXP 6
12651: PUSH
12652: LD_INT 1
12654: ST_TO_ADDR
// DialogueOff ;
12655: CALL_OW 7
// break ;
12659: GO 12663
// end ;
12661: GO 12516
12663: POP
12664: POP
// until not tmp ;
12665: LD_VAR 0 2
12669: NOT
12670: IFFALSE 12494
// end ;
12672: PPOPN 3
12674: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12675: LD_INT 22
12677: PUSH
12678: LD_INT 2
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 34
12687: PUSH
12688: LD_INT 31
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 69
12703: PUSH
12704: LD_INT 22
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PPUSH
12728: CALL_OW 69
12732: AND
12733: IFFALSE 12746
12735: GO 12737
12737: DISABLE
// remoteControlConstructed := true ;
12738: LD_ADDR_EXP 12
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
12746: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12747: LD_EXP 12
12751: IFFALSE 13051
12753: GO 12755
12755: DISABLE
12756: LD_INT 0
12758: PPUSH
12759: PPUSH
12760: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12761: LD_ADDR_VAR 0 2
12765: PUSH
12766: LD_EXP 21
12770: PUSH
12771: LD_EXP 22
12775: PUSH
12776: LD_EXP 30
12780: PUSH
12781: LD_EXP 28
12785: PUSH
12786: LD_EXP 26
12790: PUSH
12791: LD_EXP 27
12795: PUSH
12796: LD_EXP 32
12800: PUSH
12801: LD_EXP 25
12805: PUSH
12806: LD_EXP 23
12810: PUSH
12811: LD_EXP 24
12815: PUSH
12816: LD_EXP 33
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12834: LD_ADDR_VAR 0 3
12838: PUSH
12839: LD_STRING H
12841: PUSH
12842: LD_STRING G
12844: PUSH
12845: LD_STRING O
12847: PUSH
12848: LD_STRING Mar
12850: PUSH
12851: LD_STRING K
12853: PUSH
12854: LD_STRING S
12856: PUSH
12857: LD_STRING Ks
12859: PUSH
12860: LD_STRING Kam
12862: PUSH
12863: LD_STRING M
12865: PUSH
12866: LD_STRING I
12868: PUSH
12869: LD_STRING A
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12885: LD_INT 35
12887: PPUSH
12888: CALL_OW 67
// for i := tmp downto 1 do
12892: LD_ADDR_VAR 0 1
12896: PUSH
12897: DOUBLE
12898: LD_VAR 0 2
12902: INC
12903: ST_TO_ADDR
12904: LD_INT 1
12906: PUSH
12907: FOR_DOWNTO
12908: IFFALSE 13042
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12910: LD_VAR 0 2
12914: PUSH
12915: LD_VAR 0 1
12919: ARRAY
12920: PPUSH
12921: CALL_OW 257
12925: PUSH
12926: LD_INT 3
12928: EQUAL
12929: PUSH
12930: LD_VAR 0 2
12934: PUSH
12935: LD_VAR 0 1
12939: ARRAY
12940: PPUSH
12941: CALL_OW 432
12945: AND
12946: IFFALSE 13040
// begin DialogueOn ;
12948: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12952: LD_VAR 0 2
12956: PUSH
12957: LD_VAR 0 1
12961: ARRAY
12962: PPUSH
12963: LD_STRING D
12965: PUSH
12966: LD_VAR 0 3
12970: PUSH
12971: LD_VAR 0 1
12975: ARRAY
12976: STR
12977: PUSH
12978: LD_STRING -RC-a-1
12980: STR
12981: PPUSH
12982: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12986: LD_ADDR_VAR 0 2
12990: PUSH
12991: LD_VAR 0 2
12995: PPUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 3
13005: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13006: LD_ADDR_VAR 0 3
13010: PUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: LD_VAR 0 1
13020: PPUSH
13021: CALL_OW 3
13025: ST_TO_ADDR
// DialogueOff ;
13026: CALL_OW 7
// remoteControlTested := true ;
13030: LD_ADDR_EXP 7
13034: PUSH
13035: LD_INT 1
13037: ST_TO_ADDR
// break ;
13038: GO 13042
// end ;
13040: GO 12907
13042: POP
13043: POP
// until not tmp ;
13044: LD_VAR 0 2
13048: NOT
13049: IFFALSE 12885
// end ;
13051: PPOPN 3
13053: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13054: LD_EXP 7
13058: PUSH
13059: LD_EXP 28
13063: PPUSH
13064: CALL_OW 302
13068: AND
13069: IFFALSE 13098
13071: GO 13073
13073: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13074: LD_EXP 28
13078: PPUSH
13079: LD_STRING DMar-RC-a-2
13081: PPUSH
13082: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13086: LD_EXP 28
13090: PPUSH
13091: LD_STRING DMar-RC-a-3
13093: PPUSH
13094: CALL_OW 88
// end ;
13098: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13099: LD_EXP 14
13103: PUSH
13104: LD_EXP 21
13108: PPUSH
13109: LD_EXP 33
13113: PPUSH
13114: CALL_OW 296
13118: PUSH
13119: LD_INT 8
13121: LESS
13122: AND
13123: PUSH
13124: LD_INT 2
13126: PPUSH
13127: CALL_OW 463
13131: NOT
13132: AND
13133: PUSH
13134: LD_EXP 33
13138: PPUSH
13139: CALL_OW 302
13143: AND
13144: PUSH
13145: LD_EXP 21
13149: PPUSH
13150: CALL_OW 302
13154: AND
13155: IFFALSE 13333
13157: GO 13159
13159: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13160: LD_EXP 33
13164: PPUSH
13165: CALL_OW 310
13169: NOT
13170: IFFALSE 13186
// ComTurnUnit ( Aviradze , Heike ) ;
13172: LD_EXP 33
13176: PPUSH
13177: LD_EXP 21
13181: PPUSH
13182: CALL_OW 119
// if not IsInUnit ( Heike ) then
13186: LD_EXP 21
13190: PPUSH
13191: CALL_OW 310
13195: NOT
13196: IFFALSE 13212
// ComTurnUnit ( Heike , Aviradze ) ;
13198: LD_EXP 21
13202: PPUSH
13203: LD_EXP 33
13207: PPUSH
13208: CALL_OW 119
// wait ( 0 0$1 ) ;
13212: LD_INT 35
13214: PPUSH
13215: CALL_OW 67
// DialogueOn ;
13219: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13223: LD_EXP 33
13227: PPUSH
13228: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13232: LD_EXP 21
13236: PPUSH
13237: LD_STRING DH-Beria-1
13239: PPUSH
13240: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13244: LD_EXP 33
13248: PPUSH
13249: LD_STRING DA-Beria-2
13251: PPUSH
13252: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13256: LD_EXP 21
13260: PPUSH
13261: LD_STRING DH-Beria-3
13263: PPUSH
13264: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13268: LD_EXP 33
13272: PPUSH
13273: LD_STRING DA-Beria-4
13275: PPUSH
13276: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13280: LD_EXP 33
13284: PPUSH
13285: LD_STRING DA-Beria-5
13287: PPUSH
13288: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13292: LD_EXP 33
13296: PPUSH
13297: LD_STRING DA-Beria-6
13299: PPUSH
13300: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13304: LD_EXP 21
13308: PPUSH
13309: LD_STRING DA-Beria-7
13311: PPUSH
13312: CALL_OW 88
// DialogueOff ;
13316: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13320: LD_INT 52
13322: PPUSH
13323: LD_INT 2
13325: PPUSH
13326: LD_INT 1
13328: PPUSH
13329: CALL_OW 322
// end ;
13333: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13334: LD_EXP 26
13338: PPUSH
13339: CALL_OW 300
13343: PUSH
13344: LD_EXP 26
13348: PPUSH
13349: CALL_OW 256
13353: PUSH
13354: LD_INT 10
13356: LESS
13357: AND
13358: IFFALSE 13395
13360: GO 13362
13362: DISABLE
// begin DialogueOn ;
13363: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13367: LD_EXP 26
13371: PPUSH
13372: LD_STRING DK-Kdeath-1
13374: PPUSH
13375: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13379: LD_EXP 21
13383: PPUSH
13384: LD_STRING DH-Kdeath-2
13386: PPUSH
13387: CALL_OW 88
// DialogueOff ;
13391: CALL_OW 7
// end ;
13395: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13396: LD_INT 2
13398: PPUSH
13399: LD_EXP 39
13403: PPUSH
13404: CALL 1298 0 2
13408: IFFALSE 13425
13410: GO 13412
13412: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13413: LD_EXP 21
13417: PPUSH
13418: LD_STRING DH-Obj-1
13420: PPUSH
13421: CALL_OW 88
13425: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13426: LD_INT 2
13428: PPUSH
13429: LD_EXP 40
13433: PPUSH
13434: CALL 1298 0 2
13438: IFFALSE 13455
13440: GO 13442
13442: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13443: LD_EXP 21
13447: PPUSH
13448: LD_STRING DH-Obj-a-1
13450: PPUSH
13451: CALL_OW 88
13455: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13456: LD_EXP 10
13460: PUSH
13461: LD_OWVAR 1
13465: PUSH
13466: LD_INT 23100
13468: PUSH
13469: LD_INT 22050
13471: PUSH
13472: LD_INT 21000
13474: PUSH
13475: LD_INT 19950
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: PUSH
13484: LD_OWVAR 67
13488: ARRAY
13489: GREATEREQUAL
13490: OR
13491: IFFALSE 13517
13493: GO 13495
13495: DISABLE
// begin if eastBaseCaptured then
13496: LD_EXP 10
13500: IFFALSE 13509
// wait ( 2 2$00 ) ;
13502: LD_INT 4200
13504: PPUSH
13505: CALL_OW 67
// convoyStarted := true ;
13509: LD_ADDR_EXP 17
13513: PUSH
13514: LD_INT 1
13516: ST_TO_ADDR
// end ;
13517: END
// every 0 0$1 trigger convoyStarted do
13518: LD_EXP 17
13522: IFFALSE 13613
13524: GO 13526
13526: DISABLE
// begin DialogueOn ;
13527: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13531: LD_EXP 29
13535: PPUSH
13536: LD_STRING DShar-Convoy-1
13538: PPUSH
13539: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13543: LD_EXP 21
13547: PPUSH
13548: LD_STRING DH-Convoy-2
13550: PPUSH
13551: CALL_OW 88
// DialogueOff ;
13555: CALL_OW 7
// wait ( 0 0$10 ) ;
13559: LD_INT 350
13561: PPUSH
13562: CALL_OW 67
// PrepareConvoy ;
13566: CALL 4608 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13570: LD_INT 5250
13572: PPUSH
13573: LD_INT 11550
13575: PPUSH
13576: CALL_OW 12
13580: PPUSH
13581: CALL_OW 67
// PrepareConvoy ;
13585: CALL 4608 0 0
// convoyCounter := convoyCounter - 1 ;
13589: LD_ADDR_EXP 16
13593: PUSH
13594: LD_EXP 16
13598: PUSH
13599: LD_INT 1
13601: MINUS
13602: ST_TO_ADDR
// until convoyCounter <= 0 ;
13603: LD_EXP 16
13607: PUSH
13608: LD_INT 0
13610: LESSEQUAL
13611: IFFALSE 13570
// end ;
13613: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13614: LD_EXP 15
13618: PUSH
13619: LD_INT 10
13621: GREATEREQUAL
13622: IFFALSE 13639
13624: GO 13626
13626: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13627: LD_EXP 31
13631: PPUSH
13632: LD_STRING DOm-Fail-1
13634: PPUSH
13635: CALL_OW 94
13639: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13640: LD_EXP 39
13644: NOT
13645: PUSH
13646: LD_EXP 40
13650: NOT
13651: AND
13652: IFFALSE 13664
13654: GO 13656
13656: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13657: LD_STRING RaiderDone
13659: PPUSH
13660: CALL_OW 337
13664: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13665: LD_INT 22
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 33
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: PUSH
13694: LD_INT 3
13696: GREATEREQUAL
13697: PUSH
13698: LD_INT 22
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 34
13710: PUSH
13711: LD_INT 31
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 69
13726: PUSH
13727: LD_INT 2
13729: GREATEREQUAL
13730: AND
13731: IFFALSE 13743
13733: GO 13735
13735: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13736: LD_STRING RemoteControlDone
13738: PPUSH
13739: CALL_OW 337
13743: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13744: LD_EXP 16
13748: PUSH
13749: LD_INT 1
13751: LESS
13752: PUSH
13753: LD_EXP 41
13757: PPUSH
13758: LD_INT 52
13760: PUSH
13761: EMPTY
13762: LIST
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PPUSH
13778: CALL_OW 72
13782: NOT
13783: AND
13784: PUSH
13785: LD_OWVAR 1
13789: PUSH
13790: LD_INT 126000
13792: GREATEREQUAL
13793: OR
13794: IFFALSE 14979
13796: GO 13798
13798: DISABLE
13799: LD_INT 0
13801: PPUSH
13802: PPUSH
13803: PPUSH
13804: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13805: LD_STRING ReinforcementsDone
13807: PPUSH
13808: CALL_OW 337
// music_class := music_victory ;
13812: LD_ADDR_OWVAR 72
13816: PUSH
13817: LD_INT 4
13819: ST_TO_ADDR
// if tick <= 45 45$00 then
13820: LD_OWVAR 1
13824: PUSH
13825: LD_INT 94500
13827: LESSEQUAL
13828: IFFALSE 13837
// SetAchievement ( ACH_HSPEED_5 ) ;
13830: LD_STRING ACH_HSPEED_5
13832: PPUSH
13833: CALL_OW 543
// InGameOn ;
13837: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13841: LD_EXP 21
13845: PPUSH
13846: LD_STRING DH-end-1
13848: PPUSH
13849: CALL_OW 88
// wait ( 0 0$2 ) ;
13853: LD_INT 70
13855: PPUSH
13856: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13860: LD_EXP 29
13864: PPUSH
13865: LD_STRING DShar-end-2
13867: PPUSH
13868: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13872: LD_EXP 39
13876: NOT
13877: PUSH
13878: LD_EXP 40
13882: NOT
13883: AND
13884: IFFALSE 13900
// begin Say ( Heike , DH-end-3 ) ;
13886: LD_EXP 21
13890: PPUSH
13891: LD_STRING DH-end-3
13893: PPUSH
13894: CALL_OW 88
// end else
13898: GO 13997
// begin Say ( Heike , DH-end-a-3 ) ;
13900: LD_EXP 21
13904: PPUSH
13905: LD_STRING DH-end-a-3
13907: PPUSH
13908: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13912: LD_EXP 29
13916: PPUSH
13917: LD_STRING DShar-end-a-4
13919: PPUSH
13920: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13924: LD_EXP 21
13928: PPUSH
13929: LD_STRING DH-end-a-5
13931: PPUSH
13932: CALL_OW 88
// InGameOff ;
13936: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13940: LD_INT 35
13942: PPUSH
13943: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13947: LD_INT 22
13949: PUSH
13950: LD_INT 3
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 1
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PPUSH
13971: CALL_OW 69
13975: PUSH
13976: LD_INT 0
13978: EQUAL
13979: IFFALSE 13940
// InGameOn ;
13981: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13985: LD_EXP 21
13989: PPUSH
13990: LD_STRING DH-end-a-6
13992: PPUSH
13993: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13997: LD_EXP 29
14001: PPUSH
14002: LD_STRING DShar-end-3
14004: PPUSH
14005: CALL_OW 94
// if not flamethrowerBuilt then
14009: LD_EXP 20
14013: NOT
14014: IFFALSE 14023
// SetAchievement ( ACH_FIRE ) ;
14016: LD_STRING ACH_FIRE
14018: PPUSH
14019: CALL_OW 543
// if drugsTested then
14023: LD_EXP 6
14027: IFFALSE 14041
// AddMedal ( med1 , 1 ) else
14029: LD_STRING med1
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 101
14039: GO 14081
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14041: LD_INT 5
14043: PPUSH
14044: LD_INT 2
14046: PPUSH
14047: CALL_OW 321
14051: PUSH
14052: LD_INT 2
14054: EQUAL
14055: IFFALSE 14070
// AddMedal ( med1 , - 1 ) else
14057: LD_STRING med1
14059: PPUSH
14060: LD_INT 1
14062: NEG
14063: PPUSH
14064: CALL_OW 101
14068: GO 14081
// AddMedal ( med1 , - 2 ) ;
14070: LD_STRING med1
14072: PPUSH
14073: LD_INT 2
14075: NEG
14076: PPUSH
14077: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14081: LD_INT 22
14083: PUSH
14084: LD_INT 2
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 33
14093: PUSH
14094: LD_INT 2
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: CALL_OW 69
14109: PUSH
14110: LD_INT 3
14112: GREATEREQUAL
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 34
14126: PUSH
14127: LD_INT 31
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PPUSH
14138: CALL_OW 69
14142: PUSH
14143: LD_INT 1
14145: GREATEREQUAL
14146: AND
14147: IFFALSE 14161
// AddMedal ( med2 , 1 ) else
14149: LD_STRING med2
14151: PPUSH
14152: LD_INT 1
14154: PPUSH
14155: CALL_OW 101
14159: GO 14172
// AddMedal ( med2 , - 1 ) ;
14161: LD_STRING med2
14163: PPUSH
14164: LD_INT 1
14166: NEG
14167: PPUSH
14168: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14172: LD_EXP 15
14176: PUSH
14177: LD_INT 10
14179: PUSH
14180: LD_INT 8
14182: PUSH
14183: LD_INT 6
14185: PUSH
14186: LD_INT 5
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: LD_OWVAR 67
14199: ARRAY
14200: LESS
14201: IFFALSE 14215
// AddMedal ( med3 , 1 ) else
14203: LD_STRING med3
14205: PPUSH
14206: LD_INT 1
14208: PPUSH
14209: CALL_OW 101
14213: GO 14226
// AddMedal ( med3 , - 1 ) ;
14215: LD_STRING med3
14217: PPUSH
14218: LD_INT 1
14220: NEG
14221: PPUSH
14222: CALL_OW 101
// GiveMedals ( MAIN ) ;
14226: LD_STRING MAIN
14228: PPUSH
14229: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14233: LD_INT 22
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 23
14245: PUSH
14246: LD_INT 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 21
14255: PUSH
14256: LD_INT 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: PPUSH
14273: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14277: LD_EXP 15
14281: PPUSH
14282: LD_STRING 05_ConvoySavedCounter
14284: PPUSH
14285: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14289: LD_EXP 13
14293: PPUSH
14294: LD_STRING 05_Radar
14296: PPUSH
14297: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14301: LD_EXP 6
14305: PPUSH
14306: LD_STRING 05_DrugsTested
14308: PPUSH
14309: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14313: LD_INT 22
14315: PUSH
14316: LD_INT 2
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 33
14325: PUSH
14326: LD_INT 2
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PPUSH
14337: CALL_OW 69
14341: PUSH
14342: LD_INT 3
14344: GREATEREQUAL
14345: PUSH
14346: LD_INT 22
14348: PUSH
14349: LD_INT 2
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 34
14358: PUSH
14359: LD_INT 31
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PPUSH
14370: CALL_OW 69
14374: PUSH
14375: LD_INT 2
14377: GREATEREQUAL
14378: AND
14379: PPUSH
14380: LD_STRING 05_RemoteControl
14382: PPUSH
14383: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14387: LD_ADDR_VAR 0 2
14391: PUSH
14392: LD_INT 22
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 21
14404: PUSH
14405: LD_INT 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 69
14420: ST_TO_ADDR
// if tmp then
14421: LD_VAR 0 2
14425: IFFALSE 14544
// begin vehs := [ ] ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: EMPTY
14433: ST_TO_ADDR
// for i in tmp do
14434: LD_ADDR_VAR 0 1
14438: PUSH
14439: LD_VAR 0 2
14443: PUSH
14444: FOR_IN
14445: IFFALSE 14530
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14447: LD_ADDR_VAR 0 4
14451: PUSH
14452: LD_VAR 0 4
14456: PPUSH
14457: LD_VAR 0 4
14461: PUSH
14462: LD_INT 1
14464: PLUS
14465: PPUSH
14466: LD_VAR 0 1
14470: PPUSH
14471: CALL_OW 265
14475: PUSH
14476: LD_VAR 0 1
14480: PPUSH
14481: CALL_OW 262
14485: PUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 263
14495: PUSH
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 264
14505: PUSH
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 248
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 1
14527: ST_TO_ADDR
14528: GO 14444
14530: POP
14531: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14532: LD_VAR 0 4
14536: PPUSH
14537: LD_STRING 05_Vehicles
14539: PPUSH
14540: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: LD_INT 25
14551: PPUSH
14552: LD_INT 21
14554: PUSH
14555: LD_INT 3
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PPUSH
14562: CALL_OW 70
14566: ST_TO_ADDR
// tmp2 := [ ] ;
14567: LD_ADDR_VAR 0 3
14571: PUSH
14572: EMPTY
14573: ST_TO_ADDR
// if tmp then
14574: LD_VAR 0 2
14578: IFFALSE 14731
// begin for i in tmp do
14580: LD_ADDR_VAR 0 1
14584: PUSH
14585: LD_VAR 0 2
14589: PUSH
14590: FOR_IN
14591: IFFALSE 14717
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14593: LD_ADDR_VAR 0 3
14597: PUSH
14598: LD_VAR 0 3
14602: PPUSH
14603: LD_VAR 0 1
14607: PPUSH
14608: CALL_OW 266
14612: PUSH
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 250
14622: PUSH
14623: LD_VAR 0 1
14627: PPUSH
14628: CALL_OW 251
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 254
14642: PUSH
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 248
14652: PUSH
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL_OW 267
14662: PUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 268
14675: PUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: LD_INT 2
14683: PPUSH
14684: CALL_OW 268
14688: PUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 269
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL 73262 0 2
14714: ST_TO_ADDR
14715: GO 14590
14717: POP
14718: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14719: LD_VAR 0 3
14723: PPUSH
14724: LD_STRING 05_Buildings
14726: PPUSH
14727: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14731: LD_EXP 21
14735: PPUSH
14736: LD_STRING 05_Heike
14738: PPUSH
14739: CALL_OW 38
// if Aviradze then
14743: LD_EXP 33
14747: IFFALSE 14761
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14749: LD_EXP 33
14753: PPUSH
14754: LD_STRING 05_Aviradze
14756: PPUSH
14757: CALL_OW 38
// if Ibrahim then
14761: LD_EXP 24
14765: IFFALSE 14779
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14767: LD_EXP 24
14771: PPUSH
14772: LD_STRING 05_Ibrahim
14774: PPUSH
14775: CALL_OW 38
// if Kamil then
14779: LD_EXP 25
14783: IFFALSE 14797
// SaveCharacters ( Kamil , 05_Kamil ) ;
14785: LD_EXP 25
14789: PPUSH
14790: LD_STRING 05_Kamil
14792: PPUSH
14793: CALL_OW 38
// if Sophia then
14797: LD_EXP 27
14801: IFFALSE 14815
// SaveCharacters ( Sophia , 05_Sophia ) ;
14803: LD_EXP 27
14807: PPUSH
14808: LD_STRING 05_Sophia
14810: PPUSH
14811: CALL_OW 38
// if Kaia then
14815: LD_EXP 26
14819: IFFALSE 14833
// SaveCharacters ( Kaia , 05_Kaia ) ;
14821: LD_EXP 26
14825: PPUSH
14826: LD_STRING 05_Kaia
14828: PPUSH
14829: CALL_OW 38
// if Givi then
14833: LD_EXP 22
14837: IFFALSE 14851
// SaveCharacters ( Givi , 05_Givi ) ;
14839: LD_EXP 22
14843: PPUSH
14844: LD_STRING 05_Givi
14846: PPUSH
14847: CALL_OW 38
// if Mike then
14851: LD_EXP 23
14855: IFFALSE 14869
// SaveCharacters ( Mike , 05_Mike ) ;
14857: LD_EXP 23
14861: PPUSH
14862: LD_STRING 05_Mike
14864: PPUSH
14865: CALL_OW 38
// if Markov then
14869: LD_EXP 28
14873: IFFALSE 14887
// SaveCharacters ( Markov , 05_Markov ) ;
14875: LD_EXP 28
14879: PPUSH
14880: LD_STRING 05_Markov
14882: PPUSH
14883: CALL_OW 38
// if Kurt then
14887: LD_EXP 32
14891: IFFALSE 14905
// SaveCharacters ( Kurt , 05_Kurt ) ;
14893: LD_EXP 32
14897: PPUSH
14898: LD_STRING 05_Kurt
14900: PPUSH
14901: CALL_OW 38
// if heikeSecondSquad then
14905: LD_EXP 34
14909: IFFALSE 14923
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14911: LD_EXP 34
14915: PPUSH
14916: LD_STRING 05_others
14918: PPUSH
14919: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14923: LD_ADDR_VAR 0 2
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 2
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 23
14940: PUSH
14941: LD_INT 0
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: CALL_OW 69
14956: ST_TO_ADDR
// if tmp then
14957: LD_VAR 0 2
14961: IFFALSE 14975
// SaveCharacters ( tmp , 05_apes ) ;
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_STRING 05_apes
14970: PPUSH
14971: CALL_OW 38
// YouWin ;
14975: CALL_OW 103
// end ; end_of_file
14979: PPOPN 4
14981: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14982: LD_EXP 9
14986: PUSH
14987: LD_INT 13
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: CALL_OW 287
14997: PUSH
14998: LD_INT 25
15000: LESS
15001: AND
15002: IFFALSE 15029
15004: GO 15006
15006: DISABLE
// begin enable ;
15007: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15008: LD_INT 1
15010: PPUSH
15011: LD_INT 5
15013: PPUSH
15014: CALL_OW 12
15018: PPUSH
15019: LD_INT 13
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 55
// end ; end_of_file
15029: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15030: LD_INT 0
15032: PPUSH
15033: PPUSH
15034: PPUSH
15035: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 264
15045: PUSH
15046: LD_INT 91
15048: EQUAL
15049: IFFALSE 15121
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15051: LD_INT 68
15053: PPUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: CALL_OW 255
15063: PPUSH
15064: CALL_OW 321
15068: PUSH
15069: LD_INT 2
15071: EQUAL
15072: IFFALSE 15084
// eff := 70 else
15074: LD_ADDR_VAR 0 4
15078: PUSH
15079: LD_INT 70
15081: ST_TO_ADDR
15082: GO 15092
// eff := 30 ;
15084: LD_ADDR_VAR 0 4
15088: PUSH
15089: LD_INT 30
15091: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL_OW 250
15101: PPUSH
15102: LD_VAR 0 1
15106: PPUSH
15107: CALL_OW 251
15111: PPUSH
15112: LD_VAR 0 4
15116: PPUSH
15117: CALL_OW 495
// end ; end ;
15121: LD_VAR 0 2
15125: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15126: LD_INT 0
15128: PPUSH
// end ;
15129: LD_VAR 0 4
15133: RET
// export function SOS_Command ( cmd ) ; begin
15134: LD_INT 0
15136: PPUSH
// end ;
15137: LD_VAR 0 2
15141: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15142: LD_INT 0
15144: PPUSH
// end ;
15145: LD_VAR 0 6
15149: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15150: LD_INT 0
15152: PPUSH
15153: PPUSH
// if not vehicle or not factory then
15154: LD_VAR 0 1
15158: NOT
15159: PUSH
15160: LD_VAR 0 2
15164: NOT
15165: OR
15166: IFFALSE 15170
// exit ;
15168: GO 15401
// if factoryWaypoints >= factory then
15170: LD_EXP 113
15174: PUSH
15175: LD_VAR 0 2
15179: GREATEREQUAL
15180: IFFALSE 15401
// if factoryWaypoints [ factory ] then
15182: LD_EXP 113
15186: PUSH
15187: LD_VAR 0 2
15191: ARRAY
15192: IFFALSE 15401
// begin if GetControl ( vehicle ) = control_manual then
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 263
15203: PUSH
15204: LD_INT 1
15206: EQUAL
15207: IFFALSE 15288
// begin driver := IsDrivenBy ( vehicle ) ;
15209: LD_ADDR_VAR 0 4
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 311
15223: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15224: LD_VAR 0 4
15228: PPUSH
15229: LD_EXP 113
15233: PUSH
15234: LD_VAR 0 2
15238: ARRAY
15239: PUSH
15240: LD_INT 3
15242: ARRAY
15243: PPUSH
15244: LD_EXP 113
15248: PUSH
15249: LD_VAR 0 2
15253: ARRAY
15254: PUSH
15255: LD_INT 4
15257: ARRAY
15258: PPUSH
15259: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15263: LD_VAR 0 4
15267: PPUSH
15268: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15272: LD_VAR 0 4
15276: PPUSH
15277: LD_VAR 0 2
15281: PPUSH
15282: CALL_OW 180
// end else
15286: GO 15401
// if GetControl ( vehicle ) = control_remote then
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 263
15297: PUSH
15298: LD_INT 2
15300: EQUAL
15301: IFFALSE 15362
// begin wait ( 0 0$2 ) ;
15303: LD_INT 70
15305: PPUSH
15306: CALL_OW 67
// if Connect ( vehicle ) then
15310: LD_VAR 0 1
15314: PPUSH
15315: CALL 43868 0 1
15319: IFFALSE 15360
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15321: LD_VAR 0 1
15325: PPUSH
15326: LD_EXP 113
15330: PUSH
15331: LD_VAR 0 2
15335: ARRAY
15336: PUSH
15337: LD_INT 3
15339: ARRAY
15340: PPUSH
15341: LD_EXP 113
15345: PUSH
15346: LD_VAR 0 2
15350: ARRAY
15351: PUSH
15352: LD_INT 4
15354: ARRAY
15355: PPUSH
15356: CALL_OW 171
// end else
15360: GO 15401
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: LD_EXP 113
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: PUSH
15378: LD_INT 3
15380: ARRAY
15381: PPUSH
15382: LD_EXP 113
15386: PUSH
15387: LD_VAR 0 2
15391: ARRAY
15392: PUSH
15393: LD_INT 4
15395: ARRAY
15396: PPUSH
15397: CALL_OW 171
// end ; end ;
15401: LD_VAR 0 3
15405: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15406: LD_INT 0
15408: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15409: LD_VAR 0 1
15413: PUSH
15414: LD_INT 250
15416: EQUAL
15417: PUSH
15418: LD_VAR 0 2
15422: PPUSH
15423: CALL_OW 264
15427: PUSH
15428: LD_INT 81
15430: EQUAL
15431: AND
15432: IFFALSE 15453
// MinerPlaceMine ( unit , x , y ) ;
15434: LD_VAR 0 2
15438: PPUSH
15439: LD_VAR 0 4
15443: PPUSH
15444: LD_VAR 0 5
15448: PPUSH
15449: CALL 18277 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15453: LD_VAR 0 1
15457: PUSH
15458: LD_INT 251
15460: EQUAL
15461: PUSH
15462: LD_VAR 0 2
15466: PPUSH
15467: CALL_OW 264
15471: PUSH
15472: LD_INT 81
15474: EQUAL
15475: AND
15476: IFFALSE 15497
// MinerDetonateMine ( unit , x , y ) ;
15478: LD_VAR 0 2
15482: PPUSH
15483: LD_VAR 0 4
15487: PPUSH
15488: LD_VAR 0 5
15492: PPUSH
15493: CALL 18552 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15497: LD_VAR 0 1
15501: PUSH
15502: LD_INT 252
15504: EQUAL
15505: PUSH
15506: LD_VAR 0 2
15510: PPUSH
15511: CALL_OW 264
15515: PUSH
15516: LD_INT 81
15518: EQUAL
15519: AND
15520: IFFALSE 15541
// MinerCreateMinefield ( unit , x , y ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: LD_VAR 0 4
15531: PPUSH
15532: LD_VAR 0 5
15536: PPUSH
15537: CALL 18969 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15541: LD_VAR 0 1
15545: PUSH
15546: LD_INT 253
15548: EQUAL
15549: PUSH
15550: LD_VAR 0 2
15554: PPUSH
15555: CALL_OW 257
15559: PUSH
15560: LD_INT 5
15562: EQUAL
15563: AND
15564: IFFALSE 15585
// ComBinocular ( unit , x , y ) ;
15566: LD_VAR 0 2
15570: PPUSH
15571: LD_VAR 0 4
15575: PPUSH
15576: LD_VAR 0 5
15580: PPUSH
15581: CALL 19338 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15585: LD_VAR 0 1
15589: PUSH
15590: LD_INT 254
15592: EQUAL
15593: PUSH
15594: LD_VAR 0 2
15598: PPUSH
15599: CALL_OW 264
15603: PUSH
15604: LD_INT 99
15606: EQUAL
15607: AND
15608: PUSH
15609: LD_VAR 0 3
15613: PPUSH
15614: CALL_OW 263
15618: PUSH
15619: LD_INT 3
15621: EQUAL
15622: AND
15623: IFFALSE 15639
// HackDestroyVehicle ( unit , selectedUnit ) ;
15625: LD_VAR 0 2
15629: PPUSH
15630: LD_VAR 0 3
15634: PPUSH
15635: CALL 17641 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15639: LD_VAR 0 1
15643: PUSH
15644: LD_INT 255
15646: EQUAL
15647: PUSH
15648: LD_VAR 0 2
15652: PPUSH
15653: CALL_OW 264
15657: PUSH
15658: LD_INT 14
15660: PUSH
15661: LD_INT 53
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: IN
15668: AND
15669: PUSH
15670: LD_VAR 0 4
15674: PPUSH
15675: LD_VAR 0 5
15679: PPUSH
15680: CALL_OW 488
15684: AND
15685: IFFALSE 15709
// CutTreeXYR ( unit , x , y , 12 ) ;
15687: LD_VAR 0 2
15691: PPUSH
15692: LD_VAR 0 4
15696: PPUSH
15697: LD_VAR 0 5
15701: PPUSH
15702: LD_INT 12
15704: PPUSH
15705: CALL 15804 0 4
// if cmd = 256 then
15709: LD_VAR 0 1
15713: PUSH
15714: LD_INT 256
15716: EQUAL
15717: IFFALSE 15738
// SetFactoryWaypoint ( unit , x , y ) ;
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_VAR 0 4
15728: PPUSH
15729: LD_VAR 0 5
15733: PPUSH
15734: CALL 34249 0 3
// if cmd = 257 then
15738: LD_VAR 0 1
15742: PUSH
15743: LD_INT 257
15745: EQUAL
15746: IFFALSE 15767
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15748: LD_VAR 0 2
15752: PPUSH
15753: LD_VAR 0 4
15757: PPUSH
15758: LD_VAR 0 5
15762: PPUSH
15763: CALL 34611 0 3
// if cmd = 258 then
15767: LD_VAR 0 1
15771: PUSH
15772: LD_INT 258
15774: EQUAL
15775: IFFALSE 15799
// BurnTreeXYR ( unit , x , y , 8 ) ;
15777: LD_VAR 0 2
15781: PPUSH
15782: LD_VAR 0 4
15786: PPUSH
15787: LD_VAR 0 5
15791: PPUSH
15792: LD_INT 8
15794: PPUSH
15795: CALL 16198 0 4
// end ;
15799: LD_VAR 0 6
15803: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
15811: PPUSH
15812: PPUSH
15813: PPUSH
15814: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 302
15824: NOT
15825: PUSH
15826: LD_VAR 0 2
15830: PPUSH
15831: LD_VAR 0 3
15835: PPUSH
15836: CALL_OW 488
15840: NOT
15841: OR
15842: PUSH
15843: LD_VAR 0 4
15847: NOT
15848: OR
15849: IFFALSE 15853
// exit ;
15851: GO 16193
// list := [ ] ;
15853: LD_ADDR_VAR 0 13
15857: PUSH
15858: EMPTY
15859: ST_TO_ADDR
// if x - r < 0 then
15860: LD_VAR 0 2
15864: PUSH
15865: LD_VAR 0 4
15869: MINUS
15870: PUSH
15871: LD_INT 0
15873: LESS
15874: IFFALSE 15886
// min_x := 0 else
15876: LD_ADDR_VAR 0 7
15880: PUSH
15881: LD_INT 0
15883: ST_TO_ADDR
15884: GO 15902
// min_x := x - r ;
15886: LD_ADDR_VAR 0 7
15890: PUSH
15891: LD_VAR 0 2
15895: PUSH
15896: LD_VAR 0 4
15900: MINUS
15901: ST_TO_ADDR
// if y - r < 0 then
15902: LD_VAR 0 3
15906: PUSH
15907: LD_VAR 0 4
15911: MINUS
15912: PUSH
15913: LD_INT 0
15915: LESS
15916: IFFALSE 15928
// min_y := 0 else
15918: LD_ADDR_VAR 0 8
15922: PUSH
15923: LD_INT 0
15925: ST_TO_ADDR
15926: GO 15944
// min_y := y - r ;
15928: LD_ADDR_VAR 0 8
15932: PUSH
15933: LD_VAR 0 3
15937: PUSH
15938: LD_VAR 0 4
15942: MINUS
15943: ST_TO_ADDR
// max_x := x + r ;
15944: LD_ADDR_VAR 0 9
15948: PUSH
15949: LD_VAR 0 2
15953: PUSH
15954: LD_VAR 0 4
15958: PLUS
15959: ST_TO_ADDR
// max_y := y + r ;
15960: LD_ADDR_VAR 0 10
15964: PUSH
15965: LD_VAR 0 3
15969: PUSH
15970: LD_VAR 0 4
15974: PLUS
15975: ST_TO_ADDR
// for _x = min_x to max_x do
15976: LD_ADDR_VAR 0 11
15980: PUSH
15981: DOUBLE
15982: LD_VAR 0 7
15986: DEC
15987: ST_TO_ADDR
15988: LD_VAR 0 9
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16111
// for _y = min_y to max_y do
15996: LD_ADDR_VAR 0 12
16000: PUSH
16001: DOUBLE
16002: LD_VAR 0 8
16006: DEC
16007: ST_TO_ADDR
16008: LD_VAR 0 10
16012: PUSH
16013: FOR_TO
16014: IFFALSE 16107
// begin if not ValidHex ( _x , _y ) then
16016: LD_VAR 0 11
16020: PPUSH
16021: LD_VAR 0 12
16025: PPUSH
16026: CALL_OW 488
16030: NOT
16031: IFFALSE 16035
// continue ;
16033: GO 16013
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16035: LD_VAR 0 11
16039: PPUSH
16040: LD_VAR 0 12
16044: PPUSH
16045: CALL_OW 351
16049: PUSH
16050: LD_VAR 0 11
16054: PPUSH
16055: LD_VAR 0 12
16059: PPUSH
16060: CALL_OW 554
16064: AND
16065: IFFALSE 16105
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16067: LD_ADDR_VAR 0 13
16071: PUSH
16072: LD_VAR 0 13
16076: PPUSH
16077: LD_VAR 0 13
16081: PUSH
16082: LD_INT 1
16084: PLUS
16085: PPUSH
16086: LD_VAR 0 11
16090: PUSH
16091: LD_VAR 0 12
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 2
16104: ST_TO_ADDR
// end ;
16105: GO 16013
16107: POP
16108: POP
16109: GO 15993
16111: POP
16112: POP
// if not list then
16113: LD_VAR 0 13
16117: NOT
16118: IFFALSE 16122
// exit ;
16120: GO 16193
// for i in list do
16122: LD_ADDR_VAR 0 6
16126: PUSH
16127: LD_VAR 0 13
16131: PUSH
16132: FOR_IN
16133: IFFALSE 16191
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16135: LD_VAR 0 1
16139: PPUSH
16140: LD_STRING M
16142: PUSH
16143: LD_VAR 0 6
16147: PUSH
16148: LD_INT 1
16150: ARRAY
16151: PUSH
16152: LD_VAR 0 6
16156: PUSH
16157: LD_INT 2
16159: ARRAY
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: PUSH
16182: EMPTY
16183: LIST
16184: PPUSH
16185: CALL_OW 447
16189: GO 16132
16191: POP
16192: POP
// end ;
16193: LD_VAR 0 5
16197: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16198: LD_INT 0
16200: PPUSH
16201: PPUSH
16202: PPUSH
16203: PPUSH
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
16208: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 302
16218: NOT
16219: PUSH
16220: LD_VAR 0 2
16224: PPUSH
16225: LD_VAR 0 3
16229: PPUSH
16230: CALL_OW 488
16234: NOT
16235: OR
16236: PUSH
16237: LD_VAR 0 4
16241: NOT
16242: OR
16243: IFFALSE 16247
// exit ;
16245: GO 16595
// list := [ ] ;
16247: LD_ADDR_VAR 0 13
16251: PUSH
16252: EMPTY
16253: ST_TO_ADDR
// if x - r < 0 then
16254: LD_VAR 0 2
16258: PUSH
16259: LD_VAR 0 4
16263: MINUS
16264: PUSH
16265: LD_INT 0
16267: LESS
16268: IFFALSE 16280
// min_x := 0 else
16270: LD_ADDR_VAR 0 7
16274: PUSH
16275: LD_INT 0
16277: ST_TO_ADDR
16278: GO 16296
// min_x := x - r ;
16280: LD_ADDR_VAR 0 7
16284: PUSH
16285: LD_VAR 0 2
16289: PUSH
16290: LD_VAR 0 4
16294: MINUS
16295: ST_TO_ADDR
// if y - r < 0 then
16296: LD_VAR 0 3
16300: PUSH
16301: LD_VAR 0 4
16305: MINUS
16306: PUSH
16307: LD_INT 0
16309: LESS
16310: IFFALSE 16322
// min_y := 0 else
16312: LD_ADDR_VAR 0 8
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
16320: GO 16338
// min_y := y - r ;
16322: LD_ADDR_VAR 0 8
16326: PUSH
16327: LD_VAR 0 3
16331: PUSH
16332: LD_VAR 0 4
16336: MINUS
16337: ST_TO_ADDR
// max_x := x + r ;
16338: LD_ADDR_VAR 0 9
16342: PUSH
16343: LD_VAR 0 2
16347: PUSH
16348: LD_VAR 0 4
16352: PLUS
16353: ST_TO_ADDR
// max_y := y + r ;
16354: LD_ADDR_VAR 0 10
16358: PUSH
16359: LD_VAR 0 3
16363: PUSH
16364: LD_VAR 0 4
16368: PLUS
16369: ST_TO_ADDR
// for _x = min_x to max_x do
16370: LD_ADDR_VAR 0 11
16374: PUSH
16375: DOUBLE
16376: LD_VAR 0 7
16380: DEC
16381: ST_TO_ADDR
16382: LD_VAR 0 9
16386: PUSH
16387: FOR_TO
16388: IFFALSE 16505
// for _y = min_y to max_y do
16390: LD_ADDR_VAR 0 12
16394: PUSH
16395: DOUBLE
16396: LD_VAR 0 8
16400: DEC
16401: ST_TO_ADDR
16402: LD_VAR 0 10
16406: PUSH
16407: FOR_TO
16408: IFFALSE 16501
// begin if not ValidHex ( _x , _y ) then
16410: LD_VAR 0 11
16414: PPUSH
16415: LD_VAR 0 12
16419: PPUSH
16420: CALL_OW 488
16424: NOT
16425: IFFALSE 16429
// continue ;
16427: GO 16407
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16429: LD_VAR 0 11
16433: PPUSH
16434: LD_VAR 0 12
16438: PPUSH
16439: CALL_OW 351
16443: PUSH
16444: LD_VAR 0 11
16448: PPUSH
16449: LD_VAR 0 12
16453: PPUSH
16454: CALL_OW 554
16458: AND
16459: IFFALSE 16499
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16461: LD_ADDR_VAR 0 13
16465: PUSH
16466: LD_VAR 0 13
16470: PPUSH
16471: LD_VAR 0 13
16475: PUSH
16476: LD_INT 1
16478: PLUS
16479: PPUSH
16480: LD_VAR 0 11
16484: PUSH
16485: LD_VAR 0 12
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 2
16498: ST_TO_ADDR
// end ;
16499: GO 16407
16501: POP
16502: POP
16503: GO 16387
16505: POP
16506: POP
// if not list then
16507: LD_VAR 0 13
16511: NOT
16512: IFFALSE 16516
// exit ;
16514: GO 16595
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
16516: LD_ADDR_VAR 0 13
16520: PUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_VAR 0 13
16530: PPUSH
16531: LD_INT 1
16533: PPUSH
16534: LD_INT 1
16536: PPUSH
16537: CALL 41010 0 4
16541: ST_TO_ADDR
// ComStop ( flame ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 141
// for i in list do
16551: LD_ADDR_VAR 0 6
16555: PUSH
16556: LD_VAR 0 13
16560: PUSH
16561: FOR_IN
16562: IFFALSE 16593
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
16564: LD_VAR 0 1
16568: PPUSH
16569: LD_VAR 0 6
16573: PUSH
16574: LD_INT 1
16576: ARRAY
16577: PPUSH
16578: LD_VAR 0 6
16582: PUSH
16583: LD_INT 2
16585: ARRAY
16586: PPUSH
16587: CALL_OW 176
16591: GO 16561
16593: POP
16594: POP
// end ;
16595: LD_VAR 0 5
16599: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16600: LD_EXP 44
16604: NOT
16605: IFFALSE 16655
16607: GO 16609
16609: DISABLE
// begin initHack := true ;
16610: LD_ADDR_EXP 44
16614: PUSH
16615: LD_INT 1
16617: ST_TO_ADDR
// hackTanks := [ ] ;
16618: LD_ADDR_EXP 45
16622: PUSH
16623: EMPTY
16624: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16625: LD_ADDR_EXP 46
16629: PUSH
16630: EMPTY
16631: ST_TO_ADDR
// hackLimit := 3 ;
16632: LD_ADDR_EXP 47
16636: PUSH
16637: LD_INT 3
16639: ST_TO_ADDR
// hackDist := 12 ;
16640: LD_ADDR_EXP 48
16644: PUSH
16645: LD_INT 12
16647: ST_TO_ADDR
// hackCounter := [ ] ;
16648: LD_ADDR_EXP 49
16652: PUSH
16653: EMPTY
16654: ST_TO_ADDR
// end ;
16655: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16656: LD_EXP 44
16660: PUSH
16661: LD_INT 34
16663: PUSH
16664: LD_INT 99
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PPUSH
16671: CALL_OW 69
16675: AND
16676: IFFALSE 16929
16678: GO 16680
16680: DISABLE
16681: LD_INT 0
16683: PPUSH
16684: PPUSH
// begin enable ;
16685: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16686: LD_ADDR_VAR 0 1
16690: PUSH
16691: LD_INT 34
16693: PUSH
16694: LD_INT 99
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PPUSH
16701: CALL_OW 69
16705: PUSH
16706: FOR_IN
16707: IFFALSE 16927
// begin if not i in hackTanks then
16709: LD_VAR 0 1
16713: PUSH
16714: LD_EXP 45
16718: IN
16719: NOT
16720: IFFALSE 16803
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16722: LD_ADDR_EXP 45
16726: PUSH
16727: LD_EXP 45
16731: PPUSH
16732: LD_EXP 45
16736: PUSH
16737: LD_INT 1
16739: PLUS
16740: PPUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 1
16750: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16751: LD_ADDR_EXP 46
16755: PUSH
16756: LD_EXP 46
16760: PPUSH
16761: LD_EXP 46
16765: PUSH
16766: LD_INT 1
16768: PLUS
16769: PPUSH
16770: EMPTY
16771: PPUSH
16772: CALL_OW 1
16776: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16777: LD_ADDR_EXP 49
16781: PUSH
16782: LD_EXP 49
16786: PPUSH
16787: LD_EXP 49
16791: PUSH
16792: LD_INT 1
16794: PLUS
16795: PPUSH
16796: EMPTY
16797: PPUSH
16798: CALL_OW 1
16802: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 302
16812: NOT
16813: IFFALSE 16826
// begin HackUnlinkAll ( i ) ;
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL 16932 0 1
// continue ;
16824: GO 16706
// end ; HackCheckCapturedStatus ( i ) ;
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL 17375 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16835: LD_ADDR_VAR 0 2
16839: PUSH
16840: LD_INT 81
16842: PUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: CALL_OW 255
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 33
16859: PUSH
16860: LD_INT 3
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 91
16869: PUSH
16870: LD_VAR 0 1
16874: PUSH
16875: LD_EXP 48
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 50
16887: PUSH
16888: EMPTY
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: PPUSH
16897: CALL_OW 69
16901: ST_TO_ADDR
// if not tmp then
16902: LD_VAR 0 2
16906: NOT
16907: IFFALSE 16911
// continue ;
16909: GO 16706
// HackLink ( i , tmp ) ;
16911: LD_VAR 0 1
16915: PPUSH
16916: LD_VAR 0 2
16920: PPUSH
16921: CALL 17068 0 2
// end ;
16925: GO 16706
16927: POP
16928: POP
// end ;
16929: PPOPN 2
16931: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
16936: PPUSH
// if not hack in hackTanks then
16937: LD_VAR 0 1
16941: PUSH
16942: LD_EXP 45
16946: IN
16947: NOT
16948: IFFALSE 16952
// exit ;
16950: GO 17063
// index := GetElementIndex ( hackTanks , hack ) ;
16952: LD_ADDR_VAR 0 4
16956: PUSH
16957: LD_EXP 45
16961: PPUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL 40307 0 2
16971: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16972: LD_EXP 46
16976: PUSH
16977: LD_VAR 0 4
16981: ARRAY
16982: IFFALSE 17063
// begin for i in hackTanksCaptured [ index ] do
16984: LD_ADDR_VAR 0 3
16988: PUSH
16989: LD_EXP 46
16993: PUSH
16994: LD_VAR 0 4
16998: ARRAY
16999: PUSH
17000: FOR_IN
17001: IFFALSE 17027
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17003: LD_VAR 0 3
17007: PUSH
17008: LD_INT 1
17010: ARRAY
17011: PPUSH
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 2
17019: ARRAY
17020: PPUSH
17021: CALL_OW 235
17025: GO 17000
17027: POP
17028: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17029: LD_ADDR_EXP 46
17033: PUSH
17034: LD_EXP 46
17038: PPUSH
17039: LD_VAR 0 4
17043: PPUSH
17044: EMPTY
17045: PPUSH
17046: CALL_OW 1
17050: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 0
17058: PPUSH
17059: CALL_OW 505
// end ; end ;
17063: LD_VAR 0 2
17067: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17068: LD_INT 0
17070: PPUSH
17071: PPUSH
17072: PPUSH
// if not hack in hackTanks or not vehicles then
17073: LD_VAR 0 1
17077: PUSH
17078: LD_EXP 45
17082: IN
17083: NOT
17084: PUSH
17085: LD_VAR 0 2
17089: NOT
17090: OR
17091: IFFALSE 17095
// exit ;
17093: GO 17370
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17095: LD_ADDR_VAR 0 2
17099: PUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: LD_VAR 0 2
17109: PPUSH
17110: LD_INT 1
17112: PPUSH
17113: LD_INT 1
17115: PPUSH
17116: CALL 40957 0 4
17120: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17121: LD_ADDR_VAR 0 5
17125: PUSH
17126: LD_EXP 45
17130: PPUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL 40307 0 2
17140: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17141: LD_EXP 46
17145: PUSH
17146: LD_VAR 0 5
17150: ARRAY
17151: PUSH
17152: LD_EXP 47
17156: LESS
17157: IFFALSE 17346
// begin for i := 1 to vehicles do
17159: LD_ADDR_VAR 0 4
17163: PUSH
17164: DOUBLE
17165: LD_INT 1
17167: DEC
17168: ST_TO_ADDR
17169: LD_VAR 0 2
17173: PUSH
17174: FOR_TO
17175: IFFALSE 17344
// begin if hackTanksCaptured [ index ] = hackLimit then
17177: LD_EXP 46
17181: PUSH
17182: LD_VAR 0 5
17186: ARRAY
17187: PUSH
17188: LD_EXP 47
17192: EQUAL
17193: IFFALSE 17197
// break ;
17195: GO 17344
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17197: LD_ADDR_EXP 49
17201: PUSH
17202: LD_EXP 49
17206: PPUSH
17207: LD_VAR 0 5
17211: PPUSH
17212: LD_EXP 49
17216: PUSH
17217: LD_VAR 0 5
17221: ARRAY
17222: PUSH
17223: LD_INT 1
17225: PLUS
17226: PPUSH
17227: CALL_OW 1
17231: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17232: LD_ADDR_EXP 46
17236: PUSH
17237: LD_EXP 46
17241: PPUSH
17242: LD_VAR 0 5
17246: PUSH
17247: LD_EXP 46
17251: PUSH
17252: LD_VAR 0 5
17256: ARRAY
17257: PUSH
17258: LD_INT 1
17260: PLUS
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: LD_VAR 0 2
17270: PUSH
17271: LD_VAR 0 4
17275: ARRAY
17276: PUSH
17277: LD_VAR 0 2
17281: PUSH
17282: LD_VAR 0 4
17286: ARRAY
17287: PPUSH
17288: CALL_OW 255
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL 40522 0 3
17301: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17302: LD_VAR 0 2
17306: PUSH
17307: LD_VAR 0 4
17311: ARRAY
17312: PPUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 255
17322: PPUSH
17323: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17327: LD_VAR 0 2
17331: PUSH
17332: LD_VAR 0 4
17336: ARRAY
17337: PPUSH
17338: CALL_OW 141
// end ;
17342: GO 17174
17344: POP
17345: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17346: LD_VAR 0 1
17350: PPUSH
17351: LD_EXP 46
17355: PUSH
17356: LD_VAR 0 5
17360: ARRAY
17361: PUSH
17362: LD_INT 0
17364: PLUS
17365: PPUSH
17366: CALL_OW 505
// end ;
17370: LD_VAR 0 3
17374: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17375: LD_INT 0
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
// if not hack in hackTanks then
17381: LD_VAR 0 1
17385: PUSH
17386: LD_EXP 45
17390: IN
17391: NOT
17392: IFFALSE 17396
// exit ;
17394: GO 17636
// index := GetElementIndex ( hackTanks , hack ) ;
17396: LD_ADDR_VAR 0 4
17400: PUSH
17401: LD_EXP 45
17405: PPUSH
17406: LD_VAR 0 1
17410: PPUSH
17411: CALL 40307 0 2
17415: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17416: LD_ADDR_VAR 0 3
17420: PUSH
17421: DOUBLE
17422: LD_EXP 46
17426: PUSH
17427: LD_VAR 0 4
17431: ARRAY
17432: INC
17433: ST_TO_ADDR
17434: LD_INT 1
17436: PUSH
17437: FOR_DOWNTO
17438: IFFALSE 17610
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17440: LD_ADDR_VAR 0 5
17444: PUSH
17445: LD_EXP 46
17449: PUSH
17450: LD_VAR 0 4
17454: ARRAY
17455: PUSH
17456: LD_VAR 0 3
17460: ARRAY
17461: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17462: LD_VAR 0 5
17466: PUSH
17467: LD_INT 1
17469: ARRAY
17470: PPUSH
17471: CALL_OW 302
17475: NOT
17476: PUSH
17477: LD_VAR 0 5
17481: PUSH
17482: LD_INT 1
17484: ARRAY
17485: PPUSH
17486: CALL_OW 255
17490: PUSH
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL_OW 255
17500: NONEQUAL
17501: OR
17502: IFFALSE 17608
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17504: LD_VAR 0 5
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: PPUSH
17513: CALL_OW 305
17517: PUSH
17518: LD_VAR 0 5
17522: PUSH
17523: LD_INT 1
17525: ARRAY
17526: PPUSH
17527: CALL_OW 255
17531: PUSH
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 255
17541: EQUAL
17542: AND
17543: IFFALSE 17567
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17545: LD_VAR 0 5
17549: PUSH
17550: LD_INT 1
17552: ARRAY
17553: PPUSH
17554: LD_VAR 0 5
17558: PUSH
17559: LD_INT 2
17561: ARRAY
17562: PPUSH
17563: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17567: LD_ADDR_EXP 46
17571: PUSH
17572: LD_EXP 46
17576: PPUSH
17577: LD_VAR 0 4
17581: PPUSH
17582: LD_EXP 46
17586: PUSH
17587: LD_VAR 0 4
17591: ARRAY
17592: PPUSH
17593: LD_VAR 0 3
17597: PPUSH
17598: CALL_OW 3
17602: PPUSH
17603: CALL_OW 1
17607: ST_TO_ADDR
// end ; end ;
17608: GO 17437
17610: POP
17611: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17612: LD_VAR 0 1
17616: PPUSH
17617: LD_EXP 46
17621: PUSH
17622: LD_VAR 0 4
17626: ARRAY
17627: PUSH
17628: LD_INT 0
17630: PLUS
17631: PPUSH
17632: CALL_OW 505
// end ;
17636: LD_VAR 0 2
17640: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17641: LD_INT 0
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
// if not hack in hackTanks then
17647: LD_VAR 0 1
17651: PUSH
17652: LD_EXP 45
17656: IN
17657: NOT
17658: IFFALSE 17662
// exit ;
17660: GO 17747
// index := GetElementIndex ( hackTanks , hack ) ;
17662: LD_ADDR_VAR 0 5
17666: PUSH
17667: LD_EXP 45
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL 40307 0 2
17681: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17682: LD_ADDR_VAR 0 4
17686: PUSH
17687: DOUBLE
17688: LD_INT 1
17690: DEC
17691: ST_TO_ADDR
17692: LD_EXP 46
17696: PUSH
17697: LD_VAR 0 5
17701: ARRAY
17702: PUSH
17703: FOR_TO
17704: IFFALSE 17745
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17706: LD_EXP 46
17710: PUSH
17711: LD_VAR 0 5
17715: ARRAY
17716: PUSH
17717: LD_VAR 0 4
17721: ARRAY
17722: PUSH
17723: LD_INT 1
17725: ARRAY
17726: PUSH
17727: LD_VAR 0 2
17731: EQUAL
17732: IFFALSE 17743
// KillUnit ( vehicle ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: CALL_OW 66
17743: GO 17703
17745: POP
17746: POP
// end ;
17747: LD_VAR 0 3
17751: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17752: LD_EXP 50
17756: NOT
17757: IFFALSE 17792
17759: GO 17761
17761: DISABLE
// begin initMiner := true ;
17762: LD_ADDR_EXP 50
17766: PUSH
17767: LD_INT 1
17769: ST_TO_ADDR
// minersList := [ ] ;
17770: LD_ADDR_EXP 51
17774: PUSH
17775: EMPTY
17776: ST_TO_ADDR
// minerMinesList := [ ] ;
17777: LD_ADDR_EXP 52
17781: PUSH
17782: EMPTY
17783: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17784: LD_ADDR_EXP 53
17788: PUSH
17789: LD_INT 5
17791: ST_TO_ADDR
// end ;
17792: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17793: LD_EXP 50
17797: PUSH
17798: LD_INT 34
17800: PUSH
17801: LD_INT 81
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PPUSH
17808: CALL_OW 69
17812: AND
17813: IFFALSE 18274
17815: GO 17817
17817: DISABLE
17818: LD_INT 0
17820: PPUSH
17821: PPUSH
17822: PPUSH
17823: PPUSH
// begin enable ;
17824: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17825: LD_ADDR_VAR 0 1
17829: PUSH
17830: LD_INT 34
17832: PUSH
17833: LD_INT 81
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: PUSH
17845: FOR_IN
17846: IFFALSE 17918
// begin if not i in minersList then
17848: LD_VAR 0 1
17852: PUSH
17853: LD_EXP 51
17857: IN
17858: NOT
17859: IFFALSE 17916
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17861: LD_ADDR_EXP 51
17865: PUSH
17866: LD_EXP 51
17870: PPUSH
17871: LD_EXP 51
17875: PUSH
17876: LD_INT 1
17878: PLUS
17879: PPUSH
17880: LD_VAR 0 1
17884: PPUSH
17885: CALL_OW 1
17889: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17890: LD_ADDR_EXP 52
17894: PUSH
17895: LD_EXP 52
17899: PPUSH
17900: LD_EXP 52
17904: PUSH
17905: LD_INT 1
17907: PLUS
17908: PPUSH
17909: EMPTY
17910: PPUSH
17911: CALL_OW 1
17915: ST_TO_ADDR
// end end ;
17916: GO 17845
17918: POP
17919: POP
// for i := minerMinesList downto 1 do
17920: LD_ADDR_VAR 0 1
17924: PUSH
17925: DOUBLE
17926: LD_EXP 52
17930: INC
17931: ST_TO_ADDR
17932: LD_INT 1
17934: PUSH
17935: FOR_DOWNTO
17936: IFFALSE 18272
// begin if IsLive ( minersList [ i ] ) then
17938: LD_EXP 51
17942: PUSH
17943: LD_VAR 0 1
17947: ARRAY
17948: PPUSH
17949: CALL_OW 300
17953: IFFALSE 17981
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17955: LD_EXP 51
17959: PUSH
17960: LD_VAR 0 1
17964: ARRAY
17965: PPUSH
17966: LD_EXP 52
17970: PUSH
17971: LD_VAR 0 1
17975: ARRAY
17976: PPUSH
17977: CALL_OW 505
// if not minerMinesList [ i ] then
17981: LD_EXP 52
17985: PUSH
17986: LD_VAR 0 1
17990: ARRAY
17991: NOT
17992: IFFALSE 17996
// continue ;
17994: GO 17935
// for j := minerMinesList [ i ] downto 1 do
17996: LD_ADDR_VAR 0 2
18000: PUSH
18001: DOUBLE
18002: LD_EXP 52
18006: PUSH
18007: LD_VAR 0 1
18011: ARRAY
18012: INC
18013: ST_TO_ADDR
18014: LD_INT 1
18016: PUSH
18017: FOR_DOWNTO
18018: IFFALSE 18268
// begin side := GetSide ( minersList [ i ] ) ;
18020: LD_ADDR_VAR 0 3
18024: PUSH
18025: LD_EXP 51
18029: PUSH
18030: LD_VAR 0 1
18034: ARRAY
18035: PPUSH
18036: CALL_OW 255
18040: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18041: LD_ADDR_VAR 0 4
18045: PUSH
18046: LD_EXP 52
18050: PUSH
18051: LD_VAR 0 1
18055: ARRAY
18056: PUSH
18057: LD_VAR 0 2
18061: ARRAY
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: PPUSH
18067: LD_EXP 52
18071: PUSH
18072: LD_VAR 0 1
18076: ARRAY
18077: PUSH
18078: LD_VAR 0 2
18082: ARRAY
18083: PUSH
18084: LD_INT 2
18086: ARRAY
18087: PPUSH
18088: CALL_OW 428
18092: ST_TO_ADDR
// if not tmp then
18093: LD_VAR 0 4
18097: NOT
18098: IFFALSE 18102
// continue ;
18100: GO 18017
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18102: LD_VAR 0 4
18106: PUSH
18107: LD_INT 81
18109: PUSH
18110: LD_VAR 0 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 69
18123: IN
18124: PUSH
18125: LD_EXP 52
18129: PUSH
18130: LD_VAR 0 1
18134: ARRAY
18135: PUSH
18136: LD_VAR 0 2
18140: ARRAY
18141: PUSH
18142: LD_INT 1
18144: ARRAY
18145: PPUSH
18146: LD_EXP 52
18150: PUSH
18151: LD_VAR 0 1
18155: ARRAY
18156: PUSH
18157: LD_VAR 0 2
18161: ARRAY
18162: PUSH
18163: LD_INT 2
18165: ARRAY
18166: PPUSH
18167: CALL_OW 458
18171: AND
18172: IFFALSE 18266
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18174: LD_EXP 52
18178: PUSH
18179: LD_VAR 0 1
18183: ARRAY
18184: PUSH
18185: LD_VAR 0 2
18189: ARRAY
18190: PUSH
18191: LD_INT 1
18193: ARRAY
18194: PPUSH
18195: LD_EXP 52
18199: PUSH
18200: LD_VAR 0 1
18204: ARRAY
18205: PUSH
18206: LD_VAR 0 2
18210: ARRAY
18211: PUSH
18212: LD_INT 2
18214: ARRAY
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18225: LD_ADDR_EXP 52
18229: PUSH
18230: LD_EXP 52
18234: PPUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: LD_EXP 52
18244: PUSH
18245: LD_VAR 0 1
18249: ARRAY
18250: PPUSH
18251: LD_VAR 0 2
18255: PPUSH
18256: CALL_OW 3
18260: PPUSH
18261: CALL_OW 1
18265: ST_TO_ADDR
// end ; end ;
18266: GO 18017
18268: POP
18269: POP
// end ;
18270: GO 17935
18272: POP
18273: POP
// end ;
18274: PPOPN 4
18276: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18277: LD_INT 0
18279: PPUSH
18280: PPUSH
// result := false ;
18281: LD_ADDR_VAR 0 4
18285: PUSH
18286: LD_INT 0
18288: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18289: LD_VAR 0 1
18293: PPUSH
18294: CALL_OW 264
18298: PUSH
18299: LD_INT 81
18301: EQUAL
18302: NOT
18303: IFFALSE 18307
// exit ;
18305: GO 18547
// index := GetElementIndex ( minersList , unit ) ;
18307: LD_ADDR_VAR 0 5
18311: PUSH
18312: LD_EXP 51
18316: PPUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL 40307 0 2
18326: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18327: LD_EXP 52
18331: PUSH
18332: LD_VAR 0 5
18336: ARRAY
18337: PUSH
18338: LD_EXP 53
18342: GREATEREQUAL
18343: IFFALSE 18347
// exit ;
18345: GO 18547
// ComMoveXY ( unit , x , y ) ;
18347: LD_VAR 0 1
18351: PPUSH
18352: LD_VAR 0 2
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18366: LD_INT 35
18368: PPUSH
18369: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18373: LD_VAR 0 1
18377: PPUSH
18378: LD_VAR 0 2
18382: PPUSH
18383: LD_VAR 0 3
18387: PPUSH
18388: CALL 72059 0 3
18392: NOT
18393: PUSH
18394: LD_VAR 0 1
18398: PPUSH
18399: CALL_OW 314
18403: AND
18404: IFFALSE 18408
// exit ;
18406: GO 18547
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18408: LD_VAR 0 2
18412: PPUSH
18413: LD_VAR 0 3
18417: PPUSH
18418: CALL_OW 428
18422: PUSH
18423: LD_VAR 0 1
18427: EQUAL
18428: PUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 314
18438: NOT
18439: AND
18440: IFFALSE 18366
// PlaySoundXY ( x , y , PlantMine ) ;
18442: LD_VAR 0 2
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: LD_STRING PlantMine
18454: PPUSH
18455: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18459: LD_VAR 0 2
18463: PPUSH
18464: LD_VAR 0 3
18468: PPUSH
18469: LD_VAR 0 1
18473: PPUSH
18474: CALL_OW 255
18478: PPUSH
18479: LD_INT 0
18481: PPUSH
18482: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18486: LD_ADDR_EXP 52
18490: PUSH
18491: LD_EXP 52
18495: PPUSH
18496: LD_VAR 0 5
18500: PUSH
18501: LD_EXP 52
18505: PUSH
18506: LD_VAR 0 5
18510: ARRAY
18511: PUSH
18512: LD_INT 1
18514: PLUS
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PPUSH
18520: LD_VAR 0 2
18524: PUSH
18525: LD_VAR 0 3
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL 40522 0 3
18538: ST_TO_ADDR
// result := true ;
18539: LD_ADDR_VAR 0 4
18543: PUSH
18544: LD_INT 1
18546: ST_TO_ADDR
// end ;
18547: LD_VAR 0 4
18551: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18552: LD_INT 0
18554: PPUSH
18555: PPUSH
18556: PPUSH
// if not unit in minersList then
18557: LD_VAR 0 1
18561: PUSH
18562: LD_EXP 51
18566: IN
18567: NOT
18568: IFFALSE 18572
// exit ;
18570: GO 18964
// index := GetElementIndex ( minersList , unit ) ;
18572: LD_ADDR_VAR 0 6
18576: PUSH
18577: LD_EXP 51
18581: PPUSH
18582: LD_VAR 0 1
18586: PPUSH
18587: CALL 40307 0 2
18591: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18592: LD_ADDR_VAR 0 5
18596: PUSH
18597: DOUBLE
18598: LD_EXP 52
18602: PUSH
18603: LD_VAR 0 6
18607: ARRAY
18608: INC
18609: ST_TO_ADDR
18610: LD_INT 1
18612: PUSH
18613: FOR_DOWNTO
18614: IFFALSE 18775
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18616: LD_EXP 52
18620: PUSH
18621: LD_VAR 0 6
18625: ARRAY
18626: PUSH
18627: LD_VAR 0 5
18631: ARRAY
18632: PUSH
18633: LD_INT 1
18635: ARRAY
18636: PUSH
18637: LD_VAR 0 2
18641: EQUAL
18642: PUSH
18643: LD_EXP 52
18647: PUSH
18648: LD_VAR 0 6
18652: ARRAY
18653: PUSH
18654: LD_VAR 0 5
18658: ARRAY
18659: PUSH
18660: LD_INT 2
18662: ARRAY
18663: PUSH
18664: LD_VAR 0 3
18668: EQUAL
18669: AND
18670: IFFALSE 18773
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18672: LD_EXP 52
18676: PUSH
18677: LD_VAR 0 6
18681: ARRAY
18682: PUSH
18683: LD_VAR 0 5
18687: ARRAY
18688: PUSH
18689: LD_INT 1
18691: ARRAY
18692: PPUSH
18693: LD_EXP 52
18697: PUSH
18698: LD_VAR 0 6
18702: ARRAY
18703: PUSH
18704: LD_VAR 0 5
18708: ARRAY
18709: PUSH
18710: LD_INT 2
18712: ARRAY
18713: PPUSH
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL_OW 255
18723: PPUSH
18724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18728: LD_ADDR_EXP 52
18732: PUSH
18733: LD_EXP 52
18737: PPUSH
18738: LD_VAR 0 6
18742: PPUSH
18743: LD_EXP 52
18747: PUSH
18748: LD_VAR 0 6
18752: ARRAY
18753: PPUSH
18754: LD_VAR 0 5
18758: PPUSH
18759: CALL_OW 3
18763: PPUSH
18764: CALL_OW 1
18768: ST_TO_ADDR
// exit ;
18769: POP
18770: POP
18771: GO 18964
// end ; end ;
18773: GO 18613
18775: POP
18776: POP
// for i := minerMinesList [ index ] downto 1 do
18777: LD_ADDR_VAR 0 5
18781: PUSH
18782: DOUBLE
18783: LD_EXP 52
18787: PUSH
18788: LD_VAR 0 6
18792: ARRAY
18793: INC
18794: ST_TO_ADDR
18795: LD_INT 1
18797: PUSH
18798: FOR_DOWNTO
18799: IFFALSE 18962
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18801: LD_EXP 52
18805: PUSH
18806: LD_VAR 0 6
18810: ARRAY
18811: PUSH
18812: LD_VAR 0 5
18816: ARRAY
18817: PUSH
18818: LD_INT 1
18820: ARRAY
18821: PPUSH
18822: LD_EXP 52
18826: PUSH
18827: LD_VAR 0 6
18831: ARRAY
18832: PUSH
18833: LD_VAR 0 5
18837: ARRAY
18838: PUSH
18839: LD_INT 2
18841: ARRAY
18842: PPUSH
18843: LD_VAR 0 2
18847: PPUSH
18848: LD_VAR 0 3
18852: PPUSH
18853: CALL_OW 298
18857: PUSH
18858: LD_INT 6
18860: LESS
18861: IFFALSE 18960
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18863: LD_EXP 52
18867: PUSH
18868: LD_VAR 0 6
18872: ARRAY
18873: PUSH
18874: LD_VAR 0 5
18878: ARRAY
18879: PUSH
18880: LD_INT 1
18882: ARRAY
18883: PPUSH
18884: LD_EXP 52
18888: PUSH
18889: LD_VAR 0 6
18893: ARRAY
18894: PUSH
18895: LD_VAR 0 5
18899: ARRAY
18900: PUSH
18901: LD_INT 2
18903: ARRAY
18904: PPUSH
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL_OW 255
18914: PPUSH
18915: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18919: LD_ADDR_EXP 52
18923: PUSH
18924: LD_EXP 52
18928: PPUSH
18929: LD_VAR 0 6
18933: PPUSH
18934: LD_EXP 52
18938: PUSH
18939: LD_VAR 0 6
18943: ARRAY
18944: PPUSH
18945: LD_VAR 0 5
18949: PPUSH
18950: CALL_OW 3
18954: PPUSH
18955: CALL_OW 1
18959: ST_TO_ADDR
// end ; end ;
18960: GO 18798
18962: POP
18963: POP
// end ;
18964: LD_VAR 0 4
18968: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18969: LD_INT 0
18971: PPUSH
18972: PPUSH
18973: PPUSH
18974: PPUSH
18975: PPUSH
18976: PPUSH
18977: PPUSH
18978: PPUSH
18979: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18980: LD_VAR 0 1
18984: PPUSH
18985: CALL_OW 264
18989: PUSH
18990: LD_INT 81
18992: EQUAL
18993: NOT
18994: PUSH
18995: LD_VAR 0 1
18999: PUSH
19000: LD_EXP 51
19004: IN
19005: NOT
19006: OR
19007: IFFALSE 19011
// exit ;
19009: GO 19333
// index := GetElementIndex ( minersList , unit ) ;
19011: LD_ADDR_VAR 0 6
19015: PUSH
19016: LD_EXP 51
19020: PPUSH
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL 40307 0 2
19030: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19031: LD_ADDR_VAR 0 8
19035: PUSH
19036: LD_EXP 53
19040: PUSH
19041: LD_EXP 52
19045: PUSH
19046: LD_VAR 0 6
19050: ARRAY
19051: MINUS
19052: ST_TO_ADDR
// if not minesFreeAmount then
19053: LD_VAR 0 8
19057: NOT
19058: IFFALSE 19062
// exit ;
19060: GO 19333
// tmp := [ ] ;
19062: LD_ADDR_VAR 0 7
19066: PUSH
19067: EMPTY
19068: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19069: LD_ADDR_VAR 0 5
19073: PUSH
19074: DOUBLE
19075: LD_INT 1
19077: DEC
19078: ST_TO_ADDR
19079: LD_VAR 0 8
19083: PUSH
19084: FOR_TO
19085: IFFALSE 19280
// begin _d := rand ( 0 , 5 ) ;
19087: LD_ADDR_VAR 0 11
19091: PUSH
19092: LD_INT 0
19094: PPUSH
19095: LD_INT 5
19097: PPUSH
19098: CALL_OW 12
19102: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19103: LD_ADDR_VAR 0 12
19107: PUSH
19108: LD_INT 2
19110: PPUSH
19111: LD_INT 6
19113: PPUSH
19114: CALL_OW 12
19118: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19119: LD_ADDR_VAR 0 9
19123: PUSH
19124: LD_VAR 0 2
19128: PPUSH
19129: LD_VAR 0 11
19133: PPUSH
19134: LD_VAR 0 12
19138: PPUSH
19139: CALL_OW 272
19143: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19144: LD_ADDR_VAR 0 10
19148: PUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_VAR 0 11
19158: PPUSH
19159: LD_VAR 0 12
19163: PPUSH
19164: CALL_OW 273
19168: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19169: LD_VAR 0 9
19173: PPUSH
19174: LD_VAR 0 10
19178: PPUSH
19179: CALL_OW 488
19183: PUSH
19184: LD_VAR 0 9
19188: PUSH
19189: LD_VAR 0 10
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_VAR 0 7
19202: IN
19203: NOT
19204: AND
19205: PUSH
19206: LD_VAR 0 9
19210: PPUSH
19211: LD_VAR 0 10
19215: PPUSH
19216: CALL_OW 458
19220: NOT
19221: AND
19222: IFFALSE 19264
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19224: LD_ADDR_VAR 0 7
19228: PUSH
19229: LD_VAR 0 7
19233: PPUSH
19234: LD_VAR 0 7
19238: PUSH
19239: LD_INT 1
19241: PLUS
19242: PPUSH
19243: LD_VAR 0 9
19247: PUSH
19248: LD_VAR 0 10
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 1
19261: ST_TO_ADDR
19262: GO 19278
// i := i - 1 ;
19264: LD_ADDR_VAR 0 5
19268: PUSH
19269: LD_VAR 0 5
19273: PUSH
19274: LD_INT 1
19276: MINUS
19277: ST_TO_ADDR
// end ;
19278: GO 19084
19280: POP
19281: POP
// for i in tmp do
19282: LD_ADDR_VAR 0 5
19286: PUSH
19287: LD_VAR 0 7
19291: PUSH
19292: FOR_IN
19293: IFFALSE 19331
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19295: LD_VAR 0 1
19299: PPUSH
19300: LD_VAR 0 5
19304: PUSH
19305: LD_INT 1
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 5
19313: PUSH
19314: LD_INT 2
19316: ARRAY
19317: PPUSH
19318: CALL 18277 0 3
19322: NOT
19323: IFFALSE 19329
// exit ;
19325: POP
19326: POP
19327: GO 19333
19329: GO 19292
19331: POP
19332: POP
// end ;
19333: LD_VAR 0 4
19337: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
19344: PPUSH
19345: PPUSH
19346: PPUSH
// if not GetClass ( unit ) = class_sniper then
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 257
19356: PUSH
19357: LD_INT 5
19359: EQUAL
19360: NOT
19361: IFFALSE 19365
// exit ;
19363: GO 19753
// dist := 8 ;
19365: LD_ADDR_VAR 0 5
19369: PUSH
19370: LD_INT 8
19372: ST_TO_ADDR
// viewRange := 12 ;
19373: LD_ADDR_VAR 0 7
19377: PUSH
19378: LD_INT 12
19380: ST_TO_ADDR
// side := GetSide ( unit ) ;
19381: LD_ADDR_VAR 0 6
19385: PUSH
19386: LD_VAR 0 1
19390: PPUSH
19391: CALL_OW 255
19395: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19396: LD_INT 61
19398: PPUSH
19399: LD_VAR 0 6
19403: PPUSH
19404: CALL_OW 321
19408: PUSH
19409: LD_INT 2
19411: EQUAL
19412: IFFALSE 19422
// viewRange := 16 ;
19414: LD_ADDR_VAR 0 7
19418: PUSH
19419: LD_INT 16
19421: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_VAR 0 3
19436: PPUSH
19437: CALL_OW 297
19441: PUSH
19442: LD_VAR 0 5
19446: GREATER
19447: IFFALSE 19526
// begin ComMoveXY ( unit , x , y ) ;
19449: LD_VAR 0 1
19453: PPUSH
19454: LD_VAR 0 2
19458: PPUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19468: LD_INT 35
19470: PPUSH
19471: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19475: LD_VAR 0 1
19479: PPUSH
19480: LD_VAR 0 2
19484: PPUSH
19485: LD_VAR 0 3
19489: PPUSH
19490: CALL 72059 0 3
19494: NOT
19495: IFFALSE 19499
// exit ;
19497: GO 19753
// until GetDistUnitXY ( unit , x , y ) < dist ;
19499: LD_VAR 0 1
19503: PPUSH
19504: LD_VAR 0 2
19508: PPUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 297
19518: PUSH
19519: LD_VAR 0 5
19523: LESS
19524: IFFALSE 19468
// end ; ComTurnXY ( unit , x , y ) ;
19526: LD_VAR 0 1
19530: PPUSH
19531: LD_VAR 0 2
19535: PPUSH
19536: LD_VAR 0 3
19540: PPUSH
19541: CALL_OW 118
// wait ( 5 ) ;
19545: LD_INT 5
19547: PPUSH
19548: CALL_OW 67
// _d := GetDir ( unit ) ;
19552: LD_ADDR_VAR 0 10
19556: PUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 254
19566: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19567: LD_ADDR_VAR 0 8
19571: PUSH
19572: LD_VAR 0 1
19576: PPUSH
19577: CALL_OW 250
19581: PPUSH
19582: LD_VAR 0 10
19586: PPUSH
19587: LD_VAR 0 5
19591: PPUSH
19592: CALL_OW 272
19596: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19597: LD_ADDR_VAR 0 9
19601: PUSH
19602: LD_VAR 0 1
19606: PPUSH
19607: CALL_OW 251
19611: PPUSH
19612: LD_VAR 0 10
19616: PPUSH
19617: LD_VAR 0 5
19621: PPUSH
19622: CALL_OW 273
19626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19627: LD_VAR 0 8
19631: PPUSH
19632: LD_VAR 0 9
19636: PPUSH
19637: CALL_OW 488
19641: NOT
19642: IFFALSE 19646
// exit ;
19644: GO 19753
// ComAnimCustom ( unit , 1 ) ;
19646: LD_VAR 0 1
19650: PPUSH
19651: LD_INT 1
19653: PPUSH
19654: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19658: LD_VAR 0 8
19662: PPUSH
19663: LD_VAR 0 9
19667: PPUSH
19668: LD_VAR 0 6
19672: PPUSH
19673: LD_VAR 0 7
19677: PPUSH
19678: CALL_OW 330
// repeat wait ( 1 ) ;
19682: LD_INT 1
19684: PPUSH
19685: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19689: LD_VAR 0 1
19693: PPUSH
19694: CALL_OW 316
19698: PUSH
19699: LD_VAR 0 1
19703: PPUSH
19704: CALL_OW 314
19708: OR
19709: PUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: CALL_OW 302
19719: NOT
19720: OR
19721: PUSH
19722: LD_VAR 0 1
19726: PPUSH
19727: CALL_OW 301
19731: OR
19732: IFFALSE 19682
// RemoveSeeing ( _x , _y , side ) ;
19734: LD_VAR 0 8
19738: PPUSH
19739: LD_VAR 0 9
19743: PPUSH
19744: LD_VAR 0 6
19748: PPUSH
19749: CALL_OW 331
// end ; end_of_file
19753: LD_VAR 0 4
19757: RET
// export globalGameSaveCounter ; every 0 0$1 do
19758: GO 19760
19760: DISABLE
// begin enable ;
19761: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19762: LD_STRING updateTimer(
19764: PUSH
19765: LD_OWVAR 1
19769: STR
19770: PUSH
19771: LD_STRING );
19773: STR
19774: PPUSH
19775: CALL_OW 559
// end ;
19779: END
// every 0 0$1 do
19780: GO 19782
19782: DISABLE
// begin globalGameSaveCounter := 0 ;
19783: LD_ADDR_EXP 54
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19791: LD_STRING setGameSaveCounter(0)
19793: PPUSH
19794: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19798: LD_STRING initStreamRollete();
19800: PPUSH
19801: CALL_OW 559
// InitStreamMode ;
19805: CALL 21131 0 0
// DefineStreamItems ( false ) ;
19809: LD_INT 0
19811: PPUSH
19812: CALL 21595 0 1
// end ;
19816: END
// export function SOS_MapStart ( ) ; begin
19817: LD_INT 0
19819: PPUSH
// if streamModeActive then
19820: LD_EXP 55
19824: IFFALSE 19833
// DefineStreamItems ( true ) ;
19826: LD_INT 1
19828: PPUSH
19829: CALL 21595 0 1
// UpdateLuaVariables ( ) ;
19833: CALL 19850 0 0
// UpdateFactoryWaypoints ( ) ;
19837: CALL 34464 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19841: CALL 34721 0 0
// end ;
19845: LD_VAR 0 1
19849: RET
// function UpdateLuaVariables ( ) ; begin
19850: LD_INT 0
19852: PPUSH
// if globalGameSaveCounter then
19853: LD_EXP 54
19857: IFFALSE 19891
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19859: LD_ADDR_EXP 54
19863: PUSH
19864: LD_EXP 54
19868: PPUSH
19869: CALL 74623 0 1
19873: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19874: LD_STRING setGameSaveCounter(
19876: PUSH
19877: LD_EXP 54
19881: STR
19882: PUSH
19883: LD_STRING )
19885: STR
19886: PPUSH
19887: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19891: LD_STRING setGameDifficulty(
19893: PUSH
19894: LD_OWVAR 67
19898: STR
19899: PUSH
19900: LD_STRING )
19902: STR
19903: PPUSH
19904: CALL_OW 559
// end ;
19908: LD_VAR 0 1
19912: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19913: LD_INT 0
19915: PPUSH
// if p2 = stream_mode then
19916: LD_VAR 0 2
19920: PUSH
19921: LD_INT 100
19923: EQUAL
19924: IFFALSE 20927
// begin if not StreamModeActive then
19926: LD_EXP 55
19930: NOT
19931: IFFALSE 19941
// StreamModeActive := true ;
19933: LD_ADDR_EXP 55
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 0 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 0
19948: EQUAL
19949: IFFALSE 19955
// InitStreamMode ;
19951: CALL 21131 0 0
// if p3 = 1 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 1
19962: EQUAL
19963: IFFALSE 19973
// sRocket := true ;
19965: LD_ADDR_EXP 60
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 2 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 2
19980: EQUAL
19981: IFFALSE 19991
// sSpeed := true ;
19983: LD_ADDR_EXP 59
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 3 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 3
19998: EQUAL
19999: IFFALSE 20009
// sEngine := true ;
20001: LD_ADDR_EXP 61
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 4 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 4
20016: EQUAL
20017: IFFALSE 20027
// sSpec := true ;
20019: LD_ADDR_EXP 58
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 5 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 5
20034: EQUAL
20035: IFFALSE 20045
// sLevel := true ;
20037: LD_ADDR_EXP 62
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 6 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 6
20052: EQUAL
20053: IFFALSE 20063
// sArmoury := true ;
20055: LD_ADDR_EXP 63
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 7 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 7
20070: EQUAL
20071: IFFALSE 20081
// sRadar := true ;
20073: LD_ADDR_EXP 64
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 8 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 8
20088: EQUAL
20089: IFFALSE 20099
// sBunker := true ;
20091: LD_ADDR_EXP 65
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 9 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 9
20106: EQUAL
20107: IFFALSE 20117
// sHack := true ;
20109: LD_ADDR_EXP 66
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 10 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 10
20124: EQUAL
20125: IFFALSE 20135
// sFire := true ;
20127: LD_ADDR_EXP 67
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 11 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 11
20142: EQUAL
20143: IFFALSE 20153
// sRefresh := true ;
20145: LD_ADDR_EXP 68
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 12 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 12
20160: EQUAL
20161: IFFALSE 20171
// sExp := true ;
20163: LD_ADDR_EXP 69
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 13 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 13
20178: EQUAL
20179: IFFALSE 20189
// sDepot := true ;
20181: LD_ADDR_EXP 70
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 14 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 14
20196: EQUAL
20197: IFFALSE 20207
// sFlag := true ;
20199: LD_ADDR_EXP 71
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// if p3 = 15 then
20207: LD_VAR 0 3
20211: PUSH
20212: LD_INT 15
20214: EQUAL
20215: IFFALSE 20225
// sKamikadze := true ;
20217: LD_ADDR_EXP 79
20221: PUSH
20222: LD_INT 1
20224: ST_TO_ADDR
// if p3 = 16 then
20225: LD_VAR 0 3
20229: PUSH
20230: LD_INT 16
20232: EQUAL
20233: IFFALSE 20243
// sTroll := true ;
20235: LD_ADDR_EXP 80
20239: PUSH
20240: LD_INT 1
20242: ST_TO_ADDR
// if p3 = 17 then
20243: LD_VAR 0 3
20247: PUSH
20248: LD_INT 17
20250: EQUAL
20251: IFFALSE 20261
// sSlow := true ;
20253: LD_ADDR_EXP 81
20257: PUSH
20258: LD_INT 1
20260: ST_TO_ADDR
// if p3 = 18 then
20261: LD_VAR 0 3
20265: PUSH
20266: LD_INT 18
20268: EQUAL
20269: IFFALSE 20279
// sLack := true ;
20271: LD_ADDR_EXP 82
20275: PUSH
20276: LD_INT 1
20278: ST_TO_ADDR
// if p3 = 19 then
20279: LD_VAR 0 3
20283: PUSH
20284: LD_INT 19
20286: EQUAL
20287: IFFALSE 20297
// sTank := true ;
20289: LD_ADDR_EXP 84
20293: PUSH
20294: LD_INT 1
20296: ST_TO_ADDR
// if p3 = 20 then
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 20
20304: EQUAL
20305: IFFALSE 20315
// sRemote := true ;
20307: LD_ADDR_EXP 85
20311: PUSH
20312: LD_INT 1
20314: ST_TO_ADDR
// if p3 = 21 then
20315: LD_VAR 0 3
20319: PUSH
20320: LD_INT 21
20322: EQUAL
20323: IFFALSE 20333
// sPowell := true ;
20325: LD_ADDR_EXP 86
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// if p3 = 22 then
20333: LD_VAR 0 3
20337: PUSH
20338: LD_INT 22
20340: EQUAL
20341: IFFALSE 20351
// sTeleport := true ;
20343: LD_ADDR_EXP 89
20347: PUSH
20348: LD_INT 1
20350: ST_TO_ADDR
// if p3 = 23 then
20351: LD_VAR 0 3
20355: PUSH
20356: LD_INT 23
20358: EQUAL
20359: IFFALSE 20369
// sOilTower := true ;
20361: LD_ADDR_EXP 91
20365: PUSH
20366: LD_INT 1
20368: ST_TO_ADDR
// if p3 = 24 then
20369: LD_VAR 0 3
20373: PUSH
20374: LD_INT 24
20376: EQUAL
20377: IFFALSE 20387
// sShovel := true ;
20379: LD_ADDR_EXP 92
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// if p3 = 25 then
20387: LD_VAR 0 3
20391: PUSH
20392: LD_INT 25
20394: EQUAL
20395: IFFALSE 20405
// sSheik := true ;
20397: LD_ADDR_EXP 93
20401: PUSH
20402: LD_INT 1
20404: ST_TO_ADDR
// if p3 = 26 then
20405: LD_VAR 0 3
20409: PUSH
20410: LD_INT 26
20412: EQUAL
20413: IFFALSE 20423
// sEarthquake := true ;
20415: LD_ADDR_EXP 95
20419: PUSH
20420: LD_INT 1
20422: ST_TO_ADDR
// if p3 = 27 then
20423: LD_VAR 0 3
20427: PUSH
20428: LD_INT 27
20430: EQUAL
20431: IFFALSE 20441
// sAI := true ;
20433: LD_ADDR_EXP 96
20437: PUSH
20438: LD_INT 1
20440: ST_TO_ADDR
// if p3 = 28 then
20441: LD_VAR 0 3
20445: PUSH
20446: LD_INT 28
20448: EQUAL
20449: IFFALSE 20459
// sCargo := true ;
20451: LD_ADDR_EXP 99
20455: PUSH
20456: LD_INT 1
20458: ST_TO_ADDR
// if p3 = 29 then
20459: LD_VAR 0 3
20463: PUSH
20464: LD_INT 29
20466: EQUAL
20467: IFFALSE 20477
// sDLaser := true ;
20469: LD_ADDR_EXP 100
20473: PUSH
20474: LD_INT 1
20476: ST_TO_ADDR
// if p3 = 30 then
20477: LD_VAR 0 3
20481: PUSH
20482: LD_INT 30
20484: EQUAL
20485: IFFALSE 20495
// sExchange := true ;
20487: LD_ADDR_EXP 101
20491: PUSH
20492: LD_INT 1
20494: ST_TO_ADDR
// if p3 = 31 then
20495: LD_VAR 0 3
20499: PUSH
20500: LD_INT 31
20502: EQUAL
20503: IFFALSE 20513
// sFac := true ;
20505: LD_ADDR_EXP 102
20509: PUSH
20510: LD_INT 1
20512: ST_TO_ADDR
// if p3 = 32 then
20513: LD_VAR 0 3
20517: PUSH
20518: LD_INT 32
20520: EQUAL
20521: IFFALSE 20531
// sPower := true ;
20523: LD_ADDR_EXP 103
20527: PUSH
20528: LD_INT 1
20530: ST_TO_ADDR
// if p3 = 33 then
20531: LD_VAR 0 3
20535: PUSH
20536: LD_INT 33
20538: EQUAL
20539: IFFALSE 20549
// sRandom := true ;
20541: LD_ADDR_EXP 104
20545: PUSH
20546: LD_INT 1
20548: ST_TO_ADDR
// if p3 = 34 then
20549: LD_VAR 0 3
20553: PUSH
20554: LD_INT 34
20556: EQUAL
20557: IFFALSE 20567
// sShield := true ;
20559: LD_ADDR_EXP 105
20563: PUSH
20564: LD_INT 1
20566: ST_TO_ADDR
// if p3 = 35 then
20567: LD_VAR 0 3
20571: PUSH
20572: LD_INT 35
20574: EQUAL
20575: IFFALSE 20585
// sTime := true ;
20577: LD_ADDR_EXP 106
20581: PUSH
20582: LD_INT 1
20584: ST_TO_ADDR
// if p3 = 36 then
20585: LD_VAR 0 3
20589: PUSH
20590: LD_INT 36
20592: EQUAL
20593: IFFALSE 20603
// sTools := true ;
20595: LD_ADDR_EXP 107
20599: PUSH
20600: LD_INT 1
20602: ST_TO_ADDR
// if p3 = 101 then
20603: LD_VAR 0 3
20607: PUSH
20608: LD_INT 101
20610: EQUAL
20611: IFFALSE 20621
// sSold := true ;
20613: LD_ADDR_EXP 72
20617: PUSH
20618: LD_INT 1
20620: ST_TO_ADDR
// if p3 = 102 then
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 102
20628: EQUAL
20629: IFFALSE 20639
// sDiff := true ;
20631: LD_ADDR_EXP 73
20635: PUSH
20636: LD_INT 1
20638: ST_TO_ADDR
// if p3 = 103 then
20639: LD_VAR 0 3
20643: PUSH
20644: LD_INT 103
20646: EQUAL
20647: IFFALSE 20657
// sFog := true ;
20649: LD_ADDR_EXP 76
20653: PUSH
20654: LD_INT 1
20656: ST_TO_ADDR
// if p3 = 104 then
20657: LD_VAR 0 3
20661: PUSH
20662: LD_INT 104
20664: EQUAL
20665: IFFALSE 20675
// sReset := true ;
20667: LD_ADDR_EXP 77
20671: PUSH
20672: LD_INT 1
20674: ST_TO_ADDR
// if p3 = 105 then
20675: LD_VAR 0 3
20679: PUSH
20680: LD_INT 105
20682: EQUAL
20683: IFFALSE 20693
// sSun := true ;
20685: LD_ADDR_EXP 78
20689: PUSH
20690: LD_INT 1
20692: ST_TO_ADDR
// if p3 = 106 then
20693: LD_VAR 0 3
20697: PUSH
20698: LD_INT 106
20700: EQUAL
20701: IFFALSE 20711
// sTiger := true ;
20703: LD_ADDR_EXP 74
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if p3 = 107 then
20711: LD_VAR 0 3
20715: PUSH
20716: LD_INT 107
20718: EQUAL
20719: IFFALSE 20729
// sBomb := true ;
20721: LD_ADDR_EXP 75
20725: PUSH
20726: LD_INT 1
20728: ST_TO_ADDR
// if p3 = 108 then
20729: LD_VAR 0 3
20733: PUSH
20734: LD_INT 108
20736: EQUAL
20737: IFFALSE 20747
// sWound := true ;
20739: LD_ADDR_EXP 83
20743: PUSH
20744: LD_INT 1
20746: ST_TO_ADDR
// if p3 = 109 then
20747: LD_VAR 0 3
20751: PUSH
20752: LD_INT 109
20754: EQUAL
20755: IFFALSE 20765
// sBetray := true ;
20757: LD_ADDR_EXP 87
20761: PUSH
20762: LD_INT 1
20764: ST_TO_ADDR
// if p3 = 110 then
20765: LD_VAR 0 3
20769: PUSH
20770: LD_INT 110
20772: EQUAL
20773: IFFALSE 20783
// sContamin := true ;
20775: LD_ADDR_EXP 88
20779: PUSH
20780: LD_INT 1
20782: ST_TO_ADDR
// if p3 = 111 then
20783: LD_VAR 0 3
20787: PUSH
20788: LD_INT 111
20790: EQUAL
20791: IFFALSE 20801
// sOil := true ;
20793: LD_ADDR_EXP 90
20797: PUSH
20798: LD_INT 1
20800: ST_TO_ADDR
// if p3 = 112 then
20801: LD_VAR 0 3
20805: PUSH
20806: LD_INT 112
20808: EQUAL
20809: IFFALSE 20819
// sStu := true ;
20811: LD_ADDR_EXP 94
20815: PUSH
20816: LD_INT 1
20818: ST_TO_ADDR
// if p3 = 113 then
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 113
20826: EQUAL
20827: IFFALSE 20837
// sBazooka := true ;
20829: LD_ADDR_EXP 97
20833: PUSH
20834: LD_INT 1
20836: ST_TO_ADDR
// if p3 = 114 then
20837: LD_VAR 0 3
20841: PUSH
20842: LD_INT 114
20844: EQUAL
20845: IFFALSE 20855
// sMortar := true ;
20847: LD_ADDR_EXP 98
20851: PUSH
20852: LD_INT 1
20854: ST_TO_ADDR
// if p3 = 115 then
20855: LD_VAR 0 3
20859: PUSH
20860: LD_INT 115
20862: EQUAL
20863: IFFALSE 20873
// sRanger := true ;
20865: LD_ADDR_EXP 108
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// if p3 = 116 then
20873: LD_VAR 0 3
20877: PUSH
20878: LD_INT 116
20880: EQUAL
20881: IFFALSE 20891
// sComputer := true ;
20883: LD_ADDR_EXP 109
20887: PUSH
20888: LD_INT 1
20890: ST_TO_ADDR
// if p3 = 117 then
20891: LD_VAR 0 3
20895: PUSH
20896: LD_INT 117
20898: EQUAL
20899: IFFALSE 20909
// s30 := true ;
20901: LD_ADDR_EXP 110
20905: PUSH
20906: LD_INT 1
20908: ST_TO_ADDR
// if p3 = 118 then
20909: LD_VAR 0 3
20913: PUSH
20914: LD_INT 118
20916: EQUAL
20917: IFFALSE 20927
// s60 := true ;
20919: LD_ADDR_EXP 111
20923: PUSH
20924: LD_INT 1
20926: ST_TO_ADDR
// end ; if p2 = hack_mode then
20927: LD_VAR 0 2
20931: PUSH
20932: LD_INT 101
20934: EQUAL
20935: IFFALSE 21063
// begin case p3 of 1 :
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 1
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20957
20950: POP
// hHackUnlimitedResources ; 2 :
20951: CALL 33210 0 0
20955: GO 21063
20957: LD_INT 2
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20972
20965: POP
// hHackSetLevel10 ; 3 :
20966: CALL 33343 0 0
20970: GO 21063
20972: LD_INT 3
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20987
20980: POP
// hHackSetLevel10YourUnits ; 4 :
20981: CALL 33428 0 0
20985: GO 21063
20987: LD_INT 4
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21002
20995: POP
// hHackInvincible ; 5 :
20996: CALL 33876 0 0
21000: GO 21063
21002: LD_INT 5
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21017
21010: POP
// hHackInvisible ; 6 :
21011: CALL 33987 0 0
21015: GO 21063
21017: LD_INT 6
21019: DOUBLE
21020: EQUAL
21021: IFTRUE 21025
21023: GO 21032
21025: POP
// hHackChangeYourSide ; 7 :
21026: CALL 34044 0 0
21030: GO 21063
21032: LD_INT 7
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21047
21040: POP
// hHackChangeUnitSide ; 8 :
21041: CALL 34086 0 0
21045: GO 21063
21047: LD_INT 8
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21062
21055: POP
// hHackFog ; end ;
21056: CALL 34187 0 0
21060: GO 21063
21062: POP
// end ; if p2 = game_save_mode then
21063: LD_VAR 0 2
21067: PUSH
21068: LD_INT 102
21070: EQUAL
21071: IFFALSE 21126
// begin if p3 = 1 then
21073: LD_VAR 0 3
21077: PUSH
21078: LD_INT 1
21080: EQUAL
21081: IFFALSE 21093
// globalGameSaveCounter := p4 ;
21083: LD_ADDR_EXP 54
21087: PUSH
21088: LD_VAR 0 4
21092: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21093: LD_VAR 0 3
21097: PUSH
21098: LD_INT 2
21100: EQUAL
21101: PUSH
21102: LD_EXP 54
21106: AND
21107: IFFALSE 21126
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21109: LD_STRING setGameSaveCounter(
21111: PUSH
21112: LD_EXP 54
21116: STR
21117: PUSH
21118: LD_STRING )
21120: STR
21121: PPUSH
21122: CALL_OW 559
// end ; end ;
21126: LD_VAR 0 7
21130: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21131: LD_INT 0
21133: PPUSH
// streamModeActive := false ;
21134: LD_ADDR_EXP 55
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// normalCounter := 36 ;
21142: LD_ADDR_EXP 56
21146: PUSH
21147: LD_INT 36
21149: ST_TO_ADDR
// hardcoreCounter := 18 ;
21150: LD_ADDR_EXP 57
21154: PUSH
21155: LD_INT 18
21157: ST_TO_ADDR
// sRocket := false ;
21158: LD_ADDR_EXP 60
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sSpeed := false ;
21166: LD_ADDR_EXP 59
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sEngine := false ;
21174: LD_ADDR_EXP 61
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sSpec := false ;
21182: LD_ADDR_EXP 58
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// sLevel := false ;
21190: LD_ADDR_EXP 62
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// sArmoury := false ;
21198: LD_ADDR_EXP 63
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sRadar := false ;
21206: LD_ADDR_EXP 64
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sBunker := false ;
21214: LD_ADDR_EXP 65
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sHack := false ;
21222: LD_ADDR_EXP 66
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sFire := false ;
21230: LD_ADDR_EXP 67
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sRefresh := false ;
21238: LD_ADDR_EXP 68
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sExp := false ;
21246: LD_ADDR_EXP 69
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sDepot := false ;
21254: LD_ADDR_EXP 70
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sFlag := false ;
21262: LD_ADDR_EXP 71
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sKamikadze := false ;
21270: LD_ADDR_EXP 79
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sTroll := false ;
21278: LD_ADDR_EXP 80
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sSlow := false ;
21286: LD_ADDR_EXP 81
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sLack := false ;
21294: LD_ADDR_EXP 82
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sTank := false ;
21302: LD_ADDR_EXP 84
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sRemote := false ;
21310: LD_ADDR_EXP 85
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sPowell := false ;
21318: LD_ADDR_EXP 86
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sTeleport := false ;
21326: LD_ADDR_EXP 89
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sOilTower := false ;
21334: LD_ADDR_EXP 91
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sShovel := false ;
21342: LD_ADDR_EXP 92
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sSheik := false ;
21350: LD_ADDR_EXP 93
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sEarthquake := false ;
21358: LD_ADDR_EXP 95
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sAI := false ;
21366: LD_ADDR_EXP 96
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sCargo := false ;
21374: LD_ADDR_EXP 99
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sDLaser := false ;
21382: LD_ADDR_EXP 100
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sExchange := false ;
21390: LD_ADDR_EXP 101
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sFac := false ;
21398: LD_ADDR_EXP 102
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sPower := false ;
21406: LD_ADDR_EXP 103
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sRandom := false ;
21414: LD_ADDR_EXP 104
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sShield := false ;
21422: LD_ADDR_EXP 105
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sTime := false ;
21430: LD_ADDR_EXP 106
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sTools := false ;
21438: LD_ADDR_EXP 107
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sSold := false ;
21446: LD_ADDR_EXP 72
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sDiff := false ;
21454: LD_ADDR_EXP 73
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sFog := false ;
21462: LD_ADDR_EXP 76
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sReset := false ;
21470: LD_ADDR_EXP 77
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sSun := false ;
21478: LD_ADDR_EXP 78
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sTiger := false ;
21486: LD_ADDR_EXP 74
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sBomb := false ;
21494: LD_ADDR_EXP 75
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sWound := false ;
21502: LD_ADDR_EXP 83
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sBetray := false ;
21510: LD_ADDR_EXP 87
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sContamin := false ;
21518: LD_ADDR_EXP 88
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sOil := false ;
21526: LD_ADDR_EXP 90
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sStu := false ;
21534: LD_ADDR_EXP 94
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sBazooka := false ;
21542: LD_ADDR_EXP 97
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sMortar := false ;
21550: LD_ADDR_EXP 98
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sRanger := false ;
21558: LD_ADDR_EXP 108
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sComputer := false ;
21566: LD_ADDR_EXP 109
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// s30 := false ;
21574: LD_ADDR_EXP 110
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// s60 := false ;
21582: LD_ADDR_EXP 111
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// end ;
21590: LD_VAR 0 1
21594: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21595: LD_INT 0
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
21602: PPUSH
21603: PPUSH
// result := [ ] ;
21604: LD_ADDR_VAR 0 2
21608: PUSH
21609: EMPTY
21610: ST_TO_ADDR
// if campaign_id = 1 then
21611: LD_OWVAR 69
21615: PUSH
21616: LD_INT 1
21618: EQUAL
21619: IFFALSE 24785
// begin case mission_number of 1 :
21621: LD_OWVAR 70
21625: PUSH
21626: LD_INT 1
21628: DOUBLE
21629: EQUAL
21630: IFTRUE 21634
21632: GO 21710
21634: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21635: LD_ADDR_VAR 0 2
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 4
21645: PUSH
21646: LD_INT 11
21648: PUSH
21649: LD_INT 12
21651: PUSH
21652: LD_INT 15
21654: PUSH
21655: LD_INT 16
21657: PUSH
21658: LD_INT 22
21660: PUSH
21661: LD_INT 23
21663: PUSH
21664: LD_INT 26
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 101
21680: PUSH
21681: LD_INT 102
21683: PUSH
21684: LD_INT 106
21686: PUSH
21687: LD_INT 116
21689: PUSH
21690: LD_INT 117
21692: PUSH
21693: LD_INT 118
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: ST_TO_ADDR
21708: GO 24783
21710: LD_INT 2
21712: DOUBLE
21713: EQUAL
21714: IFTRUE 21718
21716: GO 21802
21718: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21719: LD_ADDR_VAR 0 2
21723: PUSH
21724: LD_INT 2
21726: PUSH
21727: LD_INT 4
21729: PUSH
21730: LD_INT 11
21732: PUSH
21733: LD_INT 12
21735: PUSH
21736: LD_INT 15
21738: PUSH
21739: LD_INT 16
21741: PUSH
21742: LD_INT 22
21744: PUSH
21745: LD_INT 23
21747: PUSH
21748: LD_INT 26
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 101
21764: PUSH
21765: LD_INT 102
21767: PUSH
21768: LD_INT 105
21770: PUSH
21771: LD_INT 106
21773: PUSH
21774: LD_INT 108
21776: PUSH
21777: LD_INT 116
21779: PUSH
21780: LD_INT 117
21782: PUSH
21783: LD_INT 118
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: ST_TO_ADDR
21800: GO 24783
21802: LD_INT 3
21804: DOUBLE
21805: EQUAL
21806: IFTRUE 21810
21808: GO 21898
21810: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: LD_INT 4
21821: PUSH
21822: LD_INT 5
21824: PUSH
21825: LD_INT 11
21827: PUSH
21828: LD_INT 12
21830: PUSH
21831: LD_INT 15
21833: PUSH
21834: LD_INT 16
21836: PUSH
21837: LD_INT 22
21839: PUSH
21840: LD_INT 26
21842: PUSH
21843: LD_INT 36
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 101
21860: PUSH
21861: LD_INT 102
21863: PUSH
21864: LD_INT 105
21866: PUSH
21867: LD_INT 106
21869: PUSH
21870: LD_INT 108
21872: PUSH
21873: LD_INT 116
21875: PUSH
21876: LD_INT 117
21878: PUSH
21879: LD_INT 118
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: ST_TO_ADDR
21896: GO 24783
21898: LD_INT 4
21900: DOUBLE
21901: EQUAL
21902: IFTRUE 21906
21904: GO 22002
21906: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21907: LD_ADDR_VAR 0 2
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: LD_INT 4
21917: PUSH
21918: LD_INT 5
21920: PUSH
21921: LD_INT 8
21923: PUSH
21924: LD_INT 11
21926: PUSH
21927: LD_INT 12
21929: PUSH
21930: LD_INT 15
21932: PUSH
21933: LD_INT 16
21935: PUSH
21936: LD_INT 22
21938: PUSH
21939: LD_INT 23
21941: PUSH
21942: LD_INT 26
21944: PUSH
21945: LD_INT 36
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 101
21964: PUSH
21965: LD_INT 102
21967: PUSH
21968: LD_INT 105
21970: PUSH
21971: LD_INT 106
21973: PUSH
21974: LD_INT 108
21976: PUSH
21977: LD_INT 116
21979: PUSH
21980: LD_INT 117
21982: PUSH
21983: LD_INT 118
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: ST_TO_ADDR
22000: GO 24783
22002: LD_INT 5
22004: DOUBLE
22005: EQUAL
22006: IFTRUE 22010
22008: GO 22122
22010: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22011: LD_ADDR_VAR 0 2
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 4
22021: PUSH
22022: LD_INT 5
22024: PUSH
22025: LD_INT 6
22027: PUSH
22028: LD_INT 8
22030: PUSH
22031: LD_INT 11
22033: PUSH
22034: LD_INT 12
22036: PUSH
22037: LD_INT 15
22039: PUSH
22040: LD_INT 16
22042: PUSH
22043: LD_INT 22
22045: PUSH
22046: LD_INT 23
22048: PUSH
22049: LD_INT 25
22051: PUSH
22052: LD_INT 26
22054: PUSH
22055: LD_INT 36
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 101
22076: PUSH
22077: LD_INT 102
22079: PUSH
22080: LD_INT 105
22082: PUSH
22083: LD_INT 106
22085: PUSH
22086: LD_INT 108
22088: PUSH
22089: LD_INT 109
22091: PUSH
22092: LD_INT 112
22094: PUSH
22095: LD_INT 116
22097: PUSH
22098: LD_INT 117
22100: PUSH
22101: LD_INT 118
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: ST_TO_ADDR
22120: GO 24783
22122: LD_INT 6
22124: DOUBLE
22125: EQUAL
22126: IFTRUE 22130
22128: GO 22262
22130: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22131: LD_ADDR_VAR 0 2
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: LD_INT 4
22141: PUSH
22142: LD_INT 5
22144: PUSH
22145: LD_INT 6
22147: PUSH
22148: LD_INT 8
22150: PUSH
22151: LD_INT 11
22153: PUSH
22154: LD_INT 12
22156: PUSH
22157: LD_INT 15
22159: PUSH
22160: LD_INT 16
22162: PUSH
22163: LD_INT 20
22165: PUSH
22166: LD_INT 21
22168: PUSH
22169: LD_INT 22
22171: PUSH
22172: LD_INT 23
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 26
22180: PUSH
22181: LD_INT 30
22183: PUSH
22184: LD_INT 31
22186: PUSH
22187: LD_INT 32
22189: PUSH
22190: LD_INT 36
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 101
22216: PUSH
22217: LD_INT 102
22219: PUSH
22220: LD_INT 105
22222: PUSH
22223: LD_INT 106
22225: PUSH
22226: LD_INT 108
22228: PUSH
22229: LD_INT 109
22231: PUSH
22232: LD_INT 112
22234: PUSH
22235: LD_INT 116
22237: PUSH
22238: LD_INT 117
22240: PUSH
22241: LD_INT 118
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: ST_TO_ADDR
22260: GO 24783
22262: LD_INT 7
22264: DOUBLE
22265: EQUAL
22266: IFTRUE 22270
22268: GO 22382
22270: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22271: LD_ADDR_VAR 0 2
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 4
22281: PUSH
22282: LD_INT 5
22284: PUSH
22285: LD_INT 7
22287: PUSH
22288: LD_INT 11
22290: PUSH
22291: LD_INT 12
22293: PUSH
22294: LD_INT 15
22296: PUSH
22297: LD_INT 16
22299: PUSH
22300: LD_INT 20
22302: PUSH
22303: LD_INT 21
22305: PUSH
22306: LD_INT 22
22308: PUSH
22309: LD_INT 23
22311: PUSH
22312: LD_INT 25
22314: PUSH
22315: LD_INT 26
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 101
22336: PUSH
22337: LD_INT 102
22339: PUSH
22340: LD_INT 103
22342: PUSH
22343: LD_INT 105
22345: PUSH
22346: LD_INT 106
22348: PUSH
22349: LD_INT 108
22351: PUSH
22352: LD_INT 112
22354: PUSH
22355: LD_INT 116
22357: PUSH
22358: LD_INT 117
22360: PUSH
22361: LD_INT 118
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: ST_TO_ADDR
22380: GO 24783
22382: LD_INT 8
22384: DOUBLE
22385: EQUAL
22386: IFTRUE 22390
22388: GO 22530
22390: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: LD_INT 4
22401: PUSH
22402: LD_INT 5
22404: PUSH
22405: LD_INT 6
22407: PUSH
22408: LD_INT 7
22410: PUSH
22411: LD_INT 8
22413: PUSH
22414: LD_INT 11
22416: PUSH
22417: LD_INT 12
22419: PUSH
22420: LD_INT 15
22422: PUSH
22423: LD_INT 16
22425: PUSH
22426: LD_INT 20
22428: PUSH
22429: LD_INT 21
22431: PUSH
22432: LD_INT 22
22434: PUSH
22435: LD_INT 23
22437: PUSH
22438: LD_INT 25
22440: PUSH
22441: LD_INT 26
22443: PUSH
22444: LD_INT 30
22446: PUSH
22447: LD_INT 31
22449: PUSH
22450: LD_INT 32
22452: PUSH
22453: LD_INT 36
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 101
22480: PUSH
22481: LD_INT 102
22483: PUSH
22484: LD_INT 103
22486: PUSH
22487: LD_INT 105
22489: PUSH
22490: LD_INT 106
22492: PUSH
22493: LD_INT 108
22495: PUSH
22496: LD_INT 109
22498: PUSH
22499: LD_INT 112
22501: PUSH
22502: LD_INT 116
22504: PUSH
22505: LD_INT 117
22507: PUSH
22508: LD_INT 118
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: ST_TO_ADDR
22528: GO 24783
22530: LD_INT 9
22532: DOUBLE
22533: EQUAL
22534: IFTRUE 22538
22536: GO 22686
22538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22539: LD_ADDR_VAR 0 2
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: LD_INT 4
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: LD_INT 6
22555: PUSH
22556: LD_INT 7
22558: PUSH
22559: LD_INT 8
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 12
22567: PUSH
22568: LD_INT 15
22570: PUSH
22571: LD_INT 16
22573: PUSH
22574: LD_INT 20
22576: PUSH
22577: LD_INT 21
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 23
22585: PUSH
22586: LD_INT 25
22588: PUSH
22589: LD_INT 26
22591: PUSH
22592: LD_INT 28
22594: PUSH
22595: LD_INT 30
22597: PUSH
22598: LD_INT 31
22600: PUSH
22601: LD_INT 32
22603: PUSH
22604: LD_INT 36
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 101
22632: PUSH
22633: LD_INT 102
22635: PUSH
22636: LD_INT 103
22638: PUSH
22639: LD_INT 105
22641: PUSH
22642: LD_INT 106
22644: PUSH
22645: LD_INT 108
22647: PUSH
22648: LD_INT 109
22650: PUSH
22651: LD_INT 112
22653: PUSH
22654: LD_INT 114
22656: PUSH
22657: LD_INT 116
22659: PUSH
22660: LD_INT 117
22662: PUSH
22663: LD_INT 118
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: ST_TO_ADDR
22684: GO 24783
22686: LD_INT 10
22688: DOUBLE
22689: EQUAL
22690: IFTRUE 22694
22692: GO 22890
22694: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22695: LD_ADDR_VAR 0 2
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: LD_INT 4
22705: PUSH
22706: LD_INT 5
22708: PUSH
22709: LD_INT 6
22711: PUSH
22712: LD_INT 7
22714: PUSH
22715: LD_INT 8
22717: PUSH
22718: LD_INT 9
22720: PUSH
22721: LD_INT 10
22723: PUSH
22724: LD_INT 11
22726: PUSH
22727: LD_INT 12
22729: PUSH
22730: LD_INT 13
22732: PUSH
22733: LD_INT 14
22735: PUSH
22736: LD_INT 15
22738: PUSH
22739: LD_INT 16
22741: PUSH
22742: LD_INT 17
22744: PUSH
22745: LD_INT 18
22747: PUSH
22748: LD_INT 19
22750: PUSH
22751: LD_INT 20
22753: PUSH
22754: LD_INT 21
22756: PUSH
22757: LD_INT 22
22759: PUSH
22760: LD_INT 23
22762: PUSH
22763: LD_INT 24
22765: PUSH
22766: LD_INT 25
22768: PUSH
22769: LD_INT 26
22771: PUSH
22772: LD_INT 28
22774: PUSH
22775: LD_INT 30
22777: PUSH
22778: LD_INT 31
22780: PUSH
22781: LD_INT 32
22783: PUSH
22784: LD_INT 36
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 101
22820: PUSH
22821: LD_INT 102
22823: PUSH
22824: LD_INT 103
22826: PUSH
22827: LD_INT 104
22829: PUSH
22830: LD_INT 105
22832: PUSH
22833: LD_INT 106
22835: PUSH
22836: LD_INT 107
22838: PUSH
22839: LD_INT 108
22841: PUSH
22842: LD_INT 109
22844: PUSH
22845: LD_INT 110
22847: PUSH
22848: LD_INT 111
22850: PUSH
22851: LD_INT 112
22853: PUSH
22854: LD_INT 114
22856: PUSH
22857: LD_INT 116
22859: PUSH
22860: LD_INT 117
22862: PUSH
22863: LD_INT 118
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: ST_TO_ADDR
22888: GO 24783
22890: LD_INT 11
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 23102
22898: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: LD_INT 4
22912: PUSH
22913: LD_INT 5
22915: PUSH
22916: LD_INT 6
22918: PUSH
22919: LD_INT 7
22921: PUSH
22922: LD_INT 8
22924: PUSH
22925: LD_INT 9
22927: PUSH
22928: LD_INT 10
22930: PUSH
22931: LD_INT 11
22933: PUSH
22934: LD_INT 12
22936: PUSH
22937: LD_INT 13
22939: PUSH
22940: LD_INT 14
22942: PUSH
22943: LD_INT 15
22945: PUSH
22946: LD_INT 16
22948: PUSH
22949: LD_INT 17
22951: PUSH
22952: LD_INT 18
22954: PUSH
22955: LD_INT 19
22957: PUSH
22958: LD_INT 20
22960: PUSH
22961: LD_INT 21
22963: PUSH
22964: LD_INT 22
22966: PUSH
22967: LD_INT 23
22969: PUSH
22970: LD_INT 24
22972: PUSH
22973: LD_INT 25
22975: PUSH
22976: LD_INT 26
22978: PUSH
22979: LD_INT 28
22981: PUSH
22982: LD_INT 30
22984: PUSH
22985: LD_INT 31
22987: PUSH
22988: LD_INT 32
22990: PUSH
22991: LD_INT 34
22993: PUSH
22994: LD_INT 36
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 101
23032: PUSH
23033: LD_INT 102
23035: PUSH
23036: LD_INT 103
23038: PUSH
23039: LD_INT 104
23041: PUSH
23042: LD_INT 105
23044: PUSH
23045: LD_INT 106
23047: PUSH
23048: LD_INT 107
23050: PUSH
23051: LD_INT 108
23053: PUSH
23054: LD_INT 109
23056: PUSH
23057: LD_INT 110
23059: PUSH
23060: LD_INT 111
23062: PUSH
23063: LD_INT 112
23065: PUSH
23066: LD_INT 114
23068: PUSH
23069: LD_INT 116
23071: PUSH
23072: LD_INT 117
23074: PUSH
23075: LD_INT 118
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: ST_TO_ADDR
23100: GO 24783
23102: LD_INT 12
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23330
23110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23111: LD_ADDR_VAR 0 2
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: LD_INT 3
23124: PUSH
23125: LD_INT 4
23127: PUSH
23128: LD_INT 5
23130: PUSH
23131: LD_INT 6
23133: PUSH
23134: LD_INT 7
23136: PUSH
23137: LD_INT 8
23139: PUSH
23140: LD_INT 9
23142: PUSH
23143: LD_INT 10
23145: PUSH
23146: LD_INT 11
23148: PUSH
23149: LD_INT 12
23151: PUSH
23152: LD_INT 13
23154: PUSH
23155: LD_INT 14
23157: PUSH
23158: LD_INT 15
23160: PUSH
23161: LD_INT 16
23163: PUSH
23164: LD_INT 17
23166: PUSH
23167: LD_INT 18
23169: PUSH
23170: LD_INT 19
23172: PUSH
23173: LD_INT 20
23175: PUSH
23176: LD_INT 21
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_INT 23
23184: PUSH
23185: LD_INT 24
23187: PUSH
23188: LD_INT 25
23190: PUSH
23191: LD_INT 26
23193: PUSH
23194: LD_INT 27
23196: PUSH
23197: LD_INT 28
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 31
23205: PUSH
23206: LD_INT 32
23208: PUSH
23209: LD_INT 33
23211: PUSH
23212: LD_INT 34
23214: PUSH
23215: LD_INT 36
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 101
23256: PUSH
23257: LD_INT 102
23259: PUSH
23260: LD_INT 103
23262: PUSH
23263: LD_INT 104
23265: PUSH
23266: LD_INT 105
23268: PUSH
23269: LD_INT 106
23271: PUSH
23272: LD_INT 107
23274: PUSH
23275: LD_INT 108
23277: PUSH
23278: LD_INT 109
23280: PUSH
23281: LD_INT 110
23283: PUSH
23284: LD_INT 111
23286: PUSH
23287: LD_INT 112
23289: PUSH
23290: LD_INT 113
23292: PUSH
23293: LD_INT 114
23295: PUSH
23296: LD_INT 116
23298: PUSH
23299: LD_INT 117
23301: PUSH
23302: LD_INT 118
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: ST_TO_ADDR
23328: GO 24783
23330: LD_INT 13
23332: DOUBLE
23333: EQUAL
23334: IFTRUE 23338
23336: GO 23546
23338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23339: LD_ADDR_VAR 0 2
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: LD_INT 4
23355: PUSH
23356: LD_INT 5
23358: PUSH
23359: LD_INT 8
23361: PUSH
23362: LD_INT 9
23364: PUSH
23365: LD_INT 10
23367: PUSH
23368: LD_INT 11
23370: PUSH
23371: LD_INT 12
23373: PUSH
23374: LD_INT 14
23376: PUSH
23377: LD_INT 15
23379: PUSH
23380: LD_INT 16
23382: PUSH
23383: LD_INT 17
23385: PUSH
23386: LD_INT 18
23388: PUSH
23389: LD_INT 19
23391: PUSH
23392: LD_INT 20
23394: PUSH
23395: LD_INT 21
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_INT 23
23403: PUSH
23404: LD_INT 24
23406: PUSH
23407: LD_INT 25
23409: PUSH
23410: LD_INT 26
23412: PUSH
23413: LD_INT 27
23415: PUSH
23416: LD_INT 28
23418: PUSH
23419: LD_INT 30
23421: PUSH
23422: LD_INT 31
23424: PUSH
23425: LD_INT 32
23427: PUSH
23428: LD_INT 33
23430: PUSH
23431: LD_INT 34
23433: PUSH
23434: LD_INT 36
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 101
23472: PUSH
23473: LD_INT 102
23475: PUSH
23476: LD_INT 103
23478: PUSH
23479: LD_INT 104
23481: PUSH
23482: LD_INT 105
23484: PUSH
23485: LD_INT 106
23487: PUSH
23488: LD_INT 107
23490: PUSH
23491: LD_INT 108
23493: PUSH
23494: LD_INT 109
23496: PUSH
23497: LD_INT 110
23499: PUSH
23500: LD_INT 111
23502: PUSH
23503: LD_INT 112
23505: PUSH
23506: LD_INT 113
23508: PUSH
23509: LD_INT 114
23511: PUSH
23512: LD_INT 116
23514: PUSH
23515: LD_INT 117
23517: PUSH
23518: LD_INT 118
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: ST_TO_ADDR
23544: GO 24783
23546: LD_INT 14
23548: DOUBLE
23549: EQUAL
23550: IFTRUE 23554
23552: GO 23778
23554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23555: LD_ADDR_VAR 0 2
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: LD_INT 3
23568: PUSH
23569: LD_INT 4
23571: PUSH
23572: LD_INT 5
23574: PUSH
23575: LD_INT 6
23577: PUSH
23578: LD_INT 7
23580: PUSH
23581: LD_INT 8
23583: PUSH
23584: LD_INT 9
23586: PUSH
23587: LD_INT 10
23589: PUSH
23590: LD_INT 11
23592: PUSH
23593: LD_INT 12
23595: PUSH
23596: LD_INT 13
23598: PUSH
23599: LD_INT 14
23601: PUSH
23602: LD_INT 15
23604: PUSH
23605: LD_INT 16
23607: PUSH
23608: LD_INT 17
23610: PUSH
23611: LD_INT 18
23613: PUSH
23614: LD_INT 19
23616: PUSH
23617: LD_INT 20
23619: PUSH
23620: LD_INT 21
23622: PUSH
23623: LD_INT 22
23625: PUSH
23626: LD_INT 23
23628: PUSH
23629: LD_INT 24
23631: PUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 26
23637: PUSH
23638: LD_INT 27
23640: PUSH
23641: LD_INT 28
23643: PUSH
23644: LD_INT 29
23646: PUSH
23647: LD_INT 30
23649: PUSH
23650: LD_INT 31
23652: PUSH
23653: LD_INT 32
23655: PUSH
23656: LD_INT 33
23658: PUSH
23659: LD_INT 34
23661: PUSH
23662: LD_INT 36
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 101
23704: PUSH
23705: LD_INT 102
23707: PUSH
23708: LD_INT 103
23710: PUSH
23711: LD_INT 104
23713: PUSH
23714: LD_INT 105
23716: PUSH
23717: LD_INT 106
23719: PUSH
23720: LD_INT 107
23722: PUSH
23723: LD_INT 108
23725: PUSH
23726: LD_INT 109
23728: PUSH
23729: LD_INT 110
23731: PUSH
23732: LD_INT 111
23734: PUSH
23735: LD_INT 112
23737: PUSH
23738: LD_INT 113
23740: PUSH
23741: LD_INT 114
23743: PUSH
23744: LD_INT 116
23746: PUSH
23747: LD_INT 117
23749: PUSH
23750: LD_INT 118
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: ST_TO_ADDR
23776: GO 24783
23778: LD_INT 15
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 24010
23786: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 3
23800: PUSH
23801: LD_INT 4
23803: PUSH
23804: LD_INT 5
23806: PUSH
23807: LD_INT 6
23809: PUSH
23810: LD_INT 7
23812: PUSH
23813: LD_INT 8
23815: PUSH
23816: LD_INT 9
23818: PUSH
23819: LD_INT 10
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 12
23827: PUSH
23828: LD_INT 13
23830: PUSH
23831: LD_INT 14
23833: PUSH
23834: LD_INT 15
23836: PUSH
23837: LD_INT 16
23839: PUSH
23840: LD_INT 17
23842: PUSH
23843: LD_INT 18
23845: PUSH
23846: LD_INT 19
23848: PUSH
23849: LD_INT 20
23851: PUSH
23852: LD_INT 21
23854: PUSH
23855: LD_INT 22
23857: PUSH
23858: LD_INT 23
23860: PUSH
23861: LD_INT 24
23863: PUSH
23864: LD_INT 25
23866: PUSH
23867: LD_INT 26
23869: PUSH
23870: LD_INT 27
23872: PUSH
23873: LD_INT 28
23875: PUSH
23876: LD_INT 29
23878: PUSH
23879: LD_INT 30
23881: PUSH
23882: LD_INT 31
23884: PUSH
23885: LD_INT 32
23887: PUSH
23888: LD_INT 33
23890: PUSH
23891: LD_INT 34
23893: PUSH
23894: LD_INT 36
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 101
23936: PUSH
23937: LD_INT 102
23939: PUSH
23940: LD_INT 103
23942: PUSH
23943: LD_INT 104
23945: PUSH
23946: LD_INT 105
23948: PUSH
23949: LD_INT 106
23951: PUSH
23952: LD_INT 107
23954: PUSH
23955: LD_INT 108
23957: PUSH
23958: LD_INT 109
23960: PUSH
23961: LD_INT 110
23963: PUSH
23964: LD_INT 111
23966: PUSH
23967: LD_INT 112
23969: PUSH
23970: LD_INT 113
23972: PUSH
23973: LD_INT 114
23975: PUSH
23976: LD_INT 116
23978: PUSH
23979: LD_INT 117
23981: PUSH
23982: LD_INT 118
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: ST_TO_ADDR
24008: GO 24783
24010: LD_INT 16
24012: DOUBLE
24013: EQUAL
24014: IFTRUE 24018
24016: GO 24154
24018: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24019: LD_ADDR_VAR 0 2
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 4
24029: PUSH
24030: LD_INT 5
24032: PUSH
24033: LD_INT 7
24035: PUSH
24036: LD_INT 11
24038: PUSH
24039: LD_INT 12
24041: PUSH
24042: LD_INT 15
24044: PUSH
24045: LD_INT 16
24047: PUSH
24048: LD_INT 20
24050: PUSH
24051: LD_INT 21
24053: PUSH
24054: LD_INT 22
24056: PUSH
24057: LD_INT 23
24059: PUSH
24060: LD_INT 25
24062: PUSH
24063: LD_INT 26
24065: PUSH
24066: LD_INT 30
24068: PUSH
24069: LD_INT 31
24071: PUSH
24072: LD_INT 32
24074: PUSH
24075: LD_INT 33
24077: PUSH
24078: LD_INT 34
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 101
24104: PUSH
24105: LD_INT 102
24107: PUSH
24108: LD_INT 103
24110: PUSH
24111: LD_INT 106
24113: PUSH
24114: LD_INT 108
24116: PUSH
24117: LD_INT 112
24119: PUSH
24120: LD_INT 113
24122: PUSH
24123: LD_INT 114
24125: PUSH
24126: LD_INT 116
24128: PUSH
24129: LD_INT 117
24131: PUSH
24132: LD_INT 118
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: ST_TO_ADDR
24152: GO 24783
24154: LD_INT 17
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24386
24162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24163: LD_ADDR_VAR 0 2
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: LD_INT 4
24179: PUSH
24180: LD_INT 5
24182: PUSH
24183: LD_INT 6
24185: PUSH
24186: LD_INT 7
24188: PUSH
24189: LD_INT 8
24191: PUSH
24192: LD_INT 9
24194: PUSH
24195: LD_INT 10
24197: PUSH
24198: LD_INT 11
24200: PUSH
24201: LD_INT 12
24203: PUSH
24204: LD_INT 13
24206: PUSH
24207: LD_INT 14
24209: PUSH
24210: LD_INT 15
24212: PUSH
24213: LD_INT 16
24215: PUSH
24216: LD_INT 17
24218: PUSH
24219: LD_INT 18
24221: PUSH
24222: LD_INT 19
24224: PUSH
24225: LD_INT 20
24227: PUSH
24228: LD_INT 21
24230: PUSH
24231: LD_INT 22
24233: PUSH
24234: LD_INT 23
24236: PUSH
24237: LD_INT 24
24239: PUSH
24240: LD_INT 25
24242: PUSH
24243: LD_INT 26
24245: PUSH
24246: LD_INT 27
24248: PUSH
24249: LD_INT 28
24251: PUSH
24252: LD_INT 29
24254: PUSH
24255: LD_INT 30
24257: PUSH
24258: LD_INT 31
24260: PUSH
24261: LD_INT 32
24263: PUSH
24264: LD_INT 33
24266: PUSH
24267: LD_INT 34
24269: PUSH
24270: LD_INT 36
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 101
24312: PUSH
24313: LD_INT 102
24315: PUSH
24316: LD_INT 103
24318: PUSH
24319: LD_INT 104
24321: PUSH
24322: LD_INT 105
24324: PUSH
24325: LD_INT 106
24327: PUSH
24328: LD_INT 107
24330: PUSH
24331: LD_INT 108
24333: PUSH
24334: LD_INT 109
24336: PUSH
24337: LD_INT 110
24339: PUSH
24340: LD_INT 111
24342: PUSH
24343: LD_INT 112
24345: PUSH
24346: LD_INT 113
24348: PUSH
24349: LD_INT 114
24351: PUSH
24352: LD_INT 116
24354: PUSH
24355: LD_INT 117
24357: PUSH
24358: LD_INT 118
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: ST_TO_ADDR
24384: GO 24783
24386: LD_INT 18
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24542
24394: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: LD_INT 5
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 11
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 15
24420: PUSH
24421: LD_INT 16
24423: PUSH
24424: LD_INT 20
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 22
24432: PUSH
24433: LD_INT 23
24435: PUSH
24436: LD_INT 25
24438: PUSH
24439: LD_INT 26
24441: PUSH
24442: LD_INT 30
24444: PUSH
24445: LD_INT 31
24447: PUSH
24448: LD_INT 32
24450: PUSH
24451: LD_INT 33
24453: PUSH
24454: LD_INT 34
24456: PUSH
24457: LD_INT 35
24459: PUSH
24460: LD_INT 36
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 101
24488: PUSH
24489: LD_INT 102
24491: PUSH
24492: LD_INT 103
24494: PUSH
24495: LD_INT 106
24497: PUSH
24498: LD_INT 108
24500: PUSH
24501: LD_INT 112
24503: PUSH
24504: LD_INT 113
24506: PUSH
24507: LD_INT 114
24509: PUSH
24510: LD_INT 115
24512: PUSH
24513: LD_INT 116
24515: PUSH
24516: LD_INT 117
24518: PUSH
24519: LD_INT 118
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: ST_TO_ADDR
24540: GO 24783
24542: LD_INT 19
24544: DOUBLE
24545: EQUAL
24546: IFTRUE 24550
24548: GO 24782
24550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24551: LD_ADDR_VAR 0 2
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: LD_INT 2
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: LD_INT 4
24567: PUSH
24568: LD_INT 5
24570: PUSH
24571: LD_INT 6
24573: PUSH
24574: LD_INT 7
24576: PUSH
24577: LD_INT 8
24579: PUSH
24580: LD_INT 9
24582: PUSH
24583: LD_INT 10
24585: PUSH
24586: LD_INT 11
24588: PUSH
24589: LD_INT 12
24591: PUSH
24592: LD_INT 13
24594: PUSH
24595: LD_INT 14
24597: PUSH
24598: LD_INT 15
24600: PUSH
24601: LD_INT 16
24603: PUSH
24604: LD_INT 17
24606: PUSH
24607: LD_INT 18
24609: PUSH
24610: LD_INT 19
24612: PUSH
24613: LD_INT 20
24615: PUSH
24616: LD_INT 21
24618: PUSH
24619: LD_INT 22
24621: PUSH
24622: LD_INT 23
24624: PUSH
24625: LD_INT 24
24627: PUSH
24628: LD_INT 25
24630: PUSH
24631: LD_INT 26
24633: PUSH
24634: LD_INT 27
24636: PUSH
24637: LD_INT 28
24639: PUSH
24640: LD_INT 29
24642: PUSH
24643: LD_INT 30
24645: PUSH
24646: LD_INT 31
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: LD_INT 33
24654: PUSH
24655: LD_INT 34
24657: PUSH
24658: LD_INT 35
24660: PUSH
24661: LD_INT 36
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 101
24704: PUSH
24705: LD_INT 102
24707: PUSH
24708: LD_INT 103
24710: PUSH
24711: LD_INT 104
24713: PUSH
24714: LD_INT 105
24716: PUSH
24717: LD_INT 106
24719: PUSH
24720: LD_INT 107
24722: PUSH
24723: LD_INT 108
24725: PUSH
24726: LD_INT 109
24728: PUSH
24729: LD_INT 110
24731: PUSH
24732: LD_INT 111
24734: PUSH
24735: LD_INT 112
24737: PUSH
24738: LD_INT 113
24740: PUSH
24741: LD_INT 114
24743: PUSH
24744: LD_INT 115
24746: PUSH
24747: LD_INT 116
24749: PUSH
24750: LD_INT 117
24752: PUSH
24753: LD_INT 118
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: ST_TO_ADDR
24780: GO 24783
24782: POP
// end else
24783: GO 25014
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24785: LD_ADDR_VAR 0 2
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: LD_INT 3
24798: PUSH
24799: LD_INT 4
24801: PUSH
24802: LD_INT 5
24804: PUSH
24805: LD_INT 6
24807: PUSH
24808: LD_INT 7
24810: PUSH
24811: LD_INT 8
24813: PUSH
24814: LD_INT 9
24816: PUSH
24817: LD_INT 10
24819: PUSH
24820: LD_INT 11
24822: PUSH
24823: LD_INT 12
24825: PUSH
24826: LD_INT 13
24828: PUSH
24829: LD_INT 14
24831: PUSH
24832: LD_INT 15
24834: PUSH
24835: LD_INT 16
24837: PUSH
24838: LD_INT 17
24840: PUSH
24841: LD_INT 18
24843: PUSH
24844: LD_INT 19
24846: PUSH
24847: LD_INT 20
24849: PUSH
24850: LD_INT 21
24852: PUSH
24853: LD_INT 22
24855: PUSH
24856: LD_INT 23
24858: PUSH
24859: LD_INT 24
24861: PUSH
24862: LD_INT 25
24864: PUSH
24865: LD_INT 26
24867: PUSH
24868: LD_INT 27
24870: PUSH
24871: LD_INT 28
24873: PUSH
24874: LD_INT 29
24876: PUSH
24877: LD_INT 30
24879: PUSH
24880: LD_INT 31
24882: PUSH
24883: LD_INT 32
24885: PUSH
24886: LD_INT 33
24888: PUSH
24889: LD_INT 34
24891: PUSH
24892: LD_INT 35
24894: PUSH
24895: LD_INT 36
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 101
24938: PUSH
24939: LD_INT 102
24941: PUSH
24942: LD_INT 103
24944: PUSH
24945: LD_INT 104
24947: PUSH
24948: LD_INT 105
24950: PUSH
24951: LD_INT 106
24953: PUSH
24954: LD_INT 107
24956: PUSH
24957: LD_INT 108
24959: PUSH
24960: LD_INT 109
24962: PUSH
24963: LD_INT 110
24965: PUSH
24966: LD_INT 111
24968: PUSH
24969: LD_INT 112
24971: PUSH
24972: LD_INT 113
24974: PUSH
24975: LD_INT 114
24977: PUSH
24978: LD_INT 115
24980: PUSH
24981: LD_INT 116
24983: PUSH
24984: LD_INT 117
24986: PUSH
24987: LD_INT 118
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: ST_TO_ADDR
// if result then
25014: LD_VAR 0 2
25018: IFFALSE 25804
// begin normal :=  ;
25020: LD_ADDR_VAR 0 5
25024: PUSH
25025: LD_STRING 
25027: ST_TO_ADDR
// hardcore :=  ;
25028: LD_ADDR_VAR 0 6
25032: PUSH
25033: LD_STRING 
25035: ST_TO_ADDR
// active :=  ;
25036: LD_ADDR_VAR 0 7
25040: PUSH
25041: LD_STRING 
25043: ST_TO_ADDR
// for i = 1 to normalCounter do
25044: LD_ADDR_VAR 0 8
25048: PUSH
25049: DOUBLE
25050: LD_INT 1
25052: DEC
25053: ST_TO_ADDR
25054: LD_EXP 56
25058: PUSH
25059: FOR_TO
25060: IFFALSE 25161
// begin tmp := 0 ;
25062: LD_ADDR_VAR 0 3
25066: PUSH
25067: LD_STRING 0
25069: ST_TO_ADDR
// if result [ 1 ] then
25070: LD_VAR 0 2
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: IFFALSE 25143
// if result [ 1 ] [ 1 ] = i then
25080: LD_VAR 0 2
25084: PUSH
25085: LD_INT 1
25087: ARRAY
25088: PUSH
25089: LD_INT 1
25091: ARRAY
25092: PUSH
25093: LD_VAR 0 8
25097: EQUAL
25098: IFFALSE 25143
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25100: LD_ADDR_VAR 0 2
25104: PUSH
25105: LD_VAR 0 2
25109: PPUSH
25110: LD_INT 1
25112: PPUSH
25113: LD_VAR 0 2
25117: PUSH
25118: LD_INT 1
25120: ARRAY
25121: PPUSH
25122: LD_INT 1
25124: PPUSH
25125: CALL_OW 3
25129: PPUSH
25130: CALL_OW 1
25134: ST_TO_ADDR
// tmp := 1 ;
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_STRING 1
25142: ST_TO_ADDR
// end ; normal := normal & tmp ;
25143: LD_ADDR_VAR 0 5
25147: PUSH
25148: LD_VAR 0 5
25152: PUSH
25153: LD_VAR 0 3
25157: STR
25158: ST_TO_ADDR
// end ;
25159: GO 25059
25161: POP
25162: POP
// for i = 1 to hardcoreCounter do
25163: LD_ADDR_VAR 0 8
25167: PUSH
25168: DOUBLE
25169: LD_INT 1
25171: DEC
25172: ST_TO_ADDR
25173: LD_EXP 57
25177: PUSH
25178: FOR_TO
25179: IFFALSE 25284
// begin tmp := 0 ;
25181: LD_ADDR_VAR 0 3
25185: PUSH
25186: LD_STRING 0
25188: ST_TO_ADDR
// if result [ 2 ] then
25189: LD_VAR 0 2
25193: PUSH
25194: LD_INT 2
25196: ARRAY
25197: IFFALSE 25266
// if result [ 2 ] [ 1 ] = 100 + i then
25199: LD_VAR 0 2
25203: PUSH
25204: LD_INT 2
25206: ARRAY
25207: PUSH
25208: LD_INT 1
25210: ARRAY
25211: PUSH
25212: LD_INT 100
25214: PUSH
25215: LD_VAR 0 8
25219: PLUS
25220: EQUAL
25221: IFFALSE 25266
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25223: LD_ADDR_VAR 0 2
25227: PUSH
25228: LD_VAR 0 2
25232: PPUSH
25233: LD_INT 2
25235: PPUSH
25236: LD_VAR 0 2
25240: PUSH
25241: LD_INT 2
25243: ARRAY
25244: PPUSH
25245: LD_INT 1
25247: PPUSH
25248: CALL_OW 3
25252: PPUSH
25253: CALL_OW 1
25257: ST_TO_ADDR
// tmp := 1 ;
25258: LD_ADDR_VAR 0 3
25262: PUSH
25263: LD_STRING 1
25265: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25266: LD_ADDR_VAR 0 6
25270: PUSH
25271: LD_VAR 0 6
25275: PUSH
25276: LD_VAR 0 3
25280: STR
25281: ST_TO_ADDR
// end ;
25282: GO 25178
25284: POP
25285: POP
// if isGameLoad then
25286: LD_VAR 0 1
25290: IFFALSE 25765
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25292: LD_ADDR_VAR 0 4
25296: PUSH
25297: LD_EXP 60
25301: PUSH
25302: LD_EXP 59
25306: PUSH
25307: LD_EXP 61
25311: PUSH
25312: LD_EXP 58
25316: PUSH
25317: LD_EXP 62
25321: PUSH
25322: LD_EXP 63
25326: PUSH
25327: LD_EXP 64
25331: PUSH
25332: LD_EXP 65
25336: PUSH
25337: LD_EXP 66
25341: PUSH
25342: LD_EXP 67
25346: PUSH
25347: LD_EXP 68
25351: PUSH
25352: LD_EXP 69
25356: PUSH
25357: LD_EXP 70
25361: PUSH
25362: LD_EXP 71
25366: PUSH
25367: LD_EXP 79
25371: PUSH
25372: LD_EXP 80
25376: PUSH
25377: LD_EXP 81
25381: PUSH
25382: LD_EXP 82
25386: PUSH
25387: LD_EXP 84
25391: PUSH
25392: LD_EXP 85
25396: PUSH
25397: LD_EXP 86
25401: PUSH
25402: LD_EXP 89
25406: PUSH
25407: LD_EXP 91
25411: PUSH
25412: LD_EXP 92
25416: PUSH
25417: LD_EXP 93
25421: PUSH
25422: LD_EXP 95
25426: PUSH
25427: LD_EXP 96
25431: PUSH
25432: LD_EXP 99
25436: PUSH
25437: LD_EXP 100
25441: PUSH
25442: LD_EXP 101
25446: PUSH
25447: LD_EXP 102
25451: PUSH
25452: LD_EXP 103
25456: PUSH
25457: LD_EXP 104
25461: PUSH
25462: LD_EXP 105
25466: PUSH
25467: LD_EXP 106
25471: PUSH
25472: LD_EXP 107
25476: PUSH
25477: LD_EXP 72
25481: PUSH
25482: LD_EXP 73
25486: PUSH
25487: LD_EXP 76
25491: PUSH
25492: LD_EXP 77
25496: PUSH
25497: LD_EXP 78
25501: PUSH
25502: LD_EXP 74
25506: PUSH
25507: LD_EXP 75
25511: PUSH
25512: LD_EXP 83
25516: PUSH
25517: LD_EXP 87
25521: PUSH
25522: LD_EXP 88
25526: PUSH
25527: LD_EXP 90
25531: PUSH
25532: LD_EXP 94
25536: PUSH
25537: LD_EXP 97
25541: PUSH
25542: LD_EXP 98
25546: PUSH
25547: LD_EXP 108
25551: PUSH
25552: LD_EXP 109
25556: PUSH
25557: LD_EXP 110
25561: PUSH
25562: LD_EXP 111
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: ST_TO_ADDR
// tmp :=  ;
25623: LD_ADDR_VAR 0 3
25627: PUSH
25628: LD_STRING 
25630: ST_TO_ADDR
// for i = 1 to normalCounter do
25631: LD_ADDR_VAR 0 8
25635: PUSH
25636: DOUBLE
25637: LD_INT 1
25639: DEC
25640: ST_TO_ADDR
25641: LD_EXP 56
25645: PUSH
25646: FOR_TO
25647: IFFALSE 25683
// begin if flags [ i ] then
25649: LD_VAR 0 4
25653: PUSH
25654: LD_VAR 0 8
25658: ARRAY
25659: IFFALSE 25681
// tmp := tmp & i & ; ;
25661: LD_ADDR_VAR 0 3
25665: PUSH
25666: LD_VAR 0 3
25670: PUSH
25671: LD_VAR 0 8
25675: STR
25676: PUSH
25677: LD_STRING ;
25679: STR
25680: ST_TO_ADDR
// end ;
25681: GO 25646
25683: POP
25684: POP
// for i = 1 to hardcoreCounter do
25685: LD_ADDR_VAR 0 8
25689: PUSH
25690: DOUBLE
25691: LD_INT 1
25693: DEC
25694: ST_TO_ADDR
25695: LD_EXP 57
25699: PUSH
25700: FOR_TO
25701: IFFALSE 25747
// begin if flags [ normalCounter + i ] then
25703: LD_VAR 0 4
25707: PUSH
25708: LD_EXP 56
25712: PUSH
25713: LD_VAR 0 8
25717: PLUS
25718: ARRAY
25719: IFFALSE 25745
// tmp := tmp & ( 100 + i ) & ; ;
25721: LD_ADDR_VAR 0 3
25725: PUSH
25726: LD_VAR 0 3
25730: PUSH
25731: LD_INT 100
25733: PUSH
25734: LD_VAR 0 8
25738: PLUS
25739: STR
25740: PUSH
25741: LD_STRING ;
25743: STR
25744: ST_TO_ADDR
// end ;
25745: GO 25700
25747: POP
25748: POP
// if tmp then
25749: LD_VAR 0 3
25753: IFFALSE 25765
// active := tmp ;
25755: LD_ADDR_VAR 0 7
25759: PUSH
25760: LD_VAR 0 3
25764: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25765: LD_STRING getStreamItemsFromMission("
25767: PUSH
25768: LD_VAR 0 5
25772: STR
25773: PUSH
25774: LD_STRING ","
25776: STR
25777: PUSH
25778: LD_VAR 0 6
25782: STR
25783: PUSH
25784: LD_STRING ","
25786: STR
25787: PUSH
25788: LD_VAR 0 7
25792: STR
25793: PUSH
25794: LD_STRING ")
25796: STR
25797: PPUSH
25798: CALL_OW 559
// end else
25802: GO 25811
// ToLua ( getStreamItemsFromMission("","","") ) ;
25804: LD_STRING getStreamItemsFromMission("","","")
25806: PPUSH
25807: CALL_OW 559
// end ;
25811: LD_VAR 0 2
25815: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25816: LD_EXP 55
25820: PUSH
25821: LD_EXP 60
25825: AND
25826: IFFALSE 25950
25828: GO 25830
25830: DISABLE
25831: LD_INT 0
25833: PPUSH
25834: PPUSH
// begin enable ;
25835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_OWVAR 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: LD_INT 34
25858: PUSH
25859: LD_INT 7
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 34
25868: PUSH
25869: LD_INT 45
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 34
25878: PUSH
25879: LD_INT 28
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 34
25888: PUSH
25889: LD_INT 47
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PPUSH
25907: CALL_OW 69
25911: ST_TO_ADDR
// if not tmp then
25912: LD_VAR 0 2
25916: NOT
25917: IFFALSE 25921
// exit ;
25919: GO 25950
// for i in tmp do
25921: LD_ADDR_VAR 0 1
25925: PUSH
25926: LD_VAR 0 2
25930: PUSH
25931: FOR_IN
25932: IFFALSE 25948
// begin SetLives ( i , 0 ) ;
25934: LD_VAR 0 1
25938: PPUSH
25939: LD_INT 0
25941: PPUSH
25942: CALL_OW 234
// end ;
25946: GO 25931
25948: POP
25949: POP
// end ;
25950: PPOPN 2
25952: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25953: LD_EXP 55
25957: PUSH
25958: LD_EXP 61
25962: AND
25963: IFFALSE 26047
25965: GO 25967
25967: DISABLE
25968: LD_INT 0
25970: PPUSH
25971: PPUSH
// begin enable ;
25972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25973: LD_ADDR_VAR 0 2
25977: PUSH
25978: LD_INT 22
25980: PUSH
25981: LD_OWVAR 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 32
25992: PUSH
25993: LD_INT 3
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PPUSH
26004: CALL_OW 69
26008: ST_TO_ADDR
// if not tmp then
26009: LD_VAR 0 2
26013: NOT
26014: IFFALSE 26018
// exit ;
26016: GO 26047
// for i in tmp do
26018: LD_ADDR_VAR 0 1
26022: PUSH
26023: LD_VAR 0 2
26027: PUSH
26028: FOR_IN
26029: IFFALSE 26045
// begin SetLives ( i , 0 ) ;
26031: LD_VAR 0 1
26035: PPUSH
26036: LD_INT 0
26038: PPUSH
26039: CALL_OW 234
// end ;
26043: GO 26028
26045: POP
26046: POP
// end ;
26047: PPOPN 2
26049: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26050: LD_EXP 55
26054: PUSH
26055: LD_EXP 58
26059: AND
26060: IFFALSE 26153
26062: GO 26064
26064: DISABLE
26065: LD_INT 0
26067: PPUSH
// begin enable ;
26068: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26069: LD_ADDR_VAR 0 1
26073: PUSH
26074: LD_INT 22
26076: PUSH
26077: LD_OWVAR 2
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: LD_INT 25
26091: PUSH
26092: LD_INT 5
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 25
26101: PUSH
26102: LD_INT 9
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 25
26111: PUSH
26112: LD_INT 8
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PPUSH
26129: CALL_OW 69
26133: PUSH
26134: FOR_IN
26135: IFFALSE 26151
// begin SetClass ( i , 1 ) ;
26137: LD_VAR 0 1
26141: PPUSH
26142: LD_INT 1
26144: PPUSH
26145: CALL_OW 336
// end ;
26149: GO 26134
26151: POP
26152: POP
// end ;
26153: PPOPN 1
26155: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26156: LD_EXP 55
26160: PUSH
26161: LD_EXP 59
26165: AND
26166: PUSH
26167: LD_OWVAR 65
26171: PUSH
26172: LD_INT 7
26174: LESS
26175: AND
26176: IFFALSE 26190
26178: GO 26180
26180: DISABLE
// begin enable ;
26181: ENABLE
// game_speed := 7 ;
26182: LD_ADDR_OWVAR 65
26186: PUSH
26187: LD_INT 7
26189: ST_TO_ADDR
// end ;
26190: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26191: LD_EXP 55
26195: PUSH
26196: LD_EXP 62
26200: AND
26201: IFFALSE 26403
26203: GO 26205
26205: DISABLE
26206: LD_INT 0
26208: PPUSH
26209: PPUSH
26210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26211: LD_ADDR_VAR 0 3
26215: PUSH
26216: LD_INT 81
26218: PUSH
26219: LD_OWVAR 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 21
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PPUSH
26242: CALL_OW 69
26246: ST_TO_ADDR
// if not tmp then
26247: LD_VAR 0 3
26251: NOT
26252: IFFALSE 26256
// exit ;
26254: GO 26403
// if tmp > 5 then
26256: LD_VAR 0 3
26260: PUSH
26261: LD_INT 5
26263: GREATER
26264: IFFALSE 26276
// k := 5 else
26266: LD_ADDR_VAR 0 2
26270: PUSH
26271: LD_INT 5
26273: ST_TO_ADDR
26274: GO 26286
// k := tmp ;
26276: LD_ADDR_VAR 0 2
26280: PUSH
26281: LD_VAR 0 3
26285: ST_TO_ADDR
// for i := 1 to k do
26286: LD_ADDR_VAR 0 1
26290: PUSH
26291: DOUBLE
26292: LD_INT 1
26294: DEC
26295: ST_TO_ADDR
26296: LD_VAR 0 2
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26401
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26304: LD_VAR 0 3
26308: PUSH
26309: LD_VAR 0 1
26313: ARRAY
26314: PPUSH
26315: LD_VAR 0 1
26319: PUSH
26320: LD_INT 4
26322: MOD
26323: PUSH
26324: LD_INT 1
26326: PLUS
26327: PPUSH
26328: CALL_OW 259
26332: PUSH
26333: LD_INT 10
26335: LESS
26336: IFFALSE 26399
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26338: LD_VAR 0 3
26342: PUSH
26343: LD_VAR 0 1
26347: ARRAY
26348: PPUSH
26349: LD_VAR 0 1
26353: PUSH
26354: LD_INT 4
26356: MOD
26357: PUSH
26358: LD_INT 1
26360: PLUS
26361: PPUSH
26362: LD_VAR 0 3
26366: PUSH
26367: LD_VAR 0 1
26371: ARRAY
26372: PPUSH
26373: LD_VAR 0 1
26377: PUSH
26378: LD_INT 4
26380: MOD
26381: PUSH
26382: LD_INT 1
26384: PLUS
26385: PPUSH
26386: CALL_OW 259
26390: PUSH
26391: LD_INT 1
26393: PLUS
26394: PPUSH
26395: CALL_OW 237
26399: GO 26301
26401: POP
26402: POP
// end ;
26403: PPOPN 3
26405: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26406: LD_EXP 55
26410: PUSH
26411: LD_EXP 63
26415: AND
26416: IFFALSE 26436
26418: GO 26420
26420: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26421: LD_INT 4
26423: PPUSH
26424: LD_OWVAR 2
26428: PPUSH
26429: LD_INT 0
26431: PPUSH
26432: CALL_OW 324
26436: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26437: LD_EXP 55
26441: PUSH
26442: LD_EXP 92
26446: AND
26447: IFFALSE 26467
26449: GO 26451
26451: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26452: LD_INT 19
26454: PPUSH
26455: LD_OWVAR 2
26459: PPUSH
26460: LD_INT 0
26462: PPUSH
26463: CALL_OW 324
26467: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26468: LD_EXP 55
26472: PUSH
26473: LD_EXP 64
26477: AND
26478: IFFALSE 26580
26480: GO 26482
26482: DISABLE
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
// begin enable ;
26487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26488: LD_ADDR_VAR 0 2
26492: PUSH
26493: LD_INT 22
26495: PUSH
26496: LD_OWVAR 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 34
26510: PUSH
26511: LD_INT 11
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 34
26520: PUSH
26521: LD_INT 30
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PPUSH
26537: CALL_OW 69
26541: ST_TO_ADDR
// if not tmp then
26542: LD_VAR 0 2
26546: NOT
26547: IFFALSE 26551
// exit ;
26549: GO 26580
// for i in tmp do
26551: LD_ADDR_VAR 0 1
26555: PUSH
26556: LD_VAR 0 2
26560: PUSH
26561: FOR_IN
26562: IFFALSE 26578
// begin SetLives ( i , 0 ) ;
26564: LD_VAR 0 1
26568: PPUSH
26569: LD_INT 0
26571: PPUSH
26572: CALL_OW 234
// end ;
26576: GO 26561
26578: POP
26579: POP
// end ;
26580: PPOPN 2
26582: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26583: LD_EXP 55
26587: PUSH
26588: LD_EXP 65
26592: AND
26593: IFFALSE 26613
26595: GO 26597
26597: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26598: LD_INT 32
26600: PPUSH
26601: LD_OWVAR 2
26605: PPUSH
26606: LD_INT 0
26608: PPUSH
26609: CALL_OW 324
26613: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26614: LD_EXP 55
26618: PUSH
26619: LD_EXP 66
26623: AND
26624: IFFALSE 26805
26626: GO 26628
26628: DISABLE
26629: LD_INT 0
26631: PPUSH
26632: PPUSH
26633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26634: LD_ADDR_VAR 0 2
26638: PUSH
26639: LD_INT 22
26641: PUSH
26642: LD_OWVAR 2
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 33
26653: PUSH
26654: LD_INT 3
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PPUSH
26665: CALL_OW 69
26669: ST_TO_ADDR
// if not tmp then
26670: LD_VAR 0 2
26674: NOT
26675: IFFALSE 26679
// exit ;
26677: GO 26805
// side := 0 ;
26679: LD_ADDR_VAR 0 3
26683: PUSH
26684: LD_INT 0
26686: ST_TO_ADDR
// for i := 1 to 8 do
26687: LD_ADDR_VAR 0 1
26691: PUSH
26692: DOUBLE
26693: LD_INT 1
26695: DEC
26696: ST_TO_ADDR
26697: LD_INT 8
26699: PUSH
26700: FOR_TO
26701: IFFALSE 26749
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26703: LD_OWVAR 2
26707: PUSH
26708: LD_VAR 0 1
26712: NONEQUAL
26713: PUSH
26714: LD_OWVAR 2
26718: PPUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 81
26728: PUSH
26729: LD_INT 2
26731: EQUAL
26732: AND
26733: IFFALSE 26747
// begin side := i ;
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_VAR 0 1
26744: ST_TO_ADDR
// break ;
26745: GO 26749
// end ;
26747: GO 26700
26749: POP
26750: POP
// if not side then
26751: LD_VAR 0 3
26755: NOT
26756: IFFALSE 26760
// exit ;
26758: GO 26805
// for i := 1 to tmp do
26760: LD_ADDR_VAR 0 1
26764: PUSH
26765: DOUBLE
26766: LD_INT 1
26768: DEC
26769: ST_TO_ADDR
26770: LD_VAR 0 2
26774: PUSH
26775: FOR_TO
26776: IFFALSE 26803
// if Prob ( 60 ) then
26778: LD_INT 60
26780: PPUSH
26781: CALL_OW 13
26785: IFFALSE 26801
// SetSide ( i , side ) ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_VAR 0 3
26796: PPUSH
26797: CALL_OW 235
26801: GO 26775
26803: POP
26804: POP
// end ;
26805: PPOPN 3
26807: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26808: LD_EXP 55
26812: PUSH
26813: LD_EXP 68
26817: AND
26818: IFFALSE 26937
26820: GO 26822
26822: DISABLE
26823: LD_INT 0
26825: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26826: LD_ADDR_VAR 0 1
26830: PUSH
26831: LD_INT 22
26833: PUSH
26834: LD_OWVAR 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 21
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 3
26855: PUSH
26856: LD_INT 23
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: PPUSH
26875: CALL_OW 69
26879: PUSH
26880: FOR_IN
26881: IFFALSE 26935
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26883: LD_VAR 0 1
26887: PPUSH
26888: CALL_OW 257
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 3
26901: PUSH
26902: LD_INT 4
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: IN
26911: IFFALSE 26933
// SetClass ( un , rand ( 1 , 4 ) ) ;
26913: LD_VAR 0 1
26917: PPUSH
26918: LD_INT 1
26920: PPUSH
26921: LD_INT 4
26923: PPUSH
26924: CALL_OW 12
26928: PPUSH
26929: CALL_OW 336
26933: GO 26880
26935: POP
26936: POP
// end ;
26937: PPOPN 1
26939: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26940: LD_EXP 55
26944: PUSH
26945: LD_EXP 67
26949: AND
26950: IFFALSE 27029
26952: GO 26954
26954: DISABLE
26955: LD_INT 0
26957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26958: LD_ADDR_VAR 0 1
26962: PUSH
26963: LD_INT 22
26965: PUSH
26966: LD_OWVAR 2
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 21
26977: PUSH
26978: LD_INT 3
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PPUSH
26989: CALL_OW 69
26993: ST_TO_ADDR
// if not tmp then
26994: LD_VAR 0 1
26998: NOT
26999: IFFALSE 27003
// exit ;
27001: GO 27029
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27003: LD_VAR 0 1
27007: PUSH
27008: LD_INT 1
27010: PPUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 12
27020: ARRAY
27021: PPUSH
27022: LD_INT 100
27024: PPUSH
27025: CALL_OW 234
// end ;
27029: PPOPN 1
27031: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27032: LD_EXP 55
27036: PUSH
27037: LD_EXP 69
27041: AND
27042: IFFALSE 27140
27044: GO 27046
27046: DISABLE
27047: LD_INT 0
27049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27050: LD_ADDR_VAR 0 1
27054: PUSH
27055: LD_INT 22
27057: PUSH
27058: LD_OWVAR 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 21
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PPUSH
27081: CALL_OW 69
27085: ST_TO_ADDR
// if not tmp then
27086: LD_VAR 0 1
27090: NOT
27091: IFFALSE 27095
// exit ;
27093: GO 27140
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27095: LD_VAR 0 1
27099: PUSH
27100: LD_INT 1
27102: PPUSH
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 12
27112: ARRAY
27113: PPUSH
27114: LD_INT 1
27116: PPUSH
27117: LD_INT 4
27119: PPUSH
27120: CALL_OW 12
27124: PPUSH
27125: LD_INT 3000
27127: PPUSH
27128: LD_INT 9000
27130: PPUSH
27131: CALL_OW 12
27135: PPUSH
27136: CALL_OW 492
// end ;
27140: PPOPN 1
27142: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27143: LD_EXP 55
27147: PUSH
27148: LD_EXP 70
27152: AND
27153: IFFALSE 27173
27155: GO 27157
27157: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27158: LD_INT 1
27160: PPUSH
27161: LD_OWVAR 2
27165: PPUSH
27166: LD_INT 0
27168: PPUSH
27169: CALL_OW 324
27173: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27174: LD_EXP 55
27178: PUSH
27179: LD_EXP 71
27183: AND
27184: IFFALSE 27267
27186: GO 27188
27188: DISABLE
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27193: LD_ADDR_VAR 0 2
27197: PUSH
27198: LD_INT 22
27200: PUSH
27201: LD_OWVAR 2
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 21
27212: PUSH
27213: LD_INT 3
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PPUSH
27224: CALL_OW 69
27228: ST_TO_ADDR
// if not tmp then
27229: LD_VAR 0 2
27233: NOT
27234: IFFALSE 27238
// exit ;
27236: GO 27267
// for i in tmp do
27238: LD_ADDR_VAR 0 1
27242: PUSH
27243: LD_VAR 0 2
27247: PUSH
27248: FOR_IN
27249: IFFALSE 27265
// SetBLevel ( i , 10 ) ;
27251: LD_VAR 0 1
27255: PPUSH
27256: LD_INT 10
27258: PPUSH
27259: CALL_OW 241
27263: GO 27248
27265: POP
27266: POP
// end ;
27267: PPOPN 2
27269: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27270: LD_EXP 55
27274: PUSH
27275: LD_EXP 72
27279: AND
27280: IFFALSE 27391
27282: GO 27284
27284: DISABLE
27285: LD_INT 0
27287: PPUSH
27288: PPUSH
27289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_INT 22
27297: PUSH
27298: LD_OWVAR 2
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 25
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: ST_TO_ADDR
// if not tmp then
27326: LD_VAR 0 3
27330: NOT
27331: IFFALSE 27335
// exit ;
27333: GO 27391
// un := tmp [ rand ( 1 , tmp ) ] ;
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: LD_VAR 0 3
27344: PUSH
27345: LD_INT 1
27347: PPUSH
27348: LD_VAR 0 3
27352: PPUSH
27353: CALL_OW 12
27357: ARRAY
27358: ST_TO_ADDR
// if Crawls ( un ) then
27359: LD_VAR 0 2
27363: PPUSH
27364: CALL_OW 318
27368: IFFALSE 27379
// ComWalk ( un ) ;
27370: LD_VAR 0 2
27374: PPUSH
27375: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27379: LD_VAR 0 2
27383: PPUSH
27384: LD_INT 5
27386: PPUSH
27387: CALL_OW 336
// end ;
27391: PPOPN 3
27393: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27394: LD_EXP 55
27398: PUSH
27399: LD_EXP 73
27403: AND
27404: PUSH
27405: LD_OWVAR 67
27409: PUSH
27410: LD_INT 4
27412: LESS
27413: AND
27414: IFFALSE 27433
27416: GO 27418
27418: DISABLE
// begin Difficulty := Difficulty + 1 ;
27419: LD_ADDR_OWVAR 67
27423: PUSH
27424: LD_OWVAR 67
27428: PUSH
27429: LD_INT 1
27431: PLUS
27432: ST_TO_ADDR
// end ;
27433: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27434: LD_EXP 55
27438: PUSH
27439: LD_EXP 74
27443: AND
27444: IFFALSE 27547
27446: GO 27448
27448: DISABLE
27449: LD_INT 0
27451: PPUSH
// begin for i := 1 to 5 do
27452: LD_ADDR_VAR 0 1
27456: PUSH
27457: DOUBLE
27458: LD_INT 1
27460: DEC
27461: ST_TO_ADDR
27462: LD_INT 5
27464: PUSH
27465: FOR_TO
27466: IFFALSE 27545
// begin uc_nation := nation_nature ;
27468: LD_ADDR_OWVAR 21
27472: PUSH
27473: LD_INT 0
27475: ST_TO_ADDR
// uc_side := 0 ;
27476: LD_ADDR_OWVAR 20
27480: PUSH
27481: LD_INT 0
27483: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27484: LD_ADDR_OWVAR 29
27488: PUSH
27489: LD_INT 12
27491: PUSH
27492: LD_INT 12
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// hc_agressivity := 20 ;
27499: LD_ADDR_OWVAR 35
27503: PUSH
27504: LD_INT 20
27506: ST_TO_ADDR
// hc_class := class_tiger ;
27507: LD_ADDR_OWVAR 28
27511: PUSH
27512: LD_INT 14
27514: ST_TO_ADDR
// hc_gallery :=  ;
27515: LD_ADDR_OWVAR 33
27519: PUSH
27520: LD_STRING 
27522: ST_TO_ADDR
// hc_name :=  ;
27523: LD_ADDR_OWVAR 26
27527: PUSH
27528: LD_STRING 
27530: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27531: CALL_OW 44
27535: PPUSH
27536: LD_INT 0
27538: PPUSH
27539: CALL_OW 51
// end ;
27543: GO 27465
27545: POP
27546: POP
// end ;
27547: PPOPN 1
27549: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27550: LD_EXP 55
27554: PUSH
27555: LD_EXP 75
27559: AND
27560: IFFALSE 27569
27562: GO 27564
27564: DISABLE
// StreamSibBomb ;
27565: CALL 27570 0 0
27569: END
// export function StreamSibBomb ; var i , x , y ; begin
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
// result := false ;
27576: LD_ADDR_VAR 0 1
27580: PUSH
27581: LD_INT 0
27583: ST_TO_ADDR
// for i := 1 to 16 do
27584: LD_ADDR_VAR 0 2
27588: PUSH
27589: DOUBLE
27590: LD_INT 1
27592: DEC
27593: ST_TO_ADDR
27594: LD_INT 16
27596: PUSH
27597: FOR_TO
27598: IFFALSE 27797
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27600: LD_ADDR_VAR 0 3
27604: PUSH
27605: LD_INT 10
27607: PUSH
27608: LD_INT 20
27610: PUSH
27611: LD_INT 30
27613: PUSH
27614: LD_INT 40
27616: PUSH
27617: LD_INT 50
27619: PUSH
27620: LD_INT 60
27622: PUSH
27623: LD_INT 70
27625: PUSH
27626: LD_INT 80
27628: PUSH
27629: LD_INT 90
27631: PUSH
27632: LD_INT 100
27634: PUSH
27635: LD_INT 110
27637: PUSH
27638: LD_INT 120
27640: PUSH
27641: LD_INT 130
27643: PUSH
27644: LD_INT 140
27646: PUSH
27647: LD_INT 150
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: PPUSH
27670: LD_INT 15
27672: PPUSH
27673: CALL_OW 12
27677: ARRAY
27678: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27679: LD_ADDR_VAR 0 4
27683: PUSH
27684: LD_INT 10
27686: PUSH
27687: LD_INT 20
27689: PUSH
27690: LD_INT 30
27692: PUSH
27693: LD_INT 40
27695: PUSH
27696: LD_INT 50
27698: PUSH
27699: LD_INT 60
27701: PUSH
27702: LD_INT 70
27704: PUSH
27705: LD_INT 80
27707: PUSH
27708: LD_INT 90
27710: PUSH
27711: LD_INT 100
27713: PUSH
27714: LD_INT 110
27716: PUSH
27717: LD_INT 120
27719: PUSH
27720: LD_INT 130
27722: PUSH
27723: LD_INT 140
27725: PUSH
27726: LD_INT 150
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PPUSH
27749: LD_INT 15
27751: PPUSH
27752: CALL_OW 12
27756: ARRAY
27757: ST_TO_ADDR
// if ValidHex ( x , y ) then
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_VAR 0 4
27767: PPUSH
27768: CALL_OW 488
27772: IFFALSE 27795
// begin result := [ x , y ] ;
27774: LD_ADDR_VAR 0 1
27778: PUSH
27779: LD_VAR 0 3
27783: PUSH
27784: LD_VAR 0 4
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// break ;
27793: GO 27797
// end ; end ;
27795: GO 27597
27797: POP
27798: POP
// if result then
27799: LD_VAR 0 1
27803: IFFALSE 27863
// begin ToLua ( playSibBomb() ) ;
27805: LD_STRING playSibBomb()
27807: PPUSH
27808: CALL_OW 559
// wait ( 0 0$14 ) ;
27812: LD_INT 490
27814: PPUSH
27815: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27819: LD_VAR 0 1
27823: PUSH
27824: LD_INT 1
27826: ARRAY
27827: PPUSH
27828: LD_VAR 0 1
27832: PUSH
27833: LD_INT 2
27835: ARRAY
27836: PPUSH
27837: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27841: LD_VAR 0 1
27845: PUSH
27846: LD_INT 1
27848: ARRAY
27849: PPUSH
27850: LD_VAR 0 1
27854: PUSH
27855: LD_INT 2
27857: ARRAY
27858: PPUSH
27859: CALL_OW 429
// end ; end ;
27863: LD_VAR 0 1
27867: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27868: LD_EXP 55
27872: PUSH
27873: LD_EXP 77
27877: AND
27878: IFFALSE 27890
27880: GO 27882
27882: DISABLE
// YouLost (  ) ;
27883: LD_STRING 
27885: PPUSH
27886: CALL_OW 104
27890: END
// every 0 0$1 trigger StreamModeActive and sFog do
27891: LD_EXP 55
27895: PUSH
27896: LD_EXP 76
27900: AND
27901: IFFALSE 27915
27903: GO 27905
27905: DISABLE
// FogOff ( your_side ) ;
27906: LD_OWVAR 2
27910: PPUSH
27911: CALL_OW 344
27915: END
// every 0 0$1 trigger StreamModeActive and sSun do
27916: LD_EXP 55
27920: PUSH
27921: LD_EXP 78
27925: AND
27926: IFFALSE 27954
27928: GO 27930
27930: DISABLE
// begin solar_recharge_percent := 0 ;
27931: LD_ADDR_OWVAR 79
27935: PUSH
27936: LD_INT 0
27938: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27939: LD_INT 10500
27941: PPUSH
27942: CALL_OW 67
// solar_recharge_percent := 100 ;
27946: LD_ADDR_OWVAR 79
27950: PUSH
27951: LD_INT 100
27953: ST_TO_ADDR
// end ;
27954: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27955: LD_EXP 55
27959: PUSH
27960: LD_EXP 79
27964: AND
27965: IFFALSE 28204
27967: GO 27969
27969: DISABLE
27970: LD_INT 0
27972: PPUSH
27973: PPUSH
27974: PPUSH
// begin tmp := [ ] ;
27975: LD_ADDR_VAR 0 3
27979: PUSH
27980: EMPTY
27981: ST_TO_ADDR
// for i := 1 to 6 do
27982: LD_ADDR_VAR 0 1
27986: PUSH
27987: DOUBLE
27988: LD_INT 1
27990: DEC
27991: ST_TO_ADDR
27992: LD_INT 6
27994: PUSH
27995: FOR_TO
27996: IFFALSE 28101
// begin uc_nation := nation_nature ;
27998: LD_ADDR_OWVAR 21
28002: PUSH
28003: LD_INT 0
28005: ST_TO_ADDR
// uc_side := 0 ;
28006: LD_ADDR_OWVAR 20
28010: PUSH
28011: LD_INT 0
28013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28014: LD_ADDR_OWVAR 29
28018: PUSH
28019: LD_INT 12
28021: PUSH
28022: LD_INT 12
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// hc_agressivity := 20 ;
28029: LD_ADDR_OWVAR 35
28033: PUSH
28034: LD_INT 20
28036: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28037: LD_ADDR_OWVAR 28
28041: PUSH
28042: LD_INT 17
28044: ST_TO_ADDR
// hc_gallery :=  ;
28045: LD_ADDR_OWVAR 33
28049: PUSH
28050: LD_STRING 
28052: ST_TO_ADDR
// hc_name :=  ;
28053: LD_ADDR_OWVAR 26
28057: PUSH
28058: LD_STRING 
28060: ST_TO_ADDR
// un := CreateHuman ;
28061: LD_ADDR_VAR 0 2
28065: PUSH
28066: CALL_OW 44
28070: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28071: LD_VAR 0 2
28075: PPUSH
28076: LD_INT 1
28078: PPUSH
28079: CALL_OW 51
// tmp := tmp ^ un ;
28083: LD_ADDR_VAR 0 3
28087: PUSH
28088: LD_VAR 0 3
28092: PUSH
28093: LD_VAR 0 2
28097: ADD
28098: ST_TO_ADDR
// end ;
28099: GO 27995
28101: POP
28102: POP
// repeat wait ( 0 0$1 ) ;
28103: LD_INT 35
28105: PPUSH
28106: CALL_OW 67
// for un in tmp do
28110: LD_ADDR_VAR 0 2
28114: PUSH
28115: LD_VAR 0 3
28119: PUSH
28120: FOR_IN
28121: IFFALSE 28195
// begin if IsDead ( un ) then
28123: LD_VAR 0 2
28127: PPUSH
28128: CALL_OW 301
28132: IFFALSE 28152
// begin tmp := tmp diff un ;
28134: LD_ADDR_VAR 0 3
28138: PUSH
28139: LD_VAR 0 3
28143: PUSH
28144: LD_VAR 0 2
28148: DIFF
28149: ST_TO_ADDR
// continue ;
28150: GO 28120
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_INT 3
28159: PUSH
28160: LD_INT 22
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PPUSH
28174: CALL_OW 69
28178: PPUSH
28179: LD_VAR 0 2
28183: PPUSH
28184: CALL_OW 74
28188: PPUSH
28189: CALL_OW 115
// end ;
28193: GO 28120
28195: POP
28196: POP
// until not tmp ;
28197: LD_VAR 0 3
28201: NOT
28202: IFFALSE 28103
// end ;
28204: PPOPN 3
28206: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28207: LD_EXP 55
28211: PUSH
28212: LD_EXP 80
28216: AND
28217: IFFALSE 28271
28219: GO 28221
28221: DISABLE
// begin ToLua ( displayTroll(); ) ;
28222: LD_STRING displayTroll();
28224: PPUSH
28225: CALL_OW 559
// wait ( 3 3$00 ) ;
28229: LD_INT 6300
28231: PPUSH
28232: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28236: LD_STRING hideTroll();
28238: PPUSH
28239: CALL_OW 559
// wait ( 1 1$00 ) ;
28243: LD_INT 2100
28245: PPUSH
28246: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28250: LD_STRING displayTroll();
28252: PPUSH
28253: CALL_OW 559
// wait ( 1 1$00 ) ;
28257: LD_INT 2100
28259: PPUSH
28260: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28264: LD_STRING hideTroll();
28266: PPUSH
28267: CALL_OW 559
// end ;
28271: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28272: LD_EXP 55
28276: PUSH
28277: LD_EXP 81
28281: AND
28282: IFFALSE 28345
28284: GO 28286
28286: DISABLE
28287: LD_INT 0
28289: PPUSH
// begin p := 0 ;
28290: LD_ADDR_VAR 0 1
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
// repeat game_speed := 1 ;
28298: LD_ADDR_OWVAR 65
28302: PUSH
28303: LD_INT 1
28305: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28306: LD_INT 35
28308: PPUSH
28309: CALL_OW 67
// p := p + 1 ;
28313: LD_ADDR_VAR 0 1
28317: PUSH
28318: LD_VAR 0 1
28322: PUSH
28323: LD_INT 1
28325: PLUS
28326: ST_TO_ADDR
// until p >= 60 ;
28327: LD_VAR 0 1
28331: PUSH
28332: LD_INT 60
28334: GREATEREQUAL
28335: IFFALSE 28298
// game_speed := 4 ;
28337: LD_ADDR_OWVAR 65
28341: PUSH
28342: LD_INT 4
28344: ST_TO_ADDR
// end ;
28345: PPOPN 1
28347: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28348: LD_EXP 55
28352: PUSH
28353: LD_EXP 82
28357: AND
28358: IFFALSE 28504
28360: GO 28362
28362: DISABLE
28363: LD_INT 0
28365: PPUSH
28366: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28367: LD_ADDR_VAR 0 1
28371: PUSH
28372: LD_INT 22
28374: PUSH
28375: LD_OWVAR 2
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: LD_INT 30
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 30
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PPUSH
28416: CALL_OW 69
28420: ST_TO_ADDR
// if not depot then
28421: LD_VAR 0 1
28425: NOT
28426: IFFALSE 28430
// exit ;
28428: GO 28504
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28430: LD_ADDR_VAR 0 2
28434: PUSH
28435: LD_VAR 0 1
28439: PUSH
28440: LD_INT 1
28442: PPUSH
28443: LD_VAR 0 1
28447: PPUSH
28448: CALL_OW 12
28452: ARRAY
28453: PPUSH
28454: CALL_OW 274
28458: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28459: LD_VAR 0 2
28463: PPUSH
28464: LD_INT 1
28466: PPUSH
28467: LD_INT 0
28469: PPUSH
28470: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28474: LD_VAR 0 2
28478: PPUSH
28479: LD_INT 2
28481: PPUSH
28482: LD_INT 0
28484: PPUSH
28485: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 3
28496: PPUSH
28497: LD_INT 0
28499: PPUSH
28500: CALL_OW 277
// end ;
28504: PPOPN 2
28506: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28507: LD_EXP 55
28511: PUSH
28512: LD_EXP 83
28516: AND
28517: IFFALSE 28614
28519: GO 28521
28521: DISABLE
28522: LD_INT 0
28524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28525: LD_ADDR_VAR 0 1
28529: PUSH
28530: LD_INT 22
28532: PUSH
28533: LD_OWVAR 2
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 21
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 3
28554: PUSH
28555: LD_INT 23
28557: PUSH
28558: LD_INT 0
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 69
28578: ST_TO_ADDR
// if not tmp then
28579: LD_VAR 0 1
28583: NOT
28584: IFFALSE 28588
// exit ;
28586: GO 28614
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28588: LD_VAR 0 1
28592: PUSH
28593: LD_INT 1
28595: PPUSH
28596: LD_VAR 0 1
28600: PPUSH
28601: CALL_OW 12
28605: ARRAY
28606: PPUSH
28607: LD_INT 200
28609: PPUSH
28610: CALL_OW 234
// end ;
28614: PPOPN 1
28616: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28617: LD_EXP 55
28621: PUSH
28622: LD_EXP 84
28626: AND
28627: IFFALSE 28706
28629: GO 28631
28631: DISABLE
28632: LD_INT 0
28634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28635: LD_ADDR_VAR 0 1
28639: PUSH
28640: LD_INT 22
28642: PUSH
28643: LD_OWVAR 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 21
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PPUSH
28666: CALL_OW 69
28670: ST_TO_ADDR
// if not tmp then
28671: LD_VAR 0 1
28675: NOT
28676: IFFALSE 28680
// exit ;
28678: GO 28706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28680: LD_VAR 0 1
28684: PUSH
28685: LD_INT 1
28687: PPUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 12
28697: ARRAY
28698: PPUSH
28699: LD_INT 60
28701: PPUSH
28702: CALL_OW 234
// end ;
28706: PPOPN 1
28708: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28709: LD_EXP 55
28713: PUSH
28714: LD_EXP 85
28718: AND
28719: IFFALSE 28818
28721: GO 28723
28723: DISABLE
28724: LD_INT 0
28726: PPUSH
28727: PPUSH
// begin enable ;
28728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28729: LD_ADDR_VAR 0 1
28733: PUSH
28734: LD_INT 22
28736: PUSH
28737: LD_OWVAR 2
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 61
28748: PUSH
28749: EMPTY
28750: LIST
28751: PUSH
28752: LD_INT 33
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: PPUSH
28767: CALL_OW 69
28771: ST_TO_ADDR
// if not tmp then
28772: LD_VAR 0 1
28776: NOT
28777: IFFALSE 28781
// exit ;
28779: GO 28818
// for i in tmp do
28781: LD_ADDR_VAR 0 2
28785: PUSH
28786: LD_VAR 0 1
28790: PUSH
28791: FOR_IN
28792: IFFALSE 28816
// if IsControledBy ( i ) then
28794: LD_VAR 0 2
28798: PPUSH
28799: CALL_OW 312
28803: IFFALSE 28814
// ComUnlink ( i ) ;
28805: LD_VAR 0 2
28809: PPUSH
28810: CALL_OW 136
28814: GO 28791
28816: POP
28817: POP
// end ;
28818: PPOPN 2
28820: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28821: LD_EXP 55
28825: PUSH
28826: LD_EXP 86
28830: AND
28831: IFFALSE 28971
28833: GO 28835
28835: DISABLE
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
// begin ToLua ( displayPowell(); ) ;
28840: LD_STRING displayPowell();
28842: PPUSH
28843: CALL_OW 559
// uc_side := 0 ;
28847: LD_ADDR_OWVAR 20
28851: PUSH
28852: LD_INT 0
28854: ST_TO_ADDR
// uc_nation := 2 ;
28855: LD_ADDR_OWVAR 21
28859: PUSH
28860: LD_INT 2
28862: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28863: LD_ADDR_OWVAR 37
28867: PUSH
28868: LD_INT 14
28870: ST_TO_ADDR
// vc_engine := engine_siberite ;
28871: LD_ADDR_OWVAR 39
28875: PUSH
28876: LD_INT 3
28878: ST_TO_ADDR
// vc_control := control_apeman ;
28879: LD_ADDR_OWVAR 38
28883: PUSH
28884: LD_INT 5
28886: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28887: LD_ADDR_OWVAR 40
28891: PUSH
28892: LD_INT 29
28894: ST_TO_ADDR
// un := CreateVehicle ;
28895: LD_ADDR_VAR 0 2
28899: PUSH
28900: CALL_OW 45
28904: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28905: LD_VAR 0 2
28909: PPUSH
28910: LD_INT 1
28912: PPUSH
28913: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28917: LD_INT 35
28919: PPUSH
28920: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28924: LD_VAR 0 2
28928: PPUSH
28929: LD_INT 22
28931: PUSH
28932: LD_OWVAR 2
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PPUSH
28941: CALL_OW 69
28945: PPUSH
28946: LD_VAR 0 2
28950: PPUSH
28951: CALL_OW 74
28955: PPUSH
28956: CALL_OW 115
// until IsDead ( un ) ;
28960: LD_VAR 0 2
28964: PPUSH
28965: CALL_OW 301
28969: IFFALSE 28917
// end ;
28971: PPOPN 2
28973: END
// every 0 0$1 trigger StreamModeActive and sStu do
28974: LD_EXP 55
28978: PUSH
28979: LD_EXP 94
28983: AND
28984: IFFALSE 29000
28986: GO 28988
28988: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28989: LD_STRING displayStucuk();
28991: PPUSH
28992: CALL_OW 559
// ResetFog ;
28996: CALL_OW 335
// end ;
29000: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29001: LD_EXP 55
29005: PUSH
29006: LD_EXP 87
29010: AND
29011: IFFALSE 29152
29013: GO 29015
29015: DISABLE
29016: LD_INT 0
29018: PPUSH
29019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_INT 22
29027: PUSH
29028: LD_OWVAR 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 21
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PPUSH
29051: CALL_OW 69
29055: ST_TO_ADDR
// if not tmp then
29056: LD_VAR 0 2
29060: NOT
29061: IFFALSE 29065
// exit ;
29063: GO 29152
// un := tmp [ rand ( 1 , tmp ) ] ;
29065: LD_ADDR_VAR 0 1
29069: PUSH
29070: LD_VAR 0 2
29074: PUSH
29075: LD_INT 1
29077: PPUSH
29078: LD_VAR 0 2
29082: PPUSH
29083: CALL_OW 12
29087: ARRAY
29088: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29089: LD_VAR 0 1
29093: PPUSH
29094: LD_INT 0
29096: PPUSH
29097: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29101: LD_VAR 0 1
29105: PPUSH
29106: LD_OWVAR 3
29110: PUSH
29111: LD_VAR 0 1
29115: DIFF
29116: PPUSH
29117: LD_VAR 0 1
29121: PPUSH
29122: CALL_OW 74
29126: PPUSH
29127: CALL_OW 115
// wait ( 0 0$20 ) ;
29131: LD_INT 700
29133: PPUSH
29134: CALL_OW 67
// SetSide ( un , your_side ) ;
29138: LD_VAR 0 1
29142: PPUSH
29143: LD_OWVAR 2
29147: PPUSH
29148: CALL_OW 235
// end ;
29152: PPOPN 2
29154: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29155: LD_EXP 55
29159: PUSH
29160: LD_EXP 88
29164: AND
29165: IFFALSE 29271
29167: GO 29169
29169: DISABLE
29170: LD_INT 0
29172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29173: LD_ADDR_VAR 0 1
29177: PUSH
29178: LD_INT 22
29180: PUSH
29181: LD_OWVAR 2
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: LD_INT 30
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 30
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: CALL_OW 69
29226: ST_TO_ADDR
// if not depot then
29227: LD_VAR 0 1
29231: NOT
29232: IFFALSE 29236
// exit ;
29234: GO 29271
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29236: LD_VAR 0 1
29240: PUSH
29241: LD_INT 1
29243: ARRAY
29244: PPUSH
29245: CALL_OW 250
29249: PPUSH
29250: LD_VAR 0 1
29254: PUSH
29255: LD_INT 1
29257: ARRAY
29258: PPUSH
29259: CALL_OW 251
29263: PPUSH
29264: LD_INT 70
29266: PPUSH
29267: CALL_OW 495
// end ;
29271: PPOPN 1
29273: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29274: LD_EXP 55
29278: PUSH
29279: LD_EXP 89
29283: AND
29284: IFFALSE 29495
29286: GO 29288
29288: DISABLE
29289: LD_INT 0
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29296: LD_ADDR_VAR 0 5
29300: PUSH
29301: LD_INT 22
29303: PUSH
29304: LD_OWVAR 2
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 21
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PPUSH
29327: CALL_OW 69
29331: ST_TO_ADDR
// if not tmp then
29332: LD_VAR 0 5
29336: NOT
29337: IFFALSE 29341
// exit ;
29339: GO 29495
// for i in tmp do
29341: LD_ADDR_VAR 0 1
29345: PUSH
29346: LD_VAR 0 5
29350: PUSH
29351: FOR_IN
29352: IFFALSE 29493
// begin d := rand ( 0 , 5 ) ;
29354: LD_ADDR_VAR 0 4
29358: PUSH
29359: LD_INT 0
29361: PPUSH
29362: LD_INT 5
29364: PPUSH
29365: CALL_OW 12
29369: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29370: LD_ADDR_VAR 0 2
29374: PUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 250
29384: PPUSH
29385: LD_VAR 0 4
29389: PPUSH
29390: LD_INT 3
29392: PPUSH
29393: LD_INT 12
29395: PPUSH
29396: CALL_OW 12
29400: PPUSH
29401: CALL_OW 272
29405: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 251
29420: PPUSH
29421: LD_VAR 0 4
29425: PPUSH
29426: LD_INT 3
29428: PPUSH
29429: LD_INT 12
29431: PPUSH
29432: CALL_OW 12
29436: PPUSH
29437: CALL_OW 273
29441: ST_TO_ADDR
// if ValidHex ( x , y ) then
29442: LD_VAR 0 2
29446: PPUSH
29447: LD_VAR 0 3
29451: PPUSH
29452: CALL_OW 488
29456: IFFALSE 29491
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29458: LD_VAR 0 1
29462: PPUSH
29463: LD_VAR 0 2
29467: PPUSH
29468: LD_VAR 0 3
29472: PPUSH
29473: LD_INT 3
29475: PPUSH
29476: LD_INT 6
29478: PPUSH
29479: CALL_OW 12
29483: PPUSH
29484: LD_INT 1
29486: PPUSH
29487: CALL_OW 483
// end ;
29491: GO 29351
29493: POP
29494: POP
// end ;
29495: PPOPN 5
29497: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29498: LD_EXP 55
29502: PUSH
29503: LD_EXP 90
29507: AND
29508: IFFALSE 29602
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
29516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29517: LD_ADDR_VAR 0 2
29521: PUSH
29522: LD_INT 22
29524: PUSH
29525: LD_OWVAR 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 32
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 21
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: PPUSH
29559: CALL_OW 69
29563: ST_TO_ADDR
// if not tmp then
29564: LD_VAR 0 2
29568: NOT
29569: IFFALSE 29573
// exit ;
29571: GO 29602
// for i in tmp do
29573: LD_ADDR_VAR 0 1
29577: PUSH
29578: LD_VAR 0 2
29582: PUSH
29583: FOR_IN
29584: IFFALSE 29600
// SetFuel ( i , 0 ) ;
29586: LD_VAR 0 1
29590: PPUSH
29591: LD_INT 0
29593: PPUSH
29594: CALL_OW 240
29598: GO 29583
29600: POP
29601: POP
// end ;
29602: PPOPN 2
29604: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29605: LD_EXP 55
29609: PUSH
29610: LD_EXP 91
29614: AND
29615: IFFALSE 29681
29617: GO 29619
29619: DISABLE
29620: LD_INT 0
29622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29623: LD_ADDR_VAR 0 1
29627: PUSH
29628: LD_INT 22
29630: PUSH
29631: LD_OWVAR 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 30
29642: PUSH
29643: LD_INT 29
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PPUSH
29654: CALL_OW 69
29658: ST_TO_ADDR
// if not tmp then
29659: LD_VAR 0 1
29663: NOT
29664: IFFALSE 29668
// exit ;
29666: GO 29681
// DestroyUnit ( tmp [ 1 ] ) ;
29668: LD_VAR 0 1
29672: PUSH
29673: LD_INT 1
29675: ARRAY
29676: PPUSH
29677: CALL_OW 65
// end ;
29681: PPOPN 1
29683: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29684: LD_EXP 55
29688: PUSH
29689: LD_EXP 93
29693: AND
29694: IFFALSE 29823
29696: GO 29698
29698: DISABLE
29699: LD_INT 0
29701: PPUSH
// begin uc_side := 0 ;
29702: LD_ADDR_OWVAR 20
29706: PUSH
29707: LD_INT 0
29709: ST_TO_ADDR
// uc_nation := nation_arabian ;
29710: LD_ADDR_OWVAR 21
29714: PUSH
29715: LD_INT 2
29717: ST_TO_ADDR
// hc_gallery :=  ;
29718: LD_ADDR_OWVAR 33
29722: PUSH
29723: LD_STRING 
29725: ST_TO_ADDR
// hc_name :=  ;
29726: LD_ADDR_OWVAR 26
29730: PUSH
29731: LD_STRING 
29733: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29734: LD_INT 1
29736: PPUSH
29737: LD_INT 11
29739: PPUSH
29740: LD_INT 10
29742: PPUSH
29743: CALL_OW 380
// un := CreateHuman ;
29747: LD_ADDR_VAR 0 1
29751: PUSH
29752: CALL_OW 44
29756: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29757: LD_VAR 0 1
29761: PPUSH
29762: LD_INT 1
29764: PPUSH
29765: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29769: LD_INT 35
29771: PPUSH
29772: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29776: LD_VAR 0 1
29780: PPUSH
29781: LD_INT 22
29783: PUSH
29784: LD_OWVAR 2
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PPUSH
29793: CALL_OW 69
29797: PPUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 74
29807: PPUSH
29808: CALL_OW 115
// until IsDead ( un ) ;
29812: LD_VAR 0 1
29816: PPUSH
29817: CALL_OW 301
29821: IFFALSE 29769
// end ;
29823: PPOPN 1
29825: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29826: LD_EXP 55
29830: PUSH
29831: LD_EXP 95
29835: AND
29836: IFFALSE 29848
29838: GO 29840
29840: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29841: LD_STRING earthquake(getX(game), 0, 32)
29843: PPUSH
29844: CALL_OW 559
29848: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29849: LD_EXP 55
29853: PUSH
29854: LD_EXP 96
29858: AND
29859: IFFALSE 29950
29861: GO 29863
29863: DISABLE
29864: LD_INT 0
29866: PPUSH
// begin enable ;
29867: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29868: LD_ADDR_VAR 0 1
29872: PUSH
29873: LD_INT 22
29875: PUSH
29876: LD_OWVAR 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 21
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 33
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: PPUSH
29910: CALL_OW 69
29914: ST_TO_ADDR
// if not tmp then
29915: LD_VAR 0 1
29919: NOT
29920: IFFALSE 29924
// exit ;
29922: GO 29950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29924: LD_VAR 0 1
29928: PUSH
29929: LD_INT 1
29931: PPUSH
29932: LD_VAR 0 1
29936: PPUSH
29937: CALL_OW 12
29941: ARRAY
29942: PPUSH
29943: LD_INT 1
29945: PPUSH
29946: CALL_OW 234
// end ;
29950: PPOPN 1
29952: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29953: LD_EXP 55
29957: PUSH
29958: LD_EXP 97
29962: AND
29963: IFFALSE 30104
29965: GO 29967
29967: DISABLE
29968: LD_INT 0
29970: PPUSH
29971: PPUSH
29972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29973: LD_ADDR_VAR 0 3
29977: PUSH
29978: LD_INT 22
29980: PUSH
29981: LD_OWVAR 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 25
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PPUSH
30004: CALL_OW 69
30008: ST_TO_ADDR
// if not tmp then
30009: LD_VAR 0 3
30013: NOT
30014: IFFALSE 30018
// exit ;
30016: GO 30104
// un := tmp [ rand ( 1 , tmp ) ] ;
30018: LD_ADDR_VAR 0 2
30022: PUSH
30023: LD_VAR 0 3
30027: PUSH
30028: LD_INT 1
30030: PPUSH
30031: LD_VAR 0 3
30035: PPUSH
30036: CALL_OW 12
30040: ARRAY
30041: ST_TO_ADDR
// if Crawls ( un ) then
30042: LD_VAR 0 2
30046: PPUSH
30047: CALL_OW 318
30051: IFFALSE 30062
// ComWalk ( un ) ;
30053: LD_VAR 0 2
30057: PPUSH
30058: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30062: LD_VAR 0 2
30066: PPUSH
30067: LD_INT 9
30069: PPUSH
30070: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30074: LD_INT 28
30076: PPUSH
30077: LD_OWVAR 2
30081: PPUSH
30082: LD_INT 2
30084: PPUSH
30085: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30089: LD_INT 29
30091: PPUSH
30092: LD_OWVAR 2
30096: PPUSH
30097: LD_INT 2
30099: PPUSH
30100: CALL_OW 322
// end ;
30104: PPOPN 3
30106: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30107: LD_EXP 55
30111: PUSH
30112: LD_EXP 98
30116: AND
30117: IFFALSE 30228
30119: GO 30121
30121: DISABLE
30122: LD_INT 0
30124: PPUSH
30125: PPUSH
30126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30127: LD_ADDR_VAR 0 3
30131: PUSH
30132: LD_INT 22
30134: PUSH
30135: LD_OWVAR 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 25
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PPUSH
30158: CALL_OW 69
30162: ST_TO_ADDR
// if not tmp then
30163: LD_VAR 0 3
30167: NOT
30168: IFFALSE 30172
// exit ;
30170: GO 30228
// un := tmp [ rand ( 1 , tmp ) ] ;
30172: LD_ADDR_VAR 0 2
30176: PUSH
30177: LD_VAR 0 3
30181: PUSH
30182: LD_INT 1
30184: PPUSH
30185: LD_VAR 0 3
30189: PPUSH
30190: CALL_OW 12
30194: ARRAY
30195: ST_TO_ADDR
// if Crawls ( un ) then
30196: LD_VAR 0 2
30200: PPUSH
30201: CALL_OW 318
30205: IFFALSE 30216
// ComWalk ( un ) ;
30207: LD_VAR 0 2
30211: PPUSH
30212: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30216: LD_VAR 0 2
30220: PPUSH
30221: LD_INT 8
30223: PPUSH
30224: CALL_OW 336
// end ;
30228: PPOPN 3
30230: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30231: LD_EXP 55
30235: PUSH
30236: LD_EXP 99
30240: AND
30241: IFFALSE 30385
30243: GO 30245
30245: DISABLE
30246: LD_INT 0
30248: PPUSH
30249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30250: LD_ADDR_VAR 0 2
30254: PUSH
30255: LD_INT 22
30257: PUSH
30258: LD_OWVAR 2
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 21
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: LD_INT 34
30282: PUSH
30283: LD_INT 12
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 34
30292: PUSH
30293: LD_INT 51
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 34
30302: PUSH
30303: LD_INT 32
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: PPUSH
30321: CALL_OW 69
30325: ST_TO_ADDR
// if not tmp then
30326: LD_VAR 0 2
30330: NOT
30331: IFFALSE 30335
// exit ;
30333: GO 30385
// for i in tmp do
30335: LD_ADDR_VAR 0 1
30339: PUSH
30340: LD_VAR 0 2
30344: PUSH
30345: FOR_IN
30346: IFFALSE 30383
// if GetCargo ( i , mat_artifact ) = 0 then
30348: LD_VAR 0 1
30352: PPUSH
30353: LD_INT 4
30355: PPUSH
30356: CALL_OW 289
30360: PUSH
30361: LD_INT 0
30363: EQUAL
30364: IFFALSE 30381
// SetCargo ( i , mat_siberit , 100 ) ;
30366: LD_VAR 0 1
30370: PPUSH
30371: LD_INT 3
30373: PPUSH
30374: LD_INT 100
30376: PPUSH
30377: CALL_OW 290
30381: GO 30345
30383: POP
30384: POP
// end ;
30385: PPOPN 2
30387: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30388: LD_EXP 55
30392: PUSH
30393: LD_EXP 100
30397: AND
30398: IFFALSE 30581
30400: GO 30402
30402: DISABLE
30403: LD_INT 0
30405: PPUSH
30406: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30407: LD_ADDR_VAR 0 2
30411: PUSH
30412: LD_INT 22
30414: PUSH
30415: LD_OWVAR 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PPUSH
30424: CALL_OW 69
30428: ST_TO_ADDR
// if not tmp then
30429: LD_VAR 0 2
30433: NOT
30434: IFFALSE 30438
// exit ;
30436: GO 30581
// for i := 1 to 2 do
30438: LD_ADDR_VAR 0 1
30442: PUSH
30443: DOUBLE
30444: LD_INT 1
30446: DEC
30447: ST_TO_ADDR
30448: LD_INT 2
30450: PUSH
30451: FOR_TO
30452: IFFALSE 30579
// begin uc_side := your_side ;
30454: LD_ADDR_OWVAR 20
30458: PUSH
30459: LD_OWVAR 2
30463: ST_TO_ADDR
// uc_nation := nation_american ;
30464: LD_ADDR_OWVAR 21
30468: PUSH
30469: LD_INT 1
30471: ST_TO_ADDR
// vc_chassis := us_morphling ;
30472: LD_ADDR_OWVAR 37
30476: PUSH
30477: LD_INT 5
30479: ST_TO_ADDR
// vc_engine := engine_siberite ;
30480: LD_ADDR_OWVAR 39
30484: PUSH
30485: LD_INT 3
30487: ST_TO_ADDR
// vc_control := control_computer ;
30488: LD_ADDR_OWVAR 38
30492: PUSH
30493: LD_INT 3
30495: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30496: LD_ADDR_OWVAR 40
30500: PUSH
30501: LD_INT 10
30503: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30504: LD_VAR 0 2
30508: PUSH
30509: LD_INT 1
30511: ARRAY
30512: PPUSH
30513: CALL_OW 310
30517: NOT
30518: IFFALSE 30565
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30520: CALL_OW 45
30524: PPUSH
30525: LD_VAR 0 2
30529: PUSH
30530: LD_INT 1
30532: ARRAY
30533: PPUSH
30534: CALL_OW 250
30538: PPUSH
30539: LD_VAR 0 2
30543: PUSH
30544: LD_INT 1
30546: ARRAY
30547: PPUSH
30548: CALL_OW 251
30552: PPUSH
30553: LD_INT 12
30555: PPUSH
30556: LD_INT 1
30558: PPUSH
30559: CALL_OW 50
30563: GO 30577
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30565: CALL_OW 45
30569: PPUSH
30570: LD_INT 1
30572: PPUSH
30573: CALL_OW 51
// end ;
30577: GO 30451
30579: POP
30580: POP
// end ;
30581: PPOPN 2
30583: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30584: LD_EXP 55
30588: PUSH
30589: LD_EXP 101
30593: AND
30594: IFFALSE 30816
30596: GO 30598
30598: DISABLE
30599: LD_INT 0
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30607: LD_ADDR_VAR 0 6
30611: PUSH
30612: LD_INT 22
30614: PUSH
30615: LD_OWVAR 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 21
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: LD_INT 23
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: PPUSH
30656: CALL_OW 69
30660: ST_TO_ADDR
// if not tmp then
30661: LD_VAR 0 6
30665: NOT
30666: IFFALSE 30670
// exit ;
30668: GO 30816
// s1 := rand ( 1 , 4 ) ;
30670: LD_ADDR_VAR 0 2
30674: PUSH
30675: LD_INT 1
30677: PPUSH
30678: LD_INT 4
30680: PPUSH
30681: CALL_OW 12
30685: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30686: LD_ADDR_VAR 0 4
30690: PUSH
30691: LD_VAR 0 6
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: LD_VAR 0 2
30704: PPUSH
30705: CALL_OW 259
30709: ST_TO_ADDR
// if s1 = 1 then
30710: LD_VAR 0 2
30714: PUSH
30715: LD_INT 1
30717: EQUAL
30718: IFFALSE 30738
// s2 := rand ( 2 , 4 ) else
30720: LD_ADDR_VAR 0 3
30724: PUSH
30725: LD_INT 2
30727: PPUSH
30728: LD_INT 4
30730: PPUSH
30731: CALL_OW 12
30735: ST_TO_ADDR
30736: GO 30746
// s2 := 1 ;
30738: LD_ADDR_VAR 0 3
30742: PUSH
30743: LD_INT 1
30745: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30746: LD_ADDR_VAR 0 5
30750: PUSH
30751: LD_VAR 0 6
30755: PUSH
30756: LD_INT 1
30758: ARRAY
30759: PPUSH
30760: LD_VAR 0 3
30764: PPUSH
30765: CALL_OW 259
30769: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30770: LD_VAR 0 6
30774: PUSH
30775: LD_INT 1
30777: ARRAY
30778: PPUSH
30779: LD_VAR 0 2
30783: PPUSH
30784: LD_VAR 0 5
30788: PPUSH
30789: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30793: LD_VAR 0 6
30797: PUSH
30798: LD_INT 1
30800: ARRAY
30801: PPUSH
30802: LD_VAR 0 3
30806: PPUSH
30807: LD_VAR 0 4
30811: PPUSH
30812: CALL_OW 237
// end ;
30816: PPOPN 6
30818: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30819: LD_EXP 55
30823: PUSH
30824: LD_EXP 102
30828: AND
30829: IFFALSE 30908
30831: GO 30833
30833: DISABLE
30834: LD_INT 0
30836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30837: LD_ADDR_VAR 0 1
30841: PUSH
30842: LD_INT 22
30844: PUSH
30845: LD_OWVAR 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 3
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PPUSH
30868: CALL_OW 69
30872: ST_TO_ADDR
// if not tmp then
30873: LD_VAR 0 1
30877: NOT
30878: IFFALSE 30882
// exit ;
30880: GO 30908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30882: LD_VAR 0 1
30886: PUSH
30887: LD_INT 1
30889: PPUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 12
30899: ARRAY
30900: PPUSH
30901: LD_INT 1
30903: PPUSH
30904: CALL_OW 234
// end ;
30908: PPOPN 1
30910: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30911: LD_EXP 55
30915: PUSH
30916: LD_EXP 103
30920: AND
30921: IFFALSE 31033
30923: GO 30925
30925: DISABLE
30926: LD_INT 0
30928: PPUSH
30929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30930: LD_ADDR_VAR 0 2
30934: PUSH
30935: LD_INT 22
30937: PUSH
30938: LD_OWVAR 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: LD_INT 30
30952: PUSH
30953: LD_INT 27
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: LD_INT 26
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 30
30972: PUSH
30973: LD_INT 28
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PPUSH
30990: CALL_OW 69
30994: ST_TO_ADDR
// if not tmp then
30995: LD_VAR 0 2
30999: NOT
31000: IFFALSE 31004
// exit ;
31002: GO 31033
// for i in tmp do
31004: LD_ADDR_VAR 0 1
31008: PUSH
31009: LD_VAR 0 2
31013: PUSH
31014: FOR_IN
31015: IFFALSE 31031
// SetLives ( i , 1 ) ;
31017: LD_VAR 0 1
31021: PPUSH
31022: LD_INT 1
31024: PPUSH
31025: CALL_OW 234
31029: GO 31014
31031: POP
31032: POP
// end ;
31033: PPOPN 2
31035: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31036: LD_EXP 55
31040: PUSH
31041: LD_EXP 104
31045: AND
31046: IFFALSE 31333
31048: GO 31050
31050: DISABLE
31051: LD_INT 0
31053: PPUSH
31054: PPUSH
31055: PPUSH
// begin i := rand ( 1 , 7 ) ;
31056: LD_ADDR_VAR 0 1
31060: PUSH
31061: LD_INT 1
31063: PPUSH
31064: LD_INT 7
31066: PPUSH
31067: CALL_OW 12
31071: ST_TO_ADDR
// case i of 1 :
31072: LD_VAR 0 1
31076: PUSH
31077: LD_INT 1
31079: DOUBLE
31080: EQUAL
31081: IFTRUE 31085
31083: GO 31095
31085: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31086: LD_STRING earthquake(getX(game), 0, 32)
31088: PPUSH
31089: CALL_OW 559
31093: GO 31333
31095: LD_INT 2
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31117
31103: POP
// begin ToLua ( displayStucuk(); ) ;
31104: LD_STRING displayStucuk();
31106: PPUSH
31107: CALL_OW 559
// ResetFog ;
31111: CALL_OW 335
// end ; 3 :
31115: GO 31333
31117: LD_INT 3
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31229
31125: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31126: LD_ADDR_VAR 0 2
31130: PUSH
31131: LD_INT 22
31133: PUSH
31134: LD_OWVAR 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 25
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PPUSH
31157: CALL_OW 69
31161: ST_TO_ADDR
// if not tmp then
31162: LD_VAR 0 2
31166: NOT
31167: IFFALSE 31171
// exit ;
31169: GO 31333
// un := tmp [ rand ( 1 , tmp ) ] ;
31171: LD_ADDR_VAR 0 3
31175: PUSH
31176: LD_VAR 0 2
31180: PUSH
31181: LD_INT 1
31183: PPUSH
31184: LD_VAR 0 2
31188: PPUSH
31189: CALL_OW 12
31193: ARRAY
31194: ST_TO_ADDR
// if Crawls ( un ) then
31195: LD_VAR 0 3
31199: PPUSH
31200: CALL_OW 318
31204: IFFALSE 31215
// ComWalk ( un ) ;
31206: LD_VAR 0 3
31210: PPUSH
31211: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31215: LD_VAR 0 3
31219: PPUSH
31220: LD_INT 8
31222: PPUSH
31223: CALL_OW 336
// end ; 4 :
31227: GO 31333
31229: LD_INT 4
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31311
31237: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31238: LD_ADDR_VAR 0 2
31242: PUSH
31243: LD_INT 22
31245: PUSH
31246: LD_OWVAR 2
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 30
31257: PUSH
31258: LD_INT 29
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PPUSH
31269: CALL_OW 69
31273: ST_TO_ADDR
// if not tmp then
31274: LD_VAR 0 2
31278: NOT
31279: IFFALSE 31283
// exit ;
31281: GO 31333
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31283: LD_VAR 0 2
31287: PUSH
31288: LD_INT 1
31290: ARRAY
31291: PPUSH
31292: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31296: LD_VAR 0 2
31300: PUSH
31301: LD_INT 1
31303: ARRAY
31304: PPUSH
31305: CALL_OW 65
// end ; 5 .. 7 :
31309: GO 31333
31311: LD_INT 5
31313: DOUBLE
31314: GREATEREQUAL
31315: IFFALSE 31323
31317: LD_INT 7
31319: DOUBLE
31320: LESSEQUAL
31321: IFTRUE 31325
31323: GO 31332
31325: POP
// StreamSibBomb ; end ;
31326: CALL 27570 0 0
31330: GO 31333
31332: POP
// end ;
31333: PPOPN 3
31335: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31336: LD_EXP 55
31340: PUSH
31341: LD_EXP 105
31345: AND
31346: IFFALSE 31502
31348: GO 31350
31350: DISABLE
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
31355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31356: LD_ADDR_VAR 0 2
31360: PUSH
31361: LD_INT 81
31363: PUSH
31364: LD_OWVAR 2
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: LD_INT 21
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 21
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: LIST
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PPUSH
31405: CALL_OW 69
31409: ST_TO_ADDR
// if not tmp then
31410: LD_VAR 0 2
31414: NOT
31415: IFFALSE 31419
// exit ;
31417: GO 31502
// p := 0 ;
31419: LD_ADDR_VAR 0 3
31423: PUSH
31424: LD_INT 0
31426: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31427: LD_INT 35
31429: PPUSH
31430: CALL_OW 67
// p := p + 1 ;
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: LD_VAR 0 3
31443: PUSH
31444: LD_INT 1
31446: PLUS
31447: ST_TO_ADDR
// for i in tmp do
31448: LD_ADDR_VAR 0 1
31452: PUSH
31453: LD_VAR 0 2
31457: PUSH
31458: FOR_IN
31459: IFFALSE 31490
// if GetLives ( i ) < 1000 then
31461: LD_VAR 0 1
31465: PPUSH
31466: CALL_OW 256
31470: PUSH
31471: LD_INT 1000
31473: LESS
31474: IFFALSE 31488
// SetLives ( i , 1000 ) ;
31476: LD_VAR 0 1
31480: PPUSH
31481: LD_INT 1000
31483: PPUSH
31484: CALL_OW 234
31488: GO 31458
31490: POP
31491: POP
// until p > 20 ;
31492: LD_VAR 0 3
31496: PUSH
31497: LD_INT 20
31499: GREATER
31500: IFFALSE 31427
// end ;
31502: PPOPN 3
31504: END
// every 0 0$1 trigger StreamModeActive and sTime do
31505: LD_EXP 55
31509: PUSH
31510: LD_EXP 106
31514: AND
31515: IFFALSE 31550
31517: GO 31519
31519: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31520: LD_INT 28
31522: PPUSH
31523: LD_OWVAR 2
31527: PPUSH
31528: LD_INT 2
31530: PPUSH
31531: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31535: LD_INT 30
31537: PPUSH
31538: LD_OWVAR 2
31542: PPUSH
31543: LD_INT 2
31545: PPUSH
31546: CALL_OW 322
// end ;
31550: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31551: LD_EXP 55
31555: PUSH
31556: LD_EXP 107
31560: AND
31561: IFFALSE 31682
31563: GO 31565
31565: DISABLE
31566: LD_INT 0
31568: PPUSH
31569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31570: LD_ADDR_VAR 0 2
31574: PUSH
31575: LD_INT 22
31577: PUSH
31578: LD_OWVAR 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 21
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: LD_INT 23
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: PPUSH
31619: CALL_OW 69
31623: ST_TO_ADDR
// if not tmp then
31624: LD_VAR 0 2
31628: NOT
31629: IFFALSE 31633
// exit ;
31631: GO 31682
// for i in tmp do
31633: LD_ADDR_VAR 0 1
31637: PUSH
31638: LD_VAR 0 2
31642: PUSH
31643: FOR_IN
31644: IFFALSE 31680
// begin if Crawls ( i ) then
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL_OW 318
31655: IFFALSE 31666
// ComWalk ( i ) ;
31657: LD_VAR 0 1
31661: PPUSH
31662: CALL_OW 138
// SetClass ( i , 2 ) ;
31666: LD_VAR 0 1
31670: PPUSH
31671: LD_INT 2
31673: PPUSH
31674: CALL_OW 336
// end ;
31678: GO 31643
31680: POP
31681: POP
// end ;
31682: PPOPN 2
31684: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31685: LD_EXP 55
31689: PUSH
31690: LD_EXP 108
31694: AND
31695: IFFALSE 31983
31697: GO 31699
31699: DISABLE
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
31704: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31705: LD_OWVAR 2
31709: PPUSH
31710: LD_INT 9
31712: PPUSH
31713: LD_INT 1
31715: PPUSH
31716: LD_INT 1
31718: PPUSH
31719: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31723: LD_INT 9
31725: PPUSH
31726: LD_OWVAR 2
31730: PPUSH
31731: CALL_OW 343
// uc_side := 9 ;
31735: LD_ADDR_OWVAR 20
31739: PUSH
31740: LD_INT 9
31742: ST_TO_ADDR
// uc_nation := 2 ;
31743: LD_ADDR_OWVAR 21
31747: PUSH
31748: LD_INT 2
31750: ST_TO_ADDR
// hc_name := Dark Warrior ;
31751: LD_ADDR_OWVAR 26
31755: PUSH
31756: LD_STRING Dark Warrior
31758: ST_TO_ADDR
// hc_gallery :=  ;
31759: LD_ADDR_OWVAR 33
31763: PUSH
31764: LD_STRING 
31766: ST_TO_ADDR
// hc_noskilllimit := true ;
31767: LD_ADDR_OWVAR 76
31771: PUSH
31772: LD_INT 1
31774: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31775: LD_ADDR_OWVAR 31
31779: PUSH
31780: LD_INT 30
31782: PUSH
31783: LD_INT 30
31785: PUSH
31786: LD_INT 30
31788: PUSH
31789: LD_INT 30
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: ST_TO_ADDR
// un := CreateHuman ;
31798: LD_ADDR_VAR 0 3
31802: PUSH
31803: CALL_OW 44
31807: ST_TO_ADDR
// hc_noskilllimit := false ;
31808: LD_ADDR_OWVAR 76
31812: PUSH
31813: LD_INT 0
31815: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31816: LD_VAR 0 3
31820: PPUSH
31821: LD_INT 1
31823: PPUSH
31824: CALL_OW 51
// ToLua ( playRanger() ) ;
31828: LD_STRING playRanger()
31830: PPUSH
31831: CALL_OW 559
// p := 0 ;
31835: LD_ADDR_VAR 0 2
31839: PUSH
31840: LD_INT 0
31842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31843: LD_INT 35
31845: PPUSH
31846: CALL_OW 67
// p := p + 1 ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_VAR 0 2
31859: PUSH
31860: LD_INT 1
31862: PLUS
31863: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31864: LD_VAR 0 3
31868: PPUSH
31869: CALL_OW 256
31873: PUSH
31874: LD_INT 1000
31876: LESS
31877: IFFALSE 31891
// SetLives ( un , 1000 ) ;
31879: LD_VAR 0 3
31883: PPUSH
31884: LD_INT 1000
31886: PPUSH
31887: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31891: LD_VAR 0 3
31895: PPUSH
31896: LD_INT 81
31898: PUSH
31899: LD_OWVAR 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 91
31910: PUSH
31911: LD_VAR 0 3
31915: PUSH
31916: LD_INT 30
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PPUSH
31928: CALL_OW 69
31932: PPUSH
31933: LD_VAR 0 3
31937: PPUSH
31938: CALL_OW 74
31942: PPUSH
31943: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31947: LD_VAR 0 2
31951: PUSH
31952: LD_INT 80
31954: GREATER
31955: PUSH
31956: LD_VAR 0 3
31960: PPUSH
31961: CALL_OW 301
31965: OR
31966: IFFALSE 31843
// if un then
31968: LD_VAR 0 3
31972: IFFALSE 31983
// RemoveUnit ( un ) ;
31974: LD_VAR 0 3
31978: PPUSH
31979: CALL_OW 64
// end ;
31983: PPOPN 3
31985: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31986: LD_EXP 109
31990: IFFALSE 32106
31992: GO 31994
31994: DISABLE
31995: LD_INT 0
31997: PPUSH
31998: PPUSH
31999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32000: LD_ADDR_VAR 0 2
32004: PUSH
32005: LD_INT 81
32007: PUSH
32008: LD_OWVAR 2
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 21
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PPUSH
32031: CALL_OW 69
32035: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32036: LD_STRING playComputer()
32038: PPUSH
32039: CALL_OW 559
// if not tmp then
32043: LD_VAR 0 2
32047: NOT
32048: IFFALSE 32052
// exit ;
32050: GO 32106
// for i in tmp do
32052: LD_ADDR_VAR 0 1
32056: PUSH
32057: LD_VAR 0 2
32061: PUSH
32062: FOR_IN
32063: IFFALSE 32104
// for j := 1 to 4 do
32065: LD_ADDR_VAR 0 3
32069: PUSH
32070: DOUBLE
32071: LD_INT 1
32073: DEC
32074: ST_TO_ADDR
32075: LD_INT 4
32077: PUSH
32078: FOR_TO
32079: IFFALSE 32100
// SetSkill ( i , j , 10 ) ;
32081: LD_VAR 0 1
32085: PPUSH
32086: LD_VAR 0 3
32090: PPUSH
32091: LD_INT 10
32093: PPUSH
32094: CALL_OW 237
32098: GO 32078
32100: POP
32101: POP
32102: GO 32062
32104: POP
32105: POP
// end ;
32106: PPOPN 3
32108: END
// every 0 0$1 trigger s30 do var i , tmp ;
32109: LD_EXP 110
32113: IFFALSE 32182
32115: GO 32117
32117: DISABLE
32118: LD_INT 0
32120: PPUSH
32121: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32122: LD_ADDR_VAR 0 2
32126: PUSH
32127: LD_INT 22
32129: PUSH
32130: LD_OWVAR 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PPUSH
32139: CALL_OW 69
32143: ST_TO_ADDR
// if not tmp then
32144: LD_VAR 0 2
32148: NOT
32149: IFFALSE 32153
// exit ;
32151: GO 32182
// for i in tmp do
32153: LD_ADDR_VAR 0 1
32157: PUSH
32158: LD_VAR 0 2
32162: PUSH
32163: FOR_IN
32164: IFFALSE 32180
// SetLives ( i , 300 ) ;
32166: LD_VAR 0 1
32170: PPUSH
32171: LD_INT 300
32173: PPUSH
32174: CALL_OW 234
32178: GO 32163
32180: POP
32181: POP
// end ;
32182: PPOPN 2
32184: END
// every 0 0$1 trigger s60 do var i , tmp ;
32185: LD_EXP 111
32189: IFFALSE 32258
32191: GO 32193
32193: DISABLE
32194: LD_INT 0
32196: PPUSH
32197: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32198: LD_ADDR_VAR 0 2
32202: PUSH
32203: LD_INT 22
32205: PUSH
32206: LD_OWVAR 2
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PPUSH
32215: CALL_OW 69
32219: ST_TO_ADDR
// if not tmp then
32220: LD_VAR 0 2
32224: NOT
32225: IFFALSE 32229
// exit ;
32227: GO 32258
// for i in tmp do
32229: LD_ADDR_VAR 0 1
32233: PUSH
32234: LD_VAR 0 2
32238: PUSH
32239: FOR_IN
32240: IFFALSE 32256
// SetLives ( i , 600 ) ;
32242: LD_VAR 0 1
32246: PPUSH
32247: LD_INT 600
32249: PPUSH
32250: CALL_OW 234
32254: GO 32239
32256: POP
32257: POP
// end ;
32258: PPOPN 2
32260: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32261: LD_INT 0
32263: PPUSH
// case cmd of 301 :
32264: LD_VAR 0 1
32268: PUSH
32269: LD_INT 301
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32309
32277: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32278: LD_VAR 0 6
32282: PPUSH
32283: LD_VAR 0 7
32287: PPUSH
32288: LD_VAR 0 8
32292: PPUSH
32293: LD_VAR 0 4
32297: PPUSH
32298: LD_VAR 0 5
32302: PPUSH
32303: CALL 33518 0 5
32307: GO 32430
32309: LD_INT 302
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32354
32317: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32318: LD_VAR 0 6
32322: PPUSH
32323: LD_VAR 0 7
32327: PPUSH
32328: LD_VAR 0 8
32332: PPUSH
32333: LD_VAR 0 9
32337: PPUSH
32338: LD_VAR 0 4
32342: PPUSH
32343: LD_VAR 0 5
32347: PPUSH
32348: CALL 33609 0 6
32352: GO 32430
32354: LD_INT 303
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32399
32362: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32363: LD_VAR 0 6
32367: PPUSH
32368: LD_VAR 0 7
32372: PPUSH
32373: LD_VAR 0 8
32377: PPUSH
32378: LD_VAR 0 9
32382: PPUSH
32383: LD_VAR 0 4
32387: PPUSH
32388: LD_VAR 0 5
32392: PPUSH
32393: CALL 32435 0 6
32397: GO 32430
32399: LD_INT 304
32401: DOUBLE
32402: EQUAL
32403: IFTRUE 32407
32405: GO 32429
32407: POP
// hHackTeleport ( unit , x , y ) ; end ;
32408: LD_VAR 0 2
32412: PPUSH
32413: LD_VAR 0 4
32417: PPUSH
32418: LD_VAR 0 5
32422: PPUSH
32423: CALL 34202 0 3
32427: GO 32430
32429: POP
// end ;
32430: LD_VAR 0 12
32434: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32435: LD_INT 0
32437: PPUSH
32438: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32439: LD_VAR 0 1
32443: PUSH
32444: LD_INT 1
32446: LESS
32447: PUSH
32448: LD_VAR 0 1
32452: PUSH
32453: LD_INT 3
32455: GREATER
32456: OR
32457: PUSH
32458: LD_VAR 0 5
32462: PPUSH
32463: LD_VAR 0 6
32467: PPUSH
32468: CALL_OW 428
32472: OR
32473: IFFALSE 32477
// exit ;
32475: GO 33205
// uc_side := your_side ;
32477: LD_ADDR_OWVAR 20
32481: PUSH
32482: LD_OWVAR 2
32486: ST_TO_ADDR
// uc_nation := nation ;
32487: LD_ADDR_OWVAR 21
32491: PUSH
32492: LD_VAR 0 1
32496: ST_TO_ADDR
// bc_level = 1 ;
32497: LD_ADDR_OWVAR 43
32501: PUSH
32502: LD_INT 1
32504: ST_TO_ADDR
// case btype of 1 :
32505: LD_VAR 0 2
32509: PUSH
32510: LD_INT 1
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32529
32518: POP
// bc_type := b_depot ; 2 :
32519: LD_ADDR_OWVAR 42
32523: PUSH
32524: LD_INT 0
32526: ST_TO_ADDR
32527: GO 33149
32529: LD_INT 2
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32548
32537: POP
// bc_type := b_warehouse ; 3 :
32538: LD_ADDR_OWVAR 42
32542: PUSH
32543: LD_INT 1
32545: ST_TO_ADDR
32546: GO 33149
32548: LD_INT 3
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32567
32556: POP
// bc_type := b_lab ; 4 .. 9 :
32557: LD_ADDR_OWVAR 42
32561: PUSH
32562: LD_INT 6
32564: ST_TO_ADDR
32565: GO 33149
32567: LD_INT 4
32569: DOUBLE
32570: GREATEREQUAL
32571: IFFALSE 32579
32573: LD_INT 9
32575: DOUBLE
32576: LESSEQUAL
32577: IFTRUE 32581
32579: GO 32641
32581: POP
// begin bc_type := b_lab_half ;
32582: LD_ADDR_OWVAR 42
32586: PUSH
32587: LD_INT 7
32589: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32590: LD_ADDR_OWVAR 44
32594: PUSH
32595: LD_INT 10
32597: PUSH
32598: LD_INT 11
32600: PUSH
32601: LD_INT 12
32603: PUSH
32604: LD_INT 15
32606: PUSH
32607: LD_INT 14
32609: PUSH
32610: LD_INT 13
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: PUSH
32621: LD_VAR 0 2
32625: PUSH
32626: LD_INT 3
32628: MINUS
32629: ARRAY
32630: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32631: LD_ADDR_OWVAR 45
32635: PUSH
32636: LD_INT 9
32638: ST_TO_ADDR
// end ; 10 .. 13 :
32639: GO 33149
32641: LD_INT 10
32643: DOUBLE
32644: GREATEREQUAL
32645: IFFALSE 32653
32647: LD_INT 13
32649: DOUBLE
32650: LESSEQUAL
32651: IFTRUE 32655
32653: GO 32732
32655: POP
// begin bc_type := b_lab_full ;
32656: LD_ADDR_OWVAR 42
32660: PUSH
32661: LD_INT 8
32663: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32664: LD_ADDR_OWVAR 44
32668: PUSH
32669: LD_INT 10
32671: PUSH
32672: LD_INT 12
32674: PUSH
32675: LD_INT 14
32677: PUSH
32678: LD_INT 13
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: PUSH
32687: LD_VAR 0 2
32691: PUSH
32692: LD_INT 9
32694: MINUS
32695: ARRAY
32696: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32697: LD_ADDR_OWVAR 45
32701: PUSH
32702: LD_INT 11
32704: PUSH
32705: LD_INT 15
32707: PUSH
32708: LD_INT 12
32710: PUSH
32711: LD_INT 15
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: PUSH
32720: LD_VAR 0 2
32724: PUSH
32725: LD_INT 9
32727: MINUS
32728: ARRAY
32729: ST_TO_ADDR
// end ; 14 :
32730: GO 33149
32732: LD_INT 14
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32751
32740: POP
// bc_type := b_workshop ; 15 :
32741: LD_ADDR_OWVAR 42
32745: PUSH
32746: LD_INT 2
32748: ST_TO_ADDR
32749: GO 33149
32751: LD_INT 15
32753: DOUBLE
32754: EQUAL
32755: IFTRUE 32759
32757: GO 32770
32759: POP
// bc_type := b_factory ; 16 :
32760: LD_ADDR_OWVAR 42
32764: PUSH
32765: LD_INT 3
32767: ST_TO_ADDR
32768: GO 33149
32770: LD_INT 16
32772: DOUBLE
32773: EQUAL
32774: IFTRUE 32778
32776: GO 32789
32778: POP
// bc_type := b_ext_gun ; 17 :
32779: LD_ADDR_OWVAR 42
32783: PUSH
32784: LD_INT 17
32786: ST_TO_ADDR
32787: GO 33149
32789: LD_INT 17
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32825
32797: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32798: LD_ADDR_OWVAR 42
32802: PUSH
32803: LD_INT 19
32805: PUSH
32806: LD_INT 23
32808: PUSH
32809: LD_INT 19
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: PUSH
32817: LD_VAR 0 1
32821: ARRAY
32822: ST_TO_ADDR
32823: GO 33149
32825: LD_INT 18
32827: DOUBLE
32828: EQUAL
32829: IFTRUE 32833
32831: GO 32844
32833: POP
// bc_type := b_ext_radar ; 19 :
32834: LD_ADDR_OWVAR 42
32838: PUSH
32839: LD_INT 20
32841: ST_TO_ADDR
32842: GO 33149
32844: LD_INT 19
32846: DOUBLE
32847: EQUAL
32848: IFTRUE 32852
32850: GO 32863
32852: POP
// bc_type := b_ext_radio ; 20 :
32853: LD_ADDR_OWVAR 42
32857: PUSH
32858: LD_INT 22
32860: ST_TO_ADDR
32861: GO 33149
32863: LD_INT 20
32865: DOUBLE
32866: EQUAL
32867: IFTRUE 32871
32869: GO 32882
32871: POP
// bc_type := b_ext_siberium ; 21 :
32872: LD_ADDR_OWVAR 42
32876: PUSH
32877: LD_INT 21
32879: ST_TO_ADDR
32880: GO 33149
32882: LD_INT 21
32884: DOUBLE
32885: EQUAL
32886: IFTRUE 32890
32888: GO 32901
32890: POP
// bc_type := b_ext_computer ; 22 :
32891: LD_ADDR_OWVAR 42
32895: PUSH
32896: LD_INT 24
32898: ST_TO_ADDR
32899: GO 33149
32901: LD_INT 22
32903: DOUBLE
32904: EQUAL
32905: IFTRUE 32909
32907: GO 32920
32909: POP
// bc_type := b_ext_track ; 23 :
32910: LD_ADDR_OWVAR 42
32914: PUSH
32915: LD_INT 16
32917: ST_TO_ADDR
32918: GO 33149
32920: LD_INT 23
32922: DOUBLE
32923: EQUAL
32924: IFTRUE 32928
32926: GO 32939
32928: POP
// bc_type := b_ext_laser ; 24 :
32929: LD_ADDR_OWVAR 42
32933: PUSH
32934: LD_INT 25
32936: ST_TO_ADDR
32937: GO 33149
32939: LD_INT 24
32941: DOUBLE
32942: EQUAL
32943: IFTRUE 32947
32945: GO 32958
32947: POP
// bc_type := b_control_tower ; 25 :
32948: LD_ADDR_OWVAR 42
32952: PUSH
32953: LD_INT 36
32955: ST_TO_ADDR
32956: GO 33149
32958: LD_INT 25
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 32977
32966: POP
// bc_type := b_breastwork ; 26 :
32967: LD_ADDR_OWVAR 42
32971: PUSH
32972: LD_INT 31
32974: ST_TO_ADDR
32975: GO 33149
32977: LD_INT 26
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 32985
32983: GO 32996
32985: POP
// bc_type := b_bunker ; 27 :
32986: LD_ADDR_OWVAR 42
32990: PUSH
32991: LD_INT 32
32993: ST_TO_ADDR
32994: GO 33149
32996: LD_INT 27
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33015
33004: POP
// bc_type := b_turret ; 28 :
33005: LD_ADDR_OWVAR 42
33009: PUSH
33010: LD_INT 33
33012: ST_TO_ADDR
33013: GO 33149
33015: LD_INT 28
33017: DOUBLE
33018: EQUAL
33019: IFTRUE 33023
33021: GO 33034
33023: POP
// bc_type := b_armoury ; 29 :
33024: LD_ADDR_OWVAR 42
33028: PUSH
33029: LD_INT 4
33031: ST_TO_ADDR
33032: GO 33149
33034: LD_INT 29
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33053
33042: POP
// bc_type := b_barracks ; 30 :
33043: LD_ADDR_OWVAR 42
33047: PUSH
33048: LD_INT 5
33050: ST_TO_ADDR
33051: GO 33149
33053: LD_INT 30
33055: DOUBLE
33056: EQUAL
33057: IFTRUE 33061
33059: GO 33072
33061: POP
// bc_type := b_solar_power ; 31 :
33062: LD_ADDR_OWVAR 42
33066: PUSH
33067: LD_INT 27
33069: ST_TO_ADDR
33070: GO 33149
33072: LD_INT 31
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33091
33080: POP
// bc_type := b_oil_power ; 32 :
33081: LD_ADDR_OWVAR 42
33085: PUSH
33086: LD_INT 26
33088: ST_TO_ADDR
33089: GO 33149
33091: LD_INT 32
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33099
33097: GO 33110
33099: POP
// bc_type := b_siberite_power ; 33 :
33100: LD_ADDR_OWVAR 42
33104: PUSH
33105: LD_INT 28
33107: ST_TO_ADDR
33108: GO 33149
33110: LD_INT 33
33112: DOUBLE
33113: EQUAL
33114: IFTRUE 33118
33116: GO 33129
33118: POP
// bc_type := b_oil_mine ; 34 :
33119: LD_ADDR_OWVAR 42
33123: PUSH
33124: LD_INT 29
33126: ST_TO_ADDR
33127: GO 33149
33129: LD_INT 34
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33148
33137: POP
// bc_type := b_siberite_mine ; end ;
33138: LD_ADDR_OWVAR 42
33142: PUSH
33143: LD_INT 30
33145: ST_TO_ADDR
33146: GO 33149
33148: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33149: LD_ADDR_VAR 0 8
33153: PUSH
33154: LD_VAR 0 5
33158: PPUSH
33159: LD_VAR 0 6
33163: PPUSH
33164: LD_VAR 0 3
33168: PPUSH
33169: CALL_OW 47
33173: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33174: LD_OWVAR 42
33178: PUSH
33179: LD_INT 32
33181: PUSH
33182: LD_INT 33
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: IN
33189: IFFALSE 33205
// PlaceWeaponTurret ( b , weapon ) ;
33191: LD_VAR 0 8
33195: PPUSH
33196: LD_VAR 0 4
33200: PPUSH
33201: CALL_OW 431
// end ;
33205: LD_VAR 0 7
33209: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33210: LD_INT 0
33212: PPUSH
33213: PPUSH
33214: PPUSH
33215: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33216: LD_ADDR_VAR 0 4
33220: PUSH
33221: LD_INT 22
33223: PUSH
33224: LD_OWVAR 2
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 30
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 30
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PPUSH
33265: CALL_OW 69
33269: ST_TO_ADDR
// if not tmp then
33270: LD_VAR 0 4
33274: NOT
33275: IFFALSE 33279
// exit ;
33277: GO 33338
// for i in tmp do
33279: LD_ADDR_VAR 0 2
33283: PUSH
33284: LD_VAR 0 4
33288: PUSH
33289: FOR_IN
33290: IFFALSE 33336
// for j = 1 to 3 do
33292: LD_ADDR_VAR 0 3
33296: PUSH
33297: DOUBLE
33298: LD_INT 1
33300: DEC
33301: ST_TO_ADDR
33302: LD_INT 3
33304: PUSH
33305: FOR_TO
33306: IFFALSE 33332
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33308: LD_VAR 0 2
33312: PPUSH
33313: CALL_OW 274
33317: PPUSH
33318: LD_VAR 0 3
33322: PPUSH
33323: LD_INT 99999
33325: PPUSH
33326: CALL_OW 277
33330: GO 33305
33332: POP
33333: POP
33334: GO 33289
33336: POP
33337: POP
// end ;
33338: LD_VAR 0 1
33342: RET
// export function hHackSetLevel10 ; var i , j ; begin
33343: LD_INT 0
33345: PPUSH
33346: PPUSH
33347: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33348: LD_ADDR_VAR 0 2
33352: PUSH
33353: LD_INT 21
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PPUSH
33363: CALL_OW 69
33367: PUSH
33368: FOR_IN
33369: IFFALSE 33421
// if IsSelected ( i ) then
33371: LD_VAR 0 2
33375: PPUSH
33376: CALL_OW 306
33380: IFFALSE 33419
// begin for j := 1 to 4 do
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: DOUBLE
33388: LD_INT 1
33390: DEC
33391: ST_TO_ADDR
33392: LD_INT 4
33394: PUSH
33395: FOR_TO
33396: IFFALSE 33417
// SetSkill ( i , j , 10 ) ;
33398: LD_VAR 0 2
33402: PPUSH
33403: LD_VAR 0 3
33407: PPUSH
33408: LD_INT 10
33410: PPUSH
33411: CALL_OW 237
33415: GO 33395
33417: POP
33418: POP
// end ;
33419: GO 33368
33421: POP
33422: POP
// end ;
33423: LD_VAR 0 1
33427: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33428: LD_INT 0
33430: PPUSH
33431: PPUSH
33432: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33433: LD_ADDR_VAR 0 2
33437: PUSH
33438: LD_INT 22
33440: PUSH
33441: LD_OWVAR 2
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 21
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PPUSH
33464: CALL_OW 69
33468: PUSH
33469: FOR_IN
33470: IFFALSE 33511
// begin for j := 1 to 4 do
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: DOUBLE
33478: LD_INT 1
33480: DEC
33481: ST_TO_ADDR
33482: LD_INT 4
33484: PUSH
33485: FOR_TO
33486: IFFALSE 33507
// SetSkill ( i , j , 10 ) ;
33488: LD_VAR 0 2
33492: PPUSH
33493: LD_VAR 0 3
33497: PPUSH
33498: LD_INT 10
33500: PPUSH
33501: CALL_OW 237
33505: GO 33485
33507: POP
33508: POP
// end ;
33509: GO 33469
33511: POP
33512: POP
// end ;
33513: LD_VAR 0 1
33517: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33518: LD_INT 0
33520: PPUSH
// uc_side := your_side ;
33521: LD_ADDR_OWVAR 20
33525: PUSH
33526: LD_OWVAR 2
33530: ST_TO_ADDR
// uc_nation := nation ;
33531: LD_ADDR_OWVAR 21
33535: PUSH
33536: LD_VAR 0 1
33540: ST_TO_ADDR
// InitHc ;
33541: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33545: LD_INT 0
33547: PPUSH
33548: LD_VAR 0 2
33552: PPUSH
33553: LD_VAR 0 3
33557: PPUSH
33558: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33562: LD_VAR 0 4
33566: PPUSH
33567: LD_VAR 0 5
33571: PPUSH
33572: CALL_OW 428
33576: PUSH
33577: LD_INT 0
33579: EQUAL
33580: IFFALSE 33604
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33582: CALL_OW 44
33586: PPUSH
33587: LD_VAR 0 4
33591: PPUSH
33592: LD_VAR 0 5
33596: PPUSH
33597: LD_INT 1
33599: PPUSH
33600: CALL_OW 48
// end ;
33604: LD_VAR 0 6
33608: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33609: LD_INT 0
33611: PPUSH
33612: PPUSH
// uc_side := your_side ;
33613: LD_ADDR_OWVAR 20
33617: PUSH
33618: LD_OWVAR 2
33622: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33623: LD_VAR 0 1
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: LD_INT 3
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: LD_INT 5
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: IN
33650: IFFALSE 33662
// uc_nation := nation_american else
33652: LD_ADDR_OWVAR 21
33656: PUSH
33657: LD_INT 1
33659: ST_TO_ADDR
33660: GO 33705
// if chassis in [ 11 , 12 , 13 , 14 ] then
33662: LD_VAR 0 1
33666: PUSH
33667: LD_INT 11
33669: PUSH
33670: LD_INT 12
33672: PUSH
33673: LD_INT 13
33675: PUSH
33676: LD_INT 14
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: IN
33685: IFFALSE 33697
// uc_nation := nation_arabian else
33687: LD_ADDR_OWVAR 21
33691: PUSH
33692: LD_INT 2
33694: ST_TO_ADDR
33695: GO 33705
// uc_nation := nation_russian ;
33697: LD_ADDR_OWVAR 21
33701: PUSH
33702: LD_INT 3
33704: ST_TO_ADDR
// vc_chassis := chassis ;
33705: LD_ADDR_OWVAR 37
33709: PUSH
33710: LD_VAR 0 1
33714: ST_TO_ADDR
// vc_engine := engine ;
33715: LD_ADDR_OWVAR 39
33719: PUSH
33720: LD_VAR 0 2
33724: ST_TO_ADDR
// vc_control := control ;
33725: LD_ADDR_OWVAR 38
33729: PUSH
33730: LD_VAR 0 3
33734: ST_TO_ADDR
// vc_weapon := weapon ;
33735: LD_ADDR_OWVAR 40
33739: PUSH
33740: LD_VAR 0 4
33744: ST_TO_ADDR
// un := CreateVehicle ;
33745: LD_ADDR_VAR 0 8
33749: PUSH
33750: CALL_OW 45
33754: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33755: LD_VAR 0 8
33759: PPUSH
33760: LD_INT 0
33762: PPUSH
33763: LD_INT 5
33765: PPUSH
33766: CALL_OW 12
33770: PPUSH
33771: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33775: LD_VAR 0 8
33779: PPUSH
33780: LD_VAR 0 5
33784: PPUSH
33785: LD_VAR 0 6
33789: PPUSH
33790: LD_INT 1
33792: PPUSH
33793: CALL_OW 48
// end ;
33797: LD_VAR 0 7
33801: RET
// export hInvincible ; every 1 do
33802: GO 33804
33804: DISABLE
// hInvincible := [ ] ;
33805: LD_ADDR_EXP 112
33809: PUSH
33810: EMPTY
33811: ST_TO_ADDR
33812: END
// every 10 do var i ;
33813: GO 33815
33815: DISABLE
33816: LD_INT 0
33818: PPUSH
// begin enable ;
33819: ENABLE
// if not hInvincible then
33820: LD_EXP 112
33824: NOT
33825: IFFALSE 33829
// exit ;
33827: GO 33873
// for i in hInvincible do
33829: LD_ADDR_VAR 0 1
33833: PUSH
33834: LD_EXP 112
33838: PUSH
33839: FOR_IN
33840: IFFALSE 33871
// if GetLives ( i ) < 1000 then
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 256
33851: PUSH
33852: LD_INT 1000
33854: LESS
33855: IFFALSE 33869
// SetLives ( i , 1000 ) ;
33857: LD_VAR 0 1
33861: PPUSH
33862: LD_INT 1000
33864: PPUSH
33865: CALL_OW 234
33869: GO 33839
33871: POP
33872: POP
// end ;
33873: PPOPN 1
33875: END
// export function hHackInvincible ; var i ; begin
33876: LD_INT 0
33878: PPUSH
33879: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33880: LD_ADDR_VAR 0 2
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 21
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 21
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: PPUSH
33913: CALL_OW 69
33917: PUSH
33918: FOR_IN
33919: IFFALSE 33980
// if IsSelected ( i ) then
33921: LD_VAR 0 2
33925: PPUSH
33926: CALL_OW 306
33930: IFFALSE 33978
// begin if i in hInvincible then
33932: LD_VAR 0 2
33936: PUSH
33937: LD_EXP 112
33941: IN
33942: IFFALSE 33962
// hInvincible := hInvincible diff i else
33944: LD_ADDR_EXP 112
33948: PUSH
33949: LD_EXP 112
33953: PUSH
33954: LD_VAR 0 2
33958: DIFF
33959: ST_TO_ADDR
33960: GO 33978
// hInvincible := hInvincible union i ;
33962: LD_ADDR_EXP 112
33966: PUSH
33967: LD_EXP 112
33971: PUSH
33972: LD_VAR 0 2
33976: UNION
33977: ST_TO_ADDR
// end ;
33978: GO 33918
33980: POP
33981: POP
// end ;
33982: LD_VAR 0 1
33986: RET
// export function hHackInvisible ; var i , j ; begin
33987: LD_INT 0
33989: PPUSH
33990: PPUSH
33991: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33992: LD_ADDR_VAR 0 2
33996: PUSH
33997: LD_INT 21
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PPUSH
34007: CALL_OW 69
34011: PUSH
34012: FOR_IN
34013: IFFALSE 34037
// if IsSelected ( i ) then
34015: LD_VAR 0 2
34019: PPUSH
34020: CALL_OW 306
34024: IFFALSE 34035
// ComForceInvisible ( i ) ;
34026: LD_VAR 0 2
34030: PPUSH
34031: CALL_OW 496
34035: GO 34012
34037: POP
34038: POP
// end ;
34039: LD_VAR 0 1
34043: RET
// export function hHackChangeYourSide ; begin
34044: LD_INT 0
34046: PPUSH
// if your_side = 8 then
34047: LD_OWVAR 2
34051: PUSH
34052: LD_INT 8
34054: EQUAL
34055: IFFALSE 34067
// your_side := 0 else
34057: LD_ADDR_OWVAR 2
34061: PUSH
34062: LD_INT 0
34064: ST_TO_ADDR
34065: GO 34081
// your_side := your_side + 1 ;
34067: LD_ADDR_OWVAR 2
34071: PUSH
34072: LD_OWVAR 2
34076: PUSH
34077: LD_INT 1
34079: PLUS
34080: ST_TO_ADDR
// end ;
34081: LD_VAR 0 1
34085: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34086: LD_INT 0
34088: PPUSH
34089: PPUSH
34090: PPUSH
// for i in all_units do
34091: LD_ADDR_VAR 0 2
34095: PUSH
34096: LD_OWVAR 3
34100: PUSH
34101: FOR_IN
34102: IFFALSE 34180
// if IsSelected ( i ) then
34104: LD_VAR 0 2
34108: PPUSH
34109: CALL_OW 306
34113: IFFALSE 34178
// begin j := GetSide ( i ) ;
34115: LD_ADDR_VAR 0 3
34119: PUSH
34120: LD_VAR 0 2
34124: PPUSH
34125: CALL_OW 255
34129: ST_TO_ADDR
// if j = 8 then
34130: LD_VAR 0 3
34134: PUSH
34135: LD_INT 8
34137: EQUAL
34138: IFFALSE 34150
// j := 0 else
34140: LD_ADDR_VAR 0 3
34144: PUSH
34145: LD_INT 0
34147: ST_TO_ADDR
34148: GO 34164
// j := j + 1 ;
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: LD_VAR 0 3
34159: PUSH
34160: LD_INT 1
34162: PLUS
34163: ST_TO_ADDR
// SetSide ( i , j ) ;
34164: LD_VAR 0 2
34168: PPUSH
34169: LD_VAR 0 3
34173: PPUSH
34174: CALL_OW 235
// end ;
34178: GO 34101
34180: POP
34181: POP
// end ;
34182: LD_VAR 0 1
34186: RET
// export function hHackFog ; begin
34187: LD_INT 0
34189: PPUSH
// FogOff ( true ) ;
34190: LD_INT 1
34192: PPUSH
34193: CALL_OW 344
// end ;
34197: LD_VAR 0 1
34201: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34202: LD_INT 0
34204: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34205: LD_VAR 0 1
34209: PPUSH
34210: LD_VAR 0 2
34214: PPUSH
34215: LD_VAR 0 3
34219: PPUSH
34220: LD_INT 1
34222: PPUSH
34223: LD_INT 1
34225: PPUSH
34226: CALL_OW 483
// CenterOnXY ( x , y ) ;
34230: LD_VAR 0 2
34234: PPUSH
34235: LD_VAR 0 3
34239: PPUSH
34240: CALL_OW 84
// end ;
34244: LD_VAR 0 4
34248: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34249: LD_INT 0
34251: PPUSH
34252: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34253: LD_VAR 0 1
34257: NOT
34258: PUSH
34259: LD_VAR 0 2
34263: PPUSH
34264: LD_VAR 0 3
34268: PPUSH
34269: CALL_OW 488
34273: NOT
34274: OR
34275: PUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: CALL_OW 266
34285: PUSH
34286: LD_INT 3
34288: NONEQUAL
34289: PUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: CALL_OW 247
34299: PUSH
34300: LD_INT 1
34302: EQUAL
34303: NOT
34304: AND
34305: OR
34306: IFFALSE 34310
// exit ;
34308: GO 34459
// if GetType ( factory ) = unit_human then
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL_OW 247
34319: PUSH
34320: LD_INT 1
34322: EQUAL
34323: IFFALSE 34340
// factory := IsInUnit ( factory ) ;
34325: LD_ADDR_VAR 0 1
34329: PUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 310
34339: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34340: LD_VAR 0 1
34344: PPUSH
34345: CALL_OW 266
34349: PUSH
34350: LD_INT 3
34352: NONEQUAL
34353: IFFALSE 34357
// exit ;
34355: GO 34459
// if HexInfo ( x , y ) = factory then
34357: LD_VAR 0 2
34361: PPUSH
34362: LD_VAR 0 3
34366: PPUSH
34367: CALL_OW 428
34371: PUSH
34372: LD_VAR 0 1
34376: EQUAL
34377: IFFALSE 34404
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34379: LD_ADDR_EXP 113
34383: PUSH
34384: LD_EXP 113
34388: PPUSH
34389: LD_VAR 0 1
34393: PPUSH
34394: LD_INT 0
34396: PPUSH
34397: CALL_OW 1
34401: ST_TO_ADDR
34402: GO 34455
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34404: LD_ADDR_EXP 113
34408: PUSH
34409: LD_EXP 113
34413: PPUSH
34414: LD_VAR 0 1
34418: PPUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: CALL_OW 255
34428: PUSH
34429: LD_VAR 0 1
34433: PUSH
34434: LD_VAR 0 2
34438: PUSH
34439: LD_VAR 0 3
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: PPUSH
34450: CALL_OW 1
34454: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34455: CALL 34464 0 0
// end ;
34459: LD_VAR 0 4
34463: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34464: LD_INT 0
34466: PPUSH
34467: PPUSH
34468: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34469: LD_STRING resetFactoryWaypoint();
34471: PPUSH
34472: CALL_OW 559
// if factoryWaypoints then
34476: LD_EXP 113
34480: IFFALSE 34606
// begin list := PrepareArray ( factoryWaypoints ) ;
34482: LD_ADDR_VAR 0 3
34486: PUSH
34487: LD_EXP 113
34491: PPUSH
34492: CALL 77020 0 1
34496: ST_TO_ADDR
// for i := 1 to list do
34497: LD_ADDR_VAR 0 2
34501: PUSH
34502: DOUBLE
34503: LD_INT 1
34505: DEC
34506: ST_TO_ADDR
34507: LD_VAR 0 3
34511: PUSH
34512: FOR_TO
34513: IFFALSE 34604
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34515: LD_STRING setFactoryWaypointXY(
34517: PUSH
34518: LD_VAR 0 3
34522: PUSH
34523: LD_VAR 0 2
34527: ARRAY
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: STR
34533: PUSH
34534: LD_STRING ,
34536: STR
34537: PUSH
34538: LD_VAR 0 3
34542: PUSH
34543: LD_VAR 0 2
34547: ARRAY
34548: PUSH
34549: LD_INT 2
34551: ARRAY
34552: STR
34553: PUSH
34554: LD_STRING ,
34556: STR
34557: PUSH
34558: LD_VAR 0 3
34562: PUSH
34563: LD_VAR 0 2
34567: ARRAY
34568: PUSH
34569: LD_INT 3
34571: ARRAY
34572: STR
34573: PUSH
34574: LD_STRING ,
34576: STR
34577: PUSH
34578: LD_VAR 0 3
34582: PUSH
34583: LD_VAR 0 2
34587: ARRAY
34588: PUSH
34589: LD_INT 4
34591: ARRAY
34592: STR
34593: PUSH
34594: LD_STRING )
34596: STR
34597: PPUSH
34598: CALL_OW 559
34602: GO 34512
34604: POP
34605: POP
// end ; end ;
34606: LD_VAR 0 1
34610: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34611: LD_INT 0
34613: PPUSH
// if HexInfo ( x , y ) = warehouse then
34614: LD_VAR 0 2
34618: PPUSH
34619: LD_VAR 0 3
34623: PPUSH
34624: CALL_OW 428
34628: PUSH
34629: LD_VAR 0 1
34633: EQUAL
34634: IFFALSE 34661
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34636: LD_ADDR_EXP 114
34640: PUSH
34641: LD_EXP 114
34645: PPUSH
34646: LD_VAR 0 1
34650: PPUSH
34651: LD_INT 0
34653: PPUSH
34654: CALL_OW 1
34658: ST_TO_ADDR
34659: GO 34712
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34661: LD_ADDR_EXP 114
34665: PUSH
34666: LD_EXP 114
34670: PPUSH
34671: LD_VAR 0 1
34675: PPUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 255
34685: PUSH
34686: LD_VAR 0 1
34690: PUSH
34691: LD_VAR 0 2
34695: PUSH
34696: LD_VAR 0 3
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL_OW 1
34711: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34712: CALL 34721 0 0
// end ;
34716: LD_VAR 0 4
34720: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34721: LD_INT 0
34723: PPUSH
34724: PPUSH
34725: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34726: LD_STRING resetWarehouseGatheringPoints();
34728: PPUSH
34729: CALL_OW 559
// if warehouseGatheringPoints then
34733: LD_EXP 114
34737: IFFALSE 34863
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_EXP 114
34748: PPUSH
34749: CALL 77020 0 1
34753: ST_TO_ADDR
// for i := 1 to list do
34754: LD_ADDR_VAR 0 2
34758: PUSH
34759: DOUBLE
34760: LD_INT 1
34762: DEC
34763: ST_TO_ADDR
34764: LD_VAR 0 3
34768: PUSH
34769: FOR_TO
34770: IFFALSE 34861
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34772: LD_STRING setWarehouseGatheringPointXY(
34774: PUSH
34775: LD_VAR 0 3
34779: PUSH
34780: LD_VAR 0 2
34784: ARRAY
34785: PUSH
34786: LD_INT 1
34788: ARRAY
34789: STR
34790: PUSH
34791: LD_STRING ,
34793: STR
34794: PUSH
34795: LD_VAR 0 3
34799: PUSH
34800: LD_VAR 0 2
34804: ARRAY
34805: PUSH
34806: LD_INT 2
34808: ARRAY
34809: STR
34810: PUSH
34811: LD_STRING ,
34813: STR
34814: PUSH
34815: LD_VAR 0 3
34819: PUSH
34820: LD_VAR 0 2
34824: ARRAY
34825: PUSH
34826: LD_INT 3
34828: ARRAY
34829: STR
34830: PUSH
34831: LD_STRING ,
34833: STR
34834: PUSH
34835: LD_VAR 0 3
34839: PUSH
34840: LD_VAR 0 2
34844: ARRAY
34845: PUSH
34846: LD_INT 4
34848: ARRAY
34849: STR
34850: PUSH
34851: LD_STRING )
34853: STR
34854: PPUSH
34855: CALL_OW 559
34859: GO 34769
34861: POP
34862: POP
// end ; end ;
34863: LD_VAR 0 1
34867: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34868: LD_EXP 114
34872: IFFALSE 35557
34874: GO 34876
34876: DISABLE
34877: LD_INT 0
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
// begin enable ;
34888: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34889: LD_ADDR_VAR 0 3
34893: PUSH
34894: LD_EXP 114
34898: PPUSH
34899: CALL 77020 0 1
34903: ST_TO_ADDR
// if not list then
34904: LD_VAR 0 3
34908: NOT
34909: IFFALSE 34913
// exit ;
34911: GO 35557
// for i := 1 to list do
34913: LD_ADDR_VAR 0 1
34917: PUSH
34918: DOUBLE
34919: LD_INT 1
34921: DEC
34922: ST_TO_ADDR
34923: LD_VAR 0 3
34927: PUSH
34928: FOR_TO
34929: IFFALSE 35555
// begin depot := list [ i ] [ 2 ] ;
34931: LD_ADDR_VAR 0 8
34935: PUSH
34936: LD_VAR 0 3
34940: PUSH
34941: LD_VAR 0 1
34945: ARRAY
34946: PUSH
34947: LD_INT 2
34949: ARRAY
34950: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34951: LD_ADDR_VAR 0 5
34955: PUSH
34956: LD_VAR 0 3
34960: PUSH
34961: LD_VAR 0 1
34965: ARRAY
34966: PUSH
34967: LD_INT 1
34969: ARRAY
34970: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34971: LD_VAR 0 8
34975: PPUSH
34976: CALL_OW 301
34980: PUSH
34981: LD_VAR 0 5
34985: PUSH
34986: LD_VAR 0 8
34990: PPUSH
34991: CALL_OW 255
34995: NONEQUAL
34996: OR
34997: IFFALSE 35026
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34999: LD_ADDR_EXP 114
35003: PUSH
35004: LD_EXP 114
35008: PPUSH
35009: LD_VAR 0 8
35013: PPUSH
35014: LD_INT 0
35016: PPUSH
35017: CALL_OW 1
35021: ST_TO_ADDR
// exit ;
35022: POP
35023: POP
35024: GO 35557
// end ; x := list [ i ] [ 3 ] ;
35026: LD_ADDR_VAR 0 6
35030: PUSH
35031: LD_VAR 0 3
35035: PUSH
35036: LD_VAR 0 1
35040: ARRAY
35041: PUSH
35042: LD_INT 3
35044: ARRAY
35045: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35046: LD_ADDR_VAR 0 7
35050: PUSH
35051: LD_VAR 0 3
35055: PUSH
35056: LD_VAR 0 1
35060: ARRAY
35061: PUSH
35062: LD_INT 4
35064: ARRAY
35065: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35066: LD_ADDR_VAR 0 9
35070: PUSH
35071: LD_VAR 0 6
35075: PPUSH
35076: LD_VAR 0 7
35080: PPUSH
35081: LD_INT 16
35083: PPUSH
35084: CALL 75608 0 3
35088: ST_TO_ADDR
// if not cratesNearbyPoint then
35089: LD_VAR 0 9
35093: NOT
35094: IFFALSE 35100
// exit ;
35096: POP
35097: POP
35098: GO 35557
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35100: LD_ADDR_VAR 0 4
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_VAR 0 5
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 3
35119: PUSH
35120: LD_INT 60
35122: PUSH
35123: EMPTY
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 91
35132: PUSH
35133: LD_VAR 0 8
35137: PUSH
35138: LD_INT 6
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 25
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 25
35161: PUSH
35162: LD_INT 16
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: PPUSH
35180: CALL_OW 69
35184: PUSH
35185: LD_VAR 0 8
35189: PPUSH
35190: CALL_OW 313
35194: PPUSH
35195: LD_INT 3
35197: PUSH
35198: LD_INT 60
35200: PUSH
35201: EMPTY
35202: LIST
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: LD_INT 25
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 25
35223: PUSH
35224: LD_INT 16
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PPUSH
35240: CALL_OW 72
35244: UNION
35245: ST_TO_ADDR
// if tmp then
35246: LD_VAR 0 4
35250: IFFALSE 35330
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35252: LD_ADDR_VAR 0 4
35256: PUSH
35257: LD_VAR 0 4
35261: PPUSH
35262: LD_INT 3
35264: PPUSH
35265: CALL 73577 0 2
35269: ST_TO_ADDR
// for j in tmp do
35270: LD_ADDR_VAR 0 2
35274: PUSH
35275: LD_VAR 0 4
35279: PUSH
35280: FOR_IN
35281: IFFALSE 35324
// begin if IsInUnit ( j ) then
35283: LD_VAR 0 2
35287: PPUSH
35288: CALL_OW 310
35292: IFFALSE 35303
// ComExit ( j ) ;
35294: LD_VAR 0 2
35298: PPUSH
35299: CALL 73660 0 1
// AddComCollect ( j , x , y ) ;
35303: LD_VAR 0 2
35307: PPUSH
35308: LD_VAR 0 6
35312: PPUSH
35313: LD_VAR 0 7
35317: PPUSH
35318: CALL_OW 177
// end ;
35322: GO 35280
35324: POP
35325: POP
// exit ;
35326: POP
35327: POP
35328: GO 35557
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35330: LD_ADDR_VAR 0 4
35334: PUSH
35335: LD_INT 22
35337: PUSH
35338: LD_VAR 0 5
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 91
35349: PUSH
35350: LD_VAR 0 8
35354: PUSH
35355: LD_INT 8
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 34
35368: PUSH
35369: LD_INT 12
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 34
35378: PUSH
35379: LD_INT 51
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 34
35388: PUSH
35389: LD_INT 32
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 34
35398: PUSH
35399: LD_INT 89
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: PPUSH
35418: CALL_OW 69
35422: ST_TO_ADDR
// if tmp then
35423: LD_VAR 0 4
35427: IFFALSE 35553
// begin for j in tmp do
35429: LD_ADDR_VAR 0 2
35433: PUSH
35434: LD_VAR 0 4
35438: PUSH
35439: FOR_IN
35440: IFFALSE 35551
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35442: LD_VAR 0 2
35446: PPUSH
35447: CALL_OW 262
35451: PUSH
35452: LD_INT 3
35454: EQUAL
35455: PUSH
35456: LD_VAR 0 2
35460: PPUSH
35461: CALL_OW 261
35465: PUSH
35466: LD_INT 20
35468: GREATER
35469: OR
35470: PUSH
35471: LD_VAR 0 2
35475: PPUSH
35476: CALL_OW 314
35480: NOT
35481: AND
35482: PUSH
35483: LD_VAR 0 2
35487: PPUSH
35488: CALL_OW 263
35492: PUSH
35493: LD_INT 1
35495: NONEQUAL
35496: PUSH
35497: LD_VAR 0 2
35501: PPUSH
35502: CALL_OW 311
35506: OR
35507: AND
35508: IFFALSE 35549
// begin ComCollect ( j , x , y ) ;
35510: LD_VAR 0 2
35514: PPUSH
35515: LD_VAR 0 6
35519: PPUSH
35520: LD_VAR 0 7
35524: PPUSH
35525: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35529: LD_VAR 0 2
35533: PPUSH
35534: LD_VAR 0 8
35538: PPUSH
35539: CALL_OW 172
// exit ;
35543: POP
35544: POP
35545: POP
35546: POP
35547: GO 35557
// end ;
35549: GO 35439
35551: POP
35552: POP
// end ; end ;
35553: GO 34928
35555: POP
35556: POP
// end ; end_of_file end_of_file
35557: PPOPN 9
35559: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35560: LD_INT 0
35562: PPUSH
35563: PPUSH
// if exist_mode then
35564: LD_VAR 0 2
35568: IFFALSE 35593
// unit := CreateCharacter ( prefix & ident ) else
35570: LD_ADDR_VAR 0 5
35574: PUSH
35575: LD_VAR 0 3
35579: PUSH
35580: LD_VAR 0 1
35584: STR
35585: PPUSH
35586: CALL_OW 34
35590: ST_TO_ADDR
35591: GO 35608
// unit := NewCharacter ( ident ) ;
35593: LD_ADDR_VAR 0 5
35597: PUSH
35598: LD_VAR 0 1
35602: PPUSH
35603: CALL_OW 25
35607: ST_TO_ADDR
// result := unit ;
35608: LD_ADDR_VAR 0 4
35612: PUSH
35613: LD_VAR 0 5
35617: ST_TO_ADDR
// end ;
35618: LD_VAR 0 4
35622: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35623: LD_INT 0
35625: PPUSH
35626: PPUSH
// if not side or not nation then
35627: LD_VAR 0 1
35631: NOT
35632: PUSH
35633: LD_VAR 0 2
35637: NOT
35638: OR
35639: IFFALSE 35643
// exit ;
35641: GO 36411
// case nation of nation_american :
35643: LD_VAR 0 2
35647: PUSH
35648: LD_INT 1
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35656
35654: GO 35870
35656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35657: LD_ADDR_VAR 0 4
35661: PUSH
35662: LD_INT 35
35664: PUSH
35665: LD_INT 45
35667: PUSH
35668: LD_INT 46
35670: PUSH
35671: LD_INT 47
35673: PUSH
35674: LD_INT 82
35676: PUSH
35677: LD_INT 83
35679: PUSH
35680: LD_INT 84
35682: PUSH
35683: LD_INT 85
35685: PUSH
35686: LD_INT 86
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: LD_INT 6
35697: PUSH
35698: LD_INT 15
35700: PUSH
35701: LD_INT 16
35703: PUSH
35704: LD_INT 7
35706: PUSH
35707: LD_INT 12
35709: PUSH
35710: LD_INT 13
35712: PUSH
35713: LD_INT 10
35715: PUSH
35716: LD_INT 14
35718: PUSH
35719: LD_INT 20
35721: PUSH
35722: LD_INT 21
35724: PUSH
35725: LD_INT 22
35727: PUSH
35728: LD_INT 25
35730: PUSH
35731: LD_INT 32
35733: PUSH
35734: LD_INT 27
35736: PUSH
35737: LD_INT 36
35739: PUSH
35740: LD_INT 69
35742: PUSH
35743: LD_INT 39
35745: PUSH
35746: LD_INT 34
35748: PUSH
35749: LD_INT 40
35751: PUSH
35752: LD_INT 48
35754: PUSH
35755: LD_INT 49
35757: PUSH
35758: LD_INT 50
35760: PUSH
35761: LD_INT 51
35763: PUSH
35764: LD_INT 52
35766: PUSH
35767: LD_INT 53
35769: PUSH
35770: LD_INT 54
35772: PUSH
35773: LD_INT 55
35775: PUSH
35776: LD_INT 56
35778: PUSH
35779: LD_INT 57
35781: PUSH
35782: LD_INT 58
35784: PUSH
35785: LD_INT 59
35787: PUSH
35788: LD_INT 60
35790: PUSH
35791: LD_INT 61
35793: PUSH
35794: LD_INT 62
35796: PUSH
35797: LD_INT 80
35799: PUSH
35800: LD_INT 82
35802: PUSH
35803: LD_INT 83
35805: PUSH
35806: LD_INT 84
35808: PUSH
35809: LD_INT 85
35811: PUSH
35812: LD_INT 86
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
35868: GO 36335
35870: LD_INT 2
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35878
35876: GO 36104
35878: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35879: LD_ADDR_VAR 0 4
35883: PUSH
35884: LD_INT 35
35886: PUSH
35887: LD_INT 45
35889: PUSH
35890: LD_INT 46
35892: PUSH
35893: LD_INT 47
35895: PUSH
35896: LD_INT 82
35898: PUSH
35899: LD_INT 83
35901: PUSH
35902: LD_INT 84
35904: PUSH
35905: LD_INT 85
35907: PUSH
35908: LD_INT 87
35910: PUSH
35911: LD_INT 70
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: LD_INT 11
35919: PUSH
35920: LD_INT 3
35922: PUSH
35923: LD_INT 4
35925: PUSH
35926: LD_INT 5
35928: PUSH
35929: LD_INT 6
35931: PUSH
35932: LD_INT 15
35934: PUSH
35935: LD_INT 18
35937: PUSH
35938: LD_INT 7
35940: PUSH
35941: LD_INT 17
35943: PUSH
35944: LD_INT 8
35946: PUSH
35947: LD_INT 20
35949: PUSH
35950: LD_INT 21
35952: PUSH
35953: LD_INT 22
35955: PUSH
35956: LD_INT 72
35958: PUSH
35959: LD_INT 26
35961: PUSH
35962: LD_INT 69
35964: PUSH
35965: LD_INT 39
35967: PUSH
35968: LD_INT 40
35970: PUSH
35971: LD_INT 41
35973: PUSH
35974: LD_INT 42
35976: PUSH
35977: LD_INT 43
35979: PUSH
35980: LD_INT 48
35982: PUSH
35983: LD_INT 49
35985: PUSH
35986: LD_INT 50
35988: PUSH
35989: LD_INT 51
35991: PUSH
35992: LD_INT 52
35994: PUSH
35995: LD_INT 53
35997: PUSH
35998: LD_INT 54
36000: PUSH
36001: LD_INT 55
36003: PUSH
36004: LD_INT 56
36006: PUSH
36007: LD_INT 60
36009: PUSH
36010: LD_INT 61
36012: PUSH
36013: LD_INT 62
36015: PUSH
36016: LD_INT 66
36018: PUSH
36019: LD_INT 67
36021: PUSH
36022: LD_INT 68
36024: PUSH
36025: LD_INT 81
36027: PUSH
36028: LD_INT 82
36030: PUSH
36031: LD_INT 83
36033: PUSH
36034: LD_INT 84
36036: PUSH
36037: LD_INT 85
36039: PUSH
36040: LD_INT 87
36042: PUSH
36043: LD_INT 88
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
36102: GO 36335
36104: LD_INT 3
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36334
36112: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36113: LD_ADDR_VAR 0 4
36117: PUSH
36118: LD_INT 46
36120: PUSH
36121: LD_INT 47
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 82
36132: PUSH
36133: LD_INT 83
36135: PUSH
36136: LD_INT 84
36138: PUSH
36139: LD_INT 85
36141: PUSH
36142: LD_INT 86
36144: PUSH
36145: LD_INT 11
36147: PUSH
36148: LD_INT 9
36150: PUSH
36151: LD_INT 20
36153: PUSH
36154: LD_INT 19
36156: PUSH
36157: LD_INT 21
36159: PUSH
36160: LD_INT 24
36162: PUSH
36163: LD_INT 22
36165: PUSH
36166: LD_INT 25
36168: PUSH
36169: LD_INT 28
36171: PUSH
36172: LD_INT 29
36174: PUSH
36175: LD_INT 30
36177: PUSH
36178: LD_INT 31
36180: PUSH
36181: LD_INT 37
36183: PUSH
36184: LD_INT 38
36186: PUSH
36187: LD_INT 32
36189: PUSH
36190: LD_INT 27
36192: PUSH
36193: LD_INT 33
36195: PUSH
36196: LD_INT 69
36198: PUSH
36199: LD_INT 39
36201: PUSH
36202: LD_INT 34
36204: PUSH
36205: LD_INT 40
36207: PUSH
36208: LD_INT 71
36210: PUSH
36211: LD_INT 23
36213: PUSH
36214: LD_INT 44
36216: PUSH
36217: LD_INT 48
36219: PUSH
36220: LD_INT 49
36222: PUSH
36223: LD_INT 50
36225: PUSH
36226: LD_INT 51
36228: PUSH
36229: LD_INT 52
36231: PUSH
36232: LD_INT 53
36234: PUSH
36235: LD_INT 54
36237: PUSH
36238: LD_INT 55
36240: PUSH
36241: LD_INT 56
36243: PUSH
36244: LD_INT 57
36246: PUSH
36247: LD_INT 58
36249: PUSH
36250: LD_INT 59
36252: PUSH
36253: LD_INT 63
36255: PUSH
36256: LD_INT 64
36258: PUSH
36259: LD_INT 65
36261: PUSH
36262: LD_INT 82
36264: PUSH
36265: LD_INT 83
36267: PUSH
36268: LD_INT 84
36270: PUSH
36271: LD_INT 85
36273: PUSH
36274: LD_INT 86
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
36332: GO 36335
36334: POP
// if state > - 1 and state < 3 then
36335: LD_VAR 0 3
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: GREATER
36344: PUSH
36345: LD_VAR 0 3
36349: PUSH
36350: LD_INT 3
36352: LESS
36353: AND
36354: IFFALSE 36411
// for i in result do
36356: LD_ADDR_VAR 0 5
36360: PUSH
36361: LD_VAR 0 4
36365: PUSH
36366: FOR_IN
36367: IFFALSE 36409
// if GetTech ( i , side ) <> state then
36369: LD_VAR 0 5
36373: PPUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 321
36383: PUSH
36384: LD_VAR 0 3
36388: NONEQUAL
36389: IFFALSE 36407
// result := result diff i ;
36391: LD_ADDR_VAR 0 4
36395: PUSH
36396: LD_VAR 0 4
36400: PUSH
36401: LD_VAR 0 5
36405: DIFF
36406: ST_TO_ADDR
36407: GO 36366
36409: POP
36410: POP
// end ;
36411: LD_VAR 0 4
36415: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36416: LD_INT 0
36418: PPUSH
36419: PPUSH
36420: PPUSH
// result := true ;
36421: LD_ADDR_VAR 0 3
36425: PUSH
36426: LD_INT 1
36428: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36429: LD_ADDR_VAR 0 5
36433: PUSH
36434: LD_VAR 0 2
36438: PPUSH
36439: CALL_OW 480
36443: ST_TO_ADDR
// if not tmp then
36444: LD_VAR 0 5
36448: NOT
36449: IFFALSE 36453
// exit ;
36451: GO 36502
// for i in tmp do
36453: LD_ADDR_VAR 0 4
36457: PUSH
36458: LD_VAR 0 5
36462: PUSH
36463: FOR_IN
36464: IFFALSE 36500
// if GetTech ( i , side ) <> state_researched then
36466: LD_VAR 0 4
36470: PPUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: CALL_OW 321
36480: PUSH
36481: LD_INT 2
36483: NONEQUAL
36484: IFFALSE 36498
// begin result := false ;
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: LD_INT 0
36493: ST_TO_ADDR
// exit ;
36494: POP
36495: POP
36496: GO 36502
// end ;
36498: GO 36463
36500: POP
36501: POP
// end ;
36502: LD_VAR 0 3
36506: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36507: LD_INT 0
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
36513: PPUSH
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
36521: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36522: LD_VAR 0 1
36526: NOT
36527: PUSH
36528: LD_VAR 0 1
36532: PPUSH
36533: CALL_OW 257
36537: PUSH
36538: LD_INT 9
36540: NONEQUAL
36541: OR
36542: IFFALSE 36546
// exit ;
36544: GO 37119
// side := GetSide ( unit ) ;
36546: LD_ADDR_VAR 0 9
36550: PUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 255
36560: ST_TO_ADDR
// tech_space := tech_spacanom ;
36561: LD_ADDR_VAR 0 12
36565: PUSH
36566: LD_INT 29
36568: ST_TO_ADDR
// tech_time := tech_taurad ;
36569: LD_ADDR_VAR 0 13
36573: PUSH
36574: LD_INT 28
36576: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36577: LD_ADDR_VAR 0 11
36581: PUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 310
36591: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36592: LD_VAR 0 11
36596: PPUSH
36597: CALL_OW 247
36601: PUSH
36602: LD_INT 2
36604: EQUAL
36605: IFFALSE 36609
// exit ;
36607: GO 37119
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36609: LD_ADDR_VAR 0 8
36613: PUSH
36614: LD_INT 81
36616: PUSH
36617: LD_VAR 0 9
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 3
36628: PUSH
36629: LD_INT 21
36631: PUSH
36632: LD_INT 3
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PPUSH
36647: CALL_OW 69
36651: ST_TO_ADDR
// if not tmp then
36652: LD_VAR 0 8
36656: NOT
36657: IFFALSE 36661
// exit ;
36659: GO 37119
// if in_unit then
36661: LD_VAR 0 11
36665: IFFALSE 36689
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36667: LD_ADDR_VAR 0 10
36671: PUSH
36672: LD_VAR 0 8
36676: PPUSH
36677: LD_VAR 0 11
36681: PPUSH
36682: CALL_OW 74
36686: ST_TO_ADDR
36687: GO 36709
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36689: LD_ADDR_VAR 0 10
36693: PUSH
36694: LD_VAR 0 8
36698: PPUSH
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL_OW 74
36708: ST_TO_ADDR
// if not enemy then
36709: LD_VAR 0 10
36713: NOT
36714: IFFALSE 36718
// exit ;
36716: GO 37119
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36718: LD_VAR 0 11
36722: PUSH
36723: LD_VAR 0 11
36727: PPUSH
36728: LD_VAR 0 10
36732: PPUSH
36733: CALL_OW 296
36737: PUSH
36738: LD_INT 13
36740: GREATER
36741: AND
36742: PUSH
36743: LD_VAR 0 1
36747: PPUSH
36748: LD_VAR 0 10
36752: PPUSH
36753: CALL_OW 296
36757: PUSH
36758: LD_INT 12
36760: GREATER
36761: OR
36762: IFFALSE 36766
// exit ;
36764: GO 37119
// missile := [ 1 ] ;
36766: LD_ADDR_VAR 0 14
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: EMPTY
36775: LIST
36776: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36777: LD_VAR 0 9
36781: PPUSH
36782: LD_VAR 0 12
36786: PPUSH
36787: CALL_OW 325
36791: IFFALSE 36820
// missile := Replace ( missile , missile + 1 , 2 ) ;
36793: LD_ADDR_VAR 0 14
36797: PUSH
36798: LD_VAR 0 14
36802: PPUSH
36803: LD_VAR 0 14
36807: PUSH
36808: LD_INT 1
36810: PLUS
36811: PPUSH
36812: LD_INT 2
36814: PPUSH
36815: CALL_OW 1
36819: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36820: LD_VAR 0 9
36824: PPUSH
36825: LD_VAR 0 13
36829: PPUSH
36830: CALL_OW 325
36834: PUSH
36835: LD_VAR 0 10
36839: PPUSH
36840: CALL_OW 255
36844: PPUSH
36845: LD_VAR 0 13
36849: PPUSH
36850: CALL_OW 325
36854: NOT
36855: AND
36856: IFFALSE 36885
// missile := Replace ( missile , missile + 1 , 3 ) ;
36858: LD_ADDR_VAR 0 14
36862: PUSH
36863: LD_VAR 0 14
36867: PPUSH
36868: LD_VAR 0 14
36872: PUSH
36873: LD_INT 1
36875: PLUS
36876: PPUSH
36877: LD_INT 3
36879: PPUSH
36880: CALL_OW 1
36884: ST_TO_ADDR
// if missile < 2 then
36885: LD_VAR 0 14
36889: PUSH
36890: LD_INT 2
36892: LESS
36893: IFFALSE 36897
// exit ;
36895: GO 37119
// x := GetX ( enemy ) ;
36897: LD_ADDR_VAR 0 4
36901: PUSH
36902: LD_VAR 0 10
36906: PPUSH
36907: CALL_OW 250
36911: ST_TO_ADDR
// y := GetY ( enemy ) ;
36912: LD_ADDR_VAR 0 5
36916: PUSH
36917: LD_VAR 0 10
36921: PPUSH
36922: CALL_OW 251
36926: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36927: LD_ADDR_VAR 0 6
36931: PUSH
36932: LD_VAR 0 4
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PPUSH
36941: LD_INT 1
36943: PPUSH
36944: CALL_OW 12
36948: PLUS
36949: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36950: LD_ADDR_VAR 0 7
36954: PUSH
36955: LD_VAR 0 5
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PPUSH
36964: LD_INT 1
36966: PPUSH
36967: CALL_OW 12
36971: PLUS
36972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36973: LD_VAR 0 6
36977: PPUSH
36978: LD_VAR 0 7
36982: PPUSH
36983: CALL_OW 488
36987: NOT
36988: IFFALSE 37010
// begin _x := x ;
36990: LD_ADDR_VAR 0 6
36994: PUSH
36995: LD_VAR 0 4
36999: ST_TO_ADDR
// _y := y ;
37000: LD_ADDR_VAR 0 7
37004: PUSH
37005: LD_VAR 0 5
37009: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37010: LD_ADDR_VAR 0 3
37014: PUSH
37015: LD_INT 1
37017: PPUSH
37018: LD_VAR 0 14
37022: PPUSH
37023: CALL_OW 12
37027: ST_TO_ADDR
// case i of 1 :
37028: LD_VAR 0 3
37032: PUSH
37033: LD_INT 1
37035: DOUBLE
37036: EQUAL
37037: IFTRUE 37041
37039: GO 37058
37041: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37042: LD_VAR 0 1
37046: PPUSH
37047: LD_VAR 0 10
37051: PPUSH
37052: CALL_OW 115
37056: GO 37119
37058: LD_INT 2
37060: DOUBLE
37061: EQUAL
37062: IFTRUE 37066
37064: GO 37088
37066: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37067: LD_VAR 0 1
37071: PPUSH
37072: LD_VAR 0 6
37076: PPUSH
37077: LD_VAR 0 7
37081: PPUSH
37082: CALL_OW 153
37086: GO 37119
37088: LD_INT 3
37090: DOUBLE
37091: EQUAL
37092: IFTRUE 37096
37094: GO 37118
37096: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37097: LD_VAR 0 1
37101: PPUSH
37102: LD_VAR 0 6
37106: PPUSH
37107: LD_VAR 0 7
37111: PPUSH
37112: CALL_OW 154
37116: GO 37119
37118: POP
// end ;
37119: LD_VAR 0 2
37123: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37124: LD_INT 0
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
// if not unit or not building then
37132: LD_VAR 0 1
37136: NOT
37137: PUSH
37138: LD_VAR 0 2
37142: NOT
37143: OR
37144: IFFALSE 37148
// exit ;
37146: GO 37306
// x := GetX ( building ) ;
37148: LD_ADDR_VAR 0 5
37152: PUSH
37153: LD_VAR 0 2
37157: PPUSH
37158: CALL_OW 250
37162: ST_TO_ADDR
// y := GetY ( building ) ;
37163: LD_ADDR_VAR 0 6
37167: PUSH
37168: LD_VAR 0 2
37172: PPUSH
37173: CALL_OW 251
37177: ST_TO_ADDR
// for i = 0 to 5 do
37178: LD_ADDR_VAR 0 4
37182: PUSH
37183: DOUBLE
37184: LD_INT 0
37186: DEC
37187: ST_TO_ADDR
37188: LD_INT 5
37190: PUSH
37191: FOR_TO
37192: IFFALSE 37304
// begin _x := ShiftX ( x , i , 3 ) ;
37194: LD_ADDR_VAR 0 7
37198: PUSH
37199: LD_VAR 0 5
37203: PPUSH
37204: LD_VAR 0 4
37208: PPUSH
37209: LD_INT 3
37211: PPUSH
37212: CALL_OW 272
37216: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37217: LD_ADDR_VAR 0 8
37221: PUSH
37222: LD_VAR 0 6
37226: PPUSH
37227: LD_VAR 0 4
37231: PPUSH
37232: LD_INT 3
37234: PPUSH
37235: CALL_OW 273
37239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37240: LD_VAR 0 7
37244: PPUSH
37245: LD_VAR 0 8
37249: PPUSH
37250: CALL_OW 488
37254: NOT
37255: IFFALSE 37259
// continue ;
37257: GO 37191
// if HexInfo ( _x , _y ) = 0 then
37259: LD_VAR 0 7
37263: PPUSH
37264: LD_VAR 0 8
37268: PPUSH
37269: CALL_OW 428
37273: PUSH
37274: LD_INT 0
37276: EQUAL
37277: IFFALSE 37302
// begin ComMoveXY ( unit , _x , _y ) ;
37279: LD_VAR 0 1
37283: PPUSH
37284: LD_VAR 0 7
37288: PPUSH
37289: LD_VAR 0 8
37293: PPUSH
37294: CALL_OW 111
// exit ;
37298: POP
37299: POP
37300: GO 37306
// end ; end ;
37302: GO 37191
37304: POP
37305: POP
// end ;
37306: LD_VAR 0 3
37310: RET
// export function ScanBase ( side , base_area ) ; begin
37311: LD_INT 0
37313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37314: LD_ADDR_VAR 0 3
37318: PUSH
37319: LD_VAR 0 2
37323: PPUSH
37324: LD_INT 81
37326: PUSH
37327: LD_VAR 0 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PPUSH
37336: CALL_OW 70
37340: ST_TO_ADDR
// end ;
37341: LD_VAR 0 3
37345: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37346: LD_INT 0
37348: PPUSH
37349: PPUSH
37350: PPUSH
37351: PPUSH
// result := false ;
37352: LD_ADDR_VAR 0 2
37356: PUSH
37357: LD_INT 0
37359: ST_TO_ADDR
// side := GetSide ( unit ) ;
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 255
37374: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37375: LD_ADDR_VAR 0 4
37379: PUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 248
37389: ST_TO_ADDR
// case nat of 1 :
37390: LD_VAR 0 4
37394: PUSH
37395: LD_INT 1
37397: DOUBLE
37398: EQUAL
37399: IFTRUE 37403
37401: GO 37414
37403: POP
// tech := tech_lassight ; 2 :
37404: LD_ADDR_VAR 0 5
37408: PUSH
37409: LD_INT 12
37411: ST_TO_ADDR
37412: GO 37453
37414: LD_INT 2
37416: DOUBLE
37417: EQUAL
37418: IFTRUE 37422
37420: GO 37433
37422: POP
// tech := tech_mortar ; 3 :
37423: LD_ADDR_VAR 0 5
37427: PUSH
37428: LD_INT 41
37430: ST_TO_ADDR
37431: GO 37453
37433: LD_INT 3
37435: DOUBLE
37436: EQUAL
37437: IFTRUE 37441
37439: GO 37452
37441: POP
// tech := tech_bazooka ; end ;
37442: LD_ADDR_VAR 0 5
37446: PUSH
37447: LD_INT 44
37449: ST_TO_ADDR
37450: GO 37453
37452: POP
// if Researched ( side , tech ) then
37453: LD_VAR 0 3
37457: PPUSH
37458: LD_VAR 0 5
37462: PPUSH
37463: CALL_OW 325
37467: IFFALSE 37494
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37469: LD_ADDR_VAR 0 2
37473: PUSH
37474: LD_INT 5
37476: PUSH
37477: LD_INT 8
37479: PUSH
37480: LD_INT 9
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: PUSH
37488: LD_VAR 0 4
37492: ARRAY
37493: ST_TO_ADDR
// end ;
37494: LD_VAR 0 2
37498: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37499: LD_INT 0
37501: PPUSH
37502: PPUSH
37503: PPUSH
// if not mines then
37504: LD_VAR 0 2
37508: NOT
37509: IFFALSE 37513
// exit ;
37511: GO 37657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37513: LD_ADDR_VAR 0 5
37517: PUSH
37518: LD_INT 81
37520: PUSH
37521: LD_VAR 0 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 3
37532: PUSH
37533: LD_INT 21
37535: PUSH
37536: LD_INT 3
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PPUSH
37551: CALL_OW 69
37555: ST_TO_ADDR
// for i in mines do
37556: LD_ADDR_VAR 0 4
37560: PUSH
37561: LD_VAR 0 2
37565: PUSH
37566: FOR_IN
37567: IFFALSE 37655
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37569: LD_VAR 0 4
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: LD_VAR 0 4
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: PPUSH
37587: CALL_OW 458
37591: NOT
37592: IFFALSE 37596
// continue ;
37594: GO 37566
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37596: LD_VAR 0 4
37600: PUSH
37601: LD_INT 1
37603: ARRAY
37604: PPUSH
37605: LD_VAR 0 4
37609: PUSH
37610: LD_INT 2
37612: ARRAY
37613: PPUSH
37614: CALL_OW 428
37618: PUSH
37619: LD_VAR 0 5
37623: IN
37624: IFFALSE 37653
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37626: LD_VAR 0 4
37630: PUSH
37631: LD_INT 1
37633: ARRAY
37634: PPUSH
37635: LD_VAR 0 4
37639: PUSH
37640: LD_INT 2
37642: ARRAY
37643: PPUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 456
// end ;
37653: GO 37566
37655: POP
37656: POP
// end ;
37657: LD_VAR 0 3
37661: RET
// export function Count ( array ) ; begin
37662: LD_INT 0
37664: PPUSH
// result := array + 0 ;
37665: LD_ADDR_VAR 0 2
37669: PUSH
37670: LD_VAR 0 1
37674: PUSH
37675: LD_INT 0
37677: PLUS
37678: ST_TO_ADDR
// end ;
37679: LD_VAR 0 2
37683: RET
// export function IsEmpty ( building ) ; begin
37684: LD_INT 0
37686: PPUSH
// if not building then
37687: LD_VAR 0 1
37691: NOT
37692: IFFALSE 37696
// exit ;
37694: GO 37739
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37696: LD_ADDR_VAR 0 2
37700: PUSH
37701: LD_VAR 0 1
37705: PUSH
37706: LD_INT 22
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 255
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 58
37725: PUSH
37726: EMPTY
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PPUSH
37733: CALL_OW 69
37737: IN
37738: ST_TO_ADDR
// end ;
37739: LD_VAR 0 2
37743: RET
// export function IsNotFull ( building ) ; var places ; begin
37744: LD_INT 0
37746: PPUSH
37747: PPUSH
// if not building then
37748: LD_VAR 0 1
37752: NOT
37753: IFFALSE 37757
// exit ;
37755: GO 37785
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37757: LD_ADDR_VAR 0 2
37761: PUSH
37762: LD_VAR 0 1
37766: PPUSH
37767: LD_INT 3
37769: PUSH
37770: LD_INT 62
37772: PUSH
37773: EMPTY
37774: LIST
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PPUSH
37780: CALL_OW 72
37784: ST_TO_ADDR
// end ;
37785: LD_VAR 0 2
37789: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37790: LD_INT 0
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
// tmp := [ ] ;
37796: LD_ADDR_VAR 0 3
37800: PUSH
37801: EMPTY
37802: ST_TO_ADDR
// list := [ ] ;
37803: LD_ADDR_VAR 0 5
37807: PUSH
37808: EMPTY
37809: ST_TO_ADDR
// for i = 16 to 25 do
37810: LD_ADDR_VAR 0 4
37814: PUSH
37815: DOUBLE
37816: LD_INT 16
37818: DEC
37819: ST_TO_ADDR
37820: LD_INT 25
37822: PUSH
37823: FOR_TO
37824: IFFALSE 37897
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37826: LD_ADDR_VAR 0 3
37830: PUSH
37831: LD_VAR 0 3
37835: PUSH
37836: LD_INT 22
37838: PUSH
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 255
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 91
37855: PUSH
37856: LD_VAR 0 1
37860: PUSH
37861: LD_INT 6
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 30
37871: PUSH
37872: LD_VAR 0 4
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: PPUSH
37889: CALL_OW 69
37893: ADD
37894: ST_TO_ADDR
37895: GO 37823
37897: POP
37898: POP
// for i = 1 to tmp do
37899: LD_ADDR_VAR 0 4
37903: PUSH
37904: DOUBLE
37905: LD_INT 1
37907: DEC
37908: ST_TO_ADDR
37909: LD_VAR 0 3
37913: PUSH
37914: FOR_TO
37915: IFFALSE 38003
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37917: LD_ADDR_VAR 0 5
37921: PUSH
37922: LD_VAR 0 5
37926: PUSH
37927: LD_VAR 0 3
37931: PUSH
37932: LD_VAR 0 4
37936: ARRAY
37937: PPUSH
37938: CALL_OW 266
37942: PUSH
37943: LD_VAR 0 3
37947: PUSH
37948: LD_VAR 0 4
37952: ARRAY
37953: PPUSH
37954: CALL_OW 250
37958: PUSH
37959: LD_VAR 0 3
37963: PUSH
37964: LD_VAR 0 4
37968: ARRAY
37969: PPUSH
37970: CALL_OW 251
37974: PUSH
37975: LD_VAR 0 3
37979: PUSH
37980: LD_VAR 0 4
37984: ARRAY
37985: PPUSH
37986: CALL_OW 254
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: PUSH
37997: EMPTY
37998: LIST
37999: ADD
38000: ST_TO_ADDR
38001: GO 37914
38003: POP
38004: POP
// result := list ;
38005: LD_ADDR_VAR 0 2
38009: PUSH
38010: LD_VAR 0 5
38014: ST_TO_ADDR
// end ;
38015: LD_VAR 0 2
38019: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38020: LD_INT 0
38022: PPUSH
38023: PPUSH
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
38028: PPUSH
// if not factory then
38029: LD_VAR 0 1
38033: NOT
38034: IFFALSE 38038
// exit ;
38036: GO 38631
// if control = control_apeman then
38038: LD_VAR 0 4
38042: PUSH
38043: LD_INT 5
38045: EQUAL
38046: IFFALSE 38155
// begin tmp := UnitsInside ( factory ) ;
38048: LD_ADDR_VAR 0 8
38052: PUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 313
38062: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38063: LD_VAR 0 8
38067: PPUSH
38068: LD_INT 25
38070: PUSH
38071: LD_INT 12
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PPUSH
38078: CALL_OW 72
38082: NOT
38083: IFFALSE 38093
// control := control_manual ;
38085: LD_ADDR_VAR 0 4
38089: PUSH
38090: LD_INT 1
38092: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38093: LD_ADDR_VAR 0 8
38097: PUSH
38098: LD_VAR 0 1
38102: PPUSH
38103: CALL 37790 0 1
38107: ST_TO_ADDR
// if tmp then
38108: LD_VAR 0 8
38112: IFFALSE 38155
// begin for i in tmp do
38114: LD_ADDR_VAR 0 7
38118: PUSH
38119: LD_VAR 0 8
38123: PUSH
38124: FOR_IN
38125: IFFALSE 38153
// if i [ 1 ] = b_ext_radio then
38127: LD_VAR 0 7
38131: PUSH
38132: LD_INT 1
38134: ARRAY
38135: PUSH
38136: LD_INT 22
38138: EQUAL
38139: IFFALSE 38151
// begin control := control_remote ;
38141: LD_ADDR_VAR 0 4
38145: PUSH
38146: LD_INT 2
38148: ST_TO_ADDR
// break ;
38149: GO 38153
// end ;
38151: GO 38124
38153: POP
38154: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38155: LD_VAR 0 1
38159: PPUSH
38160: LD_VAR 0 2
38164: PPUSH
38165: LD_VAR 0 3
38169: PPUSH
38170: LD_VAR 0 4
38174: PPUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: CALL_OW 448
38184: IFFALSE 38219
// begin result := [ chassis , engine , control , weapon ] ;
38186: LD_ADDR_VAR 0 6
38190: PUSH
38191: LD_VAR 0 2
38195: PUSH
38196: LD_VAR 0 3
38200: PUSH
38201: LD_VAR 0 4
38205: PUSH
38206: LD_VAR 0 5
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// exit ;
38217: GO 38631
// end ; _chassis := AvailableChassisList ( factory ) ;
38219: LD_ADDR_VAR 0 9
38223: PUSH
38224: LD_VAR 0 1
38228: PPUSH
38229: CALL_OW 475
38233: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38234: LD_ADDR_VAR 0 11
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 476
38248: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38249: LD_ADDR_VAR 0 12
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 477
38263: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38264: LD_ADDR_VAR 0 10
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 478
38278: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38279: LD_VAR 0 9
38283: NOT
38284: PUSH
38285: LD_VAR 0 11
38289: NOT
38290: OR
38291: PUSH
38292: LD_VAR 0 12
38296: NOT
38297: OR
38298: PUSH
38299: LD_VAR 0 10
38303: NOT
38304: OR
38305: IFFALSE 38340
// begin result := [ chassis , engine , control , weapon ] ;
38307: LD_ADDR_VAR 0 6
38311: PUSH
38312: LD_VAR 0 2
38316: PUSH
38317: LD_VAR 0 3
38321: PUSH
38322: LD_VAR 0 4
38326: PUSH
38327: LD_VAR 0 5
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// exit ;
38338: GO 38631
// end ; if not chassis in _chassis then
38340: LD_VAR 0 2
38344: PUSH
38345: LD_VAR 0 9
38349: IN
38350: NOT
38351: IFFALSE 38377
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38353: LD_ADDR_VAR 0 2
38357: PUSH
38358: LD_VAR 0 9
38362: PUSH
38363: LD_INT 1
38365: PPUSH
38366: LD_VAR 0 9
38370: PPUSH
38371: CALL_OW 12
38375: ARRAY
38376: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38377: LD_VAR 0 2
38381: PPUSH
38382: LD_VAR 0 3
38386: PPUSH
38387: CALL 38636 0 2
38391: NOT
38392: IFFALSE 38451
// repeat engine := _engine [ 1 ] ;
38394: LD_ADDR_VAR 0 3
38398: PUSH
38399: LD_VAR 0 11
38403: PUSH
38404: LD_INT 1
38406: ARRAY
38407: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38408: LD_ADDR_VAR 0 11
38412: PUSH
38413: LD_VAR 0 11
38417: PPUSH
38418: LD_INT 1
38420: PPUSH
38421: CALL_OW 3
38425: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38426: LD_VAR 0 2
38430: PPUSH
38431: LD_VAR 0 3
38435: PPUSH
38436: CALL 38636 0 2
38440: PUSH
38441: LD_VAR 0 11
38445: PUSH
38446: EMPTY
38447: EQUAL
38448: OR
38449: IFFALSE 38394
// if not control in _control then
38451: LD_VAR 0 4
38455: PUSH
38456: LD_VAR 0 12
38460: IN
38461: NOT
38462: IFFALSE 38488
// control := _control [ rand ( 1 , _control ) ] ;
38464: LD_ADDR_VAR 0 4
38468: PUSH
38469: LD_VAR 0 12
38473: PUSH
38474: LD_INT 1
38476: PPUSH
38477: LD_VAR 0 12
38481: PPUSH
38482: CALL_OW 12
38486: ARRAY
38487: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38488: LD_VAR 0 2
38492: PPUSH
38493: LD_VAR 0 5
38497: PPUSH
38498: CALL 38856 0 2
38502: NOT
38503: IFFALSE 38562
// repeat weapon := _weapon [ 1 ] ;
38505: LD_ADDR_VAR 0 5
38509: PUSH
38510: LD_VAR 0 10
38514: PUSH
38515: LD_INT 1
38517: ARRAY
38518: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38519: LD_ADDR_VAR 0 10
38523: PUSH
38524: LD_VAR 0 10
38528: PPUSH
38529: LD_INT 1
38531: PPUSH
38532: CALL_OW 3
38536: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38537: LD_VAR 0 2
38541: PPUSH
38542: LD_VAR 0 5
38546: PPUSH
38547: CALL 38856 0 2
38551: PUSH
38552: LD_VAR 0 10
38556: PUSH
38557: EMPTY
38558: EQUAL
38559: OR
38560: IFFALSE 38505
// result := [ ] ;
38562: LD_ADDR_VAR 0 6
38566: PUSH
38567: EMPTY
38568: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: LD_VAR 0 4
38588: PPUSH
38589: LD_VAR 0 5
38593: PPUSH
38594: CALL_OW 448
38598: IFFALSE 38631
// result := [ chassis , engine , control , weapon ] ;
38600: LD_ADDR_VAR 0 6
38604: PUSH
38605: LD_VAR 0 2
38609: PUSH
38610: LD_VAR 0 3
38614: PUSH
38615: LD_VAR 0 4
38619: PUSH
38620: LD_VAR 0 5
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: ST_TO_ADDR
// end ;
38631: LD_VAR 0 6
38635: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38636: LD_INT 0
38638: PPUSH
// if not chassis or not engine then
38639: LD_VAR 0 1
38643: NOT
38644: PUSH
38645: LD_VAR 0 2
38649: NOT
38650: OR
38651: IFFALSE 38655
// exit ;
38653: GO 38851
// case engine of engine_solar :
38655: LD_VAR 0 2
38659: PUSH
38660: LD_INT 2
38662: DOUBLE
38663: EQUAL
38664: IFTRUE 38668
38666: GO 38706
38668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38669: LD_ADDR_VAR 0 3
38673: PUSH
38674: LD_INT 11
38676: PUSH
38677: LD_INT 12
38679: PUSH
38680: LD_INT 13
38682: PUSH
38683: LD_INT 14
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: ST_TO_ADDR
38704: GO 38835
38706: LD_INT 1
38708: DOUBLE
38709: EQUAL
38710: IFTRUE 38714
38712: GO 38776
38714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38715: LD_ADDR_VAR 0 3
38719: PUSH
38720: LD_INT 11
38722: PUSH
38723: LD_INT 12
38725: PUSH
38726: LD_INT 13
38728: PUSH
38729: LD_INT 14
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: LD_INT 4
38743: PUSH
38744: LD_INT 5
38746: PUSH
38747: LD_INT 21
38749: PUSH
38750: LD_INT 23
38752: PUSH
38753: LD_INT 22
38755: PUSH
38756: LD_INT 24
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
38774: GO 38835
38776: LD_INT 3
38778: DOUBLE
38779: EQUAL
38780: IFTRUE 38784
38782: GO 38834
38784: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38785: LD_ADDR_VAR 0 3
38789: PUSH
38790: LD_INT 13
38792: PUSH
38793: LD_INT 14
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: LD_INT 4
38804: PUSH
38805: LD_INT 5
38807: PUSH
38808: LD_INT 21
38810: PUSH
38811: LD_INT 22
38813: PUSH
38814: LD_INT 23
38816: PUSH
38817: LD_INT 24
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
38832: GO 38835
38834: POP
// result := ( chassis in result ) ;
38835: LD_ADDR_VAR 0 3
38839: PUSH
38840: LD_VAR 0 1
38844: PUSH
38845: LD_VAR 0 3
38849: IN
38850: ST_TO_ADDR
// end ;
38851: LD_VAR 0 3
38855: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38856: LD_INT 0
38858: PPUSH
// if not chassis or not weapon then
38859: LD_VAR 0 1
38863: NOT
38864: PUSH
38865: LD_VAR 0 2
38869: NOT
38870: OR
38871: IFFALSE 38875
// exit ;
38873: GO 39935
// case weapon of us_machine_gun :
38875: LD_VAR 0 2
38879: PUSH
38880: LD_INT 2
38882: DOUBLE
38883: EQUAL
38884: IFTRUE 38888
38886: GO 38918
38888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: LD_INT 3
38902: PUSH
38903: LD_INT 4
38905: PUSH
38906: LD_INT 5
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: ST_TO_ADDR
38916: GO 39919
38918: LD_INT 3
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38926
38924: GO 38956
38926: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: LD_INT 4
38943: PUSH
38944: LD_INT 5
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
38954: GO 39919
38956: LD_INT 11
38958: DOUBLE
38959: EQUAL
38960: IFTRUE 38964
38962: GO 38994
38964: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38965: LD_ADDR_VAR 0 3
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 3
38978: PUSH
38979: LD_INT 4
38981: PUSH
38982: LD_INT 5
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: ST_TO_ADDR
38992: GO 39919
38994: LD_INT 4
38996: DOUBLE
38997: EQUAL
38998: IFTRUE 39002
39000: GO 39028
39002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39003: LD_ADDR_VAR 0 3
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: LD_INT 4
39016: PUSH
39017: LD_INT 5
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: ST_TO_ADDR
39026: GO 39919
39028: LD_INT 5
39030: DOUBLE
39031: EQUAL
39032: IFTRUE 39036
39034: GO 39062
39036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39037: LD_ADDR_VAR 0 3
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: LD_INT 4
39050: PUSH
39051: LD_INT 5
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
39060: GO 39919
39062: LD_INT 9
39064: DOUBLE
39065: EQUAL
39066: IFTRUE 39070
39068: GO 39096
39070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39071: LD_ADDR_VAR 0 3
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: LD_INT 4
39084: PUSH
39085: LD_INT 5
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
39094: GO 39919
39096: LD_INT 7
39098: DOUBLE
39099: EQUAL
39100: IFTRUE 39104
39102: GO 39130
39104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39105: LD_ADDR_VAR 0 3
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: LD_INT 3
39115: PUSH
39116: LD_INT 4
39118: PUSH
39119: LD_INT 5
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: ST_TO_ADDR
39128: GO 39919
39130: LD_INT 12
39132: DOUBLE
39133: EQUAL
39134: IFTRUE 39138
39136: GO 39164
39138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39139: LD_ADDR_VAR 0 3
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: LD_INT 4
39152: PUSH
39153: LD_INT 5
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
39162: GO 39919
39164: LD_INT 13
39166: DOUBLE
39167: EQUAL
39168: IFTRUE 39172
39170: GO 39198
39172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: LD_INT 4
39186: PUSH
39187: LD_INT 5
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: ST_TO_ADDR
39196: GO 39919
39198: LD_INT 14
39200: DOUBLE
39201: EQUAL
39202: IFTRUE 39206
39204: GO 39224
39206: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39207: LD_ADDR_VAR 0 3
39211: PUSH
39212: LD_INT 4
39214: PUSH
39215: LD_INT 5
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: ST_TO_ADDR
39222: GO 39919
39224: LD_INT 6
39226: DOUBLE
39227: EQUAL
39228: IFTRUE 39232
39230: GO 39250
39232: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_INT 4
39240: PUSH
39241: LD_INT 5
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: ST_TO_ADDR
39248: GO 39919
39250: LD_INT 10
39252: DOUBLE
39253: EQUAL
39254: IFTRUE 39258
39256: GO 39276
39258: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39259: LD_ADDR_VAR 0 3
39263: PUSH
39264: LD_INT 4
39266: PUSH
39267: LD_INT 5
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: ST_TO_ADDR
39274: GO 39919
39276: LD_INT 22
39278: DOUBLE
39279: EQUAL
39280: IFTRUE 39284
39282: GO 39310
39284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39285: LD_ADDR_VAR 0 3
39289: PUSH
39290: LD_INT 11
39292: PUSH
39293: LD_INT 12
39295: PUSH
39296: LD_INT 13
39298: PUSH
39299: LD_INT 14
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: ST_TO_ADDR
39308: GO 39919
39310: LD_INT 23
39312: DOUBLE
39313: EQUAL
39314: IFTRUE 39318
39316: GO 39344
39318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39319: LD_ADDR_VAR 0 3
39323: PUSH
39324: LD_INT 11
39326: PUSH
39327: LD_INT 12
39329: PUSH
39330: LD_INT 13
39332: PUSH
39333: LD_INT 14
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: ST_TO_ADDR
39342: GO 39919
39344: LD_INT 24
39346: DOUBLE
39347: EQUAL
39348: IFTRUE 39352
39350: GO 39378
39352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39353: LD_ADDR_VAR 0 3
39357: PUSH
39358: LD_INT 11
39360: PUSH
39361: LD_INT 12
39363: PUSH
39364: LD_INT 13
39366: PUSH
39367: LD_INT 14
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: ST_TO_ADDR
39376: GO 39919
39378: LD_INT 30
39380: DOUBLE
39381: EQUAL
39382: IFTRUE 39386
39384: GO 39412
39386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_INT 11
39394: PUSH
39395: LD_INT 12
39397: PUSH
39398: LD_INT 13
39400: PUSH
39401: LD_INT 14
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: ST_TO_ADDR
39410: GO 39919
39412: LD_INT 25
39414: DOUBLE
39415: EQUAL
39416: IFTRUE 39420
39418: GO 39438
39420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39421: LD_ADDR_VAR 0 3
39425: PUSH
39426: LD_INT 13
39428: PUSH
39429: LD_INT 14
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: ST_TO_ADDR
39436: GO 39919
39438: LD_INT 27
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39464
39446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_INT 13
39454: PUSH
39455: LD_INT 14
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: ST_TO_ADDR
39462: GO 39919
39464: LD_INT 92
39466: DOUBLE
39467: EQUAL
39468: IFTRUE 39472
39470: GO 39498
39472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39473: LD_ADDR_VAR 0 3
39477: PUSH
39478: LD_INT 11
39480: PUSH
39481: LD_INT 12
39483: PUSH
39484: LD_INT 13
39486: PUSH
39487: LD_INT 14
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: ST_TO_ADDR
39496: GO 39919
39498: LD_INT 28
39500: DOUBLE
39501: EQUAL
39502: IFTRUE 39506
39504: GO 39524
39506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39507: LD_ADDR_VAR 0 3
39511: PUSH
39512: LD_INT 13
39514: PUSH
39515: LD_INT 14
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: ST_TO_ADDR
39522: GO 39919
39524: LD_INT 29
39526: DOUBLE
39527: EQUAL
39528: IFTRUE 39532
39530: GO 39550
39532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39533: LD_ADDR_VAR 0 3
39537: PUSH
39538: LD_INT 13
39540: PUSH
39541: LD_INT 14
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: ST_TO_ADDR
39548: GO 39919
39550: LD_INT 31
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39576
39558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39559: LD_ADDR_VAR 0 3
39563: PUSH
39564: LD_INT 13
39566: PUSH
39567: LD_INT 14
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: ST_TO_ADDR
39574: GO 39919
39576: LD_INT 26
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39602
39584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 13
39592: PUSH
39593: LD_INT 14
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: ST_TO_ADDR
39600: GO 39919
39602: LD_INT 42
39604: DOUBLE
39605: EQUAL
39606: IFTRUE 39610
39608: GO 39636
39610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39611: LD_ADDR_VAR 0 3
39615: PUSH
39616: LD_INT 21
39618: PUSH
39619: LD_INT 22
39621: PUSH
39622: LD_INT 23
39624: PUSH
39625: LD_INT 24
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: ST_TO_ADDR
39634: GO 39919
39636: LD_INT 43
39638: DOUBLE
39639: EQUAL
39640: IFTRUE 39644
39642: GO 39670
39644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_INT 21
39652: PUSH
39653: LD_INT 22
39655: PUSH
39656: LD_INT 23
39658: PUSH
39659: LD_INT 24
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: ST_TO_ADDR
39668: GO 39919
39670: LD_INT 44
39672: DOUBLE
39673: EQUAL
39674: IFTRUE 39678
39676: GO 39704
39678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39679: LD_ADDR_VAR 0 3
39683: PUSH
39684: LD_INT 21
39686: PUSH
39687: LD_INT 22
39689: PUSH
39690: LD_INT 23
39692: PUSH
39693: LD_INT 24
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
39702: GO 39919
39704: LD_INT 45
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39712
39710: GO 39738
39712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: LD_INT 21
39720: PUSH
39721: LD_INT 22
39723: PUSH
39724: LD_INT 23
39726: PUSH
39727: LD_INT 24
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: ST_TO_ADDR
39736: GO 39919
39738: LD_INT 49
39740: DOUBLE
39741: EQUAL
39742: IFTRUE 39746
39744: GO 39772
39746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_INT 21
39754: PUSH
39755: LD_INT 22
39757: PUSH
39758: LD_INT 23
39760: PUSH
39761: LD_INT 24
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: ST_TO_ADDR
39770: GO 39919
39772: LD_INT 51
39774: DOUBLE
39775: EQUAL
39776: IFTRUE 39780
39778: GO 39806
39780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39781: LD_ADDR_VAR 0 3
39785: PUSH
39786: LD_INT 21
39788: PUSH
39789: LD_INT 22
39791: PUSH
39792: LD_INT 23
39794: PUSH
39795: LD_INT 24
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: ST_TO_ADDR
39804: GO 39919
39806: LD_INT 52
39808: DOUBLE
39809: EQUAL
39810: IFTRUE 39814
39812: GO 39840
39814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39815: LD_ADDR_VAR 0 3
39819: PUSH
39820: LD_INT 21
39822: PUSH
39823: LD_INT 22
39825: PUSH
39826: LD_INT 23
39828: PUSH
39829: LD_INT 24
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
39838: GO 39919
39840: LD_INT 53
39842: DOUBLE
39843: EQUAL
39844: IFTRUE 39848
39846: GO 39866
39848: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39849: LD_ADDR_VAR 0 3
39853: PUSH
39854: LD_INT 23
39856: PUSH
39857: LD_INT 24
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: ST_TO_ADDR
39864: GO 39919
39866: LD_INT 46
39868: DOUBLE
39869: EQUAL
39870: IFTRUE 39874
39872: GO 39892
39874: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39875: LD_ADDR_VAR 0 3
39879: PUSH
39880: LD_INT 23
39882: PUSH
39883: LD_INT 24
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: ST_TO_ADDR
39890: GO 39919
39892: LD_INT 47
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39900
39898: GO 39918
39900: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39901: LD_ADDR_VAR 0 3
39905: PUSH
39906: LD_INT 23
39908: PUSH
39909: LD_INT 24
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: ST_TO_ADDR
39916: GO 39919
39918: POP
// result := ( chassis in result ) ;
39919: LD_ADDR_VAR 0 3
39923: PUSH
39924: LD_VAR 0 1
39928: PUSH
39929: LD_VAR 0 3
39933: IN
39934: ST_TO_ADDR
// end ;
39935: LD_VAR 0 3
39939: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39940: LD_INT 0
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
39948: PPUSH
// result := array ;
39949: LD_ADDR_VAR 0 5
39953: PUSH
39954: LD_VAR 0 1
39958: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39959: LD_VAR 0 1
39963: NOT
39964: PUSH
39965: LD_VAR 0 2
39969: NOT
39970: OR
39971: PUSH
39972: LD_VAR 0 3
39976: NOT
39977: OR
39978: PUSH
39979: LD_VAR 0 2
39983: PUSH
39984: LD_VAR 0 1
39988: GREATER
39989: OR
39990: PUSH
39991: LD_VAR 0 3
39995: PUSH
39996: LD_VAR 0 1
40000: GREATER
40001: OR
40002: IFFALSE 40006
// exit ;
40004: GO 40302
// if direction then
40006: LD_VAR 0 4
40010: IFFALSE 40074
// begin d := 1 ;
40012: LD_ADDR_VAR 0 9
40016: PUSH
40017: LD_INT 1
40019: ST_TO_ADDR
// if i_from > i_to then
40020: LD_VAR 0 2
40024: PUSH
40025: LD_VAR 0 3
40029: GREATER
40030: IFFALSE 40056
// length := ( array - i_from ) + i_to else
40032: LD_ADDR_VAR 0 11
40036: PUSH
40037: LD_VAR 0 1
40041: PUSH
40042: LD_VAR 0 2
40046: MINUS
40047: PUSH
40048: LD_VAR 0 3
40052: PLUS
40053: ST_TO_ADDR
40054: GO 40072
// length := i_to - i_from ;
40056: LD_ADDR_VAR 0 11
40060: PUSH
40061: LD_VAR 0 3
40065: PUSH
40066: LD_VAR 0 2
40070: MINUS
40071: ST_TO_ADDR
// end else
40072: GO 40135
// begin d := - 1 ;
40074: LD_ADDR_VAR 0 9
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: ST_TO_ADDR
// if i_from > i_to then
40083: LD_VAR 0 2
40087: PUSH
40088: LD_VAR 0 3
40092: GREATER
40093: IFFALSE 40113
// length := i_from - i_to else
40095: LD_ADDR_VAR 0 11
40099: PUSH
40100: LD_VAR 0 2
40104: PUSH
40105: LD_VAR 0 3
40109: MINUS
40110: ST_TO_ADDR
40111: GO 40135
// length := ( array - i_to ) + i_from ;
40113: LD_ADDR_VAR 0 11
40117: PUSH
40118: LD_VAR 0 1
40122: PUSH
40123: LD_VAR 0 3
40127: MINUS
40128: PUSH
40129: LD_VAR 0 2
40133: PLUS
40134: ST_TO_ADDR
// end ; if not length then
40135: LD_VAR 0 11
40139: NOT
40140: IFFALSE 40144
// exit ;
40142: GO 40302
// tmp := array ;
40144: LD_ADDR_VAR 0 10
40148: PUSH
40149: LD_VAR 0 1
40153: ST_TO_ADDR
// for i = 1 to length do
40154: LD_ADDR_VAR 0 6
40158: PUSH
40159: DOUBLE
40160: LD_INT 1
40162: DEC
40163: ST_TO_ADDR
40164: LD_VAR 0 11
40168: PUSH
40169: FOR_TO
40170: IFFALSE 40290
// begin for j = 1 to array do
40172: LD_ADDR_VAR 0 7
40176: PUSH
40177: DOUBLE
40178: LD_INT 1
40180: DEC
40181: ST_TO_ADDR
40182: LD_VAR 0 1
40186: PUSH
40187: FOR_TO
40188: IFFALSE 40276
// begin k := j + d ;
40190: LD_ADDR_VAR 0 8
40194: PUSH
40195: LD_VAR 0 7
40199: PUSH
40200: LD_VAR 0 9
40204: PLUS
40205: ST_TO_ADDR
// if k > array then
40206: LD_VAR 0 8
40210: PUSH
40211: LD_VAR 0 1
40215: GREATER
40216: IFFALSE 40226
// k := 1 ;
40218: LD_ADDR_VAR 0 8
40222: PUSH
40223: LD_INT 1
40225: ST_TO_ADDR
// if not k then
40226: LD_VAR 0 8
40230: NOT
40231: IFFALSE 40243
// k := array ;
40233: LD_ADDR_VAR 0 8
40237: PUSH
40238: LD_VAR 0 1
40242: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40243: LD_ADDR_VAR 0 10
40247: PUSH
40248: LD_VAR 0 10
40252: PPUSH
40253: LD_VAR 0 8
40257: PPUSH
40258: LD_VAR 0 1
40262: PUSH
40263: LD_VAR 0 7
40267: ARRAY
40268: PPUSH
40269: CALL_OW 1
40273: ST_TO_ADDR
// end ;
40274: GO 40187
40276: POP
40277: POP
// array := tmp ;
40278: LD_ADDR_VAR 0 1
40282: PUSH
40283: LD_VAR 0 10
40287: ST_TO_ADDR
// end ;
40288: GO 40169
40290: POP
40291: POP
// result := array ;
40292: LD_ADDR_VAR 0 5
40296: PUSH
40297: LD_VAR 0 1
40301: ST_TO_ADDR
// end ;
40302: LD_VAR 0 5
40306: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40307: LD_INT 0
40309: PPUSH
40310: PPUSH
// result := 0 ;
40311: LD_ADDR_VAR 0 3
40315: PUSH
40316: LD_INT 0
40318: ST_TO_ADDR
// if not array or not value in array then
40319: LD_VAR 0 1
40323: NOT
40324: PUSH
40325: LD_VAR 0 2
40329: PUSH
40330: LD_VAR 0 1
40334: IN
40335: NOT
40336: OR
40337: IFFALSE 40341
// exit ;
40339: GO 40395
// for i = 1 to array do
40341: LD_ADDR_VAR 0 4
40345: PUSH
40346: DOUBLE
40347: LD_INT 1
40349: DEC
40350: ST_TO_ADDR
40351: LD_VAR 0 1
40355: PUSH
40356: FOR_TO
40357: IFFALSE 40393
// if value = array [ i ] then
40359: LD_VAR 0 2
40363: PUSH
40364: LD_VAR 0 1
40368: PUSH
40369: LD_VAR 0 4
40373: ARRAY
40374: EQUAL
40375: IFFALSE 40391
// begin result := i ;
40377: LD_ADDR_VAR 0 3
40381: PUSH
40382: LD_VAR 0 4
40386: ST_TO_ADDR
// exit ;
40387: POP
40388: POP
40389: GO 40395
// end ;
40391: GO 40356
40393: POP
40394: POP
// end ;
40395: LD_VAR 0 3
40399: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40400: LD_INT 0
40402: PPUSH
// vc_chassis := chassis ;
40403: LD_ADDR_OWVAR 37
40407: PUSH
40408: LD_VAR 0 1
40412: ST_TO_ADDR
// vc_engine := engine ;
40413: LD_ADDR_OWVAR 39
40417: PUSH
40418: LD_VAR 0 2
40422: ST_TO_ADDR
// vc_control := control ;
40423: LD_ADDR_OWVAR 38
40427: PUSH
40428: LD_VAR 0 3
40432: ST_TO_ADDR
// vc_weapon := weapon ;
40433: LD_ADDR_OWVAR 40
40437: PUSH
40438: LD_VAR 0 4
40442: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40443: LD_ADDR_OWVAR 41
40447: PUSH
40448: LD_VAR 0 5
40452: ST_TO_ADDR
// end ;
40453: LD_VAR 0 6
40457: RET
// export function WantPlant ( unit ) ; var task ; begin
40458: LD_INT 0
40460: PPUSH
40461: PPUSH
// result := false ;
40462: LD_ADDR_VAR 0 2
40466: PUSH
40467: LD_INT 0
40469: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40470: LD_ADDR_VAR 0 3
40474: PUSH
40475: LD_VAR 0 1
40479: PPUSH
40480: CALL_OW 437
40484: ST_TO_ADDR
// if task then
40485: LD_VAR 0 3
40489: IFFALSE 40517
// if task [ 1 ] [ 1 ] = p then
40491: LD_VAR 0 3
40495: PUSH
40496: LD_INT 1
40498: ARRAY
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: PUSH
40504: LD_STRING p
40506: EQUAL
40507: IFFALSE 40517
// result := true ;
40509: LD_ADDR_VAR 0 2
40513: PUSH
40514: LD_INT 1
40516: ST_TO_ADDR
// end ;
40517: LD_VAR 0 2
40521: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40522: LD_INT 0
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
// if pos < 1 then
40528: LD_VAR 0 2
40532: PUSH
40533: LD_INT 1
40535: LESS
40536: IFFALSE 40540
// exit ;
40538: GO 40843
// if pos = 1 then
40540: LD_VAR 0 2
40544: PUSH
40545: LD_INT 1
40547: EQUAL
40548: IFFALSE 40581
// result := Replace ( arr , pos [ 1 ] , value ) else
40550: LD_ADDR_VAR 0 4
40554: PUSH
40555: LD_VAR 0 1
40559: PPUSH
40560: LD_VAR 0 2
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: PPUSH
40569: LD_VAR 0 3
40573: PPUSH
40574: CALL_OW 1
40578: ST_TO_ADDR
40579: GO 40843
// begin tmp := arr ;
40581: LD_ADDR_VAR 0 6
40585: PUSH
40586: LD_VAR 0 1
40590: ST_TO_ADDR
// s_arr := [ tmp ] ;
40591: LD_ADDR_VAR 0 7
40595: PUSH
40596: LD_VAR 0 6
40600: PUSH
40601: EMPTY
40602: LIST
40603: ST_TO_ADDR
// for i = 1 to pos - 1 do
40604: LD_ADDR_VAR 0 5
40608: PUSH
40609: DOUBLE
40610: LD_INT 1
40612: DEC
40613: ST_TO_ADDR
40614: LD_VAR 0 2
40618: PUSH
40619: LD_INT 1
40621: MINUS
40622: PUSH
40623: FOR_TO
40624: IFFALSE 40669
// begin tmp := tmp [ pos [ i ] ] ;
40626: LD_ADDR_VAR 0 6
40630: PUSH
40631: LD_VAR 0 6
40635: PUSH
40636: LD_VAR 0 2
40640: PUSH
40641: LD_VAR 0 5
40645: ARRAY
40646: ARRAY
40647: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40648: LD_ADDR_VAR 0 7
40652: PUSH
40653: LD_VAR 0 7
40657: PUSH
40658: LD_VAR 0 6
40662: PUSH
40663: EMPTY
40664: LIST
40665: ADD
40666: ST_TO_ADDR
// end ;
40667: GO 40623
40669: POP
40670: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40671: LD_ADDR_VAR 0 6
40675: PUSH
40676: LD_VAR 0 6
40680: PPUSH
40681: LD_VAR 0 2
40685: PUSH
40686: LD_VAR 0 2
40690: ARRAY
40691: PPUSH
40692: LD_VAR 0 3
40696: PPUSH
40697: CALL_OW 1
40701: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40702: LD_ADDR_VAR 0 7
40706: PUSH
40707: LD_VAR 0 7
40711: PPUSH
40712: LD_VAR 0 7
40716: PPUSH
40717: LD_VAR 0 6
40721: PPUSH
40722: CALL_OW 1
40726: ST_TO_ADDR
// for i = s_arr downto 2 do
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: DOUBLE
40733: LD_VAR 0 7
40737: INC
40738: ST_TO_ADDR
40739: LD_INT 2
40741: PUSH
40742: FOR_DOWNTO
40743: IFFALSE 40827
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40745: LD_ADDR_VAR 0 6
40749: PUSH
40750: LD_VAR 0 7
40754: PUSH
40755: LD_VAR 0 5
40759: PUSH
40760: LD_INT 1
40762: MINUS
40763: ARRAY
40764: PPUSH
40765: LD_VAR 0 2
40769: PUSH
40770: LD_VAR 0 5
40774: PUSH
40775: LD_INT 1
40777: MINUS
40778: ARRAY
40779: PPUSH
40780: LD_VAR 0 7
40784: PUSH
40785: LD_VAR 0 5
40789: ARRAY
40790: PPUSH
40791: CALL_OW 1
40795: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40796: LD_ADDR_VAR 0 7
40800: PUSH
40801: LD_VAR 0 7
40805: PPUSH
40806: LD_VAR 0 5
40810: PUSH
40811: LD_INT 1
40813: MINUS
40814: PPUSH
40815: LD_VAR 0 6
40819: PPUSH
40820: CALL_OW 1
40824: ST_TO_ADDR
// end ;
40825: GO 40742
40827: POP
40828: POP
// result := s_arr [ 1 ] ;
40829: LD_ADDR_VAR 0 4
40833: PUSH
40834: LD_VAR 0 7
40838: PUSH
40839: LD_INT 1
40841: ARRAY
40842: ST_TO_ADDR
// end ; end ;
40843: LD_VAR 0 4
40847: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
// if not list then
40852: LD_VAR 0 1
40856: NOT
40857: IFFALSE 40861
// exit ;
40859: GO 40952
// i := list [ pos1 ] ;
40861: LD_ADDR_VAR 0 5
40865: PUSH
40866: LD_VAR 0 1
40870: PUSH
40871: LD_VAR 0 2
40875: ARRAY
40876: ST_TO_ADDR
// if not i then
40877: LD_VAR 0 5
40881: NOT
40882: IFFALSE 40886
// exit ;
40884: GO 40952
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40886: LD_ADDR_VAR 0 1
40890: PUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: LD_VAR 0 2
40900: PPUSH
40901: LD_VAR 0 1
40905: PUSH
40906: LD_VAR 0 3
40910: ARRAY
40911: PPUSH
40912: CALL_OW 1
40916: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40917: LD_ADDR_VAR 0 1
40921: PUSH
40922: LD_VAR 0 1
40926: PPUSH
40927: LD_VAR 0 3
40931: PPUSH
40932: LD_VAR 0 5
40936: PPUSH
40937: CALL_OW 1
40941: ST_TO_ADDR
// result := list ;
40942: LD_ADDR_VAR 0 4
40946: PUSH
40947: LD_VAR 0 1
40951: ST_TO_ADDR
// end ;
40952: LD_VAR 0 4
40956: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40957: LD_INT 0
40959: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40960: LD_ADDR_VAR 0 5
40964: PUSH
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 250
40974: PPUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 251
40984: PPUSH
40985: LD_VAR 0 2
40989: PPUSH
40990: LD_VAR 0 3
40994: PPUSH
40995: LD_VAR 0 4
40999: PPUSH
41000: CALL 41378 0 5
41004: ST_TO_ADDR
// end ;
41005: LD_VAR 0 5
41009: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41010: LD_INT 0
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
// if not list or not unit then
41016: LD_VAR 0 2
41020: NOT
41021: PUSH
41022: LD_VAR 0 1
41026: NOT
41027: OR
41028: IFFALSE 41032
// exit ;
41030: GO 41373
// result := [ ] ;
41032: LD_ADDR_VAR 0 5
41036: PUSH
41037: EMPTY
41038: ST_TO_ADDR
// for i in list do
41039: LD_ADDR_VAR 0 6
41043: PUSH
41044: LD_VAR 0 2
41048: PUSH
41049: FOR_IN
41050: IFFALSE 41268
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41052: LD_ADDR_VAR 0 8
41056: PUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: LD_VAR 0 6
41066: PUSH
41067: LD_INT 1
41069: ARRAY
41070: PPUSH
41071: LD_VAR 0 6
41075: PUSH
41076: LD_INT 2
41078: ARRAY
41079: PPUSH
41080: CALL_OW 297
41084: ST_TO_ADDR
// if not Count ( result ) then
41085: LD_VAR 0 5
41089: PPUSH
41090: CALL 37662 0 1
41094: NOT
41095: IFFALSE 41128
// begin result := Join ( result , [ i , tmp ] ) ;
41097: LD_ADDR_VAR 0 5
41101: PUSH
41102: LD_VAR 0 5
41106: PPUSH
41107: LD_VAR 0 6
41111: PUSH
41112: LD_VAR 0 8
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PPUSH
41121: CALL 73262 0 2
41125: ST_TO_ADDR
// continue ;
41126: GO 41049
// end ; if result [ result ] [ 2 ] <= tmp then
41128: LD_VAR 0 5
41132: PUSH
41133: LD_VAR 0 5
41137: ARRAY
41138: PUSH
41139: LD_INT 2
41141: ARRAY
41142: PUSH
41143: LD_VAR 0 8
41147: LESSEQUAL
41148: IFFALSE 41181
// result := Join ( result , [ i , tmp ] ) else
41150: LD_ADDR_VAR 0 5
41154: PUSH
41155: LD_VAR 0 5
41159: PPUSH
41160: LD_VAR 0 6
41164: PUSH
41165: LD_VAR 0 8
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PPUSH
41174: CALL 73262 0 2
41178: ST_TO_ADDR
41179: GO 41266
// begin for j := 1 to Count ( result ) do
41181: LD_ADDR_VAR 0 7
41185: PUSH
41186: DOUBLE
41187: LD_INT 1
41189: DEC
41190: ST_TO_ADDR
41191: LD_VAR 0 5
41195: PPUSH
41196: CALL 37662 0 1
41200: PUSH
41201: FOR_TO
41202: IFFALSE 41264
// begin if tmp < result [ j ] [ 2 ] then
41204: LD_VAR 0 8
41208: PUSH
41209: LD_VAR 0 5
41213: PUSH
41214: LD_VAR 0 7
41218: ARRAY
41219: PUSH
41220: LD_INT 2
41222: ARRAY
41223: LESS
41224: IFFALSE 41262
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41226: LD_ADDR_VAR 0 5
41230: PUSH
41231: LD_VAR 0 5
41235: PPUSH
41236: LD_VAR 0 7
41240: PPUSH
41241: LD_VAR 0 6
41245: PUSH
41246: LD_VAR 0 8
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PPUSH
41255: CALL_OW 2
41259: ST_TO_ADDR
// break ;
41260: GO 41264
// end ; end ;
41262: GO 41201
41264: POP
41265: POP
// end ; end ;
41266: GO 41049
41268: POP
41269: POP
// if result and not asc then
41270: LD_VAR 0 5
41274: PUSH
41275: LD_VAR 0 3
41279: NOT
41280: AND
41281: IFFALSE 41298
// result := ReverseArray ( result ) ;
41283: LD_ADDR_VAR 0 5
41287: PUSH
41288: LD_VAR 0 5
41292: PPUSH
41293: CALL 68538 0 1
41297: ST_TO_ADDR
// tmp := [ ] ;
41298: LD_ADDR_VAR 0 8
41302: PUSH
41303: EMPTY
41304: ST_TO_ADDR
// if mode then
41305: LD_VAR 0 4
41309: IFFALSE 41373
// begin for i := 1 to result do
41311: LD_ADDR_VAR 0 6
41315: PUSH
41316: DOUBLE
41317: LD_INT 1
41319: DEC
41320: ST_TO_ADDR
41321: LD_VAR 0 5
41325: PUSH
41326: FOR_TO
41327: IFFALSE 41361
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41329: LD_ADDR_VAR 0 8
41333: PUSH
41334: LD_VAR 0 8
41338: PPUSH
41339: LD_VAR 0 5
41343: PUSH
41344: LD_VAR 0 6
41348: ARRAY
41349: PUSH
41350: LD_INT 1
41352: ARRAY
41353: PPUSH
41354: CALL 73262 0 2
41358: ST_TO_ADDR
41359: GO 41326
41361: POP
41362: POP
// result := tmp ;
41363: LD_ADDR_VAR 0 5
41367: PUSH
41368: LD_VAR 0 8
41372: ST_TO_ADDR
// end ; end ;
41373: LD_VAR 0 5
41377: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41378: LD_INT 0
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
// if not list then
41384: LD_VAR 0 3
41388: NOT
41389: IFFALSE 41393
// exit ;
41391: GO 41781
// result := [ ] ;
41393: LD_ADDR_VAR 0 6
41397: PUSH
41398: EMPTY
41399: ST_TO_ADDR
// for i in list do
41400: LD_ADDR_VAR 0 7
41404: PUSH
41405: LD_VAR 0 3
41409: PUSH
41410: FOR_IN
41411: IFFALSE 41613
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41413: LD_ADDR_VAR 0 9
41417: PUSH
41418: LD_VAR 0 7
41422: PPUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: LD_VAR 0 2
41432: PPUSH
41433: CALL_OW 297
41437: ST_TO_ADDR
// if not result then
41438: LD_VAR 0 6
41442: NOT
41443: IFFALSE 41469
// result := [ [ i , tmp ] ] else
41445: LD_ADDR_VAR 0 6
41449: PUSH
41450: LD_VAR 0 7
41454: PUSH
41455: LD_VAR 0 9
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: EMPTY
41465: LIST
41466: ST_TO_ADDR
41467: GO 41611
// begin if result [ result ] [ 2 ] < tmp then
41469: LD_VAR 0 6
41473: PUSH
41474: LD_VAR 0 6
41478: ARRAY
41479: PUSH
41480: LD_INT 2
41482: ARRAY
41483: PUSH
41484: LD_VAR 0 9
41488: LESS
41489: IFFALSE 41531
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41491: LD_ADDR_VAR 0 6
41495: PUSH
41496: LD_VAR 0 6
41500: PPUSH
41501: LD_VAR 0 6
41505: PUSH
41506: LD_INT 1
41508: PLUS
41509: PPUSH
41510: LD_VAR 0 7
41514: PUSH
41515: LD_VAR 0 9
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PPUSH
41524: CALL_OW 2
41528: ST_TO_ADDR
41529: GO 41611
// for j = 1 to result do
41531: LD_ADDR_VAR 0 8
41535: PUSH
41536: DOUBLE
41537: LD_INT 1
41539: DEC
41540: ST_TO_ADDR
41541: LD_VAR 0 6
41545: PUSH
41546: FOR_TO
41547: IFFALSE 41609
// begin if tmp < result [ j ] [ 2 ] then
41549: LD_VAR 0 9
41553: PUSH
41554: LD_VAR 0 6
41558: PUSH
41559: LD_VAR 0 8
41563: ARRAY
41564: PUSH
41565: LD_INT 2
41567: ARRAY
41568: LESS
41569: IFFALSE 41607
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41571: LD_ADDR_VAR 0 6
41575: PUSH
41576: LD_VAR 0 6
41580: PPUSH
41581: LD_VAR 0 8
41585: PPUSH
41586: LD_VAR 0 7
41590: PUSH
41591: LD_VAR 0 9
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PPUSH
41600: CALL_OW 2
41604: ST_TO_ADDR
// break ;
41605: GO 41609
// end ; end ;
41607: GO 41546
41609: POP
41610: POP
// end ; end ;
41611: GO 41410
41613: POP
41614: POP
// if result and not asc then
41615: LD_VAR 0 6
41619: PUSH
41620: LD_VAR 0 4
41624: NOT
41625: AND
41626: IFFALSE 41701
// begin tmp := result ;
41628: LD_ADDR_VAR 0 9
41632: PUSH
41633: LD_VAR 0 6
41637: ST_TO_ADDR
// for i = tmp downto 1 do
41638: LD_ADDR_VAR 0 7
41642: PUSH
41643: DOUBLE
41644: LD_VAR 0 9
41648: INC
41649: ST_TO_ADDR
41650: LD_INT 1
41652: PUSH
41653: FOR_DOWNTO
41654: IFFALSE 41699
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41656: LD_ADDR_VAR 0 6
41660: PUSH
41661: LD_VAR 0 6
41665: PPUSH
41666: LD_VAR 0 9
41670: PUSH
41671: LD_VAR 0 7
41675: MINUS
41676: PUSH
41677: LD_INT 1
41679: PLUS
41680: PPUSH
41681: LD_VAR 0 9
41685: PUSH
41686: LD_VAR 0 7
41690: ARRAY
41691: PPUSH
41692: CALL_OW 1
41696: ST_TO_ADDR
41697: GO 41653
41699: POP
41700: POP
// end ; tmp := [ ] ;
41701: LD_ADDR_VAR 0 9
41705: PUSH
41706: EMPTY
41707: ST_TO_ADDR
// if mode then
41708: LD_VAR 0 5
41712: IFFALSE 41781
// begin for i = 1 to result do
41714: LD_ADDR_VAR 0 7
41718: PUSH
41719: DOUBLE
41720: LD_INT 1
41722: DEC
41723: ST_TO_ADDR
41724: LD_VAR 0 6
41728: PUSH
41729: FOR_TO
41730: IFFALSE 41769
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41732: LD_ADDR_VAR 0 9
41736: PUSH
41737: LD_VAR 0 9
41741: PPUSH
41742: LD_VAR 0 7
41746: PPUSH
41747: LD_VAR 0 6
41751: PUSH
41752: LD_VAR 0 7
41756: ARRAY
41757: PUSH
41758: LD_INT 1
41760: ARRAY
41761: PPUSH
41762: CALL_OW 1
41766: ST_TO_ADDR
41767: GO 41729
41769: POP
41770: POP
// result := tmp ;
41771: LD_ADDR_VAR 0 6
41775: PUSH
41776: LD_VAR 0 9
41780: ST_TO_ADDR
// end ; end ;
41781: LD_VAR 0 6
41785: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41786: LD_INT 0
41788: PPUSH
41789: PPUSH
41790: PPUSH
41791: PPUSH
41792: PPUSH
41793: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41794: LD_ADDR_VAR 0 5
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: ST_TO_ADDR
// if not x or not y then
41816: LD_VAR 0 2
41820: NOT
41821: PUSH
41822: LD_VAR 0 3
41826: NOT
41827: OR
41828: IFFALSE 41832
// exit ;
41830: GO 43482
// if not range then
41832: LD_VAR 0 4
41836: NOT
41837: IFFALSE 41847
// range := 10 ;
41839: LD_ADDR_VAR 0 4
41843: PUSH
41844: LD_INT 10
41846: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41847: LD_ADDR_VAR 0 8
41851: PUSH
41852: LD_INT 81
41854: PUSH
41855: LD_VAR 0 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 92
41866: PUSH
41867: LD_VAR 0 2
41871: PUSH
41872: LD_VAR 0 3
41876: PUSH
41877: LD_VAR 0 4
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: LD_INT 21
41893: PUSH
41894: LD_INT 3
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: PPUSH
41910: CALL_OW 69
41914: ST_TO_ADDR
// if not tmp then
41915: LD_VAR 0 8
41919: NOT
41920: IFFALSE 41924
// exit ;
41922: GO 43482
// for i in tmp do
41924: LD_ADDR_VAR 0 6
41928: PUSH
41929: LD_VAR 0 8
41933: PUSH
41934: FOR_IN
41935: IFFALSE 43457
// begin points := [ 0 , 0 , 0 ] ;
41937: LD_ADDR_VAR 0 9
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// bpoints := 1 ;
41956: LD_ADDR_VAR 0 10
41960: PUSH
41961: LD_INT 1
41963: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41964: LD_VAR 0 6
41968: PPUSH
41969: CALL_OW 247
41973: PUSH
41974: LD_INT 1
41976: DOUBLE
41977: EQUAL
41978: IFTRUE 41982
41980: GO 42560
41982: POP
// begin if GetClass ( i ) = 1 then
41983: LD_VAR 0 6
41987: PPUSH
41988: CALL_OW 257
41992: PUSH
41993: LD_INT 1
41995: EQUAL
41996: IFFALSE 42017
// points := [ 10 , 5 , 3 ] ;
41998: LD_ADDR_VAR 0 9
42002: PUSH
42003: LD_INT 10
42005: PUSH
42006: LD_INT 5
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42017: LD_VAR 0 6
42021: PPUSH
42022: CALL_OW 257
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 4
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: IN
42041: IFFALSE 42062
// points := [ 3 , 2 , 1 ] ;
42043: LD_ADDR_VAR 0 9
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42062: LD_VAR 0 6
42066: PPUSH
42067: CALL_OW 257
42071: PUSH
42072: LD_INT 5
42074: EQUAL
42075: IFFALSE 42096
// points := [ 130 , 5 , 2 ] ;
42077: LD_ADDR_VAR 0 9
42081: PUSH
42082: LD_INT 130
42084: PUSH
42085: LD_INT 5
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42096: LD_VAR 0 6
42100: PPUSH
42101: CALL_OW 257
42105: PUSH
42106: LD_INT 8
42108: EQUAL
42109: IFFALSE 42130
// points := [ 35 , 35 , 30 ] ;
42111: LD_ADDR_VAR 0 9
42115: PUSH
42116: LD_INT 35
42118: PUSH
42119: LD_INT 35
42121: PUSH
42122: LD_INT 30
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42130: LD_VAR 0 6
42134: PPUSH
42135: CALL_OW 257
42139: PUSH
42140: LD_INT 9
42142: EQUAL
42143: IFFALSE 42164
// points := [ 20 , 55 , 40 ] ;
42145: LD_ADDR_VAR 0 9
42149: PUSH
42150: LD_INT 20
42152: PUSH
42153: LD_INT 55
42155: PUSH
42156: LD_INT 40
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42164: LD_VAR 0 6
42168: PPUSH
42169: CALL_OW 257
42173: PUSH
42174: LD_INT 12
42176: PUSH
42177: LD_INT 16
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: IN
42184: IFFALSE 42205
// points := [ 5 , 3 , 2 ] ;
42186: LD_ADDR_VAR 0 9
42190: PUSH
42191: LD_INT 5
42193: PUSH
42194: LD_INT 3
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42205: LD_VAR 0 6
42209: PPUSH
42210: CALL_OW 257
42214: PUSH
42215: LD_INT 17
42217: EQUAL
42218: IFFALSE 42239
// points := [ 100 , 50 , 75 ] ;
42220: LD_ADDR_VAR 0 9
42224: PUSH
42225: LD_INT 100
42227: PUSH
42228: LD_INT 50
42230: PUSH
42231: LD_INT 75
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42239: LD_VAR 0 6
42243: PPUSH
42244: CALL_OW 257
42248: PUSH
42249: LD_INT 15
42251: EQUAL
42252: IFFALSE 42273
// points := [ 10 , 5 , 3 ] ;
42254: LD_ADDR_VAR 0 9
42258: PUSH
42259: LD_INT 10
42261: PUSH
42262: LD_INT 5
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42273: LD_VAR 0 6
42277: PPUSH
42278: CALL_OW 257
42282: PUSH
42283: LD_INT 14
42285: EQUAL
42286: IFFALSE 42307
// points := [ 10 , 0 , 0 ] ;
42288: LD_ADDR_VAR 0 9
42292: PUSH
42293: LD_INT 10
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42307: LD_VAR 0 6
42311: PPUSH
42312: CALL_OW 257
42316: PUSH
42317: LD_INT 11
42319: EQUAL
42320: IFFALSE 42341
// points := [ 30 , 10 , 5 ] ;
42322: LD_ADDR_VAR 0 9
42326: PUSH
42327: LD_INT 30
42329: PUSH
42330: LD_INT 10
42332: PUSH
42333: LD_INT 5
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42341: LD_VAR 0 1
42345: PPUSH
42346: LD_INT 5
42348: PPUSH
42349: CALL_OW 321
42353: PUSH
42354: LD_INT 2
42356: EQUAL
42357: IFFALSE 42374
// bpoints := bpoints * 1.8 ;
42359: LD_ADDR_VAR 0 10
42363: PUSH
42364: LD_VAR 0 10
42368: PUSH
42369: LD_REAL  1.80000000000000E+0000
42372: MUL
42373: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42374: LD_VAR 0 6
42378: PPUSH
42379: CALL_OW 257
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 4
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: IN
42402: PUSH
42403: LD_VAR 0 1
42407: PPUSH
42408: LD_INT 51
42410: PPUSH
42411: CALL_OW 321
42415: PUSH
42416: LD_INT 2
42418: EQUAL
42419: AND
42420: IFFALSE 42437
// bpoints := bpoints * 1.2 ;
42422: LD_ADDR_VAR 0 10
42426: PUSH
42427: LD_VAR 0 10
42431: PUSH
42432: LD_REAL  1.20000000000000E+0000
42435: MUL
42436: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42437: LD_VAR 0 6
42441: PPUSH
42442: CALL_OW 257
42446: PUSH
42447: LD_INT 5
42449: PUSH
42450: LD_INT 7
42452: PUSH
42453: LD_INT 9
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: IN
42461: PUSH
42462: LD_VAR 0 1
42466: PPUSH
42467: LD_INT 52
42469: PPUSH
42470: CALL_OW 321
42474: PUSH
42475: LD_INT 2
42477: EQUAL
42478: AND
42479: IFFALSE 42496
// bpoints := bpoints * 1.5 ;
42481: LD_ADDR_VAR 0 10
42485: PUSH
42486: LD_VAR 0 10
42490: PUSH
42491: LD_REAL  1.50000000000000E+0000
42494: MUL
42495: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42496: LD_VAR 0 1
42500: PPUSH
42501: LD_INT 66
42503: PPUSH
42504: CALL_OW 321
42508: PUSH
42509: LD_INT 2
42511: EQUAL
42512: IFFALSE 42529
// bpoints := bpoints * 1.1 ;
42514: LD_ADDR_VAR 0 10
42518: PUSH
42519: LD_VAR 0 10
42523: PUSH
42524: LD_REAL  1.10000000000000E+0000
42527: MUL
42528: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42529: LD_ADDR_VAR 0 10
42533: PUSH
42534: LD_VAR 0 10
42538: PUSH
42539: LD_VAR 0 6
42543: PPUSH
42544: LD_INT 1
42546: PPUSH
42547: CALL_OW 259
42551: PUSH
42552: LD_REAL  1.15000000000000E+0000
42555: MUL
42556: MUL
42557: ST_TO_ADDR
// end ; unit_vehicle :
42558: GO 43386
42560: LD_INT 2
42562: DOUBLE
42563: EQUAL
42564: IFTRUE 42568
42566: GO 43374
42568: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42569: LD_VAR 0 6
42573: PPUSH
42574: CALL_OW 264
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: LD_INT 42
42584: PUSH
42585: LD_INT 24
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: IN
42593: IFFALSE 42614
// points := [ 25 , 5 , 3 ] ;
42595: LD_ADDR_VAR 0 9
42599: PUSH
42600: LD_INT 25
42602: PUSH
42603: LD_INT 5
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42614: LD_VAR 0 6
42618: PPUSH
42619: CALL_OW 264
42623: PUSH
42624: LD_INT 4
42626: PUSH
42627: LD_INT 43
42629: PUSH
42630: LD_INT 25
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: IN
42638: IFFALSE 42659
// points := [ 40 , 15 , 5 ] ;
42640: LD_ADDR_VAR 0 9
42644: PUSH
42645: LD_INT 40
42647: PUSH
42648: LD_INT 15
42650: PUSH
42651: LD_INT 5
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42659: LD_VAR 0 6
42663: PPUSH
42664: CALL_OW 264
42668: PUSH
42669: LD_INT 3
42671: PUSH
42672: LD_INT 23
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: IN
42679: IFFALSE 42700
// points := [ 7 , 25 , 8 ] ;
42681: LD_ADDR_VAR 0 9
42685: PUSH
42686: LD_INT 7
42688: PUSH
42689: LD_INT 25
42691: PUSH
42692: LD_INT 8
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42700: LD_VAR 0 6
42704: PPUSH
42705: CALL_OW 264
42709: PUSH
42710: LD_INT 5
42712: PUSH
42713: LD_INT 27
42715: PUSH
42716: LD_INT 44
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: IN
42724: IFFALSE 42745
// points := [ 14 , 50 , 16 ] ;
42726: LD_ADDR_VAR 0 9
42730: PUSH
42731: LD_INT 14
42733: PUSH
42734: LD_INT 50
42736: PUSH
42737: LD_INT 16
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42745: LD_VAR 0 6
42749: PPUSH
42750: CALL_OW 264
42754: PUSH
42755: LD_INT 6
42757: PUSH
42758: LD_INT 46
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: IN
42765: IFFALSE 42786
// points := [ 32 , 120 , 70 ] ;
42767: LD_ADDR_VAR 0 9
42771: PUSH
42772: LD_INT 32
42774: PUSH
42775: LD_INT 120
42777: PUSH
42778: LD_INT 70
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42786: LD_VAR 0 6
42790: PPUSH
42791: CALL_OW 264
42795: PUSH
42796: LD_INT 7
42798: PUSH
42799: LD_INT 28
42801: PUSH
42802: LD_INT 45
42804: PUSH
42805: LD_INT 92
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: IN
42814: IFFALSE 42835
// points := [ 35 , 20 , 45 ] ;
42816: LD_ADDR_VAR 0 9
42820: PUSH
42821: LD_INT 35
42823: PUSH
42824: LD_INT 20
42826: PUSH
42827: LD_INT 45
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42835: LD_VAR 0 6
42839: PPUSH
42840: CALL_OW 264
42844: PUSH
42845: LD_INT 47
42847: PUSH
42848: EMPTY
42849: LIST
42850: IN
42851: IFFALSE 42872
// points := [ 67 , 45 , 75 ] ;
42853: LD_ADDR_VAR 0 9
42857: PUSH
42858: LD_INT 67
42860: PUSH
42861: LD_INT 45
42863: PUSH
42864: LD_INT 75
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42872: LD_VAR 0 6
42876: PPUSH
42877: CALL_OW 264
42881: PUSH
42882: LD_INT 26
42884: PUSH
42885: EMPTY
42886: LIST
42887: IN
42888: IFFALSE 42909
// points := [ 120 , 30 , 80 ] ;
42890: LD_ADDR_VAR 0 9
42894: PUSH
42895: LD_INT 120
42897: PUSH
42898: LD_INT 30
42900: PUSH
42901: LD_INT 80
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42909: LD_VAR 0 6
42913: PPUSH
42914: CALL_OW 264
42918: PUSH
42919: LD_INT 22
42921: PUSH
42922: EMPTY
42923: LIST
42924: IN
42925: IFFALSE 42946
// points := [ 40 , 1 , 1 ] ;
42927: LD_ADDR_VAR 0 9
42931: PUSH
42932: LD_INT 40
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42946: LD_VAR 0 6
42950: PPUSH
42951: CALL_OW 264
42955: PUSH
42956: LD_INT 29
42958: PUSH
42959: EMPTY
42960: LIST
42961: IN
42962: IFFALSE 42983
// points := [ 70 , 200 , 400 ] ;
42964: LD_ADDR_VAR 0 9
42968: PUSH
42969: LD_INT 70
42971: PUSH
42972: LD_INT 200
42974: PUSH
42975: LD_INT 400
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42983: LD_VAR 0 6
42987: PPUSH
42988: CALL_OW 264
42992: PUSH
42993: LD_INT 14
42995: PUSH
42996: LD_INT 53
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: IN
43003: IFFALSE 43024
// points := [ 40 , 10 , 20 ] ;
43005: LD_ADDR_VAR 0 9
43009: PUSH
43010: LD_INT 40
43012: PUSH
43013: LD_INT 10
43015: PUSH
43016: LD_INT 20
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43024: LD_VAR 0 6
43028: PPUSH
43029: CALL_OW 264
43033: PUSH
43034: LD_INT 9
43036: PUSH
43037: EMPTY
43038: LIST
43039: IN
43040: IFFALSE 43061
// points := [ 5 , 70 , 20 ] ;
43042: LD_ADDR_VAR 0 9
43046: PUSH
43047: LD_INT 5
43049: PUSH
43050: LD_INT 70
43052: PUSH
43053: LD_INT 20
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43061: LD_VAR 0 6
43065: PPUSH
43066: CALL_OW 264
43070: PUSH
43071: LD_INT 10
43073: PUSH
43074: EMPTY
43075: LIST
43076: IN
43077: IFFALSE 43098
// points := [ 35 , 110 , 70 ] ;
43079: LD_ADDR_VAR 0 9
43083: PUSH
43084: LD_INT 35
43086: PUSH
43087: LD_INT 110
43089: PUSH
43090: LD_INT 70
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43098: LD_VAR 0 6
43102: PPUSH
43103: CALL_OW 265
43107: PUSH
43108: LD_INT 25
43110: EQUAL
43111: IFFALSE 43132
// points := [ 80 , 65 , 100 ] ;
43113: LD_ADDR_VAR 0 9
43117: PUSH
43118: LD_INT 80
43120: PUSH
43121: LD_INT 65
43123: PUSH
43124: LD_INT 100
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43132: LD_VAR 0 6
43136: PPUSH
43137: CALL_OW 263
43141: PUSH
43142: LD_INT 1
43144: EQUAL
43145: IFFALSE 43180
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43147: LD_ADDR_VAR 0 10
43151: PUSH
43152: LD_VAR 0 10
43156: PUSH
43157: LD_VAR 0 6
43161: PPUSH
43162: CALL_OW 311
43166: PPUSH
43167: LD_INT 3
43169: PPUSH
43170: CALL_OW 259
43174: PUSH
43175: LD_INT 4
43177: MUL
43178: MUL
43179: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43180: LD_VAR 0 6
43184: PPUSH
43185: CALL_OW 263
43189: PUSH
43190: LD_INT 2
43192: EQUAL
43193: IFFALSE 43244
// begin j := IsControledBy ( i ) ;
43195: LD_ADDR_VAR 0 7
43199: PUSH
43200: LD_VAR 0 6
43204: PPUSH
43205: CALL_OW 312
43209: ST_TO_ADDR
// if j then
43210: LD_VAR 0 7
43214: IFFALSE 43244
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43216: LD_ADDR_VAR 0 10
43220: PUSH
43221: LD_VAR 0 10
43225: PUSH
43226: LD_VAR 0 7
43230: PPUSH
43231: LD_INT 3
43233: PPUSH
43234: CALL_OW 259
43238: PUSH
43239: LD_INT 3
43241: MUL
43242: MUL
43243: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43244: LD_VAR 0 6
43248: PPUSH
43249: CALL_OW 264
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: LD_INT 6
43259: PUSH
43260: LD_INT 46
43262: PUSH
43263: LD_INT 44
43265: PUSH
43266: LD_INT 47
43268: PUSH
43269: LD_INT 45
43271: PUSH
43272: LD_INT 28
43274: PUSH
43275: LD_INT 7
43277: PUSH
43278: LD_INT 27
43280: PUSH
43281: LD_INT 29
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: IN
43296: PUSH
43297: LD_VAR 0 1
43301: PPUSH
43302: LD_INT 52
43304: PPUSH
43305: CALL_OW 321
43309: PUSH
43310: LD_INT 2
43312: EQUAL
43313: AND
43314: IFFALSE 43331
// bpoints := bpoints * 1.2 ;
43316: LD_ADDR_VAR 0 10
43320: PUSH
43321: LD_VAR 0 10
43325: PUSH
43326: LD_REAL  1.20000000000000E+0000
43329: MUL
43330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43331: LD_VAR 0 6
43335: PPUSH
43336: CALL_OW 264
43340: PUSH
43341: LD_INT 6
43343: PUSH
43344: LD_INT 46
43346: PUSH
43347: LD_INT 47
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: IN
43355: IFFALSE 43372
// bpoints := bpoints * 1.2 ;
43357: LD_ADDR_VAR 0 10
43361: PUSH
43362: LD_VAR 0 10
43366: PUSH
43367: LD_REAL  1.20000000000000E+0000
43370: MUL
43371: ST_TO_ADDR
// end ; unit_building :
43372: GO 43386
43374: LD_INT 3
43376: DOUBLE
43377: EQUAL
43378: IFTRUE 43382
43380: GO 43385
43382: POP
// ; end ;
43383: GO 43386
43385: POP
// for j = 1 to 3 do
43386: LD_ADDR_VAR 0 7
43390: PUSH
43391: DOUBLE
43392: LD_INT 1
43394: DEC
43395: ST_TO_ADDR
43396: LD_INT 3
43398: PUSH
43399: FOR_TO
43400: IFFALSE 43453
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43402: LD_ADDR_VAR 0 5
43406: PUSH
43407: LD_VAR 0 5
43411: PPUSH
43412: LD_VAR 0 7
43416: PPUSH
43417: LD_VAR 0 5
43421: PUSH
43422: LD_VAR 0 7
43426: ARRAY
43427: PUSH
43428: LD_VAR 0 9
43432: PUSH
43433: LD_VAR 0 7
43437: ARRAY
43438: PUSH
43439: LD_VAR 0 10
43443: MUL
43444: PLUS
43445: PPUSH
43446: CALL_OW 1
43450: ST_TO_ADDR
43451: GO 43399
43453: POP
43454: POP
// end ;
43455: GO 41934
43457: POP
43458: POP
// result := Replace ( result , 4 , tmp ) ;
43459: LD_ADDR_VAR 0 5
43463: PUSH
43464: LD_VAR 0 5
43468: PPUSH
43469: LD_INT 4
43471: PPUSH
43472: LD_VAR 0 8
43476: PPUSH
43477: CALL_OW 1
43481: ST_TO_ADDR
// end ;
43482: LD_VAR 0 5
43486: RET
// export function DangerAtRange ( unit , range ) ; begin
43487: LD_INT 0
43489: PPUSH
// if not unit then
43490: LD_VAR 0 1
43494: NOT
43495: IFFALSE 43499
// exit ;
43497: GO 43544
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 255
43513: PPUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 250
43523: PPUSH
43524: LD_VAR 0 1
43528: PPUSH
43529: CALL_OW 251
43533: PPUSH
43534: LD_VAR 0 2
43538: PPUSH
43539: CALL 41786 0 4
43543: ST_TO_ADDR
// end ;
43544: LD_VAR 0 3
43548: RET
// export function DangerInArea ( side , area ) ; begin
43549: LD_INT 0
43551: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_VAR 0 2
43561: PPUSH
43562: LD_INT 81
43564: PUSH
43565: LD_VAR 0 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PPUSH
43574: CALL_OW 70
43578: ST_TO_ADDR
// end ;
43579: LD_VAR 0 3
43583: RET
// export function IsExtension ( b ) ; begin
43584: LD_INT 0
43586: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43587: LD_ADDR_VAR 0 2
43591: PUSH
43592: LD_VAR 0 1
43596: PUSH
43597: LD_INT 23
43599: PUSH
43600: LD_INT 20
43602: PUSH
43603: LD_INT 22
43605: PUSH
43606: LD_INT 17
43608: PUSH
43609: LD_INT 24
43611: PUSH
43612: LD_INT 21
43614: PUSH
43615: LD_INT 19
43617: PUSH
43618: LD_INT 16
43620: PUSH
43621: LD_INT 25
43623: PUSH
43624: LD_INT 18
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: IN
43639: ST_TO_ADDR
// end ;
43640: LD_VAR 0 2
43644: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43645: LD_INT 0
43647: PPUSH
43648: PPUSH
43649: PPUSH
// result := [ ] ;
43650: LD_ADDR_VAR 0 4
43654: PUSH
43655: EMPTY
43656: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43657: LD_ADDR_VAR 0 5
43661: PUSH
43662: LD_VAR 0 2
43666: PPUSH
43667: LD_INT 21
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PPUSH
43677: CALL_OW 70
43681: ST_TO_ADDR
// if not tmp then
43682: LD_VAR 0 5
43686: NOT
43687: IFFALSE 43691
// exit ;
43689: GO 43755
// if checkLink then
43691: LD_VAR 0 3
43695: IFFALSE 43745
// begin for i in tmp do
43697: LD_ADDR_VAR 0 6
43701: PUSH
43702: LD_VAR 0 5
43706: PUSH
43707: FOR_IN
43708: IFFALSE 43743
// if GetBase ( i ) <> base then
43710: LD_VAR 0 6
43714: PPUSH
43715: CALL_OW 274
43719: PUSH
43720: LD_VAR 0 1
43724: NONEQUAL
43725: IFFALSE 43741
// ComLinkToBase ( base , i ) ;
43727: LD_VAR 0 1
43731: PPUSH
43732: LD_VAR 0 6
43736: PPUSH
43737: CALL_OW 169
43741: GO 43707
43743: POP
43744: POP
// end ; result := tmp ;
43745: LD_ADDR_VAR 0 4
43749: PUSH
43750: LD_VAR 0 5
43754: ST_TO_ADDR
// end ;
43755: LD_VAR 0 4
43759: RET
// export function ComComplete ( units , b ) ; var i ; begin
43760: LD_INT 0
43762: PPUSH
43763: PPUSH
// if not units then
43764: LD_VAR 0 1
43768: NOT
43769: IFFALSE 43773
// exit ;
43771: GO 43863
// for i in units do
43773: LD_ADDR_VAR 0 4
43777: PUSH
43778: LD_VAR 0 1
43782: PUSH
43783: FOR_IN
43784: IFFALSE 43861
// if BuildingStatus ( b ) = bs_build then
43786: LD_VAR 0 2
43790: PPUSH
43791: CALL_OW 461
43795: PUSH
43796: LD_INT 1
43798: EQUAL
43799: IFFALSE 43859
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43801: LD_VAR 0 4
43805: PPUSH
43806: LD_STRING h
43808: PUSH
43809: LD_VAR 0 2
43813: PPUSH
43814: CALL_OW 250
43818: PUSH
43819: LD_VAR 0 2
43823: PPUSH
43824: CALL_OW 251
43828: PUSH
43829: LD_VAR 0 2
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: PUSH
43852: EMPTY
43853: LIST
43854: PPUSH
43855: CALL_OW 446
43859: GO 43783
43861: POP
43862: POP
// end ;
43863: LD_VAR 0 3
43867: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43868: LD_INT 0
43870: PPUSH
43871: PPUSH
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43876: LD_VAR 0 1
43880: NOT
43881: PUSH
43882: LD_VAR 0 1
43886: PPUSH
43887: CALL_OW 263
43891: PUSH
43892: LD_INT 2
43894: NONEQUAL
43895: OR
43896: IFFALSE 43900
// exit ;
43898: GO 44216
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43900: LD_ADDR_VAR 0 6
43904: PUSH
43905: LD_INT 22
43907: PUSH
43908: LD_VAR 0 1
43912: PPUSH
43913: CALL_OW 255
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: LD_INT 30
43927: PUSH
43928: LD_INT 36
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 34
43937: PUSH
43938: LD_INT 31
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PPUSH
43954: CALL_OW 69
43958: ST_TO_ADDR
// if not tmp then
43959: LD_VAR 0 6
43963: NOT
43964: IFFALSE 43968
// exit ;
43966: GO 44216
// result := [ ] ;
43968: LD_ADDR_VAR 0 2
43972: PUSH
43973: EMPTY
43974: ST_TO_ADDR
// for i in tmp do
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_VAR 0 6
43984: PUSH
43985: FOR_IN
43986: IFFALSE 44057
// begin t := UnitsInside ( i ) ;
43988: LD_ADDR_VAR 0 4
43992: PUSH
43993: LD_VAR 0 3
43997: PPUSH
43998: CALL_OW 313
44002: ST_TO_ADDR
// if t then
44003: LD_VAR 0 4
44007: IFFALSE 44055
// for j in t do
44009: LD_ADDR_VAR 0 7
44013: PUSH
44014: LD_VAR 0 4
44018: PUSH
44019: FOR_IN
44020: IFFALSE 44053
// result := Replace ( result , result + 1 , j ) ;
44022: LD_ADDR_VAR 0 2
44026: PUSH
44027: LD_VAR 0 2
44031: PPUSH
44032: LD_VAR 0 2
44036: PUSH
44037: LD_INT 1
44039: PLUS
44040: PPUSH
44041: LD_VAR 0 7
44045: PPUSH
44046: CALL_OW 1
44050: ST_TO_ADDR
44051: GO 44019
44053: POP
44054: POP
// end ;
44055: GO 43985
44057: POP
44058: POP
// if not result then
44059: LD_VAR 0 2
44063: NOT
44064: IFFALSE 44068
// exit ;
44066: GO 44216
// mech := result [ 1 ] ;
44068: LD_ADDR_VAR 0 5
44072: PUSH
44073: LD_VAR 0 2
44077: PUSH
44078: LD_INT 1
44080: ARRAY
44081: ST_TO_ADDR
// if result > 1 then
44082: LD_VAR 0 2
44086: PUSH
44087: LD_INT 1
44089: GREATER
44090: IFFALSE 44202
// begin for i = 2 to result do
44092: LD_ADDR_VAR 0 3
44096: PUSH
44097: DOUBLE
44098: LD_INT 2
44100: DEC
44101: ST_TO_ADDR
44102: LD_VAR 0 2
44106: PUSH
44107: FOR_TO
44108: IFFALSE 44200
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44110: LD_ADDR_VAR 0 4
44114: PUSH
44115: LD_VAR 0 2
44119: PUSH
44120: LD_VAR 0 3
44124: ARRAY
44125: PPUSH
44126: LD_INT 3
44128: PPUSH
44129: CALL_OW 259
44133: PUSH
44134: LD_VAR 0 2
44138: PUSH
44139: LD_VAR 0 3
44143: ARRAY
44144: PPUSH
44145: CALL_OW 432
44149: MINUS
44150: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44151: LD_VAR 0 4
44155: PUSH
44156: LD_VAR 0 5
44160: PPUSH
44161: LD_INT 3
44163: PPUSH
44164: CALL_OW 259
44168: PUSH
44169: LD_VAR 0 5
44173: PPUSH
44174: CALL_OW 432
44178: MINUS
44179: GREATEREQUAL
44180: IFFALSE 44198
// mech := result [ i ] ;
44182: LD_ADDR_VAR 0 5
44186: PUSH
44187: LD_VAR 0 2
44191: PUSH
44192: LD_VAR 0 3
44196: ARRAY
44197: ST_TO_ADDR
// end ;
44198: GO 44107
44200: POP
44201: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44202: LD_VAR 0 1
44206: PPUSH
44207: LD_VAR 0 5
44211: PPUSH
44212: CALL_OW 135
// end ;
44216: LD_VAR 0 2
44220: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44221: LD_INT 0
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
// result := [ ] ;
44236: LD_ADDR_VAR 0 7
44240: PUSH
44241: EMPTY
44242: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44243: LD_VAR 0 1
44247: PPUSH
44248: CALL_OW 266
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: IN
44263: NOT
44264: IFFALSE 44268
// exit ;
44266: GO 45902
// if name then
44268: LD_VAR 0 3
44272: IFFALSE 44288
// SetBName ( base_dep , name ) ;
44274: LD_VAR 0 1
44278: PPUSH
44279: LD_VAR 0 3
44283: PPUSH
44284: CALL_OW 500
// base := GetBase ( base_dep ) ;
44288: LD_ADDR_VAR 0 15
44292: PUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 274
44302: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44303: LD_ADDR_VAR 0 16
44307: PUSH
44308: LD_VAR 0 1
44312: PPUSH
44313: CALL_OW 255
44317: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44318: LD_ADDR_VAR 0 17
44322: PUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL_OW 248
44332: ST_TO_ADDR
// if sources then
44333: LD_VAR 0 5
44337: IFFALSE 44384
// for i = 1 to 3 do
44339: LD_ADDR_VAR 0 8
44343: PUSH
44344: DOUBLE
44345: LD_INT 1
44347: DEC
44348: ST_TO_ADDR
44349: LD_INT 3
44351: PUSH
44352: FOR_TO
44353: IFFALSE 44382
// AddResourceType ( base , i , sources [ i ] ) ;
44355: LD_VAR 0 15
44359: PPUSH
44360: LD_VAR 0 8
44364: PPUSH
44365: LD_VAR 0 5
44369: PUSH
44370: LD_VAR 0 8
44374: ARRAY
44375: PPUSH
44376: CALL_OW 276
44380: GO 44352
44382: POP
44383: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44384: LD_ADDR_VAR 0 18
44388: PUSH
44389: LD_VAR 0 15
44393: PPUSH
44394: LD_VAR 0 2
44398: PPUSH
44399: LD_INT 1
44401: PPUSH
44402: CALL 43645 0 3
44406: ST_TO_ADDR
// InitHc ;
44407: CALL_OW 19
// InitUc ;
44411: CALL_OW 18
// uc_side := side ;
44415: LD_ADDR_OWVAR 20
44419: PUSH
44420: LD_VAR 0 16
44424: ST_TO_ADDR
// uc_nation := nation ;
44425: LD_ADDR_OWVAR 21
44429: PUSH
44430: LD_VAR 0 17
44434: ST_TO_ADDR
// if buildings then
44435: LD_VAR 0 18
44439: IFFALSE 45761
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44441: LD_ADDR_VAR 0 19
44445: PUSH
44446: LD_VAR 0 18
44450: PPUSH
44451: LD_INT 2
44453: PUSH
44454: LD_INT 30
44456: PUSH
44457: LD_INT 29
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 30
44466: PUSH
44467: LD_INT 30
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: PPUSH
44479: CALL_OW 72
44483: ST_TO_ADDR
// if tmp then
44484: LD_VAR 0 19
44488: IFFALSE 44536
// for i in tmp do
44490: LD_ADDR_VAR 0 8
44494: PUSH
44495: LD_VAR 0 19
44499: PUSH
44500: FOR_IN
44501: IFFALSE 44534
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44503: LD_VAR 0 8
44507: PPUSH
44508: CALL_OW 250
44512: PPUSH
44513: LD_VAR 0 8
44517: PPUSH
44518: CALL_OW 251
44522: PPUSH
44523: LD_VAR 0 16
44527: PPUSH
44528: CALL_OW 441
44532: GO 44500
44534: POP
44535: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44536: LD_VAR 0 18
44540: PPUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 30
44546: PUSH
44547: LD_INT 32
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 30
44556: PUSH
44557: LD_INT 33
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: PPUSH
44569: CALL_OW 72
44573: IFFALSE 44661
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44575: LD_ADDR_VAR 0 8
44579: PUSH
44580: LD_VAR 0 18
44584: PPUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 30
44590: PUSH
44591: LD_INT 32
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 30
44600: PUSH
44601: LD_INT 33
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: PPUSH
44613: CALL_OW 72
44617: PUSH
44618: FOR_IN
44619: IFFALSE 44659
// begin if not GetBWeapon ( i ) then
44621: LD_VAR 0 8
44625: PPUSH
44626: CALL_OW 269
44630: NOT
44631: IFFALSE 44657
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44633: LD_VAR 0 8
44637: PPUSH
44638: LD_VAR 0 8
44642: PPUSH
44643: LD_VAR 0 2
44647: PPUSH
44648: CALL 45907 0 2
44652: PPUSH
44653: CALL_OW 431
// end ;
44657: GO 44618
44659: POP
44660: POP
// end ; for i = 1 to personel do
44661: LD_ADDR_VAR 0 8
44665: PUSH
44666: DOUBLE
44667: LD_INT 1
44669: DEC
44670: ST_TO_ADDR
44671: LD_VAR 0 6
44675: PUSH
44676: FOR_TO
44677: IFFALSE 45741
// begin if i > 4 then
44679: LD_VAR 0 8
44683: PUSH
44684: LD_INT 4
44686: GREATER
44687: IFFALSE 44691
// break ;
44689: GO 45741
// case i of 1 :
44691: LD_VAR 0 8
44695: PUSH
44696: LD_INT 1
44698: DOUBLE
44699: EQUAL
44700: IFTRUE 44704
44702: GO 44784
44704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44705: LD_ADDR_VAR 0 12
44709: PUSH
44710: LD_VAR 0 18
44714: PPUSH
44715: LD_INT 22
44717: PUSH
44718: LD_VAR 0 16
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 58
44729: PUSH
44730: EMPTY
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 30
44738: PUSH
44739: LD_INT 32
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 30
44748: PUSH
44749: LD_INT 4
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 30
44758: PUSH
44759: LD_INT 5
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: PPUSH
44777: CALL_OW 72
44781: ST_TO_ADDR
44782: GO 45006
44784: LD_INT 2
44786: DOUBLE
44787: EQUAL
44788: IFTRUE 44792
44790: GO 44854
44792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44793: LD_ADDR_VAR 0 12
44797: PUSH
44798: LD_VAR 0 18
44802: PPUSH
44803: LD_INT 22
44805: PUSH
44806: LD_VAR 0 16
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 30
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 30
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PPUSH
44847: CALL_OW 72
44851: ST_TO_ADDR
44852: GO 45006
44854: LD_INT 3
44856: DOUBLE
44857: EQUAL
44858: IFTRUE 44862
44860: GO 44924
44862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44863: LD_ADDR_VAR 0 12
44867: PUSH
44868: LD_VAR 0 18
44872: PPUSH
44873: LD_INT 22
44875: PUSH
44876: LD_VAR 0 16
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 30
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 30
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PPUSH
44917: CALL_OW 72
44921: ST_TO_ADDR
44922: GO 45006
44924: LD_INT 4
44926: DOUBLE
44927: EQUAL
44928: IFTRUE 44932
44930: GO 45005
44932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44933: LD_ADDR_VAR 0 12
44937: PUSH
44938: LD_VAR 0 18
44942: PPUSH
44943: LD_INT 22
44945: PUSH
44946: LD_VAR 0 16
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 30
44960: PUSH
44961: LD_INT 6
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 30
44970: PUSH
44971: LD_INT 7
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 30
44980: PUSH
44981: LD_INT 8
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PPUSH
44998: CALL_OW 72
45002: ST_TO_ADDR
45003: GO 45006
45005: POP
// if i = 1 then
45006: LD_VAR 0 8
45010: PUSH
45011: LD_INT 1
45013: EQUAL
45014: IFFALSE 45125
// begin tmp := [ ] ;
45016: LD_ADDR_VAR 0 19
45020: PUSH
45021: EMPTY
45022: ST_TO_ADDR
// for j in f do
45023: LD_ADDR_VAR 0 9
45027: PUSH
45028: LD_VAR 0 12
45032: PUSH
45033: FOR_IN
45034: IFFALSE 45107
// if GetBType ( j ) = b_bunker then
45036: LD_VAR 0 9
45040: PPUSH
45041: CALL_OW 266
45045: PUSH
45046: LD_INT 32
45048: EQUAL
45049: IFFALSE 45076
// tmp := Insert ( tmp , 1 , j ) else
45051: LD_ADDR_VAR 0 19
45055: PUSH
45056: LD_VAR 0 19
45060: PPUSH
45061: LD_INT 1
45063: PPUSH
45064: LD_VAR 0 9
45068: PPUSH
45069: CALL_OW 2
45073: ST_TO_ADDR
45074: GO 45105
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45076: LD_ADDR_VAR 0 19
45080: PUSH
45081: LD_VAR 0 19
45085: PPUSH
45086: LD_VAR 0 19
45090: PUSH
45091: LD_INT 1
45093: PLUS
45094: PPUSH
45095: LD_VAR 0 9
45099: PPUSH
45100: CALL_OW 2
45104: ST_TO_ADDR
45105: GO 45033
45107: POP
45108: POP
// if tmp then
45109: LD_VAR 0 19
45113: IFFALSE 45125
// f := tmp ;
45115: LD_ADDR_VAR 0 12
45119: PUSH
45120: LD_VAR 0 19
45124: ST_TO_ADDR
// end ; x := personel [ i ] ;
45125: LD_ADDR_VAR 0 13
45129: PUSH
45130: LD_VAR 0 6
45134: PUSH
45135: LD_VAR 0 8
45139: ARRAY
45140: ST_TO_ADDR
// if x = - 1 then
45141: LD_VAR 0 13
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: EQUAL
45150: IFFALSE 45359
// begin for j in f do
45152: LD_ADDR_VAR 0 9
45156: PUSH
45157: LD_VAR 0 12
45161: PUSH
45162: FOR_IN
45163: IFFALSE 45355
// repeat InitHc ;
45165: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45169: LD_VAR 0 9
45173: PPUSH
45174: CALL_OW 266
45178: PUSH
45179: LD_INT 5
45181: EQUAL
45182: IFFALSE 45252
// begin if UnitsInside ( j ) < 3 then
45184: LD_VAR 0 9
45188: PPUSH
45189: CALL_OW 313
45193: PUSH
45194: LD_INT 3
45196: LESS
45197: IFFALSE 45233
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45199: LD_INT 0
45201: PPUSH
45202: LD_INT 5
45204: PUSH
45205: LD_INT 8
45207: PUSH
45208: LD_INT 9
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: PUSH
45216: LD_VAR 0 17
45220: ARRAY
45221: PPUSH
45222: LD_VAR 0 4
45226: PPUSH
45227: CALL_OW 380
45231: GO 45250
// PrepareHuman ( false , i , skill ) ;
45233: LD_INT 0
45235: PPUSH
45236: LD_VAR 0 8
45240: PPUSH
45241: LD_VAR 0 4
45245: PPUSH
45246: CALL_OW 380
// end else
45250: GO 45269
// PrepareHuman ( false , i , skill ) ;
45252: LD_INT 0
45254: PPUSH
45255: LD_VAR 0 8
45259: PPUSH
45260: LD_VAR 0 4
45264: PPUSH
45265: CALL_OW 380
// un := CreateHuman ;
45269: LD_ADDR_VAR 0 14
45273: PUSH
45274: CALL_OW 44
45278: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45279: LD_ADDR_VAR 0 7
45283: PUSH
45284: LD_VAR 0 7
45288: PPUSH
45289: LD_INT 1
45291: PPUSH
45292: LD_VAR 0 14
45296: PPUSH
45297: CALL_OW 2
45301: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45302: LD_VAR 0 14
45306: PPUSH
45307: LD_VAR 0 9
45311: PPUSH
45312: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45316: LD_VAR 0 9
45320: PPUSH
45321: CALL_OW 313
45325: PUSH
45326: LD_INT 6
45328: EQUAL
45329: PUSH
45330: LD_VAR 0 9
45334: PPUSH
45335: CALL_OW 266
45339: PUSH
45340: LD_INT 32
45342: PUSH
45343: LD_INT 31
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: IN
45350: OR
45351: IFFALSE 45165
45353: GO 45162
45355: POP
45356: POP
// end else
45357: GO 45739
// for j = 1 to x do
45359: LD_ADDR_VAR 0 9
45363: PUSH
45364: DOUBLE
45365: LD_INT 1
45367: DEC
45368: ST_TO_ADDR
45369: LD_VAR 0 13
45373: PUSH
45374: FOR_TO
45375: IFFALSE 45737
// begin InitHc ;
45377: CALL_OW 19
// if not f then
45381: LD_VAR 0 12
45385: NOT
45386: IFFALSE 45475
// begin PrepareHuman ( false , i , skill ) ;
45388: LD_INT 0
45390: PPUSH
45391: LD_VAR 0 8
45395: PPUSH
45396: LD_VAR 0 4
45400: PPUSH
45401: CALL_OW 380
// un := CreateHuman ;
45405: LD_ADDR_VAR 0 14
45409: PUSH
45410: CALL_OW 44
45414: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45415: LD_ADDR_VAR 0 7
45419: PUSH
45420: LD_VAR 0 7
45424: PPUSH
45425: LD_INT 1
45427: PPUSH
45428: LD_VAR 0 14
45432: PPUSH
45433: CALL_OW 2
45437: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45438: LD_VAR 0 14
45442: PPUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 250
45452: PPUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 251
45462: PPUSH
45463: LD_INT 10
45465: PPUSH
45466: LD_INT 0
45468: PPUSH
45469: CALL_OW 50
// continue ;
45473: GO 45374
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45475: LD_VAR 0 12
45479: PUSH
45480: LD_INT 1
45482: ARRAY
45483: PPUSH
45484: CALL_OW 313
45488: PUSH
45489: LD_VAR 0 12
45493: PUSH
45494: LD_INT 1
45496: ARRAY
45497: PPUSH
45498: CALL_OW 266
45502: PUSH
45503: LD_INT 32
45505: PUSH
45506: LD_INT 31
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: IN
45513: AND
45514: PUSH
45515: LD_VAR 0 12
45519: PUSH
45520: LD_INT 1
45522: ARRAY
45523: PPUSH
45524: CALL_OW 313
45528: PUSH
45529: LD_INT 6
45531: EQUAL
45532: OR
45533: IFFALSE 45553
// f := Delete ( f , 1 ) ;
45535: LD_ADDR_VAR 0 12
45539: PUSH
45540: LD_VAR 0 12
45544: PPUSH
45545: LD_INT 1
45547: PPUSH
45548: CALL_OW 3
45552: ST_TO_ADDR
// if not f then
45553: LD_VAR 0 12
45557: NOT
45558: IFFALSE 45576
// begin x := x + 2 ;
45560: LD_ADDR_VAR 0 13
45564: PUSH
45565: LD_VAR 0 13
45569: PUSH
45570: LD_INT 2
45572: PLUS
45573: ST_TO_ADDR
// continue ;
45574: GO 45374
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45576: LD_VAR 0 12
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PPUSH
45585: CALL_OW 266
45589: PUSH
45590: LD_INT 5
45592: EQUAL
45593: IFFALSE 45667
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45595: LD_VAR 0 12
45599: PUSH
45600: LD_INT 1
45602: ARRAY
45603: PPUSH
45604: CALL_OW 313
45608: PUSH
45609: LD_INT 3
45611: LESS
45612: IFFALSE 45648
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45614: LD_INT 0
45616: PPUSH
45617: LD_INT 5
45619: PUSH
45620: LD_INT 8
45622: PUSH
45623: LD_INT 9
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: PUSH
45631: LD_VAR 0 17
45635: ARRAY
45636: PPUSH
45637: LD_VAR 0 4
45641: PPUSH
45642: CALL_OW 380
45646: GO 45665
// PrepareHuman ( false , i , skill ) ;
45648: LD_INT 0
45650: PPUSH
45651: LD_VAR 0 8
45655: PPUSH
45656: LD_VAR 0 4
45660: PPUSH
45661: CALL_OW 380
// end else
45665: GO 45684
// PrepareHuman ( false , i , skill ) ;
45667: LD_INT 0
45669: PPUSH
45670: LD_VAR 0 8
45674: PPUSH
45675: LD_VAR 0 4
45679: PPUSH
45680: CALL_OW 380
// un := CreateHuman ;
45684: LD_ADDR_VAR 0 14
45688: PUSH
45689: CALL_OW 44
45693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45694: LD_ADDR_VAR 0 7
45698: PUSH
45699: LD_VAR 0 7
45703: PPUSH
45704: LD_INT 1
45706: PPUSH
45707: LD_VAR 0 14
45711: PPUSH
45712: CALL_OW 2
45716: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45717: LD_VAR 0 14
45721: PPUSH
45722: LD_VAR 0 12
45726: PUSH
45727: LD_INT 1
45729: ARRAY
45730: PPUSH
45731: CALL_OW 52
// end ;
45735: GO 45374
45737: POP
45738: POP
// end ;
45739: GO 44676
45741: POP
45742: POP
// result := result ^ buildings ;
45743: LD_ADDR_VAR 0 7
45747: PUSH
45748: LD_VAR 0 7
45752: PUSH
45753: LD_VAR 0 18
45757: ADD
45758: ST_TO_ADDR
// end else
45759: GO 45902
// begin for i = 1 to personel do
45761: LD_ADDR_VAR 0 8
45765: PUSH
45766: DOUBLE
45767: LD_INT 1
45769: DEC
45770: ST_TO_ADDR
45771: LD_VAR 0 6
45775: PUSH
45776: FOR_TO
45777: IFFALSE 45900
// begin if i > 4 then
45779: LD_VAR 0 8
45783: PUSH
45784: LD_INT 4
45786: GREATER
45787: IFFALSE 45791
// break ;
45789: GO 45900
// x := personel [ i ] ;
45791: LD_ADDR_VAR 0 13
45795: PUSH
45796: LD_VAR 0 6
45800: PUSH
45801: LD_VAR 0 8
45805: ARRAY
45806: ST_TO_ADDR
// if x = - 1 then
45807: LD_VAR 0 13
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: EQUAL
45816: IFFALSE 45820
// continue ;
45818: GO 45776
// PrepareHuman ( false , i , skill ) ;
45820: LD_INT 0
45822: PPUSH
45823: LD_VAR 0 8
45827: PPUSH
45828: LD_VAR 0 4
45832: PPUSH
45833: CALL_OW 380
// un := CreateHuman ;
45837: LD_ADDR_VAR 0 14
45841: PUSH
45842: CALL_OW 44
45846: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45847: LD_VAR 0 14
45851: PPUSH
45852: LD_VAR 0 1
45856: PPUSH
45857: CALL_OW 250
45861: PPUSH
45862: LD_VAR 0 1
45866: PPUSH
45867: CALL_OW 251
45871: PPUSH
45872: LD_INT 10
45874: PPUSH
45875: LD_INT 0
45877: PPUSH
45878: CALL_OW 50
// result := result ^ un ;
45882: LD_ADDR_VAR 0 7
45886: PUSH
45887: LD_VAR 0 7
45891: PUSH
45892: LD_VAR 0 14
45896: ADD
45897: ST_TO_ADDR
// end ;
45898: GO 45776
45900: POP
45901: POP
// end ; end ;
45902: LD_VAR 0 7
45906: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45907: LD_INT 0
45909: PPUSH
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
// result := false ;
45925: LD_ADDR_VAR 0 3
45929: PUSH
45930: LD_INT 0
45932: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45933: LD_VAR 0 1
45937: NOT
45938: PUSH
45939: LD_VAR 0 1
45943: PPUSH
45944: CALL_OW 266
45948: PUSH
45949: LD_INT 32
45951: PUSH
45952: LD_INT 33
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: IN
45959: NOT
45960: OR
45961: IFFALSE 45965
// exit ;
45963: GO 47074
// nat := GetNation ( tower ) ;
45965: LD_ADDR_VAR 0 12
45969: PUSH
45970: LD_VAR 0 1
45974: PPUSH
45975: CALL_OW 248
45979: ST_TO_ADDR
// side := GetSide ( tower ) ;
45980: LD_ADDR_VAR 0 16
45984: PUSH
45985: LD_VAR 0 1
45989: PPUSH
45990: CALL_OW 255
45994: ST_TO_ADDR
// x := GetX ( tower ) ;
45995: LD_ADDR_VAR 0 10
45999: PUSH
46000: LD_VAR 0 1
46004: PPUSH
46005: CALL_OW 250
46009: ST_TO_ADDR
// y := GetY ( tower ) ;
46010: LD_ADDR_VAR 0 11
46014: PUSH
46015: LD_VAR 0 1
46019: PPUSH
46020: CALL_OW 251
46024: ST_TO_ADDR
// if not x or not y then
46025: LD_VAR 0 10
46029: NOT
46030: PUSH
46031: LD_VAR 0 11
46035: NOT
46036: OR
46037: IFFALSE 46041
// exit ;
46039: GO 47074
// weapon := 0 ;
46041: LD_ADDR_VAR 0 18
46045: PUSH
46046: LD_INT 0
46048: ST_TO_ADDR
// fac_list := [ ] ;
46049: LD_ADDR_VAR 0 17
46053: PUSH
46054: EMPTY
46055: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46056: LD_ADDR_VAR 0 6
46060: PUSH
46061: LD_VAR 0 1
46065: PPUSH
46066: CALL_OW 274
46070: PPUSH
46071: LD_VAR 0 2
46075: PPUSH
46076: LD_INT 0
46078: PPUSH
46079: CALL 43645 0 3
46083: PPUSH
46084: LD_INT 30
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PPUSH
46094: CALL_OW 72
46098: ST_TO_ADDR
// if not factories then
46099: LD_VAR 0 6
46103: NOT
46104: IFFALSE 46108
// exit ;
46106: GO 47074
// for i in factories do
46108: LD_ADDR_VAR 0 8
46112: PUSH
46113: LD_VAR 0 6
46117: PUSH
46118: FOR_IN
46119: IFFALSE 46144
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46121: LD_ADDR_VAR 0 17
46125: PUSH
46126: LD_VAR 0 17
46130: PUSH
46131: LD_VAR 0 8
46135: PPUSH
46136: CALL_OW 478
46140: UNION
46141: ST_TO_ADDR
46142: GO 46118
46144: POP
46145: POP
// if not fac_list then
46146: LD_VAR 0 17
46150: NOT
46151: IFFALSE 46155
// exit ;
46153: GO 47074
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46155: LD_ADDR_VAR 0 5
46159: PUSH
46160: LD_INT 4
46162: PUSH
46163: LD_INT 5
46165: PUSH
46166: LD_INT 9
46168: PUSH
46169: LD_INT 10
46171: PUSH
46172: LD_INT 6
46174: PUSH
46175: LD_INT 7
46177: PUSH
46178: LD_INT 11
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 27
46192: PUSH
46193: LD_INT 28
46195: PUSH
46196: LD_INT 26
46198: PUSH
46199: LD_INT 30
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 43
46210: PUSH
46211: LD_INT 44
46213: PUSH
46214: LD_INT 46
46216: PUSH
46217: LD_INT 45
46219: PUSH
46220: LD_INT 47
46222: PUSH
46223: LD_INT 49
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: PUSH
46239: LD_VAR 0 12
46243: ARRAY
46244: ST_TO_ADDR
// list := list isect fac_list ;
46245: LD_ADDR_VAR 0 5
46249: PUSH
46250: LD_VAR 0 5
46254: PUSH
46255: LD_VAR 0 17
46259: ISECT
46260: ST_TO_ADDR
// if not list then
46261: LD_VAR 0 5
46265: NOT
46266: IFFALSE 46270
// exit ;
46268: GO 47074
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46270: LD_VAR 0 12
46274: PUSH
46275: LD_INT 3
46277: EQUAL
46278: PUSH
46279: LD_INT 49
46281: PUSH
46282: LD_VAR 0 5
46286: IN
46287: AND
46288: PUSH
46289: LD_INT 31
46291: PPUSH
46292: LD_VAR 0 16
46296: PPUSH
46297: CALL_OW 321
46301: PUSH
46302: LD_INT 2
46304: EQUAL
46305: AND
46306: IFFALSE 46366
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46308: LD_INT 22
46310: PUSH
46311: LD_VAR 0 16
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 35
46322: PUSH
46323: LD_INT 49
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 91
46332: PUSH
46333: LD_VAR 0 1
46337: PUSH
46338: LD_INT 10
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: PPUSH
46351: CALL_OW 69
46355: NOT
46356: IFFALSE 46366
// weapon := ru_time_lapser ;
46358: LD_ADDR_VAR 0 18
46362: PUSH
46363: LD_INT 49
46365: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46366: LD_VAR 0 12
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: IN
46381: PUSH
46382: LD_INT 11
46384: PUSH
46385: LD_VAR 0 5
46389: IN
46390: PUSH
46391: LD_INT 30
46393: PUSH
46394: LD_VAR 0 5
46398: IN
46399: OR
46400: AND
46401: PUSH
46402: LD_INT 6
46404: PPUSH
46405: LD_VAR 0 16
46409: PPUSH
46410: CALL_OW 321
46414: PUSH
46415: LD_INT 2
46417: EQUAL
46418: AND
46419: IFFALSE 46584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46421: LD_INT 22
46423: PUSH
46424: LD_VAR 0 16
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 35
46438: PUSH
46439: LD_INT 11
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 35
46448: PUSH
46449: LD_INT 30
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 91
46463: PUSH
46464: LD_VAR 0 1
46468: PUSH
46469: LD_INT 18
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: PPUSH
46482: CALL_OW 69
46486: NOT
46487: PUSH
46488: LD_INT 22
46490: PUSH
46491: LD_VAR 0 16
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 30
46505: PUSH
46506: LD_INT 32
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 30
46515: PUSH
46516: LD_INT 33
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 91
46530: PUSH
46531: LD_VAR 0 1
46535: PUSH
46536: LD_INT 12
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: PPUSH
46552: CALL_OW 69
46556: PUSH
46557: LD_INT 2
46559: GREATER
46560: AND
46561: IFFALSE 46584
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46563: LD_ADDR_VAR 0 18
46567: PUSH
46568: LD_INT 11
46570: PUSH
46571: LD_INT 30
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_VAR 0 12
46582: ARRAY
46583: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46584: LD_VAR 0 18
46588: NOT
46589: PUSH
46590: LD_INT 40
46592: PPUSH
46593: LD_VAR 0 16
46597: PPUSH
46598: CALL_OW 321
46602: PUSH
46603: LD_INT 2
46605: EQUAL
46606: AND
46607: PUSH
46608: LD_INT 7
46610: PUSH
46611: LD_VAR 0 5
46615: IN
46616: PUSH
46617: LD_INT 28
46619: PUSH
46620: LD_VAR 0 5
46624: IN
46625: OR
46626: PUSH
46627: LD_INT 45
46629: PUSH
46630: LD_VAR 0 5
46634: IN
46635: OR
46636: AND
46637: IFFALSE 46891
// begin hex := GetHexInfo ( x , y ) ;
46639: LD_ADDR_VAR 0 4
46643: PUSH
46644: LD_VAR 0 10
46648: PPUSH
46649: LD_VAR 0 11
46653: PPUSH
46654: CALL_OW 546
46658: ST_TO_ADDR
// if hex [ 1 ] then
46659: LD_VAR 0 4
46663: PUSH
46664: LD_INT 1
46666: ARRAY
46667: IFFALSE 46671
// exit ;
46669: GO 47074
// height := hex [ 2 ] ;
46671: LD_ADDR_VAR 0 15
46675: PUSH
46676: LD_VAR 0 4
46680: PUSH
46681: LD_INT 2
46683: ARRAY
46684: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46685: LD_ADDR_VAR 0 14
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: LD_INT 5
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// for i in tmp do
46708: LD_ADDR_VAR 0 8
46712: PUSH
46713: LD_VAR 0 14
46717: PUSH
46718: FOR_IN
46719: IFFALSE 46889
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46721: LD_ADDR_VAR 0 9
46725: PUSH
46726: LD_VAR 0 10
46730: PPUSH
46731: LD_VAR 0 8
46735: PPUSH
46736: LD_INT 5
46738: PPUSH
46739: CALL_OW 272
46743: PUSH
46744: LD_VAR 0 11
46748: PPUSH
46749: LD_VAR 0 8
46753: PPUSH
46754: LD_INT 5
46756: PPUSH
46757: CALL_OW 273
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46766: LD_VAR 0 9
46770: PUSH
46771: LD_INT 1
46773: ARRAY
46774: PPUSH
46775: LD_VAR 0 9
46779: PUSH
46780: LD_INT 2
46782: ARRAY
46783: PPUSH
46784: CALL_OW 488
46788: IFFALSE 46887
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46790: LD_ADDR_VAR 0 4
46794: PUSH
46795: LD_VAR 0 9
46799: PUSH
46800: LD_INT 1
46802: ARRAY
46803: PPUSH
46804: LD_VAR 0 9
46808: PUSH
46809: LD_INT 2
46811: ARRAY
46812: PPUSH
46813: CALL_OW 546
46817: ST_TO_ADDR
// if hex [ 1 ] then
46818: LD_VAR 0 4
46822: PUSH
46823: LD_INT 1
46825: ARRAY
46826: IFFALSE 46830
// continue ;
46828: GO 46718
// h := hex [ 2 ] ;
46830: LD_ADDR_VAR 0 13
46834: PUSH
46835: LD_VAR 0 4
46839: PUSH
46840: LD_INT 2
46842: ARRAY
46843: ST_TO_ADDR
// if h + 7 < height then
46844: LD_VAR 0 13
46848: PUSH
46849: LD_INT 7
46851: PLUS
46852: PUSH
46853: LD_VAR 0 15
46857: LESS
46858: IFFALSE 46887
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46860: LD_ADDR_VAR 0 18
46864: PUSH
46865: LD_INT 7
46867: PUSH
46868: LD_INT 28
46870: PUSH
46871: LD_INT 45
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: LIST
46878: PUSH
46879: LD_VAR 0 12
46883: ARRAY
46884: ST_TO_ADDR
// break ;
46885: GO 46889
// end ; end ; end ;
46887: GO 46718
46889: POP
46890: POP
// end ; if not weapon then
46891: LD_VAR 0 18
46895: NOT
46896: IFFALSE 46956
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46898: LD_ADDR_VAR 0 5
46902: PUSH
46903: LD_VAR 0 5
46907: PUSH
46908: LD_INT 11
46910: PUSH
46911: LD_INT 30
46913: PUSH
46914: LD_INT 49
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: DIFF
46922: ST_TO_ADDR
// if not list then
46923: LD_VAR 0 5
46927: NOT
46928: IFFALSE 46932
// exit ;
46930: GO 47074
// weapon := list [ rand ( 1 , list ) ] ;
46932: LD_ADDR_VAR 0 18
46936: PUSH
46937: LD_VAR 0 5
46941: PUSH
46942: LD_INT 1
46944: PPUSH
46945: LD_VAR 0 5
46949: PPUSH
46950: CALL_OW 12
46954: ARRAY
46955: ST_TO_ADDR
// end ; if weapon then
46956: LD_VAR 0 18
46960: IFFALSE 47074
// begin tmp := CostOfWeapon ( weapon ) ;
46962: LD_ADDR_VAR 0 14
46966: PUSH
46967: LD_VAR 0 18
46971: PPUSH
46972: CALL_OW 451
46976: ST_TO_ADDR
// j := GetBase ( tower ) ;
46977: LD_ADDR_VAR 0 9
46981: PUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: CALL_OW 274
46991: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46992: LD_VAR 0 9
46996: PPUSH
46997: LD_INT 1
46999: PPUSH
47000: CALL_OW 275
47004: PUSH
47005: LD_VAR 0 14
47009: PUSH
47010: LD_INT 1
47012: ARRAY
47013: GREATEREQUAL
47014: PUSH
47015: LD_VAR 0 9
47019: PPUSH
47020: LD_INT 2
47022: PPUSH
47023: CALL_OW 275
47027: PUSH
47028: LD_VAR 0 14
47032: PUSH
47033: LD_INT 2
47035: ARRAY
47036: GREATEREQUAL
47037: AND
47038: PUSH
47039: LD_VAR 0 9
47043: PPUSH
47044: LD_INT 3
47046: PPUSH
47047: CALL_OW 275
47051: PUSH
47052: LD_VAR 0 14
47056: PUSH
47057: LD_INT 3
47059: ARRAY
47060: GREATEREQUAL
47061: AND
47062: IFFALSE 47074
// result := weapon ;
47064: LD_ADDR_VAR 0 3
47068: PUSH
47069: LD_VAR 0 18
47073: ST_TO_ADDR
// end ; end ;
47074: LD_VAR 0 3
47078: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47079: LD_INT 0
47081: PPUSH
47082: PPUSH
// result := true ;
47083: LD_ADDR_VAR 0 3
47087: PUSH
47088: LD_INT 1
47090: ST_TO_ADDR
// if array1 = array2 then
47091: LD_VAR 0 1
47095: PUSH
47096: LD_VAR 0 2
47100: EQUAL
47101: IFFALSE 47161
// begin for i = 1 to array1 do
47103: LD_ADDR_VAR 0 4
47107: PUSH
47108: DOUBLE
47109: LD_INT 1
47111: DEC
47112: ST_TO_ADDR
47113: LD_VAR 0 1
47117: PUSH
47118: FOR_TO
47119: IFFALSE 47157
// if array1 [ i ] <> array2 [ i ] then
47121: LD_VAR 0 1
47125: PUSH
47126: LD_VAR 0 4
47130: ARRAY
47131: PUSH
47132: LD_VAR 0 2
47136: PUSH
47137: LD_VAR 0 4
47141: ARRAY
47142: NONEQUAL
47143: IFFALSE 47155
// begin result := false ;
47145: LD_ADDR_VAR 0 3
47149: PUSH
47150: LD_INT 0
47152: ST_TO_ADDR
// break ;
47153: GO 47157
// end ;
47155: GO 47118
47157: POP
47158: POP
// end else
47159: GO 47169
// result := false ;
47161: LD_ADDR_VAR 0 3
47165: PUSH
47166: LD_INT 0
47168: ST_TO_ADDR
// end ;
47169: LD_VAR 0 3
47173: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47174: LD_INT 0
47176: PPUSH
47177: PPUSH
// if not array1 or not array2 then
47178: LD_VAR 0 1
47182: NOT
47183: PUSH
47184: LD_VAR 0 2
47188: NOT
47189: OR
47190: IFFALSE 47194
// exit ;
47192: GO 47258
// result := true ;
47194: LD_ADDR_VAR 0 3
47198: PUSH
47199: LD_INT 1
47201: ST_TO_ADDR
// for i = 1 to array1 do
47202: LD_ADDR_VAR 0 4
47206: PUSH
47207: DOUBLE
47208: LD_INT 1
47210: DEC
47211: ST_TO_ADDR
47212: LD_VAR 0 1
47216: PUSH
47217: FOR_TO
47218: IFFALSE 47256
// if array1 [ i ] <> array2 [ i ] then
47220: LD_VAR 0 1
47224: PUSH
47225: LD_VAR 0 4
47229: ARRAY
47230: PUSH
47231: LD_VAR 0 2
47235: PUSH
47236: LD_VAR 0 4
47240: ARRAY
47241: NONEQUAL
47242: IFFALSE 47254
// begin result := false ;
47244: LD_ADDR_VAR 0 3
47248: PUSH
47249: LD_INT 0
47251: ST_TO_ADDR
// break ;
47252: GO 47256
// end ;
47254: GO 47217
47256: POP
47257: POP
// end ;
47258: LD_VAR 0 3
47262: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47263: LD_INT 0
47265: PPUSH
47266: PPUSH
47267: PPUSH
// pom := GetBase ( fac ) ;
47268: LD_ADDR_VAR 0 5
47272: PUSH
47273: LD_VAR 0 1
47277: PPUSH
47278: CALL_OW 274
47282: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47283: LD_ADDR_VAR 0 4
47287: PUSH
47288: LD_VAR 0 2
47292: PUSH
47293: LD_INT 1
47295: ARRAY
47296: PPUSH
47297: LD_VAR 0 2
47301: PUSH
47302: LD_INT 2
47304: ARRAY
47305: PPUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_INT 3
47313: ARRAY
47314: PPUSH
47315: LD_VAR 0 2
47319: PUSH
47320: LD_INT 4
47322: ARRAY
47323: PPUSH
47324: CALL_OW 449
47328: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47329: LD_ADDR_VAR 0 3
47333: PUSH
47334: LD_VAR 0 5
47338: PPUSH
47339: LD_INT 1
47341: PPUSH
47342: CALL_OW 275
47346: PUSH
47347: LD_VAR 0 4
47351: PUSH
47352: LD_INT 1
47354: ARRAY
47355: GREATEREQUAL
47356: PUSH
47357: LD_VAR 0 5
47361: PPUSH
47362: LD_INT 2
47364: PPUSH
47365: CALL_OW 275
47369: PUSH
47370: LD_VAR 0 4
47374: PUSH
47375: LD_INT 2
47377: ARRAY
47378: GREATEREQUAL
47379: AND
47380: PUSH
47381: LD_VAR 0 5
47385: PPUSH
47386: LD_INT 3
47388: PPUSH
47389: CALL_OW 275
47393: PUSH
47394: LD_VAR 0 4
47398: PUSH
47399: LD_INT 3
47401: ARRAY
47402: GREATEREQUAL
47403: AND
47404: ST_TO_ADDR
// end ;
47405: LD_VAR 0 3
47409: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47410: LD_INT 0
47412: PPUSH
47413: PPUSH
47414: PPUSH
47415: PPUSH
// pom := GetBase ( building ) ;
47416: LD_ADDR_VAR 0 3
47420: PUSH
47421: LD_VAR 0 1
47425: PPUSH
47426: CALL_OW 274
47430: ST_TO_ADDR
// if not pom then
47431: LD_VAR 0 3
47435: NOT
47436: IFFALSE 47440
// exit ;
47438: GO 47610
// btype := GetBType ( building ) ;
47440: LD_ADDR_VAR 0 5
47444: PUSH
47445: LD_VAR 0 1
47449: PPUSH
47450: CALL_OW 266
47454: ST_TO_ADDR
// if btype = b_armoury then
47455: LD_VAR 0 5
47459: PUSH
47460: LD_INT 4
47462: EQUAL
47463: IFFALSE 47473
// btype := b_barracks ;
47465: LD_ADDR_VAR 0 5
47469: PUSH
47470: LD_INT 5
47472: ST_TO_ADDR
// if btype = b_depot then
47473: LD_VAR 0 5
47477: PUSH
47478: LD_INT 0
47480: EQUAL
47481: IFFALSE 47491
// btype := b_warehouse ;
47483: LD_ADDR_VAR 0 5
47487: PUSH
47488: LD_INT 1
47490: ST_TO_ADDR
// if btype = b_workshop then
47491: LD_VAR 0 5
47495: PUSH
47496: LD_INT 2
47498: EQUAL
47499: IFFALSE 47509
// btype := b_factory ;
47501: LD_ADDR_VAR 0 5
47505: PUSH
47506: LD_INT 3
47508: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47509: LD_ADDR_VAR 0 4
47513: PUSH
47514: LD_VAR 0 5
47518: PPUSH
47519: LD_VAR 0 1
47523: PPUSH
47524: CALL_OW 248
47528: PPUSH
47529: CALL_OW 450
47533: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47534: LD_ADDR_VAR 0 2
47538: PUSH
47539: LD_VAR 0 3
47543: PPUSH
47544: LD_INT 1
47546: PPUSH
47547: CALL_OW 275
47551: PUSH
47552: LD_VAR 0 4
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: GREATEREQUAL
47561: PUSH
47562: LD_VAR 0 3
47566: PPUSH
47567: LD_INT 2
47569: PPUSH
47570: CALL_OW 275
47574: PUSH
47575: LD_VAR 0 4
47579: PUSH
47580: LD_INT 2
47582: ARRAY
47583: GREATEREQUAL
47584: AND
47585: PUSH
47586: LD_VAR 0 3
47590: PPUSH
47591: LD_INT 3
47593: PPUSH
47594: CALL_OW 275
47598: PUSH
47599: LD_VAR 0 4
47603: PUSH
47604: LD_INT 3
47606: ARRAY
47607: GREATEREQUAL
47608: AND
47609: ST_TO_ADDR
// end ;
47610: LD_VAR 0 2
47614: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47615: LD_INT 0
47617: PPUSH
47618: PPUSH
47619: PPUSH
// pom := GetBase ( building ) ;
47620: LD_ADDR_VAR 0 4
47624: PUSH
47625: LD_VAR 0 1
47629: PPUSH
47630: CALL_OW 274
47634: ST_TO_ADDR
// if not pom then
47635: LD_VAR 0 4
47639: NOT
47640: IFFALSE 47644
// exit ;
47642: GO 47745
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47644: LD_ADDR_VAR 0 5
47648: PUSH
47649: LD_VAR 0 2
47653: PPUSH
47654: LD_VAR 0 1
47658: PPUSH
47659: CALL_OW 248
47663: PPUSH
47664: CALL_OW 450
47668: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47669: LD_ADDR_VAR 0 3
47673: PUSH
47674: LD_VAR 0 4
47678: PPUSH
47679: LD_INT 1
47681: PPUSH
47682: CALL_OW 275
47686: PUSH
47687: LD_VAR 0 5
47691: PUSH
47692: LD_INT 1
47694: ARRAY
47695: GREATEREQUAL
47696: PUSH
47697: LD_VAR 0 4
47701: PPUSH
47702: LD_INT 2
47704: PPUSH
47705: CALL_OW 275
47709: PUSH
47710: LD_VAR 0 5
47714: PUSH
47715: LD_INT 2
47717: ARRAY
47718: GREATEREQUAL
47719: AND
47720: PUSH
47721: LD_VAR 0 4
47725: PPUSH
47726: LD_INT 3
47728: PPUSH
47729: CALL_OW 275
47733: PUSH
47734: LD_VAR 0 5
47738: PUSH
47739: LD_INT 3
47741: ARRAY
47742: GREATEREQUAL
47743: AND
47744: ST_TO_ADDR
// end ;
47745: LD_VAR 0 3
47749: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47750: LD_INT 0
47752: PPUSH
47753: PPUSH
47754: PPUSH
47755: PPUSH
47756: PPUSH
47757: PPUSH
47758: PPUSH
47759: PPUSH
47760: PPUSH
47761: PPUSH
47762: PPUSH
// result := false ;
47763: LD_ADDR_VAR 0 8
47767: PUSH
47768: LD_INT 0
47770: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47771: LD_VAR 0 5
47775: NOT
47776: PUSH
47777: LD_VAR 0 1
47781: NOT
47782: OR
47783: PUSH
47784: LD_VAR 0 2
47788: NOT
47789: OR
47790: PUSH
47791: LD_VAR 0 3
47795: NOT
47796: OR
47797: IFFALSE 47801
// exit ;
47799: GO 48615
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47801: LD_ADDR_VAR 0 14
47805: PUSH
47806: LD_VAR 0 1
47810: PPUSH
47811: LD_VAR 0 2
47815: PPUSH
47816: LD_VAR 0 3
47820: PPUSH
47821: LD_VAR 0 4
47825: PPUSH
47826: LD_VAR 0 5
47830: PUSH
47831: LD_INT 1
47833: ARRAY
47834: PPUSH
47835: CALL_OW 248
47839: PPUSH
47840: LD_INT 0
47842: PPUSH
47843: CALL 49868 0 6
47847: ST_TO_ADDR
// if not hexes then
47848: LD_VAR 0 14
47852: NOT
47853: IFFALSE 47857
// exit ;
47855: GO 48615
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47857: LD_ADDR_VAR 0 17
47861: PUSH
47862: LD_VAR 0 5
47866: PPUSH
47867: LD_INT 22
47869: PUSH
47870: LD_VAR 0 13
47874: PPUSH
47875: CALL_OW 255
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 30
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 30
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PPUSH
47916: CALL_OW 72
47920: ST_TO_ADDR
// for i = 1 to hexes do
47921: LD_ADDR_VAR 0 9
47925: PUSH
47926: DOUBLE
47927: LD_INT 1
47929: DEC
47930: ST_TO_ADDR
47931: LD_VAR 0 14
47935: PUSH
47936: FOR_TO
47937: IFFALSE 48613
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47939: LD_ADDR_VAR 0 13
47943: PUSH
47944: LD_VAR 0 14
47948: PUSH
47949: LD_VAR 0 9
47953: ARRAY
47954: PUSH
47955: LD_INT 1
47957: ARRAY
47958: PPUSH
47959: LD_VAR 0 14
47963: PUSH
47964: LD_VAR 0 9
47968: ARRAY
47969: PUSH
47970: LD_INT 2
47972: ARRAY
47973: PPUSH
47974: CALL_OW 428
47978: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47979: LD_VAR 0 14
47983: PUSH
47984: LD_VAR 0 9
47988: ARRAY
47989: PUSH
47990: LD_INT 1
47992: ARRAY
47993: PPUSH
47994: LD_VAR 0 14
47998: PUSH
47999: LD_VAR 0 9
48003: ARRAY
48004: PUSH
48005: LD_INT 2
48007: ARRAY
48008: PPUSH
48009: CALL_OW 351
48013: PUSH
48014: LD_VAR 0 14
48018: PUSH
48019: LD_VAR 0 9
48023: ARRAY
48024: PUSH
48025: LD_INT 1
48027: ARRAY
48028: PPUSH
48029: LD_VAR 0 14
48033: PUSH
48034: LD_VAR 0 9
48038: ARRAY
48039: PUSH
48040: LD_INT 2
48042: ARRAY
48043: PPUSH
48044: CALL_OW 488
48048: NOT
48049: OR
48050: PUSH
48051: LD_VAR 0 13
48055: PPUSH
48056: CALL_OW 247
48060: PUSH
48061: LD_INT 3
48063: EQUAL
48064: OR
48065: IFFALSE 48071
// exit ;
48067: POP
48068: POP
48069: GO 48615
// if not tmp then
48071: LD_VAR 0 13
48075: NOT
48076: IFFALSE 48080
// continue ;
48078: GO 47936
// result := true ;
48080: LD_ADDR_VAR 0 8
48084: PUSH
48085: LD_INT 1
48087: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48088: LD_VAR 0 6
48092: PUSH
48093: LD_VAR 0 13
48097: PPUSH
48098: CALL_OW 247
48102: PUSH
48103: LD_INT 2
48105: EQUAL
48106: AND
48107: PUSH
48108: LD_VAR 0 13
48112: PPUSH
48113: CALL_OW 263
48117: PUSH
48118: LD_INT 1
48120: EQUAL
48121: AND
48122: IFFALSE 48286
// begin if IsDrivenBy ( tmp ) then
48124: LD_VAR 0 13
48128: PPUSH
48129: CALL_OW 311
48133: IFFALSE 48137
// continue ;
48135: GO 47936
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48137: LD_VAR 0 6
48141: PPUSH
48142: LD_INT 3
48144: PUSH
48145: LD_INT 60
48147: PUSH
48148: EMPTY
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: LD_INT 55
48160: PUSH
48161: EMPTY
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PPUSH
48172: CALL_OW 72
48176: IFFALSE 48284
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48178: LD_ADDR_VAR 0 18
48182: PUSH
48183: LD_VAR 0 6
48187: PPUSH
48188: LD_INT 3
48190: PUSH
48191: LD_INT 60
48193: PUSH
48194: EMPTY
48195: LIST
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 3
48203: PUSH
48204: LD_INT 55
48206: PUSH
48207: EMPTY
48208: LIST
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PPUSH
48218: CALL_OW 72
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: ST_TO_ADDR
// if IsInUnit ( driver ) then
48227: LD_VAR 0 18
48231: PPUSH
48232: CALL_OW 310
48236: IFFALSE 48247
// ComExit ( driver ) ;
48238: LD_VAR 0 18
48242: PPUSH
48243: CALL 73660 0 1
// AddComEnterUnit ( driver , tmp ) ;
48247: LD_VAR 0 18
48251: PPUSH
48252: LD_VAR 0 13
48256: PPUSH
48257: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48261: LD_VAR 0 18
48265: PPUSH
48266: LD_VAR 0 7
48270: PPUSH
48271: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48275: LD_VAR 0 18
48279: PPUSH
48280: CALL_OW 181
// end ; continue ;
48284: GO 47936
// end ; if not cleaners or not tmp in cleaners then
48286: LD_VAR 0 6
48290: NOT
48291: PUSH
48292: LD_VAR 0 13
48296: PUSH
48297: LD_VAR 0 6
48301: IN
48302: NOT
48303: OR
48304: IFFALSE 48611
// begin if dep then
48306: LD_VAR 0 17
48310: IFFALSE 48446
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48312: LD_ADDR_VAR 0 16
48316: PUSH
48317: LD_VAR 0 17
48321: PUSH
48322: LD_INT 1
48324: ARRAY
48325: PPUSH
48326: CALL_OW 250
48330: PPUSH
48331: LD_VAR 0 17
48335: PUSH
48336: LD_INT 1
48338: ARRAY
48339: PPUSH
48340: CALL_OW 254
48344: PPUSH
48345: LD_INT 5
48347: PPUSH
48348: CALL_OW 272
48352: PUSH
48353: LD_VAR 0 17
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: PPUSH
48362: CALL_OW 251
48366: PPUSH
48367: LD_VAR 0 17
48371: PUSH
48372: LD_INT 1
48374: ARRAY
48375: PPUSH
48376: CALL_OW 254
48380: PPUSH
48381: LD_INT 5
48383: PPUSH
48384: CALL_OW 273
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48393: LD_VAR 0 16
48397: PUSH
48398: LD_INT 1
48400: ARRAY
48401: PPUSH
48402: LD_VAR 0 16
48406: PUSH
48407: LD_INT 2
48409: ARRAY
48410: PPUSH
48411: CALL_OW 488
48415: IFFALSE 48446
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48417: LD_VAR 0 13
48421: PPUSH
48422: LD_VAR 0 16
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: PPUSH
48431: LD_VAR 0 16
48435: PUSH
48436: LD_INT 2
48438: ARRAY
48439: PPUSH
48440: CALL_OW 111
// continue ;
48444: GO 47936
// end ; end ; r := GetDir ( tmp ) ;
48446: LD_ADDR_VAR 0 15
48450: PUSH
48451: LD_VAR 0 13
48455: PPUSH
48456: CALL_OW 254
48460: ST_TO_ADDR
// if r = 5 then
48461: LD_VAR 0 15
48465: PUSH
48466: LD_INT 5
48468: EQUAL
48469: IFFALSE 48479
// r := 0 ;
48471: LD_ADDR_VAR 0 15
48475: PUSH
48476: LD_INT 0
48478: ST_TO_ADDR
// for j = r to 5 do
48479: LD_ADDR_VAR 0 10
48483: PUSH
48484: DOUBLE
48485: LD_VAR 0 15
48489: DEC
48490: ST_TO_ADDR
48491: LD_INT 5
48493: PUSH
48494: FOR_TO
48495: IFFALSE 48609
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48497: LD_ADDR_VAR 0 11
48501: PUSH
48502: LD_VAR 0 13
48506: PPUSH
48507: CALL_OW 250
48511: PPUSH
48512: LD_VAR 0 10
48516: PPUSH
48517: LD_INT 2
48519: PPUSH
48520: CALL_OW 272
48524: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48525: LD_ADDR_VAR 0 12
48529: PUSH
48530: LD_VAR 0 13
48534: PPUSH
48535: CALL_OW 251
48539: PPUSH
48540: LD_VAR 0 10
48544: PPUSH
48545: LD_INT 2
48547: PPUSH
48548: CALL_OW 273
48552: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48553: LD_VAR 0 11
48557: PPUSH
48558: LD_VAR 0 12
48562: PPUSH
48563: CALL_OW 488
48567: PUSH
48568: LD_VAR 0 11
48572: PPUSH
48573: LD_VAR 0 12
48577: PPUSH
48578: CALL_OW 428
48582: NOT
48583: AND
48584: IFFALSE 48607
// begin ComMoveXY ( tmp , _x , _y ) ;
48586: LD_VAR 0 13
48590: PPUSH
48591: LD_VAR 0 11
48595: PPUSH
48596: LD_VAR 0 12
48600: PPUSH
48601: CALL_OW 111
// break ;
48605: GO 48609
// end ; end ;
48607: GO 48494
48609: POP
48610: POP
// end ; end ;
48611: GO 47936
48613: POP
48614: POP
// end ;
48615: LD_VAR 0 8
48619: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48620: LD_INT 0
48622: PPUSH
// result := true ;
48623: LD_ADDR_VAR 0 3
48627: PUSH
48628: LD_INT 1
48630: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48631: LD_VAR 0 2
48635: PUSH
48636: LD_INT 24
48638: DOUBLE
48639: EQUAL
48640: IFTRUE 48650
48642: LD_INT 33
48644: DOUBLE
48645: EQUAL
48646: IFTRUE 48650
48648: GO 48675
48650: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48651: LD_ADDR_VAR 0 3
48655: PUSH
48656: LD_INT 32
48658: PPUSH
48659: LD_VAR 0 1
48663: PPUSH
48664: CALL_OW 321
48668: PUSH
48669: LD_INT 2
48671: EQUAL
48672: ST_TO_ADDR
48673: GO 48991
48675: LD_INT 20
48677: DOUBLE
48678: EQUAL
48679: IFTRUE 48683
48681: GO 48708
48683: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48684: LD_ADDR_VAR 0 3
48688: PUSH
48689: LD_INT 6
48691: PPUSH
48692: LD_VAR 0 1
48696: PPUSH
48697: CALL_OW 321
48701: PUSH
48702: LD_INT 2
48704: EQUAL
48705: ST_TO_ADDR
48706: GO 48991
48708: LD_INT 22
48710: DOUBLE
48711: EQUAL
48712: IFTRUE 48722
48714: LD_INT 36
48716: DOUBLE
48717: EQUAL
48718: IFTRUE 48722
48720: GO 48747
48722: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48723: LD_ADDR_VAR 0 3
48727: PUSH
48728: LD_INT 15
48730: PPUSH
48731: LD_VAR 0 1
48735: PPUSH
48736: CALL_OW 321
48740: PUSH
48741: LD_INT 2
48743: EQUAL
48744: ST_TO_ADDR
48745: GO 48991
48747: LD_INT 30
48749: DOUBLE
48750: EQUAL
48751: IFTRUE 48755
48753: GO 48780
48755: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48756: LD_ADDR_VAR 0 3
48760: PUSH
48761: LD_INT 20
48763: PPUSH
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 321
48773: PUSH
48774: LD_INT 2
48776: EQUAL
48777: ST_TO_ADDR
48778: GO 48991
48780: LD_INT 28
48782: DOUBLE
48783: EQUAL
48784: IFTRUE 48794
48786: LD_INT 21
48788: DOUBLE
48789: EQUAL
48790: IFTRUE 48794
48792: GO 48819
48794: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48795: LD_ADDR_VAR 0 3
48799: PUSH
48800: LD_INT 21
48802: PPUSH
48803: LD_VAR 0 1
48807: PPUSH
48808: CALL_OW 321
48812: PUSH
48813: LD_INT 2
48815: EQUAL
48816: ST_TO_ADDR
48817: GO 48991
48819: LD_INT 16
48821: DOUBLE
48822: EQUAL
48823: IFTRUE 48827
48825: GO 48852
48827: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48828: LD_ADDR_VAR 0 3
48832: PUSH
48833: LD_INT 84
48835: PPUSH
48836: LD_VAR 0 1
48840: PPUSH
48841: CALL_OW 321
48845: PUSH
48846: LD_INT 2
48848: EQUAL
48849: ST_TO_ADDR
48850: GO 48991
48852: LD_INT 19
48854: DOUBLE
48855: EQUAL
48856: IFTRUE 48866
48858: LD_INT 23
48860: DOUBLE
48861: EQUAL
48862: IFTRUE 48866
48864: GO 48891
48866: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48867: LD_ADDR_VAR 0 3
48871: PUSH
48872: LD_INT 83
48874: PPUSH
48875: LD_VAR 0 1
48879: PPUSH
48880: CALL_OW 321
48884: PUSH
48885: LD_INT 2
48887: EQUAL
48888: ST_TO_ADDR
48889: GO 48991
48891: LD_INT 17
48893: DOUBLE
48894: EQUAL
48895: IFTRUE 48899
48897: GO 48924
48899: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48900: LD_ADDR_VAR 0 3
48904: PUSH
48905: LD_INT 39
48907: PPUSH
48908: LD_VAR 0 1
48912: PPUSH
48913: CALL_OW 321
48917: PUSH
48918: LD_INT 2
48920: EQUAL
48921: ST_TO_ADDR
48922: GO 48991
48924: LD_INT 18
48926: DOUBLE
48927: EQUAL
48928: IFTRUE 48932
48930: GO 48957
48932: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48933: LD_ADDR_VAR 0 3
48937: PUSH
48938: LD_INT 40
48940: PPUSH
48941: LD_VAR 0 1
48945: PPUSH
48946: CALL_OW 321
48950: PUSH
48951: LD_INT 2
48953: EQUAL
48954: ST_TO_ADDR
48955: GO 48991
48957: LD_INT 27
48959: DOUBLE
48960: EQUAL
48961: IFTRUE 48965
48963: GO 48990
48965: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48966: LD_ADDR_VAR 0 3
48970: PUSH
48971: LD_INT 35
48973: PPUSH
48974: LD_VAR 0 1
48978: PPUSH
48979: CALL_OW 321
48983: PUSH
48984: LD_INT 2
48986: EQUAL
48987: ST_TO_ADDR
48988: GO 48991
48990: POP
// end ;
48991: LD_VAR 0 3
48995: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48996: LD_INT 0
48998: PPUSH
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
// result := false ;
49009: LD_ADDR_VAR 0 6
49013: PUSH
49014: LD_INT 0
49016: ST_TO_ADDR
// if btype = b_depot then
49017: LD_VAR 0 2
49021: PUSH
49022: LD_INT 0
49024: EQUAL
49025: IFFALSE 49037
// begin result := true ;
49027: LD_ADDR_VAR 0 6
49031: PUSH
49032: LD_INT 1
49034: ST_TO_ADDR
// exit ;
49035: GO 49863
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49037: LD_VAR 0 1
49041: NOT
49042: PUSH
49043: LD_VAR 0 1
49047: PPUSH
49048: CALL_OW 266
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: IN
49063: NOT
49064: OR
49065: PUSH
49066: LD_VAR 0 2
49070: NOT
49071: OR
49072: PUSH
49073: LD_VAR 0 5
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: LD_INT 4
49092: PUSH
49093: LD_INT 5
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: IN
49104: NOT
49105: OR
49106: PUSH
49107: LD_VAR 0 3
49111: PPUSH
49112: LD_VAR 0 4
49116: PPUSH
49117: CALL_OW 488
49121: NOT
49122: OR
49123: IFFALSE 49127
// exit ;
49125: GO 49863
// side := GetSide ( depot ) ;
49127: LD_ADDR_VAR 0 9
49131: PUSH
49132: LD_VAR 0 1
49136: PPUSH
49137: CALL_OW 255
49141: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49142: LD_VAR 0 9
49146: PPUSH
49147: LD_VAR 0 2
49151: PPUSH
49152: CALL 48620 0 2
49156: NOT
49157: IFFALSE 49161
// exit ;
49159: GO 49863
// pom := GetBase ( depot ) ;
49161: LD_ADDR_VAR 0 10
49165: PUSH
49166: LD_VAR 0 1
49170: PPUSH
49171: CALL_OW 274
49175: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49176: LD_ADDR_VAR 0 11
49180: PUSH
49181: LD_VAR 0 2
49185: PPUSH
49186: LD_VAR 0 1
49190: PPUSH
49191: CALL_OW 248
49195: PPUSH
49196: CALL_OW 450
49200: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49201: LD_VAR 0 10
49205: PPUSH
49206: LD_INT 1
49208: PPUSH
49209: CALL_OW 275
49213: PUSH
49214: LD_VAR 0 11
49218: PUSH
49219: LD_INT 1
49221: ARRAY
49222: GREATEREQUAL
49223: PUSH
49224: LD_VAR 0 10
49228: PPUSH
49229: LD_INT 2
49231: PPUSH
49232: CALL_OW 275
49236: PUSH
49237: LD_VAR 0 11
49241: PUSH
49242: LD_INT 2
49244: ARRAY
49245: GREATEREQUAL
49246: AND
49247: PUSH
49248: LD_VAR 0 10
49252: PPUSH
49253: LD_INT 3
49255: PPUSH
49256: CALL_OW 275
49260: PUSH
49261: LD_VAR 0 11
49265: PUSH
49266: LD_INT 3
49268: ARRAY
49269: GREATEREQUAL
49270: AND
49271: NOT
49272: IFFALSE 49276
// exit ;
49274: GO 49863
// if GetBType ( depot ) = b_depot then
49276: LD_VAR 0 1
49280: PPUSH
49281: CALL_OW 266
49285: PUSH
49286: LD_INT 0
49288: EQUAL
49289: IFFALSE 49301
// dist := 28 else
49291: LD_ADDR_VAR 0 14
49295: PUSH
49296: LD_INT 28
49298: ST_TO_ADDR
49299: GO 49309
// dist := 36 ;
49301: LD_ADDR_VAR 0 14
49305: PUSH
49306: LD_INT 36
49308: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49309: LD_VAR 0 1
49313: PPUSH
49314: LD_VAR 0 3
49318: PPUSH
49319: LD_VAR 0 4
49323: PPUSH
49324: CALL_OW 297
49328: PUSH
49329: LD_VAR 0 14
49333: GREATER
49334: IFFALSE 49338
// exit ;
49336: GO 49863
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49338: LD_ADDR_VAR 0 12
49342: PUSH
49343: LD_VAR 0 2
49347: PPUSH
49348: LD_VAR 0 3
49352: PPUSH
49353: LD_VAR 0 4
49357: PPUSH
49358: LD_VAR 0 5
49362: PPUSH
49363: LD_VAR 0 1
49367: PPUSH
49368: CALL_OW 248
49372: PPUSH
49373: LD_INT 0
49375: PPUSH
49376: CALL 49868 0 6
49380: ST_TO_ADDR
// if not hexes then
49381: LD_VAR 0 12
49385: NOT
49386: IFFALSE 49390
// exit ;
49388: GO 49863
// hex := GetHexInfo ( x , y ) ;
49390: LD_ADDR_VAR 0 15
49394: PUSH
49395: LD_VAR 0 3
49399: PPUSH
49400: LD_VAR 0 4
49404: PPUSH
49405: CALL_OW 546
49409: ST_TO_ADDR
// if hex [ 1 ] then
49410: LD_VAR 0 15
49414: PUSH
49415: LD_INT 1
49417: ARRAY
49418: IFFALSE 49422
// exit ;
49420: GO 49863
// height := hex [ 2 ] ;
49422: LD_ADDR_VAR 0 13
49426: PUSH
49427: LD_VAR 0 15
49431: PUSH
49432: LD_INT 2
49434: ARRAY
49435: ST_TO_ADDR
// for i = 1 to hexes do
49436: LD_ADDR_VAR 0 7
49440: PUSH
49441: DOUBLE
49442: LD_INT 1
49444: DEC
49445: ST_TO_ADDR
49446: LD_VAR 0 12
49450: PUSH
49451: FOR_TO
49452: IFFALSE 49782
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49454: LD_VAR 0 12
49458: PUSH
49459: LD_VAR 0 7
49463: ARRAY
49464: PUSH
49465: LD_INT 1
49467: ARRAY
49468: PPUSH
49469: LD_VAR 0 12
49473: PUSH
49474: LD_VAR 0 7
49478: ARRAY
49479: PUSH
49480: LD_INT 2
49482: ARRAY
49483: PPUSH
49484: CALL_OW 488
49488: NOT
49489: PUSH
49490: LD_VAR 0 12
49494: PUSH
49495: LD_VAR 0 7
49499: ARRAY
49500: PUSH
49501: LD_INT 1
49503: ARRAY
49504: PPUSH
49505: LD_VAR 0 12
49509: PUSH
49510: LD_VAR 0 7
49514: ARRAY
49515: PUSH
49516: LD_INT 2
49518: ARRAY
49519: PPUSH
49520: CALL_OW 428
49524: PUSH
49525: LD_INT 0
49527: GREATER
49528: OR
49529: PUSH
49530: LD_VAR 0 12
49534: PUSH
49535: LD_VAR 0 7
49539: ARRAY
49540: PUSH
49541: LD_INT 1
49543: ARRAY
49544: PPUSH
49545: LD_VAR 0 12
49549: PUSH
49550: LD_VAR 0 7
49554: ARRAY
49555: PUSH
49556: LD_INT 2
49558: ARRAY
49559: PPUSH
49560: CALL_OW 351
49564: OR
49565: IFFALSE 49571
// exit ;
49567: POP
49568: POP
49569: GO 49863
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49571: LD_ADDR_VAR 0 8
49575: PUSH
49576: LD_VAR 0 12
49580: PUSH
49581: LD_VAR 0 7
49585: ARRAY
49586: PUSH
49587: LD_INT 1
49589: ARRAY
49590: PPUSH
49591: LD_VAR 0 12
49595: PUSH
49596: LD_VAR 0 7
49600: ARRAY
49601: PUSH
49602: LD_INT 2
49604: ARRAY
49605: PPUSH
49606: CALL_OW 546
49610: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49611: LD_VAR 0 8
49615: PUSH
49616: LD_INT 1
49618: ARRAY
49619: PUSH
49620: LD_VAR 0 8
49624: PUSH
49625: LD_INT 2
49627: ARRAY
49628: PUSH
49629: LD_VAR 0 13
49633: PUSH
49634: LD_INT 2
49636: PLUS
49637: GREATER
49638: OR
49639: PUSH
49640: LD_VAR 0 8
49644: PUSH
49645: LD_INT 2
49647: ARRAY
49648: PUSH
49649: LD_VAR 0 13
49653: PUSH
49654: LD_INT 2
49656: MINUS
49657: LESS
49658: OR
49659: PUSH
49660: LD_VAR 0 8
49664: PUSH
49665: LD_INT 3
49667: ARRAY
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 8
49674: PUSH
49675: LD_INT 9
49677: PUSH
49678: LD_INT 10
49680: PUSH
49681: LD_INT 11
49683: PUSH
49684: LD_INT 12
49686: PUSH
49687: LD_INT 13
49689: PUSH
49690: LD_INT 16
49692: PUSH
49693: LD_INT 17
49695: PUSH
49696: LD_INT 18
49698: PUSH
49699: LD_INT 19
49701: PUSH
49702: LD_INT 20
49704: PUSH
49705: LD_INT 21
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: IN
49723: NOT
49724: OR
49725: PUSH
49726: LD_VAR 0 8
49730: PUSH
49731: LD_INT 5
49733: ARRAY
49734: NOT
49735: OR
49736: PUSH
49737: LD_VAR 0 8
49741: PUSH
49742: LD_INT 6
49744: ARRAY
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 7
49754: PUSH
49755: LD_INT 9
49757: PUSH
49758: LD_INT 10
49760: PUSH
49761: LD_INT 11
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: IN
49772: NOT
49773: OR
49774: IFFALSE 49780
// exit ;
49776: POP
49777: POP
49778: GO 49863
// end ;
49780: GO 49451
49782: POP
49783: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49784: LD_VAR 0 9
49788: PPUSH
49789: LD_VAR 0 3
49793: PPUSH
49794: LD_VAR 0 4
49798: PPUSH
49799: LD_INT 20
49801: PPUSH
49802: CALL 41786 0 4
49806: PUSH
49807: LD_INT 4
49809: ARRAY
49810: IFFALSE 49814
// exit ;
49812: GO 49863
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49814: LD_VAR 0 2
49818: PUSH
49819: LD_INT 29
49821: PUSH
49822: LD_INT 30
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: IN
49829: PUSH
49830: LD_VAR 0 3
49834: PPUSH
49835: LD_VAR 0 4
49839: PPUSH
49840: LD_VAR 0 9
49844: PPUSH
49845: CALL_OW 440
49849: NOT
49850: AND
49851: IFFALSE 49855
// exit ;
49853: GO 49863
// result := true ;
49855: LD_ADDR_VAR 0 6
49859: PUSH
49860: LD_INT 1
49862: ST_TO_ADDR
// end ;
49863: LD_VAR 0 6
49867: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49868: LD_INT 0
49870: PPUSH
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
49879: PPUSH
49880: PPUSH
49881: PPUSH
49882: PPUSH
49883: PPUSH
49884: PPUSH
49885: PPUSH
49886: PPUSH
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
49904: PPUSH
49905: PPUSH
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
// result = [ ] ;
49928: LD_ADDR_VAR 0 7
49932: PUSH
49933: EMPTY
49934: ST_TO_ADDR
// temp_list = [ ] ;
49935: LD_ADDR_VAR 0 9
49939: PUSH
49940: EMPTY
49941: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49942: LD_VAR 0 4
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 3
49958: PUSH
49959: LD_INT 4
49961: PUSH
49962: LD_INT 5
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: IN
49973: NOT
49974: PUSH
49975: LD_VAR 0 1
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: IN
49990: PUSH
49991: LD_VAR 0 5
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 3
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: LIST
50009: IN
50010: NOT
50011: AND
50012: OR
50013: IFFALSE 50017
// exit ;
50015: GO 68408
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50017: LD_VAR 0 1
50021: PUSH
50022: LD_INT 6
50024: PUSH
50025: LD_INT 7
50027: PUSH
50028: LD_INT 8
50030: PUSH
50031: LD_INT 13
50033: PUSH
50034: LD_INT 12
50036: PUSH
50037: LD_INT 15
50039: PUSH
50040: LD_INT 11
50042: PUSH
50043: LD_INT 14
50045: PUSH
50046: LD_INT 10
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: IN
50060: IFFALSE 50070
// btype = b_lab ;
50062: LD_ADDR_VAR 0 1
50066: PUSH
50067: LD_INT 6
50069: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50070: LD_VAR 0 6
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: IN
50089: NOT
50090: PUSH
50091: LD_VAR 0 1
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: LD_INT 6
50110: PUSH
50111: LD_INT 36
50113: PUSH
50114: LD_INT 4
50116: PUSH
50117: LD_INT 5
50119: PUSH
50120: LD_INT 31
50122: PUSH
50123: LD_INT 32
50125: PUSH
50126: LD_INT 33
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: IN
50142: NOT
50143: PUSH
50144: LD_VAR 0 6
50148: PUSH
50149: LD_INT 1
50151: EQUAL
50152: AND
50153: OR
50154: PUSH
50155: LD_VAR 0 1
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: IN
50170: NOT
50171: PUSH
50172: LD_VAR 0 6
50176: PUSH
50177: LD_INT 2
50179: EQUAL
50180: AND
50181: OR
50182: IFFALSE 50192
// mode = 0 ;
50184: LD_ADDR_VAR 0 6
50188: PUSH
50189: LD_INT 0
50191: ST_TO_ADDR
// case mode of 0 :
50192: LD_VAR 0 6
50196: PUSH
50197: LD_INT 0
50199: DOUBLE
50200: EQUAL
50201: IFTRUE 50205
50203: GO 61658
50205: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50206: LD_ADDR_VAR 0 11
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 3
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50399: LD_ADDR_VAR 0 12
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50595: LD_ADDR_VAR 0 13
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 3
50754: NEG
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50794: LD_ADDR_VAR 0 14
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50990: LD_ADDR_VAR 0 15
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51183: LD_ADDR_VAR 0 16
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 3
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: LD_INT 3
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51376: LD_ADDR_VAR 0 17
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51606: LD_ADDR_VAR 0 18
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51836: LD_ADDR_VAR 0 19
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52066: LD_ADDR_VAR 0 20
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52296: LD_ADDR_VAR 0 21
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52526: LD_ADDR_VAR 0 22
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52756: LD_ADDR_VAR 0 23
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 3
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53036: LD_ADDR_VAR 0 24
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53312: LD_ADDR_VAR 0 25
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53586: LD_ADDR_VAR 0 26
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53862: LD_ADDR_VAR 0 27
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54142: LD_ADDR_VAR 0 28
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54424: LD_ADDR_VAR 0 29
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54703: LD_ADDR_VAR 0 30
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 3
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54981: LD_ADDR_VAR 0 31
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 3
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 3
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55259: LD_ADDR_VAR 0 32
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55537: LD_ADDR_VAR 0 33
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: LD_INT 3
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55816: LD_ADDR_VAR 0 34
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56096: LD_ADDR_VAR 0 35
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56208: LD_ADDR_VAR 0 36
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56320: LD_ADDR_VAR 0 37
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56432: LD_ADDR_VAR 0 38
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56544: LD_ADDR_VAR 0 39
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56656: LD_ADDR_VAR 0 40
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56768: LD_ADDR_VAR 0 41
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 3
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 3
57065: NEG
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57118: LD_ADDR_VAR 0 42
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57468: LD_ADDR_VAR 0 43
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57816: LD_ADDR_VAR 0 44
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58166: LD_ADDR_VAR 0 45
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 3
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58516: LD_ADDR_VAR 0 46
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 3
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58864: LD_ADDR_VAR 0 47
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59015: LD_ADDR_VAR 0 48
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59162: LD_ADDR_VAR 0 49
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59306: LD_ADDR_VAR 0 50
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59450: LD_ADDR_VAR 0 51
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59597: LD_ADDR_VAR 0 52
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59748: LD_ADDR_VAR 0 53
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59978: LD_ADDR_VAR 0 54
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60208: LD_ADDR_VAR 0 55
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60438: LD_ADDR_VAR 0 56
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: LD_INT 2
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60668: LD_ADDR_VAR 0 57
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60898: LD_ADDR_VAR 0 58
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61128: LD_ADDR_VAR 0 59
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61216: LD_ADDR_VAR 0 60
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61304: LD_ADDR_VAR 0 61
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61392: LD_ADDR_VAR 0 62
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61480: LD_ADDR_VAR 0 63
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61568: LD_ADDR_VAR 0 64
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: NEG
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: ST_TO_ADDR
// end ; 1 :
61656: GO 67553
61658: LD_INT 1
61660: DOUBLE
61661: EQUAL
61662: IFTRUE 61666
61664: GO 64289
61666: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61667: LD_ADDR_VAR 0 11
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61711: LD_ADDR_VAR 0 12
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61752: LD_ADDR_VAR 0 13
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61792: LD_ADDR_VAR 0 14
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61833: LD_ADDR_VAR 0 15
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: LIST
61876: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61877: LD_ADDR_VAR 0 16
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 3
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 3
61908: NEG
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61923: LD_ADDR_VAR 0 17
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 3
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: LIST
61966: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61967: LD_ADDR_VAR 0 18
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62008: LD_ADDR_VAR 0 19
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: LIST
62047: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62048: LD_ADDR_VAR 0 20
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62089: LD_ADDR_VAR 0 21
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: NEG
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62133: LD_ADDR_VAR 0 22
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: LIST
62178: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62179: LD_ADDR_VAR 0 23
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 3
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 4
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62223: LD_ADDR_VAR 0 24
62227: PUSH
62228: LD_INT 3
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 3
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 4
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62264: LD_ADDR_VAR 0 25
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: LD_INT 3
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 4
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: LD_INT 4
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62304: LD_ADDR_VAR 0 26
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: LD_INT 4
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: LIST
62344: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62345: LD_ADDR_VAR 0 27
62349: PUSH
62350: LD_INT 3
62352: NEG
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 3
62363: NEG
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 4
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: LIST
62388: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62389: LD_ADDR_VAR 0 28
62393: PUSH
62394: LD_INT 3
62396: NEG
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: LD_INT 4
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 4
62420: NEG
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62435: LD_ADDR_VAR 0 29
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 3
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 4
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: LD_INT 4
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: LD_INT 5
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_INT 5
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 4
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 6
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 6
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 5
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62590: LD_ADDR_VAR 0 30
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 4
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 4
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 4
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 5
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 5
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 5
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 6
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 6
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62733: LD_ADDR_VAR 0 31
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 3
62750: PUSH
62751: LD_INT 3
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: LD_INT 3
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 4
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 4
62780: PUSH
62781: LD_INT 4
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: LD_INT 4
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 5
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 5
62810: PUSH
62811: LD_INT 5
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: LD_INT 5
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 6
62830: PUSH
62831: LD_INT 5
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 6
62840: PUSH
62841: LD_INT 6
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 5
62850: PUSH
62851: LD_INT 6
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62872: LD_ADDR_VAR 0 32
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 3
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 3
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 4
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 4
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: LD_INT 3
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 5
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 5
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: LD_INT 4
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: LD_INT 6
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: LD_INT 6
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 5
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63015: LD_ADDR_VAR 0 33
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 3
63033: NEG
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 3
63044: NEG
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 4
63067: NEG
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 4
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 4
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 5
63101: NEG
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 5
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 5
63124: NEG
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 6
63135: NEG
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 6
63146: NEG
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63170: LD_ADDR_VAR 0 34
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 3
63189: NEG
63190: PUSH
63191: LD_INT 2
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 3
63201: NEG
63202: PUSH
63203: LD_INT 3
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 3
63213: NEG
63214: PUSH
63215: LD_INT 4
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 4
63225: NEG
63226: PUSH
63227: LD_INT 3
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 4
63237: NEG
63238: PUSH
63239: LD_INT 4
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 4
63249: NEG
63250: PUSH
63251: LD_INT 5
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 5
63261: NEG
63262: PUSH
63263: LD_INT 4
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 5
63273: NEG
63274: PUSH
63275: LD_INT 5
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 5
63285: NEG
63286: PUSH
63287: LD_INT 6
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 6
63297: NEG
63298: PUSH
63299: LD_INT 5
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 6
63309: NEG
63310: PUSH
63311: LD_INT 6
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63333: LD_ADDR_VAR 0 41
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63377: LD_ADDR_VAR 0 42
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 3
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63418: LD_ADDR_VAR 0 43
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: LD_INT 3
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63458: LD_ADDR_VAR 0 44
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: LIST
63498: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63499: LD_ADDR_VAR 0 45
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: NEG
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63543: LD_ADDR_VAR 0 46
63547: PUSH
63548: LD_INT 2
63550: NEG
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 3
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: NEG
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63589: LD_ADDR_VAR 0 47
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: LD_INT 3
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63622: LD_ADDR_VAR 0 48
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 2
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 1
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63653: LD_ADDR_VAR 0 49
63657: PUSH
63658: LD_INT 3
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 3
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63682: LD_ADDR_VAR 0 50
63686: PUSH
63687: LD_INT 2
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 3
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63711: LD_ADDR_VAR 0 51
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63742: LD_ADDR_VAR 0 52
63746: PUSH
63747: LD_INT 3
63749: NEG
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 3
63761: NEG
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63775: LD_ADDR_VAR 0 53
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: LD_INT 3
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 3
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63819: LD_ADDR_VAR 0 54
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 3
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 3
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63860: LD_ADDR_VAR 0 55
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: LD_INT 3
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63900: LD_ADDR_VAR 0 56
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 3
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 3
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63941: LD_ADDR_VAR 0 57
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 3
63959: NEG
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63985: LD_ADDR_VAR 0 58
63989: PUSH
63990: LD_INT 2
63992: NEG
63993: PUSH
63994: LD_INT 3
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 3
64004: NEG
64005: PUSH
64006: LD_INT 2
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 3
64016: NEG
64017: PUSH
64018: LD_INT 3
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64031: LD_ADDR_VAR 0 59
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: LD_INT 2
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 2
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64075: LD_ADDR_VAR 0 60
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64116: LD_ADDR_VAR 0 61
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64156: LD_ADDR_VAR 0 62
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64197: LD_ADDR_VAR 0 63
64201: PUSH
64202: LD_INT 1
64204: NEG
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 2
64215: NEG
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: LD_INT 1
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64241: LD_ADDR_VAR 0 64
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: LD_INT 1
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: LD_INT 2
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: ST_TO_ADDR
// end ; 2 :
64287: GO 67553
64289: LD_INT 2
64291: DOUBLE
64292: EQUAL
64293: IFTRUE 64297
64295: GO 67552
64297: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64298: LD_ADDR_VAR 0 29
64302: PUSH
64303: LD_INT 4
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 4
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 5
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 4
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: LD_INT 2
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 5
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 4
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 4
64428: PUSH
64429: LD_INT 4
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 3
64438: PUSH
64439: LD_INT 4
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: LD_INT 3
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 4
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: LD_INT 4
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 4
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: LD_INT 4
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: LD_INT 5
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 5
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: LD_INT 4
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 2
64560: PUSH
64561: LD_INT 5
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 3
64581: NEG
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 3
64592: NEG
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 2
64604: NEG
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 3
64626: NEG
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 4
64637: NEG
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 4
64648: NEG
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 4
64660: NEG
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: NEG
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 4
64683: NEG
64684: PUSH
64685: LD_INT 4
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 4
64695: NEG
64696: PUSH
64697: LD_INT 5
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: LD_INT 4
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 3
64719: NEG
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 4
64731: NEG
64732: PUSH
64733: LD_INT 3
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 5
64743: NEG
64744: PUSH
64745: LD_INT 4
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 5
64755: NEG
64756: PUSH
64757: LD_INT 5
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 3
64767: NEG
64768: PUSH
64769: LD_INT 5
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 5
64779: NEG
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64836: LD_ADDR_VAR 0 30
64840: PUSH
64841: LD_INT 4
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 4
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 5
64863: PUSH
64864: LD_INT 4
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 5
64873: PUSH
64874: LD_INT 5
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 4
64883: PUSH
64884: LD_INT 5
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 3
64893: PUSH
64894: LD_INT 4
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 5
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 5
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 3
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 4
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 4
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: LD_INT 2
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 4
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 4
65026: NEG
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 4
65037: NEG
65038: PUSH
65039: LD_INT 1
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: NEG
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: NEG
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 4
65071: NEG
65072: PUSH
65073: LD_INT 1
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 5
65082: NEG
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 5
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 5
65105: NEG
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: LD_INT 2
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 3
65128: NEG
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 3
65140: NEG
65141: PUSH
65142: LD_INT 4
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 2
65152: NEG
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: NEG
65165: PUSH
65166: LD_INT 2
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 3
65176: NEG
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 4
65188: NEG
65189: PUSH
65190: LD_INT 3
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 4
65200: NEG
65201: PUSH
65202: LD_INT 4
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 2
65212: NEG
65213: PUSH
65214: LD_INT 4
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 4
65224: NEG
65225: PUSH
65226: LD_INT 2
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: LD_INT 4
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 5
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: LD_INT 3
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 4
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: LD_INT 5
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 2
65315: PUSH
65316: LD_INT 3
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: LD_INT 5
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65383: LD_ADDR_VAR 0 31
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 4
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 4
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: LD_INT 5
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 5
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 4
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: LD_INT 5
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 3
65528: NEG
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 4
65539: NEG
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 4
65550: NEG
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 4
65562: NEG
65563: PUSH
65564: LD_INT 2
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 2
65574: NEG
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 4
65585: NEG
65586: PUSH
65587: LD_INT 4
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 4
65597: NEG
65598: PUSH
65599: LD_INT 5
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: LD_INT 4
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 3
65621: NEG
65622: PUSH
65623: LD_INT 3
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 4
65633: NEG
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 5
65645: NEG
65646: PUSH
65647: LD_INT 4
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 5
65657: NEG
65658: PUSH
65659: LD_INT 5
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 3
65669: NEG
65670: PUSH
65671: LD_INT 5
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 5
65681: NEG
65682: PUSH
65683: LD_INT 3
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: LD_INT 3
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 4
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 3
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 4
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: LD_INT 2
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 2
65783: NEG
65784: PUSH
65785: LD_INT 4
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 4
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 4
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 5
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 5
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 4
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: LD_INT 2
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 5
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65933: LD_ADDR_VAR 0 32
65937: PUSH
65938: LD_INT 4
65940: NEG
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 4
65951: NEG
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 4
65985: NEG
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 5
65996: NEG
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 5
66007: NEG
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 5
66019: NEG
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: LD_INT 4
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 2
66066: NEG
66067: PUSH
66068: LD_INT 3
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 2
66078: NEG
66079: PUSH
66080: LD_INT 2
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 3
66090: NEG
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 4
66102: NEG
66103: PUSH
66104: LD_INT 3
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 4
66114: NEG
66115: PUSH
66116: LD_INT 4
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: LD_INT 4
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 4
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: LD_INT 5
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: LD_INT 4
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: LD_INT 4
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 5
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 2
66229: PUSH
66230: LD_INT 3
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 2
66240: NEG
66241: PUSH
66242: LD_INT 5
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 3
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 3
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 4
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 4
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 4
66335: PUSH
66336: LD_INT 2
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 4
66345: PUSH
66346: LD_INT 4
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 4
66355: PUSH
66356: LD_INT 3
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 5
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 5
66375: PUSH
66376: LD_INT 5
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 4
66385: PUSH
66386: LD_INT 5
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 3
66395: PUSH
66396: LD_INT 4
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 5
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 5
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66480: LD_ADDR_VAR 0 33
66484: PUSH
66485: LD_INT 4
66487: NEG
66488: PUSH
66489: LD_INT 4
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 4
66499: NEG
66500: PUSH
66501: LD_INT 5
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 3
66511: NEG
66512: PUSH
66513: LD_INT 4
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: LD_INT 3
66527: NEG
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 4
66535: NEG
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 5
66547: NEG
66548: PUSH
66549: LD_INT 4
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 5
66559: NEG
66560: PUSH
66561: LD_INT 5
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: LD_INT 5
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 5
66583: NEG
66584: PUSH
66585: LD_INT 3
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: LD_INT 3
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 4
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 2
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: LD_INT 3
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: NEG
66663: PUSH
66664: LD_INT 4
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: PUSH
66675: LD_INT 2
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: LD_INT 4
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 4
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 4
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 5
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 5
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: LD_INT 2
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 5
66780: PUSH
66781: LD_INT 2
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: LD_INT 3
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 3
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 4
66810: PUSH
66811: LD_INT 3
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 4
66820: PUSH
66821: LD_INT 4
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 3
66830: PUSH
66831: LD_INT 4
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 3
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 2
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 4
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 2
66870: PUSH
66871: LD_INT 4
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 4
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: LD_INT 4
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 1
66910: PUSH
66911: LD_INT 5
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: LD_INT 5
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 5
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 2
66962: NEG
66963: PUSH
66964: LD_INT 3
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67018: LD_ADDR_VAR 0 34
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: LD_INT 4
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: LD_INT 5
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 1
67047: PUSH
67048: LD_INT 4
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: LD_INT 3
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 4
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 1
67092: NEG
67093: PUSH
67094: LD_INT 5
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: LD_INT 5
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 3
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 4
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 4
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: LD_INT 0
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: LD_INT 1
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 2
67199: PUSH
67200: LD_INT 2
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 4
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 4
67230: PUSH
67231: LD_INT 3
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 5
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 5
67250: PUSH
67251: LD_INT 5
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 4
67260: PUSH
67261: LD_INT 5
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 3
67270: PUSH
67271: LD_INT 4
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 3
67280: PUSH
67281: LD_INT 3
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 5
67290: PUSH
67291: LD_INT 3
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: LD_INT 5
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 0
67310: PUSH
67311: LD_INT 3
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: LD_INT 3
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 4
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: LD_INT 4
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: LD_INT 3
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 1
67371: NEG
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: LD_INT 4
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 2
67392: NEG
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 4
67403: NEG
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 4
67414: NEG
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 3
67437: NEG
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 4
67448: NEG
67449: PUSH
67450: LD_INT 1
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 5
67459: NEG
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 5
67470: NEG
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 5
67482: NEG
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: NEG
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: ST_TO_ADDR
// end ; end ;
67550: GO 67553
67552: POP
// case btype of b_depot , b_warehouse :
67553: LD_VAR 0 1
67557: PUSH
67558: LD_INT 0
67560: DOUBLE
67561: EQUAL
67562: IFTRUE 67572
67564: LD_INT 1
67566: DOUBLE
67567: EQUAL
67568: IFTRUE 67572
67570: GO 67773
67572: POP
// case nation of nation_american :
67573: LD_VAR 0 5
67577: PUSH
67578: LD_INT 1
67580: DOUBLE
67581: EQUAL
67582: IFTRUE 67586
67584: GO 67642
67586: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67587: LD_ADDR_VAR 0 9
67591: PUSH
67592: LD_VAR 0 11
67596: PUSH
67597: LD_VAR 0 12
67601: PUSH
67602: LD_VAR 0 13
67606: PUSH
67607: LD_VAR 0 14
67611: PUSH
67612: LD_VAR 0 15
67616: PUSH
67617: LD_VAR 0 16
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: PUSH
67630: LD_VAR 0 4
67634: PUSH
67635: LD_INT 1
67637: PLUS
67638: ARRAY
67639: ST_TO_ADDR
67640: GO 67771
67642: LD_INT 2
67644: DOUBLE
67645: EQUAL
67646: IFTRUE 67650
67648: GO 67706
67650: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67651: LD_ADDR_VAR 0 9
67655: PUSH
67656: LD_VAR 0 17
67660: PUSH
67661: LD_VAR 0 18
67665: PUSH
67666: LD_VAR 0 19
67670: PUSH
67671: LD_VAR 0 20
67675: PUSH
67676: LD_VAR 0 21
67680: PUSH
67681: LD_VAR 0 22
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: PUSH
67694: LD_VAR 0 4
67698: PUSH
67699: LD_INT 1
67701: PLUS
67702: ARRAY
67703: ST_TO_ADDR
67704: GO 67771
67706: LD_INT 3
67708: DOUBLE
67709: EQUAL
67710: IFTRUE 67714
67712: GO 67770
67714: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67715: LD_ADDR_VAR 0 9
67719: PUSH
67720: LD_VAR 0 23
67724: PUSH
67725: LD_VAR 0 24
67729: PUSH
67730: LD_VAR 0 25
67734: PUSH
67735: LD_VAR 0 26
67739: PUSH
67740: LD_VAR 0 27
67744: PUSH
67745: LD_VAR 0 28
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: PUSH
67758: LD_VAR 0 4
67762: PUSH
67763: LD_INT 1
67765: PLUS
67766: ARRAY
67767: ST_TO_ADDR
67768: GO 67771
67770: POP
67771: GO 68326
67773: LD_INT 2
67775: DOUBLE
67776: EQUAL
67777: IFTRUE 67787
67779: LD_INT 3
67781: DOUBLE
67782: EQUAL
67783: IFTRUE 67787
67785: GO 67843
67787: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67788: LD_ADDR_VAR 0 9
67792: PUSH
67793: LD_VAR 0 29
67797: PUSH
67798: LD_VAR 0 30
67802: PUSH
67803: LD_VAR 0 31
67807: PUSH
67808: LD_VAR 0 32
67812: PUSH
67813: LD_VAR 0 33
67817: PUSH
67818: LD_VAR 0 34
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: PUSH
67831: LD_VAR 0 4
67835: PUSH
67836: LD_INT 1
67838: PLUS
67839: ARRAY
67840: ST_TO_ADDR
67841: GO 68326
67843: LD_INT 16
67845: DOUBLE
67846: EQUAL
67847: IFTRUE 67905
67849: LD_INT 17
67851: DOUBLE
67852: EQUAL
67853: IFTRUE 67905
67855: LD_INT 18
67857: DOUBLE
67858: EQUAL
67859: IFTRUE 67905
67861: LD_INT 19
67863: DOUBLE
67864: EQUAL
67865: IFTRUE 67905
67867: LD_INT 22
67869: DOUBLE
67870: EQUAL
67871: IFTRUE 67905
67873: LD_INT 20
67875: DOUBLE
67876: EQUAL
67877: IFTRUE 67905
67879: LD_INT 21
67881: DOUBLE
67882: EQUAL
67883: IFTRUE 67905
67885: LD_INT 23
67887: DOUBLE
67888: EQUAL
67889: IFTRUE 67905
67891: LD_INT 24
67893: DOUBLE
67894: EQUAL
67895: IFTRUE 67905
67897: LD_INT 25
67899: DOUBLE
67900: EQUAL
67901: IFTRUE 67905
67903: GO 67961
67905: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67906: LD_ADDR_VAR 0 9
67910: PUSH
67911: LD_VAR 0 35
67915: PUSH
67916: LD_VAR 0 36
67920: PUSH
67921: LD_VAR 0 37
67925: PUSH
67926: LD_VAR 0 38
67930: PUSH
67931: LD_VAR 0 39
67935: PUSH
67936: LD_VAR 0 40
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: PUSH
67949: LD_VAR 0 4
67953: PUSH
67954: LD_INT 1
67956: PLUS
67957: ARRAY
67958: ST_TO_ADDR
67959: GO 68326
67961: LD_INT 6
67963: DOUBLE
67964: EQUAL
67965: IFTRUE 68017
67967: LD_INT 7
67969: DOUBLE
67970: EQUAL
67971: IFTRUE 68017
67973: LD_INT 8
67975: DOUBLE
67976: EQUAL
67977: IFTRUE 68017
67979: LD_INT 13
67981: DOUBLE
67982: EQUAL
67983: IFTRUE 68017
67985: LD_INT 12
67987: DOUBLE
67988: EQUAL
67989: IFTRUE 68017
67991: LD_INT 15
67993: DOUBLE
67994: EQUAL
67995: IFTRUE 68017
67997: LD_INT 11
67999: DOUBLE
68000: EQUAL
68001: IFTRUE 68017
68003: LD_INT 14
68005: DOUBLE
68006: EQUAL
68007: IFTRUE 68017
68009: LD_INT 10
68011: DOUBLE
68012: EQUAL
68013: IFTRUE 68017
68015: GO 68073
68017: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68018: LD_ADDR_VAR 0 9
68022: PUSH
68023: LD_VAR 0 41
68027: PUSH
68028: LD_VAR 0 42
68032: PUSH
68033: LD_VAR 0 43
68037: PUSH
68038: LD_VAR 0 44
68042: PUSH
68043: LD_VAR 0 45
68047: PUSH
68048: LD_VAR 0 46
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: PUSH
68061: LD_VAR 0 4
68065: PUSH
68066: LD_INT 1
68068: PLUS
68069: ARRAY
68070: ST_TO_ADDR
68071: GO 68326
68073: LD_INT 36
68075: DOUBLE
68076: EQUAL
68077: IFTRUE 68081
68079: GO 68137
68081: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68082: LD_ADDR_VAR 0 9
68086: PUSH
68087: LD_VAR 0 47
68091: PUSH
68092: LD_VAR 0 48
68096: PUSH
68097: LD_VAR 0 49
68101: PUSH
68102: LD_VAR 0 50
68106: PUSH
68107: LD_VAR 0 51
68111: PUSH
68112: LD_VAR 0 52
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: PUSH
68125: LD_VAR 0 4
68129: PUSH
68130: LD_INT 1
68132: PLUS
68133: ARRAY
68134: ST_TO_ADDR
68135: GO 68326
68137: LD_INT 4
68139: DOUBLE
68140: EQUAL
68141: IFTRUE 68163
68143: LD_INT 5
68145: DOUBLE
68146: EQUAL
68147: IFTRUE 68163
68149: LD_INT 34
68151: DOUBLE
68152: EQUAL
68153: IFTRUE 68163
68155: LD_INT 37
68157: DOUBLE
68158: EQUAL
68159: IFTRUE 68163
68161: GO 68219
68163: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68164: LD_ADDR_VAR 0 9
68168: PUSH
68169: LD_VAR 0 53
68173: PUSH
68174: LD_VAR 0 54
68178: PUSH
68179: LD_VAR 0 55
68183: PUSH
68184: LD_VAR 0 56
68188: PUSH
68189: LD_VAR 0 57
68193: PUSH
68194: LD_VAR 0 58
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: PUSH
68207: LD_VAR 0 4
68211: PUSH
68212: LD_INT 1
68214: PLUS
68215: ARRAY
68216: ST_TO_ADDR
68217: GO 68326
68219: LD_INT 31
68221: DOUBLE
68222: EQUAL
68223: IFTRUE 68269
68225: LD_INT 32
68227: DOUBLE
68228: EQUAL
68229: IFTRUE 68269
68231: LD_INT 33
68233: DOUBLE
68234: EQUAL
68235: IFTRUE 68269
68237: LD_INT 27
68239: DOUBLE
68240: EQUAL
68241: IFTRUE 68269
68243: LD_INT 26
68245: DOUBLE
68246: EQUAL
68247: IFTRUE 68269
68249: LD_INT 28
68251: DOUBLE
68252: EQUAL
68253: IFTRUE 68269
68255: LD_INT 29
68257: DOUBLE
68258: EQUAL
68259: IFTRUE 68269
68261: LD_INT 30
68263: DOUBLE
68264: EQUAL
68265: IFTRUE 68269
68267: GO 68325
68269: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68270: LD_ADDR_VAR 0 9
68274: PUSH
68275: LD_VAR 0 59
68279: PUSH
68280: LD_VAR 0 60
68284: PUSH
68285: LD_VAR 0 61
68289: PUSH
68290: LD_VAR 0 62
68294: PUSH
68295: LD_VAR 0 63
68299: PUSH
68300: LD_VAR 0 64
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: PUSH
68313: LD_VAR 0 4
68317: PUSH
68318: LD_INT 1
68320: PLUS
68321: ARRAY
68322: ST_TO_ADDR
68323: GO 68326
68325: POP
// temp_list2 = [ ] ;
68326: LD_ADDR_VAR 0 10
68330: PUSH
68331: EMPTY
68332: ST_TO_ADDR
// for i in temp_list do
68333: LD_ADDR_VAR 0 8
68337: PUSH
68338: LD_VAR 0 9
68342: PUSH
68343: FOR_IN
68344: IFFALSE 68396
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68346: LD_ADDR_VAR 0 10
68350: PUSH
68351: LD_VAR 0 10
68355: PUSH
68356: LD_VAR 0 8
68360: PUSH
68361: LD_INT 1
68363: ARRAY
68364: PUSH
68365: LD_VAR 0 2
68369: PLUS
68370: PUSH
68371: LD_VAR 0 8
68375: PUSH
68376: LD_INT 2
68378: ARRAY
68379: PUSH
68380: LD_VAR 0 3
68384: PLUS
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: EMPTY
68391: LIST
68392: ADD
68393: ST_TO_ADDR
68394: GO 68343
68396: POP
68397: POP
// result = temp_list2 ;
68398: LD_ADDR_VAR 0 7
68402: PUSH
68403: LD_VAR 0 10
68407: ST_TO_ADDR
// end ;
68408: LD_VAR 0 7
68412: RET
// export function EnemyInRange ( unit , dist ) ; begin
68413: LD_INT 0
68415: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68416: LD_ADDR_VAR 0 3
68420: PUSH
68421: LD_VAR 0 1
68425: PPUSH
68426: CALL_OW 255
68430: PPUSH
68431: LD_VAR 0 1
68435: PPUSH
68436: CALL_OW 250
68440: PPUSH
68441: LD_VAR 0 1
68445: PPUSH
68446: CALL_OW 251
68450: PPUSH
68451: LD_VAR 0 2
68455: PPUSH
68456: CALL 41786 0 4
68460: PUSH
68461: LD_INT 4
68463: ARRAY
68464: ST_TO_ADDR
// end ;
68465: LD_VAR 0 3
68469: RET
// export function PlayerSeeMe ( unit ) ; begin
68470: LD_INT 0
68472: PPUSH
// result := See ( your_side , unit ) ;
68473: LD_ADDR_VAR 0 2
68477: PUSH
68478: LD_OWVAR 2
68482: PPUSH
68483: LD_VAR 0 1
68487: PPUSH
68488: CALL_OW 292
68492: ST_TO_ADDR
// end ;
68493: LD_VAR 0 2
68497: RET
// export function ReverseDir ( unit ) ; begin
68498: LD_INT 0
68500: PPUSH
// if not unit then
68501: LD_VAR 0 1
68505: NOT
68506: IFFALSE 68510
// exit ;
68508: GO 68533
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68510: LD_ADDR_VAR 0 2
68514: PUSH
68515: LD_VAR 0 1
68519: PPUSH
68520: CALL_OW 254
68524: PUSH
68525: LD_INT 3
68527: PLUS
68528: PUSH
68529: LD_INT 6
68531: MOD
68532: ST_TO_ADDR
// end ;
68533: LD_VAR 0 2
68537: RET
// export function ReverseArray ( array ) ; var i ; begin
68538: LD_INT 0
68540: PPUSH
68541: PPUSH
// if not array then
68542: LD_VAR 0 1
68546: NOT
68547: IFFALSE 68551
// exit ;
68549: GO 68606
// result := [ ] ;
68551: LD_ADDR_VAR 0 2
68555: PUSH
68556: EMPTY
68557: ST_TO_ADDR
// for i := array downto 1 do
68558: LD_ADDR_VAR 0 3
68562: PUSH
68563: DOUBLE
68564: LD_VAR 0 1
68568: INC
68569: ST_TO_ADDR
68570: LD_INT 1
68572: PUSH
68573: FOR_DOWNTO
68574: IFFALSE 68604
// result := Join ( result , array [ i ] ) ;
68576: LD_ADDR_VAR 0 2
68580: PUSH
68581: LD_VAR 0 2
68585: PPUSH
68586: LD_VAR 0 1
68590: PUSH
68591: LD_VAR 0 3
68595: ARRAY
68596: PPUSH
68597: CALL 73262 0 2
68601: ST_TO_ADDR
68602: GO 68573
68604: POP
68605: POP
// end ;
68606: LD_VAR 0 2
68610: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68611: LD_INT 0
68613: PPUSH
68614: PPUSH
68615: PPUSH
68616: PPUSH
68617: PPUSH
68618: PPUSH
// if not unit or not hexes then
68619: LD_VAR 0 1
68623: NOT
68624: PUSH
68625: LD_VAR 0 2
68629: NOT
68630: OR
68631: IFFALSE 68635
// exit ;
68633: GO 68758
// dist := 9999 ;
68635: LD_ADDR_VAR 0 5
68639: PUSH
68640: LD_INT 9999
68642: ST_TO_ADDR
// for i = 1 to hexes do
68643: LD_ADDR_VAR 0 4
68647: PUSH
68648: DOUBLE
68649: LD_INT 1
68651: DEC
68652: ST_TO_ADDR
68653: LD_VAR 0 2
68657: PUSH
68658: FOR_TO
68659: IFFALSE 68746
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68661: LD_ADDR_VAR 0 6
68665: PUSH
68666: LD_VAR 0 1
68670: PPUSH
68671: LD_VAR 0 2
68675: PUSH
68676: LD_VAR 0 4
68680: ARRAY
68681: PUSH
68682: LD_INT 1
68684: ARRAY
68685: PPUSH
68686: LD_VAR 0 2
68690: PUSH
68691: LD_VAR 0 4
68695: ARRAY
68696: PUSH
68697: LD_INT 2
68699: ARRAY
68700: PPUSH
68701: CALL_OW 297
68705: ST_TO_ADDR
// if tdist < dist then
68706: LD_VAR 0 6
68710: PUSH
68711: LD_VAR 0 5
68715: LESS
68716: IFFALSE 68744
// begin hex := hexes [ i ] ;
68718: LD_ADDR_VAR 0 8
68722: PUSH
68723: LD_VAR 0 2
68727: PUSH
68728: LD_VAR 0 4
68732: ARRAY
68733: ST_TO_ADDR
// dist := tdist ;
68734: LD_ADDR_VAR 0 5
68738: PUSH
68739: LD_VAR 0 6
68743: ST_TO_ADDR
// end ; end ;
68744: GO 68658
68746: POP
68747: POP
// result := hex ;
68748: LD_ADDR_VAR 0 3
68752: PUSH
68753: LD_VAR 0 8
68757: ST_TO_ADDR
// end ;
68758: LD_VAR 0 3
68762: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68763: LD_INT 0
68765: PPUSH
68766: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68767: LD_VAR 0 1
68771: NOT
68772: PUSH
68773: LD_VAR 0 1
68777: PUSH
68778: LD_INT 21
68780: PUSH
68781: LD_INT 2
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 23
68790: PUSH
68791: LD_INT 2
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PPUSH
68802: CALL_OW 69
68806: IN
68807: NOT
68808: OR
68809: IFFALSE 68813
// exit ;
68811: GO 68860
// for i = 1 to 3 do
68813: LD_ADDR_VAR 0 3
68817: PUSH
68818: DOUBLE
68819: LD_INT 1
68821: DEC
68822: ST_TO_ADDR
68823: LD_INT 3
68825: PUSH
68826: FOR_TO
68827: IFFALSE 68858
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68829: LD_VAR 0 1
68833: PPUSH
68834: CALL_OW 250
68838: PPUSH
68839: LD_VAR 0 1
68843: PPUSH
68844: CALL_OW 251
68848: PPUSH
68849: LD_INT 1
68851: PPUSH
68852: CALL_OW 453
68856: GO 68826
68858: POP
68859: POP
// end ;
68860: LD_VAR 0 2
68864: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68865: LD_INT 0
68867: PPUSH
68868: PPUSH
68869: PPUSH
68870: PPUSH
68871: PPUSH
68872: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68873: LD_VAR 0 1
68877: NOT
68878: PUSH
68879: LD_VAR 0 2
68883: NOT
68884: OR
68885: PUSH
68886: LD_VAR 0 1
68890: PPUSH
68891: CALL_OW 314
68895: OR
68896: IFFALSE 68900
// exit ;
68898: GO 69367
// if GetLives ( i ) < 250 then
68900: LD_VAR 0 4
68904: PPUSH
68905: CALL_OW 256
68909: PUSH
68910: LD_INT 250
68912: LESS
68913: IFFALSE 68926
// begin ComAutodestruct ( i ) ;
68915: LD_VAR 0 4
68919: PPUSH
68920: CALL 68763 0 1
// exit ;
68924: GO 69367
// end ; x := GetX ( enemy_unit ) ;
68926: LD_ADDR_VAR 0 7
68930: PUSH
68931: LD_VAR 0 2
68935: PPUSH
68936: CALL_OW 250
68940: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68941: LD_ADDR_VAR 0 8
68945: PUSH
68946: LD_VAR 0 2
68950: PPUSH
68951: CALL_OW 251
68955: ST_TO_ADDR
// if not x or not y then
68956: LD_VAR 0 7
68960: NOT
68961: PUSH
68962: LD_VAR 0 8
68966: NOT
68967: OR
68968: IFFALSE 68972
// exit ;
68970: GO 69367
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68972: LD_ADDR_VAR 0 6
68976: PUSH
68977: LD_VAR 0 7
68981: PPUSH
68982: LD_INT 0
68984: PPUSH
68985: LD_INT 4
68987: PPUSH
68988: CALL_OW 272
68992: PUSH
68993: LD_VAR 0 8
68997: PPUSH
68998: LD_INT 0
69000: PPUSH
69001: LD_INT 4
69003: PPUSH
69004: CALL_OW 273
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_VAR 0 7
69017: PPUSH
69018: LD_INT 1
69020: PPUSH
69021: LD_INT 4
69023: PPUSH
69024: CALL_OW 272
69028: PUSH
69029: LD_VAR 0 8
69033: PPUSH
69034: LD_INT 1
69036: PPUSH
69037: LD_INT 4
69039: PPUSH
69040: CALL_OW 273
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_VAR 0 7
69053: PPUSH
69054: LD_INT 2
69056: PPUSH
69057: LD_INT 4
69059: PPUSH
69060: CALL_OW 272
69064: PUSH
69065: LD_VAR 0 8
69069: PPUSH
69070: LD_INT 2
69072: PPUSH
69073: LD_INT 4
69075: PPUSH
69076: CALL_OW 273
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_VAR 0 7
69089: PPUSH
69090: LD_INT 3
69092: PPUSH
69093: LD_INT 4
69095: PPUSH
69096: CALL_OW 272
69100: PUSH
69101: LD_VAR 0 8
69105: PPUSH
69106: LD_INT 3
69108: PPUSH
69109: LD_INT 4
69111: PPUSH
69112: CALL_OW 273
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_VAR 0 7
69125: PPUSH
69126: LD_INT 4
69128: PPUSH
69129: LD_INT 4
69131: PPUSH
69132: CALL_OW 272
69136: PUSH
69137: LD_VAR 0 8
69141: PPUSH
69142: LD_INT 4
69144: PPUSH
69145: LD_INT 4
69147: PPUSH
69148: CALL_OW 273
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_VAR 0 7
69161: PPUSH
69162: LD_INT 5
69164: PPUSH
69165: LD_INT 4
69167: PPUSH
69168: CALL_OW 272
69172: PUSH
69173: LD_VAR 0 8
69177: PPUSH
69178: LD_INT 5
69180: PPUSH
69181: LD_INT 4
69183: PPUSH
69184: CALL_OW 273
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// for i = tmp downto 1 do
69201: LD_ADDR_VAR 0 4
69205: PUSH
69206: DOUBLE
69207: LD_VAR 0 6
69211: INC
69212: ST_TO_ADDR
69213: LD_INT 1
69215: PUSH
69216: FOR_DOWNTO
69217: IFFALSE 69318
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69219: LD_VAR 0 6
69223: PUSH
69224: LD_VAR 0 4
69228: ARRAY
69229: PUSH
69230: LD_INT 1
69232: ARRAY
69233: PPUSH
69234: LD_VAR 0 6
69238: PUSH
69239: LD_VAR 0 4
69243: ARRAY
69244: PUSH
69245: LD_INT 2
69247: ARRAY
69248: PPUSH
69249: CALL_OW 488
69253: NOT
69254: PUSH
69255: LD_VAR 0 6
69259: PUSH
69260: LD_VAR 0 4
69264: ARRAY
69265: PUSH
69266: LD_INT 1
69268: ARRAY
69269: PPUSH
69270: LD_VAR 0 6
69274: PUSH
69275: LD_VAR 0 4
69279: ARRAY
69280: PUSH
69281: LD_INT 2
69283: ARRAY
69284: PPUSH
69285: CALL_OW 428
69289: PUSH
69290: LD_INT 0
69292: NONEQUAL
69293: OR
69294: IFFALSE 69316
// tmp := Delete ( tmp , i ) ;
69296: LD_ADDR_VAR 0 6
69300: PUSH
69301: LD_VAR 0 6
69305: PPUSH
69306: LD_VAR 0 4
69310: PPUSH
69311: CALL_OW 3
69315: ST_TO_ADDR
69316: GO 69216
69318: POP
69319: POP
// j := GetClosestHex ( unit , tmp ) ;
69320: LD_ADDR_VAR 0 5
69324: PUSH
69325: LD_VAR 0 1
69329: PPUSH
69330: LD_VAR 0 6
69334: PPUSH
69335: CALL 68611 0 2
69339: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69340: LD_VAR 0 1
69344: PPUSH
69345: LD_VAR 0 5
69349: PUSH
69350: LD_INT 1
69352: ARRAY
69353: PPUSH
69354: LD_VAR 0 5
69358: PUSH
69359: LD_INT 2
69361: ARRAY
69362: PPUSH
69363: CALL_OW 111
// end ;
69367: LD_VAR 0 3
69371: RET
// export function PrepareApemanSoldier ( ) ; begin
69372: LD_INT 0
69374: PPUSH
// uc_nation := 0 ;
69375: LD_ADDR_OWVAR 21
69379: PUSH
69380: LD_INT 0
69382: ST_TO_ADDR
// hc_sex := sex_male ;
69383: LD_ADDR_OWVAR 27
69387: PUSH
69388: LD_INT 1
69390: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69391: LD_ADDR_OWVAR 28
69395: PUSH
69396: LD_INT 15
69398: ST_TO_ADDR
// hc_gallery :=  ;
69399: LD_ADDR_OWVAR 33
69403: PUSH
69404: LD_STRING 
69406: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69407: LD_ADDR_OWVAR 31
69411: PUSH
69412: LD_INT 0
69414: PPUSH
69415: LD_INT 3
69417: PPUSH
69418: CALL_OW 12
69422: PUSH
69423: LD_INT 0
69425: PPUSH
69426: LD_INT 3
69428: PPUSH
69429: CALL_OW 12
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: ST_TO_ADDR
// end ;
69446: LD_VAR 0 1
69450: RET
// export function PrepareApemanEngineer ( ) ; begin
69451: LD_INT 0
69453: PPUSH
// uc_nation := 0 ;
69454: LD_ADDR_OWVAR 21
69458: PUSH
69459: LD_INT 0
69461: ST_TO_ADDR
// hc_sex := sex_male ;
69462: LD_ADDR_OWVAR 27
69466: PUSH
69467: LD_INT 1
69469: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69470: LD_ADDR_OWVAR 28
69474: PUSH
69475: LD_INT 16
69477: ST_TO_ADDR
// hc_gallery :=  ;
69478: LD_ADDR_OWVAR 33
69482: PUSH
69483: LD_STRING 
69485: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69486: LD_ADDR_OWVAR 31
69490: PUSH
69491: LD_INT 0
69493: PPUSH
69494: LD_INT 3
69496: PPUSH
69497: CALL_OW 12
69501: PUSH
69502: LD_INT 0
69504: PPUSH
69505: LD_INT 3
69507: PPUSH
69508: CALL_OW 12
69512: PUSH
69513: LD_INT 0
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: ST_TO_ADDR
// end ;
69525: LD_VAR 0 1
69529: RET
// export function PrepareApeman ( agressivity ) ; begin
69530: LD_INT 0
69532: PPUSH
// uc_side := 0 ;
69533: LD_ADDR_OWVAR 20
69537: PUSH
69538: LD_INT 0
69540: ST_TO_ADDR
// uc_nation := 0 ;
69541: LD_ADDR_OWVAR 21
69545: PUSH
69546: LD_INT 0
69548: ST_TO_ADDR
// hc_sex := sex_male ;
69549: LD_ADDR_OWVAR 27
69553: PUSH
69554: LD_INT 1
69556: ST_TO_ADDR
// hc_class := class_apeman ;
69557: LD_ADDR_OWVAR 28
69561: PUSH
69562: LD_INT 12
69564: ST_TO_ADDR
// hc_gallery :=  ;
69565: LD_ADDR_OWVAR 33
69569: PUSH
69570: LD_STRING 
69572: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69573: LD_ADDR_OWVAR 35
69577: PUSH
69578: LD_VAR 0 1
69582: NEG
69583: PPUSH
69584: LD_VAR 0 1
69588: PPUSH
69589: CALL_OW 12
69593: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69594: LD_ADDR_OWVAR 31
69598: PUSH
69599: LD_INT 0
69601: PPUSH
69602: LD_INT 3
69604: PPUSH
69605: CALL_OW 12
69609: PUSH
69610: LD_INT 0
69612: PPUSH
69613: LD_INT 3
69615: PPUSH
69616: CALL_OW 12
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: ST_TO_ADDR
// end ;
69633: LD_VAR 0 2
69637: RET
// export function PrepareTiger ( agressivity ) ; begin
69638: LD_INT 0
69640: PPUSH
// uc_side := 0 ;
69641: LD_ADDR_OWVAR 20
69645: PUSH
69646: LD_INT 0
69648: ST_TO_ADDR
// uc_nation := 0 ;
69649: LD_ADDR_OWVAR 21
69653: PUSH
69654: LD_INT 0
69656: ST_TO_ADDR
// hc_class := class_tiger ;
69657: LD_ADDR_OWVAR 28
69661: PUSH
69662: LD_INT 14
69664: ST_TO_ADDR
// hc_gallery :=  ;
69665: LD_ADDR_OWVAR 33
69669: PUSH
69670: LD_STRING 
69672: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69673: LD_ADDR_OWVAR 35
69677: PUSH
69678: LD_VAR 0 1
69682: NEG
69683: PPUSH
69684: LD_VAR 0 1
69688: PPUSH
69689: CALL_OW 12
69693: ST_TO_ADDR
// end ;
69694: LD_VAR 0 2
69698: RET
// export function PrepareEnchidna ( ) ; begin
69699: LD_INT 0
69701: PPUSH
// uc_side := 0 ;
69702: LD_ADDR_OWVAR 20
69706: PUSH
69707: LD_INT 0
69709: ST_TO_ADDR
// uc_nation := 0 ;
69710: LD_ADDR_OWVAR 21
69714: PUSH
69715: LD_INT 0
69717: ST_TO_ADDR
// hc_class := class_baggie ;
69718: LD_ADDR_OWVAR 28
69722: PUSH
69723: LD_INT 13
69725: ST_TO_ADDR
// hc_gallery :=  ;
69726: LD_ADDR_OWVAR 33
69730: PUSH
69731: LD_STRING 
69733: ST_TO_ADDR
// end ;
69734: LD_VAR 0 1
69738: RET
// export function PrepareFrog ( ) ; begin
69739: LD_INT 0
69741: PPUSH
// uc_side := 0 ;
69742: LD_ADDR_OWVAR 20
69746: PUSH
69747: LD_INT 0
69749: ST_TO_ADDR
// uc_nation := 0 ;
69750: LD_ADDR_OWVAR 21
69754: PUSH
69755: LD_INT 0
69757: ST_TO_ADDR
// hc_class := class_frog ;
69758: LD_ADDR_OWVAR 28
69762: PUSH
69763: LD_INT 19
69765: ST_TO_ADDR
// hc_gallery :=  ;
69766: LD_ADDR_OWVAR 33
69770: PUSH
69771: LD_STRING 
69773: ST_TO_ADDR
// end ;
69774: LD_VAR 0 1
69778: RET
// export function PrepareFish ( ) ; begin
69779: LD_INT 0
69781: PPUSH
// uc_side := 0 ;
69782: LD_ADDR_OWVAR 20
69786: PUSH
69787: LD_INT 0
69789: ST_TO_ADDR
// uc_nation := 0 ;
69790: LD_ADDR_OWVAR 21
69794: PUSH
69795: LD_INT 0
69797: ST_TO_ADDR
// hc_class := class_fish ;
69798: LD_ADDR_OWVAR 28
69802: PUSH
69803: LD_INT 20
69805: ST_TO_ADDR
// hc_gallery :=  ;
69806: LD_ADDR_OWVAR 33
69810: PUSH
69811: LD_STRING 
69813: ST_TO_ADDR
// end ;
69814: LD_VAR 0 1
69818: RET
// export function PrepareBird ( ) ; begin
69819: LD_INT 0
69821: PPUSH
// uc_side := 0 ;
69822: LD_ADDR_OWVAR 20
69826: PUSH
69827: LD_INT 0
69829: ST_TO_ADDR
// uc_nation := 0 ;
69830: LD_ADDR_OWVAR 21
69834: PUSH
69835: LD_INT 0
69837: ST_TO_ADDR
// hc_class := class_phororhacos ;
69838: LD_ADDR_OWVAR 28
69842: PUSH
69843: LD_INT 18
69845: ST_TO_ADDR
// hc_gallery :=  ;
69846: LD_ADDR_OWVAR 33
69850: PUSH
69851: LD_STRING 
69853: ST_TO_ADDR
// end ;
69854: LD_VAR 0 1
69858: RET
// export function PrepareHorse ( ) ; begin
69859: LD_INT 0
69861: PPUSH
// uc_side := 0 ;
69862: LD_ADDR_OWVAR 20
69866: PUSH
69867: LD_INT 0
69869: ST_TO_ADDR
// uc_nation := 0 ;
69870: LD_ADDR_OWVAR 21
69874: PUSH
69875: LD_INT 0
69877: ST_TO_ADDR
// hc_class := class_horse ;
69878: LD_ADDR_OWVAR 28
69882: PUSH
69883: LD_INT 21
69885: ST_TO_ADDR
// hc_gallery :=  ;
69886: LD_ADDR_OWVAR 33
69890: PUSH
69891: LD_STRING 
69893: ST_TO_ADDR
// end ;
69894: LD_VAR 0 1
69898: RET
// export function PrepareMastodont ( ) ; begin
69899: LD_INT 0
69901: PPUSH
// uc_side := 0 ;
69902: LD_ADDR_OWVAR 20
69906: PUSH
69907: LD_INT 0
69909: ST_TO_ADDR
// uc_nation := 0 ;
69910: LD_ADDR_OWVAR 21
69914: PUSH
69915: LD_INT 0
69917: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69918: LD_ADDR_OWVAR 37
69922: PUSH
69923: LD_INT 31
69925: ST_TO_ADDR
// vc_control := control_rider ;
69926: LD_ADDR_OWVAR 38
69930: PUSH
69931: LD_INT 4
69933: ST_TO_ADDR
// end ;
69934: LD_VAR 0 1
69938: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69939: LD_INT 0
69941: PPUSH
69942: PPUSH
69943: PPUSH
// uc_side = 0 ;
69944: LD_ADDR_OWVAR 20
69948: PUSH
69949: LD_INT 0
69951: ST_TO_ADDR
// uc_nation = 0 ;
69952: LD_ADDR_OWVAR 21
69956: PUSH
69957: LD_INT 0
69959: ST_TO_ADDR
// InitHc_All ( ) ;
69960: CALL_OW 584
// InitVc ;
69964: CALL_OW 20
// if mastodonts then
69968: LD_VAR 0 6
69972: IFFALSE 70039
// for i = 1 to mastodonts do
69974: LD_ADDR_VAR 0 11
69978: PUSH
69979: DOUBLE
69980: LD_INT 1
69982: DEC
69983: ST_TO_ADDR
69984: LD_VAR 0 6
69988: PUSH
69989: FOR_TO
69990: IFFALSE 70037
// begin vc_chassis := 31 ;
69992: LD_ADDR_OWVAR 37
69996: PUSH
69997: LD_INT 31
69999: ST_TO_ADDR
// vc_control := control_rider ;
70000: LD_ADDR_OWVAR 38
70004: PUSH
70005: LD_INT 4
70007: ST_TO_ADDR
// animal := CreateVehicle ;
70008: LD_ADDR_VAR 0 12
70012: PUSH
70013: CALL_OW 45
70017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70018: LD_VAR 0 12
70022: PPUSH
70023: LD_VAR 0 8
70027: PPUSH
70028: LD_INT 0
70030: PPUSH
70031: CALL 72167 0 3
// end ;
70035: GO 69989
70037: POP
70038: POP
// if horses then
70039: LD_VAR 0 5
70043: IFFALSE 70110
// for i = 1 to horses do
70045: LD_ADDR_VAR 0 11
70049: PUSH
70050: DOUBLE
70051: LD_INT 1
70053: DEC
70054: ST_TO_ADDR
70055: LD_VAR 0 5
70059: PUSH
70060: FOR_TO
70061: IFFALSE 70108
// begin hc_class := 21 ;
70063: LD_ADDR_OWVAR 28
70067: PUSH
70068: LD_INT 21
70070: ST_TO_ADDR
// hc_gallery :=  ;
70071: LD_ADDR_OWVAR 33
70075: PUSH
70076: LD_STRING 
70078: ST_TO_ADDR
// animal := CreateHuman ;
70079: LD_ADDR_VAR 0 12
70083: PUSH
70084: CALL_OW 44
70088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70089: LD_VAR 0 12
70093: PPUSH
70094: LD_VAR 0 8
70098: PPUSH
70099: LD_INT 0
70101: PPUSH
70102: CALL 72167 0 3
// end ;
70106: GO 70060
70108: POP
70109: POP
// if birds then
70110: LD_VAR 0 1
70114: IFFALSE 70181
// for i = 1 to birds do
70116: LD_ADDR_VAR 0 11
70120: PUSH
70121: DOUBLE
70122: LD_INT 1
70124: DEC
70125: ST_TO_ADDR
70126: LD_VAR 0 1
70130: PUSH
70131: FOR_TO
70132: IFFALSE 70179
// begin hc_class := 18 ;
70134: LD_ADDR_OWVAR 28
70138: PUSH
70139: LD_INT 18
70141: ST_TO_ADDR
// hc_gallery =  ;
70142: LD_ADDR_OWVAR 33
70146: PUSH
70147: LD_STRING 
70149: ST_TO_ADDR
// animal := CreateHuman ;
70150: LD_ADDR_VAR 0 12
70154: PUSH
70155: CALL_OW 44
70159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70160: LD_VAR 0 12
70164: PPUSH
70165: LD_VAR 0 8
70169: PPUSH
70170: LD_INT 0
70172: PPUSH
70173: CALL 72167 0 3
// end ;
70177: GO 70131
70179: POP
70180: POP
// if tigers then
70181: LD_VAR 0 2
70185: IFFALSE 70269
// for i = 1 to tigers do
70187: LD_ADDR_VAR 0 11
70191: PUSH
70192: DOUBLE
70193: LD_INT 1
70195: DEC
70196: ST_TO_ADDR
70197: LD_VAR 0 2
70201: PUSH
70202: FOR_TO
70203: IFFALSE 70267
// begin hc_class = class_tiger ;
70205: LD_ADDR_OWVAR 28
70209: PUSH
70210: LD_INT 14
70212: ST_TO_ADDR
// hc_gallery =  ;
70213: LD_ADDR_OWVAR 33
70217: PUSH
70218: LD_STRING 
70220: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70221: LD_ADDR_OWVAR 35
70225: PUSH
70226: LD_INT 7
70228: NEG
70229: PPUSH
70230: LD_INT 7
70232: PPUSH
70233: CALL_OW 12
70237: ST_TO_ADDR
// animal := CreateHuman ;
70238: LD_ADDR_VAR 0 12
70242: PUSH
70243: CALL_OW 44
70247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70248: LD_VAR 0 12
70252: PPUSH
70253: LD_VAR 0 8
70257: PPUSH
70258: LD_INT 0
70260: PPUSH
70261: CALL 72167 0 3
// end ;
70265: GO 70202
70267: POP
70268: POP
// if apemans then
70269: LD_VAR 0 3
70273: IFFALSE 70396
// for i = 1 to apemans do
70275: LD_ADDR_VAR 0 11
70279: PUSH
70280: DOUBLE
70281: LD_INT 1
70283: DEC
70284: ST_TO_ADDR
70285: LD_VAR 0 3
70289: PUSH
70290: FOR_TO
70291: IFFALSE 70394
// begin hc_class = class_apeman ;
70293: LD_ADDR_OWVAR 28
70297: PUSH
70298: LD_INT 12
70300: ST_TO_ADDR
// hc_gallery =  ;
70301: LD_ADDR_OWVAR 33
70305: PUSH
70306: LD_STRING 
70308: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70309: LD_ADDR_OWVAR 35
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PPUSH
70318: LD_INT 2
70320: PPUSH
70321: CALL_OW 12
70325: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70326: LD_ADDR_OWVAR 31
70330: PUSH
70331: LD_INT 1
70333: PPUSH
70334: LD_INT 3
70336: PPUSH
70337: CALL_OW 12
70341: PUSH
70342: LD_INT 1
70344: PPUSH
70345: LD_INT 3
70347: PPUSH
70348: CALL_OW 12
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: LD_INT 0
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: ST_TO_ADDR
// animal := CreateHuman ;
70365: LD_ADDR_VAR 0 12
70369: PUSH
70370: CALL_OW 44
70374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70375: LD_VAR 0 12
70379: PPUSH
70380: LD_VAR 0 8
70384: PPUSH
70385: LD_INT 0
70387: PPUSH
70388: CALL 72167 0 3
// end ;
70392: GO 70290
70394: POP
70395: POP
// if enchidnas then
70396: LD_VAR 0 4
70400: IFFALSE 70467
// for i = 1 to enchidnas do
70402: LD_ADDR_VAR 0 11
70406: PUSH
70407: DOUBLE
70408: LD_INT 1
70410: DEC
70411: ST_TO_ADDR
70412: LD_VAR 0 4
70416: PUSH
70417: FOR_TO
70418: IFFALSE 70465
// begin hc_class = 13 ;
70420: LD_ADDR_OWVAR 28
70424: PUSH
70425: LD_INT 13
70427: ST_TO_ADDR
// hc_gallery =  ;
70428: LD_ADDR_OWVAR 33
70432: PUSH
70433: LD_STRING 
70435: ST_TO_ADDR
// animal := CreateHuman ;
70436: LD_ADDR_VAR 0 12
70440: PUSH
70441: CALL_OW 44
70445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70446: LD_VAR 0 12
70450: PPUSH
70451: LD_VAR 0 8
70455: PPUSH
70456: LD_INT 0
70458: PPUSH
70459: CALL 72167 0 3
// end ;
70463: GO 70417
70465: POP
70466: POP
// if fishes then
70467: LD_VAR 0 7
70471: IFFALSE 70538
// for i = 1 to fishes do
70473: LD_ADDR_VAR 0 11
70477: PUSH
70478: DOUBLE
70479: LD_INT 1
70481: DEC
70482: ST_TO_ADDR
70483: LD_VAR 0 7
70487: PUSH
70488: FOR_TO
70489: IFFALSE 70536
// begin hc_class = 20 ;
70491: LD_ADDR_OWVAR 28
70495: PUSH
70496: LD_INT 20
70498: ST_TO_ADDR
// hc_gallery =  ;
70499: LD_ADDR_OWVAR 33
70503: PUSH
70504: LD_STRING 
70506: ST_TO_ADDR
// animal := CreateHuman ;
70507: LD_ADDR_VAR 0 12
70511: PUSH
70512: CALL_OW 44
70516: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70517: LD_VAR 0 12
70521: PPUSH
70522: LD_VAR 0 9
70526: PPUSH
70527: LD_INT 0
70529: PPUSH
70530: CALL 72167 0 3
// end ;
70534: GO 70488
70536: POP
70537: POP
// end ;
70538: LD_VAR 0 10
70542: RET
// export function WantHeal ( sci , unit ) ; begin
70543: LD_INT 0
70545: PPUSH
// if GetTaskList ( sci ) > 0 then
70546: LD_VAR 0 1
70550: PPUSH
70551: CALL_OW 437
70555: PUSH
70556: LD_INT 0
70558: GREATER
70559: IFFALSE 70629
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70561: LD_VAR 0 1
70565: PPUSH
70566: CALL_OW 437
70570: PUSH
70571: LD_INT 1
70573: ARRAY
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PUSH
70579: LD_STRING l
70581: EQUAL
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: CALL_OW 437
70592: PUSH
70593: LD_INT 1
70595: ARRAY
70596: PUSH
70597: LD_INT 4
70599: ARRAY
70600: PUSH
70601: LD_VAR 0 2
70605: EQUAL
70606: AND
70607: IFFALSE 70619
// result := true else
70609: LD_ADDR_VAR 0 3
70613: PUSH
70614: LD_INT 1
70616: ST_TO_ADDR
70617: GO 70627
// result := false ;
70619: LD_ADDR_VAR 0 3
70623: PUSH
70624: LD_INT 0
70626: ST_TO_ADDR
// end else
70627: GO 70637
// result := false ;
70629: LD_ADDR_VAR 0 3
70633: PUSH
70634: LD_INT 0
70636: ST_TO_ADDR
// end ;
70637: LD_VAR 0 3
70641: RET
// export function HealTarget ( sci ) ; begin
70642: LD_INT 0
70644: PPUSH
// if not sci then
70645: LD_VAR 0 1
70649: NOT
70650: IFFALSE 70654
// exit ;
70652: GO 70719
// result := 0 ;
70654: LD_ADDR_VAR 0 2
70658: PUSH
70659: LD_INT 0
70661: ST_TO_ADDR
// if GetTaskList ( sci ) then
70662: LD_VAR 0 1
70666: PPUSH
70667: CALL_OW 437
70671: IFFALSE 70719
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70673: LD_VAR 0 1
70677: PPUSH
70678: CALL_OW 437
70682: PUSH
70683: LD_INT 1
70685: ARRAY
70686: PUSH
70687: LD_INT 1
70689: ARRAY
70690: PUSH
70691: LD_STRING l
70693: EQUAL
70694: IFFALSE 70719
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70696: LD_ADDR_VAR 0 2
70700: PUSH
70701: LD_VAR 0 1
70705: PPUSH
70706: CALL_OW 437
70710: PUSH
70711: LD_INT 1
70713: ARRAY
70714: PUSH
70715: LD_INT 4
70717: ARRAY
70718: ST_TO_ADDR
// end ;
70719: LD_VAR 0 2
70723: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70724: LD_INT 0
70726: PPUSH
70727: PPUSH
70728: PPUSH
70729: PPUSH
// if not base_units then
70730: LD_VAR 0 1
70734: NOT
70735: IFFALSE 70739
// exit ;
70737: GO 70826
// result := false ;
70739: LD_ADDR_VAR 0 2
70743: PUSH
70744: LD_INT 0
70746: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70747: LD_ADDR_VAR 0 5
70751: PUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: LD_INT 21
70759: PUSH
70760: LD_INT 3
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PPUSH
70767: CALL_OW 72
70771: ST_TO_ADDR
// if not tmp then
70772: LD_VAR 0 5
70776: NOT
70777: IFFALSE 70781
// exit ;
70779: GO 70826
// for i in tmp do
70781: LD_ADDR_VAR 0 3
70785: PUSH
70786: LD_VAR 0 5
70790: PUSH
70791: FOR_IN
70792: IFFALSE 70824
// begin result := EnemyInRange ( i , 22 ) ;
70794: LD_ADDR_VAR 0 2
70798: PUSH
70799: LD_VAR 0 3
70803: PPUSH
70804: LD_INT 22
70806: PPUSH
70807: CALL 68413 0 2
70811: ST_TO_ADDR
// if result then
70812: LD_VAR 0 2
70816: IFFALSE 70822
// exit ;
70818: POP
70819: POP
70820: GO 70826
// end ;
70822: GO 70791
70824: POP
70825: POP
// end ;
70826: LD_VAR 0 2
70830: RET
// export function FilterByTag ( units , tag ) ; begin
70831: LD_INT 0
70833: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70834: LD_ADDR_VAR 0 3
70838: PUSH
70839: LD_VAR 0 1
70843: PPUSH
70844: LD_INT 120
70846: PUSH
70847: LD_VAR 0 2
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PPUSH
70856: CALL_OW 72
70860: ST_TO_ADDR
// end ;
70861: LD_VAR 0 3
70865: RET
// export function IsDriver ( un ) ; begin
70866: LD_INT 0
70868: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70869: LD_ADDR_VAR 0 2
70873: PUSH
70874: LD_VAR 0 1
70878: PUSH
70879: LD_INT 55
70881: PUSH
70882: EMPTY
70883: LIST
70884: PPUSH
70885: CALL_OW 69
70889: IN
70890: ST_TO_ADDR
// end ;
70891: LD_VAR 0 2
70895: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70896: LD_INT 0
70898: PPUSH
70899: PPUSH
// list := [ ] ;
70900: LD_ADDR_VAR 0 5
70904: PUSH
70905: EMPTY
70906: ST_TO_ADDR
// case d of 0 :
70907: LD_VAR 0 3
70911: PUSH
70912: LD_INT 0
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70920
70918: GO 71053
70920: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70921: LD_ADDR_VAR 0 5
70925: PUSH
70926: LD_VAR 0 1
70930: PUSH
70931: LD_INT 4
70933: MINUS
70934: PUSH
70935: LD_VAR 0 2
70939: PUSH
70940: LD_INT 4
70942: MINUS
70943: PUSH
70944: LD_INT 2
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: LIST
70951: PUSH
70952: LD_VAR 0 1
70956: PUSH
70957: LD_INT 3
70959: MINUS
70960: PUSH
70961: LD_VAR 0 2
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: LIST
70973: PUSH
70974: LD_VAR 0 1
70978: PUSH
70979: LD_INT 4
70981: PLUS
70982: PUSH
70983: LD_VAR 0 2
70987: PUSH
70988: LD_INT 4
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: LIST
70995: PUSH
70996: LD_VAR 0 1
71000: PUSH
71001: LD_INT 3
71003: PLUS
71004: PUSH
71005: LD_VAR 0 2
71009: PUSH
71010: LD_INT 3
71012: PLUS
71013: PUSH
71014: LD_INT 5
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: PUSH
71022: LD_VAR 0 1
71026: PUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_INT 4
71034: PLUS
71035: PUSH
71036: LD_INT 0
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: ST_TO_ADDR
// end ; 1 :
71051: GO 71751
71053: LD_INT 1
71055: DOUBLE
71056: EQUAL
71057: IFTRUE 71061
71059: GO 71194
71061: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71062: LD_ADDR_VAR 0 5
71066: PUSH
71067: LD_VAR 0 1
71071: PUSH
71072: LD_VAR 0 2
71076: PUSH
71077: LD_INT 4
71079: MINUS
71080: PUSH
71081: LD_INT 3
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: LIST
71088: PUSH
71089: LD_VAR 0 1
71093: PUSH
71094: LD_INT 3
71096: MINUS
71097: PUSH
71098: LD_VAR 0 2
71102: PUSH
71103: LD_INT 3
71105: MINUS
71106: PUSH
71107: LD_INT 2
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: PUSH
71115: LD_VAR 0 1
71119: PUSH
71120: LD_INT 4
71122: MINUS
71123: PUSH
71124: LD_VAR 0 2
71128: PUSH
71129: LD_INT 1
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: LIST
71136: PUSH
71137: LD_VAR 0 1
71141: PUSH
71142: LD_VAR 0 2
71146: PUSH
71147: LD_INT 3
71149: PLUS
71150: PUSH
71151: LD_INT 0
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: PUSH
71159: LD_VAR 0 1
71163: PUSH
71164: LD_INT 4
71166: PLUS
71167: PUSH
71168: LD_VAR 0 2
71172: PUSH
71173: LD_INT 4
71175: PLUS
71176: PUSH
71177: LD_INT 5
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: LIST
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: ST_TO_ADDR
// end ; 2 :
71192: GO 71751
71194: LD_INT 2
71196: DOUBLE
71197: EQUAL
71198: IFTRUE 71202
71200: GO 71331
71202: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71203: LD_ADDR_VAR 0 5
71207: PUSH
71208: LD_VAR 0 1
71212: PUSH
71213: LD_VAR 0 2
71217: PUSH
71218: LD_INT 3
71220: MINUS
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: LIST
71229: PUSH
71230: LD_VAR 0 1
71234: PUSH
71235: LD_INT 4
71237: PLUS
71238: PUSH
71239: LD_VAR 0 2
71243: PUSH
71244: LD_INT 4
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: LIST
71251: PUSH
71252: LD_VAR 0 1
71256: PUSH
71257: LD_VAR 0 2
71261: PUSH
71262: LD_INT 4
71264: PLUS
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: LIST
71273: PUSH
71274: LD_VAR 0 1
71278: PUSH
71279: LD_INT 3
71281: MINUS
71282: PUSH
71283: LD_VAR 0 2
71287: PUSH
71288: LD_INT 1
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: LIST
71295: PUSH
71296: LD_VAR 0 1
71300: PUSH
71301: LD_INT 4
71303: MINUS
71304: PUSH
71305: LD_VAR 0 2
71309: PUSH
71310: LD_INT 4
71312: MINUS
71313: PUSH
71314: LD_INT 2
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: LIST
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: ST_TO_ADDR
// end ; 3 :
71329: GO 71751
71331: LD_INT 3
71333: DOUBLE
71334: EQUAL
71335: IFTRUE 71339
71337: GO 71472
71339: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71340: LD_ADDR_VAR 0 5
71344: PUSH
71345: LD_VAR 0 1
71349: PUSH
71350: LD_INT 3
71352: PLUS
71353: PUSH
71354: LD_VAR 0 2
71358: PUSH
71359: LD_INT 4
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: LD_VAR 0 1
71371: PUSH
71372: LD_INT 4
71374: PLUS
71375: PUSH
71376: LD_VAR 0 2
71380: PUSH
71381: LD_INT 4
71383: PLUS
71384: PUSH
71385: LD_INT 5
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: LIST
71392: PUSH
71393: LD_VAR 0 1
71397: PUSH
71398: LD_INT 4
71400: MINUS
71401: PUSH
71402: LD_VAR 0 2
71406: PUSH
71407: LD_INT 1
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: LIST
71414: PUSH
71415: LD_VAR 0 1
71419: PUSH
71420: LD_VAR 0 2
71424: PUSH
71425: LD_INT 4
71427: MINUS
71428: PUSH
71429: LD_INT 3
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: LIST
71436: PUSH
71437: LD_VAR 0 1
71441: PUSH
71442: LD_INT 3
71444: MINUS
71445: PUSH
71446: LD_VAR 0 2
71450: PUSH
71451: LD_INT 3
71453: MINUS
71454: PUSH
71455: LD_INT 2
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: LIST
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: ST_TO_ADDR
// end ; 4 :
71470: GO 71751
71472: LD_INT 4
71474: DOUBLE
71475: EQUAL
71476: IFTRUE 71480
71478: GO 71613
71480: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71481: LD_ADDR_VAR 0 5
71485: PUSH
71486: LD_VAR 0 1
71490: PUSH
71491: LD_VAR 0 2
71495: PUSH
71496: LD_INT 4
71498: PLUS
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: PUSH
71508: LD_VAR 0 1
71512: PUSH
71513: LD_INT 3
71515: PLUS
71516: PUSH
71517: LD_VAR 0 2
71521: PUSH
71522: LD_INT 3
71524: PLUS
71525: PUSH
71526: LD_INT 5
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: LIST
71533: PUSH
71534: LD_VAR 0 1
71538: PUSH
71539: LD_INT 4
71541: PLUS
71542: PUSH
71543: LD_VAR 0 2
71547: PUSH
71548: LD_INT 4
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: LIST
71555: PUSH
71556: LD_VAR 0 1
71560: PUSH
71561: LD_VAR 0 2
71565: PUSH
71566: LD_INT 3
71568: MINUS
71569: PUSH
71570: LD_INT 3
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: LIST
71577: PUSH
71578: LD_VAR 0 1
71582: PUSH
71583: LD_INT 4
71585: MINUS
71586: PUSH
71587: LD_VAR 0 2
71591: PUSH
71592: LD_INT 4
71594: MINUS
71595: PUSH
71596: LD_INT 2
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: LIST
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: ST_TO_ADDR
// end ; 5 :
71611: GO 71751
71613: LD_INT 5
71615: DOUBLE
71616: EQUAL
71617: IFTRUE 71621
71619: GO 71750
71621: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71622: LD_ADDR_VAR 0 5
71626: PUSH
71627: LD_VAR 0 1
71631: PUSH
71632: LD_INT 4
71634: MINUS
71635: PUSH
71636: LD_VAR 0 2
71640: PUSH
71641: LD_INT 1
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: LIST
71648: PUSH
71649: LD_VAR 0 1
71653: PUSH
71654: LD_VAR 0 2
71658: PUSH
71659: LD_INT 4
71661: MINUS
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: PUSH
71671: LD_VAR 0 1
71675: PUSH
71676: LD_INT 4
71678: PLUS
71679: PUSH
71680: LD_VAR 0 2
71684: PUSH
71685: LD_INT 4
71687: PLUS
71688: PUSH
71689: LD_INT 5
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: LIST
71696: PUSH
71697: LD_VAR 0 1
71701: PUSH
71702: LD_INT 3
71704: PLUS
71705: PUSH
71706: LD_VAR 0 2
71710: PUSH
71711: LD_INT 4
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: LIST
71718: PUSH
71719: LD_VAR 0 1
71723: PUSH
71724: LD_VAR 0 2
71728: PUSH
71729: LD_INT 3
71731: PLUS
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: LIST
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: ST_TO_ADDR
// end ; end ;
71748: GO 71751
71750: POP
// result := list ;
71751: LD_ADDR_VAR 0 4
71755: PUSH
71756: LD_VAR 0 5
71760: ST_TO_ADDR
// end ;
71761: LD_VAR 0 4
71765: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71766: LD_INT 0
71768: PPUSH
71769: PPUSH
71770: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71771: LD_VAR 0 1
71775: NOT
71776: PUSH
71777: LD_VAR 0 2
71781: PUSH
71782: LD_INT 1
71784: PUSH
71785: LD_INT 2
71787: PUSH
71788: LD_INT 3
71790: PUSH
71791: LD_INT 4
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: IN
71800: NOT
71801: OR
71802: IFFALSE 71806
// exit ;
71804: GO 71889
// tmp := [ ] ;
71806: LD_ADDR_VAR 0 5
71810: PUSH
71811: EMPTY
71812: ST_TO_ADDR
// for i in units do
71813: LD_ADDR_VAR 0 4
71817: PUSH
71818: LD_VAR 0 1
71822: PUSH
71823: FOR_IN
71824: IFFALSE 71858
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71826: LD_ADDR_VAR 0 5
71830: PUSH
71831: LD_VAR 0 5
71835: PPUSH
71836: LD_VAR 0 4
71840: PPUSH
71841: LD_VAR 0 2
71845: PPUSH
71846: CALL_OW 259
71850: PPUSH
71851: CALL 73262 0 2
71855: ST_TO_ADDR
71856: GO 71823
71858: POP
71859: POP
// if not tmp then
71860: LD_VAR 0 5
71864: NOT
71865: IFFALSE 71869
// exit ;
71867: GO 71889
// result := SortListByListDesc ( units , tmp ) ;
71869: LD_ADDR_VAR 0 3
71873: PUSH
71874: LD_VAR 0 1
71878: PPUSH
71879: LD_VAR 0 5
71883: PPUSH
71884: CALL_OW 77
71888: ST_TO_ADDR
// end ;
71889: LD_VAR 0 3
71893: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71894: LD_INT 0
71896: PPUSH
71897: PPUSH
71898: PPUSH
// result := false ;
71899: LD_ADDR_VAR 0 3
71903: PUSH
71904: LD_INT 0
71906: ST_TO_ADDR
// if not building then
71907: LD_VAR 0 2
71911: NOT
71912: IFFALSE 71916
// exit ;
71914: GO 72054
// x := GetX ( building ) ;
71916: LD_ADDR_VAR 0 4
71920: PUSH
71921: LD_VAR 0 2
71925: PPUSH
71926: CALL_OW 250
71930: ST_TO_ADDR
// y := GetY ( building ) ;
71931: LD_ADDR_VAR 0 5
71935: PUSH
71936: LD_VAR 0 2
71940: PPUSH
71941: CALL_OW 251
71945: ST_TO_ADDR
// if not x or not y then
71946: LD_VAR 0 4
71950: NOT
71951: PUSH
71952: LD_VAR 0 5
71956: NOT
71957: OR
71958: IFFALSE 71962
// exit ;
71960: GO 72054
// if GetTaskList ( unit ) then
71962: LD_VAR 0 1
71966: PPUSH
71967: CALL_OW 437
71971: IFFALSE 72054
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71973: LD_STRING e
71975: PUSH
71976: LD_VAR 0 1
71980: PPUSH
71981: CALL_OW 437
71985: PUSH
71986: LD_INT 1
71988: ARRAY
71989: PUSH
71990: LD_INT 1
71992: ARRAY
71993: EQUAL
71994: PUSH
71995: LD_VAR 0 4
71999: PUSH
72000: LD_VAR 0 1
72004: PPUSH
72005: CALL_OW 437
72009: PUSH
72010: LD_INT 1
72012: ARRAY
72013: PUSH
72014: LD_INT 2
72016: ARRAY
72017: EQUAL
72018: AND
72019: PUSH
72020: LD_VAR 0 5
72024: PUSH
72025: LD_VAR 0 1
72029: PPUSH
72030: CALL_OW 437
72034: PUSH
72035: LD_INT 1
72037: ARRAY
72038: PUSH
72039: LD_INT 3
72041: ARRAY
72042: EQUAL
72043: AND
72044: IFFALSE 72054
// result := true end ;
72046: LD_ADDR_VAR 0 3
72050: PUSH
72051: LD_INT 1
72053: ST_TO_ADDR
// end ;
72054: LD_VAR 0 3
72058: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72059: LD_INT 0
72061: PPUSH
// result := false ;
72062: LD_ADDR_VAR 0 4
72066: PUSH
72067: LD_INT 0
72069: ST_TO_ADDR
// if GetTaskList ( unit ) then
72070: LD_VAR 0 1
72074: PPUSH
72075: CALL_OW 437
72079: IFFALSE 72162
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72081: LD_STRING M
72083: PUSH
72084: LD_VAR 0 1
72088: PPUSH
72089: CALL_OW 437
72093: PUSH
72094: LD_INT 1
72096: ARRAY
72097: PUSH
72098: LD_INT 1
72100: ARRAY
72101: EQUAL
72102: PUSH
72103: LD_VAR 0 2
72107: PUSH
72108: LD_VAR 0 1
72112: PPUSH
72113: CALL_OW 437
72117: PUSH
72118: LD_INT 1
72120: ARRAY
72121: PUSH
72122: LD_INT 2
72124: ARRAY
72125: EQUAL
72126: AND
72127: PUSH
72128: LD_VAR 0 3
72132: PUSH
72133: LD_VAR 0 1
72137: PPUSH
72138: CALL_OW 437
72142: PUSH
72143: LD_INT 1
72145: ARRAY
72146: PUSH
72147: LD_INT 3
72149: ARRAY
72150: EQUAL
72151: AND
72152: IFFALSE 72162
// result := true ;
72154: LD_ADDR_VAR 0 4
72158: PUSH
72159: LD_INT 1
72161: ST_TO_ADDR
// end ; end ;
72162: LD_VAR 0 4
72166: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72167: LD_INT 0
72169: PPUSH
72170: PPUSH
72171: PPUSH
72172: PPUSH
// if not unit or not area then
72173: LD_VAR 0 1
72177: NOT
72178: PUSH
72179: LD_VAR 0 2
72183: NOT
72184: OR
72185: IFFALSE 72189
// exit ;
72187: GO 72365
// tmp := AreaToList ( area , i ) ;
72189: LD_ADDR_VAR 0 6
72193: PUSH
72194: LD_VAR 0 2
72198: PPUSH
72199: LD_VAR 0 5
72203: PPUSH
72204: CALL_OW 517
72208: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72209: LD_ADDR_VAR 0 5
72213: PUSH
72214: DOUBLE
72215: LD_INT 1
72217: DEC
72218: ST_TO_ADDR
72219: LD_VAR 0 6
72223: PUSH
72224: LD_INT 1
72226: ARRAY
72227: PUSH
72228: FOR_TO
72229: IFFALSE 72363
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72231: LD_ADDR_VAR 0 7
72235: PUSH
72236: LD_VAR 0 6
72240: PUSH
72241: LD_INT 1
72243: ARRAY
72244: PUSH
72245: LD_VAR 0 5
72249: ARRAY
72250: PUSH
72251: LD_VAR 0 6
72255: PUSH
72256: LD_INT 2
72258: ARRAY
72259: PUSH
72260: LD_VAR 0 5
72264: ARRAY
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72270: LD_INT 92
72272: PUSH
72273: LD_VAR 0 7
72277: PUSH
72278: LD_INT 1
72280: ARRAY
72281: PUSH
72282: LD_VAR 0 7
72286: PUSH
72287: LD_INT 2
72289: ARRAY
72290: PUSH
72291: LD_INT 2
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: PPUSH
72300: CALL_OW 69
72304: PUSH
72305: LD_INT 0
72307: EQUAL
72308: IFFALSE 72361
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72310: LD_VAR 0 1
72314: PPUSH
72315: LD_VAR 0 7
72319: PUSH
72320: LD_INT 1
72322: ARRAY
72323: PPUSH
72324: LD_VAR 0 7
72328: PUSH
72329: LD_INT 2
72331: ARRAY
72332: PPUSH
72333: LD_VAR 0 3
72337: PPUSH
72338: CALL_OW 48
// result := IsPlaced ( unit ) ;
72342: LD_ADDR_VAR 0 4
72346: PUSH
72347: LD_VAR 0 1
72351: PPUSH
72352: CALL_OW 305
72356: ST_TO_ADDR
// exit ;
72357: POP
72358: POP
72359: GO 72365
// end ; end ;
72361: GO 72228
72363: POP
72364: POP
// end ;
72365: LD_VAR 0 4
72369: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72370: LD_INT 0
72372: PPUSH
72373: PPUSH
72374: PPUSH
// if not side or side > 8 then
72375: LD_VAR 0 1
72379: NOT
72380: PUSH
72381: LD_VAR 0 1
72385: PUSH
72386: LD_INT 8
72388: GREATER
72389: OR
72390: IFFALSE 72394
// exit ;
72392: GO 72581
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72394: LD_ADDR_VAR 0 4
72398: PUSH
72399: LD_INT 22
72401: PUSH
72402: LD_VAR 0 1
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 21
72413: PUSH
72414: LD_INT 3
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PPUSH
72425: CALL_OW 69
72429: ST_TO_ADDR
// if not tmp then
72430: LD_VAR 0 4
72434: NOT
72435: IFFALSE 72439
// exit ;
72437: GO 72581
// enable_addtolog := true ;
72439: LD_ADDR_OWVAR 81
72443: PUSH
72444: LD_INT 1
72446: ST_TO_ADDR
// AddToLog ( [ ) ;
72447: LD_STRING [
72449: PPUSH
72450: CALL_OW 561
// for i in tmp do
72454: LD_ADDR_VAR 0 3
72458: PUSH
72459: LD_VAR 0 4
72463: PUSH
72464: FOR_IN
72465: IFFALSE 72572
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72467: LD_STRING [
72469: PUSH
72470: LD_VAR 0 3
72474: PPUSH
72475: CALL_OW 266
72479: STR
72480: PUSH
72481: LD_STRING , 
72483: STR
72484: PUSH
72485: LD_VAR 0 3
72489: PPUSH
72490: CALL_OW 250
72494: STR
72495: PUSH
72496: LD_STRING , 
72498: STR
72499: PUSH
72500: LD_VAR 0 3
72504: PPUSH
72505: CALL_OW 251
72509: STR
72510: PUSH
72511: LD_STRING , 
72513: STR
72514: PUSH
72515: LD_VAR 0 3
72519: PPUSH
72520: CALL_OW 254
72524: STR
72525: PUSH
72526: LD_STRING , 
72528: STR
72529: PUSH
72530: LD_VAR 0 3
72534: PPUSH
72535: LD_INT 1
72537: PPUSH
72538: CALL_OW 268
72542: STR
72543: PUSH
72544: LD_STRING , 
72546: STR
72547: PUSH
72548: LD_VAR 0 3
72552: PPUSH
72553: LD_INT 2
72555: PPUSH
72556: CALL_OW 268
72560: STR
72561: PUSH
72562: LD_STRING ],
72564: STR
72565: PPUSH
72566: CALL_OW 561
// end ;
72570: GO 72464
72572: POP
72573: POP
// AddToLog ( ]; ) ;
72574: LD_STRING ];
72576: PPUSH
72577: CALL_OW 561
// end ;
72581: LD_VAR 0 2
72585: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72586: LD_INT 0
72588: PPUSH
72589: PPUSH
72590: PPUSH
72591: PPUSH
72592: PPUSH
// if not area or not rate or not max then
72593: LD_VAR 0 1
72597: NOT
72598: PUSH
72599: LD_VAR 0 2
72603: NOT
72604: OR
72605: PUSH
72606: LD_VAR 0 4
72610: NOT
72611: OR
72612: IFFALSE 72616
// exit ;
72614: GO 72805
// while 1 do
72616: LD_INT 1
72618: IFFALSE 72805
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72620: LD_ADDR_VAR 0 9
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_INT 1
72632: PPUSH
72633: CALL_OW 287
72637: PUSH
72638: LD_INT 10
72640: MUL
72641: ST_TO_ADDR
// r := rate / 10 ;
72642: LD_ADDR_VAR 0 7
72646: PUSH
72647: LD_VAR 0 2
72651: PUSH
72652: LD_INT 10
72654: DIVREAL
72655: ST_TO_ADDR
// time := 1 1$00 ;
72656: LD_ADDR_VAR 0 8
72660: PUSH
72661: LD_INT 2100
72663: ST_TO_ADDR
// if amount < min then
72664: LD_VAR 0 9
72668: PUSH
72669: LD_VAR 0 3
72673: LESS
72674: IFFALSE 72692
// r := r * 2 else
72676: LD_ADDR_VAR 0 7
72680: PUSH
72681: LD_VAR 0 7
72685: PUSH
72686: LD_INT 2
72688: MUL
72689: ST_TO_ADDR
72690: GO 72718
// if amount > max then
72692: LD_VAR 0 9
72696: PUSH
72697: LD_VAR 0 4
72701: GREATER
72702: IFFALSE 72718
// r := r / 2 ;
72704: LD_ADDR_VAR 0 7
72708: PUSH
72709: LD_VAR 0 7
72713: PUSH
72714: LD_INT 2
72716: DIVREAL
72717: ST_TO_ADDR
// time := time / r ;
72718: LD_ADDR_VAR 0 8
72722: PUSH
72723: LD_VAR 0 8
72727: PUSH
72728: LD_VAR 0 7
72732: DIVREAL
72733: ST_TO_ADDR
// if time < 0 then
72734: LD_VAR 0 8
72738: PUSH
72739: LD_INT 0
72741: LESS
72742: IFFALSE 72759
// time := time * - 1 ;
72744: LD_ADDR_VAR 0 8
72748: PUSH
72749: LD_VAR 0 8
72753: PUSH
72754: LD_INT 1
72756: NEG
72757: MUL
72758: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72759: LD_VAR 0 8
72763: PUSH
72764: LD_INT 35
72766: PPUSH
72767: LD_INT 875
72769: PPUSH
72770: CALL_OW 12
72774: PLUS
72775: PPUSH
72776: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72780: LD_INT 1
72782: PPUSH
72783: LD_INT 5
72785: PPUSH
72786: CALL_OW 12
72790: PPUSH
72791: LD_VAR 0 1
72795: PPUSH
72796: LD_INT 1
72798: PPUSH
72799: CALL_OW 55
// end ;
72803: GO 72616
// end ;
72805: LD_VAR 0 5
72809: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72810: LD_INT 0
72812: PPUSH
72813: PPUSH
72814: PPUSH
72815: PPUSH
72816: PPUSH
72817: PPUSH
72818: PPUSH
72819: PPUSH
// if not turrets or not factories then
72820: LD_VAR 0 1
72824: NOT
72825: PUSH
72826: LD_VAR 0 2
72830: NOT
72831: OR
72832: IFFALSE 72836
// exit ;
72834: GO 73143
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72836: LD_ADDR_VAR 0 10
72840: PUSH
72841: LD_INT 5
72843: PUSH
72844: LD_INT 6
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 2
72853: PUSH
72854: LD_INT 4
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 3
72863: PUSH
72864: LD_INT 5
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 24
72878: PUSH
72879: LD_INT 25
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 23
72888: PUSH
72889: LD_INT 27
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 42
72902: PUSH
72903: LD_INT 43
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 44
72912: PUSH
72913: LD_INT 46
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 45
72922: PUSH
72923: LD_INT 47
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: LIST
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: LIST
72939: ST_TO_ADDR
// result := [ ] ;
72940: LD_ADDR_VAR 0 3
72944: PUSH
72945: EMPTY
72946: ST_TO_ADDR
// for i in turrets do
72947: LD_ADDR_VAR 0 4
72951: PUSH
72952: LD_VAR 0 1
72956: PUSH
72957: FOR_IN
72958: IFFALSE 73141
// begin nat := GetNation ( i ) ;
72960: LD_ADDR_VAR 0 7
72964: PUSH
72965: LD_VAR 0 4
72969: PPUSH
72970: CALL_OW 248
72974: ST_TO_ADDR
// weapon := 0 ;
72975: LD_ADDR_VAR 0 8
72979: PUSH
72980: LD_INT 0
72982: ST_TO_ADDR
// if not nat then
72983: LD_VAR 0 7
72987: NOT
72988: IFFALSE 72992
// continue ;
72990: GO 72957
// for j in list [ nat ] do
72992: LD_ADDR_VAR 0 5
72996: PUSH
72997: LD_VAR 0 10
73001: PUSH
73002: LD_VAR 0 7
73006: ARRAY
73007: PUSH
73008: FOR_IN
73009: IFFALSE 73050
// if GetBWeapon ( i ) = j [ 1 ] then
73011: LD_VAR 0 4
73015: PPUSH
73016: CALL_OW 269
73020: PUSH
73021: LD_VAR 0 5
73025: PUSH
73026: LD_INT 1
73028: ARRAY
73029: EQUAL
73030: IFFALSE 73048
// begin weapon := j [ 2 ] ;
73032: LD_ADDR_VAR 0 8
73036: PUSH
73037: LD_VAR 0 5
73041: PUSH
73042: LD_INT 2
73044: ARRAY
73045: ST_TO_ADDR
// break ;
73046: GO 73050
// end ;
73048: GO 73008
73050: POP
73051: POP
// if not weapon then
73052: LD_VAR 0 8
73056: NOT
73057: IFFALSE 73061
// continue ;
73059: GO 72957
// for k in factories do
73061: LD_ADDR_VAR 0 6
73065: PUSH
73066: LD_VAR 0 2
73070: PUSH
73071: FOR_IN
73072: IFFALSE 73137
// begin weapons := AvailableWeaponList ( k ) ;
73074: LD_ADDR_VAR 0 9
73078: PUSH
73079: LD_VAR 0 6
73083: PPUSH
73084: CALL_OW 478
73088: ST_TO_ADDR
// if not weapons then
73089: LD_VAR 0 9
73093: NOT
73094: IFFALSE 73098
// continue ;
73096: GO 73071
// if weapon in weapons then
73098: LD_VAR 0 8
73102: PUSH
73103: LD_VAR 0 9
73107: IN
73108: IFFALSE 73135
// begin result := [ i , weapon ] ;
73110: LD_ADDR_VAR 0 3
73114: PUSH
73115: LD_VAR 0 4
73119: PUSH
73120: LD_VAR 0 8
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: ST_TO_ADDR
// exit ;
73129: POP
73130: POP
73131: POP
73132: POP
73133: GO 73143
// end ; end ;
73135: GO 73071
73137: POP
73138: POP
// end ;
73139: GO 72957
73141: POP
73142: POP
// end ;
73143: LD_VAR 0 3
73147: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73148: LD_INT 0
73150: PPUSH
// if not side or side > 8 then
73151: LD_VAR 0 3
73155: NOT
73156: PUSH
73157: LD_VAR 0 3
73161: PUSH
73162: LD_INT 8
73164: GREATER
73165: OR
73166: IFFALSE 73170
// exit ;
73168: GO 73229
// if not range then
73170: LD_VAR 0 4
73174: NOT
73175: IFFALSE 73186
// range := - 12 ;
73177: LD_ADDR_VAR 0 4
73181: PUSH
73182: LD_INT 12
73184: NEG
73185: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73186: LD_VAR 0 1
73190: PPUSH
73191: LD_VAR 0 2
73195: PPUSH
73196: LD_VAR 0 3
73200: PPUSH
73201: LD_VAR 0 4
73205: PPUSH
73206: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73210: LD_VAR 0 1
73214: PPUSH
73215: LD_VAR 0 2
73219: PPUSH
73220: LD_VAR 0 3
73224: PPUSH
73225: CALL_OW 331
// end ;
73229: LD_VAR 0 5
73233: RET
// export function Video ( mode ) ; begin
73234: LD_INT 0
73236: PPUSH
// ingame_video = mode ;
73237: LD_ADDR_OWVAR 52
73241: PUSH
73242: LD_VAR 0 1
73246: ST_TO_ADDR
// interface_hidden = mode ;
73247: LD_ADDR_OWVAR 54
73251: PUSH
73252: LD_VAR 0 1
73256: ST_TO_ADDR
// end ;
73257: LD_VAR 0 2
73261: RET
// export function Join ( array , element ) ; begin
73262: LD_INT 0
73264: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73265: LD_ADDR_VAR 0 3
73269: PUSH
73270: LD_VAR 0 1
73274: PPUSH
73275: LD_VAR 0 1
73279: PUSH
73280: LD_INT 1
73282: PLUS
73283: PPUSH
73284: LD_VAR 0 2
73288: PPUSH
73289: CALL_OW 1
73293: ST_TO_ADDR
// end ;
73294: LD_VAR 0 3
73298: RET
// export function JoinUnion ( array , element ) ; begin
73299: LD_INT 0
73301: PPUSH
// result := array union element ;
73302: LD_ADDR_VAR 0 3
73306: PUSH
73307: LD_VAR 0 1
73311: PUSH
73312: LD_VAR 0 2
73316: UNION
73317: ST_TO_ADDR
// end ;
73318: LD_VAR 0 3
73322: RET
// export function GetBehemoths ( side ) ; begin
73323: LD_INT 0
73325: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73326: LD_ADDR_VAR 0 2
73330: PUSH
73331: LD_INT 22
73333: PUSH
73334: LD_VAR 0 1
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 31
73345: PUSH
73346: LD_INT 25
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: PPUSH
73357: CALL_OW 69
73361: ST_TO_ADDR
// end ;
73362: LD_VAR 0 2
73366: RET
// export function Shuffle ( array ) ; var i , index ; begin
73367: LD_INT 0
73369: PPUSH
73370: PPUSH
73371: PPUSH
// result := [ ] ;
73372: LD_ADDR_VAR 0 2
73376: PUSH
73377: EMPTY
73378: ST_TO_ADDR
// if not array then
73379: LD_VAR 0 1
73383: NOT
73384: IFFALSE 73388
// exit ;
73386: GO 73487
// Randomize ;
73388: CALL_OW 10
// for i = array downto 1 do
73392: LD_ADDR_VAR 0 3
73396: PUSH
73397: DOUBLE
73398: LD_VAR 0 1
73402: INC
73403: ST_TO_ADDR
73404: LD_INT 1
73406: PUSH
73407: FOR_DOWNTO
73408: IFFALSE 73485
// begin index := rand ( 1 , array ) ;
73410: LD_ADDR_VAR 0 4
73414: PUSH
73415: LD_INT 1
73417: PPUSH
73418: LD_VAR 0 1
73422: PPUSH
73423: CALL_OW 12
73427: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73428: LD_ADDR_VAR 0 2
73432: PUSH
73433: LD_VAR 0 2
73437: PPUSH
73438: LD_VAR 0 2
73442: PUSH
73443: LD_INT 1
73445: PLUS
73446: PPUSH
73447: LD_VAR 0 1
73451: PUSH
73452: LD_VAR 0 4
73456: ARRAY
73457: PPUSH
73458: CALL_OW 2
73462: ST_TO_ADDR
// array := Delete ( array , index ) ;
73463: LD_ADDR_VAR 0 1
73467: PUSH
73468: LD_VAR 0 1
73472: PPUSH
73473: LD_VAR 0 4
73477: PPUSH
73478: CALL_OW 3
73482: ST_TO_ADDR
// end ;
73483: GO 73407
73485: POP
73486: POP
// end ;
73487: LD_VAR 0 2
73491: RET
// export function GetBaseMaterials ( base ) ; begin
73492: LD_INT 0
73494: PPUSH
// result := [ 0 , 0 , 0 ] ;
73495: LD_ADDR_VAR 0 2
73499: PUSH
73500: LD_INT 0
73502: PUSH
73503: LD_INT 0
73505: PUSH
73506: LD_INT 0
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: LIST
73513: ST_TO_ADDR
// if not base then
73514: LD_VAR 0 1
73518: NOT
73519: IFFALSE 73523
// exit ;
73521: GO 73572
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73523: LD_ADDR_VAR 0 2
73527: PUSH
73528: LD_VAR 0 1
73532: PPUSH
73533: LD_INT 1
73535: PPUSH
73536: CALL_OW 275
73540: PUSH
73541: LD_VAR 0 1
73545: PPUSH
73546: LD_INT 2
73548: PPUSH
73549: CALL_OW 275
73553: PUSH
73554: LD_VAR 0 1
73558: PPUSH
73559: LD_INT 3
73561: PPUSH
73562: CALL_OW 275
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: LIST
73571: ST_TO_ADDR
// end ;
73572: LD_VAR 0 2
73576: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73577: LD_INT 0
73579: PPUSH
73580: PPUSH
// result := array ;
73581: LD_ADDR_VAR 0 3
73585: PUSH
73586: LD_VAR 0 1
73590: ST_TO_ADDR
// if size >= result then
73591: LD_VAR 0 2
73595: PUSH
73596: LD_VAR 0 3
73600: GREATEREQUAL
73601: IFFALSE 73605
// exit ;
73603: GO 73655
// if size then
73605: LD_VAR 0 2
73609: IFFALSE 73655
// for i := array downto size do
73611: LD_ADDR_VAR 0 4
73615: PUSH
73616: DOUBLE
73617: LD_VAR 0 1
73621: INC
73622: ST_TO_ADDR
73623: LD_VAR 0 2
73627: PUSH
73628: FOR_DOWNTO
73629: IFFALSE 73653
// result := Delete ( result , result ) ;
73631: LD_ADDR_VAR 0 3
73635: PUSH
73636: LD_VAR 0 3
73640: PPUSH
73641: LD_VAR 0 3
73645: PPUSH
73646: CALL_OW 3
73650: ST_TO_ADDR
73651: GO 73628
73653: POP
73654: POP
// end ;
73655: LD_VAR 0 3
73659: RET
// export function ComExit ( unit ) ; var tmp ; begin
73660: LD_INT 0
73662: PPUSH
73663: PPUSH
// if not IsInUnit ( unit ) then
73664: LD_VAR 0 1
73668: PPUSH
73669: CALL_OW 310
73673: NOT
73674: IFFALSE 73678
// exit ;
73676: GO 73738
// tmp := IsInUnit ( unit ) ;
73678: LD_ADDR_VAR 0 3
73682: PUSH
73683: LD_VAR 0 1
73687: PPUSH
73688: CALL_OW 310
73692: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73693: LD_VAR 0 3
73697: PPUSH
73698: CALL_OW 247
73702: PUSH
73703: LD_INT 2
73705: EQUAL
73706: IFFALSE 73719
// ComExitVehicle ( unit ) else
73708: LD_VAR 0 1
73712: PPUSH
73713: CALL_OW 121
73717: GO 73728
// ComExitBuilding ( unit ) ;
73719: LD_VAR 0 1
73723: PPUSH
73724: CALL_OW 122
// result := tmp ;
73728: LD_ADDR_VAR 0 2
73732: PUSH
73733: LD_VAR 0 3
73737: ST_TO_ADDR
// end ;
73738: LD_VAR 0 2
73742: RET
// export function ComExitAll ( units ) ; var i ; begin
73743: LD_INT 0
73745: PPUSH
73746: PPUSH
// if not units then
73747: LD_VAR 0 1
73751: NOT
73752: IFFALSE 73756
// exit ;
73754: GO 73782
// for i in units do
73756: LD_ADDR_VAR 0 3
73760: PUSH
73761: LD_VAR 0 1
73765: PUSH
73766: FOR_IN
73767: IFFALSE 73780
// ComExit ( i ) ;
73769: LD_VAR 0 3
73773: PPUSH
73774: CALL 73660 0 1
73778: GO 73766
73780: POP
73781: POP
// end ;
73782: LD_VAR 0 2
73786: RET
// export function ResetHc ; begin
73787: LD_INT 0
73789: PPUSH
// InitHc ;
73790: CALL_OW 19
// hc_importance := 0 ;
73794: LD_ADDR_OWVAR 32
73798: PUSH
73799: LD_INT 0
73801: ST_TO_ADDR
// end ;
73802: LD_VAR 0 1
73806: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73807: LD_INT 0
73809: PPUSH
73810: PPUSH
73811: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73812: LD_ADDR_VAR 0 6
73816: PUSH
73817: LD_VAR 0 1
73821: PUSH
73822: LD_VAR 0 3
73826: PLUS
73827: PUSH
73828: LD_INT 2
73830: DIV
73831: ST_TO_ADDR
// if _x < 0 then
73832: LD_VAR 0 6
73836: PUSH
73837: LD_INT 0
73839: LESS
73840: IFFALSE 73857
// _x := _x * - 1 ;
73842: LD_ADDR_VAR 0 6
73846: PUSH
73847: LD_VAR 0 6
73851: PUSH
73852: LD_INT 1
73854: NEG
73855: MUL
73856: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73857: LD_ADDR_VAR 0 7
73861: PUSH
73862: LD_VAR 0 2
73866: PUSH
73867: LD_VAR 0 4
73871: PLUS
73872: PUSH
73873: LD_INT 2
73875: DIV
73876: ST_TO_ADDR
// if _y < 0 then
73877: LD_VAR 0 7
73881: PUSH
73882: LD_INT 0
73884: LESS
73885: IFFALSE 73902
// _y := _y * - 1 ;
73887: LD_ADDR_VAR 0 7
73891: PUSH
73892: LD_VAR 0 7
73896: PUSH
73897: LD_INT 1
73899: NEG
73900: MUL
73901: ST_TO_ADDR
// result := [ _x , _y ] ;
73902: LD_ADDR_VAR 0 5
73906: PUSH
73907: LD_VAR 0 6
73911: PUSH
73912: LD_VAR 0 7
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: ST_TO_ADDR
// end ;
73921: LD_VAR 0 5
73925: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73926: LD_INT 0
73928: PPUSH
73929: PPUSH
73930: PPUSH
73931: PPUSH
// task := GetTaskList ( unit ) ;
73932: LD_ADDR_VAR 0 7
73936: PUSH
73937: LD_VAR 0 1
73941: PPUSH
73942: CALL_OW 437
73946: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73947: LD_VAR 0 7
73951: NOT
73952: PUSH
73953: LD_VAR 0 1
73957: PPUSH
73958: LD_VAR 0 2
73962: PPUSH
73963: CALL_OW 308
73967: NOT
73968: AND
73969: IFFALSE 73973
// exit ;
73971: GO 74091
// if IsInArea ( unit , area ) then
73973: LD_VAR 0 1
73977: PPUSH
73978: LD_VAR 0 2
73982: PPUSH
73983: CALL_OW 308
73987: IFFALSE 74005
// begin ComMoveToArea ( unit , goAway ) ;
73989: LD_VAR 0 1
73993: PPUSH
73994: LD_VAR 0 3
73998: PPUSH
73999: CALL_OW 113
// exit ;
74003: GO 74091
// end ; if task [ 1 ] [ 1 ] <> M then
74005: LD_VAR 0 7
74009: PUSH
74010: LD_INT 1
74012: ARRAY
74013: PUSH
74014: LD_INT 1
74016: ARRAY
74017: PUSH
74018: LD_STRING M
74020: NONEQUAL
74021: IFFALSE 74025
// exit ;
74023: GO 74091
// x := task [ 1 ] [ 2 ] ;
74025: LD_ADDR_VAR 0 5
74029: PUSH
74030: LD_VAR 0 7
74034: PUSH
74035: LD_INT 1
74037: ARRAY
74038: PUSH
74039: LD_INT 2
74041: ARRAY
74042: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74043: LD_ADDR_VAR 0 6
74047: PUSH
74048: LD_VAR 0 7
74052: PUSH
74053: LD_INT 1
74055: ARRAY
74056: PUSH
74057: LD_INT 3
74059: ARRAY
74060: ST_TO_ADDR
// if InArea ( x , y , area ) then
74061: LD_VAR 0 5
74065: PPUSH
74066: LD_VAR 0 6
74070: PPUSH
74071: LD_VAR 0 2
74075: PPUSH
74076: CALL_OW 309
74080: IFFALSE 74091
// ComStop ( unit ) ;
74082: LD_VAR 0 1
74086: PPUSH
74087: CALL_OW 141
// end ;
74091: LD_VAR 0 4
74095: RET
// export function Abs ( value ) ; begin
74096: LD_INT 0
74098: PPUSH
// result := value ;
74099: LD_ADDR_VAR 0 2
74103: PUSH
74104: LD_VAR 0 1
74108: ST_TO_ADDR
// if value < 0 then
74109: LD_VAR 0 1
74113: PUSH
74114: LD_INT 0
74116: LESS
74117: IFFALSE 74134
// result := value * - 1 ;
74119: LD_ADDR_VAR 0 2
74123: PUSH
74124: LD_VAR 0 1
74128: PUSH
74129: LD_INT 1
74131: NEG
74132: MUL
74133: ST_TO_ADDR
// end ;
74134: LD_VAR 0 2
74138: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74139: LD_INT 0
74141: PPUSH
74142: PPUSH
74143: PPUSH
74144: PPUSH
74145: PPUSH
74146: PPUSH
74147: PPUSH
74148: PPUSH
// if not unit or not building then
74149: LD_VAR 0 1
74153: NOT
74154: PUSH
74155: LD_VAR 0 2
74159: NOT
74160: OR
74161: IFFALSE 74165
// exit ;
74163: GO 74391
// x := GetX ( building ) ;
74165: LD_ADDR_VAR 0 4
74169: PUSH
74170: LD_VAR 0 2
74174: PPUSH
74175: CALL_OW 250
74179: ST_TO_ADDR
// y := GetY ( building ) ;
74180: LD_ADDR_VAR 0 6
74184: PUSH
74185: LD_VAR 0 2
74189: PPUSH
74190: CALL_OW 251
74194: ST_TO_ADDR
// d := GetDir ( building ) ;
74195: LD_ADDR_VAR 0 8
74199: PUSH
74200: LD_VAR 0 2
74204: PPUSH
74205: CALL_OW 254
74209: ST_TO_ADDR
// r := 4 ;
74210: LD_ADDR_VAR 0 9
74214: PUSH
74215: LD_INT 4
74217: ST_TO_ADDR
// for i := 1 to 5 do
74218: LD_ADDR_VAR 0 10
74222: PUSH
74223: DOUBLE
74224: LD_INT 1
74226: DEC
74227: ST_TO_ADDR
74228: LD_INT 5
74230: PUSH
74231: FOR_TO
74232: IFFALSE 74389
// begin _x := ShiftX ( x , d , r + i ) ;
74234: LD_ADDR_VAR 0 5
74238: PUSH
74239: LD_VAR 0 4
74243: PPUSH
74244: LD_VAR 0 8
74248: PPUSH
74249: LD_VAR 0 9
74253: PUSH
74254: LD_VAR 0 10
74258: PLUS
74259: PPUSH
74260: CALL_OW 272
74264: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74265: LD_ADDR_VAR 0 7
74269: PUSH
74270: LD_VAR 0 6
74274: PPUSH
74275: LD_VAR 0 8
74279: PPUSH
74280: LD_VAR 0 9
74284: PUSH
74285: LD_VAR 0 10
74289: PLUS
74290: PPUSH
74291: CALL_OW 273
74295: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74296: LD_VAR 0 5
74300: PPUSH
74301: LD_VAR 0 7
74305: PPUSH
74306: CALL_OW 488
74310: PUSH
74311: LD_VAR 0 5
74315: PPUSH
74316: LD_VAR 0 7
74320: PPUSH
74321: CALL_OW 428
74325: PPUSH
74326: CALL_OW 247
74330: PUSH
74331: LD_INT 3
74333: PUSH
74334: LD_INT 2
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: IN
74341: NOT
74342: AND
74343: IFFALSE 74387
// begin ComMoveXY ( unit , _x , _y ) ;
74345: LD_VAR 0 1
74349: PPUSH
74350: LD_VAR 0 5
74354: PPUSH
74355: LD_VAR 0 7
74359: PPUSH
74360: CALL_OW 111
// result := [ _x , _y ] ;
74364: LD_ADDR_VAR 0 3
74368: PUSH
74369: LD_VAR 0 5
74373: PUSH
74374: LD_VAR 0 7
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: ST_TO_ADDR
// exit ;
74383: POP
74384: POP
74385: GO 74391
// end ; end ;
74387: GO 74231
74389: POP
74390: POP
// end ;
74391: LD_VAR 0 3
74395: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74396: LD_INT 0
74398: PPUSH
74399: PPUSH
74400: PPUSH
// result := 0 ;
74401: LD_ADDR_VAR 0 3
74405: PUSH
74406: LD_INT 0
74408: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74409: LD_VAR 0 1
74413: PUSH
74414: LD_INT 0
74416: LESS
74417: PUSH
74418: LD_VAR 0 1
74422: PUSH
74423: LD_INT 8
74425: GREATER
74426: OR
74427: PUSH
74428: LD_VAR 0 2
74432: PUSH
74433: LD_INT 0
74435: LESS
74436: OR
74437: PUSH
74438: LD_VAR 0 2
74442: PUSH
74443: LD_INT 8
74445: GREATER
74446: OR
74447: IFFALSE 74451
// exit ;
74449: GO 74526
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74451: LD_ADDR_VAR 0 4
74455: PUSH
74456: LD_INT 22
74458: PUSH
74459: LD_VAR 0 2
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PPUSH
74468: CALL_OW 69
74472: PUSH
74473: FOR_IN
74474: IFFALSE 74524
// begin un := UnitShoot ( i ) ;
74476: LD_ADDR_VAR 0 5
74480: PUSH
74481: LD_VAR 0 4
74485: PPUSH
74486: CALL_OW 504
74490: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74491: LD_VAR 0 5
74495: PPUSH
74496: CALL_OW 255
74500: PUSH
74501: LD_VAR 0 1
74505: EQUAL
74506: IFFALSE 74522
// begin result := un ;
74508: LD_ADDR_VAR 0 3
74512: PUSH
74513: LD_VAR 0 5
74517: ST_TO_ADDR
// exit ;
74518: POP
74519: POP
74520: GO 74526
// end ; end ;
74522: GO 74473
74524: POP
74525: POP
// end ;
74526: LD_VAR 0 3
74530: RET
// export function GetCargoBay ( units ) ; begin
74531: LD_INT 0
74533: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74534: LD_ADDR_VAR 0 2
74538: PUSH
74539: LD_VAR 0 1
74543: PPUSH
74544: LD_INT 2
74546: PUSH
74547: LD_INT 34
74549: PUSH
74550: LD_INT 12
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 34
74559: PUSH
74560: LD_INT 51
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 34
74569: PUSH
74570: LD_INT 32
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 34
74579: PUSH
74580: LD_INT 89
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: PPUSH
74594: CALL_OW 72
74598: ST_TO_ADDR
// end ;
74599: LD_VAR 0 2
74603: RET
// export function Negate ( value ) ; begin
74604: LD_INT 0
74606: PPUSH
// result := not value ;
74607: LD_ADDR_VAR 0 2
74611: PUSH
74612: LD_VAR 0 1
74616: NOT
74617: ST_TO_ADDR
// end ;
74618: LD_VAR 0 2
74622: RET
// export function Inc ( value ) ; begin
74623: LD_INT 0
74625: PPUSH
// result := value + 1 ;
74626: LD_ADDR_VAR 0 2
74630: PUSH
74631: LD_VAR 0 1
74635: PUSH
74636: LD_INT 1
74638: PLUS
74639: ST_TO_ADDR
// end ;
74640: LD_VAR 0 2
74644: RET
// export function Dec ( value ) ; begin
74645: LD_INT 0
74647: PPUSH
// result := value - 1 ;
74648: LD_ADDR_VAR 0 2
74652: PUSH
74653: LD_VAR 0 1
74657: PUSH
74658: LD_INT 1
74660: MINUS
74661: ST_TO_ADDR
// end ;
74662: LD_VAR 0 2
74666: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74667: LD_INT 0
74669: PPUSH
74670: PPUSH
74671: PPUSH
74672: PPUSH
74673: PPUSH
74674: PPUSH
74675: PPUSH
74676: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74677: LD_VAR 0 1
74681: PPUSH
74682: LD_VAR 0 2
74686: PPUSH
74687: CALL_OW 488
74691: NOT
74692: PUSH
74693: LD_VAR 0 3
74697: PPUSH
74698: LD_VAR 0 4
74702: PPUSH
74703: CALL_OW 488
74707: NOT
74708: OR
74709: IFFALSE 74722
// begin result := - 1 ;
74711: LD_ADDR_VAR 0 5
74715: PUSH
74716: LD_INT 1
74718: NEG
74719: ST_TO_ADDR
// exit ;
74720: GO 74957
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74722: LD_ADDR_VAR 0 12
74726: PUSH
74727: LD_VAR 0 1
74731: PPUSH
74732: LD_VAR 0 2
74736: PPUSH
74737: LD_VAR 0 3
74741: PPUSH
74742: LD_VAR 0 4
74746: PPUSH
74747: CALL 73807 0 4
74751: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74752: LD_ADDR_VAR 0 11
74756: PUSH
74757: LD_VAR 0 1
74761: PPUSH
74762: LD_VAR 0 2
74766: PPUSH
74767: LD_VAR 0 12
74771: PUSH
74772: LD_INT 1
74774: ARRAY
74775: PPUSH
74776: LD_VAR 0 12
74780: PUSH
74781: LD_INT 2
74783: ARRAY
74784: PPUSH
74785: CALL_OW 298
74789: ST_TO_ADDR
// distance := 9999 ;
74790: LD_ADDR_VAR 0 10
74794: PUSH
74795: LD_INT 9999
74797: ST_TO_ADDR
// for i := 0 to 5 do
74798: LD_ADDR_VAR 0 6
74802: PUSH
74803: DOUBLE
74804: LD_INT 0
74806: DEC
74807: ST_TO_ADDR
74808: LD_INT 5
74810: PUSH
74811: FOR_TO
74812: IFFALSE 74955
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74814: LD_ADDR_VAR 0 7
74818: PUSH
74819: LD_VAR 0 1
74823: PPUSH
74824: LD_VAR 0 6
74828: PPUSH
74829: LD_VAR 0 11
74833: PPUSH
74834: CALL_OW 272
74838: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74839: LD_ADDR_VAR 0 8
74843: PUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: LD_VAR 0 6
74853: PPUSH
74854: LD_VAR 0 11
74858: PPUSH
74859: CALL_OW 273
74863: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74864: LD_VAR 0 7
74868: PPUSH
74869: LD_VAR 0 8
74873: PPUSH
74874: CALL_OW 488
74878: NOT
74879: IFFALSE 74883
// continue ;
74881: GO 74811
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74883: LD_ADDR_VAR 0 9
74887: PUSH
74888: LD_VAR 0 12
74892: PUSH
74893: LD_INT 1
74895: ARRAY
74896: PPUSH
74897: LD_VAR 0 12
74901: PUSH
74902: LD_INT 2
74904: ARRAY
74905: PPUSH
74906: LD_VAR 0 7
74910: PPUSH
74911: LD_VAR 0 8
74915: PPUSH
74916: CALL_OW 298
74920: ST_TO_ADDR
// if tmp < distance then
74921: LD_VAR 0 9
74925: PUSH
74926: LD_VAR 0 10
74930: LESS
74931: IFFALSE 74953
// begin result := i ;
74933: LD_ADDR_VAR 0 5
74937: PUSH
74938: LD_VAR 0 6
74942: ST_TO_ADDR
// distance := tmp ;
74943: LD_ADDR_VAR 0 10
74947: PUSH
74948: LD_VAR 0 9
74952: ST_TO_ADDR
// end ; end ;
74953: GO 74811
74955: POP
74956: POP
// end ;
74957: LD_VAR 0 5
74961: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74962: LD_INT 0
74964: PPUSH
74965: PPUSH
// if not driver or not IsInUnit ( driver ) then
74966: LD_VAR 0 1
74970: NOT
74971: PUSH
74972: LD_VAR 0 1
74976: PPUSH
74977: CALL_OW 310
74981: NOT
74982: OR
74983: IFFALSE 74987
// exit ;
74985: GO 75077
// vehicle := IsInUnit ( driver ) ;
74987: LD_ADDR_VAR 0 3
74991: PUSH
74992: LD_VAR 0 1
74996: PPUSH
74997: CALL_OW 310
75001: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75002: LD_VAR 0 1
75006: PPUSH
75007: LD_STRING \
75009: PUSH
75010: LD_INT 0
75012: PUSH
75013: LD_INT 0
75015: PUSH
75016: LD_INT 0
75018: PUSH
75019: LD_INT 0
75021: PUSH
75022: LD_INT 0
75024: PUSH
75025: LD_INT 0
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: PUSH
75037: LD_STRING E
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: LD_INT 0
75045: PUSH
75046: LD_VAR 0 3
75050: PUSH
75051: LD_INT 0
75053: PUSH
75054: LD_INT 0
75056: PUSH
75057: LD_INT 0
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PPUSH
75073: CALL_OW 446
// end ;
75077: LD_VAR 0 2
75081: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75082: LD_INT 0
75084: PPUSH
75085: PPUSH
// if not driver or not IsInUnit ( driver ) then
75086: LD_VAR 0 1
75090: NOT
75091: PUSH
75092: LD_VAR 0 1
75096: PPUSH
75097: CALL_OW 310
75101: NOT
75102: OR
75103: IFFALSE 75107
// exit ;
75105: GO 75197
// vehicle := IsInUnit ( driver ) ;
75107: LD_ADDR_VAR 0 3
75111: PUSH
75112: LD_VAR 0 1
75116: PPUSH
75117: CALL_OW 310
75121: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75122: LD_VAR 0 1
75126: PPUSH
75127: LD_STRING \
75129: PUSH
75130: LD_INT 0
75132: PUSH
75133: LD_INT 0
75135: PUSH
75136: LD_INT 0
75138: PUSH
75139: LD_INT 0
75141: PUSH
75142: LD_INT 0
75144: PUSH
75145: LD_INT 0
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: PUSH
75157: LD_STRING E
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: LD_VAR 0 3
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: LD_INT 0
75176: PUSH
75177: LD_INT 0
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PPUSH
75193: CALL_OW 447
// end ;
75197: LD_VAR 0 2
75201: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75202: LD_INT 0
75204: PPUSH
75205: PPUSH
75206: PPUSH
// tmp := [ ] ;
75207: LD_ADDR_VAR 0 5
75211: PUSH
75212: EMPTY
75213: ST_TO_ADDR
// for i in units do
75214: LD_ADDR_VAR 0 4
75218: PUSH
75219: LD_VAR 0 1
75223: PUSH
75224: FOR_IN
75225: IFFALSE 75263
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75227: LD_ADDR_VAR 0 5
75231: PUSH
75232: LD_VAR 0 5
75236: PPUSH
75237: LD_VAR 0 5
75241: PUSH
75242: LD_INT 1
75244: PLUS
75245: PPUSH
75246: LD_VAR 0 4
75250: PPUSH
75251: CALL_OW 256
75255: PPUSH
75256: CALL_OW 2
75260: ST_TO_ADDR
75261: GO 75224
75263: POP
75264: POP
// if not tmp then
75265: LD_VAR 0 5
75269: NOT
75270: IFFALSE 75274
// exit ;
75272: GO 75322
// if asc then
75274: LD_VAR 0 2
75278: IFFALSE 75302
// result := SortListByListAsc ( units , tmp ) else
75280: LD_ADDR_VAR 0 3
75284: PUSH
75285: LD_VAR 0 1
75289: PPUSH
75290: LD_VAR 0 5
75294: PPUSH
75295: CALL_OW 76
75299: ST_TO_ADDR
75300: GO 75322
// result := SortListByListDesc ( units , tmp ) ;
75302: LD_ADDR_VAR 0 3
75306: PUSH
75307: LD_VAR 0 1
75311: PPUSH
75312: LD_VAR 0 5
75316: PPUSH
75317: CALL_OW 77
75321: ST_TO_ADDR
// end ;
75322: LD_VAR 0 3
75326: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75327: LD_INT 0
75329: PPUSH
75330: PPUSH
// task := GetTaskList ( mech ) ;
75331: LD_ADDR_VAR 0 4
75335: PUSH
75336: LD_VAR 0 1
75340: PPUSH
75341: CALL_OW 437
75345: ST_TO_ADDR
// if not task then
75346: LD_VAR 0 4
75350: NOT
75351: IFFALSE 75355
// exit ;
75353: GO 75397
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75355: LD_ADDR_VAR 0 3
75359: PUSH
75360: LD_VAR 0 4
75364: PUSH
75365: LD_INT 1
75367: ARRAY
75368: PUSH
75369: LD_INT 1
75371: ARRAY
75372: PUSH
75373: LD_STRING r
75375: EQUAL
75376: PUSH
75377: LD_VAR 0 4
75381: PUSH
75382: LD_INT 1
75384: ARRAY
75385: PUSH
75386: LD_INT 4
75388: ARRAY
75389: PUSH
75390: LD_VAR 0 2
75394: EQUAL
75395: AND
75396: ST_TO_ADDR
// end ;
75397: LD_VAR 0 3
75401: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75402: LD_INT 0
75404: PPUSH
// SetDir ( unit , d ) ;
75405: LD_VAR 0 1
75409: PPUSH
75410: LD_VAR 0 4
75414: PPUSH
75415: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75419: LD_VAR 0 1
75423: PPUSH
75424: LD_VAR 0 2
75428: PPUSH
75429: LD_VAR 0 3
75433: PPUSH
75434: LD_VAR 0 5
75438: PPUSH
75439: CALL_OW 48
// end ;
75443: LD_VAR 0 6
75447: RET
// export function ToNaturalNumber ( number ) ; begin
75448: LD_INT 0
75450: PPUSH
// result := number div 1 ;
75451: LD_ADDR_VAR 0 2
75455: PUSH
75456: LD_VAR 0 1
75460: PUSH
75461: LD_INT 1
75463: DIV
75464: ST_TO_ADDR
// if number < 0 then
75465: LD_VAR 0 1
75469: PUSH
75470: LD_INT 0
75472: LESS
75473: IFFALSE 75483
// result := 0 ;
75475: LD_ADDR_VAR 0 2
75479: PUSH
75480: LD_INT 0
75482: ST_TO_ADDR
// end ;
75483: LD_VAR 0 2
75487: RET
// export function SortByClass ( units , class ) ; var un ; begin
75488: LD_INT 0
75490: PPUSH
75491: PPUSH
// if not units or not class then
75492: LD_VAR 0 1
75496: NOT
75497: PUSH
75498: LD_VAR 0 2
75502: NOT
75503: OR
75504: IFFALSE 75508
// exit ;
75506: GO 75603
// result := [ ] ;
75508: LD_ADDR_VAR 0 3
75512: PUSH
75513: EMPTY
75514: ST_TO_ADDR
// for un in units do
75515: LD_ADDR_VAR 0 4
75519: PUSH
75520: LD_VAR 0 1
75524: PUSH
75525: FOR_IN
75526: IFFALSE 75601
// if GetClass ( un ) = class then
75528: LD_VAR 0 4
75532: PPUSH
75533: CALL_OW 257
75537: PUSH
75538: LD_VAR 0 2
75542: EQUAL
75543: IFFALSE 75570
// result := Insert ( result , 1 , un ) else
75545: LD_ADDR_VAR 0 3
75549: PUSH
75550: LD_VAR 0 3
75554: PPUSH
75555: LD_INT 1
75557: PPUSH
75558: LD_VAR 0 4
75562: PPUSH
75563: CALL_OW 2
75567: ST_TO_ADDR
75568: GO 75599
// result := Replace ( result , result + 1 , un ) ;
75570: LD_ADDR_VAR 0 3
75574: PUSH
75575: LD_VAR 0 3
75579: PPUSH
75580: LD_VAR 0 3
75584: PUSH
75585: LD_INT 1
75587: PLUS
75588: PPUSH
75589: LD_VAR 0 4
75593: PPUSH
75594: CALL_OW 1
75598: ST_TO_ADDR
75599: GO 75525
75601: POP
75602: POP
// end ;
75603: LD_VAR 0 3
75607: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75608: LD_INT 0
75610: PPUSH
75611: PPUSH
75612: PPUSH
75613: PPUSH
75614: PPUSH
75615: PPUSH
75616: PPUSH
// result := [ ] ;
75617: LD_ADDR_VAR 0 4
75621: PUSH
75622: EMPTY
75623: ST_TO_ADDR
// if x - r < 0 then
75624: LD_VAR 0 1
75628: PUSH
75629: LD_VAR 0 3
75633: MINUS
75634: PUSH
75635: LD_INT 0
75637: LESS
75638: IFFALSE 75650
// min_x := 0 else
75640: LD_ADDR_VAR 0 8
75644: PUSH
75645: LD_INT 0
75647: ST_TO_ADDR
75648: GO 75666
// min_x := x - r ;
75650: LD_ADDR_VAR 0 8
75654: PUSH
75655: LD_VAR 0 1
75659: PUSH
75660: LD_VAR 0 3
75664: MINUS
75665: ST_TO_ADDR
// if y - r < 0 then
75666: LD_VAR 0 2
75670: PUSH
75671: LD_VAR 0 3
75675: MINUS
75676: PUSH
75677: LD_INT 0
75679: LESS
75680: IFFALSE 75692
// min_y := 0 else
75682: LD_ADDR_VAR 0 7
75686: PUSH
75687: LD_INT 0
75689: ST_TO_ADDR
75690: GO 75708
// min_y := y - r ;
75692: LD_ADDR_VAR 0 7
75696: PUSH
75697: LD_VAR 0 2
75701: PUSH
75702: LD_VAR 0 3
75706: MINUS
75707: ST_TO_ADDR
// max_x := x + r ;
75708: LD_ADDR_VAR 0 9
75712: PUSH
75713: LD_VAR 0 1
75717: PUSH
75718: LD_VAR 0 3
75722: PLUS
75723: ST_TO_ADDR
// max_y := y + r ;
75724: LD_ADDR_VAR 0 10
75728: PUSH
75729: LD_VAR 0 2
75733: PUSH
75734: LD_VAR 0 3
75738: PLUS
75739: ST_TO_ADDR
// for _x = min_x to max_x do
75740: LD_ADDR_VAR 0 5
75744: PUSH
75745: DOUBLE
75746: LD_VAR 0 8
75750: DEC
75751: ST_TO_ADDR
75752: LD_VAR 0 9
75756: PUSH
75757: FOR_TO
75758: IFFALSE 75859
// for _y = min_y to max_y do
75760: LD_ADDR_VAR 0 6
75764: PUSH
75765: DOUBLE
75766: LD_VAR 0 7
75770: DEC
75771: ST_TO_ADDR
75772: LD_VAR 0 10
75776: PUSH
75777: FOR_TO
75778: IFFALSE 75855
// begin if not ValidHex ( _x , _y ) then
75780: LD_VAR 0 5
75784: PPUSH
75785: LD_VAR 0 6
75789: PPUSH
75790: CALL_OW 488
75794: NOT
75795: IFFALSE 75799
// continue ;
75797: GO 75777
// if GetResourceTypeXY ( _x , _y ) then
75799: LD_VAR 0 5
75803: PPUSH
75804: LD_VAR 0 6
75808: PPUSH
75809: CALL_OW 283
75813: IFFALSE 75853
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75815: LD_ADDR_VAR 0 4
75819: PUSH
75820: LD_VAR 0 4
75824: PPUSH
75825: LD_VAR 0 4
75829: PUSH
75830: LD_INT 1
75832: PLUS
75833: PPUSH
75834: LD_VAR 0 5
75838: PUSH
75839: LD_VAR 0 6
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PPUSH
75848: CALL_OW 1
75852: ST_TO_ADDR
// end ;
75853: GO 75777
75855: POP
75856: POP
75857: GO 75757
75859: POP
75860: POP
// end ;
75861: LD_VAR 0 4
75865: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75866: LD_INT 0
75868: PPUSH
75869: PPUSH
75870: PPUSH
75871: PPUSH
75872: PPUSH
75873: PPUSH
75874: PPUSH
75875: PPUSH
// if not units then
75876: LD_VAR 0 1
75880: NOT
75881: IFFALSE 75885
// exit ;
75883: GO 76409
// result := UnitFilter ( units , [ f_ok ] ) ;
75885: LD_ADDR_VAR 0 3
75889: PUSH
75890: LD_VAR 0 1
75894: PPUSH
75895: LD_INT 50
75897: PUSH
75898: EMPTY
75899: LIST
75900: PPUSH
75901: CALL_OW 72
75905: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75906: LD_ADDR_VAR 0 8
75910: PUSH
75911: LD_VAR 0 1
75915: PUSH
75916: LD_INT 1
75918: ARRAY
75919: PPUSH
75920: CALL_OW 255
75924: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75925: LD_ADDR_VAR 0 10
75929: PUSH
75930: LD_INT 29
75932: PUSH
75933: LD_INT 91
75935: PUSH
75936: LD_INT 49
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: LIST
75943: ST_TO_ADDR
// if not result then
75944: LD_VAR 0 3
75948: NOT
75949: IFFALSE 75953
// exit ;
75951: GO 76409
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75953: LD_ADDR_VAR 0 5
75957: PUSH
75958: LD_INT 81
75960: PUSH
75961: LD_VAR 0 8
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PPUSH
75970: CALL_OW 69
75974: ST_TO_ADDR
// for i in result do
75975: LD_ADDR_VAR 0 4
75979: PUSH
75980: LD_VAR 0 3
75984: PUSH
75985: FOR_IN
75986: IFFALSE 76407
// begin tag := GetTag ( i ) + 1 ;
75988: LD_ADDR_VAR 0 9
75992: PUSH
75993: LD_VAR 0 4
75997: PPUSH
75998: CALL_OW 110
76002: PUSH
76003: LD_INT 1
76005: PLUS
76006: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76007: LD_ADDR_VAR 0 7
76011: PUSH
76012: LD_VAR 0 4
76016: PPUSH
76017: CALL_OW 250
76021: PPUSH
76022: LD_VAR 0 4
76026: PPUSH
76027: CALL_OW 251
76031: PPUSH
76032: LD_INT 6
76034: PPUSH
76035: CALL 75608 0 3
76039: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76040: LD_VAR 0 4
76044: PPUSH
76045: CALL_OW 247
76049: PUSH
76050: LD_INT 2
76052: EQUAL
76053: PUSH
76054: LD_VAR 0 7
76058: AND
76059: PUSH
76060: LD_VAR 0 4
76064: PPUSH
76065: CALL_OW 264
76069: PUSH
76070: LD_VAR 0 10
76074: IN
76075: NOT
76076: AND
76077: IFFALSE 76116
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76079: LD_VAR 0 4
76083: PPUSH
76084: LD_VAR 0 7
76088: PUSH
76089: LD_INT 1
76091: ARRAY
76092: PUSH
76093: LD_INT 1
76095: ARRAY
76096: PPUSH
76097: LD_VAR 0 7
76101: PUSH
76102: LD_INT 1
76104: ARRAY
76105: PUSH
76106: LD_INT 2
76108: ARRAY
76109: PPUSH
76110: CALL_OW 116
76114: GO 76405
// if path > tag then
76116: LD_VAR 0 2
76120: PUSH
76121: LD_VAR 0 9
76125: GREATER
76126: IFFALSE 76334
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76128: LD_ADDR_VAR 0 6
76132: PUSH
76133: LD_VAR 0 5
76137: PPUSH
76138: LD_INT 91
76140: PUSH
76141: LD_VAR 0 4
76145: PUSH
76146: LD_INT 8
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: LIST
76153: PPUSH
76154: CALL_OW 72
76158: ST_TO_ADDR
// if nearEnemy then
76159: LD_VAR 0 6
76163: IFFALSE 76232
// begin if GetWeapon ( i ) = ru_time_lapser then
76165: LD_VAR 0 4
76169: PPUSH
76170: CALL_OW 264
76174: PUSH
76175: LD_INT 49
76177: EQUAL
76178: IFFALSE 76206
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76180: LD_VAR 0 4
76184: PPUSH
76185: LD_VAR 0 6
76189: PPUSH
76190: LD_VAR 0 4
76194: PPUSH
76195: CALL_OW 74
76199: PPUSH
76200: CALL_OW 112
76204: GO 76230
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76206: LD_VAR 0 4
76210: PPUSH
76211: LD_VAR 0 6
76215: PPUSH
76216: LD_VAR 0 4
76220: PPUSH
76221: CALL_OW 74
76225: PPUSH
76226: CALL 77334 0 2
// end else
76230: GO 76332
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76232: LD_VAR 0 4
76236: PPUSH
76237: LD_VAR 0 2
76241: PUSH
76242: LD_VAR 0 9
76246: ARRAY
76247: PUSH
76248: LD_INT 1
76250: ARRAY
76251: PPUSH
76252: LD_VAR 0 2
76256: PUSH
76257: LD_VAR 0 9
76261: ARRAY
76262: PUSH
76263: LD_INT 2
76265: ARRAY
76266: PPUSH
76267: CALL_OW 297
76271: PUSH
76272: LD_INT 6
76274: GREATER
76275: IFFALSE 76318
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76277: LD_VAR 0 4
76281: PPUSH
76282: LD_VAR 0 2
76286: PUSH
76287: LD_VAR 0 9
76291: ARRAY
76292: PUSH
76293: LD_INT 1
76295: ARRAY
76296: PPUSH
76297: LD_VAR 0 2
76301: PUSH
76302: LD_VAR 0 9
76306: ARRAY
76307: PUSH
76308: LD_INT 2
76310: ARRAY
76311: PPUSH
76312: CALL_OW 114
76316: GO 76332
// SetTag ( i , tag ) ;
76318: LD_VAR 0 4
76322: PPUSH
76323: LD_VAR 0 9
76327: PPUSH
76328: CALL_OW 109
// end else
76332: GO 76405
// if enemy then
76334: LD_VAR 0 5
76338: IFFALSE 76405
// begin if GetWeapon ( i ) = ru_time_lapser then
76340: LD_VAR 0 4
76344: PPUSH
76345: CALL_OW 264
76349: PUSH
76350: LD_INT 49
76352: EQUAL
76353: IFFALSE 76381
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76355: LD_VAR 0 4
76359: PPUSH
76360: LD_VAR 0 5
76364: PPUSH
76365: LD_VAR 0 4
76369: PPUSH
76370: CALL_OW 74
76374: PPUSH
76375: CALL_OW 112
76379: GO 76405
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76381: LD_VAR 0 4
76385: PPUSH
76386: LD_VAR 0 5
76390: PPUSH
76391: LD_VAR 0 4
76395: PPUSH
76396: CALL_OW 74
76400: PPUSH
76401: CALL 77334 0 2
// end ; end ;
76405: GO 75985
76407: POP
76408: POP
// end ;
76409: LD_VAR 0 3
76413: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76414: LD_INT 0
76416: PPUSH
76417: PPUSH
76418: PPUSH
// if not unit or IsInUnit ( unit ) then
76419: LD_VAR 0 1
76423: NOT
76424: PUSH
76425: LD_VAR 0 1
76429: PPUSH
76430: CALL_OW 310
76434: OR
76435: IFFALSE 76439
// exit ;
76437: GO 76530
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76439: LD_ADDR_VAR 0 4
76443: PUSH
76444: LD_VAR 0 1
76448: PPUSH
76449: CALL_OW 250
76453: PPUSH
76454: LD_VAR 0 2
76458: PPUSH
76459: LD_INT 1
76461: PPUSH
76462: CALL_OW 272
76466: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76467: LD_ADDR_VAR 0 5
76471: PUSH
76472: LD_VAR 0 1
76476: PPUSH
76477: CALL_OW 251
76481: PPUSH
76482: LD_VAR 0 2
76486: PPUSH
76487: LD_INT 1
76489: PPUSH
76490: CALL_OW 273
76494: ST_TO_ADDR
// if ValidHex ( x , y ) then
76495: LD_VAR 0 4
76499: PPUSH
76500: LD_VAR 0 5
76504: PPUSH
76505: CALL_OW 488
76509: IFFALSE 76530
// ComTurnXY ( unit , x , y ) ;
76511: LD_VAR 0 1
76515: PPUSH
76516: LD_VAR 0 4
76520: PPUSH
76521: LD_VAR 0 5
76525: PPUSH
76526: CALL_OW 118
// end ;
76530: LD_VAR 0 3
76534: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76535: LD_INT 0
76537: PPUSH
76538: PPUSH
// result := false ;
76539: LD_ADDR_VAR 0 3
76543: PUSH
76544: LD_INT 0
76546: ST_TO_ADDR
// if not units then
76547: LD_VAR 0 2
76551: NOT
76552: IFFALSE 76556
// exit ;
76554: GO 76601
// for i in units do
76556: LD_ADDR_VAR 0 4
76560: PUSH
76561: LD_VAR 0 2
76565: PUSH
76566: FOR_IN
76567: IFFALSE 76599
// if See ( side , i ) then
76569: LD_VAR 0 1
76573: PPUSH
76574: LD_VAR 0 4
76578: PPUSH
76579: CALL_OW 292
76583: IFFALSE 76597
// begin result := true ;
76585: LD_ADDR_VAR 0 3
76589: PUSH
76590: LD_INT 1
76592: ST_TO_ADDR
// exit ;
76593: POP
76594: POP
76595: GO 76601
// end ;
76597: GO 76566
76599: POP
76600: POP
// end ;
76601: LD_VAR 0 3
76605: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76606: LD_INT 0
76608: PPUSH
76609: PPUSH
76610: PPUSH
76611: PPUSH
// if not unit or not points then
76612: LD_VAR 0 1
76616: NOT
76617: PUSH
76618: LD_VAR 0 2
76622: NOT
76623: OR
76624: IFFALSE 76628
// exit ;
76626: GO 76718
// dist := 99999 ;
76628: LD_ADDR_VAR 0 5
76632: PUSH
76633: LD_INT 99999
76635: ST_TO_ADDR
// for i in points do
76636: LD_ADDR_VAR 0 4
76640: PUSH
76641: LD_VAR 0 2
76645: PUSH
76646: FOR_IN
76647: IFFALSE 76716
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76649: LD_ADDR_VAR 0 6
76653: PUSH
76654: LD_VAR 0 1
76658: PPUSH
76659: LD_VAR 0 4
76663: PUSH
76664: LD_INT 1
76666: ARRAY
76667: PPUSH
76668: LD_VAR 0 4
76672: PUSH
76673: LD_INT 2
76675: ARRAY
76676: PPUSH
76677: CALL_OW 297
76681: ST_TO_ADDR
// if tmpDist < dist then
76682: LD_VAR 0 6
76686: PUSH
76687: LD_VAR 0 5
76691: LESS
76692: IFFALSE 76714
// begin result := i ;
76694: LD_ADDR_VAR 0 3
76698: PUSH
76699: LD_VAR 0 4
76703: ST_TO_ADDR
// dist := tmpDist ;
76704: LD_ADDR_VAR 0 5
76708: PUSH
76709: LD_VAR 0 6
76713: ST_TO_ADDR
// end ; end ;
76714: GO 76646
76716: POP
76717: POP
// end ;
76718: LD_VAR 0 3
76722: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76723: LD_INT 0
76725: PPUSH
// uc_side := side ;
76726: LD_ADDR_OWVAR 20
76730: PUSH
76731: LD_VAR 0 1
76735: ST_TO_ADDR
// uc_nation := 3 ;
76736: LD_ADDR_OWVAR 21
76740: PUSH
76741: LD_INT 3
76743: ST_TO_ADDR
// vc_chassis := 25 ;
76744: LD_ADDR_OWVAR 37
76748: PUSH
76749: LD_INT 25
76751: ST_TO_ADDR
// vc_engine := engine_siberite ;
76752: LD_ADDR_OWVAR 39
76756: PUSH
76757: LD_INT 3
76759: ST_TO_ADDR
// vc_control := control_computer ;
76760: LD_ADDR_OWVAR 38
76764: PUSH
76765: LD_INT 3
76767: ST_TO_ADDR
// vc_weapon := 59 ;
76768: LD_ADDR_OWVAR 40
76772: PUSH
76773: LD_INT 59
76775: ST_TO_ADDR
// result := CreateVehicle ;
76776: LD_ADDR_VAR 0 5
76780: PUSH
76781: CALL_OW 45
76785: ST_TO_ADDR
// SetDir ( result , d ) ;
76786: LD_VAR 0 5
76790: PPUSH
76791: LD_VAR 0 4
76795: PPUSH
76796: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76800: LD_VAR 0 5
76804: PPUSH
76805: LD_VAR 0 2
76809: PPUSH
76810: LD_VAR 0 3
76814: PPUSH
76815: LD_INT 0
76817: PPUSH
76818: CALL_OW 48
// end ;
76822: LD_VAR 0 5
76826: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76827: LD_INT 0
76829: PPUSH
76830: PPUSH
76831: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76832: LD_ADDR_VAR 0 2
76836: PUSH
76837: LD_INT 0
76839: PUSH
76840: LD_INT 0
76842: PUSH
76843: LD_INT 0
76845: PUSH
76846: LD_INT 0
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76855: LD_VAR 0 1
76859: NOT
76860: PUSH
76861: LD_VAR 0 1
76865: PPUSH
76866: CALL_OW 264
76870: PUSH
76871: LD_INT 12
76873: PUSH
76874: LD_INT 51
76876: PUSH
76877: LD_INT 32
76879: PUSH
76880: LD_INT 89
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: LIST
76887: LIST
76888: IN
76889: NOT
76890: OR
76891: IFFALSE 76895
// exit ;
76893: GO 76993
// for i := 1 to 3 do
76895: LD_ADDR_VAR 0 3
76899: PUSH
76900: DOUBLE
76901: LD_INT 1
76903: DEC
76904: ST_TO_ADDR
76905: LD_INT 3
76907: PUSH
76908: FOR_TO
76909: IFFALSE 76991
// begin tmp := GetCargo ( cargo , i ) ;
76911: LD_ADDR_VAR 0 4
76915: PUSH
76916: LD_VAR 0 1
76920: PPUSH
76921: LD_VAR 0 3
76925: PPUSH
76926: CALL_OW 289
76930: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76931: LD_ADDR_VAR 0 2
76935: PUSH
76936: LD_VAR 0 2
76940: PPUSH
76941: LD_VAR 0 3
76945: PPUSH
76946: LD_VAR 0 4
76950: PPUSH
76951: CALL_OW 1
76955: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76956: LD_ADDR_VAR 0 2
76960: PUSH
76961: LD_VAR 0 2
76965: PPUSH
76966: LD_INT 4
76968: PPUSH
76969: LD_VAR 0 2
76973: PUSH
76974: LD_INT 4
76976: ARRAY
76977: PUSH
76978: LD_VAR 0 4
76982: PLUS
76983: PPUSH
76984: CALL_OW 1
76988: ST_TO_ADDR
// end ;
76989: GO 76908
76991: POP
76992: POP
// end ;
76993: LD_VAR 0 2
76997: RET
// export function Length ( array ) ; begin
76998: LD_INT 0
77000: PPUSH
// result := array + 0 ;
77001: LD_ADDR_VAR 0 2
77005: PUSH
77006: LD_VAR 0 1
77010: PUSH
77011: LD_INT 0
77013: PLUS
77014: ST_TO_ADDR
// end ;
77015: LD_VAR 0 2
77019: RET
// export function PrepareArray ( array ) ; begin
77020: LD_INT 0
77022: PPUSH
// result := array diff 0 ;
77023: LD_ADDR_VAR 0 2
77027: PUSH
77028: LD_VAR 0 1
77032: PUSH
77033: LD_INT 0
77035: DIFF
77036: ST_TO_ADDR
// if not result [ 1 ] then
77037: LD_VAR 0 2
77041: PUSH
77042: LD_INT 1
77044: ARRAY
77045: NOT
77046: IFFALSE 77066
// result := Delete ( result , 1 ) ;
77048: LD_ADDR_VAR 0 2
77052: PUSH
77053: LD_VAR 0 2
77057: PPUSH
77058: LD_INT 1
77060: PPUSH
77061: CALL_OW 3
77065: ST_TO_ADDR
// end ;
77066: LD_VAR 0 2
77070: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77071: LD_INT 0
77073: PPUSH
77074: PPUSH
77075: PPUSH
77076: PPUSH
// sibRocketRange := 25 ;
77077: LD_ADDR_VAR 0 6
77081: PUSH
77082: LD_INT 25
77084: ST_TO_ADDR
// result := false ;
77085: LD_ADDR_VAR 0 4
77089: PUSH
77090: LD_INT 0
77092: ST_TO_ADDR
// for i := 0 to 5 do
77093: LD_ADDR_VAR 0 5
77097: PUSH
77098: DOUBLE
77099: LD_INT 0
77101: DEC
77102: ST_TO_ADDR
77103: LD_INT 5
77105: PUSH
77106: FOR_TO
77107: IFFALSE 77174
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77109: LD_VAR 0 1
77113: PPUSH
77114: LD_VAR 0 5
77118: PPUSH
77119: LD_VAR 0 6
77123: PPUSH
77124: CALL_OW 272
77128: PPUSH
77129: LD_VAR 0 2
77133: PPUSH
77134: LD_VAR 0 5
77138: PPUSH
77139: LD_VAR 0 6
77143: PPUSH
77144: CALL_OW 273
77148: PPUSH
77149: LD_VAR 0 3
77153: PPUSH
77154: CALL_OW 309
77158: IFFALSE 77172
// begin result := true ;
77160: LD_ADDR_VAR 0 4
77164: PUSH
77165: LD_INT 1
77167: ST_TO_ADDR
// exit ;
77168: POP
77169: POP
77170: GO 77176
// end ;
77172: GO 77106
77174: POP
77175: POP
// end ;
77176: LD_VAR 0 4
77180: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77181: LD_INT 0
77183: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77184: LD_VAR 0 1
77188: PPUSH
77189: LD_VAR 0 2
77193: PPUSH
77194: LD_INT 0
77196: PPUSH
77197: LD_INT 0
77199: PPUSH
77200: LD_INT 1
77202: PPUSH
77203: LD_INT 0
77205: PPUSH
77206: CALL_OW 587
// end ;
77210: LD_VAR 0 3
77214: RET
// export function CenterOnNow ( unit ) ; begin
77215: LD_INT 0
77217: PPUSH
// result := IsInUnit ( unit ) ;
77218: LD_ADDR_VAR 0 2
77222: PUSH
77223: LD_VAR 0 1
77227: PPUSH
77228: CALL_OW 310
77232: ST_TO_ADDR
// if not result then
77233: LD_VAR 0 2
77237: NOT
77238: IFFALSE 77250
// result := unit ;
77240: LD_ADDR_VAR 0 2
77244: PUSH
77245: LD_VAR 0 1
77249: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77250: LD_VAR 0 1
77254: PPUSH
77255: CALL_OW 87
// end ;
77259: LD_VAR 0 2
77263: RET
// export function ComMoveHex ( unit , hex ) ; begin
77264: LD_INT 0
77266: PPUSH
// if not hex then
77267: LD_VAR 0 2
77271: NOT
77272: IFFALSE 77276
// exit ;
77274: GO 77329
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77276: LD_VAR 0 2
77280: PUSH
77281: LD_INT 1
77283: ARRAY
77284: PPUSH
77285: LD_VAR 0 2
77289: PUSH
77290: LD_INT 2
77292: ARRAY
77293: PPUSH
77294: CALL_OW 428
77298: IFFALSE 77302
// exit ;
77300: GO 77329
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77302: LD_VAR 0 1
77306: PPUSH
77307: LD_VAR 0 2
77311: PUSH
77312: LD_INT 1
77314: ARRAY
77315: PPUSH
77316: LD_VAR 0 2
77320: PUSH
77321: LD_INT 2
77323: ARRAY
77324: PPUSH
77325: CALL_OW 111
// end ;
77329: LD_VAR 0 3
77333: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77334: LD_INT 0
77336: PPUSH
77337: PPUSH
77338: PPUSH
// if not unit or not enemy then
77339: LD_VAR 0 1
77343: NOT
77344: PUSH
77345: LD_VAR 0 2
77349: NOT
77350: OR
77351: IFFALSE 77355
// exit ;
77353: GO 77479
// x := GetX ( enemy ) ;
77355: LD_ADDR_VAR 0 4
77359: PUSH
77360: LD_VAR 0 2
77364: PPUSH
77365: CALL_OW 250
77369: ST_TO_ADDR
// y := GetY ( enemy ) ;
77370: LD_ADDR_VAR 0 5
77374: PUSH
77375: LD_VAR 0 2
77379: PPUSH
77380: CALL_OW 251
77384: ST_TO_ADDR
// if ValidHex ( x , y ) then
77385: LD_VAR 0 4
77389: PPUSH
77390: LD_VAR 0 5
77394: PPUSH
77395: CALL_OW 488
77399: IFFALSE 77479
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
77401: LD_VAR 0 2
77405: PPUSH
77406: CALL_OW 247
77410: PUSH
77411: LD_INT 3
77413: PUSH
77414: LD_INT 2
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: IN
77421: PUSH
77422: LD_VAR 0 1
77426: PPUSH
77427: CALL_OW 255
77431: PPUSH
77432: LD_VAR 0 2
77436: PPUSH
77437: CALL_OW 292
77441: AND
77442: IFFALSE 77460
// ComAttackUnit ( unit , enemy ) else
77444: LD_VAR 0 1
77448: PPUSH
77449: LD_VAR 0 2
77453: PPUSH
77454: CALL_OW 115
77458: GO 77479
// ComAgressiveMove ( unit , x , y ) ;
77460: LD_VAR 0 1
77464: PPUSH
77465: LD_VAR 0 4
77469: PPUSH
77470: LD_VAR 0 5
77474: PPUSH
77475: CALL_OW 114
// end ; end_of_file
77479: LD_VAR 0 3
77483: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77484: LD_VAR 0 1
77488: PUSH
77489: LD_INT 200
77491: DOUBLE
77492: GREATEREQUAL
77493: IFFALSE 77501
77495: LD_INT 299
77497: DOUBLE
77498: LESSEQUAL
77499: IFTRUE 77503
77501: GO 77535
77503: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77504: LD_VAR 0 1
77508: PPUSH
77509: LD_VAR 0 2
77513: PPUSH
77514: LD_VAR 0 3
77518: PPUSH
77519: LD_VAR 0 4
77523: PPUSH
77524: LD_VAR 0 5
77528: PPUSH
77529: CALL 15406 0 5
77533: GO 77612
77535: LD_INT 300
77537: DOUBLE
77538: GREATEREQUAL
77539: IFFALSE 77547
77541: LD_INT 399
77543: DOUBLE
77544: LESSEQUAL
77545: IFTRUE 77549
77547: GO 77611
77549: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77550: LD_VAR 0 1
77554: PPUSH
77555: LD_VAR 0 2
77559: PPUSH
77560: LD_VAR 0 3
77564: PPUSH
77565: LD_VAR 0 4
77569: PPUSH
77570: LD_VAR 0 5
77574: PPUSH
77575: LD_VAR 0 6
77579: PPUSH
77580: LD_VAR 0 7
77584: PPUSH
77585: LD_VAR 0 8
77589: PPUSH
77590: LD_VAR 0 9
77594: PPUSH
77595: LD_VAR 0 10
77599: PPUSH
77600: LD_VAR 0 11
77604: PPUSH
77605: CALL 32261 0 11
77609: GO 77612
77611: POP
// end ;
77612: PPOPN 11
77614: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77615: LD_VAR 0 1
77619: PPUSH
77620: LD_VAR 0 2
77624: PPUSH
77625: LD_VAR 0 3
77629: PPUSH
77630: LD_VAR 0 4
77634: PPUSH
77635: LD_VAR 0 5
77639: PPUSH
77640: CALL 15142 0 5
// end ; end_of_file
77644: PPOPN 5
77646: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77647: LD_VAR 0 1
77651: PPUSH
77652: LD_VAR 0 2
77656: PPUSH
77657: LD_VAR 0 3
77661: PPUSH
77662: LD_VAR 0 4
77666: PPUSH
77667: LD_VAR 0 5
77671: PPUSH
77672: LD_VAR 0 6
77676: PPUSH
77677: CALL 19913 0 6
// end ;
77681: PPOPN 6
77683: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77684: LD_INT 0
77686: PPUSH
// begin if not units then
77687: LD_VAR 0 1
77691: NOT
77692: IFFALSE 77696
// exit ;
77694: GO 77696
// end ;
77696: PPOPN 7
77698: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77699: CALL 19817 0 0
// end ;
77703: PPOPN 1
77705: END
