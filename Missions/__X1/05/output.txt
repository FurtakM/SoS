// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8248 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 34761 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 34761 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 34761 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 34761 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 34761 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34761 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 34761 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 34761 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 34761 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 34761 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 34761 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 34761 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 34761 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 34761 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 34761 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 34761 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 34761 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 34761 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 34761 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 34761 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 34761 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 34761 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 71146 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 71146 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 71146 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 71146 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 71146 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 71146 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 71146 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 71146 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ;
7765: PPOPN 1
7767: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7768: LD_EXP 38
7772: PPUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 54
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 95
7794: PUSH
7795: LD_INT 26
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 72
7815: IFFALSE 7910
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
// begin enable ;
7824: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_EXP 38
7834: PPUSH
7835: LD_INT 1
7837: PUSH
7838: LD_INT 3
7840: PUSH
7841: LD_INT 54
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 95
7856: PUSH
7857: LD_INT 26
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: ST_TO_ADDR
// for i in tmp do
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_VAR 0 2
7887: PUSH
7888: FOR_IN
7889: IFFALSE 7908
// ComMoveXY ( i , 206 , 110 ) ;
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 206
7898: PPUSH
7899: LD_INT 110
7901: PPUSH
7902: CALL_OW 111
7906: GO 7888
7908: POP
7909: POP
// end ; end_of_file
7910: PPOPN 2
7912: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL 14678 0 1
// if un = Heike then
7922: LD_VAR 0 1
7926: PUSH
7927: LD_EXP 21
7931: EQUAL
7932: IFFALSE 7941
// YouLost ( Heike ) ;
7934: LD_STRING Heike
7936: PPUSH
7937: CALL_OW 104
// if un in apeSoldGroup then
7941: LD_VAR 0 1
7945: PUSH
7946: LD_EXP 42
7950: IN
7951: IFFALSE 7969
// apeSoldGroup := apeSoldGroup diff un ;
7953: LD_ADDR_EXP 42
7957: PUSH
7958: LD_EXP 42
7962: PUSH
7963: LD_VAR 0 1
7967: DIFF
7968: ST_TO_ADDR
// if un in apeEngGroup then
7969: LD_VAR 0 1
7973: PUSH
7974: LD_EXP 43
7978: IN
7979: IFFALSE 7997
// apeEngGroup := apeEngGroup diff un ;
7981: LD_ADDR_EXP 43
7985: PUSH
7986: LD_EXP 43
7990: PUSH
7991: LD_VAR 0 1
7995: DIFF
7996: ST_TO_ADDR
// if un in oilBaseGuard then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 38
8006: IN
8007: IFFALSE 8025
// oilBaseGuard := oilBaseGuard diff un ;
8009: LD_ADDR_EXP 38
8013: PUSH
8014: LD_EXP 38
8018: PUSH
8019: LD_VAR 0 1
8023: DIFF
8024: ST_TO_ADDR
// if un in ruNorthGroup then
8025: LD_VAR 0 1
8029: PUSH
8030: LD_EXP 39
8034: IN
8035: IFFALSE 8053
// ruNorthGroup := ruNorthGroup diff un ;
8037: LD_ADDR_EXP 39
8041: PUSH
8042: LD_EXP 39
8046: PUSH
8047: LD_VAR 0 1
8051: DIFF
8052: ST_TO_ADDR
// if un in ruSouthGroup then
8053: LD_VAR 0 1
8057: PUSH
8058: LD_EXP 40
8062: IN
8063: IFFALSE 8081
// ruSouthGroup := ruSouthGroup diff un ;
8065: LD_ADDR_EXP 40
8069: PUSH
8070: LD_EXP 40
8074: PUSH
8075: LD_VAR 0 1
8079: DIFF
8080: ST_TO_ADDR
// if un in ruConvoySquad then
8081: LD_VAR 0 1
8085: PUSH
8086: LD_EXP 41
8090: IN
8091: IFFALSE 8109
// ruConvoySquad := ruConvoySquad diff un ;
8093: LD_ADDR_EXP 41
8097: PUSH
8098: LD_EXP 41
8102: PUSH
8103: LD_VAR 0 1
8107: DIFF
8108: ST_TO_ADDR
// end ;
8109: PPOPN 1
8111: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_VAR 0 2
8121: PPUSH
8122: CALL 14798 0 2
// if GetWeapon ( veh ) = ar_radar then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 264
8135: PUSH
8136: LD_INT 30
8138: EQUAL
8139: IFFALSE 8149
// radarConstructed := true ;
8141: LD_ADDR_EXP 13
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 264
8158: PUSH
8159: LD_INT 26
8161: EQUAL
8162: IFFALSE 8172
// flamethrowerBuilt := true ;
8164: LD_ADDR_EXP 20
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// end ;
8172: PPOPN 2
8174: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8175: LD_ADDR_EXP 18
8179: PUSH
8180: LD_EXP 18
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: ST_TO_ADDR
// if oldId in ruConvoySquad then
8189: LD_VAR 0 2
8193: PUSH
8194: LD_EXP 41
8198: IN
8199: IFFALSE 8217
// ruConvoySquad := ruConvoySquad diff oldId ;
8201: LD_ADDR_EXP 41
8205: PUSH
8206: LD_EXP 41
8210: PUSH
8211: LD_VAR 0 2
8215: DIFF
8216: ST_TO_ADDR
// if newId in ruConvoySquad then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 41
8226: IN
8227: IFFALSE 8245
// ruConvoySquad := ruConvoySquad diff newId ;
8229: LD_ADDR_EXP 41
8233: PUSH
8234: LD_EXP 41
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// end ; end_of_file
8245: PPOPN 4
8247: END
// export function Action ; var i , p , un , veh , tmp ; begin
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
// InGameOn ;
8256: CALL_OW 8
// music_nat := 2 ;
8260: LD_ADDR_OWVAR 71
8264: PUSH
8265: LD_INT 2
8267: ST_TO_ADDR
// music_class := music_recon ;
8268: LD_ADDR_OWVAR 72
8272: PUSH
8273: LD_INT 3
8275: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8276: LD_INT 7
8278: PPUSH
8279: LD_INT 6
8281: PPUSH
8282: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8286: LD_INT 7
8288: PPUSH
8289: LD_INT 6
8291: PPUSH
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 30
8297: NEG
8298: PPUSH
8299: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8303: LD_ADDR_VAR 0 6
8307: PUSH
8308: LD_EXP 21
8312: PUSH
8313: LD_EXP 22
8317: PUSH
8318: LD_EXP 23
8322: PUSH
8323: LD_EXP 24
8327: PUSH
8328: LD_EXP 25
8332: PUSH
8333: LD_EXP 26
8337: PUSH
8338: LD_EXP 28
8342: PUSH
8343: LD_EXP 33
8347: PUSH
8348: LD_EXP 27
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: ST_TO_ADDR
// tmp := tmp diff 0 ;
8364: LD_ADDR_VAR 0 6
8368: PUSH
8369: LD_VAR 0 6
8373: PUSH
8374: LD_INT 0
8376: DIFF
8377: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8378: LD_ADDR_VAR 0 6
8382: PUSH
8383: LD_VAR 0 6
8387: PPUSH
8388: LD_INT 3
8390: PPUSH
8391: CALL 70745 0 2
8395: ST_TO_ADDR
// for i in heikeVehicles do
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_EXP 35
8405: PUSH
8406: FOR_IN
8407: IFFALSE 8606
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8409: LD_INT 5
8411: PPUSH
8412: LD_VAR 0 2
8416: PUSH
8417: LD_INT 5
8419: ARRAY
8420: PPUSH
8421: LD_VAR 0 2
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 2
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PPUSH
8439: LD_VAR 0 2
8443: PUSH
8444: LD_INT 3
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 2
8452: PUSH
8453: LD_INT 4
8455: ARRAY
8456: PPUSH
8457: LD_INT 34
8459: PPUSH
8460: CALL 439 0 7
// veh := CreateVehicle ;
8464: LD_ADDR_VAR 0 5
8468: PUSH
8469: CALL_OW 45
8473: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8474: LD_VAR 0 2
8478: PUSH
8479: LD_INT 4
8481: ARRAY
8482: PUSH
8483: LD_INT 51
8485: PUSH
8486: LD_INT 32
8488: PUSH
8489: LD_INT 12
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: IN
8497: IFFALSE 8577
// begin if i [ 7 ] [ 1 ] then
8499: LD_VAR 0 2
8503: PUSH
8504: LD_INT 7
8506: ARRAY
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: IFFALSE 8538
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8513: LD_VAR 0 5
8517: PPUSH
8518: LD_INT 1
8520: PPUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 7
8528: ARRAY
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: PPUSH
8534: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8538: LD_VAR 0 2
8542: PUSH
8543: LD_INT 7
8545: ARRAY
8546: PUSH
8547: LD_INT 2
8549: ARRAY
8550: IFFALSE 8577
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_INT 2
8559: PPUSH
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 7
8567: ARRAY
8568: PUSH
8569: LD_INT 2
8571: ARRAY
8572: PPUSH
8573: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8577: LD_VAR 0 5
8581: PPUSH
8582: LD_INT 2
8584: PPUSH
8585: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8589: LD_VAR 0 5
8593: PPUSH
8594: LD_INT 4
8596: PPUSH
8597: LD_INT 0
8599: PPUSH
8600: CALL_OW 49
// end ;
8604: GO 8406
8606: POP
8607: POP
// if tmp then
8608: LD_VAR 0 6
8612: IFFALSE 8722
// begin p := 0 ;
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// for i in tmp do
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_VAR 0 6
8631: PUSH
8632: FOR_IN
8633: IFFALSE 8720
// begin p := p + 1 ;
8635: LD_ADDR_VAR 0 3
8639: PUSH
8640: LD_VAR 0 3
8644: PUSH
8645: LD_INT 1
8647: PLUS
8648: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8664: LD_VAR 0 2
8668: PPUSH
8669: LD_INT 26
8671: PPUSH
8672: LD_INT 9
8674: PPUSH
8675: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8679: LD_VAR 0 3
8683: PUSH
8684: LD_EXP 35
8688: GREATEREQUAL
8689: PUSH
8690: LD_VAR 0 2
8694: PPUSH
8695: CALL_OW 257
8699: PUSH
8700: LD_INT 3
8702: EQUAL
8703: AND
8704: IFFALSE 8718
// SetClass ( i , 1 ) ;
8706: LD_VAR 0 2
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: CALL_OW 336
// end ;
8718: GO 8632
8720: POP
8721: POP
// end ; if heikeSecondSquad then
8722: LD_EXP 34
8726: IFFALSE 8828
// for i in heikeSecondSquad do
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_EXP 34
8737: PUSH
8738: FOR_IN
8739: IFFALSE 8826
// begin p := p + 1 ;
8741: LD_ADDR_VAR 0 3
8745: PUSH
8746: LD_VAR 0 3
8750: PUSH
8751: LD_INT 1
8753: PLUS
8754: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8755: LD_VAR 0 2
8759: PPUSH
8760: LD_INT 6
8762: PPUSH
8763: LD_INT 0
8765: PPUSH
8766: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8770: LD_VAR 0 2
8774: PPUSH
8775: LD_INT 26
8777: PPUSH
8778: LD_INT 9
8780: PPUSH
8781: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8785: LD_VAR 0 3
8789: PUSH
8790: LD_EXP 35
8794: GREATEREQUAL
8795: PUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 257
8805: PUSH
8806: LD_INT 3
8808: EQUAL
8809: AND
8810: IFFALSE 8824
// SetClass ( i , 1 ) ;
8812: LD_VAR 0 2
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: CALL_OW 336
// end ;
8824: GO 8738
8826: POP
8827: POP
// if heikeApes then
8828: LD_EXP 36
8832: IFFALSE 8875
// for i in heikeApes do
8834: LD_ADDR_VAR 0 2
8838: PUSH
8839: LD_EXP 36
8843: PUSH
8844: FOR_IN
8845: IFFALSE 8873
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_INT 7
8854: PPUSH
8855: LD_INT 0
8857: PPUSH
8858: CALL_OW 49
// ComHold ( i ) ;
8862: LD_VAR 0 2
8866: PPUSH
8867: CALL_OW 140
// end ;
8871: GO 8844
8873: POP
8874: POP
// if Kurt then
8875: LD_EXP 32
8879: IFFALSE 8911
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8881: LD_EXP 32
8885: PPUSH
8886: LD_INT 8
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8896: LD_EXP 32
8900: PPUSH
8901: LD_INT 42
8903: PPUSH
8904: LD_INT 32
8906: PPUSH
8907: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8911: LD_INT 70
8913: PPUSH
8914: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8918: LD_EXP 21
8922: PPUSH
8923: LD_STRING DH-Start-1
8925: PPUSH
8926: CALL_OW 88
// if Givi then
8930: LD_EXP 22
8934: IFFALSE 9197
// begin Say ( Givi , DG-Start-2-5 ) ;
8936: LD_EXP 22
8940: PPUSH
8941: LD_STRING DG-Start-2-5
8943: PPUSH
8944: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8948: LD_EXP 21
8952: PPUSH
8953: LD_STRING DH-Start-3
8955: PPUSH
8956: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8960: LD_EXP 21
8964: PPUSH
8965: LD_STRING DH-Start-4
8967: PPUSH
8968: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8972: LD_EXP 22
8976: PPUSH
8977: LD_STRING DG-Start-5
8979: PPUSH
8980: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8984: LD_EXP 21
8988: PPUSH
8989: LD_STRING DH-Start-6
8991: PPUSH
8992: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8996: LD_EXP 22
9000: PPUSH
9001: LD_STRING DG-Start-7
9003: PPUSH
9004: CALL_OW 88
// if Mike then
9008: LD_EXP 23
9012: IFFALSE 9185
// begin Say ( Mike , DM-Start-8 ) ;
9014: LD_EXP 23
9018: PPUSH
9019: LD_STRING DM-Start-8
9021: PPUSH
9022: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9026: LD_EXP 23
9030: PPUSH
9031: LD_STRING DM-Start-9
9033: PPUSH
9034: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9038: LD_EXP 22
9042: PPUSH
9043: LD_STRING DG-Start-10
9045: PPUSH
9046: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9050: LD_EXP 22
9054: PPUSH
9055: LD_STRING DG-Start-11
9057: PPUSH
9058: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9062: LD_EXP 21
9066: PPUSH
9067: LD_STRING DH-Start-12
9069: PPUSH
9070: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9074: LD_EXP 22
9078: PPUSH
9079: LD_STRING DG-Start-13
9081: PPUSH
9082: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9086: LD_EXP 22
9090: PPUSH
9091: LD_STRING DG-Start-14
9093: PPUSH
9094: CALL_OW 88
// if Kaia then
9098: LD_EXP 26
9102: IFFALSE 9185
// begin Say ( Kaia , DK-Start-15 ) ;
9104: LD_EXP 26
9108: PPUSH
9109: LD_STRING DK-Start-15
9111: PPUSH
9112: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9116: LD_EXP 26
9120: PPUSH
9121: LD_STRING DK-Start-16
9123: PPUSH
9124: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9128: LD_EXP 26
9132: PPUSH
9133: LD_STRING DK-Start-17
9135: PPUSH
9136: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9140: LD_INT 10
9142: PPUSH
9143: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9147: LD_EXP 22
9151: PPUSH
9152: LD_EXP 26
9156: PPUSH
9157: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9161: LD_EXP 22
9165: PPUSH
9166: LD_STRING DG-Start-18
9168: PPUSH
9169: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9173: LD_EXP 26
9177: PPUSH
9178: LD_STRING DK-Start-19
9180: PPUSH
9181: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9185: LD_EXP 21
9189: PPUSH
9190: LD_STRING DH-Start-20
9192: PPUSH
9193: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9197: LD_INT 70
9199: PPUSH
9200: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9204: LD_EXP 29
9208: PPUSH
9209: LD_STRING DShar-Start-21
9211: PPUSH
9212: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9216: LD_EXP 21
9220: PPUSH
9221: LD_STRING DH-Start-22
9223: PPUSH
9224: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9228: LD_EXP 29
9232: PPUSH
9233: LD_STRING DShar-Start-23
9235: PPUSH
9236: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9240: LD_EXP 29
9244: PPUSH
9245: LD_STRING DShar-Start-24
9247: PPUSH
9248: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9252: LD_EXP 29
9256: PPUSH
9257: LD_STRING DShar-Start-25
9259: PPUSH
9260: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9264: LD_EXP 29
9268: PPUSH
9269: LD_STRING DShar-Start-26
9271: PPUSH
9272: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9276: LD_EXP 21
9280: PPUSH
9281: LD_STRING DH-Start-27
9283: PPUSH
9284: CALL_OW 88
// if Kaia then
9288: LD_EXP 26
9292: IFFALSE 9334
// begin ComTurnUnit ( Heike , Kaia ) ;
9294: LD_EXP 21
9298: PPUSH
9299: LD_EXP 26
9303: PPUSH
9304: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9308: LD_EXP 26
9312: PPUSH
9313: LD_STRING DK-Start-28
9315: PPUSH
9316: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9320: LD_EXP 21
9324: PPUSH
9325: LD_STRING DH-Start-29
9327: PPUSH
9328: CALL_OW 88
// end else
9332: GO 9346
// Say ( Heike , DH-Start-a-28 ) ;
9334: LD_EXP 21
9338: PPUSH
9339: LD_STRING DH-Start-a-28
9341: PPUSH
9342: CALL_OW 88
// if Givi then
9346: LD_EXP 22
9350: IFFALSE 9585
// begin ComTurnUnit ( Heike , Givi ) ;
9352: LD_EXP 21
9356: PPUSH
9357: LD_EXP 22
9361: PPUSH
9362: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9366: LD_EXP 22
9370: PPUSH
9371: LD_EXP 21
9375: PPUSH
9376: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9380: LD_EXP 21
9384: PPUSH
9385: LD_STRING DH-Start-30
9387: PPUSH
9388: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9392: LD_EXP 21
9396: PPUSH
9397: LD_STRING DH-Start-31
9399: PPUSH
9400: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9404: LD_EXP 22
9408: PPUSH
9409: LD_STRING DG-Start-32
9411: PPUSH
9412: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9416: LD_EXP 21
9420: PPUSH
9421: LD_STRING DH-Start-33
9423: PPUSH
9424: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9428: LD_EXP 22
9432: PPUSH
9433: LD_STRING DG-Start-34
9435: PPUSH
9436: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9440: LD_EXP 22
9444: PPUSH
9445: LD_STRING DG-Start-35
9447: PPUSH
9448: CALL_OW 88
// if Kurt and not dialogue_skipped then
9452: LD_EXP 32
9456: PUSH
9457: LD_OWVAR 59
9461: NOT
9462: AND
9463: IFFALSE 9494
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9465: LD_EXP 32
9469: PPUSH
9470: LD_INT 28
9472: PPUSH
9473: LD_INT 13
9475: PPUSH
9476: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9480: LD_EXP 32
9484: PPUSH
9485: LD_EXP 21
9489: PPUSH
9490: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9494: LD_EXP 22
9498: PPUSH
9499: LD_STRING DG-Start-36
9501: PPUSH
9502: CALL_OW 88
// if Kurt then
9506: LD_EXP 32
9510: IFFALSE 9583
// begin if not Givi then
9512: LD_EXP 22
9516: NOT
9517: IFFALSE 9533
// Say ( Kurt , DKs-Start-37-a ) else
9519: LD_EXP 32
9523: PPUSH
9524: LD_STRING DKs-Start-37-a
9526: PPUSH
9527: CALL_OW 88
9531: GO 9545
// Say ( Kurt , DKs-Start-37 ) ;
9533: LD_EXP 32
9537: PPUSH
9538: LD_STRING DKs-Start-37
9540: PPUSH
9541: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9545: LD_EXP 32
9549: PPUSH
9550: LD_STRING DKs-Start-38
9552: PPUSH
9553: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9557: LD_EXP 21
9561: PPUSH
9562: LD_EXP 32
9566: PPUSH
9567: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9571: LD_EXP 21
9575: PPUSH
9576: LD_STRING DH-Start-39
9578: PPUSH
9579: CALL_OW 88
// end ; end else
9583: GO 9614
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9585: LD_EXP 34
9589: PPUSH
9590: LD_STRING DArm-Start-a-37
9592: PPUSH
9593: LD_STRING DArf-Start-a-37
9595: PPUSH
9596: CALL 1198 0 3
9600: IFFALSE 9614
// Say ( Heike , DH-Start-39 ) ;
9602: LD_EXP 21
9606: PPUSH
9607: LD_STRING DH-Start-39
9609: PPUSH
9610: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9614: LD_INT 44
9616: PPUSH
9617: LD_INT 25
9619: PPUSH
9620: CALL_OW 428
9624: IFFALSE 9641
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9626: LD_INT 44
9628: PPUSH
9629: LD_INT 25
9631: PPUSH
9632: CALL_OW 428
9636: PPUSH
9637: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9641: LD_EXP 30
9645: PPUSH
9646: LD_INT 5
9648: PPUSH
9649: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9653: LD_EXP 30
9657: PPUSH
9658: LD_INT 44
9660: PPUSH
9661: LD_INT 25
9663: PPUSH
9664: LD_INT 0
9666: PPUSH
9667: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9671: LD_EXP 30
9675: PPUSH
9676: LD_INT 29
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9686: LD_INT 35
9688: PPUSH
9689: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9693: LD_OWVAR 59
9697: PUSH
9698: LD_EXP 21
9702: PPUSH
9703: LD_EXP 30
9707: PPUSH
9708: CALL_OW 296
9712: PUSH
9713: LD_INT 8
9715: LESS
9716: OR
9717: PUSH
9718: LD_EXP 30
9722: PPUSH
9723: LD_INT 26
9725: PPUSH
9726: LD_INT 9
9728: PPUSH
9729: CALL_OW 297
9733: PUSH
9734: LD_INT 6
9736: LESS
9737: OR
9738: IFFALSE 9686
// Say ( Olaf , DO-Scout-1 ) ;
9740: LD_EXP 30
9744: PPUSH
9745: LD_STRING DO-Scout-1
9747: PPUSH
9748: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9752: LD_EXP 30
9756: PPUSH
9757: LD_EXP 21
9761: PPUSH
9762: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9766: LD_ADDR_VAR 0 2
9770: PUSH
9771: LD_VAR 0 6
9775: PUSH
9776: LD_EXP 34
9780: UNION
9781: PUSH
9782: FOR_IN
9783: IFFALSE 9801
// ComTurnUnit ( i , Olaf ) ;
9785: LD_VAR 0 2
9789: PPUSH
9790: LD_EXP 30
9794: PPUSH
9795: CALL_OW 119
9799: GO 9782
9801: POP
9802: POP
// wait ( 0 0$0.3 ) ;
9803: LD_INT 10
9805: PPUSH
9806: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9810: LD_EXP 21
9814: PPUSH
9815: LD_EXP 30
9819: PPUSH
9820: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9824: LD_EXP 21
9828: PPUSH
9829: LD_EXP 30
9833: PPUSH
9834: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9838: LD_EXP 21
9842: PPUSH
9843: LD_STRING DH-Scout-2
9845: PPUSH
9846: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9850: LD_EXP 30
9854: PPUSH
9855: LD_STRING DO-Scout-3
9857: PPUSH
9858: CALL_OW 88
// if Mike and Givi then
9862: LD_EXP 23
9866: PUSH
9867: LD_EXP 22
9871: AND
9872: IFFALSE 9888
// Say ( Olaf , DO-Scout-4 ) else
9874: LD_EXP 30
9878: PPUSH
9879: LD_STRING DO-Scout-4
9881: PPUSH
9882: CALL_OW 88
9886: GO 9988
// begin if Mike then
9888: LD_EXP 23
9892: IFFALSE 9920
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9894: LD_EXP 30
9898: PPUSH
9899: LD_STRING DO-Scout-a-4
9901: PPUSH
9902: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9906: LD_EXP 21
9910: PPUSH
9911: LD_STRING DH-Scout-a-5
9913: PPUSH
9914: CALL_OW 88
// end else
9918: GO 9988
// if Givi then
9920: LD_EXP 22
9924: IFFALSE 9952
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9926: LD_EXP 30
9930: PPUSH
9931: LD_STRING DO-Scout-b-4
9933: PPUSH
9934: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9938: LD_EXP 21
9942: PPUSH
9943: LD_STRING DH-Scout-b-5
9945: PPUSH
9946: CALL_OW 88
// end else
9950: GO 9988
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9952: LD_EXP 30
9956: PPUSH
9957: LD_STRING DO-Scout-f-4
9959: PPUSH
9960: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9964: LD_EXP 21
9968: PPUSH
9969: LD_STRING DH-Scout-f-5
9971: PPUSH
9972: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9976: LD_EXP 30
9980: PPUSH
9981: LD_STRING DO-Scout-f-6
9983: PPUSH
9984: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9988: LD_EXP 21
9992: PPUSH
9993: LD_STRING DH-Scout-5
9995: PPUSH
9996: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10000: LD_EXP 30
10004: PPUSH
10005: LD_STRING DO-Scout-6
10007: PPUSH
10008: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10012: LD_EXP 30
10016: PPUSH
10017: LD_STRING DO-Scout-7
10019: PPUSH
10020: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10024: LD_EXP 21
10028: PPUSH
10029: LD_STRING DH-Scout-8
10031: PPUSH
10032: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10036: LD_EXP 21
10040: PPUSH
10041: LD_STRING DH-Scout-9
10043: PPUSH
10044: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10048: LD_EXP 30
10052: PPUSH
10053: LD_STRING DO-Scout-10
10055: PPUSH
10056: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10060: LD_EXP 30
10064: PPUSH
10065: LD_STRING DO-Scout-12
10067: PPUSH
10068: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10072: LD_EXP 30
10076: PPUSH
10077: LD_STRING DO-Scout-13
10079: PPUSH
10080: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10084: LD_EXP 30
10088: PPUSH
10089: LD_STRING DO-Scout-14
10091: PPUSH
10092: CALL_OW 88
// if Givi then
10096: LD_EXP 22
10100: IFFALSE 10126
// begin Say ( Givi , DG-Scout-15 ) ;
10102: LD_EXP 22
10106: PPUSH
10107: LD_STRING DG-Scout-15
10109: PPUSH
10110: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10114: LD_EXP 26
10118: PPUSH
10119: LD_STRING DK-Scout-16
10121: PPUSH
10122: CALL_OW 88
// end ; if not dialogue_skipped then
10126: LD_OWVAR 59
10130: NOT
10131: IFFALSE 10252
// begin async ;
10133: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10134: LD_EXP 30
10138: PPUSH
10139: LD_STRING DO-Scout-17
10141: PPUSH
10142: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10146: LD_INT 55
10148: PPUSH
10149: LD_INT 77
10151: PPUSH
10152: LD_INT 2
10154: PPUSH
10155: LD_INT 6
10157: NEG
10158: PPUSH
10159: CALL 1147 0 4
// wait ( 10 ) ;
10163: LD_INT 10
10165: PPUSH
10166: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10170: LD_INT 55
10172: PPUSH
10173: LD_INT 77
10175: PPUSH
10176: CALL_OW 84
// wait ( 0 0$10 ) ;
10180: LD_INT 350
10182: PPUSH
10183: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DO-Scout-18
10194: PPUSH
10195: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10199: LD_INT 204
10201: PPUSH
10202: LD_INT 107
10204: PPUSH
10205: LD_INT 2
10207: PPUSH
10208: LD_INT 12
10210: NEG
10211: PPUSH
10212: CALL 1147 0 4
// wait ( 10 ) ;
10216: LD_INT 10
10218: PPUSH
10219: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10223: LD_INT 204
10225: PPUSH
10226: LD_INT 107
10228: PPUSH
10229: CALL_OW 84
// wait ( 0 0$10 ) ;
10233: LD_INT 350
10235: PPUSH
10236: CALL_OW 67
// sync ;
10240: SYNC
// CenterNowOnUnits ( Heike ) ;
10241: LD_EXP 21
10245: PPUSH
10246: CALL_OW 87
// end else
10250: GO 10286
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10252: LD_INT 55
10254: PPUSH
10255: LD_INT 77
10257: PPUSH
10258: LD_INT 2
10260: PPUSH
10261: LD_INT 6
10263: NEG
10264: PPUSH
10265: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10269: LD_INT 204
10271: PPUSH
10272: LD_INT 107
10274: PPUSH
10275: LD_INT 2
10277: PPUSH
10278: LD_INT 12
10280: NEG
10281: PPUSH
10282: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10286: LD_EXP 30
10290: PPUSH
10291: LD_STRING DO-Scout-19
10293: PPUSH
10294: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10298: LD_EXP 30
10302: PPUSH
10303: LD_STRING DO-Scout-20
10305: PPUSH
10306: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10310: LD_EXP 21
10314: PPUSH
10315: LD_STRING DH-Scout-21
10317: PPUSH
10318: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10322: LD_EXP 21
10326: PPUSH
10327: LD_STRING DH-Scout-22
10329: PPUSH
10330: CALL_OW 88
// InGameOff ;
10334: CALL_OW 9
// if heikeSecondSquad then
10338: LD_EXP 34
10342: IFFALSE 10356
// ForceSleep ( heikeSecondSquad , false ) ;
10344: LD_EXP 34
10348: PPUSH
10349: LD_INT 0
10351: PPUSH
10352: CALL_OW 585
// if Givi then
10356: LD_EXP 22
10360: IFFALSE 10375
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10362: LD_INT 13
10364: PPUSH
10365: LD_INT 2
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10375: LD_STRING Road
10377: PPUSH
10378: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_INT 22
10389: PUSH
10390: LD_INT 5
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 21
10399: PUSH
10400: LD_INT 2
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 69
10415: PUSH
10416: FOR_IN
10417: IFFALSE 10433
// SetSide ( i , 2 ) ;
10419: LD_VAR 0 2
10423: PPUSH
10424: LD_INT 2
10426: PPUSH
10427: CALL_OW 235
10431: GO 10416
10433: POP
10434: POP
// SaveForQuickRestart ;
10435: CALL_OW 22
// music_class := music_auto ;
10439: LD_ADDR_OWVAR 72
10443: PUSH
10444: LD_INT 0
10446: ST_TO_ADDR
// end ;
10447: LD_VAR 0 1
10451: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10452: LD_INT 2
10454: PPUSH
10455: LD_INT 9
10457: PPUSH
10458: CALL_OW 294
10462: IFFALSE 10827
10464: GO 10466
10466: DISABLE
// begin DialogueOn ;
10467: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10471: LD_INT 111
10473: PPUSH
10474: LD_INT 72
10476: PPUSH
10477: LD_INT 2
10479: PPUSH
10480: LD_INT 20
10482: NEG
10483: PPUSH
10484: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10488: LD_INT 111
10490: PPUSH
10491: LD_INT 72
10493: PPUSH
10494: LD_INT 2
10496: PPUSH
10497: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10501: LD_INT 111
10503: PPUSH
10504: LD_INT 72
10506: PPUSH
10507: CALL_OW 86
// if IsOk ( Kamil ) then
10511: LD_EXP 25
10515: PPUSH
10516: CALL_OW 302
10520: IFFALSE 10637
// begin Say ( Kamil , DKam-Cross-1 ) ;
10522: LD_EXP 25
10526: PPUSH
10527: LD_STRING DKam-Cross-1
10529: PPUSH
10530: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10534: LD_EXP 25
10538: PPUSH
10539: LD_STRING DKam-Cross-2
10541: PPUSH
10542: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10546: LD_EXP 25
10550: PPUSH
10551: LD_STRING DKam-Cross-3
10553: PPUSH
10554: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10558: LD_EXP 25
10562: PPUSH
10563: LD_STRING DKam-Cross-4
10565: PPUSH
10566: CALL_OW 88
// if IsOk ( Ibrahim ) then
10570: LD_EXP 24
10574: PPUSH
10575: CALL_OW 302
10579: IFFALSE 10635
// begin if ibrahimJoinedIn04 then
10581: LD_EXP 4
10585: IFFALSE 10599
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10587: LD_EXP 24
10591: PPUSH
10592: LD_STRING DI-Cross-b-5
10594: PPUSH
10595: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10599: LD_EXP 24
10603: PPUSH
10604: LD_STRING DI-Cross-b-6
10606: PPUSH
10607: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10611: LD_EXP 24
10615: PPUSH
10616: LD_STRING DI-Cross-b-7
10618: PPUSH
10619: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10623: LD_EXP 25
10627: PPUSH
10628: LD_STRING DKam-Cross-8
10630: PPUSH
10631: CALL_OW 88
// end ; end else
10635: GO 10795
// if IsOk ( Sophia ) then
10637: LD_EXP 27
10641: PPUSH
10642: CALL_OW 302
10646: IFFALSE 10763
// begin Say ( Sophia , DS-Cross-1 ) ;
10648: LD_EXP 27
10652: PPUSH
10653: LD_STRING DS-Cross-1
10655: PPUSH
10656: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10660: LD_EXP 27
10664: PPUSH
10665: LD_STRING DS-Cross-2
10667: PPUSH
10668: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10672: LD_EXP 27
10676: PPUSH
10677: LD_STRING DS-Cross-3
10679: PPUSH
10680: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10684: LD_EXP 27
10688: PPUSH
10689: LD_STRING DS-Cross-4
10691: PPUSH
10692: CALL_OW 88
// if IsOk ( Ibrahim ) then
10696: LD_EXP 24
10700: PPUSH
10701: CALL_OW 302
10705: IFFALSE 10761
// begin if ibrahimJoinedIn04 then
10707: LD_EXP 4
10711: IFFALSE 10725
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10713: LD_EXP 24
10717: PPUSH
10718: LD_STRING DI-Cross-b-5
10720: PPUSH
10721: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10725: LD_EXP 24
10729: PPUSH
10730: LD_STRING DI-Cross-b-6
10732: PPUSH
10733: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10737: LD_EXP 24
10741: PPUSH
10742: LD_STRING DI-Cross-b-7
10744: PPUSH
10745: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10749: LD_EXP 27
10753: PPUSH
10754: LD_STRING DS-Cross-8
10756: PPUSH
10757: CALL_OW 88
// end ; end else
10761: GO 10795
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10763: LD_EXP 34
10767: PPUSH
10768: LD_INT 50
10770: PUSH
10771: EMPTY
10772: LIST
10773: PPUSH
10774: CALL_OW 72
10778: IFFALSE 10795
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10780: LD_EXP 34
10784: PPUSH
10785: LD_STRING DArm-Cross-c-1
10787: PPUSH
10788: LD_STRING DArf-Cross-c-1
10790: PPUSH
10791: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10795: LD_INT 85
10797: PPUSH
10798: LD_INT 2
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: CALL_OW 322
// DialogueOff ;
10808: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10812: LD_STRING Crane
10814: PPUSH
10815: CALL_OW 337
// spottedCrossRoad := true ;
10819: LD_ADDR_EXP 8
10823: PUSH
10824: LD_INT 1
10826: ST_TO_ADDR
// end ;
10827: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10828: LD_INT 22
10830: PUSH
10831: LD_INT 2
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 2
10840: PUSH
10841: LD_INT 30
10843: PUSH
10844: LD_INT 0
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 30
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PPUSH
10870: CALL_OW 69
10874: PUSH
10875: LD_EXP 26
10879: PPUSH
10880: CALL_OW 302
10884: PUSH
10885: LD_EXP 34
10889: OR
10890: AND
10891: IFFALSE 11103
10893: GO 10895
10895: DISABLE
// begin DialogueOn ;
10896: CALL_OW 6
// if Kaia then
10900: LD_EXP 26
10904: IFFALSE 10917
// CenterNowOnUnits ( Kaia ) else
10906: LD_EXP 26
10910: PPUSH
10911: CALL_OW 87
10915: GO 10926
// CenterNowOnUnits ( Heike ) ;
10917: LD_EXP 21
10921: PPUSH
10922: CALL_OW 87
// if IsOk ( Kaia ) then
10926: LD_EXP 26
10930: PPUSH
10931: CALL_OW 302
10935: IFFALSE 10951
// Say ( Kaia , DK-Cam-1 ) else
10937: LD_EXP 26
10941: PPUSH
10942: LD_STRING DK-Cam-1
10944: PPUSH
10945: CALL_OW 88
10949: GO 10966
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10951: LD_EXP 34
10955: PPUSH
10956: LD_STRING DArm-Cam-1
10958: PPUSH
10959: LD_STRING DArf-Cam-1
10961: PPUSH
10962: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
10966: LD_EXP 21
10970: PPUSH
10971: LD_STRING DH-Cam-2
10973: PPUSH
10974: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10978: LD_EXP 21
10982: PPUSH
10983: LD_STRING DH-Cam-3
10985: PPUSH
10986: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10990: LD_EXP 21
10994: PPUSH
10995: LD_STRING DH-Cam-4
10997: PPUSH
10998: CALL_OW 88
// if IsOk ( Kaia ) then
11002: LD_EXP 26
11006: PPUSH
11007: CALL_OW 302
11011: IFFALSE 11027
// Say ( Kaia , DK-Cam-5 ) else
11013: LD_EXP 26
11017: PPUSH
11018: LD_STRING DK-Cam-5
11020: PPUSH
11021: CALL_OW 88
11025: GO 11042
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11027: LD_EXP 34
11031: PPUSH
11032: LD_STRING DArm-Cam-5
11034: PPUSH
11035: LD_STRING DArf-Cam-5
11037: PPUSH
11038: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11042: LD_EXP 30
11046: PPUSH
11047: LD_STRING DO-Cam-6
11049: PPUSH
11050: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11054: LD_EXP 30
11058: PPUSH
11059: LD_STRING DO-Cam-7
11061: PPUSH
11062: CALL_OW 88
// DialogueOff ;
11066: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11070: LD_STRING Radar
11072: PPUSH
11073: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11077: LD_INT 6
11079: PPUSH
11080: LD_INT 2
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11090: LD_INT 20
11092: PPUSH
11093: LD_INT 2
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 324
// end ;
11103: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11104: LD_INT 22
11106: PUSH
11107: LD_INT 2
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: LD_INT 34
11119: PUSH
11120: LD_INT 30
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 35
11129: PUSH
11130: LD_INT 30
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PPUSH
11146: CALL_OW 69
11150: IFFALSE 11162
11152: GO 11154
11154: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11155: LD_STRING RadarDone
11157: PPUSH
11158: CALL_OW 337
11162: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11163: LD_INT 22
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 34
11175: PUSH
11176: LD_INT 88
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 69
11191: IFFALSE 11203
11193: GO 11195
11195: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11196: LD_STRING CraneDone
11198: PPUSH
11199: CALL_OW 337
11203: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11204: LD_EXP 30
11208: PPUSH
11209: CALL_OW 302
11213: PUSH
11214: LD_EXP 33
11218: PPUSH
11219: CALL_OW 302
11223: AND
11224: PUSH
11225: LD_INT 6
11227: PPUSH
11228: LD_INT 2
11230: PPUSH
11231: CALL_OW 321
11235: PUSH
11236: LD_INT 2
11238: EQUAL
11239: AND
11240: PUSH
11241: LD_EXP 33
11245: PPUSH
11246: LD_EXP 21
11250: PPUSH
11251: CALL_OW 296
11255: PUSH
11256: LD_INT 10
11258: LESS
11259: PUSH
11260: LD_EXP 33
11264: PPUSH
11265: CALL_OW 310
11269: OR
11270: AND
11271: IFFALSE 11485
11273: GO 11275
11275: DISABLE
// begin DialogueOn ;
11276: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11280: LD_EXP 33
11284: PPUSH
11285: LD_STRING DA-RC-1
11287: PPUSH
11288: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_STRING DA-RC-2
11299: PPUSH
11300: CALL_OW 88
// if IsOk ( Kaia ) then
11304: LD_EXP 26
11308: PPUSH
11309: CALL_OW 302
11313: IFFALSE 11387
// begin Say ( Kaia , DK-RC-3 ) ;
11315: LD_EXP 26
11319: PPUSH
11320: LD_STRING DK-RC-3
11322: PPUSH
11323: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11327: LD_EXP 33
11331: PPUSH
11332: LD_STRING DA-RC-4
11334: PPUSH
11335: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11339: LD_EXP 26
11343: PPUSH
11344: LD_STRING DK-RC-5
11346: PPUSH
11347: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11351: LD_EXP 33
11355: PPUSH
11356: LD_STRING DA-RC-6
11358: PPUSH
11359: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11363: LD_EXP 26
11367: PPUSH
11368: LD_STRING DK-RC-7
11370: PPUSH
11371: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11375: LD_EXP 33
11379: PPUSH
11380: LD_STRING DA-RC-8
11382: PPUSH
11383: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11387: LD_EXP 21
11391: PPUSH
11392: LD_STRING DH-RC-9
11394: PPUSH
11395: CALL_OW 88
// if IsOk ( Markov ) then
11399: LD_EXP 28
11403: PPUSH
11404: CALL_OW 302
11408: IFFALSE 11436
// begin Say ( Markov , DMar-RC-10 ) ;
11410: LD_EXP 28
11414: PPUSH
11415: LD_STRING DMar-RC-10
11417: PPUSH
11418: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11422: LD_EXP 28
11426: PPUSH
11427: LD_STRING DMar-RC-11
11429: PPUSH
11430: CALL_OW 88
// end else
11434: GO 11448
// begin Say ( Olaf , DO-RC-a-10 ) ;
11436: LD_EXP 30
11440: PPUSH
11441: LD_STRING DO-RC-a-10
11443: PPUSH
11444: CALL_OW 88
// end ; DialogueOff ;
11448: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11452: LD_STRING RemoteControl
11454: PPUSH
11455: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11459: LD_INT 15
11461: PPUSH
11462: LD_INT 2
11464: PPUSH
11465: LD_INT 1
11467: PPUSH
11468: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11472: LD_INT 22
11474: PPUSH
11475: LD_INT 2
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL_OW 324
// end ;
11485: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11486: LD_INT 12
11488: PPUSH
11489: LD_INT 22
11491: PUSH
11492: LD_INT 2
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PPUSH
11499: CALL_OW 70
11503: IFFALSE 11870
11505: GO 11507
11507: DISABLE
11508: LD_INT 0
11510: PPUSH
// begin PrepareWestBase ;
11511: CALL 3916 0 0
// westBaseSpotted := true ;
11515: LD_ADDR_EXP 5
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11523: LD_INT 70
11525: PPUSH
11526: CALL_OW 67
// InGameOn ;
11530: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11534: LD_INT 56
11536: PPUSH
11537: LD_INT 77
11539: PPUSH
11540: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11544: LD_INT 56
11546: PPUSH
11547: LD_INT 77
11549: PPUSH
11550: LD_INT 2
11552: PPUSH
11553: LD_INT 12
11555: NEG
11556: PPUSH
11557: CALL_OW 330
// wait ( 0 0$2 ) ;
11561: LD_INT 70
11563: PPUSH
11564: CALL_OW 67
// DialogueOn ;
11568: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11572: LD_EXP 21
11576: PPUSH
11577: LD_STRING DH-Rbase-1
11579: PPUSH
11580: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11584: LD_EXP 26
11588: PPUSH
11589: LD_STRING DK-Rbase-2
11591: PPUSH
11592: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11596: LD_EXP 26
11600: PPUSH
11601: LD_STRING DK-Rbase-3
11603: PPUSH
11604: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11608: LD_EXP 26
11612: PPUSH
11613: LD_STRING DK-Rbase-4
11615: PPUSH
11616: CALL_OW 88
// DialogueOff ;
11620: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11624: LD_INT 56
11626: PPUSH
11627: LD_INT 77
11629: PPUSH
11630: LD_INT 2
11632: PPUSH
11633: CALL_OW 331
// InGameOff ;
11637: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11641: LD_INT 35
11643: PPUSH
11644: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11648: LD_EXP 42
11652: NOT
11653: PUSH
11654: LD_EXP 43
11658: NOT
11659: AND
11660: IFFALSE 11641
// wait ( 0 0$2 ) ;
11662: LD_INT 70
11664: PPUSH
11665: CALL_OW 67
// if IsOk ( Kaia ) then
11669: LD_EXP 26
11673: PPUSH
11674: CALL_OW 302
11678: IFFALSE 11793
// begin DialogueOn ;
11680: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11684: LD_INT 56
11686: PPUSH
11687: LD_INT 81
11689: PPUSH
11690: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11694: LD_EXP 26
11698: PPUSH
11699: LD_STRING DK-Rbase-5
11701: PPUSH
11702: CALL_OW 88
// if IsOk ( Givi ) then
11706: LD_EXP 22
11710: PPUSH
11711: CALL_OW 302
11715: IFFALSE 11789
// begin Say ( Givi , DG-Rbase-6 ) ;
11717: LD_EXP 22
11721: PPUSH
11722: LD_STRING DG-Rbase-6
11724: PPUSH
11725: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11729: LD_EXP 22
11733: PPUSH
11734: LD_STRING DG-Rbase-7
11736: PPUSH
11737: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11741: LD_EXP 26
11745: PPUSH
11746: LD_STRING DK-Rbase-8
11748: PPUSH
11749: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11753: LD_EXP 22
11757: PPUSH
11758: LD_STRING DG-Rbase-9
11760: PPUSH
11761: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11765: LD_EXP 22
11769: PPUSH
11770: LD_STRING DG-Rbase-10
11772: PPUSH
11773: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11777: LD_EXP 26
11781: PPUSH
11782: LD_STRING DK-Rbase-11
11784: PPUSH
11785: CALL_OW 88
// end ; DialogueOff ;
11789: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11793: LD_ADDR_VAR 0 1
11797: PUSH
11798: LD_INT 12
11800: PPUSH
11801: LD_INT 22
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 21
11813: PUSH
11814: LD_INT 3
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 70
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11847
// SetSide ( i , 2 ) ;
11833: LD_VAR 0 1
11837: PPUSH
11838: LD_INT 2
11840: PPUSH
11841: CALL_OW 235
11845: GO 11830
11847: POP
11848: POP
// westBaseCaptured := true ;
11849: LD_ADDR_EXP 9
11853: PUSH
11854: LD_INT 1
11856: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11857: LD_INT 0
11859: PPUSH
11860: LD_INT 2
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 324
// end ;
11870: PPOPN 1
11872: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11873: LD_EXP 38
11877: NOT
11878: PUSH
11879: LD_INT 10
11881: PPUSH
11882: CALL_OW 255
11886: PUSH
11887: LD_INT 2
11889: EQUAL
11890: OR
11891: IFFALSE 12028
11893: GO 11895
11895: DISABLE
// begin DialogueOn ;
11896: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11900: LD_EXP 21
11904: PPUSH
11905: LD_STRING DH-Goal-1
11907: PPUSH
11908: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11912: LD_EXP 29
11916: PPUSH
11917: LD_STRING DShar-Goal-2
11919: PPUSH
11920: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11924: LD_EXP 21
11928: PPUSH
11929: LD_STRING DH-Goal-3
11931: PPUSH
11932: CALL_OW 88
// if reinforcementsAllowed then
11936: LD_EXP 14
11940: IFFALSE 11966
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11942: LD_EXP 29
11946: PPUSH
11947: LD_STRING DShar-Goal-4
11949: PPUSH
11950: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11954: LD_EXP 21
11958: PPUSH
11959: LD_STRING DH-Goal-5
11961: PPUSH
11962: CALL_OW 88
// end ; DialogueOff ;
11966: CALL_OW 7
// eastBaseCaptured := true ;
11970: LD_ADDR_EXP 10
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11978: LD_STRING BaseCaptured
11980: PPUSH
11981: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11985: LD_INT 10
11987: PPUSH
11988: LD_INT 2
11990: PPUSH
11991: CALL_OW 235
// if not reinforcementsAllowed then
11995: LD_EXP 14
11999: NOT
12000: IFFALSE 12004
// exit ;
12002: GO 12028
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12004: LD_INT 21000
12006: PUSH
12007: LD_INT 1050
12009: NEG
12010: PPUSH
12011: LD_INT 1050
12013: PPUSH
12014: CALL_OW 12
12018: PLUS
12019: PPUSH
12020: CALL_OW 67
// PrepareReinforcements ;
12024: CALL 2174 0 0
// end ;
12028: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12029: LD_INT 22
12031: PUSH
12032: LD_INT 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 30
12041: PUSH
12042: LD_INT 13
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: IFFALSE 12074
12059: GO 12061
12061: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12062: LD_EXP 22
12066: PPUSH
12067: LD_STRING DG-Lab-1
12069: PPUSH
12070: CALL_OW 88
// end ;
12074: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12075: LD_INT 5
12077: PPUSH
12078: LD_INT 2
12080: PPUSH
12081: CALL_OW 321
12085: PUSH
12086: LD_INT 2
12088: EQUAL
12089: PUSH
12090: LD_EXP 22
12094: PPUSH
12095: CALL_OW 302
12099: AND
12100: IFFALSE 12161
12102: GO 12104
12104: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12105: LD_EXP 22
12109: PPUSH
12110: LD_STRING DG-Stim-1
12112: PPUSH
12113: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12117: LD_EXP 21
12121: PPUSH
12122: LD_STRING DH-Stim-2
12124: PPUSH
12125: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12129: LD_EXP 22
12133: PPUSH
12134: LD_STRING DG-Stim-3
12136: PPUSH
12137: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12141: LD_EXP 21
12145: PPUSH
12146: LD_STRING DH-Stim-4
12148: PPUSH
12149: CALL_OW 88
// drugsResearched := true ;
12153: LD_ADDR_EXP 11
12157: PUSH
12158: LD_INT 1
12160: ST_TO_ADDR
// end ;
12161: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12162: LD_EXP 11
12166: IFFALSE 12478
12168: GO 12170
12170: DISABLE
12171: LD_INT 0
12173: PPUSH
12174: PPUSH
12175: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12176: LD_ADDR_VAR 0 2
12180: PUSH
12181: LD_EXP 21
12185: PUSH
12186: LD_EXP 22
12190: PUSH
12191: LD_EXP 30
12195: PUSH
12196: LD_EXP 28
12200: PUSH
12201: LD_EXP 26
12205: PUSH
12206: LD_EXP 27
12210: PUSH
12211: LD_EXP 32
12215: PUSH
12216: LD_EXP 25
12220: PUSH
12221: LD_EXP 23
12225: PUSH
12226: LD_EXP 24
12230: PUSH
12231: LD_EXP 33
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12249: LD_ADDR_VAR 0 3
12253: PUSH
12254: LD_STRING H
12256: PUSH
12257: LD_STRING G
12259: PUSH
12260: LD_STRING O
12262: PUSH
12263: LD_STRING Mar
12265: PUSH
12266: LD_STRING K
12268: PUSH
12269: LD_STRING S
12271: PUSH
12272: LD_STRING Ks
12274: PUSH
12275: LD_STRING Kam
12277: PUSH
12278: LD_STRING M
12280: PUSH
12281: LD_STRING I
12283: PUSH
12284: LD_STRING A
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12300: LD_INT 35
12302: PPUSH
12303: CALL_OW 67
// for i := tmp downto 1 do
12307: LD_ADDR_VAR 0 1
12311: PUSH
12312: DOUBLE
12313: LD_VAR 0 2
12317: INC
12318: ST_TO_ADDR
12319: LD_INT 1
12321: PUSH
12322: FOR_DOWNTO
12323: IFFALSE 12469
// if GetLives ( tmp [ i ] ) < 250 then
12325: LD_VAR 0 2
12329: PUSH
12330: LD_VAR 0 1
12334: ARRAY
12335: PPUSH
12336: CALL_OW 256
12340: PUSH
12341: LD_INT 250
12343: LESS
12344: IFFALSE 12467
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12346: LD_ADDR_EXP 19
12350: PUSH
12351: LD_EXP 19
12355: PUSH
12356: LD_INT 1
12358: PLUS
12359: ST_TO_ADDR
// DialogueOn ;
12360: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12364: LD_VAR 0 2
12368: PUSH
12369: LD_VAR 0 1
12373: ARRAY
12374: PPUSH
12375: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12379: LD_VAR 0 2
12383: PUSH
12384: LD_VAR 0 1
12388: ARRAY
12389: PPUSH
12390: LD_STRING D
12392: PUSH
12393: LD_VAR 0 3
12397: PUSH
12398: LD_VAR 0 1
12402: ARRAY
12403: STR
12404: PUSH
12405: LD_STRING -Stim-a-1
12407: STR
12408: PPUSH
12409: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12413: LD_ADDR_VAR 0 2
12417: PUSH
12418: LD_VAR 0 2
12422: PPUSH
12423: LD_VAR 0 1
12427: PPUSH
12428: CALL_OW 3
12432: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12433: LD_ADDR_VAR 0 3
12437: PUSH
12438: LD_VAR 0 3
12442: PPUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 3
12452: ST_TO_ADDR
// drugsTested := true ;
12453: LD_ADDR_EXP 6
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// DialogueOff ;
12461: CALL_OW 7
// break ;
12465: GO 12469
// end ;
12467: GO 12322
12469: POP
12470: POP
// until not tmp ;
12471: LD_VAR 0 2
12475: NOT
12476: IFFALSE 12300
// end ;
12478: PPOPN 3
12480: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12481: LD_INT 22
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 34
12493: PUSH
12494: LD_INT 31
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 69
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 33
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PPUSH
12534: CALL_OW 69
12538: AND
12539: IFFALSE 12552
12541: GO 12543
12543: DISABLE
// remoteControlConstructed := true ;
12544: LD_ADDR_EXP 12
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
12552: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12553: LD_EXP 12
12557: IFFALSE 12857
12559: GO 12561
12561: DISABLE
12562: LD_INT 0
12564: PPUSH
12565: PPUSH
12566: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12567: LD_ADDR_VAR 0 2
12571: PUSH
12572: LD_EXP 21
12576: PUSH
12577: LD_EXP 22
12581: PUSH
12582: LD_EXP 30
12586: PUSH
12587: LD_EXP 28
12591: PUSH
12592: LD_EXP 26
12596: PUSH
12597: LD_EXP 27
12601: PUSH
12602: LD_EXP 32
12606: PUSH
12607: LD_EXP 25
12611: PUSH
12612: LD_EXP 23
12616: PUSH
12617: LD_EXP 24
12621: PUSH
12622: LD_EXP 33
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12640: LD_ADDR_VAR 0 3
12644: PUSH
12645: LD_STRING H
12647: PUSH
12648: LD_STRING G
12650: PUSH
12651: LD_STRING O
12653: PUSH
12654: LD_STRING Mar
12656: PUSH
12657: LD_STRING K
12659: PUSH
12660: LD_STRING S
12662: PUSH
12663: LD_STRING Ks
12665: PUSH
12666: LD_STRING Kam
12668: PUSH
12669: LD_STRING M
12671: PUSH
12672: LD_STRING I
12674: PUSH
12675: LD_STRING A
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12691: LD_INT 35
12693: PPUSH
12694: CALL_OW 67
// for i := tmp downto 1 do
12698: LD_ADDR_VAR 0 1
12702: PUSH
12703: DOUBLE
12704: LD_VAR 0 2
12708: INC
12709: ST_TO_ADDR
12710: LD_INT 1
12712: PUSH
12713: FOR_DOWNTO
12714: IFFALSE 12848
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12716: LD_VAR 0 2
12720: PUSH
12721: LD_VAR 0 1
12725: ARRAY
12726: PPUSH
12727: CALL_OW 257
12731: PUSH
12732: LD_INT 3
12734: EQUAL
12735: PUSH
12736: LD_VAR 0 2
12740: PUSH
12741: LD_VAR 0 1
12745: ARRAY
12746: PPUSH
12747: CALL_OW 432
12751: AND
12752: IFFALSE 12846
// begin DialogueOn ;
12754: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12758: LD_VAR 0 2
12762: PUSH
12763: LD_VAR 0 1
12767: ARRAY
12768: PPUSH
12769: LD_STRING D
12771: PUSH
12772: LD_VAR 0 3
12776: PUSH
12777: LD_VAR 0 1
12781: ARRAY
12782: STR
12783: PUSH
12784: LD_STRING -RC-a-1
12786: STR
12787: PPUSH
12788: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12792: LD_ADDR_VAR 0 2
12796: PUSH
12797: LD_VAR 0 2
12801: PPUSH
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 3
12811: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_VAR 0 3
12821: PPUSH
12822: LD_VAR 0 1
12826: PPUSH
12827: CALL_OW 3
12831: ST_TO_ADDR
// DialogueOff ;
12832: CALL_OW 7
// remoteControlTested := true ;
12836: LD_ADDR_EXP 7
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// break ;
12844: GO 12848
// end ;
12846: GO 12713
12848: POP
12849: POP
// until not tmp ;
12850: LD_VAR 0 2
12854: NOT
12855: IFFALSE 12691
// end ;
12857: PPOPN 3
12859: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12860: LD_EXP 7
12864: PUSH
12865: LD_EXP 28
12869: PPUSH
12870: CALL_OW 302
12874: AND
12875: IFFALSE 12904
12877: GO 12879
12879: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12880: LD_EXP 28
12884: PPUSH
12885: LD_STRING DMar-RC-a-2
12887: PPUSH
12888: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12892: LD_EXP 28
12896: PPUSH
12897: LD_STRING DMar-RC-a-3
12899: PPUSH
12900: CALL_OW 88
// end ;
12904: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12905: LD_EXP 14
12909: PUSH
12910: LD_EXP 21
12914: PPUSH
12915: LD_EXP 33
12919: PPUSH
12920: CALL_OW 296
12924: PUSH
12925: LD_INT 8
12927: LESS
12928: AND
12929: PUSH
12930: LD_INT 2
12932: PPUSH
12933: CALL_OW 463
12937: NOT
12938: AND
12939: PUSH
12940: LD_EXP 33
12944: PPUSH
12945: CALL_OW 302
12949: AND
12950: PUSH
12951: LD_EXP 21
12955: PPUSH
12956: CALL_OW 302
12960: AND
12961: IFFALSE 13139
12963: GO 12965
12965: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12966: LD_EXP 33
12970: PPUSH
12971: CALL_OW 310
12975: NOT
12976: IFFALSE 12992
// ComTurnUnit ( Aviradze , Heike ) ;
12978: LD_EXP 33
12982: PPUSH
12983: LD_EXP 21
12987: PPUSH
12988: CALL_OW 119
// if not IsInUnit ( Heike ) then
12992: LD_EXP 21
12996: PPUSH
12997: CALL_OW 310
13001: NOT
13002: IFFALSE 13018
// ComTurnUnit ( Heike , Aviradze ) ;
13004: LD_EXP 21
13008: PPUSH
13009: LD_EXP 33
13013: PPUSH
13014: CALL_OW 119
// wait ( 0 0$1 ) ;
13018: LD_INT 35
13020: PPUSH
13021: CALL_OW 67
// DialogueOn ;
13025: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13029: LD_EXP 33
13033: PPUSH
13034: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13038: LD_EXP 21
13042: PPUSH
13043: LD_STRING DH-Beria-1
13045: PPUSH
13046: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13050: LD_EXP 33
13054: PPUSH
13055: LD_STRING DA-Beria-2
13057: PPUSH
13058: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13062: LD_EXP 21
13066: PPUSH
13067: LD_STRING DH-Beria-3
13069: PPUSH
13070: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13074: LD_EXP 33
13078: PPUSH
13079: LD_STRING DA-Beria-4
13081: PPUSH
13082: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13086: LD_EXP 33
13090: PPUSH
13091: LD_STRING DA-Beria-5
13093: PPUSH
13094: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13098: LD_EXP 33
13102: PPUSH
13103: LD_STRING DA-Beria-6
13105: PPUSH
13106: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13110: LD_EXP 21
13114: PPUSH
13115: LD_STRING DA-Beria-7
13117: PPUSH
13118: CALL_OW 88
// DialogueOff ;
13122: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13126: LD_INT 52
13128: PPUSH
13129: LD_INT 2
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 322
// end ;
13139: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13140: LD_EXP 26
13144: PPUSH
13145: CALL_OW 300
13149: PUSH
13150: LD_EXP 26
13154: PPUSH
13155: CALL_OW 256
13159: PUSH
13160: LD_INT 10
13162: LESS
13163: AND
13164: IFFALSE 13201
13166: GO 13168
13168: DISABLE
// begin DialogueOn ;
13169: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13173: LD_EXP 26
13177: PPUSH
13178: LD_STRING DK-Kdeath-1
13180: PPUSH
13181: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13185: LD_EXP 21
13189: PPUSH
13190: LD_STRING DH-Kdeath-2
13192: PPUSH
13193: CALL_OW 88
// DialogueOff ;
13197: CALL_OW 7
// end ;
13201: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13202: LD_INT 2
13204: PPUSH
13205: LD_EXP 39
13209: PPUSH
13210: CALL 1298 0 2
13214: IFFALSE 13231
13216: GO 13218
13218: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13219: LD_EXP 21
13223: PPUSH
13224: LD_STRING DH-Obj-1
13226: PPUSH
13227: CALL_OW 88
13231: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13232: LD_INT 2
13234: PPUSH
13235: LD_EXP 40
13239: PPUSH
13240: CALL 1298 0 2
13244: IFFALSE 13261
13246: GO 13248
13248: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13249: LD_EXP 21
13253: PPUSH
13254: LD_STRING DH-Obj-a-1
13256: PPUSH
13257: CALL_OW 88
13261: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13262: LD_EXP 10
13266: PUSH
13267: LD_OWVAR 1
13271: PUSH
13272: LD_INT 23100
13274: PUSH
13275: LD_INT 22050
13277: PUSH
13278: LD_INT 21000
13280: PUSH
13281: LD_INT 19950
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: PUSH
13290: LD_OWVAR 67
13294: ARRAY
13295: GREATEREQUAL
13296: OR
13297: IFFALSE 13323
13299: GO 13301
13301: DISABLE
// begin if eastBaseCaptured then
13302: LD_EXP 10
13306: IFFALSE 13315
// wait ( 2 2$00 ) ;
13308: LD_INT 4200
13310: PPUSH
13311: CALL_OW 67
// convoyStarted := true ;
13315: LD_ADDR_EXP 17
13319: PUSH
13320: LD_INT 1
13322: ST_TO_ADDR
// end ;
13323: END
// every 0 0$1 trigger convoyStarted do
13324: LD_EXP 17
13328: IFFALSE 13419
13330: GO 13332
13332: DISABLE
// begin DialogueOn ;
13333: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13337: LD_EXP 29
13341: PPUSH
13342: LD_STRING DShar-Convoy-1
13344: PPUSH
13345: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13349: LD_EXP 21
13353: PPUSH
13354: LD_STRING DH-Convoy-2
13356: PPUSH
13357: CALL_OW 88
// DialogueOff ;
13361: CALL_OW 7
// wait ( 0 0$10 ) ;
13365: LD_INT 350
13367: PPUSH
13368: CALL_OW 67
// PrepareConvoy ;
13372: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13376: LD_INT 5250
13378: PPUSH
13379: LD_INT 11550
13381: PPUSH
13382: CALL_OW 12
13386: PPUSH
13387: CALL_OW 67
// PrepareConvoy ;
13391: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13395: LD_ADDR_EXP 16
13399: PUSH
13400: LD_EXP 16
13404: PUSH
13405: LD_INT 1
13407: MINUS
13408: ST_TO_ADDR
// until convoyCounter <= 0 ;
13409: LD_EXP 16
13413: PUSH
13414: LD_INT 0
13416: LESSEQUAL
13417: IFFALSE 13376
// end ;
13419: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13420: LD_EXP 15
13424: PUSH
13425: LD_INT 10
13427: GREATEREQUAL
13428: IFFALSE 13445
13430: GO 13432
13432: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13433: LD_EXP 31
13437: PPUSH
13438: LD_STRING DOm-Fail-1
13440: PPUSH
13441: CALL_OW 94
13445: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13446: LD_EXP 39
13450: NOT
13451: PUSH
13452: LD_EXP 40
13456: NOT
13457: AND
13458: IFFALSE 13470
13460: GO 13462
13462: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13463: LD_STRING RaiderDone
13465: PPUSH
13466: CALL_OW 337
13470: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13471: LD_INT 22
13473: PUSH
13474: LD_INT 2
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 33
13483: PUSH
13484: LD_INT 2
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 69
13499: PUSH
13500: LD_INT 3
13502: GREATEREQUAL
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: LD_INT 2
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 34
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PPUSH
13528: CALL_OW 69
13532: PUSH
13533: LD_INT 2
13535: GREATEREQUAL
13536: AND
13537: IFFALSE 13549
13539: GO 13541
13541: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13542: LD_STRING RemoteControlDone
13544: PPUSH
13545: CALL_OW 337
13549: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 ;
13550: LD_EXP 16
13554: PUSH
13555: LD_INT 1
13557: LESS
13558: PUSH
13559: LD_EXP 41
13563: PPUSH
13564: LD_INT 52
13566: PUSH
13567: EMPTY
13568: LIST
13569: PUSH
13570: LD_INT 21
13572: PUSH
13573: LD_INT 1
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 72
13588: NOT
13589: AND
13590: PUSH
13591: LD_OWVAR 1
13595: PUSH
13596: LD_INT 126000
13598: GREATEREQUAL
13599: OR
13600: IFFALSE 14627
13602: GO 13604
13604: DISABLE
13605: LD_INT 0
13607: PPUSH
13608: PPUSH
13609: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13610: LD_STRING ReinforcementsDone
13612: PPUSH
13613: CALL_OW 337
// music_class := music_victory ;
13617: LD_ADDR_OWVAR 72
13621: PUSH
13622: LD_INT 4
13624: ST_TO_ADDR
// if tick <= 45 45$00 then
13625: LD_OWVAR 1
13629: PUSH
13630: LD_INT 94500
13632: LESSEQUAL
13633: IFFALSE 13642
// SetAchievement ( ACH_HSPEED_5 ) ;
13635: LD_STRING ACH_HSPEED_5
13637: PPUSH
13638: CALL_OW 543
// InGameOn ;
13642: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13646: LD_EXP 21
13650: PPUSH
13651: LD_STRING DH-end-1
13653: PPUSH
13654: CALL_OW 88
// wait ( 0 0$2 ) ;
13658: LD_INT 70
13660: PPUSH
13661: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13665: LD_EXP 29
13669: PPUSH
13670: LD_STRING DShar-end-2
13672: PPUSH
13673: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13677: LD_EXP 39
13681: NOT
13682: PUSH
13683: LD_EXP 40
13687: NOT
13688: AND
13689: IFFALSE 13705
// begin Say ( Heike , DH-end-3 ) ;
13691: LD_EXP 21
13695: PPUSH
13696: LD_STRING DH-end-3
13698: PPUSH
13699: CALL_OW 88
// end else
13703: GO 13802
// begin Say ( Heike , DH-end-a-3 ) ;
13705: LD_EXP 21
13709: PPUSH
13710: LD_STRING DH-end-a-3
13712: PPUSH
13713: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13717: LD_EXP 29
13721: PPUSH
13722: LD_STRING DShar-end-a-4
13724: PPUSH
13725: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13729: LD_EXP 21
13733: PPUSH
13734: LD_STRING DH-end-a-5
13736: PPUSH
13737: CALL_OW 88
// InGameOff ;
13741: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13745: LD_INT 35
13747: PPUSH
13748: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13752: LD_INT 22
13754: PUSH
13755: LD_INT 3
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 1
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL_OW 69
13780: PUSH
13781: LD_INT 0
13783: EQUAL
13784: IFFALSE 13745
// InGameOn ;
13786: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13790: LD_EXP 21
13794: PPUSH
13795: LD_STRING DH-end-a-6
13797: PPUSH
13798: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13802: LD_EXP 29
13806: PPUSH
13807: LD_STRING DShar-end-3
13809: PPUSH
13810: CALL_OW 94
// if not flamethrowerBuilt then
13814: LD_EXP 20
13818: NOT
13819: IFFALSE 13828
// SetAchievement ( ACH_FIRE ) ;
13821: LD_STRING ACH_FIRE
13823: PPUSH
13824: CALL_OW 543
// if drugsTested then
13828: LD_EXP 6
13832: IFFALSE 13846
// AddMedal ( med1 , 1 ) else
13834: LD_STRING med1
13836: PPUSH
13837: LD_INT 1
13839: PPUSH
13840: CALL_OW 101
13844: GO 13886
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13846: LD_INT 5
13848: PPUSH
13849: LD_INT 2
13851: PPUSH
13852: CALL_OW 321
13856: PUSH
13857: LD_INT 2
13859: EQUAL
13860: IFFALSE 13875
// AddMedal ( med1 , - 1 ) else
13862: LD_STRING med1
13864: PPUSH
13865: LD_INT 1
13867: NEG
13868: PPUSH
13869: CALL_OW 101
13873: GO 13886
// AddMedal ( med1 , - 2 ) ;
13875: LD_STRING med1
13877: PPUSH
13878: LD_INT 2
13880: NEG
13881: PPUSH
13882: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13886: LD_INT 22
13888: PUSH
13889: LD_INT 2
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 33
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PPUSH
13910: CALL_OW 69
13914: PUSH
13915: LD_INT 3
13917: GREATEREQUAL
13918: PUSH
13919: LD_INT 22
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 34
13931: PUSH
13932: LD_INT 31
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 69
13947: PUSH
13948: LD_INT 1
13950: GREATEREQUAL
13951: AND
13952: IFFALSE 13966
// AddMedal ( med2 , 1 ) else
13954: LD_STRING med2
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 101
13964: GO 13977
// AddMedal ( med2 , - 1 ) ;
13966: LD_STRING med2
13968: PPUSH
13969: LD_INT 1
13971: NEG
13972: PPUSH
13973: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13977: LD_EXP 15
13981: PUSH
13982: LD_INT 10
13984: PUSH
13985: LD_INT 8
13987: PUSH
13988: LD_INT 6
13990: PUSH
13991: LD_INT 5
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: LD_OWVAR 67
14004: ARRAY
14005: LESS
14006: IFFALSE 14020
// AddMedal ( med3 , 1 ) else
14008: LD_STRING med3
14010: PPUSH
14011: LD_INT 1
14013: PPUSH
14014: CALL_OW 101
14018: GO 14031
// AddMedal ( med3 , - 1 ) ;
14020: LD_STRING med3
14022: PPUSH
14023: LD_INT 1
14025: NEG
14026: PPUSH
14027: CALL_OW 101
// GiveMedals ( MAIN ) ;
14031: LD_STRING MAIN
14033: PPUSH
14034: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14038: LD_INT 22
14040: PUSH
14041: LD_INT 2
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 23
14050: PUSH
14051: LD_INT 2
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 21
14060: PUSH
14061: LD_INT 1
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 69
14077: PPUSH
14078: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14082: LD_EXP 15
14086: PPUSH
14087: LD_STRING 05_ConvoySavedCounter
14089: PPUSH
14090: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14094: LD_EXP 13
14098: PPUSH
14099: LD_STRING 05_Radar
14101: PPUSH
14102: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14106: LD_EXP 6
14110: PPUSH
14111: LD_STRING 05_DrugsTested
14113: PPUSH
14114: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14118: LD_INT 22
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 33
14130: PUSH
14131: LD_INT 2
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PPUSH
14142: CALL_OW 69
14146: PUSH
14147: LD_INT 3
14149: GREATEREQUAL
14150: PUSH
14151: LD_INT 22
14153: PUSH
14154: LD_INT 2
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 34
14163: PUSH
14164: LD_INT 31
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PPUSH
14175: CALL_OW 69
14179: PUSH
14180: LD_INT 2
14182: GREATEREQUAL
14183: AND
14184: PPUSH
14185: LD_STRING 05_RemoteControl
14187: PPUSH
14188: CALL_OW 39
// tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14192: LD_ADDR_VAR 0 2
14196: PUSH
14197: LD_INT 25
14199: PPUSH
14200: LD_INT 21
14202: PUSH
14203: LD_INT 3
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 70
14214: ST_TO_ADDR
// tmp2 := [ ] ;
14215: LD_ADDR_VAR 0 3
14219: PUSH
14220: EMPTY
14221: ST_TO_ADDR
// if tmp then
14222: LD_VAR 0 2
14226: IFFALSE 14379
// begin for i in tmp do
14228: LD_ADDR_VAR 0 1
14232: PUSH
14233: LD_VAR 0 2
14237: PUSH
14238: FOR_IN
14239: IFFALSE 14365
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14241: LD_ADDR_VAR 0 3
14245: PUSH
14246: LD_VAR 0 3
14250: PPUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 266
14260: PUSH
14261: LD_VAR 0 1
14265: PPUSH
14266: CALL_OW 250
14270: PUSH
14271: LD_VAR 0 1
14275: PPUSH
14276: CALL_OW 251
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 254
14290: PUSH
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 248
14300: PUSH
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 267
14310: PUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 268
14323: PUSH
14324: LD_VAR 0 1
14328: PPUSH
14329: LD_INT 2
14331: PPUSH
14332: CALL_OW 268
14336: PUSH
14337: LD_VAR 0 1
14341: PPUSH
14342: CALL_OW 269
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL 72229 0 2
14362: ST_TO_ADDR
14363: GO 14238
14365: POP
14366: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14367: LD_VAR 0 3
14371: PPUSH
14372: LD_STRING 05_Buildings
14374: PPUSH
14375: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14379: LD_EXP 21
14383: PPUSH
14384: LD_STRING 05_Heike
14386: PPUSH
14387: CALL_OW 38
// if Aviradze then
14391: LD_EXP 33
14395: IFFALSE 14409
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14397: LD_EXP 33
14401: PPUSH
14402: LD_STRING 05_Aviradze
14404: PPUSH
14405: CALL_OW 38
// if Ibrahim then
14409: LD_EXP 24
14413: IFFALSE 14427
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14415: LD_EXP 24
14419: PPUSH
14420: LD_STRING 05_Ibrahim
14422: PPUSH
14423: CALL_OW 38
// if Kamil then
14427: LD_EXP 25
14431: IFFALSE 14445
// SaveCharacters ( Kamil , 05_Kamil ) ;
14433: LD_EXP 25
14437: PPUSH
14438: LD_STRING 05_Kamil
14440: PPUSH
14441: CALL_OW 38
// if Sophia then
14445: LD_EXP 27
14449: IFFALSE 14463
// SaveCharacters ( Sophia , 05_Sophia ) ;
14451: LD_EXP 27
14455: PPUSH
14456: LD_STRING 05_Sophia
14458: PPUSH
14459: CALL_OW 38
// if Kaia then
14463: LD_EXP 26
14467: IFFALSE 14481
// SaveCharacters ( Kaia , 05_Kaia ) ;
14469: LD_EXP 26
14473: PPUSH
14474: LD_STRING 05_Kaia
14476: PPUSH
14477: CALL_OW 38
// if Givi then
14481: LD_EXP 22
14485: IFFALSE 14499
// SaveCharacters ( Givi , 05_Givi ) ;
14487: LD_EXP 22
14491: PPUSH
14492: LD_STRING 05_Givi
14494: PPUSH
14495: CALL_OW 38
// if Mike then
14499: LD_EXP 23
14503: IFFALSE 14517
// SaveCharacters ( Mike , 05_Mike ) ;
14505: LD_EXP 23
14509: PPUSH
14510: LD_STRING 05_Mike
14512: PPUSH
14513: CALL_OW 38
// if Markov then
14517: LD_EXP 28
14521: IFFALSE 14535
// SaveCharacters ( Markov , 05_Markov ) ;
14523: LD_EXP 28
14527: PPUSH
14528: LD_STRING 05_Markov
14530: PPUSH
14531: CALL_OW 38
// if Kurt then
14535: LD_EXP 32
14539: IFFALSE 14553
// SaveCharacters ( Kurt , 05_Kurt ) ;
14541: LD_EXP 32
14545: PPUSH
14546: LD_STRING 05_Kurt
14548: PPUSH
14549: CALL_OW 38
// if heikeSecondSquad then
14553: LD_EXP 34
14557: IFFALSE 14571
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14559: LD_EXP 34
14563: PPUSH
14564: LD_STRING 05_others
14566: PPUSH
14567: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14571: LD_ADDR_VAR 0 2
14575: PUSH
14576: LD_INT 22
14578: PUSH
14579: LD_INT 2
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 23
14588: PUSH
14589: LD_INT 0
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 69
14604: ST_TO_ADDR
// if tmp then
14605: LD_VAR 0 2
14609: IFFALSE 14623
// SaveCharacters ( tmp , 05_apes ) ;
14611: LD_VAR 0 2
14615: PPUSH
14616: LD_STRING 05_apes
14618: PPUSH
14619: CALL_OW 38
// YouWin ;
14623: CALL_OW 103
// end ; end_of_file
14627: PPOPN 3
14629: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14630: LD_EXP 9
14634: PUSH
14635: LD_INT 13
14637: PPUSH
14638: LD_INT 1
14640: PPUSH
14641: CALL_OW 287
14645: PUSH
14646: LD_INT 25
14648: LESS
14649: AND
14650: IFFALSE 14677
14652: GO 14654
14654: DISABLE
// begin enable ;
14655: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14656: LD_INT 1
14658: PPUSH
14659: LD_INT 5
14661: PPUSH
14662: CALL_OW 12
14666: PPUSH
14667: LD_INT 13
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 55
// end ; end_of_file
14677: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14678: LD_INT 0
14680: PPUSH
14681: PPUSH
14682: PPUSH
14683: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 264
14693: PUSH
14694: LD_INT 91
14696: EQUAL
14697: IFFALSE 14769
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14699: LD_INT 68
14701: PPUSH
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 255
14711: PPUSH
14712: CALL_OW 321
14716: PUSH
14717: LD_INT 2
14719: EQUAL
14720: IFFALSE 14732
// eff := 70 else
14722: LD_ADDR_VAR 0 4
14726: PUSH
14727: LD_INT 70
14729: ST_TO_ADDR
14730: GO 14740
// eff := 30 ;
14732: LD_ADDR_VAR 0 4
14736: PUSH
14737: LD_INT 30
14739: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 250
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 251
14759: PPUSH
14760: LD_VAR 0 4
14764: PPUSH
14765: CALL_OW 495
// end ; end ;
14769: LD_VAR 0 2
14773: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14774: LD_INT 0
14776: PPUSH
// end ;
14777: LD_VAR 0 4
14781: RET
// export function SOS_Command ( cmd ) ; begin
14782: LD_INT 0
14784: PPUSH
// end ;
14785: LD_VAR 0 2
14789: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14790: LD_INT 0
14792: PPUSH
// end ;
14793: LD_VAR 0 6
14797: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14798: LD_INT 0
14800: PPUSH
14801: PPUSH
// if not vehicle or not factory then
14802: LD_VAR 0 1
14806: NOT
14807: PUSH
14808: LD_VAR 0 2
14812: NOT
14813: OR
14814: IFFALSE 14818
// exit ;
14816: GO 15049
// if factoryWaypoints >= factory then
14818: LD_EXP 113
14822: PUSH
14823: LD_VAR 0 2
14827: GREATEREQUAL
14828: IFFALSE 15049
// if factoryWaypoints [ factory ] then
14830: LD_EXP 113
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: IFFALSE 15049
// begin if GetControl ( vehicle ) = control_manual then
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 263
14851: PUSH
14852: LD_INT 1
14854: EQUAL
14855: IFFALSE 14936
// begin driver := IsDrivenBy ( vehicle ) ;
14857: LD_ADDR_VAR 0 4
14861: PUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 311
14871: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14872: LD_VAR 0 4
14876: PPUSH
14877: LD_EXP 113
14881: PUSH
14882: LD_VAR 0 2
14886: ARRAY
14887: PUSH
14888: LD_INT 3
14890: ARRAY
14891: PPUSH
14892: LD_EXP 113
14896: PUSH
14897: LD_VAR 0 2
14901: ARRAY
14902: PUSH
14903: LD_INT 4
14905: ARRAY
14906: PPUSH
14907: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14911: LD_VAR 0 4
14915: PPUSH
14916: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14920: LD_VAR 0 4
14924: PPUSH
14925: LD_VAR 0 2
14929: PPUSH
14930: CALL_OW 180
// end else
14934: GO 15049
// if GetControl ( vehicle ) = control_remote then
14936: LD_VAR 0 1
14940: PPUSH
14941: CALL_OW 263
14945: PUSH
14946: LD_INT 2
14948: EQUAL
14949: IFFALSE 15010
// begin wait ( 0 0$2 ) ;
14951: LD_INT 70
14953: PPUSH
14954: CALL_OW 67
// if Connect ( vehicle ) then
14958: LD_VAR 0 1
14962: PPUSH
14963: CALL 42867 0 1
14967: IFFALSE 15008
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14969: LD_VAR 0 1
14973: PPUSH
14974: LD_EXP 113
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: PUSH
14985: LD_INT 3
14987: ARRAY
14988: PPUSH
14989: LD_EXP 113
14993: PUSH
14994: LD_VAR 0 2
14998: ARRAY
14999: PUSH
15000: LD_INT 4
15002: ARRAY
15003: PPUSH
15004: CALL_OW 171
// end else
15008: GO 15049
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15010: LD_VAR 0 1
15014: PPUSH
15015: LD_EXP 113
15019: PUSH
15020: LD_VAR 0 2
15024: ARRAY
15025: PUSH
15026: LD_INT 3
15028: ARRAY
15029: PPUSH
15030: LD_EXP 113
15034: PUSH
15035: LD_VAR 0 2
15039: ARRAY
15040: PUSH
15041: LD_INT 4
15043: ARRAY
15044: PPUSH
15045: CALL_OW 171
// end ; end ;
15049: LD_VAR 0 3
15053: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15054: LD_INT 0
15056: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15057: LD_VAR 0 1
15061: PUSH
15062: LD_INT 250
15064: EQUAL
15065: PUSH
15066: LD_VAR 0 2
15070: PPUSH
15071: CALL_OW 264
15075: PUSH
15076: LD_INT 81
15078: EQUAL
15079: AND
15080: IFFALSE 15101
// MinerPlaceMine ( unit , x , y ) ;
15082: LD_VAR 0 2
15086: PPUSH
15087: LD_VAR 0 4
15091: PPUSH
15092: LD_VAR 0 5
15096: PPUSH
15097: CALL 17486 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15101: LD_VAR 0 1
15105: PUSH
15106: LD_INT 251
15108: EQUAL
15109: PUSH
15110: LD_VAR 0 2
15114: PPUSH
15115: CALL_OW 264
15119: PUSH
15120: LD_INT 81
15122: EQUAL
15123: AND
15124: IFFALSE 15145
// MinerDetonateMine ( unit , x , y ) ;
15126: LD_VAR 0 2
15130: PPUSH
15131: LD_VAR 0 4
15135: PPUSH
15136: LD_VAR 0 5
15140: PPUSH
15141: CALL 17761 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15145: LD_VAR 0 1
15149: PUSH
15150: LD_INT 252
15152: EQUAL
15153: PUSH
15154: LD_VAR 0 2
15158: PPUSH
15159: CALL_OW 264
15163: PUSH
15164: LD_INT 81
15166: EQUAL
15167: AND
15168: IFFALSE 15189
// MinerCreateMinefield ( unit , x , y ) ;
15170: LD_VAR 0 2
15174: PPUSH
15175: LD_VAR 0 4
15179: PPUSH
15180: LD_VAR 0 5
15184: PPUSH
15185: CALL 18178 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15189: LD_VAR 0 1
15193: PUSH
15194: LD_INT 253
15196: EQUAL
15197: PUSH
15198: LD_VAR 0 2
15202: PPUSH
15203: CALL_OW 257
15207: PUSH
15208: LD_INT 5
15210: EQUAL
15211: AND
15212: IFFALSE 15233
// ComBinocular ( unit , x , y ) ;
15214: LD_VAR 0 2
15218: PPUSH
15219: LD_VAR 0 4
15223: PPUSH
15224: LD_VAR 0 5
15228: PPUSH
15229: CALL 18547 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15233: LD_VAR 0 1
15237: PUSH
15238: LD_INT 254
15240: EQUAL
15241: PUSH
15242: LD_VAR 0 2
15246: PPUSH
15247: CALL_OW 264
15251: PUSH
15252: LD_INT 99
15254: EQUAL
15255: AND
15256: PUSH
15257: LD_VAR 0 3
15261: PPUSH
15262: CALL_OW 263
15266: PUSH
15267: LD_INT 3
15269: EQUAL
15270: AND
15271: IFFALSE 15287
// HackDestroyVehicle ( unit , selectedUnit ) ;
15273: LD_VAR 0 2
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: CALL 16850 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15287: LD_VAR 0 1
15291: PUSH
15292: LD_INT 255
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 2
15300: PPUSH
15301: CALL_OW 264
15305: PUSH
15306: LD_INT 14
15308: PUSH
15309: LD_INT 53
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: IN
15316: AND
15317: PUSH
15318: LD_VAR 0 4
15322: PPUSH
15323: LD_VAR 0 5
15327: PPUSH
15328: CALL_OW 488
15332: AND
15333: IFFALSE 15357
// CutTreeXYR ( unit , x , y , 12 ) ;
15335: LD_VAR 0 2
15339: PPUSH
15340: LD_VAR 0 4
15344: PPUSH
15345: LD_VAR 0 5
15349: PPUSH
15350: LD_INT 12
15352: PPUSH
15353: CALL 15420 0 4
// if cmd = 256 then
15357: LD_VAR 0 1
15361: PUSH
15362: LD_INT 256
15364: EQUAL
15365: IFFALSE 15386
// SetFactoryWaypoint ( unit , x , y ) ;
15367: LD_VAR 0 2
15371: PPUSH
15372: LD_VAR 0 4
15376: PPUSH
15377: LD_VAR 0 5
15381: PPUSH
15382: CALL 33450 0 3
// if cmd = 257 then
15386: LD_VAR 0 1
15390: PUSH
15391: LD_INT 257
15393: EQUAL
15394: IFFALSE 15415
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15396: LD_VAR 0 2
15400: PPUSH
15401: LD_VAR 0 4
15405: PPUSH
15406: LD_VAR 0 5
15410: PPUSH
15411: CALL 33812 0 3
// end ;
15415: LD_VAR 0 6
15419: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15420: LD_INT 0
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15431: LD_VAR 0 1
15435: NOT
15436: PUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: LD_VAR 0 3
15446: PPUSH
15447: CALL_OW 488
15451: NOT
15452: OR
15453: PUSH
15454: LD_VAR 0 4
15458: NOT
15459: OR
15460: IFFALSE 15464
// exit ;
15462: GO 15804
// list := [ ] ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: EMPTY
15470: ST_TO_ADDR
// if x - r < 0 then
15471: LD_VAR 0 2
15475: PUSH
15476: LD_VAR 0 4
15480: MINUS
15481: PUSH
15482: LD_INT 0
15484: LESS
15485: IFFALSE 15497
// min_x := 0 else
15487: LD_ADDR_VAR 0 7
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
15495: GO 15513
// min_x := x - r ;
15497: LD_ADDR_VAR 0 7
15501: PUSH
15502: LD_VAR 0 2
15506: PUSH
15507: LD_VAR 0 4
15511: MINUS
15512: ST_TO_ADDR
// if y - r < 0 then
15513: LD_VAR 0 3
15517: PUSH
15518: LD_VAR 0 4
15522: MINUS
15523: PUSH
15524: LD_INT 0
15526: LESS
15527: IFFALSE 15539
// min_y := 0 else
15529: LD_ADDR_VAR 0 8
15533: PUSH
15534: LD_INT 0
15536: ST_TO_ADDR
15537: GO 15555
// min_y := y - r ;
15539: LD_ADDR_VAR 0 8
15543: PUSH
15544: LD_VAR 0 3
15548: PUSH
15549: LD_VAR 0 4
15553: MINUS
15554: ST_TO_ADDR
// max_x := x + r ;
15555: LD_ADDR_VAR 0 9
15559: PUSH
15560: LD_VAR 0 2
15564: PUSH
15565: LD_VAR 0 4
15569: PLUS
15570: ST_TO_ADDR
// max_y := y + r ;
15571: LD_ADDR_VAR 0 10
15575: PUSH
15576: LD_VAR 0 3
15580: PUSH
15581: LD_VAR 0 4
15585: PLUS
15586: ST_TO_ADDR
// for _x = min_x to max_x do
15587: LD_ADDR_VAR 0 11
15591: PUSH
15592: DOUBLE
15593: LD_VAR 0 7
15597: DEC
15598: ST_TO_ADDR
15599: LD_VAR 0 9
15603: PUSH
15604: FOR_TO
15605: IFFALSE 15722
// for _y = min_y to max_y do
15607: LD_ADDR_VAR 0 12
15611: PUSH
15612: DOUBLE
15613: LD_VAR 0 8
15617: DEC
15618: ST_TO_ADDR
15619: LD_VAR 0 10
15623: PUSH
15624: FOR_TO
15625: IFFALSE 15718
// begin if not ValidHex ( _x , _y ) then
15627: LD_VAR 0 11
15631: PPUSH
15632: LD_VAR 0 12
15636: PPUSH
15637: CALL_OW 488
15641: NOT
15642: IFFALSE 15646
// continue ;
15644: GO 15624
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15646: LD_VAR 0 11
15650: PPUSH
15651: LD_VAR 0 12
15655: PPUSH
15656: CALL_OW 351
15660: PUSH
15661: LD_VAR 0 11
15665: PPUSH
15666: LD_VAR 0 12
15670: PPUSH
15671: CALL_OW 554
15675: AND
15676: IFFALSE 15716
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15678: LD_ADDR_VAR 0 13
15682: PUSH
15683: LD_VAR 0 13
15687: PPUSH
15688: LD_VAR 0 13
15692: PUSH
15693: LD_INT 1
15695: PLUS
15696: PPUSH
15697: LD_VAR 0 11
15701: PUSH
15702: LD_VAR 0 12
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 2
15715: ST_TO_ADDR
// end ;
15716: GO 15624
15718: POP
15719: POP
15720: GO 15604
15722: POP
15723: POP
// if not list then
15724: LD_VAR 0 13
15728: NOT
15729: IFFALSE 15733
// exit ;
15731: GO 15804
// for i in list do
15733: LD_ADDR_VAR 0 6
15737: PUSH
15738: LD_VAR 0 13
15742: PUSH
15743: FOR_IN
15744: IFFALSE 15802
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_STRING M
15753: PUSH
15754: LD_VAR 0 6
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: PUSH
15763: LD_VAR 0 6
15767: PUSH
15768: LD_INT 2
15770: ARRAY
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: LD_INT 0
15780: PUSH
15781: LD_INT 0
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: PPUSH
15796: CALL_OW 447
15800: GO 15743
15802: POP
15803: POP
// end ;
15804: LD_VAR 0 5
15808: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15809: LD_EXP 44
15813: NOT
15814: IFFALSE 15864
15816: GO 15818
15818: DISABLE
// begin initHack := true ;
15819: LD_ADDR_EXP 44
15823: PUSH
15824: LD_INT 1
15826: ST_TO_ADDR
// hackTanks := [ ] ;
15827: LD_ADDR_EXP 45
15831: PUSH
15832: EMPTY
15833: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15834: LD_ADDR_EXP 46
15838: PUSH
15839: EMPTY
15840: ST_TO_ADDR
// hackLimit := 3 ;
15841: LD_ADDR_EXP 47
15845: PUSH
15846: LD_INT 3
15848: ST_TO_ADDR
// hackDist := 12 ;
15849: LD_ADDR_EXP 48
15853: PUSH
15854: LD_INT 12
15856: ST_TO_ADDR
// hackCounter := [ ] ;
15857: LD_ADDR_EXP 49
15861: PUSH
15862: EMPTY
15863: ST_TO_ADDR
// end ;
15864: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15865: LD_EXP 44
15869: PUSH
15870: LD_INT 34
15872: PUSH
15873: LD_INT 99
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PPUSH
15880: CALL_OW 69
15884: AND
15885: IFFALSE 16138
15887: GO 15889
15889: DISABLE
15890: LD_INT 0
15892: PPUSH
15893: PPUSH
// begin enable ;
15894: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15895: LD_ADDR_VAR 0 1
15899: PUSH
15900: LD_INT 34
15902: PUSH
15903: LD_INT 99
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PPUSH
15910: CALL_OW 69
15914: PUSH
15915: FOR_IN
15916: IFFALSE 16136
// begin if not i in hackTanks then
15918: LD_VAR 0 1
15922: PUSH
15923: LD_EXP 45
15927: IN
15928: NOT
15929: IFFALSE 16012
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15931: LD_ADDR_EXP 45
15935: PUSH
15936: LD_EXP 45
15940: PPUSH
15941: LD_EXP 45
15945: PUSH
15946: LD_INT 1
15948: PLUS
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 1
15959: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15960: LD_ADDR_EXP 46
15964: PUSH
15965: LD_EXP 46
15969: PPUSH
15970: LD_EXP 46
15974: PUSH
15975: LD_INT 1
15977: PLUS
15978: PPUSH
15979: EMPTY
15980: PPUSH
15981: CALL_OW 1
15985: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15986: LD_ADDR_EXP 49
15990: PUSH
15991: LD_EXP 49
15995: PPUSH
15996: LD_EXP 49
16000: PUSH
16001: LD_INT 1
16003: PLUS
16004: PPUSH
16005: EMPTY
16006: PPUSH
16007: CALL_OW 1
16011: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 302
16021: NOT
16022: IFFALSE 16035
// begin HackUnlinkAll ( i ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL 16141 0 1
// continue ;
16033: GO 15915
// end ; HackCheckCapturedStatus ( i ) ;
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL 16584 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16044: LD_ADDR_VAR 0 2
16048: PUSH
16049: LD_INT 81
16051: PUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 255
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 33
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 91
16078: PUSH
16079: LD_VAR 0 1
16083: PUSH
16084: LD_EXP 48
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 50
16096: PUSH
16097: EMPTY
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: PPUSH
16106: CALL_OW 69
16110: ST_TO_ADDR
// if not tmp then
16111: LD_VAR 0 2
16115: NOT
16116: IFFALSE 16120
// continue ;
16118: GO 15915
// HackLink ( i , tmp ) ;
16120: LD_VAR 0 1
16124: PPUSH
16125: LD_VAR 0 2
16129: PPUSH
16130: CALL 16277 0 2
// end ;
16134: GO 15915
16136: POP
16137: POP
// end ;
16138: PPOPN 2
16140: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16141: LD_INT 0
16143: PPUSH
16144: PPUSH
16145: PPUSH
// if not hack in hackTanks then
16146: LD_VAR 0 1
16150: PUSH
16151: LD_EXP 45
16155: IN
16156: NOT
16157: IFFALSE 16161
// exit ;
16159: GO 16272
// index := GetElementIndex ( hackTanks , hack ) ;
16161: LD_ADDR_VAR 0 4
16165: PUSH
16166: LD_EXP 45
16170: PPUSH
16171: LD_VAR 0 1
16175: PPUSH
16176: CALL 39683 0 2
16180: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16181: LD_EXP 46
16185: PUSH
16186: LD_VAR 0 4
16190: ARRAY
16191: IFFALSE 16272
// begin for i in hackTanksCaptured [ index ] do
16193: LD_ADDR_VAR 0 3
16197: PUSH
16198: LD_EXP 46
16202: PUSH
16203: LD_VAR 0 4
16207: ARRAY
16208: PUSH
16209: FOR_IN
16210: IFFALSE 16236
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16212: LD_VAR 0 3
16216: PUSH
16217: LD_INT 1
16219: ARRAY
16220: PPUSH
16221: LD_VAR 0 3
16225: PUSH
16226: LD_INT 2
16228: ARRAY
16229: PPUSH
16230: CALL_OW 235
16234: GO 16209
16236: POP
16237: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16238: LD_ADDR_EXP 46
16242: PUSH
16243: LD_EXP 46
16247: PPUSH
16248: LD_VAR 0 4
16252: PPUSH
16253: EMPTY
16254: PPUSH
16255: CALL_OW 1
16259: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16260: LD_VAR 0 1
16264: PPUSH
16265: LD_INT 0
16267: PPUSH
16268: CALL_OW 505
// end ; end ;
16272: LD_VAR 0 2
16276: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16277: LD_INT 0
16279: PPUSH
16280: PPUSH
16281: PPUSH
// if not hack in hackTanks or not vehicles then
16282: LD_VAR 0 1
16286: PUSH
16287: LD_EXP 45
16291: IN
16292: NOT
16293: PUSH
16294: LD_VAR 0 2
16298: NOT
16299: OR
16300: IFFALSE 16304
// exit ;
16302: GO 16579
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16304: LD_ADDR_VAR 0 2
16308: PUSH
16309: LD_VAR 0 1
16313: PPUSH
16314: LD_VAR 0 2
16318: PPUSH
16319: LD_INT 1
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: CALL 40333 0 4
16329: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16330: LD_ADDR_VAR 0 5
16334: PUSH
16335: LD_EXP 45
16339: PPUSH
16340: LD_VAR 0 1
16344: PPUSH
16345: CALL 39683 0 2
16349: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16350: LD_EXP 46
16354: PUSH
16355: LD_VAR 0 5
16359: ARRAY
16360: PUSH
16361: LD_EXP 47
16365: LESS
16366: IFFALSE 16555
// begin for i := 1 to vehicles do
16368: LD_ADDR_VAR 0 4
16372: PUSH
16373: DOUBLE
16374: LD_INT 1
16376: DEC
16377: ST_TO_ADDR
16378: LD_VAR 0 2
16382: PUSH
16383: FOR_TO
16384: IFFALSE 16553
// begin if hackTanksCaptured [ index ] = hackLimit then
16386: LD_EXP 46
16390: PUSH
16391: LD_VAR 0 5
16395: ARRAY
16396: PUSH
16397: LD_EXP 47
16401: EQUAL
16402: IFFALSE 16406
// break ;
16404: GO 16553
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16406: LD_ADDR_EXP 49
16410: PUSH
16411: LD_EXP 49
16415: PPUSH
16416: LD_VAR 0 5
16420: PPUSH
16421: LD_EXP 49
16425: PUSH
16426: LD_VAR 0 5
16430: ARRAY
16431: PUSH
16432: LD_INT 1
16434: PLUS
16435: PPUSH
16436: CALL_OW 1
16440: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16441: LD_ADDR_EXP 46
16445: PUSH
16446: LD_EXP 46
16450: PPUSH
16451: LD_VAR 0 5
16455: PUSH
16456: LD_EXP 46
16460: PUSH
16461: LD_VAR 0 5
16465: ARRAY
16466: PUSH
16467: LD_INT 1
16469: PLUS
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PPUSH
16475: LD_VAR 0 2
16479: PUSH
16480: LD_VAR 0 4
16484: ARRAY
16485: PUSH
16486: LD_VAR 0 2
16490: PUSH
16491: LD_VAR 0 4
16495: ARRAY
16496: PPUSH
16497: CALL_OW 255
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PPUSH
16506: CALL 39898 0 3
16510: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16511: LD_VAR 0 2
16515: PUSH
16516: LD_VAR 0 4
16520: ARRAY
16521: PPUSH
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 255
16531: PPUSH
16532: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16536: LD_VAR 0 2
16540: PUSH
16541: LD_VAR 0 4
16545: ARRAY
16546: PPUSH
16547: CALL_OW 141
// end ;
16551: GO 16383
16553: POP
16554: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16555: LD_VAR 0 1
16559: PPUSH
16560: LD_EXP 46
16564: PUSH
16565: LD_VAR 0 5
16569: ARRAY
16570: PUSH
16571: LD_INT 0
16573: PLUS
16574: PPUSH
16575: CALL_OW 505
// end ;
16579: LD_VAR 0 3
16583: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
// if not hack in hackTanks then
16590: LD_VAR 0 1
16594: PUSH
16595: LD_EXP 45
16599: IN
16600: NOT
16601: IFFALSE 16605
// exit ;
16603: GO 16845
// index := GetElementIndex ( hackTanks , hack ) ;
16605: LD_ADDR_VAR 0 4
16609: PUSH
16610: LD_EXP 45
16614: PPUSH
16615: LD_VAR 0 1
16619: PPUSH
16620: CALL 39683 0 2
16624: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16625: LD_ADDR_VAR 0 3
16629: PUSH
16630: DOUBLE
16631: LD_EXP 46
16635: PUSH
16636: LD_VAR 0 4
16640: ARRAY
16641: INC
16642: ST_TO_ADDR
16643: LD_INT 1
16645: PUSH
16646: FOR_DOWNTO
16647: IFFALSE 16819
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16649: LD_ADDR_VAR 0 5
16653: PUSH
16654: LD_EXP 46
16658: PUSH
16659: LD_VAR 0 4
16663: ARRAY
16664: PUSH
16665: LD_VAR 0 3
16669: ARRAY
16670: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16671: LD_VAR 0 5
16675: PUSH
16676: LD_INT 1
16678: ARRAY
16679: PPUSH
16680: CALL_OW 302
16684: NOT
16685: PUSH
16686: LD_VAR 0 5
16690: PUSH
16691: LD_INT 1
16693: ARRAY
16694: PPUSH
16695: CALL_OW 255
16699: PUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 255
16709: NONEQUAL
16710: OR
16711: IFFALSE 16817
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16713: LD_VAR 0 5
16717: PUSH
16718: LD_INT 1
16720: ARRAY
16721: PPUSH
16722: CALL_OW 305
16726: PUSH
16727: LD_VAR 0 5
16731: PUSH
16732: LD_INT 1
16734: ARRAY
16735: PPUSH
16736: CALL_OW 255
16740: PUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 255
16750: EQUAL
16751: AND
16752: IFFALSE 16776
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16754: LD_VAR 0 5
16758: PUSH
16759: LD_INT 1
16761: ARRAY
16762: PPUSH
16763: LD_VAR 0 5
16767: PUSH
16768: LD_INT 2
16770: ARRAY
16771: PPUSH
16772: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16776: LD_ADDR_EXP 46
16780: PUSH
16781: LD_EXP 46
16785: PPUSH
16786: LD_VAR 0 4
16790: PPUSH
16791: LD_EXP 46
16795: PUSH
16796: LD_VAR 0 4
16800: ARRAY
16801: PPUSH
16802: LD_VAR 0 3
16806: PPUSH
16807: CALL_OW 3
16811: PPUSH
16812: CALL_OW 1
16816: ST_TO_ADDR
// end ; end ;
16817: GO 16646
16819: POP
16820: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_EXP 46
16830: PUSH
16831: LD_VAR 0 4
16835: ARRAY
16836: PUSH
16837: LD_INT 0
16839: PLUS
16840: PPUSH
16841: CALL_OW 505
// end ;
16845: LD_VAR 0 2
16849: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16850: LD_INT 0
16852: PPUSH
16853: PPUSH
16854: PPUSH
16855: PPUSH
// if not hack in hackTanks then
16856: LD_VAR 0 1
16860: PUSH
16861: LD_EXP 45
16865: IN
16866: NOT
16867: IFFALSE 16871
// exit ;
16869: GO 16956
// index := GetElementIndex ( hackTanks , hack ) ;
16871: LD_ADDR_VAR 0 5
16875: PUSH
16876: LD_EXP 45
16880: PPUSH
16881: LD_VAR 0 1
16885: PPUSH
16886: CALL 39683 0 2
16890: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16891: LD_ADDR_VAR 0 4
16895: PUSH
16896: DOUBLE
16897: LD_INT 1
16899: DEC
16900: ST_TO_ADDR
16901: LD_EXP 46
16905: PUSH
16906: LD_VAR 0 5
16910: ARRAY
16911: PUSH
16912: FOR_TO
16913: IFFALSE 16954
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16915: LD_EXP 46
16919: PUSH
16920: LD_VAR 0 5
16924: ARRAY
16925: PUSH
16926: LD_VAR 0 4
16930: ARRAY
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PUSH
16936: LD_VAR 0 2
16940: EQUAL
16941: IFFALSE 16952
// KillUnit ( vehicle ) ;
16943: LD_VAR 0 2
16947: PPUSH
16948: CALL_OW 66
16952: GO 16912
16954: POP
16955: POP
// end ;
16956: LD_VAR 0 3
16960: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16961: LD_EXP 50
16965: NOT
16966: IFFALSE 17001
16968: GO 16970
16970: DISABLE
// begin initMiner := true ;
16971: LD_ADDR_EXP 50
16975: PUSH
16976: LD_INT 1
16978: ST_TO_ADDR
// minersList := [ ] ;
16979: LD_ADDR_EXP 51
16983: PUSH
16984: EMPTY
16985: ST_TO_ADDR
// minerMinesList := [ ] ;
16986: LD_ADDR_EXP 52
16990: PUSH
16991: EMPTY
16992: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16993: LD_ADDR_EXP 53
16997: PUSH
16998: LD_INT 5
17000: ST_TO_ADDR
// end ;
17001: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17002: LD_EXP 50
17006: PUSH
17007: LD_INT 34
17009: PUSH
17010: LD_INT 81
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: AND
17022: IFFALSE 17483
17024: GO 17026
17026: DISABLE
17027: LD_INT 0
17029: PPUSH
17030: PPUSH
17031: PPUSH
17032: PPUSH
// begin enable ;
17033: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 34
17041: PUSH
17042: LD_INT 81
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 69
17053: PUSH
17054: FOR_IN
17055: IFFALSE 17127
// begin if not i in minersList then
17057: LD_VAR 0 1
17061: PUSH
17062: LD_EXP 51
17066: IN
17067: NOT
17068: IFFALSE 17125
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17070: LD_ADDR_EXP 51
17074: PUSH
17075: LD_EXP 51
17079: PPUSH
17080: LD_EXP 51
17084: PUSH
17085: LD_INT 1
17087: PLUS
17088: PPUSH
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 1
17098: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17099: LD_ADDR_EXP 52
17103: PUSH
17104: LD_EXP 52
17108: PPUSH
17109: LD_EXP 52
17113: PUSH
17114: LD_INT 1
17116: PLUS
17117: PPUSH
17118: EMPTY
17119: PPUSH
17120: CALL_OW 1
17124: ST_TO_ADDR
// end end ;
17125: GO 17054
17127: POP
17128: POP
// for i := minerMinesList downto 1 do
17129: LD_ADDR_VAR 0 1
17133: PUSH
17134: DOUBLE
17135: LD_EXP 52
17139: INC
17140: ST_TO_ADDR
17141: LD_INT 1
17143: PUSH
17144: FOR_DOWNTO
17145: IFFALSE 17481
// begin if IsLive ( minersList [ i ] ) then
17147: LD_EXP 51
17151: PUSH
17152: LD_VAR 0 1
17156: ARRAY
17157: PPUSH
17158: CALL_OW 300
17162: IFFALSE 17190
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17164: LD_EXP 51
17168: PUSH
17169: LD_VAR 0 1
17173: ARRAY
17174: PPUSH
17175: LD_EXP 52
17179: PUSH
17180: LD_VAR 0 1
17184: ARRAY
17185: PPUSH
17186: CALL_OW 505
// if not minerMinesList [ i ] then
17190: LD_EXP 52
17194: PUSH
17195: LD_VAR 0 1
17199: ARRAY
17200: NOT
17201: IFFALSE 17205
// continue ;
17203: GO 17144
// for j := minerMinesList [ i ] downto 1 do
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: DOUBLE
17211: LD_EXP 52
17215: PUSH
17216: LD_VAR 0 1
17220: ARRAY
17221: INC
17222: ST_TO_ADDR
17223: LD_INT 1
17225: PUSH
17226: FOR_DOWNTO
17227: IFFALSE 17477
// begin side := GetSide ( minersList [ i ] ) ;
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_EXP 51
17238: PUSH
17239: LD_VAR 0 1
17243: ARRAY
17244: PPUSH
17245: CALL_OW 255
17249: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17250: LD_ADDR_VAR 0 4
17254: PUSH
17255: LD_EXP 52
17259: PUSH
17260: LD_VAR 0 1
17264: ARRAY
17265: PUSH
17266: LD_VAR 0 2
17270: ARRAY
17271: PUSH
17272: LD_INT 1
17274: ARRAY
17275: PPUSH
17276: LD_EXP 52
17280: PUSH
17281: LD_VAR 0 1
17285: ARRAY
17286: PUSH
17287: LD_VAR 0 2
17291: ARRAY
17292: PUSH
17293: LD_INT 2
17295: ARRAY
17296: PPUSH
17297: CALL_OW 428
17301: ST_TO_ADDR
// if not tmp then
17302: LD_VAR 0 4
17306: NOT
17307: IFFALSE 17311
// continue ;
17309: GO 17226
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17311: LD_VAR 0 4
17315: PUSH
17316: LD_INT 81
17318: PUSH
17319: LD_VAR 0 3
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: IN
17333: PUSH
17334: LD_EXP 52
17338: PUSH
17339: LD_VAR 0 1
17343: ARRAY
17344: PUSH
17345: LD_VAR 0 2
17349: ARRAY
17350: PUSH
17351: LD_INT 1
17353: ARRAY
17354: PPUSH
17355: LD_EXP 52
17359: PUSH
17360: LD_VAR 0 1
17364: ARRAY
17365: PUSH
17366: LD_VAR 0 2
17370: ARRAY
17371: PUSH
17372: LD_INT 2
17374: ARRAY
17375: PPUSH
17376: CALL_OW 458
17380: AND
17381: IFFALSE 17475
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17383: LD_EXP 52
17387: PUSH
17388: LD_VAR 0 1
17392: ARRAY
17393: PUSH
17394: LD_VAR 0 2
17398: ARRAY
17399: PUSH
17400: LD_INT 1
17402: ARRAY
17403: PPUSH
17404: LD_EXP 52
17408: PUSH
17409: LD_VAR 0 1
17413: ARRAY
17414: PUSH
17415: LD_VAR 0 2
17419: ARRAY
17420: PUSH
17421: LD_INT 2
17423: ARRAY
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17434: LD_ADDR_EXP 52
17438: PUSH
17439: LD_EXP 52
17443: PPUSH
17444: LD_VAR 0 1
17448: PPUSH
17449: LD_EXP 52
17453: PUSH
17454: LD_VAR 0 1
17458: ARRAY
17459: PPUSH
17460: LD_VAR 0 2
17464: PPUSH
17465: CALL_OW 3
17469: PPUSH
17470: CALL_OW 1
17474: ST_TO_ADDR
// end ; end ;
17475: GO 17226
17477: POP
17478: POP
// end ;
17479: GO 17144
17481: POP
17482: POP
// end ;
17483: PPOPN 4
17485: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17486: LD_INT 0
17488: PPUSH
17489: PPUSH
// result := false ;
17490: LD_ADDR_VAR 0 4
17494: PUSH
17495: LD_INT 0
17497: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 264
17507: PUSH
17508: LD_INT 81
17510: EQUAL
17511: NOT
17512: IFFALSE 17516
// exit ;
17514: GO 17756
// index := GetElementIndex ( minersList , unit ) ;
17516: LD_ADDR_VAR 0 5
17520: PUSH
17521: LD_EXP 51
17525: PPUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: CALL 39683 0 2
17535: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17536: LD_EXP 52
17540: PUSH
17541: LD_VAR 0 5
17545: ARRAY
17546: PUSH
17547: LD_EXP 53
17551: GREATEREQUAL
17552: IFFALSE 17556
// exit ;
17554: GO 17756
// ComMoveXY ( unit , x , y ) ;
17556: LD_VAR 0 1
17560: PPUSH
17561: LD_VAR 0 2
17565: PPUSH
17566: LD_VAR 0 3
17570: PPUSH
17571: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17575: LD_INT 35
17577: PPUSH
17578: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17582: LD_VAR 0 1
17586: PPUSH
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_VAR 0 3
17596: PPUSH
17597: CALL 71038 0 3
17601: NOT
17602: PUSH
17603: LD_VAR 0 1
17607: PPUSH
17608: CALL_OW 314
17612: AND
17613: IFFALSE 17617
// exit ;
17615: GO 17756
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_VAR 0 3
17626: PPUSH
17627: CALL_OW 428
17631: PUSH
17632: LD_VAR 0 1
17636: EQUAL
17637: PUSH
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 314
17647: NOT
17648: AND
17649: IFFALSE 17575
// PlaySoundXY ( x , y , PlantMine ) ;
17651: LD_VAR 0 2
17655: PPUSH
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_STRING PlantMine
17663: PPUSH
17664: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17668: LD_VAR 0 2
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_VAR 0 1
17682: PPUSH
17683: CALL_OW 255
17687: PPUSH
17688: LD_INT 0
17690: PPUSH
17691: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17695: LD_ADDR_EXP 52
17699: PUSH
17700: LD_EXP 52
17704: PPUSH
17705: LD_VAR 0 5
17709: PUSH
17710: LD_EXP 52
17714: PUSH
17715: LD_VAR 0 5
17719: ARRAY
17720: PUSH
17721: LD_INT 1
17723: PLUS
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PPUSH
17729: LD_VAR 0 2
17733: PUSH
17734: LD_VAR 0 3
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PPUSH
17743: CALL 39898 0 3
17747: ST_TO_ADDR
// result := true ;
17748: LD_ADDR_VAR 0 4
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
// end ;
17756: LD_VAR 0 4
17760: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17761: LD_INT 0
17763: PPUSH
17764: PPUSH
17765: PPUSH
// if not unit in minersList then
17766: LD_VAR 0 1
17770: PUSH
17771: LD_EXP 51
17775: IN
17776: NOT
17777: IFFALSE 17781
// exit ;
17779: GO 18173
// index := GetElementIndex ( minersList , unit ) ;
17781: LD_ADDR_VAR 0 6
17785: PUSH
17786: LD_EXP 51
17790: PPUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: CALL 39683 0 2
17800: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17801: LD_ADDR_VAR 0 5
17805: PUSH
17806: DOUBLE
17807: LD_EXP 52
17811: PUSH
17812: LD_VAR 0 6
17816: ARRAY
17817: INC
17818: ST_TO_ADDR
17819: LD_INT 1
17821: PUSH
17822: FOR_DOWNTO
17823: IFFALSE 17984
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17825: LD_EXP 52
17829: PUSH
17830: LD_VAR 0 6
17834: ARRAY
17835: PUSH
17836: LD_VAR 0 5
17840: ARRAY
17841: PUSH
17842: LD_INT 1
17844: ARRAY
17845: PUSH
17846: LD_VAR 0 2
17850: EQUAL
17851: PUSH
17852: LD_EXP 52
17856: PUSH
17857: LD_VAR 0 6
17861: ARRAY
17862: PUSH
17863: LD_VAR 0 5
17867: ARRAY
17868: PUSH
17869: LD_INT 2
17871: ARRAY
17872: PUSH
17873: LD_VAR 0 3
17877: EQUAL
17878: AND
17879: IFFALSE 17982
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17881: LD_EXP 52
17885: PUSH
17886: LD_VAR 0 6
17890: ARRAY
17891: PUSH
17892: LD_VAR 0 5
17896: ARRAY
17897: PUSH
17898: LD_INT 1
17900: ARRAY
17901: PPUSH
17902: LD_EXP 52
17906: PUSH
17907: LD_VAR 0 6
17911: ARRAY
17912: PUSH
17913: LD_VAR 0 5
17917: ARRAY
17918: PUSH
17919: LD_INT 2
17921: ARRAY
17922: PPUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 255
17932: PPUSH
17933: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17937: LD_ADDR_EXP 52
17941: PUSH
17942: LD_EXP 52
17946: PPUSH
17947: LD_VAR 0 6
17951: PPUSH
17952: LD_EXP 52
17956: PUSH
17957: LD_VAR 0 6
17961: ARRAY
17962: PPUSH
17963: LD_VAR 0 5
17967: PPUSH
17968: CALL_OW 3
17972: PPUSH
17973: CALL_OW 1
17977: ST_TO_ADDR
// exit ;
17978: POP
17979: POP
17980: GO 18173
// end ; end ;
17982: GO 17822
17984: POP
17985: POP
// for i := minerMinesList [ index ] downto 1 do
17986: LD_ADDR_VAR 0 5
17990: PUSH
17991: DOUBLE
17992: LD_EXP 52
17996: PUSH
17997: LD_VAR 0 6
18001: ARRAY
18002: INC
18003: ST_TO_ADDR
18004: LD_INT 1
18006: PUSH
18007: FOR_DOWNTO
18008: IFFALSE 18171
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18010: LD_EXP 52
18014: PUSH
18015: LD_VAR 0 6
18019: ARRAY
18020: PUSH
18021: LD_VAR 0 5
18025: ARRAY
18026: PUSH
18027: LD_INT 1
18029: ARRAY
18030: PPUSH
18031: LD_EXP 52
18035: PUSH
18036: LD_VAR 0 6
18040: ARRAY
18041: PUSH
18042: LD_VAR 0 5
18046: ARRAY
18047: PUSH
18048: LD_INT 2
18050: ARRAY
18051: PPUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: CALL_OW 298
18066: PUSH
18067: LD_INT 6
18069: LESS
18070: IFFALSE 18169
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18072: LD_EXP 52
18076: PUSH
18077: LD_VAR 0 6
18081: ARRAY
18082: PUSH
18083: LD_VAR 0 5
18087: ARRAY
18088: PUSH
18089: LD_INT 1
18091: ARRAY
18092: PPUSH
18093: LD_EXP 52
18097: PUSH
18098: LD_VAR 0 6
18102: ARRAY
18103: PUSH
18104: LD_VAR 0 5
18108: ARRAY
18109: PUSH
18110: LD_INT 2
18112: ARRAY
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 255
18123: PPUSH
18124: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18128: LD_ADDR_EXP 52
18132: PUSH
18133: LD_EXP 52
18137: PPUSH
18138: LD_VAR 0 6
18142: PPUSH
18143: LD_EXP 52
18147: PUSH
18148: LD_VAR 0 6
18152: ARRAY
18153: PPUSH
18154: LD_VAR 0 5
18158: PPUSH
18159: CALL_OW 3
18163: PPUSH
18164: CALL_OW 1
18168: ST_TO_ADDR
// end ; end ;
18169: GO 18007
18171: POP
18172: POP
// end ;
18173: LD_VAR 0 4
18177: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18178: LD_INT 0
18180: PPUSH
18181: PPUSH
18182: PPUSH
18183: PPUSH
18184: PPUSH
18185: PPUSH
18186: PPUSH
18187: PPUSH
18188: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 264
18198: PUSH
18199: LD_INT 81
18201: EQUAL
18202: NOT
18203: PUSH
18204: LD_VAR 0 1
18208: PUSH
18209: LD_EXP 51
18213: IN
18214: NOT
18215: OR
18216: IFFALSE 18220
// exit ;
18218: GO 18542
// index := GetElementIndex ( minersList , unit ) ;
18220: LD_ADDR_VAR 0 6
18224: PUSH
18225: LD_EXP 51
18229: PPUSH
18230: LD_VAR 0 1
18234: PPUSH
18235: CALL 39683 0 2
18239: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18240: LD_ADDR_VAR 0 8
18244: PUSH
18245: LD_EXP 53
18249: PUSH
18250: LD_EXP 52
18254: PUSH
18255: LD_VAR 0 6
18259: ARRAY
18260: MINUS
18261: ST_TO_ADDR
// if not minesFreeAmount then
18262: LD_VAR 0 8
18266: NOT
18267: IFFALSE 18271
// exit ;
18269: GO 18542
// tmp := [ ] ;
18271: LD_ADDR_VAR 0 7
18275: PUSH
18276: EMPTY
18277: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18278: LD_ADDR_VAR 0 5
18282: PUSH
18283: DOUBLE
18284: LD_INT 1
18286: DEC
18287: ST_TO_ADDR
18288: LD_VAR 0 8
18292: PUSH
18293: FOR_TO
18294: IFFALSE 18489
// begin _d := rand ( 0 , 5 ) ;
18296: LD_ADDR_VAR 0 11
18300: PUSH
18301: LD_INT 0
18303: PPUSH
18304: LD_INT 5
18306: PPUSH
18307: CALL_OW 12
18311: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18312: LD_ADDR_VAR 0 12
18316: PUSH
18317: LD_INT 2
18319: PPUSH
18320: LD_INT 6
18322: PPUSH
18323: CALL_OW 12
18327: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18328: LD_ADDR_VAR 0 9
18332: PUSH
18333: LD_VAR 0 2
18337: PPUSH
18338: LD_VAR 0 11
18342: PPUSH
18343: LD_VAR 0 12
18347: PPUSH
18348: CALL_OW 272
18352: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18353: LD_ADDR_VAR 0 10
18357: PUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: LD_VAR 0 11
18367: PPUSH
18368: LD_VAR 0 12
18372: PPUSH
18373: CALL_OW 273
18377: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18378: LD_VAR 0 9
18382: PPUSH
18383: LD_VAR 0 10
18387: PPUSH
18388: CALL_OW 488
18392: PUSH
18393: LD_VAR 0 9
18397: PUSH
18398: LD_VAR 0 10
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_VAR 0 7
18411: IN
18412: NOT
18413: AND
18414: PUSH
18415: LD_VAR 0 9
18419: PPUSH
18420: LD_VAR 0 10
18424: PPUSH
18425: CALL_OW 458
18429: NOT
18430: AND
18431: IFFALSE 18473
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18433: LD_ADDR_VAR 0 7
18437: PUSH
18438: LD_VAR 0 7
18442: PPUSH
18443: LD_VAR 0 7
18447: PUSH
18448: LD_INT 1
18450: PLUS
18451: PPUSH
18452: LD_VAR 0 9
18456: PUSH
18457: LD_VAR 0 10
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PPUSH
18466: CALL_OW 1
18470: ST_TO_ADDR
18471: GO 18487
// i := i - 1 ;
18473: LD_ADDR_VAR 0 5
18477: PUSH
18478: LD_VAR 0 5
18482: PUSH
18483: LD_INT 1
18485: MINUS
18486: ST_TO_ADDR
// end ;
18487: GO 18293
18489: POP
18490: POP
// for i in tmp do
18491: LD_ADDR_VAR 0 5
18495: PUSH
18496: LD_VAR 0 7
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18540
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18504: LD_VAR 0 1
18508: PPUSH
18509: LD_VAR 0 5
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: LD_VAR 0 5
18522: PUSH
18523: LD_INT 2
18525: ARRAY
18526: PPUSH
18527: CALL 17486 0 3
18531: NOT
18532: IFFALSE 18538
// exit ;
18534: POP
18535: POP
18536: GO 18542
18538: GO 18501
18540: POP
18541: POP
// end ;
18542: LD_VAR 0 4
18546: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
// if not GetClass ( unit ) = class_sniper then
18556: LD_VAR 0 1
18560: PPUSH
18561: CALL_OW 257
18565: PUSH
18566: LD_INT 5
18568: EQUAL
18569: NOT
18570: IFFALSE 18574
// exit ;
18572: GO 18962
// dist := 8 ;
18574: LD_ADDR_VAR 0 5
18578: PUSH
18579: LD_INT 8
18581: ST_TO_ADDR
// viewRange := 12 ;
18582: LD_ADDR_VAR 0 7
18586: PUSH
18587: LD_INT 12
18589: ST_TO_ADDR
// side := GetSide ( unit ) ;
18590: LD_ADDR_VAR 0 6
18594: PUSH
18595: LD_VAR 0 1
18599: PPUSH
18600: CALL_OW 255
18604: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18605: LD_INT 61
18607: PPUSH
18608: LD_VAR 0 6
18612: PPUSH
18613: CALL_OW 321
18617: PUSH
18618: LD_INT 2
18620: EQUAL
18621: IFFALSE 18631
// viewRange := 16 ;
18623: LD_ADDR_VAR 0 7
18627: PUSH
18628: LD_INT 16
18630: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18631: LD_VAR 0 1
18635: PPUSH
18636: LD_VAR 0 2
18640: PPUSH
18641: LD_VAR 0 3
18645: PPUSH
18646: CALL_OW 297
18650: PUSH
18651: LD_VAR 0 5
18655: GREATER
18656: IFFALSE 18735
// begin ComMoveXY ( unit , x , y ) ;
18658: LD_VAR 0 1
18662: PPUSH
18663: LD_VAR 0 2
18667: PPUSH
18668: LD_VAR 0 3
18672: PPUSH
18673: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18677: LD_INT 35
18679: PPUSH
18680: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18684: LD_VAR 0 1
18688: PPUSH
18689: LD_VAR 0 2
18693: PPUSH
18694: LD_VAR 0 3
18698: PPUSH
18699: CALL 71038 0 3
18703: NOT
18704: IFFALSE 18708
// exit ;
18706: GO 18962
// until GetDistUnitXY ( unit , x , y ) < dist ;
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_VAR 0 2
18717: PPUSH
18718: LD_VAR 0 3
18722: PPUSH
18723: CALL_OW 297
18727: PUSH
18728: LD_VAR 0 5
18732: LESS
18733: IFFALSE 18677
// end ; ComTurnXY ( unit , x , y ) ;
18735: LD_VAR 0 1
18739: PPUSH
18740: LD_VAR 0 2
18744: PPUSH
18745: LD_VAR 0 3
18749: PPUSH
18750: CALL_OW 118
// wait ( 5 ) ;
18754: LD_INT 5
18756: PPUSH
18757: CALL_OW 67
// _d := GetDir ( unit ) ;
18761: LD_ADDR_VAR 0 10
18765: PUSH
18766: LD_VAR 0 1
18770: PPUSH
18771: CALL_OW 254
18775: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18776: LD_ADDR_VAR 0 8
18780: PUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 250
18790: PPUSH
18791: LD_VAR 0 10
18795: PPUSH
18796: LD_VAR 0 5
18800: PPUSH
18801: CALL_OW 272
18805: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18806: LD_ADDR_VAR 0 9
18810: PUSH
18811: LD_VAR 0 1
18815: PPUSH
18816: CALL_OW 251
18820: PPUSH
18821: LD_VAR 0 10
18825: PPUSH
18826: LD_VAR 0 5
18830: PPUSH
18831: CALL_OW 273
18835: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18836: LD_VAR 0 8
18840: PPUSH
18841: LD_VAR 0 9
18845: PPUSH
18846: CALL_OW 488
18850: NOT
18851: IFFALSE 18855
// exit ;
18853: GO 18962
// ComAnimCustom ( unit , 1 ) ;
18855: LD_VAR 0 1
18859: PPUSH
18860: LD_INT 1
18862: PPUSH
18863: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18867: LD_VAR 0 8
18871: PPUSH
18872: LD_VAR 0 9
18876: PPUSH
18877: LD_VAR 0 6
18881: PPUSH
18882: LD_VAR 0 7
18886: PPUSH
18887: CALL_OW 330
// repeat wait ( 1 ) ;
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 316
18907: PUSH
18908: LD_VAR 0 1
18912: PPUSH
18913: CALL_OW 314
18917: OR
18918: PUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 302
18928: NOT
18929: OR
18930: PUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 301
18940: OR
18941: IFFALSE 18891
// RemoveSeeing ( _x , _y , side ) ;
18943: LD_VAR 0 8
18947: PPUSH
18948: LD_VAR 0 9
18952: PPUSH
18953: LD_VAR 0 6
18957: PPUSH
18958: CALL_OW 331
// end ; end_of_file
18962: LD_VAR 0 4
18966: RET
// export globalGameSaveCounter ; every 0 0$1 do
18967: GO 18969
18969: DISABLE
// begin enable ;
18970: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18971: LD_STRING updateTimer(
18973: PUSH
18974: LD_OWVAR 1
18978: STR
18979: PUSH
18980: LD_STRING );
18982: STR
18983: PPUSH
18984: CALL_OW 559
// end ;
18988: END
// every 0 0$1 do
18989: GO 18991
18991: DISABLE
// begin globalGameSaveCounter := 0 ;
18992: LD_ADDR_EXP 54
18996: PUSH
18997: LD_INT 0
18999: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19000: LD_STRING setGameSaveCounter(0)
19002: PPUSH
19003: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19007: LD_STRING initStreamRollete();
19009: PPUSH
19010: CALL_OW 559
// InitStreamMode ;
19014: CALL 20340 0 0
// DefineStreamItems ( false ) ;
19018: LD_INT 0
19020: PPUSH
19021: CALL 20804 0 1
// end ;
19025: END
// export function SOS_MapStart ( ) ; begin
19026: LD_INT 0
19028: PPUSH
// if streamModeActive then
19029: LD_EXP 55
19033: IFFALSE 19042
// DefineStreamItems ( true ) ;
19035: LD_INT 1
19037: PPUSH
19038: CALL 20804 0 1
// UpdateLuaVariables ( ) ;
19042: CALL 19059 0 0
// UpdateFactoryWaypoints ( ) ;
19046: CALL 33665 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19050: CALL 33922 0 0
// end ;
19054: LD_VAR 0 1
19058: RET
// function UpdateLuaVariables ( ) ; begin
19059: LD_INT 0
19061: PPUSH
// if globalGameSaveCounter then
19062: LD_EXP 54
19066: IFFALSE 19100
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19068: LD_ADDR_EXP 54
19072: PUSH
19073: LD_EXP 54
19077: PPUSH
19078: CALL 73590 0 1
19082: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19083: LD_STRING setGameSaveCounter(
19085: PUSH
19086: LD_EXP 54
19090: STR
19091: PUSH
19092: LD_STRING )
19094: STR
19095: PPUSH
19096: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19100: LD_STRING setGameDifficulty(
19102: PUSH
19103: LD_OWVAR 67
19107: STR
19108: PUSH
19109: LD_STRING )
19111: STR
19112: PPUSH
19113: CALL_OW 559
// end ;
19117: LD_VAR 0 1
19121: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19122: LD_INT 0
19124: PPUSH
// if p2 = stream_mode then
19125: LD_VAR 0 2
19129: PUSH
19130: LD_INT 100
19132: EQUAL
19133: IFFALSE 20136
// begin if not StreamModeActive then
19135: LD_EXP 55
19139: NOT
19140: IFFALSE 19150
// StreamModeActive := true ;
19142: LD_ADDR_EXP 55
19146: PUSH
19147: LD_INT 1
19149: ST_TO_ADDR
// if p3 = 0 then
19150: LD_VAR 0 3
19154: PUSH
19155: LD_INT 0
19157: EQUAL
19158: IFFALSE 19164
// InitStreamMode ;
19160: CALL 20340 0 0
// if p3 = 1 then
19164: LD_VAR 0 3
19168: PUSH
19169: LD_INT 1
19171: EQUAL
19172: IFFALSE 19182
// sRocket := true ;
19174: LD_ADDR_EXP 60
19178: PUSH
19179: LD_INT 1
19181: ST_TO_ADDR
// if p3 = 2 then
19182: LD_VAR 0 3
19186: PUSH
19187: LD_INT 2
19189: EQUAL
19190: IFFALSE 19200
// sSpeed := true ;
19192: LD_ADDR_EXP 59
19196: PUSH
19197: LD_INT 1
19199: ST_TO_ADDR
// if p3 = 3 then
19200: LD_VAR 0 3
19204: PUSH
19205: LD_INT 3
19207: EQUAL
19208: IFFALSE 19218
// sEngine := true ;
19210: LD_ADDR_EXP 61
19214: PUSH
19215: LD_INT 1
19217: ST_TO_ADDR
// if p3 = 4 then
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 4
19225: EQUAL
19226: IFFALSE 19236
// sSpec := true ;
19228: LD_ADDR_EXP 58
19232: PUSH
19233: LD_INT 1
19235: ST_TO_ADDR
// if p3 = 5 then
19236: LD_VAR 0 3
19240: PUSH
19241: LD_INT 5
19243: EQUAL
19244: IFFALSE 19254
// sLevel := true ;
19246: LD_ADDR_EXP 62
19250: PUSH
19251: LD_INT 1
19253: ST_TO_ADDR
// if p3 = 6 then
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 6
19261: EQUAL
19262: IFFALSE 19272
// sArmoury := true ;
19264: LD_ADDR_EXP 63
19268: PUSH
19269: LD_INT 1
19271: ST_TO_ADDR
// if p3 = 7 then
19272: LD_VAR 0 3
19276: PUSH
19277: LD_INT 7
19279: EQUAL
19280: IFFALSE 19290
// sRadar := true ;
19282: LD_ADDR_EXP 64
19286: PUSH
19287: LD_INT 1
19289: ST_TO_ADDR
// if p3 = 8 then
19290: LD_VAR 0 3
19294: PUSH
19295: LD_INT 8
19297: EQUAL
19298: IFFALSE 19308
// sBunker := true ;
19300: LD_ADDR_EXP 65
19304: PUSH
19305: LD_INT 1
19307: ST_TO_ADDR
// if p3 = 9 then
19308: LD_VAR 0 3
19312: PUSH
19313: LD_INT 9
19315: EQUAL
19316: IFFALSE 19326
// sHack := true ;
19318: LD_ADDR_EXP 66
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// if p3 = 10 then
19326: LD_VAR 0 3
19330: PUSH
19331: LD_INT 10
19333: EQUAL
19334: IFFALSE 19344
// sFire := true ;
19336: LD_ADDR_EXP 67
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// if p3 = 11 then
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 11
19351: EQUAL
19352: IFFALSE 19362
// sRefresh := true ;
19354: LD_ADDR_EXP 68
19358: PUSH
19359: LD_INT 1
19361: ST_TO_ADDR
// if p3 = 12 then
19362: LD_VAR 0 3
19366: PUSH
19367: LD_INT 12
19369: EQUAL
19370: IFFALSE 19380
// sExp := true ;
19372: LD_ADDR_EXP 69
19376: PUSH
19377: LD_INT 1
19379: ST_TO_ADDR
// if p3 = 13 then
19380: LD_VAR 0 3
19384: PUSH
19385: LD_INT 13
19387: EQUAL
19388: IFFALSE 19398
// sDepot := true ;
19390: LD_ADDR_EXP 70
19394: PUSH
19395: LD_INT 1
19397: ST_TO_ADDR
// if p3 = 14 then
19398: LD_VAR 0 3
19402: PUSH
19403: LD_INT 14
19405: EQUAL
19406: IFFALSE 19416
// sFlag := true ;
19408: LD_ADDR_EXP 71
19412: PUSH
19413: LD_INT 1
19415: ST_TO_ADDR
// if p3 = 15 then
19416: LD_VAR 0 3
19420: PUSH
19421: LD_INT 15
19423: EQUAL
19424: IFFALSE 19434
// sKamikadze := true ;
19426: LD_ADDR_EXP 79
19430: PUSH
19431: LD_INT 1
19433: ST_TO_ADDR
// if p3 = 16 then
19434: LD_VAR 0 3
19438: PUSH
19439: LD_INT 16
19441: EQUAL
19442: IFFALSE 19452
// sTroll := true ;
19444: LD_ADDR_EXP 80
19448: PUSH
19449: LD_INT 1
19451: ST_TO_ADDR
// if p3 = 17 then
19452: LD_VAR 0 3
19456: PUSH
19457: LD_INT 17
19459: EQUAL
19460: IFFALSE 19470
// sSlow := true ;
19462: LD_ADDR_EXP 81
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// if p3 = 18 then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 18
19477: EQUAL
19478: IFFALSE 19488
// sLack := true ;
19480: LD_ADDR_EXP 82
19484: PUSH
19485: LD_INT 1
19487: ST_TO_ADDR
// if p3 = 19 then
19488: LD_VAR 0 3
19492: PUSH
19493: LD_INT 19
19495: EQUAL
19496: IFFALSE 19506
// sTank := true ;
19498: LD_ADDR_EXP 84
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// if p3 = 20 then
19506: LD_VAR 0 3
19510: PUSH
19511: LD_INT 20
19513: EQUAL
19514: IFFALSE 19524
// sRemote := true ;
19516: LD_ADDR_EXP 85
19520: PUSH
19521: LD_INT 1
19523: ST_TO_ADDR
// if p3 = 21 then
19524: LD_VAR 0 3
19528: PUSH
19529: LD_INT 21
19531: EQUAL
19532: IFFALSE 19542
// sPowell := true ;
19534: LD_ADDR_EXP 86
19538: PUSH
19539: LD_INT 1
19541: ST_TO_ADDR
// if p3 = 22 then
19542: LD_VAR 0 3
19546: PUSH
19547: LD_INT 22
19549: EQUAL
19550: IFFALSE 19560
// sTeleport := true ;
19552: LD_ADDR_EXP 89
19556: PUSH
19557: LD_INT 1
19559: ST_TO_ADDR
// if p3 = 23 then
19560: LD_VAR 0 3
19564: PUSH
19565: LD_INT 23
19567: EQUAL
19568: IFFALSE 19578
// sOilTower := true ;
19570: LD_ADDR_EXP 91
19574: PUSH
19575: LD_INT 1
19577: ST_TO_ADDR
// if p3 = 24 then
19578: LD_VAR 0 3
19582: PUSH
19583: LD_INT 24
19585: EQUAL
19586: IFFALSE 19596
// sShovel := true ;
19588: LD_ADDR_EXP 92
19592: PUSH
19593: LD_INT 1
19595: ST_TO_ADDR
// if p3 = 25 then
19596: LD_VAR 0 3
19600: PUSH
19601: LD_INT 25
19603: EQUAL
19604: IFFALSE 19614
// sSheik := true ;
19606: LD_ADDR_EXP 93
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// if p3 = 26 then
19614: LD_VAR 0 3
19618: PUSH
19619: LD_INT 26
19621: EQUAL
19622: IFFALSE 19632
// sEarthquake := true ;
19624: LD_ADDR_EXP 95
19628: PUSH
19629: LD_INT 1
19631: ST_TO_ADDR
// if p3 = 27 then
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 27
19639: EQUAL
19640: IFFALSE 19650
// sAI := true ;
19642: LD_ADDR_EXP 96
19646: PUSH
19647: LD_INT 1
19649: ST_TO_ADDR
// if p3 = 28 then
19650: LD_VAR 0 3
19654: PUSH
19655: LD_INT 28
19657: EQUAL
19658: IFFALSE 19668
// sCargo := true ;
19660: LD_ADDR_EXP 99
19664: PUSH
19665: LD_INT 1
19667: ST_TO_ADDR
// if p3 = 29 then
19668: LD_VAR 0 3
19672: PUSH
19673: LD_INT 29
19675: EQUAL
19676: IFFALSE 19686
// sDLaser := true ;
19678: LD_ADDR_EXP 100
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// if p3 = 30 then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_INT 30
19693: EQUAL
19694: IFFALSE 19704
// sExchange := true ;
19696: LD_ADDR_EXP 101
19700: PUSH
19701: LD_INT 1
19703: ST_TO_ADDR
// if p3 = 31 then
19704: LD_VAR 0 3
19708: PUSH
19709: LD_INT 31
19711: EQUAL
19712: IFFALSE 19722
// sFac := true ;
19714: LD_ADDR_EXP 102
19718: PUSH
19719: LD_INT 1
19721: ST_TO_ADDR
// if p3 = 32 then
19722: LD_VAR 0 3
19726: PUSH
19727: LD_INT 32
19729: EQUAL
19730: IFFALSE 19740
// sPower := true ;
19732: LD_ADDR_EXP 103
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// if p3 = 33 then
19740: LD_VAR 0 3
19744: PUSH
19745: LD_INT 33
19747: EQUAL
19748: IFFALSE 19758
// sRandom := true ;
19750: LD_ADDR_EXP 104
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// if p3 = 34 then
19758: LD_VAR 0 3
19762: PUSH
19763: LD_INT 34
19765: EQUAL
19766: IFFALSE 19776
// sShield := true ;
19768: LD_ADDR_EXP 105
19772: PUSH
19773: LD_INT 1
19775: ST_TO_ADDR
// if p3 = 35 then
19776: LD_VAR 0 3
19780: PUSH
19781: LD_INT 35
19783: EQUAL
19784: IFFALSE 19794
// sTime := true ;
19786: LD_ADDR_EXP 106
19790: PUSH
19791: LD_INT 1
19793: ST_TO_ADDR
// if p3 = 36 then
19794: LD_VAR 0 3
19798: PUSH
19799: LD_INT 36
19801: EQUAL
19802: IFFALSE 19812
// sTools := true ;
19804: LD_ADDR_EXP 107
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// if p3 = 101 then
19812: LD_VAR 0 3
19816: PUSH
19817: LD_INT 101
19819: EQUAL
19820: IFFALSE 19830
// sSold := true ;
19822: LD_ADDR_EXP 72
19826: PUSH
19827: LD_INT 1
19829: ST_TO_ADDR
// if p3 = 102 then
19830: LD_VAR 0 3
19834: PUSH
19835: LD_INT 102
19837: EQUAL
19838: IFFALSE 19848
// sDiff := true ;
19840: LD_ADDR_EXP 73
19844: PUSH
19845: LD_INT 1
19847: ST_TO_ADDR
// if p3 = 103 then
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 103
19855: EQUAL
19856: IFFALSE 19866
// sFog := true ;
19858: LD_ADDR_EXP 76
19862: PUSH
19863: LD_INT 1
19865: ST_TO_ADDR
// if p3 = 104 then
19866: LD_VAR 0 3
19870: PUSH
19871: LD_INT 104
19873: EQUAL
19874: IFFALSE 19884
// sReset := true ;
19876: LD_ADDR_EXP 77
19880: PUSH
19881: LD_INT 1
19883: ST_TO_ADDR
// if p3 = 105 then
19884: LD_VAR 0 3
19888: PUSH
19889: LD_INT 105
19891: EQUAL
19892: IFFALSE 19902
// sSun := true ;
19894: LD_ADDR_EXP 78
19898: PUSH
19899: LD_INT 1
19901: ST_TO_ADDR
// if p3 = 106 then
19902: LD_VAR 0 3
19906: PUSH
19907: LD_INT 106
19909: EQUAL
19910: IFFALSE 19920
// sTiger := true ;
19912: LD_ADDR_EXP 74
19916: PUSH
19917: LD_INT 1
19919: ST_TO_ADDR
// if p3 = 107 then
19920: LD_VAR 0 3
19924: PUSH
19925: LD_INT 107
19927: EQUAL
19928: IFFALSE 19938
// sBomb := true ;
19930: LD_ADDR_EXP 75
19934: PUSH
19935: LD_INT 1
19937: ST_TO_ADDR
// if p3 = 108 then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_INT 108
19945: EQUAL
19946: IFFALSE 19956
// sWound := true ;
19948: LD_ADDR_EXP 83
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// if p3 = 109 then
19956: LD_VAR 0 3
19960: PUSH
19961: LD_INT 109
19963: EQUAL
19964: IFFALSE 19974
// sBetray := true ;
19966: LD_ADDR_EXP 87
19970: PUSH
19971: LD_INT 1
19973: ST_TO_ADDR
// if p3 = 110 then
19974: LD_VAR 0 3
19978: PUSH
19979: LD_INT 110
19981: EQUAL
19982: IFFALSE 19992
// sContamin := true ;
19984: LD_ADDR_EXP 88
19988: PUSH
19989: LD_INT 1
19991: ST_TO_ADDR
// if p3 = 111 then
19992: LD_VAR 0 3
19996: PUSH
19997: LD_INT 111
19999: EQUAL
20000: IFFALSE 20010
// sOil := true ;
20002: LD_ADDR_EXP 90
20006: PUSH
20007: LD_INT 1
20009: ST_TO_ADDR
// if p3 = 112 then
20010: LD_VAR 0 3
20014: PUSH
20015: LD_INT 112
20017: EQUAL
20018: IFFALSE 20028
// sStu := true ;
20020: LD_ADDR_EXP 94
20024: PUSH
20025: LD_INT 1
20027: ST_TO_ADDR
// if p3 = 113 then
20028: LD_VAR 0 3
20032: PUSH
20033: LD_INT 113
20035: EQUAL
20036: IFFALSE 20046
// sBazooka := true ;
20038: LD_ADDR_EXP 97
20042: PUSH
20043: LD_INT 1
20045: ST_TO_ADDR
// if p3 = 114 then
20046: LD_VAR 0 3
20050: PUSH
20051: LD_INT 114
20053: EQUAL
20054: IFFALSE 20064
// sMortar := true ;
20056: LD_ADDR_EXP 98
20060: PUSH
20061: LD_INT 1
20063: ST_TO_ADDR
// if p3 = 115 then
20064: LD_VAR 0 3
20068: PUSH
20069: LD_INT 115
20071: EQUAL
20072: IFFALSE 20082
// sRanger := true ;
20074: LD_ADDR_EXP 108
20078: PUSH
20079: LD_INT 1
20081: ST_TO_ADDR
// if p3 = 116 then
20082: LD_VAR 0 3
20086: PUSH
20087: LD_INT 116
20089: EQUAL
20090: IFFALSE 20100
// sComputer := true ;
20092: LD_ADDR_EXP 109
20096: PUSH
20097: LD_INT 1
20099: ST_TO_ADDR
// if p3 = 117 then
20100: LD_VAR 0 3
20104: PUSH
20105: LD_INT 117
20107: EQUAL
20108: IFFALSE 20118
// s30 := true ;
20110: LD_ADDR_EXP 110
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// if p3 = 118 then
20118: LD_VAR 0 3
20122: PUSH
20123: LD_INT 118
20125: EQUAL
20126: IFFALSE 20136
// s60 := true ;
20128: LD_ADDR_EXP 111
20132: PUSH
20133: LD_INT 1
20135: ST_TO_ADDR
// end ; if p2 = hack_mode then
20136: LD_VAR 0 2
20140: PUSH
20141: LD_INT 101
20143: EQUAL
20144: IFFALSE 20272
// begin case p3 of 1 :
20146: LD_VAR 0 3
20150: PUSH
20151: LD_INT 1
20153: DOUBLE
20154: EQUAL
20155: IFTRUE 20159
20157: GO 20166
20159: POP
// hHackUnlimitedResources ; 2 :
20160: CALL 32411 0 0
20164: GO 20272
20166: LD_INT 2
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20181
20174: POP
// hHackSetLevel10 ; 3 :
20175: CALL 32544 0 0
20179: GO 20272
20181: LD_INT 3
20183: DOUBLE
20184: EQUAL
20185: IFTRUE 20189
20187: GO 20196
20189: POP
// hHackSetLevel10YourUnits ; 4 :
20190: CALL 32629 0 0
20194: GO 20272
20196: LD_INT 4
20198: DOUBLE
20199: EQUAL
20200: IFTRUE 20204
20202: GO 20211
20204: POP
// hHackInvincible ; 5 :
20205: CALL 33077 0 0
20209: GO 20272
20211: LD_INT 5
20213: DOUBLE
20214: EQUAL
20215: IFTRUE 20219
20217: GO 20226
20219: POP
// hHackInvisible ; 6 :
20220: CALL 33188 0 0
20224: GO 20272
20226: LD_INT 6
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20241
20234: POP
// hHackChangeYourSide ; 7 :
20235: CALL 33245 0 0
20239: GO 20272
20241: LD_INT 7
20243: DOUBLE
20244: EQUAL
20245: IFTRUE 20249
20247: GO 20256
20249: POP
// hHackChangeUnitSide ; 8 :
20250: CALL 33287 0 0
20254: GO 20272
20256: LD_INT 8
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20271
20264: POP
// hHackFog ; end ;
20265: CALL 33388 0 0
20269: GO 20272
20271: POP
// end ; if p2 = game_save_mode then
20272: LD_VAR 0 2
20276: PUSH
20277: LD_INT 102
20279: EQUAL
20280: IFFALSE 20335
// begin if p3 = 1 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 1
20289: EQUAL
20290: IFFALSE 20302
// globalGameSaveCounter := p4 ;
20292: LD_ADDR_EXP 54
20296: PUSH
20297: LD_VAR 0 4
20301: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 2
20309: EQUAL
20310: PUSH
20311: LD_EXP 54
20315: AND
20316: IFFALSE 20335
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20318: LD_STRING setGameSaveCounter(
20320: PUSH
20321: LD_EXP 54
20325: STR
20326: PUSH
20327: LD_STRING )
20329: STR
20330: PPUSH
20331: CALL_OW 559
// end ; end ;
20335: LD_VAR 0 7
20339: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20340: LD_INT 0
20342: PPUSH
// streamModeActive := false ;
20343: LD_ADDR_EXP 55
20347: PUSH
20348: LD_INT 0
20350: ST_TO_ADDR
// normalCounter := 36 ;
20351: LD_ADDR_EXP 56
20355: PUSH
20356: LD_INT 36
20358: ST_TO_ADDR
// hardcoreCounter := 18 ;
20359: LD_ADDR_EXP 57
20363: PUSH
20364: LD_INT 18
20366: ST_TO_ADDR
// sRocket := false ;
20367: LD_ADDR_EXP 60
20371: PUSH
20372: LD_INT 0
20374: ST_TO_ADDR
// sSpeed := false ;
20375: LD_ADDR_EXP 59
20379: PUSH
20380: LD_INT 0
20382: ST_TO_ADDR
// sEngine := false ;
20383: LD_ADDR_EXP 61
20387: PUSH
20388: LD_INT 0
20390: ST_TO_ADDR
// sSpec := false ;
20391: LD_ADDR_EXP 58
20395: PUSH
20396: LD_INT 0
20398: ST_TO_ADDR
// sLevel := false ;
20399: LD_ADDR_EXP 62
20403: PUSH
20404: LD_INT 0
20406: ST_TO_ADDR
// sArmoury := false ;
20407: LD_ADDR_EXP 63
20411: PUSH
20412: LD_INT 0
20414: ST_TO_ADDR
// sRadar := false ;
20415: LD_ADDR_EXP 64
20419: PUSH
20420: LD_INT 0
20422: ST_TO_ADDR
// sBunker := false ;
20423: LD_ADDR_EXP 65
20427: PUSH
20428: LD_INT 0
20430: ST_TO_ADDR
// sHack := false ;
20431: LD_ADDR_EXP 66
20435: PUSH
20436: LD_INT 0
20438: ST_TO_ADDR
// sFire := false ;
20439: LD_ADDR_EXP 67
20443: PUSH
20444: LD_INT 0
20446: ST_TO_ADDR
// sRefresh := false ;
20447: LD_ADDR_EXP 68
20451: PUSH
20452: LD_INT 0
20454: ST_TO_ADDR
// sExp := false ;
20455: LD_ADDR_EXP 69
20459: PUSH
20460: LD_INT 0
20462: ST_TO_ADDR
// sDepot := false ;
20463: LD_ADDR_EXP 70
20467: PUSH
20468: LD_INT 0
20470: ST_TO_ADDR
// sFlag := false ;
20471: LD_ADDR_EXP 71
20475: PUSH
20476: LD_INT 0
20478: ST_TO_ADDR
// sKamikadze := false ;
20479: LD_ADDR_EXP 79
20483: PUSH
20484: LD_INT 0
20486: ST_TO_ADDR
// sTroll := false ;
20487: LD_ADDR_EXP 80
20491: PUSH
20492: LD_INT 0
20494: ST_TO_ADDR
// sSlow := false ;
20495: LD_ADDR_EXP 81
20499: PUSH
20500: LD_INT 0
20502: ST_TO_ADDR
// sLack := false ;
20503: LD_ADDR_EXP 82
20507: PUSH
20508: LD_INT 0
20510: ST_TO_ADDR
// sTank := false ;
20511: LD_ADDR_EXP 84
20515: PUSH
20516: LD_INT 0
20518: ST_TO_ADDR
// sRemote := false ;
20519: LD_ADDR_EXP 85
20523: PUSH
20524: LD_INT 0
20526: ST_TO_ADDR
// sPowell := false ;
20527: LD_ADDR_EXP 86
20531: PUSH
20532: LD_INT 0
20534: ST_TO_ADDR
// sTeleport := false ;
20535: LD_ADDR_EXP 89
20539: PUSH
20540: LD_INT 0
20542: ST_TO_ADDR
// sOilTower := false ;
20543: LD_ADDR_EXP 91
20547: PUSH
20548: LD_INT 0
20550: ST_TO_ADDR
// sShovel := false ;
20551: LD_ADDR_EXP 92
20555: PUSH
20556: LD_INT 0
20558: ST_TO_ADDR
// sSheik := false ;
20559: LD_ADDR_EXP 93
20563: PUSH
20564: LD_INT 0
20566: ST_TO_ADDR
// sEarthquake := false ;
20567: LD_ADDR_EXP 95
20571: PUSH
20572: LD_INT 0
20574: ST_TO_ADDR
// sAI := false ;
20575: LD_ADDR_EXP 96
20579: PUSH
20580: LD_INT 0
20582: ST_TO_ADDR
// sCargo := false ;
20583: LD_ADDR_EXP 99
20587: PUSH
20588: LD_INT 0
20590: ST_TO_ADDR
// sDLaser := false ;
20591: LD_ADDR_EXP 100
20595: PUSH
20596: LD_INT 0
20598: ST_TO_ADDR
// sExchange := false ;
20599: LD_ADDR_EXP 101
20603: PUSH
20604: LD_INT 0
20606: ST_TO_ADDR
// sFac := false ;
20607: LD_ADDR_EXP 102
20611: PUSH
20612: LD_INT 0
20614: ST_TO_ADDR
// sPower := false ;
20615: LD_ADDR_EXP 103
20619: PUSH
20620: LD_INT 0
20622: ST_TO_ADDR
// sRandom := false ;
20623: LD_ADDR_EXP 104
20627: PUSH
20628: LD_INT 0
20630: ST_TO_ADDR
// sShield := false ;
20631: LD_ADDR_EXP 105
20635: PUSH
20636: LD_INT 0
20638: ST_TO_ADDR
// sTime := false ;
20639: LD_ADDR_EXP 106
20643: PUSH
20644: LD_INT 0
20646: ST_TO_ADDR
// sTools := false ;
20647: LD_ADDR_EXP 107
20651: PUSH
20652: LD_INT 0
20654: ST_TO_ADDR
// sSold := false ;
20655: LD_ADDR_EXP 72
20659: PUSH
20660: LD_INT 0
20662: ST_TO_ADDR
// sDiff := false ;
20663: LD_ADDR_EXP 73
20667: PUSH
20668: LD_INT 0
20670: ST_TO_ADDR
// sFog := false ;
20671: LD_ADDR_EXP 76
20675: PUSH
20676: LD_INT 0
20678: ST_TO_ADDR
// sReset := false ;
20679: LD_ADDR_EXP 77
20683: PUSH
20684: LD_INT 0
20686: ST_TO_ADDR
// sSun := false ;
20687: LD_ADDR_EXP 78
20691: PUSH
20692: LD_INT 0
20694: ST_TO_ADDR
// sTiger := false ;
20695: LD_ADDR_EXP 74
20699: PUSH
20700: LD_INT 0
20702: ST_TO_ADDR
// sBomb := false ;
20703: LD_ADDR_EXP 75
20707: PUSH
20708: LD_INT 0
20710: ST_TO_ADDR
// sWound := false ;
20711: LD_ADDR_EXP 83
20715: PUSH
20716: LD_INT 0
20718: ST_TO_ADDR
// sBetray := false ;
20719: LD_ADDR_EXP 87
20723: PUSH
20724: LD_INT 0
20726: ST_TO_ADDR
// sContamin := false ;
20727: LD_ADDR_EXP 88
20731: PUSH
20732: LD_INT 0
20734: ST_TO_ADDR
// sOil := false ;
20735: LD_ADDR_EXP 90
20739: PUSH
20740: LD_INT 0
20742: ST_TO_ADDR
// sStu := false ;
20743: LD_ADDR_EXP 94
20747: PUSH
20748: LD_INT 0
20750: ST_TO_ADDR
// sBazooka := false ;
20751: LD_ADDR_EXP 97
20755: PUSH
20756: LD_INT 0
20758: ST_TO_ADDR
// sMortar := false ;
20759: LD_ADDR_EXP 98
20763: PUSH
20764: LD_INT 0
20766: ST_TO_ADDR
// sRanger := false ;
20767: LD_ADDR_EXP 108
20771: PUSH
20772: LD_INT 0
20774: ST_TO_ADDR
// sComputer := false ;
20775: LD_ADDR_EXP 109
20779: PUSH
20780: LD_INT 0
20782: ST_TO_ADDR
// s30 := false ;
20783: LD_ADDR_EXP 110
20787: PUSH
20788: LD_INT 0
20790: ST_TO_ADDR
// s60 := false ;
20791: LD_ADDR_EXP 111
20795: PUSH
20796: LD_INT 0
20798: ST_TO_ADDR
// end ;
20799: LD_VAR 0 1
20803: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20804: LD_INT 0
20806: PPUSH
20807: PPUSH
20808: PPUSH
20809: PPUSH
20810: PPUSH
20811: PPUSH
20812: PPUSH
// result := [ ] ;
20813: LD_ADDR_VAR 0 2
20817: PUSH
20818: EMPTY
20819: ST_TO_ADDR
// if campaign_id = 1 then
20820: LD_OWVAR 69
20824: PUSH
20825: LD_INT 1
20827: EQUAL
20828: IFFALSE 23994
// begin case mission_number of 1 :
20830: LD_OWVAR 70
20834: PUSH
20835: LD_INT 1
20837: DOUBLE
20838: EQUAL
20839: IFTRUE 20843
20841: GO 20919
20843: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20844: LD_ADDR_VAR 0 2
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 4
20854: PUSH
20855: LD_INT 11
20857: PUSH
20858: LD_INT 12
20860: PUSH
20861: LD_INT 15
20863: PUSH
20864: LD_INT 16
20866: PUSH
20867: LD_INT 22
20869: PUSH
20870: LD_INT 23
20872: PUSH
20873: LD_INT 26
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 101
20889: PUSH
20890: LD_INT 102
20892: PUSH
20893: LD_INT 106
20895: PUSH
20896: LD_INT 116
20898: PUSH
20899: LD_INT 117
20901: PUSH
20902: LD_INT 118
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: ST_TO_ADDR
20917: GO 23992
20919: LD_INT 2
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 21011
20927: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20928: LD_ADDR_VAR 0 2
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: LD_INT 4
20938: PUSH
20939: LD_INT 11
20941: PUSH
20942: LD_INT 12
20944: PUSH
20945: LD_INT 15
20947: PUSH
20948: LD_INT 16
20950: PUSH
20951: LD_INT 22
20953: PUSH
20954: LD_INT 23
20956: PUSH
20957: LD_INT 26
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 101
20973: PUSH
20974: LD_INT 102
20976: PUSH
20977: LD_INT 105
20979: PUSH
20980: LD_INT 106
20982: PUSH
20983: LD_INT 108
20985: PUSH
20986: LD_INT 116
20988: PUSH
20989: LD_INT 117
20991: PUSH
20992: LD_INT 118
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: ST_TO_ADDR
21009: GO 23992
21011: LD_INT 3
21013: DOUBLE
21014: EQUAL
21015: IFTRUE 21019
21017: GO 21107
21019: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21020: LD_ADDR_VAR 0 2
21024: PUSH
21025: LD_INT 2
21027: PUSH
21028: LD_INT 4
21030: PUSH
21031: LD_INT 5
21033: PUSH
21034: LD_INT 11
21036: PUSH
21037: LD_INT 12
21039: PUSH
21040: LD_INT 15
21042: PUSH
21043: LD_INT 16
21045: PUSH
21046: LD_INT 22
21048: PUSH
21049: LD_INT 26
21051: PUSH
21052: LD_INT 36
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 101
21069: PUSH
21070: LD_INT 102
21072: PUSH
21073: LD_INT 105
21075: PUSH
21076: LD_INT 106
21078: PUSH
21079: LD_INT 108
21081: PUSH
21082: LD_INT 116
21084: PUSH
21085: LD_INT 117
21087: PUSH
21088: LD_INT 118
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: ST_TO_ADDR
21105: GO 23992
21107: LD_INT 4
21109: DOUBLE
21110: EQUAL
21111: IFTRUE 21115
21113: GO 21211
21115: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21116: LD_ADDR_VAR 0 2
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: LD_INT 4
21126: PUSH
21127: LD_INT 5
21129: PUSH
21130: LD_INT 8
21132: PUSH
21133: LD_INT 11
21135: PUSH
21136: LD_INT 12
21138: PUSH
21139: LD_INT 15
21141: PUSH
21142: LD_INT 16
21144: PUSH
21145: LD_INT 22
21147: PUSH
21148: LD_INT 23
21150: PUSH
21151: LD_INT 26
21153: PUSH
21154: LD_INT 36
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 101
21173: PUSH
21174: LD_INT 102
21176: PUSH
21177: LD_INT 105
21179: PUSH
21180: LD_INT 106
21182: PUSH
21183: LD_INT 108
21185: PUSH
21186: LD_INT 116
21188: PUSH
21189: LD_INT 117
21191: PUSH
21192: LD_INT 118
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: ST_TO_ADDR
21209: GO 23992
21211: LD_INT 5
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21331
21219: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21220: LD_ADDR_VAR 0 2
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: LD_INT 4
21230: PUSH
21231: LD_INT 5
21233: PUSH
21234: LD_INT 6
21236: PUSH
21237: LD_INT 8
21239: PUSH
21240: LD_INT 11
21242: PUSH
21243: LD_INT 12
21245: PUSH
21246: LD_INT 15
21248: PUSH
21249: LD_INT 16
21251: PUSH
21252: LD_INT 22
21254: PUSH
21255: LD_INT 23
21257: PUSH
21258: LD_INT 25
21260: PUSH
21261: LD_INT 26
21263: PUSH
21264: LD_INT 36
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 101
21285: PUSH
21286: LD_INT 102
21288: PUSH
21289: LD_INT 105
21291: PUSH
21292: LD_INT 106
21294: PUSH
21295: LD_INT 108
21297: PUSH
21298: LD_INT 109
21300: PUSH
21301: LD_INT 112
21303: PUSH
21304: LD_INT 116
21306: PUSH
21307: LD_INT 117
21309: PUSH
21310: LD_INT 118
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 23992
21331: LD_INT 6
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21471
21339: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21340: LD_ADDR_VAR 0 2
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 4
21350: PUSH
21351: LD_INT 5
21353: PUSH
21354: LD_INT 6
21356: PUSH
21357: LD_INT 8
21359: PUSH
21360: LD_INT 11
21362: PUSH
21363: LD_INT 12
21365: PUSH
21366: LD_INT 15
21368: PUSH
21369: LD_INT 16
21371: PUSH
21372: LD_INT 20
21374: PUSH
21375: LD_INT 21
21377: PUSH
21378: LD_INT 22
21380: PUSH
21381: LD_INT 23
21383: PUSH
21384: LD_INT 25
21386: PUSH
21387: LD_INT 26
21389: PUSH
21390: LD_INT 30
21392: PUSH
21393: LD_INT 31
21395: PUSH
21396: LD_INT 32
21398: PUSH
21399: LD_INT 36
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 101
21425: PUSH
21426: LD_INT 102
21428: PUSH
21429: LD_INT 105
21431: PUSH
21432: LD_INT 106
21434: PUSH
21435: LD_INT 108
21437: PUSH
21438: LD_INT 109
21440: PUSH
21441: LD_INT 112
21443: PUSH
21444: LD_INT 116
21446: PUSH
21447: LD_INT 117
21449: PUSH
21450: LD_INT 118
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: ST_TO_ADDR
21469: GO 23992
21471: LD_INT 7
21473: DOUBLE
21474: EQUAL
21475: IFTRUE 21479
21477: GO 21591
21479: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21480: LD_ADDR_VAR 0 2
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 4
21490: PUSH
21491: LD_INT 5
21493: PUSH
21494: LD_INT 7
21496: PUSH
21497: LD_INT 11
21499: PUSH
21500: LD_INT 12
21502: PUSH
21503: LD_INT 15
21505: PUSH
21506: LD_INT 16
21508: PUSH
21509: LD_INT 20
21511: PUSH
21512: LD_INT 21
21514: PUSH
21515: LD_INT 22
21517: PUSH
21518: LD_INT 23
21520: PUSH
21521: LD_INT 25
21523: PUSH
21524: LD_INT 26
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 101
21545: PUSH
21546: LD_INT 102
21548: PUSH
21549: LD_INT 103
21551: PUSH
21552: LD_INT 105
21554: PUSH
21555: LD_INT 106
21557: PUSH
21558: LD_INT 108
21560: PUSH
21561: LD_INT 112
21563: PUSH
21564: LD_INT 116
21566: PUSH
21567: LD_INT 117
21569: PUSH
21570: LD_INT 118
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: ST_TO_ADDR
21589: GO 23992
21591: LD_INT 8
21593: DOUBLE
21594: EQUAL
21595: IFTRUE 21599
21597: GO 21739
21599: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21600: LD_ADDR_VAR 0 2
21604: PUSH
21605: LD_INT 2
21607: PUSH
21608: LD_INT 4
21610: PUSH
21611: LD_INT 5
21613: PUSH
21614: LD_INT 6
21616: PUSH
21617: LD_INT 7
21619: PUSH
21620: LD_INT 8
21622: PUSH
21623: LD_INT 11
21625: PUSH
21626: LD_INT 12
21628: PUSH
21629: LD_INT 15
21631: PUSH
21632: LD_INT 16
21634: PUSH
21635: LD_INT 20
21637: PUSH
21638: LD_INT 21
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_INT 23
21646: PUSH
21647: LD_INT 25
21649: PUSH
21650: LD_INT 26
21652: PUSH
21653: LD_INT 30
21655: PUSH
21656: LD_INT 31
21658: PUSH
21659: LD_INT 32
21661: PUSH
21662: LD_INT 36
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 101
21689: PUSH
21690: LD_INT 102
21692: PUSH
21693: LD_INT 103
21695: PUSH
21696: LD_INT 105
21698: PUSH
21699: LD_INT 106
21701: PUSH
21702: LD_INT 108
21704: PUSH
21705: LD_INT 109
21707: PUSH
21708: LD_INT 112
21710: PUSH
21711: LD_INT 116
21713: PUSH
21714: LD_INT 117
21716: PUSH
21717: LD_INT 118
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: ST_TO_ADDR
21737: GO 23992
21739: LD_INT 9
21741: DOUBLE
21742: EQUAL
21743: IFTRUE 21747
21745: GO 21895
21747: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21748: LD_ADDR_VAR 0 2
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 4
21758: PUSH
21759: LD_INT 5
21761: PUSH
21762: LD_INT 6
21764: PUSH
21765: LD_INT 7
21767: PUSH
21768: LD_INT 8
21770: PUSH
21771: LD_INT 11
21773: PUSH
21774: LD_INT 12
21776: PUSH
21777: LD_INT 15
21779: PUSH
21780: LD_INT 16
21782: PUSH
21783: LD_INT 20
21785: PUSH
21786: LD_INT 21
21788: PUSH
21789: LD_INT 22
21791: PUSH
21792: LD_INT 23
21794: PUSH
21795: LD_INT 25
21797: PUSH
21798: LD_INT 26
21800: PUSH
21801: LD_INT 28
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: LD_INT 31
21809: PUSH
21810: LD_INT 32
21812: PUSH
21813: LD_INT 36
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 101
21841: PUSH
21842: LD_INT 102
21844: PUSH
21845: LD_INT 103
21847: PUSH
21848: LD_INT 105
21850: PUSH
21851: LD_INT 106
21853: PUSH
21854: LD_INT 108
21856: PUSH
21857: LD_INT 109
21859: PUSH
21860: LD_INT 112
21862: PUSH
21863: LD_INT 114
21865: PUSH
21866: LD_INT 116
21868: PUSH
21869: LD_INT 117
21871: PUSH
21872: LD_INT 118
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: ST_TO_ADDR
21893: GO 23992
21895: LD_INT 10
21897: DOUBLE
21898: EQUAL
21899: IFTRUE 21903
21901: GO 22099
21903: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21904: LD_ADDR_VAR 0 2
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: LD_INT 4
21914: PUSH
21915: LD_INT 5
21917: PUSH
21918: LD_INT 6
21920: PUSH
21921: LD_INT 7
21923: PUSH
21924: LD_INT 8
21926: PUSH
21927: LD_INT 9
21929: PUSH
21930: LD_INT 10
21932: PUSH
21933: LD_INT 11
21935: PUSH
21936: LD_INT 12
21938: PUSH
21939: LD_INT 13
21941: PUSH
21942: LD_INT 14
21944: PUSH
21945: LD_INT 15
21947: PUSH
21948: LD_INT 16
21950: PUSH
21951: LD_INT 17
21953: PUSH
21954: LD_INT 18
21956: PUSH
21957: LD_INT 19
21959: PUSH
21960: LD_INT 20
21962: PUSH
21963: LD_INT 21
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_INT 23
21971: PUSH
21972: LD_INT 24
21974: PUSH
21975: LD_INT 25
21977: PUSH
21978: LD_INT 26
21980: PUSH
21981: LD_INT 28
21983: PUSH
21984: LD_INT 30
21986: PUSH
21987: LD_INT 31
21989: PUSH
21990: LD_INT 32
21992: PUSH
21993: LD_INT 36
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 101
22029: PUSH
22030: LD_INT 102
22032: PUSH
22033: LD_INT 103
22035: PUSH
22036: LD_INT 104
22038: PUSH
22039: LD_INT 105
22041: PUSH
22042: LD_INT 106
22044: PUSH
22045: LD_INT 107
22047: PUSH
22048: LD_INT 108
22050: PUSH
22051: LD_INT 109
22053: PUSH
22054: LD_INT 110
22056: PUSH
22057: LD_INT 111
22059: PUSH
22060: LD_INT 112
22062: PUSH
22063: LD_INT 114
22065: PUSH
22066: LD_INT 116
22068: PUSH
22069: LD_INT 117
22071: PUSH
22072: LD_INT 118
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: ST_TO_ADDR
22097: GO 23992
22099: LD_INT 11
22101: DOUBLE
22102: EQUAL
22103: IFTRUE 22107
22105: GO 22311
22107: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22108: LD_ADDR_VAR 0 2
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: LD_INT 3
22118: PUSH
22119: LD_INT 4
22121: PUSH
22122: LD_INT 5
22124: PUSH
22125: LD_INT 6
22127: PUSH
22128: LD_INT 7
22130: PUSH
22131: LD_INT 8
22133: PUSH
22134: LD_INT 9
22136: PUSH
22137: LD_INT 10
22139: PUSH
22140: LD_INT 11
22142: PUSH
22143: LD_INT 12
22145: PUSH
22146: LD_INT 13
22148: PUSH
22149: LD_INT 14
22151: PUSH
22152: LD_INT 15
22154: PUSH
22155: LD_INT 16
22157: PUSH
22158: LD_INT 17
22160: PUSH
22161: LD_INT 18
22163: PUSH
22164: LD_INT 19
22166: PUSH
22167: LD_INT 20
22169: PUSH
22170: LD_INT 21
22172: PUSH
22173: LD_INT 22
22175: PUSH
22176: LD_INT 23
22178: PUSH
22179: LD_INT 24
22181: PUSH
22182: LD_INT 25
22184: PUSH
22185: LD_INT 26
22187: PUSH
22188: LD_INT 28
22190: PUSH
22191: LD_INT 30
22193: PUSH
22194: LD_INT 31
22196: PUSH
22197: LD_INT 32
22199: PUSH
22200: LD_INT 34
22202: PUSH
22203: LD_INT 36
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 101
22241: PUSH
22242: LD_INT 102
22244: PUSH
22245: LD_INT 103
22247: PUSH
22248: LD_INT 104
22250: PUSH
22251: LD_INT 105
22253: PUSH
22254: LD_INT 106
22256: PUSH
22257: LD_INT 107
22259: PUSH
22260: LD_INT 108
22262: PUSH
22263: LD_INT 109
22265: PUSH
22266: LD_INT 110
22268: PUSH
22269: LD_INT 111
22271: PUSH
22272: LD_INT 112
22274: PUSH
22275: LD_INT 114
22277: PUSH
22278: LD_INT 116
22280: PUSH
22281: LD_INT 117
22283: PUSH
22284: LD_INT 118
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: ST_TO_ADDR
22309: GO 23992
22311: LD_INT 12
22313: DOUBLE
22314: EQUAL
22315: IFTRUE 22319
22317: GO 22539
22319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22320: LD_ADDR_VAR 0 2
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: LD_INT 4
22336: PUSH
22337: LD_INT 5
22339: PUSH
22340: LD_INT 6
22342: PUSH
22343: LD_INT 7
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 9
22351: PUSH
22352: LD_INT 10
22354: PUSH
22355: LD_INT 11
22357: PUSH
22358: LD_INT 12
22360: PUSH
22361: LD_INT 13
22363: PUSH
22364: LD_INT 14
22366: PUSH
22367: LD_INT 15
22369: PUSH
22370: LD_INT 16
22372: PUSH
22373: LD_INT 17
22375: PUSH
22376: LD_INT 18
22378: PUSH
22379: LD_INT 19
22381: PUSH
22382: LD_INT 20
22384: PUSH
22385: LD_INT 21
22387: PUSH
22388: LD_INT 22
22390: PUSH
22391: LD_INT 23
22393: PUSH
22394: LD_INT 24
22396: PUSH
22397: LD_INT 25
22399: PUSH
22400: LD_INT 26
22402: PUSH
22403: LD_INT 27
22405: PUSH
22406: LD_INT 28
22408: PUSH
22409: LD_INT 30
22411: PUSH
22412: LD_INT 31
22414: PUSH
22415: LD_INT 32
22417: PUSH
22418: LD_INT 33
22420: PUSH
22421: LD_INT 34
22423: PUSH
22424: LD_INT 36
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 101
22465: PUSH
22466: LD_INT 102
22468: PUSH
22469: LD_INT 103
22471: PUSH
22472: LD_INT 104
22474: PUSH
22475: LD_INT 105
22477: PUSH
22478: LD_INT 106
22480: PUSH
22481: LD_INT 107
22483: PUSH
22484: LD_INT 108
22486: PUSH
22487: LD_INT 109
22489: PUSH
22490: LD_INT 110
22492: PUSH
22493: LD_INT 111
22495: PUSH
22496: LD_INT 112
22498: PUSH
22499: LD_INT 113
22501: PUSH
22502: LD_INT 114
22504: PUSH
22505: LD_INT 116
22507: PUSH
22508: LD_INT 117
22510: PUSH
22511: LD_INT 118
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: ST_TO_ADDR
22537: GO 23992
22539: LD_INT 13
22541: DOUBLE
22542: EQUAL
22543: IFTRUE 22547
22545: GO 22755
22547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22548: LD_ADDR_VAR 0 2
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: LD_INT 3
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: LD_INT 5
22567: PUSH
22568: LD_INT 8
22570: PUSH
22571: LD_INT 9
22573: PUSH
22574: LD_INT 10
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 14
22585: PUSH
22586: LD_INT 15
22588: PUSH
22589: LD_INT 16
22591: PUSH
22592: LD_INT 17
22594: PUSH
22595: LD_INT 18
22597: PUSH
22598: LD_INT 19
22600: PUSH
22601: LD_INT 20
22603: PUSH
22604: LD_INT 21
22606: PUSH
22607: LD_INT 22
22609: PUSH
22610: LD_INT 23
22612: PUSH
22613: LD_INT 24
22615: PUSH
22616: LD_INT 25
22618: PUSH
22619: LD_INT 26
22621: PUSH
22622: LD_INT 27
22624: PUSH
22625: LD_INT 28
22627: PUSH
22628: LD_INT 30
22630: PUSH
22631: LD_INT 31
22633: PUSH
22634: LD_INT 32
22636: PUSH
22637: LD_INT 33
22639: PUSH
22640: LD_INT 34
22642: PUSH
22643: LD_INT 36
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 101
22681: PUSH
22682: LD_INT 102
22684: PUSH
22685: LD_INT 103
22687: PUSH
22688: LD_INT 104
22690: PUSH
22691: LD_INT 105
22693: PUSH
22694: LD_INT 106
22696: PUSH
22697: LD_INT 107
22699: PUSH
22700: LD_INT 108
22702: PUSH
22703: LD_INT 109
22705: PUSH
22706: LD_INT 110
22708: PUSH
22709: LD_INT 111
22711: PUSH
22712: LD_INT 112
22714: PUSH
22715: LD_INT 113
22717: PUSH
22718: LD_INT 114
22720: PUSH
22721: LD_INT 116
22723: PUSH
22724: LD_INT 117
22726: PUSH
22727: LD_INT 118
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: ST_TO_ADDR
22753: GO 23992
22755: LD_INT 14
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22987
22763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22764: LD_ADDR_VAR 0 2
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 3
22777: PUSH
22778: LD_INT 4
22780: PUSH
22781: LD_INT 5
22783: PUSH
22784: LD_INT 6
22786: PUSH
22787: LD_INT 7
22789: PUSH
22790: LD_INT 8
22792: PUSH
22793: LD_INT 9
22795: PUSH
22796: LD_INT 10
22798: PUSH
22799: LD_INT 11
22801: PUSH
22802: LD_INT 12
22804: PUSH
22805: LD_INT 13
22807: PUSH
22808: LD_INT 14
22810: PUSH
22811: LD_INT 15
22813: PUSH
22814: LD_INT 16
22816: PUSH
22817: LD_INT 17
22819: PUSH
22820: LD_INT 18
22822: PUSH
22823: LD_INT 19
22825: PUSH
22826: LD_INT 20
22828: PUSH
22829: LD_INT 21
22831: PUSH
22832: LD_INT 22
22834: PUSH
22835: LD_INT 23
22837: PUSH
22838: LD_INT 24
22840: PUSH
22841: LD_INT 25
22843: PUSH
22844: LD_INT 26
22846: PUSH
22847: LD_INT 27
22849: PUSH
22850: LD_INT 28
22852: PUSH
22853: LD_INT 29
22855: PUSH
22856: LD_INT 30
22858: PUSH
22859: LD_INT 31
22861: PUSH
22862: LD_INT 32
22864: PUSH
22865: LD_INT 33
22867: PUSH
22868: LD_INT 34
22870: PUSH
22871: LD_INT 36
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 101
22913: PUSH
22914: LD_INT 102
22916: PUSH
22917: LD_INT 103
22919: PUSH
22920: LD_INT 104
22922: PUSH
22923: LD_INT 105
22925: PUSH
22926: LD_INT 106
22928: PUSH
22929: LD_INT 107
22931: PUSH
22932: LD_INT 108
22934: PUSH
22935: LD_INT 109
22937: PUSH
22938: LD_INT 110
22940: PUSH
22941: LD_INT 111
22943: PUSH
22944: LD_INT 112
22946: PUSH
22947: LD_INT 113
22949: PUSH
22950: LD_INT 114
22952: PUSH
22953: LD_INT 116
22955: PUSH
22956: LD_INT 117
22958: PUSH
22959: LD_INT 118
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: ST_TO_ADDR
22985: GO 23992
22987: LD_INT 15
22989: DOUBLE
22990: EQUAL
22991: IFTRUE 22995
22993: GO 23219
22995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22996: LD_ADDR_VAR 0 2
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: LD_INT 3
23009: PUSH
23010: LD_INT 4
23012: PUSH
23013: LD_INT 5
23015: PUSH
23016: LD_INT 6
23018: PUSH
23019: LD_INT 7
23021: PUSH
23022: LD_INT 8
23024: PUSH
23025: LD_INT 9
23027: PUSH
23028: LD_INT 10
23030: PUSH
23031: LD_INT 11
23033: PUSH
23034: LD_INT 12
23036: PUSH
23037: LD_INT 13
23039: PUSH
23040: LD_INT 14
23042: PUSH
23043: LD_INT 15
23045: PUSH
23046: LD_INT 16
23048: PUSH
23049: LD_INT 17
23051: PUSH
23052: LD_INT 18
23054: PUSH
23055: LD_INT 19
23057: PUSH
23058: LD_INT 20
23060: PUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 22
23066: PUSH
23067: LD_INT 23
23069: PUSH
23070: LD_INT 24
23072: PUSH
23073: LD_INT 25
23075: PUSH
23076: LD_INT 26
23078: PUSH
23079: LD_INT 27
23081: PUSH
23082: LD_INT 28
23084: PUSH
23085: LD_INT 29
23087: PUSH
23088: LD_INT 30
23090: PUSH
23091: LD_INT 31
23093: PUSH
23094: LD_INT 32
23096: PUSH
23097: LD_INT 33
23099: PUSH
23100: LD_INT 34
23102: PUSH
23103: LD_INT 36
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 101
23145: PUSH
23146: LD_INT 102
23148: PUSH
23149: LD_INT 103
23151: PUSH
23152: LD_INT 104
23154: PUSH
23155: LD_INT 105
23157: PUSH
23158: LD_INT 106
23160: PUSH
23161: LD_INT 107
23163: PUSH
23164: LD_INT 108
23166: PUSH
23167: LD_INT 109
23169: PUSH
23170: LD_INT 110
23172: PUSH
23173: LD_INT 111
23175: PUSH
23176: LD_INT 112
23178: PUSH
23179: LD_INT 113
23181: PUSH
23182: LD_INT 114
23184: PUSH
23185: LD_INT 116
23187: PUSH
23188: LD_INT 117
23190: PUSH
23191: LD_INT 118
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: ST_TO_ADDR
23217: GO 23992
23219: LD_INT 16
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23363
23227: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23228: LD_ADDR_VAR 0 2
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: LD_INT 4
23238: PUSH
23239: LD_INT 5
23241: PUSH
23242: LD_INT 7
23244: PUSH
23245: LD_INT 11
23247: PUSH
23248: LD_INT 12
23250: PUSH
23251: LD_INT 15
23253: PUSH
23254: LD_INT 16
23256: PUSH
23257: LD_INT 20
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 22
23265: PUSH
23266: LD_INT 23
23268: PUSH
23269: LD_INT 25
23271: PUSH
23272: LD_INT 26
23274: PUSH
23275: LD_INT 30
23277: PUSH
23278: LD_INT 31
23280: PUSH
23281: LD_INT 32
23283: PUSH
23284: LD_INT 33
23286: PUSH
23287: LD_INT 34
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 101
23313: PUSH
23314: LD_INT 102
23316: PUSH
23317: LD_INT 103
23319: PUSH
23320: LD_INT 106
23322: PUSH
23323: LD_INT 108
23325: PUSH
23326: LD_INT 112
23328: PUSH
23329: LD_INT 113
23331: PUSH
23332: LD_INT 114
23334: PUSH
23335: LD_INT 116
23337: PUSH
23338: LD_INT 117
23340: PUSH
23341: LD_INT 118
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: ST_TO_ADDR
23361: GO 23992
23363: LD_INT 17
23365: DOUBLE
23366: EQUAL
23367: IFTRUE 23371
23369: GO 23595
23371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23372: LD_ADDR_VAR 0 2
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: LD_INT 2
23382: PUSH
23383: LD_INT 3
23385: PUSH
23386: LD_INT 4
23388: PUSH
23389: LD_INT 5
23391: PUSH
23392: LD_INT 6
23394: PUSH
23395: LD_INT 7
23397: PUSH
23398: LD_INT 8
23400: PUSH
23401: LD_INT 9
23403: PUSH
23404: LD_INT 10
23406: PUSH
23407: LD_INT 11
23409: PUSH
23410: LD_INT 12
23412: PUSH
23413: LD_INT 13
23415: PUSH
23416: LD_INT 14
23418: PUSH
23419: LD_INT 15
23421: PUSH
23422: LD_INT 16
23424: PUSH
23425: LD_INT 17
23427: PUSH
23428: LD_INT 18
23430: PUSH
23431: LD_INT 19
23433: PUSH
23434: LD_INT 20
23436: PUSH
23437: LD_INT 21
23439: PUSH
23440: LD_INT 22
23442: PUSH
23443: LD_INT 23
23445: PUSH
23446: LD_INT 24
23448: PUSH
23449: LD_INT 25
23451: PUSH
23452: LD_INT 26
23454: PUSH
23455: LD_INT 27
23457: PUSH
23458: LD_INT 28
23460: PUSH
23461: LD_INT 29
23463: PUSH
23464: LD_INT 30
23466: PUSH
23467: LD_INT 31
23469: PUSH
23470: LD_INT 32
23472: PUSH
23473: LD_INT 33
23475: PUSH
23476: LD_INT 34
23478: PUSH
23479: LD_INT 36
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 101
23521: PUSH
23522: LD_INT 102
23524: PUSH
23525: LD_INT 103
23527: PUSH
23528: LD_INT 104
23530: PUSH
23531: LD_INT 105
23533: PUSH
23534: LD_INT 106
23536: PUSH
23537: LD_INT 107
23539: PUSH
23540: LD_INT 108
23542: PUSH
23543: LD_INT 109
23545: PUSH
23546: LD_INT 110
23548: PUSH
23549: LD_INT 111
23551: PUSH
23552: LD_INT 112
23554: PUSH
23555: LD_INT 113
23557: PUSH
23558: LD_INT 114
23560: PUSH
23561: LD_INT 116
23563: PUSH
23564: LD_INT 117
23566: PUSH
23567: LD_INT 118
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: ST_TO_ADDR
23593: GO 23992
23595: LD_INT 18
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23751
23603: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23604: LD_ADDR_VAR 0 2
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: LD_INT 4
23614: PUSH
23615: LD_INT 5
23617: PUSH
23618: LD_INT 7
23620: PUSH
23621: LD_INT 11
23623: PUSH
23624: LD_INT 12
23626: PUSH
23627: LD_INT 15
23629: PUSH
23630: LD_INT 16
23632: PUSH
23633: LD_INT 20
23635: PUSH
23636: LD_INT 21
23638: PUSH
23639: LD_INT 22
23641: PUSH
23642: LD_INT 23
23644: PUSH
23645: LD_INT 25
23647: PUSH
23648: LD_INT 26
23650: PUSH
23651: LD_INT 30
23653: PUSH
23654: LD_INT 31
23656: PUSH
23657: LD_INT 32
23659: PUSH
23660: LD_INT 33
23662: PUSH
23663: LD_INT 34
23665: PUSH
23666: LD_INT 35
23668: PUSH
23669: LD_INT 36
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 101
23697: PUSH
23698: LD_INT 102
23700: PUSH
23701: LD_INT 103
23703: PUSH
23704: LD_INT 106
23706: PUSH
23707: LD_INT 108
23709: PUSH
23710: LD_INT 112
23712: PUSH
23713: LD_INT 113
23715: PUSH
23716: LD_INT 114
23718: PUSH
23719: LD_INT 115
23721: PUSH
23722: LD_INT 116
23724: PUSH
23725: LD_INT 117
23727: PUSH
23728: LD_INT 118
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: ST_TO_ADDR
23749: GO 23992
23751: LD_INT 19
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23991
23759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23760: LD_ADDR_VAR 0 2
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: LD_INT 4
23776: PUSH
23777: LD_INT 5
23779: PUSH
23780: LD_INT 6
23782: PUSH
23783: LD_INT 7
23785: PUSH
23786: LD_INT 8
23788: PUSH
23789: LD_INT 9
23791: PUSH
23792: LD_INT 10
23794: PUSH
23795: LD_INT 11
23797: PUSH
23798: LD_INT 12
23800: PUSH
23801: LD_INT 13
23803: PUSH
23804: LD_INT 14
23806: PUSH
23807: LD_INT 15
23809: PUSH
23810: LD_INT 16
23812: PUSH
23813: LD_INT 17
23815: PUSH
23816: LD_INT 18
23818: PUSH
23819: LD_INT 19
23821: PUSH
23822: LD_INT 20
23824: PUSH
23825: LD_INT 21
23827: PUSH
23828: LD_INT 22
23830: PUSH
23831: LD_INT 23
23833: PUSH
23834: LD_INT 24
23836: PUSH
23837: LD_INT 25
23839: PUSH
23840: LD_INT 26
23842: PUSH
23843: LD_INT 27
23845: PUSH
23846: LD_INT 28
23848: PUSH
23849: LD_INT 29
23851: PUSH
23852: LD_INT 30
23854: PUSH
23855: LD_INT 31
23857: PUSH
23858: LD_INT 32
23860: PUSH
23861: LD_INT 33
23863: PUSH
23864: LD_INT 34
23866: PUSH
23867: LD_INT 35
23869: PUSH
23870: LD_INT 36
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 101
23913: PUSH
23914: LD_INT 102
23916: PUSH
23917: LD_INT 103
23919: PUSH
23920: LD_INT 104
23922: PUSH
23923: LD_INT 105
23925: PUSH
23926: LD_INT 106
23928: PUSH
23929: LD_INT 107
23931: PUSH
23932: LD_INT 108
23934: PUSH
23935: LD_INT 109
23937: PUSH
23938: LD_INT 110
23940: PUSH
23941: LD_INT 111
23943: PUSH
23944: LD_INT 112
23946: PUSH
23947: LD_INT 113
23949: PUSH
23950: LD_INT 114
23952: PUSH
23953: LD_INT 115
23955: PUSH
23956: LD_INT 116
23958: PUSH
23959: LD_INT 117
23961: PUSH
23962: LD_INT 118
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: ST_TO_ADDR
23989: GO 23992
23991: POP
// end else
23992: GO 24223
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23994: LD_ADDR_VAR 0 2
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: LD_INT 4
24010: PUSH
24011: LD_INT 5
24013: PUSH
24014: LD_INT 6
24016: PUSH
24017: LD_INT 7
24019: PUSH
24020: LD_INT 8
24022: PUSH
24023: LD_INT 9
24025: PUSH
24026: LD_INT 10
24028: PUSH
24029: LD_INT 11
24031: PUSH
24032: LD_INT 12
24034: PUSH
24035: LD_INT 13
24037: PUSH
24038: LD_INT 14
24040: PUSH
24041: LD_INT 15
24043: PUSH
24044: LD_INT 16
24046: PUSH
24047: LD_INT 17
24049: PUSH
24050: LD_INT 18
24052: PUSH
24053: LD_INT 19
24055: PUSH
24056: LD_INT 20
24058: PUSH
24059: LD_INT 21
24061: PUSH
24062: LD_INT 22
24064: PUSH
24065: LD_INT 23
24067: PUSH
24068: LD_INT 24
24070: PUSH
24071: LD_INT 25
24073: PUSH
24074: LD_INT 26
24076: PUSH
24077: LD_INT 27
24079: PUSH
24080: LD_INT 28
24082: PUSH
24083: LD_INT 29
24085: PUSH
24086: LD_INT 30
24088: PUSH
24089: LD_INT 31
24091: PUSH
24092: LD_INT 32
24094: PUSH
24095: LD_INT 33
24097: PUSH
24098: LD_INT 34
24100: PUSH
24101: LD_INT 35
24103: PUSH
24104: LD_INT 36
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 101
24147: PUSH
24148: LD_INT 102
24150: PUSH
24151: LD_INT 103
24153: PUSH
24154: LD_INT 104
24156: PUSH
24157: LD_INT 105
24159: PUSH
24160: LD_INT 106
24162: PUSH
24163: LD_INT 107
24165: PUSH
24166: LD_INT 108
24168: PUSH
24169: LD_INT 109
24171: PUSH
24172: LD_INT 110
24174: PUSH
24175: LD_INT 111
24177: PUSH
24178: LD_INT 112
24180: PUSH
24181: LD_INT 113
24183: PUSH
24184: LD_INT 114
24186: PUSH
24187: LD_INT 115
24189: PUSH
24190: LD_INT 116
24192: PUSH
24193: LD_INT 117
24195: PUSH
24196: LD_INT 118
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: ST_TO_ADDR
// if result then
24223: LD_VAR 0 2
24227: IFFALSE 25013
// begin normal :=  ;
24229: LD_ADDR_VAR 0 5
24233: PUSH
24234: LD_STRING 
24236: ST_TO_ADDR
// hardcore :=  ;
24237: LD_ADDR_VAR 0 6
24241: PUSH
24242: LD_STRING 
24244: ST_TO_ADDR
// active :=  ;
24245: LD_ADDR_VAR 0 7
24249: PUSH
24250: LD_STRING 
24252: ST_TO_ADDR
// for i = 1 to normalCounter do
24253: LD_ADDR_VAR 0 8
24257: PUSH
24258: DOUBLE
24259: LD_INT 1
24261: DEC
24262: ST_TO_ADDR
24263: LD_EXP 56
24267: PUSH
24268: FOR_TO
24269: IFFALSE 24370
// begin tmp := 0 ;
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_STRING 0
24278: ST_TO_ADDR
// if result [ 1 ] then
24279: LD_VAR 0 2
24283: PUSH
24284: LD_INT 1
24286: ARRAY
24287: IFFALSE 24352
// if result [ 1 ] [ 1 ] = i then
24289: LD_VAR 0 2
24293: PUSH
24294: LD_INT 1
24296: ARRAY
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: PUSH
24302: LD_VAR 0 8
24306: EQUAL
24307: IFFALSE 24352
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24309: LD_ADDR_VAR 0 2
24313: PUSH
24314: LD_VAR 0 2
24318: PPUSH
24319: LD_INT 1
24321: PPUSH
24322: LD_VAR 0 2
24326: PUSH
24327: LD_INT 1
24329: ARRAY
24330: PPUSH
24331: LD_INT 1
24333: PPUSH
24334: CALL_OW 3
24338: PPUSH
24339: CALL_OW 1
24343: ST_TO_ADDR
// tmp := 1 ;
24344: LD_ADDR_VAR 0 3
24348: PUSH
24349: LD_STRING 1
24351: ST_TO_ADDR
// end ; normal := normal & tmp ;
24352: LD_ADDR_VAR 0 5
24356: PUSH
24357: LD_VAR 0 5
24361: PUSH
24362: LD_VAR 0 3
24366: STR
24367: ST_TO_ADDR
// end ;
24368: GO 24268
24370: POP
24371: POP
// for i = 1 to hardcoreCounter do
24372: LD_ADDR_VAR 0 8
24376: PUSH
24377: DOUBLE
24378: LD_INT 1
24380: DEC
24381: ST_TO_ADDR
24382: LD_EXP 57
24386: PUSH
24387: FOR_TO
24388: IFFALSE 24493
// begin tmp := 0 ;
24390: LD_ADDR_VAR 0 3
24394: PUSH
24395: LD_STRING 0
24397: ST_TO_ADDR
// if result [ 2 ] then
24398: LD_VAR 0 2
24402: PUSH
24403: LD_INT 2
24405: ARRAY
24406: IFFALSE 24475
// if result [ 2 ] [ 1 ] = 100 + i then
24408: LD_VAR 0 2
24412: PUSH
24413: LD_INT 2
24415: ARRAY
24416: PUSH
24417: LD_INT 1
24419: ARRAY
24420: PUSH
24421: LD_INT 100
24423: PUSH
24424: LD_VAR 0 8
24428: PLUS
24429: EQUAL
24430: IFFALSE 24475
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24432: LD_ADDR_VAR 0 2
24436: PUSH
24437: LD_VAR 0 2
24441: PPUSH
24442: LD_INT 2
24444: PPUSH
24445: LD_VAR 0 2
24449: PUSH
24450: LD_INT 2
24452: ARRAY
24453: PPUSH
24454: LD_INT 1
24456: PPUSH
24457: CALL_OW 3
24461: PPUSH
24462: CALL_OW 1
24466: ST_TO_ADDR
// tmp := 1 ;
24467: LD_ADDR_VAR 0 3
24471: PUSH
24472: LD_STRING 1
24474: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24475: LD_ADDR_VAR 0 6
24479: PUSH
24480: LD_VAR 0 6
24484: PUSH
24485: LD_VAR 0 3
24489: STR
24490: ST_TO_ADDR
// end ;
24491: GO 24387
24493: POP
24494: POP
// if isGameLoad then
24495: LD_VAR 0 1
24499: IFFALSE 24974
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24501: LD_ADDR_VAR 0 4
24505: PUSH
24506: LD_EXP 60
24510: PUSH
24511: LD_EXP 59
24515: PUSH
24516: LD_EXP 61
24520: PUSH
24521: LD_EXP 58
24525: PUSH
24526: LD_EXP 62
24530: PUSH
24531: LD_EXP 63
24535: PUSH
24536: LD_EXP 64
24540: PUSH
24541: LD_EXP 65
24545: PUSH
24546: LD_EXP 66
24550: PUSH
24551: LD_EXP 67
24555: PUSH
24556: LD_EXP 68
24560: PUSH
24561: LD_EXP 69
24565: PUSH
24566: LD_EXP 70
24570: PUSH
24571: LD_EXP 71
24575: PUSH
24576: LD_EXP 79
24580: PUSH
24581: LD_EXP 80
24585: PUSH
24586: LD_EXP 81
24590: PUSH
24591: LD_EXP 82
24595: PUSH
24596: LD_EXP 84
24600: PUSH
24601: LD_EXP 85
24605: PUSH
24606: LD_EXP 86
24610: PUSH
24611: LD_EXP 89
24615: PUSH
24616: LD_EXP 91
24620: PUSH
24621: LD_EXP 92
24625: PUSH
24626: LD_EXP 93
24630: PUSH
24631: LD_EXP 95
24635: PUSH
24636: LD_EXP 96
24640: PUSH
24641: LD_EXP 99
24645: PUSH
24646: LD_EXP 100
24650: PUSH
24651: LD_EXP 101
24655: PUSH
24656: LD_EXP 102
24660: PUSH
24661: LD_EXP 103
24665: PUSH
24666: LD_EXP 104
24670: PUSH
24671: LD_EXP 105
24675: PUSH
24676: LD_EXP 106
24680: PUSH
24681: LD_EXP 107
24685: PUSH
24686: LD_EXP 72
24690: PUSH
24691: LD_EXP 73
24695: PUSH
24696: LD_EXP 76
24700: PUSH
24701: LD_EXP 77
24705: PUSH
24706: LD_EXP 78
24710: PUSH
24711: LD_EXP 74
24715: PUSH
24716: LD_EXP 75
24720: PUSH
24721: LD_EXP 83
24725: PUSH
24726: LD_EXP 87
24730: PUSH
24731: LD_EXP 88
24735: PUSH
24736: LD_EXP 90
24740: PUSH
24741: LD_EXP 94
24745: PUSH
24746: LD_EXP 97
24750: PUSH
24751: LD_EXP 98
24755: PUSH
24756: LD_EXP 108
24760: PUSH
24761: LD_EXP 109
24765: PUSH
24766: LD_EXP 110
24770: PUSH
24771: LD_EXP 111
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: ST_TO_ADDR
// tmp :=  ;
24832: LD_ADDR_VAR 0 3
24836: PUSH
24837: LD_STRING 
24839: ST_TO_ADDR
// for i = 1 to normalCounter do
24840: LD_ADDR_VAR 0 8
24844: PUSH
24845: DOUBLE
24846: LD_INT 1
24848: DEC
24849: ST_TO_ADDR
24850: LD_EXP 56
24854: PUSH
24855: FOR_TO
24856: IFFALSE 24892
// begin if flags [ i ] then
24858: LD_VAR 0 4
24862: PUSH
24863: LD_VAR 0 8
24867: ARRAY
24868: IFFALSE 24890
// tmp := tmp & i & ; ;
24870: LD_ADDR_VAR 0 3
24874: PUSH
24875: LD_VAR 0 3
24879: PUSH
24880: LD_VAR 0 8
24884: STR
24885: PUSH
24886: LD_STRING ;
24888: STR
24889: ST_TO_ADDR
// end ;
24890: GO 24855
24892: POP
24893: POP
// for i = 1 to hardcoreCounter do
24894: LD_ADDR_VAR 0 8
24898: PUSH
24899: DOUBLE
24900: LD_INT 1
24902: DEC
24903: ST_TO_ADDR
24904: LD_EXP 57
24908: PUSH
24909: FOR_TO
24910: IFFALSE 24956
// begin if flags [ normalCounter + i ] then
24912: LD_VAR 0 4
24916: PUSH
24917: LD_EXP 56
24921: PUSH
24922: LD_VAR 0 8
24926: PLUS
24927: ARRAY
24928: IFFALSE 24954
// tmp := tmp & ( 100 + i ) & ; ;
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_VAR 0 3
24939: PUSH
24940: LD_INT 100
24942: PUSH
24943: LD_VAR 0 8
24947: PLUS
24948: STR
24949: PUSH
24950: LD_STRING ;
24952: STR
24953: ST_TO_ADDR
// end ;
24954: GO 24909
24956: POP
24957: POP
// if tmp then
24958: LD_VAR 0 3
24962: IFFALSE 24974
// active := tmp ;
24964: LD_ADDR_VAR 0 7
24968: PUSH
24969: LD_VAR 0 3
24973: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24974: LD_STRING getStreamItemsFromMission("
24976: PUSH
24977: LD_VAR 0 5
24981: STR
24982: PUSH
24983: LD_STRING ","
24985: STR
24986: PUSH
24987: LD_VAR 0 6
24991: STR
24992: PUSH
24993: LD_STRING ","
24995: STR
24996: PUSH
24997: LD_VAR 0 7
25001: STR
25002: PUSH
25003: LD_STRING ")
25005: STR
25006: PPUSH
25007: CALL_OW 559
// end else
25011: GO 25020
// ToLua ( getStreamItemsFromMission("","","") ) ;
25013: LD_STRING getStreamItemsFromMission("","","")
25015: PPUSH
25016: CALL_OW 559
// end ;
25020: LD_VAR 0 2
25024: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25025: LD_EXP 55
25029: PUSH
25030: LD_EXP 60
25034: AND
25035: IFFALSE 25159
25037: GO 25039
25039: DISABLE
25040: LD_INT 0
25042: PPUSH
25043: PPUSH
// begin enable ;
25044: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25045: LD_ADDR_VAR 0 2
25049: PUSH
25050: LD_INT 22
25052: PUSH
25053: LD_OWVAR 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 2
25064: PUSH
25065: LD_INT 34
25067: PUSH
25068: LD_INT 7
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 34
25077: PUSH
25078: LD_INT 45
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 34
25087: PUSH
25088: LD_INT 28
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 34
25097: PUSH
25098: LD_INT 47
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: ST_TO_ADDR
// if not tmp then
25121: LD_VAR 0 2
25125: NOT
25126: IFFALSE 25130
// exit ;
25128: GO 25159
// for i in tmp do
25130: LD_ADDR_VAR 0 1
25134: PUSH
25135: LD_VAR 0 2
25139: PUSH
25140: FOR_IN
25141: IFFALSE 25157
// begin SetLives ( i , 0 ) ;
25143: LD_VAR 0 1
25147: PPUSH
25148: LD_INT 0
25150: PPUSH
25151: CALL_OW 234
// end ;
25155: GO 25140
25157: POP
25158: POP
// end ;
25159: PPOPN 2
25161: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25162: LD_EXP 55
25166: PUSH
25167: LD_EXP 61
25171: AND
25172: IFFALSE 25256
25174: GO 25176
25176: DISABLE
25177: LD_INT 0
25179: PPUSH
25180: PPUSH
// begin enable ;
25181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25182: LD_ADDR_VAR 0 2
25186: PUSH
25187: LD_INT 22
25189: PUSH
25190: LD_OWVAR 2
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 32
25201: PUSH
25202: LD_INT 3
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL_OW 69
25217: ST_TO_ADDR
// if not tmp then
25218: LD_VAR 0 2
25222: NOT
25223: IFFALSE 25227
// exit ;
25225: GO 25256
// for i in tmp do
25227: LD_ADDR_VAR 0 1
25231: PUSH
25232: LD_VAR 0 2
25236: PUSH
25237: FOR_IN
25238: IFFALSE 25254
// begin SetLives ( i , 0 ) ;
25240: LD_VAR 0 1
25244: PPUSH
25245: LD_INT 0
25247: PPUSH
25248: CALL_OW 234
// end ;
25252: GO 25237
25254: POP
25255: POP
// end ;
25256: PPOPN 2
25258: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25259: LD_EXP 55
25263: PUSH
25264: LD_EXP 58
25268: AND
25269: IFFALSE 25362
25271: GO 25273
25273: DISABLE
25274: LD_INT 0
25276: PPUSH
// begin enable ;
25277: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25278: LD_ADDR_VAR 0 1
25282: PUSH
25283: LD_INT 22
25285: PUSH
25286: LD_OWVAR 2
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: LD_INT 25
25300: PUSH
25301: LD_INT 5
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 25
25310: PUSH
25311: LD_INT 9
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 25
25320: PUSH
25321: LD_INT 8
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PPUSH
25338: CALL_OW 69
25342: PUSH
25343: FOR_IN
25344: IFFALSE 25360
// begin SetClass ( i , 1 ) ;
25346: LD_VAR 0 1
25350: PPUSH
25351: LD_INT 1
25353: PPUSH
25354: CALL_OW 336
// end ;
25358: GO 25343
25360: POP
25361: POP
// end ;
25362: PPOPN 1
25364: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25365: LD_EXP 55
25369: PUSH
25370: LD_EXP 59
25374: AND
25375: PUSH
25376: LD_OWVAR 65
25380: PUSH
25381: LD_INT 7
25383: LESS
25384: AND
25385: IFFALSE 25399
25387: GO 25389
25389: DISABLE
// begin enable ;
25390: ENABLE
// game_speed := 7 ;
25391: LD_ADDR_OWVAR 65
25395: PUSH
25396: LD_INT 7
25398: ST_TO_ADDR
// end ;
25399: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25400: LD_EXP 55
25404: PUSH
25405: LD_EXP 62
25409: AND
25410: IFFALSE 25612
25412: GO 25414
25414: DISABLE
25415: LD_INT 0
25417: PPUSH
25418: PPUSH
25419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25420: LD_ADDR_VAR 0 3
25424: PUSH
25425: LD_INT 81
25427: PUSH
25428: LD_OWVAR 2
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 21
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: ST_TO_ADDR
// if not tmp then
25456: LD_VAR 0 3
25460: NOT
25461: IFFALSE 25465
// exit ;
25463: GO 25612
// if tmp > 5 then
25465: LD_VAR 0 3
25469: PUSH
25470: LD_INT 5
25472: GREATER
25473: IFFALSE 25485
// k := 5 else
25475: LD_ADDR_VAR 0 2
25479: PUSH
25480: LD_INT 5
25482: ST_TO_ADDR
25483: GO 25495
// k := tmp ;
25485: LD_ADDR_VAR 0 2
25489: PUSH
25490: LD_VAR 0 3
25494: ST_TO_ADDR
// for i := 1 to k do
25495: LD_ADDR_VAR 0 1
25499: PUSH
25500: DOUBLE
25501: LD_INT 1
25503: DEC
25504: ST_TO_ADDR
25505: LD_VAR 0 2
25509: PUSH
25510: FOR_TO
25511: IFFALSE 25610
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25513: LD_VAR 0 3
25517: PUSH
25518: LD_VAR 0 1
25522: ARRAY
25523: PPUSH
25524: LD_VAR 0 1
25528: PUSH
25529: LD_INT 4
25531: MOD
25532: PUSH
25533: LD_INT 1
25535: PLUS
25536: PPUSH
25537: CALL_OW 259
25541: PUSH
25542: LD_INT 10
25544: LESS
25545: IFFALSE 25608
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25547: LD_VAR 0 3
25551: PUSH
25552: LD_VAR 0 1
25556: ARRAY
25557: PPUSH
25558: LD_VAR 0 1
25562: PUSH
25563: LD_INT 4
25565: MOD
25566: PUSH
25567: LD_INT 1
25569: PLUS
25570: PPUSH
25571: LD_VAR 0 3
25575: PUSH
25576: LD_VAR 0 1
25580: ARRAY
25581: PPUSH
25582: LD_VAR 0 1
25586: PUSH
25587: LD_INT 4
25589: MOD
25590: PUSH
25591: LD_INT 1
25593: PLUS
25594: PPUSH
25595: CALL_OW 259
25599: PUSH
25600: LD_INT 1
25602: PLUS
25603: PPUSH
25604: CALL_OW 237
25608: GO 25510
25610: POP
25611: POP
// end ;
25612: PPOPN 3
25614: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25615: LD_EXP 55
25619: PUSH
25620: LD_EXP 63
25624: AND
25625: IFFALSE 25645
25627: GO 25629
25629: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25630: LD_INT 4
25632: PPUSH
25633: LD_OWVAR 2
25637: PPUSH
25638: LD_INT 0
25640: PPUSH
25641: CALL_OW 324
25645: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25646: LD_EXP 55
25650: PUSH
25651: LD_EXP 92
25655: AND
25656: IFFALSE 25676
25658: GO 25660
25660: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25661: LD_INT 19
25663: PPUSH
25664: LD_OWVAR 2
25668: PPUSH
25669: LD_INT 0
25671: PPUSH
25672: CALL_OW 324
25676: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25677: LD_EXP 55
25681: PUSH
25682: LD_EXP 64
25686: AND
25687: IFFALSE 25789
25689: GO 25691
25691: DISABLE
25692: LD_INT 0
25694: PPUSH
25695: PPUSH
// begin enable ;
25696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25697: LD_ADDR_VAR 0 2
25701: PUSH
25702: LD_INT 22
25704: PUSH
25705: LD_OWVAR 2
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: LD_INT 34
25719: PUSH
25720: LD_INT 11
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 34
25729: PUSH
25730: LD_INT 30
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PPUSH
25746: CALL_OW 69
25750: ST_TO_ADDR
// if not tmp then
25751: LD_VAR 0 2
25755: NOT
25756: IFFALSE 25760
// exit ;
25758: GO 25789
// for i in tmp do
25760: LD_ADDR_VAR 0 1
25764: PUSH
25765: LD_VAR 0 2
25769: PUSH
25770: FOR_IN
25771: IFFALSE 25787
// begin SetLives ( i , 0 ) ;
25773: LD_VAR 0 1
25777: PPUSH
25778: LD_INT 0
25780: PPUSH
25781: CALL_OW 234
// end ;
25785: GO 25770
25787: POP
25788: POP
// end ;
25789: PPOPN 2
25791: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25792: LD_EXP 55
25796: PUSH
25797: LD_EXP 65
25801: AND
25802: IFFALSE 25822
25804: GO 25806
25806: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25807: LD_INT 32
25809: PPUSH
25810: LD_OWVAR 2
25814: PPUSH
25815: LD_INT 0
25817: PPUSH
25818: CALL_OW 324
25822: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25823: LD_EXP 55
25827: PUSH
25828: LD_EXP 66
25832: AND
25833: IFFALSE 26014
25835: GO 25837
25837: DISABLE
25838: LD_INT 0
25840: PPUSH
25841: PPUSH
25842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25843: LD_ADDR_VAR 0 2
25847: PUSH
25848: LD_INT 22
25850: PUSH
25851: LD_OWVAR 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 33
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PPUSH
25874: CALL_OW 69
25878: ST_TO_ADDR
// if not tmp then
25879: LD_VAR 0 2
25883: NOT
25884: IFFALSE 25888
// exit ;
25886: GO 26014
// side := 0 ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_INT 0
25895: ST_TO_ADDR
// for i := 1 to 8 do
25896: LD_ADDR_VAR 0 1
25900: PUSH
25901: DOUBLE
25902: LD_INT 1
25904: DEC
25905: ST_TO_ADDR
25906: LD_INT 8
25908: PUSH
25909: FOR_TO
25910: IFFALSE 25958
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25912: LD_OWVAR 2
25916: PUSH
25917: LD_VAR 0 1
25921: NONEQUAL
25922: PUSH
25923: LD_OWVAR 2
25927: PPUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL_OW 81
25937: PUSH
25938: LD_INT 2
25940: EQUAL
25941: AND
25942: IFFALSE 25956
// begin side := i ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_VAR 0 1
25953: ST_TO_ADDR
// break ;
25954: GO 25958
// end ;
25956: GO 25909
25958: POP
25959: POP
// if not side then
25960: LD_VAR 0 3
25964: NOT
25965: IFFALSE 25969
// exit ;
25967: GO 26014
// for i := 1 to tmp do
25969: LD_ADDR_VAR 0 1
25973: PUSH
25974: DOUBLE
25975: LD_INT 1
25977: DEC
25978: ST_TO_ADDR
25979: LD_VAR 0 2
25983: PUSH
25984: FOR_TO
25985: IFFALSE 26012
// if Prob ( 60 ) then
25987: LD_INT 60
25989: PPUSH
25990: CALL_OW 13
25994: IFFALSE 26010
// SetSide ( i , side ) ;
25996: LD_VAR 0 1
26000: PPUSH
26001: LD_VAR 0 3
26005: PPUSH
26006: CALL_OW 235
26010: GO 25984
26012: POP
26013: POP
// end ;
26014: PPOPN 3
26016: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26017: LD_EXP 55
26021: PUSH
26022: LD_EXP 68
26026: AND
26027: IFFALSE 26146
26029: GO 26031
26031: DISABLE
26032: LD_INT 0
26034: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26035: LD_ADDR_VAR 0 1
26039: PUSH
26040: LD_INT 22
26042: PUSH
26043: LD_OWVAR 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 21
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 3
26064: PUSH
26065: LD_INT 23
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: PUSH
26089: FOR_IN
26090: IFFALSE 26144
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26092: LD_VAR 0 1
26096: PPUSH
26097: CALL_OW 257
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: LD_INT 3
26110: PUSH
26111: LD_INT 4
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: IN
26120: IFFALSE 26142
// SetClass ( un , rand ( 1 , 4 ) ) ;
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_INT 1
26129: PPUSH
26130: LD_INT 4
26132: PPUSH
26133: CALL_OW 12
26137: PPUSH
26138: CALL_OW 336
26142: GO 26089
26144: POP
26145: POP
// end ;
26146: PPOPN 1
26148: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26149: LD_EXP 55
26153: PUSH
26154: LD_EXP 67
26158: AND
26159: IFFALSE 26238
26161: GO 26163
26163: DISABLE
26164: LD_INT 0
26166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26167: LD_ADDR_VAR 0 1
26171: PUSH
26172: LD_INT 22
26174: PUSH
26175: LD_OWVAR 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 21
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PPUSH
26198: CALL_OW 69
26202: ST_TO_ADDR
// if not tmp then
26203: LD_VAR 0 1
26207: NOT
26208: IFFALSE 26212
// exit ;
26210: GO 26238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26212: LD_VAR 0 1
26216: PUSH
26217: LD_INT 1
26219: PPUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: CALL_OW 12
26229: ARRAY
26230: PPUSH
26231: LD_INT 100
26233: PPUSH
26234: CALL_OW 234
// end ;
26238: PPOPN 1
26240: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26241: LD_EXP 55
26245: PUSH
26246: LD_EXP 69
26250: AND
26251: IFFALSE 26349
26253: GO 26255
26255: DISABLE
26256: LD_INT 0
26258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_INT 22
26266: PUSH
26267: LD_OWVAR 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 21
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PPUSH
26290: CALL_OW 69
26294: ST_TO_ADDR
// if not tmp then
26295: LD_VAR 0 1
26299: NOT
26300: IFFALSE 26304
// exit ;
26302: GO 26349
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26304: LD_VAR 0 1
26308: PUSH
26309: LD_INT 1
26311: PPUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 12
26321: ARRAY
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 4
26328: PPUSH
26329: CALL_OW 12
26333: PPUSH
26334: LD_INT 3000
26336: PPUSH
26337: LD_INT 9000
26339: PPUSH
26340: CALL_OW 12
26344: PPUSH
26345: CALL_OW 492
// end ;
26349: PPOPN 1
26351: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26352: LD_EXP 55
26356: PUSH
26357: LD_EXP 70
26361: AND
26362: IFFALSE 26382
26364: GO 26366
26366: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26367: LD_INT 1
26369: PPUSH
26370: LD_OWVAR 2
26374: PPUSH
26375: LD_INT 0
26377: PPUSH
26378: CALL_OW 324
26382: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26383: LD_EXP 55
26387: PUSH
26388: LD_EXP 71
26392: AND
26393: IFFALSE 26476
26395: GO 26397
26397: DISABLE
26398: LD_INT 0
26400: PPUSH
26401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26402: LD_ADDR_VAR 0 2
26406: PUSH
26407: LD_INT 22
26409: PUSH
26410: LD_OWVAR 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 21
26421: PUSH
26422: LD_INT 3
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PPUSH
26433: CALL_OW 69
26437: ST_TO_ADDR
// if not tmp then
26438: LD_VAR 0 2
26442: NOT
26443: IFFALSE 26447
// exit ;
26445: GO 26476
// for i in tmp do
26447: LD_ADDR_VAR 0 1
26451: PUSH
26452: LD_VAR 0 2
26456: PUSH
26457: FOR_IN
26458: IFFALSE 26474
// SetBLevel ( i , 10 ) ;
26460: LD_VAR 0 1
26464: PPUSH
26465: LD_INT 10
26467: PPUSH
26468: CALL_OW 241
26472: GO 26457
26474: POP
26475: POP
// end ;
26476: PPOPN 2
26478: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26479: LD_EXP 55
26483: PUSH
26484: LD_EXP 72
26488: AND
26489: IFFALSE 26600
26491: GO 26493
26493: DISABLE
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
26498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26499: LD_ADDR_VAR 0 3
26503: PUSH
26504: LD_INT 22
26506: PUSH
26507: LD_OWVAR 2
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 25
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PPUSH
26530: CALL_OW 69
26534: ST_TO_ADDR
// if not tmp then
26535: LD_VAR 0 3
26539: NOT
26540: IFFALSE 26544
// exit ;
26542: GO 26600
// un := tmp [ rand ( 1 , tmp ) ] ;
26544: LD_ADDR_VAR 0 2
26548: PUSH
26549: LD_VAR 0 3
26553: PUSH
26554: LD_INT 1
26556: PPUSH
26557: LD_VAR 0 3
26561: PPUSH
26562: CALL_OW 12
26566: ARRAY
26567: ST_TO_ADDR
// if Crawls ( un ) then
26568: LD_VAR 0 2
26572: PPUSH
26573: CALL_OW 318
26577: IFFALSE 26588
// ComWalk ( un ) ;
26579: LD_VAR 0 2
26583: PPUSH
26584: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26588: LD_VAR 0 2
26592: PPUSH
26593: LD_INT 5
26595: PPUSH
26596: CALL_OW 336
// end ;
26600: PPOPN 3
26602: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26603: LD_EXP 55
26607: PUSH
26608: LD_EXP 73
26612: AND
26613: PUSH
26614: LD_OWVAR 67
26618: PUSH
26619: LD_INT 4
26621: LESS
26622: AND
26623: IFFALSE 26642
26625: GO 26627
26627: DISABLE
// begin Difficulty := Difficulty + 1 ;
26628: LD_ADDR_OWVAR 67
26632: PUSH
26633: LD_OWVAR 67
26637: PUSH
26638: LD_INT 1
26640: PLUS
26641: ST_TO_ADDR
// end ;
26642: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26643: LD_EXP 55
26647: PUSH
26648: LD_EXP 74
26652: AND
26653: IFFALSE 26756
26655: GO 26657
26657: DISABLE
26658: LD_INT 0
26660: PPUSH
// begin for i := 1 to 5 do
26661: LD_ADDR_VAR 0 1
26665: PUSH
26666: DOUBLE
26667: LD_INT 1
26669: DEC
26670: ST_TO_ADDR
26671: LD_INT 5
26673: PUSH
26674: FOR_TO
26675: IFFALSE 26754
// begin uc_nation := nation_nature ;
26677: LD_ADDR_OWVAR 21
26681: PUSH
26682: LD_INT 0
26684: ST_TO_ADDR
// uc_side := 0 ;
26685: LD_ADDR_OWVAR 20
26689: PUSH
26690: LD_INT 0
26692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26693: LD_ADDR_OWVAR 29
26697: PUSH
26698: LD_INT 12
26700: PUSH
26701: LD_INT 12
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// hc_agressivity := 20 ;
26708: LD_ADDR_OWVAR 35
26712: PUSH
26713: LD_INT 20
26715: ST_TO_ADDR
// hc_class := class_tiger ;
26716: LD_ADDR_OWVAR 28
26720: PUSH
26721: LD_INT 14
26723: ST_TO_ADDR
// hc_gallery :=  ;
26724: LD_ADDR_OWVAR 33
26728: PUSH
26729: LD_STRING 
26731: ST_TO_ADDR
// hc_name :=  ;
26732: LD_ADDR_OWVAR 26
26736: PUSH
26737: LD_STRING 
26739: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26740: CALL_OW 44
26744: PPUSH
26745: LD_INT 0
26747: PPUSH
26748: CALL_OW 51
// end ;
26752: GO 26674
26754: POP
26755: POP
// end ;
26756: PPOPN 1
26758: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26759: LD_EXP 55
26763: PUSH
26764: LD_EXP 75
26768: AND
26769: IFFALSE 26778
26771: GO 26773
26773: DISABLE
// StreamSibBomb ;
26774: CALL 26779 0 0
26778: END
// export function StreamSibBomb ; var i , x , y ; begin
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
// result := false ;
26785: LD_ADDR_VAR 0 1
26789: PUSH
26790: LD_INT 0
26792: ST_TO_ADDR
// for i := 1 to 16 do
26793: LD_ADDR_VAR 0 2
26797: PUSH
26798: DOUBLE
26799: LD_INT 1
26801: DEC
26802: ST_TO_ADDR
26803: LD_INT 16
26805: PUSH
26806: FOR_TO
26807: IFFALSE 27006
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26809: LD_ADDR_VAR 0 3
26813: PUSH
26814: LD_INT 10
26816: PUSH
26817: LD_INT 20
26819: PUSH
26820: LD_INT 30
26822: PUSH
26823: LD_INT 40
26825: PUSH
26826: LD_INT 50
26828: PUSH
26829: LD_INT 60
26831: PUSH
26832: LD_INT 70
26834: PUSH
26835: LD_INT 80
26837: PUSH
26838: LD_INT 90
26840: PUSH
26841: LD_INT 100
26843: PUSH
26844: LD_INT 110
26846: PUSH
26847: LD_INT 120
26849: PUSH
26850: LD_INT 130
26852: PUSH
26853: LD_INT 140
26855: PUSH
26856: LD_INT 150
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PPUSH
26879: LD_INT 15
26881: PPUSH
26882: CALL_OW 12
26886: ARRAY
26887: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26888: LD_ADDR_VAR 0 4
26892: PUSH
26893: LD_INT 10
26895: PUSH
26896: LD_INT 20
26898: PUSH
26899: LD_INT 30
26901: PUSH
26902: LD_INT 40
26904: PUSH
26905: LD_INT 50
26907: PUSH
26908: LD_INT 60
26910: PUSH
26911: LD_INT 70
26913: PUSH
26914: LD_INT 80
26916: PUSH
26917: LD_INT 90
26919: PUSH
26920: LD_INT 100
26922: PUSH
26923: LD_INT 110
26925: PUSH
26926: LD_INT 120
26928: PUSH
26929: LD_INT 130
26931: PUSH
26932: LD_INT 140
26934: PUSH
26935: LD_INT 150
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: PPUSH
26958: LD_INT 15
26960: PPUSH
26961: CALL_OW 12
26965: ARRAY
26966: ST_TO_ADDR
// if ValidHex ( x , y ) then
26967: LD_VAR 0 3
26971: PPUSH
26972: LD_VAR 0 4
26976: PPUSH
26977: CALL_OW 488
26981: IFFALSE 27004
// begin result := [ x , y ] ;
26983: LD_ADDR_VAR 0 1
26987: PUSH
26988: LD_VAR 0 3
26992: PUSH
26993: LD_VAR 0 4
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: ST_TO_ADDR
// break ;
27002: GO 27006
// end ; end ;
27004: GO 26806
27006: POP
27007: POP
// if result then
27008: LD_VAR 0 1
27012: IFFALSE 27072
// begin ToLua ( playSibBomb() ) ;
27014: LD_STRING playSibBomb()
27016: PPUSH
27017: CALL_OW 559
// wait ( 0 0$14 ) ;
27021: LD_INT 490
27023: PPUSH
27024: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27028: LD_VAR 0 1
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PPUSH
27037: LD_VAR 0 1
27041: PUSH
27042: LD_INT 2
27044: ARRAY
27045: PPUSH
27046: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27050: LD_VAR 0 1
27054: PUSH
27055: LD_INT 1
27057: ARRAY
27058: PPUSH
27059: LD_VAR 0 1
27063: PUSH
27064: LD_INT 2
27066: ARRAY
27067: PPUSH
27068: CALL_OW 429
// end ; end ;
27072: LD_VAR 0 1
27076: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27077: LD_EXP 55
27081: PUSH
27082: LD_EXP 77
27086: AND
27087: IFFALSE 27099
27089: GO 27091
27091: DISABLE
// YouLost (  ) ;
27092: LD_STRING 
27094: PPUSH
27095: CALL_OW 104
27099: END
// every 0 0$1 trigger StreamModeActive and sFog do
27100: LD_EXP 55
27104: PUSH
27105: LD_EXP 76
27109: AND
27110: IFFALSE 27124
27112: GO 27114
27114: DISABLE
// FogOff ( your_side ) ;
27115: LD_OWVAR 2
27119: PPUSH
27120: CALL_OW 344
27124: END
// every 0 0$1 trigger StreamModeActive and sSun do
27125: LD_EXP 55
27129: PUSH
27130: LD_EXP 78
27134: AND
27135: IFFALSE 27163
27137: GO 27139
27139: DISABLE
// begin solar_recharge_percent := 0 ;
27140: LD_ADDR_OWVAR 79
27144: PUSH
27145: LD_INT 0
27147: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27148: LD_INT 10500
27150: PPUSH
27151: CALL_OW 67
// solar_recharge_percent := 100 ;
27155: LD_ADDR_OWVAR 79
27159: PUSH
27160: LD_INT 100
27162: ST_TO_ADDR
// end ;
27163: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27164: LD_EXP 55
27168: PUSH
27169: LD_EXP 79
27173: AND
27174: IFFALSE 27413
27176: GO 27178
27178: DISABLE
27179: LD_INT 0
27181: PPUSH
27182: PPUSH
27183: PPUSH
// begin tmp := [ ] ;
27184: LD_ADDR_VAR 0 3
27188: PUSH
27189: EMPTY
27190: ST_TO_ADDR
// for i := 1 to 6 do
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: DOUBLE
27197: LD_INT 1
27199: DEC
27200: ST_TO_ADDR
27201: LD_INT 6
27203: PUSH
27204: FOR_TO
27205: IFFALSE 27310
// begin uc_nation := nation_nature ;
27207: LD_ADDR_OWVAR 21
27211: PUSH
27212: LD_INT 0
27214: ST_TO_ADDR
// uc_side := 0 ;
27215: LD_ADDR_OWVAR 20
27219: PUSH
27220: LD_INT 0
27222: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27223: LD_ADDR_OWVAR 29
27227: PUSH
27228: LD_INT 12
27230: PUSH
27231: LD_INT 12
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: ST_TO_ADDR
// hc_agressivity := 20 ;
27238: LD_ADDR_OWVAR 35
27242: PUSH
27243: LD_INT 20
27245: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27246: LD_ADDR_OWVAR 28
27250: PUSH
27251: LD_INT 17
27253: ST_TO_ADDR
// hc_gallery :=  ;
27254: LD_ADDR_OWVAR 33
27258: PUSH
27259: LD_STRING 
27261: ST_TO_ADDR
// hc_name :=  ;
27262: LD_ADDR_OWVAR 26
27266: PUSH
27267: LD_STRING 
27269: ST_TO_ADDR
// un := CreateHuman ;
27270: LD_ADDR_VAR 0 2
27274: PUSH
27275: CALL_OW 44
27279: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27280: LD_VAR 0 2
27284: PPUSH
27285: LD_INT 1
27287: PPUSH
27288: CALL_OW 51
// tmp := tmp ^ un ;
27292: LD_ADDR_VAR 0 3
27296: PUSH
27297: LD_VAR 0 3
27301: PUSH
27302: LD_VAR 0 2
27306: ADD
27307: ST_TO_ADDR
// end ;
27308: GO 27204
27310: POP
27311: POP
// repeat wait ( 0 0$1 ) ;
27312: LD_INT 35
27314: PPUSH
27315: CALL_OW 67
// for un in tmp do
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: LD_VAR 0 3
27328: PUSH
27329: FOR_IN
27330: IFFALSE 27404
// begin if IsDead ( un ) then
27332: LD_VAR 0 2
27336: PPUSH
27337: CALL_OW 301
27341: IFFALSE 27361
// begin tmp := tmp diff un ;
27343: LD_ADDR_VAR 0 3
27347: PUSH
27348: LD_VAR 0 3
27352: PUSH
27353: LD_VAR 0 2
27357: DIFF
27358: ST_TO_ADDR
// continue ;
27359: GO 27329
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27361: LD_VAR 0 2
27365: PPUSH
27366: LD_INT 3
27368: PUSH
27369: LD_INT 22
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PPUSH
27383: CALL_OW 69
27387: PPUSH
27388: LD_VAR 0 2
27392: PPUSH
27393: CALL_OW 74
27397: PPUSH
27398: CALL_OW 115
// end ;
27402: GO 27329
27404: POP
27405: POP
// until not tmp ;
27406: LD_VAR 0 3
27410: NOT
27411: IFFALSE 27312
// end ;
27413: PPOPN 3
27415: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27416: LD_EXP 55
27420: PUSH
27421: LD_EXP 80
27425: AND
27426: IFFALSE 27480
27428: GO 27430
27430: DISABLE
// begin ToLua ( displayTroll(); ) ;
27431: LD_STRING displayTroll();
27433: PPUSH
27434: CALL_OW 559
// wait ( 3 3$00 ) ;
27438: LD_INT 6300
27440: PPUSH
27441: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27445: LD_STRING hideTroll();
27447: PPUSH
27448: CALL_OW 559
// wait ( 1 1$00 ) ;
27452: LD_INT 2100
27454: PPUSH
27455: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27459: LD_STRING displayTroll();
27461: PPUSH
27462: CALL_OW 559
// wait ( 1 1$00 ) ;
27466: LD_INT 2100
27468: PPUSH
27469: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27473: LD_STRING hideTroll();
27475: PPUSH
27476: CALL_OW 559
// end ;
27480: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27481: LD_EXP 55
27485: PUSH
27486: LD_EXP 81
27490: AND
27491: IFFALSE 27554
27493: GO 27495
27495: DISABLE
27496: LD_INT 0
27498: PPUSH
// begin p := 0 ;
27499: LD_ADDR_VAR 0 1
27503: PUSH
27504: LD_INT 0
27506: ST_TO_ADDR
// repeat game_speed := 1 ;
27507: LD_ADDR_OWVAR 65
27511: PUSH
27512: LD_INT 1
27514: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27515: LD_INT 35
27517: PPUSH
27518: CALL_OW 67
// p := p + 1 ;
27522: LD_ADDR_VAR 0 1
27526: PUSH
27527: LD_VAR 0 1
27531: PUSH
27532: LD_INT 1
27534: PLUS
27535: ST_TO_ADDR
// until p >= 60 ;
27536: LD_VAR 0 1
27540: PUSH
27541: LD_INT 60
27543: GREATEREQUAL
27544: IFFALSE 27507
// game_speed := 4 ;
27546: LD_ADDR_OWVAR 65
27550: PUSH
27551: LD_INT 4
27553: ST_TO_ADDR
// end ;
27554: PPOPN 1
27556: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27557: LD_EXP 55
27561: PUSH
27562: LD_EXP 82
27566: AND
27567: IFFALSE 27713
27569: GO 27571
27571: DISABLE
27572: LD_INT 0
27574: PPUSH
27575: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27576: LD_ADDR_VAR 0 1
27580: PUSH
27581: LD_INT 22
27583: PUSH
27584: LD_OWVAR 2
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 30
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 30
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PPUSH
27625: CALL_OW 69
27629: ST_TO_ADDR
// if not depot then
27630: LD_VAR 0 1
27634: NOT
27635: IFFALSE 27639
// exit ;
27637: GO 27713
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27639: LD_ADDR_VAR 0 2
27643: PUSH
27644: LD_VAR 0 1
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 12
27661: ARRAY
27662: PPUSH
27663: CALL_OW 274
27667: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27668: LD_VAR 0 2
27672: PPUSH
27673: LD_INT 1
27675: PPUSH
27676: LD_INT 0
27678: PPUSH
27679: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27683: LD_VAR 0 2
27687: PPUSH
27688: LD_INT 2
27690: PPUSH
27691: LD_INT 0
27693: PPUSH
27694: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27698: LD_VAR 0 2
27702: PPUSH
27703: LD_INT 3
27705: PPUSH
27706: LD_INT 0
27708: PPUSH
27709: CALL_OW 277
// end ;
27713: PPOPN 2
27715: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27716: LD_EXP 55
27720: PUSH
27721: LD_EXP 83
27725: AND
27726: IFFALSE 27823
27728: GO 27730
27730: DISABLE
27731: LD_INT 0
27733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27734: LD_ADDR_VAR 0 1
27738: PUSH
27739: LD_INT 22
27741: PUSH
27742: LD_OWVAR 2
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 21
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 3
27763: PUSH
27764: LD_INT 23
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: ST_TO_ADDR
// if not tmp then
27788: LD_VAR 0 1
27792: NOT
27793: IFFALSE 27797
// exit ;
27795: GO 27823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27797: LD_VAR 0 1
27801: PUSH
27802: LD_INT 1
27804: PPUSH
27805: LD_VAR 0 1
27809: PPUSH
27810: CALL_OW 12
27814: ARRAY
27815: PPUSH
27816: LD_INT 200
27818: PPUSH
27819: CALL_OW 234
// end ;
27823: PPOPN 1
27825: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27826: LD_EXP 55
27830: PUSH
27831: LD_EXP 84
27835: AND
27836: IFFALSE 27915
27838: GO 27840
27840: DISABLE
27841: LD_INT 0
27843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27844: LD_ADDR_VAR 0 1
27848: PUSH
27849: LD_INT 22
27851: PUSH
27852: LD_OWVAR 2
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 21
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PPUSH
27875: CALL_OW 69
27879: ST_TO_ADDR
// if not tmp then
27880: LD_VAR 0 1
27884: NOT
27885: IFFALSE 27889
// exit ;
27887: GO 27915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27889: LD_VAR 0 1
27893: PUSH
27894: LD_INT 1
27896: PPUSH
27897: LD_VAR 0 1
27901: PPUSH
27902: CALL_OW 12
27906: ARRAY
27907: PPUSH
27908: LD_INT 60
27910: PPUSH
27911: CALL_OW 234
// end ;
27915: PPOPN 1
27917: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27918: LD_EXP 55
27922: PUSH
27923: LD_EXP 85
27927: AND
27928: IFFALSE 28027
27930: GO 27932
27932: DISABLE
27933: LD_INT 0
27935: PPUSH
27936: PPUSH
// begin enable ;
27937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27938: LD_ADDR_VAR 0 1
27942: PUSH
27943: LD_INT 22
27945: PUSH
27946: LD_OWVAR 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 61
27957: PUSH
27958: EMPTY
27959: LIST
27960: PUSH
27961: LD_INT 33
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: PPUSH
27976: CALL_OW 69
27980: ST_TO_ADDR
// if not tmp then
27981: LD_VAR 0 1
27985: NOT
27986: IFFALSE 27990
// exit ;
27988: GO 28027
// for i in tmp do
27990: LD_ADDR_VAR 0 2
27994: PUSH
27995: LD_VAR 0 1
27999: PUSH
28000: FOR_IN
28001: IFFALSE 28025
// if IsControledBy ( i ) then
28003: LD_VAR 0 2
28007: PPUSH
28008: CALL_OW 312
28012: IFFALSE 28023
// ComUnlink ( i ) ;
28014: LD_VAR 0 2
28018: PPUSH
28019: CALL_OW 136
28023: GO 28000
28025: POP
28026: POP
// end ;
28027: PPOPN 2
28029: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28030: LD_EXP 55
28034: PUSH
28035: LD_EXP 86
28039: AND
28040: IFFALSE 28180
28042: GO 28044
28044: DISABLE
28045: LD_INT 0
28047: PPUSH
28048: PPUSH
// begin ToLua ( displayPowell(); ) ;
28049: LD_STRING displayPowell();
28051: PPUSH
28052: CALL_OW 559
// uc_side := 0 ;
28056: LD_ADDR_OWVAR 20
28060: PUSH
28061: LD_INT 0
28063: ST_TO_ADDR
// uc_nation := 2 ;
28064: LD_ADDR_OWVAR 21
28068: PUSH
28069: LD_INT 2
28071: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28072: LD_ADDR_OWVAR 37
28076: PUSH
28077: LD_INT 14
28079: ST_TO_ADDR
// vc_engine := engine_siberite ;
28080: LD_ADDR_OWVAR 39
28084: PUSH
28085: LD_INT 3
28087: ST_TO_ADDR
// vc_control := control_apeman ;
28088: LD_ADDR_OWVAR 38
28092: PUSH
28093: LD_INT 5
28095: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28096: LD_ADDR_OWVAR 40
28100: PUSH
28101: LD_INT 29
28103: ST_TO_ADDR
// un := CreateVehicle ;
28104: LD_ADDR_VAR 0 2
28108: PUSH
28109: CALL_OW 45
28113: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28114: LD_VAR 0 2
28118: PPUSH
28119: LD_INT 1
28121: PPUSH
28122: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28126: LD_INT 35
28128: PPUSH
28129: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28133: LD_VAR 0 2
28137: PPUSH
28138: LD_INT 22
28140: PUSH
28141: LD_OWVAR 2
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PPUSH
28150: CALL_OW 69
28154: PPUSH
28155: LD_VAR 0 2
28159: PPUSH
28160: CALL_OW 74
28164: PPUSH
28165: CALL_OW 115
// until IsDead ( un ) ;
28169: LD_VAR 0 2
28173: PPUSH
28174: CALL_OW 301
28178: IFFALSE 28126
// end ;
28180: PPOPN 2
28182: END
// every 0 0$1 trigger StreamModeActive and sStu do
28183: LD_EXP 55
28187: PUSH
28188: LD_EXP 94
28192: AND
28193: IFFALSE 28209
28195: GO 28197
28197: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28198: LD_STRING displayStucuk();
28200: PPUSH
28201: CALL_OW 559
// ResetFog ;
28205: CALL_OW 335
// end ;
28209: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28210: LD_EXP 55
28214: PUSH
28215: LD_EXP 87
28219: AND
28220: IFFALSE 28361
28222: GO 28224
28224: DISABLE
28225: LD_INT 0
28227: PPUSH
28228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28229: LD_ADDR_VAR 0 2
28233: PUSH
28234: LD_INT 22
28236: PUSH
28237: LD_OWVAR 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 21
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PPUSH
28260: CALL_OW 69
28264: ST_TO_ADDR
// if not tmp then
28265: LD_VAR 0 2
28269: NOT
28270: IFFALSE 28274
// exit ;
28272: GO 28361
// un := tmp [ rand ( 1 , tmp ) ] ;
28274: LD_ADDR_VAR 0 1
28278: PUSH
28279: LD_VAR 0 2
28283: PUSH
28284: LD_INT 1
28286: PPUSH
28287: LD_VAR 0 2
28291: PPUSH
28292: CALL_OW 12
28296: ARRAY
28297: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28298: LD_VAR 0 1
28302: PPUSH
28303: LD_INT 0
28305: PPUSH
28306: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28310: LD_VAR 0 1
28314: PPUSH
28315: LD_OWVAR 3
28319: PUSH
28320: LD_VAR 0 1
28324: DIFF
28325: PPUSH
28326: LD_VAR 0 1
28330: PPUSH
28331: CALL_OW 74
28335: PPUSH
28336: CALL_OW 115
// wait ( 0 0$20 ) ;
28340: LD_INT 700
28342: PPUSH
28343: CALL_OW 67
// SetSide ( un , your_side ) ;
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_OWVAR 2
28356: PPUSH
28357: CALL_OW 235
// end ;
28361: PPOPN 2
28363: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28364: LD_EXP 55
28368: PUSH
28369: LD_EXP 88
28373: AND
28374: IFFALSE 28480
28376: GO 28378
28378: DISABLE
28379: LD_INT 0
28381: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28382: LD_ADDR_VAR 0 1
28386: PUSH
28387: LD_INT 22
28389: PUSH
28390: LD_OWVAR 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 30
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 30
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 69
28435: ST_TO_ADDR
// if not depot then
28436: LD_VAR 0 1
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 28480
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28445: LD_VAR 0 1
28449: PUSH
28450: LD_INT 1
28452: ARRAY
28453: PPUSH
28454: CALL_OW 250
28458: PPUSH
28459: LD_VAR 0 1
28463: PUSH
28464: LD_INT 1
28466: ARRAY
28467: PPUSH
28468: CALL_OW 251
28472: PPUSH
28473: LD_INT 70
28475: PPUSH
28476: CALL_OW 495
// end ;
28480: PPOPN 1
28482: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28483: LD_EXP 55
28487: PUSH
28488: LD_EXP 89
28492: AND
28493: IFFALSE 28704
28495: GO 28497
28497: DISABLE
28498: LD_INT 0
28500: PPUSH
28501: PPUSH
28502: PPUSH
28503: PPUSH
28504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28505: LD_ADDR_VAR 0 5
28509: PUSH
28510: LD_INT 22
28512: PUSH
28513: LD_OWVAR 2
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 21
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PPUSH
28536: CALL_OW 69
28540: ST_TO_ADDR
// if not tmp then
28541: LD_VAR 0 5
28545: NOT
28546: IFFALSE 28550
// exit ;
28548: GO 28704
// for i in tmp do
28550: LD_ADDR_VAR 0 1
28554: PUSH
28555: LD_VAR 0 5
28559: PUSH
28560: FOR_IN
28561: IFFALSE 28702
// begin d := rand ( 0 , 5 ) ;
28563: LD_ADDR_VAR 0 4
28567: PUSH
28568: LD_INT 0
28570: PPUSH
28571: LD_INT 5
28573: PPUSH
28574: CALL_OW 12
28578: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28579: LD_ADDR_VAR 0 2
28583: PUSH
28584: LD_VAR 0 1
28588: PPUSH
28589: CALL_OW 250
28593: PPUSH
28594: LD_VAR 0 4
28598: PPUSH
28599: LD_INT 3
28601: PPUSH
28602: LD_INT 12
28604: PPUSH
28605: CALL_OW 12
28609: PPUSH
28610: CALL_OW 272
28614: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28615: LD_ADDR_VAR 0 3
28619: PUSH
28620: LD_VAR 0 1
28624: PPUSH
28625: CALL_OW 251
28629: PPUSH
28630: LD_VAR 0 4
28634: PPUSH
28635: LD_INT 3
28637: PPUSH
28638: LD_INT 12
28640: PPUSH
28641: CALL_OW 12
28645: PPUSH
28646: CALL_OW 273
28650: ST_TO_ADDR
// if ValidHex ( x , y ) then
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL_OW 488
28665: IFFALSE 28700
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28667: LD_VAR 0 1
28671: PPUSH
28672: LD_VAR 0 2
28676: PPUSH
28677: LD_VAR 0 3
28681: PPUSH
28682: LD_INT 3
28684: PPUSH
28685: LD_INT 6
28687: PPUSH
28688: CALL_OW 12
28692: PPUSH
28693: LD_INT 1
28695: PPUSH
28696: CALL_OW 483
// end ;
28700: GO 28560
28702: POP
28703: POP
// end ;
28704: PPOPN 5
28706: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28707: LD_EXP 55
28711: PUSH
28712: LD_EXP 90
28716: AND
28717: IFFALSE 28811
28719: GO 28721
28721: DISABLE
28722: LD_INT 0
28724: PPUSH
28725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28726: LD_ADDR_VAR 0 2
28730: PUSH
28731: LD_INT 22
28733: PUSH
28734: LD_OWVAR 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 32
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 21
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: ST_TO_ADDR
// if not tmp then
28773: LD_VAR 0 2
28777: NOT
28778: IFFALSE 28782
// exit ;
28780: GO 28811
// for i in tmp do
28782: LD_ADDR_VAR 0 1
28786: PUSH
28787: LD_VAR 0 2
28791: PUSH
28792: FOR_IN
28793: IFFALSE 28809
// SetFuel ( i , 0 ) ;
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_INT 0
28802: PPUSH
28803: CALL_OW 240
28807: GO 28792
28809: POP
28810: POP
// end ;
28811: PPOPN 2
28813: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28814: LD_EXP 55
28818: PUSH
28819: LD_EXP 91
28823: AND
28824: IFFALSE 28890
28826: GO 28828
28828: DISABLE
28829: LD_INT 0
28831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28832: LD_ADDR_VAR 0 1
28836: PUSH
28837: LD_INT 22
28839: PUSH
28840: LD_OWVAR 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 30
28851: PUSH
28852: LD_INT 29
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PPUSH
28863: CALL_OW 69
28867: ST_TO_ADDR
// if not tmp then
28868: LD_VAR 0 1
28872: NOT
28873: IFFALSE 28877
// exit ;
28875: GO 28890
// DestroyUnit ( tmp [ 1 ] ) ;
28877: LD_VAR 0 1
28881: PUSH
28882: LD_INT 1
28884: ARRAY
28885: PPUSH
28886: CALL_OW 65
// end ;
28890: PPOPN 1
28892: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28893: LD_EXP 55
28897: PUSH
28898: LD_EXP 93
28902: AND
28903: IFFALSE 29032
28905: GO 28907
28907: DISABLE
28908: LD_INT 0
28910: PPUSH
// begin uc_side := 0 ;
28911: LD_ADDR_OWVAR 20
28915: PUSH
28916: LD_INT 0
28918: ST_TO_ADDR
// uc_nation := nation_arabian ;
28919: LD_ADDR_OWVAR 21
28923: PUSH
28924: LD_INT 2
28926: ST_TO_ADDR
// hc_gallery :=  ;
28927: LD_ADDR_OWVAR 33
28931: PUSH
28932: LD_STRING 
28934: ST_TO_ADDR
// hc_name :=  ;
28935: LD_ADDR_OWVAR 26
28939: PUSH
28940: LD_STRING 
28942: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28943: LD_INT 1
28945: PPUSH
28946: LD_INT 11
28948: PPUSH
28949: LD_INT 10
28951: PPUSH
28952: CALL_OW 380
// un := CreateHuman ;
28956: LD_ADDR_VAR 0 1
28960: PUSH
28961: CALL_OW 44
28965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28966: LD_VAR 0 1
28970: PPUSH
28971: LD_INT 1
28973: PPUSH
28974: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28978: LD_INT 35
28980: PPUSH
28981: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28985: LD_VAR 0 1
28989: PPUSH
28990: LD_INT 22
28992: PUSH
28993: LD_OWVAR 2
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PPUSH
29002: CALL_OW 69
29006: PPUSH
29007: LD_VAR 0 1
29011: PPUSH
29012: CALL_OW 74
29016: PPUSH
29017: CALL_OW 115
// until IsDead ( un ) ;
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 301
29030: IFFALSE 28978
// end ;
29032: PPOPN 1
29034: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29035: LD_EXP 55
29039: PUSH
29040: LD_EXP 95
29044: AND
29045: IFFALSE 29057
29047: GO 29049
29049: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29050: LD_STRING earthquake(getX(game), 0, 32)
29052: PPUSH
29053: CALL_OW 559
29057: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29058: LD_EXP 55
29062: PUSH
29063: LD_EXP 96
29067: AND
29068: IFFALSE 29159
29070: GO 29072
29072: DISABLE
29073: LD_INT 0
29075: PPUSH
// begin enable ;
29076: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29077: LD_ADDR_VAR 0 1
29081: PUSH
29082: LD_INT 22
29084: PUSH
29085: LD_OWVAR 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 21
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 33
29106: PUSH
29107: LD_INT 3
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: LIST
29118: PPUSH
29119: CALL_OW 69
29123: ST_TO_ADDR
// if not tmp then
29124: LD_VAR 0 1
29128: NOT
29129: IFFALSE 29133
// exit ;
29131: GO 29159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29133: LD_VAR 0 1
29137: PUSH
29138: LD_INT 1
29140: PPUSH
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL_OW 12
29150: ARRAY
29151: PPUSH
29152: LD_INT 1
29154: PPUSH
29155: CALL_OW 234
// end ;
29159: PPOPN 1
29161: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29162: LD_EXP 55
29166: PUSH
29167: LD_EXP 97
29171: AND
29172: IFFALSE 29313
29174: GO 29176
29176: DISABLE
29177: LD_INT 0
29179: PPUSH
29180: PPUSH
29181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29182: LD_ADDR_VAR 0 3
29186: PUSH
29187: LD_INT 22
29189: PUSH
29190: LD_OWVAR 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 25
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PPUSH
29213: CALL_OW 69
29217: ST_TO_ADDR
// if not tmp then
29218: LD_VAR 0 3
29222: NOT
29223: IFFALSE 29227
// exit ;
29225: GO 29313
// un := tmp [ rand ( 1 , tmp ) ] ;
29227: LD_ADDR_VAR 0 2
29231: PUSH
29232: LD_VAR 0 3
29236: PUSH
29237: LD_INT 1
29239: PPUSH
29240: LD_VAR 0 3
29244: PPUSH
29245: CALL_OW 12
29249: ARRAY
29250: ST_TO_ADDR
// if Crawls ( un ) then
29251: LD_VAR 0 2
29255: PPUSH
29256: CALL_OW 318
29260: IFFALSE 29271
// ComWalk ( un ) ;
29262: LD_VAR 0 2
29266: PPUSH
29267: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_INT 9
29278: PPUSH
29279: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29283: LD_INT 28
29285: PPUSH
29286: LD_OWVAR 2
29290: PPUSH
29291: LD_INT 2
29293: PPUSH
29294: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29298: LD_INT 29
29300: PPUSH
29301: LD_OWVAR 2
29305: PPUSH
29306: LD_INT 2
29308: PPUSH
29309: CALL_OW 322
// end ;
29313: PPOPN 3
29315: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29316: LD_EXP 55
29320: PUSH
29321: LD_EXP 98
29325: AND
29326: IFFALSE 29437
29328: GO 29330
29330: DISABLE
29331: LD_INT 0
29333: PPUSH
29334: PPUSH
29335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 22
29343: PUSH
29344: LD_OWVAR 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 25
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 69
29371: ST_TO_ADDR
// if not tmp then
29372: LD_VAR 0 3
29376: NOT
29377: IFFALSE 29381
// exit ;
29379: GO 29437
// un := tmp [ rand ( 1 , tmp ) ] ;
29381: LD_ADDR_VAR 0 2
29385: PUSH
29386: LD_VAR 0 3
29390: PUSH
29391: LD_INT 1
29393: PPUSH
29394: LD_VAR 0 3
29398: PPUSH
29399: CALL_OW 12
29403: ARRAY
29404: ST_TO_ADDR
// if Crawls ( un ) then
29405: LD_VAR 0 2
29409: PPUSH
29410: CALL_OW 318
29414: IFFALSE 29425
// ComWalk ( un ) ;
29416: LD_VAR 0 2
29420: PPUSH
29421: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_INT 8
29432: PPUSH
29433: CALL_OW 336
// end ;
29437: PPOPN 3
29439: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29440: LD_EXP 55
29444: PUSH
29445: LD_EXP 99
29449: AND
29450: IFFALSE 29594
29452: GO 29454
29454: DISABLE
29455: LD_INT 0
29457: PPUSH
29458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29459: LD_ADDR_VAR 0 2
29463: PUSH
29464: LD_INT 22
29466: PUSH
29467: LD_OWVAR 2
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 21
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: LD_INT 34
29491: PUSH
29492: LD_INT 12
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 34
29501: PUSH
29502: LD_INT 51
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 34
29511: PUSH
29512: LD_INT 32
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 69
29534: ST_TO_ADDR
// if not tmp then
29535: LD_VAR 0 2
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 29594
// for i in tmp do
29544: LD_ADDR_VAR 0 1
29548: PUSH
29549: LD_VAR 0 2
29553: PUSH
29554: FOR_IN
29555: IFFALSE 29592
// if GetCargo ( i , mat_artifact ) = 0 then
29557: LD_VAR 0 1
29561: PPUSH
29562: LD_INT 4
29564: PPUSH
29565: CALL_OW 289
29569: PUSH
29570: LD_INT 0
29572: EQUAL
29573: IFFALSE 29590
// SetCargo ( i , mat_siberit , 100 ) ;
29575: LD_VAR 0 1
29579: PPUSH
29580: LD_INT 3
29582: PPUSH
29583: LD_INT 100
29585: PPUSH
29586: CALL_OW 290
29590: GO 29554
29592: POP
29593: POP
// end ;
29594: PPOPN 2
29596: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29597: LD_EXP 55
29601: PUSH
29602: LD_EXP 100
29606: AND
29607: IFFALSE 29790
29609: GO 29611
29611: DISABLE
29612: LD_INT 0
29614: PPUSH
29615: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29616: LD_ADDR_VAR 0 2
29620: PUSH
29621: LD_INT 22
29623: PUSH
29624: LD_OWVAR 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PPUSH
29633: CALL_OW 69
29637: ST_TO_ADDR
// if not tmp then
29638: LD_VAR 0 2
29642: NOT
29643: IFFALSE 29647
// exit ;
29645: GO 29790
// for i := 1 to 2 do
29647: LD_ADDR_VAR 0 1
29651: PUSH
29652: DOUBLE
29653: LD_INT 1
29655: DEC
29656: ST_TO_ADDR
29657: LD_INT 2
29659: PUSH
29660: FOR_TO
29661: IFFALSE 29788
// begin uc_side := your_side ;
29663: LD_ADDR_OWVAR 20
29667: PUSH
29668: LD_OWVAR 2
29672: ST_TO_ADDR
// uc_nation := nation_american ;
29673: LD_ADDR_OWVAR 21
29677: PUSH
29678: LD_INT 1
29680: ST_TO_ADDR
// vc_chassis := us_morphling ;
29681: LD_ADDR_OWVAR 37
29685: PUSH
29686: LD_INT 5
29688: ST_TO_ADDR
// vc_engine := engine_siberite ;
29689: LD_ADDR_OWVAR 39
29693: PUSH
29694: LD_INT 3
29696: ST_TO_ADDR
// vc_control := control_computer ;
29697: LD_ADDR_OWVAR 38
29701: PUSH
29702: LD_INT 3
29704: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29705: LD_ADDR_OWVAR 40
29709: PUSH
29710: LD_INT 10
29712: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29713: LD_VAR 0 2
29717: PUSH
29718: LD_INT 1
29720: ARRAY
29721: PPUSH
29722: CALL_OW 310
29726: NOT
29727: IFFALSE 29774
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29729: CALL_OW 45
29733: PPUSH
29734: LD_VAR 0 2
29738: PUSH
29739: LD_INT 1
29741: ARRAY
29742: PPUSH
29743: CALL_OW 250
29747: PPUSH
29748: LD_VAR 0 2
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: PPUSH
29757: CALL_OW 251
29761: PPUSH
29762: LD_INT 12
29764: PPUSH
29765: LD_INT 1
29767: PPUSH
29768: CALL_OW 50
29772: GO 29786
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29774: CALL_OW 45
29778: PPUSH
29779: LD_INT 1
29781: PPUSH
29782: CALL_OW 51
// end ;
29786: GO 29660
29788: POP
29789: POP
// end ;
29790: PPOPN 2
29792: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29793: LD_EXP 55
29797: PUSH
29798: LD_EXP 101
29802: AND
29803: IFFALSE 30025
29805: GO 29807
29807: DISABLE
29808: LD_INT 0
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29816: LD_ADDR_VAR 0 6
29820: PUSH
29821: LD_INT 22
29823: PUSH
29824: LD_OWVAR 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 21
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 3
29845: PUSH
29846: LD_INT 23
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PPUSH
29865: CALL_OW 69
29869: ST_TO_ADDR
// if not tmp then
29870: LD_VAR 0 6
29874: NOT
29875: IFFALSE 29879
// exit ;
29877: GO 30025
// s1 := rand ( 1 , 4 ) ;
29879: LD_ADDR_VAR 0 2
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_INT 4
29889: PPUSH
29890: CALL_OW 12
29894: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29895: LD_ADDR_VAR 0 4
29899: PUSH
29900: LD_VAR 0 6
29904: PUSH
29905: LD_INT 1
29907: ARRAY
29908: PPUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: CALL_OW 259
29918: ST_TO_ADDR
// if s1 = 1 then
29919: LD_VAR 0 2
29923: PUSH
29924: LD_INT 1
29926: EQUAL
29927: IFFALSE 29947
// s2 := rand ( 2 , 4 ) else
29929: LD_ADDR_VAR 0 3
29933: PUSH
29934: LD_INT 2
29936: PPUSH
29937: LD_INT 4
29939: PPUSH
29940: CALL_OW 12
29944: ST_TO_ADDR
29945: GO 29955
// s2 := 1 ;
29947: LD_ADDR_VAR 0 3
29951: PUSH
29952: LD_INT 1
29954: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29955: LD_ADDR_VAR 0 5
29959: PUSH
29960: LD_VAR 0 6
29964: PUSH
29965: LD_INT 1
29967: ARRAY
29968: PPUSH
29969: LD_VAR 0 3
29973: PPUSH
29974: CALL_OW 259
29978: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29979: LD_VAR 0 6
29983: PUSH
29984: LD_INT 1
29986: ARRAY
29987: PPUSH
29988: LD_VAR 0 2
29992: PPUSH
29993: LD_VAR 0 5
29997: PPUSH
29998: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30002: LD_VAR 0 6
30006: PUSH
30007: LD_INT 1
30009: ARRAY
30010: PPUSH
30011: LD_VAR 0 3
30015: PPUSH
30016: LD_VAR 0 4
30020: PPUSH
30021: CALL_OW 237
// end ;
30025: PPOPN 6
30027: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30028: LD_EXP 55
30032: PUSH
30033: LD_EXP 102
30037: AND
30038: IFFALSE 30117
30040: GO 30042
30042: DISABLE
30043: LD_INT 0
30045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30046: LD_ADDR_VAR 0 1
30050: PUSH
30051: LD_INT 22
30053: PUSH
30054: LD_OWVAR 2
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 30
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PPUSH
30077: CALL_OW 69
30081: ST_TO_ADDR
// if not tmp then
30082: LD_VAR 0 1
30086: NOT
30087: IFFALSE 30091
// exit ;
30089: GO 30117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30091: LD_VAR 0 1
30095: PUSH
30096: LD_INT 1
30098: PPUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 12
30108: ARRAY
30109: PPUSH
30110: LD_INT 1
30112: PPUSH
30113: CALL_OW 234
// end ;
30117: PPOPN 1
30119: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30120: LD_EXP 55
30124: PUSH
30125: LD_EXP 103
30129: AND
30130: IFFALSE 30242
30132: GO 30134
30134: DISABLE
30135: LD_INT 0
30137: PPUSH
30138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30139: LD_ADDR_VAR 0 2
30143: PUSH
30144: LD_INT 22
30146: PUSH
30147: LD_OWVAR 2
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 30
30161: PUSH
30162: LD_INT 27
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 26
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 30
30181: PUSH
30182: LD_INT 28
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PPUSH
30199: CALL_OW 69
30203: ST_TO_ADDR
// if not tmp then
30204: LD_VAR 0 2
30208: NOT
30209: IFFALSE 30213
// exit ;
30211: GO 30242
// for i in tmp do
30213: LD_ADDR_VAR 0 1
30217: PUSH
30218: LD_VAR 0 2
30222: PUSH
30223: FOR_IN
30224: IFFALSE 30240
// SetLives ( i , 1 ) ;
30226: LD_VAR 0 1
30230: PPUSH
30231: LD_INT 1
30233: PPUSH
30234: CALL_OW 234
30238: GO 30223
30240: POP
30241: POP
// end ;
30242: PPOPN 2
30244: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30245: LD_EXP 55
30249: PUSH
30250: LD_EXP 104
30254: AND
30255: IFFALSE 30542
30257: GO 30259
30259: DISABLE
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
30264: PPUSH
// begin i := rand ( 1 , 7 ) ;
30265: LD_ADDR_VAR 0 1
30269: PUSH
30270: LD_INT 1
30272: PPUSH
30273: LD_INT 7
30275: PPUSH
30276: CALL_OW 12
30280: ST_TO_ADDR
// case i of 1 :
30281: LD_VAR 0 1
30285: PUSH
30286: LD_INT 1
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30304
30294: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30295: LD_STRING earthquake(getX(game), 0, 32)
30297: PPUSH
30298: CALL_OW 559
30302: GO 30542
30304: LD_INT 2
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30326
30312: POP
// begin ToLua ( displayStucuk(); ) ;
30313: LD_STRING displayStucuk();
30315: PPUSH
30316: CALL_OW 559
// ResetFog ;
30320: CALL_OW 335
// end ; 3 :
30324: GO 30542
30326: LD_INT 3
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30438
30334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30335: LD_ADDR_VAR 0 2
30339: PUSH
30340: LD_INT 22
30342: PUSH
30343: LD_OWVAR 2
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 25
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PPUSH
30366: CALL_OW 69
30370: ST_TO_ADDR
// if not tmp then
30371: LD_VAR 0 2
30375: NOT
30376: IFFALSE 30380
// exit ;
30378: GO 30542
// un := tmp [ rand ( 1 , tmp ) ] ;
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_VAR 0 2
30389: PUSH
30390: LD_INT 1
30392: PPUSH
30393: LD_VAR 0 2
30397: PPUSH
30398: CALL_OW 12
30402: ARRAY
30403: ST_TO_ADDR
// if Crawls ( un ) then
30404: LD_VAR 0 3
30408: PPUSH
30409: CALL_OW 318
30413: IFFALSE 30424
// ComWalk ( un ) ;
30415: LD_VAR 0 3
30419: PPUSH
30420: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30424: LD_VAR 0 3
30428: PPUSH
30429: LD_INT 8
30431: PPUSH
30432: CALL_OW 336
// end ; 4 :
30436: GO 30542
30438: LD_INT 4
30440: DOUBLE
30441: EQUAL
30442: IFTRUE 30446
30444: GO 30520
30446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30447: LD_ADDR_VAR 0 2
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_OWVAR 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 29
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PPUSH
30478: CALL_OW 69
30482: ST_TO_ADDR
// if not tmp then
30483: LD_VAR 0 2
30487: NOT
30488: IFFALSE 30492
// exit ;
30490: GO 30542
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30492: LD_VAR 0 2
30496: PUSH
30497: LD_INT 1
30499: ARRAY
30500: PPUSH
30501: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30505: LD_VAR 0 2
30509: PUSH
30510: LD_INT 1
30512: ARRAY
30513: PPUSH
30514: CALL_OW 65
// end ; 5 .. 7 :
30518: GO 30542
30520: LD_INT 5
30522: DOUBLE
30523: GREATEREQUAL
30524: IFFALSE 30532
30526: LD_INT 7
30528: DOUBLE
30529: LESSEQUAL
30530: IFTRUE 30534
30532: GO 30541
30534: POP
// StreamSibBomb ; end ;
30535: CALL 26779 0 0
30539: GO 30542
30541: POP
// end ;
30542: PPOPN 3
30544: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30545: LD_EXP 55
30549: PUSH
30550: LD_EXP 105
30554: AND
30555: IFFALSE 30711
30557: GO 30559
30559: DISABLE
30560: LD_INT 0
30562: PPUSH
30563: PPUSH
30564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30565: LD_ADDR_VAR 0 2
30569: PUSH
30570: LD_INT 81
30572: PUSH
30573: LD_OWVAR 2
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: LD_INT 21
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 21
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PPUSH
30614: CALL_OW 69
30618: ST_TO_ADDR
// if not tmp then
30619: LD_VAR 0 2
30623: NOT
30624: IFFALSE 30628
// exit ;
30626: GO 30711
// p := 0 ;
30628: LD_ADDR_VAR 0 3
30632: PUSH
30633: LD_INT 0
30635: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30636: LD_INT 35
30638: PPUSH
30639: CALL_OW 67
// p := p + 1 ;
30643: LD_ADDR_VAR 0 3
30647: PUSH
30648: LD_VAR 0 3
30652: PUSH
30653: LD_INT 1
30655: PLUS
30656: ST_TO_ADDR
// for i in tmp do
30657: LD_ADDR_VAR 0 1
30661: PUSH
30662: LD_VAR 0 2
30666: PUSH
30667: FOR_IN
30668: IFFALSE 30699
// if GetLives ( i ) < 1000 then
30670: LD_VAR 0 1
30674: PPUSH
30675: CALL_OW 256
30679: PUSH
30680: LD_INT 1000
30682: LESS
30683: IFFALSE 30697
// SetLives ( i , 1000 ) ;
30685: LD_VAR 0 1
30689: PPUSH
30690: LD_INT 1000
30692: PPUSH
30693: CALL_OW 234
30697: GO 30667
30699: POP
30700: POP
// until p > 20 ;
30701: LD_VAR 0 3
30705: PUSH
30706: LD_INT 20
30708: GREATER
30709: IFFALSE 30636
// end ;
30711: PPOPN 3
30713: END
// every 0 0$1 trigger StreamModeActive and sTime do
30714: LD_EXP 55
30718: PUSH
30719: LD_EXP 106
30723: AND
30724: IFFALSE 30759
30726: GO 30728
30728: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30729: LD_INT 28
30731: PPUSH
30732: LD_OWVAR 2
30736: PPUSH
30737: LD_INT 2
30739: PPUSH
30740: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30744: LD_INT 30
30746: PPUSH
30747: LD_OWVAR 2
30751: PPUSH
30752: LD_INT 2
30754: PPUSH
30755: CALL_OW 322
// end ;
30759: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30760: LD_EXP 55
30764: PUSH
30765: LD_EXP 107
30769: AND
30770: IFFALSE 30891
30772: GO 30774
30774: DISABLE
30775: LD_INT 0
30777: PPUSH
30778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_INT 22
30786: PUSH
30787: LD_OWVAR 2
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 21
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 3
30808: PUSH
30809: LD_INT 23
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: PPUSH
30828: CALL_OW 69
30832: ST_TO_ADDR
// if not tmp then
30833: LD_VAR 0 2
30837: NOT
30838: IFFALSE 30842
// exit ;
30840: GO 30891
// for i in tmp do
30842: LD_ADDR_VAR 0 1
30846: PUSH
30847: LD_VAR 0 2
30851: PUSH
30852: FOR_IN
30853: IFFALSE 30889
// begin if Crawls ( i ) then
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL_OW 318
30864: IFFALSE 30875
// ComWalk ( i ) ;
30866: LD_VAR 0 1
30870: PPUSH
30871: CALL_OW 138
// SetClass ( i , 2 ) ;
30875: LD_VAR 0 1
30879: PPUSH
30880: LD_INT 2
30882: PPUSH
30883: CALL_OW 336
// end ;
30887: GO 30852
30889: POP
30890: POP
// end ;
30891: PPOPN 2
30893: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30894: LD_EXP 55
30898: PUSH
30899: LD_EXP 108
30903: AND
30904: IFFALSE 31192
30906: GO 30908
30908: DISABLE
30909: LD_INT 0
30911: PPUSH
30912: PPUSH
30913: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30914: LD_OWVAR 2
30918: PPUSH
30919: LD_INT 9
30921: PPUSH
30922: LD_INT 1
30924: PPUSH
30925: LD_INT 1
30927: PPUSH
30928: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30932: LD_INT 9
30934: PPUSH
30935: LD_OWVAR 2
30939: PPUSH
30940: CALL_OW 343
// uc_side := 9 ;
30944: LD_ADDR_OWVAR 20
30948: PUSH
30949: LD_INT 9
30951: ST_TO_ADDR
// uc_nation := 2 ;
30952: LD_ADDR_OWVAR 21
30956: PUSH
30957: LD_INT 2
30959: ST_TO_ADDR
// hc_name := Dark Warrior ;
30960: LD_ADDR_OWVAR 26
30964: PUSH
30965: LD_STRING Dark Warrior
30967: ST_TO_ADDR
// hc_gallery :=  ;
30968: LD_ADDR_OWVAR 33
30972: PUSH
30973: LD_STRING 
30975: ST_TO_ADDR
// hc_noskilllimit := true ;
30976: LD_ADDR_OWVAR 76
30980: PUSH
30981: LD_INT 1
30983: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30984: LD_ADDR_OWVAR 31
30988: PUSH
30989: LD_INT 30
30991: PUSH
30992: LD_INT 30
30994: PUSH
30995: LD_INT 30
30997: PUSH
30998: LD_INT 30
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
// un := CreateHuman ;
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: CALL_OW 44
31016: ST_TO_ADDR
// hc_noskilllimit := false ;
31017: LD_ADDR_OWVAR 76
31021: PUSH
31022: LD_INT 0
31024: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31025: LD_VAR 0 3
31029: PPUSH
31030: LD_INT 1
31032: PPUSH
31033: CALL_OW 51
// ToLua ( playRanger() ) ;
31037: LD_STRING playRanger()
31039: PPUSH
31040: CALL_OW 559
// p := 0 ;
31044: LD_ADDR_VAR 0 2
31048: PUSH
31049: LD_INT 0
31051: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31052: LD_INT 35
31054: PPUSH
31055: CALL_OW 67
// p := p + 1 ;
31059: LD_ADDR_VAR 0 2
31063: PUSH
31064: LD_VAR 0 2
31068: PUSH
31069: LD_INT 1
31071: PLUS
31072: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31073: LD_VAR 0 3
31077: PPUSH
31078: CALL_OW 256
31082: PUSH
31083: LD_INT 1000
31085: LESS
31086: IFFALSE 31100
// SetLives ( un , 1000 ) ;
31088: LD_VAR 0 3
31092: PPUSH
31093: LD_INT 1000
31095: PPUSH
31096: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31100: LD_VAR 0 3
31104: PPUSH
31105: LD_INT 81
31107: PUSH
31108: LD_OWVAR 2
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 91
31119: PUSH
31120: LD_VAR 0 3
31124: PUSH
31125: LD_INT 30
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PPUSH
31137: CALL_OW 69
31141: PPUSH
31142: LD_VAR 0 3
31146: PPUSH
31147: CALL_OW 74
31151: PPUSH
31152: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31156: LD_VAR 0 2
31160: PUSH
31161: LD_INT 80
31163: GREATER
31164: PUSH
31165: LD_VAR 0 3
31169: PPUSH
31170: CALL_OW 301
31174: OR
31175: IFFALSE 31052
// if un then
31177: LD_VAR 0 3
31181: IFFALSE 31192
// RemoveUnit ( un ) ;
31183: LD_VAR 0 3
31187: PPUSH
31188: CALL_OW 64
// end ;
31192: PPOPN 3
31194: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31195: LD_EXP 109
31199: IFFALSE 31315
31201: GO 31203
31203: DISABLE
31204: LD_INT 0
31206: PPUSH
31207: PPUSH
31208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31209: LD_ADDR_VAR 0 2
31213: PUSH
31214: LD_INT 81
31216: PUSH
31217: LD_OWVAR 2
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 21
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PPUSH
31240: CALL_OW 69
31244: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31245: LD_STRING playComputer()
31247: PPUSH
31248: CALL_OW 559
// if not tmp then
31252: LD_VAR 0 2
31256: NOT
31257: IFFALSE 31261
// exit ;
31259: GO 31315
// for i in tmp do
31261: LD_ADDR_VAR 0 1
31265: PUSH
31266: LD_VAR 0 2
31270: PUSH
31271: FOR_IN
31272: IFFALSE 31313
// for j := 1 to 4 do
31274: LD_ADDR_VAR 0 3
31278: PUSH
31279: DOUBLE
31280: LD_INT 1
31282: DEC
31283: ST_TO_ADDR
31284: LD_INT 4
31286: PUSH
31287: FOR_TO
31288: IFFALSE 31309
// SetSkill ( i , j , 10 ) ;
31290: LD_VAR 0 1
31294: PPUSH
31295: LD_VAR 0 3
31299: PPUSH
31300: LD_INT 10
31302: PPUSH
31303: CALL_OW 237
31307: GO 31287
31309: POP
31310: POP
31311: GO 31271
31313: POP
31314: POP
// end ;
31315: PPOPN 3
31317: END
// every 0 0$1 trigger s30 do var i , tmp ;
31318: LD_EXP 110
31322: IFFALSE 31391
31324: GO 31326
31326: DISABLE
31327: LD_INT 0
31329: PPUSH
31330: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31331: LD_ADDR_VAR 0 2
31335: PUSH
31336: LD_INT 22
31338: PUSH
31339: LD_OWVAR 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PPUSH
31348: CALL_OW 69
31352: ST_TO_ADDR
// if not tmp then
31353: LD_VAR 0 2
31357: NOT
31358: IFFALSE 31362
// exit ;
31360: GO 31391
// for i in tmp do
31362: LD_ADDR_VAR 0 1
31366: PUSH
31367: LD_VAR 0 2
31371: PUSH
31372: FOR_IN
31373: IFFALSE 31389
// SetLives ( i , 300 ) ;
31375: LD_VAR 0 1
31379: PPUSH
31380: LD_INT 300
31382: PPUSH
31383: CALL_OW 234
31387: GO 31372
31389: POP
31390: POP
// end ;
31391: PPOPN 2
31393: END
// every 0 0$1 trigger s60 do var i , tmp ;
31394: LD_EXP 111
31398: IFFALSE 31467
31400: GO 31402
31402: DISABLE
31403: LD_INT 0
31405: PPUSH
31406: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31407: LD_ADDR_VAR 0 2
31411: PUSH
31412: LD_INT 22
31414: PUSH
31415: LD_OWVAR 2
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PPUSH
31424: CALL_OW 69
31428: ST_TO_ADDR
// if not tmp then
31429: LD_VAR 0 2
31433: NOT
31434: IFFALSE 31438
// exit ;
31436: GO 31467
// for i in tmp do
31438: LD_ADDR_VAR 0 1
31442: PUSH
31443: LD_VAR 0 2
31447: PUSH
31448: FOR_IN
31449: IFFALSE 31465
// SetLives ( i , 600 ) ;
31451: LD_VAR 0 1
31455: PPUSH
31456: LD_INT 600
31458: PPUSH
31459: CALL_OW 234
31463: GO 31448
31465: POP
31466: POP
// end ;
31467: PPOPN 2
31469: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31470: LD_INT 0
31472: PPUSH
// case cmd of 301 :
31473: LD_VAR 0 1
31477: PUSH
31478: LD_INT 301
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 31518
31486: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31487: LD_VAR 0 6
31491: PPUSH
31492: LD_VAR 0 7
31496: PPUSH
31497: LD_VAR 0 8
31501: PPUSH
31502: LD_VAR 0 4
31506: PPUSH
31507: LD_VAR 0 5
31511: PPUSH
31512: CALL 32719 0 5
31516: GO 31639
31518: LD_INT 302
31520: DOUBLE
31521: EQUAL
31522: IFTRUE 31526
31524: GO 31563
31526: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31527: LD_VAR 0 6
31531: PPUSH
31532: LD_VAR 0 7
31536: PPUSH
31537: LD_VAR 0 8
31541: PPUSH
31542: LD_VAR 0 9
31546: PPUSH
31547: LD_VAR 0 4
31551: PPUSH
31552: LD_VAR 0 5
31556: PPUSH
31557: CALL 32810 0 6
31561: GO 31639
31563: LD_INT 303
31565: DOUBLE
31566: EQUAL
31567: IFTRUE 31571
31569: GO 31608
31571: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31572: LD_VAR 0 6
31576: PPUSH
31577: LD_VAR 0 7
31581: PPUSH
31582: LD_VAR 0 8
31586: PPUSH
31587: LD_VAR 0 9
31591: PPUSH
31592: LD_VAR 0 4
31596: PPUSH
31597: LD_VAR 0 5
31601: PPUSH
31602: CALL 31644 0 6
31606: GO 31639
31608: LD_INT 304
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31638
31616: POP
// hHackTeleport ( unit , x , y ) ; end ;
31617: LD_VAR 0 2
31621: PPUSH
31622: LD_VAR 0 4
31626: PPUSH
31627: LD_VAR 0 5
31631: PPUSH
31632: CALL 33403 0 3
31636: GO 31639
31638: POP
// end ;
31639: LD_VAR 0 12
31643: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31648: LD_VAR 0 1
31652: PUSH
31653: LD_INT 1
31655: LESS
31656: PUSH
31657: LD_VAR 0 1
31661: PUSH
31662: LD_INT 3
31664: GREATER
31665: OR
31666: PUSH
31667: LD_VAR 0 5
31671: PPUSH
31672: LD_VAR 0 6
31676: PPUSH
31677: CALL_OW 428
31681: OR
31682: IFFALSE 31686
// exit ;
31684: GO 32406
// uc_side := your_side ;
31686: LD_ADDR_OWVAR 20
31690: PUSH
31691: LD_OWVAR 2
31695: ST_TO_ADDR
// uc_nation := nation ;
31696: LD_ADDR_OWVAR 21
31700: PUSH
31701: LD_VAR 0 1
31705: ST_TO_ADDR
// bc_level = 1 ;
31706: LD_ADDR_OWVAR 43
31710: PUSH
31711: LD_INT 1
31713: ST_TO_ADDR
// case btype of 1 :
31714: LD_VAR 0 2
31718: PUSH
31719: LD_INT 1
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31738
31727: POP
// bc_type := b_depot ; 2 :
31728: LD_ADDR_OWVAR 42
31732: PUSH
31733: LD_INT 0
31735: ST_TO_ADDR
31736: GO 32350
31738: LD_INT 2
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31757
31746: POP
// bc_type := b_warehouse ; 3 :
31747: LD_ADDR_OWVAR 42
31751: PUSH
31752: LD_INT 1
31754: ST_TO_ADDR
31755: GO 32350
31757: LD_INT 3
31759: DOUBLE
31760: EQUAL
31761: IFTRUE 31765
31763: GO 31776
31765: POP
// bc_type := b_lab ; 4 .. 9 :
31766: LD_ADDR_OWVAR 42
31770: PUSH
31771: LD_INT 6
31773: ST_TO_ADDR
31774: GO 32350
31776: LD_INT 4
31778: DOUBLE
31779: GREATEREQUAL
31780: IFFALSE 31788
31782: LD_INT 9
31784: DOUBLE
31785: LESSEQUAL
31786: IFTRUE 31790
31788: GO 31842
31790: POP
// begin bc_type := b_lab_half ;
31791: LD_ADDR_OWVAR 42
31795: PUSH
31796: LD_INT 7
31798: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31799: LD_ADDR_OWVAR 44
31803: PUSH
31804: LD_INT 10
31806: PUSH
31807: LD_INT 11
31809: PUSH
31810: LD_INT 12
31812: PUSH
31813: LD_INT 15
31815: PUSH
31816: LD_INT 14
31818: PUSH
31819: LD_INT 13
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: PUSH
31830: LD_VAR 0 2
31834: PUSH
31835: LD_INT 3
31837: MINUS
31838: ARRAY
31839: ST_TO_ADDR
// end ; 10 .. 13 :
31840: GO 32350
31842: LD_INT 10
31844: DOUBLE
31845: GREATEREQUAL
31846: IFFALSE 31854
31848: LD_INT 13
31850: DOUBLE
31851: LESSEQUAL
31852: IFTRUE 31856
31854: GO 31933
31856: POP
// begin bc_type := b_lab_full ;
31857: LD_ADDR_OWVAR 42
31861: PUSH
31862: LD_INT 8
31864: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31865: LD_ADDR_OWVAR 44
31869: PUSH
31870: LD_INT 10
31872: PUSH
31873: LD_INT 12
31875: PUSH
31876: LD_INT 14
31878: PUSH
31879: LD_INT 13
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: PUSH
31888: LD_VAR 0 2
31892: PUSH
31893: LD_INT 9
31895: MINUS
31896: ARRAY
31897: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31898: LD_ADDR_OWVAR 45
31902: PUSH
31903: LD_INT 11
31905: PUSH
31906: LD_INT 15
31908: PUSH
31909: LD_INT 12
31911: PUSH
31912: LD_INT 15
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: PUSH
31921: LD_VAR 0 2
31925: PUSH
31926: LD_INT 9
31928: MINUS
31929: ARRAY
31930: ST_TO_ADDR
// end ; 14 :
31931: GO 32350
31933: LD_INT 14
31935: DOUBLE
31936: EQUAL
31937: IFTRUE 31941
31939: GO 31952
31941: POP
// bc_type := b_workshop ; 15 :
31942: LD_ADDR_OWVAR 42
31946: PUSH
31947: LD_INT 2
31949: ST_TO_ADDR
31950: GO 32350
31952: LD_INT 15
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31971
31960: POP
// bc_type := b_factory ; 16 :
31961: LD_ADDR_OWVAR 42
31965: PUSH
31966: LD_INT 3
31968: ST_TO_ADDR
31969: GO 32350
31971: LD_INT 16
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31979
31977: GO 31990
31979: POP
// bc_type := b_ext_gun ; 17 :
31980: LD_ADDR_OWVAR 42
31984: PUSH
31985: LD_INT 17
31987: ST_TO_ADDR
31988: GO 32350
31990: LD_INT 17
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32026
31998: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31999: LD_ADDR_OWVAR 42
32003: PUSH
32004: LD_INT 19
32006: PUSH
32007: LD_INT 23
32009: PUSH
32010: LD_INT 19
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: PUSH
32018: LD_VAR 0 1
32022: ARRAY
32023: ST_TO_ADDR
32024: GO 32350
32026: LD_INT 18
32028: DOUBLE
32029: EQUAL
32030: IFTRUE 32034
32032: GO 32045
32034: POP
// bc_type := b_ext_radar ; 19 :
32035: LD_ADDR_OWVAR 42
32039: PUSH
32040: LD_INT 20
32042: ST_TO_ADDR
32043: GO 32350
32045: LD_INT 19
32047: DOUBLE
32048: EQUAL
32049: IFTRUE 32053
32051: GO 32064
32053: POP
// bc_type := b_ext_radio ; 20 :
32054: LD_ADDR_OWVAR 42
32058: PUSH
32059: LD_INT 22
32061: ST_TO_ADDR
32062: GO 32350
32064: LD_INT 20
32066: DOUBLE
32067: EQUAL
32068: IFTRUE 32072
32070: GO 32083
32072: POP
// bc_type := b_ext_siberium ; 21 :
32073: LD_ADDR_OWVAR 42
32077: PUSH
32078: LD_INT 21
32080: ST_TO_ADDR
32081: GO 32350
32083: LD_INT 21
32085: DOUBLE
32086: EQUAL
32087: IFTRUE 32091
32089: GO 32102
32091: POP
// bc_type := b_ext_computer ; 22 :
32092: LD_ADDR_OWVAR 42
32096: PUSH
32097: LD_INT 24
32099: ST_TO_ADDR
32100: GO 32350
32102: LD_INT 22
32104: DOUBLE
32105: EQUAL
32106: IFTRUE 32110
32108: GO 32121
32110: POP
// bc_type := b_ext_track ; 23 :
32111: LD_ADDR_OWVAR 42
32115: PUSH
32116: LD_INT 16
32118: ST_TO_ADDR
32119: GO 32350
32121: LD_INT 23
32123: DOUBLE
32124: EQUAL
32125: IFTRUE 32129
32127: GO 32140
32129: POP
// bc_type := b_ext_laser ; 24 :
32130: LD_ADDR_OWVAR 42
32134: PUSH
32135: LD_INT 25
32137: ST_TO_ADDR
32138: GO 32350
32140: LD_INT 24
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32159
32148: POP
// bc_type := b_control_tower ; 25 :
32149: LD_ADDR_OWVAR 42
32153: PUSH
32154: LD_INT 36
32156: ST_TO_ADDR
32157: GO 32350
32159: LD_INT 25
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32167
32165: GO 32178
32167: POP
// bc_type := b_breastwork ; 26 :
32168: LD_ADDR_OWVAR 42
32172: PUSH
32173: LD_INT 31
32175: ST_TO_ADDR
32176: GO 32350
32178: LD_INT 26
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32197
32186: POP
// bc_type := b_bunker ; 27 :
32187: LD_ADDR_OWVAR 42
32191: PUSH
32192: LD_INT 32
32194: ST_TO_ADDR
32195: GO 32350
32197: LD_INT 27
32199: DOUBLE
32200: EQUAL
32201: IFTRUE 32205
32203: GO 32216
32205: POP
// bc_type := b_turret ; 28 :
32206: LD_ADDR_OWVAR 42
32210: PUSH
32211: LD_INT 33
32213: ST_TO_ADDR
32214: GO 32350
32216: LD_INT 28
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32224
32222: GO 32235
32224: POP
// bc_type := b_armoury ; 29 :
32225: LD_ADDR_OWVAR 42
32229: PUSH
32230: LD_INT 4
32232: ST_TO_ADDR
32233: GO 32350
32235: LD_INT 29
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32254
32243: POP
// bc_type := b_barracks ; 30 :
32244: LD_ADDR_OWVAR 42
32248: PUSH
32249: LD_INT 5
32251: ST_TO_ADDR
32252: GO 32350
32254: LD_INT 30
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32273
32262: POP
// bc_type := b_solar_power ; 31 :
32263: LD_ADDR_OWVAR 42
32267: PUSH
32268: LD_INT 27
32270: ST_TO_ADDR
32271: GO 32350
32273: LD_INT 31
32275: DOUBLE
32276: EQUAL
32277: IFTRUE 32281
32279: GO 32292
32281: POP
// bc_type := b_oil_power ; 32 :
32282: LD_ADDR_OWVAR 42
32286: PUSH
32287: LD_INT 26
32289: ST_TO_ADDR
32290: GO 32350
32292: LD_INT 32
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32311
32300: POP
// bc_type := b_siberite_power ; 33 :
32301: LD_ADDR_OWVAR 42
32305: PUSH
32306: LD_INT 28
32308: ST_TO_ADDR
32309: GO 32350
32311: LD_INT 33
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32319
32317: GO 32330
32319: POP
// bc_type := b_oil_mine ; 34 :
32320: LD_ADDR_OWVAR 42
32324: PUSH
32325: LD_INT 29
32327: ST_TO_ADDR
32328: GO 32350
32330: LD_INT 34
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32349
32338: POP
// bc_type := b_siberite_mine ; end ;
32339: LD_ADDR_OWVAR 42
32343: PUSH
32344: LD_INT 30
32346: ST_TO_ADDR
32347: GO 32350
32349: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32350: LD_ADDR_VAR 0 8
32354: PUSH
32355: LD_VAR 0 5
32359: PPUSH
32360: LD_VAR 0 6
32364: PPUSH
32365: LD_VAR 0 3
32369: PPUSH
32370: CALL_OW 47
32374: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32375: LD_OWVAR 42
32379: PUSH
32380: LD_INT 32
32382: PUSH
32383: LD_INT 33
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: IN
32390: IFFALSE 32406
// PlaceWeaponTurret ( b , weapon ) ;
32392: LD_VAR 0 8
32396: PPUSH
32397: LD_VAR 0 4
32401: PPUSH
32402: CALL_OW 431
// end ;
32406: LD_VAR 0 7
32410: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32411: LD_INT 0
32413: PPUSH
32414: PPUSH
32415: PPUSH
32416: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32417: LD_ADDR_VAR 0 4
32421: PUSH
32422: LD_INT 22
32424: PUSH
32425: LD_OWVAR 2
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: LD_INT 30
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 30
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: LIST
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PPUSH
32466: CALL_OW 69
32470: ST_TO_ADDR
// if not tmp then
32471: LD_VAR 0 4
32475: NOT
32476: IFFALSE 32480
// exit ;
32478: GO 32539
// for i in tmp do
32480: LD_ADDR_VAR 0 2
32484: PUSH
32485: LD_VAR 0 4
32489: PUSH
32490: FOR_IN
32491: IFFALSE 32537
// for j = 1 to 3 do
32493: LD_ADDR_VAR 0 3
32497: PUSH
32498: DOUBLE
32499: LD_INT 1
32501: DEC
32502: ST_TO_ADDR
32503: LD_INT 3
32505: PUSH
32506: FOR_TO
32507: IFFALSE 32533
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32509: LD_VAR 0 2
32513: PPUSH
32514: CALL_OW 274
32518: PPUSH
32519: LD_VAR 0 3
32523: PPUSH
32524: LD_INT 99999
32526: PPUSH
32527: CALL_OW 277
32531: GO 32506
32533: POP
32534: POP
32535: GO 32490
32537: POP
32538: POP
// end ;
32539: LD_VAR 0 1
32543: RET
// export function hHackSetLevel10 ; var i , j ; begin
32544: LD_INT 0
32546: PPUSH
32547: PPUSH
32548: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32549: LD_ADDR_VAR 0 2
32553: PUSH
32554: LD_INT 21
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PPUSH
32564: CALL_OW 69
32568: PUSH
32569: FOR_IN
32570: IFFALSE 32622
// if IsSelected ( i ) then
32572: LD_VAR 0 2
32576: PPUSH
32577: CALL_OW 306
32581: IFFALSE 32620
// begin for j := 1 to 4 do
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: DOUBLE
32589: LD_INT 1
32591: DEC
32592: ST_TO_ADDR
32593: LD_INT 4
32595: PUSH
32596: FOR_TO
32597: IFFALSE 32618
// SetSkill ( i , j , 10 ) ;
32599: LD_VAR 0 2
32603: PPUSH
32604: LD_VAR 0 3
32608: PPUSH
32609: LD_INT 10
32611: PPUSH
32612: CALL_OW 237
32616: GO 32596
32618: POP
32619: POP
// end ;
32620: GO 32569
32622: POP
32623: POP
// end ;
32624: LD_VAR 0 1
32628: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32629: LD_INT 0
32631: PPUSH
32632: PPUSH
32633: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32634: LD_ADDR_VAR 0 2
32638: PUSH
32639: LD_INT 22
32641: PUSH
32642: LD_OWVAR 2
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 21
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PPUSH
32665: CALL_OW 69
32669: PUSH
32670: FOR_IN
32671: IFFALSE 32712
// begin for j := 1 to 4 do
32673: LD_ADDR_VAR 0 3
32677: PUSH
32678: DOUBLE
32679: LD_INT 1
32681: DEC
32682: ST_TO_ADDR
32683: LD_INT 4
32685: PUSH
32686: FOR_TO
32687: IFFALSE 32708
// SetSkill ( i , j , 10 ) ;
32689: LD_VAR 0 2
32693: PPUSH
32694: LD_VAR 0 3
32698: PPUSH
32699: LD_INT 10
32701: PPUSH
32702: CALL_OW 237
32706: GO 32686
32708: POP
32709: POP
// end ;
32710: GO 32670
32712: POP
32713: POP
// end ;
32714: LD_VAR 0 1
32718: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32719: LD_INT 0
32721: PPUSH
// uc_side := your_side ;
32722: LD_ADDR_OWVAR 20
32726: PUSH
32727: LD_OWVAR 2
32731: ST_TO_ADDR
// uc_nation := nation ;
32732: LD_ADDR_OWVAR 21
32736: PUSH
32737: LD_VAR 0 1
32741: ST_TO_ADDR
// InitHc ;
32742: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32746: LD_INT 0
32748: PPUSH
32749: LD_VAR 0 2
32753: PPUSH
32754: LD_VAR 0 3
32758: PPUSH
32759: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32763: LD_VAR 0 4
32767: PPUSH
32768: LD_VAR 0 5
32772: PPUSH
32773: CALL_OW 428
32777: PUSH
32778: LD_INT 0
32780: EQUAL
32781: IFFALSE 32805
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32783: CALL_OW 44
32787: PPUSH
32788: LD_VAR 0 4
32792: PPUSH
32793: LD_VAR 0 5
32797: PPUSH
32798: LD_INT 1
32800: PPUSH
32801: CALL_OW 48
// end ;
32805: LD_VAR 0 6
32809: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32810: LD_INT 0
32812: PPUSH
32813: PPUSH
// uc_side := your_side ;
32814: LD_ADDR_OWVAR 20
32818: PUSH
32819: LD_OWVAR 2
32823: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32824: LD_VAR 0 1
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: LD_INT 4
32840: PUSH
32841: LD_INT 5
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: IN
32851: IFFALSE 32863
// uc_nation := nation_american else
32853: LD_ADDR_OWVAR 21
32857: PUSH
32858: LD_INT 1
32860: ST_TO_ADDR
32861: GO 32906
// if chassis in [ 11 , 12 , 13 , 14 ] then
32863: LD_VAR 0 1
32867: PUSH
32868: LD_INT 11
32870: PUSH
32871: LD_INT 12
32873: PUSH
32874: LD_INT 13
32876: PUSH
32877: LD_INT 14
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: IN
32886: IFFALSE 32898
// uc_nation := nation_arabian else
32888: LD_ADDR_OWVAR 21
32892: PUSH
32893: LD_INT 2
32895: ST_TO_ADDR
32896: GO 32906
// uc_nation := nation_russian ;
32898: LD_ADDR_OWVAR 21
32902: PUSH
32903: LD_INT 3
32905: ST_TO_ADDR
// vc_chassis := chassis ;
32906: LD_ADDR_OWVAR 37
32910: PUSH
32911: LD_VAR 0 1
32915: ST_TO_ADDR
// vc_engine := engine ;
32916: LD_ADDR_OWVAR 39
32920: PUSH
32921: LD_VAR 0 2
32925: ST_TO_ADDR
// vc_control := control ;
32926: LD_ADDR_OWVAR 38
32930: PUSH
32931: LD_VAR 0 3
32935: ST_TO_ADDR
// vc_weapon := weapon ;
32936: LD_ADDR_OWVAR 40
32940: PUSH
32941: LD_VAR 0 4
32945: ST_TO_ADDR
// un := CreateVehicle ;
32946: LD_ADDR_VAR 0 8
32950: PUSH
32951: CALL_OW 45
32955: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32956: LD_VAR 0 8
32960: PPUSH
32961: LD_INT 0
32963: PPUSH
32964: LD_INT 5
32966: PPUSH
32967: CALL_OW 12
32971: PPUSH
32972: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32976: LD_VAR 0 8
32980: PPUSH
32981: LD_VAR 0 5
32985: PPUSH
32986: LD_VAR 0 6
32990: PPUSH
32991: LD_INT 1
32993: PPUSH
32994: CALL_OW 48
// end ;
32998: LD_VAR 0 7
33002: RET
// export hInvincible ; every 1 do
33003: GO 33005
33005: DISABLE
// hInvincible := [ ] ;
33006: LD_ADDR_EXP 112
33010: PUSH
33011: EMPTY
33012: ST_TO_ADDR
33013: END
// every 10 do var i ;
33014: GO 33016
33016: DISABLE
33017: LD_INT 0
33019: PPUSH
// begin enable ;
33020: ENABLE
// if not hInvincible then
33021: LD_EXP 112
33025: NOT
33026: IFFALSE 33030
// exit ;
33028: GO 33074
// for i in hInvincible do
33030: LD_ADDR_VAR 0 1
33034: PUSH
33035: LD_EXP 112
33039: PUSH
33040: FOR_IN
33041: IFFALSE 33072
// if GetLives ( i ) < 1000 then
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 256
33052: PUSH
33053: LD_INT 1000
33055: LESS
33056: IFFALSE 33070
// SetLives ( i , 1000 ) ;
33058: LD_VAR 0 1
33062: PPUSH
33063: LD_INT 1000
33065: PPUSH
33066: CALL_OW 234
33070: GO 33040
33072: POP
33073: POP
// end ;
33074: PPOPN 1
33076: END
// export function hHackInvincible ; var i ; begin
33077: LD_INT 0
33079: PPUSH
33080: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33081: LD_ADDR_VAR 0 2
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 21
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 21
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: PPUSH
33114: CALL_OW 69
33118: PUSH
33119: FOR_IN
33120: IFFALSE 33181
// if IsSelected ( i ) then
33122: LD_VAR 0 2
33126: PPUSH
33127: CALL_OW 306
33131: IFFALSE 33179
// begin if i in hInvincible then
33133: LD_VAR 0 2
33137: PUSH
33138: LD_EXP 112
33142: IN
33143: IFFALSE 33163
// hInvincible := hInvincible diff i else
33145: LD_ADDR_EXP 112
33149: PUSH
33150: LD_EXP 112
33154: PUSH
33155: LD_VAR 0 2
33159: DIFF
33160: ST_TO_ADDR
33161: GO 33179
// hInvincible := hInvincible union i ;
33163: LD_ADDR_EXP 112
33167: PUSH
33168: LD_EXP 112
33172: PUSH
33173: LD_VAR 0 2
33177: UNION
33178: ST_TO_ADDR
// end ;
33179: GO 33119
33181: POP
33182: POP
// end ;
33183: LD_VAR 0 1
33187: RET
// export function hHackInvisible ; var i , j ; begin
33188: LD_INT 0
33190: PPUSH
33191: PPUSH
33192: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33193: LD_ADDR_VAR 0 2
33197: PUSH
33198: LD_INT 21
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PPUSH
33208: CALL_OW 69
33212: PUSH
33213: FOR_IN
33214: IFFALSE 33238
// if IsSelected ( i ) then
33216: LD_VAR 0 2
33220: PPUSH
33221: CALL_OW 306
33225: IFFALSE 33236
// ComForceInvisible ( i ) ;
33227: LD_VAR 0 2
33231: PPUSH
33232: CALL_OW 496
33236: GO 33213
33238: POP
33239: POP
// end ;
33240: LD_VAR 0 1
33244: RET
// export function hHackChangeYourSide ; begin
33245: LD_INT 0
33247: PPUSH
// if your_side = 8 then
33248: LD_OWVAR 2
33252: PUSH
33253: LD_INT 8
33255: EQUAL
33256: IFFALSE 33268
// your_side := 0 else
33258: LD_ADDR_OWVAR 2
33262: PUSH
33263: LD_INT 0
33265: ST_TO_ADDR
33266: GO 33282
// your_side := your_side + 1 ;
33268: LD_ADDR_OWVAR 2
33272: PUSH
33273: LD_OWVAR 2
33277: PUSH
33278: LD_INT 1
33280: PLUS
33281: ST_TO_ADDR
// end ;
33282: LD_VAR 0 1
33286: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33287: LD_INT 0
33289: PPUSH
33290: PPUSH
33291: PPUSH
// for i in all_units do
33292: LD_ADDR_VAR 0 2
33296: PUSH
33297: LD_OWVAR 3
33301: PUSH
33302: FOR_IN
33303: IFFALSE 33381
// if IsSelected ( i ) then
33305: LD_VAR 0 2
33309: PPUSH
33310: CALL_OW 306
33314: IFFALSE 33379
// begin j := GetSide ( i ) ;
33316: LD_ADDR_VAR 0 3
33320: PUSH
33321: LD_VAR 0 2
33325: PPUSH
33326: CALL_OW 255
33330: ST_TO_ADDR
// if j = 8 then
33331: LD_VAR 0 3
33335: PUSH
33336: LD_INT 8
33338: EQUAL
33339: IFFALSE 33351
// j := 0 else
33341: LD_ADDR_VAR 0 3
33345: PUSH
33346: LD_INT 0
33348: ST_TO_ADDR
33349: GO 33365
// j := j + 1 ;
33351: LD_ADDR_VAR 0 3
33355: PUSH
33356: LD_VAR 0 3
33360: PUSH
33361: LD_INT 1
33363: PLUS
33364: ST_TO_ADDR
// SetSide ( i , j ) ;
33365: LD_VAR 0 2
33369: PPUSH
33370: LD_VAR 0 3
33374: PPUSH
33375: CALL_OW 235
// end ;
33379: GO 33302
33381: POP
33382: POP
// end ;
33383: LD_VAR 0 1
33387: RET
// export function hHackFog ; begin
33388: LD_INT 0
33390: PPUSH
// FogOff ( true ) ;
33391: LD_INT 1
33393: PPUSH
33394: CALL_OW 344
// end ;
33398: LD_VAR 0 1
33402: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33403: LD_INT 0
33405: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33406: LD_VAR 0 1
33410: PPUSH
33411: LD_VAR 0 2
33415: PPUSH
33416: LD_VAR 0 3
33420: PPUSH
33421: LD_INT 1
33423: PPUSH
33424: LD_INT 1
33426: PPUSH
33427: CALL_OW 483
// CenterOnXY ( x , y ) ;
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_VAR 0 3
33440: PPUSH
33441: CALL_OW 84
// end ;
33445: LD_VAR 0 4
33449: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33450: LD_INT 0
33452: PPUSH
33453: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33454: LD_VAR 0 1
33458: NOT
33459: PUSH
33460: LD_VAR 0 2
33464: PPUSH
33465: LD_VAR 0 3
33469: PPUSH
33470: CALL_OW 488
33474: NOT
33475: OR
33476: PUSH
33477: LD_VAR 0 1
33481: PPUSH
33482: CALL_OW 266
33486: PUSH
33487: LD_INT 3
33489: NONEQUAL
33490: PUSH
33491: LD_VAR 0 1
33495: PPUSH
33496: CALL_OW 247
33500: PUSH
33501: LD_INT 1
33503: EQUAL
33504: NOT
33505: AND
33506: OR
33507: IFFALSE 33511
// exit ;
33509: GO 33660
// if GetType ( factory ) = unit_human then
33511: LD_VAR 0 1
33515: PPUSH
33516: CALL_OW 247
33520: PUSH
33521: LD_INT 1
33523: EQUAL
33524: IFFALSE 33541
// factory := IsInUnit ( factory ) ;
33526: LD_ADDR_VAR 0 1
33530: PUSH
33531: LD_VAR 0 1
33535: PPUSH
33536: CALL_OW 310
33540: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 266
33550: PUSH
33551: LD_INT 3
33553: NONEQUAL
33554: IFFALSE 33558
// exit ;
33556: GO 33660
// if HexInfo ( x , y ) = factory then
33558: LD_VAR 0 2
33562: PPUSH
33563: LD_VAR 0 3
33567: PPUSH
33568: CALL_OW 428
33572: PUSH
33573: LD_VAR 0 1
33577: EQUAL
33578: IFFALSE 33605
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33580: LD_ADDR_EXP 113
33584: PUSH
33585: LD_EXP 113
33589: PPUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: LD_INT 0
33597: PPUSH
33598: CALL_OW 1
33602: ST_TO_ADDR
33603: GO 33656
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33605: LD_ADDR_EXP 113
33609: PUSH
33610: LD_EXP 113
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: LD_VAR 0 1
33624: PPUSH
33625: CALL_OW 255
33629: PUSH
33630: LD_VAR 0 1
33634: PUSH
33635: LD_VAR 0 2
33639: PUSH
33640: LD_VAR 0 3
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: PPUSH
33651: CALL_OW 1
33655: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33656: CALL 33665 0 0
// end ;
33660: LD_VAR 0 4
33664: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33665: LD_INT 0
33667: PPUSH
33668: PPUSH
33669: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33670: LD_STRING resetFactoryWaypoint();
33672: PPUSH
33673: CALL_OW 559
// if factoryWaypoints then
33677: LD_EXP 113
33681: IFFALSE 33807
// begin list := PrepareArray ( factoryWaypoints ) ;
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: LD_EXP 113
33692: PPUSH
33693: CALL 75987 0 1
33697: ST_TO_ADDR
// for i := 1 to list do
33698: LD_ADDR_VAR 0 2
33702: PUSH
33703: DOUBLE
33704: LD_INT 1
33706: DEC
33707: ST_TO_ADDR
33708: LD_VAR 0 3
33712: PUSH
33713: FOR_TO
33714: IFFALSE 33805
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33716: LD_STRING setFactoryWaypointXY(
33718: PUSH
33719: LD_VAR 0 3
33723: PUSH
33724: LD_VAR 0 2
33728: ARRAY
33729: PUSH
33730: LD_INT 1
33732: ARRAY
33733: STR
33734: PUSH
33735: LD_STRING ,
33737: STR
33738: PUSH
33739: LD_VAR 0 3
33743: PUSH
33744: LD_VAR 0 2
33748: ARRAY
33749: PUSH
33750: LD_INT 2
33752: ARRAY
33753: STR
33754: PUSH
33755: LD_STRING ,
33757: STR
33758: PUSH
33759: LD_VAR 0 3
33763: PUSH
33764: LD_VAR 0 2
33768: ARRAY
33769: PUSH
33770: LD_INT 3
33772: ARRAY
33773: STR
33774: PUSH
33775: LD_STRING ,
33777: STR
33778: PUSH
33779: LD_VAR 0 3
33783: PUSH
33784: LD_VAR 0 2
33788: ARRAY
33789: PUSH
33790: LD_INT 4
33792: ARRAY
33793: STR
33794: PUSH
33795: LD_STRING )
33797: STR
33798: PPUSH
33799: CALL_OW 559
33803: GO 33713
33805: POP
33806: POP
// end ; end ;
33807: LD_VAR 0 1
33811: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33812: LD_INT 0
33814: PPUSH
// if HexInfo ( x , y ) = warehouse then
33815: LD_VAR 0 2
33819: PPUSH
33820: LD_VAR 0 3
33824: PPUSH
33825: CALL_OW 428
33829: PUSH
33830: LD_VAR 0 1
33834: EQUAL
33835: IFFALSE 33862
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33837: LD_ADDR_EXP 114
33841: PUSH
33842: LD_EXP 114
33846: PPUSH
33847: LD_VAR 0 1
33851: PPUSH
33852: LD_INT 0
33854: PPUSH
33855: CALL_OW 1
33859: ST_TO_ADDR
33860: GO 33913
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33862: LD_ADDR_EXP 114
33866: PUSH
33867: LD_EXP 114
33871: PPUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: LD_VAR 0 1
33881: PPUSH
33882: CALL_OW 255
33886: PUSH
33887: LD_VAR 0 1
33891: PUSH
33892: LD_VAR 0 2
33896: PUSH
33897: LD_VAR 0 3
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: PPUSH
33908: CALL_OW 1
33912: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33913: CALL 33922 0 0
// end ;
33917: LD_VAR 0 4
33921: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33922: LD_INT 0
33924: PPUSH
33925: PPUSH
33926: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33927: LD_STRING resetWarehouseGatheringPoints();
33929: PPUSH
33930: CALL_OW 559
// if warehouseGatheringPoints then
33934: LD_EXP 114
33938: IFFALSE 34064
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_EXP 114
33949: PPUSH
33950: CALL 75987 0 1
33954: ST_TO_ADDR
// for i := 1 to list do
33955: LD_ADDR_VAR 0 2
33959: PUSH
33960: DOUBLE
33961: LD_INT 1
33963: DEC
33964: ST_TO_ADDR
33965: LD_VAR 0 3
33969: PUSH
33970: FOR_TO
33971: IFFALSE 34062
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33973: LD_STRING setWarehouseGatheringPointXY(
33975: PUSH
33976: LD_VAR 0 3
33980: PUSH
33981: LD_VAR 0 2
33985: ARRAY
33986: PUSH
33987: LD_INT 1
33989: ARRAY
33990: STR
33991: PUSH
33992: LD_STRING ,
33994: STR
33995: PUSH
33996: LD_VAR 0 3
34000: PUSH
34001: LD_VAR 0 2
34005: ARRAY
34006: PUSH
34007: LD_INT 2
34009: ARRAY
34010: STR
34011: PUSH
34012: LD_STRING ,
34014: STR
34015: PUSH
34016: LD_VAR 0 3
34020: PUSH
34021: LD_VAR 0 2
34025: ARRAY
34026: PUSH
34027: LD_INT 3
34029: ARRAY
34030: STR
34031: PUSH
34032: LD_STRING ,
34034: STR
34035: PUSH
34036: LD_VAR 0 3
34040: PUSH
34041: LD_VAR 0 2
34045: ARRAY
34046: PUSH
34047: LD_INT 4
34049: ARRAY
34050: STR
34051: PUSH
34052: LD_STRING )
34054: STR
34055: PPUSH
34056: CALL_OW 559
34060: GO 33970
34062: POP
34063: POP
// end ; end ;
34064: LD_VAR 0 1
34068: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34069: LD_EXP 114
34073: IFFALSE 34758
34075: GO 34077
34077: DISABLE
34078: LD_INT 0
34080: PPUSH
34081: PPUSH
34082: PPUSH
34083: PPUSH
34084: PPUSH
34085: PPUSH
34086: PPUSH
34087: PPUSH
34088: PPUSH
// begin enable ;
34089: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: LD_EXP 114
34099: PPUSH
34100: CALL 75987 0 1
34104: ST_TO_ADDR
// if not list then
34105: LD_VAR 0 3
34109: NOT
34110: IFFALSE 34114
// exit ;
34112: GO 34758
// for i := 1 to list do
34114: LD_ADDR_VAR 0 1
34118: PUSH
34119: DOUBLE
34120: LD_INT 1
34122: DEC
34123: ST_TO_ADDR
34124: LD_VAR 0 3
34128: PUSH
34129: FOR_TO
34130: IFFALSE 34756
// begin depot := list [ i ] [ 2 ] ;
34132: LD_ADDR_VAR 0 8
34136: PUSH
34137: LD_VAR 0 3
34141: PUSH
34142: LD_VAR 0 1
34146: ARRAY
34147: PUSH
34148: LD_INT 2
34150: ARRAY
34151: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34152: LD_ADDR_VAR 0 5
34156: PUSH
34157: LD_VAR 0 3
34161: PUSH
34162: LD_VAR 0 1
34166: ARRAY
34167: PUSH
34168: LD_INT 1
34170: ARRAY
34171: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34172: LD_VAR 0 8
34176: PPUSH
34177: CALL_OW 301
34181: PUSH
34182: LD_VAR 0 5
34186: PUSH
34187: LD_VAR 0 8
34191: PPUSH
34192: CALL_OW 255
34196: NONEQUAL
34197: OR
34198: IFFALSE 34227
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34200: LD_ADDR_EXP 114
34204: PUSH
34205: LD_EXP 114
34209: PPUSH
34210: LD_VAR 0 8
34214: PPUSH
34215: LD_INT 0
34217: PPUSH
34218: CALL_OW 1
34222: ST_TO_ADDR
// exit ;
34223: POP
34224: POP
34225: GO 34758
// end ; x := list [ i ] [ 3 ] ;
34227: LD_ADDR_VAR 0 6
34231: PUSH
34232: LD_VAR 0 3
34236: PUSH
34237: LD_VAR 0 1
34241: ARRAY
34242: PUSH
34243: LD_INT 3
34245: ARRAY
34246: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34247: LD_ADDR_VAR 0 7
34251: PUSH
34252: LD_VAR 0 3
34256: PUSH
34257: LD_VAR 0 1
34261: ARRAY
34262: PUSH
34263: LD_INT 4
34265: ARRAY
34266: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34267: LD_ADDR_VAR 0 9
34271: PUSH
34272: LD_VAR 0 6
34276: PPUSH
34277: LD_VAR 0 7
34281: PPUSH
34282: LD_INT 16
34284: PPUSH
34285: CALL 74575 0 3
34289: ST_TO_ADDR
// if not cratesNearbyPoint then
34290: LD_VAR 0 9
34294: NOT
34295: IFFALSE 34301
// exit ;
34297: POP
34298: POP
34299: GO 34758
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34301: LD_ADDR_VAR 0 4
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_VAR 0 5
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 3
34320: PUSH
34321: LD_INT 60
34323: PUSH
34324: EMPTY
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 91
34333: PUSH
34334: LD_VAR 0 8
34338: PUSH
34339: LD_INT 6
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 25
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 25
34362: PUSH
34363: LD_INT 16
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: PPUSH
34381: CALL_OW 69
34385: PUSH
34386: LD_VAR 0 8
34390: PPUSH
34391: CALL_OW 313
34395: PPUSH
34396: LD_INT 3
34398: PUSH
34399: LD_INT 60
34401: PUSH
34402: EMPTY
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 25
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 25
34424: PUSH
34425: LD_INT 16
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PPUSH
34441: CALL_OW 72
34445: UNION
34446: ST_TO_ADDR
// if tmp then
34447: LD_VAR 0 4
34451: IFFALSE 34531
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34453: LD_ADDR_VAR 0 4
34457: PUSH
34458: LD_VAR 0 4
34462: PPUSH
34463: LD_INT 3
34465: PPUSH
34466: CALL 72544 0 2
34470: ST_TO_ADDR
// for j in tmp do
34471: LD_ADDR_VAR 0 2
34475: PUSH
34476: LD_VAR 0 4
34480: PUSH
34481: FOR_IN
34482: IFFALSE 34525
// begin if IsInUnit ( j ) then
34484: LD_VAR 0 2
34488: PPUSH
34489: CALL_OW 310
34493: IFFALSE 34504
// ComExit ( j ) ;
34495: LD_VAR 0 2
34499: PPUSH
34500: CALL 72627 0 1
// AddComCollect ( j , x , y ) ;
34504: LD_VAR 0 2
34508: PPUSH
34509: LD_VAR 0 6
34513: PPUSH
34514: LD_VAR 0 7
34518: PPUSH
34519: CALL_OW 177
// end ;
34523: GO 34481
34525: POP
34526: POP
// exit ;
34527: POP
34528: POP
34529: GO 34758
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34531: LD_ADDR_VAR 0 4
34535: PUSH
34536: LD_INT 22
34538: PUSH
34539: LD_VAR 0 5
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 91
34550: PUSH
34551: LD_VAR 0 8
34555: PUSH
34556: LD_INT 8
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: LD_INT 34
34569: PUSH
34570: LD_INT 12
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 34
34579: PUSH
34580: LD_INT 51
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 34
34589: PUSH
34590: LD_INT 32
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 34
34599: PUSH
34600: LD_INT 89
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: PPUSH
34619: CALL_OW 69
34623: ST_TO_ADDR
// if tmp then
34624: LD_VAR 0 4
34628: IFFALSE 34754
// begin for j in tmp do
34630: LD_ADDR_VAR 0 2
34634: PUSH
34635: LD_VAR 0 4
34639: PUSH
34640: FOR_IN
34641: IFFALSE 34752
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34643: LD_VAR 0 2
34647: PPUSH
34648: CALL_OW 262
34652: PUSH
34653: LD_INT 3
34655: EQUAL
34656: PUSH
34657: LD_VAR 0 2
34661: PPUSH
34662: CALL_OW 261
34666: PUSH
34667: LD_INT 20
34669: GREATER
34670: OR
34671: PUSH
34672: LD_VAR 0 2
34676: PPUSH
34677: CALL_OW 314
34681: NOT
34682: AND
34683: PUSH
34684: LD_VAR 0 2
34688: PPUSH
34689: CALL_OW 263
34693: PUSH
34694: LD_INT 1
34696: NONEQUAL
34697: PUSH
34698: LD_VAR 0 2
34702: PPUSH
34703: CALL_OW 311
34707: OR
34708: AND
34709: IFFALSE 34750
// begin ComCollect ( j , x , y ) ;
34711: LD_VAR 0 2
34715: PPUSH
34716: LD_VAR 0 6
34720: PPUSH
34721: LD_VAR 0 7
34725: PPUSH
34726: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34730: LD_VAR 0 2
34734: PPUSH
34735: LD_VAR 0 8
34739: PPUSH
34740: CALL_OW 172
// exit ;
34744: POP
34745: POP
34746: POP
34747: POP
34748: GO 34758
// end ;
34750: GO 34640
34752: POP
34753: POP
// end ; end ;
34754: GO 34129
34756: POP
34757: POP
// end ; end_of_file end_of_file
34758: PPOPN 9
34760: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34761: LD_INT 0
34763: PPUSH
34764: PPUSH
// if exist_mode then
34765: LD_VAR 0 2
34769: IFFALSE 34794
// unit := CreateCharacter ( prefix & ident ) else
34771: LD_ADDR_VAR 0 5
34775: PUSH
34776: LD_VAR 0 3
34780: PUSH
34781: LD_VAR 0 1
34785: STR
34786: PPUSH
34787: CALL_OW 34
34791: ST_TO_ADDR
34792: GO 34809
// unit := NewCharacter ( ident ) ;
34794: LD_ADDR_VAR 0 5
34798: PUSH
34799: LD_VAR 0 1
34803: PPUSH
34804: CALL_OW 25
34808: ST_TO_ADDR
// result := unit ;
34809: LD_ADDR_VAR 0 4
34813: PUSH
34814: LD_VAR 0 5
34818: ST_TO_ADDR
// end ;
34819: LD_VAR 0 4
34823: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34824: LD_INT 0
34826: PPUSH
34827: PPUSH
// if not side or not nation then
34828: LD_VAR 0 1
34832: NOT
34833: PUSH
34834: LD_VAR 0 2
34838: NOT
34839: OR
34840: IFFALSE 34844
// exit ;
34842: GO 35612
// case nation of nation_american :
34844: LD_VAR 0 2
34848: PUSH
34849: LD_INT 1
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 35071
34857: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34858: LD_ADDR_VAR 0 4
34862: PUSH
34863: LD_INT 35
34865: PUSH
34866: LD_INT 45
34868: PUSH
34869: LD_INT 46
34871: PUSH
34872: LD_INT 47
34874: PUSH
34875: LD_INT 82
34877: PUSH
34878: LD_INT 83
34880: PUSH
34881: LD_INT 84
34883: PUSH
34884: LD_INT 85
34886: PUSH
34887: LD_INT 86
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: LD_INT 6
34898: PUSH
34899: LD_INT 15
34901: PUSH
34902: LD_INT 16
34904: PUSH
34905: LD_INT 7
34907: PUSH
34908: LD_INT 12
34910: PUSH
34911: LD_INT 13
34913: PUSH
34914: LD_INT 10
34916: PUSH
34917: LD_INT 14
34919: PUSH
34920: LD_INT 20
34922: PUSH
34923: LD_INT 21
34925: PUSH
34926: LD_INT 22
34928: PUSH
34929: LD_INT 25
34931: PUSH
34932: LD_INT 32
34934: PUSH
34935: LD_INT 27
34937: PUSH
34938: LD_INT 36
34940: PUSH
34941: LD_INT 69
34943: PUSH
34944: LD_INT 39
34946: PUSH
34947: LD_INT 34
34949: PUSH
34950: LD_INT 40
34952: PUSH
34953: LD_INT 48
34955: PUSH
34956: LD_INT 49
34958: PUSH
34959: LD_INT 50
34961: PUSH
34962: LD_INT 51
34964: PUSH
34965: LD_INT 52
34967: PUSH
34968: LD_INT 53
34970: PUSH
34971: LD_INT 54
34973: PUSH
34974: LD_INT 55
34976: PUSH
34977: LD_INT 56
34979: PUSH
34980: LD_INT 57
34982: PUSH
34983: LD_INT 58
34985: PUSH
34986: LD_INT 59
34988: PUSH
34989: LD_INT 60
34991: PUSH
34992: LD_INT 61
34994: PUSH
34995: LD_INT 62
34997: PUSH
34998: LD_INT 80
35000: PUSH
35001: LD_INT 82
35003: PUSH
35004: LD_INT 83
35006: PUSH
35007: LD_INT 84
35009: PUSH
35010: LD_INT 85
35012: PUSH
35013: LD_INT 86
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
35069: GO 35536
35071: LD_INT 2
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35079
35077: GO 35305
35079: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35080: LD_ADDR_VAR 0 4
35084: PUSH
35085: LD_INT 35
35087: PUSH
35088: LD_INT 45
35090: PUSH
35091: LD_INT 46
35093: PUSH
35094: LD_INT 47
35096: PUSH
35097: LD_INT 82
35099: PUSH
35100: LD_INT 83
35102: PUSH
35103: LD_INT 84
35105: PUSH
35106: LD_INT 85
35108: PUSH
35109: LD_INT 87
35111: PUSH
35112: LD_INT 70
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 11
35120: PUSH
35121: LD_INT 3
35123: PUSH
35124: LD_INT 4
35126: PUSH
35127: LD_INT 5
35129: PUSH
35130: LD_INT 6
35132: PUSH
35133: LD_INT 15
35135: PUSH
35136: LD_INT 18
35138: PUSH
35139: LD_INT 7
35141: PUSH
35142: LD_INT 17
35144: PUSH
35145: LD_INT 8
35147: PUSH
35148: LD_INT 20
35150: PUSH
35151: LD_INT 21
35153: PUSH
35154: LD_INT 22
35156: PUSH
35157: LD_INT 72
35159: PUSH
35160: LD_INT 26
35162: PUSH
35163: LD_INT 69
35165: PUSH
35166: LD_INT 39
35168: PUSH
35169: LD_INT 40
35171: PUSH
35172: LD_INT 41
35174: PUSH
35175: LD_INT 42
35177: PUSH
35178: LD_INT 43
35180: PUSH
35181: LD_INT 48
35183: PUSH
35184: LD_INT 49
35186: PUSH
35187: LD_INT 50
35189: PUSH
35190: LD_INT 51
35192: PUSH
35193: LD_INT 52
35195: PUSH
35196: LD_INT 53
35198: PUSH
35199: LD_INT 54
35201: PUSH
35202: LD_INT 55
35204: PUSH
35205: LD_INT 56
35207: PUSH
35208: LD_INT 60
35210: PUSH
35211: LD_INT 61
35213: PUSH
35214: LD_INT 62
35216: PUSH
35217: LD_INT 66
35219: PUSH
35220: LD_INT 67
35222: PUSH
35223: LD_INT 68
35225: PUSH
35226: LD_INT 81
35228: PUSH
35229: LD_INT 82
35231: PUSH
35232: LD_INT 83
35234: PUSH
35235: LD_INT 84
35237: PUSH
35238: LD_INT 85
35240: PUSH
35241: LD_INT 87
35243: PUSH
35244: LD_INT 88
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
35303: GO 35536
35305: LD_INT 3
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35313
35311: GO 35535
35313: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35314: LD_ADDR_VAR 0 4
35318: PUSH
35319: LD_INT 46
35321: PUSH
35322: LD_INT 47
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 82
35333: PUSH
35334: LD_INT 83
35336: PUSH
35337: LD_INT 84
35339: PUSH
35340: LD_INT 85
35342: PUSH
35343: LD_INT 86
35345: PUSH
35346: LD_INT 11
35348: PUSH
35349: LD_INT 9
35351: PUSH
35352: LD_INT 20
35354: PUSH
35355: LD_INT 19
35357: PUSH
35358: LD_INT 21
35360: PUSH
35361: LD_INT 24
35363: PUSH
35364: LD_INT 22
35366: PUSH
35367: LD_INT 25
35369: PUSH
35370: LD_INT 28
35372: PUSH
35373: LD_INT 29
35375: PUSH
35376: LD_INT 30
35378: PUSH
35379: LD_INT 31
35381: PUSH
35382: LD_INT 37
35384: PUSH
35385: LD_INT 38
35387: PUSH
35388: LD_INT 32
35390: PUSH
35391: LD_INT 27
35393: PUSH
35394: LD_INT 33
35396: PUSH
35397: LD_INT 69
35399: PUSH
35400: LD_INT 39
35402: PUSH
35403: LD_INT 34
35405: PUSH
35406: LD_INT 40
35408: PUSH
35409: LD_INT 71
35411: PUSH
35412: LD_INT 23
35414: PUSH
35415: LD_INT 44
35417: PUSH
35418: LD_INT 48
35420: PUSH
35421: LD_INT 49
35423: PUSH
35424: LD_INT 50
35426: PUSH
35427: LD_INT 51
35429: PUSH
35430: LD_INT 52
35432: PUSH
35433: LD_INT 53
35435: PUSH
35436: LD_INT 54
35438: PUSH
35439: LD_INT 55
35441: PUSH
35442: LD_INT 56
35444: PUSH
35445: LD_INT 57
35447: PUSH
35448: LD_INT 58
35450: PUSH
35451: LD_INT 59
35453: PUSH
35454: LD_INT 63
35456: PUSH
35457: LD_INT 64
35459: PUSH
35460: LD_INT 65
35462: PUSH
35463: LD_INT 82
35465: PUSH
35466: LD_INT 83
35468: PUSH
35469: LD_INT 84
35471: PUSH
35472: LD_INT 85
35474: PUSH
35475: LD_INT 86
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: ST_TO_ADDR
35533: GO 35536
35535: POP
// if state > - 1 and state < 3 then
35536: LD_VAR 0 3
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: GREATER
35545: PUSH
35546: LD_VAR 0 3
35550: PUSH
35551: LD_INT 3
35553: LESS
35554: AND
35555: IFFALSE 35612
// for i in result do
35557: LD_ADDR_VAR 0 5
35561: PUSH
35562: LD_VAR 0 4
35566: PUSH
35567: FOR_IN
35568: IFFALSE 35610
// if GetTech ( i , side ) <> state then
35570: LD_VAR 0 5
35574: PPUSH
35575: LD_VAR 0 1
35579: PPUSH
35580: CALL_OW 321
35584: PUSH
35585: LD_VAR 0 3
35589: NONEQUAL
35590: IFFALSE 35608
// result := result diff i ;
35592: LD_ADDR_VAR 0 4
35596: PUSH
35597: LD_VAR 0 4
35601: PUSH
35602: LD_VAR 0 5
35606: DIFF
35607: ST_TO_ADDR
35608: GO 35567
35610: POP
35611: POP
// end ;
35612: LD_VAR 0 4
35616: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35617: LD_INT 0
35619: PPUSH
35620: PPUSH
35621: PPUSH
// result := true ;
35622: LD_ADDR_VAR 0 3
35626: PUSH
35627: LD_INT 1
35629: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35630: LD_ADDR_VAR 0 5
35634: PUSH
35635: LD_VAR 0 2
35639: PPUSH
35640: CALL_OW 480
35644: ST_TO_ADDR
// if not tmp then
35645: LD_VAR 0 5
35649: NOT
35650: IFFALSE 35654
// exit ;
35652: GO 35703
// for i in tmp do
35654: LD_ADDR_VAR 0 4
35658: PUSH
35659: LD_VAR 0 5
35663: PUSH
35664: FOR_IN
35665: IFFALSE 35701
// if GetTech ( i , side ) <> state_researched then
35667: LD_VAR 0 4
35671: PPUSH
35672: LD_VAR 0 1
35676: PPUSH
35677: CALL_OW 321
35681: PUSH
35682: LD_INT 2
35684: NONEQUAL
35685: IFFALSE 35699
// begin result := false ;
35687: LD_ADDR_VAR 0 3
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// exit ;
35695: POP
35696: POP
35697: GO 35703
// end ;
35699: GO 35664
35701: POP
35702: POP
// end ;
35703: LD_VAR 0 3
35707: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35708: LD_INT 0
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35723: LD_VAR 0 1
35727: NOT
35728: PUSH
35729: LD_VAR 0 1
35733: PPUSH
35734: CALL_OW 257
35738: PUSH
35739: LD_INT 9
35741: NONEQUAL
35742: OR
35743: IFFALSE 35747
// exit ;
35745: GO 36320
// side := GetSide ( unit ) ;
35747: LD_ADDR_VAR 0 9
35751: PUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 255
35761: ST_TO_ADDR
// tech_space := tech_spacanom ;
35762: LD_ADDR_VAR 0 12
35766: PUSH
35767: LD_INT 29
35769: ST_TO_ADDR
// tech_time := tech_taurad ;
35770: LD_ADDR_VAR 0 13
35774: PUSH
35775: LD_INT 28
35777: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35778: LD_ADDR_VAR 0 11
35782: PUSH
35783: LD_VAR 0 1
35787: PPUSH
35788: CALL_OW 310
35792: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35793: LD_VAR 0 11
35797: PPUSH
35798: CALL_OW 247
35802: PUSH
35803: LD_INT 2
35805: EQUAL
35806: IFFALSE 35810
// exit ;
35808: GO 36320
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35810: LD_ADDR_VAR 0 8
35814: PUSH
35815: LD_INT 81
35817: PUSH
35818: LD_VAR 0 9
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 3
35829: PUSH
35830: LD_INT 21
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PPUSH
35848: CALL_OW 69
35852: ST_TO_ADDR
// if not tmp then
35853: LD_VAR 0 8
35857: NOT
35858: IFFALSE 35862
// exit ;
35860: GO 36320
// if in_unit then
35862: LD_VAR 0 11
35866: IFFALSE 35890
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35868: LD_ADDR_VAR 0 10
35872: PUSH
35873: LD_VAR 0 8
35877: PPUSH
35878: LD_VAR 0 11
35882: PPUSH
35883: CALL_OW 74
35887: ST_TO_ADDR
35888: GO 35910
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35890: LD_ADDR_VAR 0 10
35894: PUSH
35895: LD_VAR 0 8
35899: PPUSH
35900: LD_VAR 0 1
35904: PPUSH
35905: CALL_OW 74
35909: ST_TO_ADDR
// if not enemy then
35910: LD_VAR 0 10
35914: NOT
35915: IFFALSE 35919
// exit ;
35917: GO 36320
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35919: LD_VAR 0 11
35923: PUSH
35924: LD_VAR 0 11
35928: PPUSH
35929: LD_VAR 0 10
35933: PPUSH
35934: CALL_OW 296
35938: PUSH
35939: LD_INT 13
35941: GREATER
35942: AND
35943: PUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: LD_VAR 0 10
35953: PPUSH
35954: CALL_OW 296
35958: PUSH
35959: LD_INT 12
35961: GREATER
35962: OR
35963: IFFALSE 35967
// exit ;
35965: GO 36320
// missile := [ 1 ] ;
35967: LD_ADDR_VAR 0 14
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: EMPTY
35976: LIST
35977: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35978: LD_VAR 0 9
35982: PPUSH
35983: LD_VAR 0 12
35987: PPUSH
35988: CALL_OW 325
35992: IFFALSE 36021
// missile := Replace ( missile , missile + 1 , 2 ) ;
35994: LD_ADDR_VAR 0 14
35998: PUSH
35999: LD_VAR 0 14
36003: PPUSH
36004: LD_VAR 0 14
36008: PUSH
36009: LD_INT 1
36011: PLUS
36012: PPUSH
36013: LD_INT 2
36015: PPUSH
36016: CALL_OW 1
36020: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36021: LD_VAR 0 9
36025: PPUSH
36026: LD_VAR 0 13
36030: PPUSH
36031: CALL_OW 325
36035: PUSH
36036: LD_VAR 0 10
36040: PPUSH
36041: CALL_OW 255
36045: PPUSH
36046: LD_VAR 0 13
36050: PPUSH
36051: CALL_OW 325
36055: NOT
36056: AND
36057: IFFALSE 36086
// missile := Replace ( missile , missile + 1 , 3 ) ;
36059: LD_ADDR_VAR 0 14
36063: PUSH
36064: LD_VAR 0 14
36068: PPUSH
36069: LD_VAR 0 14
36073: PUSH
36074: LD_INT 1
36076: PLUS
36077: PPUSH
36078: LD_INT 3
36080: PPUSH
36081: CALL_OW 1
36085: ST_TO_ADDR
// if missile < 2 then
36086: LD_VAR 0 14
36090: PUSH
36091: LD_INT 2
36093: LESS
36094: IFFALSE 36098
// exit ;
36096: GO 36320
// x := GetX ( enemy ) ;
36098: LD_ADDR_VAR 0 4
36102: PUSH
36103: LD_VAR 0 10
36107: PPUSH
36108: CALL_OW 250
36112: ST_TO_ADDR
// y := GetY ( enemy ) ;
36113: LD_ADDR_VAR 0 5
36117: PUSH
36118: LD_VAR 0 10
36122: PPUSH
36123: CALL_OW 251
36127: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36128: LD_ADDR_VAR 0 6
36132: PUSH
36133: LD_VAR 0 4
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PPUSH
36142: LD_INT 1
36144: PPUSH
36145: CALL_OW 12
36149: PLUS
36150: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36151: LD_ADDR_VAR 0 7
36155: PUSH
36156: LD_VAR 0 5
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PPUSH
36165: LD_INT 1
36167: PPUSH
36168: CALL_OW 12
36172: PLUS
36173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36174: LD_VAR 0 6
36178: PPUSH
36179: LD_VAR 0 7
36183: PPUSH
36184: CALL_OW 488
36188: NOT
36189: IFFALSE 36211
// begin _x := x ;
36191: LD_ADDR_VAR 0 6
36195: PUSH
36196: LD_VAR 0 4
36200: ST_TO_ADDR
// _y := y ;
36201: LD_ADDR_VAR 0 7
36205: PUSH
36206: LD_VAR 0 5
36210: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36211: LD_ADDR_VAR 0 3
36215: PUSH
36216: LD_INT 1
36218: PPUSH
36219: LD_VAR 0 14
36223: PPUSH
36224: CALL_OW 12
36228: ST_TO_ADDR
// case i of 1 :
36229: LD_VAR 0 3
36233: PUSH
36234: LD_INT 1
36236: DOUBLE
36237: EQUAL
36238: IFTRUE 36242
36240: GO 36259
36242: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36243: LD_VAR 0 1
36247: PPUSH
36248: LD_VAR 0 10
36252: PPUSH
36253: CALL_OW 115
36257: GO 36320
36259: LD_INT 2
36261: DOUBLE
36262: EQUAL
36263: IFTRUE 36267
36265: GO 36289
36267: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36268: LD_VAR 0 1
36272: PPUSH
36273: LD_VAR 0 6
36277: PPUSH
36278: LD_VAR 0 7
36282: PPUSH
36283: CALL_OW 153
36287: GO 36320
36289: LD_INT 3
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36319
36297: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36298: LD_VAR 0 1
36302: PPUSH
36303: LD_VAR 0 6
36307: PPUSH
36308: LD_VAR 0 7
36312: PPUSH
36313: CALL_OW 154
36317: GO 36320
36319: POP
// end ;
36320: LD_VAR 0 2
36324: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36325: LD_INT 0
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
// if not unit or not building then
36333: LD_VAR 0 1
36337: NOT
36338: PUSH
36339: LD_VAR 0 2
36343: NOT
36344: OR
36345: IFFALSE 36349
// exit ;
36347: GO 36507
// x := GetX ( building ) ;
36349: LD_ADDR_VAR 0 5
36353: PUSH
36354: LD_VAR 0 2
36358: PPUSH
36359: CALL_OW 250
36363: ST_TO_ADDR
// y := GetY ( building ) ;
36364: LD_ADDR_VAR 0 6
36368: PUSH
36369: LD_VAR 0 2
36373: PPUSH
36374: CALL_OW 251
36378: ST_TO_ADDR
// for i = 0 to 5 do
36379: LD_ADDR_VAR 0 4
36383: PUSH
36384: DOUBLE
36385: LD_INT 0
36387: DEC
36388: ST_TO_ADDR
36389: LD_INT 5
36391: PUSH
36392: FOR_TO
36393: IFFALSE 36505
// begin _x := ShiftX ( x , i , 3 ) ;
36395: LD_ADDR_VAR 0 7
36399: PUSH
36400: LD_VAR 0 5
36404: PPUSH
36405: LD_VAR 0 4
36409: PPUSH
36410: LD_INT 3
36412: PPUSH
36413: CALL_OW 272
36417: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36418: LD_ADDR_VAR 0 8
36422: PUSH
36423: LD_VAR 0 6
36427: PPUSH
36428: LD_VAR 0 4
36432: PPUSH
36433: LD_INT 3
36435: PPUSH
36436: CALL_OW 273
36440: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36441: LD_VAR 0 7
36445: PPUSH
36446: LD_VAR 0 8
36450: PPUSH
36451: CALL_OW 488
36455: NOT
36456: IFFALSE 36460
// continue ;
36458: GO 36392
// if HexInfo ( _x , _y ) = 0 then
36460: LD_VAR 0 7
36464: PPUSH
36465: LD_VAR 0 8
36469: PPUSH
36470: CALL_OW 428
36474: PUSH
36475: LD_INT 0
36477: EQUAL
36478: IFFALSE 36503
// begin ComMoveXY ( unit , _x , _y ) ;
36480: LD_VAR 0 1
36484: PPUSH
36485: LD_VAR 0 7
36489: PPUSH
36490: LD_VAR 0 8
36494: PPUSH
36495: CALL_OW 111
// exit ;
36499: POP
36500: POP
36501: GO 36507
// end ; end ;
36503: GO 36392
36505: POP
36506: POP
// end ;
36507: LD_VAR 0 3
36511: RET
// export function ScanBase ( side , base_area ) ; begin
36512: LD_INT 0
36514: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36515: LD_ADDR_VAR 0 3
36519: PUSH
36520: LD_VAR 0 2
36524: PPUSH
36525: LD_INT 81
36527: PUSH
36528: LD_VAR 0 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PPUSH
36537: CALL_OW 70
36541: ST_TO_ADDR
// end ;
36542: LD_VAR 0 3
36546: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36547: LD_INT 0
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
// result := false ;
36553: LD_ADDR_VAR 0 2
36557: PUSH
36558: LD_INT 0
36560: ST_TO_ADDR
// side := GetSide ( unit ) ;
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: LD_VAR 0 1
36570: PPUSH
36571: CALL_OW 255
36575: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36576: LD_ADDR_VAR 0 4
36580: PUSH
36581: LD_VAR 0 1
36585: PPUSH
36586: CALL_OW 248
36590: ST_TO_ADDR
// case nat of 1 :
36591: LD_VAR 0 4
36595: PUSH
36596: LD_INT 1
36598: DOUBLE
36599: EQUAL
36600: IFTRUE 36604
36602: GO 36615
36604: POP
// tech := tech_lassight ; 2 :
36605: LD_ADDR_VAR 0 5
36609: PUSH
36610: LD_INT 12
36612: ST_TO_ADDR
36613: GO 36654
36615: LD_INT 2
36617: DOUBLE
36618: EQUAL
36619: IFTRUE 36623
36621: GO 36634
36623: POP
// tech := tech_mortar ; 3 :
36624: LD_ADDR_VAR 0 5
36628: PUSH
36629: LD_INT 41
36631: ST_TO_ADDR
36632: GO 36654
36634: LD_INT 3
36636: DOUBLE
36637: EQUAL
36638: IFTRUE 36642
36640: GO 36653
36642: POP
// tech := tech_bazooka ; end ;
36643: LD_ADDR_VAR 0 5
36647: PUSH
36648: LD_INT 44
36650: ST_TO_ADDR
36651: GO 36654
36653: POP
// if Researched ( side , tech ) then
36654: LD_VAR 0 3
36658: PPUSH
36659: LD_VAR 0 5
36663: PPUSH
36664: CALL_OW 325
36668: IFFALSE 36695
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36670: LD_ADDR_VAR 0 2
36674: PUSH
36675: LD_INT 5
36677: PUSH
36678: LD_INT 8
36680: PUSH
36681: LD_INT 9
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: PUSH
36689: LD_VAR 0 4
36693: ARRAY
36694: ST_TO_ADDR
// end ;
36695: LD_VAR 0 2
36699: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36700: LD_INT 0
36702: PPUSH
36703: PPUSH
36704: PPUSH
// if not mines then
36705: LD_VAR 0 2
36709: NOT
36710: IFFALSE 36714
// exit ;
36712: GO 36858
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36714: LD_ADDR_VAR 0 5
36718: PUSH
36719: LD_INT 81
36721: PUSH
36722: LD_VAR 0 1
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 3
36733: PUSH
36734: LD_INT 21
36736: PUSH
36737: LD_INT 3
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PPUSH
36752: CALL_OW 69
36756: ST_TO_ADDR
// for i in mines do
36757: LD_ADDR_VAR 0 4
36761: PUSH
36762: LD_VAR 0 2
36766: PUSH
36767: FOR_IN
36768: IFFALSE 36856
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36770: LD_VAR 0 4
36774: PUSH
36775: LD_INT 1
36777: ARRAY
36778: PPUSH
36779: LD_VAR 0 4
36783: PUSH
36784: LD_INT 2
36786: ARRAY
36787: PPUSH
36788: CALL_OW 458
36792: NOT
36793: IFFALSE 36797
// continue ;
36795: GO 36767
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36797: LD_VAR 0 4
36801: PUSH
36802: LD_INT 1
36804: ARRAY
36805: PPUSH
36806: LD_VAR 0 4
36810: PUSH
36811: LD_INT 2
36813: ARRAY
36814: PPUSH
36815: CALL_OW 428
36819: PUSH
36820: LD_VAR 0 5
36824: IN
36825: IFFALSE 36854
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36827: LD_VAR 0 4
36831: PUSH
36832: LD_INT 1
36834: ARRAY
36835: PPUSH
36836: LD_VAR 0 4
36840: PUSH
36841: LD_INT 2
36843: ARRAY
36844: PPUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL_OW 456
// end ;
36854: GO 36767
36856: POP
36857: POP
// end ;
36858: LD_VAR 0 3
36862: RET
// export function Count ( array ) ; var i ; begin
36863: LD_INT 0
36865: PPUSH
36866: PPUSH
// result := 0 ;
36867: LD_ADDR_VAR 0 2
36871: PUSH
36872: LD_INT 0
36874: ST_TO_ADDR
// for i in array do
36875: LD_ADDR_VAR 0 3
36879: PUSH
36880: LD_VAR 0 1
36884: PUSH
36885: FOR_IN
36886: IFFALSE 36910
// if i then
36888: LD_VAR 0 3
36892: IFFALSE 36908
// result := result + 1 ;
36894: LD_ADDR_VAR 0 2
36898: PUSH
36899: LD_VAR 0 2
36903: PUSH
36904: LD_INT 1
36906: PLUS
36907: ST_TO_ADDR
36908: GO 36885
36910: POP
36911: POP
// end ;
36912: LD_VAR 0 2
36916: RET
// export function IsEmpty ( building ) ; begin
36917: LD_INT 0
36919: PPUSH
// if not building then
36920: LD_VAR 0 1
36924: NOT
36925: IFFALSE 36929
// exit ;
36927: GO 36972
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36929: LD_ADDR_VAR 0 2
36933: PUSH
36934: LD_VAR 0 1
36938: PUSH
36939: LD_INT 22
36941: PUSH
36942: LD_VAR 0 1
36946: PPUSH
36947: CALL_OW 255
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 58
36958: PUSH
36959: EMPTY
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PPUSH
36966: CALL_OW 69
36970: IN
36971: ST_TO_ADDR
// end ;
36972: LD_VAR 0 2
36976: RET
// export function IsNotFull ( building ) ; var places ; begin
36977: LD_INT 0
36979: PPUSH
36980: PPUSH
// if not building then
36981: LD_VAR 0 1
36985: NOT
36986: IFFALSE 36990
// exit ;
36988: GO 37161
// result := false ;
36990: LD_ADDR_VAR 0 2
36994: PUSH
36995: LD_INT 0
36997: ST_TO_ADDR
// places := 0 ;
36998: LD_ADDR_VAR 0 3
37002: PUSH
37003: LD_INT 0
37005: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37006: LD_VAR 0 1
37010: PPUSH
37011: CALL_OW 266
37015: PUSH
37016: LD_INT 0
37018: DOUBLE
37019: EQUAL
37020: IFTRUE 37078
37022: LD_INT 1
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37078
37028: LD_INT 6
37030: DOUBLE
37031: EQUAL
37032: IFTRUE 37078
37034: LD_INT 7
37036: DOUBLE
37037: EQUAL
37038: IFTRUE 37078
37040: LD_INT 8
37042: DOUBLE
37043: EQUAL
37044: IFTRUE 37078
37046: LD_INT 4
37048: DOUBLE
37049: EQUAL
37050: IFTRUE 37078
37052: LD_INT 5
37054: DOUBLE
37055: EQUAL
37056: IFTRUE 37078
37058: LD_INT 2
37060: DOUBLE
37061: EQUAL
37062: IFTRUE 37078
37064: LD_INT 3
37066: DOUBLE
37067: EQUAL
37068: IFTRUE 37078
37070: LD_INT 35
37072: DOUBLE
37073: EQUAL
37074: IFTRUE 37078
37076: GO 37089
37078: POP
// places := 6 ; b_bunker , b_breastwork :
37079: LD_ADDR_VAR 0 3
37083: PUSH
37084: LD_INT 6
37086: ST_TO_ADDR
37087: GO 37134
37089: LD_INT 32
37091: DOUBLE
37092: EQUAL
37093: IFTRUE 37103
37095: LD_INT 31
37097: DOUBLE
37098: EQUAL
37099: IFTRUE 37103
37101: GO 37114
37103: POP
// places := 1 ; b_control_tower :
37104: LD_ADDR_VAR 0 3
37108: PUSH
37109: LD_INT 1
37111: ST_TO_ADDR
37112: GO 37134
37114: LD_INT 36
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37122
37120: GO 37133
37122: POP
// places := 3 ; end ;
37123: LD_ADDR_VAR 0 3
37127: PUSH
37128: LD_INT 3
37130: ST_TO_ADDR
37131: GO 37134
37133: POP
// if places then
37134: LD_VAR 0 3
37138: IFFALSE 37161
// result := UnitsInside ( building ) < places ;
37140: LD_ADDR_VAR 0 2
37144: PUSH
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 313
37154: PUSH
37155: LD_VAR 0 3
37159: LESS
37160: ST_TO_ADDR
// end ;
37161: LD_VAR 0 2
37165: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37166: LD_INT 0
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
// tmp := [ ] ;
37172: LD_ADDR_VAR 0 3
37176: PUSH
37177: EMPTY
37178: ST_TO_ADDR
// list := [ ] ;
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: EMPTY
37185: ST_TO_ADDR
// for i = 16 to 25 do
37186: LD_ADDR_VAR 0 4
37190: PUSH
37191: DOUBLE
37192: LD_INT 16
37194: DEC
37195: ST_TO_ADDR
37196: LD_INT 25
37198: PUSH
37199: FOR_TO
37200: IFFALSE 37273
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37202: LD_ADDR_VAR 0 3
37206: PUSH
37207: LD_VAR 0 3
37211: PUSH
37212: LD_INT 22
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 255
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 91
37231: PUSH
37232: LD_VAR 0 1
37236: PUSH
37237: LD_INT 6
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 30
37247: PUSH
37248: LD_VAR 0 4
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: PPUSH
37265: CALL_OW 69
37269: ADD
37270: ST_TO_ADDR
37271: GO 37199
37273: POP
37274: POP
// for i = 1 to tmp do
37275: LD_ADDR_VAR 0 4
37279: PUSH
37280: DOUBLE
37281: LD_INT 1
37283: DEC
37284: ST_TO_ADDR
37285: LD_VAR 0 3
37289: PUSH
37290: FOR_TO
37291: IFFALSE 37379
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37293: LD_ADDR_VAR 0 5
37297: PUSH
37298: LD_VAR 0 5
37302: PUSH
37303: LD_VAR 0 3
37307: PUSH
37308: LD_VAR 0 4
37312: ARRAY
37313: PPUSH
37314: CALL_OW 266
37318: PUSH
37319: LD_VAR 0 3
37323: PUSH
37324: LD_VAR 0 4
37328: ARRAY
37329: PPUSH
37330: CALL_OW 250
37334: PUSH
37335: LD_VAR 0 3
37339: PUSH
37340: LD_VAR 0 4
37344: ARRAY
37345: PPUSH
37346: CALL_OW 251
37350: PUSH
37351: LD_VAR 0 3
37355: PUSH
37356: LD_VAR 0 4
37360: ARRAY
37361: PPUSH
37362: CALL_OW 254
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: PUSH
37373: EMPTY
37374: LIST
37375: ADD
37376: ST_TO_ADDR
37377: GO 37290
37379: POP
37380: POP
// result := list ;
37381: LD_ADDR_VAR 0 2
37385: PUSH
37386: LD_VAR 0 5
37390: ST_TO_ADDR
// end ;
37391: LD_VAR 0 2
37395: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37396: LD_INT 0
37398: PPUSH
37399: PPUSH
37400: PPUSH
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
// if not factory then
37405: LD_VAR 0 1
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 38007
// if control = control_apeman then
37414: LD_VAR 0 4
37418: PUSH
37419: LD_INT 5
37421: EQUAL
37422: IFFALSE 37531
// begin tmp := UnitsInside ( factory ) ;
37424: LD_ADDR_VAR 0 8
37428: PUSH
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 313
37438: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37439: LD_VAR 0 8
37443: PPUSH
37444: LD_INT 25
37446: PUSH
37447: LD_INT 12
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PPUSH
37454: CALL_OW 72
37458: NOT
37459: IFFALSE 37469
// control := control_manual ;
37461: LD_ADDR_VAR 0 4
37465: PUSH
37466: LD_INT 1
37468: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37469: LD_ADDR_VAR 0 8
37473: PUSH
37474: LD_VAR 0 1
37478: PPUSH
37479: CALL 37166 0 1
37483: ST_TO_ADDR
// if tmp then
37484: LD_VAR 0 8
37488: IFFALSE 37531
// begin for i in tmp do
37490: LD_ADDR_VAR 0 7
37494: PUSH
37495: LD_VAR 0 8
37499: PUSH
37500: FOR_IN
37501: IFFALSE 37529
// if i [ 1 ] = b_ext_radio then
37503: LD_VAR 0 7
37507: PUSH
37508: LD_INT 1
37510: ARRAY
37511: PUSH
37512: LD_INT 22
37514: EQUAL
37515: IFFALSE 37527
// begin control := control_remote ;
37517: LD_ADDR_VAR 0 4
37521: PUSH
37522: LD_INT 2
37524: ST_TO_ADDR
// break ;
37525: GO 37529
// end ;
37527: GO 37500
37529: POP
37530: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37531: LD_VAR 0 1
37535: PPUSH
37536: LD_VAR 0 2
37540: PPUSH
37541: LD_VAR 0 3
37545: PPUSH
37546: LD_VAR 0 4
37550: PPUSH
37551: LD_VAR 0 5
37555: PPUSH
37556: CALL_OW 448
37560: IFFALSE 37595
// begin result := [ chassis , engine , control , weapon ] ;
37562: LD_ADDR_VAR 0 6
37566: PUSH
37567: LD_VAR 0 2
37571: PUSH
37572: LD_VAR 0 3
37576: PUSH
37577: LD_VAR 0 4
37581: PUSH
37582: LD_VAR 0 5
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// exit ;
37593: GO 38007
// end ; _chassis := AvailableChassisList ( factory ) ;
37595: LD_ADDR_VAR 0 9
37599: PUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 475
37609: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37610: LD_ADDR_VAR 0 11
37614: PUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL_OW 476
37624: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37625: LD_ADDR_VAR 0 12
37629: PUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 477
37639: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37640: LD_ADDR_VAR 0 10
37644: PUSH
37645: LD_VAR 0 1
37649: PPUSH
37650: CALL_OW 478
37654: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37655: LD_VAR 0 9
37659: NOT
37660: PUSH
37661: LD_VAR 0 11
37665: NOT
37666: OR
37667: PUSH
37668: LD_VAR 0 12
37672: NOT
37673: OR
37674: PUSH
37675: LD_VAR 0 10
37679: NOT
37680: OR
37681: IFFALSE 37716
// begin result := [ chassis , engine , control , weapon ] ;
37683: LD_ADDR_VAR 0 6
37687: PUSH
37688: LD_VAR 0 2
37692: PUSH
37693: LD_VAR 0 3
37697: PUSH
37698: LD_VAR 0 4
37702: PUSH
37703: LD_VAR 0 5
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: ST_TO_ADDR
// exit ;
37714: GO 38007
// end ; if not chassis in _chassis then
37716: LD_VAR 0 2
37720: PUSH
37721: LD_VAR 0 9
37725: IN
37726: NOT
37727: IFFALSE 37753
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37729: LD_ADDR_VAR 0 2
37733: PUSH
37734: LD_VAR 0 9
37738: PUSH
37739: LD_INT 1
37741: PPUSH
37742: LD_VAR 0 9
37746: PPUSH
37747: CALL_OW 12
37751: ARRAY
37752: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37753: LD_VAR 0 2
37757: PPUSH
37758: LD_VAR 0 3
37762: PPUSH
37763: CALL 38012 0 2
37767: NOT
37768: IFFALSE 37827
// repeat engine := _engine [ 1 ] ;
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_VAR 0 11
37779: PUSH
37780: LD_INT 1
37782: ARRAY
37783: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37784: LD_ADDR_VAR 0 11
37788: PUSH
37789: LD_VAR 0 11
37793: PPUSH
37794: LD_INT 1
37796: PPUSH
37797: CALL_OW 3
37801: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37802: LD_VAR 0 2
37806: PPUSH
37807: LD_VAR 0 3
37811: PPUSH
37812: CALL 38012 0 2
37816: PUSH
37817: LD_VAR 0 11
37821: PUSH
37822: EMPTY
37823: EQUAL
37824: OR
37825: IFFALSE 37770
// if not control in _control then
37827: LD_VAR 0 4
37831: PUSH
37832: LD_VAR 0 12
37836: IN
37837: NOT
37838: IFFALSE 37864
// control := _control [ rand ( 1 , _control ) ] ;
37840: LD_ADDR_VAR 0 4
37844: PUSH
37845: LD_VAR 0 12
37849: PUSH
37850: LD_INT 1
37852: PPUSH
37853: LD_VAR 0 12
37857: PPUSH
37858: CALL_OW 12
37862: ARRAY
37863: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37864: LD_VAR 0 2
37868: PPUSH
37869: LD_VAR 0 5
37873: PPUSH
37874: CALL 38232 0 2
37878: NOT
37879: IFFALSE 37938
// repeat weapon := _weapon [ 1 ] ;
37881: LD_ADDR_VAR 0 5
37885: PUSH
37886: LD_VAR 0 10
37890: PUSH
37891: LD_INT 1
37893: ARRAY
37894: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37895: LD_ADDR_VAR 0 10
37899: PUSH
37900: LD_VAR 0 10
37904: PPUSH
37905: LD_INT 1
37907: PPUSH
37908: CALL_OW 3
37912: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37913: LD_VAR 0 2
37917: PPUSH
37918: LD_VAR 0 5
37922: PPUSH
37923: CALL 38232 0 2
37927: PUSH
37928: LD_VAR 0 10
37932: PUSH
37933: EMPTY
37934: EQUAL
37935: OR
37936: IFFALSE 37881
// result := [ ] ;
37938: LD_ADDR_VAR 0 6
37942: PUSH
37943: EMPTY
37944: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37945: LD_VAR 0 1
37949: PPUSH
37950: LD_VAR 0 2
37954: PPUSH
37955: LD_VAR 0 3
37959: PPUSH
37960: LD_VAR 0 4
37964: PPUSH
37965: LD_VAR 0 5
37969: PPUSH
37970: CALL_OW 448
37974: IFFALSE 38007
// result := [ chassis , engine , control , weapon ] ;
37976: LD_ADDR_VAR 0 6
37980: PUSH
37981: LD_VAR 0 2
37985: PUSH
37986: LD_VAR 0 3
37990: PUSH
37991: LD_VAR 0 4
37995: PUSH
37996: LD_VAR 0 5
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: ST_TO_ADDR
// end ;
38007: LD_VAR 0 6
38011: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38012: LD_INT 0
38014: PPUSH
// if not chassis or not engine then
38015: LD_VAR 0 1
38019: NOT
38020: PUSH
38021: LD_VAR 0 2
38025: NOT
38026: OR
38027: IFFALSE 38031
// exit ;
38029: GO 38227
// case engine of engine_solar :
38031: LD_VAR 0 2
38035: PUSH
38036: LD_INT 2
38038: DOUBLE
38039: EQUAL
38040: IFTRUE 38044
38042: GO 38082
38044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38045: LD_ADDR_VAR 0 3
38049: PUSH
38050: LD_INT 11
38052: PUSH
38053: LD_INT 12
38055: PUSH
38056: LD_INT 13
38058: PUSH
38059: LD_INT 14
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: ST_TO_ADDR
38080: GO 38211
38082: LD_INT 1
38084: DOUBLE
38085: EQUAL
38086: IFTRUE 38090
38088: GO 38152
38090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38091: LD_ADDR_VAR 0 3
38095: PUSH
38096: LD_INT 11
38098: PUSH
38099: LD_INT 12
38101: PUSH
38102: LD_INT 13
38104: PUSH
38105: LD_INT 14
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: LD_INT 3
38116: PUSH
38117: LD_INT 4
38119: PUSH
38120: LD_INT 5
38122: PUSH
38123: LD_INT 21
38125: PUSH
38126: LD_INT 23
38128: PUSH
38129: LD_INT 22
38131: PUSH
38132: LD_INT 24
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
38150: GO 38211
38152: LD_INT 3
38154: DOUBLE
38155: EQUAL
38156: IFTRUE 38160
38158: GO 38210
38160: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38161: LD_ADDR_VAR 0 3
38165: PUSH
38166: LD_INT 13
38168: PUSH
38169: LD_INT 14
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: LD_INT 4
38180: PUSH
38181: LD_INT 5
38183: PUSH
38184: LD_INT 21
38186: PUSH
38187: LD_INT 22
38189: PUSH
38190: LD_INT 23
38192: PUSH
38193: LD_INT 24
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
38208: GO 38211
38210: POP
// result := ( chassis in result ) ;
38211: LD_ADDR_VAR 0 3
38215: PUSH
38216: LD_VAR 0 1
38220: PUSH
38221: LD_VAR 0 3
38225: IN
38226: ST_TO_ADDR
// end ;
38227: LD_VAR 0 3
38231: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38232: LD_INT 0
38234: PPUSH
// if not chassis or not weapon then
38235: LD_VAR 0 1
38239: NOT
38240: PUSH
38241: LD_VAR 0 2
38245: NOT
38246: OR
38247: IFFALSE 38251
// exit ;
38249: GO 39311
// case weapon of us_machine_gun :
38251: LD_VAR 0 2
38255: PUSH
38256: LD_INT 2
38258: DOUBLE
38259: EQUAL
38260: IFTRUE 38264
38262: GO 38294
38264: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: LD_INT 3
38278: PUSH
38279: LD_INT 4
38281: PUSH
38282: LD_INT 5
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
38292: GO 39295
38294: LD_INT 3
38296: DOUBLE
38297: EQUAL
38298: IFTRUE 38302
38300: GO 38332
38302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38303: LD_ADDR_VAR 0 3
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: LD_INT 4
38319: PUSH
38320: LD_INT 5
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: ST_TO_ADDR
38330: GO 39295
38332: LD_INT 11
38334: DOUBLE
38335: EQUAL
38336: IFTRUE 38340
38338: GO 38370
38340: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 2
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 4
38357: PUSH
38358: LD_INT 5
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: ST_TO_ADDR
38368: GO 39295
38370: LD_INT 4
38372: DOUBLE
38373: EQUAL
38374: IFTRUE 38378
38376: GO 38404
38378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38379: LD_ADDR_VAR 0 3
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: LD_INT 4
38392: PUSH
38393: LD_INT 5
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
38402: GO 39295
38404: LD_INT 5
38406: DOUBLE
38407: EQUAL
38408: IFTRUE 38412
38410: GO 38438
38412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38413: LD_ADDR_VAR 0 3
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: LD_INT 4
38426: PUSH
38427: LD_INT 5
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: ST_TO_ADDR
38436: GO 39295
38438: LD_INT 9
38440: DOUBLE
38441: EQUAL
38442: IFTRUE 38446
38444: GO 38472
38446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38447: LD_ADDR_VAR 0 3
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: LD_INT 4
38460: PUSH
38461: LD_INT 5
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: ST_TO_ADDR
38470: GO 39295
38472: LD_INT 7
38474: DOUBLE
38475: EQUAL
38476: IFTRUE 38480
38478: GO 38506
38480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38481: LD_ADDR_VAR 0 3
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: LD_INT 3
38491: PUSH
38492: LD_INT 4
38494: PUSH
38495: LD_INT 5
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
38504: GO 39295
38506: LD_INT 12
38508: DOUBLE
38509: EQUAL
38510: IFTRUE 38514
38512: GO 38540
38514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38515: LD_ADDR_VAR 0 3
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: LD_INT 4
38528: PUSH
38529: LD_INT 5
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
38538: GO 39295
38540: LD_INT 13
38542: DOUBLE
38543: EQUAL
38544: IFTRUE 38548
38546: GO 38574
38548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: LD_INT 3
38559: PUSH
38560: LD_INT 4
38562: PUSH
38563: LD_INT 5
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
38572: GO 39295
38574: LD_INT 14
38576: DOUBLE
38577: EQUAL
38578: IFTRUE 38582
38580: GO 38600
38582: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38583: LD_ADDR_VAR 0 3
38587: PUSH
38588: LD_INT 4
38590: PUSH
38591: LD_INT 5
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: ST_TO_ADDR
38598: GO 39295
38600: LD_INT 6
38602: DOUBLE
38603: EQUAL
38604: IFTRUE 38608
38606: GO 38626
38608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38609: LD_ADDR_VAR 0 3
38613: PUSH
38614: LD_INT 4
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: ST_TO_ADDR
38624: GO 39295
38626: LD_INT 10
38628: DOUBLE
38629: EQUAL
38630: IFTRUE 38634
38632: GO 38652
38634: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38635: LD_ADDR_VAR 0 3
38639: PUSH
38640: LD_INT 4
38642: PUSH
38643: LD_INT 5
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: ST_TO_ADDR
38650: GO 39295
38652: LD_INT 22
38654: DOUBLE
38655: EQUAL
38656: IFTRUE 38660
38658: GO 38686
38660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38661: LD_ADDR_VAR 0 3
38665: PUSH
38666: LD_INT 11
38668: PUSH
38669: LD_INT 12
38671: PUSH
38672: LD_INT 13
38674: PUSH
38675: LD_INT 14
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
38684: GO 39295
38686: LD_INT 23
38688: DOUBLE
38689: EQUAL
38690: IFTRUE 38694
38692: GO 38720
38694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38695: LD_ADDR_VAR 0 3
38699: PUSH
38700: LD_INT 11
38702: PUSH
38703: LD_INT 12
38705: PUSH
38706: LD_INT 13
38708: PUSH
38709: LD_INT 14
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: ST_TO_ADDR
38718: GO 39295
38720: LD_INT 24
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38754
38728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_INT 11
38736: PUSH
38737: LD_INT 12
38739: PUSH
38740: LD_INT 13
38742: PUSH
38743: LD_INT 14
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: ST_TO_ADDR
38752: GO 39295
38754: LD_INT 30
38756: DOUBLE
38757: EQUAL
38758: IFTRUE 38762
38760: GO 38788
38762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38763: LD_ADDR_VAR 0 3
38767: PUSH
38768: LD_INT 11
38770: PUSH
38771: LD_INT 12
38773: PUSH
38774: LD_INT 13
38776: PUSH
38777: LD_INT 14
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: ST_TO_ADDR
38786: GO 39295
38788: LD_INT 25
38790: DOUBLE
38791: EQUAL
38792: IFTRUE 38796
38794: GO 38814
38796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_INT 13
38804: PUSH
38805: LD_INT 14
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: ST_TO_ADDR
38812: GO 39295
38814: LD_INT 27
38816: DOUBLE
38817: EQUAL
38818: IFTRUE 38822
38820: GO 38840
38822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38823: LD_ADDR_VAR 0 3
38827: PUSH
38828: LD_INT 13
38830: PUSH
38831: LD_INT 14
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: ST_TO_ADDR
38838: GO 39295
38840: LD_INT 92
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38848
38846: GO 38874
38848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38849: LD_ADDR_VAR 0 3
38853: PUSH
38854: LD_INT 11
38856: PUSH
38857: LD_INT 12
38859: PUSH
38860: LD_INT 13
38862: PUSH
38863: LD_INT 14
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
38872: GO 39295
38874: LD_INT 28
38876: DOUBLE
38877: EQUAL
38878: IFTRUE 38882
38880: GO 38900
38882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38883: LD_ADDR_VAR 0 3
38887: PUSH
38888: LD_INT 13
38890: PUSH
38891: LD_INT 14
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: ST_TO_ADDR
38898: GO 39295
38900: LD_INT 29
38902: DOUBLE
38903: EQUAL
38904: IFTRUE 38908
38906: GO 38926
38908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38909: LD_ADDR_VAR 0 3
38913: PUSH
38914: LD_INT 13
38916: PUSH
38917: LD_INT 14
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: ST_TO_ADDR
38924: GO 39295
38926: LD_INT 31
38928: DOUBLE
38929: EQUAL
38930: IFTRUE 38934
38932: GO 38952
38934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_INT 13
38942: PUSH
38943: LD_INT 14
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: ST_TO_ADDR
38950: GO 39295
38952: LD_INT 26
38954: DOUBLE
38955: EQUAL
38956: IFTRUE 38960
38958: GO 38978
38960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38961: LD_ADDR_VAR 0 3
38965: PUSH
38966: LD_INT 13
38968: PUSH
38969: LD_INT 14
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: ST_TO_ADDR
38976: GO 39295
38978: LD_INT 42
38980: DOUBLE
38981: EQUAL
38982: IFTRUE 38986
38984: GO 39012
38986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38987: LD_ADDR_VAR 0 3
38991: PUSH
38992: LD_INT 21
38994: PUSH
38995: LD_INT 22
38997: PUSH
38998: LD_INT 23
39000: PUSH
39001: LD_INT 24
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: ST_TO_ADDR
39010: GO 39295
39012: LD_INT 43
39014: DOUBLE
39015: EQUAL
39016: IFTRUE 39020
39018: GO 39046
39020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39021: LD_ADDR_VAR 0 3
39025: PUSH
39026: LD_INT 21
39028: PUSH
39029: LD_INT 22
39031: PUSH
39032: LD_INT 23
39034: PUSH
39035: LD_INT 24
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
39044: GO 39295
39046: LD_INT 44
39048: DOUBLE
39049: EQUAL
39050: IFTRUE 39054
39052: GO 39080
39054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39055: LD_ADDR_VAR 0 3
39059: PUSH
39060: LD_INT 21
39062: PUSH
39063: LD_INT 22
39065: PUSH
39066: LD_INT 23
39068: PUSH
39069: LD_INT 24
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: ST_TO_ADDR
39078: GO 39295
39080: LD_INT 45
39082: DOUBLE
39083: EQUAL
39084: IFTRUE 39088
39086: GO 39114
39088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: LD_INT 21
39096: PUSH
39097: LD_INT 22
39099: PUSH
39100: LD_INT 23
39102: PUSH
39103: LD_INT 24
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
39112: GO 39295
39114: LD_INT 49
39116: DOUBLE
39117: EQUAL
39118: IFTRUE 39122
39120: GO 39148
39122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39123: LD_ADDR_VAR 0 3
39127: PUSH
39128: LD_INT 21
39130: PUSH
39131: LD_INT 22
39133: PUSH
39134: LD_INT 23
39136: PUSH
39137: LD_INT 24
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: ST_TO_ADDR
39146: GO 39295
39148: LD_INT 51
39150: DOUBLE
39151: EQUAL
39152: IFTRUE 39156
39154: GO 39182
39156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39157: LD_ADDR_VAR 0 3
39161: PUSH
39162: LD_INT 21
39164: PUSH
39165: LD_INT 22
39167: PUSH
39168: LD_INT 23
39170: PUSH
39171: LD_INT 24
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
39180: GO 39295
39182: LD_INT 52
39184: DOUBLE
39185: EQUAL
39186: IFTRUE 39190
39188: GO 39216
39190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39191: LD_ADDR_VAR 0 3
39195: PUSH
39196: LD_INT 21
39198: PUSH
39199: LD_INT 22
39201: PUSH
39202: LD_INT 23
39204: PUSH
39205: LD_INT 24
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: ST_TO_ADDR
39214: GO 39295
39216: LD_INT 53
39218: DOUBLE
39219: EQUAL
39220: IFTRUE 39224
39222: GO 39242
39224: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39225: LD_ADDR_VAR 0 3
39229: PUSH
39230: LD_INT 23
39232: PUSH
39233: LD_INT 24
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: ST_TO_ADDR
39240: GO 39295
39242: LD_INT 46
39244: DOUBLE
39245: EQUAL
39246: IFTRUE 39250
39248: GO 39268
39250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_INT 23
39258: PUSH
39259: LD_INT 24
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: ST_TO_ADDR
39266: GO 39295
39268: LD_INT 47
39270: DOUBLE
39271: EQUAL
39272: IFTRUE 39276
39274: GO 39294
39276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39277: LD_ADDR_VAR 0 3
39281: PUSH
39282: LD_INT 23
39284: PUSH
39285: LD_INT 24
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: ST_TO_ADDR
39292: GO 39295
39294: POP
// result := ( chassis in result ) ;
39295: LD_ADDR_VAR 0 3
39299: PUSH
39300: LD_VAR 0 1
39304: PUSH
39305: LD_VAR 0 3
39309: IN
39310: ST_TO_ADDR
// end ;
39311: LD_VAR 0 3
39315: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39316: LD_INT 0
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
// result := array ;
39325: LD_ADDR_VAR 0 5
39329: PUSH
39330: LD_VAR 0 1
39334: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39335: LD_VAR 0 1
39339: NOT
39340: PUSH
39341: LD_VAR 0 2
39345: NOT
39346: OR
39347: PUSH
39348: LD_VAR 0 3
39352: NOT
39353: OR
39354: PUSH
39355: LD_VAR 0 2
39359: PUSH
39360: LD_VAR 0 1
39364: GREATER
39365: OR
39366: PUSH
39367: LD_VAR 0 3
39371: PUSH
39372: LD_VAR 0 1
39376: GREATER
39377: OR
39378: IFFALSE 39382
// exit ;
39380: GO 39678
// if direction then
39382: LD_VAR 0 4
39386: IFFALSE 39450
// begin d := 1 ;
39388: LD_ADDR_VAR 0 9
39392: PUSH
39393: LD_INT 1
39395: ST_TO_ADDR
// if i_from > i_to then
39396: LD_VAR 0 2
39400: PUSH
39401: LD_VAR 0 3
39405: GREATER
39406: IFFALSE 39432
// length := ( array - i_from ) + i_to else
39408: LD_ADDR_VAR 0 11
39412: PUSH
39413: LD_VAR 0 1
39417: PUSH
39418: LD_VAR 0 2
39422: MINUS
39423: PUSH
39424: LD_VAR 0 3
39428: PLUS
39429: ST_TO_ADDR
39430: GO 39448
// length := i_to - i_from ;
39432: LD_ADDR_VAR 0 11
39436: PUSH
39437: LD_VAR 0 3
39441: PUSH
39442: LD_VAR 0 2
39446: MINUS
39447: ST_TO_ADDR
// end else
39448: GO 39511
// begin d := - 1 ;
39450: LD_ADDR_VAR 0 9
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: ST_TO_ADDR
// if i_from > i_to then
39459: LD_VAR 0 2
39463: PUSH
39464: LD_VAR 0 3
39468: GREATER
39469: IFFALSE 39489
// length := i_from - i_to else
39471: LD_ADDR_VAR 0 11
39475: PUSH
39476: LD_VAR 0 2
39480: PUSH
39481: LD_VAR 0 3
39485: MINUS
39486: ST_TO_ADDR
39487: GO 39511
// length := ( array - i_to ) + i_from ;
39489: LD_ADDR_VAR 0 11
39493: PUSH
39494: LD_VAR 0 1
39498: PUSH
39499: LD_VAR 0 3
39503: MINUS
39504: PUSH
39505: LD_VAR 0 2
39509: PLUS
39510: ST_TO_ADDR
// end ; if not length then
39511: LD_VAR 0 11
39515: NOT
39516: IFFALSE 39520
// exit ;
39518: GO 39678
// tmp := array ;
39520: LD_ADDR_VAR 0 10
39524: PUSH
39525: LD_VAR 0 1
39529: ST_TO_ADDR
// for i = 1 to length do
39530: LD_ADDR_VAR 0 6
39534: PUSH
39535: DOUBLE
39536: LD_INT 1
39538: DEC
39539: ST_TO_ADDR
39540: LD_VAR 0 11
39544: PUSH
39545: FOR_TO
39546: IFFALSE 39666
// begin for j = 1 to array do
39548: LD_ADDR_VAR 0 7
39552: PUSH
39553: DOUBLE
39554: LD_INT 1
39556: DEC
39557: ST_TO_ADDR
39558: LD_VAR 0 1
39562: PUSH
39563: FOR_TO
39564: IFFALSE 39652
// begin k := j + d ;
39566: LD_ADDR_VAR 0 8
39570: PUSH
39571: LD_VAR 0 7
39575: PUSH
39576: LD_VAR 0 9
39580: PLUS
39581: ST_TO_ADDR
// if k > array then
39582: LD_VAR 0 8
39586: PUSH
39587: LD_VAR 0 1
39591: GREATER
39592: IFFALSE 39602
// k := 1 ;
39594: LD_ADDR_VAR 0 8
39598: PUSH
39599: LD_INT 1
39601: ST_TO_ADDR
// if not k then
39602: LD_VAR 0 8
39606: NOT
39607: IFFALSE 39619
// k := array ;
39609: LD_ADDR_VAR 0 8
39613: PUSH
39614: LD_VAR 0 1
39618: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39619: LD_ADDR_VAR 0 10
39623: PUSH
39624: LD_VAR 0 10
39628: PPUSH
39629: LD_VAR 0 8
39633: PPUSH
39634: LD_VAR 0 1
39638: PUSH
39639: LD_VAR 0 7
39643: ARRAY
39644: PPUSH
39645: CALL_OW 1
39649: ST_TO_ADDR
// end ;
39650: GO 39563
39652: POP
39653: POP
// array := tmp ;
39654: LD_ADDR_VAR 0 1
39658: PUSH
39659: LD_VAR 0 10
39663: ST_TO_ADDR
// end ;
39664: GO 39545
39666: POP
39667: POP
// result := array ;
39668: LD_ADDR_VAR 0 5
39672: PUSH
39673: LD_VAR 0 1
39677: ST_TO_ADDR
// end ;
39678: LD_VAR 0 5
39682: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39683: LD_INT 0
39685: PPUSH
39686: PPUSH
// result := 0 ;
39687: LD_ADDR_VAR 0 3
39691: PUSH
39692: LD_INT 0
39694: ST_TO_ADDR
// if not array or not value in array then
39695: LD_VAR 0 1
39699: NOT
39700: PUSH
39701: LD_VAR 0 2
39705: PUSH
39706: LD_VAR 0 1
39710: IN
39711: NOT
39712: OR
39713: IFFALSE 39717
// exit ;
39715: GO 39771
// for i = 1 to array do
39717: LD_ADDR_VAR 0 4
39721: PUSH
39722: DOUBLE
39723: LD_INT 1
39725: DEC
39726: ST_TO_ADDR
39727: LD_VAR 0 1
39731: PUSH
39732: FOR_TO
39733: IFFALSE 39769
// if value = array [ i ] then
39735: LD_VAR 0 2
39739: PUSH
39740: LD_VAR 0 1
39744: PUSH
39745: LD_VAR 0 4
39749: ARRAY
39750: EQUAL
39751: IFFALSE 39767
// begin result := i ;
39753: LD_ADDR_VAR 0 3
39757: PUSH
39758: LD_VAR 0 4
39762: ST_TO_ADDR
// exit ;
39763: POP
39764: POP
39765: GO 39771
// end ;
39767: GO 39732
39769: POP
39770: POP
// end ;
39771: LD_VAR 0 3
39775: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39776: LD_INT 0
39778: PPUSH
// vc_chassis := chassis ;
39779: LD_ADDR_OWVAR 37
39783: PUSH
39784: LD_VAR 0 1
39788: ST_TO_ADDR
// vc_engine := engine ;
39789: LD_ADDR_OWVAR 39
39793: PUSH
39794: LD_VAR 0 2
39798: ST_TO_ADDR
// vc_control := control ;
39799: LD_ADDR_OWVAR 38
39803: PUSH
39804: LD_VAR 0 3
39808: ST_TO_ADDR
// vc_weapon := weapon ;
39809: LD_ADDR_OWVAR 40
39813: PUSH
39814: LD_VAR 0 4
39818: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39819: LD_ADDR_OWVAR 41
39823: PUSH
39824: LD_VAR 0 5
39828: ST_TO_ADDR
// end ;
39829: LD_VAR 0 6
39833: RET
// export function WantPlant ( unit ) ; var task ; begin
39834: LD_INT 0
39836: PPUSH
39837: PPUSH
// result := false ;
39838: LD_ADDR_VAR 0 2
39842: PUSH
39843: LD_INT 0
39845: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39846: LD_ADDR_VAR 0 3
39850: PUSH
39851: LD_VAR 0 1
39855: PPUSH
39856: CALL_OW 437
39860: ST_TO_ADDR
// if task then
39861: LD_VAR 0 3
39865: IFFALSE 39893
// if task [ 1 ] [ 1 ] = p then
39867: LD_VAR 0 3
39871: PUSH
39872: LD_INT 1
39874: ARRAY
39875: PUSH
39876: LD_INT 1
39878: ARRAY
39879: PUSH
39880: LD_STRING p
39882: EQUAL
39883: IFFALSE 39893
// result := true ;
39885: LD_ADDR_VAR 0 2
39889: PUSH
39890: LD_INT 1
39892: ST_TO_ADDR
// end ;
39893: LD_VAR 0 2
39897: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39898: LD_INT 0
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
// if pos < 1 then
39904: LD_VAR 0 2
39908: PUSH
39909: LD_INT 1
39911: LESS
39912: IFFALSE 39916
// exit ;
39914: GO 40219
// if pos = 1 then
39916: LD_VAR 0 2
39920: PUSH
39921: LD_INT 1
39923: EQUAL
39924: IFFALSE 39957
// result := Replace ( arr , pos [ 1 ] , value ) else
39926: LD_ADDR_VAR 0 4
39930: PUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: LD_VAR 0 2
39940: PUSH
39941: LD_INT 1
39943: ARRAY
39944: PPUSH
39945: LD_VAR 0 3
39949: PPUSH
39950: CALL_OW 1
39954: ST_TO_ADDR
39955: GO 40219
// begin tmp := arr ;
39957: LD_ADDR_VAR 0 6
39961: PUSH
39962: LD_VAR 0 1
39966: ST_TO_ADDR
// s_arr := [ tmp ] ;
39967: LD_ADDR_VAR 0 7
39971: PUSH
39972: LD_VAR 0 6
39976: PUSH
39977: EMPTY
39978: LIST
39979: ST_TO_ADDR
// for i = 1 to pos - 1 do
39980: LD_ADDR_VAR 0 5
39984: PUSH
39985: DOUBLE
39986: LD_INT 1
39988: DEC
39989: ST_TO_ADDR
39990: LD_VAR 0 2
39994: PUSH
39995: LD_INT 1
39997: MINUS
39998: PUSH
39999: FOR_TO
40000: IFFALSE 40045
// begin tmp := tmp [ pos [ i ] ] ;
40002: LD_ADDR_VAR 0 6
40006: PUSH
40007: LD_VAR 0 6
40011: PUSH
40012: LD_VAR 0 2
40016: PUSH
40017: LD_VAR 0 5
40021: ARRAY
40022: ARRAY
40023: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40024: LD_ADDR_VAR 0 7
40028: PUSH
40029: LD_VAR 0 7
40033: PUSH
40034: LD_VAR 0 6
40038: PUSH
40039: EMPTY
40040: LIST
40041: ADD
40042: ST_TO_ADDR
// end ;
40043: GO 39999
40045: POP
40046: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40047: LD_ADDR_VAR 0 6
40051: PUSH
40052: LD_VAR 0 6
40056: PPUSH
40057: LD_VAR 0 2
40061: PUSH
40062: LD_VAR 0 2
40066: ARRAY
40067: PPUSH
40068: LD_VAR 0 3
40072: PPUSH
40073: CALL_OW 1
40077: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40078: LD_ADDR_VAR 0 7
40082: PUSH
40083: LD_VAR 0 7
40087: PPUSH
40088: LD_VAR 0 7
40092: PPUSH
40093: LD_VAR 0 6
40097: PPUSH
40098: CALL_OW 1
40102: ST_TO_ADDR
// for i = s_arr downto 2 do
40103: LD_ADDR_VAR 0 5
40107: PUSH
40108: DOUBLE
40109: LD_VAR 0 7
40113: INC
40114: ST_TO_ADDR
40115: LD_INT 2
40117: PUSH
40118: FOR_DOWNTO
40119: IFFALSE 40203
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40121: LD_ADDR_VAR 0 6
40125: PUSH
40126: LD_VAR 0 7
40130: PUSH
40131: LD_VAR 0 5
40135: PUSH
40136: LD_INT 1
40138: MINUS
40139: ARRAY
40140: PPUSH
40141: LD_VAR 0 2
40145: PUSH
40146: LD_VAR 0 5
40150: PUSH
40151: LD_INT 1
40153: MINUS
40154: ARRAY
40155: PPUSH
40156: LD_VAR 0 7
40160: PUSH
40161: LD_VAR 0 5
40165: ARRAY
40166: PPUSH
40167: CALL_OW 1
40171: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40172: LD_ADDR_VAR 0 7
40176: PUSH
40177: LD_VAR 0 7
40181: PPUSH
40182: LD_VAR 0 5
40186: PUSH
40187: LD_INT 1
40189: MINUS
40190: PPUSH
40191: LD_VAR 0 6
40195: PPUSH
40196: CALL_OW 1
40200: ST_TO_ADDR
// end ;
40201: GO 40118
40203: POP
40204: POP
// result := s_arr [ 1 ] ;
40205: LD_ADDR_VAR 0 4
40209: PUSH
40210: LD_VAR 0 7
40214: PUSH
40215: LD_INT 1
40217: ARRAY
40218: ST_TO_ADDR
// end ; end ;
40219: LD_VAR 0 4
40223: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40224: LD_INT 0
40226: PPUSH
40227: PPUSH
// if not list then
40228: LD_VAR 0 1
40232: NOT
40233: IFFALSE 40237
// exit ;
40235: GO 40328
// i := list [ pos1 ] ;
40237: LD_ADDR_VAR 0 5
40241: PUSH
40242: LD_VAR 0 1
40246: PUSH
40247: LD_VAR 0 2
40251: ARRAY
40252: ST_TO_ADDR
// if not i then
40253: LD_VAR 0 5
40257: NOT
40258: IFFALSE 40262
// exit ;
40260: GO 40328
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40262: LD_ADDR_VAR 0 1
40266: PUSH
40267: LD_VAR 0 1
40271: PPUSH
40272: LD_VAR 0 2
40276: PPUSH
40277: LD_VAR 0 1
40281: PUSH
40282: LD_VAR 0 3
40286: ARRAY
40287: PPUSH
40288: CALL_OW 1
40292: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40293: LD_ADDR_VAR 0 1
40297: PUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_VAR 0 3
40307: PPUSH
40308: LD_VAR 0 5
40312: PPUSH
40313: CALL_OW 1
40317: ST_TO_ADDR
// result := list ;
40318: LD_ADDR_VAR 0 4
40322: PUSH
40323: LD_VAR 0 1
40327: ST_TO_ADDR
// end ;
40328: LD_VAR 0 4
40332: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40333: LD_INT 0
40335: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40336: LD_ADDR_VAR 0 5
40340: PUSH
40341: LD_VAR 0 1
40345: PPUSH
40346: CALL_OW 250
40350: PPUSH
40351: LD_VAR 0 1
40355: PPUSH
40356: CALL_OW 251
40360: PPUSH
40361: LD_VAR 0 2
40365: PPUSH
40366: LD_VAR 0 3
40370: PPUSH
40371: LD_VAR 0 4
40375: PPUSH
40376: CALL 40386 0 5
40380: ST_TO_ADDR
// end ;
40381: LD_VAR 0 5
40385: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40386: LD_INT 0
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
// if not list then
40392: LD_VAR 0 3
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 40789
// result := [ ] ;
40401: LD_ADDR_VAR 0 6
40405: PUSH
40406: EMPTY
40407: ST_TO_ADDR
// for i in list do
40408: LD_ADDR_VAR 0 7
40412: PUSH
40413: LD_VAR 0 3
40417: PUSH
40418: FOR_IN
40419: IFFALSE 40621
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40421: LD_ADDR_VAR 0 9
40425: PUSH
40426: LD_VAR 0 7
40430: PPUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: LD_VAR 0 2
40440: PPUSH
40441: CALL_OW 297
40445: ST_TO_ADDR
// if not result then
40446: LD_VAR 0 6
40450: NOT
40451: IFFALSE 40477
// result := [ [ i , tmp ] ] else
40453: LD_ADDR_VAR 0 6
40457: PUSH
40458: LD_VAR 0 7
40462: PUSH
40463: LD_VAR 0 9
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: ST_TO_ADDR
40475: GO 40619
// begin if result [ result ] [ 2 ] < tmp then
40477: LD_VAR 0 6
40481: PUSH
40482: LD_VAR 0 6
40486: ARRAY
40487: PUSH
40488: LD_INT 2
40490: ARRAY
40491: PUSH
40492: LD_VAR 0 9
40496: LESS
40497: IFFALSE 40539
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40499: LD_ADDR_VAR 0 6
40503: PUSH
40504: LD_VAR 0 6
40508: PPUSH
40509: LD_VAR 0 6
40513: PUSH
40514: LD_INT 1
40516: PLUS
40517: PPUSH
40518: LD_VAR 0 7
40522: PUSH
40523: LD_VAR 0 9
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PPUSH
40532: CALL_OW 2
40536: ST_TO_ADDR
40537: GO 40619
// for j = 1 to result do
40539: LD_ADDR_VAR 0 8
40543: PUSH
40544: DOUBLE
40545: LD_INT 1
40547: DEC
40548: ST_TO_ADDR
40549: LD_VAR 0 6
40553: PUSH
40554: FOR_TO
40555: IFFALSE 40617
// begin if tmp < result [ j ] [ 2 ] then
40557: LD_VAR 0 9
40561: PUSH
40562: LD_VAR 0 6
40566: PUSH
40567: LD_VAR 0 8
40571: ARRAY
40572: PUSH
40573: LD_INT 2
40575: ARRAY
40576: LESS
40577: IFFALSE 40615
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40579: LD_ADDR_VAR 0 6
40583: PUSH
40584: LD_VAR 0 6
40588: PPUSH
40589: LD_VAR 0 8
40593: PPUSH
40594: LD_VAR 0 7
40598: PUSH
40599: LD_VAR 0 9
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PPUSH
40608: CALL_OW 2
40612: ST_TO_ADDR
// break ;
40613: GO 40617
// end ; end ;
40615: GO 40554
40617: POP
40618: POP
// end ; end ;
40619: GO 40418
40621: POP
40622: POP
// if result and not asc then
40623: LD_VAR 0 6
40627: PUSH
40628: LD_VAR 0 4
40632: NOT
40633: AND
40634: IFFALSE 40709
// begin tmp := result ;
40636: LD_ADDR_VAR 0 9
40640: PUSH
40641: LD_VAR 0 6
40645: ST_TO_ADDR
// for i = tmp downto 1 do
40646: LD_ADDR_VAR 0 7
40650: PUSH
40651: DOUBLE
40652: LD_VAR 0 9
40656: INC
40657: ST_TO_ADDR
40658: LD_INT 1
40660: PUSH
40661: FOR_DOWNTO
40662: IFFALSE 40707
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40664: LD_ADDR_VAR 0 6
40668: PUSH
40669: LD_VAR 0 6
40673: PPUSH
40674: LD_VAR 0 9
40678: PUSH
40679: LD_VAR 0 7
40683: MINUS
40684: PUSH
40685: LD_INT 1
40687: PLUS
40688: PPUSH
40689: LD_VAR 0 9
40693: PUSH
40694: LD_VAR 0 7
40698: ARRAY
40699: PPUSH
40700: CALL_OW 1
40704: ST_TO_ADDR
40705: GO 40661
40707: POP
40708: POP
// end ; tmp := [ ] ;
40709: LD_ADDR_VAR 0 9
40713: PUSH
40714: EMPTY
40715: ST_TO_ADDR
// if mode then
40716: LD_VAR 0 5
40720: IFFALSE 40789
// begin for i = 1 to result do
40722: LD_ADDR_VAR 0 7
40726: PUSH
40727: DOUBLE
40728: LD_INT 1
40730: DEC
40731: ST_TO_ADDR
40732: LD_VAR 0 6
40736: PUSH
40737: FOR_TO
40738: IFFALSE 40777
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40740: LD_ADDR_VAR 0 9
40744: PUSH
40745: LD_VAR 0 9
40749: PPUSH
40750: LD_VAR 0 7
40754: PPUSH
40755: LD_VAR 0 6
40759: PUSH
40760: LD_VAR 0 7
40764: ARRAY
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: PPUSH
40770: CALL_OW 1
40774: ST_TO_ADDR
40775: GO 40737
40777: POP
40778: POP
// result := tmp ;
40779: LD_ADDR_VAR 0 6
40783: PUSH
40784: LD_VAR 0 9
40788: ST_TO_ADDR
// end ; end ;
40789: LD_VAR 0 6
40793: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40794: LD_INT 0
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: ST_TO_ADDR
// if not x or not y then
40824: LD_VAR 0 2
40828: NOT
40829: PUSH
40830: LD_VAR 0 3
40834: NOT
40835: OR
40836: IFFALSE 40840
// exit ;
40838: GO 42490
// if not range then
40840: LD_VAR 0 4
40844: NOT
40845: IFFALSE 40855
// range := 10 ;
40847: LD_ADDR_VAR 0 4
40851: PUSH
40852: LD_INT 10
40854: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40855: LD_ADDR_VAR 0 8
40859: PUSH
40860: LD_INT 81
40862: PUSH
40863: LD_VAR 0 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 92
40874: PUSH
40875: LD_VAR 0 2
40879: PUSH
40880: LD_VAR 0 3
40884: PUSH
40885: LD_VAR 0 4
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: LD_INT 21
40901: PUSH
40902: LD_INT 3
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: PPUSH
40918: CALL_OW 69
40922: ST_TO_ADDR
// if not tmp then
40923: LD_VAR 0 8
40927: NOT
40928: IFFALSE 40932
// exit ;
40930: GO 42490
// for i in tmp do
40932: LD_ADDR_VAR 0 6
40936: PUSH
40937: LD_VAR 0 8
40941: PUSH
40942: FOR_IN
40943: IFFALSE 42465
// begin points := [ 0 , 0 , 0 ] ;
40945: LD_ADDR_VAR 0 9
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
// bpoints := 1 ;
40964: LD_ADDR_VAR 0 10
40968: PUSH
40969: LD_INT 1
40971: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40972: LD_VAR 0 6
40976: PPUSH
40977: CALL_OW 247
40981: PUSH
40982: LD_INT 1
40984: DOUBLE
40985: EQUAL
40986: IFTRUE 40990
40988: GO 41568
40990: POP
// begin if GetClass ( i ) = 1 then
40991: LD_VAR 0 6
40995: PPUSH
40996: CALL_OW 257
41000: PUSH
41001: LD_INT 1
41003: EQUAL
41004: IFFALSE 41025
// points := [ 10 , 5 , 3 ] ;
41006: LD_ADDR_VAR 0 9
41010: PUSH
41011: LD_INT 10
41013: PUSH
41014: LD_INT 5
41016: PUSH
41017: LD_INT 3
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41025: LD_VAR 0 6
41029: PPUSH
41030: CALL_OW 257
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 3
41040: PUSH
41041: LD_INT 4
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: IN
41049: IFFALSE 41070
// points := [ 3 , 2 , 1 ] ;
41051: LD_ADDR_VAR 0 9
41055: PUSH
41056: LD_INT 3
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41070: LD_VAR 0 6
41074: PPUSH
41075: CALL_OW 257
41079: PUSH
41080: LD_INT 5
41082: EQUAL
41083: IFFALSE 41104
// points := [ 130 , 5 , 2 ] ;
41085: LD_ADDR_VAR 0 9
41089: PUSH
41090: LD_INT 130
41092: PUSH
41093: LD_INT 5
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41104: LD_VAR 0 6
41108: PPUSH
41109: CALL_OW 257
41113: PUSH
41114: LD_INT 8
41116: EQUAL
41117: IFFALSE 41138
// points := [ 35 , 35 , 30 ] ;
41119: LD_ADDR_VAR 0 9
41123: PUSH
41124: LD_INT 35
41126: PUSH
41127: LD_INT 35
41129: PUSH
41130: LD_INT 30
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41138: LD_VAR 0 6
41142: PPUSH
41143: CALL_OW 257
41147: PUSH
41148: LD_INT 9
41150: EQUAL
41151: IFFALSE 41172
// points := [ 20 , 55 , 40 ] ;
41153: LD_ADDR_VAR 0 9
41157: PUSH
41158: LD_INT 20
41160: PUSH
41161: LD_INT 55
41163: PUSH
41164: LD_INT 40
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41172: LD_VAR 0 6
41176: PPUSH
41177: CALL_OW 257
41181: PUSH
41182: LD_INT 12
41184: PUSH
41185: LD_INT 16
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: IN
41192: IFFALSE 41213
// points := [ 5 , 3 , 2 ] ;
41194: LD_ADDR_VAR 0 9
41198: PUSH
41199: LD_INT 5
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41213: LD_VAR 0 6
41217: PPUSH
41218: CALL_OW 257
41222: PUSH
41223: LD_INT 17
41225: EQUAL
41226: IFFALSE 41247
// points := [ 100 , 50 , 75 ] ;
41228: LD_ADDR_VAR 0 9
41232: PUSH
41233: LD_INT 100
41235: PUSH
41236: LD_INT 50
41238: PUSH
41239: LD_INT 75
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: LIST
41246: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41247: LD_VAR 0 6
41251: PPUSH
41252: CALL_OW 257
41256: PUSH
41257: LD_INT 15
41259: EQUAL
41260: IFFALSE 41281
// points := [ 10 , 5 , 3 ] ;
41262: LD_ADDR_VAR 0 9
41266: PUSH
41267: LD_INT 10
41269: PUSH
41270: LD_INT 5
41272: PUSH
41273: LD_INT 3
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41281: LD_VAR 0 6
41285: PPUSH
41286: CALL_OW 257
41290: PUSH
41291: LD_INT 14
41293: EQUAL
41294: IFFALSE 41315
// points := [ 10 , 0 , 0 ] ;
41296: LD_ADDR_VAR 0 9
41300: PUSH
41301: LD_INT 10
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41315: LD_VAR 0 6
41319: PPUSH
41320: CALL_OW 257
41324: PUSH
41325: LD_INT 11
41327: EQUAL
41328: IFFALSE 41349
// points := [ 30 , 10 , 5 ] ;
41330: LD_ADDR_VAR 0 9
41334: PUSH
41335: LD_INT 30
41337: PUSH
41338: LD_INT 10
41340: PUSH
41341: LD_INT 5
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41349: LD_VAR 0 1
41353: PPUSH
41354: LD_INT 5
41356: PPUSH
41357: CALL_OW 321
41361: PUSH
41362: LD_INT 2
41364: EQUAL
41365: IFFALSE 41382
// bpoints := bpoints * 1.8 ;
41367: LD_ADDR_VAR 0 10
41371: PUSH
41372: LD_VAR 0 10
41376: PUSH
41377: LD_REAL  1.80000000000000E+0000
41380: MUL
41381: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41382: LD_VAR 0 6
41386: PPUSH
41387: CALL_OW 257
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: LD_INT 3
41400: PUSH
41401: LD_INT 4
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: IN
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: LD_INT 51
41418: PPUSH
41419: CALL_OW 321
41423: PUSH
41424: LD_INT 2
41426: EQUAL
41427: AND
41428: IFFALSE 41445
// bpoints := bpoints * 1.2 ;
41430: LD_ADDR_VAR 0 10
41434: PUSH
41435: LD_VAR 0 10
41439: PUSH
41440: LD_REAL  1.20000000000000E+0000
41443: MUL
41444: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41445: LD_VAR 0 6
41449: PPUSH
41450: CALL_OW 257
41454: PUSH
41455: LD_INT 5
41457: PUSH
41458: LD_INT 7
41460: PUSH
41461: LD_INT 9
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: IN
41469: PUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: LD_INT 52
41477: PPUSH
41478: CALL_OW 321
41482: PUSH
41483: LD_INT 2
41485: EQUAL
41486: AND
41487: IFFALSE 41504
// bpoints := bpoints * 1.5 ;
41489: LD_ADDR_VAR 0 10
41493: PUSH
41494: LD_VAR 0 10
41498: PUSH
41499: LD_REAL  1.50000000000000E+0000
41502: MUL
41503: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41504: LD_VAR 0 1
41508: PPUSH
41509: LD_INT 66
41511: PPUSH
41512: CALL_OW 321
41516: PUSH
41517: LD_INT 2
41519: EQUAL
41520: IFFALSE 41537
// bpoints := bpoints * 1.1 ;
41522: LD_ADDR_VAR 0 10
41526: PUSH
41527: LD_VAR 0 10
41531: PUSH
41532: LD_REAL  1.10000000000000E+0000
41535: MUL
41536: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41537: LD_ADDR_VAR 0 10
41541: PUSH
41542: LD_VAR 0 10
41546: PUSH
41547: LD_VAR 0 6
41551: PPUSH
41552: LD_INT 1
41554: PPUSH
41555: CALL_OW 259
41559: PUSH
41560: LD_REAL  1.15000000000000E+0000
41563: MUL
41564: MUL
41565: ST_TO_ADDR
// end ; unit_vehicle :
41566: GO 42394
41568: LD_INT 2
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41576
41574: GO 42382
41576: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41577: LD_VAR 0 6
41581: PPUSH
41582: CALL_OW 264
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: LD_INT 42
41592: PUSH
41593: LD_INT 24
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: IN
41601: IFFALSE 41622
// points := [ 25 , 5 , 3 ] ;
41603: LD_ADDR_VAR 0 9
41607: PUSH
41608: LD_INT 25
41610: PUSH
41611: LD_INT 5
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41622: LD_VAR 0 6
41626: PPUSH
41627: CALL_OW 264
41631: PUSH
41632: LD_INT 4
41634: PUSH
41635: LD_INT 43
41637: PUSH
41638: LD_INT 25
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: IN
41646: IFFALSE 41667
// points := [ 40 , 15 , 5 ] ;
41648: LD_ADDR_VAR 0 9
41652: PUSH
41653: LD_INT 40
41655: PUSH
41656: LD_INT 15
41658: PUSH
41659: LD_INT 5
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: LIST
41666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41667: LD_VAR 0 6
41671: PPUSH
41672: CALL_OW 264
41676: PUSH
41677: LD_INT 3
41679: PUSH
41680: LD_INT 23
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: IN
41687: IFFALSE 41708
// points := [ 7 , 25 , 8 ] ;
41689: LD_ADDR_VAR 0 9
41693: PUSH
41694: LD_INT 7
41696: PUSH
41697: LD_INT 25
41699: PUSH
41700: LD_INT 8
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41708: LD_VAR 0 6
41712: PPUSH
41713: CALL_OW 264
41717: PUSH
41718: LD_INT 5
41720: PUSH
41721: LD_INT 27
41723: PUSH
41724: LD_INT 44
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: IN
41732: IFFALSE 41753
// points := [ 14 , 50 , 16 ] ;
41734: LD_ADDR_VAR 0 9
41738: PUSH
41739: LD_INT 14
41741: PUSH
41742: LD_INT 50
41744: PUSH
41745: LD_INT 16
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41753: LD_VAR 0 6
41757: PPUSH
41758: CALL_OW 264
41762: PUSH
41763: LD_INT 6
41765: PUSH
41766: LD_INT 46
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: IN
41773: IFFALSE 41794
// points := [ 32 , 120 , 70 ] ;
41775: LD_ADDR_VAR 0 9
41779: PUSH
41780: LD_INT 32
41782: PUSH
41783: LD_INT 120
41785: PUSH
41786: LD_INT 70
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41794: LD_VAR 0 6
41798: PPUSH
41799: CALL_OW 264
41803: PUSH
41804: LD_INT 7
41806: PUSH
41807: LD_INT 28
41809: PUSH
41810: LD_INT 45
41812: PUSH
41813: LD_INT 92
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: IN
41822: IFFALSE 41843
// points := [ 35 , 20 , 45 ] ;
41824: LD_ADDR_VAR 0 9
41828: PUSH
41829: LD_INT 35
41831: PUSH
41832: LD_INT 20
41834: PUSH
41835: LD_INT 45
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: LIST
41842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41843: LD_VAR 0 6
41847: PPUSH
41848: CALL_OW 264
41852: PUSH
41853: LD_INT 47
41855: PUSH
41856: EMPTY
41857: LIST
41858: IN
41859: IFFALSE 41880
// points := [ 67 , 45 , 75 ] ;
41861: LD_ADDR_VAR 0 9
41865: PUSH
41866: LD_INT 67
41868: PUSH
41869: LD_INT 45
41871: PUSH
41872: LD_INT 75
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41880: LD_VAR 0 6
41884: PPUSH
41885: CALL_OW 264
41889: PUSH
41890: LD_INT 26
41892: PUSH
41893: EMPTY
41894: LIST
41895: IN
41896: IFFALSE 41917
// points := [ 120 , 30 , 80 ] ;
41898: LD_ADDR_VAR 0 9
41902: PUSH
41903: LD_INT 120
41905: PUSH
41906: LD_INT 30
41908: PUSH
41909: LD_INT 80
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41917: LD_VAR 0 6
41921: PPUSH
41922: CALL_OW 264
41926: PUSH
41927: LD_INT 22
41929: PUSH
41930: EMPTY
41931: LIST
41932: IN
41933: IFFALSE 41954
// points := [ 40 , 1 , 1 ] ;
41935: LD_ADDR_VAR 0 9
41939: PUSH
41940: LD_INT 40
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41954: LD_VAR 0 6
41958: PPUSH
41959: CALL_OW 264
41963: PUSH
41964: LD_INT 29
41966: PUSH
41967: EMPTY
41968: LIST
41969: IN
41970: IFFALSE 41991
// points := [ 70 , 200 , 400 ] ;
41972: LD_ADDR_VAR 0 9
41976: PUSH
41977: LD_INT 70
41979: PUSH
41980: LD_INT 200
41982: PUSH
41983: LD_INT 400
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41991: LD_VAR 0 6
41995: PPUSH
41996: CALL_OW 264
42000: PUSH
42001: LD_INT 14
42003: PUSH
42004: LD_INT 53
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: IN
42011: IFFALSE 42032
// points := [ 40 , 10 , 20 ] ;
42013: LD_ADDR_VAR 0 9
42017: PUSH
42018: LD_INT 40
42020: PUSH
42021: LD_INT 10
42023: PUSH
42024: LD_INT 20
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42032: LD_VAR 0 6
42036: PPUSH
42037: CALL_OW 264
42041: PUSH
42042: LD_INT 9
42044: PUSH
42045: EMPTY
42046: LIST
42047: IN
42048: IFFALSE 42069
// points := [ 5 , 70 , 20 ] ;
42050: LD_ADDR_VAR 0 9
42054: PUSH
42055: LD_INT 5
42057: PUSH
42058: LD_INT 70
42060: PUSH
42061: LD_INT 20
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42069: LD_VAR 0 6
42073: PPUSH
42074: CALL_OW 264
42078: PUSH
42079: LD_INT 10
42081: PUSH
42082: EMPTY
42083: LIST
42084: IN
42085: IFFALSE 42106
// points := [ 35 , 110 , 70 ] ;
42087: LD_ADDR_VAR 0 9
42091: PUSH
42092: LD_INT 35
42094: PUSH
42095: LD_INT 110
42097: PUSH
42098: LD_INT 70
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42106: LD_VAR 0 6
42110: PPUSH
42111: CALL_OW 265
42115: PUSH
42116: LD_INT 25
42118: EQUAL
42119: IFFALSE 42140
// points := [ 80 , 65 , 100 ] ;
42121: LD_ADDR_VAR 0 9
42125: PUSH
42126: LD_INT 80
42128: PUSH
42129: LD_INT 65
42131: PUSH
42132: LD_INT 100
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42140: LD_VAR 0 6
42144: PPUSH
42145: CALL_OW 263
42149: PUSH
42150: LD_INT 1
42152: EQUAL
42153: IFFALSE 42188
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42155: LD_ADDR_VAR 0 10
42159: PUSH
42160: LD_VAR 0 10
42164: PUSH
42165: LD_VAR 0 6
42169: PPUSH
42170: CALL_OW 311
42174: PPUSH
42175: LD_INT 3
42177: PPUSH
42178: CALL_OW 259
42182: PUSH
42183: LD_INT 4
42185: MUL
42186: MUL
42187: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42188: LD_VAR 0 6
42192: PPUSH
42193: CALL_OW 263
42197: PUSH
42198: LD_INT 2
42200: EQUAL
42201: IFFALSE 42252
// begin j := IsControledBy ( i ) ;
42203: LD_ADDR_VAR 0 7
42207: PUSH
42208: LD_VAR 0 6
42212: PPUSH
42213: CALL_OW 312
42217: ST_TO_ADDR
// if j then
42218: LD_VAR 0 7
42222: IFFALSE 42252
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42224: LD_ADDR_VAR 0 10
42228: PUSH
42229: LD_VAR 0 10
42233: PUSH
42234: LD_VAR 0 7
42238: PPUSH
42239: LD_INT 3
42241: PPUSH
42242: CALL_OW 259
42246: PUSH
42247: LD_INT 3
42249: MUL
42250: MUL
42251: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42252: LD_VAR 0 6
42256: PPUSH
42257: CALL_OW 264
42261: PUSH
42262: LD_INT 5
42264: PUSH
42265: LD_INT 6
42267: PUSH
42268: LD_INT 46
42270: PUSH
42271: LD_INT 44
42273: PUSH
42274: LD_INT 47
42276: PUSH
42277: LD_INT 45
42279: PUSH
42280: LD_INT 28
42282: PUSH
42283: LD_INT 7
42285: PUSH
42286: LD_INT 27
42288: PUSH
42289: LD_INT 29
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: IN
42304: PUSH
42305: LD_VAR 0 1
42309: PPUSH
42310: LD_INT 52
42312: PPUSH
42313: CALL_OW 321
42317: PUSH
42318: LD_INT 2
42320: EQUAL
42321: AND
42322: IFFALSE 42339
// bpoints := bpoints * 1.2 ;
42324: LD_ADDR_VAR 0 10
42328: PUSH
42329: LD_VAR 0 10
42333: PUSH
42334: LD_REAL  1.20000000000000E+0000
42337: MUL
42338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42339: LD_VAR 0 6
42343: PPUSH
42344: CALL_OW 264
42348: PUSH
42349: LD_INT 6
42351: PUSH
42352: LD_INT 46
42354: PUSH
42355: LD_INT 47
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: IN
42363: IFFALSE 42380
// bpoints := bpoints * 1.2 ;
42365: LD_ADDR_VAR 0 10
42369: PUSH
42370: LD_VAR 0 10
42374: PUSH
42375: LD_REAL  1.20000000000000E+0000
42378: MUL
42379: ST_TO_ADDR
// end ; unit_building :
42380: GO 42394
42382: LD_INT 3
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42393
42390: POP
// ; end ;
42391: GO 42394
42393: POP
// for j = 1 to 3 do
42394: LD_ADDR_VAR 0 7
42398: PUSH
42399: DOUBLE
42400: LD_INT 1
42402: DEC
42403: ST_TO_ADDR
42404: LD_INT 3
42406: PUSH
42407: FOR_TO
42408: IFFALSE 42461
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42410: LD_ADDR_VAR 0 5
42414: PUSH
42415: LD_VAR 0 5
42419: PPUSH
42420: LD_VAR 0 7
42424: PPUSH
42425: LD_VAR 0 5
42429: PUSH
42430: LD_VAR 0 7
42434: ARRAY
42435: PUSH
42436: LD_VAR 0 9
42440: PUSH
42441: LD_VAR 0 7
42445: ARRAY
42446: PUSH
42447: LD_VAR 0 10
42451: MUL
42452: PLUS
42453: PPUSH
42454: CALL_OW 1
42458: ST_TO_ADDR
42459: GO 42407
42461: POP
42462: POP
// end ;
42463: GO 40942
42465: POP
42466: POP
// result := Replace ( result , 4 , tmp ) ;
42467: LD_ADDR_VAR 0 5
42471: PUSH
42472: LD_VAR 0 5
42476: PPUSH
42477: LD_INT 4
42479: PPUSH
42480: LD_VAR 0 8
42484: PPUSH
42485: CALL_OW 1
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 5
42494: RET
// export function DangerAtRange ( unit , range ) ; begin
42495: LD_INT 0
42497: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: CALL_OW 255
42512: PPUSH
42513: LD_VAR 0 1
42517: PPUSH
42518: CALL_OW 250
42522: PPUSH
42523: LD_VAR 0 1
42527: PPUSH
42528: CALL_OW 251
42532: PPUSH
42533: LD_VAR 0 2
42537: PPUSH
42538: CALL 40794 0 4
42542: ST_TO_ADDR
// end ;
42543: LD_VAR 0 3
42547: RET
// export function DangerInArea ( side , area ) ; begin
42548: LD_INT 0
42550: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42551: LD_ADDR_VAR 0 3
42555: PUSH
42556: LD_VAR 0 2
42560: PPUSH
42561: LD_INT 81
42563: PUSH
42564: LD_VAR 0 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PPUSH
42573: CALL_OW 70
42577: ST_TO_ADDR
// end ;
42578: LD_VAR 0 3
42582: RET
// export function IsExtension ( b ) ; begin
42583: LD_INT 0
42585: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42586: LD_ADDR_VAR 0 2
42590: PUSH
42591: LD_VAR 0 1
42595: PUSH
42596: LD_INT 23
42598: PUSH
42599: LD_INT 20
42601: PUSH
42602: LD_INT 22
42604: PUSH
42605: LD_INT 17
42607: PUSH
42608: LD_INT 24
42610: PUSH
42611: LD_INT 21
42613: PUSH
42614: LD_INT 19
42616: PUSH
42617: LD_INT 16
42619: PUSH
42620: LD_INT 25
42622: PUSH
42623: LD_INT 18
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: IN
42638: ST_TO_ADDR
// end ;
42639: LD_VAR 0 2
42643: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42644: LD_INT 0
42646: PPUSH
42647: PPUSH
42648: PPUSH
// result := [ ] ;
42649: LD_ADDR_VAR 0 4
42653: PUSH
42654: EMPTY
42655: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42656: LD_ADDR_VAR 0 5
42660: PUSH
42661: LD_VAR 0 2
42665: PPUSH
42666: LD_INT 21
42668: PUSH
42669: LD_INT 3
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PPUSH
42676: CALL_OW 70
42680: ST_TO_ADDR
// if not tmp then
42681: LD_VAR 0 5
42685: NOT
42686: IFFALSE 42690
// exit ;
42688: GO 42754
// if checkLink then
42690: LD_VAR 0 3
42694: IFFALSE 42744
// begin for i in tmp do
42696: LD_ADDR_VAR 0 6
42700: PUSH
42701: LD_VAR 0 5
42705: PUSH
42706: FOR_IN
42707: IFFALSE 42742
// if GetBase ( i ) <> base then
42709: LD_VAR 0 6
42713: PPUSH
42714: CALL_OW 274
42718: PUSH
42719: LD_VAR 0 1
42723: NONEQUAL
42724: IFFALSE 42740
// ComLinkToBase ( base , i ) ;
42726: LD_VAR 0 1
42730: PPUSH
42731: LD_VAR 0 6
42735: PPUSH
42736: CALL_OW 169
42740: GO 42706
42742: POP
42743: POP
// end ; result := tmp ;
42744: LD_ADDR_VAR 0 4
42748: PUSH
42749: LD_VAR 0 5
42753: ST_TO_ADDR
// end ;
42754: LD_VAR 0 4
42758: RET
// export function ComComplete ( units , b ) ; var i ; begin
42759: LD_INT 0
42761: PPUSH
42762: PPUSH
// if not units then
42763: LD_VAR 0 1
42767: NOT
42768: IFFALSE 42772
// exit ;
42770: GO 42862
// for i in units do
42772: LD_ADDR_VAR 0 4
42776: PUSH
42777: LD_VAR 0 1
42781: PUSH
42782: FOR_IN
42783: IFFALSE 42860
// if BuildingStatus ( b ) = bs_build then
42785: LD_VAR 0 2
42789: PPUSH
42790: CALL_OW 461
42794: PUSH
42795: LD_INT 1
42797: EQUAL
42798: IFFALSE 42858
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42800: LD_VAR 0 4
42804: PPUSH
42805: LD_STRING h
42807: PUSH
42808: LD_VAR 0 2
42812: PPUSH
42813: CALL_OW 250
42817: PUSH
42818: LD_VAR 0 2
42822: PPUSH
42823: CALL_OW 251
42827: PUSH
42828: LD_VAR 0 2
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: PPUSH
42854: CALL_OW 446
42858: GO 42782
42860: POP
42861: POP
// end ;
42862: LD_VAR 0 3
42866: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42867: LD_INT 0
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42875: LD_VAR 0 1
42879: NOT
42880: PUSH
42881: LD_VAR 0 1
42885: PPUSH
42886: CALL_OW 263
42890: PUSH
42891: LD_INT 2
42893: NONEQUAL
42894: OR
42895: IFFALSE 42899
// exit ;
42897: GO 43215
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42899: LD_ADDR_VAR 0 6
42903: PUSH
42904: LD_INT 22
42906: PUSH
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 255
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: LD_INT 30
42926: PUSH
42927: LD_INT 36
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 34
42936: PUSH
42937: LD_INT 31
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PPUSH
42953: CALL_OW 69
42957: ST_TO_ADDR
// if not tmp then
42958: LD_VAR 0 6
42962: NOT
42963: IFFALSE 42967
// exit ;
42965: GO 43215
// result := [ ] ;
42967: LD_ADDR_VAR 0 2
42971: PUSH
42972: EMPTY
42973: ST_TO_ADDR
// for i in tmp do
42974: LD_ADDR_VAR 0 3
42978: PUSH
42979: LD_VAR 0 6
42983: PUSH
42984: FOR_IN
42985: IFFALSE 43056
// begin t := UnitsInside ( i ) ;
42987: LD_ADDR_VAR 0 4
42991: PUSH
42992: LD_VAR 0 3
42996: PPUSH
42997: CALL_OW 313
43001: ST_TO_ADDR
// if t then
43002: LD_VAR 0 4
43006: IFFALSE 43054
// for j in t do
43008: LD_ADDR_VAR 0 7
43012: PUSH
43013: LD_VAR 0 4
43017: PUSH
43018: FOR_IN
43019: IFFALSE 43052
// result := Replace ( result , result + 1 , j ) ;
43021: LD_ADDR_VAR 0 2
43025: PUSH
43026: LD_VAR 0 2
43030: PPUSH
43031: LD_VAR 0 2
43035: PUSH
43036: LD_INT 1
43038: PLUS
43039: PPUSH
43040: LD_VAR 0 7
43044: PPUSH
43045: CALL_OW 1
43049: ST_TO_ADDR
43050: GO 43018
43052: POP
43053: POP
// end ;
43054: GO 42984
43056: POP
43057: POP
// if not result then
43058: LD_VAR 0 2
43062: NOT
43063: IFFALSE 43067
// exit ;
43065: GO 43215
// mech := result [ 1 ] ;
43067: LD_ADDR_VAR 0 5
43071: PUSH
43072: LD_VAR 0 2
43076: PUSH
43077: LD_INT 1
43079: ARRAY
43080: ST_TO_ADDR
// if result > 1 then
43081: LD_VAR 0 2
43085: PUSH
43086: LD_INT 1
43088: GREATER
43089: IFFALSE 43201
// begin for i = 2 to result do
43091: LD_ADDR_VAR 0 3
43095: PUSH
43096: DOUBLE
43097: LD_INT 2
43099: DEC
43100: ST_TO_ADDR
43101: LD_VAR 0 2
43105: PUSH
43106: FOR_TO
43107: IFFALSE 43199
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43109: LD_ADDR_VAR 0 4
43113: PUSH
43114: LD_VAR 0 2
43118: PUSH
43119: LD_VAR 0 3
43123: ARRAY
43124: PPUSH
43125: LD_INT 3
43127: PPUSH
43128: CALL_OW 259
43132: PUSH
43133: LD_VAR 0 2
43137: PUSH
43138: LD_VAR 0 3
43142: ARRAY
43143: PPUSH
43144: CALL_OW 432
43148: MINUS
43149: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43150: LD_VAR 0 4
43154: PUSH
43155: LD_VAR 0 5
43159: PPUSH
43160: LD_INT 3
43162: PPUSH
43163: CALL_OW 259
43167: PUSH
43168: LD_VAR 0 5
43172: PPUSH
43173: CALL_OW 432
43177: MINUS
43178: GREATEREQUAL
43179: IFFALSE 43197
// mech := result [ i ] ;
43181: LD_ADDR_VAR 0 5
43185: PUSH
43186: LD_VAR 0 2
43190: PUSH
43191: LD_VAR 0 3
43195: ARRAY
43196: ST_TO_ADDR
// end ;
43197: GO 43106
43199: POP
43200: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43201: LD_VAR 0 1
43205: PPUSH
43206: LD_VAR 0 5
43210: PPUSH
43211: CALL_OW 135
// end ;
43215: LD_VAR 0 2
43219: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43220: LD_INT 0
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
// result := [ ] ;
43235: LD_ADDR_VAR 0 7
43239: PUSH
43240: EMPTY
43241: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 266
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: IN
43262: NOT
43263: IFFALSE 43267
// exit ;
43265: GO 44901
// if name then
43267: LD_VAR 0 3
43271: IFFALSE 43287
// SetBName ( base_dep , name ) ;
43273: LD_VAR 0 1
43277: PPUSH
43278: LD_VAR 0 3
43282: PPUSH
43283: CALL_OW 500
// base := GetBase ( base_dep ) ;
43287: LD_ADDR_VAR 0 15
43291: PUSH
43292: LD_VAR 0 1
43296: PPUSH
43297: CALL_OW 274
43301: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43302: LD_ADDR_VAR 0 16
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 255
43316: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43317: LD_ADDR_VAR 0 17
43321: PUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: CALL_OW 248
43331: ST_TO_ADDR
// if sources then
43332: LD_VAR 0 5
43336: IFFALSE 43383
// for i = 1 to 3 do
43338: LD_ADDR_VAR 0 8
43342: PUSH
43343: DOUBLE
43344: LD_INT 1
43346: DEC
43347: ST_TO_ADDR
43348: LD_INT 3
43350: PUSH
43351: FOR_TO
43352: IFFALSE 43381
// AddResourceType ( base , i , sources [ i ] ) ;
43354: LD_VAR 0 15
43358: PPUSH
43359: LD_VAR 0 8
43363: PPUSH
43364: LD_VAR 0 5
43368: PUSH
43369: LD_VAR 0 8
43373: ARRAY
43374: PPUSH
43375: CALL_OW 276
43379: GO 43351
43381: POP
43382: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43383: LD_ADDR_VAR 0 18
43387: PUSH
43388: LD_VAR 0 15
43392: PPUSH
43393: LD_VAR 0 2
43397: PPUSH
43398: LD_INT 1
43400: PPUSH
43401: CALL 42644 0 3
43405: ST_TO_ADDR
// InitHc ;
43406: CALL_OW 19
// InitUc ;
43410: CALL_OW 18
// uc_side := side ;
43414: LD_ADDR_OWVAR 20
43418: PUSH
43419: LD_VAR 0 16
43423: ST_TO_ADDR
// uc_nation := nation ;
43424: LD_ADDR_OWVAR 21
43428: PUSH
43429: LD_VAR 0 17
43433: ST_TO_ADDR
// if buildings then
43434: LD_VAR 0 18
43438: IFFALSE 44760
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43440: LD_ADDR_VAR 0 19
43444: PUSH
43445: LD_VAR 0 18
43449: PPUSH
43450: LD_INT 2
43452: PUSH
43453: LD_INT 30
43455: PUSH
43456: LD_INT 29
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 30
43465: PUSH
43466: LD_INT 30
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: PPUSH
43478: CALL_OW 72
43482: ST_TO_ADDR
// if tmp then
43483: LD_VAR 0 19
43487: IFFALSE 43535
// for i in tmp do
43489: LD_ADDR_VAR 0 8
43493: PUSH
43494: LD_VAR 0 19
43498: PUSH
43499: FOR_IN
43500: IFFALSE 43533
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43502: LD_VAR 0 8
43506: PPUSH
43507: CALL_OW 250
43511: PPUSH
43512: LD_VAR 0 8
43516: PPUSH
43517: CALL_OW 251
43521: PPUSH
43522: LD_VAR 0 16
43526: PPUSH
43527: CALL_OW 441
43531: GO 43499
43533: POP
43534: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43535: LD_VAR 0 18
43539: PPUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 30
43545: PUSH
43546: LD_INT 32
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 30
43555: PUSH
43556: LD_INT 33
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: PPUSH
43568: CALL_OW 72
43572: IFFALSE 43660
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43574: LD_ADDR_VAR 0 8
43578: PUSH
43579: LD_VAR 0 18
43583: PPUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 30
43589: PUSH
43590: LD_INT 32
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 30
43599: PUSH
43600: LD_INT 33
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: LIST
43611: PPUSH
43612: CALL_OW 72
43616: PUSH
43617: FOR_IN
43618: IFFALSE 43658
// begin if not GetBWeapon ( i ) then
43620: LD_VAR 0 8
43624: PPUSH
43625: CALL_OW 269
43629: NOT
43630: IFFALSE 43656
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43632: LD_VAR 0 8
43636: PPUSH
43637: LD_VAR 0 8
43641: PPUSH
43642: LD_VAR 0 2
43646: PPUSH
43647: CALL 44906 0 2
43651: PPUSH
43652: CALL_OW 431
// end ;
43656: GO 43617
43658: POP
43659: POP
// end ; for i = 1 to personel do
43660: LD_ADDR_VAR 0 8
43664: PUSH
43665: DOUBLE
43666: LD_INT 1
43668: DEC
43669: ST_TO_ADDR
43670: LD_VAR 0 6
43674: PUSH
43675: FOR_TO
43676: IFFALSE 44740
// begin if i > 4 then
43678: LD_VAR 0 8
43682: PUSH
43683: LD_INT 4
43685: GREATER
43686: IFFALSE 43690
// break ;
43688: GO 44740
// case i of 1 :
43690: LD_VAR 0 8
43694: PUSH
43695: LD_INT 1
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43703
43701: GO 43783
43703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43704: LD_ADDR_VAR 0 12
43708: PUSH
43709: LD_VAR 0 18
43713: PPUSH
43714: LD_INT 22
43716: PUSH
43717: LD_VAR 0 16
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 58
43728: PUSH
43729: EMPTY
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 30
43737: PUSH
43738: LD_INT 32
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 30
43747: PUSH
43748: LD_INT 4
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 30
43757: PUSH
43758: LD_INT 5
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: PPUSH
43776: CALL_OW 72
43780: ST_TO_ADDR
43781: GO 44005
43783: LD_INT 2
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43791
43789: GO 43853
43791: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43792: LD_ADDR_VAR 0 12
43796: PUSH
43797: LD_VAR 0 18
43801: PPUSH
43802: LD_INT 22
43804: PUSH
43805: LD_VAR 0 16
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 30
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 30
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PPUSH
43846: CALL_OW 72
43850: ST_TO_ADDR
43851: GO 44005
43853: LD_INT 3
43855: DOUBLE
43856: EQUAL
43857: IFTRUE 43861
43859: GO 43923
43861: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43862: LD_ADDR_VAR 0 12
43866: PUSH
43867: LD_VAR 0 18
43871: PPUSH
43872: LD_INT 22
43874: PUSH
43875: LD_VAR 0 16
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 30
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 30
43899: PUSH
43900: LD_INT 3
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PPUSH
43916: CALL_OW 72
43920: ST_TO_ADDR
43921: GO 44005
43923: LD_INT 4
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43931
43929: GO 44004
43931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43932: LD_ADDR_VAR 0 12
43936: PUSH
43937: LD_VAR 0 18
43941: PPUSH
43942: LD_INT 22
43944: PUSH
43945: LD_VAR 0 16
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 30
43959: PUSH
43960: LD_INT 6
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 30
43969: PUSH
43970: LD_INT 7
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 30
43979: PUSH
43980: LD_INT 8
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PPUSH
43997: CALL_OW 72
44001: ST_TO_ADDR
44002: GO 44005
44004: POP
// if i = 1 then
44005: LD_VAR 0 8
44009: PUSH
44010: LD_INT 1
44012: EQUAL
44013: IFFALSE 44124
// begin tmp := [ ] ;
44015: LD_ADDR_VAR 0 19
44019: PUSH
44020: EMPTY
44021: ST_TO_ADDR
// for j in f do
44022: LD_ADDR_VAR 0 9
44026: PUSH
44027: LD_VAR 0 12
44031: PUSH
44032: FOR_IN
44033: IFFALSE 44106
// if GetBType ( j ) = b_bunker then
44035: LD_VAR 0 9
44039: PPUSH
44040: CALL_OW 266
44044: PUSH
44045: LD_INT 32
44047: EQUAL
44048: IFFALSE 44075
// tmp := Insert ( tmp , 1 , j ) else
44050: LD_ADDR_VAR 0 19
44054: PUSH
44055: LD_VAR 0 19
44059: PPUSH
44060: LD_INT 1
44062: PPUSH
44063: LD_VAR 0 9
44067: PPUSH
44068: CALL_OW 2
44072: ST_TO_ADDR
44073: GO 44104
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44075: LD_ADDR_VAR 0 19
44079: PUSH
44080: LD_VAR 0 19
44084: PPUSH
44085: LD_VAR 0 19
44089: PUSH
44090: LD_INT 1
44092: PLUS
44093: PPUSH
44094: LD_VAR 0 9
44098: PPUSH
44099: CALL_OW 2
44103: ST_TO_ADDR
44104: GO 44032
44106: POP
44107: POP
// if tmp then
44108: LD_VAR 0 19
44112: IFFALSE 44124
// f := tmp ;
44114: LD_ADDR_VAR 0 12
44118: PUSH
44119: LD_VAR 0 19
44123: ST_TO_ADDR
// end ; x := personel [ i ] ;
44124: LD_ADDR_VAR 0 13
44128: PUSH
44129: LD_VAR 0 6
44133: PUSH
44134: LD_VAR 0 8
44138: ARRAY
44139: ST_TO_ADDR
// if x = - 1 then
44140: LD_VAR 0 13
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: EQUAL
44149: IFFALSE 44358
// begin for j in f do
44151: LD_ADDR_VAR 0 9
44155: PUSH
44156: LD_VAR 0 12
44160: PUSH
44161: FOR_IN
44162: IFFALSE 44354
// repeat InitHc ;
44164: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44168: LD_VAR 0 9
44172: PPUSH
44173: CALL_OW 266
44177: PUSH
44178: LD_INT 5
44180: EQUAL
44181: IFFALSE 44251
// begin if UnitsInside ( j ) < 3 then
44183: LD_VAR 0 9
44187: PPUSH
44188: CALL_OW 313
44192: PUSH
44193: LD_INT 3
44195: LESS
44196: IFFALSE 44232
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44198: LD_INT 0
44200: PPUSH
44201: LD_INT 5
44203: PUSH
44204: LD_INT 8
44206: PUSH
44207: LD_INT 9
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: PUSH
44215: LD_VAR 0 17
44219: ARRAY
44220: PPUSH
44221: LD_VAR 0 4
44225: PPUSH
44226: CALL_OW 380
44230: GO 44249
// PrepareHuman ( false , i , skill ) ;
44232: LD_INT 0
44234: PPUSH
44235: LD_VAR 0 8
44239: PPUSH
44240: LD_VAR 0 4
44244: PPUSH
44245: CALL_OW 380
// end else
44249: GO 44268
// PrepareHuman ( false , i , skill ) ;
44251: LD_INT 0
44253: PPUSH
44254: LD_VAR 0 8
44258: PPUSH
44259: LD_VAR 0 4
44263: PPUSH
44264: CALL_OW 380
// un := CreateHuman ;
44268: LD_ADDR_VAR 0 14
44272: PUSH
44273: CALL_OW 44
44277: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44278: LD_ADDR_VAR 0 7
44282: PUSH
44283: LD_VAR 0 7
44287: PPUSH
44288: LD_INT 1
44290: PPUSH
44291: LD_VAR 0 14
44295: PPUSH
44296: CALL_OW 2
44300: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44301: LD_VAR 0 14
44305: PPUSH
44306: LD_VAR 0 9
44310: PPUSH
44311: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44315: LD_VAR 0 9
44319: PPUSH
44320: CALL_OW 313
44324: PUSH
44325: LD_INT 6
44327: EQUAL
44328: PUSH
44329: LD_VAR 0 9
44333: PPUSH
44334: CALL_OW 266
44338: PUSH
44339: LD_INT 32
44341: PUSH
44342: LD_INT 31
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: IN
44349: OR
44350: IFFALSE 44164
44352: GO 44161
44354: POP
44355: POP
// end else
44356: GO 44738
// for j = 1 to x do
44358: LD_ADDR_VAR 0 9
44362: PUSH
44363: DOUBLE
44364: LD_INT 1
44366: DEC
44367: ST_TO_ADDR
44368: LD_VAR 0 13
44372: PUSH
44373: FOR_TO
44374: IFFALSE 44736
// begin InitHc ;
44376: CALL_OW 19
// if not f then
44380: LD_VAR 0 12
44384: NOT
44385: IFFALSE 44474
// begin PrepareHuman ( false , i , skill ) ;
44387: LD_INT 0
44389: PPUSH
44390: LD_VAR 0 8
44394: PPUSH
44395: LD_VAR 0 4
44399: PPUSH
44400: CALL_OW 380
// un := CreateHuman ;
44404: LD_ADDR_VAR 0 14
44408: PUSH
44409: CALL_OW 44
44413: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44414: LD_ADDR_VAR 0 7
44418: PUSH
44419: LD_VAR 0 7
44423: PPUSH
44424: LD_INT 1
44426: PPUSH
44427: LD_VAR 0 14
44431: PPUSH
44432: CALL_OW 2
44436: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44437: LD_VAR 0 14
44441: PPUSH
44442: LD_VAR 0 1
44446: PPUSH
44447: CALL_OW 250
44451: PPUSH
44452: LD_VAR 0 1
44456: PPUSH
44457: CALL_OW 251
44461: PPUSH
44462: LD_INT 10
44464: PPUSH
44465: LD_INT 0
44467: PPUSH
44468: CALL_OW 50
// continue ;
44472: GO 44373
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44474: LD_VAR 0 12
44478: PUSH
44479: LD_INT 1
44481: ARRAY
44482: PPUSH
44483: CALL_OW 313
44487: PUSH
44488: LD_VAR 0 12
44492: PUSH
44493: LD_INT 1
44495: ARRAY
44496: PPUSH
44497: CALL_OW 266
44501: PUSH
44502: LD_INT 32
44504: PUSH
44505: LD_INT 31
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: IN
44512: AND
44513: PUSH
44514: LD_VAR 0 12
44518: PUSH
44519: LD_INT 1
44521: ARRAY
44522: PPUSH
44523: CALL_OW 313
44527: PUSH
44528: LD_INT 6
44530: EQUAL
44531: OR
44532: IFFALSE 44552
// f := Delete ( f , 1 ) ;
44534: LD_ADDR_VAR 0 12
44538: PUSH
44539: LD_VAR 0 12
44543: PPUSH
44544: LD_INT 1
44546: PPUSH
44547: CALL_OW 3
44551: ST_TO_ADDR
// if not f then
44552: LD_VAR 0 12
44556: NOT
44557: IFFALSE 44575
// begin x := x + 2 ;
44559: LD_ADDR_VAR 0 13
44563: PUSH
44564: LD_VAR 0 13
44568: PUSH
44569: LD_INT 2
44571: PLUS
44572: ST_TO_ADDR
// continue ;
44573: GO 44373
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44575: LD_VAR 0 12
44579: PUSH
44580: LD_INT 1
44582: ARRAY
44583: PPUSH
44584: CALL_OW 266
44588: PUSH
44589: LD_INT 5
44591: EQUAL
44592: IFFALSE 44666
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44594: LD_VAR 0 12
44598: PUSH
44599: LD_INT 1
44601: ARRAY
44602: PPUSH
44603: CALL_OW 313
44607: PUSH
44608: LD_INT 3
44610: LESS
44611: IFFALSE 44647
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44613: LD_INT 0
44615: PPUSH
44616: LD_INT 5
44618: PUSH
44619: LD_INT 8
44621: PUSH
44622: LD_INT 9
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: LIST
44629: PUSH
44630: LD_VAR 0 17
44634: ARRAY
44635: PPUSH
44636: LD_VAR 0 4
44640: PPUSH
44641: CALL_OW 380
44645: GO 44664
// PrepareHuman ( false , i , skill ) ;
44647: LD_INT 0
44649: PPUSH
44650: LD_VAR 0 8
44654: PPUSH
44655: LD_VAR 0 4
44659: PPUSH
44660: CALL_OW 380
// end else
44664: GO 44683
// PrepareHuman ( false , i , skill ) ;
44666: LD_INT 0
44668: PPUSH
44669: LD_VAR 0 8
44673: PPUSH
44674: LD_VAR 0 4
44678: PPUSH
44679: CALL_OW 380
// un := CreateHuman ;
44683: LD_ADDR_VAR 0 14
44687: PUSH
44688: CALL_OW 44
44692: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44693: LD_ADDR_VAR 0 7
44697: PUSH
44698: LD_VAR 0 7
44702: PPUSH
44703: LD_INT 1
44705: PPUSH
44706: LD_VAR 0 14
44710: PPUSH
44711: CALL_OW 2
44715: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44716: LD_VAR 0 14
44720: PPUSH
44721: LD_VAR 0 12
44725: PUSH
44726: LD_INT 1
44728: ARRAY
44729: PPUSH
44730: CALL_OW 52
// end ;
44734: GO 44373
44736: POP
44737: POP
// end ;
44738: GO 43675
44740: POP
44741: POP
// result := result ^ buildings ;
44742: LD_ADDR_VAR 0 7
44746: PUSH
44747: LD_VAR 0 7
44751: PUSH
44752: LD_VAR 0 18
44756: ADD
44757: ST_TO_ADDR
// end else
44758: GO 44901
// begin for i = 1 to personel do
44760: LD_ADDR_VAR 0 8
44764: PUSH
44765: DOUBLE
44766: LD_INT 1
44768: DEC
44769: ST_TO_ADDR
44770: LD_VAR 0 6
44774: PUSH
44775: FOR_TO
44776: IFFALSE 44899
// begin if i > 4 then
44778: LD_VAR 0 8
44782: PUSH
44783: LD_INT 4
44785: GREATER
44786: IFFALSE 44790
// break ;
44788: GO 44899
// x := personel [ i ] ;
44790: LD_ADDR_VAR 0 13
44794: PUSH
44795: LD_VAR 0 6
44799: PUSH
44800: LD_VAR 0 8
44804: ARRAY
44805: ST_TO_ADDR
// if x = - 1 then
44806: LD_VAR 0 13
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: EQUAL
44815: IFFALSE 44819
// continue ;
44817: GO 44775
// PrepareHuman ( false , i , skill ) ;
44819: LD_INT 0
44821: PPUSH
44822: LD_VAR 0 8
44826: PPUSH
44827: LD_VAR 0 4
44831: PPUSH
44832: CALL_OW 380
// un := CreateHuman ;
44836: LD_ADDR_VAR 0 14
44840: PUSH
44841: CALL_OW 44
44845: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44846: LD_VAR 0 14
44850: PPUSH
44851: LD_VAR 0 1
44855: PPUSH
44856: CALL_OW 250
44860: PPUSH
44861: LD_VAR 0 1
44865: PPUSH
44866: CALL_OW 251
44870: PPUSH
44871: LD_INT 10
44873: PPUSH
44874: LD_INT 0
44876: PPUSH
44877: CALL_OW 50
// result := result ^ un ;
44881: LD_ADDR_VAR 0 7
44885: PUSH
44886: LD_VAR 0 7
44890: PUSH
44891: LD_VAR 0 14
44895: ADD
44896: ST_TO_ADDR
// end ;
44897: GO 44775
44899: POP
44900: POP
// end ; end ;
44901: LD_VAR 0 7
44905: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44906: LD_INT 0
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
44923: PPUSH
// result := false ;
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_INT 0
44931: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44932: LD_VAR 0 1
44936: NOT
44937: PUSH
44938: LD_VAR 0 1
44942: PPUSH
44943: CALL_OW 266
44947: PUSH
44948: LD_INT 32
44950: PUSH
44951: LD_INT 33
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: IN
44958: NOT
44959: OR
44960: IFFALSE 44964
// exit ;
44962: GO 46073
// nat := GetNation ( tower ) ;
44964: LD_ADDR_VAR 0 12
44968: PUSH
44969: LD_VAR 0 1
44973: PPUSH
44974: CALL_OW 248
44978: ST_TO_ADDR
// side := GetSide ( tower ) ;
44979: LD_ADDR_VAR 0 16
44983: PUSH
44984: LD_VAR 0 1
44988: PPUSH
44989: CALL_OW 255
44993: ST_TO_ADDR
// x := GetX ( tower ) ;
44994: LD_ADDR_VAR 0 10
44998: PUSH
44999: LD_VAR 0 1
45003: PPUSH
45004: CALL_OW 250
45008: ST_TO_ADDR
// y := GetY ( tower ) ;
45009: LD_ADDR_VAR 0 11
45013: PUSH
45014: LD_VAR 0 1
45018: PPUSH
45019: CALL_OW 251
45023: ST_TO_ADDR
// if not x or not y then
45024: LD_VAR 0 10
45028: NOT
45029: PUSH
45030: LD_VAR 0 11
45034: NOT
45035: OR
45036: IFFALSE 45040
// exit ;
45038: GO 46073
// weapon := 0 ;
45040: LD_ADDR_VAR 0 18
45044: PUSH
45045: LD_INT 0
45047: ST_TO_ADDR
// fac_list := [ ] ;
45048: LD_ADDR_VAR 0 17
45052: PUSH
45053: EMPTY
45054: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45055: LD_ADDR_VAR 0 6
45059: PUSH
45060: LD_VAR 0 1
45064: PPUSH
45065: CALL_OW 274
45069: PPUSH
45070: LD_VAR 0 2
45074: PPUSH
45075: LD_INT 0
45077: PPUSH
45078: CALL 42644 0 3
45082: PPUSH
45083: LD_INT 30
45085: PUSH
45086: LD_INT 3
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PPUSH
45093: CALL_OW 72
45097: ST_TO_ADDR
// if not factories then
45098: LD_VAR 0 6
45102: NOT
45103: IFFALSE 45107
// exit ;
45105: GO 46073
// for i in factories do
45107: LD_ADDR_VAR 0 8
45111: PUSH
45112: LD_VAR 0 6
45116: PUSH
45117: FOR_IN
45118: IFFALSE 45143
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45120: LD_ADDR_VAR 0 17
45124: PUSH
45125: LD_VAR 0 17
45129: PUSH
45130: LD_VAR 0 8
45134: PPUSH
45135: CALL_OW 478
45139: UNION
45140: ST_TO_ADDR
45141: GO 45117
45143: POP
45144: POP
// if not fac_list then
45145: LD_VAR 0 17
45149: NOT
45150: IFFALSE 45154
// exit ;
45152: GO 46073
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45154: LD_ADDR_VAR 0 5
45158: PUSH
45159: LD_INT 4
45161: PUSH
45162: LD_INT 5
45164: PUSH
45165: LD_INT 9
45167: PUSH
45168: LD_INT 10
45170: PUSH
45171: LD_INT 6
45173: PUSH
45174: LD_INT 7
45176: PUSH
45177: LD_INT 11
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 27
45191: PUSH
45192: LD_INT 28
45194: PUSH
45195: LD_INT 26
45197: PUSH
45198: LD_INT 30
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 43
45209: PUSH
45210: LD_INT 44
45212: PUSH
45213: LD_INT 46
45215: PUSH
45216: LD_INT 45
45218: PUSH
45219: LD_INT 47
45221: PUSH
45222: LD_INT 49
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: PUSH
45238: LD_VAR 0 12
45242: ARRAY
45243: ST_TO_ADDR
// list := list isect fac_list ;
45244: LD_ADDR_VAR 0 5
45248: PUSH
45249: LD_VAR 0 5
45253: PUSH
45254: LD_VAR 0 17
45258: ISECT
45259: ST_TO_ADDR
// if not list then
45260: LD_VAR 0 5
45264: NOT
45265: IFFALSE 45269
// exit ;
45267: GO 46073
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45269: LD_VAR 0 12
45273: PUSH
45274: LD_INT 3
45276: EQUAL
45277: PUSH
45278: LD_INT 49
45280: PUSH
45281: LD_VAR 0 5
45285: IN
45286: AND
45287: PUSH
45288: LD_INT 31
45290: PPUSH
45291: LD_VAR 0 16
45295: PPUSH
45296: CALL_OW 321
45300: PUSH
45301: LD_INT 2
45303: EQUAL
45304: AND
45305: IFFALSE 45365
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45307: LD_INT 22
45309: PUSH
45310: LD_VAR 0 16
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 35
45321: PUSH
45322: LD_INT 49
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 91
45331: PUSH
45332: LD_VAR 0 1
45336: PUSH
45337: LD_INT 10
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: PPUSH
45350: CALL_OW 69
45354: NOT
45355: IFFALSE 45365
// weapon := ru_time_lapser ;
45357: LD_ADDR_VAR 0 18
45361: PUSH
45362: LD_INT 49
45364: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45365: LD_VAR 0 12
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: IN
45380: PUSH
45381: LD_INT 11
45383: PUSH
45384: LD_VAR 0 5
45388: IN
45389: PUSH
45390: LD_INT 30
45392: PUSH
45393: LD_VAR 0 5
45397: IN
45398: OR
45399: AND
45400: PUSH
45401: LD_INT 6
45403: PPUSH
45404: LD_VAR 0 16
45408: PPUSH
45409: CALL_OW 321
45413: PUSH
45414: LD_INT 2
45416: EQUAL
45417: AND
45418: IFFALSE 45583
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45420: LD_INT 22
45422: PUSH
45423: LD_VAR 0 16
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 35
45437: PUSH
45438: LD_INT 11
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 35
45447: PUSH
45448: LD_INT 30
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 91
45462: PUSH
45463: LD_VAR 0 1
45467: PUSH
45468: LD_INT 18
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: PPUSH
45481: CALL_OW 69
45485: NOT
45486: PUSH
45487: LD_INT 22
45489: PUSH
45490: LD_VAR 0 16
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 30
45504: PUSH
45505: LD_INT 32
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 30
45514: PUSH
45515: LD_INT 33
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 91
45529: PUSH
45530: LD_VAR 0 1
45534: PUSH
45535: LD_INT 12
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: PUSH
45548: EMPTY
45549: LIST
45550: PPUSH
45551: CALL_OW 69
45555: PUSH
45556: LD_INT 2
45558: GREATER
45559: AND
45560: IFFALSE 45583
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45562: LD_ADDR_VAR 0 18
45566: PUSH
45567: LD_INT 11
45569: PUSH
45570: LD_INT 30
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_VAR 0 12
45581: ARRAY
45582: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45583: LD_VAR 0 18
45587: NOT
45588: PUSH
45589: LD_INT 40
45591: PPUSH
45592: LD_VAR 0 16
45596: PPUSH
45597: CALL_OW 321
45601: PUSH
45602: LD_INT 2
45604: EQUAL
45605: AND
45606: PUSH
45607: LD_INT 7
45609: PUSH
45610: LD_VAR 0 5
45614: IN
45615: PUSH
45616: LD_INT 28
45618: PUSH
45619: LD_VAR 0 5
45623: IN
45624: OR
45625: PUSH
45626: LD_INT 45
45628: PUSH
45629: LD_VAR 0 5
45633: IN
45634: OR
45635: AND
45636: IFFALSE 45890
// begin hex := GetHexInfo ( x , y ) ;
45638: LD_ADDR_VAR 0 4
45642: PUSH
45643: LD_VAR 0 10
45647: PPUSH
45648: LD_VAR 0 11
45652: PPUSH
45653: CALL_OW 546
45657: ST_TO_ADDR
// if hex [ 1 ] then
45658: LD_VAR 0 4
45662: PUSH
45663: LD_INT 1
45665: ARRAY
45666: IFFALSE 45670
// exit ;
45668: GO 46073
// height := hex [ 2 ] ;
45670: LD_ADDR_VAR 0 15
45674: PUSH
45675: LD_VAR 0 4
45679: PUSH
45680: LD_INT 2
45682: ARRAY
45683: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45684: LD_ADDR_VAR 0 14
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 3
45697: PUSH
45698: LD_INT 5
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: ST_TO_ADDR
// for i in tmp do
45707: LD_ADDR_VAR 0 8
45711: PUSH
45712: LD_VAR 0 14
45716: PUSH
45717: FOR_IN
45718: IFFALSE 45888
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45720: LD_ADDR_VAR 0 9
45724: PUSH
45725: LD_VAR 0 10
45729: PPUSH
45730: LD_VAR 0 8
45734: PPUSH
45735: LD_INT 5
45737: PPUSH
45738: CALL_OW 272
45742: PUSH
45743: LD_VAR 0 11
45747: PPUSH
45748: LD_VAR 0 8
45752: PPUSH
45753: LD_INT 5
45755: PPUSH
45756: CALL_OW 273
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45765: LD_VAR 0 9
45769: PUSH
45770: LD_INT 1
45772: ARRAY
45773: PPUSH
45774: LD_VAR 0 9
45778: PUSH
45779: LD_INT 2
45781: ARRAY
45782: PPUSH
45783: CALL_OW 488
45787: IFFALSE 45886
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45789: LD_ADDR_VAR 0 4
45793: PUSH
45794: LD_VAR 0 9
45798: PUSH
45799: LD_INT 1
45801: ARRAY
45802: PPUSH
45803: LD_VAR 0 9
45807: PUSH
45808: LD_INT 2
45810: ARRAY
45811: PPUSH
45812: CALL_OW 546
45816: ST_TO_ADDR
// if hex [ 1 ] then
45817: LD_VAR 0 4
45821: PUSH
45822: LD_INT 1
45824: ARRAY
45825: IFFALSE 45829
// continue ;
45827: GO 45717
// h := hex [ 2 ] ;
45829: LD_ADDR_VAR 0 13
45833: PUSH
45834: LD_VAR 0 4
45838: PUSH
45839: LD_INT 2
45841: ARRAY
45842: ST_TO_ADDR
// if h + 7 < height then
45843: LD_VAR 0 13
45847: PUSH
45848: LD_INT 7
45850: PLUS
45851: PUSH
45852: LD_VAR 0 15
45856: LESS
45857: IFFALSE 45886
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45859: LD_ADDR_VAR 0 18
45863: PUSH
45864: LD_INT 7
45866: PUSH
45867: LD_INT 28
45869: PUSH
45870: LD_INT 45
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: PUSH
45878: LD_VAR 0 12
45882: ARRAY
45883: ST_TO_ADDR
// break ;
45884: GO 45888
// end ; end ; end ;
45886: GO 45717
45888: POP
45889: POP
// end ; if not weapon then
45890: LD_VAR 0 18
45894: NOT
45895: IFFALSE 45955
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45897: LD_ADDR_VAR 0 5
45901: PUSH
45902: LD_VAR 0 5
45906: PUSH
45907: LD_INT 11
45909: PUSH
45910: LD_INT 30
45912: PUSH
45913: LD_INT 49
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: DIFF
45921: ST_TO_ADDR
// if not list then
45922: LD_VAR 0 5
45926: NOT
45927: IFFALSE 45931
// exit ;
45929: GO 46073
// weapon := list [ rand ( 1 , list ) ] ;
45931: LD_ADDR_VAR 0 18
45935: PUSH
45936: LD_VAR 0 5
45940: PUSH
45941: LD_INT 1
45943: PPUSH
45944: LD_VAR 0 5
45948: PPUSH
45949: CALL_OW 12
45953: ARRAY
45954: ST_TO_ADDR
// end ; if weapon then
45955: LD_VAR 0 18
45959: IFFALSE 46073
// begin tmp := CostOfWeapon ( weapon ) ;
45961: LD_ADDR_VAR 0 14
45965: PUSH
45966: LD_VAR 0 18
45970: PPUSH
45971: CALL_OW 451
45975: ST_TO_ADDR
// j := GetBase ( tower ) ;
45976: LD_ADDR_VAR 0 9
45980: PUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 274
45990: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45991: LD_VAR 0 9
45995: PPUSH
45996: LD_INT 1
45998: PPUSH
45999: CALL_OW 275
46003: PUSH
46004: LD_VAR 0 14
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: GREATEREQUAL
46013: PUSH
46014: LD_VAR 0 9
46018: PPUSH
46019: LD_INT 2
46021: PPUSH
46022: CALL_OW 275
46026: PUSH
46027: LD_VAR 0 14
46031: PUSH
46032: LD_INT 2
46034: ARRAY
46035: GREATEREQUAL
46036: AND
46037: PUSH
46038: LD_VAR 0 9
46042: PPUSH
46043: LD_INT 3
46045: PPUSH
46046: CALL_OW 275
46050: PUSH
46051: LD_VAR 0 14
46055: PUSH
46056: LD_INT 3
46058: ARRAY
46059: GREATEREQUAL
46060: AND
46061: IFFALSE 46073
// result := weapon ;
46063: LD_ADDR_VAR 0 3
46067: PUSH
46068: LD_VAR 0 18
46072: ST_TO_ADDR
// end ; end ;
46073: LD_VAR 0 3
46077: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46078: LD_INT 0
46080: PPUSH
46081: PPUSH
// result := true ;
46082: LD_ADDR_VAR 0 3
46086: PUSH
46087: LD_INT 1
46089: ST_TO_ADDR
// if array1 = array2 then
46090: LD_VAR 0 1
46094: PUSH
46095: LD_VAR 0 2
46099: EQUAL
46100: IFFALSE 46160
// begin for i = 1 to array1 do
46102: LD_ADDR_VAR 0 4
46106: PUSH
46107: DOUBLE
46108: LD_INT 1
46110: DEC
46111: ST_TO_ADDR
46112: LD_VAR 0 1
46116: PUSH
46117: FOR_TO
46118: IFFALSE 46156
// if array1 [ i ] <> array2 [ i ] then
46120: LD_VAR 0 1
46124: PUSH
46125: LD_VAR 0 4
46129: ARRAY
46130: PUSH
46131: LD_VAR 0 2
46135: PUSH
46136: LD_VAR 0 4
46140: ARRAY
46141: NONEQUAL
46142: IFFALSE 46154
// begin result := false ;
46144: LD_ADDR_VAR 0 3
46148: PUSH
46149: LD_INT 0
46151: ST_TO_ADDR
// break ;
46152: GO 46156
// end ;
46154: GO 46117
46156: POP
46157: POP
// end else
46158: GO 46168
// result := false ;
46160: LD_ADDR_VAR 0 3
46164: PUSH
46165: LD_INT 0
46167: ST_TO_ADDR
// end ;
46168: LD_VAR 0 3
46172: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46173: LD_INT 0
46175: PPUSH
46176: PPUSH
// if not array1 or not array2 then
46177: LD_VAR 0 1
46181: NOT
46182: PUSH
46183: LD_VAR 0 2
46187: NOT
46188: OR
46189: IFFALSE 46193
// exit ;
46191: GO 46257
// result := true ;
46193: LD_ADDR_VAR 0 3
46197: PUSH
46198: LD_INT 1
46200: ST_TO_ADDR
// for i = 1 to array1 do
46201: LD_ADDR_VAR 0 4
46205: PUSH
46206: DOUBLE
46207: LD_INT 1
46209: DEC
46210: ST_TO_ADDR
46211: LD_VAR 0 1
46215: PUSH
46216: FOR_TO
46217: IFFALSE 46255
// if array1 [ i ] <> array2 [ i ] then
46219: LD_VAR 0 1
46223: PUSH
46224: LD_VAR 0 4
46228: ARRAY
46229: PUSH
46230: LD_VAR 0 2
46234: PUSH
46235: LD_VAR 0 4
46239: ARRAY
46240: NONEQUAL
46241: IFFALSE 46253
// begin result := false ;
46243: LD_ADDR_VAR 0 3
46247: PUSH
46248: LD_INT 0
46250: ST_TO_ADDR
// break ;
46251: GO 46255
// end ;
46253: GO 46216
46255: POP
46256: POP
// end ;
46257: LD_VAR 0 3
46261: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46262: LD_INT 0
46264: PPUSH
46265: PPUSH
46266: PPUSH
// pom := GetBase ( fac ) ;
46267: LD_ADDR_VAR 0 5
46271: PUSH
46272: LD_VAR 0 1
46276: PPUSH
46277: CALL_OW 274
46281: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46282: LD_ADDR_VAR 0 4
46286: PUSH
46287: LD_VAR 0 2
46291: PUSH
46292: LD_INT 1
46294: ARRAY
46295: PPUSH
46296: LD_VAR 0 2
46300: PUSH
46301: LD_INT 2
46303: ARRAY
46304: PPUSH
46305: LD_VAR 0 2
46309: PUSH
46310: LD_INT 3
46312: ARRAY
46313: PPUSH
46314: LD_VAR 0 2
46318: PUSH
46319: LD_INT 4
46321: ARRAY
46322: PPUSH
46323: CALL_OW 449
46327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46328: LD_ADDR_VAR 0 3
46332: PUSH
46333: LD_VAR 0 5
46337: PPUSH
46338: LD_INT 1
46340: PPUSH
46341: CALL_OW 275
46345: PUSH
46346: LD_VAR 0 4
46350: PUSH
46351: LD_INT 1
46353: ARRAY
46354: GREATEREQUAL
46355: PUSH
46356: LD_VAR 0 5
46360: PPUSH
46361: LD_INT 2
46363: PPUSH
46364: CALL_OW 275
46368: PUSH
46369: LD_VAR 0 4
46373: PUSH
46374: LD_INT 2
46376: ARRAY
46377: GREATEREQUAL
46378: AND
46379: PUSH
46380: LD_VAR 0 5
46384: PPUSH
46385: LD_INT 3
46387: PPUSH
46388: CALL_OW 275
46392: PUSH
46393: LD_VAR 0 4
46397: PUSH
46398: LD_INT 3
46400: ARRAY
46401: GREATEREQUAL
46402: AND
46403: ST_TO_ADDR
// end ;
46404: LD_VAR 0 3
46408: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46409: LD_INT 0
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
// pom := GetBase ( building ) ;
46415: LD_ADDR_VAR 0 3
46419: PUSH
46420: LD_VAR 0 1
46424: PPUSH
46425: CALL_OW 274
46429: ST_TO_ADDR
// if not pom then
46430: LD_VAR 0 3
46434: NOT
46435: IFFALSE 46439
// exit ;
46437: GO 46609
// btype := GetBType ( building ) ;
46439: LD_ADDR_VAR 0 5
46443: PUSH
46444: LD_VAR 0 1
46448: PPUSH
46449: CALL_OW 266
46453: ST_TO_ADDR
// if btype = b_armoury then
46454: LD_VAR 0 5
46458: PUSH
46459: LD_INT 4
46461: EQUAL
46462: IFFALSE 46472
// btype := b_barracks ;
46464: LD_ADDR_VAR 0 5
46468: PUSH
46469: LD_INT 5
46471: ST_TO_ADDR
// if btype = b_depot then
46472: LD_VAR 0 5
46476: PUSH
46477: LD_INT 0
46479: EQUAL
46480: IFFALSE 46490
// btype := b_warehouse ;
46482: LD_ADDR_VAR 0 5
46486: PUSH
46487: LD_INT 1
46489: ST_TO_ADDR
// if btype = b_workshop then
46490: LD_VAR 0 5
46494: PUSH
46495: LD_INT 2
46497: EQUAL
46498: IFFALSE 46508
// btype := b_factory ;
46500: LD_ADDR_VAR 0 5
46504: PUSH
46505: LD_INT 3
46507: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46508: LD_ADDR_VAR 0 4
46512: PUSH
46513: LD_VAR 0 5
46517: PPUSH
46518: LD_VAR 0 1
46522: PPUSH
46523: CALL_OW 248
46527: PPUSH
46528: CALL_OW 450
46532: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46533: LD_ADDR_VAR 0 2
46537: PUSH
46538: LD_VAR 0 3
46542: PPUSH
46543: LD_INT 1
46545: PPUSH
46546: CALL_OW 275
46550: PUSH
46551: LD_VAR 0 4
46555: PUSH
46556: LD_INT 1
46558: ARRAY
46559: GREATEREQUAL
46560: PUSH
46561: LD_VAR 0 3
46565: PPUSH
46566: LD_INT 2
46568: PPUSH
46569: CALL_OW 275
46573: PUSH
46574: LD_VAR 0 4
46578: PUSH
46579: LD_INT 2
46581: ARRAY
46582: GREATEREQUAL
46583: AND
46584: PUSH
46585: LD_VAR 0 3
46589: PPUSH
46590: LD_INT 3
46592: PPUSH
46593: CALL_OW 275
46597: PUSH
46598: LD_VAR 0 4
46602: PUSH
46603: LD_INT 3
46605: ARRAY
46606: GREATEREQUAL
46607: AND
46608: ST_TO_ADDR
// end ;
46609: LD_VAR 0 2
46613: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46614: LD_INT 0
46616: PPUSH
46617: PPUSH
46618: PPUSH
// pom := GetBase ( building ) ;
46619: LD_ADDR_VAR 0 4
46623: PUSH
46624: LD_VAR 0 1
46628: PPUSH
46629: CALL_OW 274
46633: ST_TO_ADDR
// if not pom then
46634: LD_VAR 0 4
46638: NOT
46639: IFFALSE 46643
// exit ;
46641: GO 46744
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46643: LD_ADDR_VAR 0 5
46647: PUSH
46648: LD_VAR 0 2
46652: PPUSH
46653: LD_VAR 0 1
46657: PPUSH
46658: CALL_OW 248
46662: PPUSH
46663: CALL_OW 450
46667: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46668: LD_ADDR_VAR 0 3
46672: PUSH
46673: LD_VAR 0 4
46677: PPUSH
46678: LD_INT 1
46680: PPUSH
46681: CALL_OW 275
46685: PUSH
46686: LD_VAR 0 5
46690: PUSH
46691: LD_INT 1
46693: ARRAY
46694: GREATEREQUAL
46695: PUSH
46696: LD_VAR 0 4
46700: PPUSH
46701: LD_INT 2
46703: PPUSH
46704: CALL_OW 275
46708: PUSH
46709: LD_VAR 0 5
46713: PUSH
46714: LD_INT 2
46716: ARRAY
46717: GREATEREQUAL
46718: AND
46719: PUSH
46720: LD_VAR 0 4
46724: PPUSH
46725: LD_INT 3
46727: PPUSH
46728: CALL_OW 275
46732: PUSH
46733: LD_VAR 0 5
46737: PUSH
46738: LD_INT 3
46740: ARRAY
46741: GREATEREQUAL
46742: AND
46743: ST_TO_ADDR
// end ;
46744: LD_VAR 0 3
46748: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46749: LD_INT 0
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
// result := false ;
46762: LD_ADDR_VAR 0 8
46766: PUSH
46767: LD_INT 0
46769: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46770: LD_VAR 0 5
46774: NOT
46775: PUSH
46776: LD_VAR 0 1
46780: NOT
46781: OR
46782: PUSH
46783: LD_VAR 0 2
46787: NOT
46788: OR
46789: PUSH
46790: LD_VAR 0 3
46794: NOT
46795: OR
46796: IFFALSE 46800
// exit ;
46798: GO 47614
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46800: LD_ADDR_VAR 0 14
46804: PUSH
46805: LD_VAR 0 1
46809: PPUSH
46810: LD_VAR 0 2
46814: PPUSH
46815: LD_VAR 0 3
46819: PPUSH
46820: LD_VAR 0 4
46824: PPUSH
46825: LD_VAR 0 5
46829: PUSH
46830: LD_INT 1
46832: ARRAY
46833: PPUSH
46834: CALL_OW 248
46838: PPUSH
46839: LD_INT 0
46841: PPUSH
46842: CALL 48847 0 6
46846: ST_TO_ADDR
// if not hexes then
46847: LD_VAR 0 14
46851: NOT
46852: IFFALSE 46856
// exit ;
46854: GO 47614
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46856: LD_ADDR_VAR 0 17
46860: PUSH
46861: LD_VAR 0 5
46865: PPUSH
46866: LD_INT 22
46868: PUSH
46869: LD_VAR 0 13
46873: PPUSH
46874: CALL_OW 255
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 30
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PPUSH
46915: CALL_OW 72
46919: ST_TO_ADDR
// for i = 1 to hexes do
46920: LD_ADDR_VAR 0 9
46924: PUSH
46925: DOUBLE
46926: LD_INT 1
46928: DEC
46929: ST_TO_ADDR
46930: LD_VAR 0 14
46934: PUSH
46935: FOR_TO
46936: IFFALSE 47612
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46938: LD_ADDR_VAR 0 13
46942: PUSH
46943: LD_VAR 0 14
46947: PUSH
46948: LD_VAR 0 9
46952: ARRAY
46953: PUSH
46954: LD_INT 1
46956: ARRAY
46957: PPUSH
46958: LD_VAR 0 14
46962: PUSH
46963: LD_VAR 0 9
46967: ARRAY
46968: PUSH
46969: LD_INT 2
46971: ARRAY
46972: PPUSH
46973: CALL_OW 428
46977: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46978: LD_VAR 0 14
46982: PUSH
46983: LD_VAR 0 9
46987: ARRAY
46988: PUSH
46989: LD_INT 1
46991: ARRAY
46992: PPUSH
46993: LD_VAR 0 14
46997: PUSH
46998: LD_VAR 0 9
47002: ARRAY
47003: PUSH
47004: LD_INT 2
47006: ARRAY
47007: PPUSH
47008: CALL_OW 351
47012: PUSH
47013: LD_VAR 0 14
47017: PUSH
47018: LD_VAR 0 9
47022: ARRAY
47023: PUSH
47024: LD_INT 1
47026: ARRAY
47027: PPUSH
47028: LD_VAR 0 14
47032: PUSH
47033: LD_VAR 0 9
47037: ARRAY
47038: PUSH
47039: LD_INT 2
47041: ARRAY
47042: PPUSH
47043: CALL_OW 488
47047: NOT
47048: OR
47049: PUSH
47050: LD_VAR 0 13
47054: PPUSH
47055: CALL_OW 247
47059: PUSH
47060: LD_INT 3
47062: EQUAL
47063: OR
47064: IFFALSE 47070
// exit ;
47066: POP
47067: POP
47068: GO 47614
// if not tmp then
47070: LD_VAR 0 13
47074: NOT
47075: IFFALSE 47079
// continue ;
47077: GO 46935
// result := true ;
47079: LD_ADDR_VAR 0 8
47083: PUSH
47084: LD_INT 1
47086: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47087: LD_VAR 0 6
47091: PUSH
47092: LD_VAR 0 13
47096: PPUSH
47097: CALL_OW 247
47101: PUSH
47102: LD_INT 2
47104: EQUAL
47105: AND
47106: PUSH
47107: LD_VAR 0 13
47111: PPUSH
47112: CALL_OW 263
47116: PUSH
47117: LD_INT 1
47119: EQUAL
47120: AND
47121: IFFALSE 47285
// begin if IsDrivenBy ( tmp ) then
47123: LD_VAR 0 13
47127: PPUSH
47128: CALL_OW 311
47132: IFFALSE 47136
// continue ;
47134: GO 46935
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47136: LD_VAR 0 6
47140: PPUSH
47141: LD_INT 3
47143: PUSH
47144: LD_INT 60
47146: PUSH
47147: EMPTY
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 55
47159: PUSH
47160: EMPTY
47161: LIST
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PPUSH
47171: CALL_OW 72
47175: IFFALSE 47283
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47177: LD_ADDR_VAR 0 18
47181: PUSH
47182: LD_VAR 0 6
47186: PPUSH
47187: LD_INT 3
47189: PUSH
47190: LD_INT 60
47192: PUSH
47193: EMPTY
47194: LIST
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: LD_INT 55
47205: PUSH
47206: EMPTY
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PPUSH
47217: CALL_OW 72
47221: PUSH
47222: LD_INT 1
47224: ARRAY
47225: ST_TO_ADDR
// if IsInUnit ( driver ) then
47226: LD_VAR 0 18
47230: PPUSH
47231: CALL_OW 310
47235: IFFALSE 47246
// ComExit ( driver ) ;
47237: LD_VAR 0 18
47241: PPUSH
47242: CALL 72627 0 1
// AddComEnterUnit ( driver , tmp ) ;
47246: LD_VAR 0 18
47250: PPUSH
47251: LD_VAR 0 13
47255: PPUSH
47256: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47260: LD_VAR 0 18
47264: PPUSH
47265: LD_VAR 0 7
47269: PPUSH
47270: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47274: LD_VAR 0 18
47278: PPUSH
47279: CALL_OW 181
// end ; continue ;
47283: GO 46935
// end ; if not cleaners or not tmp in cleaners then
47285: LD_VAR 0 6
47289: NOT
47290: PUSH
47291: LD_VAR 0 13
47295: PUSH
47296: LD_VAR 0 6
47300: IN
47301: NOT
47302: OR
47303: IFFALSE 47610
// begin if dep then
47305: LD_VAR 0 17
47309: IFFALSE 47445
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47311: LD_ADDR_VAR 0 16
47315: PUSH
47316: LD_VAR 0 17
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PPUSH
47325: CALL_OW 250
47329: PPUSH
47330: LD_VAR 0 17
47334: PUSH
47335: LD_INT 1
47337: ARRAY
47338: PPUSH
47339: CALL_OW 254
47343: PPUSH
47344: LD_INT 5
47346: PPUSH
47347: CALL_OW 272
47351: PUSH
47352: LD_VAR 0 17
47356: PUSH
47357: LD_INT 1
47359: ARRAY
47360: PPUSH
47361: CALL_OW 251
47365: PPUSH
47366: LD_VAR 0 17
47370: PUSH
47371: LD_INT 1
47373: ARRAY
47374: PPUSH
47375: CALL_OW 254
47379: PPUSH
47380: LD_INT 5
47382: PPUSH
47383: CALL_OW 273
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47392: LD_VAR 0 16
47396: PUSH
47397: LD_INT 1
47399: ARRAY
47400: PPUSH
47401: LD_VAR 0 16
47405: PUSH
47406: LD_INT 2
47408: ARRAY
47409: PPUSH
47410: CALL_OW 488
47414: IFFALSE 47445
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47416: LD_VAR 0 13
47420: PPUSH
47421: LD_VAR 0 16
47425: PUSH
47426: LD_INT 1
47428: ARRAY
47429: PPUSH
47430: LD_VAR 0 16
47434: PUSH
47435: LD_INT 2
47437: ARRAY
47438: PPUSH
47439: CALL_OW 111
// continue ;
47443: GO 46935
// end ; end ; r := GetDir ( tmp ) ;
47445: LD_ADDR_VAR 0 15
47449: PUSH
47450: LD_VAR 0 13
47454: PPUSH
47455: CALL_OW 254
47459: ST_TO_ADDR
// if r = 5 then
47460: LD_VAR 0 15
47464: PUSH
47465: LD_INT 5
47467: EQUAL
47468: IFFALSE 47478
// r := 0 ;
47470: LD_ADDR_VAR 0 15
47474: PUSH
47475: LD_INT 0
47477: ST_TO_ADDR
// for j = r to 5 do
47478: LD_ADDR_VAR 0 10
47482: PUSH
47483: DOUBLE
47484: LD_VAR 0 15
47488: DEC
47489: ST_TO_ADDR
47490: LD_INT 5
47492: PUSH
47493: FOR_TO
47494: IFFALSE 47608
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47496: LD_ADDR_VAR 0 11
47500: PUSH
47501: LD_VAR 0 13
47505: PPUSH
47506: CALL_OW 250
47510: PPUSH
47511: LD_VAR 0 10
47515: PPUSH
47516: LD_INT 2
47518: PPUSH
47519: CALL_OW 272
47523: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47524: LD_ADDR_VAR 0 12
47528: PUSH
47529: LD_VAR 0 13
47533: PPUSH
47534: CALL_OW 251
47538: PPUSH
47539: LD_VAR 0 10
47543: PPUSH
47544: LD_INT 2
47546: PPUSH
47547: CALL_OW 273
47551: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47552: LD_VAR 0 11
47556: PPUSH
47557: LD_VAR 0 12
47561: PPUSH
47562: CALL_OW 488
47566: PUSH
47567: LD_VAR 0 11
47571: PPUSH
47572: LD_VAR 0 12
47576: PPUSH
47577: CALL_OW 428
47581: NOT
47582: AND
47583: IFFALSE 47606
// begin ComMoveXY ( tmp , _x , _y ) ;
47585: LD_VAR 0 13
47589: PPUSH
47590: LD_VAR 0 11
47594: PPUSH
47595: LD_VAR 0 12
47599: PPUSH
47600: CALL_OW 111
// break ;
47604: GO 47608
// end ; end ;
47606: GO 47493
47608: POP
47609: POP
// end ; end ;
47610: GO 46935
47612: POP
47613: POP
// end ;
47614: LD_VAR 0 8
47618: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47619: LD_INT 0
47621: PPUSH
// result := true ;
47622: LD_ADDR_VAR 0 3
47626: PUSH
47627: LD_INT 1
47629: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47630: LD_VAR 0 2
47634: PUSH
47635: LD_INT 24
47637: DOUBLE
47638: EQUAL
47639: IFTRUE 47649
47641: LD_INT 33
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47649
47647: GO 47674
47649: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47650: LD_ADDR_VAR 0 3
47654: PUSH
47655: LD_INT 32
47657: PPUSH
47658: LD_VAR 0 1
47662: PPUSH
47663: CALL_OW 321
47667: PUSH
47668: LD_INT 2
47670: EQUAL
47671: ST_TO_ADDR
47672: GO 47990
47674: LD_INT 20
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47682
47680: GO 47707
47682: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47683: LD_ADDR_VAR 0 3
47687: PUSH
47688: LD_INT 6
47690: PPUSH
47691: LD_VAR 0 1
47695: PPUSH
47696: CALL_OW 321
47700: PUSH
47701: LD_INT 2
47703: EQUAL
47704: ST_TO_ADDR
47705: GO 47990
47707: LD_INT 22
47709: DOUBLE
47710: EQUAL
47711: IFTRUE 47721
47713: LD_INT 36
47715: DOUBLE
47716: EQUAL
47717: IFTRUE 47721
47719: GO 47746
47721: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47722: LD_ADDR_VAR 0 3
47726: PUSH
47727: LD_INT 15
47729: PPUSH
47730: LD_VAR 0 1
47734: PPUSH
47735: CALL_OW 321
47739: PUSH
47740: LD_INT 2
47742: EQUAL
47743: ST_TO_ADDR
47744: GO 47990
47746: LD_INT 30
47748: DOUBLE
47749: EQUAL
47750: IFTRUE 47754
47752: GO 47779
47754: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47755: LD_ADDR_VAR 0 3
47759: PUSH
47760: LD_INT 20
47762: PPUSH
47763: LD_VAR 0 1
47767: PPUSH
47768: CALL_OW 321
47772: PUSH
47773: LD_INT 2
47775: EQUAL
47776: ST_TO_ADDR
47777: GO 47990
47779: LD_INT 28
47781: DOUBLE
47782: EQUAL
47783: IFTRUE 47793
47785: LD_INT 21
47787: DOUBLE
47788: EQUAL
47789: IFTRUE 47793
47791: GO 47818
47793: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47794: LD_ADDR_VAR 0 3
47798: PUSH
47799: LD_INT 21
47801: PPUSH
47802: LD_VAR 0 1
47806: PPUSH
47807: CALL_OW 321
47811: PUSH
47812: LD_INT 2
47814: EQUAL
47815: ST_TO_ADDR
47816: GO 47990
47818: LD_INT 16
47820: DOUBLE
47821: EQUAL
47822: IFTRUE 47826
47824: GO 47851
47826: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47827: LD_ADDR_VAR 0 3
47831: PUSH
47832: LD_INT 84
47834: PPUSH
47835: LD_VAR 0 1
47839: PPUSH
47840: CALL_OW 321
47844: PUSH
47845: LD_INT 2
47847: EQUAL
47848: ST_TO_ADDR
47849: GO 47990
47851: LD_INT 19
47853: DOUBLE
47854: EQUAL
47855: IFTRUE 47865
47857: LD_INT 23
47859: DOUBLE
47860: EQUAL
47861: IFTRUE 47865
47863: GO 47890
47865: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47866: LD_ADDR_VAR 0 3
47870: PUSH
47871: LD_INT 83
47873: PPUSH
47874: LD_VAR 0 1
47878: PPUSH
47879: CALL_OW 321
47883: PUSH
47884: LD_INT 2
47886: EQUAL
47887: ST_TO_ADDR
47888: GO 47990
47890: LD_INT 17
47892: DOUBLE
47893: EQUAL
47894: IFTRUE 47898
47896: GO 47923
47898: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47899: LD_ADDR_VAR 0 3
47903: PUSH
47904: LD_INT 39
47906: PPUSH
47907: LD_VAR 0 1
47911: PPUSH
47912: CALL_OW 321
47916: PUSH
47917: LD_INT 2
47919: EQUAL
47920: ST_TO_ADDR
47921: GO 47990
47923: LD_INT 18
47925: DOUBLE
47926: EQUAL
47927: IFTRUE 47931
47929: GO 47956
47931: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47932: LD_ADDR_VAR 0 3
47936: PUSH
47937: LD_INT 40
47939: PPUSH
47940: LD_VAR 0 1
47944: PPUSH
47945: CALL_OW 321
47949: PUSH
47950: LD_INT 2
47952: EQUAL
47953: ST_TO_ADDR
47954: GO 47990
47956: LD_INT 27
47958: DOUBLE
47959: EQUAL
47960: IFTRUE 47964
47962: GO 47989
47964: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47965: LD_ADDR_VAR 0 3
47969: PUSH
47970: LD_INT 35
47972: PPUSH
47973: LD_VAR 0 1
47977: PPUSH
47978: CALL_OW 321
47982: PUSH
47983: LD_INT 2
47985: EQUAL
47986: ST_TO_ADDR
47987: GO 47990
47989: POP
// end ;
47990: LD_VAR 0 3
47994: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47995: LD_INT 0
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
48001: PPUSH
48002: PPUSH
48003: PPUSH
48004: PPUSH
48005: PPUSH
48006: PPUSH
48007: PPUSH
// result := false ;
48008: LD_ADDR_VAR 0 6
48012: PUSH
48013: LD_INT 0
48015: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48016: LD_VAR 0 1
48020: NOT
48021: PUSH
48022: LD_VAR 0 1
48026: PPUSH
48027: CALL_OW 266
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: IN
48042: NOT
48043: OR
48044: PUSH
48045: LD_VAR 0 2
48049: NOT
48050: OR
48051: PUSH
48052: LD_VAR 0 5
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 3
48068: PUSH
48069: LD_INT 4
48071: PUSH
48072: LD_INT 5
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: IN
48083: NOT
48084: OR
48085: PUSH
48086: LD_VAR 0 3
48090: PPUSH
48091: LD_VAR 0 4
48095: PPUSH
48096: CALL_OW 488
48100: NOT
48101: OR
48102: IFFALSE 48106
// exit ;
48104: GO 48842
// side := GetSide ( depot ) ;
48106: LD_ADDR_VAR 0 9
48110: PUSH
48111: LD_VAR 0 1
48115: PPUSH
48116: CALL_OW 255
48120: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48121: LD_VAR 0 9
48125: PPUSH
48126: LD_VAR 0 2
48130: PPUSH
48131: CALL 47619 0 2
48135: NOT
48136: IFFALSE 48140
// exit ;
48138: GO 48842
// pom := GetBase ( depot ) ;
48140: LD_ADDR_VAR 0 10
48144: PUSH
48145: LD_VAR 0 1
48149: PPUSH
48150: CALL_OW 274
48154: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48155: LD_ADDR_VAR 0 11
48159: PUSH
48160: LD_VAR 0 2
48164: PPUSH
48165: LD_VAR 0 1
48169: PPUSH
48170: CALL_OW 248
48174: PPUSH
48175: CALL_OW 450
48179: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48180: LD_VAR 0 10
48184: PPUSH
48185: LD_INT 1
48187: PPUSH
48188: CALL_OW 275
48192: PUSH
48193: LD_VAR 0 11
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: GREATEREQUAL
48202: PUSH
48203: LD_VAR 0 10
48207: PPUSH
48208: LD_INT 2
48210: PPUSH
48211: CALL_OW 275
48215: PUSH
48216: LD_VAR 0 11
48220: PUSH
48221: LD_INT 2
48223: ARRAY
48224: GREATEREQUAL
48225: AND
48226: PUSH
48227: LD_VAR 0 10
48231: PPUSH
48232: LD_INT 3
48234: PPUSH
48235: CALL_OW 275
48239: PUSH
48240: LD_VAR 0 11
48244: PUSH
48245: LD_INT 3
48247: ARRAY
48248: GREATEREQUAL
48249: AND
48250: NOT
48251: IFFALSE 48255
// exit ;
48253: GO 48842
// if GetBType ( depot ) = b_depot then
48255: LD_VAR 0 1
48259: PPUSH
48260: CALL_OW 266
48264: PUSH
48265: LD_INT 0
48267: EQUAL
48268: IFFALSE 48280
// dist := 28 else
48270: LD_ADDR_VAR 0 14
48274: PUSH
48275: LD_INT 28
48277: ST_TO_ADDR
48278: GO 48288
// dist := 36 ;
48280: LD_ADDR_VAR 0 14
48284: PUSH
48285: LD_INT 36
48287: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48288: LD_VAR 0 1
48292: PPUSH
48293: LD_VAR 0 3
48297: PPUSH
48298: LD_VAR 0 4
48302: PPUSH
48303: CALL_OW 297
48307: PUSH
48308: LD_VAR 0 14
48312: GREATER
48313: IFFALSE 48317
// exit ;
48315: GO 48842
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48317: LD_ADDR_VAR 0 12
48321: PUSH
48322: LD_VAR 0 2
48326: PPUSH
48327: LD_VAR 0 3
48331: PPUSH
48332: LD_VAR 0 4
48336: PPUSH
48337: LD_VAR 0 5
48341: PPUSH
48342: LD_VAR 0 1
48346: PPUSH
48347: CALL_OW 248
48351: PPUSH
48352: LD_INT 0
48354: PPUSH
48355: CALL 48847 0 6
48359: ST_TO_ADDR
// if not hexes then
48360: LD_VAR 0 12
48364: NOT
48365: IFFALSE 48369
// exit ;
48367: GO 48842
// hex := GetHexInfo ( x , y ) ;
48369: LD_ADDR_VAR 0 15
48373: PUSH
48374: LD_VAR 0 3
48378: PPUSH
48379: LD_VAR 0 4
48383: PPUSH
48384: CALL_OW 546
48388: ST_TO_ADDR
// if hex [ 1 ] then
48389: LD_VAR 0 15
48393: PUSH
48394: LD_INT 1
48396: ARRAY
48397: IFFALSE 48401
// exit ;
48399: GO 48842
// height := hex [ 2 ] ;
48401: LD_ADDR_VAR 0 13
48405: PUSH
48406: LD_VAR 0 15
48410: PUSH
48411: LD_INT 2
48413: ARRAY
48414: ST_TO_ADDR
// for i = 1 to hexes do
48415: LD_ADDR_VAR 0 7
48419: PUSH
48420: DOUBLE
48421: LD_INT 1
48423: DEC
48424: ST_TO_ADDR
48425: LD_VAR 0 12
48429: PUSH
48430: FOR_TO
48431: IFFALSE 48761
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48433: LD_VAR 0 12
48437: PUSH
48438: LD_VAR 0 7
48442: ARRAY
48443: PUSH
48444: LD_INT 1
48446: ARRAY
48447: PPUSH
48448: LD_VAR 0 12
48452: PUSH
48453: LD_VAR 0 7
48457: ARRAY
48458: PUSH
48459: LD_INT 2
48461: ARRAY
48462: PPUSH
48463: CALL_OW 488
48467: NOT
48468: PUSH
48469: LD_VAR 0 12
48473: PUSH
48474: LD_VAR 0 7
48478: ARRAY
48479: PUSH
48480: LD_INT 1
48482: ARRAY
48483: PPUSH
48484: LD_VAR 0 12
48488: PUSH
48489: LD_VAR 0 7
48493: ARRAY
48494: PUSH
48495: LD_INT 2
48497: ARRAY
48498: PPUSH
48499: CALL_OW 428
48503: PUSH
48504: LD_INT 0
48506: GREATER
48507: OR
48508: PUSH
48509: LD_VAR 0 12
48513: PUSH
48514: LD_VAR 0 7
48518: ARRAY
48519: PUSH
48520: LD_INT 1
48522: ARRAY
48523: PPUSH
48524: LD_VAR 0 12
48528: PUSH
48529: LD_VAR 0 7
48533: ARRAY
48534: PUSH
48535: LD_INT 2
48537: ARRAY
48538: PPUSH
48539: CALL_OW 351
48543: OR
48544: IFFALSE 48550
// exit ;
48546: POP
48547: POP
48548: GO 48842
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48550: LD_ADDR_VAR 0 8
48554: PUSH
48555: LD_VAR 0 12
48559: PUSH
48560: LD_VAR 0 7
48564: ARRAY
48565: PUSH
48566: LD_INT 1
48568: ARRAY
48569: PPUSH
48570: LD_VAR 0 12
48574: PUSH
48575: LD_VAR 0 7
48579: ARRAY
48580: PUSH
48581: LD_INT 2
48583: ARRAY
48584: PPUSH
48585: CALL_OW 546
48589: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48590: LD_VAR 0 8
48594: PUSH
48595: LD_INT 1
48597: ARRAY
48598: PUSH
48599: LD_VAR 0 8
48603: PUSH
48604: LD_INT 2
48606: ARRAY
48607: PUSH
48608: LD_VAR 0 13
48612: PUSH
48613: LD_INT 2
48615: PLUS
48616: GREATER
48617: OR
48618: PUSH
48619: LD_VAR 0 8
48623: PUSH
48624: LD_INT 2
48626: ARRAY
48627: PUSH
48628: LD_VAR 0 13
48632: PUSH
48633: LD_INT 2
48635: MINUS
48636: LESS
48637: OR
48638: PUSH
48639: LD_VAR 0 8
48643: PUSH
48644: LD_INT 3
48646: ARRAY
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 8
48653: PUSH
48654: LD_INT 9
48656: PUSH
48657: LD_INT 10
48659: PUSH
48660: LD_INT 11
48662: PUSH
48663: LD_INT 12
48665: PUSH
48666: LD_INT 13
48668: PUSH
48669: LD_INT 16
48671: PUSH
48672: LD_INT 17
48674: PUSH
48675: LD_INT 18
48677: PUSH
48678: LD_INT 19
48680: PUSH
48681: LD_INT 20
48683: PUSH
48684: LD_INT 21
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: IN
48702: NOT
48703: OR
48704: PUSH
48705: LD_VAR 0 8
48709: PUSH
48710: LD_INT 5
48712: ARRAY
48713: NOT
48714: OR
48715: PUSH
48716: LD_VAR 0 8
48720: PUSH
48721: LD_INT 6
48723: ARRAY
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 7
48733: PUSH
48734: LD_INT 9
48736: PUSH
48737: LD_INT 10
48739: PUSH
48740: LD_INT 11
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: IN
48751: NOT
48752: OR
48753: IFFALSE 48759
// exit ;
48755: POP
48756: POP
48757: GO 48842
// end ;
48759: GO 48430
48761: POP
48762: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48763: LD_VAR 0 9
48767: PPUSH
48768: LD_VAR 0 3
48772: PPUSH
48773: LD_VAR 0 4
48777: PPUSH
48778: LD_INT 20
48780: PPUSH
48781: CALL 40794 0 4
48785: PUSH
48786: LD_INT 4
48788: ARRAY
48789: IFFALSE 48793
// exit ;
48791: GO 48842
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48793: LD_VAR 0 2
48797: PUSH
48798: LD_INT 29
48800: PUSH
48801: LD_INT 30
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: IN
48808: PUSH
48809: LD_VAR 0 3
48813: PPUSH
48814: LD_VAR 0 4
48818: PPUSH
48819: LD_VAR 0 9
48823: PPUSH
48824: CALL_OW 440
48828: NOT
48829: AND
48830: IFFALSE 48834
// exit ;
48832: GO 48842
// result := true ;
48834: LD_ADDR_VAR 0 6
48838: PUSH
48839: LD_INT 1
48841: ST_TO_ADDR
// end ;
48842: LD_VAR 0 6
48846: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48847: LD_INT 0
48849: PPUSH
48850: PPUSH
48851: PPUSH
48852: PPUSH
48853: PPUSH
48854: PPUSH
48855: PPUSH
48856: PPUSH
48857: PPUSH
48858: PPUSH
48859: PPUSH
48860: PPUSH
48861: PPUSH
48862: PPUSH
48863: PPUSH
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
48870: PPUSH
48871: PPUSH
48872: PPUSH
48873: PPUSH
48874: PPUSH
48875: PPUSH
48876: PPUSH
48877: PPUSH
48878: PPUSH
48879: PPUSH
48880: PPUSH
48881: PPUSH
48882: PPUSH
48883: PPUSH
48884: PPUSH
48885: PPUSH
48886: PPUSH
48887: PPUSH
48888: PPUSH
48889: PPUSH
48890: PPUSH
48891: PPUSH
48892: PPUSH
48893: PPUSH
48894: PPUSH
48895: PPUSH
48896: PPUSH
48897: PPUSH
48898: PPUSH
48899: PPUSH
48900: PPUSH
48901: PPUSH
48902: PPUSH
48903: PPUSH
48904: PPUSH
48905: PPUSH
48906: PPUSH
// result = [ ] ;
48907: LD_ADDR_VAR 0 7
48911: PUSH
48912: EMPTY
48913: ST_TO_ADDR
// temp_list = [ ] ;
48914: LD_ADDR_VAR 0 9
48918: PUSH
48919: EMPTY
48920: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48921: LD_VAR 0 4
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: LD_INT 4
48940: PUSH
48941: LD_INT 5
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: IN
48952: NOT
48953: PUSH
48954: LD_VAR 0 1
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: IN
48969: PUSH
48970: LD_VAR 0 5
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: IN
48989: NOT
48990: AND
48991: OR
48992: IFFALSE 48996
// exit ;
48994: GO 67387
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48996: LD_VAR 0 1
49000: PUSH
49001: LD_INT 6
49003: PUSH
49004: LD_INT 7
49006: PUSH
49007: LD_INT 8
49009: PUSH
49010: LD_INT 13
49012: PUSH
49013: LD_INT 12
49015: PUSH
49016: LD_INT 15
49018: PUSH
49019: LD_INT 11
49021: PUSH
49022: LD_INT 14
49024: PUSH
49025: LD_INT 10
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: IN
49039: IFFALSE 49049
// btype = b_lab ;
49041: LD_ADDR_VAR 0 1
49045: PUSH
49046: LD_INT 6
49048: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49049: LD_VAR 0 6
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: IN
49068: NOT
49069: PUSH
49070: LD_VAR 0 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: LD_INT 6
49089: PUSH
49090: LD_INT 36
49092: PUSH
49093: LD_INT 4
49095: PUSH
49096: LD_INT 5
49098: PUSH
49099: LD_INT 31
49101: PUSH
49102: LD_INT 32
49104: PUSH
49105: LD_INT 33
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: IN
49121: NOT
49122: PUSH
49123: LD_VAR 0 6
49127: PUSH
49128: LD_INT 1
49130: EQUAL
49131: AND
49132: OR
49133: PUSH
49134: LD_VAR 0 1
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: IN
49149: NOT
49150: PUSH
49151: LD_VAR 0 6
49155: PUSH
49156: LD_INT 2
49158: EQUAL
49159: AND
49160: OR
49161: IFFALSE 49171
// mode = 0 ;
49163: LD_ADDR_VAR 0 6
49167: PUSH
49168: LD_INT 0
49170: ST_TO_ADDR
// case mode of 0 :
49171: LD_VAR 0 6
49175: PUSH
49176: LD_INT 0
49178: DOUBLE
49179: EQUAL
49180: IFTRUE 49184
49182: GO 60637
49184: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49185: LD_ADDR_VAR 0 11
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 3
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49378: LD_ADDR_VAR 0 12
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 3
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49574: LD_ADDR_VAR 0 13
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49773: LD_ADDR_VAR 0 14
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49969: LD_ADDR_VAR 0 15
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50162: LD_ADDR_VAR 0 16
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: LD_INT 3
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: LD_INT 3
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50355: LD_ADDR_VAR 0 17
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: LD_INT 2
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50585: LD_ADDR_VAR 0 18
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50815: LD_ADDR_VAR 0 19
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51045: LD_ADDR_VAR 0 20
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51275: LD_ADDR_VAR 0 21
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51505: LD_ADDR_VAR 0 22
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51735: LD_ADDR_VAR 0 23
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52015: LD_ADDR_VAR 0 24
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52291: LD_ADDR_VAR 0 25
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 3
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52565: LD_ADDR_VAR 0 26
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52841: LD_ADDR_VAR 0 27
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53121: LD_ADDR_VAR 0 28
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 3
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 3
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53403: LD_ADDR_VAR 0 29
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53682: LD_ADDR_VAR 0 30
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53960: LD_ADDR_VAR 0 31
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54238: LD_ADDR_VAR 0 32
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54516: LD_ADDR_VAR 0 33
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54795: LD_ADDR_VAR 0 34
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55075: LD_ADDR_VAR 0 35
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55187: LD_ADDR_VAR 0 36
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55299: LD_ADDR_VAR 0 37
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55411: LD_ADDR_VAR 0 38
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55523: LD_ADDR_VAR 0 39
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55635: LD_ADDR_VAR 0 40
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55747: LD_ADDR_VAR 0 41
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 3
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56097: LD_ADDR_VAR 0 42
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56447: LD_ADDR_VAR 0 43
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56795: LD_ADDR_VAR 0 44
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 3
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57145: LD_ADDR_VAR 0 45
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57495: LD_ADDR_VAR 0 46
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 3
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57843: LD_ADDR_VAR 0 47
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57994: LD_ADDR_VAR 0 48
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58141: LD_ADDR_VAR 0 49
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58285: LD_ADDR_VAR 0 50
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58429: LD_ADDR_VAR 0 51
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58576: LD_ADDR_VAR 0 52
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58727: LD_ADDR_VAR 0 53
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58957: LD_ADDR_VAR 0 54
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 2
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59187: LD_ADDR_VAR 0 55
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59417: LD_ADDR_VAR 0 56
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: NEG
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: LD_INT 2
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59647: LD_ADDR_VAR 0 57
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59877: LD_ADDR_VAR 0 58
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: NEG
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60107: LD_ADDR_VAR 0 59
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60195: LD_ADDR_VAR 0 60
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60283: LD_ADDR_VAR 0 61
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60371: LD_ADDR_VAR 0 62
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60459: LD_ADDR_VAR 0 63
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60547: LD_ADDR_VAR 0 64
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// end ; 1 :
60635: GO 66532
60637: LD_INT 1
60639: DOUBLE
60640: EQUAL
60641: IFTRUE 60645
60643: GO 63268
60645: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60646: LD_ADDR_VAR 0 11
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60690: LD_ADDR_VAR 0 12
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60731: LD_ADDR_VAR 0 13
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: LD_INT 3
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: LIST
60770: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60771: LD_ADDR_VAR 0 14
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60812: LD_ADDR_VAR 0 15
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60856: LD_ADDR_VAR 0 16
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60902: LD_ADDR_VAR 0 17
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 3
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: LIST
60945: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60946: LD_ADDR_VAR 0 18
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60987: LD_ADDR_VAR 0 19
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: LIST
61026: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61027: LD_ADDR_VAR 0 20
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61068: LD_ADDR_VAR 0 21
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 3
61086: NEG
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61112: LD_ADDR_VAR 0 22
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 3
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: LIST
61157: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61158: LD_ADDR_VAR 0 23
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 3
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 4
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: LIST
61201: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61202: LD_ADDR_VAR 0 24
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 4
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61243: LD_ADDR_VAR 0 25
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 4
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 3
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61283: LD_ADDR_VAR 0 26
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 4
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61324: LD_ADDR_VAR 0 27
61328: PUSH
61329: LD_INT 3
61331: NEG
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: NEG
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 4
61353: NEG
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61368: LD_ADDR_VAR 0 28
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: LD_INT 4
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 4
61399: NEG
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61414: LD_ADDR_VAR 0 29
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 3
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 4
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 4
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: LD_INT 5
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 5
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 4
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 6
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 6
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: LD_INT 5
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61569: LD_ADDR_VAR 0 30
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 3
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 3
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 4
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 4
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 5
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 5
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 5
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 6
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 6
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61712: LD_ADDR_VAR 0 31
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: LD_INT 2
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: LD_INT 3
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 4
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 4
61759: PUSH
61760: LD_INT 4
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: LD_INT 4
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 5
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 5
61789: PUSH
61790: LD_INT 5
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 4
61799: PUSH
61800: LD_INT 5
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 6
61809: PUSH
61810: LD_INT 5
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 6
61819: PUSH
61820: LD_INT 6
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 5
61829: PUSH
61830: LD_INT 6
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61851: LD_ADDR_VAR 0 32
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 3
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 4
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: LD_INT 5
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 5
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 4
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 6
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: LD_INT 6
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61994: LD_ADDR_VAR 0 33
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 4
62046: NEG
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 4
62057: NEG
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 5
62080: NEG
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 5
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 5
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 6
62114: NEG
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 6
62125: NEG
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62149: LD_ADDR_VAR 0 34
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: NEG
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: LD_INT 4
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 4
62204: NEG
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: LD_INT 4
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 4
62228: NEG
62229: PUSH
62230: LD_INT 5
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 5
62240: NEG
62241: PUSH
62242: LD_INT 4
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 5
62252: NEG
62253: PUSH
62254: LD_INT 5
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 5
62264: NEG
62265: PUSH
62266: LD_INT 6
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 6
62276: NEG
62277: PUSH
62278: LD_INT 5
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 6
62288: NEG
62289: PUSH
62290: LD_INT 6
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62312: LD_ADDR_VAR 0 41
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: LD_INT 3
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62356: LD_ADDR_VAR 0 42
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62397: LD_ADDR_VAR 0 43
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62437: LD_ADDR_VAR 0 44
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: LD_INT 2
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: LIST
62477: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62478: LD_ADDR_VAR 0 45
62482: PUSH
62483: LD_INT 2
62485: NEG
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 2
62496: NEG
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62522: LD_ADDR_VAR 0 46
62526: PUSH
62527: LD_INT 2
62529: NEG
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: LD_INT 3
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62568: LD_ADDR_VAR 0 47
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62601: LD_ADDR_VAR 0 48
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62632: LD_ADDR_VAR 0 49
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62661: LD_ADDR_VAR 0 50
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: LD_INT 3
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62690: LD_ADDR_VAR 0 51
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62721: LD_ADDR_VAR 0 52
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62754: LD_ADDR_VAR 0 53
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 3
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62798: LD_ADDR_VAR 0 54
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 3
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: LIST
62838: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62839: LD_ADDR_VAR 0 55
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: LD_INT 3
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: LIST
62878: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62879: LD_ADDR_VAR 0 56
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 3
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: LIST
62919: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62920: LD_ADDR_VAR 0 57
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 3
62938: NEG
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62964: LD_ADDR_VAR 0 58
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: LD_INT 3
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: LD_INT 3
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63010: LD_ADDR_VAR 0 59
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63054: LD_ADDR_VAR 0 60
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63095: LD_ADDR_VAR 0 61
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: LIST
63134: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63135: LD_ADDR_VAR 0 62
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63176: LD_ADDR_VAR 0 63
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63220: LD_ADDR_VAR 0 64
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 2
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: ST_TO_ADDR
// end ; 2 :
63266: GO 66532
63268: LD_INT 2
63270: DOUBLE
63271: EQUAL
63272: IFTRUE 63276
63274: GO 66531
63276: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63277: LD_ADDR_VAR 0 29
63281: PUSH
63282: LD_INT 4
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 4
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 5
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 5
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 4
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 3
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 5
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 3
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 3
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 4
63397: PUSH
63398: LD_INT 3
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 4
63407: PUSH
63408: LD_INT 4
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 3
63417: PUSH
63418: LD_INT 4
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 3
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 4
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: LD_INT 4
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 4
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 3
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: LD_INT 4
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: LD_INT 5
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: LD_INT 5
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 4
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: LD_INT 5
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 3
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 4
63616: NEG
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: NEG
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 4
63639: NEG
63640: PUSH
63641: LD_INT 2
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 2
63651: NEG
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 4
63662: NEG
63663: PUSH
63664: LD_INT 4
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 4
63674: NEG
63675: PUSH
63676: LD_INT 5
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: NEG
63687: PUSH
63688: LD_INT 4
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 3
63698: NEG
63699: PUSH
63700: LD_INT 3
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 4
63710: NEG
63711: PUSH
63712: LD_INT 3
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 5
63722: NEG
63723: PUSH
63724: LD_INT 4
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 5
63734: NEG
63735: PUSH
63736: LD_INT 5
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: LD_INT 5
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 5
63758: NEG
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63815: LD_ADDR_VAR 0 30
63819: PUSH
63820: LD_INT 4
63822: PUSH
63823: LD_INT 4
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 4
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 5
63842: PUSH
63843: LD_INT 4
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 5
63852: PUSH
63853: LD_INT 5
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 4
63862: PUSH
63863: LD_INT 5
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: PUSH
63873: LD_INT 4
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 5
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: PUSH
63903: LD_INT 5
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 3
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 3
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 4
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 4
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 4
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 4
64005: NEG
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 4
64016: NEG
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 3
64039: NEG
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 4
64050: NEG
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 5
64061: NEG
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 5
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 5
64084: NEG
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 3
64096: NEG
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 3
64107: NEG
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 3
64119: NEG
64120: PUSH
64121: LD_INT 4
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: LD_INT 3
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 2
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 3
64155: NEG
64156: PUSH
64157: LD_INT 2
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 4
64167: NEG
64168: PUSH
64169: LD_INT 3
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 4
64179: NEG
64180: PUSH
64181: LD_INT 4
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: NEG
64192: PUSH
64193: LD_INT 4
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 4
64203: NEG
64204: PUSH
64205: LD_INT 2
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 4
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 5
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 4
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 3
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 4
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: LD_INT 5
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 5
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64362: LD_ADDR_VAR 0 31
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 4
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 3
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: LD_INT 4
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: LD_INT 5
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: LD_INT 5
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: LD_INT 4
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: LD_INT 3
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: LD_INT 5
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 2
64451: NEG
64452: PUSH
64453: LD_INT 3
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 3
64462: NEG
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 3
64473: NEG
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: NEG
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 3
64507: NEG
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 4
64518: NEG
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 4
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 4
64541: NEG
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 2
64553: NEG
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 4
64564: NEG
64565: PUSH
64566: LD_INT 4
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 4
64576: NEG
64577: PUSH
64578: LD_INT 5
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: NEG
64589: PUSH
64590: LD_INT 4
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 3
64600: NEG
64601: PUSH
64602: LD_INT 3
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 4
64612: NEG
64613: PUSH
64614: LD_INT 3
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 5
64624: NEG
64625: PUSH
64626: LD_INT 4
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 5
64636: NEG
64637: PUSH
64638: LD_INT 5
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: NEG
64649: PUSH
64650: LD_INT 5
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 5
64660: NEG
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 3
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 4
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 3
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: LD_INT 4
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 4
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 4
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 4
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 5
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 5
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 4
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 3
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 3
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 3
64846: PUSH
64847: LD_INT 2
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 5
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64912: LD_ADDR_VAR 0 32
64916: PUSH
64917: LD_INT 4
64919: NEG
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 4
64930: NEG
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: NEG
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 4
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 5
64975: NEG
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 5
64986: NEG
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 5
64998: NEG
64999: PUSH
65000: LD_INT 2
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: NEG
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 3
65021: NEG
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 3
65033: NEG
65034: PUSH
65035: LD_INT 4
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: NEG
65046: PUSH
65047: LD_INT 3
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 3
65069: NEG
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 4
65081: NEG
65082: PUSH
65083: LD_INT 3
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 4
65093: NEG
65094: PUSH
65095: LD_INT 4
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: NEG
65106: PUSH
65107: LD_INT 4
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 4
65117: NEG
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 4
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 5
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: LD_INT 4
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: LD_INT 3
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 4
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: LD_INT 5
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: NEG
65220: PUSH
65221: LD_INT 5
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 4
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 4
65314: PUSH
65315: LD_INT 2
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 4
65324: PUSH
65325: LD_INT 4
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 4
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 5
65344: PUSH
65345: LD_INT 4
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 5
65354: PUSH
65355: LD_INT 5
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 4
65364: PUSH
65365: LD_INT 5
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: LD_INT 4
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 5
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: LD_INT 5
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65459: LD_ADDR_VAR 0 33
65463: PUSH
65464: LD_INT 4
65466: NEG
65467: PUSH
65468: LD_INT 4
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 4
65478: NEG
65479: PUSH
65480: LD_INT 5
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 3
65490: NEG
65491: PUSH
65492: LD_INT 4
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 3
65502: NEG
65503: PUSH
65504: LD_INT 3
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 4
65514: NEG
65515: PUSH
65516: LD_INT 3
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 5
65526: NEG
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 5
65538: NEG
65539: PUSH
65540: LD_INT 5
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 3
65550: NEG
65551: PUSH
65552: LD_INT 5
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 5
65562: NEG
65563: PUSH
65564: LD_INT 3
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: LD_INT 4
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: LD_INT 3
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: LD_INT 4
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: NEG
65665: PUSH
65666: LD_INT 4
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 4
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 4
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 5
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 3
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 3
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 5
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 3
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 3
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 4
65789: PUSH
65790: LD_INT 3
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: LD_INT 4
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: LD_INT 4
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: LD_INT 3
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: LD_INT 2
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 4
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: LD_INT 4
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 4
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 3
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: PUSH
65880: LD_INT 4
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: LD_INT 5
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: LD_INT 5
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: LD_INT 4
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: LD_INT 5
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65997: LD_ADDR_VAR 0 34
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: LD_INT 4
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 5
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 4
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: LD_INT 3
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: LD_INT 5
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 3
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: LD_INT 5
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 4
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 4
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 2
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 2
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 2
66178: PUSH
66179: LD_INT 2
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 4
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 4
66199: PUSH
66200: LD_INT 4
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 4
66209: PUSH
66210: LD_INT 3
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 5
66219: PUSH
66220: LD_INT 4
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 5
66229: PUSH
66230: LD_INT 5
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 4
66239: PUSH
66240: LD_INT 5
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 3
66249: PUSH
66250: LD_INT 4
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: LD_INT 3
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 5
66269: PUSH
66270: LD_INT 3
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: LD_INT 5
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: LD_INT 3
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 4
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: LD_INT 4
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: LD_INT 2
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: LD_INT 4
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 2
66371: NEG
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 4
66382: NEG
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 4
66393: NEG
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: NEG
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: LD_INT 1
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 4
66427: NEG
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 5
66438: NEG
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 5
66449: NEG
66450: PUSH
66451: LD_INT 1
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 5
66461: NEG
66462: PUSH
66463: LD_INT 2
66465: NEG
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 3
66473: NEG
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: ST_TO_ADDR
// end ; end ;
66529: GO 66532
66531: POP
// case btype of b_depot , b_warehouse :
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 0
66539: DOUBLE
66540: EQUAL
66541: IFTRUE 66551
66543: LD_INT 1
66545: DOUBLE
66546: EQUAL
66547: IFTRUE 66551
66549: GO 66752
66551: POP
// case nation of nation_american :
66552: LD_VAR 0 5
66556: PUSH
66557: LD_INT 1
66559: DOUBLE
66560: EQUAL
66561: IFTRUE 66565
66563: GO 66621
66565: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66566: LD_ADDR_VAR 0 9
66570: PUSH
66571: LD_VAR 0 11
66575: PUSH
66576: LD_VAR 0 12
66580: PUSH
66581: LD_VAR 0 13
66585: PUSH
66586: LD_VAR 0 14
66590: PUSH
66591: LD_VAR 0 15
66595: PUSH
66596: LD_VAR 0 16
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: PUSH
66609: LD_VAR 0 4
66613: PUSH
66614: LD_INT 1
66616: PLUS
66617: ARRAY
66618: ST_TO_ADDR
66619: GO 66750
66621: LD_INT 2
66623: DOUBLE
66624: EQUAL
66625: IFTRUE 66629
66627: GO 66685
66629: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66630: LD_ADDR_VAR 0 9
66634: PUSH
66635: LD_VAR 0 17
66639: PUSH
66640: LD_VAR 0 18
66644: PUSH
66645: LD_VAR 0 19
66649: PUSH
66650: LD_VAR 0 20
66654: PUSH
66655: LD_VAR 0 21
66659: PUSH
66660: LD_VAR 0 22
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: PUSH
66673: LD_VAR 0 4
66677: PUSH
66678: LD_INT 1
66680: PLUS
66681: ARRAY
66682: ST_TO_ADDR
66683: GO 66750
66685: LD_INT 3
66687: DOUBLE
66688: EQUAL
66689: IFTRUE 66693
66691: GO 66749
66693: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66694: LD_ADDR_VAR 0 9
66698: PUSH
66699: LD_VAR 0 23
66703: PUSH
66704: LD_VAR 0 24
66708: PUSH
66709: LD_VAR 0 25
66713: PUSH
66714: LD_VAR 0 26
66718: PUSH
66719: LD_VAR 0 27
66723: PUSH
66724: LD_VAR 0 28
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: PUSH
66737: LD_VAR 0 4
66741: PUSH
66742: LD_INT 1
66744: PLUS
66745: ARRAY
66746: ST_TO_ADDR
66747: GO 66750
66749: POP
66750: GO 67305
66752: LD_INT 2
66754: DOUBLE
66755: EQUAL
66756: IFTRUE 66766
66758: LD_INT 3
66760: DOUBLE
66761: EQUAL
66762: IFTRUE 66766
66764: GO 66822
66766: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66767: LD_ADDR_VAR 0 9
66771: PUSH
66772: LD_VAR 0 29
66776: PUSH
66777: LD_VAR 0 30
66781: PUSH
66782: LD_VAR 0 31
66786: PUSH
66787: LD_VAR 0 32
66791: PUSH
66792: LD_VAR 0 33
66796: PUSH
66797: LD_VAR 0 34
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: PUSH
66810: LD_VAR 0 4
66814: PUSH
66815: LD_INT 1
66817: PLUS
66818: ARRAY
66819: ST_TO_ADDR
66820: GO 67305
66822: LD_INT 16
66824: DOUBLE
66825: EQUAL
66826: IFTRUE 66884
66828: LD_INT 17
66830: DOUBLE
66831: EQUAL
66832: IFTRUE 66884
66834: LD_INT 18
66836: DOUBLE
66837: EQUAL
66838: IFTRUE 66884
66840: LD_INT 19
66842: DOUBLE
66843: EQUAL
66844: IFTRUE 66884
66846: LD_INT 22
66848: DOUBLE
66849: EQUAL
66850: IFTRUE 66884
66852: LD_INT 20
66854: DOUBLE
66855: EQUAL
66856: IFTRUE 66884
66858: LD_INT 21
66860: DOUBLE
66861: EQUAL
66862: IFTRUE 66884
66864: LD_INT 23
66866: DOUBLE
66867: EQUAL
66868: IFTRUE 66884
66870: LD_INT 24
66872: DOUBLE
66873: EQUAL
66874: IFTRUE 66884
66876: LD_INT 25
66878: DOUBLE
66879: EQUAL
66880: IFTRUE 66884
66882: GO 66940
66884: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66885: LD_ADDR_VAR 0 9
66889: PUSH
66890: LD_VAR 0 35
66894: PUSH
66895: LD_VAR 0 36
66899: PUSH
66900: LD_VAR 0 37
66904: PUSH
66905: LD_VAR 0 38
66909: PUSH
66910: LD_VAR 0 39
66914: PUSH
66915: LD_VAR 0 40
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: PUSH
66928: LD_VAR 0 4
66932: PUSH
66933: LD_INT 1
66935: PLUS
66936: ARRAY
66937: ST_TO_ADDR
66938: GO 67305
66940: LD_INT 6
66942: DOUBLE
66943: EQUAL
66944: IFTRUE 66996
66946: LD_INT 7
66948: DOUBLE
66949: EQUAL
66950: IFTRUE 66996
66952: LD_INT 8
66954: DOUBLE
66955: EQUAL
66956: IFTRUE 66996
66958: LD_INT 13
66960: DOUBLE
66961: EQUAL
66962: IFTRUE 66996
66964: LD_INT 12
66966: DOUBLE
66967: EQUAL
66968: IFTRUE 66996
66970: LD_INT 15
66972: DOUBLE
66973: EQUAL
66974: IFTRUE 66996
66976: LD_INT 11
66978: DOUBLE
66979: EQUAL
66980: IFTRUE 66996
66982: LD_INT 14
66984: DOUBLE
66985: EQUAL
66986: IFTRUE 66996
66988: LD_INT 10
66990: DOUBLE
66991: EQUAL
66992: IFTRUE 66996
66994: GO 67052
66996: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66997: LD_ADDR_VAR 0 9
67001: PUSH
67002: LD_VAR 0 41
67006: PUSH
67007: LD_VAR 0 42
67011: PUSH
67012: LD_VAR 0 43
67016: PUSH
67017: LD_VAR 0 44
67021: PUSH
67022: LD_VAR 0 45
67026: PUSH
67027: LD_VAR 0 46
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: PUSH
67040: LD_VAR 0 4
67044: PUSH
67045: LD_INT 1
67047: PLUS
67048: ARRAY
67049: ST_TO_ADDR
67050: GO 67305
67052: LD_INT 36
67054: DOUBLE
67055: EQUAL
67056: IFTRUE 67060
67058: GO 67116
67060: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67061: LD_ADDR_VAR 0 9
67065: PUSH
67066: LD_VAR 0 47
67070: PUSH
67071: LD_VAR 0 48
67075: PUSH
67076: LD_VAR 0 49
67080: PUSH
67081: LD_VAR 0 50
67085: PUSH
67086: LD_VAR 0 51
67090: PUSH
67091: LD_VAR 0 52
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: PUSH
67104: LD_VAR 0 4
67108: PUSH
67109: LD_INT 1
67111: PLUS
67112: ARRAY
67113: ST_TO_ADDR
67114: GO 67305
67116: LD_INT 4
67118: DOUBLE
67119: EQUAL
67120: IFTRUE 67142
67122: LD_INT 5
67124: DOUBLE
67125: EQUAL
67126: IFTRUE 67142
67128: LD_INT 34
67130: DOUBLE
67131: EQUAL
67132: IFTRUE 67142
67134: LD_INT 37
67136: DOUBLE
67137: EQUAL
67138: IFTRUE 67142
67140: GO 67198
67142: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67143: LD_ADDR_VAR 0 9
67147: PUSH
67148: LD_VAR 0 53
67152: PUSH
67153: LD_VAR 0 54
67157: PUSH
67158: LD_VAR 0 55
67162: PUSH
67163: LD_VAR 0 56
67167: PUSH
67168: LD_VAR 0 57
67172: PUSH
67173: LD_VAR 0 58
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: PUSH
67186: LD_VAR 0 4
67190: PUSH
67191: LD_INT 1
67193: PLUS
67194: ARRAY
67195: ST_TO_ADDR
67196: GO 67305
67198: LD_INT 31
67200: DOUBLE
67201: EQUAL
67202: IFTRUE 67248
67204: LD_INT 32
67206: DOUBLE
67207: EQUAL
67208: IFTRUE 67248
67210: LD_INT 33
67212: DOUBLE
67213: EQUAL
67214: IFTRUE 67248
67216: LD_INT 27
67218: DOUBLE
67219: EQUAL
67220: IFTRUE 67248
67222: LD_INT 26
67224: DOUBLE
67225: EQUAL
67226: IFTRUE 67248
67228: LD_INT 28
67230: DOUBLE
67231: EQUAL
67232: IFTRUE 67248
67234: LD_INT 29
67236: DOUBLE
67237: EQUAL
67238: IFTRUE 67248
67240: LD_INT 30
67242: DOUBLE
67243: EQUAL
67244: IFTRUE 67248
67246: GO 67304
67248: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67249: LD_ADDR_VAR 0 9
67253: PUSH
67254: LD_VAR 0 59
67258: PUSH
67259: LD_VAR 0 60
67263: PUSH
67264: LD_VAR 0 61
67268: PUSH
67269: LD_VAR 0 62
67273: PUSH
67274: LD_VAR 0 63
67278: PUSH
67279: LD_VAR 0 64
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: PUSH
67292: LD_VAR 0 4
67296: PUSH
67297: LD_INT 1
67299: PLUS
67300: ARRAY
67301: ST_TO_ADDR
67302: GO 67305
67304: POP
// temp_list2 = [ ] ;
67305: LD_ADDR_VAR 0 10
67309: PUSH
67310: EMPTY
67311: ST_TO_ADDR
// for i in temp_list do
67312: LD_ADDR_VAR 0 8
67316: PUSH
67317: LD_VAR 0 9
67321: PUSH
67322: FOR_IN
67323: IFFALSE 67375
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67325: LD_ADDR_VAR 0 10
67329: PUSH
67330: LD_VAR 0 10
67334: PUSH
67335: LD_VAR 0 8
67339: PUSH
67340: LD_INT 1
67342: ARRAY
67343: PUSH
67344: LD_VAR 0 2
67348: PLUS
67349: PUSH
67350: LD_VAR 0 8
67354: PUSH
67355: LD_INT 2
67357: ARRAY
67358: PUSH
67359: LD_VAR 0 3
67363: PLUS
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: EMPTY
67370: LIST
67371: ADD
67372: ST_TO_ADDR
67373: GO 67322
67375: POP
67376: POP
// result = temp_list2 ;
67377: LD_ADDR_VAR 0 7
67381: PUSH
67382: LD_VAR 0 10
67386: ST_TO_ADDR
// end ;
67387: LD_VAR 0 7
67391: RET
// export function EnemyInRange ( unit , dist ) ; begin
67392: LD_INT 0
67394: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67395: LD_ADDR_VAR 0 3
67399: PUSH
67400: LD_VAR 0 1
67404: PPUSH
67405: CALL_OW 255
67409: PPUSH
67410: LD_VAR 0 1
67414: PPUSH
67415: CALL_OW 250
67419: PPUSH
67420: LD_VAR 0 1
67424: PPUSH
67425: CALL_OW 251
67429: PPUSH
67430: LD_VAR 0 2
67434: PPUSH
67435: CALL 40794 0 4
67439: PUSH
67440: LD_INT 4
67442: ARRAY
67443: ST_TO_ADDR
// end ;
67444: LD_VAR 0 3
67448: RET
// export function PlayerSeeMe ( unit ) ; begin
67449: LD_INT 0
67451: PPUSH
// result := See ( your_side , unit ) ;
67452: LD_ADDR_VAR 0 2
67456: PUSH
67457: LD_OWVAR 2
67461: PPUSH
67462: LD_VAR 0 1
67466: PPUSH
67467: CALL_OW 292
67471: ST_TO_ADDR
// end ;
67472: LD_VAR 0 2
67476: RET
// export function ReverseDir ( unit ) ; begin
67477: LD_INT 0
67479: PPUSH
// if not unit then
67480: LD_VAR 0 1
67484: NOT
67485: IFFALSE 67489
// exit ;
67487: GO 67512
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67489: LD_ADDR_VAR 0 2
67493: PUSH
67494: LD_VAR 0 1
67498: PPUSH
67499: CALL_OW 254
67503: PUSH
67504: LD_INT 3
67506: PLUS
67507: PUSH
67508: LD_INT 6
67510: MOD
67511: ST_TO_ADDR
// end ;
67512: LD_VAR 0 2
67516: RET
// export function ReverseArray ( array ) ; var i ; begin
67517: LD_INT 0
67519: PPUSH
67520: PPUSH
// if not array then
67521: LD_VAR 0 1
67525: NOT
67526: IFFALSE 67530
// exit ;
67528: GO 67585
// result := [ ] ;
67530: LD_ADDR_VAR 0 2
67534: PUSH
67535: EMPTY
67536: ST_TO_ADDR
// for i := array downto 1 do
67537: LD_ADDR_VAR 0 3
67541: PUSH
67542: DOUBLE
67543: LD_VAR 0 1
67547: INC
67548: ST_TO_ADDR
67549: LD_INT 1
67551: PUSH
67552: FOR_DOWNTO
67553: IFFALSE 67583
// result := Join ( result , array [ i ] ) ;
67555: LD_ADDR_VAR 0 2
67559: PUSH
67560: LD_VAR 0 2
67564: PPUSH
67565: LD_VAR 0 1
67569: PUSH
67570: LD_VAR 0 3
67574: ARRAY
67575: PPUSH
67576: CALL 72229 0 2
67580: ST_TO_ADDR
67581: GO 67552
67583: POP
67584: POP
// end ;
67585: LD_VAR 0 2
67589: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67590: LD_INT 0
67592: PPUSH
67593: PPUSH
67594: PPUSH
67595: PPUSH
67596: PPUSH
67597: PPUSH
// if not unit or not hexes then
67598: LD_VAR 0 1
67602: NOT
67603: PUSH
67604: LD_VAR 0 2
67608: NOT
67609: OR
67610: IFFALSE 67614
// exit ;
67612: GO 67737
// dist := 9999 ;
67614: LD_ADDR_VAR 0 5
67618: PUSH
67619: LD_INT 9999
67621: ST_TO_ADDR
// for i = 1 to hexes do
67622: LD_ADDR_VAR 0 4
67626: PUSH
67627: DOUBLE
67628: LD_INT 1
67630: DEC
67631: ST_TO_ADDR
67632: LD_VAR 0 2
67636: PUSH
67637: FOR_TO
67638: IFFALSE 67725
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67640: LD_ADDR_VAR 0 6
67644: PUSH
67645: LD_VAR 0 1
67649: PPUSH
67650: LD_VAR 0 2
67654: PUSH
67655: LD_VAR 0 4
67659: ARRAY
67660: PUSH
67661: LD_INT 1
67663: ARRAY
67664: PPUSH
67665: LD_VAR 0 2
67669: PUSH
67670: LD_VAR 0 4
67674: ARRAY
67675: PUSH
67676: LD_INT 2
67678: ARRAY
67679: PPUSH
67680: CALL_OW 297
67684: ST_TO_ADDR
// if tdist < dist then
67685: LD_VAR 0 6
67689: PUSH
67690: LD_VAR 0 5
67694: LESS
67695: IFFALSE 67723
// begin hex := hexes [ i ] ;
67697: LD_ADDR_VAR 0 8
67701: PUSH
67702: LD_VAR 0 2
67706: PUSH
67707: LD_VAR 0 4
67711: ARRAY
67712: ST_TO_ADDR
// dist := tdist ;
67713: LD_ADDR_VAR 0 5
67717: PUSH
67718: LD_VAR 0 6
67722: ST_TO_ADDR
// end ; end ;
67723: GO 67637
67725: POP
67726: POP
// result := hex ;
67727: LD_ADDR_VAR 0 3
67731: PUSH
67732: LD_VAR 0 8
67736: ST_TO_ADDR
// end ;
67737: LD_VAR 0 3
67741: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67742: LD_INT 0
67744: PPUSH
67745: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67746: LD_VAR 0 1
67750: NOT
67751: PUSH
67752: LD_VAR 0 1
67756: PUSH
67757: LD_INT 21
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 23
67769: PUSH
67770: LD_INT 2
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PPUSH
67781: CALL_OW 69
67785: IN
67786: NOT
67787: OR
67788: IFFALSE 67792
// exit ;
67790: GO 67839
// for i = 1 to 3 do
67792: LD_ADDR_VAR 0 3
67796: PUSH
67797: DOUBLE
67798: LD_INT 1
67800: DEC
67801: ST_TO_ADDR
67802: LD_INT 3
67804: PUSH
67805: FOR_TO
67806: IFFALSE 67837
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67808: LD_VAR 0 1
67812: PPUSH
67813: CALL_OW 250
67817: PPUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: CALL_OW 251
67827: PPUSH
67828: LD_INT 1
67830: PPUSH
67831: CALL_OW 453
67835: GO 67805
67837: POP
67838: POP
// end ;
67839: LD_VAR 0 2
67843: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67844: LD_INT 0
67846: PPUSH
67847: PPUSH
67848: PPUSH
67849: PPUSH
67850: PPUSH
67851: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67852: LD_VAR 0 1
67856: NOT
67857: PUSH
67858: LD_VAR 0 2
67862: NOT
67863: OR
67864: PUSH
67865: LD_VAR 0 1
67869: PPUSH
67870: CALL_OW 314
67874: OR
67875: IFFALSE 67879
// exit ;
67877: GO 68346
// if GetLives ( i ) < 250 then
67879: LD_VAR 0 4
67883: PPUSH
67884: CALL_OW 256
67888: PUSH
67889: LD_INT 250
67891: LESS
67892: IFFALSE 67905
// begin ComAutodestruct ( i ) ;
67894: LD_VAR 0 4
67898: PPUSH
67899: CALL 67742 0 1
// exit ;
67903: GO 68346
// end ; x := GetX ( enemy_unit ) ;
67905: LD_ADDR_VAR 0 7
67909: PUSH
67910: LD_VAR 0 2
67914: PPUSH
67915: CALL_OW 250
67919: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67920: LD_ADDR_VAR 0 8
67924: PUSH
67925: LD_VAR 0 2
67929: PPUSH
67930: CALL_OW 251
67934: ST_TO_ADDR
// if not x or not y then
67935: LD_VAR 0 7
67939: NOT
67940: PUSH
67941: LD_VAR 0 8
67945: NOT
67946: OR
67947: IFFALSE 67951
// exit ;
67949: GO 68346
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67951: LD_ADDR_VAR 0 6
67955: PUSH
67956: LD_VAR 0 7
67960: PPUSH
67961: LD_INT 0
67963: PPUSH
67964: LD_INT 4
67966: PPUSH
67967: CALL_OW 272
67971: PUSH
67972: LD_VAR 0 8
67976: PPUSH
67977: LD_INT 0
67979: PPUSH
67980: LD_INT 4
67982: PPUSH
67983: CALL_OW 273
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_VAR 0 7
67996: PPUSH
67997: LD_INT 1
67999: PPUSH
68000: LD_INT 4
68002: PPUSH
68003: CALL_OW 272
68007: PUSH
68008: LD_VAR 0 8
68012: PPUSH
68013: LD_INT 1
68015: PPUSH
68016: LD_INT 4
68018: PPUSH
68019: CALL_OW 273
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_VAR 0 7
68032: PPUSH
68033: LD_INT 2
68035: PPUSH
68036: LD_INT 4
68038: PPUSH
68039: CALL_OW 272
68043: PUSH
68044: LD_VAR 0 8
68048: PPUSH
68049: LD_INT 2
68051: PPUSH
68052: LD_INT 4
68054: PPUSH
68055: CALL_OW 273
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_VAR 0 7
68068: PPUSH
68069: LD_INT 3
68071: PPUSH
68072: LD_INT 4
68074: PPUSH
68075: CALL_OW 272
68079: PUSH
68080: LD_VAR 0 8
68084: PPUSH
68085: LD_INT 3
68087: PPUSH
68088: LD_INT 4
68090: PPUSH
68091: CALL_OW 273
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_VAR 0 7
68104: PPUSH
68105: LD_INT 4
68107: PPUSH
68108: LD_INT 4
68110: PPUSH
68111: CALL_OW 272
68115: PUSH
68116: LD_VAR 0 8
68120: PPUSH
68121: LD_INT 4
68123: PPUSH
68124: LD_INT 4
68126: PPUSH
68127: CALL_OW 273
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_VAR 0 7
68140: PPUSH
68141: LD_INT 5
68143: PPUSH
68144: LD_INT 4
68146: PPUSH
68147: CALL_OW 272
68151: PUSH
68152: LD_VAR 0 8
68156: PPUSH
68157: LD_INT 5
68159: PPUSH
68160: LD_INT 4
68162: PPUSH
68163: CALL_OW 273
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: ST_TO_ADDR
// for i = tmp downto 1 do
68180: LD_ADDR_VAR 0 4
68184: PUSH
68185: DOUBLE
68186: LD_VAR 0 6
68190: INC
68191: ST_TO_ADDR
68192: LD_INT 1
68194: PUSH
68195: FOR_DOWNTO
68196: IFFALSE 68297
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68198: LD_VAR 0 6
68202: PUSH
68203: LD_VAR 0 4
68207: ARRAY
68208: PUSH
68209: LD_INT 1
68211: ARRAY
68212: PPUSH
68213: LD_VAR 0 6
68217: PUSH
68218: LD_VAR 0 4
68222: ARRAY
68223: PUSH
68224: LD_INT 2
68226: ARRAY
68227: PPUSH
68228: CALL_OW 488
68232: NOT
68233: PUSH
68234: LD_VAR 0 6
68238: PUSH
68239: LD_VAR 0 4
68243: ARRAY
68244: PUSH
68245: LD_INT 1
68247: ARRAY
68248: PPUSH
68249: LD_VAR 0 6
68253: PUSH
68254: LD_VAR 0 4
68258: ARRAY
68259: PUSH
68260: LD_INT 2
68262: ARRAY
68263: PPUSH
68264: CALL_OW 428
68268: PUSH
68269: LD_INT 0
68271: NONEQUAL
68272: OR
68273: IFFALSE 68295
// tmp := Delete ( tmp , i ) ;
68275: LD_ADDR_VAR 0 6
68279: PUSH
68280: LD_VAR 0 6
68284: PPUSH
68285: LD_VAR 0 4
68289: PPUSH
68290: CALL_OW 3
68294: ST_TO_ADDR
68295: GO 68195
68297: POP
68298: POP
// j := GetClosestHex ( unit , tmp ) ;
68299: LD_ADDR_VAR 0 5
68303: PUSH
68304: LD_VAR 0 1
68308: PPUSH
68309: LD_VAR 0 6
68313: PPUSH
68314: CALL 67590 0 2
68318: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68319: LD_VAR 0 1
68323: PPUSH
68324: LD_VAR 0 5
68328: PUSH
68329: LD_INT 1
68331: ARRAY
68332: PPUSH
68333: LD_VAR 0 5
68337: PUSH
68338: LD_INT 2
68340: ARRAY
68341: PPUSH
68342: CALL_OW 111
// end ;
68346: LD_VAR 0 3
68350: RET
// export function PrepareApemanSoldier ( ) ; begin
68351: LD_INT 0
68353: PPUSH
// uc_nation := 0 ;
68354: LD_ADDR_OWVAR 21
68358: PUSH
68359: LD_INT 0
68361: ST_TO_ADDR
// hc_sex := sex_male ;
68362: LD_ADDR_OWVAR 27
68366: PUSH
68367: LD_INT 1
68369: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68370: LD_ADDR_OWVAR 28
68374: PUSH
68375: LD_INT 15
68377: ST_TO_ADDR
// hc_gallery :=  ;
68378: LD_ADDR_OWVAR 33
68382: PUSH
68383: LD_STRING 
68385: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68386: LD_ADDR_OWVAR 31
68390: PUSH
68391: LD_INT 0
68393: PPUSH
68394: LD_INT 3
68396: PPUSH
68397: CALL_OW 12
68401: PUSH
68402: LD_INT 0
68404: PPUSH
68405: LD_INT 3
68407: PPUSH
68408: CALL_OW 12
68412: PUSH
68413: LD_INT 0
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: ST_TO_ADDR
// end ;
68425: LD_VAR 0 1
68429: RET
// export function PrepareApemanEngineer ( ) ; begin
68430: LD_INT 0
68432: PPUSH
// uc_nation := 0 ;
68433: LD_ADDR_OWVAR 21
68437: PUSH
68438: LD_INT 0
68440: ST_TO_ADDR
// hc_sex := sex_male ;
68441: LD_ADDR_OWVAR 27
68445: PUSH
68446: LD_INT 1
68448: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68449: LD_ADDR_OWVAR 28
68453: PUSH
68454: LD_INT 16
68456: ST_TO_ADDR
// hc_gallery :=  ;
68457: LD_ADDR_OWVAR 33
68461: PUSH
68462: LD_STRING 
68464: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68465: LD_ADDR_OWVAR 31
68469: PUSH
68470: LD_INT 0
68472: PPUSH
68473: LD_INT 3
68475: PPUSH
68476: CALL_OW 12
68480: PUSH
68481: LD_INT 0
68483: PPUSH
68484: LD_INT 3
68486: PPUSH
68487: CALL_OW 12
68491: PUSH
68492: LD_INT 0
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: ST_TO_ADDR
// end ;
68504: LD_VAR 0 1
68508: RET
// export function PrepareApeman ( agressivity ) ; begin
68509: LD_INT 0
68511: PPUSH
// uc_side := 0 ;
68512: LD_ADDR_OWVAR 20
68516: PUSH
68517: LD_INT 0
68519: ST_TO_ADDR
// uc_nation := 0 ;
68520: LD_ADDR_OWVAR 21
68524: PUSH
68525: LD_INT 0
68527: ST_TO_ADDR
// hc_sex := sex_male ;
68528: LD_ADDR_OWVAR 27
68532: PUSH
68533: LD_INT 1
68535: ST_TO_ADDR
// hc_class := class_apeman ;
68536: LD_ADDR_OWVAR 28
68540: PUSH
68541: LD_INT 12
68543: ST_TO_ADDR
// hc_gallery :=  ;
68544: LD_ADDR_OWVAR 33
68548: PUSH
68549: LD_STRING 
68551: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68552: LD_ADDR_OWVAR 35
68556: PUSH
68557: LD_VAR 0 1
68561: NEG
68562: PPUSH
68563: LD_VAR 0 1
68567: PPUSH
68568: CALL_OW 12
68572: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68573: LD_ADDR_OWVAR 31
68577: PUSH
68578: LD_INT 0
68580: PPUSH
68581: LD_INT 3
68583: PPUSH
68584: CALL_OW 12
68588: PUSH
68589: LD_INT 0
68591: PPUSH
68592: LD_INT 3
68594: PPUSH
68595: CALL_OW 12
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: ST_TO_ADDR
// end ;
68612: LD_VAR 0 2
68616: RET
// export function PrepareTiger ( agressivity ) ; begin
68617: LD_INT 0
68619: PPUSH
// uc_side := 0 ;
68620: LD_ADDR_OWVAR 20
68624: PUSH
68625: LD_INT 0
68627: ST_TO_ADDR
// uc_nation := 0 ;
68628: LD_ADDR_OWVAR 21
68632: PUSH
68633: LD_INT 0
68635: ST_TO_ADDR
// hc_class := class_tiger ;
68636: LD_ADDR_OWVAR 28
68640: PUSH
68641: LD_INT 14
68643: ST_TO_ADDR
// hc_gallery :=  ;
68644: LD_ADDR_OWVAR 33
68648: PUSH
68649: LD_STRING 
68651: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68652: LD_ADDR_OWVAR 35
68656: PUSH
68657: LD_VAR 0 1
68661: NEG
68662: PPUSH
68663: LD_VAR 0 1
68667: PPUSH
68668: CALL_OW 12
68672: ST_TO_ADDR
// end ;
68673: LD_VAR 0 2
68677: RET
// export function PrepareEnchidna ( ) ; begin
68678: LD_INT 0
68680: PPUSH
// uc_side := 0 ;
68681: LD_ADDR_OWVAR 20
68685: PUSH
68686: LD_INT 0
68688: ST_TO_ADDR
// uc_nation := 0 ;
68689: LD_ADDR_OWVAR 21
68693: PUSH
68694: LD_INT 0
68696: ST_TO_ADDR
// hc_class := class_baggie ;
68697: LD_ADDR_OWVAR 28
68701: PUSH
68702: LD_INT 13
68704: ST_TO_ADDR
// hc_gallery :=  ;
68705: LD_ADDR_OWVAR 33
68709: PUSH
68710: LD_STRING 
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 1
68717: RET
// export function PrepareFrog ( ) ; begin
68718: LD_INT 0
68720: PPUSH
// uc_side := 0 ;
68721: LD_ADDR_OWVAR 20
68725: PUSH
68726: LD_INT 0
68728: ST_TO_ADDR
// uc_nation := 0 ;
68729: LD_ADDR_OWVAR 21
68733: PUSH
68734: LD_INT 0
68736: ST_TO_ADDR
// hc_class := class_frog ;
68737: LD_ADDR_OWVAR 28
68741: PUSH
68742: LD_INT 19
68744: ST_TO_ADDR
// hc_gallery :=  ;
68745: LD_ADDR_OWVAR 33
68749: PUSH
68750: LD_STRING 
68752: ST_TO_ADDR
// end ;
68753: LD_VAR 0 1
68757: RET
// export function PrepareFish ( ) ; begin
68758: LD_INT 0
68760: PPUSH
// uc_side := 0 ;
68761: LD_ADDR_OWVAR 20
68765: PUSH
68766: LD_INT 0
68768: ST_TO_ADDR
// uc_nation := 0 ;
68769: LD_ADDR_OWVAR 21
68773: PUSH
68774: LD_INT 0
68776: ST_TO_ADDR
// hc_class := class_fish ;
68777: LD_ADDR_OWVAR 28
68781: PUSH
68782: LD_INT 20
68784: ST_TO_ADDR
// hc_gallery :=  ;
68785: LD_ADDR_OWVAR 33
68789: PUSH
68790: LD_STRING 
68792: ST_TO_ADDR
// end ;
68793: LD_VAR 0 1
68797: RET
// export function PrepareBird ( ) ; begin
68798: LD_INT 0
68800: PPUSH
// uc_side := 0 ;
68801: LD_ADDR_OWVAR 20
68805: PUSH
68806: LD_INT 0
68808: ST_TO_ADDR
// uc_nation := 0 ;
68809: LD_ADDR_OWVAR 21
68813: PUSH
68814: LD_INT 0
68816: ST_TO_ADDR
// hc_class := class_phororhacos ;
68817: LD_ADDR_OWVAR 28
68821: PUSH
68822: LD_INT 18
68824: ST_TO_ADDR
// hc_gallery :=  ;
68825: LD_ADDR_OWVAR 33
68829: PUSH
68830: LD_STRING 
68832: ST_TO_ADDR
// end ;
68833: LD_VAR 0 1
68837: RET
// export function PrepareHorse ( ) ; begin
68838: LD_INT 0
68840: PPUSH
// uc_side := 0 ;
68841: LD_ADDR_OWVAR 20
68845: PUSH
68846: LD_INT 0
68848: ST_TO_ADDR
// uc_nation := 0 ;
68849: LD_ADDR_OWVAR 21
68853: PUSH
68854: LD_INT 0
68856: ST_TO_ADDR
// hc_class := class_horse ;
68857: LD_ADDR_OWVAR 28
68861: PUSH
68862: LD_INT 21
68864: ST_TO_ADDR
// hc_gallery :=  ;
68865: LD_ADDR_OWVAR 33
68869: PUSH
68870: LD_STRING 
68872: ST_TO_ADDR
// end ;
68873: LD_VAR 0 1
68877: RET
// export function PrepareMastodont ( ) ; begin
68878: LD_INT 0
68880: PPUSH
// uc_side := 0 ;
68881: LD_ADDR_OWVAR 20
68885: PUSH
68886: LD_INT 0
68888: ST_TO_ADDR
// uc_nation := 0 ;
68889: LD_ADDR_OWVAR 21
68893: PUSH
68894: LD_INT 0
68896: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68897: LD_ADDR_OWVAR 37
68901: PUSH
68902: LD_INT 31
68904: ST_TO_ADDR
// vc_control := control_rider ;
68905: LD_ADDR_OWVAR 38
68909: PUSH
68910: LD_INT 4
68912: ST_TO_ADDR
// end ;
68913: LD_VAR 0 1
68917: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68918: LD_INT 0
68920: PPUSH
68921: PPUSH
68922: PPUSH
// uc_side = 0 ;
68923: LD_ADDR_OWVAR 20
68927: PUSH
68928: LD_INT 0
68930: ST_TO_ADDR
// uc_nation = 0 ;
68931: LD_ADDR_OWVAR 21
68935: PUSH
68936: LD_INT 0
68938: ST_TO_ADDR
// InitHc_All ( ) ;
68939: CALL_OW 584
// InitVc ;
68943: CALL_OW 20
// if mastodonts then
68947: LD_VAR 0 6
68951: IFFALSE 69018
// for i = 1 to mastodonts do
68953: LD_ADDR_VAR 0 11
68957: PUSH
68958: DOUBLE
68959: LD_INT 1
68961: DEC
68962: ST_TO_ADDR
68963: LD_VAR 0 6
68967: PUSH
68968: FOR_TO
68969: IFFALSE 69016
// begin vc_chassis := 31 ;
68971: LD_ADDR_OWVAR 37
68975: PUSH
68976: LD_INT 31
68978: ST_TO_ADDR
// vc_control := control_rider ;
68979: LD_ADDR_OWVAR 38
68983: PUSH
68984: LD_INT 4
68986: ST_TO_ADDR
// animal := CreateVehicle ;
68987: LD_ADDR_VAR 0 12
68991: PUSH
68992: CALL_OW 45
68996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68997: LD_VAR 0 12
69001: PPUSH
69002: LD_VAR 0 8
69006: PPUSH
69007: LD_INT 0
69009: PPUSH
69010: CALL 71146 0 3
// end ;
69014: GO 68968
69016: POP
69017: POP
// if horses then
69018: LD_VAR 0 5
69022: IFFALSE 69089
// for i = 1 to horses do
69024: LD_ADDR_VAR 0 11
69028: PUSH
69029: DOUBLE
69030: LD_INT 1
69032: DEC
69033: ST_TO_ADDR
69034: LD_VAR 0 5
69038: PUSH
69039: FOR_TO
69040: IFFALSE 69087
// begin hc_class := 21 ;
69042: LD_ADDR_OWVAR 28
69046: PUSH
69047: LD_INT 21
69049: ST_TO_ADDR
// hc_gallery :=  ;
69050: LD_ADDR_OWVAR 33
69054: PUSH
69055: LD_STRING 
69057: ST_TO_ADDR
// animal := CreateHuman ;
69058: LD_ADDR_VAR 0 12
69062: PUSH
69063: CALL_OW 44
69067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69068: LD_VAR 0 12
69072: PPUSH
69073: LD_VAR 0 8
69077: PPUSH
69078: LD_INT 0
69080: PPUSH
69081: CALL 71146 0 3
// end ;
69085: GO 69039
69087: POP
69088: POP
// if birds then
69089: LD_VAR 0 1
69093: IFFALSE 69160
// for i = 1 to birds do
69095: LD_ADDR_VAR 0 11
69099: PUSH
69100: DOUBLE
69101: LD_INT 1
69103: DEC
69104: ST_TO_ADDR
69105: LD_VAR 0 1
69109: PUSH
69110: FOR_TO
69111: IFFALSE 69158
// begin hc_class = 18 ;
69113: LD_ADDR_OWVAR 28
69117: PUSH
69118: LD_INT 18
69120: ST_TO_ADDR
// hc_gallery =  ;
69121: LD_ADDR_OWVAR 33
69125: PUSH
69126: LD_STRING 
69128: ST_TO_ADDR
// animal := CreateHuman ;
69129: LD_ADDR_VAR 0 12
69133: PUSH
69134: CALL_OW 44
69138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69139: LD_VAR 0 12
69143: PPUSH
69144: LD_VAR 0 8
69148: PPUSH
69149: LD_INT 0
69151: PPUSH
69152: CALL 71146 0 3
// end ;
69156: GO 69110
69158: POP
69159: POP
// if tigers then
69160: LD_VAR 0 2
69164: IFFALSE 69248
// for i = 1 to tigers do
69166: LD_ADDR_VAR 0 11
69170: PUSH
69171: DOUBLE
69172: LD_INT 1
69174: DEC
69175: ST_TO_ADDR
69176: LD_VAR 0 2
69180: PUSH
69181: FOR_TO
69182: IFFALSE 69246
// begin hc_class = class_tiger ;
69184: LD_ADDR_OWVAR 28
69188: PUSH
69189: LD_INT 14
69191: ST_TO_ADDR
// hc_gallery =  ;
69192: LD_ADDR_OWVAR 33
69196: PUSH
69197: LD_STRING 
69199: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69200: LD_ADDR_OWVAR 35
69204: PUSH
69205: LD_INT 7
69207: NEG
69208: PPUSH
69209: LD_INT 7
69211: PPUSH
69212: CALL_OW 12
69216: ST_TO_ADDR
// animal := CreateHuman ;
69217: LD_ADDR_VAR 0 12
69221: PUSH
69222: CALL_OW 44
69226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69227: LD_VAR 0 12
69231: PPUSH
69232: LD_VAR 0 8
69236: PPUSH
69237: LD_INT 0
69239: PPUSH
69240: CALL 71146 0 3
// end ;
69244: GO 69181
69246: POP
69247: POP
// if apemans then
69248: LD_VAR 0 3
69252: IFFALSE 69375
// for i = 1 to apemans do
69254: LD_ADDR_VAR 0 11
69258: PUSH
69259: DOUBLE
69260: LD_INT 1
69262: DEC
69263: ST_TO_ADDR
69264: LD_VAR 0 3
69268: PUSH
69269: FOR_TO
69270: IFFALSE 69373
// begin hc_class = class_apeman ;
69272: LD_ADDR_OWVAR 28
69276: PUSH
69277: LD_INT 12
69279: ST_TO_ADDR
// hc_gallery =  ;
69280: LD_ADDR_OWVAR 33
69284: PUSH
69285: LD_STRING 
69287: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69288: LD_ADDR_OWVAR 35
69292: PUSH
69293: LD_INT 2
69295: NEG
69296: PPUSH
69297: LD_INT 2
69299: PPUSH
69300: CALL_OW 12
69304: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69305: LD_ADDR_OWVAR 31
69309: PUSH
69310: LD_INT 1
69312: PPUSH
69313: LD_INT 3
69315: PPUSH
69316: CALL_OW 12
69320: PUSH
69321: LD_INT 1
69323: PPUSH
69324: LD_INT 3
69326: PPUSH
69327: CALL_OW 12
69331: PUSH
69332: LD_INT 0
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// animal := CreateHuman ;
69344: LD_ADDR_VAR 0 12
69348: PUSH
69349: CALL_OW 44
69353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69354: LD_VAR 0 12
69358: PPUSH
69359: LD_VAR 0 8
69363: PPUSH
69364: LD_INT 0
69366: PPUSH
69367: CALL 71146 0 3
// end ;
69371: GO 69269
69373: POP
69374: POP
// if enchidnas then
69375: LD_VAR 0 4
69379: IFFALSE 69446
// for i = 1 to enchidnas do
69381: LD_ADDR_VAR 0 11
69385: PUSH
69386: DOUBLE
69387: LD_INT 1
69389: DEC
69390: ST_TO_ADDR
69391: LD_VAR 0 4
69395: PUSH
69396: FOR_TO
69397: IFFALSE 69444
// begin hc_class = 13 ;
69399: LD_ADDR_OWVAR 28
69403: PUSH
69404: LD_INT 13
69406: ST_TO_ADDR
// hc_gallery =  ;
69407: LD_ADDR_OWVAR 33
69411: PUSH
69412: LD_STRING 
69414: ST_TO_ADDR
// animal := CreateHuman ;
69415: LD_ADDR_VAR 0 12
69419: PUSH
69420: CALL_OW 44
69424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69425: LD_VAR 0 12
69429: PPUSH
69430: LD_VAR 0 8
69434: PPUSH
69435: LD_INT 0
69437: PPUSH
69438: CALL 71146 0 3
// end ;
69442: GO 69396
69444: POP
69445: POP
// if fishes then
69446: LD_VAR 0 7
69450: IFFALSE 69517
// for i = 1 to fishes do
69452: LD_ADDR_VAR 0 11
69456: PUSH
69457: DOUBLE
69458: LD_INT 1
69460: DEC
69461: ST_TO_ADDR
69462: LD_VAR 0 7
69466: PUSH
69467: FOR_TO
69468: IFFALSE 69515
// begin hc_class = 20 ;
69470: LD_ADDR_OWVAR 28
69474: PUSH
69475: LD_INT 20
69477: ST_TO_ADDR
// hc_gallery =  ;
69478: LD_ADDR_OWVAR 33
69482: PUSH
69483: LD_STRING 
69485: ST_TO_ADDR
// animal := CreateHuman ;
69486: LD_ADDR_VAR 0 12
69490: PUSH
69491: CALL_OW 44
69495: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69496: LD_VAR 0 12
69500: PPUSH
69501: LD_VAR 0 9
69505: PPUSH
69506: LD_INT 0
69508: PPUSH
69509: CALL 71146 0 3
// end ;
69513: GO 69467
69515: POP
69516: POP
// end ;
69517: LD_VAR 0 10
69521: RET
// export function WantHeal ( sci , unit ) ; begin
69522: LD_INT 0
69524: PPUSH
// if GetTaskList ( sci ) > 0 then
69525: LD_VAR 0 1
69529: PPUSH
69530: CALL_OW 437
69534: PUSH
69535: LD_INT 0
69537: GREATER
69538: IFFALSE 69608
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69540: LD_VAR 0 1
69544: PPUSH
69545: CALL_OW 437
69549: PUSH
69550: LD_INT 1
69552: ARRAY
69553: PUSH
69554: LD_INT 1
69556: ARRAY
69557: PUSH
69558: LD_STRING l
69560: EQUAL
69561: PUSH
69562: LD_VAR 0 1
69566: PPUSH
69567: CALL_OW 437
69571: PUSH
69572: LD_INT 1
69574: ARRAY
69575: PUSH
69576: LD_INT 4
69578: ARRAY
69579: PUSH
69580: LD_VAR 0 2
69584: EQUAL
69585: AND
69586: IFFALSE 69598
// result := true else
69588: LD_ADDR_VAR 0 3
69592: PUSH
69593: LD_INT 1
69595: ST_TO_ADDR
69596: GO 69606
// result := false ;
69598: LD_ADDR_VAR 0 3
69602: PUSH
69603: LD_INT 0
69605: ST_TO_ADDR
// end else
69606: GO 69616
// result := false ;
69608: LD_ADDR_VAR 0 3
69612: PUSH
69613: LD_INT 0
69615: ST_TO_ADDR
// end ;
69616: LD_VAR 0 3
69620: RET
// export function HealTarget ( sci ) ; begin
69621: LD_INT 0
69623: PPUSH
// if not sci then
69624: LD_VAR 0 1
69628: NOT
69629: IFFALSE 69633
// exit ;
69631: GO 69698
// result := 0 ;
69633: LD_ADDR_VAR 0 2
69637: PUSH
69638: LD_INT 0
69640: ST_TO_ADDR
// if GetTaskList ( sci ) then
69641: LD_VAR 0 1
69645: PPUSH
69646: CALL_OW 437
69650: IFFALSE 69698
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69652: LD_VAR 0 1
69656: PPUSH
69657: CALL_OW 437
69661: PUSH
69662: LD_INT 1
69664: ARRAY
69665: PUSH
69666: LD_INT 1
69668: ARRAY
69669: PUSH
69670: LD_STRING l
69672: EQUAL
69673: IFFALSE 69698
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69675: LD_ADDR_VAR 0 2
69679: PUSH
69680: LD_VAR 0 1
69684: PPUSH
69685: CALL_OW 437
69689: PUSH
69690: LD_INT 1
69692: ARRAY
69693: PUSH
69694: LD_INT 4
69696: ARRAY
69697: ST_TO_ADDR
// end ;
69698: LD_VAR 0 2
69702: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69703: LD_INT 0
69705: PPUSH
69706: PPUSH
69707: PPUSH
69708: PPUSH
// if not base_units then
69709: LD_VAR 0 1
69713: NOT
69714: IFFALSE 69718
// exit ;
69716: GO 69805
// result := false ;
69718: LD_ADDR_VAR 0 2
69722: PUSH
69723: LD_INT 0
69725: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69726: LD_ADDR_VAR 0 5
69730: PUSH
69731: LD_VAR 0 1
69735: PPUSH
69736: LD_INT 21
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PPUSH
69746: CALL_OW 72
69750: ST_TO_ADDR
// if not tmp then
69751: LD_VAR 0 5
69755: NOT
69756: IFFALSE 69760
// exit ;
69758: GO 69805
// for i in tmp do
69760: LD_ADDR_VAR 0 3
69764: PUSH
69765: LD_VAR 0 5
69769: PUSH
69770: FOR_IN
69771: IFFALSE 69803
// begin result := EnemyInRange ( i , 22 ) ;
69773: LD_ADDR_VAR 0 2
69777: PUSH
69778: LD_VAR 0 3
69782: PPUSH
69783: LD_INT 22
69785: PPUSH
69786: CALL 67392 0 2
69790: ST_TO_ADDR
// if result then
69791: LD_VAR 0 2
69795: IFFALSE 69801
// exit ;
69797: POP
69798: POP
69799: GO 69805
// end ;
69801: GO 69770
69803: POP
69804: POP
// end ;
69805: LD_VAR 0 2
69809: RET
// export function FilterByTag ( units , tag ) ; begin
69810: LD_INT 0
69812: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69813: LD_ADDR_VAR 0 3
69817: PUSH
69818: LD_VAR 0 1
69822: PPUSH
69823: LD_INT 120
69825: PUSH
69826: LD_VAR 0 2
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PPUSH
69835: CALL_OW 72
69839: ST_TO_ADDR
// end ;
69840: LD_VAR 0 3
69844: RET
// export function IsDriver ( un ) ; begin
69845: LD_INT 0
69847: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69848: LD_ADDR_VAR 0 2
69852: PUSH
69853: LD_VAR 0 1
69857: PUSH
69858: LD_INT 55
69860: PUSH
69861: EMPTY
69862: LIST
69863: PPUSH
69864: CALL_OW 69
69868: IN
69869: ST_TO_ADDR
// end ;
69870: LD_VAR 0 2
69874: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69875: LD_INT 0
69877: PPUSH
69878: PPUSH
// list := [ ] ;
69879: LD_ADDR_VAR 0 5
69883: PUSH
69884: EMPTY
69885: ST_TO_ADDR
// case d of 0 :
69886: LD_VAR 0 3
69890: PUSH
69891: LD_INT 0
69893: DOUBLE
69894: EQUAL
69895: IFTRUE 69899
69897: GO 70032
69899: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69900: LD_ADDR_VAR 0 5
69904: PUSH
69905: LD_VAR 0 1
69909: PUSH
69910: LD_INT 4
69912: MINUS
69913: PUSH
69914: LD_VAR 0 2
69918: PUSH
69919: LD_INT 4
69921: MINUS
69922: PUSH
69923: LD_INT 2
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: LIST
69930: PUSH
69931: LD_VAR 0 1
69935: PUSH
69936: LD_INT 3
69938: MINUS
69939: PUSH
69940: LD_VAR 0 2
69944: PUSH
69945: LD_INT 1
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: LIST
69952: PUSH
69953: LD_VAR 0 1
69957: PUSH
69958: LD_INT 4
69960: PLUS
69961: PUSH
69962: LD_VAR 0 2
69966: PUSH
69967: LD_INT 4
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: LIST
69974: PUSH
69975: LD_VAR 0 1
69979: PUSH
69980: LD_INT 3
69982: PLUS
69983: PUSH
69984: LD_VAR 0 2
69988: PUSH
69989: LD_INT 3
69991: PLUS
69992: PUSH
69993: LD_INT 5
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: LIST
70000: PUSH
70001: LD_VAR 0 1
70005: PUSH
70006: LD_VAR 0 2
70010: PUSH
70011: LD_INT 4
70013: PLUS
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: ST_TO_ADDR
// end ; 1 :
70030: GO 70730
70032: LD_INT 1
70034: DOUBLE
70035: EQUAL
70036: IFTRUE 70040
70038: GO 70173
70040: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70041: LD_ADDR_VAR 0 5
70045: PUSH
70046: LD_VAR 0 1
70050: PUSH
70051: LD_VAR 0 2
70055: PUSH
70056: LD_INT 4
70058: MINUS
70059: PUSH
70060: LD_INT 3
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: PUSH
70068: LD_VAR 0 1
70072: PUSH
70073: LD_INT 3
70075: MINUS
70076: PUSH
70077: LD_VAR 0 2
70081: PUSH
70082: LD_INT 3
70084: MINUS
70085: PUSH
70086: LD_INT 2
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: LIST
70093: PUSH
70094: LD_VAR 0 1
70098: PUSH
70099: LD_INT 4
70101: MINUS
70102: PUSH
70103: LD_VAR 0 2
70107: PUSH
70108: LD_INT 1
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: LIST
70115: PUSH
70116: LD_VAR 0 1
70120: PUSH
70121: LD_VAR 0 2
70125: PUSH
70126: LD_INT 3
70128: PLUS
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: LIST
70137: PUSH
70138: LD_VAR 0 1
70142: PUSH
70143: LD_INT 4
70145: PLUS
70146: PUSH
70147: LD_VAR 0 2
70151: PUSH
70152: LD_INT 4
70154: PLUS
70155: PUSH
70156: LD_INT 5
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: ST_TO_ADDR
// end ; 2 :
70171: GO 70730
70173: LD_INT 2
70175: DOUBLE
70176: EQUAL
70177: IFTRUE 70181
70179: GO 70310
70181: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70182: LD_ADDR_VAR 0 5
70186: PUSH
70187: LD_VAR 0 1
70191: PUSH
70192: LD_VAR 0 2
70196: PUSH
70197: LD_INT 3
70199: MINUS
70200: PUSH
70201: LD_INT 3
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: LIST
70208: PUSH
70209: LD_VAR 0 1
70213: PUSH
70214: LD_INT 4
70216: PLUS
70217: PUSH
70218: LD_VAR 0 2
70222: PUSH
70223: LD_INT 4
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: LIST
70230: PUSH
70231: LD_VAR 0 1
70235: PUSH
70236: LD_VAR 0 2
70240: PUSH
70241: LD_INT 4
70243: PLUS
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: LIST
70252: PUSH
70253: LD_VAR 0 1
70257: PUSH
70258: LD_INT 3
70260: MINUS
70261: PUSH
70262: LD_VAR 0 2
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: PUSH
70275: LD_VAR 0 1
70279: PUSH
70280: LD_INT 4
70282: MINUS
70283: PUSH
70284: LD_VAR 0 2
70288: PUSH
70289: LD_INT 4
70291: MINUS
70292: PUSH
70293: LD_INT 2
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: LIST
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: ST_TO_ADDR
// end ; 3 :
70308: GO 70730
70310: LD_INT 3
70312: DOUBLE
70313: EQUAL
70314: IFTRUE 70318
70316: GO 70451
70318: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70319: LD_ADDR_VAR 0 5
70323: PUSH
70324: LD_VAR 0 1
70328: PUSH
70329: LD_INT 3
70331: PLUS
70332: PUSH
70333: LD_VAR 0 2
70337: PUSH
70338: LD_INT 4
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: LIST
70345: PUSH
70346: LD_VAR 0 1
70350: PUSH
70351: LD_INT 4
70353: PLUS
70354: PUSH
70355: LD_VAR 0 2
70359: PUSH
70360: LD_INT 4
70362: PLUS
70363: PUSH
70364: LD_INT 5
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: LIST
70371: PUSH
70372: LD_VAR 0 1
70376: PUSH
70377: LD_INT 4
70379: MINUS
70380: PUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_INT 1
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: LIST
70393: PUSH
70394: LD_VAR 0 1
70398: PUSH
70399: LD_VAR 0 2
70403: PUSH
70404: LD_INT 4
70406: MINUS
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: LIST
70415: PUSH
70416: LD_VAR 0 1
70420: PUSH
70421: LD_INT 3
70423: MINUS
70424: PUSH
70425: LD_VAR 0 2
70429: PUSH
70430: LD_INT 3
70432: MINUS
70433: PUSH
70434: LD_INT 2
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: LIST
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: ST_TO_ADDR
// end ; 4 :
70449: GO 70730
70451: LD_INT 4
70453: DOUBLE
70454: EQUAL
70455: IFTRUE 70459
70457: GO 70592
70459: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70460: LD_ADDR_VAR 0 5
70464: PUSH
70465: LD_VAR 0 1
70469: PUSH
70470: LD_VAR 0 2
70474: PUSH
70475: LD_INT 4
70477: PLUS
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: LIST
70486: PUSH
70487: LD_VAR 0 1
70491: PUSH
70492: LD_INT 3
70494: PLUS
70495: PUSH
70496: LD_VAR 0 2
70500: PUSH
70501: LD_INT 3
70503: PLUS
70504: PUSH
70505: LD_INT 5
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: PUSH
70513: LD_VAR 0 1
70517: PUSH
70518: LD_INT 4
70520: PLUS
70521: PUSH
70522: LD_VAR 0 2
70526: PUSH
70527: LD_INT 4
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: LIST
70534: PUSH
70535: LD_VAR 0 1
70539: PUSH
70540: LD_VAR 0 2
70544: PUSH
70545: LD_INT 3
70547: MINUS
70548: PUSH
70549: LD_INT 3
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: LIST
70556: PUSH
70557: LD_VAR 0 1
70561: PUSH
70562: LD_INT 4
70564: MINUS
70565: PUSH
70566: LD_VAR 0 2
70570: PUSH
70571: LD_INT 4
70573: MINUS
70574: PUSH
70575: LD_INT 2
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: LIST
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: ST_TO_ADDR
// end ; 5 :
70590: GO 70730
70592: LD_INT 5
70594: DOUBLE
70595: EQUAL
70596: IFTRUE 70600
70598: GO 70729
70600: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70601: LD_ADDR_VAR 0 5
70605: PUSH
70606: LD_VAR 0 1
70610: PUSH
70611: LD_INT 4
70613: MINUS
70614: PUSH
70615: LD_VAR 0 2
70619: PUSH
70620: LD_INT 1
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: LIST
70627: PUSH
70628: LD_VAR 0 1
70632: PUSH
70633: LD_VAR 0 2
70637: PUSH
70638: LD_INT 4
70640: MINUS
70641: PUSH
70642: LD_INT 3
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: LIST
70649: PUSH
70650: LD_VAR 0 1
70654: PUSH
70655: LD_INT 4
70657: PLUS
70658: PUSH
70659: LD_VAR 0 2
70663: PUSH
70664: LD_INT 4
70666: PLUS
70667: PUSH
70668: LD_INT 5
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: LIST
70675: PUSH
70676: LD_VAR 0 1
70680: PUSH
70681: LD_INT 3
70683: PLUS
70684: PUSH
70685: LD_VAR 0 2
70689: PUSH
70690: LD_INT 4
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: PUSH
70698: LD_VAR 0 1
70702: PUSH
70703: LD_VAR 0 2
70707: PUSH
70708: LD_INT 3
70710: PLUS
70711: PUSH
70712: LD_INT 0
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: LIST
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: ST_TO_ADDR
// end ; end ;
70727: GO 70730
70729: POP
// result := list ;
70730: LD_ADDR_VAR 0 4
70734: PUSH
70735: LD_VAR 0 5
70739: ST_TO_ADDR
// end ;
70740: LD_VAR 0 4
70744: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70745: LD_INT 0
70747: PPUSH
70748: PPUSH
70749: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70750: LD_VAR 0 1
70754: NOT
70755: PUSH
70756: LD_VAR 0 2
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: LD_INT 2
70766: PUSH
70767: LD_INT 3
70769: PUSH
70770: LD_INT 4
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: IN
70779: NOT
70780: OR
70781: IFFALSE 70785
// exit ;
70783: GO 70868
// tmp := [ ] ;
70785: LD_ADDR_VAR 0 5
70789: PUSH
70790: EMPTY
70791: ST_TO_ADDR
// for i in units do
70792: LD_ADDR_VAR 0 4
70796: PUSH
70797: LD_VAR 0 1
70801: PUSH
70802: FOR_IN
70803: IFFALSE 70837
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70805: LD_ADDR_VAR 0 5
70809: PUSH
70810: LD_VAR 0 5
70814: PPUSH
70815: LD_VAR 0 4
70819: PPUSH
70820: LD_VAR 0 2
70824: PPUSH
70825: CALL_OW 259
70829: PPUSH
70830: CALL 72229 0 2
70834: ST_TO_ADDR
70835: GO 70802
70837: POP
70838: POP
// if not tmp then
70839: LD_VAR 0 5
70843: NOT
70844: IFFALSE 70848
// exit ;
70846: GO 70868
// result := SortListByListDesc ( units , tmp ) ;
70848: LD_ADDR_VAR 0 3
70852: PUSH
70853: LD_VAR 0 1
70857: PPUSH
70858: LD_VAR 0 5
70862: PPUSH
70863: CALL_OW 77
70867: ST_TO_ADDR
// end ;
70868: LD_VAR 0 3
70872: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70873: LD_INT 0
70875: PPUSH
70876: PPUSH
70877: PPUSH
// result := false ;
70878: LD_ADDR_VAR 0 3
70882: PUSH
70883: LD_INT 0
70885: ST_TO_ADDR
// if not building then
70886: LD_VAR 0 2
70890: NOT
70891: IFFALSE 70895
// exit ;
70893: GO 71033
// x := GetX ( building ) ;
70895: LD_ADDR_VAR 0 4
70899: PUSH
70900: LD_VAR 0 2
70904: PPUSH
70905: CALL_OW 250
70909: ST_TO_ADDR
// y := GetY ( building ) ;
70910: LD_ADDR_VAR 0 5
70914: PUSH
70915: LD_VAR 0 2
70919: PPUSH
70920: CALL_OW 251
70924: ST_TO_ADDR
// if not x or not y then
70925: LD_VAR 0 4
70929: NOT
70930: PUSH
70931: LD_VAR 0 5
70935: NOT
70936: OR
70937: IFFALSE 70941
// exit ;
70939: GO 71033
// if GetTaskList ( unit ) then
70941: LD_VAR 0 1
70945: PPUSH
70946: CALL_OW 437
70950: IFFALSE 71033
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70952: LD_STRING e
70954: PUSH
70955: LD_VAR 0 1
70959: PPUSH
70960: CALL_OW 437
70964: PUSH
70965: LD_INT 1
70967: ARRAY
70968: PUSH
70969: LD_INT 1
70971: ARRAY
70972: EQUAL
70973: PUSH
70974: LD_VAR 0 4
70978: PUSH
70979: LD_VAR 0 1
70983: PPUSH
70984: CALL_OW 437
70988: PUSH
70989: LD_INT 1
70991: ARRAY
70992: PUSH
70993: LD_INT 2
70995: ARRAY
70996: EQUAL
70997: AND
70998: PUSH
70999: LD_VAR 0 5
71003: PUSH
71004: LD_VAR 0 1
71008: PPUSH
71009: CALL_OW 437
71013: PUSH
71014: LD_INT 1
71016: ARRAY
71017: PUSH
71018: LD_INT 3
71020: ARRAY
71021: EQUAL
71022: AND
71023: IFFALSE 71033
// result := true end ;
71025: LD_ADDR_VAR 0 3
71029: PUSH
71030: LD_INT 1
71032: ST_TO_ADDR
// end ;
71033: LD_VAR 0 3
71037: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71038: LD_INT 0
71040: PPUSH
// result := false ;
71041: LD_ADDR_VAR 0 4
71045: PUSH
71046: LD_INT 0
71048: ST_TO_ADDR
// if GetTaskList ( unit ) then
71049: LD_VAR 0 1
71053: PPUSH
71054: CALL_OW 437
71058: IFFALSE 71141
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71060: LD_STRING M
71062: PUSH
71063: LD_VAR 0 1
71067: PPUSH
71068: CALL_OW 437
71072: PUSH
71073: LD_INT 1
71075: ARRAY
71076: PUSH
71077: LD_INT 1
71079: ARRAY
71080: EQUAL
71081: PUSH
71082: LD_VAR 0 2
71086: PUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: CALL_OW 437
71096: PUSH
71097: LD_INT 1
71099: ARRAY
71100: PUSH
71101: LD_INT 2
71103: ARRAY
71104: EQUAL
71105: AND
71106: PUSH
71107: LD_VAR 0 3
71111: PUSH
71112: LD_VAR 0 1
71116: PPUSH
71117: CALL_OW 437
71121: PUSH
71122: LD_INT 1
71124: ARRAY
71125: PUSH
71126: LD_INT 3
71128: ARRAY
71129: EQUAL
71130: AND
71131: IFFALSE 71141
// result := true ;
71133: LD_ADDR_VAR 0 4
71137: PUSH
71138: LD_INT 1
71140: ST_TO_ADDR
// end ; end ;
71141: LD_VAR 0 4
71145: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71146: LD_INT 0
71148: PPUSH
71149: PPUSH
71150: PPUSH
71151: PPUSH
// if not unit or not area then
71152: LD_VAR 0 1
71156: NOT
71157: PUSH
71158: LD_VAR 0 2
71162: NOT
71163: OR
71164: IFFALSE 71168
// exit ;
71166: GO 71332
// tmp := AreaToList ( area , i ) ;
71168: LD_ADDR_VAR 0 6
71172: PUSH
71173: LD_VAR 0 2
71177: PPUSH
71178: LD_VAR 0 5
71182: PPUSH
71183: CALL_OW 517
71187: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71188: LD_ADDR_VAR 0 5
71192: PUSH
71193: DOUBLE
71194: LD_INT 1
71196: DEC
71197: ST_TO_ADDR
71198: LD_VAR 0 6
71202: PUSH
71203: LD_INT 1
71205: ARRAY
71206: PUSH
71207: FOR_TO
71208: IFFALSE 71330
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71210: LD_ADDR_VAR 0 7
71214: PUSH
71215: LD_VAR 0 6
71219: PUSH
71220: LD_INT 1
71222: ARRAY
71223: PUSH
71224: LD_VAR 0 5
71228: ARRAY
71229: PUSH
71230: LD_VAR 0 6
71234: PUSH
71235: LD_INT 2
71237: ARRAY
71238: PUSH
71239: LD_VAR 0 5
71243: ARRAY
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71249: LD_VAR 0 7
71253: PUSH
71254: LD_INT 1
71256: ARRAY
71257: PPUSH
71258: LD_VAR 0 7
71262: PUSH
71263: LD_INT 2
71265: ARRAY
71266: PPUSH
71267: CALL_OW 428
71271: PUSH
71272: LD_INT 0
71274: EQUAL
71275: IFFALSE 71328
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71277: LD_VAR 0 1
71281: PPUSH
71282: LD_VAR 0 7
71286: PUSH
71287: LD_INT 1
71289: ARRAY
71290: PPUSH
71291: LD_VAR 0 7
71295: PUSH
71296: LD_INT 2
71298: ARRAY
71299: PPUSH
71300: LD_VAR 0 3
71304: PPUSH
71305: CALL_OW 48
// result := IsPlaced ( unit ) ;
71309: LD_ADDR_VAR 0 4
71313: PUSH
71314: LD_VAR 0 1
71318: PPUSH
71319: CALL_OW 305
71323: ST_TO_ADDR
// exit ;
71324: POP
71325: POP
71326: GO 71332
// end ; end ;
71328: GO 71207
71330: POP
71331: POP
// end ;
71332: LD_VAR 0 4
71336: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71337: LD_INT 0
71339: PPUSH
71340: PPUSH
71341: PPUSH
// if not side or side > 8 then
71342: LD_VAR 0 1
71346: NOT
71347: PUSH
71348: LD_VAR 0 1
71352: PUSH
71353: LD_INT 8
71355: GREATER
71356: OR
71357: IFFALSE 71361
// exit ;
71359: GO 71548
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71361: LD_ADDR_VAR 0 4
71365: PUSH
71366: LD_INT 22
71368: PUSH
71369: LD_VAR 0 1
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 21
71380: PUSH
71381: LD_INT 3
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PPUSH
71392: CALL_OW 69
71396: ST_TO_ADDR
// if not tmp then
71397: LD_VAR 0 4
71401: NOT
71402: IFFALSE 71406
// exit ;
71404: GO 71548
// enable_addtolog := true ;
71406: LD_ADDR_OWVAR 81
71410: PUSH
71411: LD_INT 1
71413: ST_TO_ADDR
// AddToLog ( [ ) ;
71414: LD_STRING [
71416: PPUSH
71417: CALL_OW 561
// for i in tmp do
71421: LD_ADDR_VAR 0 3
71425: PUSH
71426: LD_VAR 0 4
71430: PUSH
71431: FOR_IN
71432: IFFALSE 71539
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71434: LD_STRING [
71436: PUSH
71437: LD_VAR 0 3
71441: PPUSH
71442: CALL_OW 266
71446: STR
71447: PUSH
71448: LD_STRING , 
71450: STR
71451: PUSH
71452: LD_VAR 0 3
71456: PPUSH
71457: CALL_OW 250
71461: STR
71462: PUSH
71463: LD_STRING , 
71465: STR
71466: PUSH
71467: LD_VAR 0 3
71471: PPUSH
71472: CALL_OW 251
71476: STR
71477: PUSH
71478: LD_STRING , 
71480: STR
71481: PUSH
71482: LD_VAR 0 3
71486: PPUSH
71487: CALL_OW 254
71491: STR
71492: PUSH
71493: LD_STRING , 
71495: STR
71496: PUSH
71497: LD_VAR 0 3
71501: PPUSH
71502: LD_INT 1
71504: PPUSH
71505: CALL_OW 268
71509: STR
71510: PUSH
71511: LD_STRING , 
71513: STR
71514: PUSH
71515: LD_VAR 0 3
71519: PPUSH
71520: LD_INT 2
71522: PPUSH
71523: CALL_OW 268
71527: STR
71528: PUSH
71529: LD_STRING ],
71531: STR
71532: PPUSH
71533: CALL_OW 561
// end ;
71537: GO 71431
71539: POP
71540: POP
// AddToLog ( ]; ) ;
71541: LD_STRING ];
71543: PPUSH
71544: CALL_OW 561
// end ;
71548: LD_VAR 0 2
71552: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71553: LD_INT 0
71555: PPUSH
71556: PPUSH
71557: PPUSH
71558: PPUSH
71559: PPUSH
// if not area or not rate or not max then
71560: LD_VAR 0 1
71564: NOT
71565: PUSH
71566: LD_VAR 0 2
71570: NOT
71571: OR
71572: PUSH
71573: LD_VAR 0 4
71577: NOT
71578: OR
71579: IFFALSE 71583
// exit ;
71581: GO 71772
// while 1 do
71583: LD_INT 1
71585: IFFALSE 71772
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71587: LD_ADDR_VAR 0 9
71591: PUSH
71592: LD_VAR 0 1
71596: PPUSH
71597: LD_INT 1
71599: PPUSH
71600: CALL_OW 287
71604: PUSH
71605: LD_INT 10
71607: MUL
71608: ST_TO_ADDR
// r := rate / 10 ;
71609: LD_ADDR_VAR 0 7
71613: PUSH
71614: LD_VAR 0 2
71618: PUSH
71619: LD_INT 10
71621: DIVREAL
71622: ST_TO_ADDR
// time := 1 1$00 ;
71623: LD_ADDR_VAR 0 8
71627: PUSH
71628: LD_INT 2100
71630: ST_TO_ADDR
// if amount < min then
71631: LD_VAR 0 9
71635: PUSH
71636: LD_VAR 0 3
71640: LESS
71641: IFFALSE 71659
// r := r * 2 else
71643: LD_ADDR_VAR 0 7
71647: PUSH
71648: LD_VAR 0 7
71652: PUSH
71653: LD_INT 2
71655: MUL
71656: ST_TO_ADDR
71657: GO 71685
// if amount > max then
71659: LD_VAR 0 9
71663: PUSH
71664: LD_VAR 0 4
71668: GREATER
71669: IFFALSE 71685
// r := r / 2 ;
71671: LD_ADDR_VAR 0 7
71675: PUSH
71676: LD_VAR 0 7
71680: PUSH
71681: LD_INT 2
71683: DIVREAL
71684: ST_TO_ADDR
// time := time / r ;
71685: LD_ADDR_VAR 0 8
71689: PUSH
71690: LD_VAR 0 8
71694: PUSH
71695: LD_VAR 0 7
71699: DIVREAL
71700: ST_TO_ADDR
// if time < 0 then
71701: LD_VAR 0 8
71705: PUSH
71706: LD_INT 0
71708: LESS
71709: IFFALSE 71726
// time := time * - 1 ;
71711: LD_ADDR_VAR 0 8
71715: PUSH
71716: LD_VAR 0 8
71720: PUSH
71721: LD_INT 1
71723: NEG
71724: MUL
71725: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71726: LD_VAR 0 8
71730: PUSH
71731: LD_INT 35
71733: PPUSH
71734: LD_INT 875
71736: PPUSH
71737: CALL_OW 12
71741: PLUS
71742: PPUSH
71743: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71747: LD_INT 1
71749: PPUSH
71750: LD_INT 5
71752: PPUSH
71753: CALL_OW 12
71757: PPUSH
71758: LD_VAR 0 1
71762: PPUSH
71763: LD_INT 1
71765: PPUSH
71766: CALL_OW 55
// end ;
71770: GO 71583
// end ;
71772: LD_VAR 0 5
71776: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71777: LD_INT 0
71779: PPUSH
71780: PPUSH
71781: PPUSH
71782: PPUSH
71783: PPUSH
71784: PPUSH
71785: PPUSH
71786: PPUSH
// if not turrets or not factories then
71787: LD_VAR 0 1
71791: NOT
71792: PUSH
71793: LD_VAR 0 2
71797: NOT
71798: OR
71799: IFFALSE 71803
// exit ;
71801: GO 72110
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71803: LD_ADDR_VAR 0 10
71807: PUSH
71808: LD_INT 5
71810: PUSH
71811: LD_INT 6
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 2
71820: PUSH
71821: LD_INT 4
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 3
71830: PUSH
71831: LD_INT 5
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 24
71845: PUSH
71846: LD_INT 25
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 23
71855: PUSH
71856: LD_INT 27
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 42
71869: PUSH
71870: LD_INT 43
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 44
71879: PUSH
71880: LD_INT 46
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 45
71889: PUSH
71890: LD_INT 47
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: ST_TO_ADDR
// result := [ ] ;
71907: LD_ADDR_VAR 0 3
71911: PUSH
71912: EMPTY
71913: ST_TO_ADDR
// for i in turrets do
71914: LD_ADDR_VAR 0 4
71918: PUSH
71919: LD_VAR 0 1
71923: PUSH
71924: FOR_IN
71925: IFFALSE 72108
// begin nat := GetNation ( i ) ;
71927: LD_ADDR_VAR 0 7
71931: PUSH
71932: LD_VAR 0 4
71936: PPUSH
71937: CALL_OW 248
71941: ST_TO_ADDR
// weapon := 0 ;
71942: LD_ADDR_VAR 0 8
71946: PUSH
71947: LD_INT 0
71949: ST_TO_ADDR
// if not nat then
71950: LD_VAR 0 7
71954: NOT
71955: IFFALSE 71959
// continue ;
71957: GO 71924
// for j in list [ nat ] do
71959: LD_ADDR_VAR 0 5
71963: PUSH
71964: LD_VAR 0 10
71968: PUSH
71969: LD_VAR 0 7
71973: ARRAY
71974: PUSH
71975: FOR_IN
71976: IFFALSE 72017
// if GetBWeapon ( i ) = j [ 1 ] then
71978: LD_VAR 0 4
71982: PPUSH
71983: CALL_OW 269
71987: PUSH
71988: LD_VAR 0 5
71992: PUSH
71993: LD_INT 1
71995: ARRAY
71996: EQUAL
71997: IFFALSE 72015
// begin weapon := j [ 2 ] ;
71999: LD_ADDR_VAR 0 8
72003: PUSH
72004: LD_VAR 0 5
72008: PUSH
72009: LD_INT 2
72011: ARRAY
72012: ST_TO_ADDR
// break ;
72013: GO 72017
// end ;
72015: GO 71975
72017: POP
72018: POP
// if not weapon then
72019: LD_VAR 0 8
72023: NOT
72024: IFFALSE 72028
// continue ;
72026: GO 71924
// for k in factories do
72028: LD_ADDR_VAR 0 6
72032: PUSH
72033: LD_VAR 0 2
72037: PUSH
72038: FOR_IN
72039: IFFALSE 72104
// begin weapons := AvailableWeaponList ( k ) ;
72041: LD_ADDR_VAR 0 9
72045: PUSH
72046: LD_VAR 0 6
72050: PPUSH
72051: CALL_OW 478
72055: ST_TO_ADDR
// if not weapons then
72056: LD_VAR 0 9
72060: NOT
72061: IFFALSE 72065
// continue ;
72063: GO 72038
// if weapon in weapons then
72065: LD_VAR 0 8
72069: PUSH
72070: LD_VAR 0 9
72074: IN
72075: IFFALSE 72102
// begin result := [ i , weapon ] ;
72077: LD_ADDR_VAR 0 3
72081: PUSH
72082: LD_VAR 0 4
72086: PUSH
72087: LD_VAR 0 8
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: ST_TO_ADDR
// exit ;
72096: POP
72097: POP
72098: POP
72099: POP
72100: GO 72110
// end ; end ;
72102: GO 72038
72104: POP
72105: POP
// end ;
72106: GO 71924
72108: POP
72109: POP
// end ;
72110: LD_VAR 0 3
72114: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72115: LD_INT 0
72117: PPUSH
// if not side or side > 8 then
72118: LD_VAR 0 3
72122: NOT
72123: PUSH
72124: LD_VAR 0 3
72128: PUSH
72129: LD_INT 8
72131: GREATER
72132: OR
72133: IFFALSE 72137
// exit ;
72135: GO 72196
// if not range then
72137: LD_VAR 0 4
72141: NOT
72142: IFFALSE 72153
// range := - 12 ;
72144: LD_ADDR_VAR 0 4
72148: PUSH
72149: LD_INT 12
72151: NEG
72152: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72153: LD_VAR 0 1
72157: PPUSH
72158: LD_VAR 0 2
72162: PPUSH
72163: LD_VAR 0 3
72167: PPUSH
72168: LD_VAR 0 4
72172: PPUSH
72173: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72177: LD_VAR 0 1
72181: PPUSH
72182: LD_VAR 0 2
72186: PPUSH
72187: LD_VAR 0 3
72191: PPUSH
72192: CALL_OW 331
// end ;
72196: LD_VAR 0 5
72200: RET
// export function Video ( mode ) ; begin
72201: LD_INT 0
72203: PPUSH
// ingame_video = mode ;
72204: LD_ADDR_OWVAR 52
72208: PUSH
72209: LD_VAR 0 1
72213: ST_TO_ADDR
// interface_hidden = mode ;
72214: LD_ADDR_OWVAR 54
72218: PUSH
72219: LD_VAR 0 1
72223: ST_TO_ADDR
// end ;
72224: LD_VAR 0 2
72228: RET
// export function Join ( array , element ) ; begin
72229: LD_INT 0
72231: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72232: LD_ADDR_VAR 0 3
72236: PUSH
72237: LD_VAR 0 1
72241: PPUSH
72242: LD_VAR 0 1
72246: PUSH
72247: LD_INT 1
72249: PLUS
72250: PPUSH
72251: LD_VAR 0 2
72255: PPUSH
72256: CALL_OW 1
72260: ST_TO_ADDR
// end ;
72261: LD_VAR 0 3
72265: RET
// export function JoinUnion ( array , element ) ; begin
72266: LD_INT 0
72268: PPUSH
// result := array union element ;
72269: LD_ADDR_VAR 0 3
72273: PUSH
72274: LD_VAR 0 1
72278: PUSH
72279: LD_VAR 0 2
72283: UNION
72284: ST_TO_ADDR
// end ;
72285: LD_VAR 0 3
72289: RET
// export function GetBehemoths ( side ) ; begin
72290: LD_INT 0
72292: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72293: LD_ADDR_VAR 0 2
72297: PUSH
72298: LD_INT 22
72300: PUSH
72301: LD_VAR 0 1
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 31
72312: PUSH
72313: LD_INT 25
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PPUSH
72324: CALL_OW 69
72328: ST_TO_ADDR
// end ;
72329: LD_VAR 0 2
72333: RET
// export function Shuffle ( array ) ; var i , index ; begin
72334: LD_INT 0
72336: PPUSH
72337: PPUSH
72338: PPUSH
// result := [ ] ;
72339: LD_ADDR_VAR 0 2
72343: PUSH
72344: EMPTY
72345: ST_TO_ADDR
// if not array then
72346: LD_VAR 0 1
72350: NOT
72351: IFFALSE 72355
// exit ;
72353: GO 72454
// Randomize ;
72355: CALL_OW 10
// for i = array downto 1 do
72359: LD_ADDR_VAR 0 3
72363: PUSH
72364: DOUBLE
72365: LD_VAR 0 1
72369: INC
72370: ST_TO_ADDR
72371: LD_INT 1
72373: PUSH
72374: FOR_DOWNTO
72375: IFFALSE 72452
// begin index := rand ( 1 , array ) ;
72377: LD_ADDR_VAR 0 4
72381: PUSH
72382: LD_INT 1
72384: PPUSH
72385: LD_VAR 0 1
72389: PPUSH
72390: CALL_OW 12
72394: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72395: LD_ADDR_VAR 0 2
72399: PUSH
72400: LD_VAR 0 2
72404: PPUSH
72405: LD_VAR 0 2
72409: PUSH
72410: LD_INT 1
72412: PLUS
72413: PPUSH
72414: LD_VAR 0 1
72418: PUSH
72419: LD_VAR 0 4
72423: ARRAY
72424: PPUSH
72425: CALL_OW 2
72429: ST_TO_ADDR
// array := Delete ( array , index ) ;
72430: LD_ADDR_VAR 0 1
72434: PUSH
72435: LD_VAR 0 1
72439: PPUSH
72440: LD_VAR 0 4
72444: PPUSH
72445: CALL_OW 3
72449: ST_TO_ADDR
// end ;
72450: GO 72374
72452: POP
72453: POP
// end ;
72454: LD_VAR 0 2
72458: RET
// export function GetBaseMaterials ( base ) ; begin
72459: LD_INT 0
72461: PPUSH
// result := [ 0 , 0 , 0 ] ;
72462: LD_ADDR_VAR 0 2
72466: PUSH
72467: LD_INT 0
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: ST_TO_ADDR
// if not base then
72481: LD_VAR 0 1
72485: NOT
72486: IFFALSE 72490
// exit ;
72488: GO 72539
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72490: LD_ADDR_VAR 0 2
72494: PUSH
72495: LD_VAR 0 1
72499: PPUSH
72500: LD_INT 1
72502: PPUSH
72503: CALL_OW 275
72507: PUSH
72508: LD_VAR 0 1
72512: PPUSH
72513: LD_INT 2
72515: PPUSH
72516: CALL_OW 275
72520: PUSH
72521: LD_VAR 0 1
72525: PPUSH
72526: LD_INT 3
72528: PPUSH
72529: CALL_OW 275
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: ST_TO_ADDR
// end ;
72539: LD_VAR 0 2
72543: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72544: LD_INT 0
72546: PPUSH
72547: PPUSH
// result := array ;
72548: LD_ADDR_VAR 0 3
72552: PUSH
72553: LD_VAR 0 1
72557: ST_TO_ADDR
// if size >= result then
72558: LD_VAR 0 2
72562: PUSH
72563: LD_VAR 0 3
72567: GREATEREQUAL
72568: IFFALSE 72572
// exit ;
72570: GO 72622
// if size then
72572: LD_VAR 0 2
72576: IFFALSE 72622
// for i := array downto size do
72578: LD_ADDR_VAR 0 4
72582: PUSH
72583: DOUBLE
72584: LD_VAR 0 1
72588: INC
72589: ST_TO_ADDR
72590: LD_VAR 0 2
72594: PUSH
72595: FOR_DOWNTO
72596: IFFALSE 72620
// result := Delete ( result , result ) ;
72598: LD_ADDR_VAR 0 3
72602: PUSH
72603: LD_VAR 0 3
72607: PPUSH
72608: LD_VAR 0 3
72612: PPUSH
72613: CALL_OW 3
72617: ST_TO_ADDR
72618: GO 72595
72620: POP
72621: POP
// end ;
72622: LD_VAR 0 3
72626: RET
// export function ComExit ( unit ) ; var tmp ; begin
72627: LD_INT 0
72629: PPUSH
72630: PPUSH
// if not IsInUnit ( unit ) then
72631: LD_VAR 0 1
72635: PPUSH
72636: CALL_OW 310
72640: NOT
72641: IFFALSE 72645
// exit ;
72643: GO 72705
// tmp := IsInUnit ( unit ) ;
72645: LD_ADDR_VAR 0 3
72649: PUSH
72650: LD_VAR 0 1
72654: PPUSH
72655: CALL_OW 310
72659: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72660: LD_VAR 0 3
72664: PPUSH
72665: CALL_OW 247
72669: PUSH
72670: LD_INT 2
72672: EQUAL
72673: IFFALSE 72686
// ComExitVehicle ( unit ) else
72675: LD_VAR 0 1
72679: PPUSH
72680: CALL_OW 121
72684: GO 72695
// ComExitBuilding ( unit ) ;
72686: LD_VAR 0 1
72690: PPUSH
72691: CALL_OW 122
// result := tmp ;
72695: LD_ADDR_VAR 0 2
72699: PUSH
72700: LD_VAR 0 3
72704: ST_TO_ADDR
// end ;
72705: LD_VAR 0 2
72709: RET
// export function ComExitAll ( units ) ; var i ; begin
72710: LD_INT 0
72712: PPUSH
72713: PPUSH
// if not units then
72714: LD_VAR 0 1
72718: NOT
72719: IFFALSE 72723
// exit ;
72721: GO 72749
// for i in units do
72723: LD_ADDR_VAR 0 3
72727: PUSH
72728: LD_VAR 0 1
72732: PUSH
72733: FOR_IN
72734: IFFALSE 72747
// ComExit ( i ) ;
72736: LD_VAR 0 3
72740: PPUSH
72741: CALL 72627 0 1
72745: GO 72733
72747: POP
72748: POP
// end ;
72749: LD_VAR 0 2
72753: RET
// export function ResetHc ; begin
72754: LD_INT 0
72756: PPUSH
// InitHc ;
72757: CALL_OW 19
// hc_importance := 0 ;
72761: LD_ADDR_OWVAR 32
72765: PUSH
72766: LD_INT 0
72768: ST_TO_ADDR
// end ;
72769: LD_VAR 0 1
72773: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72774: LD_INT 0
72776: PPUSH
72777: PPUSH
72778: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72779: LD_ADDR_VAR 0 6
72783: PUSH
72784: LD_VAR 0 1
72788: PUSH
72789: LD_VAR 0 3
72793: PLUS
72794: PUSH
72795: LD_INT 2
72797: DIV
72798: ST_TO_ADDR
// if _x < 0 then
72799: LD_VAR 0 6
72803: PUSH
72804: LD_INT 0
72806: LESS
72807: IFFALSE 72824
// _x := _x * - 1 ;
72809: LD_ADDR_VAR 0 6
72813: PUSH
72814: LD_VAR 0 6
72818: PUSH
72819: LD_INT 1
72821: NEG
72822: MUL
72823: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72824: LD_ADDR_VAR 0 7
72828: PUSH
72829: LD_VAR 0 2
72833: PUSH
72834: LD_VAR 0 4
72838: PLUS
72839: PUSH
72840: LD_INT 2
72842: DIV
72843: ST_TO_ADDR
// if _y < 0 then
72844: LD_VAR 0 7
72848: PUSH
72849: LD_INT 0
72851: LESS
72852: IFFALSE 72869
// _y := _y * - 1 ;
72854: LD_ADDR_VAR 0 7
72858: PUSH
72859: LD_VAR 0 7
72863: PUSH
72864: LD_INT 1
72866: NEG
72867: MUL
72868: ST_TO_ADDR
// result := [ _x , _y ] ;
72869: LD_ADDR_VAR 0 5
72873: PUSH
72874: LD_VAR 0 6
72878: PUSH
72879: LD_VAR 0 7
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: ST_TO_ADDR
// end ;
72888: LD_VAR 0 5
72892: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72893: LD_INT 0
72895: PPUSH
72896: PPUSH
72897: PPUSH
72898: PPUSH
// task := GetTaskList ( unit ) ;
72899: LD_ADDR_VAR 0 7
72903: PUSH
72904: LD_VAR 0 1
72908: PPUSH
72909: CALL_OW 437
72913: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72914: LD_VAR 0 7
72918: NOT
72919: PUSH
72920: LD_VAR 0 1
72924: PPUSH
72925: LD_VAR 0 2
72929: PPUSH
72930: CALL_OW 308
72934: NOT
72935: AND
72936: IFFALSE 72940
// exit ;
72938: GO 73058
// if IsInArea ( unit , area ) then
72940: LD_VAR 0 1
72944: PPUSH
72945: LD_VAR 0 2
72949: PPUSH
72950: CALL_OW 308
72954: IFFALSE 72972
// begin ComMoveToArea ( unit , goAway ) ;
72956: LD_VAR 0 1
72960: PPUSH
72961: LD_VAR 0 3
72965: PPUSH
72966: CALL_OW 113
// exit ;
72970: GO 73058
// end ; if task [ 1 ] [ 1 ] <> M then
72972: LD_VAR 0 7
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PUSH
72981: LD_INT 1
72983: ARRAY
72984: PUSH
72985: LD_STRING M
72987: NONEQUAL
72988: IFFALSE 72992
// exit ;
72990: GO 73058
// x := task [ 1 ] [ 2 ] ;
72992: LD_ADDR_VAR 0 5
72996: PUSH
72997: LD_VAR 0 7
73001: PUSH
73002: LD_INT 1
73004: ARRAY
73005: PUSH
73006: LD_INT 2
73008: ARRAY
73009: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73010: LD_ADDR_VAR 0 6
73014: PUSH
73015: LD_VAR 0 7
73019: PUSH
73020: LD_INT 1
73022: ARRAY
73023: PUSH
73024: LD_INT 3
73026: ARRAY
73027: ST_TO_ADDR
// if InArea ( x , y , area ) then
73028: LD_VAR 0 5
73032: PPUSH
73033: LD_VAR 0 6
73037: PPUSH
73038: LD_VAR 0 2
73042: PPUSH
73043: CALL_OW 309
73047: IFFALSE 73058
// ComStop ( unit ) ;
73049: LD_VAR 0 1
73053: PPUSH
73054: CALL_OW 141
// end ;
73058: LD_VAR 0 4
73062: RET
// export function Abs ( value ) ; begin
73063: LD_INT 0
73065: PPUSH
// result := value ;
73066: LD_ADDR_VAR 0 2
73070: PUSH
73071: LD_VAR 0 1
73075: ST_TO_ADDR
// if value < 0 then
73076: LD_VAR 0 1
73080: PUSH
73081: LD_INT 0
73083: LESS
73084: IFFALSE 73101
// result := value * - 1 ;
73086: LD_ADDR_VAR 0 2
73090: PUSH
73091: LD_VAR 0 1
73095: PUSH
73096: LD_INT 1
73098: NEG
73099: MUL
73100: ST_TO_ADDR
// end ;
73101: LD_VAR 0 2
73105: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73106: LD_INT 0
73108: PPUSH
73109: PPUSH
73110: PPUSH
73111: PPUSH
73112: PPUSH
73113: PPUSH
73114: PPUSH
73115: PPUSH
// if not unit or not building then
73116: LD_VAR 0 1
73120: NOT
73121: PUSH
73122: LD_VAR 0 2
73126: NOT
73127: OR
73128: IFFALSE 73132
// exit ;
73130: GO 73358
// x := GetX ( building ) ;
73132: LD_ADDR_VAR 0 4
73136: PUSH
73137: LD_VAR 0 2
73141: PPUSH
73142: CALL_OW 250
73146: ST_TO_ADDR
// y := GetY ( building ) ;
73147: LD_ADDR_VAR 0 6
73151: PUSH
73152: LD_VAR 0 2
73156: PPUSH
73157: CALL_OW 251
73161: ST_TO_ADDR
// d := GetDir ( building ) ;
73162: LD_ADDR_VAR 0 8
73166: PUSH
73167: LD_VAR 0 2
73171: PPUSH
73172: CALL_OW 254
73176: ST_TO_ADDR
// r := 4 ;
73177: LD_ADDR_VAR 0 9
73181: PUSH
73182: LD_INT 4
73184: ST_TO_ADDR
// for i := 1 to 5 do
73185: LD_ADDR_VAR 0 10
73189: PUSH
73190: DOUBLE
73191: LD_INT 1
73193: DEC
73194: ST_TO_ADDR
73195: LD_INT 5
73197: PUSH
73198: FOR_TO
73199: IFFALSE 73356
// begin _x := ShiftX ( x , d , r + i ) ;
73201: LD_ADDR_VAR 0 5
73205: PUSH
73206: LD_VAR 0 4
73210: PPUSH
73211: LD_VAR 0 8
73215: PPUSH
73216: LD_VAR 0 9
73220: PUSH
73221: LD_VAR 0 10
73225: PLUS
73226: PPUSH
73227: CALL_OW 272
73231: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73232: LD_ADDR_VAR 0 7
73236: PUSH
73237: LD_VAR 0 6
73241: PPUSH
73242: LD_VAR 0 8
73246: PPUSH
73247: LD_VAR 0 9
73251: PUSH
73252: LD_VAR 0 10
73256: PLUS
73257: PPUSH
73258: CALL_OW 273
73262: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73263: LD_VAR 0 5
73267: PPUSH
73268: LD_VAR 0 7
73272: PPUSH
73273: CALL_OW 488
73277: PUSH
73278: LD_VAR 0 5
73282: PPUSH
73283: LD_VAR 0 7
73287: PPUSH
73288: CALL_OW 428
73292: PPUSH
73293: CALL_OW 247
73297: PUSH
73298: LD_INT 3
73300: PUSH
73301: LD_INT 2
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: IN
73308: NOT
73309: AND
73310: IFFALSE 73354
// begin ComMoveXY ( unit , _x , _y ) ;
73312: LD_VAR 0 1
73316: PPUSH
73317: LD_VAR 0 5
73321: PPUSH
73322: LD_VAR 0 7
73326: PPUSH
73327: CALL_OW 111
// result := [ _x , _y ] ;
73331: LD_ADDR_VAR 0 3
73335: PUSH
73336: LD_VAR 0 5
73340: PUSH
73341: LD_VAR 0 7
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: ST_TO_ADDR
// exit ;
73350: POP
73351: POP
73352: GO 73358
// end ; end ;
73354: GO 73198
73356: POP
73357: POP
// end ;
73358: LD_VAR 0 3
73362: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73363: LD_INT 0
73365: PPUSH
73366: PPUSH
73367: PPUSH
// result := 0 ;
73368: LD_ADDR_VAR 0 3
73372: PUSH
73373: LD_INT 0
73375: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73376: LD_VAR 0 1
73380: PUSH
73381: LD_INT 0
73383: LESS
73384: PUSH
73385: LD_VAR 0 1
73389: PUSH
73390: LD_INT 8
73392: GREATER
73393: OR
73394: PUSH
73395: LD_VAR 0 2
73399: PUSH
73400: LD_INT 0
73402: LESS
73403: OR
73404: PUSH
73405: LD_VAR 0 2
73409: PUSH
73410: LD_INT 8
73412: GREATER
73413: OR
73414: IFFALSE 73418
// exit ;
73416: GO 73493
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73418: LD_ADDR_VAR 0 4
73422: PUSH
73423: LD_INT 22
73425: PUSH
73426: LD_VAR 0 2
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PPUSH
73435: CALL_OW 69
73439: PUSH
73440: FOR_IN
73441: IFFALSE 73491
// begin un := UnitShoot ( i ) ;
73443: LD_ADDR_VAR 0 5
73447: PUSH
73448: LD_VAR 0 4
73452: PPUSH
73453: CALL_OW 504
73457: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73458: LD_VAR 0 5
73462: PPUSH
73463: CALL_OW 255
73467: PUSH
73468: LD_VAR 0 1
73472: EQUAL
73473: IFFALSE 73489
// begin result := un ;
73475: LD_ADDR_VAR 0 3
73479: PUSH
73480: LD_VAR 0 5
73484: ST_TO_ADDR
// exit ;
73485: POP
73486: POP
73487: GO 73493
// end ; end ;
73489: GO 73440
73491: POP
73492: POP
// end ;
73493: LD_VAR 0 3
73497: RET
// export function GetCargoBay ( units ) ; begin
73498: LD_INT 0
73500: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73501: LD_ADDR_VAR 0 2
73505: PUSH
73506: LD_VAR 0 1
73510: PPUSH
73511: LD_INT 2
73513: PUSH
73514: LD_INT 34
73516: PUSH
73517: LD_INT 12
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 34
73526: PUSH
73527: LD_INT 51
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 34
73536: PUSH
73537: LD_INT 32
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 34
73546: PUSH
73547: LD_INT 89
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: PPUSH
73561: CALL_OW 72
73565: ST_TO_ADDR
// end ;
73566: LD_VAR 0 2
73570: RET
// export function Negate ( value ) ; begin
73571: LD_INT 0
73573: PPUSH
// result := not value ;
73574: LD_ADDR_VAR 0 2
73578: PUSH
73579: LD_VAR 0 1
73583: NOT
73584: ST_TO_ADDR
// end ;
73585: LD_VAR 0 2
73589: RET
// export function Inc ( value ) ; begin
73590: LD_INT 0
73592: PPUSH
// result := value + 1 ;
73593: LD_ADDR_VAR 0 2
73597: PUSH
73598: LD_VAR 0 1
73602: PUSH
73603: LD_INT 1
73605: PLUS
73606: ST_TO_ADDR
// end ;
73607: LD_VAR 0 2
73611: RET
// export function Dec ( value ) ; begin
73612: LD_INT 0
73614: PPUSH
// result := value - 1 ;
73615: LD_ADDR_VAR 0 2
73619: PUSH
73620: LD_VAR 0 1
73624: PUSH
73625: LD_INT 1
73627: MINUS
73628: ST_TO_ADDR
// end ;
73629: LD_VAR 0 2
73633: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73634: LD_INT 0
73636: PPUSH
73637: PPUSH
73638: PPUSH
73639: PPUSH
73640: PPUSH
73641: PPUSH
73642: PPUSH
73643: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73644: LD_VAR 0 1
73648: PPUSH
73649: LD_VAR 0 2
73653: PPUSH
73654: CALL_OW 488
73658: NOT
73659: PUSH
73660: LD_VAR 0 3
73664: PPUSH
73665: LD_VAR 0 4
73669: PPUSH
73670: CALL_OW 488
73674: NOT
73675: OR
73676: IFFALSE 73689
// begin result := - 1 ;
73678: LD_ADDR_VAR 0 5
73682: PUSH
73683: LD_INT 1
73685: NEG
73686: ST_TO_ADDR
// exit ;
73687: GO 73924
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73689: LD_ADDR_VAR 0 12
73693: PUSH
73694: LD_VAR 0 1
73698: PPUSH
73699: LD_VAR 0 2
73703: PPUSH
73704: LD_VAR 0 3
73708: PPUSH
73709: LD_VAR 0 4
73713: PPUSH
73714: CALL 72774 0 4
73718: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73719: LD_ADDR_VAR 0 11
73723: PUSH
73724: LD_VAR 0 1
73728: PPUSH
73729: LD_VAR 0 2
73733: PPUSH
73734: LD_VAR 0 12
73738: PUSH
73739: LD_INT 1
73741: ARRAY
73742: PPUSH
73743: LD_VAR 0 12
73747: PUSH
73748: LD_INT 2
73750: ARRAY
73751: PPUSH
73752: CALL_OW 298
73756: ST_TO_ADDR
// distance := 9999 ;
73757: LD_ADDR_VAR 0 10
73761: PUSH
73762: LD_INT 9999
73764: ST_TO_ADDR
// for i := 0 to 5 do
73765: LD_ADDR_VAR 0 6
73769: PUSH
73770: DOUBLE
73771: LD_INT 0
73773: DEC
73774: ST_TO_ADDR
73775: LD_INT 5
73777: PUSH
73778: FOR_TO
73779: IFFALSE 73922
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73781: LD_ADDR_VAR 0 7
73785: PUSH
73786: LD_VAR 0 1
73790: PPUSH
73791: LD_VAR 0 6
73795: PPUSH
73796: LD_VAR 0 11
73800: PPUSH
73801: CALL_OW 272
73805: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73806: LD_ADDR_VAR 0 8
73810: PUSH
73811: LD_VAR 0 2
73815: PPUSH
73816: LD_VAR 0 6
73820: PPUSH
73821: LD_VAR 0 11
73825: PPUSH
73826: CALL_OW 273
73830: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73831: LD_VAR 0 7
73835: PPUSH
73836: LD_VAR 0 8
73840: PPUSH
73841: CALL_OW 488
73845: NOT
73846: IFFALSE 73850
// continue ;
73848: GO 73778
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73850: LD_ADDR_VAR 0 9
73854: PUSH
73855: LD_VAR 0 12
73859: PUSH
73860: LD_INT 1
73862: ARRAY
73863: PPUSH
73864: LD_VAR 0 12
73868: PUSH
73869: LD_INT 2
73871: ARRAY
73872: PPUSH
73873: LD_VAR 0 7
73877: PPUSH
73878: LD_VAR 0 8
73882: PPUSH
73883: CALL_OW 298
73887: ST_TO_ADDR
// if tmp < distance then
73888: LD_VAR 0 9
73892: PUSH
73893: LD_VAR 0 10
73897: LESS
73898: IFFALSE 73920
// begin result := i ;
73900: LD_ADDR_VAR 0 5
73904: PUSH
73905: LD_VAR 0 6
73909: ST_TO_ADDR
// distance := tmp ;
73910: LD_ADDR_VAR 0 10
73914: PUSH
73915: LD_VAR 0 9
73919: ST_TO_ADDR
// end ; end ;
73920: GO 73778
73922: POP
73923: POP
// end ;
73924: LD_VAR 0 5
73928: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73929: LD_INT 0
73931: PPUSH
73932: PPUSH
// if not driver or not IsInUnit ( driver ) then
73933: LD_VAR 0 1
73937: NOT
73938: PUSH
73939: LD_VAR 0 1
73943: PPUSH
73944: CALL_OW 310
73948: NOT
73949: OR
73950: IFFALSE 73954
// exit ;
73952: GO 74044
// vehicle := IsInUnit ( driver ) ;
73954: LD_ADDR_VAR 0 3
73958: PUSH
73959: LD_VAR 0 1
73963: PPUSH
73964: CALL_OW 310
73968: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73969: LD_VAR 0 1
73973: PPUSH
73974: LD_STRING \
73976: PUSH
73977: LD_INT 0
73979: PUSH
73980: LD_INT 0
73982: PUSH
73983: LD_INT 0
73985: PUSH
73986: LD_INT 0
73988: PUSH
73989: LD_INT 0
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: PUSH
74004: LD_STRING E
74006: PUSH
74007: LD_INT 0
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: LD_VAR 0 3
74017: PUSH
74018: LD_INT 0
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: LD_INT 0
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PPUSH
74040: CALL_OW 446
// end ;
74044: LD_VAR 0 2
74048: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74049: LD_INT 0
74051: PPUSH
74052: PPUSH
// if not driver or not IsInUnit ( driver ) then
74053: LD_VAR 0 1
74057: NOT
74058: PUSH
74059: LD_VAR 0 1
74063: PPUSH
74064: CALL_OW 310
74068: NOT
74069: OR
74070: IFFALSE 74074
// exit ;
74072: GO 74164
// vehicle := IsInUnit ( driver ) ;
74074: LD_ADDR_VAR 0 3
74078: PUSH
74079: LD_VAR 0 1
74083: PPUSH
74084: CALL_OW 310
74088: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74089: LD_VAR 0 1
74093: PPUSH
74094: LD_STRING \
74096: PUSH
74097: LD_INT 0
74099: PUSH
74100: LD_INT 0
74102: PUSH
74103: LD_INT 0
74105: PUSH
74106: LD_INT 0
74108: PUSH
74109: LD_INT 0
74111: PUSH
74112: LD_INT 0
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: PUSH
74124: LD_STRING E
74126: PUSH
74127: LD_INT 0
74129: PUSH
74130: LD_INT 0
74132: PUSH
74133: LD_VAR 0 3
74137: PUSH
74138: LD_INT 0
74140: PUSH
74141: LD_INT 0
74143: PUSH
74144: LD_INT 0
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PPUSH
74160: CALL_OW 447
// end ;
74164: LD_VAR 0 2
74168: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74169: LD_INT 0
74171: PPUSH
74172: PPUSH
74173: PPUSH
// tmp := [ ] ;
74174: LD_ADDR_VAR 0 5
74178: PUSH
74179: EMPTY
74180: ST_TO_ADDR
// for i in units do
74181: LD_ADDR_VAR 0 4
74185: PUSH
74186: LD_VAR 0 1
74190: PUSH
74191: FOR_IN
74192: IFFALSE 74230
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74194: LD_ADDR_VAR 0 5
74198: PUSH
74199: LD_VAR 0 5
74203: PPUSH
74204: LD_VAR 0 5
74208: PUSH
74209: LD_INT 1
74211: PLUS
74212: PPUSH
74213: LD_VAR 0 4
74217: PPUSH
74218: CALL_OW 256
74222: PPUSH
74223: CALL_OW 2
74227: ST_TO_ADDR
74228: GO 74191
74230: POP
74231: POP
// if not tmp then
74232: LD_VAR 0 5
74236: NOT
74237: IFFALSE 74241
// exit ;
74239: GO 74289
// if asc then
74241: LD_VAR 0 2
74245: IFFALSE 74269
// result := SortListByListAsc ( units , tmp ) else
74247: LD_ADDR_VAR 0 3
74251: PUSH
74252: LD_VAR 0 1
74256: PPUSH
74257: LD_VAR 0 5
74261: PPUSH
74262: CALL_OW 76
74266: ST_TO_ADDR
74267: GO 74289
// result := SortListByListDesc ( units , tmp ) ;
74269: LD_ADDR_VAR 0 3
74273: PUSH
74274: LD_VAR 0 1
74278: PPUSH
74279: LD_VAR 0 5
74283: PPUSH
74284: CALL_OW 77
74288: ST_TO_ADDR
// end ;
74289: LD_VAR 0 3
74293: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74294: LD_INT 0
74296: PPUSH
74297: PPUSH
// task := GetTaskList ( mech ) ;
74298: LD_ADDR_VAR 0 4
74302: PUSH
74303: LD_VAR 0 1
74307: PPUSH
74308: CALL_OW 437
74312: ST_TO_ADDR
// if not task then
74313: LD_VAR 0 4
74317: NOT
74318: IFFALSE 74322
// exit ;
74320: GO 74364
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74322: LD_ADDR_VAR 0 3
74326: PUSH
74327: LD_VAR 0 4
74331: PUSH
74332: LD_INT 1
74334: ARRAY
74335: PUSH
74336: LD_INT 1
74338: ARRAY
74339: PUSH
74340: LD_STRING r
74342: EQUAL
74343: PUSH
74344: LD_VAR 0 4
74348: PUSH
74349: LD_INT 1
74351: ARRAY
74352: PUSH
74353: LD_INT 4
74355: ARRAY
74356: PUSH
74357: LD_VAR 0 2
74361: EQUAL
74362: AND
74363: ST_TO_ADDR
// end ;
74364: LD_VAR 0 3
74368: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74369: LD_INT 0
74371: PPUSH
// SetDir ( unit , d ) ;
74372: LD_VAR 0 1
74376: PPUSH
74377: LD_VAR 0 4
74381: PPUSH
74382: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74386: LD_VAR 0 1
74390: PPUSH
74391: LD_VAR 0 2
74395: PPUSH
74396: LD_VAR 0 3
74400: PPUSH
74401: LD_VAR 0 5
74405: PPUSH
74406: CALL_OW 48
// end ;
74410: LD_VAR 0 6
74414: RET
// export function ToNaturalNumber ( number ) ; begin
74415: LD_INT 0
74417: PPUSH
// result := number div 1 ;
74418: LD_ADDR_VAR 0 2
74422: PUSH
74423: LD_VAR 0 1
74427: PUSH
74428: LD_INT 1
74430: DIV
74431: ST_TO_ADDR
// if number < 0 then
74432: LD_VAR 0 1
74436: PUSH
74437: LD_INT 0
74439: LESS
74440: IFFALSE 74450
// result := 0 ;
74442: LD_ADDR_VAR 0 2
74446: PUSH
74447: LD_INT 0
74449: ST_TO_ADDR
// end ;
74450: LD_VAR 0 2
74454: RET
// export function SortByClass ( units , class ) ; var un ; begin
74455: LD_INT 0
74457: PPUSH
74458: PPUSH
// if not units or not class then
74459: LD_VAR 0 1
74463: NOT
74464: PUSH
74465: LD_VAR 0 2
74469: NOT
74470: OR
74471: IFFALSE 74475
// exit ;
74473: GO 74570
// result := [ ] ;
74475: LD_ADDR_VAR 0 3
74479: PUSH
74480: EMPTY
74481: ST_TO_ADDR
// for un in units do
74482: LD_ADDR_VAR 0 4
74486: PUSH
74487: LD_VAR 0 1
74491: PUSH
74492: FOR_IN
74493: IFFALSE 74568
// if GetClass ( un ) = class then
74495: LD_VAR 0 4
74499: PPUSH
74500: CALL_OW 257
74504: PUSH
74505: LD_VAR 0 2
74509: EQUAL
74510: IFFALSE 74537
// result := Insert ( result , 1 , un ) else
74512: LD_ADDR_VAR 0 3
74516: PUSH
74517: LD_VAR 0 3
74521: PPUSH
74522: LD_INT 1
74524: PPUSH
74525: LD_VAR 0 4
74529: PPUSH
74530: CALL_OW 2
74534: ST_TO_ADDR
74535: GO 74566
// result := Replace ( result , result + 1 , un ) ;
74537: LD_ADDR_VAR 0 3
74541: PUSH
74542: LD_VAR 0 3
74546: PPUSH
74547: LD_VAR 0 3
74551: PUSH
74552: LD_INT 1
74554: PLUS
74555: PPUSH
74556: LD_VAR 0 4
74560: PPUSH
74561: CALL_OW 1
74565: ST_TO_ADDR
74566: GO 74492
74568: POP
74569: POP
// end ;
74570: LD_VAR 0 3
74574: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
74579: PPUSH
74580: PPUSH
74581: PPUSH
74582: PPUSH
74583: PPUSH
// result := [ ] ;
74584: LD_ADDR_VAR 0 4
74588: PUSH
74589: EMPTY
74590: ST_TO_ADDR
// if x - r < 0 then
74591: LD_VAR 0 1
74595: PUSH
74596: LD_VAR 0 3
74600: MINUS
74601: PUSH
74602: LD_INT 0
74604: LESS
74605: IFFALSE 74617
// min_x := 0 else
74607: LD_ADDR_VAR 0 8
74611: PUSH
74612: LD_INT 0
74614: ST_TO_ADDR
74615: GO 74633
// min_x := x - r ;
74617: LD_ADDR_VAR 0 8
74621: PUSH
74622: LD_VAR 0 1
74626: PUSH
74627: LD_VAR 0 3
74631: MINUS
74632: ST_TO_ADDR
// if y - r < 0 then
74633: LD_VAR 0 2
74637: PUSH
74638: LD_VAR 0 3
74642: MINUS
74643: PUSH
74644: LD_INT 0
74646: LESS
74647: IFFALSE 74659
// min_y := 0 else
74649: LD_ADDR_VAR 0 7
74653: PUSH
74654: LD_INT 0
74656: ST_TO_ADDR
74657: GO 74675
// min_y := y - r ;
74659: LD_ADDR_VAR 0 7
74663: PUSH
74664: LD_VAR 0 2
74668: PUSH
74669: LD_VAR 0 3
74673: MINUS
74674: ST_TO_ADDR
// max_x := x + r ;
74675: LD_ADDR_VAR 0 9
74679: PUSH
74680: LD_VAR 0 1
74684: PUSH
74685: LD_VAR 0 3
74689: PLUS
74690: ST_TO_ADDR
// max_y := y + r ;
74691: LD_ADDR_VAR 0 10
74695: PUSH
74696: LD_VAR 0 2
74700: PUSH
74701: LD_VAR 0 3
74705: PLUS
74706: ST_TO_ADDR
// for _x = min_x to max_x do
74707: LD_ADDR_VAR 0 5
74711: PUSH
74712: DOUBLE
74713: LD_VAR 0 8
74717: DEC
74718: ST_TO_ADDR
74719: LD_VAR 0 9
74723: PUSH
74724: FOR_TO
74725: IFFALSE 74826
// for _y = min_y to max_y do
74727: LD_ADDR_VAR 0 6
74731: PUSH
74732: DOUBLE
74733: LD_VAR 0 7
74737: DEC
74738: ST_TO_ADDR
74739: LD_VAR 0 10
74743: PUSH
74744: FOR_TO
74745: IFFALSE 74822
// begin if not ValidHex ( _x , _y ) then
74747: LD_VAR 0 5
74751: PPUSH
74752: LD_VAR 0 6
74756: PPUSH
74757: CALL_OW 488
74761: NOT
74762: IFFALSE 74766
// continue ;
74764: GO 74744
// if GetResourceTypeXY ( _x , _y ) then
74766: LD_VAR 0 5
74770: PPUSH
74771: LD_VAR 0 6
74775: PPUSH
74776: CALL_OW 283
74780: IFFALSE 74820
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74782: LD_ADDR_VAR 0 4
74786: PUSH
74787: LD_VAR 0 4
74791: PPUSH
74792: LD_VAR 0 4
74796: PUSH
74797: LD_INT 1
74799: PLUS
74800: PPUSH
74801: LD_VAR 0 5
74805: PUSH
74806: LD_VAR 0 6
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PPUSH
74815: CALL_OW 1
74819: ST_TO_ADDR
// end ;
74820: GO 74744
74822: POP
74823: POP
74824: GO 74724
74826: POP
74827: POP
// end ;
74828: LD_VAR 0 4
74832: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74833: LD_INT 0
74835: PPUSH
74836: PPUSH
74837: PPUSH
74838: PPUSH
74839: PPUSH
74840: PPUSH
74841: PPUSH
74842: PPUSH
// if not units then
74843: LD_VAR 0 1
74847: NOT
74848: IFFALSE 74852
// exit ;
74850: GO 75376
// result := UnitFilter ( units , [ f_ok ] ) ;
74852: LD_ADDR_VAR 0 3
74856: PUSH
74857: LD_VAR 0 1
74861: PPUSH
74862: LD_INT 50
74864: PUSH
74865: EMPTY
74866: LIST
74867: PPUSH
74868: CALL_OW 72
74872: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74873: LD_ADDR_VAR 0 8
74877: PUSH
74878: LD_VAR 0 1
74882: PUSH
74883: LD_INT 1
74885: ARRAY
74886: PPUSH
74887: CALL_OW 255
74891: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74892: LD_ADDR_VAR 0 10
74896: PUSH
74897: LD_INT 29
74899: PUSH
74900: LD_INT 91
74902: PUSH
74903: LD_INT 49
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: LIST
74910: ST_TO_ADDR
// if not result then
74911: LD_VAR 0 3
74915: NOT
74916: IFFALSE 74920
// exit ;
74918: GO 75376
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74920: LD_ADDR_VAR 0 5
74924: PUSH
74925: LD_INT 81
74927: PUSH
74928: LD_VAR 0 8
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PPUSH
74937: CALL_OW 69
74941: ST_TO_ADDR
// for i in result do
74942: LD_ADDR_VAR 0 4
74946: PUSH
74947: LD_VAR 0 3
74951: PUSH
74952: FOR_IN
74953: IFFALSE 75374
// begin tag := GetTag ( i ) + 1 ;
74955: LD_ADDR_VAR 0 9
74959: PUSH
74960: LD_VAR 0 4
74964: PPUSH
74965: CALL_OW 110
74969: PUSH
74970: LD_INT 1
74972: PLUS
74973: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74974: LD_ADDR_VAR 0 7
74978: PUSH
74979: LD_VAR 0 4
74983: PPUSH
74984: CALL_OW 250
74988: PPUSH
74989: LD_VAR 0 4
74993: PPUSH
74994: CALL_OW 251
74998: PPUSH
74999: LD_INT 6
75001: PPUSH
75002: CALL 74575 0 3
75006: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75007: LD_VAR 0 4
75011: PPUSH
75012: CALL_OW 247
75016: PUSH
75017: LD_INT 2
75019: EQUAL
75020: PUSH
75021: LD_VAR 0 7
75025: AND
75026: PUSH
75027: LD_VAR 0 4
75031: PPUSH
75032: CALL_OW 264
75036: PUSH
75037: LD_VAR 0 10
75041: IN
75042: NOT
75043: AND
75044: IFFALSE 75083
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75046: LD_VAR 0 4
75050: PPUSH
75051: LD_VAR 0 7
75055: PUSH
75056: LD_INT 1
75058: ARRAY
75059: PUSH
75060: LD_INT 1
75062: ARRAY
75063: PPUSH
75064: LD_VAR 0 7
75068: PUSH
75069: LD_INT 1
75071: ARRAY
75072: PUSH
75073: LD_INT 2
75075: ARRAY
75076: PPUSH
75077: CALL_OW 116
75081: GO 75372
// if path > tag then
75083: LD_VAR 0 2
75087: PUSH
75088: LD_VAR 0 9
75092: GREATER
75093: IFFALSE 75301
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75095: LD_ADDR_VAR 0 6
75099: PUSH
75100: LD_VAR 0 5
75104: PPUSH
75105: LD_INT 91
75107: PUSH
75108: LD_VAR 0 4
75112: PUSH
75113: LD_INT 8
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: LIST
75120: PPUSH
75121: CALL_OW 72
75125: ST_TO_ADDR
// if nearEnemy then
75126: LD_VAR 0 6
75130: IFFALSE 75199
// begin if GetWeapon ( i ) = ru_time_lapser then
75132: LD_VAR 0 4
75136: PPUSH
75137: CALL_OW 264
75141: PUSH
75142: LD_INT 49
75144: EQUAL
75145: IFFALSE 75173
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75147: LD_VAR 0 4
75151: PPUSH
75152: LD_VAR 0 6
75156: PPUSH
75157: LD_VAR 0 4
75161: PPUSH
75162: CALL_OW 74
75166: PPUSH
75167: CALL_OW 112
75171: GO 75197
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75173: LD_VAR 0 4
75177: PPUSH
75178: LD_VAR 0 6
75182: PPUSH
75183: LD_VAR 0 4
75187: PPUSH
75188: CALL_OW 74
75192: PPUSH
75193: CALL_OW 115
// end else
75197: GO 75299
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75199: LD_VAR 0 4
75203: PPUSH
75204: LD_VAR 0 2
75208: PUSH
75209: LD_VAR 0 9
75213: ARRAY
75214: PUSH
75215: LD_INT 1
75217: ARRAY
75218: PPUSH
75219: LD_VAR 0 2
75223: PUSH
75224: LD_VAR 0 9
75228: ARRAY
75229: PUSH
75230: LD_INT 2
75232: ARRAY
75233: PPUSH
75234: CALL_OW 297
75238: PUSH
75239: LD_INT 6
75241: GREATER
75242: IFFALSE 75285
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75244: LD_VAR 0 4
75248: PPUSH
75249: LD_VAR 0 2
75253: PUSH
75254: LD_VAR 0 9
75258: ARRAY
75259: PUSH
75260: LD_INT 1
75262: ARRAY
75263: PPUSH
75264: LD_VAR 0 2
75268: PUSH
75269: LD_VAR 0 9
75273: ARRAY
75274: PUSH
75275: LD_INT 2
75277: ARRAY
75278: PPUSH
75279: CALL_OW 114
75283: GO 75299
// SetTag ( i , tag ) ;
75285: LD_VAR 0 4
75289: PPUSH
75290: LD_VAR 0 9
75294: PPUSH
75295: CALL_OW 109
// end else
75299: GO 75372
// if enemy then
75301: LD_VAR 0 5
75305: IFFALSE 75372
// begin if GetWeapon ( i ) = ru_time_lapser then
75307: LD_VAR 0 4
75311: PPUSH
75312: CALL_OW 264
75316: PUSH
75317: LD_INT 49
75319: EQUAL
75320: IFFALSE 75348
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75322: LD_VAR 0 4
75326: PPUSH
75327: LD_VAR 0 5
75331: PPUSH
75332: LD_VAR 0 4
75336: PPUSH
75337: CALL_OW 74
75341: PPUSH
75342: CALL_OW 112
75346: GO 75372
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75348: LD_VAR 0 4
75352: PPUSH
75353: LD_VAR 0 5
75357: PPUSH
75358: LD_VAR 0 4
75362: PPUSH
75363: CALL_OW 74
75367: PPUSH
75368: CALL_OW 115
// end ; end ;
75372: GO 74952
75374: POP
75375: POP
// end ;
75376: LD_VAR 0 3
75380: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75381: LD_INT 0
75383: PPUSH
75384: PPUSH
75385: PPUSH
// if not unit or IsInUnit ( unit ) then
75386: LD_VAR 0 1
75390: NOT
75391: PUSH
75392: LD_VAR 0 1
75396: PPUSH
75397: CALL_OW 310
75401: OR
75402: IFFALSE 75406
// exit ;
75404: GO 75497
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75406: LD_ADDR_VAR 0 4
75410: PUSH
75411: LD_VAR 0 1
75415: PPUSH
75416: CALL_OW 250
75420: PPUSH
75421: LD_VAR 0 2
75425: PPUSH
75426: LD_INT 1
75428: PPUSH
75429: CALL_OW 272
75433: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75434: LD_ADDR_VAR 0 5
75438: PUSH
75439: LD_VAR 0 1
75443: PPUSH
75444: CALL_OW 251
75448: PPUSH
75449: LD_VAR 0 2
75453: PPUSH
75454: LD_INT 1
75456: PPUSH
75457: CALL_OW 273
75461: ST_TO_ADDR
// if ValidHex ( x , y ) then
75462: LD_VAR 0 4
75466: PPUSH
75467: LD_VAR 0 5
75471: PPUSH
75472: CALL_OW 488
75476: IFFALSE 75497
// ComTurnXY ( unit , x , y ) ;
75478: LD_VAR 0 1
75482: PPUSH
75483: LD_VAR 0 4
75487: PPUSH
75488: LD_VAR 0 5
75492: PPUSH
75493: CALL_OW 118
// end ;
75497: LD_VAR 0 3
75501: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75502: LD_INT 0
75504: PPUSH
75505: PPUSH
// result := false ;
75506: LD_ADDR_VAR 0 3
75510: PUSH
75511: LD_INT 0
75513: ST_TO_ADDR
// if not units then
75514: LD_VAR 0 2
75518: NOT
75519: IFFALSE 75523
// exit ;
75521: GO 75568
// for i in units do
75523: LD_ADDR_VAR 0 4
75527: PUSH
75528: LD_VAR 0 2
75532: PUSH
75533: FOR_IN
75534: IFFALSE 75566
// if See ( side , i ) then
75536: LD_VAR 0 1
75540: PPUSH
75541: LD_VAR 0 4
75545: PPUSH
75546: CALL_OW 292
75550: IFFALSE 75564
// begin result := true ;
75552: LD_ADDR_VAR 0 3
75556: PUSH
75557: LD_INT 1
75559: ST_TO_ADDR
// exit ;
75560: POP
75561: POP
75562: GO 75568
// end ;
75564: GO 75533
75566: POP
75567: POP
// end ;
75568: LD_VAR 0 3
75572: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75573: LD_INT 0
75575: PPUSH
75576: PPUSH
75577: PPUSH
75578: PPUSH
// if not unit or not points then
75579: LD_VAR 0 1
75583: NOT
75584: PUSH
75585: LD_VAR 0 2
75589: NOT
75590: OR
75591: IFFALSE 75595
// exit ;
75593: GO 75685
// dist := 99999 ;
75595: LD_ADDR_VAR 0 5
75599: PUSH
75600: LD_INT 99999
75602: ST_TO_ADDR
// for i in points do
75603: LD_ADDR_VAR 0 4
75607: PUSH
75608: LD_VAR 0 2
75612: PUSH
75613: FOR_IN
75614: IFFALSE 75683
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75616: LD_ADDR_VAR 0 6
75620: PUSH
75621: LD_VAR 0 1
75625: PPUSH
75626: LD_VAR 0 4
75630: PUSH
75631: LD_INT 1
75633: ARRAY
75634: PPUSH
75635: LD_VAR 0 4
75639: PUSH
75640: LD_INT 2
75642: ARRAY
75643: PPUSH
75644: CALL_OW 297
75648: ST_TO_ADDR
// if tmpDist < dist then
75649: LD_VAR 0 6
75653: PUSH
75654: LD_VAR 0 5
75658: LESS
75659: IFFALSE 75681
// begin result := i ;
75661: LD_ADDR_VAR 0 3
75665: PUSH
75666: LD_VAR 0 4
75670: ST_TO_ADDR
// dist := tmpDist ;
75671: LD_ADDR_VAR 0 5
75675: PUSH
75676: LD_VAR 0 6
75680: ST_TO_ADDR
// end ; end ;
75681: GO 75613
75683: POP
75684: POP
// end ;
75685: LD_VAR 0 3
75689: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75690: LD_INT 0
75692: PPUSH
// uc_side := side ;
75693: LD_ADDR_OWVAR 20
75697: PUSH
75698: LD_VAR 0 1
75702: ST_TO_ADDR
// uc_nation := 3 ;
75703: LD_ADDR_OWVAR 21
75707: PUSH
75708: LD_INT 3
75710: ST_TO_ADDR
// vc_chassis := 25 ;
75711: LD_ADDR_OWVAR 37
75715: PUSH
75716: LD_INT 25
75718: ST_TO_ADDR
// vc_engine := engine_siberite ;
75719: LD_ADDR_OWVAR 39
75723: PUSH
75724: LD_INT 3
75726: ST_TO_ADDR
// vc_control := control_computer ;
75727: LD_ADDR_OWVAR 38
75731: PUSH
75732: LD_INT 3
75734: ST_TO_ADDR
// vc_weapon := 59 ;
75735: LD_ADDR_OWVAR 40
75739: PUSH
75740: LD_INT 59
75742: ST_TO_ADDR
// result := CreateVehicle ;
75743: LD_ADDR_VAR 0 5
75747: PUSH
75748: CALL_OW 45
75752: ST_TO_ADDR
// SetDir ( result , d ) ;
75753: LD_VAR 0 5
75757: PPUSH
75758: LD_VAR 0 4
75762: PPUSH
75763: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75767: LD_VAR 0 5
75771: PPUSH
75772: LD_VAR 0 2
75776: PPUSH
75777: LD_VAR 0 3
75781: PPUSH
75782: LD_INT 0
75784: PPUSH
75785: CALL_OW 48
// end ;
75789: LD_VAR 0 5
75793: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75794: LD_INT 0
75796: PPUSH
75797: PPUSH
75798: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75799: LD_ADDR_VAR 0 2
75803: PUSH
75804: LD_INT 0
75806: PUSH
75807: LD_INT 0
75809: PUSH
75810: LD_INT 0
75812: PUSH
75813: LD_INT 0
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75822: LD_VAR 0 1
75826: NOT
75827: PUSH
75828: LD_VAR 0 1
75832: PPUSH
75833: CALL_OW 264
75837: PUSH
75838: LD_INT 12
75840: PUSH
75841: LD_INT 51
75843: PUSH
75844: LD_INT 32
75846: PUSH
75847: LD_INT 89
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: IN
75856: NOT
75857: OR
75858: IFFALSE 75862
// exit ;
75860: GO 75960
// for i := 1 to 3 do
75862: LD_ADDR_VAR 0 3
75866: PUSH
75867: DOUBLE
75868: LD_INT 1
75870: DEC
75871: ST_TO_ADDR
75872: LD_INT 3
75874: PUSH
75875: FOR_TO
75876: IFFALSE 75958
// begin tmp := GetCargo ( cargo , i ) ;
75878: LD_ADDR_VAR 0 4
75882: PUSH
75883: LD_VAR 0 1
75887: PPUSH
75888: LD_VAR 0 3
75892: PPUSH
75893: CALL_OW 289
75897: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75898: LD_ADDR_VAR 0 2
75902: PUSH
75903: LD_VAR 0 2
75907: PPUSH
75908: LD_VAR 0 3
75912: PPUSH
75913: LD_VAR 0 4
75917: PPUSH
75918: CALL_OW 1
75922: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75923: LD_ADDR_VAR 0 2
75927: PUSH
75928: LD_VAR 0 2
75932: PPUSH
75933: LD_INT 4
75935: PPUSH
75936: LD_VAR 0 2
75940: PUSH
75941: LD_INT 4
75943: ARRAY
75944: PUSH
75945: LD_VAR 0 4
75949: PLUS
75950: PPUSH
75951: CALL_OW 1
75955: ST_TO_ADDR
// end ;
75956: GO 75875
75958: POP
75959: POP
// end ;
75960: LD_VAR 0 2
75964: RET
// export function Length ( array ) ; begin
75965: LD_INT 0
75967: PPUSH
// result := array + 0 ;
75968: LD_ADDR_VAR 0 2
75972: PUSH
75973: LD_VAR 0 1
75977: PUSH
75978: LD_INT 0
75980: PLUS
75981: ST_TO_ADDR
// end ;
75982: LD_VAR 0 2
75986: RET
// export function PrepareArray ( array ) ; begin
75987: LD_INT 0
75989: PPUSH
// result := array diff 0 ;
75990: LD_ADDR_VAR 0 2
75994: PUSH
75995: LD_VAR 0 1
75999: PUSH
76000: LD_INT 0
76002: DIFF
76003: ST_TO_ADDR
// if not result [ 1 ] then
76004: LD_VAR 0 2
76008: PUSH
76009: LD_INT 1
76011: ARRAY
76012: NOT
76013: IFFALSE 76033
// result := Delete ( result , 1 ) ;
76015: LD_ADDR_VAR 0 2
76019: PUSH
76020: LD_VAR 0 2
76024: PPUSH
76025: LD_INT 1
76027: PPUSH
76028: CALL_OW 3
76032: ST_TO_ADDR
// end ;
76033: LD_VAR 0 2
76037: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76038: LD_INT 0
76040: PPUSH
76041: PPUSH
76042: PPUSH
76043: PPUSH
// sibRocketRange := 25 ;
76044: LD_ADDR_VAR 0 6
76048: PUSH
76049: LD_INT 25
76051: ST_TO_ADDR
// result := false ;
76052: LD_ADDR_VAR 0 4
76056: PUSH
76057: LD_INT 0
76059: ST_TO_ADDR
// for i := 0 to 5 do
76060: LD_ADDR_VAR 0 5
76064: PUSH
76065: DOUBLE
76066: LD_INT 0
76068: DEC
76069: ST_TO_ADDR
76070: LD_INT 5
76072: PUSH
76073: FOR_TO
76074: IFFALSE 76141
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76076: LD_VAR 0 1
76080: PPUSH
76081: LD_VAR 0 5
76085: PPUSH
76086: LD_VAR 0 6
76090: PPUSH
76091: CALL_OW 272
76095: PPUSH
76096: LD_VAR 0 2
76100: PPUSH
76101: LD_VAR 0 5
76105: PPUSH
76106: LD_VAR 0 6
76110: PPUSH
76111: CALL_OW 273
76115: PPUSH
76116: LD_VAR 0 3
76120: PPUSH
76121: CALL_OW 309
76125: IFFALSE 76139
// begin result := true ;
76127: LD_ADDR_VAR 0 4
76131: PUSH
76132: LD_INT 1
76134: ST_TO_ADDR
// exit ;
76135: POP
76136: POP
76137: GO 76143
// end ;
76139: GO 76073
76141: POP
76142: POP
// end ;
76143: LD_VAR 0 4
76147: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76148: LD_INT 0
76150: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76151: LD_VAR 0 1
76155: PPUSH
76156: LD_VAR 0 2
76160: PPUSH
76161: LD_INT 0
76163: PPUSH
76164: LD_INT 0
76166: PPUSH
76167: LD_INT 1
76169: PPUSH
76170: LD_INT 0
76172: PPUSH
76173: CALL_OW 587
// end ; end_of_file
76177: LD_VAR 0 3
76181: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76182: LD_VAR 0 1
76186: PUSH
76187: LD_INT 200
76189: DOUBLE
76190: GREATEREQUAL
76191: IFFALSE 76199
76193: LD_INT 299
76195: DOUBLE
76196: LESSEQUAL
76197: IFTRUE 76201
76199: GO 76233
76201: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76202: LD_VAR 0 1
76206: PPUSH
76207: LD_VAR 0 2
76211: PPUSH
76212: LD_VAR 0 3
76216: PPUSH
76217: LD_VAR 0 4
76221: PPUSH
76222: LD_VAR 0 5
76226: PPUSH
76227: CALL 15054 0 5
76231: GO 76310
76233: LD_INT 300
76235: DOUBLE
76236: GREATEREQUAL
76237: IFFALSE 76245
76239: LD_INT 399
76241: DOUBLE
76242: LESSEQUAL
76243: IFTRUE 76247
76245: GO 76309
76247: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76248: LD_VAR 0 1
76252: PPUSH
76253: LD_VAR 0 2
76257: PPUSH
76258: LD_VAR 0 3
76262: PPUSH
76263: LD_VAR 0 4
76267: PPUSH
76268: LD_VAR 0 5
76272: PPUSH
76273: LD_VAR 0 6
76277: PPUSH
76278: LD_VAR 0 7
76282: PPUSH
76283: LD_VAR 0 8
76287: PPUSH
76288: LD_VAR 0 9
76292: PPUSH
76293: LD_VAR 0 10
76297: PPUSH
76298: LD_VAR 0 11
76302: PPUSH
76303: CALL 31470 0 11
76307: GO 76310
76309: POP
// end ;
76310: PPOPN 11
76312: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76313: LD_VAR 0 1
76317: PPUSH
76318: LD_VAR 0 2
76322: PPUSH
76323: LD_VAR 0 3
76327: PPUSH
76328: LD_VAR 0 4
76332: PPUSH
76333: LD_VAR 0 5
76337: PPUSH
76338: CALL 14790 0 5
// end ; end_of_file
76342: PPOPN 5
76344: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76345: LD_VAR 0 1
76349: PPUSH
76350: LD_VAR 0 2
76354: PPUSH
76355: LD_VAR 0 3
76359: PPUSH
76360: LD_VAR 0 4
76364: PPUSH
76365: LD_VAR 0 5
76369: PPUSH
76370: LD_VAR 0 6
76374: PPUSH
76375: CALL 19122 0 6
// end ;
76379: PPOPN 6
76381: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76382: LD_INT 0
76384: PPUSH
// begin if not units then
76385: LD_VAR 0 1
76389: NOT
76390: IFFALSE 76394
// exit ;
76392: GO 76394
// end ;
76394: PPOPN 7
76396: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76397: CALL 19026 0 0
// end ;
76401: PPOPN 1
76403: END
