// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// PrepareNature ;
   8: CALL 461 0 0
// PrepareArabian ;
  12: CALL 1784 0 0
// Action ;
  16: CALL 2102 0 0
// end ;
  20: END
// export debug , prefix , hasAll , deadCounter , ibrahimHasEscaped ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 03_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 03_
  39: ST_TO_ADDR
// hasAll := LoadVariable ( 03_HasAll , true ) ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 03_HasAll
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// deadCounter := LoadVariable ( 03_DeadCounter , 0 ) ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_STRING 03_DeadCounter
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// ibrahimHasEscaped := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_IbrahimHasEscaped
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// end ; end_of_file
  88: LD_VAR 0 1
  92: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  93: LD_INT 0
  95: PPUSH
  96: PPUSH
// if exist_mode then
  97: LD_VAR 0 2
 101: IFFALSE 126
// unit := CreateCharacter ( prefix & ident ) else
 103: LD_ADDR_VAR 0 5
 107: PUSH
 108: LD_VAR 0 3
 112: PUSH
 113: LD_VAR 0 1
 117: STR
 118: PPUSH
 119: CALL_OW 34
 123: ST_TO_ADDR
 124: GO 141
// unit := NewCharacter ( ident ) ;
 126: LD_ADDR_VAR 0 5
 130: PUSH
 131: LD_VAR 0 1
 135: PPUSH
 136: CALL_OW 25
 140: ST_TO_ADDR
// result := unit ;
 141: LD_ADDR_VAR 0 4
 145: PUSH
 146: LD_VAR 0 5
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 4
 155: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 156: LD_INT 0
 158: PPUSH
// uc_side := side ;
 159: LD_ADDR_OWVAR 20
 163: PUSH
 164: LD_VAR 0 1
 168: ST_TO_ADDR
// uc_nation := nation ;
 169: LD_ADDR_OWVAR 21
 173: PUSH
 174: LD_VAR 0 2
 178: ST_TO_ADDR
// vc_chassis := chassis ;
 179: LD_ADDR_OWVAR 37
 183: PUSH
 184: LD_VAR 0 3
 188: ST_TO_ADDR
// vc_engine := engine ;
 189: LD_ADDR_OWVAR 39
 193: PUSH
 194: LD_VAR 0 4
 198: ST_TO_ADDR
// vc_control := control ;
 199: LD_ADDR_OWVAR 38
 203: PUSH
 204: LD_VAR 0 5
 208: ST_TO_ADDR
// vc_weapon := weapon ;
 209: LD_ADDR_OWVAR 40
 213: PUSH
 214: LD_VAR 0 6
 218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 219: LD_ADDR_OWVAR 41
 223: PUSH
 224: LD_VAR 0 7
 228: ST_TO_ADDR
// result := CreateVehicle ;
 229: LD_ADDR_VAR 0 8
 233: PUSH
 234: CALL_OW 45
 238: ST_TO_ADDR
// end ;
 239: LD_VAR 0 8
 243: RET
// export function SayX ( units , ident ) ; var i ; begin
 244: LD_INT 0
 246: PPUSH
 247: PPUSH
// result := false ;
 248: LD_ADDR_VAR 0 3
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// if not units then
 256: LD_VAR 0 1
 260: NOT
 261: IFFALSE 265
// exit ;
 263: GO 319
// for i in units do
 265: LD_ADDR_VAR 0 4
 269: PUSH
 270: LD_VAR 0 1
 274: PUSH
 275: FOR_IN
 276: IFFALSE 317
// if IsOk ( i ) then
 278: LD_VAR 0 4
 282: PPUSH
 283: CALL_OW 302
 287: IFFALSE 315
// begin Say ( i , ident ) ;
 289: LD_VAR 0 4
 293: PPUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 88
// result := i ;
 303: LD_ADDR_VAR 0 3
 307: PUSH
 308: LD_VAR 0 4
 312: ST_TO_ADDR
// break ;
 313: GO 317
// end ;
 315: GO 275
 317: POP
 318: POP
// end ;
 319: LD_VAR 0 3
 323: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
// InitUc ;
 328: CALL_OW 18
// InitHc ;
 332: CALL_OW 19
// uc_side := 0 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_nation := 0 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// for i = 1 to amount do
 352: LD_ADDR_VAR 0 4
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_VAR 0 2
 366: PUSH
 367: FOR_TO
 368: IFFALSE 450
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 370: LD_ADDR_OWVAR 29
 374: PUSH
 375: LD_INT 9
 377: PPUSH
 378: LD_INT 12
 380: PPUSH
 381: CALL_OW 12
 385: PUSH
 386: LD_INT 9
 388: PPUSH
 389: LD_INT 12
 391: PPUSH
 392: CALL_OW 12
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 401: LD_ADDR_OWVAR 35
 405: PUSH
 406: LD_INT 1
 408: NEG
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL_OW 12
 417: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 418: LD_INT 0
 420: PPUSH
 421: LD_INT 12
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 1
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 367
 450: POP
 451: POP
// InitHc ;
 452: CALL_OW 19
// end ;
 456: LD_VAR 0 3
 460: RET
// export function PrepareNature ; var i ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 465: LD_INT 1
 467: PPUSH
 468: LD_INT 4
 470: PUSH
 471: LD_INT 4
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 324 0 2
// for i := 1 to 3 do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 3
 504: PUSH
 505: FOR_TO
 506: IFFALSE 541
// begin hc_class := 21 ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_INT 21
 515: ST_TO_ADDR
// hc_gallery :=  ;
 516: LD_ADDR_OWVAR 33
 520: PUSH
 521: LD_STRING 
 523: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 524: CALL_OW 44
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL_OW 49
// end ;
 539: GO 505
 541: POP
 542: POP
// for i := 1 to 2 do
 543: LD_ADDR_VAR 0 2
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_INT 2
 555: PUSH
 556: FOR_TO
 557: IFFALSE 592
// begin hc_class := 18 ;
 559: LD_ADDR_OWVAR 28
 563: PUSH
 564: LD_INT 18
 566: ST_TO_ADDR
// hc_gallery :=  ;
 567: LD_ADDR_OWVAR 33
 571: PUSH
 572: LD_STRING 
 574: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 575: CALL_OW 44
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 49
// end ;
 590: GO 556
 592: POP
 593: POP
// for i := 1 to 2 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 2
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 13 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 13
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// end ;
 645: LD_VAR 0 1
 649: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 650: LD_INT 0
 652: PPUSH
 653: PPUSH
 654: PPUSH
// if not observer or not unit then
 655: LD_VAR 0 1
 659: NOT
 660: IFTRUE 669
 662: PUSH
 663: LD_VAR 0 2
 667: NOT
 668: OR
 669: IFFALSE 673
// exit ;
 671: GO 721
// if not See ( GetSide ( observer ) , unit ) then
 673: LD_VAR 0 1
 677: PPUSH
 678: CALL_OW 255
 682: PPUSH
 683: LD_VAR 0 2
 687: PPUSH
 688: CALL_OW 292
 692: NOT
 693: IFFALSE 697
// exit ;
 695: GO 721
// result := GetDistUnits ( observer , unit ) < 12 ;
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: LD_VAR 0 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: CALL_OW 296
 716: PUSH
 717: LD_INT 12
 719: LESS
 720: ST_TO_ADDR
// end ;
 721: LD_VAR 0 3
 725: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 726: LD_INT 0
 728: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 729: LD_VAR 0 2
 733: PUSH
 734: LD_INT 1
 736: ARRAY
 737: PPUSH
 738: LD_VAR 0 2
 742: PUSH
 743: LD_INT 2
 745: ARRAY
 746: PPUSH
 747: CALL_OW 488
 751: IFFALSE 781
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: LD_VAR 0 2
 767: PUSH
 768: LD_INT 2
 770: ARRAY
 771: PPUSH
 772: CALL_OW 428
 776: PUSH
 777: LD_INT 0
 779: EQUAL
 780: AND
 781: IFFALSE 815
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 783: LD_VAR 0 1
 787: PPUSH
 788: LD_VAR 0 2
 792: PUSH
 793: LD_INT 1
 795: ARRAY
 796: PPUSH
 797: LD_VAR 0 2
 801: PUSH
 802: LD_INT 2
 804: ARRAY
 805: PPUSH
 806: LD_VAR 0 3
 810: PPUSH
 811: CALL_OW 48
// end ;
 815: LD_VAR 0 4
 819: RET
// export function Video ( mode ) ; begin
 820: LD_INT 0
 822: PPUSH
// ingame_video = mode ;
 823: LD_ADDR_OWVAR 52
 827: PUSH
 828: LD_VAR 0 1
 832: ST_TO_ADDR
// interface_hidden = mode ;
 833: LD_ADDR_OWVAR 54
 837: PUSH
 838: LD_VAR 0 1
 842: ST_TO_ADDR
// end ;
 843: LD_VAR 0 2
 847: RET
// export function ReverseArray ( array ) ; var i ; begin
 848: LD_INT 0
 850: PPUSH
 851: PPUSH
// if not array then
 852: LD_VAR 0 1
 856: NOT
 857: IFFALSE 861
// exit ;
 859: GO 919
// result := [ ] ;
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: EMPTY
 867: ST_TO_ADDR
// for i := 1 to array do
 868: LD_ADDR_VAR 0 3
 872: PUSH
 873: DOUBLE
 874: LD_INT 1
 876: DEC
 877: ST_TO_ADDR
 878: LD_VAR 0 1
 882: PUSH
 883: FOR_TO
 884: IFFALSE 917
// result := Insert ( result , 1 , array [ i ] ) ;
 886: LD_ADDR_VAR 0 2
 890: PUSH
 891: LD_VAR 0 2
 895: PPUSH
 896: LD_INT 1
 898: PPUSH
 899: LD_VAR 0 1
 903: PUSH
 904: LD_VAR 0 3
 908: ARRAY
 909: PPUSH
 910: CALL_OW 2
 914: ST_TO_ADDR
 915: GO 883
 917: POP
 918: POP
// end ;
 919: LD_VAR 0 2
 923: RET
// export function ComExit ( unit ) ; begin
 924: LD_INT 0
 926: PPUSH
// result := IsInUnit ( unit ) ;
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: LD_VAR 0 1
 936: PPUSH
 937: CALL_OW 310
 941: ST_TO_ADDR
// if not result then
 942: LD_VAR 0 2
 946: NOT
 947: IFFALSE 951
// exit ;
 949: GO 986
// if GetType ( result ) = unit_vehicle then
 951: LD_VAR 0 2
 955: PPUSH
 956: CALL_OW 247
 960: PUSH
 961: LD_INT 2
 963: EQUAL
 964: IFFALSE 977
// ComExitVehicle ( unit ) else
 966: LD_VAR 0 1
 970: PPUSH
 971: CALL_OW 121
 975: GO 986
// ComExitBuilding ( unit ) ;
 977: LD_VAR 0 1
 981: PPUSH
 982: CALL_OW 122
// end ;
 986: LD_VAR 0 2
 990: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 991: LD_INT 0
 993: PPUSH
 994: PPUSH
// if not side or not nation then
 995: LD_VAR 0 1
 999: NOT
1000: IFTRUE 1009
1002: PUSH
1003: LD_VAR 0 2
1007: NOT
1008: OR
1009: IFFALSE 1013
// exit ;
1011: GO 1779
// case nation of nation_american :
1013: LD_VAR 0 2
1017: PUSH
1018: LD_INT 1
1020: DOUBLE
1021: EQUAL
1022: IFTRUE 1026
1024: GO 1240
1026: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1027: LD_ADDR_VAR 0 4
1031: PUSH
1032: LD_INT 35
1034: PUSH
1035: LD_INT 45
1037: PUSH
1038: LD_INT 46
1040: PUSH
1041: LD_INT 47
1043: PUSH
1044: LD_INT 82
1046: PUSH
1047: LD_INT 83
1049: PUSH
1050: LD_INT 84
1052: PUSH
1053: LD_INT 85
1055: PUSH
1056: LD_INT 86
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 6
1067: PUSH
1068: LD_INT 15
1070: PUSH
1071: LD_INT 16
1073: PUSH
1074: LD_INT 7
1076: PUSH
1077: LD_INT 12
1079: PUSH
1080: LD_INT 13
1082: PUSH
1083: LD_INT 10
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: LD_INT 20
1091: PUSH
1092: LD_INT 21
1094: PUSH
1095: LD_INT 22
1097: PUSH
1098: LD_INT 25
1100: PUSH
1101: LD_INT 32
1103: PUSH
1104: LD_INT 27
1106: PUSH
1107: LD_INT 36
1109: PUSH
1110: LD_INT 69
1112: PUSH
1113: LD_INT 39
1115: PUSH
1116: LD_INT 34
1118: PUSH
1119: LD_INT 40
1121: PUSH
1122: LD_INT 48
1124: PUSH
1125: LD_INT 49
1127: PUSH
1128: LD_INT 50
1130: PUSH
1131: LD_INT 51
1133: PUSH
1134: LD_INT 52
1136: PUSH
1137: LD_INT 53
1139: PUSH
1140: LD_INT 54
1142: PUSH
1143: LD_INT 55
1145: PUSH
1146: LD_INT 56
1148: PUSH
1149: LD_INT 57
1151: PUSH
1152: LD_INT 58
1154: PUSH
1155: LD_INT 59
1157: PUSH
1158: LD_INT 60
1160: PUSH
1161: LD_INT 61
1163: PUSH
1164: LD_INT 62
1166: PUSH
1167: LD_INT 80
1169: PUSH
1170: LD_INT 82
1172: PUSH
1173: LD_INT 83
1175: PUSH
1176: LD_INT 84
1178: PUSH
1179: LD_INT 85
1181: PUSH
1182: LD_INT 86
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: ST_TO_ADDR
1238: GO 1701
1240: LD_INT 2
1242: DOUBLE
1243: EQUAL
1244: IFTRUE 1248
1246: GO 1470
1248: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1249: LD_ADDR_VAR 0 4
1253: PUSH
1254: LD_INT 35
1256: PUSH
1257: LD_INT 45
1259: PUSH
1260: LD_INT 46
1262: PUSH
1263: LD_INT 47
1265: PUSH
1266: LD_INT 82
1268: PUSH
1269: LD_INT 83
1271: PUSH
1272: LD_INT 84
1274: PUSH
1275: LD_INT 85
1277: PUSH
1278: LD_INT 87
1280: PUSH
1281: LD_INT 70
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 11
1289: PUSH
1290: LD_INT 3
1292: PUSH
1293: LD_INT 4
1295: PUSH
1296: LD_INT 5
1298: PUSH
1299: LD_INT 6
1301: PUSH
1302: LD_INT 15
1304: PUSH
1305: LD_INT 18
1307: PUSH
1308: LD_INT 7
1310: PUSH
1311: LD_INT 17
1313: PUSH
1314: LD_INT 8
1316: PUSH
1317: LD_INT 20
1319: PUSH
1320: LD_INT 21
1322: PUSH
1323: LD_INT 22
1325: PUSH
1326: LD_INT 72
1328: PUSH
1329: LD_INT 26
1331: PUSH
1332: LD_INT 69
1334: PUSH
1335: LD_INT 39
1337: PUSH
1338: LD_INT 40
1340: PUSH
1341: LD_INT 41
1343: PUSH
1344: LD_INT 42
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 48
1352: PUSH
1353: LD_INT 49
1355: PUSH
1356: LD_INT 50
1358: PUSH
1359: LD_INT 51
1361: PUSH
1362: LD_INT 52
1364: PUSH
1365: LD_INT 53
1367: PUSH
1368: LD_INT 54
1370: PUSH
1371: LD_INT 55
1373: PUSH
1374: LD_INT 56
1376: PUSH
1377: LD_INT 60
1379: PUSH
1380: LD_INT 61
1382: PUSH
1383: LD_INT 62
1385: PUSH
1386: LD_INT 66
1388: PUSH
1389: LD_INT 67
1391: PUSH
1392: LD_INT 68
1394: PUSH
1395: LD_INT 81
1397: PUSH
1398: LD_INT 82
1400: PUSH
1401: LD_INT 83
1403: PUSH
1404: LD_INT 84
1406: PUSH
1407: LD_INT 85
1409: PUSH
1410: LD_INT 87
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: ST_TO_ADDR
1468: GO 1701
1470: LD_INT 3
1472: DOUBLE
1473: EQUAL
1474: IFTRUE 1478
1476: GO 1700
1478: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: LD_INT 46
1486: PUSH
1487: LD_INT 47
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: LD_INT 2
1495: PUSH
1496: LD_INT 82
1498: PUSH
1499: LD_INT 83
1501: PUSH
1502: LD_INT 84
1504: PUSH
1505: LD_INT 85
1507: PUSH
1508: LD_INT 86
1510: PUSH
1511: LD_INT 11
1513: PUSH
1514: LD_INT 9
1516: PUSH
1517: LD_INT 20
1519: PUSH
1520: LD_INT 19
1522: PUSH
1523: LD_INT 21
1525: PUSH
1526: LD_INT 24
1528: PUSH
1529: LD_INT 22
1531: PUSH
1532: LD_INT 25
1534: PUSH
1535: LD_INT 28
1537: PUSH
1538: LD_INT 29
1540: PUSH
1541: LD_INT 30
1543: PUSH
1544: LD_INT 31
1546: PUSH
1547: LD_INT 37
1549: PUSH
1550: LD_INT 38
1552: PUSH
1553: LD_INT 32
1555: PUSH
1556: LD_INT 27
1558: PUSH
1559: LD_INT 33
1561: PUSH
1562: LD_INT 69
1564: PUSH
1565: LD_INT 39
1567: PUSH
1568: LD_INT 34
1570: PUSH
1571: LD_INT 40
1573: PUSH
1574: LD_INT 71
1576: PUSH
1577: LD_INT 23
1579: PUSH
1580: LD_INT 44
1582: PUSH
1583: LD_INT 48
1585: PUSH
1586: LD_INT 49
1588: PUSH
1589: LD_INT 50
1591: PUSH
1592: LD_INT 51
1594: PUSH
1595: LD_INT 52
1597: PUSH
1598: LD_INT 53
1600: PUSH
1601: LD_INT 54
1603: PUSH
1604: LD_INT 55
1606: PUSH
1607: LD_INT 56
1609: PUSH
1610: LD_INT 57
1612: PUSH
1613: LD_INT 58
1615: PUSH
1616: LD_INT 59
1618: PUSH
1619: LD_INT 63
1621: PUSH
1622: LD_INT 64
1624: PUSH
1625: LD_INT 65
1627: PUSH
1628: LD_INT 82
1630: PUSH
1631: LD_INT 83
1633: PUSH
1634: LD_INT 84
1636: PUSH
1637: LD_INT 85
1639: PUSH
1640: LD_INT 86
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: ST_TO_ADDR
1698: GO 1701
1700: POP
// if state > - 1 and state < 3 then
1701: LD_VAR 0 3
1705: PUSH
1706: LD_INT 1
1708: NEG
1709: GREATER
1710: IFFALSE 1722
1712: PUSH
1713: LD_VAR 0 3
1717: PUSH
1718: LD_INT 3
1720: LESS
1721: AND
1722: IFFALSE 1779
// for i in result do
1724: LD_ADDR_VAR 0 5
1728: PUSH
1729: LD_VAR 0 4
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1777
// if GetTech ( i , side ) <> state then
1737: LD_VAR 0 5
1741: PPUSH
1742: LD_VAR 0 1
1746: PPUSH
1747: CALL_OW 321
1751: PUSH
1752: LD_VAR 0 3
1756: NONEQUAL
1757: IFFALSE 1775
// result := result diff i ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PUSH
1769: LD_VAR 0 5
1773: DIFF
1774: ST_TO_ADDR
1775: GO 1734
1777: POP
1778: POP
// end ; end_of_file
1779: LD_VAR 0 4
1783: RET
// export Heike , Omar , Shariff , Schulz , Farmer , Ibrahim ; export function PrepareArabian ; var i , un ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// SetBName ( ar_dep_n , dammam ) ;
1789: LD_INT 94
1791: PPUSH
1792: LD_STRING dammam
1794: PPUSH
1795: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep_n ) , mat_cans , 10000 ) ;
1799: LD_INT 94
1801: PPUSH
1802: CALL_OW 274
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: LD_INT 10000
1812: PPUSH
1813: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep_n ) , mat_oil , 1000 ) ;
1817: LD_INT 94
1819: PPUSH
1820: CALL_OW 274
1824: PPUSH
1825: LD_INT 2
1827: PPUSH
1828: LD_INT 1000
1830: PPUSH
1831: CALL_OW 277
// uc_side := 2 ;
1835: LD_ADDR_OWVAR 20
1839: PUSH
1840: LD_INT 2
1842: ST_TO_ADDR
// uc_nation := 2 ;
1843: LD_ADDR_OWVAR 21
1847: PUSH
1848: LD_INT 2
1850: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1851: LD_ADDR_EXP 6
1855: PUSH
1856: LD_STRING Heike
1858: PPUSH
1859: LD_EXP 1
1863: NOT
1864: PPUSH
1865: LD_EXP 2
1869: PPUSH
1870: CALL 93 0 3
1874: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1875: LD_ADDR_EXP 11
1879: PUSH
1880: LD_STRING Ibrahim
1882: PPUSH
1883: LD_EXP 1
1887: NOT
1888: PPUSH
1889: LD_EXP 2
1893: PPUSH
1894: CALL 93 0 3
1898: ST_TO_ADDR
// uc_side := 5 ;
1899: LD_ADDR_OWVAR 20
1903: PUSH
1904: LD_INT 5
1906: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1907: LD_ADDR_EXP 10
1911: PUSH
1912: LD_STRING Farmer
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: LD_STRING 
1920: PPUSH
1921: CALL 93 0 3
1925: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1926: LD_ADDR_EXP 7
1930: PUSH
1931: LD_STRING Omar
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: LD_STRING 
1939: PPUSH
1940: CALL 93 0 3
1944: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , false ,  ) ;
1945: LD_ADDR_EXP 9
1949: PUSH
1950: LD_STRING Schulz
1952: PPUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_STRING 
1958: PPUSH
1959: CALL 93 0 3
1963: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1964: LD_ADDR_EXP 8
1968: PUSH
1969: LD_STRING Abdul
1971: PPUSH
1972: LD_INT 0
1974: PPUSH
1975: LD_STRING 
1977: PPUSH
1978: CALL 93 0 3
1982: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: LD_INT 21
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PPUSH
1998: CALL_OW 69
2002: PUSH
2003: FOR_IN
2004: IFFALSE 2095
// begin SetSide ( i , 5 ) ;
2006: LD_VAR 0 2
2010: PPUSH
2011: LD_INT 5
2013: PPUSH
2014: CALL_OW 235
// PrepareHuman ( false , 1 , 1 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// if GetBType ( i ) = b_breastwork then
2041: LD_VAR 0 2
2045: PPUSH
2046: CALL_OW 266
2050: PUSH
2051: LD_INT 31
2053: EQUAL
2054: IFFALSE 2079
// SetDir ( un , GetDir ( i ) - 3 ) ;
2056: LD_VAR 0 3
2060: PPUSH
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 254
2070: PUSH
2071: LD_INT 3
2073: MINUS
2074: PPUSH
2075: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_VAR 0 2
2088: PPUSH
2089: CALL_OW 52
// end ;
2093: GO 2003
2095: POP
2096: POP
// end ; end_of_file
2097: LD_VAR 0 1
2101: RET
// export function Action ; var killScene , bonus , un , i , driver , mechs , eng ; begin
2102: LD_INT 0
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
// music_nat := 2 ;
2112: LD_ADDR_OWVAR 71
2116: PUSH
2117: LD_INT 2
2119: ST_TO_ADDR
// bonus := 0 ;
2120: LD_ADDR_VAR 0 3
2124: PUSH
2125: LD_INT 0
2127: ST_TO_ADDR
// if hasAll then
2128: LD_EXP 3
2132: IFFALSE 2142
// bonus := 1 ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_INT 1
2141: ST_TO_ADDR
// killScene := deadCounter > [ 3 , 2 , 2 , 2 ] [ Difficulty ] + bonus ;
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: LD_EXP 4
2151: PUSH
2152: LD_INT 3
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: LD_INT 2
2160: PUSH
2161: LD_INT 2
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: PUSH
2170: LD_OWVAR 67
2174: ARRAY
2175: PUSH
2176: LD_VAR 0 3
2180: PLUS
2181: GREATER
2182: ST_TO_ADDR
// PlaceSeeing ( 118 , 11 , 2 , - 37963 ) ;
2183: LD_INT 118
2185: PPUSH
2186: LD_INT 11
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: LD_INT 37963
2194: NEG
2195: PPUSH
2196: CALL_OW 330
// if killScene then
2200: LD_VAR 0 2
2204: IFFALSE 2520
// begin RemoveUnit ( flame ) ;
2206: LD_INT 262
2208: PPUSH
2209: CALL_OW 64
// InGameOn ;
2213: CALL_OW 8
// CenterNowOnXY ( 71 , 112 ) ;
2217: LD_INT 71
2219: PPUSH
2220: LD_INT 112
2222: PPUSH
2223: CALL_OW 86
// PlaceUnitXY ( Omar , 70 , 112 , false ) ;
2227: LD_EXP 7
2231: PPUSH
2232: LD_INT 70
2234: PPUSH
2235: LD_INT 112
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 48
// PlaceUnitXY ( Heike , 72 , 112 , false ) ;
2245: LD_EXP 6
2249: PPUSH
2250: LD_INT 72
2252: PPUSH
2253: LD_INT 112
2255: PPUSH
2256: LD_INT 0
2258: PPUSH
2259: CALL_OW 48
// ComTurnUnit ( Omar , Heike ) ;
2263: LD_EXP 7
2267: PPUSH
2268: LD_EXP 6
2272: PPUSH
2273: CALL_OW 119
// ComTurnUnit ( Heike , Omar ) ;
2277: LD_EXP 6
2281: PPUSH
2282: LD_EXP 7
2286: PPUSH
2287: CALL_OW 119
// SetLives ( Heike , 251 ) ;
2291: LD_EXP 6
2295: PPUSH
2296: LD_INT 251
2298: PPUSH
2299: CALL_OW 234
// SetClass ( Heike , 2 ) ;
2303: LD_EXP 6
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: CALL_OW 336
// ComTurnUnit ( Heike , Omar ) ;
2315: LD_EXP 6
2319: PPUSH
2320: LD_EXP 7
2324: PPUSH
2325: CALL_OW 119
// ComTurnUnit ( Omar , Heike ) ;
2329: LD_EXP 7
2333: PPUSH
2334: LD_EXP 6
2338: PPUSH
2339: CALL_OW 119
// for i := 1 to 3 do
2343: LD_ADDR_VAR 0 5
2347: PUSH
2348: DOUBLE
2349: LD_INT 1
2351: DEC
2352: ST_TO_ADDR
2353: LD_INT 3
2355: PUSH
2356: FOR_TO
2357: IFFALSE 2445
// begin uc_side := 5 ;
2359: LD_ADDR_OWVAR 20
2363: PUSH
2364: LD_INT 5
2366: ST_TO_ADDR
// uc_nation := 2 ;
2367: LD_ADDR_OWVAR 21
2371: PUSH
2372: LD_INT 2
2374: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2375: LD_INT 0
2377: PPUSH
2378: LD_INT 1
2380: PPUSH
2381: LD_INT 1
2383: PPUSH
2384: CALL_OW 380
// un := CreateHuman ;
2388: LD_ADDR_VAR 0 4
2392: PUSH
2393: CALL_OW 44
2397: ST_TO_ADDR
// PlaceUnitXY ( un , 68 + i , 112 + i , false ) ;
2398: LD_VAR 0 4
2402: PPUSH
2403: LD_INT 68
2405: PUSH
2406: LD_VAR 0 5
2410: PLUS
2411: PPUSH
2412: LD_INT 112
2414: PUSH
2415: LD_VAR 0 5
2419: PLUS
2420: PPUSH
2421: LD_INT 0
2423: PPUSH
2424: CALL_OW 48
// ComTurnXY ( un , 72 , 112 ) ;
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_INT 72
2435: PPUSH
2436: LD_INT 112
2438: PPUSH
2439: CALL_OW 118
// end ;
2443: GO 2356
2445: POP
2446: POP
// wait ( 0 0$2 ) ;
2447: LD_INT 70
2449: PPUSH
2450: CALL_OW 67
// Say ( Omar , DO-death-1 ) ;
2454: LD_EXP 7
2458: PPUSH
2459: LD_STRING DO-death-1
2461: PPUSH
2462: CALL_OW 88
// Say ( Omar , DO-death-2 ) ;
2466: LD_EXP 7
2470: PPUSH
2471: LD_STRING DO-death-2
2473: PPUSH
2474: CALL_OW 88
// Say ( Omar , DO-death-3 ) ;
2478: LD_EXP 7
2482: PPUSH
2483: LD_STRING DO-death-3
2485: PPUSH
2486: CALL_OW 88
// ComAttackUnit ( Omar , Heike ) ;
2490: LD_EXP 7
2494: PPUSH
2495: LD_EXP 6
2499: PPUSH
2500: CALL_OW 115
// wait ( 0 0$2 ) ;
2504: LD_INT 70
2506: PPUSH
2507: CALL_OW 67
// YouLost ( Penalty ) ;
2511: LD_STRING Penalty
2513: PPUSH
2514: CALL_OW 104
// end else
2518: GO 4540
// begin mechs := [ ] ;
2520: LD_ADDR_VAR 0 7
2524: PUSH
2525: EMPTY
2526: ST_TO_ADDR
// Video ( true ) ;
2527: LD_INT 1
2529: PPUSH
2530: CALL 820 0 1
// CenterNowOnXY ( 124 , 15 ) ;
2534: LD_INT 124
2536: PPUSH
2537: LD_INT 15
2539: PPUSH
2540: CALL_OW 86
// ComTurnXY ( Heike , 123 , 16 ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_INT 123
2551: PPUSH
2552: LD_INT 16
2554: PPUSH
2555: CALL_OW 118
// PlaceHumanInUnit ( Shariff , arBar1 ) ;
2559: LD_EXP 8
2563: PPUSH
2564: LD_INT 118
2566: PPUSH
2567: CALL_OW 52
// PlaceHumanInUnit ( Omar , arBar1 ) ;
2571: LD_EXP 7
2575: PPUSH
2576: LD_INT 118
2578: PPUSH
2579: CALL_OW 52
// PlaceUnitXY ( Heike , 124 , 12 , false ) ;
2583: LD_EXP 6
2587: PPUSH
2588: LD_INT 124
2590: PPUSH
2591: LD_INT 12
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 48
// PrepareHuman ( false , 1 , 1 ) ;
2601: LD_INT 0
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: CALL_OW 380
// un := CreateHuman ;
2614: LD_ADDR_VAR 0 4
2618: PUSH
2619: CALL_OW 44
2623: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 18 , false ) ;
2624: LD_VAR 0 4
2628: PPUSH
2629: LD_INT 124
2631: PPUSH
2632: LD_INT 18
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 48
// ComTurnXY ( un , 124 , 16 ) ;
2642: LD_VAR 0 4
2646: PPUSH
2647: LD_INT 124
2649: PPUSH
2650: LD_INT 16
2652: PPUSH
2653: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2657: LD_INT 0
2659: PPUSH
2660: LD_INT 3
2662: PPUSH
2663: LD_INT 1
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 4
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// PlaceUnitXY ( un , 134 , 13 , false ) ;
2680: LD_VAR 0 4
2684: PPUSH
2685: LD_INT 134
2687: PPUSH
2688: LD_INT 13
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 48
// ComTurnXY ( un , 136 , 15 ) ;
2698: LD_VAR 0 4
2702: PPUSH
2703: LD_INT 136
2705: PPUSH
2706: LD_INT 15
2708: PPUSH
2709: CALL_OW 118
// mechs := Replace ( mechs , 1 , un ) ;
2713: LD_ADDR_VAR 0 7
2717: PUSH
2718: LD_VAR 0 7
2722: PPUSH
2723: LD_INT 1
2725: PPUSH
2726: LD_VAR 0 4
2730: PPUSH
2731: CALL_OW 1
2735: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2736: LD_INT 0
2738: PPUSH
2739: LD_INT 3
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 380
// un := CreateHuman ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 44
2758: ST_TO_ADDR
// PlaceUnitXY ( un , 136 , 15 , false ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 136
2766: PPUSH
2767: LD_INT 15
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 48
// ComTurnXY ( un , 134 , 13 ) ;
2777: LD_VAR 0 4
2781: PPUSH
2782: LD_INT 134
2784: PPUSH
2785: LD_INT 13
2787: PPUSH
2788: CALL_OW 118
// mechs := Replace ( mechs , 2 , un ) ;
2792: LD_ADDR_VAR 0 7
2796: PUSH
2797: LD_VAR 0 7
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: LD_VAR 0 4
2809: PPUSH
2810: CALL_OW 1
2814: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2815: LD_INT 0
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 4
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// PlaceUnitXY ( un , 112 , 36 , false ) ;
2838: LD_VAR 0 4
2842: PPUSH
2843: LD_INT 112
2845: PPUSH
2846: LD_INT 36
2848: PPUSH
2849: LD_INT 0
2851: PPUSH
2852: CALL_OW 48
// ComTurnXY ( un , 115 , 39 ) ;
2856: LD_VAR 0 4
2860: PPUSH
2861: LD_INT 115
2863: PPUSH
2864: LD_INT 39
2866: PPUSH
2867: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2871: LD_INT 0
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: CALL_OW 380
// driver := CreateHuman ;
2884: LD_ADDR_VAR 0 6
2888: PUSH
2889: CALL_OW 44
2893: ST_TO_ADDR
// PlaceUnitXY ( driver , 115 , 33 , false ) ;
2894: LD_VAR 0 6
2898: PPUSH
2899: LD_INT 115
2901: PPUSH
2902: LD_INT 33
2904: PPUSH
2905: LD_INT 0
2907: PPUSH
2908: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2912: LD_INT 0
2914: PPUSH
2915: LD_INT 3
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 380
// un := CreateHuman ;
2925: LD_ADDR_VAR 0 4
2929: PUSH
2930: CALL_OW 44
2934: ST_TO_ADDR
// PlaceUnitXY ( un , 151 , 37 , false ) ;
2935: LD_VAR 0 4
2939: PPUSH
2940: LD_INT 151
2942: PPUSH
2943: LD_INT 37
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2953: LD_INT 0
2955: PPUSH
2956: LD_INT 3
2958: PPUSH
2959: LD_INT 1
2961: PPUSH
2962: CALL_OW 380
// un := CreateHuman ;
2966: LD_ADDR_VAR 0 4
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitXY ( un , 152 , 33 , false ) ;
2976: LD_VAR 0 4
2980: PPUSH
2981: LD_INT 152
2983: PPUSH
2984: LD_INT 33
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 48
// PrepareHuman ( false , 2 , 2 ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 2
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: CALL_OW 380
// eng := CreateHuman ;
3007: LD_ADDR_VAR 0 8
3011: PUSH
3012: CALL_OW 44
3016: ST_TO_ADDR
// PlaceUnitXY ( eng , 156 , 13 , false ) ;
3017: LD_VAR 0 8
3021: PPUSH
3022: LD_INT 156
3024: PPUSH
3025: LD_INT 13
3027: PPUSH
3028: LD_INT 0
3030: PPUSH
3031: CALL_OW 48
// for i := 1 to 3 do
3035: LD_ADDR_VAR 0 5
3039: PUSH
3040: DOUBLE
3041: LD_INT 1
3043: DEC
3044: ST_TO_ADDR
3045: LD_INT 3
3047: PUSH
3048: FOR_TO
3049: IFFALSE 3109
// begin PrepareHuman ( false , 4 , 3 ) ;
3051: LD_INT 0
3053: PPUSH
3054: LD_INT 4
3056: PPUSH
3057: LD_INT 3
3059: PPUSH
3060: CALL_OW 380
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ arLab1 , arLab2 ] [ i mod 2 + 1 ] ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 96
3081: PUSH
3082: LD_INT 97
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_VAR 0 5
3093: PUSH
3094: LD_INT 2
3096: MOD
3097: PUSH
3098: LD_INT 1
3100: PLUS
3101: ARRAY
3102: PPUSH
3103: CALL_OW 52
// end ;
3107: GO 3048
3109: POP
3110: POP
// SetSpecResearch ( arLab1 , 100 , false ) ;
3111: LD_INT 96
3113: PPUSH
3114: LD_INT 100
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 486
// SetSpecResearch ( arLab2 , 100 , false ) ;
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 100
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 486
// wait ( 0 0$2 ) ;
3137: LD_INT 70
3139: PPUSH
3140: CALL_OW 67
// PlaceHumanInUnit ( Schulz , schulzVeh ) ;
3144: LD_EXP 9
3148: PPUSH
3149: LD_INT 273
3151: PPUSH
3152: CALL_OW 52
// ComExitBuilding ( [ Omar , Shariff ] ) ;
3156: LD_EXP 7
3160: PUSH
3161: LD_EXP 8
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 122
// AddComMoveXY ( Shariff , 123 , 15 ) ;
3174: LD_EXP 8
3178: PPUSH
3179: LD_INT 123
3181: PPUSH
3182: LD_INT 15
3184: PPUSH
3185: CALL_OW 171
// wait ( 0 0$0.3 ) ;
3189: LD_INT 10
3191: PPUSH
3192: CALL_OW 67
// AddComMoveXY ( Omar , 124 , 15 ) ;
3196: LD_EXP 7
3200: PPUSH
3201: LD_INT 124
3203: PPUSH
3204: LD_INT 15
3206: PPUSH
3207: CALL_OW 171
// AddComTurnUnit ( [ Omar , Shariff ] , Heike ) ;
3211: LD_EXP 7
3215: PUSH
3216: LD_EXP 8
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_EXP 6
3229: PPUSH
3230: CALL_OW 179
// wait ( 0 0$1 ) ;
3234: LD_INT 35
3236: PPUSH
3237: CALL_OW 67
// Say ( Shariff , DShar-intro-1 ) ;
3241: LD_EXP 8
3245: PPUSH
3246: LD_STRING DShar-intro-1
3248: PPUSH
3249: CALL_OW 88
// Say ( Omar , DO-intro-1 ) ;
3253: LD_EXP 7
3257: PPUSH
3258: LD_STRING DO-intro-1
3260: PPUSH
3261: CALL_OW 88
// Say ( Omar , DO-intro-2 ) ;
3265: LD_EXP 7
3269: PPUSH
3270: LD_STRING DO-intro-2
3272: PPUSH
3273: CALL_OW 88
// Say ( Heike , DH-intro-1 ) ;
3277: LD_EXP 6
3281: PPUSH
3282: LD_STRING DH-intro-1
3284: PPUSH
3285: CALL_OW 88
// Say ( Omar , DO-intro-3 ) ;
3289: LD_EXP 7
3293: PPUSH
3294: LD_STRING DO-intro-3
3296: PPUSH
3297: CALL_OW 88
// ComEnterUnit ( mechs , arFac ) ;
3301: LD_VAR 0 7
3305: PPUSH
3306: LD_INT 112
3308: PPUSH
3309: CALL_OW 120
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun ) ;
3313: LD_INT 112
3315: PPUSH
3316: LD_INT 13
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 24
3327: PPUSH
3328: CALL_OW 185
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_gun ) ;
3332: LD_INT 112
3334: PPUSH
3335: LD_INT 13
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: LD_INT 27
3346: PPUSH
3347: CALL_OW 185
// wait ( 0 0$1 ) ;
3351: LD_INT 35
3353: PPUSH
3354: CALL_OW 67
// if Ibrahim then
3358: LD_EXP 11
3362: IFFALSE 3462
// begin Say ( Omar , DO-intro-a-1 ) ;
3364: LD_EXP 7
3368: PPUSH
3369: LD_STRING DO-intro-a-1
3371: PPUSH
3372: CALL_OW 88
// Say ( Omar , DO-intro-a-2 ) ;
3376: LD_EXP 7
3380: PPUSH
3381: LD_STRING DO-intro-a-2
3383: PPUSH
3384: CALL_OW 88
// Say ( Shariff , DShar-intro-a-3 ) ;
3388: LD_EXP 8
3392: PPUSH
3393: LD_STRING DShar-intro-a-3
3395: PPUSH
3396: CALL_OW 88
// Say ( Shariff , DShar-intro-a-4 ) ;
3400: LD_EXP 8
3404: PPUSH
3405: LD_STRING DShar-intro-a-4
3407: PPUSH
3408: CALL_OW 88
// Say ( Shariff , DShar-intro-a-5 ) ;
3412: LD_EXP 8
3416: PPUSH
3417: LD_STRING DShar-intro-a-5
3419: PPUSH
3420: CALL_OW 88
// Say ( Shariff , DShar-intro-a-6 ) ;
3424: LD_EXP 8
3428: PPUSH
3429: LD_STRING DShar-intro-a-6
3431: PPUSH
3432: CALL_OW 88
// Say ( Shariff , DShar-intro-a-7 ) ;
3436: LD_EXP 8
3440: PPUSH
3441: LD_STRING DShar-intro-a-7
3443: PPUSH
3444: CALL_OW 88
// Say ( Shariff , DShar-intro-a-8 ) ;
3448: LD_EXP 8
3452: PPUSH
3453: LD_STRING DShar-intro-a-8
3455: PPUSH
3456: CALL_OW 88
// end else
3460: GO 3687
// if not IbrahimHasEscaped then
3462: LD_EXP 5
3466: NOT
3467: IFFALSE 3543
// begin Say ( Omar , DO-intro-b-1 ) ;
3469: LD_EXP 7
3473: PPUSH
3474: LD_STRING DO-intro-b-1
3476: PPUSH
3477: CALL_OW 88
// Say ( Omar , DO-intro-b-2 ) ;
3481: LD_EXP 7
3485: PPUSH
3486: LD_STRING DO-intro-b-2
3488: PPUSH
3489: CALL_OW 88
// Say ( Heike , DH-intro-b-3 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DH-intro-b-3
3500: PPUSH
3501: CALL_OW 88
// Say ( Shariff , DShar-intro-b-4 ) ;
3505: LD_EXP 8
3509: PPUSH
3510: LD_STRING DShar-intro-b-4
3512: PPUSH
3513: CALL_OW 88
// Say ( Shariff , DShar-intro-b-5 ) ;
3517: LD_EXP 8
3521: PPUSH
3522: LD_STRING DShar-intro-b-5
3524: PPUSH
3525: CALL_OW 88
// Say ( Shariff , DShar-intro-b-6 ) ;
3529: LD_EXP 8
3533: PPUSH
3534: LD_STRING DShar-intro-b-6
3536: PPUSH
3537: CALL_OW 88
// end else
3541: GO 3687
// begin Say ( Omar , DO-intro-c-1 ) ;
3543: LD_EXP 7
3547: PPUSH
3548: LD_STRING DO-intro-c-1
3550: PPUSH
3551: CALL_OW 88
// Say ( Omar , DO-intro-c-2 ) ;
3555: LD_EXP 7
3559: PPUSH
3560: LD_STRING DO-intro-c-2
3562: PPUSH
3563: CALL_OW 88
// Say ( Heike , DH-intro-c-3 ) ;
3567: LD_EXP 6
3571: PPUSH
3572: LD_STRING DH-intro-c-3
3574: PPUSH
3575: CALL_OW 88
// Say ( Heike , DH-intro-c-4 ) ;
3579: LD_EXP 6
3583: PPUSH
3584: LD_STRING DH-intro-c-4
3586: PPUSH
3587: CALL_OW 88
// Say ( Heike , DH-intro-c-5 ) ;
3591: LD_EXP 6
3595: PPUSH
3596: LD_STRING DH-intro-c-5
3598: PPUSH
3599: CALL_OW 88
// Say ( Omar , DO-intro-c-6 ) ;
3603: LD_EXP 7
3607: PPUSH
3608: LD_STRING DO-intro-c-6
3610: PPUSH
3611: CALL_OW 88
// Say ( Shariff , DShar-intro-c-7 ) ;
3615: LD_EXP 8
3619: PPUSH
3620: LD_STRING DShar-intro-c-7
3622: PPUSH
3623: CALL_OW 88
// Say ( Shariff , DShar-intro-c-8 ) ;
3627: LD_EXP 8
3631: PPUSH
3632: LD_STRING DShar-intro-c-8
3634: PPUSH
3635: CALL_OW 88
// Say ( Shariff , DShar-intro-c-9 ) ;
3639: LD_EXP 8
3643: PPUSH
3644: LD_STRING DShar-intro-c-9
3646: PPUSH
3647: CALL_OW 88
// Say ( Shariff , DShar-intro-c-10 ) ;
3651: LD_EXP 8
3655: PPUSH
3656: LD_STRING DShar-intro-c-10
3658: PPUSH
3659: CALL_OW 88
// Say ( Shariff , DShar-intro-c-11 ) ;
3663: LD_EXP 8
3667: PPUSH
3668: LD_STRING DShar-intro-c-11
3670: PPUSH
3671: CALL_OW 88
// Say ( Shariff , DShar-intro-c-12 ) ;
3675: LD_EXP 8
3679: PPUSH
3680: LD_STRING DShar-intro-c-12
3682: PPUSH
3683: CALL_OW 88
// end ; CreateCratesXY ( 5 , 117 , 7 , true ) ;
3687: LD_INT 5
3689: PPUSH
3690: LD_INT 117
3692: PPUSH
3693: LD_INT 7
3695: PPUSH
3696: LD_INT 1
3698: PPUSH
3699: CALL_OW 54
// ComMoveXY ( eng , 119 , 8 ) ;
3703: LD_VAR 0 8
3707: PPUSH
3708: LD_INT 119
3710: PPUSH
3711: LD_INT 8
3713: PPUSH
3714: CALL_OW 111
// PrepareHuman ( false , 4 , 1 ) ;
3718: LD_INT 0
3720: PPUSH
3721: LD_INT 4
3723: PPUSH
3724: LD_INT 1
3726: PPUSH
3727: CALL_OW 380
// un := CreateHuman ;
3731: LD_ADDR_VAR 0 4
3735: PUSH
3736: CALL_OW 44
3740: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 2 , false ) ;
3741: LD_VAR 0 4
3745: PPUSH
3746: LD_INT 102
3748: PPUSH
3749: LD_INT 52
3751: PPUSH
3752: LD_INT 2
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_INT 108
3769: PPUSH
3770: LD_INT 16
3772: PPUSH
3773: CALL_OW 111
// AddComEnterUnit ( un , arLab1 ) ;
3777: LD_VAR 0 4
3781: PPUSH
3782: LD_INT 96
3784: PPUSH
3785: CALL_OW 180
// for i := 1 to 3 do
3789: LD_ADDR_VAR 0 5
3793: PUSH
3794: DOUBLE
3795: LD_INT 1
3797: DEC
3798: ST_TO_ADDR
3799: LD_INT 3
3801: PUSH
3802: FOR_TO
3803: IFFALSE 3918
// begin uc_nation := 0 ;
3805: LD_ADDR_OWVAR 21
3809: PUSH
3810: LD_INT 0
3812: ST_TO_ADDR
// uc_side := 5 ;
3813: LD_ADDR_OWVAR 20
3817: PUSH
3818: LD_INT 5
3820: ST_TO_ADDR
// hc_class := class_apeman ;
3821: LD_ADDR_OWVAR 28
3825: PUSH
3826: LD_INT 12
3828: ST_TO_ADDR
// hc_gallery :=  ;
3829: LD_ADDR_OWVAR 33
3833: PUSH
3834: LD_STRING 
3836: ST_TO_ADDR
// un := CreateHuman ;
3837: LD_ADDR_VAR 0 4
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 4 , false ) ;
3847: LD_VAR 0 4
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: LD_INT 52
3857: PPUSH
3858: LD_INT 4
3860: PPUSH
3861: LD_INT 0
3863: PPUSH
3864: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3868: LD_VAR 0 4
3872: PPUSH
3873: LD_INT 108
3875: PPUSH
3876: LD_INT 16
3878: PPUSH
3879: CALL_OW 111
// AddComEnterUnit ( un , [ arLab1 , ar_dep_n ] [ i mod 2 + 1 ] ) ;
3883: LD_VAR 0 4
3887: PPUSH
3888: LD_INT 96
3890: PUSH
3891: LD_INT 94
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: LD_VAR 0 5
3902: PUSH
3903: LD_INT 2
3905: MOD
3906: PUSH
3907: LD_INT 1
3909: PLUS
3910: ARRAY
3911: PPUSH
3912: CALL_OW 180
// end ;
3916: GO 3802
3918: POP
3919: POP
// Say ( Shariff , DShar-intro-13 ) ;
3920: LD_EXP 8
3924: PPUSH
3925: LD_STRING DShar-intro-13
3927: PPUSH
3928: CALL_OW 88
// Say ( Shariff , DShar-intro-14 ) ;
3932: LD_EXP 8
3936: PPUSH
3937: LD_STRING DShar-intro-14
3939: PPUSH
3940: CALL_OW 88
// Say ( Shariff , DShar-intro-15 ) ;
3944: LD_EXP 8
3948: PPUSH
3949: LD_STRING DShar-intro-15
3951: PPUSH
3952: CALL_OW 88
// ComMoveXY ( Schulz , 115 , 21 ) ;
3956: LD_EXP 9
3960: PPUSH
3961: LD_INT 115
3963: PPUSH
3964: LD_INT 21
3966: PPUSH
3967: CALL_OW 111
// AddComExitVehicle ( Schulz ) ;
3971: LD_EXP 9
3975: PPUSH
3976: CALL_OW 181
// AddComMoveXY ( Schulz , 118 , 14 ) ;
3980: LD_EXP 9
3984: PPUSH
3985: LD_INT 118
3987: PPUSH
3988: LD_INT 14
3990: PPUSH
3991: CALL_OW 171
// AddComTurnUnit ( Schulz , Shariff ) ;
3995: LD_EXP 9
3999: PPUSH
4000: LD_EXP 8
4004: PPUSH
4005: CALL_OW 179
// AddComMoveXY ( eng , 124 , 9 ) ;
4009: LD_VAR 0 8
4013: PPUSH
4014: LD_INT 124
4016: PPUSH
4017: LD_INT 9
4019: PPUSH
4020: CALL_OW 171
// AddComMoveXY ( eng , 144 , 11 ) ;
4024: LD_VAR 0 8
4028: PPUSH
4029: LD_INT 144
4031: PPUSH
4032: LD_INT 11
4034: PPUSH
4035: CALL_OW 171
// AddComBuild ( eng , b_solar_power , 147 , 11 , 3 ) ;
4039: LD_VAR 0 8
4043: PPUSH
4044: LD_INT 27
4046: PPUSH
4047: LD_INT 147
4049: PPUSH
4050: LD_INT 11
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 205
// Say ( Shariff , DShar-intro-16 ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_STRING DShar-intro-16
4067: PPUSH
4068: CALL_OW 88
// Say ( Shariff , DShar-intro-17 ) ;
4072: LD_EXP 8
4076: PPUSH
4077: LD_STRING DShar-intro-17
4079: PPUSH
4080: CALL_OW 88
// Say ( Heike , DH-intro-18 ) ;
4084: LD_EXP 6
4088: PPUSH
4089: LD_STRING DH-intro-18
4091: PPUSH
4092: CALL_OW 88
// Say ( Omar , DO-intro-19 ) ;
4096: LD_EXP 7
4100: PPUSH
4101: LD_STRING DO-intro-19
4103: PPUSH
4104: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4108: LD_INT 35
4110: PPUSH
4111: CALL_OW 67
// until IsAt ( Schulz , 118 , 14 ) ;
4115: LD_EXP 9
4119: PPUSH
4120: LD_INT 118
4122: PPUSH
4123: LD_INT 14
4125: PPUSH
4126: CALL_OW 307
4130: IFFALSE 4108
// ComTurnUnit ( Shariff , Schulz ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_EXP 9
4141: PPUSH
4142: CALL_OW 119
// Say ( Shariff , DShar-intro-18 ) ;
4146: LD_EXP 8
4150: PPUSH
4151: LD_STRING DShar-intro-18
4153: PPUSH
4154: CALL_OW 88
// AddComEnterUnit ( [ Shariff , Schulz ] , arBar2 ) ;
4158: LD_EXP 8
4162: PUSH
4163: LD_EXP 9
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PPUSH
4172: LD_INT 231
4174: PPUSH
4175: CALL_OW 180
// wait ( 0 0$2 ) ;
4179: LD_INT 70
4181: PPUSH
4182: CALL_OW 67
// Say ( Omar , DO-Flamer-1 ) ;
4186: LD_EXP 7
4190: PPUSH
4191: LD_STRING DO-Flamer-1
4193: PPUSH
4194: CALL_OW 88
// Say ( Heike , DH-Flamer-2 ) ;
4198: LD_EXP 6
4202: PPUSH
4203: LD_STRING DH-Flamer-2
4205: PPUSH
4206: CALL_OW 88
// Say ( Omar , DO-Flamer-3 ) ;
4210: LD_EXP 7
4214: PPUSH
4215: LD_STRING DO-Flamer-3
4217: PPUSH
4218: CALL_OW 88
// Say ( Heike , DH-Flamer-4 ) ;
4222: LD_EXP 6
4226: PPUSH
4227: LD_STRING DH-Flamer-4
4229: PPUSH
4230: CALL_OW 88
// Say ( Omar , DO-Flamer-5 ) ;
4234: LD_EXP 7
4238: PPUSH
4239: LD_STRING DO-Flamer-5
4241: PPUSH
4242: CALL_OW 88
// ComMoveXY ( Heike , 114 , 30 ) ;
4246: LD_EXP 6
4250: PPUSH
4251: LD_INT 114
4253: PPUSH
4254: LD_INT 30
4256: PPUSH
4257: CALL_OW 111
// ComMoveXY ( Omar , 116 , 31 ) ;
4261: LD_EXP 7
4265: PPUSH
4266: LD_INT 116
4268: PPUSH
4269: LD_INT 31
4271: PPUSH
4272: CALL_OW 111
// AddComTurnXY ( [ Heike , Omar ] , 115 , 35 ) ;
4276: LD_EXP 6
4280: PUSH
4281: LD_EXP 7
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PPUSH
4290: LD_INT 115
4292: PPUSH
4293: LD_INT 35
4295: PPUSH
4296: CALL_OW 178
// CenterOnXY ( 114 , 30 ) ;
4300: LD_INT 114
4302: PPUSH
4303: LD_INT 30
4305: PPUSH
4306: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
4310: LD_INT 35
4312: PPUSH
4313: CALL_OW 67
// until IsAt ( Heike , 114 , 30 ) ;
4317: LD_EXP 6
4321: PPUSH
4322: LD_INT 114
4324: PPUSH
4325: LD_INT 30
4327: PPUSH
4328: CALL_OW 307
4332: IFFALSE 4310
// wait ( 0 0$0.3 ) ;
4334: LD_INT 10
4336: PPUSH
4337: CALL_OW 67
// ComEnterUnit ( driver , flame ) ;
4341: LD_VAR 0 6
4345: PPUSH
4346: LD_INT 262
4348: PPUSH
4349: CALL_OW 120
// AddComAttackPlace ( driver , 115 , 41 ) ;
4353: LD_VAR 0 6
4357: PPUSH
4358: LD_INT 115
4360: PPUSH
4361: LD_INT 41
4363: PPUSH
4364: CALL_OW 176
// wait ( 0 0$2 ) ;
4368: LD_INT 70
4370: PPUSH
4371: CALL_OW 67
// Say ( Heike , DH-Flamer-6 ) ;
4375: LD_EXP 6
4379: PPUSH
4380: LD_STRING DH-Flamer-6
4382: PPUSH
4383: CALL_OW 88
// wait ( 0 0$1 ) ;
4387: LD_INT 35
4389: PPUSH
4390: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
4394: LD_EXP 7
4398: PPUSH
4399: LD_EXP 6
4403: PPUSH
4404: CALL_OW 119
// Say ( Omar , DO-Flamer-7 ) ;
4408: LD_EXP 7
4412: PPUSH
4413: LD_STRING DO-Flamer-7
4415: PPUSH
4416: CALL_OW 88
// wait ( 0 0$01 ) ;
4420: LD_INT 35
4422: PPUSH
4423: CALL_OW 67
// Say ( Omar , DO-Flamer-8 ) ;
4427: LD_EXP 7
4431: PPUSH
4432: LD_STRING DO-Flamer-8
4434: PPUSH
4435: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
4439: LD_EXP 6
4443: PPUSH
4444: LD_EXP 7
4448: PPUSH
4449: CALL_OW 119
// Say ( Heike , DH-Flamer-9 ) ;
4453: LD_EXP 6
4457: PPUSH
4458: LD_STRING DH-Flamer-9
4460: PPUSH
4461: CALL_OW 88
// Say ( Omar , DO-Flamer-10 ) ;
4465: LD_EXP 7
4469: PPUSH
4470: LD_STRING DO-Flamer-10
4472: PPUSH
4473: CALL_OW 88
// Say ( Heike , DH-Flamer-11 ) ;
4477: LD_EXP 6
4481: PPUSH
4482: LD_STRING DH-Flamer-11
4484: PPUSH
4485: CALL_OW 88
// Say ( Omar , DO-Flamer-12 ) ;
4489: LD_EXP 7
4493: PPUSH
4494: LD_STRING DO-Flamer-12
4496: PPUSH
4497: CALL_OW 88
// ComMoveXY ( Omar , 120 , 13 ) ;
4501: LD_EXP 7
4505: PPUSH
4506: LD_INT 120
4508: PPUSH
4509: LD_INT 13
4511: PPUSH
4512: CALL_OW 111
// wait ( 0 0$2 ) ;
4516: LD_INT 70
4518: PPUSH
4519: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
4523: LD_INT 1
4525: PPUSH
4526: LD_STRING %_cont
4528: PPUSH
4529: CALL_OW 340
// Video ( false ) ;
4533: LD_INT 0
4535: PPUSH
4536: CALL 820 0 1
// end ; end ;
4540: LD_VAR 0 1
4544: RET
// every 0 0$1 trigger GetLives ( flame ) < 1000 do
4545: LD_INT 262
4547: PPUSH
4548: CALL_OW 256
4552: PUSH
4553: LD_INT 1000
4555: LESS
4556: IFFALSE 4572
4558: GO 4560
4560: DISABLE
// begin enable ;
4561: ENABLE
// SetLives ( flame , 777 ) ;
4562: LD_INT 262
4564: PPUSH
4565: LD_INT 777
4567: PPUSH
4568: CALL_OW 234
// end ; end_of_file
4572: END
// on VehicleConstructed ( veh , fac ) do begin AddComMoveXY ( veh , 170 , 92 ) ;
4573: LD_VAR 0 1
4577: PPUSH
4578: LD_INT 170
4580: PPUSH
4581: LD_INT 92
4583: PPUSH
4584: CALL_OW 171
// end ;
4588: PPOPN 2
4590: END
// on DialogueSkipped ( dialogue ) do begin ChangeMap ( 1 , %_cont ) ;
4591: LD_INT 1
4593: PPUSH
4594: LD_STRING %_cont
4596: PPUSH
4597: CALL_OW 340
// end ;
4601: PPOPN 1
4603: END
