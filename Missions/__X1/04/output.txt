// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// PrepareNature ;
   8: CALL 461 0 0
// PrepareArabian ;
  12: CALL 1776 0 0
// Action ;
  16: CALL 2094 0 0
// end ;
  20: END
// export debug , prefix , hasAll , deadCounter , ibrahimHasEscaped ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 03_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 03_
  39: ST_TO_ADDR
// hasAll := LoadVariable ( 03_HasAll , true ) ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 03_HasAll
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// deadCounter := LoadVariable ( 03_DeadCounter , 0 ) ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_STRING 03_DeadCounter
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// ibrahimHasEscaped := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_IbrahimHasEscaped
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// end ; end_of_file
  88: LD_VAR 0 1
  92: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  93: LD_INT 0
  95: PPUSH
  96: PPUSH
// if exist_mode then
  97: LD_VAR 0 2
 101: IFFALSE 126
// unit := CreateCharacter ( prefix & ident ) else
 103: LD_ADDR_VAR 0 5
 107: PUSH
 108: LD_VAR 0 3
 112: PUSH
 113: LD_VAR 0 1
 117: STR
 118: PPUSH
 119: CALL_OW 34
 123: ST_TO_ADDR
 124: GO 141
// unit := NewCharacter ( ident ) ;
 126: LD_ADDR_VAR 0 5
 130: PUSH
 131: LD_VAR 0 1
 135: PPUSH
 136: CALL_OW 25
 140: ST_TO_ADDR
// result := unit ;
 141: LD_ADDR_VAR 0 4
 145: PUSH
 146: LD_VAR 0 5
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 4
 155: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 156: LD_INT 0
 158: PPUSH
// uc_side := side ;
 159: LD_ADDR_OWVAR 20
 163: PUSH
 164: LD_VAR 0 1
 168: ST_TO_ADDR
// uc_nation := nation ;
 169: LD_ADDR_OWVAR 21
 173: PUSH
 174: LD_VAR 0 2
 178: ST_TO_ADDR
// vc_chassis := chassis ;
 179: LD_ADDR_OWVAR 37
 183: PUSH
 184: LD_VAR 0 3
 188: ST_TO_ADDR
// vc_engine := engine ;
 189: LD_ADDR_OWVAR 39
 193: PUSH
 194: LD_VAR 0 4
 198: ST_TO_ADDR
// vc_control := control ;
 199: LD_ADDR_OWVAR 38
 203: PUSH
 204: LD_VAR 0 5
 208: ST_TO_ADDR
// vc_weapon := weapon ;
 209: LD_ADDR_OWVAR 40
 213: PUSH
 214: LD_VAR 0 6
 218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 219: LD_ADDR_OWVAR 41
 223: PUSH
 224: LD_VAR 0 7
 228: ST_TO_ADDR
// result := CreateVehicle ;
 229: LD_ADDR_VAR 0 8
 233: PUSH
 234: CALL_OW 45
 238: ST_TO_ADDR
// end ;
 239: LD_VAR 0 8
 243: RET
// export function SayX ( units , ident ) ; var i ; begin
 244: LD_INT 0
 246: PPUSH
 247: PPUSH
// result := false ;
 248: LD_ADDR_VAR 0 3
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// if not units then
 256: LD_VAR 0 1
 260: NOT
 261: IFFALSE 265
// exit ;
 263: GO 319
// for i in units do
 265: LD_ADDR_VAR 0 4
 269: PUSH
 270: LD_VAR 0 1
 274: PUSH
 275: FOR_IN
 276: IFFALSE 317
// if IsOk ( i ) then
 278: LD_VAR 0 4
 282: PPUSH
 283: CALL_OW 302
 287: IFFALSE 315
// begin Say ( i , ident ) ;
 289: LD_VAR 0 4
 293: PPUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 88
// result := i ;
 303: LD_ADDR_VAR 0 3
 307: PUSH
 308: LD_VAR 0 4
 312: ST_TO_ADDR
// break ;
 313: GO 317
// end ;
 315: GO 275
 317: POP
 318: POP
// end ;
 319: LD_VAR 0 3
 323: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
// InitUc ;
 328: CALL_OW 18
// InitHc ;
 332: CALL_OW 19
// uc_side := 0 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_nation := 0 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// for i = 1 to amount do
 352: LD_ADDR_VAR 0 4
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_VAR 0 2
 366: PUSH
 367: FOR_TO
 368: IFFALSE 450
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 370: LD_ADDR_OWVAR 29
 374: PUSH
 375: LD_INT 9
 377: PPUSH
 378: LD_INT 12
 380: PPUSH
 381: CALL_OW 12
 385: PUSH
 386: LD_INT 9
 388: PPUSH
 389: LD_INT 12
 391: PPUSH
 392: CALL_OW 12
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 401: LD_ADDR_OWVAR 35
 405: PUSH
 406: LD_INT 1
 408: NEG
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL_OW 12
 417: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 418: LD_INT 0
 420: PPUSH
 421: LD_INT 12
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 1
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 367
 450: POP
 451: POP
// InitHc ;
 452: CALL_OW 19
// end ;
 456: LD_VAR 0 3
 460: RET
// export function PrepareNature ; var i ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 465: LD_INT 1
 467: PPUSH
 468: LD_INT 4
 470: PUSH
 471: LD_INT 4
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 324 0 2
// for i := 1 to 3 do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 3
 504: PUSH
 505: FOR_TO
 506: IFFALSE 541
// begin hc_class := 21 ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_INT 21
 515: ST_TO_ADDR
// hc_gallery :=  ;
 516: LD_ADDR_OWVAR 33
 520: PUSH
 521: LD_STRING 
 523: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 524: CALL_OW 44
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL_OW 49
// end ;
 539: GO 505
 541: POP
 542: POP
// for i := 1 to 2 do
 543: LD_ADDR_VAR 0 2
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_INT 2
 555: PUSH
 556: FOR_TO
 557: IFFALSE 592
// begin hc_class := 18 ;
 559: LD_ADDR_OWVAR 28
 563: PUSH
 564: LD_INT 18
 566: ST_TO_ADDR
// hc_gallery :=  ;
 567: LD_ADDR_OWVAR 33
 571: PUSH
 572: LD_STRING 
 574: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 575: CALL_OW 44
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 49
// end ;
 590: GO 556
 592: POP
 593: POP
// for i := 1 to 2 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 2
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 13 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 13
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// end ;
 645: LD_VAR 0 1
 649: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 650: LD_INT 0
 652: PPUSH
 653: PPUSH
 654: PPUSH
// if not observer or not unit then
 655: LD_VAR 0 1
 659: NOT
 660: PUSH
 661: LD_VAR 0 2
 665: NOT
 666: OR
 667: IFFALSE 671
// exit ;
 669: GO 719
// if not See ( GetSide ( observer ) , unit ) then
 671: LD_VAR 0 1
 675: PPUSH
 676: CALL_OW 255
 680: PPUSH
 681: LD_VAR 0 2
 685: PPUSH
 686: CALL_OW 292
 690: NOT
 691: IFFALSE 695
// exit ;
 693: GO 719
// result := GetDistUnits ( observer , unit ) < 12 ;
 695: LD_ADDR_VAR 0 3
 699: PUSH
 700: LD_VAR 0 1
 704: PPUSH
 705: LD_VAR 0 2
 709: PPUSH
 710: CALL_OW 296
 714: PUSH
 715: LD_INT 12
 717: LESS
 718: ST_TO_ADDR
// end ;
 719: LD_VAR 0 3
 723: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 724: LD_INT 0
 726: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 1
 734: ARRAY
 735: PPUSH
 736: LD_VAR 0 2
 740: PUSH
 741: LD_INT 2
 743: ARRAY
 744: PPUSH
 745: CALL_OW 488
 749: PUSH
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: CALL_OW 428
 772: PUSH
 773: LD_INT 0
 775: EQUAL
 776: AND
 777: IFFALSE 811
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 779: LD_VAR 0 1
 783: PPUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: ARRAY
 792: PPUSH
 793: LD_VAR 0 2
 797: PUSH
 798: LD_INT 2
 800: ARRAY
 801: PPUSH
 802: LD_VAR 0 3
 806: PPUSH
 807: CALL_OW 48
// end ;
 811: LD_VAR 0 4
 815: RET
// export function Video ( mode ) ; begin
 816: LD_INT 0
 818: PPUSH
// ingame_video = mode ;
 819: LD_ADDR_OWVAR 52
 823: PUSH
 824: LD_VAR 0 1
 828: ST_TO_ADDR
// interface_hidden = mode ;
 829: LD_ADDR_OWVAR 54
 833: PUSH
 834: LD_VAR 0 1
 838: ST_TO_ADDR
// end ;
 839: LD_VAR 0 2
 843: RET
// export function ReverseArray ( array ) ; var i ; begin
 844: LD_INT 0
 846: PPUSH
 847: PPUSH
// if not array then
 848: LD_VAR 0 1
 852: NOT
 853: IFFALSE 857
// exit ;
 855: GO 915
// result := [ ] ;
 857: LD_ADDR_VAR 0 2
 861: PUSH
 862: EMPTY
 863: ST_TO_ADDR
// for i := 1 to array do
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: DOUBLE
 870: LD_INT 1
 872: DEC
 873: ST_TO_ADDR
 874: LD_VAR 0 1
 878: PUSH
 879: FOR_TO
 880: IFFALSE 913
// result := Insert ( result , 1 , array [ i ] ) ;
 882: LD_ADDR_VAR 0 2
 886: PUSH
 887: LD_VAR 0 2
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_VAR 0 1
 899: PUSH
 900: LD_VAR 0 3
 904: ARRAY
 905: PPUSH
 906: CALL_OW 2
 910: ST_TO_ADDR
 911: GO 879
 913: POP
 914: POP
// end ;
 915: LD_VAR 0 2
 919: RET
// export function ComExit ( unit ) ; begin
 920: LD_INT 0
 922: PPUSH
// result := IsInUnit ( unit ) ;
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: CALL_OW 310
 937: ST_TO_ADDR
// if not result then
 938: LD_VAR 0 2
 942: NOT
 943: IFFALSE 947
// exit ;
 945: GO 982
// if GetType ( result ) = unit_vehicle then
 947: LD_VAR 0 2
 951: PPUSH
 952: CALL_OW 247
 956: PUSH
 957: LD_INT 2
 959: EQUAL
 960: IFFALSE 973
// ComExitVehicle ( unit ) else
 962: LD_VAR 0 1
 966: PPUSH
 967: CALL_OW 121
 971: GO 982
// ComExitBuilding ( unit ) ;
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 122
// end ;
 982: LD_VAR 0 2
 986: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
// if not side or not nation then
 991: LD_VAR 0 1
 995: NOT
 996: PUSH
 997: LD_VAR 0 2
1001: NOT
1002: OR
1003: IFFALSE 1007
// exit ;
1005: GO 1771
// case nation of nation_american :
1007: LD_VAR 0 2
1011: PUSH
1012: LD_INT 1
1014: DOUBLE
1015: EQUAL
1016: IFTRUE 1020
1018: GO 1234
1020: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_INT 35
1028: PUSH
1029: LD_INT 45
1031: PUSH
1032: LD_INT 46
1034: PUSH
1035: LD_INT 47
1037: PUSH
1038: LD_INT 82
1040: PUSH
1041: LD_INT 83
1043: PUSH
1044: LD_INT 84
1046: PUSH
1047: LD_INT 85
1049: PUSH
1050: LD_INT 86
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: LD_INT 6
1061: PUSH
1062: LD_INT 15
1064: PUSH
1065: LD_INT 16
1067: PUSH
1068: LD_INT 7
1070: PUSH
1071: LD_INT 12
1073: PUSH
1074: LD_INT 13
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: LD_INT 14
1082: PUSH
1083: LD_INT 20
1085: PUSH
1086: LD_INT 21
1088: PUSH
1089: LD_INT 22
1091: PUSH
1092: LD_INT 25
1094: PUSH
1095: LD_INT 32
1097: PUSH
1098: LD_INT 27
1100: PUSH
1101: LD_INT 36
1103: PUSH
1104: LD_INT 69
1106: PUSH
1107: LD_INT 39
1109: PUSH
1110: LD_INT 34
1112: PUSH
1113: LD_INT 40
1115: PUSH
1116: LD_INT 48
1118: PUSH
1119: LD_INT 49
1121: PUSH
1122: LD_INT 50
1124: PUSH
1125: LD_INT 51
1127: PUSH
1128: LD_INT 52
1130: PUSH
1131: LD_INT 53
1133: PUSH
1134: LD_INT 54
1136: PUSH
1137: LD_INT 55
1139: PUSH
1140: LD_INT 56
1142: PUSH
1143: LD_INT 57
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: LD_INT 59
1151: PUSH
1152: LD_INT 60
1154: PUSH
1155: LD_INT 61
1157: PUSH
1158: LD_INT 62
1160: PUSH
1161: LD_INT 80
1163: PUSH
1164: LD_INT 82
1166: PUSH
1167: LD_INT 83
1169: PUSH
1170: LD_INT 84
1172: PUSH
1173: LD_INT 85
1175: PUSH
1176: LD_INT 86
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
1232: GO 1695
1234: LD_INT 2
1236: DOUBLE
1237: EQUAL
1238: IFTRUE 1242
1240: GO 1464
1242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1243: LD_ADDR_VAR 0 4
1247: PUSH
1248: LD_INT 35
1250: PUSH
1251: LD_INT 45
1253: PUSH
1254: LD_INT 46
1256: PUSH
1257: LD_INT 47
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 83
1265: PUSH
1266: LD_INT 84
1268: PUSH
1269: LD_INT 85
1271: PUSH
1272: LD_INT 87
1274: PUSH
1275: LD_INT 70
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: LD_INT 11
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 15
1298: PUSH
1299: LD_INT 18
1301: PUSH
1302: LD_INT 7
1304: PUSH
1305: LD_INT 17
1307: PUSH
1308: LD_INT 8
1310: PUSH
1311: LD_INT 20
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 22
1319: PUSH
1320: LD_INT 72
1322: PUSH
1323: LD_INT 26
1325: PUSH
1326: LD_INT 69
1328: PUSH
1329: LD_INT 39
1331: PUSH
1332: LD_INT 40
1334: PUSH
1335: LD_INT 41
1337: PUSH
1338: LD_INT 42
1340: PUSH
1341: LD_INT 43
1343: PUSH
1344: LD_INT 48
1346: PUSH
1347: LD_INT 49
1349: PUSH
1350: LD_INT 50
1352: PUSH
1353: LD_INT 51
1355: PUSH
1356: LD_INT 52
1358: PUSH
1359: LD_INT 53
1361: PUSH
1362: LD_INT 54
1364: PUSH
1365: LD_INT 55
1367: PUSH
1368: LD_INT 56
1370: PUSH
1371: LD_INT 60
1373: PUSH
1374: LD_INT 61
1376: PUSH
1377: LD_INT 62
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: LD_INT 68
1388: PUSH
1389: LD_INT 81
1391: PUSH
1392: LD_INT 82
1394: PUSH
1395: LD_INT 83
1397: PUSH
1398: LD_INT 84
1400: PUSH
1401: LD_INT 85
1403: PUSH
1404: LD_INT 87
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: ST_TO_ADDR
1462: GO 1695
1464: LD_INT 3
1466: DOUBLE
1467: EQUAL
1468: IFTRUE 1472
1470: GO 1694
1472: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1473: LD_ADDR_VAR 0 4
1477: PUSH
1478: LD_INT 46
1480: PUSH
1481: LD_INT 47
1483: PUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 82
1492: PUSH
1493: LD_INT 83
1495: PUSH
1496: LD_INT 84
1498: PUSH
1499: LD_INT 85
1501: PUSH
1502: LD_INT 86
1504: PUSH
1505: LD_INT 11
1507: PUSH
1508: LD_INT 9
1510: PUSH
1511: LD_INT 20
1513: PUSH
1514: LD_INT 19
1516: PUSH
1517: LD_INT 21
1519: PUSH
1520: LD_INT 24
1522: PUSH
1523: LD_INT 22
1525: PUSH
1526: LD_INT 25
1528: PUSH
1529: LD_INT 28
1531: PUSH
1532: LD_INT 29
1534: PUSH
1535: LD_INT 30
1537: PUSH
1538: LD_INT 31
1540: PUSH
1541: LD_INT 37
1543: PUSH
1544: LD_INT 38
1546: PUSH
1547: LD_INT 32
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 33
1555: PUSH
1556: LD_INT 69
1558: PUSH
1559: LD_INT 39
1561: PUSH
1562: LD_INT 34
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 71
1570: PUSH
1571: LD_INT 23
1573: PUSH
1574: LD_INT 44
1576: PUSH
1577: LD_INT 48
1579: PUSH
1580: LD_INT 49
1582: PUSH
1583: LD_INT 50
1585: PUSH
1586: LD_INT 51
1588: PUSH
1589: LD_INT 52
1591: PUSH
1592: LD_INT 53
1594: PUSH
1595: LD_INT 54
1597: PUSH
1598: LD_INT 55
1600: PUSH
1601: LD_INT 56
1603: PUSH
1604: LD_INT 57
1606: PUSH
1607: LD_INT 58
1609: PUSH
1610: LD_INT 59
1612: PUSH
1613: LD_INT 63
1615: PUSH
1616: LD_INT 64
1618: PUSH
1619: LD_INT 65
1621: PUSH
1622: LD_INT 82
1624: PUSH
1625: LD_INT 83
1627: PUSH
1628: LD_INT 84
1630: PUSH
1631: LD_INT 85
1633: PUSH
1634: LD_INT 86
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
1692: GO 1695
1694: POP
// if state > - 1 and state < 3 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 1
1702: NEG
1703: GREATER
1704: PUSH
1705: LD_VAR 0 3
1709: PUSH
1710: LD_INT 3
1712: LESS
1713: AND
1714: IFFALSE 1771
// for i in result do
1716: LD_ADDR_VAR 0 5
1720: PUSH
1721: LD_VAR 0 4
1725: PUSH
1726: FOR_IN
1727: IFFALSE 1769
// if GetTech ( i , side ) <> state then
1729: LD_VAR 0 5
1733: PPUSH
1734: LD_VAR 0 1
1738: PPUSH
1739: CALL_OW 321
1743: PUSH
1744: LD_VAR 0 3
1748: NONEQUAL
1749: IFFALSE 1767
// result := result diff i ;
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: LD_VAR 0 4
1760: PUSH
1761: LD_VAR 0 5
1765: DIFF
1766: ST_TO_ADDR
1767: GO 1726
1769: POP
1770: POP
// end ; end_of_file
1771: LD_VAR 0 4
1775: RET
// export Heike , Omar , Shariff , Schulz , Farmer , Ibrahim ; export function PrepareArabian ; var i , un ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
1780: PPUSH
// SetBName ( ar_dep_n , dammam ) ;
1781: LD_INT 94
1783: PPUSH
1784: LD_STRING dammam
1786: PPUSH
1787: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep_n ) , mat_cans , 10000 ) ;
1791: LD_INT 94
1793: PPUSH
1794: CALL_OW 274
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 10000
1804: PPUSH
1805: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep_n ) , mat_oil , 1000 ) ;
1809: LD_INT 94
1811: PPUSH
1812: CALL_OW 274
1816: PPUSH
1817: LD_INT 2
1819: PPUSH
1820: LD_INT 1000
1822: PPUSH
1823: CALL_OW 277
// uc_side := 2 ;
1827: LD_ADDR_OWVAR 20
1831: PUSH
1832: LD_INT 2
1834: ST_TO_ADDR
// uc_nation := 2 ;
1835: LD_ADDR_OWVAR 21
1839: PUSH
1840: LD_INT 2
1842: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1843: LD_ADDR_EXP 6
1847: PUSH
1848: LD_STRING Heike
1850: PPUSH
1851: LD_EXP 1
1855: NOT
1856: PPUSH
1857: LD_EXP 2
1861: PPUSH
1862: CALL 93 0 3
1866: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1867: LD_ADDR_EXP 11
1871: PUSH
1872: LD_STRING Ibrahim
1874: PPUSH
1875: LD_EXP 1
1879: NOT
1880: PPUSH
1881: LD_EXP 2
1885: PPUSH
1886: CALL 93 0 3
1890: ST_TO_ADDR
// uc_side := 5 ;
1891: LD_ADDR_OWVAR 20
1895: PUSH
1896: LD_INT 5
1898: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1899: LD_ADDR_EXP 10
1903: PUSH
1904: LD_STRING Farmer
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: LD_STRING 
1912: PPUSH
1913: CALL 93 0 3
1917: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1918: LD_ADDR_EXP 7
1922: PUSH
1923: LD_STRING Omar
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: LD_STRING 
1931: PPUSH
1932: CALL 93 0 3
1936: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , false ,  ) ;
1937: LD_ADDR_EXP 9
1941: PUSH
1942: LD_STRING Schulz
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: LD_STRING 
1950: PPUSH
1951: CALL 93 0 3
1955: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1956: LD_ADDR_EXP 8
1960: PUSH
1961: LD_STRING Abdul
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: LD_STRING 
1969: PPUSH
1970: CALL 93 0 3
1974: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1975: LD_ADDR_VAR 0 2
1979: PUSH
1980: LD_INT 21
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PPUSH
1990: CALL_OW 69
1994: PUSH
1995: FOR_IN
1996: IFFALSE 2087
// begin SetSide ( i , 5 ) ;
1998: LD_VAR 0 2
2002: PPUSH
2003: LD_INT 5
2005: PPUSH
2006: CALL_OW 235
// PrepareHuman ( false , 1 , 1 ) ;
2010: LD_INT 0
2012: PPUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: CALL_OW 380
// un := CreateHuman ;
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: CALL_OW 44
2032: ST_TO_ADDR
// if GetBType ( i ) = b_breastwork then
2033: LD_VAR 0 2
2037: PPUSH
2038: CALL_OW 266
2042: PUSH
2043: LD_INT 31
2045: EQUAL
2046: IFFALSE 2071
// SetDir ( un , GetDir ( i ) - 3 ) ;
2048: LD_VAR 0 3
2052: PPUSH
2053: LD_VAR 0 2
2057: PPUSH
2058: CALL_OW 254
2062: PUSH
2063: LD_INT 3
2065: MINUS
2066: PPUSH
2067: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2071: LD_VAR 0 3
2075: PPUSH
2076: LD_VAR 0 2
2080: PPUSH
2081: CALL_OW 52
// end ;
2085: GO 1995
2087: POP
2088: POP
// end ; end_of_file
2089: LD_VAR 0 1
2093: RET
// export function Action ; var killScene , bonus , un , i , driver , mechs , eng ; begin
2094: LD_INT 0
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
// music_nat := 2 ;
2104: LD_ADDR_OWVAR 71
2108: PUSH
2109: LD_INT 2
2111: ST_TO_ADDR
// bonus := 0 ;
2112: LD_ADDR_VAR 0 3
2116: PUSH
2117: LD_INT 0
2119: ST_TO_ADDR
// if hasAll then
2120: LD_EXP 3
2124: IFFALSE 2134
// bonus := 1 ;
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// killScene := deadCounter > [ 3 , 2 , 2 ] [ Difficulty ] + bonus ;
2134: LD_ADDR_VAR 0 2
2138: PUSH
2139: LD_EXP 4
2143: PUSH
2144: LD_INT 3
2146: PUSH
2147: LD_INT 2
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_OWVAR 67
2162: ARRAY
2163: PUSH
2164: LD_VAR 0 3
2168: PLUS
2169: GREATER
2170: ST_TO_ADDR
// PlaceSeeing ( 118 , 11 , 2 , - 37963 ) ;
2171: LD_INT 118
2173: PPUSH
2174: LD_INT 11
2176: PPUSH
2177: LD_INT 2
2179: PPUSH
2180: LD_INT 37963
2182: NEG
2183: PPUSH
2184: CALL_OW 330
// if killScene then
2188: LD_VAR 0 2
2192: IFFALSE 2508
// begin RemoveUnit ( flame ) ;
2194: LD_INT 262
2196: PPUSH
2197: CALL_OW 64
// InGameOn ;
2201: CALL_OW 8
// CenterNowOnXY ( 71 , 112 ) ;
2205: LD_INT 71
2207: PPUSH
2208: LD_INT 112
2210: PPUSH
2211: CALL_OW 86
// PlaceUnitXY ( Omar , 70 , 112 , false ) ;
2215: LD_EXP 7
2219: PPUSH
2220: LD_INT 70
2222: PPUSH
2223: LD_INT 112
2225: PPUSH
2226: LD_INT 0
2228: PPUSH
2229: CALL_OW 48
// PlaceUnitXY ( Heike , 72 , 112 , false ) ;
2233: LD_EXP 6
2237: PPUSH
2238: LD_INT 72
2240: PPUSH
2241: LD_INT 112
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: CALL_OW 48
// ComTurnUnit ( Omar , Heike ) ;
2251: LD_EXP 7
2255: PPUSH
2256: LD_EXP 6
2260: PPUSH
2261: CALL_OW 119
// ComTurnUnit ( Heike , Omar ) ;
2265: LD_EXP 6
2269: PPUSH
2270: LD_EXP 7
2274: PPUSH
2275: CALL_OW 119
// SetLives ( Heike , 251 ) ;
2279: LD_EXP 6
2283: PPUSH
2284: LD_INT 251
2286: PPUSH
2287: CALL_OW 234
// SetClass ( Heike , 2 ) ;
2291: LD_EXP 6
2295: PPUSH
2296: LD_INT 2
2298: PPUSH
2299: CALL_OW 336
// ComTurnUnit ( Heike , Omar ) ;
2303: LD_EXP 6
2307: PPUSH
2308: LD_EXP 7
2312: PPUSH
2313: CALL_OW 119
// ComTurnUnit ( Omar , Heike ) ;
2317: LD_EXP 7
2321: PPUSH
2322: LD_EXP 6
2326: PPUSH
2327: CALL_OW 119
// for i := 1 to 3 do
2331: LD_ADDR_VAR 0 5
2335: PUSH
2336: DOUBLE
2337: LD_INT 1
2339: DEC
2340: ST_TO_ADDR
2341: LD_INT 3
2343: PUSH
2344: FOR_TO
2345: IFFALSE 2433
// begin uc_side := 5 ;
2347: LD_ADDR_OWVAR 20
2351: PUSH
2352: LD_INT 5
2354: ST_TO_ADDR
// uc_nation := 2 ;
2355: LD_ADDR_OWVAR 21
2359: PUSH
2360: LD_INT 2
2362: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2363: LD_INT 0
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_INT 1
2371: PPUSH
2372: CALL_OW 380
// un := CreateHuman ;
2376: LD_ADDR_VAR 0 4
2380: PUSH
2381: CALL_OW 44
2385: ST_TO_ADDR
// PlaceUnitXY ( un , 68 + i , 112 + i , false ) ;
2386: LD_VAR 0 4
2390: PPUSH
2391: LD_INT 68
2393: PUSH
2394: LD_VAR 0 5
2398: PLUS
2399: PPUSH
2400: LD_INT 112
2402: PUSH
2403: LD_VAR 0 5
2407: PLUS
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: CALL_OW 48
// ComTurnXY ( un , 72 , 112 ) ;
2416: LD_VAR 0 4
2420: PPUSH
2421: LD_INT 72
2423: PPUSH
2424: LD_INT 112
2426: PPUSH
2427: CALL_OW 118
// end ;
2431: GO 2344
2433: POP
2434: POP
// wait ( 0 0$2 ) ;
2435: LD_INT 70
2437: PPUSH
2438: CALL_OW 67
// Say ( Omar , DO-death-1 ) ;
2442: LD_EXP 7
2446: PPUSH
2447: LD_STRING DO-death-1
2449: PPUSH
2450: CALL_OW 88
// Say ( Omar , DO-death-2 ) ;
2454: LD_EXP 7
2458: PPUSH
2459: LD_STRING DO-death-2
2461: PPUSH
2462: CALL_OW 88
// Say ( Omar , DO-death-3 ) ;
2466: LD_EXP 7
2470: PPUSH
2471: LD_STRING DO-death-3
2473: PPUSH
2474: CALL_OW 88
// ComAttackUnit ( Omar , Heike ) ;
2478: LD_EXP 7
2482: PPUSH
2483: LD_EXP 6
2487: PPUSH
2488: CALL_OW 115
// wait ( 0 0$2 ) ;
2492: LD_INT 70
2494: PPUSH
2495: CALL_OW 67
// YouLost ( Penalty ) ;
2499: LD_STRING Penalty
2501: PPUSH
2502: CALL_OW 104
// end else
2506: GO 4425
// begin mechs := [ ] ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: EMPTY
2514: ST_TO_ADDR
// Video ( true ) ;
2515: LD_INT 1
2517: PPUSH
2518: CALL 816 0 1
// CenterNowOnXY ( 124 , 15 ) ;
2522: LD_INT 124
2524: PPUSH
2525: LD_INT 15
2527: PPUSH
2528: CALL_OW 86
// ComTurnXY ( Heike , 123 , 16 ) ;
2532: LD_EXP 6
2536: PPUSH
2537: LD_INT 123
2539: PPUSH
2540: LD_INT 16
2542: PPUSH
2543: CALL_OW 118
// PlaceHumanInUnit ( Shariff , arBar1 ) ;
2547: LD_EXP 8
2551: PPUSH
2552: LD_INT 118
2554: PPUSH
2555: CALL_OW 52
// PlaceHumanInUnit ( Omar , arBar1 ) ;
2559: LD_EXP 7
2563: PPUSH
2564: LD_INT 118
2566: PPUSH
2567: CALL_OW 52
// PlaceUnitXY ( Heike , 124 , 12 , false ) ;
2571: LD_EXP 6
2575: PPUSH
2576: LD_INT 124
2578: PPUSH
2579: LD_INT 12
2581: PPUSH
2582: LD_INT 0
2584: PPUSH
2585: CALL_OW 48
// PrepareHuman ( false , 1 , 1 ) ;
2589: LD_INT 0
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: LD_INT 1
2597: PPUSH
2598: CALL_OW 380
// un := CreateHuman ;
2602: LD_ADDR_VAR 0 4
2606: PUSH
2607: CALL_OW 44
2611: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 18 , false ) ;
2612: LD_VAR 0 4
2616: PPUSH
2617: LD_INT 124
2619: PPUSH
2620: LD_INT 18
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 48
// ComTurnXY ( un , 124 , 16 ) ;
2630: LD_VAR 0 4
2634: PPUSH
2635: LD_INT 124
2637: PPUSH
2638: LD_INT 16
2640: PPUSH
2641: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2645: LD_INT 0
2647: PPUSH
2648: LD_INT 3
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 380
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitXY ( un , 134 , 13 , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 134
2675: PPUSH
2676: LD_INT 13
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 48
// ComTurnXY ( un , 136 , 15 ) ;
2686: LD_VAR 0 4
2690: PPUSH
2691: LD_INT 136
2693: PPUSH
2694: LD_INT 15
2696: PPUSH
2697: CALL_OW 118
// mechs := Replace ( mechs , 1 , un ) ;
2701: LD_ADDR_VAR 0 7
2705: PUSH
2706: LD_VAR 0 7
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_VAR 0 4
2718: PPUSH
2719: CALL_OW 1
2723: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2724: LD_INT 0
2726: PPUSH
2727: LD_INT 3
2729: PPUSH
2730: LD_INT 3
2732: PPUSH
2733: CALL_OW 380
// un := CreateHuman ;
2737: LD_ADDR_VAR 0 4
2741: PUSH
2742: CALL_OW 44
2746: ST_TO_ADDR
// PlaceUnitXY ( un , 136 , 15 , false ) ;
2747: LD_VAR 0 4
2751: PPUSH
2752: LD_INT 136
2754: PPUSH
2755: LD_INT 15
2757: PPUSH
2758: LD_INT 0
2760: PPUSH
2761: CALL_OW 48
// ComTurnXY ( un , 134 , 13 ) ;
2765: LD_VAR 0 4
2769: PPUSH
2770: LD_INT 134
2772: PPUSH
2773: LD_INT 13
2775: PPUSH
2776: CALL_OW 118
// mechs := Replace ( mechs , 2 , un ) ;
2780: LD_ADDR_VAR 0 7
2784: PUSH
2785: LD_VAR 0 7
2789: PPUSH
2790: LD_INT 2
2792: PPUSH
2793: LD_VAR 0 4
2797: PPUSH
2798: CALL_OW 1
2802: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2803: LD_INT 0
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 380
// un := CreateHuman ;
2816: LD_ADDR_VAR 0 4
2820: PUSH
2821: CALL_OW 44
2825: ST_TO_ADDR
// PlaceUnitXY ( un , 112 , 36 , false ) ;
2826: LD_VAR 0 4
2830: PPUSH
2831: LD_INT 112
2833: PPUSH
2834: LD_INT 36
2836: PPUSH
2837: LD_INT 0
2839: PPUSH
2840: CALL_OW 48
// ComTurnXY ( un , 115 , 39 ) ;
2844: LD_VAR 0 4
2848: PPUSH
2849: LD_INT 115
2851: PPUSH
2852: LD_INT 39
2854: PPUSH
2855: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2859: LD_INT 0
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 380
// driver := CreateHuman ;
2872: LD_ADDR_VAR 0 6
2876: PUSH
2877: CALL_OW 44
2881: ST_TO_ADDR
// PlaceUnitXY ( driver , 115 , 33 , false ) ;
2882: LD_VAR 0 6
2886: PPUSH
2887: LD_INT 115
2889: PPUSH
2890: LD_INT 33
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2900: LD_INT 0
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: CALL_OW 380
// un := CreateHuman ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 44
2922: ST_TO_ADDR
// PlaceUnitXY ( un , 151 , 37 , false ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 151
2930: PPUSH
2931: LD_INT 37
2933: PPUSH
2934: LD_INT 0
2936: PPUSH
2937: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2941: LD_INT 0
2943: PPUSH
2944: LD_INT 3
2946: PPUSH
2947: LD_INT 1
2949: PPUSH
2950: CALL_OW 380
// un := CreateHuman ;
2954: LD_ADDR_VAR 0 4
2958: PUSH
2959: CALL_OW 44
2963: ST_TO_ADDR
// PlaceUnitXY ( un , 152 , 33 , false ) ;
2964: LD_VAR 0 4
2968: PPUSH
2969: LD_INT 152
2971: PPUSH
2972: LD_INT 33
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: CALL_OW 48
// PrepareHuman ( false , 2 , 2 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 2
2987: PPUSH
2988: LD_INT 2
2990: PPUSH
2991: CALL_OW 380
// eng := CreateHuman ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceUnitXY ( eng , 156 , 13 , false ) ;
3005: LD_VAR 0 8
3009: PPUSH
3010: LD_INT 156
3012: PPUSH
3013: LD_INT 13
3015: PPUSH
3016: LD_INT 0
3018: PPUSH
3019: CALL_OW 48
// for i := 1 to 3 do
3023: LD_ADDR_VAR 0 5
3027: PUSH
3028: DOUBLE
3029: LD_INT 1
3031: DEC
3032: ST_TO_ADDR
3033: LD_INT 3
3035: PUSH
3036: FOR_TO
3037: IFFALSE 3097
// begin PrepareHuman ( false , 4 , 3 ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 4
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: CALL_OW 380
// un := CreateHuman ;
3052: LD_ADDR_VAR 0 4
3056: PUSH
3057: CALL_OW 44
3061: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ arLab1 , arLab2 ] [ i mod 2 + 1 ] ) ;
3062: LD_VAR 0 4
3066: PPUSH
3067: LD_INT 96
3069: PUSH
3070: LD_INT 97
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_VAR 0 5
3081: PUSH
3082: LD_INT 2
3084: MOD
3085: PUSH
3086: LD_INT 1
3088: PLUS
3089: ARRAY
3090: PPUSH
3091: CALL_OW 52
// end ;
3095: GO 3036
3097: POP
3098: POP
// SetSpecResearch ( arLab1 , 100 , false ) ;
3099: LD_INT 96
3101: PPUSH
3102: LD_INT 100
3104: PPUSH
3105: LD_INT 0
3107: PPUSH
3108: CALL_OW 486
// SetSpecResearch ( arLab2 , 100 , false ) ;
3112: LD_INT 97
3114: PPUSH
3115: LD_INT 100
3117: PPUSH
3118: LD_INT 0
3120: PPUSH
3121: CALL_OW 486
// wait ( 0 0$2 ) ;
3125: LD_INT 70
3127: PPUSH
3128: CALL_OW 67
// PlaceHumanInUnit ( Schulz , schulzVeh ) ;
3132: LD_EXP 9
3136: PPUSH
3137: LD_INT 273
3139: PPUSH
3140: CALL_OW 52
// ComExitBuilding ( [ Omar , Shariff ] ) ;
3144: LD_EXP 7
3148: PUSH
3149: LD_EXP 8
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 122
// AddComMoveXY ( Shariff , 123 , 15 ) ;
3162: LD_EXP 8
3166: PPUSH
3167: LD_INT 123
3169: PPUSH
3170: LD_INT 15
3172: PPUSH
3173: CALL_OW 171
// wait ( 0 0$0.3 ) ;
3177: LD_INT 10
3179: PPUSH
3180: CALL_OW 67
// AddComMoveXY ( Omar , 124 , 15 ) ;
3184: LD_EXP 7
3188: PPUSH
3189: LD_INT 124
3191: PPUSH
3192: LD_INT 15
3194: PPUSH
3195: CALL_OW 171
// AddComTurnUnit ( [ Omar , Shariff ] , Heike ) ;
3199: LD_EXP 7
3203: PUSH
3204: LD_EXP 8
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PPUSH
3213: LD_EXP 6
3217: PPUSH
3218: CALL_OW 179
// wait ( 0 0$1 ) ;
3222: LD_INT 35
3224: PPUSH
3225: CALL_OW 67
// Say ( Shariff , DShar-intro-1 ) ;
3229: LD_EXP 8
3233: PPUSH
3234: LD_STRING DShar-intro-1
3236: PPUSH
3237: CALL_OW 88
// Say ( Omar , DO-intro-1 ) ;
3241: LD_EXP 7
3245: PPUSH
3246: LD_STRING DO-intro-1
3248: PPUSH
3249: CALL_OW 88
// Say ( Omar , DO-intro-2 ) ;
3253: LD_EXP 7
3257: PPUSH
3258: LD_STRING DO-intro-2
3260: PPUSH
3261: CALL_OW 88
// Say ( Heike , DH-intro-1 ) ;
3265: LD_EXP 6
3269: PPUSH
3270: LD_STRING DH-intro-1
3272: PPUSH
3273: CALL_OW 88
// Say ( Omar , DO-intro-3 ) ;
3277: LD_EXP 7
3281: PPUSH
3282: LD_STRING DO-intro-3
3284: PPUSH
3285: CALL_OW 88
// ComEnterUnit ( mechs , arFac ) ;
3289: LD_VAR 0 7
3293: PPUSH
3294: LD_INT 112
3296: PPUSH
3297: CALL_OW 120
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun ) ;
3301: LD_INT 112
3303: PPUSH
3304: LD_INT 13
3306: PPUSH
3307: LD_INT 1
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 24
3315: PPUSH
3316: CALL_OW 185
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_gun ) ;
3320: LD_INT 112
3322: PPUSH
3323: LD_INT 13
3325: PPUSH
3326: LD_INT 1
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: LD_INT 27
3334: PPUSH
3335: CALL_OW 185
// wait ( 0 0$1 ) ;
3339: LD_INT 35
3341: PPUSH
3342: CALL_OW 67
// if Ibrahim then
3346: LD_EXP 11
3350: IFFALSE 3450
// begin Say ( Omar , DO-intro-a-1 ) ;
3352: LD_EXP 7
3356: PPUSH
3357: LD_STRING DO-intro-a-1
3359: PPUSH
3360: CALL_OW 88
// Say ( Omar , DO-intro-a-2 ) ;
3364: LD_EXP 7
3368: PPUSH
3369: LD_STRING DO-intro-a-2
3371: PPUSH
3372: CALL_OW 88
// Say ( Shariff , DShar-intro-a-3 ) ;
3376: LD_EXP 8
3380: PPUSH
3381: LD_STRING DShar-intro-a-3
3383: PPUSH
3384: CALL_OW 88
// Say ( Shariff , DShar-intro-a-4 ) ;
3388: LD_EXP 8
3392: PPUSH
3393: LD_STRING DShar-intro-a-4
3395: PPUSH
3396: CALL_OW 88
// Say ( Shariff , DShar-intro-a-5 ) ;
3400: LD_EXP 8
3404: PPUSH
3405: LD_STRING DShar-intro-a-5
3407: PPUSH
3408: CALL_OW 88
// Say ( Shariff , DShar-intro-a-6 ) ;
3412: LD_EXP 8
3416: PPUSH
3417: LD_STRING DShar-intro-a-6
3419: PPUSH
3420: CALL_OW 88
// Say ( Shariff , DShar-intro-a-7 ) ;
3424: LD_EXP 8
3428: PPUSH
3429: LD_STRING DShar-intro-a-7
3431: PPUSH
3432: CALL_OW 88
// Say ( Shariff , DShar-intro-a-8 ) ;
3436: LD_EXP 8
3440: PPUSH
3441: LD_STRING DShar-intro-a-8
3443: PPUSH
3444: CALL_OW 88
// end else
3448: GO 3675
// if not IbrahimHasEscaped then
3450: LD_EXP 5
3454: NOT
3455: IFFALSE 3531
// begin Say ( Omar , DO-intro-b-1 ) ;
3457: LD_EXP 7
3461: PPUSH
3462: LD_STRING DO-intro-b-1
3464: PPUSH
3465: CALL_OW 88
// Say ( Omar , DO-intro-b-2 ) ;
3469: LD_EXP 7
3473: PPUSH
3474: LD_STRING DO-intro-b-2
3476: PPUSH
3477: CALL_OW 88
// Say ( Heike , DH-intro-b-3 ) ;
3481: LD_EXP 6
3485: PPUSH
3486: LD_STRING DH-intro-b-3
3488: PPUSH
3489: CALL_OW 88
// Say ( Shariff , DShar-intro-b-4 ) ;
3493: LD_EXP 8
3497: PPUSH
3498: LD_STRING DShar-intro-b-4
3500: PPUSH
3501: CALL_OW 88
// Say ( Shariff , DShar-intro-b-5 ) ;
3505: LD_EXP 8
3509: PPUSH
3510: LD_STRING DShar-intro-b-5
3512: PPUSH
3513: CALL_OW 88
// Say ( Shariff , DShar-intro-b-6 ) ;
3517: LD_EXP 8
3521: PPUSH
3522: LD_STRING DShar-intro-b-6
3524: PPUSH
3525: CALL_OW 88
// end else
3529: GO 3675
// begin Say ( Omar , DO-intro-c-1 ) ;
3531: LD_EXP 7
3535: PPUSH
3536: LD_STRING DO-intro-c-1
3538: PPUSH
3539: CALL_OW 88
// Say ( Omar , DO-intro-c-2 ) ;
3543: LD_EXP 7
3547: PPUSH
3548: LD_STRING DO-intro-c-2
3550: PPUSH
3551: CALL_OW 88
// Say ( Heike , DH-intro-c-3 ) ;
3555: LD_EXP 6
3559: PPUSH
3560: LD_STRING DH-intro-c-3
3562: PPUSH
3563: CALL_OW 88
// Say ( Heike , DH-intro-c-4 ) ;
3567: LD_EXP 6
3571: PPUSH
3572: LD_STRING DH-intro-c-4
3574: PPUSH
3575: CALL_OW 88
// Say ( Heike , DH-intro-c-5 ) ;
3579: LD_EXP 6
3583: PPUSH
3584: LD_STRING DH-intro-c-5
3586: PPUSH
3587: CALL_OW 88
// Say ( Omar , DO-intro-c-6 ) ;
3591: LD_EXP 7
3595: PPUSH
3596: LD_STRING DO-intro-c-6
3598: PPUSH
3599: CALL_OW 88
// Say ( Shariff , DShar-intro-c-7 ) ;
3603: LD_EXP 8
3607: PPUSH
3608: LD_STRING DShar-intro-c-7
3610: PPUSH
3611: CALL_OW 88
// Say ( Shariff , DShar-intro-c-8 ) ;
3615: LD_EXP 8
3619: PPUSH
3620: LD_STRING DShar-intro-c-8
3622: PPUSH
3623: CALL_OW 88
// Say ( Shariff , DShar-intro-c-9 ) ;
3627: LD_EXP 8
3631: PPUSH
3632: LD_STRING DShar-intro-c-9
3634: PPUSH
3635: CALL_OW 88
// Say ( Shariff , DShar-intro-c-10 ) ;
3639: LD_EXP 8
3643: PPUSH
3644: LD_STRING DShar-intro-c-10
3646: PPUSH
3647: CALL_OW 88
// Say ( Shariff , DShar-intro-c-11 ) ;
3651: LD_EXP 8
3655: PPUSH
3656: LD_STRING DShar-intro-c-11
3658: PPUSH
3659: CALL_OW 88
// Say ( Shariff , DShar-intro-c-12 ) ;
3663: LD_EXP 8
3667: PPUSH
3668: LD_STRING DShar-intro-c-12
3670: PPUSH
3671: CALL_OW 88
// end ; CreateCratesXY ( 5 , 117 , 7 , true ) ;
3675: LD_INT 5
3677: PPUSH
3678: LD_INT 117
3680: PPUSH
3681: LD_INT 7
3683: PPUSH
3684: LD_INT 1
3686: PPUSH
3687: CALL_OW 54
// ComMoveXY ( eng , 119 , 8 ) ;
3691: LD_VAR 0 8
3695: PPUSH
3696: LD_INT 119
3698: PPUSH
3699: LD_INT 8
3701: PPUSH
3702: CALL_OW 111
// PrepareHuman ( false , 4 , 1 ) ;
3706: LD_INT 0
3708: PPUSH
3709: LD_INT 4
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
3715: CALL_OW 380
// un := CreateHuman ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: CALL_OW 44
3728: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 2 , false ) ;
3729: LD_VAR 0 4
3733: PPUSH
3734: LD_INT 102
3736: PPUSH
3737: LD_INT 52
3739: PPUSH
3740: LD_INT 2
3742: PPUSH
3743: LD_INT 0
3745: PPUSH
3746: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3750: LD_VAR 0 4
3754: PPUSH
3755: LD_INT 108
3757: PPUSH
3758: LD_INT 16
3760: PPUSH
3761: CALL_OW 111
// AddComEnterUnit ( un , arLab1 ) ;
3765: LD_VAR 0 4
3769: PPUSH
3770: LD_INT 96
3772: PPUSH
3773: CALL_OW 180
// for i := 1 to 3 do
3777: LD_ADDR_VAR 0 5
3781: PUSH
3782: DOUBLE
3783: LD_INT 1
3785: DEC
3786: ST_TO_ADDR
3787: LD_INT 3
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3906
// begin uc_nation := 0 ;
3793: LD_ADDR_OWVAR 21
3797: PUSH
3798: LD_INT 0
3800: ST_TO_ADDR
// uc_side := 5 ;
3801: LD_ADDR_OWVAR 20
3805: PUSH
3806: LD_INT 5
3808: ST_TO_ADDR
// hc_class := class_apeman ;
3809: LD_ADDR_OWVAR 28
3813: PUSH
3814: LD_INT 12
3816: ST_TO_ADDR
// hc_gallery :=  ;
3817: LD_ADDR_OWVAR 33
3821: PUSH
3822: LD_STRING 
3824: ST_TO_ADDR
// un := CreateHuman ;
3825: LD_ADDR_VAR 0 4
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 4 , false ) ;
3835: LD_VAR 0 4
3839: PPUSH
3840: LD_INT 102
3842: PPUSH
3843: LD_INT 52
3845: PPUSH
3846: LD_INT 4
3848: PPUSH
3849: LD_INT 0
3851: PPUSH
3852: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3856: LD_VAR 0 4
3860: PPUSH
3861: LD_INT 108
3863: PPUSH
3864: LD_INT 16
3866: PPUSH
3867: CALL_OW 111
// AddComEnterUnit ( un , [ arLab1 , ar_dep_n ] [ i mod 2 + 1 ] ) ;
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_INT 96
3878: PUSH
3879: LD_INT 94
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_VAR 0 5
3890: PUSH
3891: LD_INT 2
3893: MOD
3894: PUSH
3895: LD_INT 1
3897: PLUS
3898: ARRAY
3899: PPUSH
3900: CALL_OW 180
// end ;
3904: GO 3790
3906: POP
3907: POP
// Say ( Shariff , DShar-intro-13 ) ;
3908: LD_EXP 8
3912: PPUSH
3913: LD_STRING DShar-intro-13
3915: PPUSH
3916: CALL_OW 88
// Say ( Shariff , DShar-intro-14 ) ;
3920: LD_EXP 8
3924: PPUSH
3925: LD_STRING DShar-intro-14
3927: PPUSH
3928: CALL_OW 88
// Say ( Shariff , DShar-intro-15 ) ;
3932: LD_EXP 8
3936: PPUSH
3937: LD_STRING DShar-intro-15
3939: PPUSH
3940: CALL_OW 88
// ComMoveXY ( Schulz , 115 , 21 ) ;
3944: LD_EXP 9
3948: PPUSH
3949: LD_INT 115
3951: PPUSH
3952: LD_INT 21
3954: PPUSH
3955: CALL_OW 111
// AddComExitVehicle ( Schulz ) ;
3959: LD_EXP 9
3963: PPUSH
3964: CALL_OW 181
// AddComMoveXY ( Schulz , 118 , 14 ) ;
3968: LD_EXP 9
3972: PPUSH
3973: LD_INT 118
3975: PPUSH
3976: LD_INT 14
3978: PPUSH
3979: CALL_OW 171
// AddComTurnUnit ( Schulz , Shariff ) ;
3983: LD_EXP 9
3987: PPUSH
3988: LD_EXP 8
3992: PPUSH
3993: CALL_OW 179
// AddComMoveXY ( eng , 124 , 9 ) ;
3997: LD_VAR 0 8
4001: PPUSH
4002: LD_INT 124
4004: PPUSH
4005: LD_INT 9
4007: PPUSH
4008: CALL_OW 171
// AddComMoveXY ( eng , 144 , 11 ) ;
4012: LD_VAR 0 8
4016: PPUSH
4017: LD_INT 144
4019: PPUSH
4020: LD_INT 11
4022: PPUSH
4023: CALL_OW 171
// AddComBuild ( eng , b_solar_power , 147 , 11 , 3 ) ;
4027: LD_VAR 0 8
4031: PPUSH
4032: LD_INT 27
4034: PPUSH
4035: LD_INT 147
4037: PPUSH
4038: LD_INT 11
4040: PPUSH
4041: LD_INT 3
4043: PPUSH
4044: CALL_OW 205
// Say ( Shariff , DShar-intro-16 ) ;
4048: LD_EXP 8
4052: PPUSH
4053: LD_STRING DShar-intro-16
4055: PPUSH
4056: CALL_OW 88
// Say ( Shariff , DShar-intro-17 ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_STRING DShar-intro-17
4067: PPUSH
4068: CALL_OW 88
// Say ( Heike , DH-intro-18 ) ;
4072: LD_EXP 6
4076: PPUSH
4077: LD_STRING DH-intro-18
4079: PPUSH
4080: CALL_OW 88
// Say ( Omar , DO-intro-19 ) ;
4084: LD_EXP 7
4088: PPUSH
4089: LD_STRING DO-intro-19
4091: PPUSH
4092: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4096: LD_INT 35
4098: PPUSH
4099: CALL_OW 67
// until IsAt ( Schulz , 118 , 14 ) ;
4103: LD_EXP 9
4107: PPUSH
4108: LD_INT 118
4110: PPUSH
4111: LD_INT 14
4113: PPUSH
4114: CALL_OW 307
4118: IFFALSE 4096
// ComTurnUnit ( Shariff , Schulz ) ;
4120: LD_EXP 8
4124: PPUSH
4125: LD_EXP 9
4129: PPUSH
4130: CALL_OW 119
// Say ( Shariff , DShar-intro-18 ) ;
4134: LD_EXP 8
4138: PPUSH
4139: LD_STRING DShar-intro-18
4141: PPUSH
4142: CALL_OW 88
// AddComEnterUnit ( [ Shariff , Schulz ] , arBar2 ) ;
4146: LD_EXP 8
4150: PUSH
4151: LD_EXP 9
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PPUSH
4160: LD_INT 231
4162: PPUSH
4163: CALL_OW 180
// wait ( 0 0$2 ) ;
4167: LD_INT 70
4169: PPUSH
4170: CALL_OW 67
// Say ( Omar , DO-Flamer-1 ) ;
4174: LD_EXP 7
4178: PPUSH
4179: LD_STRING DO-Flamer-1
4181: PPUSH
4182: CALL_OW 88
// Say ( Heike , DH-Flamer-2 ) ;
4186: LD_EXP 6
4190: PPUSH
4191: LD_STRING DH-Flamer-2
4193: PPUSH
4194: CALL_OW 88
// Say ( Omar , DO-Flamer-3 ) ;
4198: LD_EXP 7
4202: PPUSH
4203: LD_STRING DO-Flamer-3
4205: PPUSH
4206: CALL_OW 88
// Say ( Heike , DH-Flamer-4 ) ;
4210: LD_EXP 6
4214: PPUSH
4215: LD_STRING DH-Flamer-4
4217: PPUSH
4218: CALL_OW 88
// Say ( Omar , DO-Flamer-5 ) ;
4222: LD_EXP 7
4226: PPUSH
4227: LD_STRING DO-Flamer-5
4229: PPUSH
4230: CALL_OW 88
// ComMoveXY ( Heike , 114 , 30 ) ;
4234: LD_EXP 6
4238: PPUSH
4239: LD_INT 114
4241: PPUSH
4242: LD_INT 30
4244: PPUSH
4245: CALL_OW 111
// ComMoveXY ( Omar , 116 , 31 ) ;
4249: LD_EXP 7
4253: PPUSH
4254: LD_INT 116
4256: PPUSH
4257: LD_INT 31
4259: PPUSH
4260: CALL_OW 111
// AddComTurnXY ( [ Heike , Omar ] , 115 , 35 ) ;
4264: LD_EXP 6
4268: PUSH
4269: LD_EXP 7
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PPUSH
4278: LD_INT 115
4280: PPUSH
4281: LD_INT 35
4283: PPUSH
4284: CALL_OW 178
// CenterOnXY ( 114 , 30 ) ;
4288: LD_INT 114
4290: PPUSH
4291: LD_INT 30
4293: PPUSH
4294: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
4298: LD_INT 35
4300: PPUSH
4301: CALL_OW 67
// until IsAt ( Heike , 114 , 30 ) ;
4305: LD_EXP 6
4309: PPUSH
4310: LD_INT 114
4312: PPUSH
4313: LD_INT 30
4315: PPUSH
4316: CALL_OW 307
4320: IFFALSE 4298
// wait ( 0 0$0.3 ) ;
4322: LD_INT 10
4324: PPUSH
4325: CALL_OW 67
// ComEnterUnit ( driver , flame ) ;
4329: LD_VAR 0 6
4333: PPUSH
4334: LD_INT 262
4336: PPUSH
4337: CALL_OW 120
// AddComAttackPlace ( driver , 115 , 41 ) ;
4341: LD_VAR 0 6
4345: PPUSH
4346: LD_INT 115
4348: PPUSH
4349: LD_INT 41
4351: PPUSH
4352: CALL_OW 176
// wait ( 0 0$2 ) ;
4356: LD_INT 70
4358: PPUSH
4359: CALL_OW 67
// Say ( Heike , DH-Flamer-6 ) ;
4363: LD_EXP 6
4367: PPUSH
4368: LD_STRING DH-Flamer-6
4370: PPUSH
4371: CALL_OW 88
// wait ( 0 0$1 ) ;
4375: LD_INT 35
4377: PPUSH
4378: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
4382: LD_EXP 7
4386: PPUSH
4387: LD_EXP 6
4391: PPUSH
4392: CALL_OW 119
// Say ( Omar , DO-Flamer-7 ) ;
4396: LD_EXP 7
4400: PPUSH
4401: LD_STRING DO-Flamer-7
4403: PPUSH
4404: CALL_OW 88
// ChangeMap ( 1 , %_cont ) ;
4408: LD_INT 1
4410: PPUSH
4411: LD_STRING %_cont
4413: PPUSH
4414: CALL_OW 340
// Video ( false ) ;
4418: LD_INT 0
4420: PPUSH
4421: CALL 816 0 1
// end ; end ;
4425: LD_VAR 0 1
4429: RET
// every 0 0$1 trigger GetLives ( flame ) < 1000 do
4430: LD_INT 262
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: LESS
4441: IFFALSE 4457
4443: GO 4445
4445: DISABLE
// begin enable ;
4446: ENABLE
// SetLives ( flame , 777 ) ;
4447: LD_INT 262
4449: PPUSH
4450: LD_INT 777
4452: PPUSH
4453: CALL_OW 234
// end ; end_of_file
4457: END
// on VehicleConstructed ( veh , fac ) do begin AddComMoveXY ( veh , 170 , 92 ) ;
4458: LD_VAR 0 1
4462: PPUSH
4463: LD_INT 170
4465: PPUSH
4466: LD_INT 92
4468: PPUSH
4469: CALL_OW 171
// end ;
4473: PPOPN 2
4475: END
// on DialogueSkipped ( dialogue ) do begin ChangeMap ( 1 , %_cont ) ;
4476: LD_INT 1
4478: PPUSH
4479: LD_STRING %_cont
4481: PPUSH
4482: CALL_OW 340
// end ;
4486: PPOPN 1
4488: END
