// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// PrepareNature ;
   8: CALL 461 0 0
// PrepareArabian ;
  12: CALL 1776 0 0
// Action ;
  16: CALL 2094 0 0
// end ;
  20: END
// export debug , prefix , hasAll , deadCounter , ibrahimHasEscaped ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 03_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 03_
  39: ST_TO_ADDR
// hasAll := LoadVariable ( 03_HasAll , true ) ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 03_HasAll
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// deadCounter := LoadVariable ( 03_DeadCounter , 0 ) ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_STRING 03_DeadCounter
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// ibrahimHasEscaped := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_IbrahimHasEscaped
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// end ; end_of_file
  88: LD_VAR 0 1
  92: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  93: LD_INT 0
  95: PPUSH
  96: PPUSH
// if exist_mode then
  97: LD_VAR 0 2
 101: IFFALSE 126
// unit := CreateCharacter ( prefix & ident ) else
 103: LD_ADDR_VAR 0 5
 107: PUSH
 108: LD_VAR 0 3
 112: PUSH
 113: LD_VAR 0 1
 117: STR
 118: PPUSH
 119: CALL_OW 34
 123: ST_TO_ADDR
 124: GO 141
// unit := NewCharacter ( ident ) ;
 126: LD_ADDR_VAR 0 5
 130: PUSH
 131: LD_VAR 0 1
 135: PPUSH
 136: CALL_OW 25
 140: ST_TO_ADDR
// result := unit ;
 141: LD_ADDR_VAR 0 4
 145: PUSH
 146: LD_VAR 0 5
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 4
 155: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 156: LD_INT 0
 158: PPUSH
// uc_side := side ;
 159: LD_ADDR_OWVAR 20
 163: PUSH
 164: LD_VAR 0 1
 168: ST_TO_ADDR
// uc_nation := nation ;
 169: LD_ADDR_OWVAR 21
 173: PUSH
 174: LD_VAR 0 2
 178: ST_TO_ADDR
// vc_chassis := chassis ;
 179: LD_ADDR_OWVAR 37
 183: PUSH
 184: LD_VAR 0 3
 188: ST_TO_ADDR
// vc_engine := engine ;
 189: LD_ADDR_OWVAR 39
 193: PUSH
 194: LD_VAR 0 4
 198: ST_TO_ADDR
// vc_control := control ;
 199: LD_ADDR_OWVAR 38
 203: PUSH
 204: LD_VAR 0 5
 208: ST_TO_ADDR
// vc_weapon := weapon ;
 209: LD_ADDR_OWVAR 40
 213: PUSH
 214: LD_VAR 0 6
 218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 219: LD_ADDR_OWVAR 41
 223: PUSH
 224: LD_VAR 0 7
 228: ST_TO_ADDR
// result := CreateVehicle ;
 229: LD_ADDR_VAR 0 8
 233: PUSH
 234: CALL_OW 45
 238: ST_TO_ADDR
// end ;
 239: LD_VAR 0 8
 243: RET
// export function SayX ( units , ident ) ; var i ; begin
 244: LD_INT 0
 246: PPUSH
 247: PPUSH
// result := false ;
 248: LD_ADDR_VAR 0 3
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// if not units then
 256: LD_VAR 0 1
 260: NOT
 261: IFFALSE 265
// exit ;
 263: GO 319
// for i in units do
 265: LD_ADDR_VAR 0 4
 269: PUSH
 270: LD_VAR 0 1
 274: PUSH
 275: FOR_IN
 276: IFFALSE 317
// if IsOk ( i ) then
 278: LD_VAR 0 4
 282: PPUSH
 283: CALL_OW 302
 287: IFFALSE 315
// begin Say ( i , ident ) ;
 289: LD_VAR 0 4
 293: PPUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 88
// result := i ;
 303: LD_ADDR_VAR 0 3
 307: PUSH
 308: LD_VAR 0 4
 312: ST_TO_ADDR
// break ;
 313: GO 317
// end ;
 315: GO 275
 317: POP
 318: POP
// end ;
 319: LD_VAR 0 3
 323: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
// InitUc ;
 328: CALL_OW 18
// InitHc ;
 332: CALL_OW 19
// uc_side := 0 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_nation := 0 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// for i = 1 to amount do
 352: LD_ADDR_VAR 0 4
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_VAR 0 2
 366: PUSH
 367: FOR_TO
 368: IFFALSE 450
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 370: LD_ADDR_OWVAR 29
 374: PUSH
 375: LD_INT 9
 377: PPUSH
 378: LD_INT 12
 380: PPUSH
 381: CALL_OW 12
 385: PUSH
 386: LD_INT 9
 388: PPUSH
 389: LD_INT 12
 391: PPUSH
 392: CALL_OW 12
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 401: LD_ADDR_OWVAR 35
 405: PUSH
 406: LD_INT 1
 408: NEG
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL_OW 12
 417: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 418: LD_INT 0
 420: PPUSH
 421: LD_INT 12
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 1
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 367
 450: POP
 451: POP
// InitHc ;
 452: CALL_OW 19
// end ;
 456: LD_VAR 0 3
 460: RET
// export function PrepareNature ; var i ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 465: LD_INT 1
 467: PPUSH
 468: LD_INT 4
 470: PUSH
 471: LD_INT 4
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 324 0 2
// for i := 1 to 3 do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 3
 504: PUSH
 505: FOR_TO
 506: IFFALSE 541
// begin hc_class := 21 ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_INT 21
 515: ST_TO_ADDR
// hc_gallery :=  ;
 516: LD_ADDR_OWVAR 33
 520: PUSH
 521: LD_STRING 
 523: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 524: CALL_OW 44
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL_OW 49
// end ;
 539: GO 505
 541: POP
 542: POP
// for i := 1 to 2 do
 543: LD_ADDR_VAR 0 2
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_INT 2
 555: PUSH
 556: FOR_TO
 557: IFFALSE 592
// begin hc_class := 18 ;
 559: LD_ADDR_OWVAR 28
 563: PUSH
 564: LD_INT 18
 566: ST_TO_ADDR
// hc_gallery :=  ;
 567: LD_ADDR_OWVAR 33
 571: PUSH
 572: LD_STRING 
 574: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 575: CALL_OW 44
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 49
// end ;
 590: GO 556
 592: POP
 593: POP
// for i := 1 to 2 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 2
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 13 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 13
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// end ;
 645: LD_VAR 0 1
 649: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 650: LD_INT 0
 652: PPUSH
 653: PPUSH
 654: PPUSH
// if not observer or not unit then
 655: LD_VAR 0 1
 659: NOT
 660: PUSH
 661: LD_VAR 0 2
 665: NOT
 666: OR
 667: IFFALSE 671
// exit ;
 669: GO 719
// if not See ( GetSide ( observer ) , unit ) then
 671: LD_VAR 0 1
 675: PPUSH
 676: CALL_OW 255
 680: PPUSH
 681: LD_VAR 0 2
 685: PPUSH
 686: CALL_OW 292
 690: NOT
 691: IFFALSE 695
// exit ;
 693: GO 719
// result := GetDistUnits ( observer , unit ) < 12 ;
 695: LD_ADDR_VAR 0 3
 699: PUSH
 700: LD_VAR 0 1
 704: PPUSH
 705: LD_VAR 0 2
 709: PPUSH
 710: CALL_OW 296
 714: PUSH
 715: LD_INT 12
 717: LESS
 718: ST_TO_ADDR
// end ;
 719: LD_VAR 0 3
 723: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 724: LD_INT 0
 726: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 1
 734: ARRAY
 735: PPUSH
 736: LD_VAR 0 2
 740: PUSH
 741: LD_INT 2
 743: ARRAY
 744: PPUSH
 745: CALL_OW 488
 749: PUSH
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: CALL_OW 428
 772: PUSH
 773: LD_INT 0
 775: EQUAL
 776: AND
 777: IFFALSE 811
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 779: LD_VAR 0 1
 783: PPUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: ARRAY
 792: PPUSH
 793: LD_VAR 0 2
 797: PUSH
 798: LD_INT 2
 800: ARRAY
 801: PPUSH
 802: LD_VAR 0 3
 806: PPUSH
 807: CALL_OW 48
// end ;
 811: LD_VAR 0 4
 815: RET
// export function Video ( mode ) ; begin
 816: LD_INT 0
 818: PPUSH
// ingame_video = mode ;
 819: LD_ADDR_OWVAR 52
 823: PUSH
 824: LD_VAR 0 1
 828: ST_TO_ADDR
// interface_hidden = mode ;
 829: LD_ADDR_OWVAR 54
 833: PUSH
 834: LD_VAR 0 1
 838: ST_TO_ADDR
// end ;
 839: LD_VAR 0 2
 843: RET
// export function ReverseArray ( array ) ; var i ; begin
 844: LD_INT 0
 846: PPUSH
 847: PPUSH
// if not array then
 848: LD_VAR 0 1
 852: NOT
 853: IFFALSE 857
// exit ;
 855: GO 915
// result := [ ] ;
 857: LD_ADDR_VAR 0 2
 861: PUSH
 862: EMPTY
 863: ST_TO_ADDR
// for i := 1 to array do
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: DOUBLE
 870: LD_INT 1
 872: DEC
 873: ST_TO_ADDR
 874: LD_VAR 0 1
 878: PUSH
 879: FOR_TO
 880: IFFALSE 913
// result := Insert ( result , 1 , array [ i ] ) ;
 882: LD_ADDR_VAR 0 2
 886: PUSH
 887: LD_VAR 0 2
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_VAR 0 1
 899: PUSH
 900: LD_VAR 0 3
 904: ARRAY
 905: PPUSH
 906: CALL_OW 2
 910: ST_TO_ADDR
 911: GO 879
 913: POP
 914: POP
// end ;
 915: LD_VAR 0 2
 919: RET
// export function ComExit ( unit ) ; begin
 920: LD_INT 0
 922: PPUSH
// result := IsInUnit ( unit ) ;
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: CALL_OW 310
 937: ST_TO_ADDR
// if not result then
 938: LD_VAR 0 2
 942: NOT
 943: IFFALSE 947
// exit ;
 945: GO 982
// if GetType ( result ) = unit_vehicle then
 947: LD_VAR 0 2
 951: PPUSH
 952: CALL_OW 247
 956: PUSH
 957: LD_INT 2
 959: EQUAL
 960: IFFALSE 973
// ComExitVehicle ( unit ) else
 962: LD_VAR 0 1
 966: PPUSH
 967: CALL_OW 121
 971: GO 982
// ComExitBuilding ( unit ) ;
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 122
// end ;
 982: LD_VAR 0 2
 986: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
// if not side or not nation then
 991: LD_VAR 0 1
 995: NOT
 996: PUSH
 997: LD_VAR 0 2
1001: NOT
1002: OR
1003: IFFALSE 1007
// exit ;
1005: GO 1771
// case nation of nation_american :
1007: LD_VAR 0 2
1011: PUSH
1012: LD_INT 1
1014: DOUBLE
1015: EQUAL
1016: IFTRUE 1020
1018: GO 1234
1020: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_INT 35
1028: PUSH
1029: LD_INT 45
1031: PUSH
1032: LD_INT 46
1034: PUSH
1035: LD_INT 47
1037: PUSH
1038: LD_INT 82
1040: PUSH
1041: LD_INT 83
1043: PUSH
1044: LD_INT 84
1046: PUSH
1047: LD_INT 85
1049: PUSH
1050: LD_INT 86
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: LD_INT 6
1061: PUSH
1062: LD_INT 15
1064: PUSH
1065: LD_INT 16
1067: PUSH
1068: LD_INT 7
1070: PUSH
1071: LD_INT 12
1073: PUSH
1074: LD_INT 13
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: LD_INT 14
1082: PUSH
1083: LD_INT 20
1085: PUSH
1086: LD_INT 21
1088: PUSH
1089: LD_INT 22
1091: PUSH
1092: LD_INT 25
1094: PUSH
1095: LD_INT 32
1097: PUSH
1098: LD_INT 27
1100: PUSH
1101: LD_INT 36
1103: PUSH
1104: LD_INT 69
1106: PUSH
1107: LD_INT 39
1109: PUSH
1110: LD_INT 34
1112: PUSH
1113: LD_INT 40
1115: PUSH
1116: LD_INT 48
1118: PUSH
1119: LD_INT 49
1121: PUSH
1122: LD_INT 50
1124: PUSH
1125: LD_INT 51
1127: PUSH
1128: LD_INT 52
1130: PUSH
1131: LD_INT 53
1133: PUSH
1134: LD_INT 54
1136: PUSH
1137: LD_INT 55
1139: PUSH
1140: LD_INT 56
1142: PUSH
1143: LD_INT 57
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: LD_INT 59
1151: PUSH
1152: LD_INT 60
1154: PUSH
1155: LD_INT 61
1157: PUSH
1158: LD_INT 62
1160: PUSH
1161: LD_INT 80
1163: PUSH
1164: LD_INT 82
1166: PUSH
1167: LD_INT 83
1169: PUSH
1170: LD_INT 84
1172: PUSH
1173: LD_INT 85
1175: PUSH
1176: LD_INT 86
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
1232: GO 1695
1234: LD_INT 2
1236: DOUBLE
1237: EQUAL
1238: IFTRUE 1242
1240: GO 1464
1242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1243: LD_ADDR_VAR 0 4
1247: PUSH
1248: LD_INT 35
1250: PUSH
1251: LD_INT 45
1253: PUSH
1254: LD_INT 46
1256: PUSH
1257: LD_INT 47
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 83
1265: PUSH
1266: LD_INT 84
1268: PUSH
1269: LD_INT 85
1271: PUSH
1272: LD_INT 87
1274: PUSH
1275: LD_INT 70
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: LD_INT 11
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 15
1298: PUSH
1299: LD_INT 18
1301: PUSH
1302: LD_INT 7
1304: PUSH
1305: LD_INT 17
1307: PUSH
1308: LD_INT 8
1310: PUSH
1311: LD_INT 20
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 22
1319: PUSH
1320: LD_INT 72
1322: PUSH
1323: LD_INT 26
1325: PUSH
1326: LD_INT 69
1328: PUSH
1329: LD_INT 39
1331: PUSH
1332: LD_INT 40
1334: PUSH
1335: LD_INT 41
1337: PUSH
1338: LD_INT 42
1340: PUSH
1341: LD_INT 43
1343: PUSH
1344: LD_INT 48
1346: PUSH
1347: LD_INT 49
1349: PUSH
1350: LD_INT 50
1352: PUSH
1353: LD_INT 51
1355: PUSH
1356: LD_INT 52
1358: PUSH
1359: LD_INT 53
1361: PUSH
1362: LD_INT 54
1364: PUSH
1365: LD_INT 55
1367: PUSH
1368: LD_INT 56
1370: PUSH
1371: LD_INT 60
1373: PUSH
1374: LD_INT 61
1376: PUSH
1377: LD_INT 62
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: LD_INT 68
1388: PUSH
1389: LD_INT 81
1391: PUSH
1392: LD_INT 82
1394: PUSH
1395: LD_INT 83
1397: PUSH
1398: LD_INT 84
1400: PUSH
1401: LD_INT 85
1403: PUSH
1404: LD_INT 87
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: ST_TO_ADDR
1462: GO 1695
1464: LD_INT 3
1466: DOUBLE
1467: EQUAL
1468: IFTRUE 1472
1470: GO 1694
1472: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1473: LD_ADDR_VAR 0 4
1477: PUSH
1478: LD_INT 46
1480: PUSH
1481: LD_INT 47
1483: PUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 82
1492: PUSH
1493: LD_INT 83
1495: PUSH
1496: LD_INT 84
1498: PUSH
1499: LD_INT 85
1501: PUSH
1502: LD_INT 86
1504: PUSH
1505: LD_INT 11
1507: PUSH
1508: LD_INT 9
1510: PUSH
1511: LD_INT 20
1513: PUSH
1514: LD_INT 19
1516: PUSH
1517: LD_INT 21
1519: PUSH
1520: LD_INT 24
1522: PUSH
1523: LD_INT 22
1525: PUSH
1526: LD_INT 25
1528: PUSH
1529: LD_INT 28
1531: PUSH
1532: LD_INT 29
1534: PUSH
1535: LD_INT 30
1537: PUSH
1538: LD_INT 31
1540: PUSH
1541: LD_INT 37
1543: PUSH
1544: LD_INT 38
1546: PUSH
1547: LD_INT 32
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 33
1555: PUSH
1556: LD_INT 69
1558: PUSH
1559: LD_INT 39
1561: PUSH
1562: LD_INT 34
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 71
1570: PUSH
1571: LD_INT 23
1573: PUSH
1574: LD_INT 44
1576: PUSH
1577: LD_INT 48
1579: PUSH
1580: LD_INT 49
1582: PUSH
1583: LD_INT 50
1585: PUSH
1586: LD_INT 51
1588: PUSH
1589: LD_INT 52
1591: PUSH
1592: LD_INT 53
1594: PUSH
1595: LD_INT 54
1597: PUSH
1598: LD_INT 55
1600: PUSH
1601: LD_INT 56
1603: PUSH
1604: LD_INT 57
1606: PUSH
1607: LD_INT 58
1609: PUSH
1610: LD_INT 59
1612: PUSH
1613: LD_INT 63
1615: PUSH
1616: LD_INT 64
1618: PUSH
1619: LD_INT 65
1621: PUSH
1622: LD_INT 82
1624: PUSH
1625: LD_INT 83
1627: PUSH
1628: LD_INT 84
1630: PUSH
1631: LD_INT 85
1633: PUSH
1634: LD_INT 86
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
1692: GO 1695
1694: POP
// if state > - 1 and state < 3 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 1
1702: NEG
1703: GREATER
1704: PUSH
1705: LD_VAR 0 3
1709: PUSH
1710: LD_INT 3
1712: LESS
1713: AND
1714: IFFALSE 1771
// for i in result do
1716: LD_ADDR_VAR 0 5
1720: PUSH
1721: LD_VAR 0 4
1725: PUSH
1726: FOR_IN
1727: IFFALSE 1769
// if GetTech ( i , side ) <> state then
1729: LD_VAR 0 5
1733: PPUSH
1734: LD_VAR 0 1
1738: PPUSH
1739: CALL_OW 321
1743: PUSH
1744: LD_VAR 0 3
1748: NONEQUAL
1749: IFFALSE 1767
// result := result diff i ;
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: LD_VAR 0 4
1760: PUSH
1761: LD_VAR 0 5
1765: DIFF
1766: ST_TO_ADDR
1767: GO 1726
1769: POP
1770: POP
// end ; end_of_file
1771: LD_VAR 0 4
1775: RET
// export Heike , Omar , Shariff , Schulz , Farmer , Ibrahim ; export function PrepareArabian ; var i , un ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
1780: PPUSH
// SetBName ( ar_dep_n , dammam ) ;
1781: LD_INT 94
1783: PPUSH
1784: LD_STRING dammam
1786: PPUSH
1787: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep_n ) , mat_cans , 10000 ) ;
1791: LD_INT 94
1793: PPUSH
1794: CALL_OW 274
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 10000
1804: PPUSH
1805: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep_n ) , mat_oil , 1000 ) ;
1809: LD_INT 94
1811: PPUSH
1812: CALL_OW 274
1816: PPUSH
1817: LD_INT 2
1819: PPUSH
1820: LD_INT 1000
1822: PPUSH
1823: CALL_OW 277
// uc_side := 2 ;
1827: LD_ADDR_OWVAR 20
1831: PUSH
1832: LD_INT 2
1834: ST_TO_ADDR
// uc_nation := 2 ;
1835: LD_ADDR_OWVAR 21
1839: PUSH
1840: LD_INT 2
1842: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1843: LD_ADDR_EXP 6
1847: PUSH
1848: LD_STRING Heike
1850: PPUSH
1851: LD_EXP 1
1855: NOT
1856: PPUSH
1857: LD_EXP 2
1861: PPUSH
1862: CALL 93 0 3
1866: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1867: LD_ADDR_EXP 11
1871: PUSH
1872: LD_STRING Ibrahim
1874: PPUSH
1875: LD_EXP 1
1879: NOT
1880: PPUSH
1881: LD_EXP 2
1885: PPUSH
1886: CALL 93 0 3
1890: ST_TO_ADDR
// uc_side := 5 ;
1891: LD_ADDR_OWVAR 20
1895: PUSH
1896: LD_INT 5
1898: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1899: LD_ADDR_EXP 10
1903: PUSH
1904: LD_STRING Farmer
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: LD_STRING 
1912: PPUSH
1913: CALL 93 0 3
1917: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1918: LD_ADDR_EXP 7
1922: PUSH
1923: LD_STRING Omar
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: LD_STRING 
1931: PPUSH
1932: CALL 93 0 3
1936: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , false ,  ) ;
1937: LD_ADDR_EXP 9
1941: PUSH
1942: LD_STRING Schulz
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: LD_STRING 
1950: PPUSH
1951: CALL 93 0 3
1955: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1956: LD_ADDR_EXP 8
1960: PUSH
1961: LD_STRING Abdul
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: LD_STRING 
1969: PPUSH
1970: CALL 93 0 3
1974: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1975: LD_ADDR_VAR 0 2
1979: PUSH
1980: LD_INT 21
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PPUSH
1990: CALL_OW 69
1994: PUSH
1995: FOR_IN
1996: IFFALSE 2087
// begin SetSide ( i , 5 ) ;
1998: LD_VAR 0 2
2002: PPUSH
2003: LD_INT 5
2005: PPUSH
2006: CALL_OW 235
// PrepareHuman ( false , 1 , 1 ) ;
2010: LD_INT 0
2012: PPUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: CALL_OW 380
// un := CreateHuman ;
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: CALL_OW 44
2032: ST_TO_ADDR
// if GetBType ( i ) = b_breastwork then
2033: LD_VAR 0 2
2037: PPUSH
2038: CALL_OW 266
2042: PUSH
2043: LD_INT 31
2045: EQUAL
2046: IFFALSE 2071
// SetDir ( un , GetDir ( i ) - 3 ) ;
2048: LD_VAR 0 3
2052: PPUSH
2053: LD_VAR 0 2
2057: PPUSH
2058: CALL_OW 254
2062: PUSH
2063: LD_INT 3
2065: MINUS
2066: PPUSH
2067: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2071: LD_VAR 0 3
2075: PPUSH
2076: LD_VAR 0 2
2080: PPUSH
2081: CALL_OW 52
// end ;
2085: GO 1995
2087: POP
2088: POP
// end ; end_of_file
2089: LD_VAR 0 1
2093: RET
// export function Action ; var killScene , bonus , un , i , driver , mechs , eng ; begin
2094: LD_INT 0
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
// music_nat := 2 ;
2104: LD_ADDR_OWVAR 71
2108: PUSH
2109: LD_INT 2
2111: ST_TO_ADDR
// bonus := 0 ;
2112: LD_ADDR_VAR 0 3
2116: PUSH
2117: LD_INT 0
2119: ST_TO_ADDR
// if hasAll then
2120: LD_EXP 3
2124: IFFALSE 2134
// bonus := 1 ;
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// killScene := deadCounter > [ 3 , 2 , 2 , 2 ] [ Difficulty ] + bonus ;
2134: LD_ADDR_VAR 0 2
2138: PUSH
2139: LD_EXP 4
2143: PUSH
2144: LD_INT 3
2146: PUSH
2147: LD_INT 2
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: LD_INT 2
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_OWVAR 67
2166: ARRAY
2167: PUSH
2168: LD_VAR 0 3
2172: PLUS
2173: GREATER
2174: ST_TO_ADDR
// PlaceSeeing ( 118 , 11 , 2 , - 37963 ) ;
2175: LD_INT 118
2177: PPUSH
2178: LD_INT 11
2180: PPUSH
2181: LD_INT 2
2183: PPUSH
2184: LD_INT 37963
2186: NEG
2187: PPUSH
2188: CALL_OW 330
// if killScene then
2192: LD_VAR 0 2
2196: IFFALSE 2512
// begin RemoveUnit ( flame ) ;
2198: LD_INT 262
2200: PPUSH
2201: CALL_OW 64
// InGameOn ;
2205: CALL_OW 8
// CenterNowOnXY ( 71 , 112 ) ;
2209: LD_INT 71
2211: PPUSH
2212: LD_INT 112
2214: PPUSH
2215: CALL_OW 86
// PlaceUnitXY ( Omar , 70 , 112 , false ) ;
2219: LD_EXP 7
2223: PPUSH
2224: LD_INT 70
2226: PPUSH
2227: LD_INT 112
2229: PPUSH
2230: LD_INT 0
2232: PPUSH
2233: CALL_OW 48
// PlaceUnitXY ( Heike , 72 , 112 , false ) ;
2237: LD_EXP 6
2241: PPUSH
2242: LD_INT 72
2244: PPUSH
2245: LD_INT 112
2247: PPUSH
2248: LD_INT 0
2250: PPUSH
2251: CALL_OW 48
// ComTurnUnit ( Omar , Heike ) ;
2255: LD_EXP 7
2259: PPUSH
2260: LD_EXP 6
2264: PPUSH
2265: CALL_OW 119
// ComTurnUnit ( Heike , Omar ) ;
2269: LD_EXP 6
2273: PPUSH
2274: LD_EXP 7
2278: PPUSH
2279: CALL_OW 119
// SetLives ( Heike , 251 ) ;
2283: LD_EXP 6
2287: PPUSH
2288: LD_INT 251
2290: PPUSH
2291: CALL_OW 234
// SetClass ( Heike , 2 ) ;
2295: LD_EXP 6
2299: PPUSH
2300: LD_INT 2
2302: PPUSH
2303: CALL_OW 336
// ComTurnUnit ( Heike , Omar ) ;
2307: LD_EXP 6
2311: PPUSH
2312: LD_EXP 7
2316: PPUSH
2317: CALL_OW 119
// ComTurnUnit ( Omar , Heike ) ;
2321: LD_EXP 7
2325: PPUSH
2326: LD_EXP 6
2330: PPUSH
2331: CALL_OW 119
// for i := 1 to 3 do
2335: LD_ADDR_VAR 0 5
2339: PUSH
2340: DOUBLE
2341: LD_INT 1
2343: DEC
2344: ST_TO_ADDR
2345: LD_INT 3
2347: PUSH
2348: FOR_TO
2349: IFFALSE 2437
// begin uc_side := 5 ;
2351: LD_ADDR_OWVAR 20
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// uc_nation := 2 ;
2359: LD_ADDR_OWVAR 21
2363: PUSH
2364: LD_INT 2
2366: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2367: LD_INT 0
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_INT 1
2375: PPUSH
2376: CALL_OW 380
// un := CreateHuman ;
2380: LD_ADDR_VAR 0 4
2384: PUSH
2385: CALL_OW 44
2389: ST_TO_ADDR
// PlaceUnitXY ( un , 68 + i , 112 + i , false ) ;
2390: LD_VAR 0 4
2394: PPUSH
2395: LD_INT 68
2397: PUSH
2398: LD_VAR 0 5
2402: PLUS
2403: PPUSH
2404: LD_INT 112
2406: PUSH
2407: LD_VAR 0 5
2411: PLUS
2412: PPUSH
2413: LD_INT 0
2415: PPUSH
2416: CALL_OW 48
// ComTurnXY ( un , 72 , 112 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 72
2427: PPUSH
2428: LD_INT 112
2430: PPUSH
2431: CALL_OW 118
// end ;
2435: GO 2348
2437: POP
2438: POP
// wait ( 0 0$2 ) ;
2439: LD_INT 70
2441: PPUSH
2442: CALL_OW 67
// Say ( Omar , DO-death-1 ) ;
2446: LD_EXP 7
2450: PPUSH
2451: LD_STRING DO-death-1
2453: PPUSH
2454: CALL_OW 88
// Say ( Omar , DO-death-2 ) ;
2458: LD_EXP 7
2462: PPUSH
2463: LD_STRING DO-death-2
2465: PPUSH
2466: CALL_OW 88
// Say ( Omar , DO-death-3 ) ;
2470: LD_EXP 7
2474: PPUSH
2475: LD_STRING DO-death-3
2477: PPUSH
2478: CALL_OW 88
// ComAttackUnit ( Omar , Heike ) ;
2482: LD_EXP 7
2486: PPUSH
2487: LD_EXP 6
2491: PPUSH
2492: CALL_OW 115
// wait ( 0 0$2 ) ;
2496: LD_INT 70
2498: PPUSH
2499: CALL_OW 67
// YouLost ( Penalty ) ;
2503: LD_STRING Penalty
2505: PPUSH
2506: CALL_OW 104
// end else
2510: GO 4429
// begin mechs := [ ] ;
2512: LD_ADDR_VAR 0 7
2516: PUSH
2517: EMPTY
2518: ST_TO_ADDR
// Video ( true ) ;
2519: LD_INT 1
2521: PPUSH
2522: CALL 816 0 1
// CenterNowOnXY ( 124 , 15 ) ;
2526: LD_INT 124
2528: PPUSH
2529: LD_INT 15
2531: PPUSH
2532: CALL_OW 86
// ComTurnXY ( Heike , 123 , 16 ) ;
2536: LD_EXP 6
2540: PPUSH
2541: LD_INT 123
2543: PPUSH
2544: LD_INT 16
2546: PPUSH
2547: CALL_OW 118
// PlaceHumanInUnit ( Shariff , arBar1 ) ;
2551: LD_EXP 8
2555: PPUSH
2556: LD_INT 118
2558: PPUSH
2559: CALL_OW 52
// PlaceHumanInUnit ( Omar , arBar1 ) ;
2563: LD_EXP 7
2567: PPUSH
2568: LD_INT 118
2570: PPUSH
2571: CALL_OW 52
// PlaceUnitXY ( Heike , 124 , 12 , false ) ;
2575: LD_EXP 6
2579: PPUSH
2580: LD_INT 124
2582: PPUSH
2583: LD_INT 12
2585: PPUSH
2586: LD_INT 0
2588: PPUSH
2589: CALL_OW 48
// PrepareHuman ( false , 1 , 1 ) ;
2593: LD_INT 0
2595: PPUSH
2596: LD_INT 1
2598: PPUSH
2599: LD_INT 1
2601: PPUSH
2602: CALL_OW 380
// un := CreateHuman ;
2606: LD_ADDR_VAR 0 4
2610: PUSH
2611: CALL_OW 44
2615: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 18 , false ) ;
2616: LD_VAR 0 4
2620: PPUSH
2621: LD_INT 124
2623: PPUSH
2624: LD_INT 18
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 48
// ComTurnXY ( un , 124 , 16 ) ;
2634: LD_VAR 0 4
2638: PPUSH
2639: LD_INT 124
2641: PPUSH
2642: LD_INT 16
2644: PPUSH
2645: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2649: LD_INT 0
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: CALL_OW 380
// un := CreateHuman ;
2662: LD_ADDR_VAR 0 4
2666: PUSH
2667: CALL_OW 44
2671: ST_TO_ADDR
// PlaceUnitXY ( un , 134 , 13 , false ) ;
2672: LD_VAR 0 4
2676: PPUSH
2677: LD_INT 134
2679: PPUSH
2680: LD_INT 13
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 48
// ComTurnXY ( un , 136 , 15 ) ;
2690: LD_VAR 0 4
2694: PPUSH
2695: LD_INT 136
2697: PPUSH
2698: LD_INT 15
2700: PPUSH
2701: CALL_OW 118
// mechs := Replace ( mechs , 1 , un ) ;
2705: LD_ADDR_VAR 0 7
2709: PUSH
2710: LD_VAR 0 7
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: LD_VAR 0 4
2722: PPUSH
2723: CALL_OW 1
2727: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 3
2733: PPUSH
2734: LD_INT 3
2736: PPUSH
2737: CALL_OW 380
// un := CreateHuman ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: CALL_OW 44
2750: ST_TO_ADDR
// PlaceUnitXY ( un , 136 , 15 , false ) ;
2751: LD_VAR 0 4
2755: PPUSH
2756: LD_INT 136
2758: PPUSH
2759: LD_INT 15
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 48
// ComTurnXY ( un , 134 , 13 ) ;
2769: LD_VAR 0 4
2773: PPUSH
2774: LD_INT 134
2776: PPUSH
2777: LD_INT 13
2779: PPUSH
2780: CALL_OW 118
// mechs := Replace ( mechs , 2 , un ) ;
2784: LD_ADDR_VAR 0 7
2788: PUSH
2789: LD_VAR 0 7
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: LD_VAR 0 4
2801: PPUSH
2802: CALL_OW 1
2806: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2807: LD_INT 0
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: LD_INT 1
2815: PPUSH
2816: CALL_OW 380
// un := CreateHuman ;
2820: LD_ADDR_VAR 0 4
2824: PUSH
2825: CALL_OW 44
2829: ST_TO_ADDR
// PlaceUnitXY ( un , 112 , 36 , false ) ;
2830: LD_VAR 0 4
2834: PPUSH
2835: LD_INT 112
2837: PPUSH
2838: LD_INT 36
2840: PPUSH
2841: LD_INT 0
2843: PPUSH
2844: CALL_OW 48
// ComTurnXY ( un , 115 , 39 ) ;
2848: LD_VAR 0 4
2852: PPUSH
2853: LD_INT 115
2855: PPUSH
2856: LD_INT 39
2858: PPUSH
2859: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2863: LD_INT 0
2865: PPUSH
2866: LD_INT 3
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 380
// driver := CreateHuman ;
2876: LD_ADDR_VAR 0 6
2880: PUSH
2881: CALL_OW 44
2885: ST_TO_ADDR
// PlaceUnitXY ( driver , 115 , 33 , false ) ;
2886: LD_VAR 0 6
2890: PPUSH
2891: LD_INT 115
2893: PPUSH
2894: LD_INT 33
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2904: LD_INT 0
2906: PPUSH
2907: LD_INT 3
2909: PPUSH
2910: LD_INT 1
2912: PPUSH
2913: CALL_OW 380
// un := CreateHuman ;
2917: LD_ADDR_VAR 0 4
2921: PUSH
2922: CALL_OW 44
2926: ST_TO_ADDR
// PlaceUnitXY ( un , 151 , 37 , false ) ;
2927: LD_VAR 0 4
2931: PPUSH
2932: LD_INT 151
2934: PPUSH
2935: LD_INT 37
2937: PPUSH
2938: LD_INT 0
2940: PPUSH
2941: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2945: LD_INT 0
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 1
2953: PPUSH
2954: CALL_OW 380
// un := CreateHuman ;
2958: LD_ADDR_VAR 0 4
2962: PUSH
2963: CALL_OW 44
2967: ST_TO_ADDR
// PlaceUnitXY ( un , 152 , 33 , false ) ;
2968: LD_VAR 0 4
2972: PPUSH
2973: LD_INT 152
2975: PPUSH
2976: LD_INT 33
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL_OW 48
// PrepareHuman ( false , 2 , 2 ) ;
2986: LD_INT 0
2988: PPUSH
2989: LD_INT 2
2991: PPUSH
2992: LD_INT 2
2994: PPUSH
2995: CALL_OW 380
// eng := CreateHuman ;
2999: LD_ADDR_VAR 0 8
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// PlaceUnitXY ( eng , 156 , 13 , false ) ;
3009: LD_VAR 0 8
3013: PPUSH
3014: LD_INT 156
3016: PPUSH
3017: LD_INT 13
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// for i := 1 to 3 do
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: DOUBLE
3033: LD_INT 1
3035: DEC
3036: ST_TO_ADDR
3037: LD_INT 3
3039: PUSH
3040: FOR_TO
3041: IFFALSE 3101
// begin PrepareHuman ( false , 4 , 3 ) ;
3043: LD_INT 0
3045: PPUSH
3046: LD_INT 4
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: CALL_OW 380
// un := CreateHuman ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ arLab1 , arLab2 ] [ i mod 2 + 1 ] ) ;
3066: LD_VAR 0 4
3070: PPUSH
3071: LD_INT 96
3073: PUSH
3074: LD_INT 97
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_VAR 0 5
3085: PUSH
3086: LD_INT 2
3088: MOD
3089: PUSH
3090: LD_INT 1
3092: PLUS
3093: ARRAY
3094: PPUSH
3095: CALL_OW 52
// end ;
3099: GO 3040
3101: POP
3102: POP
// SetSpecResearch ( arLab1 , 100 , false ) ;
3103: LD_INT 96
3105: PPUSH
3106: LD_INT 100
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL_OW 486
// SetSpecResearch ( arLab2 , 100 , false ) ;
3116: LD_INT 97
3118: PPUSH
3119: LD_INT 100
3121: PPUSH
3122: LD_INT 0
3124: PPUSH
3125: CALL_OW 486
// wait ( 0 0$2 ) ;
3129: LD_INT 70
3131: PPUSH
3132: CALL_OW 67
// PlaceHumanInUnit ( Schulz , schulzVeh ) ;
3136: LD_EXP 9
3140: PPUSH
3141: LD_INT 273
3143: PPUSH
3144: CALL_OW 52
// ComExitBuilding ( [ Omar , Shariff ] ) ;
3148: LD_EXP 7
3152: PUSH
3153: LD_EXP 8
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PPUSH
3162: CALL_OW 122
// AddComMoveXY ( Shariff , 123 , 15 ) ;
3166: LD_EXP 8
3170: PPUSH
3171: LD_INT 123
3173: PPUSH
3174: LD_INT 15
3176: PPUSH
3177: CALL_OW 171
// wait ( 0 0$0.3 ) ;
3181: LD_INT 10
3183: PPUSH
3184: CALL_OW 67
// AddComMoveXY ( Omar , 124 , 15 ) ;
3188: LD_EXP 7
3192: PPUSH
3193: LD_INT 124
3195: PPUSH
3196: LD_INT 15
3198: PPUSH
3199: CALL_OW 171
// AddComTurnUnit ( [ Omar , Shariff ] , Heike ) ;
3203: LD_EXP 7
3207: PUSH
3208: LD_EXP 8
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: LD_EXP 6
3221: PPUSH
3222: CALL_OW 179
// wait ( 0 0$1 ) ;
3226: LD_INT 35
3228: PPUSH
3229: CALL_OW 67
// Say ( Shariff , DShar-intro-1 ) ;
3233: LD_EXP 8
3237: PPUSH
3238: LD_STRING DShar-intro-1
3240: PPUSH
3241: CALL_OW 88
// Say ( Omar , DO-intro-1 ) ;
3245: LD_EXP 7
3249: PPUSH
3250: LD_STRING DO-intro-1
3252: PPUSH
3253: CALL_OW 88
// Say ( Omar , DO-intro-2 ) ;
3257: LD_EXP 7
3261: PPUSH
3262: LD_STRING DO-intro-2
3264: PPUSH
3265: CALL_OW 88
// Say ( Heike , DH-intro-1 ) ;
3269: LD_EXP 6
3273: PPUSH
3274: LD_STRING DH-intro-1
3276: PPUSH
3277: CALL_OW 88
// Say ( Omar , DO-intro-3 ) ;
3281: LD_EXP 7
3285: PPUSH
3286: LD_STRING DO-intro-3
3288: PPUSH
3289: CALL_OW 88
// ComEnterUnit ( mechs , arFac ) ;
3293: LD_VAR 0 7
3297: PPUSH
3298: LD_INT 112
3300: PPUSH
3301: CALL_OW 120
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun ) ;
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 13
3310: PPUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 24
3319: PPUSH
3320: CALL_OW 185
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_gun ) ;
3324: LD_INT 112
3326: PPUSH
3327: LD_INT 13
3329: PPUSH
3330: LD_INT 1
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: LD_INT 27
3338: PPUSH
3339: CALL_OW 185
// wait ( 0 0$1 ) ;
3343: LD_INT 35
3345: PPUSH
3346: CALL_OW 67
// if Ibrahim then
3350: LD_EXP 11
3354: IFFALSE 3454
// begin Say ( Omar , DO-intro-a-1 ) ;
3356: LD_EXP 7
3360: PPUSH
3361: LD_STRING DO-intro-a-1
3363: PPUSH
3364: CALL_OW 88
// Say ( Omar , DO-intro-a-2 ) ;
3368: LD_EXP 7
3372: PPUSH
3373: LD_STRING DO-intro-a-2
3375: PPUSH
3376: CALL_OW 88
// Say ( Shariff , DShar-intro-a-3 ) ;
3380: LD_EXP 8
3384: PPUSH
3385: LD_STRING DShar-intro-a-3
3387: PPUSH
3388: CALL_OW 88
// Say ( Shariff , DShar-intro-a-4 ) ;
3392: LD_EXP 8
3396: PPUSH
3397: LD_STRING DShar-intro-a-4
3399: PPUSH
3400: CALL_OW 88
// Say ( Shariff , DShar-intro-a-5 ) ;
3404: LD_EXP 8
3408: PPUSH
3409: LD_STRING DShar-intro-a-5
3411: PPUSH
3412: CALL_OW 88
// Say ( Shariff , DShar-intro-a-6 ) ;
3416: LD_EXP 8
3420: PPUSH
3421: LD_STRING DShar-intro-a-6
3423: PPUSH
3424: CALL_OW 88
// Say ( Shariff , DShar-intro-a-7 ) ;
3428: LD_EXP 8
3432: PPUSH
3433: LD_STRING DShar-intro-a-7
3435: PPUSH
3436: CALL_OW 88
// Say ( Shariff , DShar-intro-a-8 ) ;
3440: LD_EXP 8
3444: PPUSH
3445: LD_STRING DShar-intro-a-8
3447: PPUSH
3448: CALL_OW 88
// end else
3452: GO 3679
// if not IbrahimHasEscaped then
3454: LD_EXP 5
3458: NOT
3459: IFFALSE 3535
// begin Say ( Omar , DO-intro-b-1 ) ;
3461: LD_EXP 7
3465: PPUSH
3466: LD_STRING DO-intro-b-1
3468: PPUSH
3469: CALL_OW 88
// Say ( Omar , DO-intro-b-2 ) ;
3473: LD_EXP 7
3477: PPUSH
3478: LD_STRING DO-intro-b-2
3480: PPUSH
3481: CALL_OW 88
// Say ( Heike , DH-intro-b-3 ) ;
3485: LD_EXP 6
3489: PPUSH
3490: LD_STRING DH-intro-b-3
3492: PPUSH
3493: CALL_OW 88
// Say ( Shariff , DShar-intro-b-4 ) ;
3497: LD_EXP 8
3501: PPUSH
3502: LD_STRING DShar-intro-b-4
3504: PPUSH
3505: CALL_OW 88
// Say ( Shariff , DShar-intro-b-5 ) ;
3509: LD_EXP 8
3513: PPUSH
3514: LD_STRING DShar-intro-b-5
3516: PPUSH
3517: CALL_OW 88
// Say ( Shariff , DShar-intro-b-6 ) ;
3521: LD_EXP 8
3525: PPUSH
3526: LD_STRING DShar-intro-b-6
3528: PPUSH
3529: CALL_OW 88
// end else
3533: GO 3679
// begin Say ( Omar , DO-intro-c-1 ) ;
3535: LD_EXP 7
3539: PPUSH
3540: LD_STRING DO-intro-c-1
3542: PPUSH
3543: CALL_OW 88
// Say ( Omar , DO-intro-c-2 ) ;
3547: LD_EXP 7
3551: PPUSH
3552: LD_STRING DO-intro-c-2
3554: PPUSH
3555: CALL_OW 88
// Say ( Heike , DH-intro-c-3 ) ;
3559: LD_EXP 6
3563: PPUSH
3564: LD_STRING DH-intro-c-3
3566: PPUSH
3567: CALL_OW 88
// Say ( Heike , DH-intro-c-4 ) ;
3571: LD_EXP 6
3575: PPUSH
3576: LD_STRING DH-intro-c-4
3578: PPUSH
3579: CALL_OW 88
// Say ( Heike , DH-intro-c-5 ) ;
3583: LD_EXP 6
3587: PPUSH
3588: LD_STRING DH-intro-c-5
3590: PPUSH
3591: CALL_OW 88
// Say ( Omar , DO-intro-c-6 ) ;
3595: LD_EXP 7
3599: PPUSH
3600: LD_STRING DO-intro-c-6
3602: PPUSH
3603: CALL_OW 88
// Say ( Shariff , DShar-intro-c-7 ) ;
3607: LD_EXP 8
3611: PPUSH
3612: LD_STRING DShar-intro-c-7
3614: PPUSH
3615: CALL_OW 88
// Say ( Shariff , DShar-intro-c-8 ) ;
3619: LD_EXP 8
3623: PPUSH
3624: LD_STRING DShar-intro-c-8
3626: PPUSH
3627: CALL_OW 88
// Say ( Shariff , DShar-intro-c-9 ) ;
3631: LD_EXP 8
3635: PPUSH
3636: LD_STRING DShar-intro-c-9
3638: PPUSH
3639: CALL_OW 88
// Say ( Shariff , DShar-intro-c-10 ) ;
3643: LD_EXP 8
3647: PPUSH
3648: LD_STRING DShar-intro-c-10
3650: PPUSH
3651: CALL_OW 88
// Say ( Shariff , DShar-intro-c-11 ) ;
3655: LD_EXP 8
3659: PPUSH
3660: LD_STRING DShar-intro-c-11
3662: PPUSH
3663: CALL_OW 88
// Say ( Shariff , DShar-intro-c-12 ) ;
3667: LD_EXP 8
3671: PPUSH
3672: LD_STRING DShar-intro-c-12
3674: PPUSH
3675: CALL_OW 88
// end ; CreateCratesXY ( 5 , 117 , 7 , true ) ;
3679: LD_INT 5
3681: PPUSH
3682: LD_INT 117
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: LD_INT 1
3690: PPUSH
3691: CALL_OW 54
// ComMoveXY ( eng , 119 , 8 ) ;
3695: LD_VAR 0 8
3699: PPUSH
3700: LD_INT 119
3702: PPUSH
3703: LD_INT 8
3705: PPUSH
3706: CALL_OW 111
// PrepareHuman ( false , 4 , 1 ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 4
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: CALL_OW 380
// un := CreateHuman ;
3723: LD_ADDR_VAR 0 4
3727: PUSH
3728: CALL_OW 44
3732: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 2 , false ) ;
3733: LD_VAR 0 4
3737: PPUSH
3738: LD_INT 102
3740: PPUSH
3741: LD_INT 52
3743: PPUSH
3744: LD_INT 2
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3754: LD_VAR 0 4
3758: PPUSH
3759: LD_INT 108
3761: PPUSH
3762: LD_INT 16
3764: PPUSH
3765: CALL_OW 111
// AddComEnterUnit ( un , arLab1 ) ;
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_INT 96
3776: PPUSH
3777: CALL_OW 180
// for i := 1 to 3 do
3781: LD_ADDR_VAR 0 5
3785: PUSH
3786: DOUBLE
3787: LD_INT 1
3789: DEC
3790: ST_TO_ADDR
3791: LD_INT 3
3793: PUSH
3794: FOR_TO
3795: IFFALSE 3910
// begin uc_nation := 0 ;
3797: LD_ADDR_OWVAR 21
3801: PUSH
3802: LD_INT 0
3804: ST_TO_ADDR
// uc_side := 5 ;
3805: LD_ADDR_OWVAR 20
3809: PUSH
3810: LD_INT 5
3812: ST_TO_ADDR
// hc_class := class_apeman ;
3813: LD_ADDR_OWVAR 28
3817: PUSH
3818: LD_INT 12
3820: ST_TO_ADDR
// hc_gallery :=  ;
3821: LD_ADDR_OWVAR 33
3825: PUSH
3826: LD_STRING 
3828: ST_TO_ADDR
// un := CreateHuman ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 4 , false ) ;
3839: LD_VAR 0 4
3843: PPUSH
3844: LD_INT 102
3846: PPUSH
3847: LD_INT 52
3849: PPUSH
3850: LD_INT 4
3852: PPUSH
3853: LD_INT 0
3855: PPUSH
3856: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3860: LD_VAR 0 4
3864: PPUSH
3865: LD_INT 108
3867: PPUSH
3868: LD_INT 16
3870: PPUSH
3871: CALL_OW 111
// AddComEnterUnit ( un , [ arLab1 , ar_dep_n ] [ i mod 2 + 1 ] ) ;
3875: LD_VAR 0 4
3879: PPUSH
3880: LD_INT 96
3882: PUSH
3883: LD_INT 94
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_VAR 0 5
3894: PUSH
3895: LD_INT 2
3897: MOD
3898: PUSH
3899: LD_INT 1
3901: PLUS
3902: ARRAY
3903: PPUSH
3904: CALL_OW 180
// end ;
3908: GO 3794
3910: POP
3911: POP
// Say ( Shariff , DShar-intro-13 ) ;
3912: LD_EXP 8
3916: PPUSH
3917: LD_STRING DShar-intro-13
3919: PPUSH
3920: CALL_OW 88
// Say ( Shariff , DShar-intro-14 ) ;
3924: LD_EXP 8
3928: PPUSH
3929: LD_STRING DShar-intro-14
3931: PPUSH
3932: CALL_OW 88
// Say ( Shariff , DShar-intro-15 ) ;
3936: LD_EXP 8
3940: PPUSH
3941: LD_STRING DShar-intro-15
3943: PPUSH
3944: CALL_OW 88
// ComMoveXY ( Schulz , 115 , 21 ) ;
3948: LD_EXP 9
3952: PPUSH
3953: LD_INT 115
3955: PPUSH
3956: LD_INT 21
3958: PPUSH
3959: CALL_OW 111
// AddComExitVehicle ( Schulz ) ;
3963: LD_EXP 9
3967: PPUSH
3968: CALL_OW 181
// AddComMoveXY ( Schulz , 118 , 14 ) ;
3972: LD_EXP 9
3976: PPUSH
3977: LD_INT 118
3979: PPUSH
3980: LD_INT 14
3982: PPUSH
3983: CALL_OW 171
// AddComTurnUnit ( Schulz , Shariff ) ;
3987: LD_EXP 9
3991: PPUSH
3992: LD_EXP 8
3996: PPUSH
3997: CALL_OW 179
// AddComMoveXY ( eng , 124 , 9 ) ;
4001: LD_VAR 0 8
4005: PPUSH
4006: LD_INT 124
4008: PPUSH
4009: LD_INT 9
4011: PPUSH
4012: CALL_OW 171
// AddComMoveXY ( eng , 144 , 11 ) ;
4016: LD_VAR 0 8
4020: PPUSH
4021: LD_INT 144
4023: PPUSH
4024: LD_INT 11
4026: PPUSH
4027: CALL_OW 171
// AddComBuild ( eng , b_solar_power , 147 , 11 , 3 ) ;
4031: LD_VAR 0 8
4035: PPUSH
4036: LD_INT 27
4038: PPUSH
4039: LD_INT 147
4041: PPUSH
4042: LD_INT 11
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 205
// Say ( Shariff , DShar-intro-16 ) ;
4052: LD_EXP 8
4056: PPUSH
4057: LD_STRING DShar-intro-16
4059: PPUSH
4060: CALL_OW 88
// Say ( Shariff , DShar-intro-17 ) ;
4064: LD_EXP 8
4068: PPUSH
4069: LD_STRING DShar-intro-17
4071: PPUSH
4072: CALL_OW 88
// Say ( Heike , DH-intro-18 ) ;
4076: LD_EXP 6
4080: PPUSH
4081: LD_STRING DH-intro-18
4083: PPUSH
4084: CALL_OW 88
// Say ( Omar , DO-intro-19 ) ;
4088: LD_EXP 7
4092: PPUSH
4093: LD_STRING DO-intro-19
4095: PPUSH
4096: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4100: LD_INT 35
4102: PPUSH
4103: CALL_OW 67
// until IsAt ( Schulz , 118 , 14 ) ;
4107: LD_EXP 9
4111: PPUSH
4112: LD_INT 118
4114: PPUSH
4115: LD_INT 14
4117: PPUSH
4118: CALL_OW 307
4122: IFFALSE 4100
// ComTurnUnit ( Shariff , Schulz ) ;
4124: LD_EXP 8
4128: PPUSH
4129: LD_EXP 9
4133: PPUSH
4134: CALL_OW 119
// Say ( Shariff , DShar-intro-18 ) ;
4138: LD_EXP 8
4142: PPUSH
4143: LD_STRING DShar-intro-18
4145: PPUSH
4146: CALL_OW 88
// AddComEnterUnit ( [ Shariff , Schulz ] , arBar2 ) ;
4150: LD_EXP 8
4154: PUSH
4155: LD_EXP 9
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: LD_INT 231
4166: PPUSH
4167: CALL_OW 180
// wait ( 0 0$2 ) ;
4171: LD_INT 70
4173: PPUSH
4174: CALL_OW 67
// Say ( Omar , DO-Flamer-1 ) ;
4178: LD_EXP 7
4182: PPUSH
4183: LD_STRING DO-Flamer-1
4185: PPUSH
4186: CALL_OW 88
// Say ( Heike , DH-Flamer-2 ) ;
4190: LD_EXP 6
4194: PPUSH
4195: LD_STRING DH-Flamer-2
4197: PPUSH
4198: CALL_OW 88
// Say ( Omar , DO-Flamer-3 ) ;
4202: LD_EXP 7
4206: PPUSH
4207: LD_STRING DO-Flamer-3
4209: PPUSH
4210: CALL_OW 88
// Say ( Heike , DH-Flamer-4 ) ;
4214: LD_EXP 6
4218: PPUSH
4219: LD_STRING DH-Flamer-4
4221: PPUSH
4222: CALL_OW 88
// Say ( Omar , DO-Flamer-5 ) ;
4226: LD_EXP 7
4230: PPUSH
4231: LD_STRING DO-Flamer-5
4233: PPUSH
4234: CALL_OW 88
// ComMoveXY ( Heike , 114 , 30 ) ;
4238: LD_EXP 6
4242: PPUSH
4243: LD_INT 114
4245: PPUSH
4246: LD_INT 30
4248: PPUSH
4249: CALL_OW 111
// ComMoveXY ( Omar , 116 , 31 ) ;
4253: LD_EXP 7
4257: PPUSH
4258: LD_INT 116
4260: PPUSH
4261: LD_INT 31
4263: PPUSH
4264: CALL_OW 111
// AddComTurnXY ( [ Heike , Omar ] , 115 , 35 ) ;
4268: LD_EXP 6
4272: PUSH
4273: LD_EXP 7
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: LD_INT 115
4284: PPUSH
4285: LD_INT 35
4287: PPUSH
4288: CALL_OW 178
// CenterOnXY ( 114 , 30 ) ;
4292: LD_INT 114
4294: PPUSH
4295: LD_INT 30
4297: PPUSH
4298: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
4302: LD_INT 35
4304: PPUSH
4305: CALL_OW 67
// until IsAt ( Heike , 114 , 30 ) ;
4309: LD_EXP 6
4313: PPUSH
4314: LD_INT 114
4316: PPUSH
4317: LD_INT 30
4319: PPUSH
4320: CALL_OW 307
4324: IFFALSE 4302
// wait ( 0 0$0.3 ) ;
4326: LD_INT 10
4328: PPUSH
4329: CALL_OW 67
// ComEnterUnit ( driver , flame ) ;
4333: LD_VAR 0 6
4337: PPUSH
4338: LD_INT 262
4340: PPUSH
4341: CALL_OW 120
// AddComAttackPlace ( driver , 115 , 41 ) ;
4345: LD_VAR 0 6
4349: PPUSH
4350: LD_INT 115
4352: PPUSH
4353: LD_INT 41
4355: PPUSH
4356: CALL_OW 176
// wait ( 0 0$2 ) ;
4360: LD_INT 70
4362: PPUSH
4363: CALL_OW 67
// Say ( Heike , DH-Flamer-6 ) ;
4367: LD_EXP 6
4371: PPUSH
4372: LD_STRING DH-Flamer-6
4374: PPUSH
4375: CALL_OW 88
// wait ( 0 0$1 ) ;
4379: LD_INT 35
4381: PPUSH
4382: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
4386: LD_EXP 7
4390: PPUSH
4391: LD_EXP 6
4395: PPUSH
4396: CALL_OW 119
// Say ( Omar , DO-Flamer-7 ) ;
4400: LD_EXP 7
4404: PPUSH
4405: LD_STRING DO-Flamer-7
4407: PPUSH
4408: CALL_OW 88
// ChangeMap ( 1 , %_cont ) ;
4412: LD_INT 1
4414: PPUSH
4415: LD_STRING %_cont
4417: PPUSH
4418: CALL_OW 340
// Video ( false ) ;
4422: LD_INT 0
4424: PPUSH
4425: CALL 816 0 1
// end ; end ;
4429: LD_VAR 0 1
4433: RET
// every 0 0$1 trigger GetLives ( flame ) < 1000 do
4434: LD_INT 262
4436: PPUSH
4437: CALL_OW 256
4441: PUSH
4442: LD_INT 1000
4444: LESS
4445: IFFALSE 4461
4447: GO 4449
4449: DISABLE
// begin enable ;
4450: ENABLE
// SetLives ( flame , 777 ) ;
4451: LD_INT 262
4453: PPUSH
4454: LD_INT 777
4456: PPUSH
4457: CALL_OW 234
// end ; end_of_file
4461: END
// on VehicleConstructed ( veh , fac ) do begin AddComMoveXY ( veh , 170 , 92 ) ;
4462: LD_VAR 0 1
4466: PPUSH
4467: LD_INT 170
4469: PPUSH
4470: LD_INT 92
4472: PPUSH
4473: CALL_OW 171
// end ;
4477: PPOPN 2
4479: END
// on DialogueSkipped ( dialogue ) do begin ChangeMap ( 1 , %_cont ) ;
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING %_cont
4485: PPUSH
4486: CALL_OW 340
// end ;
4490: PPOPN 1
4492: END
