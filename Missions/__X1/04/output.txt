// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// PrepareNature ;
   8: CALL 461 0 0
// PrepareArabian ;
  12: CALL 1776 0 0
// Action ;
  16: CALL 2045 0 0
// end ;
  20: END
// export debug , prefix , hasAll , deadCounter , ibrahimHasEscaped ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 03_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 03_
  39: ST_TO_ADDR
// hasAll := LoadVariable ( 03_HasAll , true ) ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 03_HasAll
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// deadCounter := LoadVariable ( 03_DeadCounter , 0 ) ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_STRING 03_DeadCounter
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// ibrahimHasEscaped := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_IbrahimHasEscaped
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// end ; end_of_file
  88: LD_VAR 0 1
  92: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  93: LD_INT 0
  95: PPUSH
  96: PPUSH
// if exist_mode then
  97: LD_VAR 0 2
 101: IFFALSE 126
// unit := CreateCharacter ( prefix & ident ) else
 103: LD_ADDR_VAR 0 5
 107: PUSH
 108: LD_VAR 0 3
 112: PUSH
 113: LD_VAR 0 1
 117: STR
 118: PPUSH
 119: CALL_OW 34
 123: ST_TO_ADDR
 124: GO 141
// unit := NewCharacter ( ident ) ;
 126: LD_ADDR_VAR 0 5
 130: PUSH
 131: LD_VAR 0 1
 135: PPUSH
 136: CALL_OW 25
 140: ST_TO_ADDR
// result := unit ;
 141: LD_ADDR_VAR 0 4
 145: PUSH
 146: LD_VAR 0 5
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 4
 155: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 156: LD_INT 0
 158: PPUSH
// uc_side := side ;
 159: LD_ADDR_OWVAR 20
 163: PUSH
 164: LD_VAR 0 1
 168: ST_TO_ADDR
// uc_nation := nation ;
 169: LD_ADDR_OWVAR 21
 173: PUSH
 174: LD_VAR 0 2
 178: ST_TO_ADDR
// vc_chassis := chassis ;
 179: LD_ADDR_OWVAR 37
 183: PUSH
 184: LD_VAR 0 3
 188: ST_TO_ADDR
// vc_engine := engine ;
 189: LD_ADDR_OWVAR 39
 193: PUSH
 194: LD_VAR 0 4
 198: ST_TO_ADDR
// vc_control := control ;
 199: LD_ADDR_OWVAR 38
 203: PUSH
 204: LD_VAR 0 5
 208: ST_TO_ADDR
// vc_weapon := weapon ;
 209: LD_ADDR_OWVAR 40
 213: PUSH
 214: LD_VAR 0 6
 218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 219: LD_ADDR_OWVAR 41
 223: PUSH
 224: LD_VAR 0 7
 228: ST_TO_ADDR
// result := CreateVehicle ;
 229: LD_ADDR_VAR 0 8
 233: PUSH
 234: CALL_OW 45
 238: ST_TO_ADDR
// end ;
 239: LD_VAR 0 8
 243: RET
// export function SayX ( units , ident ) ; var i ; begin
 244: LD_INT 0
 246: PPUSH
 247: PPUSH
// result := false ;
 248: LD_ADDR_VAR 0 3
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// if not units then
 256: LD_VAR 0 1
 260: NOT
 261: IFFALSE 265
// exit ;
 263: GO 319
// for i in units do
 265: LD_ADDR_VAR 0 4
 269: PUSH
 270: LD_VAR 0 1
 274: PUSH
 275: FOR_IN
 276: IFFALSE 317
// if IsOk ( i ) then
 278: LD_VAR 0 4
 282: PPUSH
 283: CALL_OW 302
 287: IFFALSE 315
// begin Say ( i , ident ) ;
 289: LD_VAR 0 4
 293: PPUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 88
// result := i ;
 303: LD_ADDR_VAR 0 3
 307: PUSH
 308: LD_VAR 0 4
 312: ST_TO_ADDR
// break ;
 313: GO 317
// end ;
 315: GO 275
 317: POP
 318: POP
// end ;
 319: LD_VAR 0 3
 323: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
// InitUc ;
 328: CALL_OW 18
// InitHc ;
 332: CALL_OW 19
// uc_side := 0 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_nation := 0 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// for i = 1 to amount do
 352: LD_ADDR_VAR 0 4
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_VAR 0 2
 366: PUSH
 367: FOR_TO
 368: IFFALSE 450
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 370: LD_ADDR_OWVAR 29
 374: PUSH
 375: LD_INT 9
 377: PPUSH
 378: LD_INT 12
 380: PPUSH
 381: CALL_OW 12
 385: PUSH
 386: LD_INT 9
 388: PPUSH
 389: LD_INT 12
 391: PPUSH
 392: CALL_OW 12
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 401: LD_ADDR_OWVAR 35
 405: PUSH
 406: LD_INT 1
 408: NEG
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL_OW 12
 417: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 418: LD_INT 0
 420: PPUSH
 421: LD_INT 12
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 1
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 367
 450: POP
 451: POP
// InitHc ;
 452: CALL_OW 19
// end ;
 456: LD_VAR 0 3
 460: RET
// export function PrepareNature ; var i ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 465: LD_INT 1
 467: PPUSH
 468: LD_INT 4
 470: PUSH
 471: LD_INT 4
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 324 0 2
// for i := 1 to 3 do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 3
 504: PUSH
 505: FOR_TO
 506: IFFALSE 541
// begin hc_class := 21 ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_INT 21
 515: ST_TO_ADDR
// hc_gallery :=  ;
 516: LD_ADDR_OWVAR 33
 520: PUSH
 521: LD_STRING 
 523: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 524: CALL_OW 44
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL_OW 49
// end ;
 539: GO 505
 541: POP
 542: POP
// for i := 1 to 2 do
 543: LD_ADDR_VAR 0 2
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_INT 2
 555: PUSH
 556: FOR_TO
 557: IFFALSE 592
// begin hc_class := 18 ;
 559: LD_ADDR_OWVAR 28
 563: PUSH
 564: LD_INT 18
 566: ST_TO_ADDR
// hc_gallery :=  ;
 567: LD_ADDR_OWVAR 33
 571: PUSH
 572: LD_STRING 
 574: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 575: CALL_OW 44
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 49
// end ;
 590: GO 556
 592: POP
 593: POP
// for i := 1 to 2 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 2
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 13 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 13
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// end ;
 645: LD_VAR 0 1
 649: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 650: LD_INT 0
 652: PPUSH
 653: PPUSH
 654: PPUSH
// if not observer or not unit then
 655: LD_VAR 0 1
 659: NOT
 660: PUSH
 661: LD_VAR 0 2
 665: NOT
 666: OR
 667: IFFALSE 671
// exit ;
 669: GO 719
// if not See ( GetSide ( observer ) , unit ) then
 671: LD_VAR 0 1
 675: PPUSH
 676: CALL_OW 255
 680: PPUSH
 681: LD_VAR 0 2
 685: PPUSH
 686: CALL_OW 292
 690: NOT
 691: IFFALSE 695
// exit ;
 693: GO 719
// result := GetDistUnits ( observer , unit ) < 12 ;
 695: LD_ADDR_VAR 0 3
 699: PUSH
 700: LD_VAR 0 1
 704: PPUSH
 705: LD_VAR 0 2
 709: PPUSH
 710: CALL_OW 296
 714: PUSH
 715: LD_INT 12
 717: LESS
 718: ST_TO_ADDR
// end ;
 719: LD_VAR 0 3
 723: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 724: LD_INT 0
 726: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 1
 734: ARRAY
 735: PPUSH
 736: LD_VAR 0 2
 740: PUSH
 741: LD_INT 2
 743: ARRAY
 744: PPUSH
 745: CALL_OW 488
 749: PUSH
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: CALL_OW 428
 772: PUSH
 773: LD_INT 0
 775: EQUAL
 776: AND
 777: IFFALSE 811
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 779: LD_VAR 0 1
 783: PPUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: ARRAY
 792: PPUSH
 793: LD_VAR 0 2
 797: PUSH
 798: LD_INT 2
 800: ARRAY
 801: PPUSH
 802: LD_VAR 0 3
 806: PPUSH
 807: CALL_OW 48
// end ;
 811: LD_VAR 0 4
 815: RET
// export function Video ( mode ) ; begin
 816: LD_INT 0
 818: PPUSH
// ingame_video = mode ;
 819: LD_ADDR_OWVAR 52
 823: PUSH
 824: LD_VAR 0 1
 828: ST_TO_ADDR
// interface_hidden = mode ;
 829: LD_ADDR_OWVAR 54
 833: PUSH
 834: LD_VAR 0 1
 838: ST_TO_ADDR
// end ;
 839: LD_VAR 0 2
 843: RET
// export function ReverseArray ( array ) ; var i ; begin
 844: LD_INT 0
 846: PPUSH
 847: PPUSH
// if not array then
 848: LD_VAR 0 1
 852: NOT
 853: IFFALSE 857
// exit ;
 855: GO 915
// result := [ ] ;
 857: LD_ADDR_VAR 0 2
 861: PUSH
 862: EMPTY
 863: ST_TO_ADDR
// for i := 1 to array do
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: DOUBLE
 870: LD_INT 1
 872: DEC
 873: ST_TO_ADDR
 874: LD_VAR 0 1
 878: PUSH
 879: FOR_TO
 880: IFFALSE 913
// result := Insert ( result , 1 , array [ i ] ) ;
 882: LD_ADDR_VAR 0 2
 886: PUSH
 887: LD_VAR 0 2
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_VAR 0 1
 899: PUSH
 900: LD_VAR 0 3
 904: ARRAY
 905: PPUSH
 906: CALL_OW 2
 910: ST_TO_ADDR
 911: GO 879
 913: POP
 914: POP
// end ;
 915: LD_VAR 0 2
 919: RET
// export function ComExit ( unit ) ; begin
 920: LD_INT 0
 922: PPUSH
// result := IsInUnit ( unit ) ;
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: CALL_OW 310
 937: ST_TO_ADDR
// if not result then
 938: LD_VAR 0 2
 942: NOT
 943: IFFALSE 947
// exit ;
 945: GO 982
// if GetType ( result ) = unit_vehicle then
 947: LD_VAR 0 2
 951: PPUSH
 952: CALL_OW 247
 956: PUSH
 957: LD_INT 2
 959: EQUAL
 960: IFFALSE 973
// ComExitVehicle ( unit ) else
 962: LD_VAR 0 1
 966: PPUSH
 967: CALL_OW 121
 971: GO 982
// ComExitBuilding ( unit ) ;
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 122
// end ;
 982: LD_VAR 0 2
 986: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
// if not side or not nation then
 991: LD_VAR 0 1
 995: NOT
 996: PUSH
 997: LD_VAR 0 2
1001: NOT
1002: OR
1003: IFFALSE 1007
// exit ;
1005: GO 1771
// case nation of nation_american :
1007: LD_VAR 0 2
1011: PUSH
1012: LD_INT 1
1014: DOUBLE
1015: EQUAL
1016: IFTRUE 1020
1018: GO 1234
1020: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_INT 35
1028: PUSH
1029: LD_INT 45
1031: PUSH
1032: LD_INT 46
1034: PUSH
1035: LD_INT 47
1037: PUSH
1038: LD_INT 82
1040: PUSH
1041: LD_INT 83
1043: PUSH
1044: LD_INT 84
1046: PUSH
1047: LD_INT 85
1049: PUSH
1050: LD_INT 86
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: LD_INT 6
1061: PUSH
1062: LD_INT 15
1064: PUSH
1065: LD_INT 16
1067: PUSH
1068: LD_INT 7
1070: PUSH
1071: LD_INT 12
1073: PUSH
1074: LD_INT 13
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: LD_INT 14
1082: PUSH
1083: LD_INT 20
1085: PUSH
1086: LD_INT 21
1088: PUSH
1089: LD_INT 22
1091: PUSH
1092: LD_INT 25
1094: PUSH
1095: LD_INT 32
1097: PUSH
1098: LD_INT 27
1100: PUSH
1101: LD_INT 36
1103: PUSH
1104: LD_INT 69
1106: PUSH
1107: LD_INT 39
1109: PUSH
1110: LD_INT 34
1112: PUSH
1113: LD_INT 40
1115: PUSH
1116: LD_INT 48
1118: PUSH
1119: LD_INT 49
1121: PUSH
1122: LD_INT 50
1124: PUSH
1125: LD_INT 51
1127: PUSH
1128: LD_INT 52
1130: PUSH
1131: LD_INT 53
1133: PUSH
1134: LD_INT 54
1136: PUSH
1137: LD_INT 55
1139: PUSH
1140: LD_INT 56
1142: PUSH
1143: LD_INT 57
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: LD_INT 59
1151: PUSH
1152: LD_INT 60
1154: PUSH
1155: LD_INT 61
1157: PUSH
1158: LD_INT 62
1160: PUSH
1161: LD_INT 80
1163: PUSH
1164: LD_INT 82
1166: PUSH
1167: LD_INT 83
1169: PUSH
1170: LD_INT 84
1172: PUSH
1173: LD_INT 85
1175: PUSH
1176: LD_INT 86
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
1232: GO 1695
1234: LD_INT 2
1236: DOUBLE
1237: EQUAL
1238: IFTRUE 1242
1240: GO 1464
1242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1243: LD_ADDR_VAR 0 4
1247: PUSH
1248: LD_INT 35
1250: PUSH
1251: LD_INT 45
1253: PUSH
1254: LD_INT 46
1256: PUSH
1257: LD_INT 47
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 83
1265: PUSH
1266: LD_INT 84
1268: PUSH
1269: LD_INT 85
1271: PUSH
1272: LD_INT 87
1274: PUSH
1275: LD_INT 70
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: LD_INT 11
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 15
1298: PUSH
1299: LD_INT 18
1301: PUSH
1302: LD_INT 7
1304: PUSH
1305: LD_INT 17
1307: PUSH
1308: LD_INT 8
1310: PUSH
1311: LD_INT 20
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 22
1319: PUSH
1320: LD_INT 72
1322: PUSH
1323: LD_INT 26
1325: PUSH
1326: LD_INT 69
1328: PUSH
1329: LD_INT 39
1331: PUSH
1332: LD_INT 40
1334: PUSH
1335: LD_INT 41
1337: PUSH
1338: LD_INT 42
1340: PUSH
1341: LD_INT 43
1343: PUSH
1344: LD_INT 48
1346: PUSH
1347: LD_INT 49
1349: PUSH
1350: LD_INT 50
1352: PUSH
1353: LD_INT 51
1355: PUSH
1356: LD_INT 52
1358: PUSH
1359: LD_INT 53
1361: PUSH
1362: LD_INT 54
1364: PUSH
1365: LD_INT 55
1367: PUSH
1368: LD_INT 56
1370: PUSH
1371: LD_INT 60
1373: PUSH
1374: LD_INT 61
1376: PUSH
1377: LD_INT 62
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: LD_INT 68
1388: PUSH
1389: LD_INT 81
1391: PUSH
1392: LD_INT 82
1394: PUSH
1395: LD_INT 83
1397: PUSH
1398: LD_INT 84
1400: PUSH
1401: LD_INT 85
1403: PUSH
1404: LD_INT 87
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: ST_TO_ADDR
1462: GO 1695
1464: LD_INT 3
1466: DOUBLE
1467: EQUAL
1468: IFTRUE 1472
1470: GO 1694
1472: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1473: LD_ADDR_VAR 0 4
1477: PUSH
1478: LD_INT 46
1480: PUSH
1481: LD_INT 47
1483: PUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 82
1492: PUSH
1493: LD_INT 83
1495: PUSH
1496: LD_INT 84
1498: PUSH
1499: LD_INT 85
1501: PUSH
1502: LD_INT 86
1504: PUSH
1505: LD_INT 11
1507: PUSH
1508: LD_INT 9
1510: PUSH
1511: LD_INT 20
1513: PUSH
1514: LD_INT 19
1516: PUSH
1517: LD_INT 21
1519: PUSH
1520: LD_INT 24
1522: PUSH
1523: LD_INT 22
1525: PUSH
1526: LD_INT 25
1528: PUSH
1529: LD_INT 28
1531: PUSH
1532: LD_INT 29
1534: PUSH
1535: LD_INT 30
1537: PUSH
1538: LD_INT 31
1540: PUSH
1541: LD_INT 37
1543: PUSH
1544: LD_INT 38
1546: PUSH
1547: LD_INT 32
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 33
1555: PUSH
1556: LD_INT 69
1558: PUSH
1559: LD_INT 39
1561: PUSH
1562: LD_INT 34
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 71
1570: PUSH
1571: LD_INT 23
1573: PUSH
1574: LD_INT 44
1576: PUSH
1577: LD_INT 48
1579: PUSH
1580: LD_INT 49
1582: PUSH
1583: LD_INT 50
1585: PUSH
1586: LD_INT 51
1588: PUSH
1589: LD_INT 52
1591: PUSH
1592: LD_INT 53
1594: PUSH
1595: LD_INT 54
1597: PUSH
1598: LD_INT 55
1600: PUSH
1601: LD_INT 56
1603: PUSH
1604: LD_INT 57
1606: PUSH
1607: LD_INT 58
1609: PUSH
1610: LD_INT 59
1612: PUSH
1613: LD_INT 63
1615: PUSH
1616: LD_INT 64
1618: PUSH
1619: LD_INT 65
1621: PUSH
1622: LD_INT 82
1624: PUSH
1625: LD_INT 83
1627: PUSH
1628: LD_INT 84
1630: PUSH
1631: LD_INT 85
1633: PUSH
1634: LD_INT 86
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
1692: GO 1695
1694: POP
// if state > - 1 and state < 3 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 1
1702: NEG
1703: GREATER
1704: PUSH
1705: LD_VAR 0 3
1709: PUSH
1710: LD_INT 3
1712: LESS
1713: AND
1714: IFFALSE 1771
// for i in result do
1716: LD_ADDR_VAR 0 5
1720: PUSH
1721: LD_VAR 0 4
1725: PUSH
1726: FOR_IN
1727: IFFALSE 1769
// if GetTech ( i , side ) <> state then
1729: LD_VAR 0 5
1733: PPUSH
1734: LD_VAR 0 1
1738: PPUSH
1739: CALL_OW 321
1743: PUSH
1744: LD_VAR 0 3
1748: NONEQUAL
1749: IFFALSE 1767
// result := result diff i ;
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: LD_VAR 0 4
1760: PUSH
1761: LD_VAR 0 5
1765: DIFF
1766: ST_TO_ADDR
1767: GO 1726
1769: POP
1770: POP
// end ; end_of_file
1771: LD_VAR 0 4
1775: RET
// export Heike , Omar , Shariff , Schulz , Farmer , Ibrahim ; export function PrepareArabian ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SetBName ( ar_dep_n , dammam ) ;
1780: LD_INT 94
1782: PPUSH
1783: LD_STRING dammam
1785: PPUSH
1786: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep_n ) , mat_cans , 10000 ) ;
1790: LD_INT 94
1792: PPUSH
1793: CALL_OW 274
1797: PPUSH
1798: LD_INT 1
1800: PPUSH
1801: LD_INT 10000
1803: PPUSH
1804: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep_n ) , mat_oil , 1000 ) ;
1808: LD_INT 94
1810: PPUSH
1811: CALL_OW 274
1815: PPUSH
1816: LD_INT 2
1818: PPUSH
1819: LD_INT 1000
1821: PPUSH
1822: CALL_OW 277
// uc_side := 2 ;
1826: LD_ADDR_OWVAR 20
1830: PUSH
1831: LD_INT 2
1833: ST_TO_ADDR
// uc_nation := 2 ;
1834: LD_ADDR_OWVAR 21
1838: PUSH
1839: LD_INT 2
1841: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1842: LD_ADDR_EXP 6
1846: PUSH
1847: LD_STRING Heike
1849: PPUSH
1850: LD_EXP 1
1854: NOT
1855: PPUSH
1856: LD_EXP 2
1860: PPUSH
1861: CALL 93 0 3
1865: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1866: LD_ADDR_EXP 11
1870: PUSH
1871: LD_STRING Ibrahim
1873: PPUSH
1874: LD_EXP 1
1878: NOT
1879: PPUSH
1880: LD_EXP 2
1884: PPUSH
1885: CALL 93 0 3
1889: ST_TO_ADDR
// uc_side := 5 ;
1890: LD_ADDR_OWVAR 20
1894: PUSH
1895: LD_INT 5
1897: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1898: LD_ADDR_EXP 10
1902: PUSH
1903: LD_STRING Farmer
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: LD_STRING 
1911: PPUSH
1912: CALL 93 0 3
1916: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1917: LD_ADDR_EXP 7
1921: PUSH
1922: LD_STRING Omar
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_STRING 
1930: PPUSH
1931: CALL 93 0 3
1935: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , false ,  ) ;
1936: LD_ADDR_EXP 9
1940: PUSH
1941: LD_STRING Schulz
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: LD_STRING 
1949: PPUSH
1950: CALL 93 0 3
1954: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1955: LD_ADDR_EXP 8
1959: PUSH
1960: LD_STRING Abdul
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: LD_STRING 
1968: PPUSH
1969: CALL 93 0 3
1973: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_INT 21
1981: PUSH
1982: LD_INT 3
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: PUSH
1994: FOR_IN
1995: IFFALSE 2038
// begin SetSide ( i , 5 ) ;
1997: LD_VAR 0 2
2001: PPUSH
2002: LD_INT 5
2004: PPUSH
2005: CALL_OW 235
// PrepareHuman ( false , 1 , 1 ) ;
2009: LD_INT 0
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2022: CALL_OW 44
2026: PPUSH
2027: LD_VAR 0 2
2031: PPUSH
2032: CALL_OW 52
// end ;
2036: GO 1994
2038: POP
2039: POP
// end ; end_of_file
2040: LD_VAR 0 1
2044: RET
// export function Action ; var killScene , bonus , un , i , driver , mechs , eng ; begin
2045: LD_INT 0
2047: PPUSH
2048: PPUSH
2049: PPUSH
2050: PPUSH
2051: PPUSH
2052: PPUSH
2053: PPUSH
2054: PPUSH
// bonus := 0 ;
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: LD_INT 0
2062: ST_TO_ADDR
// if hasAll then
2063: LD_EXP 3
2067: IFFALSE 2077
// bonus := 1 ;
2069: LD_ADDR_VAR 0 3
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// killScene := deadCounter > [ 3 , 2 , 2 ] [ Difficulty ] + bonus ;
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: LD_EXP 4
2086: PUSH
2087: LD_INT 3
2089: PUSH
2090: LD_INT 2
2092: PUSH
2093: LD_INT 2
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_OWVAR 67
2105: ARRAY
2106: PUSH
2107: LD_VAR 0 3
2111: PLUS
2112: GREATER
2113: ST_TO_ADDR
// PlaceSeeing ( 118 , 11 , 2 , - 37963 ) ;
2114: LD_INT 118
2116: PPUSH
2117: LD_INT 11
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 37963
2125: NEG
2126: PPUSH
2127: CALL_OW 330
// if killScene then
2131: LD_VAR 0 2
2135: IFFALSE 2439
// begin RemoveUnit ( flame ) ;
2137: LD_INT 262
2139: PPUSH
2140: CALL_OW 64
// InGameOn ;
2144: CALL_OW 8
// CenterNowOnXY ( 81 , 4 ) ;
2148: LD_INT 81
2150: PPUSH
2151: LD_INT 4
2153: PPUSH
2154: CALL_OW 86
// PlaceUnitXY ( Omar , 84 , 6 , false ) ;
2158: LD_EXP 7
2162: PPUSH
2163: LD_INT 84
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 48
// PlaceUnitXY ( Heike , 81 , 4 , false ) ;
2176: LD_EXP 6
2180: PPUSH
2181: LD_INT 81
2183: PPUSH
2184: LD_INT 4
2186: PPUSH
2187: LD_INT 0
2189: PPUSH
2190: CALL_OW 48
// SetLives ( Heike , 251 ) ;
2194: LD_EXP 6
2198: PPUSH
2199: LD_INT 251
2201: PPUSH
2202: CALL_OW 234
// SetClass ( Heike , 2 ) ;
2206: LD_EXP 6
2210: PPUSH
2211: LD_INT 2
2213: PPUSH
2214: CALL_OW 336
// ComTurnUnit ( Heike , Omar ) ;
2218: LD_EXP 6
2222: PPUSH
2223: LD_EXP 7
2227: PPUSH
2228: CALL_OW 119
// ComTurnUnit ( Omar , Heike ) ;
2232: LD_EXP 7
2236: PPUSH
2237: LD_EXP 6
2241: PPUSH
2242: CALL_OW 119
// for i := 1 to 3 do
2246: LD_ADDR_VAR 0 5
2250: PUSH
2251: DOUBLE
2252: LD_INT 1
2254: DEC
2255: ST_TO_ADDR
2256: LD_INT 3
2258: PUSH
2259: FOR_TO
2260: IFFALSE 2364
// begin uc_side := 5 ;
2262: LD_ADDR_OWVAR 20
2266: PUSH
2267: LD_INT 5
2269: ST_TO_ADDR
// uc_nation := 2 ;
2270: LD_ADDR_OWVAR 21
2274: PUSH
2275: LD_INT 2
2277: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2278: LD_INT 0
2280: PPUSH
2281: LD_INT 1
2283: PPUSH
2284: LD_INT 1
2286: PPUSH
2287: CALL_OW 380
// un := CreateHuman ;
2291: LD_ADDR_VAR 0 4
2295: PUSH
2296: CALL_OW 44
2300: ST_TO_ADDR
// PlaceUnitXY ( un , 86 + 1 * ( i - 1 ) , 3 + 2 * ( i - 1 ) , false ) ;
2301: LD_VAR 0 4
2305: PPUSH
2306: LD_INT 86
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: LD_VAR 0 5
2316: PUSH
2317: LD_INT 1
2319: MINUS
2320: MUL
2321: PLUS
2322: PPUSH
2323: LD_INT 3
2325: PUSH
2326: LD_INT 2
2328: PUSH
2329: LD_VAR 0 5
2333: PUSH
2334: LD_INT 1
2336: MINUS
2337: MUL
2338: PLUS
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 48
// ComTurnXY ( un , 81 , 4 ) ;
2347: LD_VAR 0 4
2351: PPUSH
2352: LD_INT 81
2354: PPUSH
2355: LD_INT 4
2357: PPUSH
2358: CALL_OW 118
// end ;
2362: GO 2259
2364: POP
2365: POP
// wait ( 0 0$2 ) ;
2366: LD_INT 70
2368: PPUSH
2369: CALL_OW 67
// Say ( Omar , DO-death-1 ) ;
2373: LD_EXP 7
2377: PPUSH
2378: LD_STRING DO-death-1
2380: PPUSH
2381: CALL_OW 88
// Say ( Omar , DO-death-2 ) ;
2385: LD_EXP 7
2389: PPUSH
2390: LD_STRING DO-death-2
2392: PPUSH
2393: CALL_OW 88
// Say ( Omar , DO-death-3 ) ;
2397: LD_EXP 7
2401: PPUSH
2402: LD_STRING DO-death-3
2404: PPUSH
2405: CALL_OW 88
// ComAttackUnit ( Omar , Heike ) ;
2409: LD_EXP 7
2413: PPUSH
2414: LD_EXP 6
2418: PPUSH
2419: CALL_OW 115
// wait ( 0 0$2 ) ;
2423: LD_INT 70
2425: PPUSH
2426: CALL_OW 67
// YouLost ( Penalty ) ;
2430: LD_STRING Penalty
2432: PPUSH
2433: CALL_OW 104
// end else
2437: GO 4356
// begin mechs := [ ] ;
2439: LD_ADDR_VAR 0 7
2443: PUSH
2444: EMPTY
2445: ST_TO_ADDR
// Video ( true ) ;
2446: LD_INT 1
2448: PPUSH
2449: CALL 816 0 1
// CenterNowOnXY ( 124 , 15 ) ;
2453: LD_INT 124
2455: PPUSH
2456: LD_INT 15
2458: PPUSH
2459: CALL_OW 86
// ComTurnXY ( Heike , 123 , 16 ) ;
2463: LD_EXP 6
2467: PPUSH
2468: LD_INT 123
2470: PPUSH
2471: LD_INT 16
2473: PPUSH
2474: CALL_OW 118
// PlaceHumanInUnit ( Shariff , arBar1 ) ;
2478: LD_EXP 8
2482: PPUSH
2483: LD_INT 118
2485: PPUSH
2486: CALL_OW 52
// PlaceHumanInUnit ( Omar , arBar1 ) ;
2490: LD_EXP 7
2494: PPUSH
2495: LD_INT 118
2497: PPUSH
2498: CALL_OW 52
// PlaceUnitXY ( Heike , 124 , 12 , false ) ;
2502: LD_EXP 6
2506: PPUSH
2507: LD_INT 124
2509: PPUSH
2510: LD_INT 12
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// PrepareHuman ( false , 1 , 1 ) ;
2520: LD_INT 0
2522: PPUSH
2523: LD_INT 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 380
// un := CreateHuman ;
2533: LD_ADDR_VAR 0 4
2537: PUSH
2538: CALL_OW 44
2542: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 18 , false ) ;
2543: LD_VAR 0 4
2547: PPUSH
2548: LD_INT 124
2550: PPUSH
2551: LD_INT 18
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComTurnXY ( un , 124 , 16 ) ;
2561: LD_VAR 0 4
2565: PPUSH
2566: LD_INT 124
2568: PPUSH
2569: LD_INT 16
2571: PPUSH
2572: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2576: LD_INT 0
2578: PPUSH
2579: LD_INT 3
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 380
// un := CreateHuman ;
2589: LD_ADDR_VAR 0 4
2593: PUSH
2594: CALL_OW 44
2598: ST_TO_ADDR
// PlaceUnitXY ( un , 134 , 13 , false ) ;
2599: LD_VAR 0 4
2603: PPUSH
2604: LD_INT 134
2606: PPUSH
2607: LD_INT 13
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 48
// ComTurnXY ( un , 136 , 15 ) ;
2617: LD_VAR 0 4
2621: PPUSH
2622: LD_INT 136
2624: PPUSH
2625: LD_INT 15
2627: PPUSH
2628: CALL_OW 118
// mechs := Replace ( mechs , 1 , un ) ;
2632: LD_ADDR_VAR 0 7
2636: PUSH
2637: LD_VAR 0 7
2641: PPUSH
2642: LD_INT 1
2644: PPUSH
2645: LD_VAR 0 4
2649: PPUSH
2650: CALL_OW 1
2654: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2655: LD_INT 0
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: LD_INT 3
2663: PPUSH
2664: CALL_OW 380
// un := CreateHuman ;
2668: LD_ADDR_VAR 0 4
2672: PUSH
2673: CALL_OW 44
2677: ST_TO_ADDR
// PlaceUnitXY ( un , 136 , 15 , false ) ;
2678: LD_VAR 0 4
2682: PPUSH
2683: LD_INT 136
2685: PPUSH
2686: LD_INT 15
2688: PPUSH
2689: LD_INT 0
2691: PPUSH
2692: CALL_OW 48
// ComTurnXY ( un , 134 , 13 ) ;
2696: LD_VAR 0 4
2700: PPUSH
2701: LD_INT 134
2703: PPUSH
2704: LD_INT 13
2706: PPUSH
2707: CALL_OW 118
// mechs := Replace ( mechs , 2 , un ) ;
2711: LD_ADDR_VAR 0 7
2715: PUSH
2716: LD_VAR 0 7
2720: PPUSH
2721: LD_INT 2
2723: PPUSH
2724: LD_VAR 0 4
2728: PPUSH
2729: CALL_OW 1
2733: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2734: LD_INT 0
2736: PPUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 1
2742: PPUSH
2743: CALL_OW 380
// un := CreateHuman ;
2747: LD_ADDR_VAR 0 4
2751: PUSH
2752: CALL_OW 44
2756: ST_TO_ADDR
// PlaceUnitXY ( un , 112 , 36 , false ) ;
2757: LD_VAR 0 4
2761: PPUSH
2762: LD_INT 112
2764: PPUSH
2765: LD_INT 36
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL_OW 48
// ComTurnXY ( un , 115 , 39 ) ;
2775: LD_VAR 0 4
2779: PPUSH
2780: LD_INT 115
2782: PPUSH
2783: LD_INT 39
2785: PPUSH
2786: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2790: LD_INT 0
2792: PPUSH
2793: LD_INT 3
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 380
// driver := CreateHuman ;
2803: LD_ADDR_VAR 0 6
2807: PUSH
2808: CALL_OW 44
2812: ST_TO_ADDR
// PlaceUnitXY ( driver , 115 , 33 , false ) ;
2813: LD_VAR 0 6
2817: PPUSH
2818: LD_INT 115
2820: PPUSH
2821: LD_INT 33
2823: PPUSH
2824: LD_INT 0
2826: PPUSH
2827: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2831: LD_INT 0
2833: PPUSH
2834: LD_INT 3
2836: PPUSH
2837: LD_INT 1
2839: PPUSH
2840: CALL_OW 380
// un := CreateHuman ;
2844: LD_ADDR_VAR 0 4
2848: PUSH
2849: CALL_OW 44
2853: ST_TO_ADDR
// PlaceUnitXY ( un , 151 , 37 , false ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 151
2861: PPUSH
2862: LD_INT 37
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 48
// PrepareHuman ( false , 3 , 1 ) ;
2872: LD_INT 0
2874: PPUSH
2875: LD_INT 3
2877: PPUSH
2878: LD_INT 1
2880: PPUSH
2881: CALL_OW 380
// un := CreateHuman ;
2885: LD_ADDR_VAR 0 4
2889: PUSH
2890: CALL_OW 44
2894: ST_TO_ADDR
// PlaceUnitXY ( un , 152 , 33 , false ) ;
2895: LD_VAR 0 4
2899: PPUSH
2900: LD_INT 152
2902: PPUSH
2903: LD_INT 33
2905: PPUSH
2906: LD_INT 0
2908: PPUSH
2909: CALL_OW 48
// PrepareHuman ( false , 2 , 2 ) ;
2913: LD_INT 0
2915: PPUSH
2916: LD_INT 2
2918: PPUSH
2919: LD_INT 2
2921: PPUSH
2922: CALL_OW 380
// eng := CreateHuman ;
2926: LD_ADDR_VAR 0 8
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// PlaceUnitXY ( eng , 156 , 13 , false ) ;
2936: LD_VAR 0 8
2940: PPUSH
2941: LD_INT 156
2943: PPUSH
2944: LD_INT 13
2946: PPUSH
2947: LD_INT 0
2949: PPUSH
2950: CALL_OW 48
// for i := 1 to 3 do
2954: LD_ADDR_VAR 0 5
2958: PUSH
2959: DOUBLE
2960: LD_INT 1
2962: DEC
2963: ST_TO_ADDR
2964: LD_INT 3
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3028
// begin PrepareHuman ( false , 4 , 3 ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 4
2975: PPUSH
2976: LD_INT 3
2978: PPUSH
2979: CALL_OW 380
// un := CreateHuman ;
2983: LD_ADDR_VAR 0 4
2987: PUSH
2988: CALL_OW 44
2992: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ arLab1 , arLab2 ] [ i mod 2 + 1 ] ) ;
2993: LD_VAR 0 4
2997: PPUSH
2998: LD_INT 96
3000: PUSH
3001: LD_INT 97
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_VAR 0 5
3012: PUSH
3013: LD_INT 2
3015: MOD
3016: PUSH
3017: LD_INT 1
3019: PLUS
3020: ARRAY
3021: PPUSH
3022: CALL_OW 52
// end ;
3026: GO 2967
3028: POP
3029: POP
// SetSpecResearch ( arLab1 , 100 , false ) ;
3030: LD_INT 96
3032: PPUSH
3033: LD_INT 100
3035: PPUSH
3036: LD_INT 0
3038: PPUSH
3039: CALL_OW 486
// SetSpecResearch ( arLab2 , 100 , false ) ;
3043: LD_INT 97
3045: PPUSH
3046: LD_INT 100
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 486
// wait ( 0 0$2 ) ;
3056: LD_INT 70
3058: PPUSH
3059: CALL_OW 67
// PlaceHumanInUnit ( Schulz , schulzVeh ) ;
3063: LD_EXP 9
3067: PPUSH
3068: LD_INT 273
3070: PPUSH
3071: CALL_OW 52
// ComExitBuilding ( [ Omar , Shariff ] ) ;
3075: LD_EXP 7
3079: PUSH
3080: LD_EXP 8
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PPUSH
3089: CALL_OW 122
// AddComMoveXY ( Shariff , 123 , 15 ) ;
3093: LD_EXP 8
3097: PPUSH
3098: LD_INT 123
3100: PPUSH
3101: LD_INT 15
3103: PPUSH
3104: CALL_OW 171
// wait ( 0 0$0.3 ) ;
3108: LD_INT 10
3110: PPUSH
3111: CALL_OW 67
// AddComMoveXY ( Omar , 124 , 15 ) ;
3115: LD_EXP 7
3119: PPUSH
3120: LD_INT 124
3122: PPUSH
3123: LD_INT 15
3125: PPUSH
3126: CALL_OW 171
// AddComTurnUnit ( [ Omar , Shariff ] , Heike ) ;
3130: LD_EXP 7
3134: PUSH
3135: LD_EXP 8
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: LD_EXP 6
3148: PPUSH
3149: CALL_OW 179
// wait ( 0 0$1 ) ;
3153: LD_INT 35
3155: PPUSH
3156: CALL_OW 67
// Say ( Shariff , DShar-intro-1 ) ;
3160: LD_EXP 8
3164: PPUSH
3165: LD_STRING DShar-intro-1
3167: PPUSH
3168: CALL_OW 88
// Say ( Omar , DO-intro-1 ) ;
3172: LD_EXP 7
3176: PPUSH
3177: LD_STRING DO-intro-1
3179: PPUSH
3180: CALL_OW 88
// Say ( Omar , DO-intro-2 ) ;
3184: LD_EXP 7
3188: PPUSH
3189: LD_STRING DO-intro-2
3191: PPUSH
3192: CALL_OW 88
// Say ( Heike , DH-intro-1 ) ;
3196: LD_EXP 6
3200: PPUSH
3201: LD_STRING DH-intro-1
3203: PPUSH
3204: CALL_OW 88
// Say ( Omar , DO-intro-3 ) ;
3208: LD_EXP 7
3212: PPUSH
3213: LD_STRING DO-intro-3
3215: PPUSH
3216: CALL_OW 88
// ComEnterUnit ( mechs , arFac ) ;
3220: LD_VAR 0 7
3224: PPUSH
3225: LD_INT 112
3227: PPUSH
3228: CALL_OW 120
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun ) ;
3232: LD_INT 112
3234: PPUSH
3235: LD_INT 13
3237: PPUSH
3238: LD_INT 1
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: LD_INT 24
3246: PPUSH
3247: CALL_OW 185
// AddComConstruct ( arFac , ar_medium_trike , engine_combustion , control_manual , ar_gun ) ;
3251: LD_INT 112
3253: PPUSH
3254: LD_INT 13
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 1
3262: PPUSH
3263: LD_INT 27
3265: PPUSH
3266: CALL_OW 185
// wait ( 0 0$1 ) ;
3270: LD_INT 35
3272: PPUSH
3273: CALL_OW 67
// if Ibrahim then
3277: LD_EXP 11
3281: IFFALSE 3381
// begin Say ( Omar , DO-intro-a-1 ) ;
3283: LD_EXP 7
3287: PPUSH
3288: LD_STRING DO-intro-a-1
3290: PPUSH
3291: CALL_OW 88
// Say ( Omar , DO-intro-a-2 ) ;
3295: LD_EXP 7
3299: PPUSH
3300: LD_STRING DO-intro-a-2
3302: PPUSH
3303: CALL_OW 88
// Say ( Shariff , DShar-intro-a-3 ) ;
3307: LD_EXP 8
3311: PPUSH
3312: LD_STRING DShar-intro-a-3
3314: PPUSH
3315: CALL_OW 88
// Say ( Shariff , DShar-intro-a-4 ) ;
3319: LD_EXP 8
3323: PPUSH
3324: LD_STRING DShar-intro-a-4
3326: PPUSH
3327: CALL_OW 88
// Say ( Shariff , DShar-intro-a-5 ) ;
3331: LD_EXP 8
3335: PPUSH
3336: LD_STRING DShar-intro-a-5
3338: PPUSH
3339: CALL_OW 88
// Say ( Shariff , DShar-intro-a-6 ) ;
3343: LD_EXP 8
3347: PPUSH
3348: LD_STRING DShar-intro-a-6
3350: PPUSH
3351: CALL_OW 88
// Say ( Shariff , DShar-intro-a-7 ) ;
3355: LD_EXP 8
3359: PPUSH
3360: LD_STRING DShar-intro-a-7
3362: PPUSH
3363: CALL_OW 88
// Say ( Shariff , DShar-intro-a-8 ) ;
3367: LD_EXP 8
3371: PPUSH
3372: LD_STRING DShar-intro-a-8
3374: PPUSH
3375: CALL_OW 88
// end else
3379: GO 3606
// if not IbrahimHasEscaped then
3381: LD_EXP 5
3385: NOT
3386: IFFALSE 3462
// begin Say ( Omar , DO-intro-b-1 ) ;
3388: LD_EXP 7
3392: PPUSH
3393: LD_STRING DO-intro-b-1
3395: PPUSH
3396: CALL_OW 88
// Say ( Omar , DO-intro-b-2 ) ;
3400: LD_EXP 7
3404: PPUSH
3405: LD_STRING DO-intro-b-2
3407: PPUSH
3408: CALL_OW 88
// Say ( Heike , DH-intro-b-3 ) ;
3412: LD_EXP 6
3416: PPUSH
3417: LD_STRING DH-intro-b-3
3419: PPUSH
3420: CALL_OW 88
// Say ( Shariff , DShar-intro-b-4 ) ;
3424: LD_EXP 8
3428: PPUSH
3429: LD_STRING DShar-intro-b-4
3431: PPUSH
3432: CALL_OW 88
// Say ( Shariff , DShar-intro-b-5 ) ;
3436: LD_EXP 8
3440: PPUSH
3441: LD_STRING DShar-intro-b-5
3443: PPUSH
3444: CALL_OW 88
// Say ( Shariff , DShar-intro-b-6 ) ;
3448: LD_EXP 8
3452: PPUSH
3453: LD_STRING DShar-intro-b-6
3455: PPUSH
3456: CALL_OW 88
// end else
3460: GO 3606
// begin Say ( Omar , DO-intro-c-1 ) ;
3462: LD_EXP 7
3466: PPUSH
3467: LD_STRING DO-intro-c-1
3469: PPUSH
3470: CALL_OW 88
// Say ( Omar , DO-intro-c-2 ) ;
3474: LD_EXP 7
3478: PPUSH
3479: LD_STRING DO-intro-c-2
3481: PPUSH
3482: CALL_OW 88
// Say ( Heike , DH-intro-c-3 ) ;
3486: LD_EXP 6
3490: PPUSH
3491: LD_STRING DH-intro-c-3
3493: PPUSH
3494: CALL_OW 88
// Say ( Heike , DH-intro-c-4 ) ;
3498: LD_EXP 6
3502: PPUSH
3503: LD_STRING DH-intro-c-4
3505: PPUSH
3506: CALL_OW 88
// Say ( Heike , DH-intro-c-5 ) ;
3510: LD_EXP 6
3514: PPUSH
3515: LD_STRING DH-intro-c-5
3517: PPUSH
3518: CALL_OW 88
// Say ( Omar , DO-intro-c-6 ) ;
3522: LD_EXP 7
3526: PPUSH
3527: LD_STRING DO-intro-c-6
3529: PPUSH
3530: CALL_OW 88
// Say ( Shariff , DShar-intro-c-7 ) ;
3534: LD_EXP 8
3538: PPUSH
3539: LD_STRING DShar-intro-c-7
3541: PPUSH
3542: CALL_OW 88
// Say ( Shariff , DShar-intro-c-8 ) ;
3546: LD_EXP 8
3550: PPUSH
3551: LD_STRING DShar-intro-c-8
3553: PPUSH
3554: CALL_OW 88
// Say ( Shariff , DShar-intro-c-9 ) ;
3558: LD_EXP 8
3562: PPUSH
3563: LD_STRING DShar-intro-c-9
3565: PPUSH
3566: CALL_OW 88
// Say ( Shariff , DShar-intro-c-10 ) ;
3570: LD_EXP 8
3574: PPUSH
3575: LD_STRING DShar-intro-c-10
3577: PPUSH
3578: CALL_OW 88
// Say ( Shariff , DShar-intro-c-11 ) ;
3582: LD_EXP 8
3586: PPUSH
3587: LD_STRING DShar-intro-c-11
3589: PPUSH
3590: CALL_OW 88
// Say ( Shariff , DShar-intro-c-12 ) ;
3594: LD_EXP 8
3598: PPUSH
3599: LD_STRING DShar-intro-c-12
3601: PPUSH
3602: CALL_OW 88
// end ; CreateCratesXY ( 5 , 117 , 7 , true ) ;
3606: LD_INT 5
3608: PPUSH
3609: LD_INT 117
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: LD_INT 1
3617: PPUSH
3618: CALL_OW 54
// ComMoveXY ( eng , 119 , 8 ) ;
3622: LD_VAR 0 8
3626: PPUSH
3627: LD_INT 119
3629: PPUSH
3630: LD_INT 8
3632: PPUSH
3633: CALL_OW 111
// PrepareHuman ( false , 4 , 1 ) ;
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: LD_INT 1
3645: PPUSH
3646: CALL_OW 380
// un := CreateHuman ;
3650: LD_ADDR_VAR 0 4
3654: PUSH
3655: CALL_OW 44
3659: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 2 , false ) ;
3660: LD_VAR 0 4
3664: PPUSH
3665: LD_INT 102
3667: PPUSH
3668: LD_INT 52
3670: PPUSH
3671: LD_INT 2
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3681: LD_VAR 0 4
3685: PPUSH
3686: LD_INT 108
3688: PPUSH
3689: LD_INT 16
3691: PPUSH
3692: CALL_OW 111
// AddComEnterUnit ( un , arLab1 ) ;
3696: LD_VAR 0 4
3700: PPUSH
3701: LD_INT 96
3703: PPUSH
3704: CALL_OW 180
// for i := 1 to 3 do
3708: LD_ADDR_VAR 0 5
3712: PUSH
3713: DOUBLE
3714: LD_INT 1
3716: DEC
3717: ST_TO_ADDR
3718: LD_INT 3
3720: PUSH
3721: FOR_TO
3722: IFFALSE 3837
// begin uc_nation := 0 ;
3724: LD_ADDR_OWVAR 21
3728: PUSH
3729: LD_INT 0
3731: ST_TO_ADDR
// uc_side := 5 ;
3732: LD_ADDR_OWVAR 20
3736: PUSH
3737: LD_INT 5
3739: ST_TO_ADDR
// hc_class := class_apeman ;
3740: LD_ADDR_OWVAR 28
3744: PUSH
3745: LD_INT 12
3747: ST_TO_ADDR
// hc_gallery :=  ;
3748: LD_ADDR_OWVAR 33
3752: PUSH
3753: LD_STRING 
3755: ST_TO_ADDR
// un := CreateHuman ;
3756: LD_ADDR_VAR 0 4
3760: PUSH
3761: CALL_OW 44
3765: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 52 , 4 , false ) ;
3766: LD_VAR 0 4
3770: PPUSH
3771: LD_INT 102
3773: PPUSH
3774: LD_INT 52
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 50
// ComMoveXY ( un , 108 , 16 ) ;
3787: LD_VAR 0 4
3791: PPUSH
3792: LD_INT 108
3794: PPUSH
3795: LD_INT 16
3797: PPUSH
3798: CALL_OW 111
// AddComEnterUnit ( un , [ arLab1 , ar_dep_n ] [ i mod 2 + 1 ] ) ;
3802: LD_VAR 0 4
3806: PPUSH
3807: LD_INT 96
3809: PUSH
3810: LD_INT 94
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: PUSH
3817: LD_VAR 0 5
3821: PUSH
3822: LD_INT 2
3824: MOD
3825: PUSH
3826: LD_INT 1
3828: PLUS
3829: ARRAY
3830: PPUSH
3831: CALL_OW 180
// end ;
3835: GO 3721
3837: POP
3838: POP
// Say ( Shariff , DShar-intro-13 ) ;
3839: LD_EXP 8
3843: PPUSH
3844: LD_STRING DShar-intro-13
3846: PPUSH
3847: CALL_OW 88
// Say ( Shariff , DShar-intro-14 ) ;
3851: LD_EXP 8
3855: PPUSH
3856: LD_STRING DShar-intro-14
3858: PPUSH
3859: CALL_OW 88
// Say ( Shariff , DShar-intro-15 ) ;
3863: LD_EXP 8
3867: PPUSH
3868: LD_STRING DShar-intro-15
3870: PPUSH
3871: CALL_OW 88
// ComMoveXY ( Schulz , 115 , 21 ) ;
3875: LD_EXP 9
3879: PPUSH
3880: LD_INT 115
3882: PPUSH
3883: LD_INT 21
3885: PPUSH
3886: CALL_OW 111
// AddComExitVehicle ( Schulz ) ;
3890: LD_EXP 9
3894: PPUSH
3895: CALL_OW 181
// AddComMoveXY ( Schulz , 118 , 14 ) ;
3899: LD_EXP 9
3903: PPUSH
3904: LD_INT 118
3906: PPUSH
3907: LD_INT 14
3909: PPUSH
3910: CALL_OW 171
// AddComTurnUnit ( Schulz , Shariff ) ;
3914: LD_EXP 9
3918: PPUSH
3919: LD_EXP 8
3923: PPUSH
3924: CALL_OW 179
// AddComMoveXY ( eng , 124 , 9 ) ;
3928: LD_VAR 0 8
3932: PPUSH
3933: LD_INT 124
3935: PPUSH
3936: LD_INT 9
3938: PPUSH
3939: CALL_OW 171
// AddComMoveXY ( eng , 144 , 11 ) ;
3943: LD_VAR 0 8
3947: PPUSH
3948: LD_INT 144
3950: PPUSH
3951: LD_INT 11
3953: PPUSH
3954: CALL_OW 171
// AddComBuild ( eng , b_solar_power , 147 , 11 , 3 ) ;
3958: LD_VAR 0 8
3962: PPUSH
3963: LD_INT 27
3965: PPUSH
3966: LD_INT 147
3968: PPUSH
3969: LD_INT 11
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 205
// Say ( Shariff , DShar-intro-16 ) ;
3979: LD_EXP 8
3983: PPUSH
3984: LD_STRING DShar-intro-16
3986: PPUSH
3987: CALL_OW 88
// Say ( Shariff , DShar-intro-17 ) ;
3991: LD_EXP 8
3995: PPUSH
3996: LD_STRING DShar-intro-17
3998: PPUSH
3999: CALL_OW 88
// Say ( Heike , DH-intro-18 ) ;
4003: LD_EXP 6
4007: PPUSH
4008: LD_STRING DH-intro-18
4010: PPUSH
4011: CALL_OW 88
// Say ( Omar , DO-intro-19 ) ;
4015: LD_EXP 7
4019: PPUSH
4020: LD_STRING DO-intro-19
4022: PPUSH
4023: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4027: LD_INT 35
4029: PPUSH
4030: CALL_OW 67
// until IsAt ( Schulz , 118 , 14 ) ;
4034: LD_EXP 9
4038: PPUSH
4039: LD_INT 118
4041: PPUSH
4042: LD_INT 14
4044: PPUSH
4045: CALL_OW 307
4049: IFFALSE 4027
// ComTurnUnit ( Shariff , Schulz ) ;
4051: LD_EXP 8
4055: PPUSH
4056: LD_EXP 9
4060: PPUSH
4061: CALL_OW 119
// Say ( Shariff , DShar-intro-18 ) ;
4065: LD_EXP 8
4069: PPUSH
4070: LD_STRING DShar-intro-18
4072: PPUSH
4073: CALL_OW 88
// AddComEnterUnit ( [ Shariff , Schulz ] , arBar2 ) ;
4077: LD_EXP 8
4081: PUSH
4082: LD_EXP 9
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PPUSH
4091: LD_INT 231
4093: PPUSH
4094: CALL_OW 180
// wait ( 0 0$2 ) ;
4098: LD_INT 70
4100: PPUSH
4101: CALL_OW 67
// Say ( Omar , DO-Flamer-1 ) ;
4105: LD_EXP 7
4109: PPUSH
4110: LD_STRING DO-Flamer-1
4112: PPUSH
4113: CALL_OW 88
// Say ( Heike , DH-Flamer-2 ) ;
4117: LD_EXP 6
4121: PPUSH
4122: LD_STRING DH-Flamer-2
4124: PPUSH
4125: CALL_OW 88
// Say ( Omar , DO-Flamer-3 ) ;
4129: LD_EXP 7
4133: PPUSH
4134: LD_STRING DO-Flamer-3
4136: PPUSH
4137: CALL_OW 88
// Say ( Heike , DH-Flamer-4 ) ;
4141: LD_EXP 6
4145: PPUSH
4146: LD_STRING DH-Flamer-4
4148: PPUSH
4149: CALL_OW 88
// Say ( Omar , DO-Flamer-5 ) ;
4153: LD_EXP 7
4157: PPUSH
4158: LD_STRING DO-Flamer-5
4160: PPUSH
4161: CALL_OW 88
// ComMoveXY ( Heike , 114 , 30 ) ;
4165: LD_EXP 6
4169: PPUSH
4170: LD_INT 114
4172: PPUSH
4173: LD_INT 30
4175: PPUSH
4176: CALL_OW 111
// ComMoveXY ( Omar , 116 , 31 ) ;
4180: LD_EXP 7
4184: PPUSH
4185: LD_INT 116
4187: PPUSH
4188: LD_INT 31
4190: PPUSH
4191: CALL_OW 111
// AddComTurnXY ( [ Heike , Omar ] , 115 , 35 ) ;
4195: LD_EXP 6
4199: PUSH
4200: LD_EXP 7
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PPUSH
4209: LD_INT 115
4211: PPUSH
4212: LD_INT 35
4214: PPUSH
4215: CALL_OW 178
// CenterOnXY ( 114 , 30 ) ;
4219: LD_INT 114
4221: PPUSH
4222: LD_INT 30
4224: PPUSH
4225: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// until IsAt ( Heike , 114 , 30 ) ;
4236: LD_EXP 6
4240: PPUSH
4241: LD_INT 114
4243: PPUSH
4244: LD_INT 30
4246: PPUSH
4247: CALL_OW 307
4251: IFFALSE 4229
// wait ( 0 0$0.3 ) ;
4253: LD_INT 10
4255: PPUSH
4256: CALL_OW 67
// ComEnterUnit ( driver , flame ) ;
4260: LD_VAR 0 6
4264: PPUSH
4265: LD_INT 262
4267: PPUSH
4268: CALL_OW 120
// AddComAttackPlace ( driver , 115 , 41 ) ;
4272: LD_VAR 0 6
4276: PPUSH
4277: LD_INT 115
4279: PPUSH
4280: LD_INT 41
4282: PPUSH
4283: CALL_OW 176
// wait ( 0 0$2 ) ;
4287: LD_INT 70
4289: PPUSH
4290: CALL_OW 67
// Say ( Heike , DH-Flamer-6 ) ;
4294: LD_EXP 6
4298: PPUSH
4299: LD_STRING DH-Flamer-6
4301: PPUSH
4302: CALL_OW 88
// wait ( 0 0$1 ) ;
4306: LD_INT 35
4308: PPUSH
4309: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
4313: LD_EXP 7
4317: PPUSH
4318: LD_EXP 6
4322: PPUSH
4323: CALL_OW 119
// Say ( Omar , DO-Flamer-7 ) ;
4327: LD_EXP 7
4331: PPUSH
4332: LD_STRING DO-Flamer-7
4334: PPUSH
4335: CALL_OW 88
// ChangeMap ( 1 , %_cont ) ;
4339: LD_INT 1
4341: PPUSH
4342: LD_STRING %_cont
4344: PPUSH
4345: CALL_OW 340
// Video ( false ) ;
4349: LD_INT 0
4351: PPUSH
4352: CALL 816 0 1
// end ; end ;
4356: LD_VAR 0 1
4360: RET
// every 0 0$1 trigger GetLives ( flame ) < 1000 do
4361: LD_INT 262
4363: PPUSH
4364: CALL_OW 256
4368: PUSH
4369: LD_INT 1000
4371: LESS
4372: IFFALSE 4388
4374: GO 4376
4376: DISABLE
// begin enable ;
4377: ENABLE
// SetLives ( flame , 777 ) ;
4378: LD_INT 262
4380: PPUSH
4381: LD_INT 777
4383: PPUSH
4384: CALL_OW 234
// end ; end_of_file
4388: END
// on VehicleConstructed ( veh , fac ) do begin AddComMoveXY ( veh , 170 , 92 ) ;
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 170
4396: PPUSH
4397: LD_INT 92
4399: PPUSH
4400: CALL_OW 171
// end ;
4404: PPOPN 2
4406: END
// on DialogueSkipped ( dialogue ) do begin ChangeMap ( 1 , %_cont ) ;
4407: LD_INT 1
4409: PPUSH
4410: LD_STRING %_cont
4412: PPUSH
4413: CALL_OW 340
// end ;
4417: PPOPN 1
4419: END
