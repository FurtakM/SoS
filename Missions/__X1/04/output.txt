// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// PrepareNature ;
   8: CALL 461 0 0
// PrepareArabian ;
  12: CALL 1776 0 0
// Action ;
  16: CALL 2003 0 0
// end ;
  20: END
// export debug , prefix , hasAll , deadCounter , ibrahimHasEscaped ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := true ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 1
  31: ST_TO_ADDR
// prefix := 03_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 03_
  39: ST_TO_ADDR
// hasAll := LoadVariable ( 03_HasAll , true ) ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 03_HasAll
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// deadCounter := LoadVariable ( 03_DeadCounter , 0 ) ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_STRING 03_DeadCounter
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// ibrahimHasEscaped := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_IbrahimHasEscaped
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// end ; end_of_file
  88: LD_VAR 0 1
  92: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  93: LD_INT 0
  95: PPUSH
  96: PPUSH
// if exist_mode then
  97: LD_VAR 0 2
 101: IFFALSE 126
// unit := CreateCharacter ( prefix & ident ) else
 103: LD_ADDR_VAR 0 5
 107: PUSH
 108: LD_VAR 0 3
 112: PUSH
 113: LD_VAR 0 1
 117: STR
 118: PPUSH
 119: CALL_OW 34
 123: ST_TO_ADDR
 124: GO 141
// unit := NewCharacter ( ident ) ;
 126: LD_ADDR_VAR 0 5
 130: PUSH
 131: LD_VAR 0 1
 135: PPUSH
 136: CALL_OW 25
 140: ST_TO_ADDR
// result := unit ;
 141: LD_ADDR_VAR 0 4
 145: PUSH
 146: LD_VAR 0 5
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 4
 155: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 156: LD_INT 0
 158: PPUSH
// uc_side := side ;
 159: LD_ADDR_OWVAR 20
 163: PUSH
 164: LD_VAR 0 1
 168: ST_TO_ADDR
// uc_nation := nation ;
 169: LD_ADDR_OWVAR 21
 173: PUSH
 174: LD_VAR 0 2
 178: ST_TO_ADDR
// vc_chassis := chassis ;
 179: LD_ADDR_OWVAR 37
 183: PUSH
 184: LD_VAR 0 3
 188: ST_TO_ADDR
// vc_engine := engine ;
 189: LD_ADDR_OWVAR 39
 193: PUSH
 194: LD_VAR 0 4
 198: ST_TO_ADDR
// vc_control := control ;
 199: LD_ADDR_OWVAR 38
 203: PUSH
 204: LD_VAR 0 5
 208: ST_TO_ADDR
// vc_weapon := weapon ;
 209: LD_ADDR_OWVAR 40
 213: PUSH
 214: LD_VAR 0 6
 218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 219: LD_ADDR_OWVAR 41
 223: PUSH
 224: LD_VAR 0 7
 228: ST_TO_ADDR
// result := CreateVehicle ;
 229: LD_ADDR_VAR 0 8
 233: PUSH
 234: CALL_OW 45
 238: ST_TO_ADDR
// end ;
 239: LD_VAR 0 8
 243: RET
// export function SayX ( units , ident ) ; var i ; begin
 244: LD_INT 0
 246: PPUSH
 247: PPUSH
// result := false ;
 248: LD_ADDR_VAR 0 3
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// if not units then
 256: LD_VAR 0 1
 260: NOT
 261: IFFALSE 265
// exit ;
 263: GO 319
// for i in units do
 265: LD_ADDR_VAR 0 4
 269: PUSH
 270: LD_VAR 0 1
 274: PUSH
 275: FOR_IN
 276: IFFALSE 317
// if IsOk ( i ) then
 278: LD_VAR 0 4
 282: PPUSH
 283: CALL_OW 302
 287: IFFALSE 315
// begin Say ( i , ident ) ;
 289: LD_VAR 0 4
 293: PPUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 88
// result := i ;
 303: LD_ADDR_VAR 0 3
 307: PUSH
 308: LD_VAR 0 4
 312: ST_TO_ADDR
// break ;
 313: GO 317
// end ;
 315: GO 275
 317: POP
 318: POP
// end ;
 319: LD_VAR 0 3
 323: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
// InitUc ;
 328: CALL_OW 18
// InitHc ;
 332: CALL_OW 19
// uc_side := 0 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// uc_nation := 0 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// for i = 1 to amount do
 352: LD_ADDR_VAR 0 4
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_VAR 0 2
 366: PUSH
 367: FOR_TO
 368: IFFALSE 450
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 370: LD_ADDR_OWVAR 29
 374: PUSH
 375: LD_INT 9
 377: PPUSH
 378: LD_INT 12
 380: PPUSH
 381: CALL_OW 12
 385: PUSH
 386: LD_INT 9
 388: PPUSH
 389: LD_INT 12
 391: PPUSH
 392: CALL_OW 12
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 401: LD_ADDR_OWVAR 35
 405: PUSH
 406: LD_INT 1
 408: NEG
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL_OW 12
 417: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 418: LD_INT 0
 420: PPUSH
 421: LD_INT 12
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 431: CALL_OW 44
 435: PPUSH
 436: LD_VAR 0 1
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: CALL_OW 49
// end ;
 448: GO 367
 450: POP
 451: POP
// InitHc ;
 452: CALL_OW 19
// end ;
 456: LD_VAR 0 3
 460: RET
// export function PrepareNature ; var i ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 465: LD_INT 1
 467: PPUSH
 468: LD_INT 4
 470: PUSH
 471: LD_INT 4
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 324 0 2
// for i := 1 to 3 do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 3
 504: PUSH
 505: FOR_TO
 506: IFFALSE 541
// begin hc_class := 21 ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_INT 21
 515: ST_TO_ADDR
// hc_gallery :=  ;
 516: LD_ADDR_OWVAR 33
 520: PUSH
 521: LD_STRING 
 523: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 524: CALL_OW 44
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL_OW 49
// end ;
 539: GO 505
 541: POP
 542: POP
// for i := 1 to 2 do
 543: LD_ADDR_VAR 0 2
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_INT 2
 555: PUSH
 556: FOR_TO
 557: IFFALSE 592
// begin hc_class := 18 ;
 559: LD_ADDR_OWVAR 28
 563: PUSH
 564: LD_INT 18
 566: ST_TO_ADDR
// hc_gallery :=  ;
 567: LD_ADDR_OWVAR 33
 571: PUSH
 572: LD_STRING 
 574: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 575: CALL_OW 44
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 49
// end ;
 590: GO 556
 592: POP
 593: POP
// for i := 1 to 2 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 2
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 13 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 13
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// end ;
 645: LD_VAR 0 1
 649: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 650: LD_INT 0
 652: PPUSH
 653: PPUSH
 654: PPUSH
// if not observer or not unit then
 655: LD_VAR 0 1
 659: NOT
 660: PUSH
 661: LD_VAR 0 2
 665: NOT
 666: OR
 667: IFFALSE 671
// exit ;
 669: GO 719
// if not See ( GetSide ( observer ) , unit ) then
 671: LD_VAR 0 1
 675: PPUSH
 676: CALL_OW 255
 680: PPUSH
 681: LD_VAR 0 2
 685: PPUSH
 686: CALL_OW 292
 690: NOT
 691: IFFALSE 695
// exit ;
 693: GO 719
// result := GetDistUnits ( observer , unit ) < 12 ;
 695: LD_ADDR_VAR 0 3
 699: PUSH
 700: LD_VAR 0 1
 704: PPUSH
 705: LD_VAR 0 2
 709: PPUSH
 710: CALL_OW 296
 714: PUSH
 715: LD_INT 12
 717: LESS
 718: ST_TO_ADDR
// end ;
 719: LD_VAR 0 3
 723: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 724: LD_INT 0
 726: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 1
 734: ARRAY
 735: PPUSH
 736: LD_VAR 0 2
 740: PUSH
 741: LD_INT 2
 743: ARRAY
 744: PPUSH
 745: CALL_OW 488
 749: PUSH
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: CALL_OW 428
 772: PUSH
 773: LD_INT 0
 775: EQUAL
 776: AND
 777: IFFALSE 811
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 779: LD_VAR 0 1
 783: PPUSH
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 1
 791: ARRAY
 792: PPUSH
 793: LD_VAR 0 2
 797: PUSH
 798: LD_INT 2
 800: ARRAY
 801: PPUSH
 802: LD_VAR 0 3
 806: PPUSH
 807: CALL_OW 48
// end ;
 811: LD_VAR 0 4
 815: RET
// export function Video ( mode ) ; begin
 816: LD_INT 0
 818: PPUSH
// ingame_video = mode ;
 819: LD_ADDR_OWVAR 52
 823: PUSH
 824: LD_VAR 0 1
 828: ST_TO_ADDR
// interface_hidden = mode ;
 829: LD_ADDR_OWVAR 54
 833: PUSH
 834: LD_VAR 0 1
 838: ST_TO_ADDR
// end ;
 839: LD_VAR 0 2
 843: RET
// export function ReverseArray ( array ) ; var i ; begin
 844: LD_INT 0
 846: PPUSH
 847: PPUSH
// if not array then
 848: LD_VAR 0 1
 852: NOT
 853: IFFALSE 857
// exit ;
 855: GO 915
// result := [ ] ;
 857: LD_ADDR_VAR 0 2
 861: PUSH
 862: EMPTY
 863: ST_TO_ADDR
// for i := 1 to array do
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: DOUBLE
 870: LD_INT 1
 872: DEC
 873: ST_TO_ADDR
 874: LD_VAR 0 1
 878: PUSH
 879: FOR_TO
 880: IFFALSE 913
// result := Insert ( result , 1 , array [ i ] ) ;
 882: LD_ADDR_VAR 0 2
 886: PUSH
 887: LD_VAR 0 2
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_VAR 0 1
 899: PUSH
 900: LD_VAR 0 3
 904: ARRAY
 905: PPUSH
 906: CALL_OW 2
 910: ST_TO_ADDR
 911: GO 879
 913: POP
 914: POP
// end ;
 915: LD_VAR 0 2
 919: RET
// export function ComExit ( unit ) ; begin
 920: LD_INT 0
 922: PPUSH
// result := IsInUnit ( unit ) ;
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: CALL_OW 310
 937: ST_TO_ADDR
// if not result then
 938: LD_VAR 0 2
 942: NOT
 943: IFFALSE 947
// exit ;
 945: GO 982
// if GetType ( result ) = unit_vehicle then
 947: LD_VAR 0 2
 951: PPUSH
 952: CALL_OW 247
 956: PUSH
 957: LD_INT 2
 959: EQUAL
 960: IFFALSE 973
// ComExitVehicle ( unit ) else
 962: LD_VAR 0 1
 966: PPUSH
 967: CALL_OW 121
 971: GO 982
// ComExitBuilding ( unit ) ;
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 122
// end ;
 982: LD_VAR 0 2
 986: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
// if not side or not nation then
 991: LD_VAR 0 1
 995: NOT
 996: PUSH
 997: LD_VAR 0 2
1001: NOT
1002: OR
1003: IFFALSE 1007
// exit ;
1005: GO 1771
// case nation of nation_american :
1007: LD_VAR 0 2
1011: PUSH
1012: LD_INT 1
1014: DOUBLE
1015: EQUAL
1016: IFTRUE 1020
1018: GO 1234
1020: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_INT 35
1028: PUSH
1029: LD_INT 45
1031: PUSH
1032: LD_INT 46
1034: PUSH
1035: LD_INT 47
1037: PUSH
1038: LD_INT 82
1040: PUSH
1041: LD_INT 83
1043: PUSH
1044: LD_INT 84
1046: PUSH
1047: LD_INT 85
1049: PUSH
1050: LD_INT 86
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: LD_INT 6
1061: PUSH
1062: LD_INT 15
1064: PUSH
1065: LD_INT 16
1067: PUSH
1068: LD_INT 7
1070: PUSH
1071: LD_INT 12
1073: PUSH
1074: LD_INT 13
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: LD_INT 14
1082: PUSH
1083: LD_INT 20
1085: PUSH
1086: LD_INT 21
1088: PUSH
1089: LD_INT 22
1091: PUSH
1092: LD_INT 25
1094: PUSH
1095: LD_INT 32
1097: PUSH
1098: LD_INT 27
1100: PUSH
1101: LD_INT 36
1103: PUSH
1104: LD_INT 69
1106: PUSH
1107: LD_INT 39
1109: PUSH
1110: LD_INT 34
1112: PUSH
1113: LD_INT 40
1115: PUSH
1116: LD_INT 48
1118: PUSH
1119: LD_INT 49
1121: PUSH
1122: LD_INT 50
1124: PUSH
1125: LD_INT 51
1127: PUSH
1128: LD_INT 52
1130: PUSH
1131: LD_INT 53
1133: PUSH
1134: LD_INT 54
1136: PUSH
1137: LD_INT 55
1139: PUSH
1140: LD_INT 56
1142: PUSH
1143: LD_INT 57
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: LD_INT 59
1151: PUSH
1152: LD_INT 60
1154: PUSH
1155: LD_INT 61
1157: PUSH
1158: LD_INT 62
1160: PUSH
1161: LD_INT 80
1163: PUSH
1164: LD_INT 82
1166: PUSH
1167: LD_INT 83
1169: PUSH
1170: LD_INT 84
1172: PUSH
1173: LD_INT 85
1175: PUSH
1176: LD_INT 86
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
1232: GO 1695
1234: LD_INT 2
1236: DOUBLE
1237: EQUAL
1238: IFTRUE 1242
1240: GO 1464
1242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1243: LD_ADDR_VAR 0 4
1247: PUSH
1248: LD_INT 35
1250: PUSH
1251: LD_INT 45
1253: PUSH
1254: LD_INT 46
1256: PUSH
1257: LD_INT 47
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 83
1265: PUSH
1266: LD_INT 84
1268: PUSH
1269: LD_INT 85
1271: PUSH
1272: LD_INT 87
1274: PUSH
1275: LD_INT 70
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: LD_INT 11
1283: PUSH
1284: LD_INT 3
1286: PUSH
1287: LD_INT 4
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 6
1295: PUSH
1296: LD_INT 15
1298: PUSH
1299: LD_INT 18
1301: PUSH
1302: LD_INT 7
1304: PUSH
1305: LD_INT 17
1307: PUSH
1308: LD_INT 8
1310: PUSH
1311: LD_INT 20
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 22
1319: PUSH
1320: LD_INT 72
1322: PUSH
1323: LD_INT 26
1325: PUSH
1326: LD_INT 69
1328: PUSH
1329: LD_INT 39
1331: PUSH
1332: LD_INT 40
1334: PUSH
1335: LD_INT 41
1337: PUSH
1338: LD_INT 42
1340: PUSH
1341: LD_INT 43
1343: PUSH
1344: LD_INT 48
1346: PUSH
1347: LD_INT 49
1349: PUSH
1350: LD_INT 50
1352: PUSH
1353: LD_INT 51
1355: PUSH
1356: LD_INT 52
1358: PUSH
1359: LD_INT 53
1361: PUSH
1362: LD_INT 54
1364: PUSH
1365: LD_INT 55
1367: PUSH
1368: LD_INT 56
1370: PUSH
1371: LD_INT 60
1373: PUSH
1374: LD_INT 61
1376: PUSH
1377: LD_INT 62
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: LD_INT 68
1388: PUSH
1389: LD_INT 81
1391: PUSH
1392: LD_INT 82
1394: PUSH
1395: LD_INT 83
1397: PUSH
1398: LD_INT 84
1400: PUSH
1401: LD_INT 85
1403: PUSH
1404: LD_INT 87
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: ST_TO_ADDR
1462: GO 1695
1464: LD_INT 3
1466: DOUBLE
1467: EQUAL
1468: IFTRUE 1472
1470: GO 1694
1472: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1473: LD_ADDR_VAR 0 4
1477: PUSH
1478: LD_INT 46
1480: PUSH
1481: LD_INT 47
1483: PUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 82
1492: PUSH
1493: LD_INT 83
1495: PUSH
1496: LD_INT 84
1498: PUSH
1499: LD_INT 85
1501: PUSH
1502: LD_INT 86
1504: PUSH
1505: LD_INT 11
1507: PUSH
1508: LD_INT 9
1510: PUSH
1511: LD_INT 20
1513: PUSH
1514: LD_INT 19
1516: PUSH
1517: LD_INT 21
1519: PUSH
1520: LD_INT 24
1522: PUSH
1523: LD_INT 22
1525: PUSH
1526: LD_INT 25
1528: PUSH
1529: LD_INT 28
1531: PUSH
1532: LD_INT 29
1534: PUSH
1535: LD_INT 30
1537: PUSH
1538: LD_INT 31
1540: PUSH
1541: LD_INT 37
1543: PUSH
1544: LD_INT 38
1546: PUSH
1547: LD_INT 32
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 33
1555: PUSH
1556: LD_INT 69
1558: PUSH
1559: LD_INT 39
1561: PUSH
1562: LD_INT 34
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 71
1570: PUSH
1571: LD_INT 23
1573: PUSH
1574: LD_INT 44
1576: PUSH
1577: LD_INT 48
1579: PUSH
1580: LD_INT 49
1582: PUSH
1583: LD_INT 50
1585: PUSH
1586: LD_INT 51
1588: PUSH
1589: LD_INT 52
1591: PUSH
1592: LD_INT 53
1594: PUSH
1595: LD_INT 54
1597: PUSH
1598: LD_INT 55
1600: PUSH
1601: LD_INT 56
1603: PUSH
1604: LD_INT 57
1606: PUSH
1607: LD_INT 58
1609: PUSH
1610: LD_INT 59
1612: PUSH
1613: LD_INT 63
1615: PUSH
1616: LD_INT 64
1618: PUSH
1619: LD_INT 65
1621: PUSH
1622: LD_INT 82
1624: PUSH
1625: LD_INT 83
1627: PUSH
1628: LD_INT 84
1630: PUSH
1631: LD_INT 85
1633: PUSH
1634: LD_INT 86
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
1692: GO 1695
1694: POP
// if state > - 1 and state < 3 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 1
1702: NEG
1703: GREATER
1704: PUSH
1705: LD_VAR 0 3
1709: PUSH
1710: LD_INT 3
1712: LESS
1713: AND
1714: IFFALSE 1771
// for i in result do
1716: LD_ADDR_VAR 0 5
1720: PUSH
1721: LD_VAR 0 4
1725: PUSH
1726: FOR_IN
1727: IFFALSE 1769
// if GetTech ( i , side ) <> state then
1729: LD_VAR 0 5
1733: PPUSH
1734: LD_VAR 0 1
1738: PPUSH
1739: CALL_OW 321
1743: PUSH
1744: LD_VAR 0 3
1748: NONEQUAL
1749: IFFALSE 1767
// result := result diff i ;
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: LD_VAR 0 4
1760: PUSH
1761: LD_VAR 0 5
1765: DIFF
1766: ST_TO_ADDR
1767: GO 1726
1769: POP
1770: POP
// end ; end_of_file
1771: LD_VAR 0 4
1775: RET
// export Heike , Omar , Shariff , Schulz , Farmer ; export function PrepareArabian ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SetBName ( ar_dep_n , dammam ) ;
1780: LD_INT 94
1782: PPUSH
1783: LD_STRING dammam
1785: PPUSH
1786: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep_n ) , mat_cans , 10000 ) ;
1790: LD_INT 94
1792: PPUSH
1793: CALL_OW 274
1797: PPUSH
1798: LD_INT 1
1800: PPUSH
1801: LD_INT 10000
1803: PPUSH
1804: CALL_OW 277
// uc_side := 2 ;
1808: LD_ADDR_OWVAR 20
1812: PUSH
1813: LD_INT 2
1815: ST_TO_ADDR
// uc_nation := 2 ;
1816: LD_ADDR_OWVAR 21
1820: PUSH
1821: LD_INT 2
1823: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1824: LD_ADDR_EXP 6
1828: PUSH
1829: LD_STRING Heike
1831: PPUSH
1832: LD_EXP 1
1836: NOT
1837: PPUSH
1838: LD_EXP 2
1842: PPUSH
1843: CALL 93 0 3
1847: ST_TO_ADDR
// uc_side := 5 ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_INT 5
1855: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1856: LD_ADDR_EXP 10
1860: PUSH
1861: LD_STRING Farmer
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: LD_STRING 
1869: PPUSH
1870: CALL 93 0 3
1874: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1875: LD_ADDR_EXP 7
1879: PUSH
1880: LD_STRING Omar
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: LD_STRING 
1888: PPUSH
1889: CALL 93 0 3
1893: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , false ,  ) ;
1894: LD_ADDR_EXP 9
1898: PUSH
1899: LD_STRING Schulz
1901: PPUSH
1902: LD_INT 0
1904: PPUSH
1905: LD_STRING 
1907: PPUSH
1908: CALL 93 0 3
1912: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1913: LD_ADDR_EXP 8
1917: PUSH
1918: LD_STRING Abdul
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: LD_STRING 
1926: PPUSH
1927: CALL 93 0 3
1931: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_INT 21
1939: PUSH
1940: LD_INT 3
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PPUSH
1947: CALL_OW 69
1951: PUSH
1952: FOR_IN
1953: IFFALSE 1996
// begin SetSide ( i , 5 ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_INT 5
1962: PPUSH
1963: CALL_OW 235
// PrepareHuman ( false , 1 , 1 ) ;
1967: LD_INT 0
1969: PPUSH
1970: LD_INT 1
1972: PPUSH
1973: LD_INT 1
1975: PPUSH
1976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1980: CALL_OW 44
1984: PPUSH
1985: LD_VAR 0 2
1989: PPUSH
1990: CALL_OW 52
// end ;
1994: GO 1952
1996: POP
1997: POP
// end ; end_of_file
1998: LD_VAR 0 1
2002: RET
// export function Action ; var killScene , bonus , un , i , driver , mechs ; begin
2003: LD_INT 0
2005: PPUSH
2006: PPUSH
2007: PPUSH
2008: PPUSH
2009: PPUSH
2010: PPUSH
2011: PPUSH
// bonus := 0 ;
2012: LD_ADDR_VAR 0 3
2016: PUSH
2017: LD_INT 0
2019: ST_TO_ADDR
// if hasAll then
2020: LD_EXP 3
2024: IFFALSE 2034
// bonus := 1 ;
2026: LD_ADDR_VAR 0 3
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// killScene := deadCounter > [ 4 , 3 , 2 ] [ Difficulty ] + bonus ;
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: LD_EXP 4
2043: PUSH
2044: LD_INT 4
2046: PUSH
2047: LD_INT 3
2049: PUSH
2050: LD_INT 2
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_OWVAR 67
2062: ARRAY
2063: PUSH
2064: LD_VAR 0 3
2068: PLUS
2069: GREATER
2070: ST_TO_ADDR
// PlaceSeeing ( 118 , 11 , 2 , - 37963 ) ;
2071: LD_INT 118
2073: PPUSH
2074: LD_INT 11
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 37963
2082: NEG
2083: PPUSH
2084: CALL_OW 330
// if killScene then
2088: LD_VAR 0 2
2092: IFFALSE 2396
// begin RemoveUnit ( flame ) ;
2094: LD_INT 262
2096: PPUSH
2097: CALL_OW 64
// InGameOn ;
2101: CALL_OW 8
// CenterNowOnXY ( 81 , 4 ) ;
2105: LD_INT 81
2107: PPUSH
2108: LD_INT 4
2110: PPUSH
2111: CALL_OW 86
// PlaceUnitXY ( Omar , 84 , 6 , false ) ;
2115: LD_EXP 7
2119: PPUSH
2120: LD_INT 84
2122: PPUSH
2123: LD_INT 6
2125: PPUSH
2126: LD_INT 0
2128: PPUSH
2129: CALL_OW 48
// PlaceUnitXY ( Heike , 81 , 4 , false ) ;
2133: LD_EXP 6
2137: PPUSH
2138: LD_INT 81
2140: PPUSH
2141: LD_INT 4
2143: PPUSH
2144: LD_INT 0
2146: PPUSH
2147: CALL_OW 48
// SetLives ( Heike , 251 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_INT 251
2158: PPUSH
2159: CALL_OW 234
// SetClass ( Heike , 2 ) ;
2163: LD_EXP 6
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL_OW 336
// ComTurnUnit ( Heike , Omar ) ;
2175: LD_EXP 6
2179: PPUSH
2180: LD_EXP 7
2184: PPUSH
2185: CALL_OW 119
// ComTurnUnit ( Omar , Heike ) ;
2189: LD_EXP 7
2193: PPUSH
2194: LD_EXP 6
2198: PPUSH
2199: CALL_OW 119
// for i := 1 to 3 do
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: DOUBLE
2209: LD_INT 1
2211: DEC
2212: ST_TO_ADDR
2213: LD_INT 3
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2321
// begin uc_side := 5 ;
2219: LD_ADDR_OWVAR 20
2223: PUSH
2224: LD_INT 5
2226: ST_TO_ADDR
// uc_nation := 2 ;
2227: LD_ADDR_OWVAR 21
2231: PUSH
2232: LD_INT 2
2234: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2235: LD_INT 0
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: LD_INT 1
2243: PPUSH
2244: CALL_OW 380
// un := CreateHuman ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: CALL_OW 44
2257: ST_TO_ADDR
// PlaceUnitXY ( un , 86 + 1 * ( i - 1 ) , 3 + 2 * ( i - 1 ) , false ) ;
2258: LD_VAR 0 4
2262: PPUSH
2263: LD_INT 86
2265: PUSH
2266: LD_INT 1
2268: PUSH
2269: LD_VAR 0 5
2273: PUSH
2274: LD_INT 1
2276: MINUS
2277: MUL
2278: PLUS
2279: PPUSH
2280: LD_INT 3
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: LD_VAR 0 5
2290: PUSH
2291: LD_INT 1
2293: MINUS
2294: MUL
2295: PLUS
2296: PPUSH
2297: LD_INT 0
2299: PPUSH
2300: CALL_OW 48
// ComTurnXY ( un , 81 , 4 ) ;
2304: LD_VAR 0 4
2308: PPUSH
2309: LD_INT 81
2311: PPUSH
2312: LD_INT 4
2314: PPUSH
2315: CALL_OW 118
// end ;
2319: GO 2216
2321: POP
2322: POP
// wait ( 0 0$2 ) ;
2323: LD_INT 70
2325: PPUSH
2326: CALL_OW 67
// Say ( Omar , DO-death-1 ) ;
2330: LD_EXP 7
2334: PPUSH
2335: LD_STRING DO-death-1
2337: PPUSH
2338: CALL_OW 88
// Say ( Omar , DO-death-2 ) ;
2342: LD_EXP 7
2346: PPUSH
2347: LD_STRING DO-death-2
2349: PPUSH
2350: CALL_OW 88
// Say ( Omar , DO-death-3 ) ;
2354: LD_EXP 7
2358: PPUSH
2359: LD_STRING DO-death-3
2361: PPUSH
2362: CALL_OW 88
// ComAttackUnit ( Omar , Heike ) ;
2366: LD_EXP 7
2370: PPUSH
2371: LD_EXP 6
2375: PPUSH
2376: CALL_OW 115
// wait ( 0 0$2 ) ;
2380: LD_INT 70
2382: PPUSH
2383: CALL_OW 67
// YouLost ( Penalty ) ;
2387: LD_STRING Penalty
2389: PPUSH
2390: CALL_OW 104
// end else
2394: GO 3086
// begin mechs := [ ] ;
2396: LD_ADDR_VAR 0 7
2400: PUSH
2401: EMPTY
2402: ST_TO_ADDR
// InGameOn ;
2403: CALL_OW 8
// CenterNowOnXY ( 124 , 15 ) ;
2407: LD_INT 124
2409: PPUSH
2410: LD_INT 15
2412: PPUSH
2413: CALL_OW 86
// ComTurnXY ( Heike , 123 , 16 ) ;
2417: LD_EXP 6
2421: PPUSH
2422: LD_INT 123
2424: PPUSH
2425: LD_INT 16
2427: PPUSH
2428: CALL_OW 118
// PlaceHumanInUnit ( Shariff , arBar1 ) ;
2432: LD_EXP 8
2436: PPUSH
2437: LD_INT 118
2439: PPUSH
2440: CALL_OW 52
// PlaceHumanInUnit ( Omar , arBar1 ) ;
2444: LD_EXP 7
2448: PPUSH
2449: LD_INT 118
2451: PPUSH
2452: CALL_OW 52
// PlaceUnitXY ( Heike , 124 , 12 , false ) ;
2456: LD_EXP 6
2460: PPUSH
2461: LD_INT 124
2463: PPUSH
2464: LD_INT 12
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 48
// PrepareHuman ( false , 1 , 1 ) ;
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: LD_INT 1
2482: PPUSH
2483: CALL_OW 380
// un := CreateHuman ;
2487: LD_ADDR_VAR 0 4
2491: PUSH
2492: CALL_OW 44
2496: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 17 , false ) ;
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_INT 124
2504: PPUSH
2505: LD_INT 17
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL_OW 48
// ComTurnXY ( un , 124 , 16 ) ;
2515: LD_VAR 0 4
2519: PPUSH
2520: LD_INT 124
2522: PPUSH
2523: LD_INT 16
2525: PPUSH
2526: CALL_OW 118
// PrepareHuman ( false , 3 , 1 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 380
// un := CreateHuman ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: CALL_OW 44
2552: ST_TO_ADDR
// PlaceUnitXY ( un , 134 , 13 , false ) ;
2553: LD_VAR 0 4
2557: PPUSH
2558: LD_INT 134
2560: PPUSH
2561: LD_INT 13
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: CALL_OW 48
// ComTurnXY ( un , 136 , 15 ) ;
2571: LD_VAR 0 4
2575: PPUSH
2576: LD_INT 136
2578: PPUSH
2579: LD_INT 15
2581: PPUSH
2582: CALL_OW 118
// mechs := Replace ( mechs , 1 , un ) ;
2586: LD_ADDR_VAR 0 7
2590: PUSH
2591: LD_VAR 0 7
2595: PPUSH
2596: LD_INT 1
2598: PPUSH
2599: LD_VAR 0 4
2603: PPUSH
2604: CALL_OW 1
2608: ST_TO_ADDR
// PrepareHuman ( false , 3 , 1 ) ;
2609: LD_INT 0
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: LD_INT 1
2617: PPUSH
2618: CALL_OW 380
// un := CreateHuman ;
2622: LD_ADDR_VAR 0 4
2626: PUSH
2627: CALL_OW 44
2631: ST_TO_ADDR
// PlaceUnitXY ( un , 136 , 15 , false ) ;
2632: LD_VAR 0 4
2636: PPUSH
2637: LD_INT 136
2639: PPUSH
2640: LD_INT 15
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 48
// ComTurnXY ( un , 134 , 13 ) ;
2650: LD_VAR 0 4
2654: PPUSH
2655: LD_INT 134
2657: PPUSH
2658: LD_INT 13
2660: PPUSH
2661: CALL_OW 118
// mechs := Replace ( mechs , 2 , un ) ;
2665: LD_ADDR_VAR 0 7
2669: PUSH
2670: LD_VAR 0 7
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: LD_VAR 0 4
2682: PPUSH
2683: CALL_OW 1
2687: ST_TO_ADDR
// PrepareHuman ( false , 1 , 1 ) ;
2688: LD_INT 0
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: LD_INT 1
2696: PPUSH
2697: CALL_OW 380
// un := CreateHuman ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: CALL_OW 44
2710: ST_TO_ADDR
// PlaceUnitXY ( un , 112 , 36 , false ) ;
2711: LD_VAR 0 4
2715: PPUSH
2716: LD_INT 112
2718: PPUSH
2719: LD_INT 36
2721: PPUSH
2722: LD_INT 0
2724: PPUSH
2725: CALL_OW 48
// ComTurnUnit ( un , flame ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 262
2736: PPUSH
2737: CALL_OW 119
// PrepareHuman ( false , 3 , 1 ) ;
2741: LD_INT 0
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: LD_INT 1
2749: PPUSH
2750: CALL_OW 380
// driver := CreateHuman ;
2754: LD_ADDR_VAR 0 6
2758: PUSH
2759: CALL_OW 44
2763: ST_TO_ADDR
// PlaceUnitXY ( driver , 115 , 33 , false ) ;
2764: LD_VAR 0 6
2768: PPUSH
2769: LD_INT 115
2771: PPUSH
2772: LD_INT 33
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: CALL_OW 48
// for i := 1 to 3 do
2782: LD_ADDR_VAR 0 5
2786: PUSH
2787: DOUBLE
2788: LD_INT 1
2790: DEC
2791: ST_TO_ADDR
2792: LD_INT 3
2794: PUSH
2795: FOR_TO
2796: IFFALSE 2856
// begin PrepareHuman ( false , 4 , 3 ) ;
2798: LD_INT 0
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: LD_INT 3
2806: PPUSH
2807: CALL_OW 380
// un := CreateHuman ;
2811: LD_ADDR_VAR 0 4
2815: PUSH
2816: CALL_OW 44
2820: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ arLab1 , arLab2 ] [ i mod 2 + 1 ] ) ;
2821: LD_VAR 0 4
2825: PPUSH
2826: LD_INT 96
2828: PUSH
2829: LD_INT 97
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: LD_VAR 0 5
2840: PUSH
2841: LD_INT 2
2843: MOD
2844: PUSH
2845: LD_INT 1
2847: PLUS
2848: ARRAY
2849: PPUSH
2850: CALL_OW 52
// end ;
2854: GO 2795
2856: POP
2857: POP
// SetSpecResearch ( arLab1 , 100 , false ) ;
2858: LD_INT 96
2860: PPUSH
2861: LD_INT 100
2863: PPUSH
2864: LD_INT 0
2866: PPUSH
2867: CALL_OW 486
// SetSpecResearch ( arLab2 , 100 , false ) ;
2871: LD_INT 97
2873: PPUSH
2874: LD_INT 100
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL_OW 486
// wait ( 0 0$2 ) ;
2884: LD_INT 70
2886: PPUSH
2887: CALL_OW 67
// PlaceHumanInUnit ( Schulz , schulzVeh ) ;
2891: LD_EXP 9
2895: PPUSH
2896: LD_INT 267
2898: PPUSH
2899: CALL_OW 52
// ComMoveXY ( Schulz , 115 , 21 ) ;
2903: LD_EXP 9
2907: PPUSH
2908: LD_INT 115
2910: PPUSH
2911: LD_INT 21
2913: PPUSH
2914: CALL_OW 111
// AddComExitVehicle ( Schulz ) ;
2918: LD_EXP 9
2922: PPUSH
2923: CALL_OW 181
// AddComMoveXY ( Schulz , 118 , 14 ) ;
2927: LD_EXP 9
2931: PPUSH
2932: LD_INT 118
2934: PPUSH
2935: LD_INT 14
2937: PPUSH
2938: CALL_OW 171
// AddComTurnUnit ( Schulz , Shariff ) ;
2942: LD_EXP 9
2946: PPUSH
2947: LD_EXP 8
2951: PPUSH
2952: CALL_OW 179
// ComExitBuilding ( [ Omar , Shariff ] ) ;
2956: LD_EXP 7
2960: PUSH
2961: LD_EXP 8
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL_OW 122
// AddComMoveXY ( Omar , 124 , 15 ) ;
2974: LD_EXP 7
2978: PPUSH
2979: LD_INT 124
2981: PPUSH
2982: LD_INT 15
2984: PPUSH
2985: CALL_OW 171
// AddComMoveXY ( Shariff , 123 , 15 ) ;
2989: LD_EXP 8
2993: PPUSH
2994: LD_INT 123
2996: PPUSH
2997: LD_INT 15
2999: PPUSH
3000: CALL_OW 171
// AddComTurnUnit ( [ Omar , Shariff ] , Heike ) ;
3004: LD_EXP 7
3008: PUSH
3009: LD_EXP 8
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: LD_EXP 6
3022: PPUSH
3023: CALL_OW 179
// wait ( 0 0$1 ) ;
3027: LD_INT 35
3029: PPUSH
3030: CALL_OW 67
// Say ( Shariff , DShar-intro-1 ) ;
3034: LD_EXP 8
3038: PPUSH
3039: LD_STRING DShar-intro-1
3041: PPUSH
3042: CALL_OW 88
// Say ( Omar , DO-intro-1 ) ;
3046: LD_EXP 7
3050: PPUSH
3051: LD_STRING DO-intro-1
3053: PPUSH
3054: CALL_OW 88
// Say ( Omar , DO-intro-2 ) ;
3058: LD_EXP 7
3062: PPUSH
3063: LD_STRING DO-intro-2
3065: PPUSH
3066: CALL_OW 88
// Say ( Omar , DO-intro-3 ) ;
3070: LD_EXP 7
3074: PPUSH
3075: LD_STRING DO-intro-3
3077: PPUSH
3078: CALL_OW 88
// InGameOff ;
3082: CALL_OW 9
// end ; end ;
3086: LD_VAR 0 1
3090: RET
// every 0 0$1 trigger GetLives ( flame ) < 1000 do
3091: LD_INT 262
3093: PPUSH
3094: CALL_OW 256
3098: PUSH
3099: LD_INT 1000
3101: LESS
3102: IFFALSE 3118
3104: GO 3106
3106: DISABLE
// begin enable ;
3107: ENABLE
// SetLives ( flame , 777 ) ;
3108: LD_INT 262
3110: PPUSH
3111: LD_INT 777
3113: PPUSH
3114: CALL_OW 234
// end ; end_of_file
3118: END
// on VehicleConstructed ( veh , fac ) do begin AddComMoveXY ( veh , 170 , 92 ) ;
3119: LD_VAR 0 1
3123: PPUSH
3124: LD_INT 170
3126: PPUSH
3127: LD_INT 92
3129: PPUSH
3130: CALL_OW 171
// end ;
3134: PPOPN 2
3136: END
